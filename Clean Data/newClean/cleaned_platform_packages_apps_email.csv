ProjectName,methodName,methodBody
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\Device.java,get consistent device id,"public static  string   (  context context )  {  final  string device id ;  try  {   telephony manager tm =  (  telephony manager ) context . get system service (  context . telephony   service )  ;  if  ( tm  =  =  null )   {  return null ;   }  device id = tm . get device id (  )  ;  if  ( device id  =  =  null )   {  return null ;   }   }  catch  (   exception e )   {   log utils . d (  logging . log   tag "" error in  telephony manager . get device id (  ) : ""  +  e . get message (  )  )  ;  return null ;   }  return  utility . get small hash ( device id )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\Device.java,get device id,static public synchronized  string   (  context context )  throws io exception  {  if  ( s device id  =  =  null )   {  s device id = get device id internal ( context )  ;   }  return s device id ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\Device.java,get device id internal,"static private  string   (  context context )  throws io exception  {  if  ( context  =  =  null )   {  throw new  illegal state exception ( ""get device id requires a  context"" )  ;   }   file f = context . get file stream path ( ""device name"" )  ;   buffered reader rdr = null ;   string id ;  if  ( f . exists (  )  )   {  if  ( f . can read (  )  )   {  rdr = new  buffered reader ( new  file reader ( f )  128 )  ;  id = rdr . read line (  )  ;  rdr . close (  )  ;  if  ( id  =  =  null )   {  if  (  ! f . delete (  )  )   {   log utils . e (  logging . log   tag "" can't delete null device name file ;  try overwrite . "" )  ;   }   }  else  {  return id ;   }   }  else  {   log utils . w (  logging . log   tag f . get absolute path (  )   +  "":  file exists  but can't read ? ""  +  ""  trying to remove . "" )  ;  if  (  ! f . delete (  )  )   {   log utils . w (  logging . log   tag "" remove failed .   tring to overwrite . "" )  ;   }   }   }   buffered writer w = new  buffered writer ( new  file writer ( f )  128 )  ;  final  string consistent device id = get consistent device id ( context )  ;  if  ( consistent device id  !  =  null )   {  id = ""androidc""  +  consistent device id ;   }  else  {  id = ""android""  +   system . current time millis (  )  ;   }  w . write ( id )  ;  w . close (  )  ;  return id ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\internet\Rfc822Output.java,build body text,static  string[]   (  body body boolean use smart reply )  {  if  ( body  =  =  null )   {  return new  string[2] ;   }  final  string[] message body = new  string[] { body . m text content body . m html content }  ;  final int pos = body . m quoted text start pos ;  if  ( use smart reply && pos  >  0 )   {  if  ( message body[0]  !  =  null )   {  if  ( pos  <  message body[0] . length (  )  )   {  message body[0] = message body[0] . substring ( 0 pos )  ;   }   }  else if  ( message body[1]  !  =  null )   {  if  ( pos  <  message body[1] . length (  )  )   {  message body[1] = message body[1] . substring ( 0 pos )  ;   }   }   }  return message body ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\internet\Rfc822Output.java,get html body,static  string   (  string html )  {  final  matcher match = body   pattern . matcher ( html )  ;  if  ( match . find (  )  )   {  return match . group ( body   pattern   group )  ;   }  else  {  return html ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\internet\Rfc822Output.java,get next boundary,"static  string   (  )  {  final  string builder boundary = new  string builder (  )  ;  boundary . append ( "" -  -    com . android . email   "" )  . append (  system . nano time (  )  )  ;  synchronized  (  rfc822 output . class )   {  boundary . append ( s boundary digit )  ;  s boundary digit =  ( byte )  (  ( s boundary digit  +  1 )  % 10 )  ;   }  return boundary . to string (  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\internet\Rfc822Output.java,write address header,"private static void   (  writer writer  string name  string value )  throws io exception  {  if  ( value  !  =  null && value . length (  )   >  0 )   {  writer . append ( name )  ;  writer . append ( "": "" )  ;  writer . append (  mime utility . fold (  address . reformat to header ( value )  name . length (  )   +  2 )  )  ;  writer . append ( ""\r\n"" )  ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\internet\Rfc822Output.java,write boundary,"private static void   (  writer writer  string boundary boolean end )  throws io exception  {  writer . append ( "" -  - "" )  ;  writer . append ( boundary )  ;  if  ( end )   {  writer . append ( "" -  - "" )  ;   }  writer . append ( ""\r\n"" )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\internet\Rfc822Output.java,write encoded header,"private static void   (  writer writer  string name  string value )  throws io exception  {  if  ( value  !  =  null && value . length (  )   >  0 )   {  writer . append ( name )  ;  writer . append ( "": "" )  ;  writer . append (  mime utility . fold and encode2 ( value name . length (  )   +  2 )  )  ;  writer . append ( ""\r\n"" )  ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\internet\Rfc822Output.java,write header,"private static void   (  writer writer  string name  string value )  throws io exception  {  if  ( value  !  =  null && value . length (  )   >  0 )   {  writer . append ( name )  ;  writer . append ( "": "" )  ;  writer . append ( value )  ;  writer . append ( ""\r\n"" )  ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\internet\Rfc822Output.java,write one attachment,"private static void   (  context context  writer writer  output stream out  attachment attachment )  throws io exception   messaging exception  {  write header ( writer "" content -  type"" attachment . m mime type  +  "" ; \n name = \""""  +  attachment . m file name +  ""\"""" )  ;  write header ( writer "" content -  transfer -  encoding"" ""base64"" )  ;  if  (  ( attachment . m flags &  attachment . flag   ics   alternative   part )   =  =  0 )   {  write header ( writer "" content -  disposition"" ""attachment ; ""  +  ""\n filename = \""""  +  attachment . m file name  +  ""\"" ; "" +  ""\n size = "" +   long . to string ( attachment . m size )  )  ;   }  if  ( attachment . m content id  !  =  null )   {  write header ( writer "" content - id"" attachment . m content id )  ;   }  writer . append ( ""\r\n"" )  ;   input stream in stream = null ;  try  {  if  ( attachment . m content bytes  !  =  null )   {  in stream = new  byte array input stream ( attachment . m content bytes )  ;   }  else  {  final  string cached file = attachment . get cached file uri (  )  ;  if  (  !  text utils . is empty ( cached file )  )   {  final  uri cached file uri =  uri . parse ( cached file )  ;  try  {  in stream = context . get content resolver (  )  . open input stream ( cached file uri )  ;   }  catch  (   file not found exception e )   {  in stream = null ;   log utils . d ( tag "" rfc822 output#write one attachment (  )   failed to load""  +  ""cached file  falling back to: %s"" attachment . get content uri (  )  )  ;   }   }  if  ( in stream  =  =  null )   {  final  uri file uri =  uri . parse ( attachment . get content uri (  )  )  ;  in stream = context . get content resolver (  )  . open input stream ( file uri )  ;   }   }  writer . flush (  )  ;   base64 output stream base64 out = new  base64 output stream ( out  base64 . crlf |  base64 . no   close )  ;  io utils . copy ( in stream base64 out )  ;  base64 out . close (  )  ;  out . write ( '\r' )  ;  out . write ( '\n' )  ;  out . flush (  )  ;   }  catch  (   file not found exception fnfe )   {   log utils . e ( tag fnfe "" rfc822 output#write one attachment (  )    file not found exception""  +  ""when sending attachment"" )  ;   }  catch  (  io exception ioe )   {   log utils . e ( tag ioe "" rfc822 output#write one attachment (  )   io exception""  +  ""when sending attachment"" )  ;  throw new  messaging exception ( "" invalid attachment . "" ioe )  ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\internet\Rfc822Output.java,write text with headers,"private static void   (  writer writer  output stream out  string[] body text )  throws io exception  {  boolean html = false ;   string text = body text[index   body   text] ;  if  (  text utils . is empty ( text )  )   {  text = body text[index   body   html] ;  html = true ;   }  if  (  text utils . is empty ( text )  )   {  writer . write ( ""\r\n"" )  ;   }  else  {  final  string mime type = ""text / ""  +   ( html  ?  ""html"" : ""plain"" )  ;  write header ( writer "" content -  type"" mime type  +  "" ;  charset = utf - 8"" )  ;  write header ( writer "" content -  transfer -  encoding"" ""base64"" )  ;  writer . write ( ""\r\n"" )  ;  final byte[] text bytes = text . get bytes ( ""utf - 8"" )  ;  writer . flush (  )  ;  out . write (  base64 . encode ( text bytes  base64 . crlf )  )  ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\internet\Rfc822Output.java,write to,"public static void   (  context context  message message  output stream out boolean use smart reply boolean send bcc  list <  attachment >  attachments )  throws io exception   messaging exception  {  if  ( message  =  =  null )   {  return ;   }  final  output stream stream = new  buffered output stream ( out 1024 )  ;  final  writer writer = new  output stream writer ( stream )  ;  final  string date = date   format . format ( new  date ( message . m time stamp )  )  ;  write header ( writer "" date"" date )  ;  write encoded header ( writer "" subject"" message . m subject )  ;  write header ( writer "" message - id"" message . m message id )  ;  write address header ( writer "" from"" message . m from )  ;  write address header ( writer "" to"" message . m to )  ;  write address header ( writer "" cc"" message . m cc )  ;  if  ( send bcc )   {  write address header ( writer "" bcc"" message . m bcc )  ;   }  write address header ( writer "" reply -  to"" message . m reply to )  ;  write header ( writer ""mime -  version"" ""1 . 0"" )  ;  final  body body =  body . restore body with message id ( context message . m id )  ;  final  string[] body text = build body text ( body use smart reply )  ;  if  ( attachments  =  =  null )   {  attachments =  arrays . as list (  attachment . restore attachments with message id ( context message . m id )  )  ;   }  final boolean multipart = attachments . size (  )   >  0 ;  if  (  ! multipart )   {  write text with headers ( writer stream body text )  ;   }  else  {  final  string multipart boundary = get next boundary (  )  ;   string multipart type = ""mixed"" ;  if  ( attachments . size (  )   =  =  1 )   {  final int flags = attachments . get ( 0 )  . m flags ;  if  (  ( flags &  attachment . flag   ics   alternative   part )   !  =  0 )   {  multipart type = ""alternative"" ;   }   }  write header ( writer "" content -  type"" ""multipart / ""  +  multipart type  +  "" ;  boundary = \"""" +  multipart boundary +  ""\"""" )  ;  writer . write ( ""\r\n"" )  ;  if  ( body text[index   body   text]  !  =  null || body text[index   body   html]  !  =  null )   {  write boundary ( writer multipart boundary false )  ;  write text with headers ( writer stream body text )  ;   }  for  (  final  attachment att : attachments )   {  write boundary ( writer multipart boundary false )  ;  write one attachment ( context writer stream att )  ;  writer . write ( ""\r\n"" )  ;   }  write boundary ( writer multipart boundary true )  ;   }  writer . flush (  )  ;  out . flush (  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\HostAuth.java, host auth,public   (  parcel in )  {  m base uri = content   uri ;  m id = in . read long (  )  ;  m protocol = in . read string (  )  ;  m address = in . read string (  )  ;  m port = in . read int (  )  ;  m flags = in . read int (  )  ;  m login = in . read string (  )  ;  m password = in . read string (  )  ;  m domain = in . read string (  )  ;  m client cert alias = in . read string (  )  ;  if  (  ( m flags & flag   oauth )   !  =  0 )   {  m credential key = in . read long (  )  ;  m credential = new  credential ( in )  ;  if  ( m credential . equals (  credential . empty )  )   {  m credential = null ;   }   }  else  {  m credential key =  - 1 ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\HostAuth.java,create from parcel,@ override public  host auth   (  parcel in )  {  return new  host auth ( in )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\HostAuth.java,describe contents,@ override public int   (  )  {  return 0 ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\HostAuth.java,ensure loaded,public void   ( final  context context )  {  get credential ( context )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\HostAuth.java,equals,@ override public boolean   (  object o )  {  if  (  !  ( o instanceof  host auth )  )   {  return false ;   }   host auth that =  (  host auth ) o ;  return m port  =  =  that . m port && m id  =  =  that . m id && m flags  =  =  that . m flags &&  text 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\HostAuth.java,from json,"protected static  host auth   ( final json object json )  {  try  {  final  host auth h = new  host auth (  )  ;  h . m protocol = json . get string (  host auth columns . protocol )  ;  h . m address = json . get string (  host auth columns . address )  ;  h . m port = json . get int (  host auth columns . port )  ;  h . m flags = json . get int (  host auth columns . flags )  ;  h . m login = json . get string (  host auth columns . login )  ;  h . m password = json . opt string (  host auth columns . password )  ;  h . m domain = json . opt string (  host auth columns . domain )  ;  h . m client cert alias = json . opt string (  host auth columns . client   cert   alias )  ;  final json object cred json = json . optjson object ( json   tag   credential )  ;  if  ( cred json  !  =  null )   {  h . m credential =  credential . from json ( cred json )  ;   }  return h ;   }  catch  (  final json exception e )   {   log utils . d (  log utils . tag e "" exception while deserializing  host auth"" )  ;   }  return null ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\HostAuth.java,get credential,public  credential   (  context context )  {  if  ( m credential  =  =  null )   {  if  ( m credential key  >  =  0 )   {  m credential =  credential . restore credentials with id ( context m credential key )  ;   }   }  return m credential ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\HostAuth.java,get login,public  string[]   (  )  {   string trim user =  ( m login  !  =  null )   ?  m login . trim (  )  : null ;  return new  string[] { trim user m password }  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\HostAuth.java,get or create credential,public  credential   (  context context )  {  m flags| = flag   oauth ;  if  ( m credential  =  =  null )   {  if  ( m credential key  >  =  0 )   {  m credential =  credential . restore credentials with id ( context m credential key )  ;   }  else  {  m credential = new  credential (  )  ;   }   }  return m credential ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\HostAuth.java,get protocol from string,"public static  string   (  string uri string )  {  final  uri uri =  uri . parse ( uri string )  ;  final  string scheme = uri . get scheme (  )  ;  final  string[] scheme parts = scheme . split ( ""\\ + "" )  ;  return scheme parts[0] ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\HostAuth.java,get scheme flags,"public static int   (  string scheme )  {   string[] scheme parts = scheme . split ( ""\\ + "" )  ;  int flags =  host auth . flag   none ;  if  ( scheme parts . length  >  =  2 )   {   string part1 = scheme parts[1] ;  if  ( ""ssl"" . equals ( part1 )  )   {  flags| =  host auth . flag   ssl ;   }  else if  ( ""tls"" . equals ( part1 )  )   {  flags| =  host auth . flag   tls ;   }  if  ( scheme parts . length  >  =  3 )   {   string part2 = scheme parts[2] ;  if  ( scheme   trust   all   certs . equals ( part2 )  )   {  flags| =  host auth . flag   trust   all ;   }   }   }  return flags ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\HostAuth.java,get scheme string,"@ suppress warnings ( ""unused"" )  public static  string   (  string protocol int flags  string client alias )  {   string security = """" ;  switch  ( flags & user   config   mask )   {  case flag   ssl: security = "" + ssl + "" ;  break ;  case flag   ssl | "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\HostAuth.java,hash code,@ override public int   (  )  {  int hash code = 29 ;  if  ( m password  !  =  null )   {  hash code +  = m password . hash code (  )  ;   }  if  ( m client cert alias  !  =  null )   {  hash code +  =  ( m client cert alias . hash code (  )   <  <  8 )  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\HostAuth.java,init host auth,"public static void   (  )  {  content   uri =  uri . parse (  email content . content   uri  +  "" / hostauth"" )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\HostAuth.java,new array,@ override public  host auth[]   ( int size )  {  return new  host auth[size] ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\HostAuth.java,remove credential,public void   (  )  {  m credential = null ;  m credential key =  - 1 ;  m flags& = ~flag   oauth ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\HostAuth.java,restore,@ override public void   (  cursor cursor )  {  m base uri = content   uri ;  m id = cursor . get long ( content   id   column )  ;  m protocol = cursor . get string ( content   protocol   column )  ;  m address = cursor . get string ( content   address  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\HostAuth.java,restore host auth with id,public static  host auth   (  context context long id )  {  return  email content . restore content with id ( context  host auth . class  host auth . content   uri  host auth . content   projection id )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\HostAuth.java,set connection,"public void   (  string scheme  string host int port )  {   string[] scheme parts = scheme . split ( ""\\ + "" )  ;   string protocol = scheme parts[0] ;   string client cert alias = null ;  int flags = get scheme flags ( scheme )  ;  if  ( scheme parts . length  >  3 )   {  client cert alias = scheme parts[3] ;   }  else if  ( scheme parts . length  >  2 )   {  if  (  ! scheme   trust   all   certs . equals ( scheme parts[2] )  )   {  m client cert alias = scheme parts[2] ;   }   }  set connection ( protocol host port flags client cert alias )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\HostAuth.java,set host auth from string,public void   (  string uri string )  throws uri syntax exception  {  uri uri = new uri ( uri string )  ;   string path = uri . get path (  )  ;   string domain = null ;  if  (  !  text utils . is empty ( path )  )   {  domain = path . substring ( 1 )  ;   }  m domain = domain ;  set login ( uri . get user info (  )  )  ;   string scheme = uri . get scheme (  )  ;  set connection ( scheme uri . get host (  )  uri . get port (  )  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\HostAuth.java,set login,public void   (  string user name  string user password )  {  m login = user name ;  m password = user password ;  if  (  text utils . is empty ( m login )  )   {  m flags& = ~flag   authenticate ;   }  else  {  m flags| = flag   authenticate ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\HostAuth.java,set user name,public void   ( final  string user name )  {  m login = user name ;  if  (  text utils . is empty ( m login )  )   {  m flags& = ~flag   authenticate ;   }  else  {  m flags| = flag   authenticate ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\HostAuth.java,should trust all server certs,public boolean   (  )  {  return  ( m flags & flag   trust   all )   !  =  0 ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\HostAuth.java,should use ssl,public boolean   (  )  {  return  ( m flags & flag   ssl )   !  =  0 ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\HostAuth.java,to content values,@ override public  content values   (  )  {   content values values = new  content values (  )  ;  values . put (  host auth columns . protocol m protocol )  ;  values . put (  host auth columns . address m address )  ;  values . put (  host auth columns 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\HostAuth.java,to json,"protected json object   (  )  {  try  {  final json object json = new json object (  )  ;  json . put (  host auth columns . protocol m protocol )  ;  json . put (  host auth columns . address m address )  ;  json . put (  host auth columns . port m port )  ;  json . put (  host auth columns . flags m flags )  ;  json . put (  host auth columns . login m login )  ;  json . put opt (  host auth columns . password m password )  ;  json . put opt (  host auth columns . domain m domain )  ;  json . put opt (  host auth columns . client   cert   alias m client cert alias )  ;  if  ( m credential  !  =  null )   {  json . put opt ( json   tag   credential m credential . to json (  )  )  ;   }  return json ;   }  catch  (  final json exception e )   {   log utils . d (  log utils . tag e "" exception while serializing  host auth"" )  ;   }  return null ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\HostAuth.java,to string,"@ override public  string   (  )  {  return ""[protocol ""  +  m protocol  +  ""]"" ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\HostAuth.java,write to parcel,@ override public void   (  parcel dest int flags )  {  dest . write long ( m id )  ;  dest . write string ( m protocol )  ;  dest . write string ( m address )  ;  dest . write int ( m port )  ;  dest . write int ( m flags )  ;  dest . write string ( m lo
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Credential.java, credential,public   (  parcel in )  {  m base uri = content   uri ;  m id = in . read long (  )  ;  m provider id = in . read string (  )  ;  m access token = in . read string (  )  ;  m refresh token = in . read string (  )  ;  m expiration = in . read long (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Credential.java,create from parcel,@ override public  credential   (  parcel in )  {  return new  credential ( in )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Credential.java,describe contents,@ override public int   (  )  {  return 0 ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Credential.java,equals,@ override public boolean   (  object o )  {  if  (  !  ( o instanceof  credential )  )   {  return false ;   }   credential that =  (  credential ) o ;  return  text utils . equals ( m provider id that . m provider id )  &&  text utils . equals ( m acces
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Credential.java,from json,"protected static  credential   ( final json object json )  {  try  {  final  credential c = new  credential (  )  ;  c . m provider id = json . get string ( provider   column )  ;  c . m access token = json . opt string ( access   token   column )  ;  c . m refresh token = json . opt string ( refresh   token   column )  ;  c . m expiration = json . opt int ( expiration   column 0 )  ;  return c ;   }  catch  (  final json exception e )   {   log utils . d (  log utils . tag e "" exception while deserializing  credential"" )  ;   }  return null ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Credential.java,hash code,@ override public int   (  )  {  return  objects . hash code ( m access token m refresh token m expiration )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Credential.java,init credential,"public static void   (  )  {  content   uri =  uri . parse (  email content . content   uri  +  "" / credential"" )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Credential.java,new array,@ override public  credential[]   ( int size )  {  return new  credential[size] ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Credential.java,restore,@ override public void   (  cursor cursor )  {  m base uri = content   uri ;  m id = cursor . get long (  credential query . id   column   index )  ;  m provider id = cursor . get string (  credential query . provider   column   index )  ;  m access token
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Credential.java,restore credentials with id,public static  credential   (  context context long id )  {  return  email content . restore content with id ( context  credential . class  credential . content   uri  credential query . projection id )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Credential.java,to content values,"@ override public  content values   (  )  {   content values values = new  content values (  )  ;  if  (  text utils . is empty ( m provider id )  )   {   log utils . wtf (  log utils . tag "" credential being saved with no provider"" )  ;   }  values . put"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Credential.java,to json,"protected json object   (  )  {  try  {  final json object json = new json object (  )  ;  json . put ( provider   column m provider id )  ;  json . put opt ( access   token   column m access token )  ;  json . put opt ( refresh   token   column m refresh token )  ;  json . put ( expiration   column m expiration )  ;  return json ;   }  catch  (  final json exception e )   {   log utils . d (  log utils . tag e "" exception while serializing  credential"" )  ;   }  return null ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Credential.java,write to parcel,@ override public void   (  parcel dest int flags )  {  dest . write long ( m id )  ;  dest . write string ( m provider id )  ;  dest . write string ( m access token )  ;  dest . write string ( m refresh token )  ;  dest . write long ( m expiration )  ;  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\MailboxUtilities.java,check mailbox consistency,@ deprecated public static void   (  context context long account id )  {   account account =  account . restore account with id ( context account id )  ;  if  ( account  =  =  null )  return ;  if  (  ( account . m flags & account   mailbox   change   fl
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\MailboxUtilities.java,end mailbox changes,public static void   (  context context long account id )  {  set account sync adapter flag ( context account id false )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\MailboxUtilities.java,fixup uninitialized parent keys,"@ deprecated public static void   (  context context  string account selector )  {  if  ( account selector  =  =  null )  throw new  illegal argument exception (  )  ;   string no parent key selection = where   parent   key   uninitialized  +  "" and ""  + "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\MailboxUtilities.java,get hierarchical name,"private static  string   (  context context long id  hash map <  long  string >  map  string name long parent id )  {   string hierarchical name ;  if  ( map . contains key ( id )  )   {  return map . get ( id )  ;   }  else if  ( parent id  =  =   mailbox . no   mailbox )   {  hierarchical name = name ;   }  else  {   mailbox parent =  mailbox . restore mailbox with id ( context parent id )  ;  if  ( parent  =  =  null )  return name  +  "" / ""  +  "" ?  ? "" ;  hierarchical name = get hierarchical name ( context parent id map parent . m display name parent . m parent key )   +  "" / ""  +  name ;   }  map . put ( id hierarchical name )  ;  return hierarchical name ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\MailboxUtilities.java,set account sync adapter flag,private static void   (  context context long account id boolean start )  {   account account =  account . restore account with id ( context account id )  ;  if  ( account  =  =  null )  return ;   content values cv = new  content values (  )  ;  cv . put (  account columns . flags start  ?   ( account . m flags | account   mailbox   change   flag )  : account . m flags & ~account   mailbox   change   flag )  ;  context . get content resolver (  )  . update (  content uris . with appended id (  account . content   uri account . m id )  cv null null )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\MailboxUtilities.java,set flags and childrens parent key,@ deprecated public static void   (  context context  string account selector  string server id )  {   cursor cursor = context . get content resolver (  )  . query (  mailbox . content   uri  mailbox . content   projection  mailbox columns . server   id  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\MailboxUtilities.java,setup hierarchical names,"public static void   (  context context long account id )  {   account account =  account . restore account with id ( context account id )  ;  if  ( account  =  =  null )  return ;   content values values = new  content values (  )  ;   string account selector =  mailbox . account   key  +  "" = ""  +  account . m id ;   content resolver resolver = context . get content resolver (  )  ;   hash map <  long  string >  name map = new  hash map <  long  string >  (  )  ;   cursor c = resolver . query (  mailbox . content   uri hierarchy   projection account selector null null )  ;  try  {  while  ( c . move to next (  )  )   {  long id = c . get long ( hierarchy   id )  ;   string display name = c . get string ( hierarchy   name )  ;   string name = get hierarchical name ( context id name map display name c . get long ( hierarchy   parent   key )  )  ;   string old hierarchical name = c . get string ( hierarchy   hierarchical   name )  ;  if  ( name . equals ( old hierarchical name )  ||  (  ( name . equals ( display name )  )  &&  text utils . is empty ( old hierarchical name )  )  )   {  continue ;   }  values . put (  mailbox columns . hierarchical   name name )  ;  resolver . update (  content uris . with appended id (  mailbox . content   uri id )  values null null )  ;   }   }  finally  {  c . close (  )  ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\MailboxUtilities.java,start mailbox changes,public static void   (  context context long account id )  {  set account sync adapter flag ( context account id true )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java, attachment,public   (  parcel in )  {  m base uri =  attachment . content   uri ;  m id = in . read long (  )  ;  m file name = in . read string (  )  ;  m mime type = in . read string (  )  ;  m size = in . read long (  )  ;  m content id = in . read string (  )  ;  m content uri = in . read string (  )  ;  m cached file uri = in . read string (  )  ;  m message key = in . read long (  )  ;  m location = in . read string (  )  ;  m encoding = in . read string (  )  ;  m content = in . read string (  )  ;  m flags = in . read int (  )  ;  m account key = in . read long (  )  ;  final int content bytes len = in . read int (  )  ;  if  ( content bytes len  =  =   - 1 )   {  m content bytes = null ;   }  else  {  m content bytes = new byte[content bytes len] ;  in . read byte array ( m content bytes )  ;   }  m ui state = in . read int (  )  ;  m ui destination = in . read int (  )  ;  m ui downloaded size = in . read int (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java, body,public   (  )  {  m base uri = content   uri ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java, message,public   (  )  {  m base uri = content   uri ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java, self content observer,public   ( final  email content content )  {  super ( null )  ;  m content = new  weak reference <  email content >  ( content )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java,add save ops,"public void   (  array list <  content provider operation >  ops )  {  boolean is new =  ! is saved (  )  ;   content provider operation .  builder b ;  if  ( is new )   {  b =  content provider operation . new insert ( m base uri )  ;   }  else  {  b =  content provider operation . new update ( m base uri )  . with selection (  message columns .    id  +  "" =  ? "" new  string[] {  long . to string ( m id )  }  )  ;   }  if  ( m text  !  =  null )   {  m snippet =  text utilities . make snippet from plain text ( m text )  ;   }  else if  ( m html  !  =  null )   {  m snippet =  text utilities . make snippet from html text ( m html )  ;   }  ops . add ( b . with values ( to content values (  )  )  . build (  )  )  ;   content values cv = new  content values (  )  ;  if  ( m text  !  =  null )   {  cv . put (  body columns . text   content m text )  ;   }  if  ( m html  !  =  null )   {  cv . put (  body columns . html   content m html )  ;   }  if  ( m source key  !  =  0 )   {  cv . put (  body columns . source   message   key m source key )  ;   }  if  ( m quoted text start pos  !  =  0 )   {  cv . put (  body columns . quoted   text   start   pos m quoted text start pos )  ;   }  int message back value = ops . size (  )   -  1 ;  if  (  ! cv . key set (  )  . is empty (  )  )   {  b =  content provider operation . new insert (  body . content   uri )  ;  if  (  ! is new )   {  cv . put (  body columns . message   key m id )  ;   }  b . with values ( cv )  ;  if  ( is new )   {   content values back values = new  content values (  )  ;  back values . put (  body columns . message   key message back value )  ;  b . with value back references ( back values )  ;   }  ops . add ( b . build (  )  )  ;   }  if  ( m attachments  !  =  null )   {  for  (   attachment att : m attachments )   {  if  (  ! is new )   {  att . m message key = m id ;   }  b =  content provider operation . new insert (  attachment . content   uri )  . with values ( att . to content values (  )  )  ;  if  ( is new )   {  b . with value back reference (  attachment columns . message   key message back value )  ;   }  ops . add ( b . build (  )  )  ;   }   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java,build message list selection,"public static  string   (  context context long account id long mailbox id )  {  if  ( mailbox id  =  =   mailbox . query   all   inboxes )   {  return  message . all   inbox   selection ;   }  if  ( mailbox id  =  =   mailbox . query   all   drafts )   {  return  message . all   draft   selection ;   }  if  ( mailbox id  =  =   mailbox . query   all   outbox )   {  return  message . all   outbox   selection ;   }  if  ( mailbox id  =  =   mailbox . query   all   unread )   {  return  message . all   unread   selection ;   }  if  ( mailbox id  =  =   mailbox . query   all   favorites )   {  if  ( account id  =  =   account . account   id   combined   view )   {  return  message . all   favorite   selection ;   }  final  string builder selection = new  string builder (  )  ;  selection . append (  message columns . account   key )  . append ( ' = ' )  . append ( account id )  . append ( "" and "" )  . append (  message . all   favorite   selection )  ;  return selection . to string (  )  ;   }  final  string builder selection = new  string builder (  )  ;  selection . append (  message columns . mailbox   key )  . append ( ' = ' )  . append ( mailbox id )  ;  if  (  mailbox . get mailbox type ( context mailbox id )   !  =   mailbox . type   outbox )   {  selection . append ( "" and "" )  . append (  message . flag   loaded   selection )  ;   }  return selection . to string (  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java,close,public synchronized void   ( final  context context )  {  if  ( m self observer  =  =  null )   {  return ;   }  unregister all observers (  )  ;  context . get content resolver (  )  . unregister content observer ( m self observer )  ;  m self observer = null ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java,count,static public int   (  context context  uri uri )  {  return count ( context uri null null )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java,create from parcel,@ override public  email content .  attachment   (  parcel in )  {  return new  email content .  attachment ( in )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java,create unique file,"public static  file   (  string filename )  {  if  (  environment . get external storage state (  )  . equals (  environment . media   mounted )  )   {   file directory =  environment . get external storage directory (  )  ;   file file = new  file ( directory filename )  ;  if  (  ! file . exists (  )  )   {  return file ;   }  int index = filename . last index of ( ' . ' )  ;   string name = filename ;   string extension = """" ;  if  ( index  !  =   - 1 )   {  name = filename . substring ( 0 index )  ;  extension = filename . substring ( index )  ;   }  for  ( int i = 2 ;  i  <   integer . max   value ;  i +  +  )   {  file = new  file ( directory name  +  ' - '  +  i +  extension )  ;  if  (  ! file . exists (  )  )   {  return file ;   }   }  return null ;   }  return null ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java,delete,static public int   (  context context  uri base uri long id )  {  return context . get content resolver (  )  . delete (  content uris . with appended id ( base uri id )  null null )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java,deliver self notifications,@ override public boolean   (  )  {  return false ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java,describe contents,@ override public int   (  )  {  return 0 ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java,get body html uri for message with id,"public static  uri   ( long message id )  {  return  email content . content   uri . build upon (  )  . append path ( ""body html"" )  . append path (  long . to string ( message id )  )  . build (  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java,get body text uri for message with id,"public static  uri   ( long message id )  {  return  email content . content   uri . build upon (  )  . append path ( ""body text"" )  . append path (  long . to string ( message id )  )  . build (  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java,get cached file uri,public  string   (  )  {  return m cached file uri ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java,get content,static public  < t extends  email content > t   ( final  context context final  cursor cursor final  class < t >  klass )  {  try  {  t content = klass . new instance (  )  ;  content . m id = cursor . get long ( 0 )  ;  content . restore ( context cursor )  ;  return content ;   }  catch  (   illegal access exception e )   {  e . print stack trace (  )  ;   }  catch  (   instantiation exception e )   {  e . print stack trace (  )  ;   }  return null ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java,get content notification uri,"protected  uri   (  )  {  throw new  unsupported operation exception ( "" subclasses must override this method for content observation to work"" )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java,get content uri,"public  string   (  )  {  if  ( m content uri  =  =  null )  return null ;  if  (  !  attachment . s using legacy prefix && m content uri . starts with (  attachment . attachment   provider   legacy   uri   prefix )  )   {  int prefix = m content uri . index of ( ' / ' 10 )  ;  if  ( prefix  >  0 )   {  return attachment   provider   uri   prefix  +  "" / ""  +  m content uri . substring ( prefix )  ;   }  else  {   log utils . e ( "" attachment"" "" improper content uri format: ""  +  m content uri )  ;  return m content uri ;   }   }  else  {  return m content uri ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java,get favorite message count,public static int   (  context context long account id )  {  return count ( context  message . content   uri per   account   favorite   selection new  string[] {  long . to string ( account id )  }  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java,get key column long,public static long   (  context context long message id  string column )  {   string[] columns =  utility . get row columns ( context  message . content   uri message id column )  ;  if  ( columns  !  =  null && columns[0]  !  =  null )   {  return  long . parse long ( columns[0] )  ;   }  return  - 1 ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java,get uri,public  uri   (  )  {  if  ( m uri  =  =  null )   {  m uri =  content uris . with appended id ( m base uri m id )  ;   }  return m uri ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java,init,"public static synchronized void   (  context context )  {  if  ( authority  =  =  null )   {  final  resources res = context . get resources (  )  ;  email   package   name = res . get string ( r . string . email   package   name )  ;  authority = email   package   name  +  "" . provider"" ;   log utils . d ( "" email content"" ""init for ""  +  authority )  ;  notifier   authority = email   package   name  +  "" . notifier"" ;  content   uri =  uri . parse ( ""content: /  / ""  +  authority )  ;  content   notifier   uri =  uri . parse ( ""content: /  / ""  +  notifier   authority )  ;  pick   trash   folder   uri =  uri . parse ( ""content: /  / ""  +  authority  +  "" / pick trash folder"" )  ;  pick   sent   folder   uri =  uri . parse ( ""content: /  / ""  +  authority  +  "" / pick sent folder"" )  ;  mailbox   notification   uri =  uri . parse ( ""content: /  / ""  +  authority  +  "" / mailbox notification"" )  ;  mailbox   most   recent   message   uri =  uri . parse ( ""content: /  / ""  +  authority  +  "" / mailbox most recent message"" )  ;  account   check   uri =  uri . parse ( ""content: /  / ""  +  authority  +  "" / account check"" )  ;  provider   permission = email   package   name  +  "" . permission . access   provider"" ;   account . init account (  )  ;   mailbox . init mailbox (  )  ;   quick response . init quick response (  )  ;   host auth . init host auth (  )  ;   credential . init credential (  )  ;   policy . init policy (  )  ;   message . init message (  )  ;   message move . init (  )  ;   message state change . init (  )  ;   body . init body (  )  ;   attachment . init attachment (  )  ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java,init attachment,"public static void   (  )  {  content   uri =  uri . parse (  email content . content   uri  +  "" / attachment"" )  ;  message   id   uri =  uri . parse (  email content . content   uri  +  "" / attachment / message"" )  ;  attachment   provider   authority =  email content . email   package   name  +  "" . attachmentprovider"" ;  attachment   provider   uri   prefix = ""content: /  / ""  +  attachment   provider   authority ;  s using legacy prefix = attachment   provider   uri   prefix . equals ( attachment   provider   legacy   uri   prefix )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java,init body,"public static void   (  )  {  content   uri =  uri . parse (  email content . content   uri  +  "" / body"" )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java,init message,"public static void   (  )  {  content   uri =  uri . parse (  email content . content   uri  +  "" / message"" )  ;  content   uri   limit   1 = uri with limit ( content   uri 1 )  ;  synced   content   uri =  uri . parse (  email content . content   uri  +  "" / synced message"" )  ;  selected   message   content   uri =  uri . parse (  email content . content   uri  +  "" / message by selection"" )  ;  deleted   content   uri =  uri . parse (  email content . content   uri  +  "" / deleted message"" )  ;  updated   content   uri =  uri . parse (  email content . content   uri  +  "" / updated message"" )  ;  notifier   uri =  uri . parse (  email content . content   notifier   uri  +  "" / message"" )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java,is initial sync key,"public static boolean   ( final  string sync key )  {  return sync key  =  =  null || sync key . is empty (  )  || sync key . equals ( ""0"" )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java,is saved,public boolean   (  )  {  return m id  !  =  not   saved ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java,lookup body id with message id,"public static long   (  context context long message id )  {  return  utility . get first row long ( context  body . content   uri id   projection  body columns . message   key  +  "" =  ? "" new  string[] {  long . to string ( message id )  }  null id   projection   column  - 1l )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java,new array,@ override public  email content .  attachment[]   ( int size )  {  return new  email content .  attachment[size] ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java,on change,@ override public void   ( final boolean self change )  {   email content content = m content . get (  )  ;  if  ( content  !  =  null )   {  content . on change ( false )  ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java,read body from provider,"private static  string   ( final  context context final  string uri )  {   string content = null ;  try  {  final  input stream body input = context . get content resolver (  )  . open input stream (  uri . parse ( uri )  )  ;  try  {  content = io utils . to string ( body input )  ;   }  finally  {  body input . close (  )  ;   }   }  catch  (  final io exception e )   {   log utils . v (  log utils . tag e "" exception while reading body content"" )  ;   }  return content ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java,register observer,public synchronized void   ( final  context context final  content observer observer )  {  if  ( m self observer  =  =  null )   {  m self observer = new  self content observer ( this )  ;  context . get content resolver (  )  . register content observer ( get content notification uri (  )  true m self observer )  ;  m observable = new  content observable (  )  ;   }  m observable . register observer ( observer )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java,restore,@ override public void   (  cursor cursor )  {  m base uri = content   uri ;  m id = cursor . get long ( content   id   column )  ;  m file name = cursor . get string ( content   filename   column )  ;  m mime type = cursor . get string ( content   mime  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java,restore attachment with id,public static  attachment   (  context context long id )  {  return  email content . restore content with id ( context  attachment . class  attachment . content   uri  attachment . content   projection id )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java,restore attachments with message id,public static  attachment[]   (  context context long message id )  {   uri uri =  content uris . with appended id ( message   id   uri message id )  ;   cursor c = context . get content resolver (  )  . query ( uri content   projection null null null )  ;  try  {  int count = c . get count (  )  ;   attachment[] attachments = new  attachment[count] ;  for  ( int i = 0 ;  i  <  count ;   +  + i )   {  c . move to next (  )  ;   attachment attach = new  attachment (  )  ;  attach . restore ( c )  ;  attachments[i] = attach ;   }  return attachments ;   }  finally  {  c . close (  )  ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java,restore body html with message id,public static  string   (  context context long message id )  {  return read body from provider ( context get body html uri for message with id ( message id )  . to string (  )  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java,restore body source key,"@ visible for testing public static long   (  context context long message id )  {  return  utility . get first row long ( context  body . content   uri new  string[] {  body columns . source   message   key }   body columns . message   key  +  "" =  ? "" n"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java,restore body text with message id,public static  string   (  context context long message id )  {  return read body from provider ( context get body text uri for message with id ( message id )  . to string (  )  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java,restore body with cursor,private static  body   ( final  context context final  cursor cursor )  {  try  {  if  ( cursor . move to first (  )  )   {  return get content ( context cursor  body . class )  ;   }  else  {  return null ;   }   }  finally  {  cursor . close (  )  ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java,restore body with message id,"public static  body   (  context context long message id )  {   cursor c = context . get content resolver (  )  . query (  body . content   uri  body . content   projection  body columns . message   key  +  "" =  ? "" new  string[] {  long . to string ( message id )  }  null )  ;  if  ( c  =  =  null )  throw new  provider unavailable exception (  )  ;  return restore body with cursor ( context c )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java,restore content with id,public static  < t extends  email content > t   ( final  context context final  class < t >  klass final  uri content uri final  string[] content projection final long id final  content observer observer )  {  warn if ui thread (  )  ;  final  uri u =  content uris . with appended id ( content uri id )  ;  final  cursor c = context . get content resolver (  )  . query ( u content projection null null null )  ;  if  ( c  =  =  null )  throw new  provider unavailable exception (  )  ;  try  {  if  ( c . move to first (  )  )   {  final t content = get content ( context c klass )  ;  if  ( observer  !  =  null )   {  content . register observer ( context observer )  ;   }  return content ;   }  else  {  return null ;   }   }  finally  {  c . close (  )  ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java,restore message with id,public static  message   (  context context long id )  {  return  email content . restore content with id ( context  message . class  message . content   uri  message . content   projection id )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java,save,@ override public  uri   (  context context )  {  boolean do save =  ! is saved (  )  ;  if  ( m text  =  =  null && m html  =  =  null &&  ( m attachments  =  =  null || m attachments . is empty (  )  )  )   {  if  ( do save )   {  return super . save ( 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java,set cached file uri,public void   (  string cached file )  {  m cached file uri = cached file ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java,set content uri,public void   (  string content uri )  {  m content uri = content uri ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java,set flags,public void   ( boolean quoted reply boolean quoted forward )  {  if  ( quoted reply || quoted forward )   {  m flags& = ~ message . flag   type   mask ;  m flags| = quoted reply  ?   message . flag   type   reply :  message . flag   type   forward ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java,to content values,@ override public  content values   (  )  {   content values values = new  content values (  )  ;  values . put (  attachment columns . filename m file name )  ;  values . put (  attachment columns . mime   type m mime type )  ;  values . put (  attachmen
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java,to string,"@ override public  string   (  )  {  return ""[""  +  m file name  +  ""  "" +  m mime type +  ""  "" +  m size +  ""  "" +  m content id +  ""  "" +  m content uri +  ""  "" +  m cached file uri +  ""  "" +  m message key +  ""  "" +  m location +  ""  "" +  m encoding + "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java,unregister all observers,"public synchronized void   (  )  {  if  ( m observable  =  =  null )   {  throw new  illegal state exception ( "" unregistering with null observable"" )  ;   }  m observable . unregister all (  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java,unregister observer,"public synchronized void   ( final  content observer observer )  {  if  ( m observable  =  =  null )   {  throw new  illegal state exception ( "" unregistering with null observable"" )  ;   }  m observable . unregister observer ( observer )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java,update,static public int   (  context context  uri base uri long id  content values content values )  {  return context . get content resolver (  )  . update (  content uris . with appended id ( base uri id )  content values null null )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java,update body with message id,public static void   (  context context long message id  content values values )  {   content resolver resolver = context . get content resolver (  )  ;  long body id = lookup body id with message id ( context message id )  ;  values . put (  body columns . message   key message id )  ;  if  ( body id  =  =   - 1 )   {  resolver . insert ( content   uri values )  ;   }  else  {  final  uri uri =  content uris . with appended id ( content   uri body id )  ;  resolver . update ( uri values null null )  ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java,uri with limit,static public  uri   (  uri uri int limit )  {  return uri . build upon (  )  . append query parameter (  email content . parameter   limit  integer . to string ( limit )  )  . build (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java,warn if ui thread,"private static void   (  )  {  if  (  looper . get main looper (  )  . get thread (  )   =  =   thread . current thread (  )  )   {   log utils . w (  logging . log   tag new  throwable (  )  "" method called on the ui thread"" )  ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java,write to parcel,@ override public void   (  parcel dest int flags )  {  dest . write long ( m id )  ;  dest . write string ( m file name )  ;  dest . write string ( m mime type )  ;  dest . write long ( m size )  ;  dest . write string ( m content id )  ;  dest . write s
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Mailbox.java, mailbox,public   (  parcel in )  {  m base uri = in . read parcelable ( null )  ;  m id = in . read long (  )  ;  m display name = in . read string (  )  ;  m server id = in . read string (  )  ;  m parent server id = in . read string (  )  ;  m parent key = in . read long (  )  ;  m account key = in . read long (  )  ;  m type = in . read int (  )  ;  m delimiter = in . read int (  )  ;  m sync key = in . read string (  )  ;  m sync lookback = in . read int (  )  ;  m sync interval = in . read int (  )  ;  m sync time = in . read long (  )  ;  m flag visible = in . read int (  )   =  =  1 ;  m flags = in . read int (  )  ;  m sync status = in . read string (  )  ;  m last touched time = in . read long (  )  ;  m ui sync status = in . read int (  )  ;  m ui last sync result = in . read int (  )  ;  m total count = in . read int (  )  ;  m hierarchical name = in . read string (  )  ;  m last full sync time = in . read long (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Mailbox.java,can have messages moved,public boolean   (  )  {  switch  ( m type )   {  case type   inbox: case type   mail: case type   trash: case type   junk: return true ;   }  return false ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Mailbox.java,create from parcel,@ override public  mailbox   (  parcel source )  {  return new  mailbox ( source )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Mailbox.java,create sync bundle,public static  bundle   ( final long mailbox id )  {  final  bundle bundle = new  bundle ( 2 )  ;  bundle . put int ( sync   extra   mailbox   count 1 )  ;  bundle . put long ( format mailbox id extra ( 0 )  mailbox id )  ;  return bundle ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Mailbox.java,describe contents,@ override public int   (  )  {  return 0 ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Mailbox.java,find mailbox of type,public static long   (  context context long account id int type )  {  final  string[] bind arguments = new  string[] {  long . to string ( type )   long . to string ( account id )  }  ;  return  utility . get first row long ( context  mailbox . content   uri id   projection where   type   and   account   key bind arguments null id   projection   column no   mailbox )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Mailbox.java,format mailbox id extra,private static  string   ( final int index )  {  return  string . format ( sync   extra   mailbox   id   pattern index )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Mailbox.java,get account id for mailbox,public static long   ( final  context context final  string mailbox id )  {  return  utility . get first row long ( context  mailbox . content   uri . build upon (  )  . append encoded path ( mailbox id )  . build (  )  account   key   projection null null null account   key   projection   account   key   column  account . no   account )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Mailbox.java,get authority,public static  string   ( final int mailbox type )  {  switch  ( mailbox type )   {  case  mailbox . type   calendar: return  calendar contract . authority ;  case  mailbox . type   contacts: return  contacts contract . authority ;  default : return  email content . authority ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Mailbox.java,get default sync state for type,public static boolean   ( final int mailbox type )  {  return syncable   types . get ( mailbox type )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Mailbox.java,get display name,public static  string   (  context context long mailbox id )  {  final  uri url =  content uris . with appended id (  mailbox . content   uri mailbox id )  ;  return  utility . get first row string ( context url mailbox   display   name   projection null null null mailbox   display   name   column )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Mailbox.java,get hashes,public  object[]   (  )  {  final  object[] hash = new  object[content   projection . length] ;  hash[content   id   column] = m id ;  hash[content   display   name   column] = m display name ;  hash[content   server   id   column] = m server id ;  hash[content   parent   server   id   column] = m parent server id ;  hash[content   account   key   column] = m account key ;  hash[content   type   column] = m type ;  hash[content   delimiter   column] = m delimiter ;  hash[content   sync   key   column] = m sync key ;  hash[content   sync   lookback   column] = m sync lookback ;  hash[content   sync   interval   column] = m sync interval ;  hash[content   sync   time   column] = m sync time ;  hash[content   flag   visible   column] = m flag visible ;  hash[content   flags   column] = m flags ;  hash[content   sync   status   column] = m sync status ;  hash[content   parent   key   column] = m parent key ;  hash[content   last   touched   time   column] = m last touched time ;  hash[content   ui   sync   status   column] = m ui sync status ;  hash[content   ui   last   sync   result   column] = m ui last sync result ;  hash[content   total   count   column] = m total count ;  hash[content   hierarchical   name   column] = m hierarchical name ;  return hash ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Mailbox.java,get mailbox for message id,public static  mailbox   (  context context long message id )  {  final long mailbox id =  message . get key column long ( context message id  message columns . mailbox   key )  ;  if  ( mailbox id  !  =   - 1 )   {  return  mailbox . restore mailbox with id ( context mailbox id )  ;   }  return null ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Mailbox.java,get mailbox for path,public static  mailbox   (  context context long account id  string path )  {   mailbox mailbox = restore mailbox for path ( context account id path )  ;  if  ( mailbox  =  =  null )   {  mailbox = new  mailbox (  )  ;   }  return mailbox ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Mailbox.java,get mailbox ids for sync,"public static  cursor   ( final  content resolver cr final long account id )  {  return cr . query (  mailbox . content   uri  mailbox . id   projection outbox   plus   syncing   and   account   selection new  string[] {  long . to string ( account id )  }   mailbox columns . type  +  "" asc"" )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Mailbox.java,get mailbox ids for sync by type,public static  cursor   ( final  content resolver cr final long account id final int mailbox type )  {  return cr . query (  mailbox . content   uri  mailbox . id   projection syncing   and   type   for   account   selection new  string[] {  integer . to string ( mailbox type )   long . to string ( account id )  }  null )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Mailbox.java,get mailbox ids from bundle,"public static long[]   (  bundle bundle )  {  final int count = bundle . get int ( sync   extra   mailbox   count 0 )  ;  if  ( count  >  0 )   {  if  ( bundle . get boolean ( sync   extra   push   only false )  )   {   log utils . w (  logging . log   tag "" mailboxes specified in a push only sync"" )  ;   }  if  ( bundle . get boolean ( sync   extra   account   only false )  )   {   log utils . w (  logging . log   tag "" mailboxes specified in an account only sync"" )  ;   }  final long[] result = new long[count] ;  for  ( int i = 0 ;  i  <  count ;  i +  +  )   {  result[i] = bundle . get long ( format mailbox id extra ( i )  0 )  ;   }  return result ;   }  else  {  return null ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Mailbox.java,get mailbox type,public static int   (  context context long mailbox id )  {  final  uri url =  content uris . with appended id (  mailbox . content   uri mailbox id )  ;  return  utility . get first row int ( context url mailbox   type   projection null null null mailbox   type   type   column  - 1 )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Mailbox.java,get mailboxes for push,public static  cursor   ( final  content resolver cr final long account id )  {  return cr . query (  mailbox . content   uri  mailbox . content   projection push   mailboxes   for   account   selection new  string[] {  long . to string ( account id )  }  null )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Mailbox.java,get system mailbox name,"public static  string   (  context context int mailbox type )  {  final int res id ;  switch  ( mailbox type )   {  case  mailbox . type   inbox: res id = r . string . mailbox   name   server   inbox ;  break ;  case  mailbox . type   outbox: res id = r . string . mailbox   name   server   outbox ;  break ;  case  mailbox . type   drafts: res id = r . string . mailbox   name   server   drafts ;  break ;  case  mailbox . type   trash: res id = r . string . mailbox   name   server   trash ;  break ;  case  mailbox . type   sent: res id = r . string . mailbox   name   server   sent ;  break ;  case  mailbox . type   junk: res id = r . string . mailbox   name   server   junk ;  break ;  case  mailbox . type   starred: res id = r . string . mailbox   name   server   starred ;  break ;  case  mailbox . type   unread: res id = r . string . mailbox   name   server   all   unread ;  break ;  default : throw new  illegal argument exception ( "" illegal mailbox type"" )  ;   }  return context . get string ( res id )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Mailbox.java,init mailbox,"public static void   (  )  {  content   uri =  uri . parse (  email content . content   uri  +  "" / mailbox"" )  ;  message   count   uri =  uri . parse (  email content . content   uri  +  "" / mailbox count"" )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Mailbox.java,is account only extras,"public static boolean   (  bundle bundle )  {  final boolean result = bundle . get boolean ( sync   extra   account   only false )  ;  if  ( result )   {  final int count = bundle . get int ( sync   extra   mailbox   count 0 )  ;  if  ( count  !  =  0 )   {   log utils . w (  logging . log   tag "" mailboxes specified in an account only sync"" )  ;   }   }  return result ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Mailbox.java,is push only extras,"public static boolean   (  bundle bundle )  {  final boolean result = bundle . get boolean ( sync   extra   push   only false )  ;  if  ( result )   {  final int count = bundle . get int ( sync   extra   mailbox   count 0 )  ;  if  ( count  !  =  0 )   {   log utils . w (  logging . log   tag "" mailboxes specified in a push only sync"" )  ;   }   }  return result ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Mailbox.java,is refreshable,public static boolean   (  context context long mailbox id )  {  if  ( mailbox id  <  0 )   {  return false ;   }  switch  ( get mailbox type ( context mailbox id )  )   {  case  - 1: case type   drafts: case type   outbox: return false ;   }  return true ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Mailbox.java,is syncable,public boolean   (  )  {  return  ( m total count  >  =  0 )  && is syncable type ( m type )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Mailbox.java,is syncable type,public static boolean   ( final int mailbox type )  {  return syncable   types . index of key ( mailbox type )   >  =  0 ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Mailbox.java,new array,@ override public  mailbox[]   ( int size )  {  return new  mailbox[size] ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Mailbox.java,new system mailbox,"public static  mailbox   (  context context long account id int mailbox type )  {  final int sync interval ;  final int flags ;  switch  ( mailbox type )   {  case type   inbox: flags =  mailbox . flag   holds   mail |  mailbox . flag   accepts   moved   mail ;  sync interval = 0 ;  break ;  case type   sent: case type   trash: flags =  mailbox . flag   holds   mail ;  sync interval = 0 ;  break ;  case type   drafts: case type   outbox: flags =  mailbox . flag   holds   mail ;  sync interval =  account . check   interval   never ;  break ;  default : throw new  illegal argument exception ( "" bad mailbox type for new system mailbox: ""  +  mailbox type )  ;   }  final  mailbox box = new  mailbox (  )  ;  box . m account key = account id ;  box . m type = mailbox type ;  box . m sync interval = sync interval ;  box . m flag visible = true ;  box . m server id = box . m display name = get system mailbox name ( context mailbox type )  ;  box . m parent key =  mailbox . no   mailbox ;  box . m flags = flags ;  return box ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Mailbox.java,restore,@ override public void   (  cursor cursor )  {  m base uri = content   uri ;  m id = cursor . get long ( content   id   column )  ;  m display name = cursor . get string ( content   display   name   column )  ;  m server id = cursor . get string ( content
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Mailbox.java,restore mailbox for path,"public static  mailbox   (  context context long account id  string path )  {  final  cursor c = context . get content resolver (  )  . query (  mailbox . content   uri  mailbox . content   projection  mailbox . path   and   account   selection new  string[] { path  long . to string ( account id )  }  null )  ;  if  ( c  =  =  null )  throw new  provider unavailable exception (  )  ;  try  {   mailbox mailbox = null ;  if  ( c . move to first (  )  )   {  mailbox = get content ( context c  mailbox . class )  ;  if  ( c . move to next (  )  )   {   log utils . w (  logging . log   tag "" multiple mailboxes named \""%s\"""" path )  ;   }   }  else  {   log utils . i (  logging . log   tag "" could not find mailbox at \""%s\"""" path )  ;   }  return mailbox ;   }  finally  {  c . close (  )  ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Mailbox.java,restore mailbox of type,public static  mailbox   (  context context long account id int type )  {  final long mailbox id = find mailbox of type ( context account id type )  ;  if  ( mailbox id  !  =   mailbox . no   mailbox )   {  return  mailbox . restore mailbox with id ( context mailbox id )  ;   }  return null ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Mailbox.java,restore mailbox with id,public static  mailbox   (  context context long id )  {  return  email content . restore content with id ( context  mailbox . class  mailbox . content   uri  mailbox . content   projection id )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Mailbox.java,resync mailbox,"public static void   ( final  content resolver cr final android . accounts .  account account final long mailbox id )  {  final  cursor cursor = cr . query (  mailbox . content   uri new  string[] {  mailbox columns . type  mailbox columns . server   id }   mailbox columns .    id  +  "" =  ? "" new  string[] {  string . value of ( mailbox id )  }  null )  ;  if  ( cursor  =  =  null || cursor . get count (  )   =  =  0 )   {   log utils . w (  logging . log   tag "" mailbox %d not found"" mailbox id )  ;  return ;   }  try  {  cursor . move to first (  )  ;  final int type = cursor . get int ( 0 )  ;  if  ( type  >  =  type   not   email )   {  throw new  illegal argument exception (  string . format ( "" mailbox %d is not an  email mailbox"" mailbox id )  )  ;   }  final  string server id = cursor . get string ( 1 )  ;  if  (  text utils . is empty ( server id )  )   {  throw new  illegal argument exception (  string . format ( "" mailbox %d has no server id"" mailbox id )  )  ;   }  final  array list <  content provider operation >  ops = new  array list <  content provider operation >  (  )  ;  ops . add (  content provider operation . new delete (  message . content   uri )  . with selection (  message . mailbox   selection new  string[] {  string . value of ( mailbox id )  }  )  . build (  )  )  ;  ops . add (  content provider operation . new update (  content uris . with appended id (  mailbox . content   uri mailbox id )  )  . with value (  mailbox columns . sync   key ""0"" )  . build (  )  )  ;  cr . apply batch ( authority ops )  ;  final  bundle extras = create sync bundle ( mailbox id )  ;  extras . put boolean (  content resolver . sync   extras   ignore   settings true )  ;   content resolver . request sync ( account authority extras )  ;   log utils . i (  logging . log   tag ""request sync resync mailbox %s  %s"" account . to string (  )  extras . to string (  )  )  ;   }  catch  (   remote exception e )   {   log utils . w (  logging . log   tag e "" failed to wipe mailbox %d"" mailbox id )  ;   }  catch  (   operation application exception e )   {   log utils . w (  logging . log   tag e "" failed to wipe mailbox %d"" mailbox id )  ;   }  finally  {  cursor . close (  )  ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Mailbox.java,to content values,@ override public  content values   (  )  {  final  content values values = new  content values ( 20 )  ;  values . put (  mailbox columns . display   name m display name )  ;  values . put (  mailbox columns . server   id m server id )  ;  values . put (
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Mailbox.java,to string,"@ override public  string   (  )  {  return ""[ mailbox ""  +  m id  +  "": "" +  m display name +  ""]"" ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Mailbox.java,update last full sync time,public void   ( final  context c final long sync time )  {  if  ( sync time  !  =  m last full sync time )   {  final  content values values = new  content values ( 1 )  ;  values . put (  mailbox columns . last   full   sync   time sync time )  ;  update ( c values )  ;  m last full sync time = sync time ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Mailbox.java,update message count,public void   ( final  context c final int count )  {  if  ( count  !  =  m total count )   {  final  content values values = new  content values ( 1 )  ;  values . put (  mailbox columns . total   count count )  ;  update ( c values )  ;  m total count = count ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Mailbox.java,write to parcel,@ override public void   (  parcel dest int flags )  {  dest . write parcelable ( m base uri flags )  ;  dest . write long ( m id )  ;  dest . write string ( m display name )  ;  dest . write string ( m server id )  ;  dest . write string ( m parent serve
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Account.java, account,public   (  parcel in )  {  m base uri =  account . content   uri ;  m id = in . read long (  )  ;  m display name = in . read string (  )  ;  m email address = in . read string (  )  ;  m sync key = in . read string (  )  ;  m sync lookback = in . read int (  )  ;  m sync interval = in . read int (  )  ;  m host auth key recv = in . read long (  )  ;  m host auth key send = in . read long (  )  ;  m flags = in . read int (  )  ;  in . read string (  )  ;  m sender name = in . read string (  )  ;  m ringtone uri = in . read string (  )  ;  m protocol version = in . read string (  )  ;  in . read int (  )  ;  m security sync key = in . read string (  )  ;  m signature = in . read string (  )  ;  m policy key = in . read long (  )  ;  m host auth recv = null ;  if  ( in . read byte (  )   =  =  1 )   {  m host auth recv = new  host auth ( in )  ;   }  m host auth send = null ;  if  ( in . read byte (  )   =  =  1 )   {  m host auth send = new  host auth ( in )  ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Account.java,clear security hold on all accounts,public static void   (  context context )  {   content resolver resolver = context . get content resolver (  )  ;   cursor c = resolver . query (  account . content   uri account   flags   projection security   nonzero   selection null null )  ;  try  {  while  ( c . move to next (  )  )   {  int flags = c . get int ( account   flags   column   flags )  ;  if  ( 0  !  =   ( flags & flags   security   hold )  )   {   content values cv = new  content values (  )  ;  cv . put (  account columns . flags flags & ~flags   security   hold )  ;  long account id = c . get long ( account   flags   column   id )  ;   uri uri =  content uris . with appended id (  account . content   uri account id )  ;  resolver . update ( uri cv null null )  ;   }   }   }  finally  {  c . close (  )  ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Account.java,create from parcel,@ override public  account   (  parcel in )  {  return new  account ( in )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Account.java,describe contents,@ override public int   (  )  {  return 0 ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Account.java,ensure loaded,"public void   ( final  context context )  {  if  ( m host auth key recv  =  =  0 && m host auth recv  =  =  null )   {  throw new  illegal state exception ( "" trying to load incomplete  account object"" )  ;   }  get or create host auth recv ( context )  . ensure loaded ( context )  ;  if  ( m host auth key send  !  =  0 )   {  get or create host auth send ( context )  ;  if  ( m host auth send  !  =  null )   {  m host auth send . ensure loaded ( context )  ;   }   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Account.java,from json,"protected static  account   ( final json object json )  {  try  {  final  account a = new  account (  )  ;  a . m display name = json . opt string (  account columns . display   name )  ;  a . m email address = json . get string (  account columns . email   address )  ;  a . m sync lookback = json . get int (  account columns . sync   lookback )  ;  a . m sync interval = json . get int (  account columns . sync   interval )  ;  final json object recv json = json . getjson object ( json   tag   host   auth   recv )  ;  a . m host auth recv =  host auth . from json ( recv json )  ;  final json object send json = json . optjson object ( json   tag   host   auth   send )  ;  if  ( send json  !  =  null )   {  a . m host auth send =  host auth . from json ( send json )  ;   }  a . m flags = json . get int (  account columns . flags )  ;  a . m sender name = json . opt string (  account columns . sender   name )  ;  a . m protocol version = json . opt string (  account columns . protocol   version )  ;  a . m signature = json . opt string (  account columns . signature )  ;  a . m ping duration = json . opt int (  account columns . ping   duration 0 )  ;  return a ;   }  catch  (  final json exception e )   {   log utils . d (  log utils . tag e "" exception while deserializing  account"" )  ;   }  return null ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Account.java,from json string,"public static  account   ( final  string json string )  {  try  {  final json object json = new json object ( json string )  ;  return from json ( json )  ;   }  catch  (  final json exception e )   {   log utils . d (  log utils . tag e "" could not parse json for account"" )  ;   }  return null ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Account.java,get account for message id,public static  account   (  context context long message id )  {  long account id = get account id for message id ( context message id )  ;  if  ( account id  !  =   - 1 )   {  return  account . restore account with id ( context account id )  ;   }  return null ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Account.java,get account id for message id,public static long   (  context context long message id )  {  return  message . get key column long ( context message id  message columns . account   key )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Account.java,get account manager account,public android . accounts .  account   (  string type )  {  return new android . accounts .  account ( m email address type )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Account.java,get content notification uri,@ override protected  uri   (  )  {  return  account . content   uri ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Account.java,get default account id,public static long   ( final  context context final long last used account id )  {  final  cursor cursor = context . get content resolver (  )  . query ( content   uri id   projection null null null )  ;  long first account = no   account ;  try  {  if  ( cursor  !  =  null && cursor . move to first (  )  )   {  do  {  final long account id = cursor . get long (  account . id   projection   column )  ;  if  ( account id  =  =  last used account id )   {  return account id ;   }  if  ( first account  =  =  no   account )   {  first account = account id ;   }   }  while  ( cursor . move to next (  )  )  ;   }   }  finally  {  if  ( cursor  !  =  null )   {  cursor . close (  )  ;   }   }  return first account ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Account.java,get delete policy,public int   (  )  {  return  ( m flags & flags   delete   policy   mask )   >  >  flags   delete   policy   shift ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Account.java,get display name,public  string   (  )  {  return m display name ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Account.java,get email address,public  string   (  )  {  return m email address ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Account.java,get flags,public int   (  )  {  return m flags ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Account.java,get id,public long   (  )  {  return m id ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Account.java,get inbox id,public static long   (  context context long account id )  {  return  utility . get first row long ( context  mailbox . content   uri id   projection find   inbox   selection new  string[] {  long . to string ( account id )  }  null id   projection   column  - 1l )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Account.java,get or create host auth recv,public  host auth   (  context context )  {  if  ( m host auth recv  =  =  null )   {  if  ( m host auth key recv  !  =  0 )   {  m host auth recv =  host auth . restore host auth with id ( context m host auth key recv )  ;   }  else  {  m host auth recv = new  host auth (  )  ;   }   }  return m host auth recv ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Account.java,get or create host auth send,public  host auth   (  context context )  {  if  ( m host auth send  =  =  null )   {  if  ( m host auth key send  !  =  0 )   {  m host auth send =  host auth . restore host auth with id ( context m host auth key send )  ;   }  else  {  m host auth send = new  host auth (  )  ;   }   }  return m host auth send ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Account.java,get ping duration,public long   (  )  {  return m ping duration ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Account.java,get protocol,public  string   (  context context )  {   host auth host auth = get or create host auth recv ( context )  ;  if  ( host auth  !  =  null )   {  return host auth . m protocol ;   }  return null ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Account.java,get ringtone,@ deprecated public  string   (  )  {  return m ringtone uri ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Account.java,get sender name,public  string   (  )  {  return m sender name ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Account.java,get signature,public  string   (  )  {  return m signature ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Account.java,get sync interval,public int   (  )  {  return m sync interval ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Account.java,get sync lookback,public int   (  )  {  return m sync lookback ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Account.java,init account,"public static void   (  )  {  content   uri =  uri . parse (  email content . content   uri  +  "" / account"" )  ;  reset   new   message   count   uri =  uri . parse (  email content . content   uri  +  "" / reset new message count"" )  ;  notifier   uri =  uri . parse (  email content . content   notifier   uri  +  "" / account"" )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Account.java,is security hold,public static boolean   (  context context long account id )  {  return  (  utility . get first row long ( context  content uris . with appended id (  account . content   uri account id )  account   flags   projection null null null account   flags   column   flags 0l )  &  account . flags   security   hold )   !  =  0 ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Account.java,is temporary,public boolean   (  )  {  return m temporary ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Account.java,is valid id,public static boolean   (  context context long account id )  {  return null  !  =   utility . get first row long ( context content   uri id   projection id   selection new  string[] {  long . to string ( account id )  }  null id   projection   column )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Account.java,new array,@ override public  account[]   ( int size )  {  return new  account[size] ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Account.java,refresh,public void   (  context context )  {   cursor c = context . get content resolver (  )  . query ( get uri (  )   account . content   projection null null null )  ;  try  {  c . move to first (  )  ;  restore ( c )  ;   }  finally  {  if  ( c  !  =  null )   {  c . close (  )  ;   }   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Account.java,restore,@ override public void   (  cursor cursor )  {  m id = cursor . get long ( content   id   column )  ;  m base uri = content   uri ;  m display name = cursor . get string ( content   display   name   column )  ;  m email address = cursor . get string ( con
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Account.java,restore account with address,"public static  account   (  context context  string email address  content observer observer )  {  final  cursor c = context . get content resolver (  )  . query ( content   uri new  string[] {  account columns .    id }   account columns . email   address  +  "" =  ? "" new  string[] { email address }  null )  ;  try  {  if  ( c  =  =  null ||  ! c . move to first (  )  )   {  return null ;   }  final long id = c . get long ( c . get column index (  account columns .    id )  )  ;  return restore account with id ( context id observer )  ;   }  finally  {  if  ( c  !  =  null )   {  c . close (  )  ;   }   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Account.java,restore account with id,public static  account   (  context context long id  content observer observer )  {  return  email content . restore content with id ( context  account . class  account . content   uri  account . content   projection id observer )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Account.java,save,@ override public  uri   (  context context )  {  if  ( is saved (  )  )   {  throw new  unsupported operation exception (  )  ;   }  if  ( m host auth recv  =  =  null && m host auth send  =  =  null && m policy  !  =  null )   {  return super . save ( c
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Account.java,set delete policy,public void   ( int new policy )  {  m flags& = ~flags   delete   policy   mask ;  m flags| =  ( new policy  <  <  flags   delete   policy   shift )  & flags   delete   policy   mask ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Account.java,set display name,public void   (  string description )  {  m display name = description ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Account.java,set email address,public void   (  string email address )  {  m email address = email address ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Account.java,set flags,public void   ( int new flags )  {  m flags = new flags ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Account.java,set ping duration,public void   ( long value )  {  m ping duration = value ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Account.java,set sender name,public void   (  string name )  {  m sender name = name ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Account.java,set signature,@ visible for testing public void   (  string signature )  {  m signature = signature ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Account.java,set sync interval,public void   ( int minutes )  {  m sync interval = minutes ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Account.java,set sync lookback,public void   ( int value )  {  m sync lookback = value ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Account.java,set temporary,public void   ( boolean temporary )  {  m temporary = temporary ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Account.java,to content values,@ override public  content values   (  )  {   content values values = new  content values (  )  ;  values . put (  account columns . display   name m display name )  ;  values . put (  account columns . email   address m email address )  ;  values . put (
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Account.java,to json,"protected json object   (  )  {  try  {  final json object json = new json object (  )  ;  json . put opt (  account columns . display   name m display name )  ;  json . put (  account columns . email   address m email address )  ;  json . put (  account columns . sync   lookback m sync lookback )  ;  json . put (  account columns . sync   interval m sync interval )  ;  final json object recv json = m host auth recv . to json (  )  ;  json . put ( json   tag   host   auth   recv recv json )  ;  if  ( m host auth send  !  =  null )   {  final json object send json = m host auth send . to json (  )  ;  json . put ( json   tag   host   auth   send send json )  ;   }  json . put (  account columns . flags m flags )  ;  json . put opt (  account columns . sender   name m sender name )  ;  json . put opt (  account columns . protocol   version m protocol version )  ;  json . put opt (  account columns . signature m signature )  ;  json . put (  account columns . ping   duration m ping duration )  ;  return json ;   }  catch  (  final json exception e )   {   log utils . d (  log utils . tag e "" exception while serializing  account"" )  ;   }  return null ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Account.java,to json string,public  string   ( final  context context )  {  ensure loaded ( context )  ;  final json object json = to json (  )  ;  if  ( json  !  =  null )   {  return json . to string (  )  ;   }  return null ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Account.java,to string,"@ override public  string   (  )  {   string builder sb = new  string builder ( ""["" )  ;  if  ( m host auth recv  !  =  null && m host auth recv . m protocol  !  =  null )   {  sb . append ( m host auth recv . m protocol )  ;  sb . append ( ':' )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Account.java,write to parcel,@ override public void   (  parcel dest int flags )  {  dest . write long ( m id )  ;  dest . write string ( m display name )  ;  dest . write string ( m email address )  ;  dest . write string ( m sync key )  ;  dest . write int ( m sync lookback )  ;  d
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\MessageChangeLogTable.java, message change log table,protected   ( final long message key final  string server id final long id )  {  m message key = message key ;  m server id = server id ;  m last id = id ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\MessageChangeLogTable.java,delete rows for messages,protected static int   ( final  content resolver cr final  uri uri final long[] message keys final int count )  {  if  ( count  =  =  0 )   {  return 0 ;   }  return cr . delete ( uri get selection for messages ( message keys count )  null )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\MessageChangeLogTable.java,fail messages,protected static int   ( final  content resolver cr final  uri uri final long[] message keys final int count )  {  return update status for messages ( cr uri message keys count status   failed )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\MessageChangeLogTable.java,get cursor,protected static  cursor   ( final  content resolver cr final  uri uri final  string[] projection final long account id )  {  final  string account id string =  string . value of ( account id )  ;  if  ( start processing ( cr uri account id string )   <  =  0 )   {  return null ;   }  return get rows to process ( cr uri projection account id string )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\MessageChangeLogTable.java,get message id,public final long   (  )  {  return m message key ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\MessageChangeLogTable.java,get rows to process,"private static  cursor   ( final  content resolver cr final  uri uri final  string[] projection final  string account id )  {  final  string[] args =  { account id status   processing   string }  ;  return cr . query ( uri projection selection   by   account   key   and   status args id  +  "" asc"" )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\MessageChangeLogTable.java,get selection for messages,"private static  string   ( final long[] message keys final int count )  {  final  string builder sb = new  string builder ( selection   by   message   keys   prefix )  ;  for  ( int i = 0 ;  i  <  count ;   +  + i )   {  if  ( i  !  =  0 )   {  sb . append ( "" "" )  ;   }  sb . append ( message keys[i] )  ;   }  sb . append ( "" ) "" )  ;  return sb . to string (  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\MessageChangeLogTable.java,get server id,public final  string   (  )  {  return m server id ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\MessageChangeLogTable.java,retry messages,protected static int   ( final  content resolver cr final  uri uri final long[] message keys final int count )  {  return update status for messages ( cr uri message keys count status   none )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\MessageChangeLogTable.java,start processing,private static int   ( final  content resolver cr final  uri uri final  string account id )  {  final  string[] args = new  string[2] ;  args[0] = account id ;  final  content values cv = new  content values ( 1 )  ;  args[1] = status   processing   string ;  cv . put ( status status   failed )  ;  cr . update ( uri cv selection   by   account   key   and   status args )  ;  args[1] = status   none   string ;  cv . put ( status status   processing )  ;  return cr . update ( uri cv selection   by   account   key   and   status args )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\MessageChangeLogTable.java,update status for messages,private static int   ( final  content resolver cr final  uri uri final long[] message keys final int count final int status )  {  if  ( count  =  =  0 )   {  return 0 ;   }  final  content values cv = new  content values ( 1 )  ;  cv . put ( status status )  ;  return cr . update ( uri cv get selection for messages ( message keys count )  null )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\MessageMove.java, message move,private   ( final long message key final  string server id final long id final long src folder key final long dst folder key final  string src folder server id final  string dst folder server id )  {  super ( message key server id id )  ;  m src folder key = src folder key ;  m dst folder key = dst folder key ;  m src folder server id = src folder server id ;  m dst folder server id = dst folder server id ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\MessageMove.java,get dest folder id,public final  string   (  )  {  return m dst folder server id ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\MessageMove.java,get last synced mailbox for message,"public static long   ( final  content resolver cr final long message id )  {  final  string[] selection args =  {  string . value of ( message id )  }  ;  final  cursor move cursor = cr . query ( content   uri  projection last synced mailbox query . projection selection   last   synced   mailbox selection args id  +  "" asc"" )  ;  if  ( move cursor  !  =  null )   {  try  {  if  ( move cursor . move to first (  )  )   {  return move cursor . get long (  projection last synced mailbox query . column   src   folder   key )  ;   }   }  finally  {  move cursor . close (  )  ;   }   }  final  cursor message cursor = cr . query (  content uris . with appended id (  email content .  message . content   uri message id )   email content .  message . mailbox   key   projection null null null )  ;  if  ( message cursor  !  =  null )   {  try  {  if  ( message cursor . move to first (  )  )   {  return message cursor . get long ( 0 )  ;   }   }  finally  {  message cursor . close (  )  ;   }   }  return  mailbox . no   mailbox ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\MessageMove.java,get moves,"public static  list <  message move >    ( final  context context final long account id )  {  final  content resolver cr = context . get content resolver (  )  ;  final  cursor c = get cursor ( cr content   uri  projection move query . projection account id )  ;  if  ( c  =  =  null )   {  return null ;   }   long sparse array <  message move >  moves map = new  long sparse array (  )  ;  try  {  while  ( c . move to next (  )  )   {  final long id = c . get long (  projection move query . column   id )  ;  final long message key = c . get long (  projection move query . column   message   key )  ;  final  string server id = c . get string (  projection move query . column   server   id )  ;  final long src folder key = c . get long (  projection move query . column   src   folder   key )  ;  final long dst folder key = c . get long (  projection move query . column   dst   folder   key )  ;  final  string src folder server id = c . get string (  projection move query . column   src   folder   server   id )  ;  final  string dst folder server id = c . get string (  projection move query . column   dst   folder   server   id )  ;  final  message move existing move = moves map . get ( message key )  ;  if  ( existing move  !  =  null )   {  if  ( existing move . m last id  >  =  id )   {   log utils . w ( log   tag "" moves were not in ascending id order"" )  ;   }  if  (  ! existing move . m dst folder server id . equals ( src folder server id )  || existing move . m dst folder key  !  =  src folder key )   {   log utils . w ( log   tag ""existing move's dst not same as this move's src"" )  ;   }  existing move . m dst folder key = dst folder key ;  existing move . m dst folder server id = dst folder server id ;  existing move . m last id = id ;   }  else  {  moves map . put ( message key new  message move ( message key server id id src folder key dst folder key src folder server id dst folder server id )  )  ;   }   }   }  finally  {  c . close (  )  ;   }  final int move count = moves map . size (  )  ;  final long[] unmoved messages = new long[move count] ;  int unmoved messages count = 0 ;  final  array list <  message move >  moves = new  array list ( move count )  ;  for  ( int i = 0 ;  i  <  moves map . size (  )  ;   +  + i )   {  final  message move move = moves map . value at ( i )  ;  if  (  ( move . m server id  =  =  null || move . m server id . length (  )   =  =  0 )  || move . m src folder key  =  =  move . m dst folder key )   {  unmoved messages[unmoved messages count] = move . m message key ;   +  + unmoved messages count ;   }  else  {  moves . add ( move )  ;   }   }  if  ( unmoved messages count  !  =  0 )   {  delete rows for messages ( cr content   uri unmoved messages unmoved messages count )  ;   }  if  ( moves . is empty (  )  )   {  return null ;   }  return moves ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\MessageMove.java,get source folder id,public final  string   (  )  {  return m src folder server id ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\MessageMove.java,get source folder key,public final long   (  )  {  return m src folder key ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\MessageMove.java,init,public static void   (  )  {  content   uri =  email content . content   uri . build upon (  )  . append encoded path ( path )  . build (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\MessageMove.java,upsync fail,public static void   ( final  content resolver cr final long[] message keys final int count )  {  fail messages ( cr content   uri message keys count )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\MessageMove.java,upsync retry,public static void   ( final  content resolver cr final long[] message keys final int count )  {  retry messages ( cr content   uri message keys count )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\MessageMove.java,upsync successful,public static void   ( final  content resolver cr final long[] message keys final int count )  {  delete rows for messages ( cr content   uri message keys count )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\MessageStateChange.java, message state change,private   ( final long message key final  string server id final long id final int old flag read final int new flag read final int old flag favorite final int new flag favorite final long mailbox id )  {  super ( message key server id id )  ;  m old flag read = old flag read ;  m new flag read = new flag read ;  m old flag favorite = old flag favorite ;  m new flag favorite = new flag favorite ;  m mailbox id = mailbox id ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\MessageStateChange.java,convert to changes map,public static  long sparse array <  list <  message state change >  >    ( final  list <  message state change >  changes )  {  if  ( changes  =  =  null )   {  return null ;   }  final  long sparse array <  list <  message state change >  >  changes map = new  long sparse array (  )  ;  for  (  final  message state change change : changes )   {   list <  message state change >  list = changes map . get ( change . m mailbox id )  ;  if  ( list  =  =  null )   {  list = new  array list (  )  ;  changes map . put ( change . m mailbox id list )  ;   }  list . add ( change )  ;   }  if  ( changes map . size (  )   =  =  0 )   {  return null ;   }  return changes map ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\MessageStateChange.java,get changes,"public static  list <  message state change >    ( final  context context final long account id final boolean ignore favorites )  {  final  content resolver cr = context . get content resolver (  )  ;  final  cursor c = get cursor ( cr content   uri  projection change query . projection account id )  ;  if  ( c  =  =  null )   {  return null ;   }   long sparse array <  message state change >  changes map = new  long sparse array (  )  ;  try  {  while  ( c . move to next (  )  )   {  final long id = c . get long (  projection change query . column   id )  ;  final long message key = c . get long (  projection change query . column   message   key )  ;  final  string server id = c . get string (  projection change query . column   server   id )  ;  final int old flag read = c . get int (  projection change query . column   old   flag   read )  ;  final int new flag read table = c . get int (  projection change query . column   new   flag   read )  ;  final int new flag read =  ( new flag read table  =  =  value   unchanged )   ?  old flag read : new flag read table ;  final int old flag favorite = c . get int (  projection change query . column   old   flag   favorite )  ;  final int new flag favorite table = c . get int (  projection change query . column   new   flag   favorite )  ;  final int new flag favorite =  ( ignore favorites || new flag favorite table  =  =  value   unchanged )   ?  old flag favorite : new flag favorite table ;  final  message state change existing change = changes map . get ( message key )  ;  if  ( existing change  !  =  null )   {  if  ( existing change . m last id  >  =  id )   {   log utils . w ( log   tag ""d changes were not in ascending id order"" )  ;   }  if  ( existing change . m new flag read  !  =  old flag read || existing change . m new flag favorite  !  =  old flag favorite )   {   log utils . w ( log   tag ""existing change inconsistent with new change"" )  ;   }  existing change . m new flag read = new flag read ;  existing change . m new flag favorite = new flag favorite ;  existing change . m last id = id ;   }  else  {  final long mailbox id =  message move . get last synced mailbox for message ( cr message key )  ;  if  ( mailbox id  =  =   mailbox . no   mailbox )   {   log utils . e ( log   tag "" no mailbox id for message %d"" message key )  ;   }  else  {  changes map . put ( message key new  message state change ( message key server id id old flag read new flag read old flag favorite new flag favorite mailbox id )  )  ;   }   }   }   }  finally  {  c . close (  )  ;   }  final int count = changes map . size (  )  ;  final long[] unchanged messages = new long[count] ;  int unchanged messages count = 0 ;  final  array list <  message state change >  changes = new  array list ( count )  ;  for  ( int i = 0 ;  i  <  changes map . size (  )  ;   +  + i )   {  final  message state change change = changes map . value at ( i )  ;  if  (  ( change . m server id  =  =  null || change . m server id . length (  )   =  =  0 )  ||  ( change . m old flag read  =  =  change . m new flag read && change . m old flag favorite  =  =  change . m new flag favorite )  )   {  unchanged messages[unchanged messages count] = change . m message key ;   +  + unchanged messages count ;   }  else  {  changes . add ( change )  ;   }   }  if  ( unchanged messages count  !  =  0 )   {  delete rows for messages ( cr content   uri unchanged messages unchanged messages count )  ;   }  if  ( changes . is empty (  )  )   {  return null ;   }  return changes ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\MessageStateChange.java,get new flag favorite,public final int   (  )  {  if  ( m old flag favorite  =  =  m new flag favorite )   {  return value   unchanged ;   }  return m new flag favorite ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\MessageStateChange.java,get new flag read,public final int   (  )  {  if  ( m old flag read  =  =  m new flag read )   {  return value   unchanged ;   }  return m new flag read ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\MessageStateChange.java,init,public static void   (  )  {  content   uri =  email content . content   uri . build upon (  )  . append encoded path ( path )  . build (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\MessageStateChange.java,upsync retry,public static void   ( final  content resolver cr final long[] message keys final int count )  {  retry messages ( cr content   uri message keys count )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\MessageStateChange.java,upsync successful,public static void   ( final  content resolver cr final long[] message keys final int count )  {  delete rows for messages ( cr content   uri message keys count )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Policy.java, policy,public   (  parcel in )  {  m base uri = content   uri ;  m id = in . read long (  )  ;  m password mode = in . read int (  )  ;  m password min length = in . read int (  )  ;  m password max fails = in . read int (  )  ;  m password history = in . read int (  )  ;  m password expiration days = in . read int (  )  ;  m password complex chars = in . read int (  )  ;  m max screen lock time = in . read int (  )  ;  m require remote wipe = in . read int (  )   =  =  1 ;  m require encryption = in . read int (  )   =  =  1 ;  m require encryption external = in . read int (  )   =  =  1 ;  m require manual sync when roaming = in . read int (  )   =  =  1 ;  m dont allow camera = in . read int (  )   =  =  1 ;  m dont allow attachments = in . read int (  )   =  =  1 ;  m dont allow html = in . read int (  )   =  =  1 ;  m max attachment size = in . read int (  )  ;  m max text truncation size = in . read int (  )  ;  m max html truncation size = in . read int (  )  ;  m max email lookback = in . read int (  )  ;  m max calendar lookback = in . read int (  )  ;  m password recovery enabled = in . read int (  )   =  =  1 ;  m protocol policies enforced = in . read string (  )  ;  m protocol policies unsupported = in . read string (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Policy.java,add policy string to list,public static  array list <  string >    (  string policy string  array list <  string >  policy list )  {  if  ( policy string  !  =  null )   {  int start = 0 ;  int len = policy string . length (  )  ;  while  ( start  <  len )   {  int end = policy string . index of ( policy   string   delimiter start )  ;  if  ( end  >  start )   {  policy list . add ( policy string . substring ( start end )  )  ;  start = end  +  1 ;   }  else  {  break ;   }   }   }  return policy list ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Policy.java,append policy,"private static void   (  string builder sb  string code int value )  {  sb . append ( code )  ;  sb . append ( "":"" )  ;  sb . append ( value )  ;  sb . append ( "" "" )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Policy.java,create from parcel,@ override public  policy   (  parcel in )  {  return new  policy ( in )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Policy.java,describe contents,@ override public int   (  )  {  return 0 ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Policy.java,equals,@ override public boolean   (  object other )  {  if  (  !  ( other instanceof  policy )  )  return false ;   policy other policy =  (  policy ) other ;  if  ( m require encryption  !  =  other policy . m require encryption )  return false ;  if  ( m requ
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Policy.java,get account id with policy key,"public static long   (  context context long id )  {  return  utility . get first row long ( context  account . content   uri  account . id   projection  account columns . policy   key  +  "" =  ? "" new  string[] {  long . to string ( id )  }  null  account . id   projection   column  account . no   account )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Policy.java,get content notification uri,@ override protected  uri   (  )  {  return  policy . content   uri ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Policy.java,getdp manager password expiration timeout,public long   (  )  {  long result = m password expiration days * days   to   msec ;  if  ( result  >  0 )   {  result +  = expiration   offset   msec ;   }  return result ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Policy.java,getdp manager password quality,public int   (  )  {  switch  ( m password mode )   {  case password   mode   simple: return  device policy manager . password   quality   numeric ;  case password   mode   strong: if  ( m password complex chars  =  =  0 )   {  return  device policy manager . password   quality   alphanumeric ;   }  else  {  return  device policy manager . password   quality   complex ;   }  default : return  device policy manager . password   quality   unspecified ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Policy.java,hash code,@ override public int   (  )  {  int code = m require encryption  ?  1 : 0 ;  code +  =  ( m require encryption external  ?  1 : 0 )   <  <  1 ;  code +  =  ( m require remote wipe  ?  1 : 0 )   <  <  2 ;  code +  =  ( m max screen lock time  <  <  3 )  ;
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Policy.java,init policy,"public static void   (  )  {  content   uri =  uri . parse (  email content . content   uri  +  "" / policy"" )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Policy.java,new array,@ override public  policy[]   ( int size )  {  return new  policy[size] ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Policy.java,normalize,"public void   (  )  {  if  ( m password mode  =  =  password   mode   none )   {  m password max fails = 0 ;  m max screen lock time = 0 ;  m password min length = 0 ;  m password complex chars = 0 ;  m password history = 0 ;  m password expiration days = 0 ;   }  else  {  if  (  ( m password mode  !  =  password   mode   simple )  &&  ( m password mode  !  =  password   mode   strong )  )   {  throw new  illegal argument exception ( ""password mode"" )  ;   }  if  ( m password mode  =  =  password   mode   simple )   {  m password complex chars = 0 ;   }   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Policy.java,restore,@ override public void   (  cursor cursor )  {  m base uri = content   uri ;  m id = cursor . get long ( content   id   column )  ;  m password mode = cursor . get int ( content   password   mode   column )  ;  m password min length = cursor . get int ( c
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Policy.java,restore policy with id,public static  policy   (  context context long id  content observer observer )  {  return  email content . restore content with id ( context  policy . class  policy . content   uri  policy . content   projection id observer )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Policy.java,save,@ override public  uri   (  context context )  {  normalize (  )  ;  return super . save ( context )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Policy.java,set attachment flags for new policy,"public static void   (  context context  account account  policy policy )  {   content resolver resolver = context . get content resolver (  )  ;   cursor c = resolver . query (  attachment . content   uri attachment   reset   projection  attachment columns . account   key  +  "" =  ? "" new  string[] {  long . to string ( account . m id )  }  null )  ;   content values cv = new  content values (  )  ;  try  {  int policy max = policy . m dont allow attachments  ?  0 :  ( policy . m max attachment size  >  0 )   ?  policy . m max attachment size :  integer . max   value ;  while  ( c . move to next (  )  )   {  int flags = c . get int ( attachment   reset   projection   flags )  ;  int size = c . get int ( attachment   reset   projection   size )  ;  boolean was restricted =  ( flags &  attachment . flag   policy   disallows   download )   !  =  0 ;  boolean is restricted = size  >  policy max ;  if  ( is restricted  !  =  was restricted )   {  if  ( is restricted )   {  flags| =  attachment . flag   policy   disallows   download ;   }  else  {  flags& = ~ attachment . flag   policy   disallows   download ;   }  long id = c . get long ( attachment   reset   projection   id )  ;  cv . put (  attachment columns . flags flags )  ;  resolver . update (  content uris . with appended id (  attachment . content   uri id )  cv null null )  ;   }   }   }  finally  {  c . close (  )  ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Policy.java,to content values,@ override public  content values   (  )  {   content values values = new  content values (  )  ;  values . put (  policy columns . password   mode m password mode )  ;  values . put (  policy columns . password   min   length m password min length )  ;  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Policy.java,to string,"@ override public  string   (  )  {   string builder sb = new  string builder ( ""["" )  ;  if  ( equals ( no   policy )  )   {  sb . append ( "" no policies]"" )  ;   }  else  {  if  ( m password mode  =  =  password   mode   none )   {  sb . append ( "" pwd "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Policy.java,write to parcel,@ override public void   (  parcel dest int flags )  {  dest . write long ( m id )  ;  dest . write int ( m password mode )  ;  dest . write int ( m password min length )  ;  dest . write int ( m password max fails )  ;  dest . write int ( m password hist
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\service\AccountServiceProxy.java, account service proxy,"public   (  context    context )  {  super (    context get intent for email package (    context ""account   intent"" )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\service\AccountServiceProxy.java,as binder,@ override public i binder   (  )  {  return null ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\service\AccountServiceProxy.java,get account color,"@ override public int   ( final long account id )  {  set task ( new  proxy task (  )  {  @ override public void run (  )  throws  remote exception  {  m return = m service . get account color ( account id )  ;   }   }   ""get account color"" )  ;  wait for"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\service\AccountServiceProxy.java,get configuration data,"@ override public  bundle   ( final  string account type )  {  set task ( new  proxy task (  )  {  @ override public void run (  )  throws  remote exception  {  m return = m service . get configuration data ( account type )  ;   }   }   ""get configuration"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\service\AccountServiceProxy.java,get device id,"@ override public  string   (  )  {  set task ( new  proxy task (  )  {  @ override public void run (  )  throws  remote exception  {  m return = m service . get device id (  )  ;   }   }   ""get device id"" )  ;  wait for completion (  )  ;  if  ( m return"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\service\AccountServiceProxy.java,on connected,@ override public void   ( i binder binder )  {  m service = i account service .  stub . as interface ( binder )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\service\AccountServiceProxy.java,run,@ override public void   (  )  throws  remote exception  {  m return = m service . get device id (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\QuickResponse.java,init quick response,"public static void   (  )  {  content   uri =  uri . parse (  email content . content   uri  +  "" / quickresponse"" )  ;  account   id   uri =  uri . parse (  email content . content   uri  +  "" / quickresponse / account"" )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\service\EmailServiceProxy.java, email service proxy,public   (  context    context  intent    intent )  {  super (    context    intent )  ;  try  {   device . get device id (    context )  ;   }  catch  (  io exception e )   {   }   temp directory . set temp directory (    context )  ;  is remote = true ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\service\EmailServiceProxy.java,as binder,@ override public i binder   (  )  {  return null ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\service\EmailServiceProxy.java,auto discover,@ override public  bundle   ( final  string user name final  string password )  throws  remote exception  {  set task ( new  proxy task (  )  {  @ override public void run (  )  throws  remote exception  {  m return = m service . auto discover ( user name
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\service\EmailServiceProxy.java,delete external accountpim data,@ override public void   ( final  string email address )  throws  remote exception  {  set task ( new  proxy task (  )  {  @ override public void run (  )  throws  remote exception  {  m service . delete external accountpim data ( email address )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\service\EmailServiceProxy.java,get api version,"public int   (  )  {  set task ( new  proxy task (  )  {  @ override public void run (  )  throws  remote exception  {  m return = m service . get api version (  )  ;   }   }   ""get api version"" )  ;  wait for completion (  )  ;  if  ( m return  =  =  null )   {   log utils . wtf ( tag ""failed to get api version"" )  ;  return  - 1 ;   }  else  {  return  (  integer ) m return ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\service\EmailServiceProxy.java,is remote,public boolean   (  )  {  return is remote ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\service\EmailServiceProxy.java,load attachment,@ override public void   ( final i email service callback cb final long account id final long attachment id final boolean background )  throws  remote exception  {  set task ( new  proxy task (  )  {  @ override public void run (  )  throws  remote except
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\service\EmailServiceProxy.java,on connected,@ override public void   ( i binder binder )  {  m service = i email service .  stub . as interface ( binder )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\service\EmailServiceProxy.java,push modify,"@ override public void   ( final long account id )  throws  remote exception  {  set task ( new  proxy task (  )  {  @ override public void run (  )  throws  remote exception  {  m service . push modify ( account id )  ;   }   }   ""push modify"" )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\service\EmailServiceProxy.java,run,@ override public void   (  )  throws  remote exception  {  m return = m service . get api version (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\service\EmailServiceProxy.java,search messages,@ override public int   ( final long account id final  search params search params final long dest mailbox id )  throws  remote exception  {  set task ( new  proxy task (  )  {  @ override public void run (  )  throws  remote exception  {  m return = m se
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\service\EmailServiceProxy.java,send mail,"@ override public void   ( final long account id )  throws  remote exception  {  set task ( new  proxy task (  )  {  @ override public void run (  )  throws  remote exception  {  m service . send mail ( account id )  ;   }   }   ""send mail"" )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\service\EmailServiceProxy.java,send meeting response,@ override public void   ( final long message id final int response )  throws  remote exception  {  set task ( new  proxy task (  )  {  @ override public void run (  )  throws  remote exception  {  m service . send meeting response ( message id response )
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\service\EmailServiceProxy.java,set logging,"@ override public void   ( final int flags )  throws  remote exception  {  set task ( new  proxy task (  )  {  @ override public void run (  )  throws  remote exception  {  m service . set logging ( flags )  ;   }   }   ""set logging"" )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\service\EmailServiceProxy.java,sync,"@ override public int   ( final long account id final  bundle sync extras )  {  set task ( new  proxy task (  )  {  @ override public void run (  )  throws  remote exception  {  m return = m service . sync ( account id sync extras )  ;   }   }   ""sync"" ) "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\service\EmailServiceProxy.java,update folder list,"@ override public void   ( final long account id )  throws  remote exception  {  set task ( new  proxy task (  )  {  @ override public void run (  )  throws  remote exception  {  m service . update folder list ( account id )  ;   }   }   ""update folder li"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\service\EmailServiceProxy.java,validate,@ override public  bundle   ( final  host auth compat host auth com )  throws  remote exception  {  set task ( new  proxy task (  )  {  @ override public void run (  )  throws  remote exception  {  m return = m service . validate ( host auth com )  ;   } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\service\HostAuthCompat.java, host auth compat,public   (  parcel in )  {  m protocol = in . read string (  )  ;  m address = in . read string (  )  ;  m port = in . read int (  )  ;  m flags = in . read int (  )  ;  m login = in . read string (  )  ;  m password = in . read string (  )  ;  m domain = in . read string (  )  ;  m client cert alias = in . read string (  )  ;  m server cert = in . create byte array (  )  ;  m provider id = in . read string (  )  ;  m access token = in . read string (  )  ;  m refresh token = in . read string (  )  ;  m expiration = in . read long (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\service\HostAuthCompat.java,create from parcel,@ override public  host auth compat   (  parcel in )  {  return new  host auth compat ( in )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\service\HostAuthCompat.java,describe contents,@ override public int   (  )  {  return 0 ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\service\HostAuthCompat.java,new array,@ override public  host auth compat[]   ( int size )  {  return new  host auth compat[size] ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\service\HostAuthCompat.java,to host auth,public  host auth   (  )  {   host auth host auth = new  host auth (  )  ;  host auth . m protocol = m protocol ;  host auth . m address = m address ;  host auth . m port = m port ;  host auth . m flags = m flags ;  host auth . m login = m login ;  host auth . m password = m password ;  host auth . m domain = m domain ;  host auth . m client cert alias = m client cert alias ;  host auth . m server cert = m server cert ;  if  (  !  text utils . is empty ( m provider id )  )   {  host auth . m credential = new  credential (  )  ;  host auth . m credential . m provider id = m provider id ;  host auth . m credential . m access token = m access token ;  host auth . m credential . m refresh token = m refresh token ;  host auth . m credential . m expiration = m expiration ;   }  return host auth ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\service\HostAuthCompat.java,to string,"@ override public  string   (  )  {  return ""[protocol ""  +  m protocol  +  ""]"" ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\service\HostAuthCompat.java,write to parcel,@ override public void   (  parcel parcel int i )  {  parcel . write string ( m protocol )  ;  parcel . write string ( m address )  ;  parcel . write int ( m port )  ;  parcel . write int ( m flags )  ;  parcel . write string ( m login )  ;  parcel . writ
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\service\LegacyPolicySet.java,flags to policy,public static  policy   ( long flags )  {   policy policy = new  policy (  )  ;  policy . m password mode =  (  ( int )  ( flags & password   mode   mask )  )   >  >  password   mode   shift ;  policy . m password min length =  ( int )  (  ( flags & password   length   mask )   >  >  password   length   shift )  ;  policy . m password max fails =  ( int )  (  ( flags & password   max   fails   mask )   >  >  password   max   fails   shift )  ;  policy . m password complex chars =  ( int )  (  ( flags & password   complex   chars   mask )   >  >  password   complex   chars   shift )  ;  policy . m password history =  ( int )  (  ( flags & password   history   mask )   >  >  password   history   shift )  ;  policy . m password expiration days =  ( int )  (  ( flags & password   expiration   mask )   >  >  password   expiration   shift )  ;  policy . m max screen lock time =  ( int )  (  ( flags & screen   lock   time   mask )   >  >  screen   lock   time   shift )  ;  policy . m require remote wipe = 0  !  =   ( flags & require   remote   wipe )  ;  policy . m require encryption = 0  !  =   ( flags & require   encryption )  ;  policy . m require encryption external = 0  !  =   ( flags & require   encryption   external )  ;  return policy ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\service\PolicyServiceProxy.java, policy service proxy,"public   (  context    context )  {  super (    context get intent for email package (    context ""policy   intent"" )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\service\PolicyServiceProxy.java,as binder,@ override public i binder   (  )  {  return null ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\service\PolicyServiceProxy.java,can disable camera,public static boolean   (  context context )  {  try  {  return new  policy service proxy ( context )  . can disable camera (  )  ;   }  catch  (   remote exception e )   {   }  return false ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\service\PolicyServiceProxy.java,is active,public static boolean   (  context context  policy policies )  {  try  {  return new  policy service proxy ( context )  . is active ( policies )  ;   }  catch  (   remote exception e )   {   }  return false ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\service\PolicyServiceProxy.java,on connected,@ override public void   ( i binder binder )  {  m service = i policy service .  stub . as interface ( binder )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\service\PolicyServiceProxy.java,remote wipe,"public static void   (  context context )  {  try  {  new  policy service proxy ( context )  . remote wipe (  )  ;   }  catch  (   remote exception e )   {  throw new  illegal state exception ( "" policy service transaction failed"" )  ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\service\PolicyServiceProxy.java,run,@ override public void   (  )  throws  remote exception  {  m service . set account hold flag ( arg0 arg1 )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\service\PolicyServiceProxy.java,set account hold flag,"public static void   (  context context  account account boolean new state )  {  try  {  new  policy service proxy ( context )  . set account hold flag ( account . m id new state )  ;   }  catch  (   remote exception e )   {  throw new  illegal state exception ( "" policy service transaction failed"" )  ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\service\PolicyServiceProxy.java,set account policy,public static void   (  context context long account id  policy policy  string security key )  {  set account policy2 ( context account id policy security key true )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\service\PolicyServiceProxy.java,set account policy,"public static void   (  context context long account id  policy policy  string security key boolean notify )  {  try  {  new  policy service proxy ( context )  . set account policy2 ( account id policy security key notify )  ;  return ;   }  catch  (   remote exception e )   {   }  throw new  illegal state exception ( "" policy service transaction failed"" )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\service\ServiceUnavailableException.java, service unavailable exception,public   (  string string )  {  super ( string )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\service\ServiceProxy.java, service proxy,public   (  context    context  intent    intent )  {  m context =    context ;  m intent =    intent ;  m tag = get class (  )  . get simple name (  )  ;  if  (  debug . is debugger connected (  )  )   {  m timeout <  <  = 2 ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\service\ServiceProxy.java,do in background,"@ override protected  void   (  void .  .  .  params )  {  try  {  m task . run (  )  ;   }  catch  (   remote exception e )   {   log utils . e ( m tag e "" remote exception thrown running m task ! "" )  ;   }  finally  {  try  {  m context . unbind servic"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\service\ServiceProxy.java,get intent for email package,"public static  intent   (  context context  string action name )  {  final  intent intent = new  intent (  email content . email   package   name  +  "" . ""  +  action name )  ;  final  provider info info = context . get package manager (  )  . resolve content provider (  email content . authority 0 )  ;  if  ( info  !  =  null )   {  final  string package name = info . package name ;  intent . set package ( package name )  ;   }  else  {   log utils . e (  log utils . tag "" could not find the  email  content  provider"" )  ;   }  return intent ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\service\ServiceProxy.java,get timeout,public int   (  )  {  return m timeout ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\service\SyncWindow.java,to days,public static int   ( int window )  {  switch  ( window )   {  case sync   window   1   day: return 1 ;  case sync   window   3   days: return 3 ;  case sync   window   1   week: return 7 ;  case sync   window   2   weeks: return 14 ;  case sync   window   1   month: return 30 ;  case sync   window   all: return 365 * 10 ;  case sync   window   account: default : return 14 ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\TrafficFlags.java,get attachment flags,public static int   (  context context  account account )  {  return  ( int ) account . m id | reason   attachment   user ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\TrafficFlags.java,get smtp flags,public static int   (  context context  account account )  {  return  ( int ) account . m id | reason   sync ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\TrafficFlags.java,get sync flags,public static int   (  context context  account account )  {  return  ( int ) account . m id | reason   sync ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\TrafficFlags.java,to string,"public static  string   ( int flags )  {   string builder sb = new  string builder (  )  ;  sb . append ( ""account "" )  ;  sb . append ( flags & account   mask )  ;  sb . append ( ' ' )  ;  sb . append ( reasons[ ( flags & reason   mask )   >  >  reason   shift] )  ;  int masked data = flags & data   mask ;  if  ( masked data  !  =  0 )   {  sb . append ( ' ' )  ;  sb . append ( masked data  =  =  data   calendar  ?  ""calendar"" : ""contacts"" )  ;   }  return sb . to string (  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\CertificateRequestor.java,alias,@ override public void   (  string alias )  {  if  ( alias  =  =  null )   {  set result ( result   canceled )  ;   }  else  {   intent data = new  intent (  )  ;  data . put extra ( result   alias alias )  ;  set result ( result   ok data )  ;   }  finis
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\CertificateRequestor.java,on create,@ override protected void   (  bundle saved instance state )  {  super . on create ( saved instance state )  ;   intent i = get intent (  )  ;   string host = i . get string extra ( extra   host )  ;  int port = i . get int extra ( extra   port  - 1 )  ; 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\AttachmentUtilities.java,copy file,private static long   (  input stream in  output stream out )  throws io exception  {  long size = io utils . copy ( in out )  ;  in . close (  )  ;  out . flush (  )  ;  out . close (  )  ;  return size ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\AttachmentUtilities.java,delete all account attachment files,"public static void   (  context context long account id )  {   file[] files = get attachment directory ( context account id )  . list files (  )  ;  if  ( files  =  =  null )  return ;  for  (   file file : files )   {  boolean result = file . delete (  )  ;  if  (  ! result )   {   log utils . e (  logging . log   tag "" failed to delete attachment file ""  +  file . get name (  )  )  ;   }   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\AttachmentUtilities.java,delete all attachment files,public static void   (  context context long account id long message id )  {   uri uri =  content uris . with appended id (  attachment . message   id   uri message id )  ;   cursor c = context . get content resolver (  )  . query ( uri  attachment . id   projection null null null )  ;  try  {  while  ( c . move to next (  )  )   {  long attachment id = c . get long (  attachment . id   projection   column )  ;   file attachment file = get attachment filename ( context account id attachment id )  ;  attachment file . delete (  )  ;   }   }  finally  {  c . close (  )  ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\AttachmentUtilities.java,delete all cached attachment files,public static void   (  context context long account id long message id )  {  final  uri uri =  content uris . with appended id (  attachment . message   id   uri message id )  ;  final  cursor c = context . get content resolver (  )  . query ( uri attachment   cached   file   projection null null null )  ;  try  {  while  ( c . move to next (  )  )   {  final  string file name = c . get string ( 0 )  ;  if  (  !  text utils . is empty ( file name )  )   {  final  file cached file = new  file ( file name )  ;  cached file . delete (  )  ;   }   }   }  finally  {  c . close (  )  ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\AttachmentUtilities.java,delete all mailbox attachment files,"public static void   (  context context long account id long mailbox id )  {   cursor c = context . get content resolver (  )  . query (  message . content   uri  message . id   column   projection  message columns . mailbox   key  +  "" =  ? "" new  string[] {  long . to string ( mailbox id )  }  null )  ;  try  {  while  ( c . move to next (  )  )   {  long message id = c . get long (  message . id   projection   column )  ;  delete all attachment files ( context account id message id )  ;   }   }  finally  {  c . close (  )  ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\AttachmentUtilities.java,get attachment directory,"public static  file   (  context context long account id )  {  return context . get database path ( account id  +  "" . db   att"" )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\AttachmentUtilities.java,get attachment filename,public static  file   (  context context long account id long attachment id )  {  return new  file ( get attachment directory ( context account id )   long . to string ( attachment id )  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\AttachmentUtilities.java,get attachment thumbnail uri,public static  uri   ( long account id long id long width long height )  {  if  ( s uri  =  =  null )   {  s uri =  uri . parse (  attachment . attachment   provider   uri   prefix )  ;   }  return s uri . build upon (  )  . append path (  long . to string ( account id )  )  . append path (  long . to string ( id )  )  . append path ( format   thumbnail )  . append path (  long . to string ( width )  )  . append path (  long . to string ( height )  )  . build (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\AttachmentUtilities.java,get attachment uri,public static  uri   ( long account id long id )  {  if  ( s uri  =  =  null )   {  s uri =  uri . parse (  attachment . attachment   provider   uri   prefix )  ;   }  return s uri . build upon (  )  . append path (  long . to string ( account id )  )  . append path (  long . to string ( id )  )  . append path ( format   raw )  . build (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\AttachmentUtilities.java,get filename extension,public static  string   (  string file name )  {   string extension = null ;  if  (  !  text utils . is empty ( file name )  )   {  int last dot = file name . last index of ( ' . ' )  ;  if  (  ( last dot  >  0 )  &&  ( last dot  <  file name . length (  )   -  1 )  )   {  extension = file name . substring ( last dot  +  1 )  . to lower case (  )  ;   }   }  return extension ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\AttachmentUtilities.java,infer mime type,"public static  string   ( final  string file name final  string mime type )  {   string result type = null ;   string file extension = get filename extension ( file name )  ;  boolean is text plain = ""text / plain"" . equals ignore case ( mime type )  ;  if  ( ""eml"" . equals ( file extension )  )   {  result type = ""message / rfc822"" ;   }  else  {  boolean is generic type = is text plain || ""application / octet - stream"" . equals ignore case ( mime type )  ;  if  ( is generic type ||  text utils . is empty ( mime type )  )   {  if  (  !  text utils . is empty ( file extension )  )   {  result type =  mime type map . get singleton (  )  . get mime type from extension ( file extension )  ;  if  (  text utils . is empty ( result type )  )   {  result type = is text plain  ?  mime type : ""application / ""  +  file extension ;   }   }   }  else  {  result type = mime type ;   }   }  if  (  text utils . is empty ( result type )  )   {  result type = is text plain  ?  ""text / plain"" : ""application / octet - stream"" ;   }  return result type . to lower case (  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\AttachmentUtilities.java,resolve attachment id to content uri,public static  uri   (  content resolver resolver  uri attachment uri )  {   cursor c = resolver . query ( attachment uri new  string[] {  columns . data }  null null null )  ;  if  ( c  !  =  null )   {  try  {  if  ( c . move to first (  )  )   {  final  string str uri = c . get string ( 0 )  ;  if  ( str uri  !  =  null )   {  return  uri . parse ( str uri )  ;   }   }   }  finally  {  c . close (  )  ;   }   }  return attachment uri ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\AttachmentUtilities.java,save attachment,"public static void   (  context context  input stream in  attachment attachment )  {  final  uri uri =  content uris . with appended id (  attachment . content   uri attachment . m id )  ;  final  content values cv = new  content values (  )  ;  final long attachment id = attachment . m id ;  final long account id = attachment . m account key ;  final  string content uri ;  final long size ;  try  {   content resolver resolver = context . get content resolver (  )  ;  if  ( attachment . m ui destination  =  =  ui provider .  attachment destination . cache )   {   uri att uri = get attachment uri ( account id attachment id )  ;  size = copy file ( in resolver . open output stream ( att uri )  )  ;  content uri = att uri . to string (  )  ;   }  else if  (  utility . is external storage mounted (  )  )   {  if  (  text utils . is empty ( attachment . m file name )  )   {   log utils . w (  logging . log   tag "" trying to save an attachment with no name: %d"" attachment id )  ;  throw new io exception ( "" can't save an attachment with no name"" )  ;   }   file downloads =  environment . get external storage public directory (  environment . directory   downloads )  ;  downloads . mkdirs (  )  ;   file file =  utility . create unique file ( downloads attachment . m file name )  ;  size = copy file ( in new  file output stream ( file )  )  ;   string absolute path = file . get absolute path (  )  ;   media scanner connection . scan file ( context new  string[] { absolute path }  null null )  ;  final  string mime type =  text utils . is empty ( attachment . m mime type )   ?  ""application / octet - stream"" : attachment . m mime type ;  try  {   download manager dm =  (  download manager ) context . get system service (  context . download   service )  ;  long id = dm . add completed download ( attachment . m file name attachment . m file name false mime type absolute path size true )  ;  content uri = dm . get uri for downloaded file ( id )  . to string (  )  ;   }  catch  (  final  illegal argument exception e )   {   log utils . d (  log utils . tag e ""iae from  download manager while saving attachment"" )  ;  throw new io exception ( e )  ;   }   }  else  {   log utils . w (  logging . log   tag "" trying to save an attachment without external storage ? "" )  ;  throw new io exception (  )  ;   }  cv . put (  attachment columns . size size )  ;  cv . put (  attachment columns . content   uri content uri )  ;  cv . put (  attachment columns . ui   state ui provider .  attachment state . saved )  ;   }  catch  (  io exception e )   {  cv . put (  attachment columns . ui   state ui provider .  attachment state . failed )  ;   }  context . get content resolver (  )  . update ( uri cv null null )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\EmailClientConnectionManager.java, email client connection manager,private   (  http params params  scheme registry registry  tracking key manager key manager )  {  super ( params registry )  ;  m tracking key manager = key manager ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\EmailClientConnectionManager.java,has detected unsatisfied cert req,public synchronized boolean   ( long since )  {  return m tracking key manager . get last cert req time (  )   >  =  since ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\EmailClientConnectionManager.java,make scheme,"public static  string   ( boolean use ssl boolean trust all server certs  string client cert alias )  {  if  (  !  text utils . is empty ( client cert alias )  )   {  return make scheme for client cert ( client cert alias trust all server certs )  ;   }  else  {  return use ssl  ?   ( trust all server certs  ?  ""httpts"" : ""https"" )  : ""http"" ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\EmailClientConnectionManager.java,make scheme for client cert,"private static  string   (  string client cert alias boolean trust all server certs )  {   string safe alias = ssl utils . escape for scheme name ( client cert alias )  ;  return  ( trust all server certs  ?  ""httpts"" : ""https"" )   +  "" + client cert + ""  +  safe alias ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\EmailClientConnectionManager.java,new instance,"public static  email client connection manager   (  context context  http params params  host auth host auth )  {   tracking key manager key manager = new  tracking key manager (  )  ;  boolean ssl = host auth . should use ssl (  )  ;  int port = host auth . m port ;   scheme registry registry = new  scheme registry (  )  ;  registry . register ( new  scheme ( ""http""  plain socket factory . get socket factory (  )  ssl  ?  standard   port : port )  )  ;  registry . register ( new  scheme ( ""https"" ssl utils . get http socket factory ( context host auth key manager false )  ssl  ?  port : standard   ssl   port )  )  ;  registry . register ( new  scheme ( ""httpts"" ssl utils . get http socket factory ( context host auth key manager true )  ssl  ?  port : standard   ssl   port )  )  ;  return new  email client connection manager ( params registry key manager )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\EmailClientConnectionManager.java,register client cert,"public synchronized void   (  context context  host auth host auth )  throws  certificate exception  {  if  (  text utils . is empty ( host auth . m client cert alias )  )   {  return ;   }   scheme registry registry = get scheme registry (  )  ;   string scheme name = make scheme for client cert ( host auth . m client cert alias host auth . should trust all server certs (  )  )  ;   scheme existing = registry . get ( scheme name )  ;  if  ( existing  =  =  null )   {  if  ( log   enabled )   {   log utils . i (  logging . log   tag "" registering socket factory for certificate alias [""  +  host auth . m client cert alias  +  ""]"" )  ;   }   key manager key manager =  key chain key manager . from alias ( context host auth . m client cert alias )  ;  boolean insecure = host auth . should trust all server certs (  )  ;  ssl socket factory ssf = ssl utils . get http socket factory ( context host auth key manager insecure )  ;  registry . register ( new  scheme ( scheme name ssf host auth . m port )  )  ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\EmailClientConnectionManager.java,unregister client cert,public synchronized void   (  string client cert alias boolean trust all server certs )  {   scheme registry registry = get scheme registry (  )  ;   string scheme name = make scheme for client cert ( client cert alias trust all server certs )  ;   scheme existing = registry . get ( scheme name )  ;  if  ( existing  !  =  null )   {  registry . unregister ( scheme name )  ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\CountingOutputStream.java, counting output stream,public   (  output stream output stream )  {  m output stream = output stream ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\CountingOutputStream.java,get count,public long   (  )  {  return m count ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\CountingOutputStream.java,write,@ override public void   ( int one byte )  throws io exception  {  m output stream . write ( one byte )  ;  m count +  +  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\DelayedOperations.java, delayed operations,public   (  handler handler )  {  m handler = handler ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\EmailAsyncTask.java, email async task,public   (  tracker tracker )  {  m tracker = tracker ;  if  ( m tracker  !  =  null )   {  m tracker . add ( this )  ;   }  m inner task = new  inner task <  params  progress  result >  ( this )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\DelayedOperations.java, queued operation,public   (  runnable actual rannable )  {  m actual rannable = actual rannable ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\DelayedOperations.java,cancel,public void   (  )  {  m pending operations . remove ( this )  ;  cancel runnable ( this )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\DelayedOperations.java,cancel runnable,void   (  runnable r )  {  m handler . remove callbacks ( r )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\DelayedOperations.java,post,public void   (  runnable r )  {  final  queued operation qo = new  queued operation ( r )  ;  m pending operations . add ( qo )  ;  post runnable ( qo )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\DelayedOperations.java,post runnable,void   (  runnable r )  {  m handler . post ( r )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\DelayedOperations.java,remove callbacks,public void   (  )  {  final  array list <  queued operation >  temp = new  array list <  queued operation >  ( m pending operations )  ;  for  (   queued operation qo : temp )   {  qo . cancel (  )  ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\DelayedOperations.java,run,@ override public void   (  )  {  m pending operations . remove ( this )  ;  m actual rannable . run (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\EmailAsyncTask.java, inner task,public   (  email async task <  params2  progress2  result2 >  owner )  {  m owner = owner ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\EmailAsyncTask.java,add,private void   (  email async task <  ?   ?   ?  >  task )  {  synchronized  ( m tasks )   {  m tasks . add ( task )  ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\EmailAsyncTask.java,call do in background for test,final  result   (  params .  .  .  params )  {  return m inner task . do in background ( params )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\EmailAsyncTask.java,call on cancelled for test,final void   (  result result )  {  m inner task . on cancelled ( result )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\EmailAsyncTask.java,call on post execute for test,final void   (  result result )  {  m inner task . on post execute ( result )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\EmailAsyncTask.java,cancel,public final void   ( boolean may interrupt if running )  {  m cancelled = true ;  m inner task . cancel ( may interrupt if running )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\EmailAsyncTask.java,cancel all interrupt,@ visible for testing public void   (  )  {  synchronized  ( m tasks )   {  for  (   email async task <  ?   ?   ?  >  task : m tasks )   {  task . cancel ( true )  ;   }  m tasks . clear (  )  ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\EmailAsyncTask.java,cancel others,void   (  email async task <  ?   ?   ?  >  current )  {  final  class <  ?  >  clazz = current . get class (  )  ;  synchronized  ( m tasks )   {  final  array list <  email async task <  ?   ?   ?  >  >  to remove = new  array list <  email async task <  ?   ?   ?  >  >  (  )  ;  for  (   email async task <  ?   ?   ?  >  task : m tasks )   {  if  (  ( task  !  =  current )  && task . get class (  )  . equals ( clazz )  )   {  task . cancel ( true )  ;  to remove . add ( task )  ;   }   }  for  (   email async task <  ?   ?   ?  >  task : to remove )   {  m tasks . remove ( task )  ;   }   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\EmailAsyncTask.java,cancel previous and execute parallel,public final  email async task <  params  progress  result >    (  params .  .  .  params )  {  return execute internal ( parallel   executor true params )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\EmailAsyncTask.java,cancel previous and execute serial,public final  email async task <  params  progress  result >    (  params .  .  .  params )  {  return execute internal ( serial   executor true params )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\EmailAsyncTask.java,contains task for test,boolean   (  email async task <  ?   ?   ?  >  task )  {  return m tasks . contains ( task )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\EmailAsyncTask.java,do in background,@ override protected  void   (  void .  .  .  params )  {  runnable . run (  )  ;  return null ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\EmailAsyncTask.java,execute internal,private  email async task <  params  progress  result >    (  executor executor boolean cancel previous  params .  .  .  params )  {  if  ( cancel previous )   {  if  ( m tracker  =  =  null )   {  throw new  illegal state exception (  )  ;   }  else  {  m tracker . cancel others ( this )  ;   }   }  m inner task . execute on executor ( executor params )  ;  return this ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\EmailAsyncTask.java,execute parallel,public final  email async task <  params  progress  result >    (  params .  .  .  params )  {  return execute internal ( parallel   executor false params )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\EmailAsyncTask.java,execute serial,public final  email async task <  params  progress  result >    (  params .  .  .  params )  {  return execute internal ( serial   executor false params )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\EmailAsyncTask.java,get,public final  result   (  )  throws  interrupted exception   execution exception  {  return m inner task . get (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\EmailAsyncTask.java,get task count for test,int   (  )  {  return m tasks . size (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\EmailAsyncTask.java,on post execute,@ override public void   (  result2 result )  {  m owner . unregister self (  )  ;  if  ( m owner . m cancelled )   {  m owner . on cancelled ( result )  ;   }  else  {  m owner . on success ( result )  ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\EmailAsyncTask.java,remove,private void   (  email async task <  ?   ?   ?  >  task )  {  synchronized  ( m tasks )   {  m tasks . remove ( task )  ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\EmailAsyncTask.java,run async internal,private static  email async task <  void  void  void >    (  executor executor final  runnable runnable )  {   email async task <  void  void  void >  task = new  email async task <  void  void  void >  ( null )  {  @ override protected  void do in background (   void .  .  .  params )  {  runnable . run (  )  ;  return null ;   }   }   ;  return task . execute internal ( executor false  (  void[] ) null )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\EmailAsyncTask.java,run async parallel,public static  email async task <  void  void  void >    (  runnable runnable )  {  return run async internal ( parallel   executor runnable )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\EmailAsyncTask.java,run async serial,public static  email async task <  void  void  void >    (  runnable runnable )  {  return run async internal ( serial   executor runnable )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\EmailAsyncTask.java,unregister self,final void   (  )  {  if  ( m tracker  !  =  null )   {  m tracker . remove ( this )  ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\IntentUtilities.java,create activity intent url builder,public static  uri .  builder   (  string path )  {  final  uri .  builder b = new  uri .  builder (  )  ;  b . scheme ( activity   intent   scheme )  ;  b . authority ( activity   intent   host )  ;  b . path ( path )  ;  return b ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\IntentUtilities.java,create restart app intent,public static  intent   (  uri data )  {   intent i = new  intent (  intent . action   main data )  ;  prepare restart app intent ( i )  ;  return i ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\IntentUtilities.java,get account id from intent,public static long   (  intent intent )  {  return get long from intent ( intent account   id   param )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\IntentUtilities.java,get account name from intent,public static  string   (  intent intent )  {  return get string from intent ( intent account   name   param )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\IntentUtilities.java,get account uuid from intent,public static  string   (  intent intent )  {  final  uri uri = intent . get data (  )  ;  if  ( uri  =  =  null )   {  return null ;   }   string uuid = uri . get query parameter ( account   uuid   param )  ;  return  text utils . is empty ( uuid )   ?  null : uuid ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\IntentUtilities.java,get long from intent,private static long   (  intent intent  string param name )  {  long value =  - 1 ;  if  ( intent . get data (  )   !  =  null )   {  value = get long param from uri ( intent . get data (  )  param name  - 1 )  ;   }  return value ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\IntentUtilities.java,get long param from uri,private static long   (  uri uri  string param name long default value )  {  final  string value = uri . get query parameter ( param name )  ;  if  (  !  text utils . is empty ( value )  )   {  try  {  return  long . parse long ( value )  ;   }  catch  (   number format exception e )   {   }   }  return default value ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\IntentUtilities.java,get mailbox id from intent,public static long   (  intent intent )  {  return get long from intent ( intent mailbox   id   param )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\IntentUtilities.java,get message id from intent,public static long   (  intent intent )  {  return get long from intent ( intent message   id   param )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\IntentUtilities.java,get string from intent,private static  string   (  intent intent  string param name )  {   string value = null ;  if  ( intent . get data (  )   !  =  null )   {  value = get string param from uri ( intent . get data (  )  param name null )  ;   }  return value ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\IntentUtilities.java,get string param from uri,private static  string   (  uri uri  string param name  string default value )  {  final  string value = uri . get query parameter ( param name )  ;  if  ( value  =  =  null )   {  return default value ;   }  return value ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\IntentUtilities.java,prepare restart app intent,private static void   (  intent i )  {  i . set action (  intent . action   main )  ;  i . add category (  intent . category   launcher )  ;  i . add flags (  intent . flag   activity   clear   top )  ;  i . add flags (  intent . flag   activity   new   task )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\IntentUtilities.java,set account id,public static void   (  uri .  builder b long account id )  {  if  ( account id  !  =   - 1 )   {  b . append query parameter ( account   id   param  long . to string ( account id )  )  ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\IntentUtilities.java,set account name,public static void   (  uri .  builder b  string account name )  {  if  ( account name  !  =  null )   {  b . append query parameter ( account   name   param account name )  ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\IntentUtilities.java,set account uuid,public static void   (  uri .  builder b  string m uuid )  {  if  (  text utils . is empty ( m uuid )  )   {  throw new  illegal argument exception (  )  ;   }  b . append query parameter ( account   uuid   param m uuid )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\IntentUtilities.java,set mailbox id,public static void   (  uri .  builder b long mailbox id )  {  if  ( mailbox id  !  =   - 1 )   {  b . append query parameter ( mailbox   id   param  long . to string ( mailbox id )  )  ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\IntentUtilities.java,set message id,public static void   (  uri .  builder b long message id )  {  if  ( message id  !  =   - 1 )   {  b . append query parameter ( message   id   param  long . to string ( message id )  )  ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\SSLSocketFactoryWrapper.java,ssl socket factory wrapper,  ( final ssl socket factory factory final boolean secure int handshake timeout )  {  m factory = factory ;  m secure = secure ;  m handshake timeout = handshake timeout ;  final  string[] base default cipher suites = m factory . get default cipher suites (  )  ;  final  list <  string >  full cipher suite list = new  array list <  string >  (  arrays . as list ( m factory . get default cipher suites (  )  )  )  ;  final  set <  string >  base default cipher suite set = new  hash set <  string >  ( full cipher suite list )  ;  final  string[] base supported cipher suites = m factory . get supported cipher suites (  )  ;  final  set <  string >  base supported cipher suite set = new  hash set <  string >  (  arrays . as list ( m factory . get supported cipher suites (  )  )  )  ;  for  (   string cipher suite : deprecated   cipher   suites   to   enable )   {  if  ( base supported cipher suite set . contains ( cipher suite )  &&  ! base default cipher suite set . contains ( cipher suite )  )   {  full cipher suite list . add ( cipher suite )  ;   }   }  m default cipher suites = new  string[full cipher suite list . size (  ) ] ;  full cipher suite list . to array ( m default cipher suites )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\SSLSocketFactoryWrapper.java,create socket,@ override public  socket   (  inet address inet address int i  inet address inet address2 int i2 )  throws io exception  {  final ssl socket ssl socket =  ( ssl socket ) m factory . create socket ( inet address i inet address2 i2 )  ;  set handshake time
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\SSLSocketFactoryWrapper.java,get default,"public static ssl socket factory   ( final  key manager[] key managers int handshake timeout )  throws  no such algorithm exception   key management exception  {  final ssl context context = ssl context . get instance ( ""tls"" )  ;  context . init ( key managers null null )  ;  return new ssl socket factory wrapper ( context . get socket factory (  )  true handshake timeout )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\SSLSocketFactoryWrapper.java,get default cipher suites,public  string[]   (  )  {  return m default cipher suites . clone (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\SSLSocketFactoryWrapper.java,get insecure,"public static ssl socket factory   ( final  key manager[] key managers final  trust manager[] trust managers int handshake timeout )  throws  no such algorithm exception   key management exception  {  final ssl context context = ssl context . get instance ( ""tls"" )  ;  context . init ( key managers trust managers null )  ;  return new ssl socket factory wrapper ( context . get socket factory (  )  false handshake timeout )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\SSLSocketFactoryWrapper.java,get supported cipher suites,public  string[]   (  )  {  return m factory . get supported cipher suites (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\SSLSocketFactoryWrapper.java,potentially enable session tickets,"public static boolean   ( ssl socket ssl socket )  {  try  {  ssl socket . get class (  )  . get method ( ""set use session tickets"" boolean . class )  . invoke ( ssl socket true )  ;  return true ;   }  catch  (   exception e )   {  return false ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\SSLSocketFactoryWrapper.java,potentially enable sni,"public static boolean   ( ssl socket ssl socket  string hostname )  {  try  {  ssl socket . get class (  )  . get method ( ""set hostname""  string . class )  . invoke ( ssl socket hostname )  ;  return true ;   }  catch  (   exception ignored )   {  return false ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\SSLSocketFactoryWrapper.java,set handshake timeout,"private void   ( ssl socket ssl socket int timeout )  {  try  {  ssl socket . get class (  )  . get method ( ""set handshake timeout"" int . class )  . invoke ( ssl socket timeout )  ;   }  catch  (   exception e )   {   log utils . w (  log utils . tag e ""unable to set handshake timeout"" )  ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\SSLSocketFactoryWrapper.java,verify hostname,"public static void   (  socket socket  string hostname )  throws io exception  {  if  (  !  ( socket instanceof ssl socket )  )   {  throw new  illegal argument exception ( "" attempt to verify non - ssl socket"" )  ;   }  ssl socket ssl =  ( ssl socket ) socket ;  ssl . start handshake (  )  ;  ssl session session = ssl . get session (  )  ;  if  ( session  =  =  null )   {  throw new ssl exception ( "" cannot verify ssl socket without session"" )  ;   }   log utils . d (  log utils . tag ""using cipher suite %s"" session . get cipher suite (  )  )  ;  if  (  !  httpsurl connection . get default hostname verifier (  )  . verify ( hostname session )  )   {  throw new ssl peer unverified exception ( "" cannot verify hostname: ""  +  hostname )  ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\SSLSocketFactory.java,ssl socket factory,private   (  )  {  super (  )  ;  sslcontext = null ;  socketfactory =  httpsurl connection . get defaultssl socket factory (  )  ;  name resolver = null ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\SSLSocketFactory.java,connect socket,@ override public  socket   ( final  socket sock final  string host final int port final  inet address local address int local port final  http params params )  throws io exception  {  if  ( host  =  =  null )   {  throw new  illegal argument exception ( 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\SSLSocketFactory.java,create key managers,"private static  key manager[]   ( final  key store keystore final  string password )  throws  key store exception   no such algorithm exception   unrecoverable key exception  {  if  ( keystore  =  =  null )   {  throw new  illegal argument exception ( "" keystore may not be null"" )  ;   }   key manager factory kmfactory =  key manager factory . get instance (  key manager factory . get default algorithm (  )  )  ;  kmfactory . init ( keystore password  !  =  null  ?  password . to char array (  )  : null )  ;  return kmfactory . get key managers (  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\SSLSocketFactory.java,create socket,@ override public  socket   ( final  socket socket final  string host final int port final boolean auto close )  throws io exception   unknown host exception  {  ssl socket ssl socket =  ( ssl socket ) socketfactory . create socket ( socket host port auto
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\SSLSocketFactory.java,create trust managers,"private static  trust manager[]   ( final  key store keystore )  throws  key store exception   no such algorithm exception  {  if  ( keystore  =  =  null )   {  throw new  illegal argument exception ( "" keystore may not be null"" )  ;   }   trust manager factory tmfactory =  trust manager factory . get instance (  trust manager factory . get default algorithm (  )  )  ;  tmfactory . init ( keystore )  ;  return tmfactory . get trust managers (  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\SSLSocketFactory.java,get hostname verifier,public x509 hostname verifier   (  )  {  return hostname verifier ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\SSLSocketFactory.java,get socket factory,public static ssl socket factory   (  )  {  return default   factory ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\SSLSocketFactory.java,is secure,"@ override public boolean   (  socket sock )  throws  illegal argument exception  {  if  ( sock  =  =  null )   {  throw new  illegal argument exception ( "" socket may not be null . "" )  ;   }  if  (  !  ( sock instanceof ssl socket )  )   {  throw new  i"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\SSLSocketFactory.java,set hostname verifier,"public void   ( x509 hostname verifier hostname verifier )  {  if  ( hostname verifier  =  =  null )   {  throw new  illegal argument exception ( "" hostname verifier may not be null"" )  ;   }  this . hostname verifier = hostname verifier ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\LoggingInputStream.java, logging input stream,"public   (  input stream in  string tag boolean dump empty lines )  {  super ( in )  ;  m tag = tag  +  "" "" ;  m dump empty lines = dump empty lines ;  init buffer (  )  ;   log utils . d (  logging . log   tag m tag  +  ""dump start"" )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\LoggingInputStream.java,close,@ override public void   (  )  throws io exception  {  super . close (  )  ;  flush log (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\LoggingInputStream.java,flush log,private void   (  )  {  if  ( m dump empty lines ||  ( m sb . length (  )   >  m tag . length (  )  )  )   {   log utils . d (  logging . log   tag m sb . to string (  )  )  ;  init buffer (  )  ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\LoggingInputStream.java,init buffer,private void   (  )  {  m sb = new  string builder ( m tag )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\LoggingInputStream.java,log raw,"private void   ( int one byte )  {  if  ( one byte  =  =  '\r' )   {   }  else if  ( one byte  =  =  '\n' )   {  flush log (  )  ;   }  else if  ( 0x20  <  =  one byte && one byte  <  =  0x7e )   {  m sb . append (  ( char ) one byte )  ;   }  else  {  m sb . append ( ""\\x""  +   utility . byte to hex ( one byte )  )  ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\LoggingInputStream.java,read,@ override public int   ( byte[] b int offset int length )  throws io exception  {  int bytes read = super . read ( b offset length )  ;  int copy bytes = bytes read ;  while  ( copy bytes  >  0 )   {  log raw ( b[offset] & 0xff )  ;  copy bytes -  -  ;  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\EOLConvertingOutputStream.java,eol converting output stream,public   (  output stream out )  {  super ( out )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\EOLConvertingOutputStream.java,flush,@ override public void   (  )  throws io exception  {  if  ( last char  =  =  '\r' )   {  super . write ( '\n' )  ;  last char = '\n' ;   }  super . flush (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\EOLConvertingOutputStream.java,write,@ override public void   ( int one byte )  throws io exception  {  if  ( one byte  =  =  '\n' )   {  if  ( last char  !  =  '\r' )   {  super . write ( '\r' )  ;   }   }  super . write ( one byte )  ;  last char = one byte ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\SSLUtils.java, key chain key manager,private   (  string client alias x509 certificate[] certificate chain  private key private key )  {  m client alias = client alias ;  m certificate chain = certificate chain ;  m private key = private key ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\SSLUtils.java, same certificate checking trust manager,"  (  context context  host auth host auth )  {  m context = context ;  m host auth = host auth ;   cursor c = context . get content resolver (  )  . query (  host auth . content   uri new  string[] {  host auth columns . server   cert }   host auth columns .    id  +  "" =  ? "" new  string[] {  long . to string ( host auth . m id )  }  null )  ;  if  ( c  !  =  null )   {  try  {  if  ( c . move to next (  )  )   {  m host auth . m server cert = c . get blob ( 0 )  ;   }   }  finally  {  c . close (  )  ;   }   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\SSLUtils.java,check client trusted,"@ override public void   ( x509 certificate[] chain  string auth type )  throws  certificate exception  {  throw new  certificate exception ( "" we don't check client certificates"" )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\SSLUtils.java,check server trusted,"@ override public void   ( x509 certificate[] chain  string auth type )  throws  certificate exception  {  if  ( chain . length  =  =  0 )   {  throw new  certificate exception ( "" no certificates ? "" )  ;   }  else  {  x509 certificate server cert = chai"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\SSLUtils.java,choose client alias,"@ override public  string   (  string[] key types  principal[] issuers  socket socket )  {  if  ( log   enabled )   {   log utils . i ( tag "" requesting a client cert alias for ""  +   arrays . to string ( key types )  )  ;   }  return m client alias ;   }"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\SSLUtils.java,choose server alias,@ override public final  string   (  string key type  principal[] issuers  socket socket )  {  throw new  unsupported operation exception (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\SSLUtils.java,escape for scheme name,@ visible for testing public static  string   (  string s )  {  s = s . to lower case (  )  ;   string builder sb = new  string builder (  )  ;  for  ( int i = 0 ;  i  <  s . length (  )  ;  i +  +  )   {  char c = s . char at ( i )  ;  if  ( is ascii let
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\SSLUtils.java,from alias,"public static  key chain key manager   (  context context  string alias )  throws  certificate exception  {  x509 certificate[] certificate chain ;  try  {  certificate chain =  key chain . get certificate chain ( context alias )  ;   }  catch  (   key chain exception e )   {  log error ( alias ""certificate chain"" e )  ;  throw new  certificate exception ( e )  ;   }  catch  (   interrupted exception e )   {  log error ( alias ""certificate chain"" e )  ;  throw new  certificate exception ( e )  ;   }   private key private key ;  try  {  private key =  key chain . get private key ( context alias )  ;   }  catch  (   key chain exception e )   {  log error ( alias ""private key"" e )  ;  throw new  certificate exception ( e )  ;   }  catch  (   interrupted exception e )   {  log error ( alias ""private key"" e )  ;  throw new  certificate exception ( e )  ;   }  if  ( certificate chain  =  =  null || private key  =  =  null )   {  throw new  certificate exception ( "" can't access certificate from keystore"" )  ;   }  return new  key chain key manager ( alias certificate chain private key )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\SSLUtils.java,get accepted issuers,@ override public x509 certificate[]   (  )  {  return null ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\SSLUtils.java,get certificate chain,"@ override public x509 certificate[]   (  string alias )  {  if  ( log   enabled )   {   log utils . i ( tag "" requesting a client certificate chain for alias [""  +  alias  +  ""]"" )  ;   }  return m certificate chain ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\SSLUtils.java,get client aliases,@ override public final  string[]   (  string key type  principal[] issuers )  {  throw new  unsupported operation exception (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\SSLUtils.java,get http socket factory,public static ssl socket factory   (  context context  host auth host auth  key manager key manager boolean insecure )  {  javax . net . ssl . ssl socket factory underlying = getssl socket factory ( context host auth key manager insecure )  ;  ssl socket factory wrapped = new ssl socket factory ( underlying )  ;  if  ( insecure )   {  wrapped . set hostname verifier ( ssl socket factory . allow   all   hostname   verifier )  ;   }  return wrapped ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\SSLUtils.java,get last cert req time,public long   (  )  {  return m last time cert requested ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\SSLUtils.java,get private key,"@ override public  private key   (  string alias )  {  if  ( log   enabled )   {   log utils . i ( tag "" requesting a client private key for alias [""  +  alias  +  ""]"" )  ;   }  return m private key ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\SSLUtils.java,getssl socket factory,"public synchronized static javax . net . ssl . ssl socket factory   ( final  context context final  host auth host auth final  key manager key manager final boolean insecure )  {  if  ( s external security provider installer  !  =  null )   {  s external security provider installer . install if needed ( context )  ;   }  try  {  final  key manager[] key managers =  ( key manager  =  =  null  ?  null : new  key manager[] { key manager }  )  ;  if  ( insecure )   {  final  trust manager[] trust managers = new  trust manager[] { new  same certificate checking trust manager ( context host auth )  }  ;  ssl socket factory wrapper insecure factory =  ( ssl socket factory wrapper ) ssl socket factory wrapper . get insecure ( key managers trust managers ssl   handshake   timeout )  ;  return insecure factory ;   }  else  {  if  ( s secure factory  =  =  null )   {  ssl socket factory wrapper secure factory =  ( ssl socket factory wrapper ) ssl socket factory wrapper . get default ( key managers ssl   handshake   timeout )  ;  s secure factory = secure factory ;   }  return s secure factory ;   }   }  catch  (   no such algorithm exception e )   {   log utils . wtf ( tag e "" unable to acquire ssl socket factory"" )  ;   }  catch  (   key management exception e )   {   log utils . wtf ( tag e "" unable to acquire ssl socket factory"" )  ;   }  return null ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\SSLUtils.java,get server aliases,@ override public final  string[]   (  string key type  principal[] issuers )  {  throw new  unsupported operation exception (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\activity\setup\AccountSecurity.java, account and policy loader,  ( final  context context final long account id final boolean show dialog final boolean password expiring final boolean password expired )  {  super ( context )  ;  m context = context ;  m account id = account id ;  m show dialog = show dialog ;  m password expiring = password expiring ;  m password expired = password expired ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\activity\setup\AccountSecurity.java,action device password expiration intent,public static  intent   (  context context long account id boolean expired )  {   intent intent = new  forwarding intent ( context  account security . class )  ;  intent . put extra ( extra   account   id account id )  ;  intent . put extra ( expired  ?  extra   password   expired : extra   password   expiring true )  ;  return intent ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\activity\setup\AccountSecurity.java,action update security intent,public static  intent   (  context context long account id boolean show dialog )  {   intent intent = new  intent ( context  account security . class )  ;  intent . put extra ( extra   account   id account id )  ;  intent . put extra ( extra   show   dialog show dialog )  ;  return intent ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\activity\setup\AccountSecurity.java,complete create,"protected void   ( final  account account final boolean show dialog final boolean password expiring final boolean password expired )  {  m account = account ;  if  ( password expiring || password expired )   {   fragment manager fm = get fragment manager (  )  ;  if  ( fm . find fragment by tag ( ""password   expiration"" )   =  =  null )   {   password expiration dialog dialog =  password expiration dialog . new instance ( m account . get display name (  )  password expired )  ;  if  (  debug utils . debug || debug )   {   log utils . d ( tag "" showing password expiration dialog"" )  ;   }  dialog . show ( fm ""password   expiration"" )  ;   }  return ;   }  if  ( m account . m policy key  !  =  0 )   {  if  ( show dialog )   {   fragment manager fm = get fragment manager (  )  ;  if  ( fm . find fragment by tag ( ""security   needed"" )   =  =  null )   {   security needed dialog dialog =  security needed dialog . new instance ( m account . get display name (  )  )  ;  if  (  debug utils . debug || debug )   {   log utils . d ( tag "" showing security needed dialog"" )  ;   }  dialog . show ( fm ""security   needed"" )  ;   }   }  else  {  try advance security ( m account )  ;   }  return ;   }  finish (  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\activity\setup\AccountSecurity.java,do in background,@ override protected  void   (  void .  .  .  params )  {  security . policies required ( account . m id )  ;  return null ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\activity\setup\AccountSecurity.java,get update security uri,"public static  uri   ( final long account id final boolean show dialog )  {  final  uri .  builder base uri =  uri . parse ( ""auth: /  / ""  +   email content . email   package   name  +  "" . account   security / "" )  . build upon (  )  ;   intent utilities . set account id ( base uri account id )  ;  base uri . append query parameter ( extra   show   dialog  boolean . to string ( show dialog )  )  ;  return base uri . build (  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\activity\setup\AccountSecurity.java,is activity resumed,protected boolean   (  )  {  return m activity resumed ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\activity\setup\AccountSecurity.java,load in background,@ override public  account   (  )  {  final  account account =  account . restore account with id ( m context m account id )  ;  if  ( account  =  =  null )   {  return null ;   }  final long policy id = account . m policy key ;  if  ( policy id  !  =  0 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\activity\setup\AccountSecurity.java,new instance,public static  password expiration dialog   (  string account name boolean expired )  {  final  password expiration dialog dialog = new  password expiration dialog (  )  ;   bundle b = new  bundle (  )  ;  b . put string ( bundle   key   account   name account name )  ;  b . put boolean ( bundle   key   expired expired )  ;  dialog . set arguments ( b )  ;  return dialog ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\activity\setup\AccountSecurity.java,on activity result,@ override protected void   ( int request code int result code  intent data )  {  try advance security ( m account )  ;  super . on activity result ( request code result code data )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\activity\setup\AccountSecurity.java,on click,@ override public void   (  dialog interface dialog int which )  {  dismiss (  )  ;   account security activity =  (  account security ) get activity (  )  ;  if  ( which  =  =   dialog interface . button   positive )   {   intent intent = new  intent (  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\activity\setup\AccountSecurity.java,on create,@ override public void   (  bundle saved instance state )  {  super . on create ( saved instance state )  ;  m handler = new  handler (  )  ;  final  intent i = get intent (  )  ;  final long account id ;   bundle extras = i . get extras (  )  ;  if  ( ex
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\activity\setup\AccountSecurity.java,on create dialog,@ override public  dialog   (  bundle saved instance state )  {  final  string account name = get arguments (  )  . get string ( bundle   key   account   name )  ;  final boolean expired = get arguments (  )  . get boolean ( bundle   key   expired )  ;  f
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\activity\setup\AccountSecurity.java,on create loader,@ override public  loader <  account >    ( final int id final  bundle args )  {  final long account id = args . get long ( extra   account   id  - 1 )  ;  final boolean show dialog = args . get boolean ( extra   show   dialog false )  ;  final boolean pa
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\activity\setup\AccountSecurity.java,on load finished,@ override public void   ( final  loader <  account >  loader final  account account )  {  m handler . post ( new  runnable (  )  {  @ override public void run (  )  {  final  account security activity =  account security . this ;  if  (  ! activity . is 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\activity\setup\AccountSecurity.java,on pause,@ override protected void   (  )  {  super . on pause (  )  ;  m activity resumed = false ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\activity\setup\AccountSecurity.java,on resume,@ override protected void   (  )  {  super . on resume (  )  ;  m activity resumed = true ;  tickle account and policy loader (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\activity\setup\AccountSecurity.java,on save instance state,@ override protected void   ( final  bundle out state )  {  super . on save instance state ( out state )  ;  out state . put boolean ( savestate   initialized   tag m initialized )  ;  out state . put boolean ( savestate   tried   add   administrator   ta
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\activity\setup\AccountSecurity.java,repost notification,private static void   ( final  account account final  security policy security )  {  if  ( account  =  =  null )  return ;  new  async task <  void  void  void >  (  )  {  @ override protected  void do in background (   void .  .  .  params )  {  security . policies required ( account . m id )  ;  return null ;   }   }   . execute on executor (  async task . thread   pool   executor )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\activity\setup\AccountSecurity.java,run,@ override public void   (  )  {  final  account security activity =  account security . this ;  if  (  ! activity . is activity resumed (  )  )   {  return ;   }  if  ( account  =  =  null ||  ( account . m policy key  !  =  0 && account . m policy  =  =
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\activity\setup\AccountSecurity.java,start account and policy loader,private void   ( final  bundle args )  {  map loader args = args ;  map loader callbacks = new  account and policy loader callbacks (  )  ;  tickle account and policy loader (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\activity\setup\AccountSecurity.java,tickle account and policy loader,private void   (  )  {  if  (  ! m initialized )   {  get loader manager (  )  . init loader ( account   policy   loader   id map loader args map loader callbacks )  ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\activity\setup\AccountSecurity.java,try advance security,"private void   (  account account )  {   security policy security =  security policy . get instance ( this )  ;  if  (  ! security . is active admin (  )  )   {  if  ( m tried add administrator )   {  if  (  debug utils . debug || debug )   {   log utils . d ( tag "" not active admin: repost notification"" )  ;   }  repost notification ( account security )  ;  finish (  )  ;   }  else  {  m tried add administrator = true ;  final  host auth host auth = account . m host auth recv ;  if  ( host auth  =  =  null )   {  if  (  debug utils . debug || debug )   {   log utils . d ( tag "" no  host auth: repost notification"" )  ;   }  repost notification ( account security )  ;  finish (  )  ;   }  else  {  if  (  debug utils . debug || debug )   {   log utils . d ( tag "" not active admin: post initial notification"" )  ;   }   intent intent = new  intent (  device policy manager . action   add   device   admin )  ;  intent . put extra (  device policy manager . extra   device   admin security . get admin component (  )  )  ;  intent . put extra (  device policy manager . extra   add   explanation this . get string ( r . string . account   security   policy   explanation   fmt host auth . m address )  )  ;  start activity for result ( intent request   enable )  ;   }   }  return ;   }  if  ( security . is active ( null )  )   {  if  (  debug utils . debug || debug )   {   log utils . d ( tag "" security active ;  clear holds"" )  ;   }   account . clear security hold on all accounts ( this )  ;  security . sync account ( account )  ;  security . clear notification (  )  ;  finish (  )  ;  return ;   }  security . set active policies (  )  ;  int inactive reasons = security . get inactive reasons ( null )  ;  if  (  ( inactive reasons &  security policy . inactive   need   password )   !  =  0 )   {  if  ( m tried set password )   {  if  (  debug utils . debug || debug )   {   log utils . d ( tag "" password needed ;  repost notification"" )  ;   }  repost notification ( account security )  ;  finish (  )  ;   }  else  {  if  (  debug utils . debug || debug )   {   log utils . d ( tag "" password needed ;  request it via dpm"" )  ;   }  m tried set password = true ;   intent intent = new  intent (  device policy manager . action   set   new   password )  ;  start activity for result ( intent request   password )  ;   }  return ;   }  if  (  ( inactive reasons &  security policy . inactive   need   encryption )   !  =  0 )   {  if  ( m tried set encryption )   {  if  (  debug utils . debug || debug )   {   log utils . d ( tag "" encryption needed ;  repost notification"" )  ;   }  repost notification ( account security )  ;  finish (  )  ;   }  else  {  if  (  debug utils . debug || debug )   {   log utils . d ( tag "" encryption needed ;  request it via dpm"" )  ;   }  m tried set encryption = true ;   intent intent = new  intent (  device policy manager . action   start   encryption )  ;  start activity for result ( intent request   encryption )  ;   }  return ;   }  if  (  debug utils . debug || debug )   {   log utils . d ( tag "" policies enforced ;  clear holds"" )  ;   }   account . clear security hold on all accounts ( this )  ;  security . sync account ( account )  ;  security . clear notification (  )  ;  finish (  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\Utility.java, thread local date format,public   (  string format str )  {  m format str = format str ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\Utility.java,array contains,public static boolean   (  object[] a  object o )  {  int index = array index ( a o )  ;  return  ( index  >  =  0 )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\Utility.java,array index,public static int   (  object[] a  object o )  {  for  ( int i = 0  count = a . length ;  i  <  count ;  i +  +  )   {  if  ( a[i] . equals ( o )  )   {  return i ;   }   }  return  - 1 ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\Utility.java,attachment exists,"public static boolean   (  context context  attachment attachment )  {  if  ( attachment  =  =  null )   {  return false ;   }  else if  ( attachment . m content bytes  !  =  null )   {  return true ;   }  else  {  final  string cached file = attachment . get cached file uri (  )  ;  if  (  !  text utils . is empty ( cached file )  )   {  final  uri cached file uri =  uri . parse ( cached file )  ;  try  {  final  input stream in stream = context . get content resolver (  )  . open input stream ( cached file uri )  ;  try  {  in stream . close (  )  ;   }  catch  (  io exception e )   {   }  return true ;   }  catch  (   file not found exception e )   {   log utils . e (  log utils . tag e ""not able to open cached file"" )  ;   }   }  final  string content uri = attachment . get content uri (  )  ;  if  (  text utils . is empty ( content uri )  )   {  return false ;   }  try  {  final  uri file uri =  uri . parse ( content uri )  ;  try  {  final  input stream in stream = context . get content resolver (  )  . open input stream ( file uri )  ;  try  {  in stream . close (  )  ;   }  catch  (  io exception e )   {   }  return true ;   }  catch  (   file not found exception e )   {  return false ;   }   }  catch  (   runtime exception re )   {   log utils . w (  log utils . tag re ""attachment exists  runtime exception"" )  ;  return false ;   }   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\Utility.java,build limit one uri,"static  uri   (  uri original )  {  if  ( ""content"" . equals ( original . get scheme (  )  )  &&  email content . authority . equals ( original . get authority (  )  )  )   {  return  email content . uri with limit ( original 1 )  ;   }  return original ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\Utility.java,byte to hex,"public static  string builder   (  string builder sb int b )  {  b& = 0xff ;  sb . append ( ""0123456789abcdef"" . char at ( b  >  >  4 )  )  ;  sb . append ( ""0123456789abcdef"" . char at ( b & 0xf )  )  ;  return sb ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\Utility.java,cancel task,public static void   (  async task <  ?   ?   ?  >  task boolean may interrupt if running )  {  if  ( task  !  =  null && task . get status (  )   !  =   async task .  status . finished )   {  task . cancel ( may interrupt if running )  ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\Utility.java,cancel task interrupt,public static void   (  async task <  ?   ?   ?  >  task )  {  cancel task ( task true )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\Utility.java,clean up mime date,"public static  string   (  string date )  {  if  (  text utils . is empty ( date )  )   {  return date ;   }  date = date   cleanup   pattern   wrong   timezone . matcher ( date )  . replace first ( ""$1"" )  ;  return date ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\Utility.java,combine,public static  string   (  object[] parts char separator )  {  if  ( parts  =  =  null )   {  return null ;   }   string builder sb = new  string builder (  )  ;  for  ( int i = 0 ;  i  <  parts . length ;  i +  +  )   {  sb . append ( parts[i] . to string (  )  )  ;  if  ( i  <  parts . length  -  1 )   {  sb . append ( separator )  ;   }   }  return sb . to string (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\VendorPolicyLoader.java, vendor policy loader,"public   (  context context  string apk package name  string class name boolean allow non system apk )  {  if  (  ! allow non system apk &&  ! is system package ( context apk package name )  )   {  m policy method = null ;  return ;   }   class <  ?  >  clazz = null ;   method method = null ;  try  {  final  context policy context = context . create package context ( apk package name  context . context   ignore   security |  context . context   include   code )  ;  final  class loader class loader = policy context . get class loader (  )  ;  clazz = class loader . load class ( class name )  ;  method = clazz . get method ( get   policy   method args )  ;   }  catch  (   name not found exception ignore )   {   }  catch  (   class not found exception e )   {   log utils . w (  logging . log   tag "" vendor policy loader: ""  +  e )  ;   }  catch  (   no such method exception e )   {   log utils . w (  logging . log   tag "" vendor policy loader: ""  +  e )  ;   }  m policy method = method ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\VendorPolicyLoader.java,clear instance for test,public static void   (  )  {  s instance = null ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\VendorPolicyLoader.java,expand alternate templates,"public void   (  string email )  {  final  string[] email parts = email . split ( ""@"" )  ;  final  string user = email parts[0] ;  incoming uri = expand template ( alt incoming uri template email user )  ;  incoming username = expand template ( alt incoming username template email user )  ;  outgoing uri = expand template ( alt outgoing uri template email user )  ;  outgoing username = expand template ( alt outgoing username template email user )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\VendorPolicyLoader.java,expand template,"private  string   (  string template  string email  string user )  {   string return string = template ;  return string = return string . replace all ( ""\\$email"" email )  ;  return string = return string . replace all ( ""\\$user"" user )  ;  return string = return string . replace all ( ""\\$domain"" domain )  ;  return return string ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\VendorPolicyLoader.java,expand templates,"public void   (  string email )  {  final  string[] email parts = email . split ( ""@"" )  ;  final  string user = email parts[0] ;  incoming uri = expand template ( incoming uri template email user )  ;  incoming username = expand template ( incoming username template email user )  ;  outgoing uri = expand template ( outgoing uri template email user )  ;  outgoing username = expand template ( outgoing username template email user )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\VendorPolicyLoader.java,find provider for domain,public  provider   (  string domain )  {   bundle params = new  bundle (  )  ;  params . put string ( find   provider domain )  ;   bundle out = get policy ( find   provider params )  ;  if  ( out  !  =  null &&  ! out . is empty (  )  )   {   provider p = new  provider (  )  ;  p . id = null ;  p . label = null ;  p . domain = domain ;  p . incoming uri template = out . get string ( find   provider   in   uri )  ;  p . incoming username template = out . get string ( find   provider   in   user )  ;  p . outgoing uri template = out . get string ( find   provider   out   uri )  ;  p . outgoing username template = out . get string ( find   provider   out   user )  ;  p . note = out . get string ( find   provider   note )  ;  return p ;   }  return null ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\VendorPolicyLoader.java,get imap id values,public  string   (  string user name  string host  string capabilities )  {   bundle params = new  bundle (  )  ;  params . put string ( get   imap   id   user user name )  ;  params . put string ( get   imap   id   host host )  ;  params . put string ( get   imap   id   capa capabilities )  ;   string result = get policy ( get   imap   id params )  . get string ( get   imap   id )  ;  return result ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\VendorPolicyLoader.java,get instance,public static  vendor policy loader   (  context context )  {  if  ( s instance  =  =  null )   {  s instance = new  vendor policy loader ( context )  ;   }  return s instance ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\VendorPolicyLoader.java,get policy,"public  bundle   (  string policy  bundle args )  {   bundle ret = null ;  if  ( m policy method  !  =  null )   {  try  {  ret =  (  bundle ) m policy method . invoke ( null policy args )  ;   }  catch  (   exception e )   {   log utils . w (  logging . log   tag "" vendor policy loader"" e )  ;   }   }  return  ( ret  !  =  null )   ?  ret :  bundle . empty ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\VendorPolicyLoader.java,inject policy for test,"public static void   (  context context  string apk package name  class <  ?  >  clazz )  {   string name = clazz . get name (  )  ;   log utils . d (  logging . log   tag  string . format ( "" using policy: package = %s name = %s"" apk package name name )  )  ;  s instance = new  vendor policy loader ( context apk package name name true )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\VendorPolicyLoader.java,is system package,public static boolean   (  context context  string package name )  {  try  {   application info ai = context . get package manager (  )  . get application info ( package name 0 )  ;  return  ( ai . flags &  application info . flag   system )   !  =  0 ;   }  catch  (   name not found exception e )   {  return false ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\VendorPolicyLoader.java,use alternate exchange strings,public boolean   (  )  {  return get policy ( use   alternate   exchange   strings null )  . get boolean ( use   alternate   exchange   strings false )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\activity\setup\AccountSettingsUtils.java,commit settings,"public static void   (  context context  account account )  {  if  (  ! account . is saved (  )  )   {  account . save ( context )  ;  if  ( account . m policy  !  =  null )   {  if  ( account . m policy . m protocol policies unsupported  !  =  null )   {   log utils . d (  log utils . tag "" clearing unsupported policies ""  +  account . m policy . m protocol policies unsupported )  ;  account . m policy . m protocol policies unsupported = null ;   }   policy service proxy . set account policy2 ( context account . get id (  )  account . m policy account . m security sync key  =  =  null  ?  """" : account . m security sync key false )  ;   }   string[] default quick responses = context . get resources (  )  . get string array ( r . array . default   quick   responses )  ;   content values cv = new  content values (  )  ;  cv . put (  quick response . account   key account . m id )  ;   content resolver resolver = context . get content resolver (  )  ;  for  (   string quick response : default quick responses )   {  if  (  !  text utils . is empty ( quick response )  )   {  cv . put (  quick response . text quick response )  ;  resolver . insert (  quick response . content   uri cv )  ;   }   }   }  else  {   content values cv = get account content values ( account )  ;  account . update ( context cv )  ;   }   account backup restore . backup ( context )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\activity\setup\AccountSettingsUtils.java,createo auth registration request,"public static  uri   ( final  context context final o auth provider provider final  string email address )  {  final  uri .  builder b =  uri . parse ( provider . auth endpoint )  . build upon (  )  ;  b . append query parameter ( ""response   type"" provider . response type )  ;  b . append query parameter ( ""client   id"" provider . client id )  ;  b . append query parameter ( ""redirect   uri"" provider . redirect uri )  ;  b . append query parameter ( ""scope"" provider . scope )  ;  b . append query parameter ( ""state"" provider . state )  ;  b . append query parameter ( ""login   hint"" email address )  ;  return b . build (  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\activity\setup\AccountSettingsUtils.java,findo auth provider,"public static o auth provider   ( final  context context final  string id final int resource id )  {  try  {  final  xml resource parser xml = context . get resources (  )  . get xml ( resource id )  ;  int xml event type ;  o auth provider provider = null ;  while  (  ( xml event type = xml . next (  )  )   !  =   xml resource parser . end   document )   {  if  ( xml event type  =  =   xml resource parser . start   tag && ""provider"" . equals ( xml . get name (  )  )  )   {   string provider id = get xml attribute ( context xml ""id"" )  ;  try  {  if  (  text utils . equals ( id provider id )  )   {  provider = new o auth provider (  )  ;  provider . id = id ;  provider . label = get xml attribute ( context xml ""label"" )  ;  provider . auth endpoint = get xml attribute ( context xml ""auth   endpoint"" )  ;  provider . token endpoint = get xml attribute ( context xml ""token   endpoint"" )  ;  provider . refresh endpoint = get xml attribute ( context xml ""refresh   endpoint"" )  ;  provider . response type = get xml attribute ( context xml ""response   type"" )  ;  provider . redirect uri = get xml attribute ( context xml ""redirect   uri"" )  ;  provider . scope = get xml attribute ( context xml ""scope"" )  ;  provider . state = get xml attribute ( context xml ""state"" )  ;  provider . client id = get xml attribute ( context xml ""client   id"" )  ;  provider . client secret = get xml attribute ( context xml ""client   secret"" )  ;  return provider ;   }   }  catch  (   illegal argument exception e )   {   log utils . w (  logging . log   tag ""providers line: ""  +  xml . get line number (  )   +  "" ;   domain contains multiple globals"" )  ;   }   }   }   }  catch  (   exception e )   {   log utils . e (  logging . log   tag "" error while trying to load provider settings . "" e )  ;   }  return null ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\activity\setup\AccountSettingsUtils.java,find provider for domain,"static  provider   (  context context  string domain int resource id )  {  try  {   xml resource parser xml = context . get resources (  )  . get xml ( resource id )  ;  int xml event type ;   provider provider = null ;  while  (  ( xml event type = xml . next (  )  )   !  =   xml resource parser . end   document )   {  if  ( xml event type  =  =   xml resource parser . start   tag && ""provider"" . equals ( xml . get name (  )  )  )   {   string provider domain = get xml attribute ( context xml ""domain"" )  ;  try  {  if  ( match provider ( domain provider domain )  )   {  provider = new  provider (  )  ;  provider . id = get xml attribute ( context xml ""id"" )  ;  provider . label = get xml attribute ( context xml ""label"" )  ;  provider . domain = domain . to lower case (  )  ;  provider . note = get xml attribute ( context xml ""note"" )  ;  provider . oauth = get xml attribute ( context xml ""oauth"" )  ;   }   }  catch  (   illegal argument exception e )   {   log utils . w (  logging . log   tag ""providers line: ""  +  xml . get line number (  )   +  "" ;   domain contains multiple globals"" )  ;   }   }  else if  ( xml event type  =  =   xml resource parser . start   tag && ""incoming"" . equals ( xml . get name (  )  )  && provider  !  =  null )   {  provider . incoming uri template = get xml attribute ( context xml ""uri"" )  ;  provider . incoming username template = get xml attribute ( context xml ""username"" )  ;   }  else if  ( xml event type  =  =   xml resource parser . start   tag && ""outgoing"" . equals ( xml . get name (  )  )  && provider  !  =  null )   {  provider . outgoing uri template = get xml attribute ( context xml ""uri"" )  ;  provider . outgoing username template = get xml attribute ( context xml ""username"" )  ;   }  else if  ( xml event type  =  =   xml resource parser . start   tag && ""incoming - fallback"" . equals ( xml . get name (  )  )  && provider  !  =  null )   {  provider . alt incoming uri template = get xml attribute ( context xml ""uri"" )  ;  provider . alt incoming username template = get xml attribute ( context xml ""username"" )  ;   }  else if  ( xml event type  =  =   xml resource parser . start   tag && ""outgoing - fallback"" . equals ( xml . get name (  )  )  && provider  !  =  null )   {  provider . alt outgoing uri template = get xml attribute ( context xml ""uri"" )  ;  provider . alt outgoing username template = get xml attribute ( context xml ""username"" )  ;   }  else if  ( xml event type  =  =   xml resource parser . end   tag && ""provider"" . equals ( xml . get name (  )  )  && provider  !  =  null )   {  return provider ;   }   }   }  catch  (   exception e )   {   log utils . e (  logging . log   tag "" error while trying to load provider settings . "" e )  ;   }  return null ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\activity\setup\AccountSettingsUtils.java,get account content values,public static  content values   (  account account )  {   content values cv = new  content values (  )  ;  cv . put (  account columns . display   name account . get display name (  )  )  ;  cv . put (  account columns . sender   name account . get sender name (  )  )  ;  cv . put (  account columns . signature account . get signature (  )  )  ;  cv . put (  account columns . sync   interval account . m sync interval )  ;  cv . put (  account columns . flags account . m flags )  ;  cv . put (  account columns . sync   lookback account . m sync lookback )  ;  cv . put (  account columns . security   sync   key account . m security sync key )  ;  return cv ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\activity\setup\AccountSettingsUtils.java,get allo auth providers,"public static  list < o auth provider >    ( final  context context )  {  try  {   list < o auth provider >  providers = new  array list < o auth provider >  (  )  ;  final  xml resource parser xml = context . get resources (  )  . get xml ( r . xml . oauth )  ;  int xml event type ;  o auth provider provider = null ;  while  (  ( xml event type = xml . next (  )  )   !  =   xml resource parser . end   document )   {  if  ( xml event type  =  =   xml resource parser . start   tag && ""provider"" . equals ( xml . get name (  )  )  )   {  try  {  provider = new o auth provider (  )  ;  provider . id = get xml attribute ( context xml ""id"" )  ;  provider . label = get xml attribute ( context xml ""label"" )  ;  provider . auth endpoint = get xml attribute ( context xml ""auth   endpoint"" )  ;  provider . token endpoint = get xml attribute ( context xml ""token   endpoint"" )  ;  provider . refresh endpoint = get xml attribute ( context xml ""refresh   endpoint"" )  ;  provider . response type = get xml attribute ( context xml ""response   type"" )  ;  provider . redirect uri = get xml attribute ( context xml ""redirect   uri"" )  ;  provider . scope = get xml attribute ( context xml ""scope"" )  ;  provider . state = get xml attribute ( context xml ""state"" )  ;  provider . client id = get xml attribute ( context xml ""client   id"" )  ;  provider . client secret = get xml attribute ( context xml ""client   secret"" )  ;  providers . add ( provider )  ;   }  catch  (   illegal argument exception e )   {   log utils . w (  logging . log   tag ""providers line: ""  +  xml . get line number (  )   +  "" ;   domain contains multiple globals"" )  ;   }   }   }  return providers ;   }  catch  (   exception e )   {   log utils . e (  logging . log   tag "" error while trying to load provider settings . "" e )  ;   }  return null ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\activity\setup\AccountSettingsUtils.java,get xml attribute,private static  string   (  context context  xml resource parser xml  string name )  {  int res id = xml . get attribute resource value ( null name 0 )  ;  if  ( res id  =  =  0 )   {  return xml . get attribute value ( null name )  ;   }  else  {  return context . get string ( res id )  ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\activity\setup\AccountSettingsUtils.java,infer server name,"public static  string   (  context context  string server  string incoming  string outgoing )  {  int keep first char = 0 ;  int first dot index = server . index of ( ' . ' )  ;  if  ( first dot index  !  =   - 1 )   {   string first word = server . substring ( 0 first dot index )  . to lower case (  )  ;   string[] host prefixes = context . get resources (  )  . get string array ( r . array . smtp   host   prefixes )  ;  boolean can substitute smtp =  utility . array contains ( host prefixes first word )  ;  boolean is mail = ""mail"" . equals ( first word )  ;  if  ( incoming  !  =  null )   {  if  ( can substitute smtp || is mail )   {  return server ;   }   }  else  {  if  ( can substitute smtp )   {  keep first char = first dot index  +  1 ;   }  else if  ( is mail )   {  return server ;   }  else  {   }   }   }  return  (  ( incoming  !  =  null )   ?  incoming : outgoing )   +  ' . '  +  server . substring ( keep first char )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\activity\setup\AccountSettingsUtils.java,match provider,@ visible for testing public static boolean   (  string test domain  string provider domain )  {   string[] test parts = test domain . split ( domain   separator )  ;   string[] provider parts = provider domain . split ( domain   separator )  ;  if  ( tes
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\activity\setup\AccountSettingsUtils.java,match with wildcards,private static boolean   (  string test part  string provider part )  {  int provider length = provider part . length (  )  ;  if  ( test part . length (  )   !  =  provider length )   {  return false ;   }  for  ( int i = 0 ;  i  <  provider length ;  i +  +  )   {  char test char = test part . char at ( i )  ;  char provider char = provider part . char at ( i )  ;  if  ( test char  !  =  provider char && provider char  !  =  wild   character )   {  return false ;   }   }  return true ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\activity\setup\ForwardingIntent.java, forwarding intent,public   (  context activity  class klass )  {  super ( activity klass )  ;  set flags (  intent . flag   activity   forward   result )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\DebugUtils.java,enable strict mode,public static void   ( final boolean enable )  {   utility . enable strict mode ( enable )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\DebugUtils.java,init,public static void   ( final  context context )  {  final  preferences prefs =  preferences . get preferences ( context )  ;  debug = prefs . get enable debug logging (  )  ;  debug   exchange = prefs . get enable exchange logging (  )  ;  debug   file = prefs . get enable exchange file logging (  )  ;  update logging flags ( context )  ;  enable strict mode ( prefs . get enable strict mode (  )  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\DebugUtils.java,update logging flags,public static void   (  context context )  {   preferences prefs =  preferences . get preferences ( context )  ;  int debug logging = prefs . get enable debug logging (  )   ?   email service proxy . debug   bit : 0 ;  int exchange logging = prefs . get enable exchange logging (  )   ?   email service proxy . debug   exchange   bit : 0 ;  int file logging = prefs . get enable exchange file logging (  )   ?   email service proxy . debug   file   bit : 0 ;  int enable strict mode = prefs . get enable strict mode (  )   ?   email service proxy . debug   enable   strict   mode : 0 ;  int debug bits = debug logging | exchange logging | file logging| enable strict mode ;   email service utils . set remote services logging ( context debug bits )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\AttachmentInfo.java, attachment info,public   (  context context long id long size  string file name  string mime type long account key int flags )  {  m size = size ;  m content type =  attachment utilities . infer mime type ( file name mime type )  ;  m name = file name ;  m id = id ;  m account key = account key ;  m flags = flags ;  boolean can view = true ;  boolean can save = true ;  boolean can install = false ;  int deny flags = allow ;  if  (  !  utility . is external storage mounted (  )  )   {  can save = false ;   }  if  (  (  !  mime utility . mime type matches ( m content type  attachment utilities . acceptable   attachment   view   types )  )  ||  (  mime utility . mime type matches ( m content type  attachment utilities . unacceptable   attachment   view   types )  )  )   {  can view = false ;   }   string extension =  attachment utilities . get filename extension ( m name )  ;  if  (  !  text utils . is empty ( extension )  &&  utility . array contains (  attachment utilities . unacceptable   attachment   extensions extension )  )   {  can view = false ;  can save = false ;  deny flags| = deny   malware ;   }  if  (  ( flags &  attachment . flag   policy   disallows   download )   !  =  0 )   {  can view = false ;  can save = false ;  deny flags| = deny   policy ;   }  extension =  attachment utilities . get filename extension ( m name )  ;  if  (  !  text utils . is empty ( extension )  &&  utility . array contains (  attachment utilities . installable   attachment   extensions extension )  )   {  boolean sideload enabled ;  sideload enabled =  settings .  secure . get int ( context . get content resolver (  )   settings .  secure . install   non   market   apps 0 )   =  =  1 ;  can save& = sideload enabled ;  can view = can save ;  can install = can save ;  if  (  ! sideload enabled )   {  deny flags| = deny   nosideload ;   }   }  if  ( m size  >   attachment utilities . max   attachment   download   size )   {  int network type =  email connectivity manager . get active network type ( context )  ;  if  ( network type  !  =   connectivity manager . type   wifi )   {  can view = false ;  can save = false ;  deny flags| = deny   wifionly ;   }   }   intent intent = get attachment intent ( context 0 )  ;   package manager pm = context . get package manager (  )  ;   list <  resolve info >  activity list = pm . query intent activities ( intent 0 )  ;  if  ( activity list . is empty (  )  )   {  can view = false ;  can save = false ;  deny flags| = deny   nointent ;   }  m allow view = can view ;  m allow save = can save ;  m allow install = can install ;  m deny flags = deny flags ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\AttachmentInfo.java,equals,@ override public boolean   (  object o )  {  if  ( o  =  =  this )   {  return true ;   }  if  (  ( o  =  =  null )  ||  ( o . get class (  )   !  =  get class (  )  )  )   {  return false ;   }  return  (  (  attachment info ) o )  . m id  =  =  m id ; 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\AttachmentInfo.java,get attachment intent,public  intent   (  context context long account id )  {   uri content uri = get uri for intent ( context account id )  ;   intent intent = new  intent (  intent . action   view )  ;  intent . set data and type ( content uri m content type )  ;  intent . add flags (  intent . flag   grant   read   uri   permission |  intent . flag   activity   clear   when   task   reset )  ;  return intent ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\AttachmentInfo.java,get uri for intent,protected  uri   (  context context long account id )  {   uri content uri =  attachment utilities . get attachment uri ( account id m id )  ;  if  ( account id  >  0 )   {  content uri =  attachment utilities . resolve attachment id to content uri ( context . get content resolver (  )  content uri )  ;   }  return content uri ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\AttachmentInfo.java,hash code,@ override public int   (  )  {  return  ( int )  ( m id ^  ( m id  >  >  >  32 )  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\AttachmentInfo.java,is eligible for download,public boolean   (  )  {  return m allow view || m allow save ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\AttachmentInfo.java,to string,"@ override public  string   (  )  {  return "" {  attachment ""  +  m id  +  "":"" +  m name +  "" "" +  m content type +  "" "" +  m size +  "" } "" ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\EmailConnectivityManager.java, email connectivity manager,public   (  context context  string name )  {  m context = context ;  m name = name ;  m connectivity manager =  (  connectivity manager ) context . get system service (  context . connectivity   service )  ;   power manager pm =  (  power manager ) context . get system service (  context . power   service )  ;  m wake lock = pm . new wake lock (  power manager . partial   wake   lock name )  ;  m context . register receiver ( this new  intent filter (  connectivity manager . connectivity   action )  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\EmailConnectivityManager.java,get active network type,static public int   (  connectivity manager cm )  {   network info info = cm . get active network info (  )  ;  if  ( info  =  =  null )  return no   active   network ;  return info . get type (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\EmailConnectivityManager.java,has connectivity,public boolean   (  )  {   network info info = m connectivity manager . get active network info (  )  ;  return  ( info  !  =  null )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\EmailConnectivityManager.java,is auto sync allowed,public boolean   (  )  {  return  content resolver . get master sync automatically (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\EmailConnectivityManager.java,on receive,@ override public void   (  context context  intent intent )  {  if  ( intent . get action (  )  . equals (  connectivity manager . connectivity   action )  )   {   bundle extras = intent . get extras (  )  ;  if  ( extras  !  =  null )   {   network info
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\EmailConnectivityManager.java,stop wait,public void   (  )  {  m stop = true ;   thread thread = m wait thread ;  if  ( thread  !  =  null )   {  thread . interrupt (  )  ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\EmailConnectivityManager.java,unregister,public void   (  )  {  try  {  m context . unregister receiver ( this )  ;   }  catch  (   runtime exception e )   {   }  finally  {  m registered = false ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\EmailConnectivityManager.java,wait for connectivity,"public void   (  )  {  if  (  ! m registered )   {  throw new  illegal state exception ( "" connectivity manager not registered"" )  ;   }  boolean waiting = false ;  m wait thread =  thread . current thread (  )  ;  m wake lock . acquire (  )  ;  try  {  while  (  ! m stop )   {   network info info = m connectivity manager . get active network info (  )  ;  if  ( info  !  =  null )   {  if  ( waiting )   {  if  (  debug utils . debug )   {   log utils . d ( tag m name  +  "":  connectivity wait ended"" )  ;   }   }  return ;   }  else  {  if  (  ! waiting )   {  if  (  debug utils . debug )   {   log utils . d ( tag m name  +  "":  connectivity waiting .  .  . "" )  ;   }  waiting = true ;   }  synchronized  ( m lock )   {  m wake lock . release (  )  ;  try  {  m lock . wait ( connectivity   wait   time )  ;   }  catch  (   interrupted exception e )   {   }  m wake lock . acquire (  )  ;   }   }   }   }  finally  {  if  ( m wake lock . is held (  )  )   {  m wake lock . release (  )  ;   }  m wait thread = null ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\FixedLengthInputStream.java, fixed length input stream,public   (  input stream in int length )  {  this . m in = in ;  this . m length = length ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\FixedLengthInputStream.java,available,@ override public int   (  )  throws io exception  {  return m length  -  m count ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\FixedLengthInputStream.java,get length,public int   (  )  {  return m length ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\FixedLengthInputStream.java,read,@ override public int   ( byte[] b )  throws io exception  {  return read ( b 0 b . length )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\FixedLengthInputStream.java,to string,"@ override public  string   (  )  {  return  string . format ( "" fixed length input stream ( in = %s  length = %d ) "" m in . to string (  )  m length )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\internet\AuthenticationCache.java, authentication cache,private   (  )  {  m cache = new  hash map <  long  cache entry >  (  )  ;  m authenticator = new o auth authenticator (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\internet\AuthenticationCache.java, cache entry,  ( long account id  string provider id  string access token  string refresh token long expiration time )  {  m account id = account id ;  m provider id = provider id ;  m access token = access token ;  m refresh token = refresh token ;  m expiration time = expiration time ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\internet\AuthenticationCache.java,clear entry,"private void   (  context context  cache entry entry )  {   log utils . d (  logging . log   tag ""clear entry"" )  ;  entry . m access token = """" ;  entry . m refresh token = """" ;  entry . m expiration time = 0 ;  save entry ( context entry )  ;  m cache . remove ( entry . m account id )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\internet\AuthenticationCache.java,get entry,"private  cache entry   (  context context  account account )  {   cache entry entry ;  if  ( account . is saved (  )  &&  ! account . is temporary (  )  )   {  entry = m cache . get ( account . m id )  ;  if  ( entry  =  =  null )   {   log utils . d (  logging . log   tag ""initializing entry from database"" )  ;  final  host auth host auth = account . get or create host auth recv ( context )  ;  final  credential credential = host auth . get or create credential ( context )  ;  entry = new  cache entry ( account . m id credential . m provider id credential . m access token credential . m refresh token credential . m expiration )  ;  m cache . put ( account . m id entry )  ;   }   }  else  {  final  host auth host auth = account . get or create host auth recv ( context )  ;  final  credential credential = host auth . get credential ( context )  ;  entry = new  cache entry ( account . m id credential . m provider id credential . m access token credential . m refresh token credential . m expiration )  ;   }  return entry ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\internet\AuthenticationCache.java,get instance,public static  authentication cache   (  )  {  synchronized  (  authentication cache . class )   {  if  ( s cache  =  =  null )   {  s cache = new  authentication cache (  )  ;   }  return s cache ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\internet\AuthenticationCache.java,refresh access token,public  string   (  context context  account account )  throws  messaging exception  io exception  {   cache entry entry = get entry ( context account )  ;  synchronized  ( entry )   {  refresh entry ( context entry )  ;  return entry . m access token ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\internet\AuthenticationCache.java,refresh entry,"private void   (  context context  cache entry entry )  throws io exception   messaging exception  {   log utils . d (  logging . log   tag "" authentication cache refresh entry %d"" entry . m account id )  ;  try  {  final  authentication result result = m authenticator . request refresh ( context entry . m provider id entry . m refresh token )  ;  entry . m access token = result . m access token ;  entry . m expiration time = result . m expires in seconds *  date utils . second   in   millis  +   system . current time millis (  )  ;  save entry ( context entry )  ;   }  catch  (   authentication failed exception e )   {   log utils . d (  logging . log   tag ""authentication failed  clearning"" )  ;  clear entry ( context entry )  ;  throw e ;   }  catch  (   messaging exception e )   {   log utils . d (  logging . log   tag ""messaging exception"" )  ;  throw e ;   }  catch  (  io exception e )   {   log utils . d (  logging . log   tag ""io exception"" )  ;  throw e ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\internet\AuthenticationCache.java,retrieve access token,public  string   (  context context  account account )  throws  messaging exception  io exception  {   cache entry entry = null ;  synchronized  ( m cache )   {  entry = get entry ( context account )  ;   }  synchronized  ( entry )   {  final long actual expiration = entry . m expiration time  -  expiration   threshold ;  if  (  system . current time millis (  )   >  actual expiration )   {  refresh entry ( context entry )  ;   }  return entry . m access token ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\internet\AuthenticationCache.java,save entry,"private void   (  context context  cache entry entry )  {   log utils . d (  logging . log   tag ""save entry"" )  ;  final  account account =  account . restore account with id ( context entry . m account id )  ;  final  host auth host auth = account . get or create host auth recv ( context )  ;  final  credential cred = host auth . get or create credential ( context )  ;  cred . m provider id = entry . m provider id ;  cred . m access token = entry . m access token ;  cred . m refresh token = entry . m refresh token ;  cred . m expiration = entry . m expiration time ;  cred . update ( context cred . to content values (  )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\EmailIntentService.java, email intent service,"public   (  )  {  super ( "" email intent service"" )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\EmailIntentService.java,on handle intent,@ override protected void   ( final  intent intent )  {  super . on handle intent ( intent )  ;  if  ( ui provider . action   update   notification . equals ( intent . get action (  )  )  )   {  final  notification controller nc =  notification controller
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\LegacyConversions.java,add attachment part,@ visible for testing protected static void   ( final  multipart mp final  string content type final  long content size final  string filename final  string content id final  input stream content )  throws  messaging exception  {  final  base64 body body 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\LegacyConversions.java,add one attachment,"public static void   ( final  context context final  email content .  message local message final  part part )  throws  messaging exception  io exception  {  final  attachment local attachment = mime part to attachment ( part )  ;  local attachment . m message key = local message . m id ;  local attachment . m account key = local message . m account key ;  if  ( debug   attachments )   {   log utils . d (  logging . log   tag "" add attachment ""  +  local attachment )  ;   }  final  uri uri =  content uris . with appended id (  attachment . message   id   uri local message . m id )  ;  final  cursor cursor = context . get content resolver (  )  . query ( uri  attachment . content   projection null null null )  ;  boolean attachment found in db = false ;  try  {  while  ( cursor . move to next (  )  )   {  final  attachment db attachment = new  attachment (  )  ;  db attachment . restore ( cursor )  ;  if  (  !  text utils . equals ( db attachment . m file name local attachment . m file name )  ||  !  text utils . equals ( db attachment . m mime type local attachment . m mime type )  ||  !  text utils . equals ( db attachment . m content id local attachment . m content id ) ||  !  text utils . equals ( db attachment . m location local attachment . m location )  )   {  continue ;   }  attachment found in db = true ;  local attachment . m id = db attachment . m id ;  if  ( debug   attachments )   {   log utils . d (  logging . log   tag "" skipped  found db attachment ""  +  db attachment )  ;   }  break ;   }   }  finally  {  cursor . close (  )  ;   }  if  (  ! attachment found in db )   {  local attachment . save ( context )  ;   }  save attachment body ( context part local attachment local message . m account key )  ;  if  ( local message . m attachments  =  =  null )   {  local message . m attachments = new  array list <  attachment >  (  )  ;   }  local message . m attachments . add ( local attachment )  ;  local message . m flag attachment = true ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\LegacyConversions.java,add text body part,private static void   ( final  mime multipart mp final  string content type final  string part text )  throws  messaging exception  {  if  ( part text  =  =  null )   {  return ;   }  final  text body body = new  text body ( part text )  ;  final  mime body part bp = new  mime body part ( body content type )  ;  mp . add body part ( bp )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\LegacyConversions.java,infer mailbox type from name,@ deprecated public static synchronized int   (  context context  string mailbox name )  {  if  ( s server mailbox names . size (  )   =  =  0 )   {  s server mailbox names . put ( context . get string ( r . string . mailbox   name   server   inbox )   ma
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\LegacyConversions.java,make message,"public static  message   ( final  context context final  email content .  message local message )  throws  messaging exception  {  final  mime message message = new  mime message (  )  ;  message . set subject ( local message . m subject  =  =  null  ?  """" : local message . m subject )  ;  final  address[] from =  address . from header ( local message . m from )  ;  if  ( from . length  >  0 )   {  message . set from ( from[0] )  ;   }  message . set sent date ( new  date ( local message . m time stamp )  )  ;  message . set uid ( local message . m server id )  ;  message . set flag (  flag . deleted local message . m flag loaded  =  =   email content .  message . flag   loaded   deleted )  ;  message . set flag (  flag . seen local message . m flag read )  ;  message . set flag (  flag . flagged local message . m flag favorite )  ;  message . set recipients (  recipient type . to  address . from header ( local message . m to )  )  ;  message . set recipients (  recipient type . cc  address . from header ( local message . m cc )  )  ;  message . set recipients (  recipient type . bcc  address . from header ( local message . m bcc )  )  ;  message . set reply to (  address . from header ( local message . m reply to )  )  ;  message . set internal date ( new  date ( local message . m server time stamp )  )  ;  message . set message id ( local message . m message id )  ;  message . set header (  mime header . header   content   type ""multipart / mixed"" )  ;  final  mime multipart mp = new  mime multipart (  )  ;  mp . set sub type ( ""mixed"" )  ;  message . set body ( mp )  ;  try  {  add text body part ( mp ""text / html""  email content .  body . restore body html with message id ( context local message . m id )  )  ;   }  catch  (   runtime exception rte )   {   log utils . d (  logging . log   tag "" exception while reading html body ""  +  rte . to string (  )  )  ;   }  try  {  add text body part ( mp ""text / plain""  email content .  body . restore body text with message id ( context local message . m id )  )  ;   }  catch  (   runtime exception rte )   {   log utils . d (  logging . log   tag "" exception while reading text body ""  +  rte . to string (  )  )  ;   }  final  uri uri =  content uris . with appended id (  attachment . message   id   uri local message . m id )  ;  final  cursor attachments = context . get content resolver (  )  . query ( uri  attachment . content   projection null null null )  ;  try  {  while  ( attachments  !  =  null && attachments . move to next (  )  )   {  final  attachment att = new  attachment (  )  ;  att . restore ( attachments )  ;  try  {  final  input stream content ;  if  ( att . m content bytes  !  =  null )   {  content = new  byte array input stream ( att . m content bytes )  ;   }  else  {   string content uri string = att . get cached file uri (  )  ;  if  (  text utils . is empty ( content uri string )  )   {  content uri string = att . get content uri (  )  ;   }  if  (  text utils . is empty ( content uri string )  )   {  content = null ;   }  else  {  final  uri content uri =  uri . parse ( content uri string )  ;  content = context . get content resolver (  )  . open input stream ( content uri )  ;   }   }  final  string mime type = att . m mime type ;  final  long content size = att . m size ;  final  string content id = att . m content id ;  final  string filename = att . m file name ;  if  ( content  !  =  null )   {  add attachment part ( mp mime type content size filename content id content )  ;   }  else  {   log utils . e (  log utils . tag "" could not open attachment file for upsync"" )  ;   }   }  catch  (  final  file not found exception e )   {   log utils . e (  log utils . tag "" file  not  found error on %s while upsyncing message"" att . get cached file uri (  )  )  ;   }   }   }  finally  {  if  ( attachments  !  =  null )   {  attachments . close (  )  ;   }   }  return message ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\LegacyConversions.java,mime part to attachment,@ visible for testing protected static  attachment   ( final  part part )  throws  messaging exception  {  final  string content type =  mime utility . unfold and decode ( part . get content type (  )  )  ;   string name =  mime utility . get header param
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\LegacyConversions.java,save attachment body,"public static void   ( final  context context final  part part final  attachment local attachment long account id )  throws  messaging exception  io exception  {  if  ( part . get body (  )   !  =  null )   {  final long attachment id = local attachment . m id ;  final  file save in =  attachment utilities . get attachment directory ( context account id )  ;  if  (  ! save in . is directory (  )  &&  ! save in . mkdirs (  )  )   {  throw new io exception ( "" could not create attachment directory"" )  ;   }  final  file save as =  attachment utilities . get attachment filename ( context account id attachment id )  ;   input stream in = null ;   file output stream out = null ;  final long copy size ;  try  {  in = part . get body (  )  . get input stream (  )  ;  out = new  file output stream ( save as )  ;  copy size = io utils . copy large ( in out )  ;   }  finally  {  if  ( in  !  =  null )   {  in . close (  )  ;   }  if  ( out  !  =  null )   {  out . close (  )  ;   }   }  final  string content uri string =  attachment utilities . get attachment uri ( account id attachment id )  . to string (  )  ;  local attachment . m size = copy size ;  local attachment . set content uri ( content uri string )  ;  final  content values cv = new  content values ( 3 )  ;  cv . put (  attachment columns . size copy size )  ;  cv . put (  attachment columns . content   uri content uri string )  ;  cv . put (  attachment columns . ui   state ui provider .  attachment state . saved )  ;  final  uri uri =  content uris . with appended id (  attachment . content   uri attachment id )  ;  context . get content resolver (  )  . update ( uri cv null null )  ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\LegacyConversions.java,update attachments,public static void   ( final  context context final  email content .  message local message final  array list <  part >  attachments )  throws  messaging exception  io exception  {  local message . m attachments = null ;  for  (   part attachment part : attachments )   {  add one attachment ( context local message attachment part )  ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\LegacyConversions.java,update inline attachments,public static void   ( final  context context final  email content .  message local message final  array list <  part >  inline attachments )  throws  messaging exception  io exception  {  for  (  final  part inline part : inline attachments )   {  final  string disposition =  mime utility . get header parameter (  mime utility . unfold and decode ( inline part . get disposition (  )  )  null )  ;  if  (  !  text utils . is empty ( disposition )  )   {  add one attachment ( context local message inline part )  ;   }   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\LegacyConversions.java,update message fields,"public static boolean   ( final  email content .  message local message final  message message final long account id final long mailbox id )  throws  messaging exception  {  final  address[] from = message . get from (  )  ;  final  address[] to = message . get recipients (  message .  recipient type . to )  ;  final  address[] cc = message . get recipients (  message .  recipient type . cc )  ;  final  address[] bcc = message . get recipients (  message .  recipient type . bcc )  ;  final  address[] reply to = message . get reply to (  )  ;  final  string subject = message . get subject (  )  ;  final  date sent date = message . get sent date (  )  ;  final  date internal date = message . get internal date (  )  ;  if  ( from  !  =  null && from . length  >  0 )   {  local message . m display name = from[0] . to friendly (  )  ;   }  if  ( sent date  !  =  null )   {  local message . m time stamp = sent date . get time (  )  ;   }  else if  ( internal date  !  =  null )   {   log utils . w (  logging . log   tag "" no sent date  falling back to internal date"" )  ;  local message . m time stamp = internal date . get time (  )  ;   }  if  ( subject  !  =  null )   {  local message . m subject = subject ;   }  local message . m flag read = message . is set (  flag . seen )  ;  if  ( message . is set (  flag . answered )  )   {  local message . m flags| =  email content .  message . flag   replied   to ;   }  if  ( local message . m flag loaded  !  =   email content .  message . flag   loaded   complete )   {  if  ( local message . m display name  =  =  null || """" . equals ( local message . m display name )  )   {  local message . m flag loaded =  email content .  message . flag   loaded   unloaded ;   }  else  {  local message . m flag loaded =  email content .  message . flag   loaded   partial ;   }   }  local message . m flag favorite = message . is set (  flag . flagged )  ;  local message . m server id = message . get uid (  )  ;  if  ( internal date  !  =  null )   {  local message . m server time stamp = internal date . get time (  )  ;   }  final  string message id = message . get message id (  )  ;  if  ( message id  !  =  null )   {  local message . m message id = message id ;   }  local message . m mailbox key = mailbox id ;  local message . m account key = account id ;  if  ( from  !  =  null && from . length  >  0 )   {  local message . m from =  address . to string ( from )  ;   }  local message . m to =  address . to string ( to )  ;  local message . m cc =  address . to string ( cc )  ;  local message . m bcc =  address . to string ( bcc )  ;  local message . m reply to =  address . to string ( reply to )  ;  return true ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\internet\OAuthAuthenticator.java, authentication result,public   ( final  string access token final  string refresh token final int expires in seconds )  {  m access token = access token ;  m refresh token = refresh token ;  m expires in seconds = expires in seconds ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\internet\OAuthAuthenticator.java,o auth authenticator,public   (  )  {  final  http params params = new  basic http params (  )  ;   http connection params . set connection timeout ( params  ( int )  ( connection   timeout )  )  ;   http connection params . set so timeout ( params  ( int )  ( command   timeout )  )  ;   http connection params . set socket buffer size ( params 8192 )  ;  m client = new  default http client ( params )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\internet\OAuthAuthenticator.java,do request,"private  authentication result   (  http post post )  throws  messaging exception  io exception  {  final  http response response ;  response = m client . execute ( post )  ;  final int status = response . get status line (  )  . get status code (  )  ;  if  ( status  =  =   http status . sc   ok )   {  return parse response ( response )  ;   }  else if  ( status  =  =   http status . sc   forbidden || status  =  =   http status . sc   unauthorized || status  =  =   http status . sc   bad   request )   {   log utils . e ( tag ""http  authentication error getting oauth tokens %d"" status )  ;  throw new  authentication failed exception ( "" auth error getting auth token"" )  ;   }  else  {   log utils . e ( tag ""http  error %d getting oauth tokens"" status )  ;  throw new  messaging exception ( ""http error ""  +  status  +  "" getting oauth token"" )  ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\internet\OAuthAuthenticator.java,parse response,"private  authentication result   (  http response response )  throws io exception   messaging exception  {  final  buffered reader reader = new  buffered reader ( new  input stream reader ( response . get entity (  )  . get content (  )  ""utf - 8"" )  )  ;  final  string builder builder = new  string builder (  )  ;  for  (  string line = null ;   ( line = reader . read line (  )  )   !  =  null ;   )   {  builder . append ( line )  . append ( ""\n"" )  ;   }  try  {  final json object json result = new json object ( builder . to string (  )  )  ;  final  string access token = json result . get string ( json   access   token )  ;  final  string expires in = json result . get string ( json   expires   in )  ;  final  string refresh token ;  if  ( json result . has ( json   refresh   token )  )   {  refresh token = json result . get string ( json   refresh   token )  ;   }  else  {  refresh token = null ;   }  try  {  int expires in seconds =  integer . value of ( expires in )  ;  return new  authentication result ( access token refresh token expires in seconds )  ;   }  catch  (   number format exception e )   {   log utils . e ( tag e "" invalid expiration %s"" expires in )  ;  throw new  messaging exception ( "" invalid number format"" e )  ;   }   }  catch  (  json exception e )   {   log utils . e ( tag e "" invalid json"" )  ;  throw new  messaging exception ( "" invalid json"" e )  ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\internet\OAuthAuthenticator.java,request access,"public  authentication result   ( final  context context final  string provider id final  string code )  throws  messaging exception  io exception  {  final o auth provider provider =  account settings utils . findo auth provider ( context provider id )  ;  if  ( provider  =  =  null )   {   log utils . e ( tag ""invalid provider %s"" provider id )  ;  throw new  authentication failed exception ( "" invalid provider""  +  provider id )  ;   }  final  http post post = new  http post ( provider . token endpoint )  ;  post . set header ( "" content -  type"" ""application / x - www - form - urlencoded"" )  ;  final  list <  basic name value pair >  nvp = new  array list <  basic name value pair >  (  )  ;  nvp . add ( new  basic name value pair ( oauth   request   code code )  )  ;  nvp . add ( new  basic name value pair ( oauth   request   client   id provider . client id )  )  ;  nvp . add ( new  basic name value pair ( oauth   request   client   secret provider . client secret )  )  ;  nvp . add ( new  basic name value pair ( oauth   request   redirect   uri provider . redirect uri )  )  ;  nvp . add ( new  basic name value pair ( oauth   request   grant   type ""authorization   code"" )  )  ;  try  {  post . set entity ( new  url encoded form entity ( nvp )  )  ;   }  catch  (   unsupported encoding exception e )   {   log utils . e ( tag e ""unsupported encoding"" )  ;  throw new  authentication failed exception ( "" unsupported encoding"" e )  ;   }  return do request ( post )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\internet\OAuthAuthenticator.java,request refresh,"public  authentication result   ( final  context context final  string provider id final  string refresh token )  throws  messaging exception  io exception  {  final o auth provider provider =  account settings utils . findo auth provider ( context provider id )  ;  if  ( provider  =  =  null )   {   log utils . e ( tag ""invalid provider %s"" provider id )  ;  throw new  authentication failed exception ( "" invalid provider""  +  provider id )  ;   }  final  http post post = new  http post ( provider . refresh endpoint )  ;  post . set header ( "" content -  type"" ""application / x - www - form - urlencoded"" )  ;  final  list <  basic name value pair >  nvp = new  array list <  basic name value pair >  (  )  ;  nvp . add ( new  basic name value pair ( oauth   request   refresh   token refresh token )  )  ;  nvp . add ( new  basic name value pair ( oauth   request   client   id provider . client id )  )  ;  nvp . add ( new  basic name value pair ( oauth   request   client   secret provider . client secret )  )  ;  nvp . add ( new  basic name value pair ( oauth   request   grant   type ""refresh   token"" )  )  ;  try  {  post . set entity ( new  url encoded form entity ( nvp )  )  ;   }  catch  (   unsupported encoding exception e )   {   log utils . e ( tag e ""unsupported encoding"" )  ;  throw new  authentication failed exception ( "" unsuported encoding"" e )  ;   }  return do request ( post )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\internet\OAuthAuthenticator.java,to string,"@ override public  string   (  )  {  return ""result access ""  +   ( m access token  =  =  null  ?  ""null"" : ""[redacted]"" )   +  "" refresh "" +   ( m refresh token  =  =  null  ?  ""null"" : ""[redacted]"" )  +  "" expires in seconds "" +  m expires in seconds ; "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapElement.java,check not destroyed,"protected final void   (  )  {  if  ( m destroyed )   {  throw new  runtime exception ( "" already destroyed"" )  ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapElement.java,destroy,public void   (  )  {  m destroyed = true ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapElement.java,equals for test,public boolean   (  imap element that )  {  if  ( that  =  =  null )   {  return false ;   }  return this . get class (  )   =  =  that . get class (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapElement.java,is destroyed,protected boolean   (  )  {  return m destroyed ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapList.java,add,"void   (  imap element e )  {  if  ( e  =  =  null )   {  throw new  runtime exception ( "" can't add null"" )  ;   }  m list . add ( e )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapList.java,contains,public final boolean   (  string s )  {  for  ( int i = 0 ;  i  <  size (  )  ;  i +  +  )   {  if  ( get string or empty ( i )  . is ( s )  )   {  return true ;   }   }  return false ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapList.java,destroy,@ override public void   (  )  {  if  ( m list  !  =  null )   {  for  (   imap element e : m list )   {  e . destroy (  )  ;   }  m list = null ;   }  super . destroy (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapList.java,equals for test,@ override public boolean   (  imap element that )  {  if  (  ! super . equals for test ( that )  )   {  return false ;   }   imap list that list =  (  imap list ) that ;  if  ( size (  )   !  =  that list . size (  )  )   {  return false ;   }  for  ( in
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapList.java,flatten,private final  string builder   (  string builder sb )  {  sb . append ( '[' )  ;  for  ( int i = 0 ;  i  <  m list . size (  )  ;  i +  +  )   {  if  ( i  >  0 )   {  sb . append ( ' ' )  ;   }  final  imap element e = get element or none ( i )  ;  if  ( e . is list (  )  )   {  get list or empty ( i )  . flatten ( sb )  ;   }  else if  ( e . is string (  )  )   {  sb . append ( get string or empty ( i )  . get string (  )  )  ;   }   }  sb . append ( ']' )  ;  return sb ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapList.java,get element or none,public final  imap element   ( int index )  {  return  ( index  >  =  m list . size (  )  )   ?   imap element . none : m list . get ( index )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapList.java,get keyed element or null,final  imap element   (  string key boolean prefix match )  {  for  ( int i = 1 ;  i  <  size (  )  ;  i +  = 2 )   {  if  ( is ( i  -  1 key prefix match )  )   {  return m list . get ( i )  ;   }   }  return null ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapList.java,get keyed list or empty,public final  imap list   (  string key boolean prefix match )  {   imap element e = get keyed element or null ( key prefix match )  ;  return  ( e  !  =  null )   ?   (  (  imap list ) e )  :  imap list . empty ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapList.java,get keyed string or empty,public final  imap string   (  string key boolean prefix match )  {   imap element e = get keyed element or null ( key prefix match )  ;  return  ( e  !  =  null )   ?   (  (  imap string ) e )  :  imap string . empty ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapList.java,get list or empty,public final  imap list   ( int index )  {   imap element el = get element or none ( index )  ;  return el . is list (  )   ?   (  imap list ) el : empty ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapList.java,get string or empty,public final  imap string   ( int index )  {   imap element el = get element or none ( index )  ;  return el . is string (  )   ?   (  imap string ) el :  imap string . empty ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapList.java,is,public final boolean   ( int index  string s boolean prefix match )  {  if  (  ! prefix match )   {  return get string or empty ( index )  . is ( s )  ;   }  else  {  return get string or empty ( index )  . starts with ( s )  ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapList.java,is empty,public final boolean   (  )  {  return size (  )   =  =  0 ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapList.java,is list,@ override public final boolean   (  )  {  return true ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapList.java,is string,@ override public final boolean   (  )  {  return false ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapList.java,size,public final int   (  )  {  return m list . size (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapList.java,to string,@ override public  string   (  )  {  return m list . to string (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapMemoryLiteral.java, imap memory literal,"  (  fixed length input stream in )  throws io exception  {  m data = new byte[in . get length (  ) ] ;  int pos = 0 ;  while  ( pos  <  m data . length )   {  int read = in . read ( m data pos m data . length  -  pos )  ;  if  ( read  <  0 )   {  break ;   }  pos +  = read ;   }  if  ( pos  !  =  m data . length )   {   log utils . w (  logging . log   tag """" )  ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapMemoryLiteral.java,destroy,@ override public void   (  )  {  m data = null ;  super . destroy (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapMemoryLiteral.java,get as stream,@ override public  input stream   (  )  {  return new  byte array input stream ( m data )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapMemoryLiteral.java,get string,@ override public  string   (  )  {  return  utility . from ascii ( m data )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapMemoryLiteral.java,to string,"@ override public  string   (  )  {  return  string . format ( "" { %d byte literal ( memory )  } "" m data . length )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapSimpleString.java, imap simple string,"  (  string string )  {  m string =  ( string  !  =  null )   ?  string : """" ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapSimpleString.java,destroy,@ override public void   (  )  {  m string = null ;  super . destroy (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapSimpleString.java,get as stream,@ override public  input stream   (  )  {  return new  byte array input stream (  utility . to ascii ( m string )  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapSimpleString.java,get string,@ override public  string   (  )  {  return m string ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapSimpleString.java,to string,"@ override public  string   (  )  {  return ""\""""  +  m string  +  ""\"""" ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapResponse.java, imap response,  (  string tag boolean is continuation request )  {  m tag = tag ;  m is continuation request = is continuation request ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapResponse.java,equals for test,@ override public boolean   (  imap element that )  {  if  (  ! super . equals for test ( that )  )   {  return false ;   }  final  imap response that response =  (  imap response ) that ;  if  ( m tag  =  =  null )   {  if  ( that response . m tag  !  = 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapResponse.java,get alert text or empty,public  imap string   (  )  {  if  (  ! get response code or empty (  )  . is (  imap constants . alert )  )   {  return  imap string . empty ;   }  return get string or empty ( 2 )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapResponse.java,get response code or empty,public  imap string   (  )  {  if  (  ! is status response (  )  )   {  return  imap string . empty ;   }  return get list or empty ( 1 )  . get string or empty ( 0 )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapResponse.java,get status or empty,public  imap string   (  )  {  if  (  ! is status response (  )  )   {  return  imap string . empty ;   }  return get string or empty ( 0 )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapResponse.java,get status response text or empty,public  imap string   (  )  {  if  (  ! is status response (  )  )   {  return  imap string . empty ;   }  return get string or empty ( get element or none ( 1 )  . is list (  )   ?  2 : 1 )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapResponse.java,is bad,public boolean   (  )  {  return is ( 0  imap constants . bad )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapResponse.java,is continuation request,public boolean   (  )  {  return m is continuation request ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapResponse.java,is data response,public final boolean   ( int index  string response type )  {  return  ! is tagged (  )  && get string or empty ( index )  . is ( response type )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapResponse.java,is no,public boolean   (  )  {  return is ( 0  imap constants . no )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapResponse.java,is ok,public boolean   (  )  {  return is ( 0  imap constants . ok )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapResponse.java,is status response,public boolean   (  )  {  return is status response ( get string or empty ( 0 )  . get string (  )  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapResponse.java,is tagged,public boolean   (  )  {  return m tag  !  =  null ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapResponse.java,to string,"@ override public  string   (  )  {   string tag = m tag ;  if  ( is continuation request (  )  )   {  tag = "" + "" ;   }  return ""#""  +  tag  +  ""# "" +  super . to string (  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapResponseParser.java, bye exception,public   (  )  {  super ( message )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapResponseParser.java, imap response parser,  (  input stream in  discourse logger discourse logger int literal keep in memory threshold )  {  if  ( debug   log   raw   stream &&  debug utils . debug )   {  in = new  logging input stream ( in )  ;   }  m in = new  peekable input stream ( in )  ;  m discourse logger = discourse logger ;  m literal keep in memory threshold = literal keep in memory threshold ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapResponseParser.java,destroy responses,public void   (  )  {  for  (   imap response r : m responses to destroy )   {  r . destroy (  )  ;   }  m responses to destroy . clear (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapResponseParser.java,expect,"void   ( char expected )  throws io exception  {  final int next = read byte (  )  ;  if  ( expected  !  =  next )   {  throw new io exception (  string . format ( "" expected %04x  ( %c )  but got %04x  ( %c ) ""  ( int ) expected expected next  ( char ) next )  )  ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapResponseParser.java,neweos exception,"private static io exception   (  )  {  final  string message = "" end of stream reached"" ;  if  (  debug utils . debug )   {   log utils . d (  logging . log   tag message )  ;   }  return new io exception ( message )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapResponseParser.java,on parse error,"private void   (  exception e )  {  try  {  for  ( int i = 0 ;  i  <  4 ;  i +  +  )   {  int b = read byte (  )  ;  if  ( b  =  =   - 1 || b  =  =  '\n' )   {  break ;   }   }   }  catch  (  io exception ignore )   {   }   log utils . w (  logging . log   tag "" exception detected: ""  +  e . get message (  )  )  ;  m discourse logger . log last discourse (  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapResponseParser.java,parse bare string,"private  imap string   (  )  throws io exception   messaging exception  {  m parse bare string . set length ( 0 )  ;  for  (  ;   ;   )   {  final int ch = peek (  )  ;  if  ( ch  =  =  ' ( ' || ch  =  =  ' ) ' || ch  =  =  ' { ' || ch  =  =  ' ' || ch  =  =  ']' || ch  =  =  '%' || ch  =  =  '""' ||  ( 0x00  <  =  ch && ch  <  =  0x1f )  || ch  =  =  0x7f )   {  if  ( m parse bare string . length (  )   =  =  0 )   {  throw new  messaging exception ( "" expected string  none found . "" )  ;   }   string s = m parse bare string . to string (  )  ;  if  (  imap constants . nil . equals ignore case ( s )  )   {  return  imap string . empty ;   }  return new  imap simple string ( s )  ;   }  else if  ( ch  =  =  '[' )   {  m parse bare string . append (  ( char ) read byte (  )  )  ;  m parse bare string . append ( read until ( ']' )  )  ;  m parse bare string . append ( ']' )  ;   }  else  {  m parse bare string . append (  ( char ) read byte (  )  )  ;   }   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapResponseParser.java,parse element,"private  imap element   (  )  throws io exception   messaging exception  {  final int next = peek (  )  ;  switch  ( next )   {  case ' ( ': return parse list ( ' ( ' ' ) ' )  ;  case '[': return parse list ( '[' ']' )  ;  case '""': read byte (  )  ;  return new  imap simple string ( read until ( '""' )  )  ;  case ' { ': return parse literal (  )  ;  case '\r': read byte (  )  ;  expect ( '\n' )  ;  return null ;  case '\n': read byte (  )  ;  return null ;  default : return parse bare string (  )  ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapResponseParser.java,parse elements,private void   (  imap list list char end )  throws io exception   messaging exception  {  for  (  ;   ;   )   {  for  (  ;   ;   )   {  final int next = peek (  )  ;  if  ( next  =  =  end )   {  return ;   }  if  ( next  !  =  ' ' )   {  break ;   }  read byte (  )  ;   }  final  imap element el = parse element (  )  ;  if  ( el  =  =  null )   {  return ;   }  list . add ( el )  ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapResponseParser.java,parse list,private  imap list   ( char opening char closing )  throws io exception   messaging exception  {  expect ( opening )  ;  final  imap list list = new  imap list (  )  ;  parse elements ( list closing )  ;  expect ( closing )  ;  return list ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapResponseParser.java,parse literal,"private  imap string   (  )  throws io exception   messaging exception  {  expect ( ' { ' )  ;  final int size ;  try  {  size =  integer . parse int ( read until ( ' } ' )  )  ;   }  catch  (   number format exception nfe )   {  throw new  messaging exception ( "" invalid length in literal"" )  ;   }  if  ( size  <  0 )   {  throw new  messaging exception ( "" invalid negative length in literal"" )  ;   }  expect ( '\r' )  ;  expect ( '\n' )  ;   fixed length input stream in = new  fixed length input stream ( m in size )  ;  if  ( size  >  m literal keep in memory threshold )   {  return new  imap temp file literal ( in )  ;   }  else  {  return new  imap memory literal ( in )  ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapResponseParser.java,parse response,private  imap response   (  )  throws io exception   messaging exception  {   imap response response to destroy = null ;  final  imap response response to return ;  try  {  final int ch = peek (  )  ;  if  ( ch  =  =  ' + ' )   {  read byte (  )  ;  expect ( ' ' )  ;  response to destroy = new  imap response ( null true )  ;  response to destroy . add ( new  imap simple string ( read until eol (  )  )  )  ;  response to return = response to destroy ;  response to destroy = null ;   }  else  {  final  string tag ;  if  ( ch  =  =  '*' )   {  tag = null ;  read byte (  )  ;  expect ( ' ' )  ;   }  else  {  tag = read until ( ' ' )  ;   }  response to destroy = new  imap response ( tag false )  ;  final  imap string first string = parse bare string (  )  ;  response to destroy . add ( first string )  ;  if  ( peek (  )   =  =  ' ' )   {  read byte (  )  ;  if  ( response to destroy . is status response (  )  )   {  final int next = peek (  )  ;  if  ( next  =  =  '[' )   {  response to destroy . add ( parse list ( '[' ']' )  )  ;  if  ( peek (  )   =  =  ' ' )   {  read byte (  )  ;   }   }   string rest = read until eol (  )  ;  if  (  !  text utils . is empty ( rest )  )   {  response to destroy . add ( new  imap simple string ( rest )  )  ;   }   }  else  {  parse elements ( response to destroy '\0' )  ;   }   }  else  {  expect ( '\r' )  ;  expect ( '\n' )  ;   }  response to return = response to destroy ;  response to destroy = null ;   }   }  finally  {  if  ( response to destroy  !  =  null )   {  response to destroy . destroy (  )  ;   }   }  return response to return ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapResponseParser.java,peek,private int   (  )  throws io exception  {  final int next = m in . peek (  )  ;  if  ( next  =  =   - 1 )   {  throw neweos exception (  )  ;   }  return next ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapResponseParser.java,read byte,private int   (  )  throws io exception  {  int next = m in . read (  )  ;  if  ( next  =  =   - 1 )   {  throw neweos exception (  )  ;   }  m discourse logger . add received byte ( next )  ;  return next ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapResponseParser.java,read response,"public  imap response   (  )  throws io exception   messaging exception  {   imap response response = null ;  try  {  response = parse response (  )  ;  if  (  debug utils . debug )   {   log utils . d (  logging . log   tag "" <  <  <  ""  +  response . to string (  )  )  ;   }   }  catch  (   runtime exception e )   {  on parse error ( e )  ;  throw e ;   }  catch  (  io exception e )   {  on parse error ( e )  ;  throw e ;   }  if  ( response . is ( 0  imap constants . bye )  )   {   log utils . w (  logging . log   tag  bye exception . message )  ;  response . destroy (  )  ;  throw new  bye exception (  )  ;   }  m responses to destroy . add ( response )  ;  return response ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapResponseParser.java,read until, string   ( char end )  throws io exception  {  m buffer read until . set length ( 0 )  ;  for  (  ;   ;   )   {  final int ch = read byte (  )  ;  if  ( ch  !  =  end )   {  m buffer read until . append (  ( char ) ch )  ;   }  else  {  return m buffer read until . to string (  )  ;   }   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapResponseParser.java,read until eol, string   (  )  throws io exception  {   string ret = read until ( '\r' )  ;  expect ( '\n' )  ;  return ret ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapString.java,equals for test,@ override public final boolean   (  imap element that )  {  if  (  ! super . equals for test ( that )  )   {  return false ;   }   imap string that string =  (  imap string ) that ;  return get string (  )  . equals ( that string . get string (  )  )  ; 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapUtility.java,get imap range values,"public static  string[]   (  string range )  {   array list <  string >  list = new  array list <  string >  (  )  ;  try  {  if  ( range  !  =  null )   {  int colon pos = range . index of ( ':' )  ;  if  ( colon pos  >  0 )   {  int first =  integer . parse int ( range . substring ( 0 colon pos )  )  ;  int second =  integer . parse int ( range . substring ( colon pos  +  1 )  )  ;  if  ( first  <  second )   {  for  ( int i = first ;  i  <  =  second ;  i +  +  )   {  list . add (  integer . to string ( i )  )  ;   }   }  else  {  for  ( int i = first ;  i  >  =  second ;  i -  -  )   {  list . add (  integer . to string ( i )  )  ;   }   }   }   }   }  catch  (   number format exception e )   {   log utils . d (  logging . log   tag "" invalid range value"" e )  ;   }   string[] string list = new  string[list . size (  ) ] ;  return list . to array ( string list )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapUtility.java,get imap sequence values,"public static  string[]   (  string set )  {   array list <  string >  list = new  array list <  string >  (  )  ;  if  ( set  !  =  null )   {   string[] set items = set . split ( "" "" )  ;  for  (   string item : set items )   {  if  ( item . index of ( ':' )   =  =   - 1 )   {  try  {   integer . parse int ( item )  ;  list . add ( item )  ;   }  catch  (   number format exception e )   {   log utils . d (  logging . log   tag "" invalid uid value"" e )  ;   }   }  else  {  for  (   string range item : get imap range values ( item )  )   {  list . add ( range item )  ;   }   }   }   }   string[] string list = new  string[list . size (  ) ] ;  return list . to array ( string list )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapUtility.java,imap quoted,"public static  string   (  string s )  {   string result = s . replace all ( ""\\\\"" ""\\\\\\\\"" )  ;  result = result . replace all ( ""\"""" ""\\\\\"""" )  ;  return ""\""""  +  result  +  ""\"""" ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapTempFileLiteral.java, imap temp file literal,"  (  fixed length input stream stream )  throws io exception  {  m size = stream . get length (  )  ;  m file =  file . create temp file ( ""imap"" "" . tmp""  temp directory . get temp directory (  )  )  ;   output stream out = new  file output stream ( m file )  ;  io utils . copy ( stream out )  ;  out . close (  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapTempFileLiteral.java,destroy,"@ override public void   (  )  {  try  {  if  (  ! is destroyed (  )  && m file . exists (  )  )   {  m file . delete (  )  ;   }   }  catch  (   runtime exception re )   {   log utils . w (  logging . log   tag "" failed to remove temp file: ""  +  re . ge"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapTempFileLiteral.java,finalize,@ override protected void   (  )  throws  throwable  {  try  {  destroy (  )  ;   }  finally  {  super . finalize (  )  ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapTempFileLiteral.java,get as stream,"@ override public  input stream   (  )  {  check not destroyed (  )  ;  try  {  return new  file input stream ( m file )  ;   }  catch  (   file not found exception e )   {   log utils . w (  logging . log   tag "" imap temp file literal:  temp file not fo"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapTempFileLiteral.java,get string,@ override public  string   (  )  {  check not destroyed (  )  ;  try  {  byte[] bytes = io utils . to byte array ( get as stream (  )  )  ;  if  ( bytes . length  >   imap response parser . literal   keep   in   memory   threshold )   {  throw new io exc
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapTempFileLiteral.java,temp file exists for test,public boolean   (  )  {  return m file . exists (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapTempFileLiteral.java,to string,"@ override public  string   (  )  {  return  string . format ( "" { %d byte literal ( file )  } "" m size )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapFolder.java, imap folder,  (  imap store store  string name )  {  m store = store ;  m name = name ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapFolder.java,append message,@ override public void   ( final  context context final  message message final boolean no timeout )  throws  messaging exception  {  check open (  )  ;  try  {  final  file temp dir = context . get external cache dir (  )  ;  final  file temp file =  file
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapFolder.java,can create,@ override public boolean   (  folder type type )  {  return true ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapFolder.java,check open,"private void   (  )  throws  messaging exception  {  if  (  ! is open (  )  )   {  throw new  messaging exception ( "" folder ""  +  m name  +  "" is not open . "" )  ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapFolder.java,close,@ override public void   ( boolean expunge )  {  m message count =  - 1 ;  synchronized  ( this )   {  m store . pool connection ( m connection )  ;  m connection = null ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapFolder.java,complex search for uids, string[]   (  list <  string >  commands )  throws  messaging exception  {  check open (  )  ;  try  {  try  {  return get search uids ( m connection . execute complex command ( commands false )  )  ;   }  catch  (   imap exception e )   {  return  utility . empty   strings ;   }  catch  (  io exception ioe )   {  throw io exception handler ( m connection ioe )  ;   }   }  finally  {  destroy responses (  )  ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapStore.java, imap exception,public   (  string message  string status  string alert text  string response code )  {  super ( message )  ;  m status = status ;  m alert text = alert text ;  m response code = response code ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapStore.java, imap message,  (  string uid  imap folder folder )  {  m uid = uid ;  m folder = folder ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapStore.java, imap store,"private   (  context context  account account )  throws  messaging exception  {  m context = context ;  m account = account ;   host auth recv auth = account . get or create host auth recv ( context )  ;  if  ( recv auth  =  =  null )   {  throw new  messaging exception ( "" no  host auth in  imap store ? "" )  ;   }  m transport = new  mail transport ( context ""imap"" recv auth )  ;   string[] user info = recv auth . get login (  )  ;  m username = user info[0] ;  m password = user info[1] ;  final  credential cred = recv auth . get credential ( context )  ;  m useo auth =  ( cred  !  =  null )  ;  m path prefix = recv auth . m domain ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapStore.java,add mailbox,private  imap folder   (  context context long account id  string mailbox path char delimiter boolean selectable  mailbox mailbox )  {  final int mailbox type ;  if  ( mailbox  =  =  null )   {  mailbox type =  legacy conversions . infer mailbox type from name ( context mailbox path )  ;  mailbox =  mailbox . get mailbox for path ( context account id mailbox path )  ;   }  else  {  mailbox type = mailbox . m type ;   }  final  imap folder folder =  (  imap folder ) get folder ( mailbox path )  ;  if  ( mailbox . is saved (  )  )   {  folder . m hash = mailbox . get hashes (  )  ;   }  update mailbox ( mailbox account id mailbox path delimiter selectable mailbox type )  ;  if  ( folder . m hash  =  =  null )   {  folder . m hash = mailbox . get hashes (  )  ;  mailbox . m ui sync status =  email content . sync   status   initial   sync   needed ;  mailbox . save ( m context )  ;   }  folder . m mailbox = mailbox ;  return folder ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapStore.java,can sync folder type,public boolean   ( final int type )  {  switch  ( type )   {  case  mailbox . type   inbox: case  mailbox . type   mail: case  mailbox . type   sent: case  mailbox . type   trash: case  mailbox . type   junk: return true ;  case  mailbox . type   none: case  mailbox . type   parent: case  mailbox . type   drafts: case  mailbox . type   outbox: case  mailbox . type   search: case  mailbox . type   starred: case  mailbox . type   unread: default : return false ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapStore.java,check settings,@ override public  bundle   (  )  throws  messaging exception  {  int result =  messaging exception . no   error ;   bundle bundle = new  bundle (  )  ;   imap connection connection = new  imap connection ( this )  ;  try  {  connection . open (  )  ;  co
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapStore.java,clone transport, mail transport   (  )  {  return m transport . clone (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapStore.java,close connections,public void   (  )  {   imap connection connection ;  while  (  ( connection = m connection pool . poll (  )  )   !  =  null )   {  connection . close (  )  ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapStore.java,create hierarchy,@ visible for testing static void   (  hash map <  string  imap folder >  mailboxes )  {   set <  string >  pathnames = mailboxes . key set (  )  ;  for  (   string path : pathnames )   {  final  imap folder folder = mailboxes . get ( path )  ;  final  ma
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapStore.java,decode folder name,static  string   (  string name  string prefix )  {   string folder ;  folder = modified   utf   7   charset . decode (  byte buffer . wrap (  utility . to ascii ( name )  )  )  . to string (  )  ;  if  (  ( prefix  !  =  null )  && folder . starts with ( prefix )  )   {  folder = folder . substring ( prefix . length (  )  )  ;   }  return folder ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapStore.java,encode folder name,static  string   (  string name  string prefix )  {  if  (  imap constants . inbox . equals ignore case ( name )  )  return name ;  if  ( prefix  !  =  null )   {  name = prefix  +  name ;   }   byte buffer bb = modified   utf   7   charset . encode ( name )  ;  byte[] b = new byte[bb . limit (  ) ] ;  bb . get ( b )  ;  return  utility . from ascii ( b )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapStore.java,ensure prefix is valid,void   (  )  {  if  (  !  text utils . is empty ( m path prefix )  &&  !  text utils . is empty ( m path separator )  )   {  if  (  ! m path prefix . ends with ( m path separator )  )   {  m path prefix = m path prefix  +  m path separator ;   }   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapStore.java,get alert text,public  string   (  )  {  return m alert text ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapStore.java,get connection, imap connection   (  )  {   imap connection connection ;  while  (  ( connection = m connection pool . poll (  )  )   !  =  null )   {  try  {  connection . set store ( this )  ;  connection . execute simple command (  imap constants . noop )  ;  break ;   }  catch  (   messaging exception e )   {   }  catch  (  io exception e )   {   }  connection . close (  )  ;   }  if  ( connection  =  =  null )   {  connection = new  imap connection ( this )  ;   }  return connection ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapStore.java,get connection pool for test,@ visible for testing  collection <  imap connection >    (  )  {  return m connection pool ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapStore.java,get context, context   (  )  {  return m context ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapStore.java,get folder,@ override public  folder   (  string name )  {  return new  imap folder ( this name )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapStore.java,get imap id,"public static  string   (  context context  string user name  string host  string capabilities )  {  synchronized  (  imap store . class )   {  if  ( s imap id  =  =  null )   {   telephony manager tm =  (  telephony manager ) context . get system service (  context . telephony   service )  ;   string network operator = tm . get network operator name (  )  ;  if  ( network operator  =  =  null )  network operator = """" ;  s imap id = make common imap id ( context . get package name (  )   build . version . release  build . version . codename  build . model  build . id  build . manufacturer network operator )  ;   }   }   string builder id = new  string builder ( s imap id )  ;   string vendor id =  vendor policy loader . get instance ( context )  . get imap id values ( user name host capabilities )  ;  if  ( vendor id  !  =  null )   {  id . append ( ' ' )  ;  id . append ( vendor id )  ;   }  try  {   string devuid =  preferences . get preferences ( context )  . get deviceuid (  )  ;   message digest message digest ;  message digest =  message digest . get instance ( ""sha - 1"" )  ;  message digest . update ( user name . get bytes (  )  )  ;  message digest . update ( devuid . get bytes (  )  )  ;  byte[] uid = message digest . digest (  )  ;   string hex uid =  base64 . encode to string ( uid  base64 . no   wrap )  ;  id . append ( "" \""aguid\"" \"""" )  ;  id . append ( hex uid )  ;  id . append ( '\""' )  ;   }  catch  (   no such algorithm exception e )   {   log utils . d (  logging . log   tag ""couldn't obtain sha - 1 hash for device uid"" )  ;   }  return id . to string (  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapStore.java,get password, string   (  )  {  return m password ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapStore.java,get response code,public  string   (  )  {  return m response code ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapStore.java,get status,public  string   (  )  {  return m status ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapStore.java,get useo auth,boolean   (  )  {  return m useo auth ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapStore.java,get username, string   (  )  {  return m username ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapStore.java,is user prefix set,boolean   (  )  {  return  text utils . is empty ( m path separator )  &&  !  text utils . is empty ( m path prefix )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapStore.java,join message uids,static  string   (  message[] messages )  {   string builder sb = new  string builder (  )  ;  boolean not first = false ;  for  (   message m : messages )   {  if  ( not first )   {  sb . append ( ' ' )  ;   }  sb . append ( m . get uid (  )  )  ;  not first = true ;   }  return sb . to string (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapStore.java,make common imap id,"@ visible for testing static  string   (  string package name  string version  string code name  string model  string id  string vendor  string network operator )  {   pattern p =  pattern . compile ( ""[^a - za - z0 - 9 -    \\ +  =  ; :\\ .   /  ]"" )  ; "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapStore.java,new instance,public static  store   (  account account  context context )  throws  messaging exception  {  return new  imap store ( context account )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapStore.java,parse,@ override public void   (  input stream in )  throws io exception   messaging exception  {  super . parse ( in )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapStore.java,pool connection,void   (  imap connection connection )  {  if  ( connection  !  =  null )   {  connection . destroy responses (  )  ;  m connection pool . add ( connection )  ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapStore.java,save mailbox list,private static void   (  context context  hash map <  string  imap folder >  folder map )  {  for  (   imap folder imap folder : folder map . values (  )  )   {  imap folder . save ( context )  ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapStore.java,set flag,@ override public void   (  flag flag boolean set )  throws  messaging exception  {  super . set flag ( flag set )  ;  m folder . set flags ( new  message[] { this }  new  flag[] { flag }  set )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapStore.java,set flag internal,public void   (  flag flag boolean set )  throws  messaging exception  {  super . set flag ( flag set )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapStore.java,set path prefix,void   (  string path prefix )  {  m path prefix = path prefix ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapStore.java,set path separator,void   (  string path separator )  {  m path separator = path separator ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapStore.java,set size,public void   ( int size )  {  m size = size ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapStore.java,set transport for test,@ visible for testing void   (  mail transport test transport )  {  m transport = test transport ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapStore.java,update folders,@ override public  folder[]   (  )  throws  messaging exception  {   imap connection connection = get connection (  )  ;  try  {  final  hash map <  string  imap folder >  mailboxes = new  hash map <  string  imap folder >  (  )  ;  connection . execute s
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapFolder.java,copy messages,@ override public void   (  message[] messages  folder folder  message update callbacks callbacks )  throws  messaging exception  {  check open (  )  ;  try  {   list <  imap response >  response list = m connection . execute simple command (  string . fo
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapFolder.java,create,@ override public boolean   (  folder type type )  throws  messaging exception  {   imap connection connection = null ;  synchronized  ( this )   {  if  ( m connection  =  =  null )   {  connection = m store . get connection (  )  ;   }  else  {  connecti
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapFolder.java,create message,@ override public  message   (  string uid )  {  return new  imap message ( uid this )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapFolder.java,decode body,"private static  body   (  input stream in  string content transfer encoding int size  message retrieval listener listener )  throws io exception  {  in =  mime utility . get input stream for content transfer encoding ( in content transfer encoding )  ;   binary temp file body temp body = new  binary temp file body (  )  ;   output stream out = temp body . get output stream (  )  ;  try  {  byte[] buffer = new byte[copy   buffer   size] ;  int n = 0 ;  int count = 0 ;  while  (  - 1  !  =   ( n = in . read ( buffer )  )  )   {  out . write ( buffer 0 n )  ;  count +  = n ;  if  ( listener  !  =  null )   {  if  ( size  =  =  0 )   {  listener . load attachment progress (  ( int )  math . ceil ( 100 *  ( 1  -  1 . 0  /  count )  )  )  ;   }  else  {  listener . load attachment progress ( count * 100  /  size )  ;   }   }   }   }  catch  (   base64 data exception bde )   {   string warning = ""\n\n""  +   imap service . get message decode error string (  )  ;  out . write ( warning . get bytes (  )  )  ;   }  finally  {  out . close (  )  ;   }  return temp body ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapFolder.java,delete,"@ override public void   ( boolean recurse )  {  throw new  error ( "" imap store . delete (  )  not yet implemented"" )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapFolder.java,destroy responses,private void   (  )  {  if  ( m connection  !  =  null )   {  m connection . destroy responses (  )  ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapFolder.java,do select,"private void   (  )  throws io exception   messaging exception  {  final  list <  imap response >  responses = m connection . execute simple command (  string . format (  locale . us  imap constants . select  +  "" \""%s\""""  imap store . encode folder name ( m name m store . m path prefix )  )  )  ;  m mode =  open mode . read   write ;  int message count =  - 1 ;  for  (   imap response response : responses )   {  if  ( response . is data response ( 1  imap constants . exists )  )   {  message count = response . get string or empty ( 0 )  . get number or zero (  )  ;   }  else if  ( response . is ok (  )  )   {  final  imap string response code = response . get response code or empty (  )  ;  if  ( response code . is (  imap constants . read   only )  )   {  m mode =  open mode . read   only ;   }  else if  ( response code . is (  imap constants . read   write )  )   {  m mode =  open mode . read   write ;   }   }  else if  ( response . is tagged (  )  )   {  throw new  messaging exception ( "" can't open mailbox: ""  +  response . get status response text or empty (  )  )  ;   }   }  if  ( message count  =  =   - 1 )   {  throw new  messaging exception ( "" did not find message count during select"" )  ;   }  m message count = message count ;  m exists = true ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapFolder.java,equals,@ override public boolean   (  object o )  {  if  ( o instanceof  imap folder )   {  return  (  (  imap folder ) o )  . m name . equals ( m name )  ;   }  return super . equals ( o )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapFolder.java,exists,@ override public boolean   (  )  throws  messaging exception  {  if  ( m exists )   {  return true ;   }   imap connection connection = null ;  synchronized  ( this )   {  if  ( m connection  =  =  null )   {  connection = m store . get connection (  )  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapFolder.java,expunge,@ override public  message[]   (  )  throws  messaging exception  {  check open (  )  ;  try  {  handle untagged responses ( m connection . execute simple command (  imap constants . expunge )  )  ;   }  catch  (  io exception ioe )   {  throw io exceptio
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapFolder.java,fetch,@ override public void   (  message[] messages  fetch profile fp  message retrieval listener listener )  throws  messaging exception  {  try  {  fetch internal ( messages fp listener )  ;   }  catch  (   runtime exception e )   {   log utils . w (  loggin
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapFolder.java,fetch internal,"public void   (  message[] messages  fetch profile fp  message retrieval listener listener )  throws  messaging exception  {  if  ( messages . length  =  =  0 )   {  return ;   }  check open (  )  ;   hash map <  string  message >  message map = new  hash map <  string  message >  (  )  ;  for  (   message m : messages )   {  message map . put ( m . get uid (  )  m )  ;   }  final  linked hash set <  string >  fetch fields = new  linked hash set <  string >  (  )  ;  fetch fields . add (  imap constants . uid )  ;  if  ( fp . contains (  fetch profile .  item . flags )  )   {  fetch fields . add (  imap constants . flags )  ;   }  if  ( fp . contains (  fetch profile .  item . envelope )  )   {  fetch fields . add (  imap constants . internaldate )  ;  fetch fields . add (  imap constants . rfc822   size )  ;  fetch fields . add (  imap constants . fetch   field   headers )  ;   }  if  ( fp . contains (  fetch profile .  item . structure )  )   {  fetch fields . add (  imap constants . bodystructure )  ;   }  if  ( fp . contains (  fetch profile .  item . body   sane )  )   {  fetch fields . add (  imap constants . fetch   field   body   peek   sane )  ;   }  if  ( fp . contains (  fetch profile .  item . body )  )   {  fetch fields . add (  imap constants . fetch   field   body   peek )  ;   }  final  part fetch part = fp . get first part (  )  ;  if  ( fetch part  !  =  null )   {  final  string[] part ids = fetch part . get header (  mime header . header   android   attachment   store   data )  ;  if  ( part ids  !  =  null )   {  fetch fields . add (  imap constants . fetch   field   body   peek   bare  +  ""[""  +  part ids[0] +  ""]"" )  ;   }   }  try  {  m connection . send command (  string . format (  locale . us  imap constants . uid   fetch  +  "" %s  ( %s ) ""  imap store . join message uids ( messages )   utility . combine ( fetch fields . to array ( new  string[fetch fields . size (  ) ] )  ' ' )  )  false )  ;   imap response response ;  do  {  response = null ;  try  {  response = m connection . read response (  )  ;  if  (  ! response . is data response ( 1  imap constants . fetch )  )   {  continue ;   }  final  imap list fetch list = response . get list or empty ( 2 )  ;  final  string uid = fetch list . get keyed string or empty (  imap constants . uid )  . get string (  )  ;  if  (  text utils . is empty ( uid )  )  continue ;   imap message message =  (  imap message ) message map . get ( uid )  ;  if  ( message  =  =  null )  continue ;  if  ( fp . contains (  fetch profile .  item . flags )  )   {  final  imap list flags = fetch list . get keyed list or empty (  imap constants . flags )  ;  for  ( int i = 0  count = flags . size (  )  ;  i  <  count ;  i +  +  )   {  final  imap string flag = flags . get string or empty ( i )  ;  if  ( flag . is (  imap constants . flag   deleted )  )   {  message . set flag internal (  flag . deleted true )  ;   }  else if  ( flag . is (  imap constants . flag   answered )  )   {  message . set flag internal (  flag . answered true )  ;   }  else if  ( flag . is (  imap constants . flag   seen )  )   {  message . set flag internal (  flag . seen true )  ;   }  else if  ( flag . is (  imap constants . flag   flagged )  )   {  message . set flag internal (  flag . flagged true )  ;   }   }   }  if  ( fp . contains (  fetch profile .  item . envelope )  )   {  final  date internal date = fetch list . get keyed string or empty (  imap constants . internaldate )  . get date or null (  )  ;  final int size = fetch list . get keyed string or empty (  imap constants . rfc822   size )  . get number or zero (  )  ;  final  string header = fetch list . get keyed string or empty (  imap constants . body   bracket   header true )  . get string (  )  ;  message . set internal date ( internal date )  ;  message . set size ( size )  ;  message . parse (  utility . stream from ascii string ( header )  )  ;   }  if  ( fp . contains (  fetch profile .  item . structure )  )   {   imap list bs = fetch list . get keyed list or empty (  imap constants . bodystructure )  ;  if  (  ! bs . is empty (  )  )   {  try  {  parse body structure ( bs message  imap constants . text )  ;   }  catch  (   messaging exception e )   {  if  (  logging . logd )   {   log utils . v (  logging . log   tag e "" error handling message"" )  ;   }  message . set body ( null )  ;   }   }   }  if  ( fp . contains (  fetch profile .  item . body )  || fp . contains (  fetch profile .  item . body   sane )  )   {   imap string body = fetch list . get keyed string or empty ( ""body[]"" true )  ;   input stream body stream = body . get as stream (  )  ;  message . parse ( body stream )  ;   }  if  ( fetch part  !  =  null )   {   input stream body stream = fetch list . get keyed string or empty ( ""body["" true )  . get as stream (  )  ;   string encodings[] = fetch part . get header (  mime header . header   content   transfer   encoding )  ;   string content transfer encoding = null ;  if  ( encodings  !  =  null && encodings . length  >  0 )   {  content transfer encoding = encodings[0] ;   }  else  {  content transfer encoding = ""7bit"" ;   }  try  {  fetch part . set body ( decode body ( body stream content transfer encoding fetch part . get size (  )  listener )  )  ;   }  catch  (   exception e )   {   log utils . e (  logging . log   tag "" error fetching body %s"" e )  ;   }   }  if  ( listener  !  =  null )   {  listener . message retrieved ( message )  ;   }   }  finally  {  destroy responses (  )  ;   }   }  while  (  ! response . is tagged (  )  )  ;   }  catch  (  io exception ioe )   {  throw io exception handler ( m connection ioe )  ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapFolder.java,generate date range command,"private  string   ( final long start date final long end date boolean use quotes )  throws  messaging exception  {  final  simple date format formatter = new  simple date format ( ""dd - lll - yyyy""  locale . us )  ;  formatter . set time zone (  time zone . get time zone ( ""utc"" )  )  ;  final  string since date str = formatter . format ( end date )  ;   string builder query param = new  string builder (  )  ;  query param . append ( ""1:* "" )  ;  if  ( start date  !  =  0 )   {  final  string before date str = formatter . format ( start date )  ;  if  ( start date  <  end date )   {  throw new  messaging exception (  string . format ( "" invalid date range: %s  -  %s"" since date str before date str )  )  ;   }  query param . append ( ""before "" )  ;  if  ( use quotes )  query param . append ( '\""' )  ;  query param . append ( before date str )  ;  if  ( use quotes )  query param . append ( '\""' )  ;  query param . append ( "" "" )  ;   }  query param . append ( ""since "" )  ;  if  ( use quotes )  query param . append ( '\""' )  ;  query param . append ( since date str )  ;  if  ( use quotes )  query param . append ( '\""' )  ;  return query param . to string (  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapFolder.java,get message,"@ override @ visible for testing public  message   (  string uid )  throws  messaging exception  {  check open (  )  ;  final  string[] uids = search for uids (  imap constants . uid  +  "" ""  +  uid )  ;  for  ( int i = 0 ;  i  <  uids . length ;  i +  + "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapFolder.java,get message count,@ override public int   (  )  {  return m message count ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapFolder.java,get messages,"@ override @ visible for testing public  message[]   (  string[] uids  message retrieval listener listener )  throws  messaging exception  {  if  ( uids  =  =  null )   {  uids = search for uids ( ""1:* not deleted"" )  ;   }  return get messages internal ("
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapFolder.java,get messages internal,public  message[]   (  string[] uids  message retrieval listener listener )  {  final  array list <  message >  messages = new  array list <  message >  ( uids . length )  ;  for  ( int i = 0 ;  i  <  uids . length ;  i +  +  )   {  final  string uid = uids[i] ;  final  imap message message = new  imap message ( uid this )  ;  messages . add ( message )  ;  if  ( listener  !  =  null )   {  listener . message retrieved ( message )  ;   }   }  return messages . to array (  message . empty   array )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapFolder.java,get mode,@ override public  open mode   (  )  {  return m mode ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapFolder.java,get name,@ override public  string   (  )  {  return m name ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapFolder.java,get permanent flags,@ override public  flag[]   (  )  {  return permanent   flags ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapFolder.java,get search uids, string[]   (  list <  imap response >  responses )  {  final  array list <  string >  uids = new  array list <  string >  (  )  ;  for  (   imap response response : responses )   {  if  (  ! response . is data response ( 0  imap constants . search )  )   {  continue ;   }  for  ( int i = 1 ;  i  <  response . size (  )  ;  i +  +  )   {   imap string s = response . get string or empty ( i )  ;  if  ( s . is string (  )  )   {  uids . add ( s . get string (  )  )  ;   }   }   }  return uids . to array (  utility . empty   strings )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapFolder.java,get unread message count,@ override public int   (  )  throws  messaging exception  {  check open (  )  ;  try  {  int unread message count = 0 ;  final  list <  imap response >  responses = m connection . execute simple command (  string . format (  locale . us  imap constants .
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapFolder.java,handle untagged response,private void   (  imap response response )  {  if  ( response . is data response ( 1  imap constants . exists )  )   {  m message count = response . get string or empty ( 0 )  . get number or zero (  )  ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapFolder.java,handle untagged responses,private void   (  list <  imap response >  responses )  {  for  (   imap response response : responses )   {  handle untagged response ( response )  ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapFolder.java,io exception handler,"private  messaging exception   (  imap connection connection io exception ioe )  {  if  (  debug utils . debug )   {   log utils . d (  logging . log   tag ""io  exception detected: "" ioe )  ;   }  connection . close (  )  ;  if  ( connection  =  =  m connection )   {  m connection = null ;  close ( false )  ;   }  return new  messaging exception (  messaging exception . ioerror ""io  error"" ioe )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapFolder.java,is ascii string,@ visible for testing protected static boolean   (  string str )  {  int len = str . length (  )  ;  for  ( int i = 0 ;  i  <  len ;  i +  +  )   {  char c = str . char at ( i )  ;  if  ( c  >  =  128 )  return false ;   }  return true ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapFolder.java,is open,@ override @ visible for testing public boolean   (  )  {  return m exists && m connection  !  =  null ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapFolder.java,open,@ override public void   (  open mode mode )  throws  messaging exception  {  try  {  if  ( is open (  )  )   {  if  ( m mode  =  =  mode )   {  try  {  m connection . execute simple command (  imap constants . noop )  ;  return ;   }  catch  (  io except
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapFolder.java,parse body structure,"private static void   (  imap list bs  part part  string id )  throws  messaging exception  {  if  ( bs . get element or none ( 0 )  . is list (  )  )   {   mime multipart mp = new  mime multipart (  )  ;  for  ( int i = 0  count = bs . size (  )  ;  i  <  count ;  i +  +  )   {   imap element e = bs . get element or none ( i )  ;  if  ( e . is list (  )  )   {   mime body part bp = new  mime body part (  )  ;  if  ( id . equals (  imap constants . text )  )   {  parse body structure ( bs . get list or empty ( i )  bp  integer . to string ( i  +  1 )  )  ;   }  else  {  parse body structure ( bs . get list or empty ( i )  bp id  +  "" . ""  +   ( i  +  1 )  )  ;   }  mp . add body part ( bp )  ;   }  else  {  if  ( e . is string (  )  )   {  mp . set sub type ( bs . get string or empty ( i )  . get string (  )  . to lower case (  locale . us )  )  ;   }  break ;   }   }  part . set body ( mp )  ;   }  else  {  final  imap string type = bs . get string or empty ( 0 )  ;  final  imap string sub type = bs . get string or empty ( 1 )  ;  final  string mime type =  ( type . get string (  )   +  "" / ""  +  sub type . get string (  )  )  . to lower case (  locale . us )  ;  final  imap list body params = bs . get list or empty ( 2 )  ;  final  imap string cid = bs . get string or empty ( 3 )  ;  final  imap string encoding = bs . get string or empty ( 5 )  ;  final int size = bs . get string or empty ( 6 )  . get number or zero (  )  ;  if  (  mime utility . mime type matches ( mime type  mime utility . mime   type   rfc822 )  )   {  throw new  messaging exception ( ""bodystructure ""  +   mime utility . mime   type   rfc822  +  "" not yet supported . "" )  ;   }  final  string builder content type = new  string builder ( mime type )  ;  for  ( int i = 1  count = body params . size (  )  ;  i  <  count ;  i +  = 2 )   {  content type . append (  string . format ( "" ; \n %s = \""%s\"""" body params . get string or empty ( i  -  1 )  . get string (  )  body params . get string or empty ( i )  . get string (  )  )  )  ;   }  part . set header (  mime header . header   content   type content type . to string (  )  )  ;  final  imap list body disposition ;  if  ( type . is (  imap constants . text )  && bs . get element or none ( 9 )  . is list (  )  )   {  body disposition = bs . get list or empty ( 9 )  ;   }  else  {  body disposition = bs . get list or empty ( 8 )  ;   }  final  string builder content disposition = new  string builder (  )  ;  if  ( body disposition . size (  )   >  0 )   {  final  string body disposition0 str = body disposition . get string or empty ( 0 )  . get string (  )  . to lower case (  locale . us )  ;  if  (  !  text utils . is empty ( body disposition0 str )  )   {  content disposition . append ( body disposition0 str )  ;   }  final  imap list body disposition params = body disposition . get list or empty ( 1 )  ;  if  (  ! body disposition params . is empty (  )  )   {  for  ( int i = 1  count = body disposition params . size (  )  ;  i  <  count ;  i +  = 2 )   {  content disposition . append (  string . format (  locale . us "" ; \n %s = \""%s\"""" body disposition params . get string or empty ( i  -  1 )  . get string (  )  . to lower case (  locale . us )  body disposition params . get string or empty ( i )  . get string (  )  )  )  ;   }   }   }  if  (  ( size  >  0 )  &&  (  mime utility . get header parameter ( content disposition . to string (  )  ""size"" )   =  =  null )  )   {  content disposition . append (  string . format (  locale . us "" ; \n size = %d"" size )  )  ;   }  if  ( content disposition . length (  )   >  0 )   {  part . set header (  mime header . header   content   disposition content disposition . to string (  )  )  ;   }  if  (  ! encoding . is empty (  )  )   {  part . set header (  mime header . header   content   transfer   encoding encoding . get string (  )  )  ;   }  if  (  ! cid . is empty (  )  )   {  part . set header (  mime header . header   content   id cid . get string (  )  )  ;   }  if  ( size  >  0 )   {  if  ( part instanceof  imap message )   {   (  (  imap message ) part )  . set size ( size )  ;   }  else if  ( part instanceof  mime body part )   {   (  (  mime body part ) part )  . set size ( size )  ;   }  else  {  throw new  messaging exception ( "" unknown part type ""  +  part . to string (  )  )  ;   }   }  part . set header (  mime header . header   android   attachment   store   data id )  ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapFolder.java,save,void   (  context context )  {  final  mailbox mailbox = m mailbox ;  if  (  ! mailbox . is saved (  )  )   {  mailbox . save ( context )  ;  m hash = mailbox . get hashes (  )  ;   }  else  {   object[] hash = mailbox . get hashes (  )  ;  if  (  !  arrays . equals ( m hash hash )  )   {  mailbox . update ( context mailbox . to content values (  )  )  ;  m hash = hash ;   }   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapFolder.java,search for uids,"@ visible for testing  string[]   (  string search criteria boolean swallow exception )  throws  messaging exception  {  check open (  )  ;  try  {  try  {  final  string command =  imap constants . uid   search  +  "" ""  +  search criteria ;  final  strin"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapFolder.java,set flags,"@ override public void   (  message[] messages  flag[] flags boolean value )  throws  messaging exception  {  check open (  )  ;   string all flags = """" ;  if  ( flags . length  >  0 )   {   string builder flag list = new  string builder (  )  ;  for  ( i"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapConnection.java, imap connection,  (  imap store store )  {  set store ( store )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapConnection.java,close,void   (  )  {  if  ( m transport  !  =  null )   {  m transport . close (  )  ;  m transport = null ;   }  destroy responses (  )  ;  m parser = null ;  m imap store = null ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapConnection.java,create parser,private void   (  )  {  destroy responses (  )  ;  m parser = new  imap response parser ( m transport . get input stream (  )  m discourse )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapConnection.java,destroy responses,void   (  )  {  if  ( m parser  !  =  null )   {  m parser . destroy responses (  )  ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapConnection.java,do get namespace,"private void   ( boolean has namespace capability )  throws  messaging exception  {  if  ( has namespace capability &&  ! m imap store . is user prefix set (  )  )   {   list <  imap response >  response list =  collections . empty list (  )  ;  try  {  response list = execute simple command (  imap constants . namespace )  ;   }  catch  (   imap exception ie )   {  if  (  debug utils . debug )   {   log utils . d (  logging . log   tag ie "" imap exception"" )  ;   }   }  catch  (  io exception ioe )   {   }  for  (   imap response response : response list )   {  if  ( response . is data response ( 0  imap constants . namespace )  )   {   imap list namespace list = response . get list or empty ( 1 )  ;   imap list namespace = namespace list . get list or empty ( 0 )  ;   string namespace string = namespace . get string or empty ( 0 )  . get string (  )  ;  if  (  !  text utils . is empty ( namespace string )  )   {  m imap store . set path prefix (  imap store . decode folder name ( namespace string null )  )  ;  m imap store . set path separator ( namespace . get string or empty ( 1 )  . get string (  )  )  ;   }   }   }   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapConnection.java,do get path separator,"private void   (  )  throws  messaging exception  {  if  ( m imap store . is user prefix set (  )  )   {   list <  imap response >  response list =  collections . empty list (  )  ;  try  {  response list = execute simple command (  imap constants . list  +  "" \""\"" \""\"""" )  ;   }  catch  (   imap exception ie )   {  if  (  debug utils . debug )   {   log utils . d (  logging . log   tag ie "" imap exception"" )  ;   }   }  catch  (  io exception ioe )   {   }  for  (   imap response response : response list )   {  if  ( response . is data response ( 0  imap constants . list )  )   {  m imap store . set path separator ( response . get string or empty ( 2 )  . get string (  )  )  ;   }   }   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapConnection.java,do login,"private void   (  )  throws io exception   messaging exception   authentication failed exception  {  try  {  if  ( m imap store . get useo auth (  )  )   {  dosasl auth (  )  ;   }  else  {  execute simple command ( get login phrase (  )  true )  ;   }   }  catch  (   imap exception ie )   {  if  (  debug utils . debug )   {   log utils . d (  logging . log   tag ie "" imap exception"" )  ;   }  final  string status = ie . get status (  )  ;  final  string code = ie . get response code (  )  ;  final  string alert text = ie . get alert text (  )  ;  if  (  imap constants . authenticationfailed . equals ( code )  ||  imap constants . expired . equals ( code )  ||  (  imap constants . no . equals ( status )  &&  text utils . is empty ( code )  )  )   {  throw new  authentication failed exception ( alert text ie )  ;   }  throw new  messaging exception ( alert text ie )  ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapConnection.java,dosasl auth,"private void   (  )  throws  messaging exception  io exception  {   log utils . d (  logging . log   tag ""dosasl auth"" )  ;   imap response response = geto auth response (  )  ;  if  (  ! response . is ok (  )  )   {   log utils . d (  logging . log   tag ""failed to authenticate  retrying"" )  ;  destroy responses (  )  ;  m login phrase = null ;  if  ( m transport  !  =  null )   {  m transport . close (  )  ;  m transport = null ;   }  response = geto auth response (  )  ;  if  (  ! response . is ok (  )  )   {   log utils . d (  logging . log   tag ""failed to authenticate  giving up"" )  ;  destroy responses (  )  ;  throw new  authentication failed exception ( ""o auth failed after refresh"" )  ;   }   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapConnection.java,do send id,"private void   ( boolean has id capability  string capabilities )  throws  messaging exception  {  if  (  ! has id capability )  return ;   string host = m transport . get host (  )  ;  if  ( host . to lower case (  )  . ends with ( "" . secureserver . net"" )  )  return ;   string m user agent =  imap store . get imap id ( m imap store . get context (  )  m imap store . get username (  )  host capabilities )  ;  if  ( m user agent  !  =  null )   {  m id phrase =  imap constants . id  +  ""  ( ""  +  m user agent +  "" ) "" ;   }  else if  ( debug   force   send   id )   {  m id phrase =  imap constants . id  +  "" ""  +   imap constants . nil ;   }  if  ( m id phrase  !  =  null )   {  try  {  execute simple command ( m id phrase )  ;   }  catch  (   imap exception ie )   {  if  (  debug utils . debug )   {   log utils . d (  logging . log   tag ie "" imap exception"" )  ;   }   }  catch  (  io exception ioe )   {   }   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapConnection.java,do start tls,"private  imap response   ( boolean has start tls capability )  throws io exception   messaging exception  {  if  ( m transport . can try tls security (  )  )   {  if  ( has start tls capability )   {  execute simple command (  imap constants . starttls )  ;  m transport . reopen tls (  )  ;  create parser (  )  ;  return  ( query capabilities (  )  )  ;   }  else  {  if  (  debug utils . debug )   {   log utils . d (  logging . log   tag ""tls not supported but required"" )  ;   }  throw new  messaging exception (  messaging exception . tls   required )  ;   }   }  return null ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapConnection.java,execute complex command, list <  imap response >    (  list <  string >  commands boolean sensitive )  throws io exception   messaging exception  {  send complex command ( commands sensitive )  ;  return get command responses (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapConnection.java,execute simple command, list <  imap response >    (  string command boolean sensitive )  throws io exception   messaging exception  {  send command ( command sensitive )  ;  return get command responses (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapConnection.java,get command responses, list <  imap response >    (  )  throws io exception   messaging exception  {  final  list <  imap response >  responses = new  array list <  imap response >  (  )  ;   imap response response ;  do  {  response = m parser . read response (  )  ;  responses . add ( response )  ;   }  while  (  ! response . is tagged (  )  )  ;  if  (  ! response . is ok (  )  )   {  final  string to string = response . to string (  )  ;  final  string status = response . get status or empty (  )  . get string (  )  ;  final  string alert = response . get alert text or empty (  )  . get string (  )  ;  final  string response code = response . get response code or empty (  )  . get string (  )  ;  destroy responses (  )  ;  if  (  imap constants . unavailable . equals ( response code )  )   {  throw new  messaging exception (  messaging exception . server   error alert )  ;   }  throw new  imap exception ( to string status alert response code )  ;   }  return responses ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapConnection.java,get login phrase," string   (  )  throws  messaging exception  io exception  {  if  ( m imap store . get useo auth (  )  )   {  final  string access token =  authentication cache . get instance (  )  . retrieve access token ( m imap store . get context (  )  m imap store . get account (  )  )  ;  if  ( m login phrase  =  =  null ||  !  text utils . equals ( m access token access token )  )   {  m access token = access token ;  final  string oauth code = ""user = ""  +  m imap store . get username (  )   +  '\001' +  ""auth =  bearer "" +  m access token +  '\001' +  '\001' ;  m login phrase =  imap constants . authenticate  +  "" ""  +   imap constants . xoauth2 +  "" "" +   base64 . encode to string ( oauth code . get bytes (  )   base64 . no   wrap )  ;   }   }  else  {  if  ( m login phrase  =  =  null )   {  if  ( m imap store . get username (  )   !  =  null && m imap store . get password (  )   !  =  null )   {  m login phrase =  imap constants . login  +  "" ""  +  m imap store . get username (  )  +  "" "" +   imap utility . imap quoted ( m imap store . get password (  )  )  ;   }   }   }  return m login phrase ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapConnection.java,geto auth response,"private  imap response   (  )  throws io exception   messaging exception  {   imap response response ;  send command internal ( get login phrase (  )  true )  ;  do  {  response = m parser . read response (  )  ;   }  while  (  ! response . is tagged (  )  &&  ! response . is continuation request (  )  )  ;  if  ( response . is continuation request (  )  )   {  send command internal ( """" true )  ;  response = read response (  )  ;   }  final  string response code = response . get response code or empty (  )  . get string (  )  ;  if  (  imap constants . unavailable . equals ( response code )  )   {  final  string alert = response . get alert text or empty (  )  . get string (  )  ;  throw new  messaging exception (  messaging exception . server   error alert )  ;   }  return response ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapConnection.java,is capable,private boolean   ( int capability )  {  return  ( m capabilities & capability )   !  =  0 ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapConnection.java,is transport open for test,boolean   (  )  {  return m transport  !  =  null && m transport . is open (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapConnection.java,log last discourse,void   (  )  {  m discourse . log last discourse (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapConnection.java,open,"void   (  )  throws io exception   messaging exception  {  if  ( m transport  !  =  null && m transport . is open (  )  )   {  return ;   }  try  {  if  ( m transport  =  =  null )   {  m transport = m imap store . clone transport (  )  ;   }  m transport . open (  )  ;  create parser (  )  ;  m parser . read response (  )  ;   imap response capabilities = query capabilities (  )  ;  boolean has start tls capability = capabilities . contains (  imap constants . starttls )  ;   imap response new capabilities = do start tls ( has start tls capability )  ;  if  ( new capabilities  !  =  null )   {  capabilities = new capabilities ;   }  set capabilities ( capabilities )  ;   string capability string = capabilities . flatten (  )  ;  do send id ( is capable ( capability   id )  capability string )  ;  do login (  )  ;  do get namespace ( is capable ( capability   namespace )  )  ;  do get path separator (  )  ;  m imap store . ensure prefix is valid (  )  ;   }  catch  (  ssl exception e )   {  if  (  debug utils . debug )   {   log utils . d (  logging . log   tag e ""ssl exception"" )  ;   }  throw new  certificate validation exception ( e . get message (  )  e )  ;   }  catch  (  io exception ioe )   {  if  (  debug utils . debug )   {   log utils . d (  logging . log   tag ioe ""io exception"" )  ;   }  throw ioe ;   }  finally  {  destroy responses (  )  ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapConnection.java,query capabilities,"private  imap response   (  )  throws io exception   messaging exception  {   imap response capability response = null ;  for  (   imap response r : execute simple command (  imap constants . capability )  )   {  if  ( r . is ( 0  imap constants . capability )  )   {  capability response = r ;  break ;   }   }  if  ( capability response  =  =  null )   {  throw new  messaging exception ( "" invalid capability response received"" )  ;   }  return capability response ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapConnection.java,read response, imap response   (  )  throws io exception   messaging exception  {  return m parser . read response (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapConnection.java,send command," string   (  string command boolean sensitive )  throws  messaging exception  io exception  {   log utils . d (  logging . log   tag ""send command %s""  ( sensitive  ?  imap   redacted   log : command )  )  ;  open (  )  ;  return send command internal ( command sensitive )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapConnection.java,send command internal," string   (  string command boolean sensitive )  throws  messaging exception  io exception  {  if  ( m transport  =  =  null )   {  throw new io exception ( "" null transport"" )  ;   }   string tag =  integer . to string ( m next command tag . increment and get (  )  )  ;   string command to send = tag  +  "" ""  +  command ;  m transport . write line ( command to send sensitive  ?  imap   redacted   log : null )  ;  m discourse . add sent command ( sensitive  ?  imap   redacted   log : command to send )  ;  return tag ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapConnection.java,send complex command," string   (  list <  string >  commands boolean sensitive )  throws  messaging exception  io exception  {  open (  )  ;   string tag =  integer . to string ( m next command tag . increment and get (  )  )  ;  int len = commands . size (  )  ;  for  ( int i = 0 ;  i  <  len ;  i +  +  )   {   string command to send = commands . get ( i )  ;  if  ( i  =  =  0 )   {  command to send = tag  +  "" ""  +  command to send ;   }  else  {   imap response response = read response (  )  ;  if  (  ! response . is continuation request (  )  )   {  throw new  messaging exception ( "" expected continuation request"" )  ;   }   }  m transport . write line ( command to send null )  ;  m discourse . add sent command ( sensitive  ?  imap   redacted   log : command to send )  ;   }  return tag ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapConnection.java,set capabilities,private void   (  imap response capabilities )  {  if  ( capabilities . contains (  imap constants . id )  )   {  m capabilities| = capability   id ;   }  if  ( capabilities . contains (  imap constants . namespace )  )   {  m capabilities| = capability   namespace ;   }  if  ( capabilities . contains (  imap constants . uidplus )  )   {  m capabilities| = capability   uidplus ;   }  if  ( capabilities . contains (  imap constants . starttls )  )   {  m capabilities| = capability   starttls ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapConnection.java,set store,void   (  imap store store )  {  m imap store = store ;  m login phrase = null ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\Store.java,auto discover,public  bundle   (  context context  string email address  string password )  throws  messaging exception  {  return null ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\Store.java,can sync folder type,public boolean   ( final int type )  {  return  ( type  =  =   mailbox . type   inbox )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\Pop3Store.java, pop folder,public   (  string name )  {  if  ( name . equals ignore case ( pop3   mailbox   name )  )   {  m name = pop3   mailbox   name ;   }  else  {  m name = name ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\Pop3Store.java, pop message,public   (  string uid  pop3 folder folder )  {  m uid = uid ;  m folder = folder ;  m size =  - 1 ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\Pop3Store.java, pop response input stream,public   (  input stream in )  {  m in = in ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\Pop3Store.java, pop store,"private   (  context context  account account )  throws  messaging exception  {  m context = context ;  m account = account ;   host auth recv auth = account . get or create host auth recv ( context )  ;  m transport = new  mail transport ( context ""pop3"" recv auth )  ;   string[] user info parts = recv auth . get login (  )  ;  m username = user info parts[0] ;  m password = user info parts[1] ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\Pop3Store.java, uidl parser,public   (  )  {  m err = true ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\Pop3Store.java,can create,@ override public boolean   (  folder type type )  {  return false ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\Pop3Store.java,check settings,"public  bundle   (  )  throws  messaging exception  {   bundle bundle = new  bundle (  )  ;  int result =  messaging exception . no   error ;  try  {   uidl parser parser = new  uidl parser (  )  ;  execute simple command ( ""uidl"" )  ;   string response ;  while  (  ( response = m transport . read line ( false )  )   !  =  null )   {  parser . parse multi line ( response )  ;  if  ( parser . m end of message )   {  break ;   }   }   }  catch  (  io exception ioe )   {  m transport . close (  )  ;  result =  messaging exception . ioerror ;  bundle . put string (  email service proxy . validate   bundle   error   message ioe . get message (  )  )  ;   }  bundle . put int (  email service proxy . validate   bundle   result   code result )  ;  return bundle ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\Pop3Store.java,close,"@ override public void   ( boolean expunge )  {  try  {  execute simple command ( ""quit"" )  ;   }  catch  (   exception e )   {   }  m transport . close (  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\Pop3Store.java,copy messages,"@ override public void   (  message[] msgs  folder folder  message update callbacks callbacks )  {  throw new  unsupported operation exception ( ""copy messages is not supported in pop3"" )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\Pop3Store.java,create,@ override public boolean   (  folder type type )  {  return false ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\Pop3Store.java,create message,@ override public  message   (  string uid )  {  return new  pop3 message ( uid this )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\Pop3Store.java,delete message,public void   (  message message )  throws  messaging exception  {  m one message[0] = message ;  set flags ( m one message permanent   flags true )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\Pop3Store.java,equals,@ override public boolean   (  object o )  {  if  ( o instanceof  pop3 folder )   {  return  (  (  pop3 folder ) o )  . m name . equals ( m name )  ;   }  return super . equals ( o )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\Pop3Store.java,execute sensitive command,private  string   (  string command  string sensitive replacement )  throws io exception   messaging exception  {  open (  open mode . read   write )  ;  if  ( command  !  =  null )   {  m transport . write line ( command sensitive replacement )  ;   }   string response = m transport . read line ( true )  ;  if  ( response . length (  )   >  1 && response . char at ( 0 )   =  =  ' - ' )   {  throw new  messaging exception ( response )  ;   }  return response ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\Pop3Store.java,execute simple command,private  string   (  string command )  throws io exception   messaging exception  {  return execute sensitive command ( command null )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\Pop3Store.java,exists,@ override public boolean   (  )  {  return m name . equals ignore case ( pop3   mailbox   name )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\Pop3Store.java,expunge,@ override public  message[]   (  )  {  return null ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\Pop3Store.java,fetch,"@ override public void   (  message[] messages  fetch profile fp  message retrieval listener listener )  throws  messaging exception  {  throw new  unsupported operation exception ( "" pop3 folder . fetch (  message[]   fetch profile   message retrieval li"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\Pop3Store.java,fetch body,"public void   (  pop3 message message int lines eol converting input stream .  callback callback )  throws io exception   messaging exception  {   string response = null ;  int message id = m uid to msg num map . get ( message . get uid (  )  )  ;  if  ( lines  =  =   - 1 )   {  response = execute simple command (  string . format (  locale . us ""retr %d"" message id )  )  ;   }  else  {  try  {  response = execute simple command (  string . format (  locale . us ""top %d %d"" message id lines )  )  ;   }  catch  (   messaging exception me )   {  try  {  response = execute simple command (  string . format (  locale . us ""retr %d"" message id )  )  ;   }  catch  (   messaging exception e )   {   log utils . w (  logging . log   tag "" can't read message ""  +  message id )  ;   }   }   }  if  ( response  !  =  null )   {  try  {  int ok = response . index of ( ""ok"" )  ;  if  ( ok  >  0 )   {  try  {  int start = ok  +  3 ;  if  ( start  >  response . length (  )  )   {   log utils . e (  logging . log   tag "" no body length supplied"" )  ;  message . set size ( 0 )  ;   }  else  {  int end = response . index of ( "" "" start )  ;  final  string int string ;  if  ( end  >  0 )   {  int string = response . substring ( start end )  ;   }  else  {  int string = response . substring ( start )  ;   }  message . set size (  integer . parse int ( int string )  )  ;   }   }  catch  (   number format exception e )   {   }   }   input stream in = m transport . get input stream (  )  ;  if  ( debug   log   raw   stream &&  debug utils . debug )   {  in = new  logging input stream ( in )  ;   }  message . parse ( new  pop3 response input stream ( in )  callback )  ;   }  catch  (   messaging exception me )   {  if  ( lines  =  =   - 1 )   {  throw me ;   }   }   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\Pop3Store.java,get capabilities,"private  pop3 capabilities   (  )  throws io exception  {   pop3 capabilities capabilities = new  pop3 capabilities (  )  ;  try  {   string response = execute simple command ( ""capa"" )  ;  while  (  ( response = m transport . read line ( true )  )   !  =  null )   {  if  ( response . equals ( "" . "" )  )   {  break ;   }  else if  ( response . equals ignore case ( ""stls"" )  )   {  capabilities . stls = true ;   }   }   }  catch  (   messaging exception me )   {   }  return capabilities ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\Pop3Store.java,get folder,@ override public  folder   (  string name )  {   folder folder = m folders . get ( name )  ;  if  ( folder  =  =  null )   {  folder = new  pop3 folder ( name )  ;  m folders . put ( folder . get name (  )  folder )  ;   }  return folder ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\Pop3Store.java,get message,@ override public  message   (  string uid )  throws  messaging exception  {  if  ( m uid to msg num map . size (  )   =  =  0 )   {  try  {  index msg nums ( 1 m message count )  ;   }  catch  (  io exception ioe )   {  m transport . close (  )  ;  if  (
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\Pop3Store.java,get message count,@ override public int   (  )  {  return m message count ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\Pop3Store.java,get messages,@ override public  message[]   (  search params params  message retrieval listener listener )  {  return null ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\Pop3Store.java,get mode,@ override public  open mode   (  )  {  return  open mode . read   write ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\Pop3Store.java,get name,@ override public  string   (  )  {  return m name ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\Pop3Store.java,get permanent flags,@ override public  flag[]   (  )  {  return permanent   flags ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\Pop3Store.java,get unread message count,@ override public int   (  )  {  return  - 1 ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\Pop3Store.java,index message,private void   ( int msg num  pop3 message message )  {  m msg num to msg map . put ( msg num message )  ;  m uid to msg map . put ( message . get uid (  )  message )  ;  m uid to msg num map . put ( message . get uid (  )  msg num )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\Pop3Store.java,index msg nums,"private void   ( int start int end )  throws  messaging exception  io exception  {  if  (  ! m msg num to msg map . is empty (  )  )   {  return ;   }   uidl parser parser = new  uidl parser (  )  ;  if  ( debug   force   single   line   uidl ||  ( m message count  >  5000 )  )   {  for  ( int msg num = start ;  msg num  <  =  end ;  msg num +  +  )   {   pop3 message message = m msg num to msg map . get ( msg num )  ;  if  ( message  =  =  null )   {   string response = execute simple command ( ""uidl ""  +  msg num )  ;  if  (  ! parser . parse single line ( response )  )   {  throw new io exception (  )  ;   }  message = new  pop3 message ( parser . m unique id this )  ;  index message ( msg num message )  ;   }   }   }  else  {   string response = execute simple command ( ""uidl"" )  ;  while  (  ( response = m transport . read line ( false )  )   !  =  null )   {  if  (  ! parser . parse multi line ( response )  )   {  throw new io exception (  )  ;   }  if  ( parser . m end of message )   {  break ;   }  int msg num = parser . m message number ;  if  ( msg num  >  =  start && msg num  <  =  end )   {   pop3 message message = m msg num to msg map . get ( msg num )  ;  if  ( message  =  =  null )   {  message = new  pop3 message ( parser . m unique id this )  ;  index message ( msg num message )  ;   }   }   }   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\Pop3Store.java,is open,@ override @ visible for testing public boolean   (  )  {  return m transport . is open (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\Pop3Store.java,new instance,public static  store   (  account account  context context )  throws  messaging exception  {  return new  pop3 store ( context account )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\Pop3Store.java,open,"@ override public synchronized void   (  open mode mode )  throws  messaging exception  {  if  ( m transport . is open (  )  )   {  return ;   }  if  (  ! m name . equals ignore case ( pop3   mailbox   name )  )   {  throw new  messaging exception ( "" fol"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\Pop3Store.java,parse,@ override public void   (  input stream in )  throws io exception   messaging exception  {  super . parse ( in )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\Pop3Store.java,parse multi line,"public boolean   (  string response )  {  m err = false ;  if  ( response  =  =  null || response . length (  )   =  =  0 )   {  return false ;   }  char first = response . char at ( 0 )  ;  if  ( first  =  =  ' . ' )   {  m end of message = true ;  return true ;   }  else  {   string[] uid parts = response . split ( ""  + "" )  ;  if  ( uid parts . length  >  =  2 )   {  try  {  m message number =  integer . parse int ( uid parts[0] )  ;   }  catch  (   number format exception nfe )   {  return false ;   }  m unique id = uid parts[1] ;  m end of message = false ;  return true ;   }   }  return false ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\Pop3Store.java,parse single line,"public boolean   (  string response )  {  m err = false ;  if  ( response  =  =  null || response . length (  )   =  =  0 )   {  return false ;   }  char first = response . char at ( 0 )  ;  if  ( first  =  =  ' + ' )   {   string[] uid parts = response . split ( ""  + "" )  ;  if  ( uid parts . length  >  =  3 )   {  try  {  m message number =  integer . parse int ( uid parts[1] )  ;   }  catch  (   number format exception nfe )   {  return false ;   }  m unique id = uid parts[2] ;  m end of message = true ;  return true ;   }   }  else if  ( first  =  =  ' - ' )   {  m err = true ;  return true ;   }  return false ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\Pop3Store.java,read,@ override public int   (  )  throws io exception  {  if  ( m finished )   {  return  - 1 ;   }  int d = m in . read (  )  ;  if  ( m start of line && d  =  =  ' . ' )   {  d = m in . read (  )  ;  if  ( d  =  =  '\r' )   {  m finished = true ;  m in . re
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\Pop3Store.java,set flag,@ override public void   (  flag flag boolean set )  throws  messaging exception  {  super . set flag ( flag set )  ;  m folder . set flags ( new  message[] { this }  new  flag[] { flag }  set )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\Pop3Store.java,set flags,@ override public void   (  message[] messages  flag[] flags boolean value )  throws  messaging exception  {  if  (  ! value ||  !  utility . array contains ( flags  flag . deleted )  )   {  return ;   }  try  {  for  (   message message : messages )   { 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\Pop3Store.java,set size,public void   ( int size )  {  m size = size ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\Pop3Store.java,set transport,void   (  mail transport test transport )  {  m transport = test transport ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\Pop3Store.java,to string,"@ override public  string   (  )  {  return  string . format ( ""stls %b"" stls )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\Pop3Store.java,update folders,@ override public  folder[]   (  )  {   mailbox mailbox =  mailbox . restore mailbox of type ( m context m account . m id  mailbox . type   inbox )  ;  if  ( mailbox  =  =  null )   {  mailbox =  mailbox . new system mailbox ( m context m account . m id  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ServiceStore.java, service store,public   (  account account  context context )  throws  messaging exception  {  m context = context ;  m host auth = account . get or create host auth recv ( m context )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ServiceStore.java,auto discover,@ override public  bundle   (  context context  string username  string password )  {  try  {  return get service (  )  . auto discover ( username password )  ;   }  catch  (   remote exception e )   {  return null ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ServiceStore.java,check settings,@ override public  bundle   (  )  throws  messaging exception  {  try  {  i email service svc = get service (  )  ;  if  ( svc instanceof  email service proxy )   {   (  (  email service proxy ) svc )  . set timeout ( 90 )  ;   }   host auth compat host a
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ServiceStore.java,get service,private i email service   (  )  {  return  email service utils . get service ( m context m host auth . m protocol )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ServiceStore.java,new instance,public static  store   (  account account  context context )  throws  messaging exception  {  return new  service store ( account context )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\transport\DiscourseLogger.java, discourse logger,public   ( int buffer size )  {  m buffer size = buffer size ;  init buffer (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\transport\DiscourseLogger.java,add line,private void   (  string s )  {  m buffer[m pos] = s ;  m pos +  +  ;  if  ( m pos  >  =  m buffer size )   {  m pos = 0 ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\transport\DiscourseLogger.java,add received byte,"public void   ( int b )  {  if  ( 0x20  <  =  b && b  <  =  0x7e )   {  m receiving line . append (  ( char ) b )  ;   }  else if  ( b  =  =  '\n' )   {  add receiving line to buffer (  )  ;   }  else if  ( b  =  =  '\r' )   {   }  else  {  final  string hex = ""00""  +   integer . to hex string ( b )  ;  m receiving line . append ( ""\\x""  +  hex . substring ( hex . length (  )   -  2 hex . length (  )  )  )  ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\transport\DiscourseLogger.java,add receiving line to buffer,private void   (  )  {  if  ( m receiving line . length (  )   >  0 )   {  add line ( m receiving line . to string (  )  )  ;  m receiving line . delete ( 0  integer . max   value )  ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\transport\DiscourseLogger.java,add sent command,public void   (  string command )  {  add line ( command )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\transport\DiscourseLogger.java,get lines, string[]   (  )  {  add receiving line to buffer (  )  ;   array list <  string >  list = new  array list <  string >  (  )  ;  final int start = m pos ;  int pos = m pos ;  do  {   string s = m buffer[pos] ;  if  ( s  !  =  null )   {  list . add ( s )  ;   }  pos =  ( pos  +  1 )  % m buffer size ;   }  while  ( pos  !  =  start )  ;   string[] ret = new  string[list . size (  ) ] ;  list . to array ( ret )  ;  return ret ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\transport\DiscourseLogger.java,init buffer,private void   (  )  {  m buffer = new  string[m buffer size] ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\transport\DiscourseLogger.java,log last discourse,"public void   (  )  {   string[] lines = get lines (  )  ;  if  ( lines . length  =  =  0 )   {  return ;   }   log utils . w (  logging . log   tag "" last network activities:"" )  ;  for  (   string r : get lines (  )  )   {   log utils . w (  logging . log   tag ""%s"" r )  ;   }  init buffer (  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\NotificationControllerCreatorHolder.java,get instance,public static  notification controller   (  context context )  {  return get notification controller creator (  )  . get instance ( context )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\NotificationControllerCreatorHolder.java,get notification controller creator,public static  notification controller creator   (  )  {  return s creator ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\NotificationControllerCreatorHolder.java,set notification controller creator,public static void   (  notification controller creator creator )  {  s creator = creator ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\PeekableInputStream.java, peekable input stream,public   (  input stream in )  {  this . m in = in ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\PeekableInputStream.java,peek,public int   (  )  throws io exception  {  if  (  ! m peeked )   {  m peeked byte = read (  )  ;  m peeked = true ;   }  return m peeked byte ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\PeekableInputStream.java,read,@ override public int   ( byte[] b )  throws io exception  {  return read ( b 0 b . length )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\PeekableInputStream.java,to string,"@ override public  string   (  )  {  return  string . format ( "" peekable input stream ( in = %s  peeked = %b  peeked byte = %d ) "" m in . to string (  )  m peeked m peeked byte )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\AccountBackupRestore.java,backup,public static void   (  context context )  {   content resolver resolver = context . get content resolver (  )  ;  resolver . update (  email provider . account   backup   uri null null null )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\transport\MailTransport.java, mail transport,public   (  context context  string debug label  host auth host auth )  {  super (  )  ;  m context = context ;  m debug label = debug label ;  m host auth = host auth ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\transport\MailTransport.java,can trust all certificates,public boolean   (  )  {  return  ( m host auth . m flags &  host auth . flag   trust   all )   !  =  0 ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\transport\MailTransport.java,can try ssl security,public boolean   (  )  {  return  ( m host auth . m flags &  host auth . flag   ssl )   !  =  0 ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\transport\MailTransport.java,can try tls security,public boolean   (  )  {  return  ( m host auth . m flags &  host auth . flag   tls )   !  =  0 ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\transport\MailTransport.java,clone,@ override public  mail transport   (  )  {  return new  mail transport ( m context m debug label m host auth )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\transport\MailTransport.java,close,public void   (  )  {  try  {  m in . close (  )  ;   }  catch  (   exception e )   {   }  try  {  m out . close (  )  ;   }  catch  (   exception e )   {   }  try  {  m socket . close (  )  ;   }  catch  (   exception e )   {   }  m in = null ;  m out = null ;  m socket = null ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\transport\MailTransport.java,get host,public  string   (  )  {  return m host auth . m address ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\transport\MailTransport.java,get input stream,public  input stream   (  )  {  return m in ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\transport\MailTransport.java,get local address,public  inet address   (  )  {  if  ( is open (  )  )   {  return m socket . get local address (  )  ;   }  else  {  return null ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\transport\MailTransport.java,get output stream,public  output stream   (  )  {  return m out ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\transport\MailTransport.java,get port,public int   (  )  {  return m host auth . m port ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\transport\MailTransport.java,get so timeout,public int   (  )  throws  socket exception  {  return m socket . get so timeout (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\transport\MailTransport.java,is open,public boolean   (  )  {  return  ( m in  !  =  null && m out  !  =  null && m socket  !  =  null && m socket . is connected (  )  &&  ! m socket . is closed (  )  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\transport\MailTransport.java,open,"public void   (  )  throws  messaging exception   certificate validation exception  {  if  (  debug utils . debug )   {   log utils . d (  logging . log   tag ""*** ""  +  m debug label  +  "" open "" +  get host (  )  +  "":"" +   string . value of ( get port (  )  )  )  ;   }  try  {   socket address socket address = new  inet socket address ( get host (  )  get port (  )  )  ;  if  ( can try ssl security (  )  )   {  m socket = ssl utils . getssl socket factory ( m context m host auth null can trust all certificates (  )  )  . create socket (  )  ;   }  else  {  m socket = new  socket (  )  ;   }  m socket . connect ( socket address socket   connect   timeout )  ;  if  ( can try ssl security (  )  &&  ! can trust all certificates (  )  )   {  verify hostname ( m socket get host (  )  )  ;   }   analytics . get instance (  )  . send event ( ""socket   certificates"" ""open""  boolean . to string ( can trust all certificates (  )  )  0 )  ;  if  ( m socket instanceof ssl socket )   {  final ssl socket ssl socket =  ( ssl socket ) m socket ;  if  ( ssl socket . get session (  )   !  =  null )   {   analytics . get instance (  )  . send event ( ""cipher   suite"" ssl socket . get session (  )  . get protocol (  )  ssl socket . get session (  )  . get cipher suite (  )  0 )  ;   }   }  m in = new  buffered input stream ( m socket . get input stream (  )  1024 )  ;  m out = new  buffered output stream ( m socket . get output stream (  )  512 )  ;  m socket . set so timeout ( socket   read   timeout )  ;   }  catch  (  ssl exception e )   {  if  (  debug utils . debug )   {   log utils . d (  logging . log   tag e . to string (  )  )  ;   }  throw new  certificate validation exception ( e . get message (  )  e )  ;   }  catch  (  io exception ioe )   {  if  (  debug utils . debug )   {   log utils . d (  logging . log   tag ioe . to string (  )  )  ;   }  throw new  messaging exception (  messaging exception . ioerror ioe . to string (  )  )  ;   }  catch  (   illegal argument exception iae )   {  if  (  debug utils . debug )   {   log utils . d (  logging . log   tag iae . to string (  )  )  ;   }  throw new  messaging exception (  messaging exception . unspecified   exception iae . to string (  )  )  ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\transport\MailTransport.java,read line,"public  string   ( boolean loggable )  throws io exception  {   string buffer sb = new  string buffer (  )  ;   input stream in = get input stream (  )  ;  int d ;  while  (  ( d = in . read (  )  )   !  =   - 1 )   {  if  (  (  ( char ) d )   =  =  '\r' )   {  continue ;   }  else if  (  (  ( char ) d )   =  =  '\n' )   {  break ;   }  else  {  sb . append (  ( char ) d )  ;   }   }  if  ( d  =  =   - 1 &&  debug utils . debug )   {   log utils . d (  logging . log   tag "" end of stream reached while trying to read line . "" )  ;   }   string ret = sb . to string (  )  ;  if  ( loggable &&  debug utils . debug )   {   log utils . d (  logging . log   tag "" <  <  <  ""  +  ret )  ;   }  return ret ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\transport\MailTransport.java,reopen tls,"public void   (  )  throws  messaging exception  {  try  {  m socket = ssl utils . getssl socket factory ( m context m host auth null can trust all certificates (  )  )  . create socket ( m socket get host (  )  get port (  )  true )  ;  m socket . set so timeout ( socket   read   timeout )  ;  m in = new  buffered input stream ( m socket . get input stream (  )  1024 )  ;  m out = new  buffered output stream ( m socket . get output stream (  )  512 )  ;   analytics . get instance (  )  . send event ( ""socket   certificates"" ""reopen tls""  boolean . to string ( can trust all certificates (  )  )  0 )  ;  final ssl socket ssl socket =  ( ssl socket ) m socket ;  if  ( ssl socket . get session (  )   !  =  null )   {   analytics . get instance (  )  . send event ( ""cipher   suite"" ssl socket . get session (  )  . get protocol (  )  ssl socket . get session (  )  . get cipher suite (  )  0 )  ;   }   }  catch  (  ssl exception e )   {  if  (  debug utils . debug )   {   log utils . d (  logging . log   tag e . to string (  )  )  ;   }  throw new  certificate validation exception ( e . get message (  )  e )  ;   }  catch  (  io exception ioe )   {  if  (  debug utils . debug )   {   log utils . d (  logging . log   tag ioe . to string (  )  )  ;   }  throw new  messaging exception (  messaging exception . ioerror ioe . to string (  )  )  ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\transport\MailTransport.java,set so timeout,public void   ( int timeout milliseconds )  throws  socket exception  {  m socket . set so timeout ( timeout milliseconds )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\transport\MailTransport.java,verify hostname,"private static void   (  socket socket  string hostname )  throws io exception  {  ssl socket ssl =  ( ssl socket ) socket ;  ssl . start handshake (  )  ;  ssl session session = ssl . get session (  )  ;  if  ( session  =  =  null )   {  throw new ssl exception ( "" cannot verify ssl socket without session"" )  ;   }  if  (  ! hostname   verifier . verify ( hostname session )  )   {  throw new ssl peer unverified exception ( "" certificate hostname not useable for server: ""  +  hostname )  ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\transport\MailTransport.java,write line,"public void   (  string s  string sensitive replacement )  throws io exception  {  if  (  debug utils . debug )   {  if  ( sensitive replacement  !  =  null &&  !  logging . debug   sensitive )   {   log utils . d (  logging . log   tag "" >  >  >  ""  +  sensitive replacement )  ;   }  else  {   log utils . d (  logging . log   tag "" >  >  >  ""  +  s )  ;   }   }   output stream out = get output stream (  )  ;  out . write ( s . get bytes (  )  )  ;  out . write ( '\r' )  ;  out . write ( '\n' )  ;  out . flush (  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\Preferences.java, preferences,private   (  context context )  {  m shared preferences = context . get shared preferences ( preferences   file  context . mode   private )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\Preferences.java,clear,public void   (  )  {  m shared preferences . edit (  )  . clear (  )  . apply (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\Preferences.java,clear legacy backup preference,public static void   (  context context )  {  get preferences ( context )  . m shared preferences . edit (  )  . remove ( account   uuids )  . apply (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\Preferences.java,dump,"public void   (  )  {  if  (  logging . logd )   {  for  (   string key : m shared preferences . get all (  )  . key set (  )  )   {   log utils . v (  logging . log   tag key  +  ""  =  ""  +  m shared preferences . get all (  )  . get ( key )  )  ;   }   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\Preferences.java,get auto advance direction,@ deprecated public int   (  )  {  return m shared preferences . get int ( auto   advance   direction auto   advance   default )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\Preferences.java,get confirm delete,@ deprecated public boolean   (  )  {  return m shared preferences . get boolean ( confirm   delete confirm   delete   default )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\Preferences.java,get confirm send,@ deprecated public boolean   (  )  {  return m shared preferences . get boolean ( confirm   send confirm   send   default )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\Preferences.java,get conversation list icon,@ deprecated public  string   (  )  {  return m shared preferences . get string ( conv   list   icon conv   list   icon   sender   image )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\Preferences.java,get deviceuid,public synchronized  string   (  )  {   string result = m shared preferences . get string ( device   uid null )  ;  if  ( result  =  =  null )   {  result = uuid . randomuuid (  )  . to string (  )  ;  m shared preferences . edit (  )  . put string ( device   uid result )  . apply (  )  ;   }  return result ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\Preferences.java,get enable debug logging,public boolean   (  )  {  return m shared preferences . get boolean ( enable   debug   logging false )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\Preferences.java,get enable exchange file logging,public boolean   (  )  {  return m shared preferences . get boolean ( enable   exchange   file   logging false )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\Preferences.java,get enable exchange logging,public boolean   (  )  {  return m shared preferences . get boolean ( enable   exchange   logging false )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\Preferences.java,get enable strict mode,public boolean   (  )  {  return m shared preferences . get boolean ( enable   strict   mode false )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\Preferences.java,get last used account id,public long   (  )  {  return m shared preferences . get long ( last   account   used  account . no   account )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\Preferences.java,get legacy backup preference,public static  string   (  context context )  {  return get preferences ( context )  . m shared preferences . get string ( account   uuids null )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\Preferences.java,get one time initialization progress,public int   (  )  {  return m shared preferences . get int ( one   time   initialization   progress 0 )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\Preferences.java,get preferences,public static synchronized  preferences   (  context context )  {  if  ( s preferences  =  =  null )   {  s preferences = new  preferences ( context )  ;   }  return s preferences ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\Preferences.java,get reply all,@ deprecated public boolean   (  )  {  return m shared preferences . get boolean ( reply   all false )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\Preferences.java,get shared preferences,public static  shared preferences   (  context context )  {  return get preferences ( context )  . m shared preferences ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\Preferences.java,get swipe delete,@ deprecated public boolean   (  )  {  return m shared preferences . get boolean ( swipe   delete false )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\Preferences.java,get whitelisted sender addresses,"@ deprecated public  set <  string >    (  )  {  try  {  return parse email set ( m shared preferences . get string ( trusted   senders """" )  )  ;   }  catch  (  json exception e )   {  return  collections . empty set (  )  ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\Preferences.java,has reply all,@ deprecated public boolean   (  )  {  return m shared preferences . contains ( reply   all )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\Preferences.java,has swipe delete,@ deprecated public boolean   (  )  {  return m shared preferences . contains ( swipe   delete )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\Preferences.java,parse email set, hash set <  string >    (  string serialized )  throws json exception  {   hash set <  string >  result = new  hash set <  string >  (  )  ;  if  (  !  text utils . is empty ( serialized )  )   {  json array arr = new json array ( serialized )  ;  for  ( int i = 0  len = arr . length (  )  ;  i  <  len ;  i +  +  )   {  result . add (  (  string ) arr . get ( i )  )  ;   }   }  return result ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\Preferences.java,set enable debug logging,public void   ( boolean value )  {  m shared preferences . edit (  )  . put boolean ( enable   debug   logging value )  . apply (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\Preferences.java,set enable exchange file logging,public void   ( boolean value )  {  m shared preferences . edit (  )  . put boolean ( enable   exchange   file   logging value )  . apply (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\Preferences.java,set enable exchange logging,public void   ( boolean value )  {  m shared preferences . edit (  )  . put boolean ( enable   exchange   logging value )  . apply (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\AccountReconciler.java,get all am accounts,private static  list < android . accounts .  account >    ( final  context context )  {  final  account manager am =  account manager . get ( context )  ;  final  linked hash set <  string >  account types = new  linked hash set <  string >  (  )  ;  account types . add ( context . get string ( r . string . account   manager   type   legacy   imap )  )  ;  account types . add ( context . get string ( r . string . account   manager   type   pop3 )  )  ;  account types . add ( context . get string ( r . string . account   manager   type   exchange )  )  ;  final  immutable list .  builder < android . accounts .  account >  builder =  immutable list . builder (  )  ;  for  (  final  string type : account types )   {  final android . accounts .  account[] accounts = am . get accounts by type ( type )  ;  builder . add ( accounts )  ;   }  return builder . build (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\AccountReconciler.java,get all email provider accounts,private static  list <  account >    ( final  context context )  {  final  cursor c = context . get content resolver (  )  . query (  account . content   uri  account . content   projection null null null )  ;  if  ( c  =  =  null )   {  return  collections . empty list (  )  ;   }  final  immutable list .  builder <  account >  builder =  immutable list . builder (  )  ;  try  {  while  ( c . move to next (  )  )   {  final  account account = new  account (  )  ;  account . restore ( c )  ;  builder . add ( account )  ;   }   }  finally  {  c . close (  )  ;   }  return builder . build (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\AccountReconciler.java,has am account,private static boolean   ( final  list < android . accounts .  account >  accounts final  string name final  string type )  {  for  (  final android . accounts .  account account : accounts )   {  if  ( account . name . equals ignore case ( name )  && account . type . equals ignore case ( type )  )   {  return true ;   }   }  return false ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\AccountReconciler.java,has ep account,private static boolean   ( final  list <  account >  accounts final  string name )  {  for  (  final  account account : accounts )   {  if  ( account . m email address . equals ignore case ( name )  )   {  return true ;   }   }  return false ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\AccountReconciler.java,reconcile accounts,public static synchronized void   ( final  context context )  {  final  list < android . accounts .  account >  am accounts = get all am accounts ( context )  ;  final  list <  account >  provider accounts = get all email provider accounts ( context )  ;  reconcile accounts internal ( context provider accounts am accounts true )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\AttachmentProvider.java,create image thumbnail,"private static  bitmap   (  input stream data )  {  try  {   bitmap bitmap =  bitmap factory . decode stream ( data )  ;  return bitmap ;   }  catch  (   out of memory error oome )   {   log utils . d (  logging . log   tag ""create image thumbnail failed with ""  +  oome . get message (  )  )  ;  return null ;   }  catch  (   exception e )   {   log utils . d (  logging . log   tag ""create image thumbnail failed with ""  +  e . get message (  )  )  ;  return null ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\AttachmentProvider.java,create thumbnail,"private static  bitmap   (  string type  input stream data )  {  if  (  mime utility . mime type matches ( type ""image / *"" )  )   {  return create image thumbnail ( data )  ;   }  return null ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\AttachmentProvider.java,delete,@ override public int   (  uri uri  string arg1  string[] arg2 )  {  return 0 ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\AttachmentProvider.java,get type,@ override public  string   (  uri uri )  {  long calling id =  binder . clear calling identity (  )  ;  try  {   list <  string >  segments = uri . get path segments (  )  ;   string id = segments . get ( 1 )  ;   string format = segments . get ( 2 )  ; 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\AttachmentProvider.java,insert,@ override public  uri   (  uri uri  content values values )  {  return null ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\AttachmentProvider.java,on create,@ override public boolean   (  )  {  final  file[] files = get context (  )  . get cache dir (  )  . list files (  )  ;  if  ( files  !  =  null )   {  for  (   file file : files )   {  final  string filename = file . get name (  )  ;  if  ( filename . en
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\AttachmentProvider.java,open file,"@ override public  parcel file descriptor   (  uri uri  string mode )  throws  file not found exception  {  if  ( mode . equals ( ""w"" )  )   {   context context = get context (  )  ;  if  ( context . check calling or self permission (  email content . pro"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\AttachmentProvider.java,query,@ override public  cursor   (  uri uri  string[] projection  string selection  string[] selection args  string sort order )  {  long calling id =  binder . clear calling identity (  )  ;  try  {  if  ( projection  =  =  null )   {  projection = new  strin
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\AttachmentProvider.java,update,@ override public int   (  uri uri  content values values  string selection  string[] selection args )  {  return 0 ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\AccountReconciler.java,reconcile accounts internal,"private static boolean   ( final  context context final  list <  account >  email provider accounts final  list < android . accounts .  account >  account manager accounts final boolean perform reconciliation )  {  boolean needs reconciling = false ;  int accounts deleted = 0 ;  boolean exchange account deleted = false ;   log utils . d (  logging . log   tag ""reconcile accounts internal"" )  ;  if  (  migration utils . migration in progress (  )  )   {   log utils . d (  logging . log   tag ""deferring reconciliation  migration in progress"" )  ;  return false ;   }  if  (  !  email service utils . is service available ( context context . get string ( r . string . protocol   eas )  )  )   {   email service utils . disable exchange components ( context )  ;   }  else  {   email service utils . enable exchange component ( context )  ;   }  for  (  final  account provider account : email provider accounts )   {  final  string provider account name = provider account . m email address ;  final  email service utils .  email service info info for account =  email service utils . get service info for account ( context provider account . m id )  ;  if  ( info for account  =  =  null ||  ! has am account ( account manager accounts provider account name info for account . account type )  )   {  if  ( info for account  !  =  null &&  ( provider account . m flags &  account . flags   incomplete )   !  =  0 )   {   log utils . w (  logging . log   tag "" account reconciler noticed incomplete account ;  ignoring"" )  ;  continue ;   }  needs reconciling = true ;  if  ( perform reconciliation )   {   log utils . d (  logging . log   tag "" account deleted in  account manager ;  deleting from provider: ""  +  provider account name )  ;  final  host auth auth = provider account . get or create host auth recv ( context )  ;   log utils . d (  logging . log   tag ""deleted account with host auth ""  +  auth )  ;  if  ( auth  !  =  null &&  text utils . equals ( auth . m protocol context . get string ( r . string . protocol   eas )  )  )   {  exchange account deleted = true ;   }  final  notification controller nc =  notification controller creator holder . get instance ( context )  ;  if  ( nc  !  =  null )   {  nc . cancel notifications ( context provider account )  ;   }  context . get content resolver (  )  . delete (  email provider . ui uri ( ""uiaccount"" provider account . m id )  null null )  ;  accounts deleted +  +  ;   }   }   }  boolean needs policy update = false ;  for  (  final android . accounts .  account account manager account : account manager accounts )   {  final  string account manager account name = account manager account . name ;  if  (  ! has ep account ( email provider accounts account manager account name )  )   {  needs reconciling = true ;  if  ( perform reconciliation )   {   log utils . d (  logging . log   tag "" account deleted from provider ;  deleting from  account manager: ""  +  account manager account name )  ;   account manager future <  boolean >  blocking result =  account manager . get ( context )  . remove account ( account manager account null null )  ;  try  {  blocking result . get result (  )  ;   }  catch  (   operation canceled exception e )   {   log utils . w (  logging . log   tag e . to string (  )  )  ;   }  catch  (   authenticator exception e )   {   log utils . w (  logging . log   tag e . to string (  )  )  ;   }  catch  (  io exception e )   {   log utils . w (  logging . log   tag e . to string (  )  )  ;   }  needs policy update = true ;   }   }  else  {  final  string account type = account manager account . type ;  final  string protocol =  email service utils . get protocol from account type ( context account type )  ;  final  email service info info =  email service utils . get service info ( context protocol )  ;  if  ( info  =  =  null ||  ! info . sync calendar )   {   content resolver . set is syncable ( account manager account  calendar contract . authority 0 )  ;   }  if  ( info  =  =  null ||  ! info . sync contacts )   {   content resolver . set is syncable ( account manager account  contacts contract . authority 0 )  ;   }   }   }  if  ( needs policy update )   {   security policy . get instance ( context )  . policies updated (  )  ;   }  final  string compose activity name = context . get string ( r . string . reconciliation   compose   activity   name )  ;  if  (  !  text utils . is empty ( compose activity name )  )   {  final boolean enable compose = email provider accounts . size (  )   -  accounts deleted  >  0 ;  final  component name component name = new  component name ( context compose activity name )  ;  context . get package manager (  )  . set component enabled setting ( component name enable compose  ?   package manager . component   enabled   state   enabled :  package manager . component   enabled   state   disabled  package manager . dont   kill   app )  ;   log utils . d (  log utils . tag "" setting compose activity to ""  +   ( enable compose  ?  ""enabled"" : ""disabled"" )  )  ;   }  if  ( accounts deleted  >  0 )   {   log utils . i (  logging . log   tag "" restarting because account deleted"" )  ;  if  ( exchange account deleted )   {   email service utils . kill service ( context context . get string ( r . string . protocol   eas )  )  ;   }   system . exit (  - 1 )  ;   }  return needs reconciling ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\Preferences.java,set enable strict mode,public void   ( boolean value )  {  m shared preferences . edit (  )  . put boolean ( enable   strict   mode value )  . apply (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\Preferences.java,set last used account id,public void   ( long account id )  {  m shared preferences . edit (  )  . put long ( last   account   used account id )  . apply (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\Preferences.java,set one time initialization progress,public void   ( int progress )  {  m shared preferences . edit (  )  . put int ( one   time   initialization   progress progress )  . apply (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java, cache token,  (  string id )  {  m id = id ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java, cached cursor,public   (  cursor cursor  content cache cache  string id )  {  super ( cursor )  ;  m cursor = cursor ;  m cache = cache ;  m id = id ;  s active cursors . add ( cursor )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java, content cache,"public   (  string name  string[] base projection int max size )  {  m name = name ;  m lru cache = new  lru cache <  string  cursor >  ( max size )  {  @ override protected void entry removed (  boolean evicted   string key   cursor old value   cursor new value )  {  if  ( evicted &&  ! s active cursors . contains ( old value )  )   {  old value . close (  )  ;   }   }   }   ;  m base projection = base projection ;  m log tag = "" content cache - ""  +  name ;  s content caches . add ( this )  ;  m token list = new  token list ( m name )  ;  m stats = new  statistics ( this )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java, counter map,  (  )  {  m map = new  hash map < t  integer >  (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java, statistics,  (  string name )  {  m cache = null ;  m name = name ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java, token list,"  (  string name )  {  m log tag = "" token list - ""  +  name ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java,add,"public  cache token   (  string id )  {   cache token token = new  cache token ( id )  ;  super . add ( token )  ;  if  (  debug utils . debug && debug   tokens )   {   log utils . d ( m log tag "" =  =  =  =  =  =  =  =  =  =  =  =   taking token for: ""  +  token . m id )  ;   }  return token ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java,add cache statistics,private void   (  content cache cache )  {  if  ( cache  !  =  null )   {  m hit count +  = cache . m stats . m hit count ;  m miss count +  = cache . m stats . m miss count ;  m projection miss count +  = cache . m stats . m projection miss count ;  m stale count +  = cache . m stats . m stale count ;  hit times +  = cache . m stats . hit times ;  miss times +  = cache . m stats . miss times ;  hits +  = cache . m stats . hits ;  miss +  = cache . m stats . miss ;  m cursor count +  = cache . size (  )  ;  m token count +  = cache . m token list . size (  )  ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java,append,"private static void   (  string builder sb  string name  object value )  {  sb . append ( ""  "" )  ;  sb . append ( name )  ;  sb . append ( "": "" )  ;  sb . append ( value )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java,close,@ override public void   (  )  {  synchronized  ( m cache )   {  int count = s active cursors . subtract ( m cursor )  ;  if  (  ( count  =  =  0 )  && m cache . m lru cache . get ( m id )   !  =   ( m cursor )  )   {  super . close (  )  ;   }   }  is cl
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java,contains,synchronized boolean   ( t object )  {  return m map . contains key ( object )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java,dump on count,private void   ( int num )  {  m stats . m op count +  +  ;  if  (  ( m stats . m op count % num )   =  =  0 )   {  dump stats (  )  ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java,dump stats,"public static void   (  )  {   statistics totals = new  statistics ( "" totals"" )  ;  for  (   content cache cache : s content caches )   {  if  ( cache  !  =  null )   {   log utils . d ( cache . m name cache . m stats . to string (  )  )  ;  totals . add cache statistics ( cache )  ;   }   }   log utils . d ( totals . m name totals . to string (  )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java,entry removed,@ override protected void   ( boolean evicted  string key  cursor old value  cursor new value )  {  if  ( evicted &&  ! s active cursors . contains ( old value )  )   {  old value . close (  )  ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java,entry set,synchronized  set <  map .  entry < t  integer >  >    (  )  {  return m map . entry set (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java,equals,@ override public boolean   (  object token )  {  return  (  ( token instanceof  cache token )  &&  (  (  cache token ) token )  . m id . equals ( m id )  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java,fill window,@ override public void   ( int pos  cursor window window )  {   (  (  cross process cursor ) m cursor )  . fill window ( pos window )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java,get,@ visible for testing  cursor   (  string id )  {  return m lru cache . get ( id )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java,get cache token,public synchronized  cache token   (  string id )  {   cache token token = m token list . add ( id )  ;  if  ( m lock map . contains ( id )  )   {  token . invalidate (  )  ;   }  return token ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java,get cached cursor,public synchronized  cursor   (  string id  string[] projection )  {  if  (  debug utils . debug && debug   statistics )   {  dump on count ( 200 )  ;   }  if  ( projection  =  =  m base projection )   {  return get cached cursor impl ( id )  ;   }  else  {  return get matrix cursor ( id projection )  ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java,get cached cursor impl,private  cached cursor   (  string id )  {   cursor c = get ( id )  ;  if  ( c  !  =  null )   {  m stats . m hit count +  +  ;  return new  cached cursor ( c this id )  ;   }  m stats . m miss count +  +  ;  return null ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java,get count,@ override public int   (  )  {  if  ( m count  <  0 )   {  m count = super . get count (  )  ;   }  return m count ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java,get id, string   (  )  {  return m id ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java,get matrix cursor,"private  matrix cursor   (  string id  string[] projection  content values values )  {   cursor c = get ( id )  ;  if  ( c  !  =  null )   {   matrix cursor mc = new  matrix cursor with cached columns ( projection 1 )  ;  if  ( c . get count (  )   =  =  0 )   {  return mc ;   }   object[] row = new  object[projection . length] ;  if  ( values  !  =  null )   {  values = new  content values ( values )  ;   }  int i = 0 ;  for  (   string column : projection )   {  int column index = c . get column index ( column )  ;  if  ( column index  <  0 )   {  m stats . m projection miss count +  +  ;  return null ;   }  else  {   string value ;  if  ( values  !  =  null && values . contains key ( column )  )   {   object val = values . get ( column )  ;  if  ( val instanceof  boolean )   {  value =  ( val  =  =   boolean . true )   ?  ""1"" : ""0"" ;   }  else  {  value = values . get as string ( column )  ;   }  values . remove ( column )  ;   }  else  {  value = c . get string ( column index )  ;   }  row[i +  + ] = value ;   }   }  if  ( values  !  =  null && values . size (  )   !  =  0 )   {  return null ;   }  mc . add row ( row )  ;  m stats . m hit count +  +  ;  return mc ;   }  m stats . m miss count +  +  ;  return null ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java,get position,@ override public int   (  )  {  return m position ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java,get projection,public  string[]   (  )  {  return m base projection ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java,get snapshot,protected  map <  string  cursor >    (  )  {  return m lru cache . snapshot (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java,get window,@ override public  cursor window   (  )  {  return  (  (  cross process cursor ) m cursor )  . get window (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java,hash code,@ override public int   (  )  {  return m id . hash code (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java,invalidate,"public synchronized void   (  string operation  uri uri  string selection )  {  if  ( debug   cache &&  ( operation  !  =  null )  )   {   log utils . d ( m log tag "" =  =  =  =  =  =  =  =  =  =  =  =  invalidated by ""  +  operation  +  "": "" +  uri +  ""  selection: "" +  selection )  ;   }  m stats . m invalidate count +  +  ;  m lru cache . evict all (  )  ;  m token list . invalidate (  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java,invalidate all caches,public static void   (  )  {  for  (   content cache cache : s content caches )   {  cache . invalidate (  )  ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java,invalidate tokens,"int   (  string id )  {  if  (  debug utils . debug && debug   tokens )   {   log utils . d ( m log tag "" =  =  =  =  =  =  =  =  =  =  =  =   invalidate tokens for: ""  +  id )  ;   }   array list <  cache token >  remove list = new  array list <  cache token >  (  )  ;  int count = 0 ;  for  (   cache token token : this )   {  if  ( token . get id (  )  . equals ( id )  )   {  token . invalidate (  )  ;  remove list . add ( token )  ;  count +  +  ;   }   }  for  (   cache token token : remove list )   {  remove ( token )  ;   }  return count ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java,is after last,@ override public final boolean   (  )  {  return m position  =  =  1 ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java,is before first,@ override public final boolean   (  )  {  return m position  =  =   - 1 ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java,is closed,@ override public boolean   (  )  {  return is closed ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java,is last,@ override public final boolean   (  )  {  return m position  =  =   ( get count (  )   -  1 )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java,is valid,boolean   (  )  {  return m is valid ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java,lock,"public synchronized void   (  string id )  {  m lock map . add ( id )  ;  int count = m token list . invalidate tokens ( id )  ;  if  (  debug utils . debug && debug   tokens )   {   log utils . d ( m token list . m log tag "" =  =  =  =  =  =  =  =  =  =  =  =   lock invalidated ""  +  count  +  "" tokens for: "" +  id )  ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java,move,@ override public final boolean   ( int offset )  {  return move to position ( m position  +  offset )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java,move to first,@ override public boolean   (  )  {  return move to position ( 0 )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java,move to last,@ override public final boolean   (  )  {  return move to position ( get count (  )   -  1 )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java,move to next,@ override public boolean   (  )  {  return move to position ( m position  +  1 )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java,move to position,@ override public boolean   ( int pos )  {  if  ( pos  >  =  get count (  )  || pos  <   - 1 )   {  return false ;   }  m position = pos ;  return true ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java,move to previous,@ override public boolean   (  )  {  return move to position ( m position  -  1 )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java,not cacheable,"public static synchronized void   (  uri uri  string selection )  {  if  ( debug   not   cacheable )   {  s not cacheable +  +  ;   string str = uri . to string (  )   +  ""$""  +  selection ;  s not cacheable map . add ( str )  ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java,on move,@ override public boolean   ( int old position int new position )  {  return true ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java,put cursor,public  cursor   (  cursor c  string id  string[] projection  cache token token )  {  c . move to position ( 0 )  ;  return put cursor impl ( c id projection token )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java,put cursor impl,"public synchronized  cursor   (  cursor c  string id  string[] projection  cache token token )  {  try  {  if  (  ! token . is valid (  )  )   {  if  (  debug utils . debug && debug   cache )   {   log utils . d ( m log tag "" =  =  =  =  =  =  =  =  =  =  =  =   stale token for ""  +  id )  ;   }  m stats . m stale count +  +  ;  return c ;   }  if  ( c  !  =  null &&  arrays . equals ( projection m base projection )  &&  ! s lock cache )   {  if  (  debug utils . debug && debug   cache )   {   log utils . d ( m log tag "" =  =  =  =  =  =  =  =  =  =  =  =   caching cursor for: ""  +  id )  ;   }   cursor existing cursor = get ( id )  ;  if  ( existing cursor  !  =  null )   {  unlock impl ( id null false )  ;   }  m lru cache . put ( id c )  ;  return new  cached cursor ( c this id )  ;   }  return c ;   }  finally  {  m token list . remove ( token )  ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java,record query time,void   (  cursor c long nano time )  {  if  ( c instanceof  cached cursor )   {  m stats . hit times +  = nano time ;  m stats . hits +  +  ;   }  else  {  if  ( c . get count (  )   =  =  1 )   {  m stats . miss times +  = nano time ;  m stats . miss +  +  ;   }   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java,remove,"boolean   (  cache token token )  {  boolean result = super . remove ( token )  ;  if  (  debug utils . debug && debug   tokens )   {  if  ( result )   {   log utils . d ( m log tag "" =  =  =  =  =  =  =  =  =  =  =  =   removing token for: ""  +  token . m id )  ;   }  else  {   log utils . d ( m log tag "" =  =  =  =  =  =  =  =  =  =  =  =   no token found for: ""  +  token . m id )  ;   }   }  return result ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java,set lock cache for test,public static void   ( boolean lock )  {  s lock cache = lock ;  if  ( s lock cache )   {  invalidate all caches (  )  ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java,size,public int   (  )  {  return m lru cache . size (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java,subtract,synchronized int   ( t object )  {   integer ref count = m map . get ( object )  ;  int new count ;  if  ( ref count  =  =  null || ref count . int value (  )   =  =  0 )   {  throw new  illegal state exception (  )  ;   }  if  ( ref count  >  1 )   {  new count = ref count  -  1 ;  m map . put ( object new count )  ;   }  else  {  new count = 0 ;  m map . remove ( object )  ;   }  return new count ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java,to string,"@ override public  string   (  )  {  if  ( m hit count  +  m miss count  =  =  0 )  return "" no cache"" ;  int total tries = m miss count  +  m projection miss count  +  m hit count ;   string builder sb = new  string builder (  )  ;  sb . append ( "" cache"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java,unlock,public synchronized void   (  string id  content values values )  {  unlock impl ( id values true )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java,unlock impl,"private void   (  string id  content values values boolean was locked )  {   cursor c = get ( id )  ;  if  ( c  !  =  null )   {  if  (  debug utils . debug && debug   cache )   {   log utils . d ( m log tag "" =  =  =  =  =  =  =  =  =  =  =   unlocking cache for: ""  +  id )  ;   }  if  ( values  !  =  null &&  ! s lock cache )   {   matrix cursor cursor = get matrix cursor ( id m base projection values )  ;  if  ( cursor  !  =  null )   {  if  (  debug utils . debug && debug   cache )   {   log utils . d ( m log tag "" =  =  =  =  =  =  =  =  =  =  =   recaching with new values: ""  +  id )  ;   }  cursor . move to first (  )  ;  m lru cache . put ( id cursor )  ;   }  else  {  m lru cache . remove ( id )  ;   }   }  else  {  m lru cache . remove ( id )  ;   }  if  (  ! s active cursors . contains ( c )  )   {  c . close (  )  ;   }   }  if  ( was locked )   {  m lock map . subtract ( id )  ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\DBHelper.java, body database helper,  (  context context  string name )  {  super ( context name null body   database   version )  ;  m context = context ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\DBHelper.java, database helper,  (  context context  string name )  {  super ( context name null database   version )  ;  m context = context ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\DBHelper.java,convert policy flags to policy table,"@ visible for testing @ suppress warnings ( ""deprecation"" )  static void   ( sq lite database db )  {   cursor c = db . query (  account . table   name new  string[] {  base columns .    id  account columns . security   flags }   account columns . securit"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\DBHelper.java,create account manager account,"private static void   (  context context  string login  string type  string password )  {  final  account manager account manager =  account manager . get ( context )  ;  if  ( is account present ( account manager login type )  )   {  return ;   }   log utils . v ( "" email"" "" creating account %s %s"" login type )  ;  final android . accounts .  account am account = new android . accounts .  account ( login type )  ;  account manager . add account explicitly ( am account password null )  ;   content resolver . set is syncable ( am account  email content . authority 1 )  ;   content resolver . set sync automatically ( am account  email content . authority true )  ;   content resolver . set is syncable ( am account  contacts contract . authority 0 )  ;   content resolver . set is syncable ( am account  calendar contract . authority 0 )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailMessageCursor.java, email message cursor,"public   ( final  context c final  cursor cursor final  string html column final  string text column )  {  super ( cursor )  ;  m html column index = cursor . get column index ( html column )  ;  m text column index = cursor . get column index ( text column )  ;  final int cursor size = cursor . get count (  )  ;  m html parts = new  sparse array <  string >  ( cursor size )  ;  m text parts = new  sparse array <  string >  ( cursor size )  ;  final  content resolver cr = c . get content resolver (  )  ;  while  ( cursor . move to next (  )  )   {  final int position = cursor . get position (  )  ;  final long message id = cursor . get long ( cursor . get column index (  base columns .    id )  )  ;  try  {  if  ( m html column index  !  =   - 1 )   {  final  uri html uri =  body . get body html uri for message with id ( message id )  ;  final  input stream in = cr . open input stream ( html uri )  ;  final  string underlying html string ;  try  {  underlying html string = io utils . to string ( in )  ;   }  finally  {  in . close (  )  ;   }  final  string sanitized html =  html sanitizer . sanitize html ( underlying html string )  ;  m html parts . put ( position sanitized html )  ;   }   }  catch  (  final io exception e )   {   log utils . v (  log utils . tag e "" did not find html body for message %d"" message id )  ;   }  try  {  if  ( m text column index  !  =   - 1 )   {  final  uri text uri =  body . get body text uri for message with id ( message id )  ;  final  input stream in = cr . open input stream ( text uri )  ;  final  string underlying text string ;  try  {  underlying text string = io utils . to string ( in )  ;   }  finally  {  in . close (  )  ;   }  m text parts . put ( position underlying text string )  ;   }   }  catch  (  final io exception e )   {   log utils . v (  log utils . tag e "" did not find text body for message %d"" message id )  ;   }   }  cursor . move to position (  - 1 )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailMessageCursor.java,get string,@ override public  string   ( final int column index )  {  if  ( column index  =  =  m html column index )   {  return m html parts . get ( get position (  )  )  ;   }  else if  ( column index  =  =  m text column index )   {  return m text parts . get ( 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailMessageCursor.java,get type,@ override public int   ( int column index )  {  if  ( column index  =  =  m html column index || column index  =  =  m text column index )   {  return field   type   string ;   }  else  {  return super . get type ( column index )  ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\DBHelper.java,create account table,"@ suppress warnings ( ""deprecation"" )  static void   ( sq lite database db )  {   string s = ""  ( ""  +   account columns .    id  +  "" integer primary key autoincrement  "" +   account columns . display   name +  "" text  "" +   account columns . email   add"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\DBHelper.java,create attachment table,"static void   ( sq lite database db )  {   string s = ""  ( ""  +   attachment columns .    id  +  "" integer primary key autoincrement  "" +   attachment columns . filename +  "" text  "" +   attachment columns . mime   type +  "" text  "" +   attachment columns . size +  "" integer  "" +   attachment columns . content   id +  "" text  "" +   attachment columns . content   uri +  "" text  "" +   attachment columns . message   key +  "" integer  "" +   attachment columns . location +  "" text  "" +   attachment columns . encoding +  "" text  "" +   attachment columns . content +  "" text  "" +   attachment columns . flags +  "" integer  "" +   attachment columns . content   bytes +  "" blob  "" +   attachment columns . account   key +  "" integer  "" +   attachment columns . ui   state +  "" integer  "" +   attachment columns . ui   destination +  "" integer  "" +   attachment columns . ui   downloaded   size +  "" integer  "" +   attachment columns . cached   file +  "" text"" +  "" )  ; "" ;  db . execsql ( ""create table ""  +   attachment . table   name  +  s )  ;  db . execsql ( create index (  attachment . table   name  attachment columns . message   key )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\DBHelper.java,create body table,"@ suppress warnings ( ""deprecation"" )  static void   ( sq lite database db )  {   string s = ""  ( ""  +   body columns .    id  +  "" integer primary key autoincrement  "" +   body columns . message   key +  "" integer  "" +   body columns . html   content +  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\DBHelper.java,create credentials table,"static void   ( sq lite database db )  {   string s = ""  ( ""  +   credential .    id  +  "" integer primary key autoincrement  "" +   credential . provider   column +  "" text "" +   credential . access   token   column +  "" text "" +   credential . refresh   token   column +  "" text "" +   credential . expiration   column +  "" integer"" +  "" )  ; "" ;  db . execsql ( ""create table ""  +   credential . table   name  +  s )  ;  db . execsql ( trigger   host   auth   delete )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\DBHelper.java,create delete duplicate messages trigger,"static void   ( final  context context final sq lite database db )  {  db . execsql ( ""create trigger message   delete   duplicates   on   insert before insert on ""  +   message . table   name  +  "" for each row when new . "" +   sync columns . server   id +  "" is not null and "" +  "" ( select "" +   mailbox columns . type +  "" from "" +   mailbox . table   name +  "" where "" +   mailbox columns .    id +  "" = new . "" +   message columns . mailbox   key +  "" )  !  = "" +   mailbox . type   search +  "" and  ( select "" +   host auth . table   name +  "" . "" +   host auth columns . protocol +  "" from "" +   host auth . table   name +  "" "" +   account . table   name +  "" where new . "" +   message columns . account   key +  "" = "" +   account . table   name +  "" . "" +   account columns .    id +  "" and "" +   account . table   name +  "" . "" +   account columns . host   auth   key   recv +  "" = "" +   host auth . table   name +  "" . "" +   host auth columns .    id +  "" )  = '"" +  context . get string ( r . string . protocol   eas )  +  ""'"" +  "" begin delete from "" +   message . table   name +  "" where new . "" +   sync columns . server   id +  "" = "" +   sync columns . server   id +  "" and new . "" +   message columns . account   key +  "" = "" +   message columns . account   key +  "" and  ( select "" +   mailbox . table   name +  "" . "" +   mailbox columns . type +  "" from "" +   mailbox . table   name +  "" where "" +   mailbox columns .    id +  "" = "" +   message columns . mailbox   key +  "" )  !  = "" +   mailbox . type   search +  "" ;  end"" )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\DBHelper.java,create host auth table,"static void   ( sq lite database db )  {   string s = ""  ( ""  +   host auth columns .    id  +  "" integer primary key autoincrement  "" +   host auth columns . protocol +  "" text  "" +   host auth columns . address +  "" text  "" +   host auth columns . port +  "" integer  "" +   host auth columns . flags +  "" integer  "" +   host auth columns . login +  "" text  "" +   host auth columns . password +  "" text  "" +   host auth columns . domain +  "" text  "" +   host auth columns . account   key +  "" integer "" +   host auth columns . client   cert   alias +  "" text "" +   host auth columns . server   cert +  "" blob "" +   host auth columns . credential   key +  "" integer"" +  "" )  ; "" ;  db . execsql ( ""create table ""  +   host auth . table   name  +  s )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\DBHelper.java,create index,"static  string   (  string table name  string column name )  {  return ""create index ""  +  table name . to lower case (  )   +  '   ' +  column name +  "" on "" +  table name +  ""  ( "" +  column name +  "" )  ; "" ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\DBHelper.java,create mailbox table,"@ suppress warnings ( ""deprecation"" )  static void   ( sq lite database db )  {   string s = ""  ( ""  +   mailbox columns .    id  +  "" integer primary key autoincrement  "" +   mailbox columns . display   name +  "" text  "" +   mailbox columns . server   id"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\DBHelper.java,create message change log table indices,private static void   ( final sq lite database db final  string table name )  {  db . execsql ( create index ( table name  message change log table . message   key )  )  ;  db . execsql ( create index ( table name  message change log table . account   key )  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\DBHelper.java,create message change log table triggers,"private static void   ( final sq lite database db final  string table name )  {  db . execsql ( ""create trigger ""  +  table name  +  ""   delete   message before delete on "" +   message . table   name +  "" for each row begin delete from "" +  table name +  "" where "" +   message change log table . message   key +  "" = old . "" +   message columns .    id +  "" ;  end"" )  ;  db . execsql ( ""create trigger ""  +  table name  +  ""   delete   account before delete on "" +   account . table   name +  "" for each row begin delete from "" +  table name +  "" where "" +   message change log table . account   key +  "" = old . "" +   account columns .    id +  "" ;  end"" )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\DBHelper.java,create message count triggers,"static void   ( final sq lite database db )  {  db . execsql ( ""create trigger message   count   message   insert after insert on ""  +   message . table   name  +  "" begin update "" +   mailbox . table   name +  "" set "" +   mailbox columns . message   count +  ' = ' +   mailbox columns . message   count +  "" + 1"" +  "" where "" +   base columns .    id +  "" = new . "" +   message columns . mailbox   key +  "" ;  end"" )  ;  db . execsql ( ""create trigger message   count   message   delete after delete on ""  +   message . table   name  +  "" begin update "" +   mailbox . table   name +  "" set "" +   mailbox columns . message   count +  ' = ' +   mailbox columns . message   count +  "" - 1"" +  "" where "" +   base columns .    id +  "" = old . "" +   message columns . mailbox   key +  "" ;  end"" )  ;  db . execsql ( ""create trigger message   count   message   move after update of ""  +   message columns . mailbox   key  +  "" on "" +   message . table   name +  "" begin update "" +   mailbox . table   name +  "" set "" +   mailbox columns . message   count +  ' = ' +   mailbox columns . message   count +  "" - 1"" +  "" where "" +   base columns .    id +  "" = old . "" +   message columns . mailbox   key +  "" ;  update "" +   mailbox . table   name +  "" set "" +   mailbox columns . message   count +  ' = ' +   mailbox columns . message   count +  "" + 1"" +  "" where "" +   base columns .    id +  "" = new . "" +   message columns . mailbox   key +  "" ;  end"" )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\DBHelper.java,create message move table,"private static void   ( final sq lite database db )  {  db . execsql ( ""create table ""  +   message move . table   name  +  ""  ( "" +  message   change   log   columns +   message move . src   folder   key +  "" integer  "" +   message move . dst   folder   key +  "" integer  "" +   message move . src   folder   server   id +  "" text  "" +   message move . dst   folder   server   id +  "" text )  ; "" )  ;  create message change log table indices ( db  message move . table   name )  ;  create message change log table triggers ( db  message move . table   name )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\DBHelper.java,create message state change table,"private static void   ( final sq lite database db )  {  db . execsql ( ""create table ""  +   message state change . table   name  +  ""  ( "" +  message   change   log   columns +   message state change . old   flag   read +  "" integer  "" +   message state change . new   flag   read +  "" integer  "" +   message state change . old   flag   favorite +  "" integer  "" +   message state change . new   flag   favorite +  "" integer )  ; "" )  ;  create message change log table indices ( db  message state change . table   name )  ;  create message change log table triggers ( db  message state change . table   name )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\DBHelper.java,create message table,"static void   (  context context sq lite database db )  {   string message columns =  message columns . display   name  +  "" text  ""  +   message columns . timestamp +  "" integer  "" +   message columns . subject +  "" text  "" +   message columns . flag   read +  "" integer  "" +   message columns . flag   loaded +  "" integer  "" +   message columns . flag   favorite +  "" integer  "" +   message columns . flag   attachment +  "" integer  "" +   message columns . flags +  "" integer  "" +   message columns . draft   info +  "" integer  "" +   message columns . message   id +  "" text  "" +   message columns . mailbox   key +  "" integer  "" +   message columns . account   key +  "" integer  "" +   message columns . from   list +  "" text  "" +   message columns . to   list +  "" text  "" +   message columns . cc   list +  "" text  "" +   message columns . bcc   list +  "" text  "" +   message columns . reply   to   list +  "" text  "" +   message columns . meeting   info +  "" text  "" +   message columns . snippet +  "" text  "" +   message columns . protocol   search   info +  "" text  "" +   message columns . thread   topic +  "" text  "" +   message columns . sync   data +  "" text  "" +   message columns . flag   seen +  "" integer  "" +   message columns . main   mailbox   key +  "" integer"" +  "" )  ; "" ;   string create string = ""  ( ""  +   base columns .    id  +  "" integer primary key autoincrement  "" +   sync columns . server   id +  "" text  "" +   sync columns . server   timestamp +  "" integer  "" +  message columns ;   string alt create string = ""  ( ""  +   base columns .    id  +  "" integer unique  "" +   sync columns . server   id +  "" text  "" +   sync columns . server   timestamp +  "" integer  "" +  message columns ;  db . execsql ( ""create table ""  +   message . table   name  +  create string )  ;  db . execsql ( ""create table ""  +   message . updated   table   name  +  alt create string )  ;  db . execsql ( ""create table ""  +   message . deleted   table   name  +  alt create string )  ;   string index columns[] =  {  message columns . timestamp  message columns . flag   read  message columns . flag   loaded  message columns . mailbox   key  sync columns . server   id }  ;  for  (   string column name : index columns )   {  db . execsql ( create index (  message . table   name column name )  )  ;   }  db . execsql ( ""create trigger message   delete before delete on ""  +   message . table   name  +  "" begin delete from "" +   attachment . table   name +  "" where "" +   attachment columns . message   key +  "" = old . "" +   base columns .    id +  "" ;  end"" )  ;  db . execsql ( ""create trigger unread   message   insert before insert on ""  +   message . table   name  +  "" when new . "" +   message columns . flag   read +  "" = 0"" +  "" begin update "" +   mailbox . table   name +  "" set "" +   mailbox columns . unread   count +  ' = ' +   mailbox columns . unread   count +  "" + 1"" +  "" where "" +   base columns .    id +  "" = new . "" +   message columns . mailbox   key +  "" ;  end"" )  ;  db . execsql ( ""create trigger unread   message   delete before delete on ""  +   message . table   name  +  "" when old . "" +   message columns . flag   read +  "" = 0"" +  "" begin update "" +   mailbox . table   name +  "" set "" +   mailbox columns . unread   count +  ' = ' +   mailbox columns . unread   count +  "" - 1"" +  "" where "" +   base columns .    id +  "" = old . "" +   message columns . mailbox   key +  "" ;  end"" )  ;  db . execsql ( ""create trigger unread   message   move before update of ""  +   message columns . mailbox   key  +  "" on "" +   message . table   name +  "" when old . "" +   message columns . flag   read +  "" = 0"" +  "" begin update "" +   mailbox . table   name +  "" set "" +   mailbox columns . unread   count +  ' = ' +   mailbox columns . unread   count +  "" - 1"" +  "" where "" +   base columns .    id +  "" = old . "" +   message columns . mailbox   key +  "" ;  update "" +   mailbox . table   name +  "" set "" +   mailbox columns . unread   count +  ' = ' +   mailbox columns . unread   count +  "" + 1"" +  "" where "" +   base columns .    id +  "" = new . "" +   message columns . mailbox   key +  "" ;  end"" )  ;  db . execsql ( ""create trigger unread   message   read before update of ""  +   message columns . flag   read  +  "" on "" +   message . table   name +  "" when old . "" +   message columns . flag   read +  "" !  = new . "" +   message columns . flag   read +  "" begin update "" +   mailbox . table   name +  "" set "" +   mailbox columns . unread   count +  ' = ' +   mailbox columns . unread   count +  "" +  case old . "" +   message columns . flag   read +  "" when 0 then  - 1 else 1 end"" +  "" where "" +   base columns .    id +  "" = old . "" +   message columns . mailbox   key +  "" ;  end"" )  ;  create message count triggers ( db )  ;  create delete duplicate messages trigger ( context db )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\DBHelper.java,create policy table,"static void   ( sq lite database db )  {   string s = ""  ( ""  +   policy columns .    id  +  "" integer primary key autoincrement  "" +   policy columns . password   mode +  "" integer  "" +   policy columns . password   min   length +  "" integer  "" +   policy columns . password   expiration   days +  "" integer  "" +   policy columns . password   history +  "" integer  "" +   policy columns . password   complex   chars +  "" integer  "" +   policy columns . password   max   fails +  "" integer  "" +   policy columns . max   screen   lock   time +  "" integer  "" +   policy columns . require   remote   wipe +  "" integer  "" +   policy columns . require   encryption +  "" integer  "" +   policy columns . require   encryption   external +  "" integer  "" +   policy columns . require   manual   sync   when   roaming +  "" integer  "" +   policy columns . dont   allow   camera +  "" integer  "" +   policy columns . dont   allow   attachments +  "" integer  "" +   policy columns . dont   allow   html +  "" integer  "" +   policy columns . max   attachment   size +  "" integer  "" +   policy columns . max   text   truncation   size +  "" integer  "" +   policy columns . max   html   truncation   size +  "" integer  "" +   policy columns . max   email   lookback +  "" integer  "" +   policy columns . max   calendar   lookback +  "" integer  "" +   policy columns . password   recovery   enabled +  "" integer  "" +   policy columns . protocol   policies   enforced +  "" text  "" +   policy columns . protocol   policies   unsupported +  "" text"" +  "" )  ; "" ;  db . execsql ( ""create table ""  +   policy . table   name  +  s )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\DBHelper.java,create quick response table,"static void   ( sq lite database db )  {   string s = ""  ( ""  +   quick response columns .    id  +  "" integer primary key autoincrement  "" +   quick response columns . text +  "" text  "" +   quick response columns . account   key +  "" integer"" +  "" )  ; "" ;  db . execsql ( ""create table ""  +   quick response . table   name  +  s )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\DBHelper.java,drop delete duplicate messages trigger,"static void   ( final sq lite database db )  {  db . execsql ( ""drop trigger message   delete   duplicates   on   insert"" )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\DBHelper.java,is account present,private static boolean   (  account manager account manager  string name  string type )  {  final android . accounts .  account[] am accounts = account manager . get accounts by type ( type )  ;  if  ( am accounts  !  =  null )   {  for  (  android . accounts .  account account : am accounts )   {  if  (  text utils . equals ( account . name name )  &&  text utils . equals ( account . type type )  )   {  return true ;   }   }   }  return false ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\DBHelper.java,migrate legacy accounts,"private static void   ( sq lite database db  context account manager context )  {  final  map <  string  string >  legacy to new type map = new  immutable map .  builder <  string  string >  (  )  . put ( legacy   scheme   pop3 account manager context . get string ( r . string . account   manager   type   pop3 )  )  . put ( legacy   scheme   imap account manager context . get string ( r . string . account   manager   type   legacy   imap )  )  . put ( legacy   scheme   eas account manager context . get string ( r . string . account   manager   type   exchange )  )  . build (  )  ;  try  {  final  cursor account cursor = db . query (  account . table   name v21   account   projection null null null null null )  ;  try  {  final  string[] host auth args = new  string[1] ;  while  ( account cursor . move to next (  )  )   {  host auth args[0] = account cursor . get string ( v21   account   recv )  ;  final  cursor host auth cursor = db . query (  host auth . table   name v21   hostauth   projection  host auth columns .    id  +  "" =  ? "" host auth args null null null )  ;  try  {  if  ( host auth cursor . move to first (  )  )   {  final  string protocol = host auth cursor . get string ( v21   hostauth   protocol )  ;  if  ( legacy   scheme   imap . equals ( protocol )  || legacy   scheme   pop3 . equals ( protocol )  )   {  if  (  debug utils . debug )   {   log utils . d ( tag "" create  account manager account for ""  +  protocol  +  ""account: "" +  account cursor . get string ( v21   account   email )  )  ;   }  create account manager account ( account manager context account cursor . get string ( v21   account   email )  legacy to new type map . get ( protocol )  host auth cursor . get string ( v21   hostauth   password )  )  ;   }  else if  ( legacy   scheme   eas . equals ( protocol )  )   {  android . accounts .  account am account = new android . accounts .  account ( account cursor . get string ( v21   account   email )  legacy to new type map . get ( protocol )  )  ;   content resolver . set is syncable ( am account  email content . authority 1 )  ;   content resolver . set sync automatically ( am account  email content . authority true )  ;   }   }   }  finally  {  host auth cursor . close (  )  ;   }   }   }  finally  {  account cursor . close (  )  ;   }   }  catch  (  sql exception e )   {   log utils . w ( tag "" exception while migrating accounts ""  +  e )  ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\DBHelper.java,on create,"@ override public void   ( sq lite database db )  {   log utils . d ( tag "" creating  email provider database"" )  ;  create message table ( m context db )  ;  create attachment table ( db )  ;  create mailbox table ( db )  ;  create host auth table ( db )"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\DBHelper.java,on downgrade,"@ override public void   ( sq lite database db int old version int new version )  {  if  ( old version  =  =  101 && new version  =  =  100 )   {   log utils . d ( tag "" downgrade from v101 to v100"" )  ;   }  else  {  super . on downgrade ( db old version"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\DBHelper.java,on open,"@ override public void   ( sq lite database db )  {  try  {  db . execsql ( ""delete from ""  +   account . table   name  +  "" where "" +   account columns . display   name +  "" isnull ; "" )  ;  db . execsql ( ""delete from ""  +   host auth . table   name  + "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\DBHelper.java,on upgrade,"@ override @ suppress warnings ( ""deprecation"" )  public void   ( sq lite database db int old version int new version )  {  if  ( old version  <  5 )   {  android . accounts .  account[] accounts =  account manager . get ( m context )  . get accounts by t"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\DBHelper.java,recalculate message count,"@ visible for testing static void   ( sq lite database db )  {  db . execsql ( ""update ""  +   mailbox . table   name  +  "" set "" +   mailbox columns . message   count +  "" =   ( select count ( * )  from "" +   message . table   name +  "" where "" +   messag"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\DBHelper.java,reset account table,"static void   ( sq lite database db int old version int new version )  {  try  {  db . execsql ( ""drop table ""  +   account . table   name )  ;   }  catch  (  sql exception e )   {   }  create account table ( db )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\DBHelper.java,reset attachment table,"static void   ( sq lite database db int old version int new version )  {  try  {  db . execsql ( ""drop table ""  +   attachment . table   name )  ;   }  catch  (  sql exception e )   {   }  create attachment table ( db )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\DBHelper.java,reset host auth table,"static void   ( sq lite database db int old version int new version )  {  try  {  db . execsql ( ""drop table ""  +   host auth . table   name )  ;   }  catch  (  sql exception e )   {   }  create host auth table ( db )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\DBHelper.java,reset mailbox table,"static void   ( sq lite database db int old version int new version )  {  try  {  db . execsql ( ""drop table ""  +   mailbox . table   name )  ;   }  catch  (  sql exception e )   {   }  create mailbox table ( db )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\DBHelper.java,reset message table,"static void   (  context context sq lite database db int old version int new version )  {  try  {  db . execsql ( ""drop table ""  +   message . table   name )  ;  db . execsql ( ""drop table ""  +   message . updated   table   name )  ;  db . execsql ( ""drop table ""  +   message . deleted   table   name )  ;   }  catch  (  sql exception e )   {   }  create message table ( context db )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\DBHelper.java,upgrade body from version to version,"private static void   ( final  context context final sq lite database db )  {  try  {  final  string projection[] =  {  body columns . message   key }  ;  final  cursor cursor = db . query (  body . table   name projection null null null null null )  ;  if  ( cursor  =  =  null )   {  throw new  illegal state exception ( "" could not read body table for upgrade"" )  ;   }  final sq lite statement html sql = db . compile statement ( ""select ""  +   body columns . html   content  +  "" from "" +   body . table   name +  "" where "" +   body columns . message   key +  "" =  ? "" )  ;  final sq lite statement text sql = db . compile statement ( ""select ""  +   body columns . text   content  +  "" from "" +   body . table   name +  "" where "" +   body columns . message   key +  "" =  ? "" )  ;  while  ( cursor . move to next (  )  )   {  final long message id = cursor . get long ( 0 )  ;  html sql . bind long ( 1 message id )  ;  try  {  final  string html string = html sql . simple query for string (  )  ;  if  (  !  text utils . is empty ( html string )  )   {  final  file html file =  email provider . get body file ( context message id ""html"" )  ;  final  file writer w = new  file writer ( html file )  ;  try  {  w . write ( html string )  ;   }  finally  {  w . close (  )  ;   }   }   }  catch  (  final sq lite done exception e )   {   log utils . v (  log utils . tag e "" done with the html column"" )  ;   }  text sql . bind long ( 1 message id )  ;  try  {  final  string text string = text sql . simple query for string (  )  ;  if  (  !  text utils . is empty ( text string )  )   {  final  file text file =  email provider . get body file ( context message id ""txt"" )  ;  final  file writer w = new  file writer ( text file )  ;  try  {  w . write ( text string )  ;   }  finally  {  w . close (  )  ;   }   }   }  catch  (  final sq lite done exception e )   {   log utils . v (  log utils . tag e "" done with the text column"" )  ;   }   }  db . execsql ( ""update ""  +   body . table   name  +  "" set "" +   body columns . html   content +  "" = null "" +   body columns . text   content +  "" = null"" )  ;   }  catch  (  final sql exception e )   {   log utils . w ( tag e "" exception upgrading  email provider body . db from v100 to v101"" )  ;   }  catch  (  final io exception e )   {  throw new  runtime exception ( e )  ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\DBHelper.java,upgrade body from version to version,"@ suppress warnings ( ""deprecation"" )  private static void   ( final sq lite database db )  {  try  {  db . execsql ( ""alter table ""  +   body . table   name  +  "" add "" +   body columns . intro   text +  "" text"" )  ;   }  catch  (  final sql exception e "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\DBHelper.java,upgrade body from version to version,"private static void   ( final sq lite database db )  {  try  {  db . execsql ( ""alter table ""  +   body . table   name  +  "" add "" +   body columns . quoted   text   start   pos +  "" integer"" )  ;   }  catch  (  final sql exception e )   {   log utils . w ( tag e "" exception upgrading  email provider body . db from v6 to v8"" )  ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\DBHelper.java,upgrade body to version,"private static void   ( final sq lite database db )  {  try  {  db . execsql ( ""drop table ""  +   body . table   name )  ;  create body table ( db )  ;   }  catch  (  final sql exception e )   {   log utils . w ( tag e "" exception upgrading  email provider body . db from  < v5"" )  ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\DBHelper.java,upgrade from version to version,"private static void   ( sq lite database db )  {  try  {   cursor message cursor = db . query (  message . table   name  message . content   projection null null null null null )  ;   content values cv = new  content values (  )  ;   string[] where args = new  string[1] ;  try  {  while  ( message cursor . move to next (  )  )   {  for  ( int i = 0 ;  i  <  address   column   indices . length ;  i +  +  )   {   address[] addrs =  address . from header ( message cursor . get string ( address   column   indices[i] )  )  ;  cv . put ( address   column   names[i]  address . to string ( addrs )  )  ;   }  where args[0] = message cursor . get string (  message . content   id   column )  ;  db . update (  message . table   name cv where   id where args )  ;   }   }  finally  {  message cursor . close (  )  ;   }   }  catch  (  sql exception e )   {   log utils . w ( tag "" exception upgrading  email provider . db from 125 to 126 ""  +  e )  ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\DBHelper.java,upgrade from version to version,"private static void   ( final  context context final sq lite database db )  {  try  {  final long new flags =  account . flags   supports   global   search  +   account . flags   supports   search  +   account . flags   supports   smart   forward ;  db . execsql ( ""update ""  +   account . table   name  +  "" set "" +   account columns . flags +  "" = "" +   account columns . flags +  ""|"" +   long . to string ( new flags )  +  "" where "" +   account columns .    id +  "" in  ( select t1 . "" +   account columns .    id +  "" from "" +   account . table   name +  "" t1 inner join "" +   host auth . table   name +  "" t2 on t1 . "" +   account columns . host   auth   key   recv +  "" = t2 .    id where t2 . "" +   host auth columns . protocol +  "" = '"" +  context . get string ( r . string . protocol   eas )  +  ""' and cast ( t1 . "" +   account columns . protocol   version +  "" as real )  >  = 12 . 0 ) "" )  ;   }  catch  (  sql exception e )   {   log utils . w ( tag "" exception upgrading  email provider . db from 126 to 127 ""  +  e )  ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\DBHelper.java,upgrade from version to version,"@ visible for testing static void   ( sq lite database db )  {  try  {  db . execsql ( ""update ""  +   mailbox . table   name  +  "" set "" +   mailbox columns . server   id +  "" = "" +   mailbox columns . display   name +  "" where "" +   mailbox . table   nam"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\DBHelper.java,upgrade from version to version,@ visible for testing static void   ( sq lite database db  context account manager context )  {  migrate legacy accounts ( db account manager context )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\DBHelper.java,upgrade from version to version,"private static void   ( sq lite database db )  {  try  {  db . execsql ( ""alter table ""  +   mailbox . table   name  +  "" add column "" +   mailbox . last   touched   time +  "" integer default 0 ; "" )  ;   }  catch  (  sql exception e )   {   log utils . w ( tag "" exception upgrading  email provider . db from 22 to 23 ""  +  e )  ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\DBHelper.java,upgrade from version to version,"private static void   ( sq lite database db )  {  try  {  db . execsql ( ""alter table ""  +   host auth . table   name  +  "" add column "" +   host auth columns . client   cert   alias +  "" text ; "" )  ;   }  catch  (  sql exception e )   {   log utils . w ( tag "" exception upgrading  email provider . db from 23 to 24 ""  +  e )  ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\DBHelper.java,upgrade from version to version,"private static void   ( sq lite database db )  {  try  {  create quick response table ( db )  ;   }  catch  (  sql exception e )   {   log utils . w ( tag "" exception upgrading  email provider . db from 24 to 25 ""  +  e )  ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\DBHelper.java,upgrade from version to version,"private static void   ( sq lite database db )  {  try  {   cursor account cursor = db . query (  account . table   name v25   account   projection null null null null null )  ;   content values cv = new  content values (  )  ;  try  {   string[] host auth args = new  string[1] ;  while  ( account cursor . move to next (  )  )   {  host auth args[0] = account cursor . get string ( v25   account   recv )  ;   cursor host auth cursor = db . query (  host auth . table   name v25   hostauth   projection  host auth columns .    id  +  "" =  ? "" host auth args null null null )  ;  try  {  if  ( host auth cursor . move to first (  )  )   {   string protocol = host auth cursor . get string ( v25   hostauth   protocol )  ;  if  ( legacy   scheme   imap . equals ( protocol )  )   {   string id = account cursor . get string ( v25   account   id )  ;  int flags = account cursor . get int ( v25   account   flags )  ;  cv . put (  account columns . flags flags |  account . flags   supports   search )  ;  db . update (  account . table   name cv  account columns .    id  +  "" =  ? "" new  string[] { id }  )  ;   }   }   }  finally  {  host auth cursor . close (  )  ;   }   }   }  finally  {  account cursor . close (  )  ;   }   }  catch  (  sql exception e )   {   log utils . w ( tag "" exception upgrading  email provider . db from 25 to 26 ""  +  e )  ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\DBHelper.java,upgrade from version to version,"private static void   ( sq lite database db )  {  try  {   cursor message cursor = db . query (  message . table   name  message . content   projection null null null null null )  ;   content values cv = new  content values (  )  ;   string[] where args = new  string[1] ;  try  {  while  ( message cursor . move to next (  )  )   {  for  ( int i = 0 ;  i  <  address   column   indices . length ;  i +  +  )   {   address[] addrs =  address . from header ( message cursor . get string ( address   column   indices[i] )  )  ;  cv . put ( address   column   names[i]  address . to header ( addrs )  )  ;   }  where args[0] = message cursor . get string (  message . content   id   column )  ;  db . update (  message . table   name cv where   id where args )  ;   }   }  finally  {  message cursor . close (  )  ;   }   }  catch  (  sql exception e )   {   log utils . w ( tag "" exception upgrading  email provider . db from 29 to 30 ""  +  e )  ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\DBHelper.java,upgrade to email,"private static void   ( sq lite database db )  {  try  {  db . execsql ( ""update  mailbox set ""  +   mailbox . last   notified   message   key  +  "" = 0 where "" +   mailbox . last   notified   message   key +  "" is null"" )  ;  db . execsql ( ""update  mailbox set ""  +   mailbox . last   notified   message   count  +  "" = 0 where "" +   mailbox . last   notified   message   count +  "" is null"" )  ;   }  catch  (  sql exception e )   {   log utils . w ( tag "" exception upgrading  email provider . db from 31 to 32 / 100 ""  +  e )  ;   }  try  {  db . execsql ( ""update ""  +   attachment . table   name  +  "" set "" +   attachment columns . ui   state +  "" = "" +  ui provider .  attachment state . saved +  "" where "" +   attachment columns . content   uri +  "" is not null ; "" )  ;   }  catch  (  sql exception e )   {   log utils . w ( tag "" exception upgrading  email provider . db from 32 to 33 / 100 ""  +  e )  ;   }  try  {  db . execsql ( ""update ""  +   mailbox . table   name  +  "" set "" +   mailbox columns . last   touched   time +  ""  =  "" +   mailbox . drafts   default   touch   time +  "" where "" +   mailbox columns . type +  ""  =  "" +   mailbox . type   drafts )  ;  db . execsql ( ""update ""  +   mailbox . table   name  +  "" set "" +   mailbox columns . last   touched   time +  ""  =  "" +   mailbox . sent   default   touch   time +  "" where "" +   mailbox columns . type +  ""  =  "" +   mailbox . type   sent )  ;   }  catch  (  sql exception e )   {   log utils . w ( tag "" exception upgrading  email provider . db from 34 to 35 / 100 ""  +  e )  ;   }  try  {  db . execsql ( ""update ""  +   mailbox . table   name  +  "" set "" +   mailbox columns . flags +  "" = "" +   mailbox columns . flags +  ""|"" +   mailbox . flag   supports   settings +  "" where  ( "" +   mailbox columns . flags +  ""&"" +   mailbox . flag   holds   mail +  "" )  !  = 0 and "" +   mailbox columns . account   key +  "" in  ( select "" +   account . table   name +  "" . "" +   account columns .    id +  "" from "" +   account . table   name +  "" "" +   host auth . table   name +  "" where "" +   account . table   name +  "" . "" +   account columns . host   auth   key   recv +  "" = "" +   host auth . table   name +  "" . "" +   host auth columns .    id +  "" and "" +   host auth columns . protocol +  "" = '"" +  legacy   scheme   eas +  ""' ) "" )  ;   }  catch  (  sql exception e )   {   log utils . w ( tag "" exception upgrading  email provider . db from 35 / 36 to 37 / 100 ""  +  e )  ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailConversationCursor.java, email conversation cursor,"public   ( final  context context final  cursor cursor final  folder folder final long mailbox id )  {  super ( cursor )  ;  m mailbox id = mailbox id ;  m context = context ;  m folder list =  folder list . copy of (  lists . new array list ( folder )  )  ;   mailbox mailbox =  mailbox . restore mailbox with id ( context mailbox id )  ;  if  ( mailbox  !  =  null )   {  m mailbox type id = mailbox . m type ;  m extras . put int ( ui provider .  cursor extra keys . extra   total   count mailbox . m total count )  ;  if  ( mailbox . m ui sync status  =  =   email content . sync   status   background || mailbox . m ui sync status  =  =   email content . sync   status   user || mailbox . m ui sync status  =  =   email content . sync   status   live || mailbox . m ui sync status  =  =   email content . sync   status   initial   sync   needed )   {  m extras . put int ( ui provider .  cursor extra keys . extra   status ui provider .  cursor status . loading )  ;   }  else if  ( mailbox . m ui sync status  =  =   email content . sync   status   none )   {  if  ( mailbox . m sync interval  =  =  0 &&  (  mailbox . is syncable type ( mailbox . m type )  || mailbox . m type  =  =   mailbox . type   search )  &&  !  text utils . is empty ( mailbox . m server id )  &&  system . current time millis (  )   -  mailbox . m sync time  >  auto   refresh   interval   ms )   {  m extras . put int ( ui provider .  cursor extra keys . extra   status ui provider .  cursor status . loading )  ;   }  else  {  m extras . put int ( ui provider .  cursor extra keys . extra   status ui provider .  cursor status . complete )  ;   }   }  else  {   log utils . d (  logging . log   tag "" unknown mailbox sync status""  +  mailbox . m ui sync status )  ;  m extras . put int ( ui provider .  cursor extra keys . extra   status ui provider .  cursor status . complete )  ;   }   }  else  {  m mailbox type id =  - 1 ;  m extras . put int ( ui provider .  cursor extra keys . extra   total   count cursor  !  =  null  ?  cursor . get count (  )  : 0 )  ;  m extras . put int ( ui provider .  cursor extra keys . extra   status ui provider .  cursor status . complete )  ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailConversationCursor.java,empty folder,"@ override public void   (  )  {  final  content resolver resolver = m context . get content resolver (  )  ;  final  uri purge uri =  email provider . ui uri ( ""uipurgefolder"" m mailbox id )  ;  resolver . delete ( purge uri null null )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailConversationCursor.java,generate conversation info,"private  conversation info   (  )  {  final int num messages = get int ( get column index (  conversation columns . num   messages )  )  ;  final  conversation info conversation info = new  conversation info ( num messages )  ;  conversation info . first snippet = get string ( get column index (  conversation columns . snippet )  )  ;  conversation info . last snippet = conversation info . first snippet ;  conversation info . first unread snippet = conversation info . first snippet ;  final boolean is read = get int ( get column index (  conversation columns . read )  )   !  =  0 ;  final  string sender string = get string ( get column index (  email content .  message columns . display   name )  )  ;  final  string from string = get string ( get column index (  email content .  message columns . from   list )  )  ;  final  string sender email ;  if  ( from string  !  =  null )   {  final  rfc822 token[] tokens =  rfc822 tokenizer . tokenize ( from string )  ;  if  ( tokens . length  >  0 )   {  sender email = tokens[0] . get address (  )  ;   }  else  {   log utils . d (  log utils . tag "" couldn't parse sender email address"" )  ;  sender email = from string ;   }   }  else  {  sender email = null ;   }  if  ( m mailbox type id  =  =   mailbox . type   drafts )   {  conversation info . draft count = 1 ;   }  else if  ( m mailbox type id  =  =   mailbox . type   sent || m mailbox type id  =  =   mailbox . type   outbox )   {  final  string recipients string = get string ( get column index (  email content .  message columns . to   list )  )  ;  final  address[] recipient addresses =  address . parse ( recipients string )  ;  for  (   address recipient address : recipient addresses )   {  final  string name = recipient address . get simplified name (  )  ;  final  string email = recipient address . get address (  )  ;  conversation info . add participant ( new  participant info ( name email 0 is read )  )  ;   }   }  else  {  conversation info . add participant ( new  participant info ( sender string sender email 0 is read )  )  ;   }  return conversation info ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailConversationCursor.java,get extras,@ override public  bundle   (  )  {  return m extras ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailConversationCursor.java,mark contents seen,@ override public void   (  )  {  final  content resolver resolver = m context . get content resolver (  )  ;  final  content values content values = new  content values ( 1 )  ;  content values . put (  email content .  message columns . flag   seen true
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailConversationCursor.java,respond,@ override public  bundle   (  bundle params )  {  final  string set visibility key = ui provider .  conversation cursor command . command   key   set   visibility ;  if  ( params . contains key ( set visibility key )  )   {  final boolean visible = param
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\FolderPickerActivity.java, account observer,public   (  context context  handler handler )  {  super ( handler )  ;  m context = context ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\FolderPickerActivity.java,cancel,@ override public void   (  )  {  finish (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\FolderPickerActivity.java,on change,@ override public void   ( boolean self change )  {   account account =  account . restore account with id ( m context m account id )  ;  if  (  ( account . m flags &  account . flags   initial   folder   list   loaded )   !  =  0 &&  ( m account observer
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\FolderPickerActivity.java,on create,@ override public void   (  bundle bundle )  {  super . on create ( bundle )  ;   intent i = get intent (  )  ;   uri uri = i . get data (  )  ;  int header id ;  final com . android . mail . providers .  account ui account ;  if  ( uri  !  =  null )   { 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\FolderPickerActivity.java,on destroy,@ override public void   (  )  {  super . on destroy (  )  ;  if  ( m account observer  !  =  null )   {  get content resolver (  )  . unregister content observer ( m account observer )  ;  m account observer = null ;   }  if  ( m waiting for folders dial
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\FolderPickerActivity.java,select,@ override public void   (  folder folder )  {   string folder id = folder . folder uri . full uri . get last path segment (  )  ;   long id =  long . parse long ( folder id )  ;   content values values = new  content values (  )  ;   mailbox of type =  m
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\FolderPickerActivity.java,start picker,private void   (  uri uri int header id )  {   string header = get string ( header id m account name )  ;   folder picker dialog dialog = new  folder picker dialog ( this uri this header  ! m in setup )  ;  dialog . show (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\FolderPickerActivity.java,start picker for account,"private void   (  )  {  int header id = r . string . trash   folder   selection   title ;   uri uri =  uri . parse ( ""content: /  / ""  +   email content . authority  +  "" / uifullfolders / "" +  m account id )  ;  start picker ( uri header id )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\FolderPickerActivity.java,wait for folders,private void   (  )  {  m waiting for folders dialog = new  progress dialog ( this )  ;  m waiting for folders dialog . set indeterminate ( true )  ;  m waiting for folders dialog . set message ( get string ( r . string . account   waiting   for   folders   msg )  )  ;  m waiting for folders dialog . show (  )  ;  m account observer = new  account observer ( this new  handler (  )  )  ;   uri uri =  content uris . with appended id (  account . content   uri m account id )  ;  get content resolver (  )  . register content observer ( uri false m account observer )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\FolderPickerDialog.java, folder picker dialog,public   ( final  context context  uri uri  folder picker callback callback  string header boolean cancelable )  {  m callback = callback ;  m checked state = new  hash map <  folder  boolean >  (  )  ;   alert dialog .  builder builder = new  alert dialog .  builder ( context )  ;  builder . set title ( header )  ;  builder . set positive button ( r . string . ok this )  ;  builder . set cancelable ( cancelable )  ;  builder . set on cancel listener ( this )  ;  final  cursor folders cursor = context . get content resolver (  )  . query ( uri ui provider . folders   projection null null null )  ;  try  {  m adapter = new  separated folder list adapter (  )  ;  m adapter . add section ( new  folder picker selector adapter ( context folders cursor new  hash set <  string >  (  )  r . layout . multi   folders   view )  )  ;  builder . set adapter ( m adapter this )  ;   }  finally  {  folders cursor . close (  )  ;   }  m dialog = builder . create (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\FolderPickerDialog.java,on cancel,@ override public void   (  dialog interface dialog )  {  m callback . cancel (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\FolderPickerDialog.java,on click,@ override public void   (  dialog interface dialog int which boolean is checked )  {  final  folder row row =  (  folder row ) m adapter . get item ( which )  ;  m checked state . clear (  )  ;  is checked = true ;  m checked state . put ( row . get fold
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\FolderPickerDialog.java,on item click,@ override public void   (  adapter view <  ?  >  parent  view view int position long id )  {  final  object item = m adapter . get item ( position )  ;  if  ( item instanceof  folder row )   {  update (  (  folder row ) item )  ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\FolderPickerDialog.java,show,public void   (  )  {  m dialog . show (  )  ;  m dialog . get list view (  )  . set on item click listener ( new  adapter view .  on item click listener (  )  {  @ override public void on item click (   adapter view <  ?  >  parent   view view  int position  long id )  {  final  object item = m adapter . get item ( position )  ;  if  ( item instanceof  folder row )   {  update (  (  folder row ) item )  ;   }   }   }   )  ;  final  button button = m dialog . get button (  alert dialog . button   positive )  ;  if  ( m checked state . size (  )   =  =  0 )   {  button . set enabled ( false )  ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\FolderPickerDialog.java,update,public void   (  folder selector adapter .  folder row row )  {  final boolean add =  ! row . is selected (  )  ;  if  (  ! add )   {  return ;   }  m adapter . get count (  )  ;  for  ( int i = 0 ;  i  <  m adapter . get count (  )  ;  i +  +  )   {   object item = m adapter . get item ( i )  ;  if  ( item instanceof  folder row )   {   (  (  folder row ) item )  . set is selected ( false )  ;   }   }  m checked state . clear (  )  ;  row . set is selected ( add )  ;  m adapter . notify data set changed (  )  ;  m checked state . put ( row . get folder (  )  add )  ;  final  button button = m dialog . get button (  alert dialog . button   positive )  ;  button . set enabled ( true )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\RefreshStatusMonitor.java, refresh status monitor,private   (  context context )  {  m context = context ;  m handler = new  handler ( m context . get main looper (  )  )  ;   storage low state . register handler ( new  storage low state .  low storage handler (  )  {  @ override public void on storage low (  )  {  m is storage low = true ;   }  @ override public void on storage ok (  )  {  m is storage low = false ;   }   }   )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\RefreshStatusMonitor.java, remove refresh status runnable,  ( long mailbox id  callback callback )  {  m mailbox id = mailbox id ;  m callback = callback ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\RefreshStatusMonitor.java,get instance,public static  refresh status monitor   (  context context )  {  synchronized  (  refresh status monitor . class )   {  if  ( s instance  =  =  null )   {  s instance = new  refresh status monitor ( context . get application context (  )  )  ;   }   }  return s instance ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\RefreshStatusMonitor.java,is connected,private boolean   (  )  {  final  connectivity manager connectivity manager =  (  (  connectivity manager ) m context . get system service (  context . connectivity   service )  )  ;  final  network info network info = connectivity manager . get active network info (  )  ;  return  ( network info  !  =  null )  && network info . is connected (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\RefreshStatusMonitor.java,monitor refresh status,public void   ( long mailbox id  callback callback )  {  synchronized  ( m mailbox sync )   {  if  (  ! m mailbox sync . contains key ( mailbox id )  )  m mailbox sync . put ( mailbox id false )  ;  m handler . post delayed ( new  remove refresh status runnable ( mailbox id callback )  remove   refresh   status   delay   ms )  ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\WidgetProvider.java,get account,"private static com . android . mail . providers .  account   (  context context long account id )  {  final  content resolver resolver = context . get content resolver (  )  ;  final  cursor ac = resolver . query (  email provider . ui uri ( ""uiaccount"" account id )  ui provider . accounts   projection   no   capabilities null null null )  ;  com . android . mail . providers .  account ui account = get populated account object ( ac )  ;  return ui account ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\WidgetProvider.java,get account object,@ override protected com . android . mail . providers .  account   (  context context  string account uri )  {  final  content resolver resolver = context . get content resolver (  )  ;  final  cursor account cursor = resolver . query (  uri . parse ( acc
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\WidgetProvider.java,get populated account object,"private static com . android . mail . providers .  account   ( final  cursor account cursor )  {  if  ( account cursor  =  =  null )   {   log utils . e ( log   tag "" null account cursor"" )  ;  return null ;   }  com . android . mail . providers .  account ui account = null ;  try  {  if  ( account cursor . move to first (  )  )   {  ui account = com . android . mail . providers .  account . builder (  )  . build from ( account cursor )  ;   }   }  finally  {  account cursor . close (  )  ;   }  return ui account ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\WidgetProvider.java,is account valid,@ override protected boolean   (  context context com . android . mail . providers .  account account )  {  if  ( account  !  =  null )   {  final  content resolver resolver = context . get content resolver (  )  ;  final  cursor account cursor = resolver
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\WidgetProvider.java,load account id pref,static long   (  context context int app widget id )  {  final  shared preferences prefs = context . get shared preferences ( legacy   prefs   name 0 )  ;  long account id = prefs . get long ( legacy   account   id   prefix  +  app widget id  account . no   account )  ;  return account id ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\WidgetProvider.java,load mailbox id pref,static long   (  context context int app widget id )  {  final  shared preferences prefs = context . get shared preferences ( legacy   prefs   name 0 )  ;  long mailbox id = prefs . get long ( legacy   mailbox   id   prefix  +  app widget id  mailbox . no   mailbox )  ;  return mailbox id ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\WidgetProvider.java,migrate legacy widget account id,private static long   ( long account id )  {  if  ( account id  =  =   account . account   id   combined   view )   {  return  email provider . combined   account   id ;   }  return account id ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\WidgetProvider.java,migrate legacy widget information,@ override protected void   (  context context int widget id )  {  final  shared preferences prefs = context . get shared preferences ( legacy   prefs   name 0 )  ;  final  shared preferences .  editor editor = prefs . edit (  )  ;  long account id = load
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\WidgetProvider.java,migrate legacy widget mailbox id,private static long   ( long mailbox id long account id )  {  if  ( mailbox id  =  =   mailbox . query   all   inboxes )   {  return  email provider . get virtual mailbox id ( account id  mailbox . type   inbox )  ;   }  else if  ( mailbox id  =  =   mailbox . query   all   unread )   {  return  email provider . get virtual mailbox id ( account id  mailbox . type   unread )  ;   }  return mailbox id ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\WidgetProvider.java,on deleted,@ override public void   (  context context int[] app widget ids )  {  super . on deleted ( context app widget ids )  ;  final  shared preferences prefs = context . get shared preferences ( legacy   prefs   name 0 )  ;  final  shared preferences .  editor
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\Utilities.java,copy one message to provider,"public static void   (  context context  message message  email content .  message local message int load status )  {  try  {   email content .  body body = null ;  if  ( local message . m id  !  =   email content .  message . no   message )   {  body =  email content .  body . restore body with message id ( context local message . m id )  ;   }  if  ( body  =  =  null )   {  body = new  email content .  body (  )  ;   }  try  {   legacy conversions . update message fields ( local message message local message . m account key local message . m mailbox key )  ;   array list <  part >  viewables = new  array list <  part >  (  )  ;   array list <  part >  attachments = new  array list <  part >  (  )  ;   mime utility . collect parts ( message viewables attachments )  ;  final  conversion utilities .  body field data data =  conversion utilities . parse body fields ( viewables )  ;  local message . set flags ( data . is quoted reply data . is quoted forward )  ;  local message . m snippet = data . snippet ;  body . m text content = data . text content ;  body . m html content = data . html content ;  save or update ( local message context )  ;  body . m message key = local message . m id ;  save or update ( body context )  ;  if  ( load status  !  =   email content .  message . flag   loaded   partial && load status  !  =   email content .  message . flag   loaded   unknown )   {   legacy conversions . update attachments ( context local message attachments )  ;   legacy conversions . update inline attachments ( context local message viewables )  ;   }  else  {   email content .  attachment att = new  email content .  attachment (  )  ;  att . m file name = """" ;  att . m size = message . get size (  )  ;  att . m mime type = ""text / plain"" ;  att . m message key = local message . m id ;  att . m account key = local message . m account key ;  att . m flags =  attachment . flag   dummy   attachment ;  att . save ( context )  ;  local message . m flag attachment = true ;   }  local message . m flag loaded = load status ;   content values cv = new  content values (  )  ;  cv . put (  email content .  message columns . flag   attachment local message . m flag attachment )  ;  cv . put (  email content .  message columns . flag   loaded local message . m flag loaded )  ;   uri uri =  content uris . with appended id (  email content .  message . content   uri local message . m id )  ;  context . get content resolver (  )  . update ( uri cv null null )  ;   }  catch  (   messaging exception me )   {   log utils . e (  logging . log   tag "" error while copying downloaded message . ""  +  me )  ;   }   }  catch  (   runtime exception rte )   {   log utils . e (  logging . log   tag "" error while storing downloaded message . ""  +  rte . to string (  )  )  ;   }  catch  (  io exception ioe )   {   log utils . e (  logging . log   tag "" error while storing attachment . ""  +  ioe . to string (  )  )  ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\Utilities.java,parse mode,"@ target api ( 19 )  public static int   (  string mode )  {  if  (  utils . is running kitkat or later (  )  )   {  return  parcel file descriptor . parse mode ( mode )  ;   }  final int mode bits ;  if  ( ""r"" . equals ( mode )  )   {  mode bits =  parce"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\Utilities.java,save or update,public static void   (  email content content  context context )  {  if  ( content . is saved (  )  )   {  content . update ( context content . to content values (  )  )  ;   }  else  {  content . save ( context )  ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\FolderPickerSelectorAdapter.java, folder picker selector adapter,public   (  context context  cursor folders  set <  string >  initially selected int layout )  {  super ( context folders initially selected layout )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\FolderPickerSelectorAdapter.java,meets requirements,@ override protected boolean   (  folder folder )  {  return folder . supports capability (  folder capabilities . can   accept   moved   messages )  || folder . is trash (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\SecurityPolicy.java, security policy,private   (  context context )  {  m context = context . get application context (  )  ;  mdpm = null ;  m admin name = new  component name ( context  policy admin . class )  ;  m aggregate policy = null ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\SecurityPolicy.java,clear account policy,public static void   (  context context  account account )  {  set account policy ( context account null null )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\SecurityPolicy.java,clear notification,public void   (  )  {  final  notification controller nc =  notification controller creator holder . get instance ( m context )  ;  nc . cancel security needed notification (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\SecurityPolicy.java,compute aggregate policy,@ visible for testing  policy   (  )  {  boolean policies found = false ;   policy aggregate = new  policy (  )  ;  aggregate . m password min length =  integer . min   value ;  aggregate . m password mode =  integer . min   value ;  aggregate . m passwor
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\SecurityPolicy.java,delete secured accounts,"void   (  context context )  {   content resolver cr = context . get content resolver (  )  ;   cursor c = cr . query (  account . content   uri  email content . id   projection  account . security   nonzero   selection null null )  ;  try  {   log utils . w ( tag "" email administration disabled ;  deleting ""  +  c . get count (  )   +  "" secured account ( s ) "" )  ;  while  ( c . move to next (  )  )   {  long account id = c . get long (  email content . id   projection   column )  ;   uri uri =  email provider . ui uri ( ""uiaccount"" account id )  ;  cr . delete ( uri null null )  ;   }   }  finally  {  c . close (  )  ;   }  policies updated (  )  ;   account reconciler . reconcile accounts ( context )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\SecurityPolicy.java,find shortest expiration,"@ visible for testing static long   (  context context )  {  long policy id =  utility . get first row long ( context  policy . content   uri  policy . id   projection has   password   expiration null  policy columns . password   expiration   days  +  "" a"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\SecurityPolicy.java,get admin component,public  component name   (  )  {  return m admin name ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\SecurityPolicy.java,get aggregate policy,public synchronized  policy   (  )  {  if  ( m aggregate policy  =  =  null )   {  m aggregate policy = compute aggregate policy (  )  ;   }  return m aggregate policy ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\SecurityPolicy.java,getdpm,synchronized  device policy manager   (  )  {  if  ( mdpm  =  =  null )   {  mdpm =  (  device policy manager ) m context . get system service (  context . device   policy   service )  ;   }  return mdpm ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\SecurityPolicy.java,get inactive reasons,public int   (  policy policy )  {  if  ( policy  =  =  null )   {  policy = get aggregate policy (  )  ;   }  if  ( policy  =  =   policy . no   policy )   {  return 0 ;   }  int reasons = 0 ;   device policy manager dpm = getdpm (  )  ;  if  ( is active admin (  )  )   {  if  ( policy . m password min length  >  0 )   {  if  ( dpm . get password minimum length ( m admin name )   <  policy . m password min length )   {  reasons| = inactive   need   password ;   }   }  if  ( policy . m password mode  >  0 )   {  if  ( dpm . get password quality ( m admin name )   <  policy . getdp manager password quality (  )  )   {  reasons| = inactive   need   password ;   }  if  (  ! dpm . is active password sufficient (  )  )   {  reasons| = inactive   need   password ;   }   }  if  ( policy . m max screen lock time  >  0 )   {  if  ( dpm . get maximum time to lock ( m admin name )   >  policy . m max screen lock time * 1000 )   {  reasons| = inactive   need   configuration ;   }   }  if  ( policy . m password expiration days  >  0 )   {  long current timeout = dpm . get password expiration timeout ( m admin name )  ;  if  ( current timeout  =  =  0 || current timeout  >  policy . getdp manager password expiration timeout (  )  )   {  reasons| = inactive   need   password ;   }  long expiration date = dpm . get password expiration ( m admin name )  ;  long time until expiration = expiration date  -   system . current time millis (  )  ;  boolean expired = time until expiration  <  0 ;  if  ( expired )   {  reasons| = inactive   need   password ;   }   }  if  ( policy . m password history  >  0 )   {  if  ( dpm . get password history length ( m admin name )   <  policy . m password history )   {  reasons| = inactive   need   configuration ;   }   }  if  ( policy . m password complex chars  >  0 )   {  if  ( dpm . get password minimum non letter ( m admin name )   <  policy . m password complex chars )   {  reasons| = inactive   need   password ;   }   }  if  ( policy . m require encryption )   {  int encryption status = getdpm (  )  . get storage encryption status (  )  ;  if  ( encryption status  !  =   device policy manager . encryption   status   active )   {  reasons| = inactive   need   encryption ;   }   }  if  ( policy . m dont allow camera &&  ! dpm . get camera disabled ( m admin name )  )   {  reasons| = inactive   need   configuration ;   }  if  ( policy . m protocol policies unsupported  !  =  null )   {  reasons| = inactive   protocol   policies ;   }  return reasons ;   }  return inactive   need   activation ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\SecurityPolicy.java,get instance,public synchronized static  security policy   (  context context )  {  if  ( s instance  =  =  null )   {  s instance = new  security policy ( context . get application context (  )  )  ;   }  return s instance ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\SecurityPolicy.java,is active,"public boolean   (  policy policy )  {  int reasons = get inactive reasons ( policy )  ;  if  (  debug utils . debug &&  ( reasons  !  =  0 )  )   {   string builder sb = new  string builder ( ""is active for ""  +  policy  +  "": "" )  ;  sb . append ( ""false  -  >  "" )  ;  if  (  ( reasons & inactive   need   activation )   !  =  0 )   {  sb . append ( ""no   admin "" )  ;   }  if  (  ( reasons & inactive   need   configuration )   !  =  0 )   {  sb . append ( ""config "" )  ;   }  if  (  ( reasons & inactive   need   password )   !  =  0 )   {  sb . append ( ""password "" )  ;   }  if  (  ( reasons & inactive   need   encryption )   !  =  0 )   {  sb . append ( ""encryption "" )  ;   }  if  (  ( reasons & inactive   protocol   policies )   !  =  0 )   {  sb . append ( ""protocol "" )  ;   }   log utils . d ( tag sb . to string (  )  )  ;   }  return reasons  =  =  0 ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\SecurityPolicy.java,is active admin,public boolean   (  )  {   device policy manager dpm = getdpm (  )  ;  return dpm . is admin active ( m admin name )  && dpm . has granted policy ( m admin name  device admin info . uses   policy   expire   password )  && dpm . has granted policy ( m admin name  device admin info . uses   encrypted   storage ) && dpm . has granted policy ( m admin name  device admin info . uses   policy   disable   camera )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\SecurityPolicy.java,on admin enabled,void   ( boolean is enabled )  {  if  (  ! is enabled )   {  delete secured accounts ( m context )  ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\SecurityPolicy.java,on device admin receiver message,public static void   (  context context int message )  {   security policy instance =  security policy . get instance ( context )  ;  switch  ( message )   {  case device   admin   message   enabled: instance . on admin enabled ( true )  ;  break ;  case device   admin   message   disabled: instance . on admin enabled ( false )  ;  break ;  case device   admin   message   password   changed:  account . clear security hold on all accounts ( context )  ;  final  notification controller nc =  notification controller creator holder . get instance ( context )  ;  nc . cancel password expiration notifications (  )  ;  break ;  case device   admin   message   password   expiring: instance . on password expiring ( instance . m context )  ;  break ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\SecurityPolicy.java,on disable requested,@ override public  char sequence   (  context context  intent intent )  {  return context . get string ( r . string . disable   admin   warning )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\SecurityPolicy.java,on disabled,@ override public void   (  context context  intent intent )  {   email broadcast processor service . process device policy message ( context device   admin   message   disabled )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\SecurityPolicy.java,on enabled,@ override public void   (  context context  intent intent )  {   email broadcast processor service . process device policy message ( context device   admin   message   enabled )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\SecurityPolicy.java,on password changed,@ override public void   (  context context  intent intent )  {   email broadcast processor service . process device policy message ( context device   admin   message   password   changed )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\SecurityPolicy.java,on password expiring,@ override public void   (  context context  intent intent )  {   email broadcast processor service . process device policy message ( context device   admin   message   password   expiring )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\SecurityPolicy.java,policies required,"public void   ( long account id )  {   account account =  account . restore account with id ( m context account id )  ;  if  ( account  =  =  null )  return ;  if  ( account . m policy key  =  =  0 )  return ;   policy policy =  policy . restore policy with id ( m context account . m policy key )  ;  if  ( policy  =  =  null )  return ;  if  (  debug utils . debug )   {   log utils . d ( tag ""policies required for ""  +  account . m display name  +  "": "" +  policy )  ;   }  set account hold flag ( m context account true )  ;  final  notification controller nc =  notification controller creator holder . get instance ( m context )  ;  if  ( policy . m protocol policies unsupported  =  =  null )   {  nc . show security needed notification ( account )  ;   }  else  {  nc . show security unsupported notification ( account )  ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\SecurityPolicy.java,policies updated,public synchronized void   (  )  {  m aggregate policy = null ;  set active policies (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\SecurityPolicy.java,reduce policies,"public void   (  )  {  if  (  debug utils . debug )   {   log utils . d ( tag ""reduce policies"" )  ;   }  policies updated (  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\SecurityPolicy.java,remote wipe,"public void   (  )  {   device policy manager dpm = getdpm (  )  ;  if  ( dpm . is admin active ( m admin name )  )   {  dpm . wipe data (  device policy manager . wipe   external   storage )  ;   }  else  {   log utils . d (  logging . log   tag "" could not remote wipe because not device admin . "" )  ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\SecurityPolicy.java,set account hold flag,public static void   (  context context  account account boolean new state )  {  if  ( new state )   {  account . m flags| =  account . flags   security   hold ;   }  else  {  account . m flags& = ~ account . flags   security   hold ;   }   content values cv = new  content values (  )  ;  cv . put (  account columns . flags account . m flags )  ;  account . update ( context cv )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\SecurityPolicy.java,set account policy,"public void   ( long account id  policy policy  string security key boolean notify )  {   account account =  account . restore account with id ( m context account id )  ;  if  ( account  =  =  null )   {  return ;   }   policy old policy = null ;  if  ( account . m policy key  >  0 )   {  old policy =  policy . restore policy with id ( m context account . m policy key )  ;   }  if  ( old policy  !  =  null && security key  !  =  null )   {  if  (  ( old policy . m dont allow attachments  !  =  policy . m dont allow attachments )  ||  ( old policy . m max attachment size  !  =  policy . m max attachment size )  )   {   policy . set attachment flags for new policy ( m context account policy )  ;   }   }  boolean policy changed =  ( old policy  =  =  null )  ||  ! old policy . equals ( policy )  ;  if  (  ! policy changed &&  (  text utilities . string or null equals ( security key account . m security sync key )  )  )   {   log utils . d (  logging . log   tag ""set account policy ;  policy unchanged"" )  ;   }  else  {  set account policy ( m context account policy security key )  ;  policies updated (  )  ;   }  boolean set hold = false ;  final  notification controller nc =  notification controller creator holder . get instance ( m context )  ;  if  ( policy . m protocol policies unsupported  !  =  null )   {   log utils . d (  logging . log   tag "" notify policies for ""  +  account . m display name  +  "" not supported . "" )  ;  set hold = true ;  if  ( notify )   {  nc . show security unsupported notification ( account )  ;   }   uri uri =  email provider . ui uri ( ""uiaccountdata"" account id )  ;  m context . get content resolver (  )  . delete ( uri null null )  ;   }  else if  ( is active ( policy )  )   {  if  ( policy changed )   {   log utils . d (  logging . log   tag "" notify policies for ""  +  account . m display name  +  "" changed . "" )  ;  if  ( notify )   {  nc . show security changed notification ( account )  ;   }   }  else  {   log utils . d (  logging . log   tag "" policy is active and unchanged ;  do not notify . "" )  ;   }   }  else  {  set hold = true ;   log utils . d (  logging . log   tag "" notify policies for ""  +  account . m display name  +  "" are not being enforced . "" )  ;  if  ( notify )   {  nc . show security needed notification ( account )  ;   }   }  set account hold flag ( m context account set hold )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\SecurityPolicy.java,set active policies,"public void   (  )  {   device policy manager dpm = getdpm (  )  ;   policy aggregate policy = get aggregate policy (  )  ;  if  ( aggregate policy  =  =   policy . no   policy )   {  if  (  debug utils . debug )   {   log utils . d ( tag ""set active policies: none  remove admin"" )  ;   }  dpm . remove active admin ( m admin name )  ;   }  else if  ( is active admin (  )  )   {  if  (  debug utils . debug )   {   log utils . d ( tag ""set active policies: ""  +  aggregate policy )  ;   }  dpm . set password quality ( m admin name aggregate policy . getdp manager password quality (  )  )  ;  dpm . set password minimum length ( m admin name aggregate policy . m password min length )  ;  dpm . set maximum time to lock ( m admin name aggregate policy . m max screen lock time * 1000 )  ;  dpm . set maximum failed passwords for wipe ( m admin name aggregate policy . m password max fails )  ;  dpm . set password expiration timeout ( m admin name aggregate policy . getdp manager password expiration timeout (  )  )  ;  dpm . set password history length ( m admin name aggregate policy . m password history )  ;  dpm . set password minimum symbols ( m admin name 0 )  ;  dpm . set password minimum numeric ( m admin name 0 )  ;  dpm . set password minimum non letter ( m admin name aggregate policy . m password complex chars )  ;  try  {  dpm . set camera disabled ( m admin name aggregate policy . m dont allow camera )  ;   }  catch  (   security exception e )   {   log utils . d ( tag "" security exception in set camera disabled  nothing changed"" )  ;   }  dpm . set storage encryption ( m admin name aggregate policy . m require encryption )  ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\SecurityPolicy.java,set context,void   (  context context )  {  m context = context ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\SecurityPolicy.java,sync account,public void   ( final  account account )  {  sync account ( m context account )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\SecurityPolicy.java,wipe expired accounts,@ visible for testing static boolean   (  context context )  {  boolean result = false ;   cursor c = context . get content resolver (  )  . query (  policy . content   uri  policy . id   projection has   password   expiration null null )  ;  if  ( c  =  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AccountService.java,get account color,@ override public int   ( long account id )  {  return  resource helper . get instance ( m context )  . get account color ( account id )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AccountService.java,get configuration data,@ override public  bundle   (  string account type )  {   bundle bundle = new  bundle (  )  ;  bundle . put boolean (  configuration . exchange   configuration   use   alternate   strings  vendor policy loader . get instance ( m context )  . use alternate
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AccountService.java,get device id,@ override public  string   (  )  {  try  {   email async task . run async serial ( new  runnable (  )  {  @ override public void run (  )  {   email service utils . start remote services ( m context )  ;   debug utils . update logging flags ( m context )
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AccountService.java,on bind,@ override public i binder   (  intent intent )  {  if  ( m context  =  =  null )   {  m context = this ;   }  try  {   device . get device id ( this )  ;   }  catch  (  io exception e )   {   }  return m binder ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AccountService.java,run,@ override public void   (  )  {   email service utils . start remote services ( m context )  ;   debug utils . update logging flags ( m context )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\ResourceHelper.java, resource helper,private   (  context context )  {  m context = context . get application context (  )  ;  m resources = m context . get resources (  )  ;  m account color array = m resources . obtain typed array ( r . array . combined   view   account   colors )  ;  m account colors = m resources . get int array ( r . array . combined   view   account   colors )  ;  m account color paints = new  paint[m account colors . length] ;  for  ( int i = 0 ;  i  <  m account colors . length ;  i +  +  )   {   paint p = new  paint (  )  ;  p . set color ( m account colors[i] )  ;  m account color paints[i] = p ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\ResourceHelper.java,get account color,public int   ( long account id )  {  return m account colors[get account color index ( account id ) ] ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\ResourceHelper.java,get account color id,public int   ( long account id )  {  return m account color array . get resource id ( get account color index ( account id )  undefined   resource   id )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\ResourceHelper.java,get account color index,int   ( long account id )  {  return  math . abs (  ( int )  (  ( account id  -  1 )  % m account colors . length )  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\ResourceHelper.java,get account color paint,public  paint   ( long account id )  {  return m account color paints[get account color index ( account id ) ] ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\ResourceHelper.java,get instance,public static synchronized  resource helper   (  context context )  {  if  ( s instance  =  =  null )   {  s instance = new  resource helper ( context )  ;   }  return s instance ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AuthenticatorService.java, authenticator,public   (  context context )  {  super ( context )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AuthenticatorService.java,add account,@ override public  bundle   (  account authenticator response response  string account type  string auth token type  string[] required features  bundle options )  throws  network error exception  {  final  string protocol =  email service utils . get prot
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AuthenticatorService.java,confirm credentials,@ override public  bundle   (  account authenticator response response  account account  bundle options )  {  return null ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AuthenticatorService.java,edit properties,@ override public  bundle   (  account authenticator response response  string account type )  {  return null ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AuthenticatorService.java,get auth token,@ override public  bundle   (  account authenticator response response  account account  string auth token type  bundle login options )  throws  network error exception  {  return null ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AuthenticatorService.java,get auth token label,@ override public  string   (  string auth token type )  {  return null ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AuthenticatorService.java,has features,@ override public  bundle   (  account authenticator response response  account account  string[] features )  throws  network error exception  {  return null ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AuthenticatorService.java,on bind,@ override public i binder   (  intent intent )  {  if  (  account manager . action   authenticator   intent . equals ( intent . get action (  )  )  )   {  return new  authenticator ( this )  . geti binder (  )  ;   }  else  {  return null ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AuthenticatorService.java,update credentials,@ override public  bundle   (  account authenticator response response  account account  string auth token type  bundle login options )  {  return null ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AttachmentService.java, account manager stub,  ( final  context context )  {  if  ( context  !  =  null )   {  m account manager =  account manager . get ( context )  ;   }  else  {  m account manager = null ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AttachmentService.java, download request,private   ( final  download request orig final long new time )  {  m priority = orig . m priority ;  m attachment id = orig . m attachment id ;  m message id = orig . m message id ;  m account id = orig . m account id ;  m created time = new time ;  m in progress = orig . m in progress ;  m last status code = orig . m last status code ;  m last progress = orig . m last progress ;  m last callback time = orig . m last callback time ;  m start time = orig . m start time ;  m retry count = orig . m retry count ;  m retry start time = orig . m retry start time ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AttachmentService.java,add request,"public boolean   ( final  download request request )  throws  null pointer exception  {  if  ( request  =  =  null )   {  throw new  null pointer exception (  )  ;   }  final long request id = request . m attachment id ;  if  ( request id  <  0 )   {   log utils . d ( log   tag "" not adding a  download request with an invalid attachment id"" )  ;  return false ;   }  debug trace ( "" queuing  download request #%d"" request id )  ;  synchronized  ( m lock )   {  final boolean exists = m request map . contains key ( request id )  ;  if  (  ! exists )   {  m request queue . offer ( request )  ;  m request map . put ( request id request )  ;   }  else  {  debug trace ( "" download request #%d was already in the queue"" )  ;   }   }  return true ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AttachmentService.java,add service intent for test,void   ( final long account id final  intent intent )  {  m account service map . put ( account id intent )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AttachmentService.java,attachment changed,"public static void   ( final  context context final long id final int flags )  {   log utils . d ( log   tag "" attachment with id: %d will potentially be queued for download"" id )  ;  final  intent intent = new  intent ( context  attachment service . class )  ;  debug trace ( "" calling start service with extras %d & %d"" id flags )  ;  intent . put extra ( extra   attachment   id id )  ;  intent . put extra ( extra   attachment   flags flags )  ;  context . start service ( intent )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AttachmentService.java,can prefetch for account,"public boolean   ( final  account account final  file dir )  {  if  ( account  =  =  null )  return false ;  if  (  ( account . m flags &  account . flags   background   attachments )   =  =  0 )   {  debug trace ( "" prefetch is not allowed for this account: %d"" account . get id (  )  )  ;  return false ;   }  final long total storage = dir . get total space (  )  ;  final long usable storage = dir . get usable space (  )  ;  final long min available =  ( long )  ( total storage * prefetch   minimum   storage   available )  ;  if  ( usable storage  <  min available )   {  debug trace ( "" not enough physical storage for prefetch"" )  ;  return false ;   }  final int number of accounts = m account manager stub . get number of accounts (  )  ;  final long per account max storage =  ( long )  ( total storage * prefetch   maximum   attachment   storage  /  number of accounts )  ;   long account storage = m attachment storage map . get ( account . m id )  ;  if  ( account storage  =  =  null ||  ( account storage  >  per account max storage )  )   {  account storage = 0l ;   file[] files = dir . list files (  )  ;  if  ( files  !  =  null )   {  for  (   file file : files )   {  account storage +  = file . length (  )  ;   }   }  m attachment storage map . put ( account . m id account storage )  ;   }  if  ( account storage  >  =  per account max storage )   {  debug trace ( "" prefetch not allowed for account %d ;  used: %d  limit %d"" account . m id account storage per account max storage )  ;  return false ;   }  return true ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AttachmentService.java,cancel download,"synchronized void   ( final  download request req )  {   log utils . d ( log   tag "" cancelling download for  attachment #%d"" req . m attachment id )  ;  req . m in progress = false ;  m downloads in progress . remove ( req . m attachment id )  ;  m download queue . remove request ( req )  ;  req . m retry count +  +  ;  if  ( req . m retry count  >  connection   error   max   retries )   {   log utils . w ( log   tag "" too many failures giving up on  attachment #%d"" req . m attachment id )  ;   }  else  {  debug trace ( "" moving to end of queue  will retry #%d"" req . m attachment id )  ;  final  download request new req = new  download request ( req  system clock . elapsed realtime (  )  )  ;  m download queue . add request ( new req )  ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AttachmentService.java,compare,@ override public int   (  download request req1  download request req2 )  {  int res ;  if  ( req1 . m priority  !  =  req2 . m priority )   {  res =  ( req1 . m priority  <  req2 . m priority )   ?   - 1 : 1 ;   }  else  {  if  ( req1 . m created time  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AttachmentService.java,debug trace,static private void   ( final  string format final  object .  .  .  args )  {  if  ( enable   attachment   service   debug  >  0 )   {   log utils . d ( log   tag  string . format ( format args )  )  ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AttachmentService.java,dump,"@ override public void   ( final  file descriptor fd final  print writer pw final  string[] args )  {  pw . println ( "" attachment service"" )  ;  final long time =  system . current time millis (  )  ;  synchronized  ( m download queue )   {  pw . println"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AttachmentService.java,dump in progress downloads,"synchronized public void   (  )  {  if  ( enable   attachment   service   debug  <  1 )   {   log utils . d ( log   tag "" advanced logging not configured . "" )  ;   }   log utils . d ( log   tag "" here are the in - progress downloads .  .  . "" )  ;  for  (  final  download request req : m downloads in progress . values (  )  )   {   log utils . d ( log   tag "" -  - begin  download request dump -  - "" )  ;   log utils . d ( log   tag "" account: #%d"" req . m account id )  ;   log utils . d ( log   tag "" message: #%d"" req . m message id )  ;   log utils . d ( log   tag "" attachment: #%d"" req . m attachment id )  ;   log utils . d ( log   tag "" created  time: %d"" req . m created time )  ;   log utils . d ( log   tag "" priority: %d"" req . m priority )  ;  if  ( req . m in progress  =  =  true )   {   log utils . d ( log   tag "" this download is in progress"" )  ;   }  else  {   log utils . d ( log   tag "" this download is not in progress"" )  ;   }   log utils . d ( log   tag "" start  time: %d"" req . m start time )  ;   log utils . d ( log   tag "" retry  count: %d"" req . m retry count )  ;   log utils . d ( log   tag "" retry  start  tiome: %d"" req . m retry start time )  ;   log utils . d ( log   tag "" last  status  code: %d"" req . m last status code )  ;   log utils . d ( log   tag "" last  progress: %d"" req . m last progress )  ;   log utils . d ( log   tag "" last  callback  time: %d"" req . m last callback time )  ;   log utils . d ( log   tag "" -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - "" )  ;   }   log utils . d ( log   tag "" done reporting in - progress downloads .  .  . "" )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AttachmentService.java,end download,"synchronized void   ( final long attachment id final int status code )  {   log utils . d ( log   tag "" finishing download #%d"" attachment id )  ;  m downloads in progress . remove ( attachment id )  ;   integer download count ;  download count = m attachment failure map . remove ( attachment id )  ;  if  ( status code  !  =   email service status . success )   {  if  ( download count  =  =  null )   {  download count = 0 ;   }  download count +  = 1 ;   log utils . w ( log   tag "" this attachment failed  adding #%d to failure map"" attachment id )  ;  m attachment failure map . put ( attachment id download count )  ;   }  final  download request req = m download queue . find request by id ( attachment id )  ;  if  ( status code  =  =   email service status . connection   error )   {  if  ( req  !  =  null )   {  req . m retry count +  +  ;  if  ( req . m retry count  >  connection   error   max   retries )   {   log utils . w ( log   tag "" too many tried for connection errors  giving up #%d"" attachment id )  ;  m download queue . remove request ( req )  ;   }  else if  ( req . m retry count  >  connection   error   delay   threshold )   {   log utils . w ( log   tag "" connection error #%d  retried %d times  adding delay"" attachment id req . m retry count )  ;  req . m in progress = false ;  req . m retry start time =  system clock . elapsed realtime (  )   +  connection   error   retry   millis ;  m watchdog . set watchdog alarm ( this connection   error   retry   millis callback   timeout )  ;   }  else  {   log utils . w ( log   tag "" connection error for #%d  retried %d times  adding delay"" attachment id req . m retry count )  ;  req . m in progress = false ;  req . m retry start time = 0 ;  kick (  )  ;   }   }  return ;   }  if  ( req  !  =  null )   {  m download queue . remove request ( req )  ;   }  if  ( enable   attachment   service   debug  >  0 )   {  long secs = 0 ;  if  ( req  !  =  null )   {  secs =  (  system . current time millis (  )   -  req . m created time )   /  1000 ;   }  final  string status =  ( status code  =  =   email service status . success )   ?  "" success"" : "" error ""  +  status code ;  debug trace ( "" download finished for attachment #%d ;  %d seconds from request  status: %s"" attachment id secs status )  ;   }  final  attachment attachment =  attachment . restore attachment with id ( this attachment id )  ;  if  ( attachment  !  =  null )   {  final long account id = attachment . m account key ;   long current storage = m attachment storage map . get ( account id )  ;  if  ( current storage  =  =  null )   {  current storage = 0l ;   }  m attachment storage map . put ( account id current storage  +  attachment . m size )  ;  boolean deleted = false ;  if  (  ( attachment . m flags &  attachment . flag   download   forward )   !  =  0 )   {  if  ( status code  =  =   email service status . attachment   not   found )   {   email content . delete ( this  attachment . content   uri attachment . m id )  ;  final  notification controller nc =  notification controller creator holder . get instance ( this )  ;  if  ( nc  !  =  null )   {  nc . show download forward failed notification synchronous ( attachment )  ;   }  deleted = true ;   log utils . w ( log   tag "" deleting forwarded attachment #%d for message #%d"" attachment id attachment . m message key )  ;   }  if  (  ( req  !  =  null )  &&  !  utility . has unloaded attachments ( this attachment . m message key )  )   {  debug trace ( "" downloads finished for outgoing msg #%d"" req . m message id )  ;   email service proxy service =  email service utils . get service for account ( this account id )  ;  try  {  service . send mail ( account id )  ;   }  catch  (   remote exception e )   {   log utils . e ( log   tag "" remote exception while trying to send message: #%d  %s"" req . m message id e . to string (  )  )  ;   }   }   }  if  ( status code  =  =   email service status . message   not   found )   {   message msg =  message . restore message with id ( this attachment . m message key )  ;  if  ( msg  =  =  null )   {   log utils . w ( log   tag "" deleting attachment #%d with no associated message #%d"" attachment . m id attachment . m message key )  ;   email content . delete ( this  attachment . content   uri attachment . m id )  ;   }  else  {   log utils . w ( log   tag "" retrying attachment #%d with associated message #%d"" attachment . m id attachment . m message key )  ;  kick (  )  ;  return ;   }   }  else if  (  ! deleted )   {   log utils . d ( log   tag "" attachment #%d successfully downloaded ! "" attachment . m id )  ;  mark attachment as completed ( attachment )  ;   }   }  kick (  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AttachmentService.java,equals,@ override public boolean   ( final  object object )  {  if  (  !  ( object instanceof  download request )  )  return false ;  final  download request req =  (  download request ) object ;  return req . m attachment id  =  =  m attachment id ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AttachmentService.java,find request by id,public  download request   ( final long request id )  {  if  ( request id  <  0 )   {  return null ;   }  synchronized  ( m lock )   {  return m request map . get ( request id )  ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AttachmentService.java,get attachment priority,private static int   ( final  attachment att )  {  int priority class = priority   none ;  final int flags = att . m flags ;  if  (  ( flags &  attachment . flag   download   forward )   !  =  0 )   {  priority class = priority   send   mail ;   }  else if  (  ( flags &  attachment . flag   download   user   request )   !  =  0 )   {  priority class = priority   foreground ;   }  return priority class ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AttachmentService.java,get attachment update values, content values   ( final  attachment attachment final int status code final int progress )  {  final  content values values = new  content values (  )  ;  if  ( attachment  !  =  null )   {  if  ( status code  =  =   email service status . in   progress )   {  values . put (  attachment columns . ui   state  attachment state . downloading )  ;  values . put (  attachment columns . ui   downloaded   size attachment . m size * progress  /  100 )  ;   }   }  return values ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AttachmentService.java,get downloads for account,synchronized int   ( final long account id )  {  int count = 0 ;  for  (  final  download request req : m downloads in progress . values (  )  )   {  if  ( req . m account id  =  =  account id )   {  count +  +  ;   }   }  return count ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AttachmentService.java,get next request,"public  download request   (  )  {  final  download request return request ;  synchronized  ( m lock )   {  return request = m request queue . poll (  )  ;  if  ( return request  !  =  null )   {  final long request id = return request . m attachment id ;  m request map . remove ( request id )  ;   }   }  if  ( return request  !  =  null )   {  debug trace ( "" retrieved  download request #%d"" return request . m attachment id )  ;   }  return return request ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AttachmentService.java,get number of accounts,int   (  )  {  if  ( m account manager  !  =  null )   {  return m account manager . get accounts (  )  . length ;   }  else  {  return m number of accounts ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AttachmentService.java,get size,public int   (  )  {  synchronized  ( m lock )   {  return m request map . size (  )  ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AttachmentService.java,hash code,@ override public int   (  )  {  return  ( int ) m attachment id ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AttachmentService.java,is connected,boolean   (  )  {  if  ( m connectivity manager  !  =  null )   {  return m connectivity manager . has connectivity (  )  ;   }  return false ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AttachmentService.java,is empty,public boolean   (  )  {  synchronized  ( m lock )   {  return m request map . is empty (  )  ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AttachmentService.java,issue next watchdog alarm,"void   ( final  attachment service service )  {  if  (  ! service . m downloads in progress . is empty (  )  )   {  debug trace ( "" rescheduling watchdog .  .  . "" )  ;  set watchdog alarm ( service )  ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AttachmentService.java,kick,private void   (  )  {  synchronized  ( m lock )   {  m lock . notify (  )  ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AttachmentService.java,load attachment status,"@ override public void   ( final long message id final long attachment id final int status code final int progress )  {  debug trace ( log   tag "" service callback for attachment #%d"" attachment id )  ;  final  download request req = m downloads in progre"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AttachmentService.java,mark attachment as completed,void   ( final  attachment att )  {  final  content values cv = new  content values (  )  ;  final int flags =  attachment . flag   download   forward |  attachment . flag   download   user   request ;  cv . put (  attachment columns . flags att . m flags& = ~flags )  ;  cv . put (  attachment columns . ui   state  attachment state . saved )  ;  att . update ( this cv )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AttachmentService.java,mark attachment as failed,void   ( final  attachment att )  {  final  content values cv = new  content values (  )  ;  final int flags =  attachment . flag   download   forward |  attachment . flag   download   user   request ;  cv . put (  attachment columns . flags att . m flags& = ~flags )  ;  cv . put (  attachment columns . ui   state  attachment state . failed )  ;  att . update ( this cv )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AttachmentService.java,on bind,@ override public i binder   ( final  intent intent )  {  return null ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AttachmentService.java,on change,"public synchronized void   ( final  context context final  attachment att )  {  debug trace ( ""on change (  )  for  attachment: #%d"" att . m id )  ;   download request req = m download queue . find request by id ( att . m id )  ;  final long priority = get attachment priority ( att )  ;  if  ( priority  =  =  priority   none )   {   log utils . d ( log   tag "" attachment #%d has no priority and will not be downloaded"" att . m id )  ;  if  ( req  !  =  null )   {  m download queue . remove request ( req )  ;   }   }  else  {  if  ( m downloads in progress . contains key ( att . m id )  )   {  debug trace ( "" attachment #%d was already in the queue"" att . m id )  ;  return ;   }  if  ( req  =  =  null )   {   log utils . d ( log   tag "" attachment #%d is a new download request"" att . m id )  ;  req = new  download request ( context att )  ;  final  attachment info attach info = new  attachment info ( context att )  ;  if  (  ! attach info . is eligible for download (  )  )   {   log utils . w ( log   tag "" attachment #%d is not eligible for download"" att . m id )  ;  if  (  (  ( att . m flags &  attachment . flag   download   user   request )   !  =  0 )  ||  (  ( att . m flags &  attachment . flag   policy   disallows   download )   !  =  0 )  )   {   log utils . w ( log   tag "" attachment #%d cannot be downloaded ever"" att . m id )  ;  mark attachment as failed ( att )  ;  return ;   }   }  m download queue . add request ( req )  ;   }   log utils . d ( log   tag "" attachment #%d queued for download  priority: %d  created time: %d"" att . m id req . m priority req . m created time )  ;   }  kick (  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AttachmentService.java,on create,"@ override public void   (  )  {  new  thread ( this "" attachment service"" )  . start (  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AttachmentService.java,on destroy,"@ override public void   (  )  {  debug trace ( "" destroying  attachment service object"" )  ;  dump in progress downloads (  )  ;  m stop = true ;  if  ( s running service  !  =  null )   {  kick (  )  ;  s running service = null ;   }  if  ( m connectivi"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AttachmentService.java,on receive,@ override public void   ( final  context context final  intent intent )  {  final int callback timeout = intent . get int extra ( extra   callback   timeout callback   timeout )  ;  new  thread ( new  runnable (  )  {  @ override public void run (  )  { 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AttachmentService.java,on start command,@ override public int   ( final  intent intent final int flags final int start id )  {  if  ( s running service  =  =  null )   {  s running service = this ;   }  if  ( intent  !  =  null )   {  final long attachment   id = intent . get long extra ( extra
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java, attachments cursor,"public   (  context context  cursor cursor )  {  super ( cursor )  ;  m content uri index = cursor . get column index ( ui provider .  attachment columns . content   uri )  ;  m uri index = cursor . get column index ( ui provider .  attachment columns . uri )  ;  m context = context ;  m content uri strings = new  string[cursor . get count (  ) ] ;  if  ( m content uri index  =  =   - 1 )   {  return ;   }  while  ( cursor . move to next (  )  )   {  final int index = cursor . get position (  )  ;  final  uri uri =  uri . parse ( get string ( m uri index )  )  ;  final long id =  long . parse long ( uri . get last path segment (  )  )  ;  final  attachment att =  attachment . restore attachment with id ( m context id )  ;  if  ( att  =  =  null )   {  m content uri strings[index] = """" ;  continue ;   }  if  (  !  text utils . is empty ( att . get cached file uri (  )  )  )   {  m content uri strings[index] = att . get cached file uri (  )  ;  continue ;   }  final  string content uri ;  if  ( att . m ui destination  =  =  ui provider .  attachment destination . external && att . m ui state  =  =  ui provider .  attachment state . saved &&  text utils . equals ( att . m mime type  mime type . android   archive )  )   {  content uri = att . get content uri (  )  ;   }  else  {  final  string att uri string = att . get content uri (  )  ;  final  string authority ;  if  (  !  text utils . is empty ( att uri string )  )   {  authority =  uri . parse ( att uri string )  . get authority (  )  ;   }  else  {  authority = null ;   }  if  (  text utils . equals ( authority  attachment . attachment   provider   authority )  )   {  content uri = att uri string ;   }  else  {  content uri =  attachment utilities . get attachment uri ( att . m account key id )  . to string (  )  ;   }   }  m content uri strings[index] = content uri ;   }  cursor . move to position (  - 1 )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java, close detecting cursor,public   (  cursor cursor )  {  super ( cursor )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java, message query,  (  string    query  string    attachment json )  {  query =    query ;  attachment json =    attachment json ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java, sync request message,private   ( final  string authority final android . accounts .  account account final long mailbox id )  {  m authority = authority ;  m account = account ;  m mailbox id = mailbox id ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AttachmentService.java,process queue,"synchronized void   (  )  {  debug trace ( "" processing changed queue  num entries: %d"" s attachment changed queue . size (  )  )  ;  long[] change = s attachment changed queue . poll (  )  ;  while  ( change  !  =  null )   {  final long id = change[0] ;  final long flags = change[1] ;  final  attachment attachment =  attachment . restore attachment with id ( this id )  ;  if  ( attachment  =  =  null )   {   log utils . w ( log   tag "" could not restore attachment #%d"" id )  ;   }  else  {  attachment . m flags =  ( int ) flags ;  on change ( this attachment )  ;   }  change = s attachment changed queue . poll (  )  ;   }  debug trace ( "" processing download queue  num entries: %d"" m download queue . get size (  )  )  ;  while  ( m downloads in progress . size (  )   <  max   simultaneous   downloads )   {  final  download request req = m download queue . get next request (  )  ;  if  ( req  =  =  null )   {  break ;   }  if  ( get downloads for account ( req . m account id )   >  =  max   simultaneous   downloads   per   account )   {   log utils . w ( log   tag "" skipping #%d ;  maxed for acct %d"" req . m attachment id req . m account id )  ;  continue ;   }  if  (  attachment . restore attachment with id ( this req . m attachment id )   =  =  null )   {   log utils . e ( log   tag "" could not load attachment: #%d"" req . m attachment id )  ;  continue ;   }  if  (  ! req . m in progress )   {  final long current time =  system clock . elapsed realtime (  )  ;  if  ( req . m retry count  >  0 && req . m retry start time  >  current time )   {  debug trace ( "" need to wait before retrying attachment #%d"" req . m attachment id )  ;  m watchdog . set watchdog alarm ( this connection   error   retry   millis callback   timeout )  ;  continue ;   }  try start download ( req )  ;   }   }  final  email connectivity manager ecm = m connectivity manager ;  if  (  ( ecm  =  =  null )  ||  ! ecm . is auto sync allowed (  )  ||  ( ecm . get active network type (  )   !  =   connectivity manager . type   wifi )  )   {   log utils . d ( log   tag "" skipping opportunistic downloads since wifi is not available"" )  ;  return ;   }  final int available background threads = max   simultaneous   downloads  -  m downloads in progress . size (  )  ;  if  ( available background threads  <  1 )   {   log utils . d ( log   tag "" skipping opportunistic downloads  %d threads available"" available background threads )  ;  dump in progress downloads (  )  ;  return ;   }  debug trace ( "" launching up to %d opportunistic downloads"" available background threads )  ;  final  uri lookup uri =  email content . uri with limit (  attachment . content   uri max   attachments   to   check )  ;  final  cursor c = this . get content resolver (  )  . query ( lookup uri  attachment . content   projection  email content .  attachment . precache   inbox   selection null  attachment columns .    id  +  "" desc"" )  ;   file cache dir = this . get cache dir (  )  ;  try  {  while  ( c . move to next (  )  )   {  final  attachment att = new  attachment (  )  ;  att . restore ( c )  ;  final  account account =  account . restore account with id ( this att . m account key )  ;  if  ( account  =  =  null )   {  debug trace ( "" found orphaned attachment #%d"" att . m id )  ;   email content . delete ( this  attachment . content   uri att . m id )  ;   }  else  {  final  attachment info info = new  attachment info ( this att )  ;  if  ( info . is eligible for download (  )  )   {  if  ( att . m content id  !  =  null || can prefetch for account ( account cache dir )  )   {  final  integer try count = m attachment failure map . get ( att . m id )  ;  if  ( try count  !  =  null && try count  >  max   download   retries )   {   log utils . w ( log   tag "" too many failed attempts for attachment #%d "" att . m id )  ;  continue ;   }  final  download request req = new  download request ( this att )  ;  try start download ( req )  ;  break ;   }   }  else  {   log utils . w ( log   tag "" skipping attachment #%d  it is ineligible"" att . m id )  ;   }   }   }   }  finally  {  c . close (  )  ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AttachmentService.java,remove request,"public boolean   ( final  download request request )  {  if  ( request  =  =  null )   {  return true ;   }  debug trace ( "" removing  download request #%d"" request . m attachment id )  ;  final boolean result ;  synchronized  ( m lock )   {  result = m request queue . remove ( request )  ;  if  ( result )   {  m request map . remove ( request . m attachment id )  ;   }  return result ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AttachmentService.java,run,@ override public void   (  )  {  m connectivity manager = new  email connectivity manager ( this log   tag )  ;  m account manager stub = new  account manager stub ( this )  ;  final int mask =  attachment . flag   download   forward |  attachment . flag
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AttachmentService.java,set number of accounts,void   ( final int number of accounts )  {  m number of accounts = number of accounts ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AttachmentService.java,set watchdog alarm,public void   ( final  context context )  {  set watchdog alarm ( context watchdog   check   interval callback   timeout )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AttachmentService.java,start download,"private void   ( final  email service proxy service final  download request req )  throws  remote exception  {   log utils . d ( log   tag "" starting download for  attachment #%d"" req . m attachment id )  ;  req . m start time =  system . current time millis (  )  ;  req . m in progress = true ;  m downloads in progress . put ( req . m attachment id req )  ;  service . load attachment ( m service callback req . m account id req . m attachment id req . m priority  !  =  priority   foreground )  ;  m watchdog . set watchdog alarm ( this )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,add combined account row,"private void   (  matrix cursor mc )  {  final long last used account id =  preferences . get preferences ( get context (  )  )  . get last used account id (  )  ;  final long id =  account . get default account id ( get context (  )  last used account id )  ;  if  ( id  =  =   account . no   account )  return ;  final  immutable map .  builder <  string  integer >  builder = new  immutable map .  builder <  string  integer >  (  )  ;  final  string[] column names = mc . get column names (  )  ;  for  ( int i = 0 ;  i  <  column names . length ;  i +  +  )   {  builder . put ( column names[i] i )  ;   }  final  map <  string  integer >  col pos map = builder . build (  )  ;  final  mail prefs mail prefs =  mail prefs . get ( get context (  )  )  ;  final  object[] values = new  object[column names . length] ;  if  ( col pos map . contains key (  base columns .    id )  )   {  values[col pos map . get (  base columns .    id ) ] = 0 ;   }  if  ( col pos map . contains key ( ui provider .  account columns . capabilities )  )   {  values[col pos map . get ( ui provider .  account columns . capabilities ) ] =  account capabilities . undo |  account capabilities . virtual   account |  account capabilities . client   sanitized   html ;   }  if  ( col pos map . contains key ( ui provider .  account columns . folder   list   uri )  )   {  values[col pos map . get ( ui provider .  account columns . folder   list   uri ) ] = combined uri string ( ""uifolders"" combined   account   id   string )  ;   }  if  ( col pos map . contains key ( ui provider .  account columns . name )  )   {  values[col pos map . get ( ui provider .  account columns . name ) ] = get context (  )  . get string ( r . string . mailbox   list   account   selector   combined   view )  ;   }  if  ( col pos map . contains key ( ui provider .  account columns . account   manager   name )  )   {  values[col pos map . get ( ui provider .  account columns . account   manager   name ) ] = get context (  )  . get string ( r . string . mailbox   list   account   selector   combined   view )  ;   }  if  ( col pos map . contains key ( ui provider .  account columns . account   id )  )   {  values[col pos map . get ( ui provider .  account columns . account   id ) ] = "" account  id"" ;   }  if  ( col pos map . contains key ( ui provider .  account columns . type )  )   {  values[col pos map . get ( ui provider .  account columns . type ) ] = ""unknown"" ;   }  if  ( col pos map . contains key ( ui provider .  account columns . undo   uri )  )   {  values[col pos map . get ( ui provider .  account columns . undo   uri ) ] = ""'content: /  / ""  +   email content . authority  +  "" / uiundo'"" ;   }  if  ( col pos map . contains key ( ui provider .  account columns . uri )  )   {  values[col pos map . get ( ui provider .  account columns . uri ) ] = combined uri string ( ""uiaccount"" combined   account   id   string )  ;   }  if  ( col pos map . contains key ( ui provider .  account columns . mime   type )  )   {  values[col pos map . get ( ui provider .  account columns . mime   type ) ] = email   app   mime   type ;   }  if  ( col pos map . contains key ( ui provider .  account columns . security   hold )  )   {  values[col pos map . get ( ui provider .  account columns . security   hold ) ] = 0 ;   }  if  ( col pos map . contains key ( ui provider .  account columns . account   security   uri )  )   {  values[col pos map . get ( ui provider .  account columns . account   security   uri ) ] = """" ;   }  if  ( col pos map . contains key ( ui provider .  account columns . settings   intent   uri )  )   {  values[col pos map . get ( ui provider .  account columns . settings   intent   uri ) ] = get external uri string ( ""settings"" combined   account   id   string )  ;   }  if  ( col pos map . contains key ( ui provider .  account columns . compose   uri )  )   {  values[col pos map . get ( ui provider .  account columns . compose   uri ) ] = get external uri string email2 ( ""compose""  long . to string ( id )  )  ;   }  if  ( col pos map . contains key ( ui provider .  account columns . update   settings   uri )  )   {  values[col pos map . get ( ui provider .  account columns . update   settings   uri ) ] = ui uri string ( ""uiacctsettings""  - 1 )  ;   }  if  ( col pos map . contains key ( ui provider .  account columns .  settings columns . auto   advance )  )   {  values[col pos map . get ( ui provider .  account columns .  settings columns . auto   advance ) ] =  integer . to string ( mail prefs . get auto advance mode (  )  )  ;   }  if  ( col pos map . contains key ( ui provider .  account columns .  settings columns . snap   headers )  )   {  values[col pos map . get ( ui provider .  account columns .  settings columns . snap   headers ) ] =  integer . to string ( ui provider .  snap header value . always )  ;   }  if  ( col pos map . contains key ( ui provider .  account columns .  settings columns . reply   behavior )  )   {  values[col pos map . get ( ui provider .  account columns .  settings columns . reply   behavior ) ] =  integer . to string ( mail prefs . get default reply all (  )   ?  ui provider .  default reply behavior . reply   all : ui provider .  default reply behavior . reply )  ;   }  if  ( col pos map . contains key ( ui provider .  account columns .  settings columns . conv   list   icon )  )   {  values[col pos map . get ( ui provider .  account columns .  settings columns . conv   list   icon ) ] = get conversation list icon ( mail prefs )  ;   }  if  ( col pos map . contains key ( ui provider .  account columns .  settings columns . confirm   delete )  )   {  values[col pos map . get ( ui provider .  account columns .  settings columns . confirm   delete ) ] = mail prefs . get confirm delete (  )   ?  1 : 0 ;   }  if  ( col pos map . contains key ( ui provider .  account columns .  settings columns . confirm   archive )  )   {  values[col pos map . get ( ui provider .  account columns .  settings columns . confirm   archive ) ] = 0 ;   }  if  ( col pos map . contains key ( ui provider .  account columns .  settings columns . confirm   send )  )   {  values[col pos map . get ( ui provider .  account columns .  settings columns . confirm   send ) ] = mail prefs . get confirm send (  )   ?  1 : 0 ;   }  if  ( col pos map . contains key ( ui provider .  account columns .  settings columns . default   inbox )  )   {  values[col pos map . get ( ui provider .  account columns .  settings columns . default   inbox ) ] = combined uri string ( ""uifolder"" combined mailbox id (  mailbox . type   inbox )  )  ;   }  if  ( col pos map . contains key ( ui provider .  account columns .  settings columns . move   to   inbox )  )   {  values[col pos map . get ( ui provider .  account columns .  settings columns . move   to   inbox ) ] = combined uri string ( ""uifolder"" combined mailbox id (  mailbox . type   inbox )  )  ;   }  if  ( col pos map . contains key ( ui provider .  account columns .  settings columns . show   images )  )   {  values[col pos map . get ( ui provider .  account columns .  settings columns . show   images ) ] =  settings .  show images . ask   first ;   }  mc . add row ( values )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,add to message move,private void   ( final sq lite database db final  string message id final long dst folder key )  {  db . execsql (  string . format (  locale . us message   move   insert  message move . table   name message id message id message id message id dst folder key message id dst folder key )  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,add to message state change,private void   ( final sq lite database db final  string message id final int new flag read final int new flag favorite )  {  db . execsql (  string . format (  locale . us message   state   change   insert  message state change . table   name message id message id message id message id new flag read message id new flag favorite )  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,add to sequence,private void   (  uri uri  content provider operation op )  {   string sequence string = uri . get query parameter ( ui provider . sequence   query   parameter )  ;  if  ( sequence string  !  =  null )   {  int sequence =  integer . parse int ( sequence string )  ;  if  ( sequence  >  m last sequence )   {  m last sequence ops . clear (  )  ;  m last sequence = sequence ;   }  m last sequence ops . add ( op )  ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,append conversation info columns,private static void   ( final  string builder string builder )  {  string builder . append ( ' ' )  . append (  message columns . display   name )  . append ( ' ' )  . append (  message columns . from   list )  . append ( ' ' )  . append (  message columns . to   list )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,apply batch,@ override public  content provider result[]   (  array list <  content provider operation >  operations )  throws  operation application exception  {  set batch notifications set (  sets .  <  uri > new hash set (  )  )  ;   context context = get context
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,attachment changed,@ override public void   ( final  context context final long id final int flags )  {   attachment service . attachment changed ( context id flags )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,backup accounts,"private static int   ( final  context context final sq lite database db )  {  final  account manager am =  account manager . get ( context )  ;  final  cursor account cursor = db . query (  account . table   name  account . content   projection null null null null null )  ;  int updated count = 0 ;  try  {  while  ( account cursor . move to next (  )  )   {  final  account account = new  account (  )  ;  account . restore ( account cursor )  ;   email service info service info =  email service utils . get service info ( context account . get protocol ( context )  )  ;  if  ( service info  =  =  null )   {   log utils . d (  log utils . tag "" could not find service info for account"" )  ;  continue ;   }  final  string json string = account . to json string ( context )  ;  final android . accounts .  account am account = account . get account manager account ( service info . account type )  ;  am . set user data ( am account account   manager   json   tag json string )  ;  updated count +  +  ;   }   }  finally  {  account cursor . close (  )  ;   }  return updated count ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,call,"@ override public  bundle   (  string method  string arg  bundle extras )  {   log utils . d ( tag "" email provider#call ( %s  %s ) "" method arg )  ;  if  (  text utils . equals ( method  email content . device   friendly   name )  )   {  final  bundle bu"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,check databases,"public void   (  )  {  synchronized  ( s database lock )   {  if  ( m database  !  =  null )   {  m database = null ;   }  if  ( m body database  !  =  null )   {  m body database = null ;   }  final  file database file = get context (  )  . get database path ( database   name )  ;  final  file body file = get context (  )  . get database path ( body   database   name )  ;  if  ( database file . exists (  )  &&  ! body file . exists (  )  )   {   log utils . w ( tag "" deleting orphaned  email provider database .  .  . "" )  ;  get context (  )  . delete database ( database   name )  ;   }  else if  ( body file . exists (  )  &&  ! database file . exists (  )  )   {   log utils . w ( tag "" deleting orphaned  email provider body database .  .  . "" )  ;  get context (  )  . delete database ( body   database   name )  ;   }   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,close,"@ override public void   (  )  {  super . close (  )  ;   log utils . d ( tag "" closing cursor"" new  error (  )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,combined mailbox id,private static  string   ( int type )  {  return  long . to string (  account . account   id   combined   view  +  type )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,combined uri string,"private static  string   (  string type  string id )  {  return ""content: /  / ""  +   email content . authority  +  "" / "" +  type +  "" / "" +  id ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,convert to email provider uri,"private static  uri   (  uri uri  uri new base uri boolean as provider )  {  final  string id string = uri . get last path segment (  )  ;  try  {  final long id =  long . parse long ( id string )  ;   uri our uri =  content uris . with appended id ( new base uri id )  ;  if  ( as provider )   {  our uri = our uri . build upon (  )  . append query parameter ( is   uiprovider ""true"" )  . build (  )  ;   }  return our uri ;   }  catch  (   number format exception e )   {  return null ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,convert ui attachment to attachment,"private static  attachment   ( com . android . mail . providers .  attachment ui att  string cached file long account key )  {  final  attachment att = new  attachment (  )  ;  att . set content uri ( ui att . content uri . to string (  )  )  ;  if  (  !  text utils . is empty ( cached file )  )   {  final  uri .  builder cached file builder =  uri . parse ( ""content: /  / ""  +   email content . authority  +  "" / attachment / cached file"" )  . build upon (  )  ;  cached file builder . append query parameter (  attachment . cached   file   query   param cached file )  ;  att . set cached file uri ( cached file builder . build (  )  . to string (  )  )  ;   }  att . m account key = account key ;  att . m file name = ui att . get name (  )  ;  att . m mime type = ui att . get content type (  )  ;  att . m size = ui att . size ;  return att ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,convert ui message values,"private  content values   (  message message  content values values )  {  final  content values our values = new  content values (  )  ;  for  (   string column name : values . key set (  )  )   {  final  object val = values . get ( column name )  ;  if  ( column name . equals ( ui provider .  conversation columns . starred )  )   {  put integer long or boolean ( our values  message columns . flag   favorite val )  ;   }  else if  ( column name . equals ( ui provider .  conversation columns . read )  )   {  put integer long or boolean ( our values  message columns . flag   read val )  ;   }  else if  ( column name . equals ( ui provider .  conversation columns . seen )  )   {  put integer long or boolean ( our values  message columns . flag   seen val )  ;   }  else if  ( column name . equals (  message columns . mailbox   key )  )   {  put integer long or boolean ( our values  message columns . mailbox   key val )  ;   }  else if  ( column name . equals ( ui provider .  conversation operations . folders   updated )  )   {   }  else if  ( column name . equals ( ui provider .  conversation columns . raw   folders )  )   {  final  folder list flist =  folder list . from blob ( values . get as byte array ( column name )  )  ;  if  ( flist . folders . size (  )   !  =  1 )   {   log utils . e ( tag "" incorrect number of folders for this message:  message is %s"" message . m id )  ;   }  else  {  final  folder f = flist . folders . get ( 0 )  ;  final  uri uri = f . folder uri . full uri ;  final  long mailbox id =  long . parse long ( uri . get last path segment (  )  )  ;  put integer long or boolean ( our values  message columns . mailbox   key mailbox id )  ;   }   }  else if  ( column name . equals ( ui provider .  message columns . always   show   images )  )   {   address[] from list =  address . from header ( message . m from )  ;  final  mail prefs mail prefs =  mail prefs . get ( get context (  )  )  ;  for  (   address sender : from list )   {  final  string email = sender . get address (  )  ;  mail prefs . set display images from sender ( email null )  ;   }   }  else if  ( column name . equals ( ui provider .  conversation columns . viewed )  || column name . equals ( ui provider .  conversation operations .  parameters . suppress   undo )  )   {   }  else if  ( ui provider .  conversation columns . conversation   info . equals ( column name )  )   {   }  else  {  throw new  illegal argument exception ( "" can't update ""  +  column name  +  "" in message"" )  ;   }   }  return our values ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,copy account tables,"private static int   ( sq lite database from database sq lite database to database )  {  if  ( from database  =  =  null || to database  =  =  null )  return  - 1 ;  int copy count = 0 ;  from database . begin transaction (  )  ;  try  {  to database . begin transaction (  )  ;  try  {  to database . delete (  account . table   name null null )  ;  to database . delete (  host auth . table   name null null )  ;   cursor c = from database . query (  account . table   name  account . content   projection null null null null null )  ;  if  ( c  =  =  null )  return 0 ;   log utils . d ( tag ""from database accounts: ""  +  c . get count (  )  )  ;  try  {  while  ( c . move to next (  )  )   {   account account = new  account (  )  ;  account . restore ( c )  ;  account . m security sync key = null ;  account . m sync key = null ;  account . m policy key = 0 ;   host auth host auth = restore host auth ( from database account . m host auth key recv )  ;  if  ( host auth  =  =  null )  continue ;  account . m host auth key recv = to database . insert (  host auth . table   name null host auth . to content values (  )  )  ;  if  ( account . m host auth key send  >  0 )   {  host auth = restore host auth ( from database account . m host auth key send )  ;  if  ( host auth  =  =  null )  continue ;  account . m host auth key send = to database . insert (  host auth . table   name null host auth . to content values (  )  )  ;   }  to database . insert (  account . table   name null account . to content values (  )  )  ;  copy count +  +  ;   }   }  finally  {  c . close (  )  ;   }  to database . set transaction successful (  )  ;   }  finally  {  to database . end transaction (  )  ;   }   }  catch  (  sq lite exception ex )   {   log utils . w ( tag "" exception while copying account tables"" ex )  ;  copy count =  - 1 ;   }  finally  {  from database . end transaction (  )  ;   }  return copy count ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,create attachment uri columnsql,"private static  string   (  )  {  final  string uri prefix =  attachment . attachment   provider   uri   prefix ;  final  string account key =  attachment columns . account   key ;  final  string id =  attachment columns .    id ;  final  string raw =  attachment utilities . format   raw ;  final  string content uri =  string . format ( ""%s / ' || %s || ' / ' || %s || ' / %s"" uri prefix account key id raw )  ;  return ""@case ""  +  ""when content uri is null then '""  +  content uri  +  ""' "" +  ""when content uri is not null then content uri "" +  ""end"" ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,create mailbox,private  mailbox   ( long account id int mailbox type )  {   context context = get context (  )  ;   mailbox box =  mailbox . new system mailbox ( context account id mailbox type )  ;  switch  ( mailbox type )   {  case  mailbox . type   drafts: box . m last touched time =  mailbox . drafts   default   touch   time ;  break ;  case  mailbox . type   sent: box . m last touched time =  mailbox . sent   default   touch   time ;  break ;   }  box . save ( context )  ;  return box ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,decode email addresses,private static void   (  content values values )  {  if  ( values . contains key (  message .  message columns . to   list )  )   {  final  string to = values . get as string (  message .  message columns . to   list )  ;  values . put (  message .  message columns . to   list  address . from header to string ( to )  )  ;   }  if  ( values . contains key (  message .  message columns . from   list )  )   {  final  string from = values . get as string (  message .  message columns . from   list )  ;  values . put (  message .  message columns . from   list  address . from header to string ( from )  )  ;   }  if  ( values . contains key (  message .  message columns . cc   list )  )   {  final  string cc = values . get as string (  message .  message columns . cc   list )  ;  values . put (  message .  message columns . cc   list  address . from header to string ( cc )  )  ;   }  if  ( values . contains key (  message .  message columns . bcc   list )  )   {  final  string bcc = values . get as string (  message .  message columns . bcc   list )  ;  values . put (  message .  message columns . bcc   list  address . from header to string ( bcc )  )  ;   }  if  ( values . contains key (  message .  message columns . reply   to   list )  )   {  final  string reply to = values . get as string (  message .  message columns . reply   to   list )  ;  values . put (  message .  message columns . reply   to   list  address . from header to string ( reply to )  )  ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,default recent folders,"private  uri[]   ( final  string id )  {   uri[] recent folders = new  uri[0] ;  final sq lite database db = get database ( get context (  )  )  ;  if  ( id . equals ( combined   account   id   string )  )   {  return recent folders ;   }  final  string[] id and type =  {  base columns .    id ui provider .  folder columns . type }  ;  final  string builder sb = gen select ( get folder list map (  )  id and type )  ;  sb . append ( "" from "" )  . append (  mailbox . table   name )  . append ( "" where "" )  . append (  mailbox columns . account   key )  . append ( ""  =  "" )  . append ( id )  . append ( "" and "" )  . append (  mailbox columns . type )  . append ( "" in  ( "" )  . append (  mailbox . type   sent )  . append ( ""  "" )  . append (  mailbox . type   drafts )  . append ( ""  "" )  . append (  mailbox . type   starred )  . append ( "" ) "" )  ;   log utils . d ( tag ""default recent folders:  query is %s"" sb )  ;  final  cursor c = db . raw query ( sb . to string (  )  null )  ;  try  {  if  ( c  =  =  null || c . get count (  )   <  =  0 ||  ! c . move to first (  )  )   {  return recent folders ;   }  recent folders = new  uri[c . get count (  ) ] ;  int i = 0 ;  do  {  final long folder id = c . get long ( 0 )  ;  recent folders[i] = ui uri ( ""uifolder"" folder id )  ;   log utils . d ( tag "" default recent folder: %d  with uri %s"" folder id recent folders[i] )  ;   +  + i ;   }  while  ( c . move to next (  )  )  ;   }  finally  {  if  ( c  !  =  null )   {  c . close (  )  ;   }   }  return recent folders ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,delete,"@ override public int   (  uri uri  string selection  string[] selection args )  {   log . d ( tag "" delete: ""  +  uri )  ;  final int match = find match ( uri ""delete"" )  ;  final  context context = get context (  )  ;  final sq lite database db = get da"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,delete account data,"private static void   (  context context long account id )  {  final  string email address =  utility . get first row string ( context  account . content   uri account   email   projection  account . id   selection new  string[] {  long . to string ( account id )  }  null 0 )  ;  if  ( email address  =  =  null )   {   log utils . e ( tag "" could not find email address for account %d"" account id )  ;   }   attachment utilities . delete all account attachment files ( context account id )  ;   content resolver resolver = context . get content resolver (  )  ;   string[] account id args = new  string[] {  long . to string ( account id )  }  ;  resolver . delete (  mailbox . content   uri mailboxes   for   account   selection account id args )  ;  final  content values cv = new  content values (  )  ;  cv . put null (  account columns . sync   key )  ;  resolver . update (  account . content   uri cv  account . id   selection account id args )  ;  if  ( email address  !  =  null )   {  final i email service service =  email service utils . get service for account ( context account id )  ;  if  ( service  !  =  null )   {  try  {  service . delete external accountpim data ( email address )  ;   }  catch  (  final  remote exception e )   {   }   }   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,delete body files,private static void   ( final  context c final long message id )  throws  illegal state exception  {  final  content values empty values = new  content values ( 2 )  ;  empty values . put null (  body columns . html   content )  ;  empty values . put null (  body columns . text   content )  ;  write body files ( c message id empty values )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,delete message orphans,public static void   ( sq lite database database  string table name )  {  if  ( database  !  =  null )   {   cursor c = database . query ( table name orphans   projection null null null null null )  ;  try  {  if  ( c . get count (  )   =  =  0 )  return ;   array list <  long >  found mailboxes = new  array list <  long >  (  )  ;   array list <  long >  not found mailboxes = new  array list <  long >  (  )  ;   array list <  long >  delete list = new  array list <  long >  (  )  ;   string[] bind array = new  string[1] ;  while  ( c . move to next (  )  )   {  long mailbox id = c . get long ( orphans   mailbox   key )  ;  if  ( not found mailboxes . contains ( mailbox id )  )   {  delete list . add ( c . get long ( orphans   id )  )  ;   }  else if  (  ! found mailboxes . contains ( mailbox id )  )   {  bind array[0] =  long . to string ( mailbox id )  ;   cursor box cursor = database . query (  mailbox . table   name  mailbox . id   projection where   id bind array null null null )  ;  try  {  if  ( box cursor . move to first (  )  )   {  found mailboxes . add ( mailbox id )  ;   }  else  {  not found mailboxes . add ( mailbox id )  ;  delete list . add ( c . get long ( orphans   id )  )  ;   }   }  finally  {  box cursor . close (  )  ;   }   }   }  for  (  long message id : delete list )   {  bind array[0] =  long . to string ( message id )  ;  database . delete ( table name where   id bind array )  ;   }   }  finally  {  c . close (  )  ;   }   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,delete unlinked,"public static void   ( sq lite database db  string table  string column  string foreign column  string foreign table )  {  int count = db . delete ( table column  +  "" not in  ( select ""  +  foreign column +  "" from "" +  foreign table +  "" ) "" null )  ;  if  ( count  >  0 )   {   log utils . w ( tag "" found ""  +  count  +  "" orphaned row ( s )  in "" +  table )  ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,do in background,@ override public  void   (  void .  .  .  params )  {  final  email service proxy service =  email service utils . get service for account ( context account id )  ;  if  ( service  !  =  null )   {  try  {  final int total count = service . search messag
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,dump,"@ override public void   (  file descriptor fd  print writer writer  string[] args )  {   context context = get context (  )  ;  writer . println ( "" installed services:"" )  ;  for  (   email service info info :  email service utils . get service info lis"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,equals,@ override public boolean   (  object o )  {  if  ( this  =  =  o )   {  return true ;   }  if  ( o  =  =  null || get class (  )   !  =  o . get class (  )  )   {  return false ;   }   sync request message that =  (  sync request message ) o ;  return m 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,find match,"private static int   (  uri uri  string method name )  {  int match = suri matcher . match ( uri )  ;  if  ( match  <  0 )   {  throw new  illegal argument exception ( "" unknown uri: ""  +  uri )  ;   }  else if  (  logging . logd )   {   log utils . v ( tag method name  +  "": uri = ""  +  uri +  ""  match is "" +  match )  ;   }  return match ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,fix parent keys,"private void   ( sq lite database db )  {   log utils . d ( tag "" fixing parent keys"" )  ;  db . execsql ( ""update ""  +   mailbox . table   name  +  "" set "" +   mailbox columns . parent   key +  "" = "" +  "" ( select "" +   mailbox .    id +  "" from "" +   mailbox . table   name +  "" as b where "" +   mailbox . table   name +  "" . "" +   mailbox columns . parent   server   id +  "" = "" +  ""b . "" +   mailbox columns . server   id +  "" and "" +   mailbox . table   name +  "" . "" +   mailbox columns . parent   server   id +  "" not null and "" +   mailbox . table   name +  "" . "" +   mailbox columns . account   key +  "" = b . "" +   mailbox . account   key +  "" ) "" )  ;  db . execsql ( ""update ""  +   mailbox . table   name  +  "" set "" +   mailbox columns . parent   key +  "" = "" +   mailbox . no   mailbox +  "" where "" +   mailbox columns . parent   key +  "" = "" +   mailbox . parent   key   uninitialized +  "" or "" +   mailbox columns . parent   key +  "" is null"" )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,folder projection from ui projection,private  string[]   ( final  string[] ui projection )  {  final  set <  string >  columns =  immutable set . copy of ( ui projection )  ;  if  ( columns . contains ( ui provider .  folder columns . unread   senders )  )   {  return ui provider . folders   projection   with   unread   senders ;   }  else  {  return ui provider . folders   projection ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,gen query account,"private  string   (  string[] ui projection  string id )  {  final  content values values = new  content values (  )  ;  final long account id =  long . parse long ( id )  ;  final  context context = get context (  )  ;   email service info info = null ;  final  set <  string >  projection columns =  immutable set . copy of ( ui projection )  ;  final  account account =  account . restore account with id ( context account id )  ;  if  ( account  =  =  null )   {   log utils . d ( tag "" account %d not found during gen query account"" account id )  ;   }  if  ( projection columns . contains ( ui provider .  account columns . capabilities )  )   {  values . put ( ui provider .  account columns . capabilities  ( account  =  =  null  ?  0 : get capabilities ( context account )  )  )  ;   }  if  ( projection columns . contains ( ui provider .  account columns . settings   intent   uri )  )   {  values . put ( ui provider .  account columns . settings   intent   uri get external uri string ( ""settings"" id )  )  ;   }  if  ( projection columns . contains ( ui provider .  account columns . compose   uri )  )   {  values . put ( ui provider .  account columns . compose   uri get external uri string email2 ( ""compose"" id )  )  ;   }  if  ( projection columns . contains ( ui provider .  account columns . reauthentication   intent   uri )  )   {  values . put ( ui provider .  account columns . reauthentication   intent   uri get incoming settings uri ( account id )  . to string (  )  )  ;   }  if  ( projection columns . contains ( ui provider .  account columns . mime   type )  )   {  values . put ( ui provider .  account columns . mime   type email   app   mime   type )  ;   }  if  ( projection columns . contains ( ui provider .  account columns . color )  )   {  values . put ( ui provider .  account columns . color account   color )  ;   }  final  mail prefs mail prefs =  mail prefs . get ( get context (  )  )  ;  if  ( projection columns . contains ( ui provider .  account columns .  settings columns . confirm   delete )  )   {  values . put ( ui provider .  account columns .  settings columns . confirm   delete mail prefs . get confirm delete (  )   ?  ""1"" : ""0"" )  ;   }  if  ( projection columns . contains ( ui provider .  account columns .  settings columns . confirm   send )  )   {  values . put ( ui provider .  account columns .  settings columns . confirm   send mail prefs . get confirm send (  )   ?  ""1"" : ""0"" )  ;   }  if  ( projection columns . contains ( ui provider .  account columns .  settings columns . swipe )  )   {  values . put ( ui provider .  account columns .  settings columns . swipe mail prefs . get conversation list swipe action integer ( false )  )  ;   }  if  ( projection columns . contains ( ui provider .  account columns .  settings columns . conv   list   icon )  )   {  values . put ( ui provider .  account columns .  settings columns . conv   list   icon get conversation list icon ( mail prefs )  )  ;   }  if  ( projection columns . contains ( ui provider .  account columns .  settings columns . auto   advance )  )   {  values . put ( ui provider .  account columns .  settings columns . auto   advance  integer . to string ( mail prefs . get auto advance mode (  )  )  )  ;   }  final long inbox mailbox id =  mailbox . find mailbox of type ( context account id  mailbox . type   inbox )  ;  if  ( projection columns . contains ( ui provider .  account columns .  settings columns . default   inbox )  && inbox mailbox id  !  =   mailbox . no   mailbox )   {  values . put ( ui provider .  account columns .  settings columns . default   inbox ui uri string ( ""uifolder"" inbox mailbox id )  )  ;   }  else  {  values . put ( ui provider .  account columns .  settings columns . default   inbox ui uri string ( ""uiinbox"" account id )  )  ;   }  if  ( projection columns . contains ( ui provider .  account columns .  settings columns . default   inbox   name )  && inbox mailbox id  !  =   mailbox . no   mailbox )   {  values . put ( ui provider .  account columns .  settings columns . default   inbox   name  mailbox . get display name ( context inbox mailbox id )  )  ;   }  if  ( projection columns . contains ( ui provider .  account columns . sync   status )  )   {  if  ( inbox mailbox id  !  =   mailbox . no   mailbox )   {  values . put ( ui provider .  account columns . sync   status ui provider .  sync status . no   sync )  ;   }  else  {  values . put ( ui provider .  account columns . sync   status ui provider .  sync status . initial   sync   needed )  ;   }   }  if  ( projection columns . contains ( ui provider .  account columns . update   settings   uri )  )   {  values . put ( ui provider .  account columns . update   settings   uri ui uri string ( ""uiacctsettings""  - 1 )  )  ;   }  if  ( projection columns . contains ( ui provider .  account columns . enable   message   transforms )  )   {  values . put ( ui provider .  account columns . enable   message   transforms 1 )  ;   }  if  ( projection columns . contains ( ui provider .  account columns . security   hold )  )   {  final int hold =  (  ( account  !  =  null &&  (  ( account . get flags (  )  &  account . flags   security   hold )   =  =  0 )  )   ?  0 : 1 )  ;  values . put ( ui provider .  account columns . security   hold hold )  ;   }  if  ( projection columns . contains ( ui provider .  account columns . account   security   uri )  )   {  values . put ( ui provider .  account columns . account   security   uri  ( account  =  =  null  ?  """" :  account security . get update security uri ( account . get id (  )  true )  . to string (  )  )  )  ;   }  if  ( projection columns . contains ( ui provider .  account columns .  settings columns . importance   markers   enabled )  )   {  values . put ( ui provider .  account columns .  settings columns . importance   markers   enabled ""0"" )  ;   }  if  ( projection columns . contains ( ui provider .  account columns .  settings columns . show   chevrons   enabled )  )   {  values . put ( ui provider .  account columns .  settings columns . show   chevrons   enabled ""0"" )  ;   }  if  ( projection columns . contains ( ui provider .  account columns .  settings columns . setup   intent   uri )  )   {  long trash id =  mailbox . find mailbox of type ( context account id  mailbox . type   trash )  ;  if  ( trash id  =  =   mailbox . no   mailbox )   {  info =  email service utils . get service info for account ( context account id )  ;  if  ( info  !  =  null && info . requires setup )   {  values . put ( ui provider .  account columns .  settings columns . setup   intent   uri get external uri string ( ""setup"" id )  )  ;   }   }   }  if  ( projection columns . contains ( ui provider .  account columns . type )  )   {  final  string type ;  if  ( info  =  =  null )   {  info =  email service utils . get service info for account ( context account id )  ;   }  if  ( info  !  =  null )   {  type = info . account type ;   }  else  {  type = ""unknown"" ;   }  values . put ( ui provider .  account columns . type type )  ;   }  if  ( projection columns . contains ( ui provider .  account columns .  settings columns . move   to   inbox )  && inbox mailbox id  !  =   mailbox . no   mailbox )   {  values . put ( ui provider .  account columns .  settings columns . move   to   inbox ui uri string ( ""uifolder"" inbox mailbox id )  )  ;   }  if  ( projection columns . contains ( ui provider .  account columns . sync   authority )  )   {  values . put ( ui provider .  account columns . sync   authority  email content . authority )  ;   }  if  ( projection columns . contains ( ui provider .  account columns . quick   response   uri )  )   {  values . put ( ui provider .  account columns . quick   response   uri combined uri string ( ""quickresponse / account"" id )  )  ;   }  if  ( projection columns . contains ( ui provider .  account columns . settings   fragment   class )  )   {  values . put ( ui provider .  account columns . settings   fragment   class preference   fragment   class   name )  ;   }  if  ( projection columns . contains ( ui provider .  account columns .  settings columns . reply   behavior )  )   {  values . put ( ui provider .  account columns .  settings columns . reply   behavior mail prefs . get default reply all (  )   ?  ui provider .  default reply behavior . reply   all : ui provider .  default reply behavior . reply )  ;   }  if  ( projection columns . contains ( ui provider .  account columns .  settings columns . show   images )  )   {  values . put ( ui provider .  account columns .  settings columns . show   images  settings .  show images . ask   first )  ;   }  final  string builder sb = gen select ( get account list map ( get context (  )  )  ui projection values )  ;  sb . append ( "" from ""  +   account . table   name  +  "" where "" +   account columns .    id +  "" =  ? "" )  ;  return sb . to string (  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,gen query account all mailboxes,"private static  string   (  string[] ui projection )  {   string builder sb = gen select ( get folder list map (  )  ui projection )  ;  sb . append ( ""  case when ""  +   mailbox columns . hierarchical   name  +  "" is null then "" +   mailbox columns . display   name +  "" else "" +   mailbox columns . hierarchical   name +  "" end as h   name"" )  ;  sb . append ( "" from ""  +   mailbox . table   name  +  "" where "" +   mailbox columns . account   key +  "" =  ?  and "" +   mailbox columns . type +  ""  <  "" +   mailbox . type   not   email +  "" and "" +   mailbox columns . type +  ""  !  =  "" +   mailbox . type   search +  "" order by h   name"" )  ;  return sb . to string (  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,gen query account mailboxes,"private static  string   (  string[] ui projection )  {   string builder sb = gen select ( get folder list map (  )  ui projection )  ;  sb . append ( "" from ""  +   mailbox . table   name  +  "" where "" +   mailbox columns . account   key +  "" =  ?  and "" +   mailbox columns . type +  ""  <  "" +   mailbox . type   not   email +  "" and "" +   mailbox columns . type +  ""  !  =  "" +   mailbox . type   search +  "" and "" +   mailbox columns . parent   key +  ""  <  0 order by "" )  ;  sb . append ( mailbox   order   by )  ;  return sb . to string (  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,gen query attachment,"private  string   (  string[] ui projection )  {  final  content values values = new  content values ( 2 )  ;  values . put (  attachment columns . content   uri create attachment uri columnsql (  )  )  ;  values . put ( ui provider .  attachment columns . supports   download   again 1 )  ;  return gen select ( get attachment map (  )  ui projection values )  . append ( "" from "" )  . append (  attachment . table   name )  . append ( "" where "" )  . append (  attachment columns .    id )  . append ( ""  =  ?  "" )  . to string (  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,gen query attachment by messageid and cid,"private  string   (  string[] ui projection )  {  final  content values values = new  content values ( 2 )  ;  values . put (  attachment columns . content   uri create attachment uri columnsql (  )  )  ;  values . put ( ui provider .  attachment columns . supports   download   again 1 )  ;  return gen select ( get attachment map (  )  ui projection values )  . append ( "" from "" )  . append (  attachment . table   name )  . append ( "" where "" )  . append (  attachment columns . message   key )  . append ( ""  =  ?  "" )  . append ( "" and "" )  . append (  attachment columns . content   id )  . append ( ""  =  ?  "" )  . to string (  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,gen query attachments,"private static  string   (  string[] ui projection  list <  string >  content type query parameters )  {   content values values = new  content values ( 1 )  ;  values . put ( ui provider .  attachment columns . supports   download   again 1 )  ;   string builder sb = gen select ( get attachment map (  )  ui projection values )  ;  sb . append ( "" from "" )  . append (  attachment . table   name )  . append ( "" where "" )  . append (  attachment columns . message   key )  . append ( ""  =  ?  "" )  ;  if  ( content type query parameters  !  =  null &&  ! content type query parameters . is empty (  )  )   {  final int size = content type query parameters . size (  )  ;  sb . append ( ""and  ( "" )  ;  for  ( int i = 0 ;  i  <  size ;  i +  +  )   {  final  string content type = content type query parameters . get ( i )  ;  sb . append (  attachment columns . mime   type )  . append ( "" like '"" )  . append ( content type )  . append ( ""%'"" )  ;  if  ( i  !  =  size  -  1 )   {  sb . append ( "" or "" )  ;   }   }  sb . append ( "" ) "" )  ;   }  return sb . to string (  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,gen query conversation,"private static  string   (  string[] ui projection )  {   string builder sb = gen select ( get message list map (  )  ui projection )  ;  sb . append ( "" from ""  +   message . table   name  +  "" where "" +   message columns .    id +  "" =  ? "" )  ;  return sb . to string (  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,gen query mailbox,"private  string   (  string[] ui projection  string id )  {  long mailbox id =  long . parse long ( id )  ;   content values values = new  content values ( 3 )  ;  if  ( m search params  !  =  null && mailbox id  =  =  m search params . m search mailbox id )   {  values . put ( ui provider .  folder columns . load   more   uri ui uri string ( ""uiloadmore"" mailbox id )  )  ;  values . put ( ui provider .  folder columns . capabilities ui provider .  folder capabilities . delete )  ;   }  else  {   context context = get context (  )  ;   mailbox mailbox =  mailbox . restore mailbox with id ( context mailbox id )  ;  if  ( mailbox  !  =  null )   {   string protocol =  account . get protocol ( context mailbox . m account key )  ;   email service info info =  email service utils . get service info ( context protocol )  ;  if  ( info  !  =  null && info . offer load more )   {  values . put ( ui provider .  folder columns . load   more   uri ui uri string ( ""uiloadmore"" mailbox id )  )  ;   }  values . put ( ui provider .  folder columns . capabilities get folder capabilities ( info mailbox . m type mailbox id )  )  ;  boolean should encode persistent id = false ;  if  ( ui projection  =  =  null )   {  should encode persistent id = true ;   }  else  {  for  (  final  string column : ui projection )   {  if  (  text utils . equals ( column ui provider .  folder columns . persistent   id )  )   {  should encode persistent id = true ;  break ;   }   }   }  if  ( should encode persistent id )   {  values . put ( ui provider .  folder columns . persistent   id  base64 . encode to string ( mailbox . m server id . get bytes (  )   base64 . url   safe |  base64 . no   wrap |  base64 . no   padding )  )  ;   }   }   }   string builder sb = gen select ( get folder list map (  )  ui projection values )  ;  sb . append ( "" from ""  +   mailbox . table   name  +  "" where "" +   mailbox columns .    id +  "" =  ? "" )  ;  return sb . to string (  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,gen query mailbox messages,"private static  string   (  string[] ui projection final boolean unseen only )  {   string builder sb = gen select ( get message list map (  )  ui projection )  ;  append conversation info columns ( sb )  ;  sb . append ( "" from ""  +   message . table   name  +  "" where "" +   message . flag   loaded   selection +  "" and "" +   message columns . mailbox   key +  "" =  ?  "" )  ;  if  ( unseen only )   {  sb . append ( ""and "" )  . append (  message columns . flag   seen )  . append ( ""  =  0 "" )  ;  sb . append ( ""and "" )  . append (  message columns . flag   read )  . append ( ""  =  0 "" )  ;   }  sb . append ( ""order by ""  +   message columns . timestamp  +  "" desc "" )  ;  sb . append ( ""limit ""  +  ui provider . conversation   projection   query   cursor   window   limit )  ;  return sb . to string (  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,gen query recent mailboxes,"private static  string   (  string[] ui projection )  {   string builder sb = gen select ( get folder list map (  )  ui projection )  ;  sb . append ( "" from ""  +   mailbox . table   name  +  "" where "" +   mailbox columns . account   key +  "" =  ?  and "" +   mailbox columns . type +  ""  <  "" +   mailbox . type   not   email +  "" and "" +   mailbox columns . type +  ""  !  =  "" +   mailbox . type   search +  "" and "" +   mailbox columns . parent   key +  ""  <  0 and "" +   mailbox columns . last   touched   time +  ""  >  0 order by "" +   mailbox columns . last   touched   time +  "" desc"" )  ;  return sb . to string (  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,gen query subfolders,"private static  string   (  string[] ui projection )  {   string builder sb = gen select ( get folder list map (  )  ui projection )  ;  sb . append ( "" from ""  +   mailbox . table   name  +  "" where "" +   mailbox columns . parent   key +  ""  =  ?  order by "" )  ;  sb . append ( mailbox   order   by )  ;  return sb . to string (  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,gen query view message,"private  message query   (  string[] ui projection  string id )  {   context context = get context (  )  ;  long message id =  long . parse long ( id )  ;   message msg =  message . restore message with id ( context message id )  ;   content values values = new  content values (  )  ;   string attachment json = null ;  if  ( msg  !  =  null )   {   body body =  body . restore body with message id ( context message id )  ;  if  ( body  !  =  null )   {  if  ( body . m html content  !  =  null )   {  if  ( img   tag   start   regex . matcher ( body . m html content )  . find (  )  )   {  values . put ( ui provider .  message columns . embeds   external   resources 1 )  ;   }   }   }   address[] from list =  address . from header ( msg . m from )  ;  int auto show images = 0 ;  final  mail prefs mail prefs =  mail prefs . get ( context )  ;  for  (   address sender : from list )   {  final  string email = sender . get address (  )  ;  if  ( mail prefs . get display images from sender ( email )  )   {  auto show images = 1 ;  break ;   }   }  values . put ( ui provider .  message columns . always   show   images auto show images )  ;   attachment[] atts =  attachment . restore attachments with message id ( context message id )  ;  if  ( atts . length  >  0 )   {   array list < com . android . mail . providers .  attachment >  ui atts = new  array list < com . android . mail . providers .  attachment >  (  )  ;  for  (   attachment att : atts )   {  com . android . mail . providers .  attachment ui att = new com . android . mail . providers .  attachment (  )  ;  ui att . set name ( att . m file name )  ;  ui att . set content type ( att . m mime type )  ;  ui att . size =  ( int ) att . m size ;  ui att . uri = ui uri ( ""uiattachment"" att . m id )  ;  ui att . flags = att . m flags ;  ui atts . add ( ui att )  ;   }  values . put ( ui provider .  message columns . attachments ""@ ? "" )  ;  attachment json = com . android . mail . providers .  attachment . tojson array ( ui atts )  ;   }  if  ( msg . m draft info  !  =  0 )   {  values . put ( ui provider .  message columns . append   ref   message   content  ( msg . m draft info &  message . draft   info   append   ref   message )   !  =  0  ?  1 : 0 )  ;  values . put ( ui provider .  message columns . quote   start   pos msg . m draft info &  message . draft   info   quote   pos   mask )  ;   }  if  (  ( msg . m flags &  message . flag   incoming   meeting   invite )   !  =  0 )   {  values . put ( ui provider .  message columns . event   intent   uri ""content: /  / ui . email2 . android . com / event / ""  +  msg . m id )  ;   }  final  uri attachment list uri = ui uri ( ""uiattachments"" message id )  . build upon (  )  . append query parameter ( "" message loaded"" msg . m flag loaded  =  =   message . flag   loaded   complete  ?  ""true"" : ""false"" )  . build (  )  ;  values . put ( ui provider .  message columns . attachment   list   uri attachment list uri . to string (  )  )  ;   }   string builder sb = gen select ( get message view map (  )  ui projection values )  ;  sb . append ( "" from ""  +   message . table   name  +  "" left join "" +   body . table   name +  "" on "" +   body columns . message   key +  "" = "" +   message . table   name +  "" . "" +   message columns .    id +  "" where "" +   message . table   name +  "" . "" +   message columns .    id +  "" =  ? "" )  ;   string sql = sb . to string (  )  ;  return new  message query ( sql attachment json )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,gen select,"private static  string builder   (  projection map map  string[] projection  content values values )  {  final  string builder sb = new  string builder ( ""select "" )  ;  boolean first = true ;  for  (  final  string column : projection )   {  if  ( first )   {  first = false ;   }  else  {  sb . append ( ' ' )  ;   }  final  string val ;  if  ( values . contains key ( column )  )   {  final  string value = values . get as string ( column )  ;  if  ( value  =  =  null )   {  val = ""null as ""  +  column ;   }  else if  ( value . starts with ( ""@"" )  )   {  val = value . substring ( 1 )   +  "" as ""  +  column ;   }  else  {  val =  database utils . sql escape string ( value )   +  "" as ""  +  column ;   }   }  else  {  final  string map val = map . get ( column )  ;  if  ( map val  =  =  null )   {  val = ""null as ""  +  column ;   }  else  {  val = map val ;   }   }  sb . append ( val )  ;   }  return sb ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,get account list map,"private static  projection map   (  context context )  {  if  ( s account list map  =  =  null )   {  final  projection map .  builder builder =  projection map . builder (  )  . add (  base columns .    id  account columns .    id )  . add ( ui provider .  account columns . folder   list   uri uri with id ( ""uifolders"" )  )  . add ( ui provider .  account columns . full   folder   list   uri uri with id ( ""uifullfolders"" )  )  . add ( ui provider .  account columns . all   folder   list   uri uri with id ( ""uiallfolders"" )  )  . add ( ui provider .  account columns . name  account columns . display   name )  . add ( ui provider .  account columns . account   manager   name  account columns . email   address )  . add ( ui provider .  account columns . account   id  account columns . email   address )  . add ( ui provider .  account columns . sender   name  account columns . sender   name )  . add ( ui provider .  account columns . undo   uri  ( ""'content: /  / ""  +   email content . authority  +  "" / uiundo'"" )  )  . add ( ui provider .  account columns . uri uri with id ( ""uiaccount"" )  )  . add ( ui provider .  account columns . search   uri uri with id ( ""uisearch"" )  )  . add ( ui provider .  account columns . provider   version ""1"" )  . add ( ui provider .  account columns . sync   status ""0"" )  . add ( ui provider .  account columns . recent   folder   list   uri uri with id ( ""uirecentfolders"" )  )  . add ( ui provider .  account columns . default   recent   folder   list   uri uri with id ( ""uidefaultrecentfolders"" )  )  . add ( ui provider .  account columns .  settings columns . signature  account columns . signature )  . add ( ui provider .  account columns .  settings columns . snap   headers  integer . to string ( ui provider .  snap header value . always )  )  . add ( ui provider .  account columns .  settings columns . confirm   archive ""0"" )  . add ( ui provider .  account columns .  settings columns . conversation   view   mode  integer . to string ( ui provider .  conversation view mode . undefined )  )  . add ( ui provider .  account columns .  settings columns . veiled   address   pattern null )  ;  final  string feedback uri = context . get string ( r . string . email   feedback   uri )  ;  if  (  !  text utils . is empty ( feedback uri )  )   {  builder . add ( ui provider .  account columns . send   feedback   intent   uri ""'""  +  feedback uri  +  ""'"" )  ;   }  final  string help uri = context . get string ( r . string . help   uri )  ;  if  (  !  text utils . is empty ( help uri )  )   {  builder . add ( ui provider .  account columns . help   intent   uri ""'""  +  help uri  +  ""'"" )  ;   }  s account list map = builder . build (  )  ;   }  return s account list map ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,get account manager account,private static android . accounts .  account   ( final  context context final  string email address final  string protocol )  {  final  email service info info =  email service utils . get service info ( context protocol )  ;  if  ( info  =  =  null )   {  return null ;   }  return new android . accounts .  account ( email address info . account type )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,get attachment map,"private static  projection map   (  )  {  if  ( s attachment map  =  =  null )   {  s attachment map =  projection map . builder (  )  . add ( ui provider .  attachment columns . name  attachment columns . filename )  . add ( ui provider .  attachment columns . size  attachment columns . size )  . add ( ui provider .  attachment columns . uri uri with id ( ""uiattachment"" )  )  . add ( ui provider .  attachment columns . content   type  attachment columns . mime   type )  . add ( ui provider .  attachment columns . state  attachment columns . ui   state )  . add ( ui provider .  attachment columns . destination  attachment columns . ui   destination )  . add ( ui provider .  attachment columns . downloaded   size  attachment columns . ui   downloaded   size )  . add ( ui provider .  attachment columns . content   uri  attachment columns . content   uri )  . add ( ui provider .  attachment columns . flags  attachment columns . flags )  . build (  )  ;   }  return s attachment map ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,get base notification uri,private static  uri   ( int match )  {   uri base uri = null ;  switch  ( match )   {  case message: case message   id: case synced   message   id: base uri =  message . notifier   uri ;  break ;  case account: case account   id: base uri =  account . notifier   uri ;  break ;   }  return base uri ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,get batch notifications set,private  set <  uri >    (  )  {  return mtl batch notifications . get (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,get bits,"private static  string   ( int bit field )  {   string builder sb = new  string builder ( "" "" )  ;  for  ( int i = 0 ;  i  <  32 ;  i +  +   bit field >  >  = 1 )   {  if  (  ( bit field & 1 )   !  =  0 )   {  sb . append ( i )  . append ( "" "" )  ;   }   }  return sb . to string (  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,get body file,"protected static  file   ( final  context c final long message id final  string ext )  throws  file not found exception  {  if  (  !  text utils . equals ( ext ""html"" )  &&  !  text utils . equals ( ext ""txt"" )  )   {  throw new  illegal argument exception ( ""ext must be one of 'html' or 'txt'"" )  ;   }  long l1 = message id  /  100 % 100 ;  long l2 = message id % 100 ;  final  file dir = new  file ( c . get files dir (  )  ""body / ""  +   long . to string ( l1 )   +  "" / "" +   long . to string ( l2 )  +  "" / "" )  ;  if  (  ! dir . is directory (  )  &&  ! dir . mkdirs (  )  )   {  throw new  file not found exception ( "" could not create directory for body file"" )  ;   }  return new  file ( dir  long . to string ( message id )   +  "" . ""  +  ext )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,get capabilities,"private static int   (  context context final  account account )  {  if  ( account  =  =  null )   {  return 0 ;   }  final  string protocol = account . get protocol ( context )  ;  int capabilities ;  if  (  text utils . equals ( context . get string ( r . string . protocol   imap )  protocol )  ||  text utils . equals ( context . get string ( r . string . protocol   legacy   imap )  protocol )  )   {  capabilities =  account capabilities . syncable   folders |  account capabilities . server   search |  account capabilities . folder   server   search|  account capabilities . undo|  account capabilities . discard   conversation   drafts ;   }  else if  (  text utils . equals ( context . get string ( r . string . protocol   pop3 )  protocol )  )   {  capabilities =  account capabilities . undo |  account capabilities . discard   conversation   drafts ;   }  else if  (  text utils . equals ( context . get string ( r . string . protocol   eas )  protocol )  )   {  final  string eas version = account . m protocol version ;  double eas version double = 2 . 5d ;  if  ( eas version  !  =  null )   {  try  {  eas version double =  double . parse double ( eas version )  ;   }  catch  (  final  number format exception e )   {   }   }  if  ( eas version double  >  =  12 . 0d )   {  capabilities =  account capabilities . syncable   folders |  account capabilities . server   search |  account capabilities . folder   server   search|  account capabilities . smart   reply|  account capabilities . undo|  account capabilities . discard   conversation   drafts ;   }  else  {  capabilities =  account capabilities . syncable   folders |  account capabilities . smart   reply |  account capabilities . undo|  account capabilities . discard   conversation   drafts ;   }   }  else  {   log utils . w ( tag "" unknown protocol for account %d"" account . get id (  )  )  ;  return 0 ;   }   log utils . d ( tag ""get capabilities (  )  for %d  ( protocol %s ) : 0x%x %s"" account . get id (  )  protocol capabilities get bits ( capabilities )  )  ;  final  resources res = context . get resources (  )  ;  if  ( res . get boolean ( r . bool . feedback   supported )  )   {  capabilities| =  account capabilities . send   feedback ;   }  if  (  !  text utils . is empty ( context . get resources (  )  . get string ( r . string . help   uri )  )  )   {  capabilities| =  account capabilities . help   content ;   }  capabilities| =  account capabilities . empty   trash ;  capabilities| =  account capabilities . nested   folders ;  capabilities| =  account capabilities . client   sanitized   html ;  return capabilities ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,get conversation list icon,private static int   (  mail prefs mail prefs )  {  return mail prefs . get show sender images (  )   ?  ui provider .  conversation list icon . sender   image : ui provider .  conversation list icon . none ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,get database,"public sq lite database   (  context context )  {  synchronized  ( s database lock )   {  if  ( m database  !  =  null )   {  return m database ;   }  check databases (  )  ;  db helper .  database helper helper = new db helper .  database helper ( context database   name )  ;  m database = helper . get writable database (  )  ;  db helper .  body database helper body helper = new db helper .  body database helper ( context body   database   name )  ;  m body database = body helper . get writable database (  )  ;  if  ( m body database  !  =  null )   {   string body file name = m body database . get path (  )  ;  m database . execsql ( ""attach \""""  +  body file name  +  ""\"" as  body database"" )  ;   }  restore if needed ( context m database )  ;  delete message orphans ( m database  message . updated   table   name )  ;  delete message orphans ( m database  message . deleted   table   name )  ;  delete unlinked ( m database  mailbox . table   name  mailbox columns . account   key  account columns .    id  account . table   name )  ;  delete unlinked ( m database  message . table   name  message columns . account   key  account columns .    id  account . table   name )  ;  delete unlinked ( m database  policy . table   name  policy columns .    id  account columns . policy   key  account . table   name )  ;  fix parent keys ( m database )  ;  init ui provider (  )  ;  return m database ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,get delayed sync handler,"synchronized public  handler   (  )  {  if  ( m delayed sync handler  =  =  null )   {  m delayed sync handler = new  handler ( get context (  )  . get main looper (  )  new  callback (  )  {  @ override public boolean handle message (  android . os .  message msg )  {  synchronized  ( m delayed sync requests )   {  final  sync request message request =  (  sync request message ) msg . obj ;  final android . accounts .  account account = request . m account ;  final  bundle extras =  mailbox . create sync bundle ( request . m mailbox id )  ;   content resolver . request sync ( account request . m authority extras )  ;   log utils . i ( tag ""request sync get delayed sync handler %s  %s"" account . to string (  )  extras . to string (  )  )  ;  m delayed sync requests . remove ( request )  ;  return true ;   }   }   }   )  ;   }  return m delayed sync handler ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,get external uri string,"private static  string   (  string segment  string account )  {  return base   external   uri . build upon (  )  . append path ( segment )  . append query parameter ( ""account"" account )  . build (  )  . to string (  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,get external uri string email,"private static  string   (  string segment  string account )  {  return base   exteral   uri2 . build upon (  )  . append path ( segment )  . append query parameter ( ""account"" account )  . build (  )  . to string (  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,get folder,"public static  folder   (  context context long mailbox id )  {  final  content resolver resolver = context . get content resolver (  )  ;  final  cursor fc = resolver . query (  email provider . ui uri ( ""uifolder"" mailbox id )  ui provider . folders   projection null null null )  ;  if  ( fc  =  =  null )   {   log utils . e ( tag "" null folder cursor for mailbox id %d"" mailbox id )  ;  return null ;   }   folder ui folder = null ;  try  {  if  ( fc . move to first (  )  )   {  ui folder = new  folder ( fc )  ;   }   }  finally  {  fc . close (  )  ;   }  return ui folder ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,get folder capabilities,private int   (  email service info info int mailbox type long mailbox id )  {  if  ( mailbox type  =  =   mailbox . type   search )   {  return ui provider .  folder capabilities . delete ;   }  int caps = 0 ;  if  ( mailbox type  !  =   mailbox . type   drafts )   {  caps = ui provider .  folder capabilities . delete ;   }  if  ( info  !  =  null && info . offer lookback )   {  caps| = ui provider .  folder capabilities . supports   settings ;   }  if  ( mailbox type  =  =   mailbox . type   mail || mailbox type  =  =   mailbox . type   trash || mailbox type  =  =   mailbox . type   junk || mailbox type  =  =   mailbox . type   inbox )   {  caps| = ui provider .  folder capabilities . can   accept   moved   messages ;  caps| = ui provider .  folder capabilities . allows   remove   conversation ;   }  if  ( mailbox type  =  =   mailbox . type   trash )   {  caps = ui provider .  folder capabilities . can   accept   moved   messages | ui provider .  folder capabilities . allows   remove   conversation | ui provider .  folder capabilities . delete| ui provider .  folder capabilities . delete   action   final ;   }  if  ( is virtual mailbox ( mailbox id )  )   {  caps| = ui provider .  folder capabilities . is   virtual ;   }  if  ( info  =  =  null ||  ! info . offer move to )   {  caps& = ~ui provider .  folder capabilities . can   accept   moved   messages & ~ui provider .  folder capabilities . allows   remove   conversation & ~ui provider .  folder capabilities . allows   move   to   inbox ;   }  if  ( mailbox type  =  =   mailbox . type   outbox || mailbox type  =  =   mailbox . type   sent )   {  caps| = ui provider .  folder capabilities . show   recipients ;   }  return caps ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,get folder display name,private  string   ( int folder type  string default name )  {  final int res id ;  switch  ( folder type )   {  case ui provider .  folder type . inbox: res id = r . string . mailbox   name   display   inbox ;  break ;  case ui provider .  folder type . outbox: res id = r . string . mailbox   name   display   outbox ;  break ;  case ui provider .  folder type . draft: res id = r . string . mailbox   name   display   drafts ;  break ;  case ui provider .  folder type . trash: res id = r . string . mailbox   name   display   trash ;  break ;  case ui provider .  folder type . sent: res id = r . string . mailbox   name   display   sent ;  break ;  case ui provider .  folder type . spam: res id = r . string . mailbox   name   display   junk ;  break ;  case ui provider .  folder type . starred: res id = r . string . mailbox   name   display   starred ;  break ;  case ui provider .  folder type . unread: res id = r . string . mailbox   name   display   unread ;  break ;  default : return default name ;   }  return get context (  )  . get string ( res id )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,get folder list cursor,private  cursor   ( final  cursor input cursor final long account id final  string[] ui projection )  {  final  matrix cursor mc = new  matrix cursor with cached columns ( ui projection )  ;  if  ( input cursor  !  =  null )   {  try  {  remap folder cursor ( input cursor mc account id ui projection )  ;   }  finally  {  input cursor . close (  )  ;   }   }  return mc ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AttachmentService.java,try start download,"synchronized boolean   ( final  download request req )  {  final  email service proxy service =  email service utils . get service for account (  attachment service . this req . m account id )  ;  boolean already in progress = m downloads in progress . get ( req . m attachment id )   !  =  null ;  if  ( already in progress )   {  debug trace ( "" this attachment #%d is already in progress"" req . m attachment id )  ;  return false ;   }  try  {  start download ( service req )  ;   }  catch  (   remote exception e )   {  cancel download ( req )  ;   }  return true ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AttachmentService.java,validate download request,"boolean   ( final  download request dr final int callback timeout final long now )  {  final long time since callback = now  -  dr . m last callback time ;  if  ( time since callback  >  callback timeout )   {   log utils . d ( log   tag "" timeout for  download request #%d "" dr . m attachment id )  ;  return true ;   }  return false ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AttachmentService.java,watchdog alarm,"void   ( final  attachment service service final int callback timeout )  {  debug trace ( "" received a timer callback in the watchdog"" )  ;  final  collection <  download request >  in progress requests = service . m downloads in progress . values (  )  ;  for  (   download request req : in progress requests )   {  debug trace ( "" checking in - progress request with id: %d"" req . m attachment id )  ;  final boolean should cancel download = validate download request ( req callback timeout  system . current time millis (  )  )  ;  if  ( should cancel download )   {   log utils . w ( log   tag "" cancelling  download request #%d"" req . m attachment id )  ;  service . cancel download ( req )  ;   }   }  if  ( service . is connected (  )  )   {  service . process queue (  )  ;   }  issue next watchdog alarm ( service )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,get folder list map,"private static  projection map   (  )  {  if  ( s folder list map  =  =  null )   {  s folder list map =  projection map . builder (  )  . add (  base columns .    id  mailbox columns .    id )  . add ( ui provider .  folder columns . persistent   id  mailbox columns . server   id )  . add ( ui provider .  folder columns . uri uri with id ( ""uifolder"" )  )  . add ( ui provider .  folder columns . name ""display name"" )  . add ( ui provider .  folder columns . has   children  mailbox columns . flags  +  ""&""  +   mailbox . flag   has   children )  . add ( ui provider .  folder columns . capabilities folder   capabilities )  . add ( ui provider .  folder columns . sync   window ""3"" )  . add ( ui provider .  folder columns . conversation   list   uri uri with id ( ""uimessages"" )  )  . add ( ui provider .  folder columns . child   folders   list   uri uri with id ( ""uisubfolders"" )  )  . add ( ui provider .  folder columns . unread   count  mailbox columns . unread   count )  . add ( ui provider .  folder columns . total   count total   count )  . add ( ui provider .  folder columns . refresh   uri uri with id ( query   uirefresh )  )  . add ( ui provider .  folder columns . sync   status  mailbox columns . ui   sync   status )  . add ( ui provider .  folder columns . last   sync   result  mailbox columns . ui   last   sync   result )  . add ( ui provider .  folder columns . type folder   type )  . add ( ui provider .  folder columns . icon   res   id folder   icon )  . add ( ui provider .  folder columns . load   more   uri uri with id ( ""uiloadmore"" )  )  . add ( ui provider .  folder columns . hierarchical   desc  mailbox columns . hierarchical   name )  . add ( ui provider .  folder columns . parent   uri ""case when ""  +   mailbox columns . parent   key  +  "" = "" +   mailbox . no   mailbox +  "" then null else "" +  uri with column ( ""uifolder""  mailbox columns . parent   key )  +  "" end"" )  . add ( ui provider .  folder columns . unread   senders "" ( select group   concat ( ""  +   message columns . from   list  +  "" )  from "" +  "" ( select "" +   message columns . from   list +  "" from "" +   message . table   name +  "" where "" +   message columns . mailbox   key +  "" = "" +   mailbox . table   name +  "" . "" +   mailbox columns .    id +  "" and "" +   message columns . flag   read +  "" = 0"" +  "" group by "" +   message columns . from   list +  "" order by "" +   message columns . timestamp +  "" desc )  ) "" )  . build (  )  ;   }  return s folder list map ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,get folder type from mailbox type,private static int   ( int mailbox type )  {  switch  ( mailbox type )   {  case  mailbox . type   inbox: return ui provider .  folder type . inbox ;  case  mailbox . type   outbox: return ui provider .  folder type . outbox ;  case  mailbox . type   drafts: return ui provider .  folder type . draft ;  case  mailbox . type   trash: return ui provider .  folder type . trash ;  case  mailbox . type   sent: return ui provider .  folder type . sent ;  case  mailbox . type   junk: return ui provider .  folder type . spam ;  case  mailbox . type   starred: return ui provider .  folder type . starred ;  case  mailbox . type   unread: return ui provider .  folder type . unread ;  case  mailbox . type   search: return ui provider .  folder type . default | ui provider .  folder type . search ;  default : return ui provider .  folder type . default ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,get incoming settings uri,"public static  uri   ( long account id )  {  final  uri .  builder base uri =  uri . parse ( ""auth: /  / ""  +   email content . email   package   name  +  "" . account   settings / incoming / "" )  . build upon (  )  ;   intent utilities . set account id ( base uri account id )  ;  return base uri . build (  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,get mailbox,private  mailbox   ( final  uri uri )  {  final long id =  long . parse long ( uri . get last path segment (  )  )  ;  return  mailbox . restore mailbox with id ( get context (  )  id )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,get mailbox by account id and type,private  mailbox   ( final long account id final int mailbox type )  {   mailbox mailbox =  mailbox . restore mailbox of type ( get context (  )  account id mailbox type )  ;  if  ( mailbox  =  =  null )   {  mailbox = create mailbox ( account id mailbox type )  ;   }  return mailbox ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,get mailbox message count,"private  cursor   (  uri uri )  {  sq lite database db = get database ( get context (  )  )  ;   string mailbox id = uri . get last path segment (  )  ;  return db . raw query ( ""select count ( * )  from  message where mailbox key =  ? "" new  string[] { mailbox id }  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,get mailbox type from folder type,"private static int   ( int folder type )  {  switch  ( folder type )   {  case ui provider .  folder type . default: return  mailbox . type   mail ;  case ui provider .  folder type . inbox: return  mailbox . type   inbox ;  case ui provider .  folder type . outbox: return  mailbox . type   outbox ;  case ui provider .  folder type . draft: return  mailbox . type   drafts ;  case ui provider .  folder type . trash: return  mailbox . type   trash ;  case ui provider .  folder type . sent: return  mailbox . type   sent ;  case ui provider .  folder type . spam: return  mailbox . type   junk ;  case ui provider .  folder type . starred: return  mailbox . type   starred ;  case ui provider .  folder type . unread: return  mailbox . type   unread ;  case ui provider .  folder type . default | ui provider .  folder type . search: return  mailbox . type   search ;  default : throw new  illegal argument exception ( "" unable to map folder type: ""  +  folder type )  ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,get message from last segment,private  message   (  uri uri )  {  long message id =  long . parse long ( uri . get last path segment (  )  )  ;  return  message . restore message with id ( get context (  )  message id )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,get message list map,"private static  projection map   (  )  {  if  ( s message list map  =  =  null )   {  s message list map =  projection map . builder (  )  . add (  base columns .    id  message columns .    id )  . add ( ui provider .  conversation columns . uri uri with id ( ""uimessage"" )  )  . add ( ui provider .  conversation columns . message   list   uri uri with id ( ""uimessage"" )  )  . add ( ui provider .  conversation columns . subject  message columns . subject )  . add ( ui provider .  conversation columns . snippet  message columns . snippet )  . add ( ui provider .  conversation columns . conversation   info null )  . add ( ui provider .  conversation columns . date   received   ms  message columns . timestamp )  . add ( ui provider .  conversation columns . has   attachments  message columns . flag   attachment )  . add ( ui provider .  conversation columns . num   messages ""1"" )  . add ( ui provider .  conversation columns . num   drafts ""0"" )  . add ( ui provider .  conversation columns . sending   state  integer . to string (  conversation sending state . other )  )  . add ( ui provider .  conversation columns . priority  integer . to string (  conversation priority . low )  )  . add ( ui provider .  conversation columns . read  message columns . flag   read )  . add ( ui provider .  conversation columns . seen  message columns . flag   seen )  . add ( ui provider .  conversation columns . starred  message columns . flag   favorite )  . add ( ui provider .  conversation columns . flags conversation   flags )  . add ( ui provider .  conversation columns . account   uri uri with column ( ""uiaccount""  message columns . account   key )  )  . add ( ui provider .  conversation columns . sender   info  message columns . from   list )  . add ( ui provider .  conversation columns . order   key  message columns . timestamp )  . build (  )  ;   }  return s message list map ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,get message view map,"private static  projection map   (  )  {  if  ( s message view map  =  =  null )   {  s message view map =  projection map . builder (  )  . add (  base columns .    id  message . table   name  +  "" . ""  +   message columns .    id )  . add ( ui provider .  message columns . server   id  sync columns . server   id )  . add ( ui provider .  message columns . uri uri withfq id ( ""uimessage""  message . table   name )  )  . add ( ui provider .  message columns . conversation   id uri withfq id ( ""uimessage""  message . table   name )  )  . add ( ui provider .  message columns . subject  message columns . subject )  . add ( ui provider .  message columns . snippet  message columns . snippet )  . add ( ui provider .  message columns . from  message columns . from   list )  . add ( ui provider .  message columns . to  message columns . to   list )  . add ( ui provider .  message columns . cc  message columns . cc   list )  . add ( ui provider .  message columns . bcc  message columns . bcc   list )  . add ( ui provider .  message columns . reply   to  message columns . reply   to   list )  . add ( ui provider .  message columns . date   received   ms  message columns . timestamp )  . add ( ui provider .  message columns . body   html null )  . add ( ui provider .  message columns . body   text null )  . add ( ui provider .  message columns . ref   message   id ""0"" )  . add ( ui provider .  message columns . draft   type not   a   draft   string )  . add ( ui provider .  message columns . append   ref   message   content ""0"" )  . add ( ui provider .  message columns . has   attachments  message columns . flag   attachment )  . add ( ui provider .  message columns . attachment   list   uri uri withfq id ( ""uiattachments""  message . table   name )  )  . add ( ui provider .  message columns . attachment   by   cid   uri uri withfq id ( ""uiattachmentbycid""  message . table   name )  )  . add ( ui provider .  message columns . message   flags message   flags )  . add ( ui provider .  message columns . draft   type message   draft   type )  . add ( ui provider .  message columns . message   account   uri uri with column ( ""uiaccount""  message columns . account   key )  )  . add ( ui provider .  message columns . starred  message columns . flag   favorite )  . add ( ui provider .  message columns . read  message columns . flag   read )  . add ( ui provider .  message columns . seen  message columns . flag   seen )  . add ( ui provider .  message columns . spam   warning   string null )  . add ( ui provider .  message columns . spam   warning   level  integer . to string ( ui provider .  spam warning level . no   warning )  )  . add ( ui provider .  message columns . spam   warning   link   type  integer . to string ( ui provider .  spam warning link type . no   link )  )  . add ( ui provider .  message columns . via   domain null )  . add ( ui provider .  message columns . clipped ""0"" )  . add ( ui provider .  message columns . permalink null )  . build (  )  ;   }  return s message view map ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,get quick response map,"private static  projection map   (  )  {  if  ( s quick response map  =  =  null )   {  s quick response map =  projection map . builder (  )  . add ( ui provider .  quick response columns . text  quick response columns . text )  . add ( ui provider .  quick response columns . uri ""'""  +  combined uri string ( ""quickresponse"" """" )   +  ""'||"" +   quick response columns .    id )  . build (  )  ;   }  return s quick response map ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,get search mailbox,private  mailbox   ( long account id )  {   context context = get context (  )  ;   mailbox m =  mailbox . restore mailbox of type ( context account id  mailbox . type   search )  ;  if  ( m  =  =  null )   {  m = new  mailbox (  )  ;  m . m account key = account id ;  m . m server id = search   mailbox   server   id ;  m . m flag visible = false ;  m . m display name = search   mailbox   server   id ;  m . m sync interval = 0 ;  m . m type =  mailbox . type   search ;  m . m flags =  mailbox . flag   holds   mail ;  m . m parent key =  mailbox . no   mailbox ;  m . save ( context )  ;   }  return m ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,get string,@ override public  string   ( int column )  {  if  ( column  =  =  m content uri index )   {  return m content uri strings[get position (  ) ] ;   }  else  {  return super . get string ( column )  ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,get type,"@ override public  string   (  uri uri )  {  int match = find match ( uri ""get type"" )  ;  switch  ( match )   {  case body   id: return ""vnd . android . cursor . item / email - body"" ;  case body: return ""vnd . android . cursor . dir / email - body"" ;  c"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,get ui folder cursor row from mailbox cursor row,private  cursor   (  matrix cursor mc int projection length  cursor mailbox cursor int name column int type column )  {  final  matrix cursor .  row builder builder = mc . new row (  )  ;  for  ( int i = 0 ;  i  <  projection length ;  i +  +  )   {  if  ( name column  =  =  i )   {  final int type = mailbox cursor . get int ( type column )  ;  builder . add ( get folder display name ( type mailbox cursor . get string ( i )  )  )  ;   }  else  {  builder . add ( mailbox cursor . get string ( i )  )  ;   }   }  return mc ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,get virtual mailbox account id,private static long   ( long mailbox id )  {  return mailbox id  >  >  32 ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,get virtual mailbox account id string,private static  string   ( long mailbox id )  {  return  long . to string ( mailbox id  >  >  32 )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,get virtual mailbox cursor,private  cursor   ( long mailbox id  string[] projection )  {   matrix cursor mc = new  matrix cursor with cached columns ( projection 1 )  ;  mc . add row ( get virtual mailbox row ( get virtual mailbox account id ( mailbox id )  get virtual mailbox type ( mailbox id )  projection )  )  ;  return mc ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,get virtual mailbox id,public static long   ( long account id int type )  {  return  ( account id  <  <  32 )   +  type ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,get virtual mailbox messages cursor,"private static  cursor   ( sq lite database db  string[] ui projection long mailbox id final boolean unseen only )  {   content values values = new  content values (  )  ;  values . put ( ui provider .  conversation columns . color conversation   color )  ;  final int virtual mailbox id = get virtual mailbox type ( mailbox id )  ;  final  string[] selection args ;   string builder sb = gen select ( get message list map (  )  ui projection values )  ;  append conversation info columns ( sb )  ;  sb . append ( "" from ""  +   message . table   name  +  "" where "" +   message . flag   loaded   selection +  "" and "" )  ;  if  ( is combined mailbox ( mailbox id )  )   {  if  ( unseen only )   {  sb . append (  message columns . flag   seen )  . append ( "" = 0 and "" )  ;  sb . append (  message columns . flag   read )  . append ( "" = 0 and "" )  ;   }  selection args = null ;   }  else  {  if  ( virtual mailbox id  =  =   mailbox . type   inbox )   {  throw new  illegal argument exception ( "" no virtual mailbox for: ""  +  mailbox id )  ;   }  sb . append (  message columns . account   key )  . append ( "" =  ?  and "" )  ;  selection args = new  string[] { get virtual mailbox account id string ( mailbox id )  }  ;   }  switch  ( get virtual mailbox type ( mailbox id )  )   {  case  mailbox . type   inbox: sb . append (  message columns . mailbox   key  +  "" in  ( select ""  +   mailbox columns .    id +  "" from "" +   mailbox . table   name +  "" where "" +   mailbox columns . type +  "" = "" +   mailbox . type   inbox +  "" ) "" )  ;  break ;  case  mailbox . type   starred: sb . append (  message columns . flag   favorite  +  "" = 1"" )  ;  break ;  case  mailbox . type   unread: sb . append (  message columns . flag   read  +  "" = 0 and ""  +   message columns . mailbox   key +  "" not in  ( select "" +   mailbox columns .    id +  "" from "" +   mailbox . table   name +  "" where "" +   mailbox columns . type +  "" = "" +   mailbox . type   trash +  "" ) "" )  ;  break ;  default : throw new  illegal argument exception ( "" no virtual mailbox for: ""  +  mailbox id )  ;   }  sb . append ( "" order by ""  +   message columns . timestamp  +  "" desc"" )  ;  return db . raw query ( sb . to string (  )  selection args )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,get virtual mailbox row,"private  object[]   ( long account id int mailbox type  string[] projection )  {  final long id = get virtual mailbox id ( account id mailbox type )  ;  final  string id string =  long . to string ( id )  ;   object[] values = new  object[projection . length] ;  for  ( int i = 0 ;  i  <  projection . length ;  i +  +  )   {  final  string column = projection[i] ;  if  ( column . equals ( ui provider .  folder columns .    id )  )   {  values[i] = id ;   }  else if  ( column . equals ( ui provider .  folder columns . uri )  )   {  values[i] = combined uri string ( ""uifolder"" id string )  ;   }  else if  ( column . equals ( ui provider .  folder columns . name )  )   {  values[i] = get folder display name ( get folder type from mailbox type ( mailbox type )  """" )  ;   }  else if  ( column . equals ( ui provider .  folder columns . has   children )  )   {  values[i] = 0 ;   }  else if  ( column . equals ( ui provider .  folder columns . capabilities )  )   {  values[i] = ui provider .  folder capabilities . delete | ui provider .  folder capabilities . is   virtual ;   }  else if  ( column . equals ( ui provider .  folder columns . conversation   list   uri )  )   {  values[i] = combined uri string ( ""uimessages"" id string )  ;   }  else if  ( column . equals ( ui provider .  folder columns . unread   count )  )   {  if  ( mailbox type  =  =   mailbox . type   inbox && account id  =  =  combined   account   id )   {  final int unread count =  email content . count ( get context (  )   message . content   uri  message columns . mailbox   key  +  "" in  ( select ""  +   mailbox columns .    id +  "" from "" +   mailbox . table   name +  "" where "" +   mailbox columns . type +  "" = "" +   mailbox . type   inbox +  "" )  and "" +   message columns . flag   read +  "" = 0"" null )  ;  values[i] = unread count ;   }  else if  ( mailbox type  =  =   mailbox . type   unread )   {  final  string account key clause ;  final  string[] where args ;  if  ( account id  =  =  combined   account   id )   {  account key clause = """" ;  where args = null ;   }  else  {  account key clause =  message columns . account   key  +  "" =   ?  and "" ;  where args = new  string[] {  long . to string ( account id )  }  ;   }  final int unread count =  email content . count ( get context (  )   message . content   uri account key clause  +   message columns . flag   read  +  "" = 0 and "" +   message columns . mailbox   key +  "" not in  ( select "" +   mailbox columns .    id +  "" from "" +   mailbox . table   name +  "" where "" +   mailbox columns . type +  "" = "" +   mailbox . type   trash +  "" ) "" where args )  ;  values[i] = unread count ;   }  else if  ( mailbox type  =  =   mailbox . type   starred )   {  final  string account key clause ;  final  string[] where args ;  if  ( account id  =  =  combined   account   id )   {  account key clause = """" ;  where args = null ;   }  else  {  account key clause =  message columns . account   key  +  "" =   ?  and "" ;  where args = new  string[] {  long . to string ( account id )  }  ;   }  final int starred count =  email content . count ( get context (  )   message . content   uri account key clause  +   message columns . flag   favorite  +  "" = 1"" where args )  ;  values[i] = starred count ;   }   }  else if  ( column . equals ( ui provider .  folder columns . icon   res   id )  )   {  if  ( mailbox type  =  =   mailbox . type   inbox )   {  values[i] = r . drawable . ic   drawer   inbox   24dp ;   }  else if  ( mailbox type  =  =   mailbox . type   unread )   {  values[i] = r . drawable . ic   drawer   unread   24dp ;   }  else if  ( mailbox type  =  =   mailbox . type   starred )   {  values[i] = r . drawable . ic   drawer   starred   24dp ;   }   }   }  return values ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,get virtual mailbox type,private static int   ( long mailbox id )  {  return  ( int )  ( mailbox id & 0xf )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,handle message,@ override public boolean   ( android . os .  message msg )  {  synchronized  ( m delayed sync requests )   {  final  sync request message request =  (  sync request message ) msg . obj ;  final android . accounts .  account account = request . m account 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,handle message update notifications,private void   ( final  uri uri final  string message id final  content values values )  {  if  (  ! uri . get boolean query parameter ( is   uiprovider false )  )   {  notifyui conversation ( uri )  ;   }  notifyui message ( message id )  ;  if  ( values . contains key (  message columns . flag   read )  || values . contains key (  message columns . mailbox   key )  )   {  final  cursor c = query (  message . content   uri . build upon (  )  . append encoded path ( message id )  . build (  )  message   keys   projection null null null )  ;  if  ( c  !  =  null )   {  try  {  if  ( c . move to first (  )  )   {  notifyui folder ( c . get long ( message   keys   mailbox   key   column )  c . get long ( message   keys   account   key   column )  )  ;   }   }  finally  {  c . close (  )  ;   }   }   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,hash code,@ override public int   (  )  {  int result = m authority . hash code (  )  ;  result = 31 * result  +  m account . hash code (  )  ;  result = 31 * result  +   ( int )  ( m mailbox id ^  ( m mailbox id  >  >  >  32 )  )  ;  return result ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,init,"private static void   ( final  context context )  {  synchronized  ( suri matcher )   {  if  ( integrity   check   uri  !  =  null )   {  return ;   }  integrity   check   uri =  uri . parse ( ""content: /  / ""  +   email content . authority  +  "" / integrity check"" )  ;  account   backup   uri =  uri . parse ( ""content: /  / ""  +   email content . authority  +  "" / account backup"" )  ;  folder   status   uri =  uri . parse ( ""content: /  / ""  +   email content . authority  +  "" / status"" )  ;  email   app   mime   type = context . get string ( r . string . application   mime   type )  ;  final  string ui notification authority =  email content . email   package   name  +  "" . uinotifications"" ;  uiprovider   conversation   notifier =  uri . parse ( ""content: /  / ""  +  ui notification authority  +  "" / uimessages"" )  ;  uiprovider   folder   notifier =  uri . parse ( ""content: /  / ""  +  ui notification authority  +  "" / uifolder"" )  ;  uiprovider   folderlist   notifier =  uri . parse ( ""content: /  / ""  +  ui notification authority  +  "" / uifolders"" )  ;  uiprovider   account   notifier =  uri . parse ( ""content: /  / ""  +  ui notification authority  +  "" / uiaccount"" )  ;  uiprovider   attachment   notifier =  uri . parse ( ""content: /  / ""  +  ui notification authority  +  "" / uiattachment"" )  ;  uiprovider   attachments   notifier =  uri . parse ( ""content: /  / ""  +  ui notification authority  +  "" / uiattachments"" )  ;  uiprovider   all   accounts   notifier =  uri . parse ( ""content: /  / ""  +  ui notification authority  +  "" / uiaccts"" )  ;  uiprovider   message   notifier =  uri . parse ( ""content: /  / ""  +  ui notification authority  +  "" / uimessage"" )  ;  uiprovider   recent   folders   notifier =  uri . parse ( ""content: /  / ""  +  ui notification authority  +  "" / uirecentfolders"" )  ;  suri matcher . adduri (  email content . authority ""account"" account )  ;  suri matcher . adduri (  email content . authority ""account / #"" account   id )  ;  suri matcher . adduri (  email content . authority ""account check / #"" account   check )  ;  suri matcher . adduri (  email content . authority ""mailbox"" mailbox )  ;  suri matcher . adduri (  email content . authority ""mailbox / *"" mailbox   id )  ;  suri matcher . adduri (  email content . authority ""mailbox notification / #"" mailbox   notification )  ;  suri matcher . adduri (  email content . authority ""mailbox most recent message / #"" mailbox   most   recent   message )  ;  suri matcher . adduri (  email content . authority ""mailbox count / #"" mailbox   message   count )  ;  suri matcher . adduri (  email content . authority ""message"" message )  ;  suri matcher . adduri (  email content . authority ""message / #"" message   id )  ;  suri matcher . adduri (  email content . authority ""attachment"" attachment )  ;  suri matcher . adduri (  email content . authority ""attachment / #"" attachment   id )  ;  suri matcher . adduri (  email content . authority ""attachment / message / #"" attachments   message   id )  ;  suri matcher . adduri (  email content . authority ""attachment / cached file"" attachments   cached   file   access )  ;  suri matcher . adduri (  email content . authority ""body"" body )  ;  suri matcher . adduri (  email content . authority ""body / #"" body   id )  ;  suri matcher . adduri (  email content . authority ""body html / #"" body   html )  ;  suri matcher . adduri (  email content . authority ""body text / #"" body   text )  ;  suri matcher . adduri (  email content . authority ""hostauth"" hostauth )  ;  suri matcher . adduri (  email content . authority ""hostauth / *"" hostauth   id )  ;  suri matcher . adduri (  email content . authority ""credential"" credential )  ;  suri matcher . adduri (  email content . authority ""credential / *"" credential   id )  ;  suri matcher . adduri (  email content . authority ""synced message / #"" synced   message   id )  ;  suri matcher . adduri (  email content . authority ""message by selection"" message   selection )  ;  suri matcher . adduri (  email content . authority  message move . path message   move )  ;  suri matcher . adduri (  email content . authority  message state change . path message   state   change )  ;  suri matcher . adduri (  email content . authority ""deleted message"" deleted   message )  ;  suri matcher . adduri (  email content . authority ""deleted message / #"" deleted   message   id )  ;  suri matcher . adduri (  email content . authority ""updated message"" updated   message )  ;  suri matcher . adduri (  email content . authority ""updated message / #"" updated   message   id )  ;  suri matcher . adduri (  email content . authority ""policy"" policy )  ;  suri matcher . adduri (  email content . authority ""policy / #"" policy   id )  ;  suri matcher . adduri (  email content . authority ""quickresponse"" quick   response )  ;  suri matcher . adduri (  email content . authority ""quickresponse / #"" quick   response   id )  ;  suri matcher . adduri (  email content . authority ""quickresponse / account / #"" quick   response   account   id )  ;  suri matcher . adduri (  email content . authority ""uifolders / #"" ui   folders )  ;  suri matcher . adduri (  email content . authority ""uifullfolders / #"" ui   full   folders )  ;  suri matcher . adduri (  email content . authority ""uiallfolders / #"" ui   all   folders )  ;  suri matcher . adduri (  email content . authority ""uisubfolders / #"" ui   subfolders )  ;  suri matcher . adduri (  email content . authority ""uimessages / #"" ui   messages )  ;  suri matcher . adduri (  email content . authority ""uimessage / #"" ui   message )  ;  suri matcher . adduri (  email content . authority ""uiundo"" ui   undo )  ;  suri matcher . adduri (  email content . authority query   uirefresh  +  "" / #"" ui   folder   refresh )  ;  suri matcher . adduri (  email content . authority ""uifolder / *"" ui   folder )  ;  suri matcher . adduri (  email content . authority ""uiinbox / #"" ui   inbox )  ;  suri matcher . adduri (  email content . authority ""uiaccount / #"" ui   account )  ;  suri matcher . adduri (  email content . authority ""uiaccts"" ui   accts )  ;  suri matcher . adduri (  email content . authority ""uiacctsettings"" ui   acctsettings )  ;  suri matcher . adduri (  email content . authority ""uiattachments / #"" ui   attachments )  ;  suri matcher . adduri (  email content . authority ""uiattachment / #"" ui   attachment )  ;  suri matcher . adduri (  email content . authority ""uiattachmentbycid / # / *"" ui   attachment   by   cid )  ;  suri matcher . adduri (  email content . authority ""uisearch / #"" ui   search )  ;  suri matcher . adduri (  email content . authority ""uiaccountdata / #"" ui   account   data )  ;  suri matcher . adduri (  email content . authority ""uiloadmore / #"" ui   folder   load   more )  ;  suri matcher . adduri (  email content . authority ""uiconversation / #"" ui   conversation )  ;  suri matcher . adduri (  email content . authority ""uirecentfolders / #"" ui   recent   folders )  ;  suri matcher . adduri (  email content . authority ""uidefaultrecentfolders / #"" ui   default   recent   folders )  ;  suri matcher . adduri (  email content . authority ""pick trash folder / #"" account   pick   trash   folder )  ;  suri matcher . adduri (  email content . authority ""pick sent folder / #"" account   pick   sent   folder )  ;  suri matcher . adduri (  email content . authority ""uipurgefolder / #"" ui   purge   folder )  ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,init ui provider,"private void   (  )  {  m database . execsql ( ""update ""  +   mailbox . table   name  +  "" set "" +   mailbox columns . ui   sync   status +  "" = "" +  ui provider .  sync status . no   sync )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,inject attachment service,public void   ( final  email attachment service attachment service )  {  m attachment service = attachment service  =  =  null  ?  default   attachment   service : attachment service ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,insert,"@ override public  uri   (  uri uri  content values values )  {   log . d ( tag "" insert: ""  +  uri )  ;  final int match = find match ( uri ""insert"" )  ;  final  context context = get context (  )  ;  final sq lite database db = get database ( context ) "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,is combined mailbox,private static boolean   ( long mailbox id )  {  return  ( mailbox id  >  >  32 )   =  =  combined   account   id ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,is virtual mailbox,private static boolean   ( long mailbox id )  {  return mailbox id  >  =  0x100000000l ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,mark all seen,"private int   ( final  context context final  string mailbox id )  {  final sq lite database db = get database ( context )  ;  final  string table =  message . table   name ;  final  content values values = new  content values ( 1 )  ;  values . put (  message columns . flag   seen 1 )  ;  final  string where clause =  message columns . mailbox   key  +  ""  =   ? "" ;  final  string[] where args = new  string[] { mailbox id }  ;  return db . update ( table values where clause where args )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,most recent message query,"public  cursor   (  uri uri )  {  sq lite database db = get database ( get context (  )  )  ;   string mailbox id = uri . get last path segment (  )  ;  return db . raw query ( ""select max (    id )  from  message where mailbox key =  ? "" new  string[] { mailbox id }  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,notification query,"private  cursor   ( final  uri uri )  {  final sq lite database db = get database ( get context (  )  )  ;  final  string account id = uri . get last path segment (  )  ;  final  string sql = ""select ""  +   message columns . mailbox   key  +  ""  "" +  ""sum ( case "" +   message columns . flag   read +  "" when 0 then 1 else 0 end )   "" +  ""sum ( case "" +   message columns . flag   seen +  "" when 0 then 1 else 0 end ) \n"" +  ""from "" +   message . table   name +  ""\n"" +  ""where "" +   message columns . account   key +  ""  =   ? \n"" +  ""group by "" +   message columns . mailbox   key ;  final  string[] selection args =  { account id }  ;  return db . raw query ( sql selection args )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,notifyui,private void   (  uri uri long id )  {  notifyui ( uri  long . to string ( id )  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,notifyui account,private void   ( long id )  {  notifyui ( uiprovider   account   notifier  long . to string ( id )  )  ;  notifyui ( uiprovider   all   accounts   notifier null )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,notifyui conversation,private void   (  uri uri )  {   string id = uri . get last path segment (  )  ;   message msg =  message . restore message with id ( get context (  )   long . parse long ( id )  )  ;  if  ( msg  !  =  null )   {  notifyui conversation mailbox ( msg . m mailbox key )  ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,notifyui conversation mailbox,"private void   ( long id )  {  notifyui ( uiprovider   conversation   notifier  long . to string ( id )  )  ;   mailbox mailbox =  mailbox . restore mailbox with id ( get context (  )  id )  ;  if  ( mailbox  =  =  null )   {   log utils . w ( tag "" no mailbox for notification: ""  +  id )  ;  return ;   }  if  ( mailbox . m type  =  =   mailbox . type   inbox )   {  notifyui ( uiprovider   conversation   notifier  email provider . combined mailbox id (  mailbox . type   inbox )  )  ;   }  notify widgets ( id )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,notifyui folder,private void   ( final long folder id final long account id )  {  notifyui folder (  long . to string ( folder id )  account id )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,notifyui message,private void   (  string id )  {  notifyui ( uiprovider   message   notifier id )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,notify widgets,"private void   ( long mailbox id )  {   context context = get context (  )  ;  if  ( m app widget manager  =  =  null )   {  m app widget manager =  app widget manager . get instance ( context )  ;  m email component = new  component name ( context  widget provider . get provider name ( context )  )  ;   }  int[] widget ids = m app widget manager . get app widget ids ( m email component )  ;  if  (  !  arrays . equals ( widget ids m saved widget ids )  )   {  m saved widget ids = widget ids ;   string[][] widget infos =  base widget provider . get widget info ( context widget ids )  ;  m widget notify mailboxes . clear (  )  ;  for  (   string[] widget info : widget infos )   {  try  {  if  ( widget info  =  =  null ||  text utils . is empty ( widget info[1] )  )  continue ;  long id =  long . parse long (  uri . parse ( widget info[1] )  . get last path segment (  )  )  ;  if  (  ! is combined mailbox ( id )  )   {  if  (  ! m widget notify mailboxes . contains ( id )  )   {  m widget notify mailboxes . add ( id )  ;   }   }  else  {  switch  ( get virtual mailbox type ( id )  )   {  case  mailbox . type   inbox:  cursor c = query (  mailbox . content   uri  mailbox . id   projection  mailbox columns . type  +  "" =  ? "" new  string[] {  integer . to string (  mailbox . type   inbox )  }  null )  ;  try  {  while  ( c . move to next (  )  )   {  m widget notify mailboxes . add ( c . get long (  mailbox . id   projection   column )  )  ;   }   }  finally  {  c . close (  )  ;   }  break ;   }   }   }  catch  (  number format exception e )   {   }   }   }  if  ( m widget notify mailboxes . contains ( mailbox id )  )   {   intent intent = new  intent (  utils . action   notify   dataset   changed )  ;  intent . put extra (  utils . extra   folder   uri ui uri ( ""uifolder"" mailbox id )  )  ;  intent . set type ( email   app   mime   type )  ;  context . send broadcast ( intent )  ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,on configuration changed,@ override public void   (  configuration configuration )  {  int delta = old configuration . update from ( configuration )  ;  if  (  configuration . need new resources ( delta  activity info . config   locale )  )   {  notifyui account ( combined   acco
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,on create,@ override public boolean   (  )  {   context context = get context (  )  ;   email content . init ( context )  ;  init ( context )  ;   debug utils . init ( context )  ;  set services enabled async ( context )  ;  reconcile accounts async ( context )  ; 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,on refresh completed,@ override public void   ( long mailbox id int result )  {  final int sync value = ui provider . create sync value (  email content . sync   status   user result )  ;  final  content values values = new  content values (  )  ;  values . put (  mailbox . u
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,on shared preference changed,@ override public void   (  shared preferences shared preferences  string key )  {  if  (  preference keys . removal   action . equals ( key )  ||  preference keys . conversation   list   swipe . equals ( key )  ||  preference keys . show   sender   image
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,open file,"@ override public  parcel file descriptor   ( final  uri uri final  string mode )  throws  file not found exception  {  if  (  log utils . is loggable ( tag  log utils . debug )  )   {   log utils . d ( tag "" email provider . open file: %s""  log utils . c"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,pick folder,"private int   (  uri uri int type int header id )  {   context context = get context (  )  ;   long acct id =  long . parse long ( uri . get last path segment (  )  )  ;   cursor ac = query ( ui uri ( ""uiaccount"" acct id )  ui provider . accounts   projection null null null )  ;  try  {  if  ( ac . move to first (  )  )   {  final com . android . mail . providers .  account ui account = com . android . mail . providers .  account . builder (  )  . build from ( ac )  ;   intent intent = new  intent ( context  folder picker activity . class )  ;  intent . put extra ( picker   ui   account ui account )  ;  intent . put extra ( picker   mailbox   type type )  ;  intent . put extra ( picker   header   id header id )  ;  intent . add flags (  intent . flag   activity   new   task )  ;  context . start activity ( intent )  ;  return 1 ;   }  return 0 ;   }  finally  {  ac . close (  )  ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,pick sent folder,private int   (  uri uri )  {  return pick folder ( uri  mailbox . type   sent r . string . sent   folder   selection   title )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,pick trash folder,private int   (  uri uri )  {  return pick folder ( uri  mailbox . type   trash r . string . trash   folder   selection   title )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,put integer long or boolean,private static void   (  content values values  string column name  object value )  {  if  ( value instanceof  integer )   {   integer int value =  (  integer ) value ;  values . put ( column name int value )  ;   }  else if  ( value instanceof  boolean )   {   boolean bool value =  (  boolean ) value ;  values . put ( column name bool value  ?  1 : 0 )  ;   }  else if  ( value instanceof  long )   {   long long value =  (  long ) value ;  values . put ( column name long value )  ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,query,"@ override public  cursor   (  uri uri  string[] projection  string selection  string[] selection args  string sort order )  {   cursor c = null ;  int match ;  try  {  match = find match ( uri ""query"" )  ;   }  catch  (   illegal argument exception e )  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,reconcile accounts async,private static void   ( final  context context )  {  if  ( context . get resources (  )  . get boolean ( r . bool . reconcile   accounts )  )   {   email async task . run async parallel ( new  runnable (  )  {  @ override public void run (  )  {   account reconciler . reconcile accounts ( context )  ;   }   }   )  ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,remap folder cursor,private void   ( final  cursor input cursor final  matrix cursor output cursor final long account id final  string[] ui projection )  {  if  ( input cursor  =  =  null || input cursor . get count (  )   =  =  0 )   {  return ;   }  final int id column = input cursor . get column index (  base columns .    id )  ;  final int type column = input cursor . get column index ( ui provider .  folder columns . type )  ;  final int name column = input cursor . get column index ( ui provider .  folder columns . name )  ;  final int capabilities column = input cursor . get column index ( ui provider .  folder columns . capabilities )  ;  final int persistent id column = input cursor . get column index ( ui provider .  folder columns . persistent   id )  ;  final int load more uri column = input cursor . get column index ( ui provider .  folder columns . load   more   uri )  ;  final  context context = get context (  )  ;  final  string protocol =  account . get protocol ( context account id )  ;  final  email service info info =  email service utils . get service info ( context protocol )  ;  while  ( input cursor . move to next (  )  )   {  final  matrix cursor .  row builder builder = output cursor . new row (  )  ;  final int folder type = input cursor . get int ( type column )  ;  for  ( int i = 0 ;  i  <  ui projection . length ;  i +  +  )   {  final int index = input cursor . get column index ( ui projection[i] )  ;  if  ( index  =  =   - 1 )   {  builder . add ( null )  ;  continue ;   }  final  string value = input cursor . get string ( index )  ;  final boolean remapped ;  if  ( name column  =  =  index )   {  builder . add ( get folder display name ( folder type value )  )  ;  remapped = true ;   }  else if  ( capabilities column  =  =  index )   {  final long mailboxid = input cursor . get long ( id column )  ;  final int mailbox type = get mailbox type from folder type ( folder type )  ;  builder . add ( get folder capabilities ( info mailbox type mailboxid )  )  ;  remapped = true ;   }  else if  ( persistent id column  =  =  index )   {  builder . add (  base64 . encode to string ( value . get bytes (  )   base64 . url   safe |  base64 . no   wrap |  base64 . no   padding )  )  ;  remapped = true ;   }  else if  ( load more uri column  =  =  index && folder type  !  =   mailbox . type   search &&  ( info  =  =  null ||  ! info . offer load more )  )   {  builder . add ( null )  ;  remapped = true ;   }  else  {  remapped = false ;   }  if  (  ! remapped )   {  builder . add ( value )  ;   }   }   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,restart push,"private static void   ( final android . accounts .  account account )  {  final  bundle extras = new  bundle (  )  ;  extras . put boolean (  content resolver . sync   extras   manual true )  ;  extras . put boolean (  content resolver . sync   extras   do   not   retry true )  ;  extras . put boolean (  content resolver . sync   extras   expedited true )  ;  extras . put boolean (  mailbox . sync   extra   push   only true )  ;  extras . put string (  email service status . sync   extras   callback   uri  email content . content   uri . to string (  )  )  ;  extras . put string (  email service status . sync   extras   callback   method sync   status   callback   method )  ;   content resolver . request sync ( account  email content . authority extras )  ;   log utils . i ( tag ""request sync  email provider start sync %s  %s"" account . to string (  )  extras . to string (  )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,restart push for account,private static boolean   ( final  context context final sq lite database db final  content values values final  string account id )  {  if  ( values . contains key (  account columns . sync   lookback )  || values . contains key (  account columns . sync   interval )  )   {  return restart push ( context db account id )  ;   }  return false ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,restart push for mailbox,private static boolean   ( final  context context final sq lite database db final  content values values final  string account id )  {  if  ( values . contains key (  mailbox columns . sync   lookback )  || values . contains key (  mailbox columns . sync   interval )  )   {  return restart push ( context db account id )  ;   }  return false ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,restore accounts,private static int   ( final  context context )  {  final  collection <  email service info >  infos =  email service utils . get service info list ( context )  ;  final  set <  string >  account types = new  hash set <  string >  ( 3 )  ;  for  (  final  email service info info : infos )   {  if  (  !  text utils . is empty ( info . account type )  )   {  account types . add ( info . account type )  ;   }   }  final  list < android . accounts .  account >  am accounts = new  array list < android . accounts .  account >  (  )  ;  final  account manager am =  account manager . get ( context )  ;  for  (  final  string account type : account types )   {  am accounts . add all (  arrays . as list ( am . get accounts by type ( account type )  )  )  ;   }  int restored count = 0 ;  for  (  final android . accounts .  account am account : am accounts )   {  final  string json string = am . get user data ( am account account   manager   json   tag )  ;  if  (  text utils . is empty ( json string )  )   {  continue ;   }  final  account account =  account . from json string ( json string )  ;  if  ( account  !  =  null )   {   account settings utils . commit settings ( context account )  ;  final  bundle extras = new  bundle ( 3 )  ;  extras . put boolean (  content resolver . sync   extras   manual true )  ;  extras . put boolean (  content resolver . sync   extras   do   not   retry true )  ;  extras . put boolean (  content resolver . sync   extras   expedited true )  ;   content resolver . request sync ( am account  email content . authority extras )  ;  restored count +  +  ;   }   }  return restored count ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,restore host auth,"private static  host auth   ( sq lite database db long id )  {   cursor c = db . query (  host auth . table   name  host auth . content   projection  host auth columns .    id  +  "" =  ? "" new  string[] {  long . to string ( id )  }  null null null )  ;  try  {  if  ( c . move to first (  )  )   {   host auth host auth = new  host auth (  )  ;  host auth . restore ( c )  ;  return host auth ;   }  return null ;   }  finally  {  c . close (  )  ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,restore if needed,"private static void   (  context context sq lite database main database )  {  if  (  debug utils . debug )   {   log utils . w ( tag ""restore if needed .  .  . "" )  ;   }   string legacy backup =  preferences . get legacy backup preference ( context )  ;  if  (  !  text utils . is empty ( legacy backup )  )   {  backup accounts ( context main database )  ;   preferences . clear legacy backup preference ( context )  ;   log utils . w ( tag "" created new  email provider backup database"" )  ;  return ;   }  final  file backup db = context . get database path ( backup   database   name )  ;  if  ( backup db . exists (  )  )   {  backup accounts ( context main database )  ;  context . delete database ( backup   database   name )  ;   log utils . w ( tag "" migrated from backup database to account manager"" )  ;  return ;   }  if  (  database utils . long for query ( main database ""select exists  ( select  ?  from ""  +   account . table   name  +  ""  ) ""  email content . id   projection )   >  0 )   {  if  (  debug utils . debug )   {   log utils . w ( tag ""restore if needed:  account exists . "" )  ;   }  return ;   }  restore accounts ( context )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,run,@ override public void   (  )  {  set services enabled sync ( context )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,run search query,"private void   ( final  context context final long account id final long search mailbox id )  {   log utils . d ( tag ""run search query .  account: %d mailbox id: %d"" account id search mailbox id )  ;  new  async task <  void  void  void >  (  )  {  @ override public  void do in background (   void .  .  .  params )  {  final  email service proxy service =  email service utils . get service for account ( context account id )  ;  if  ( service  !  =  null )   {  try  {  final int total count = service . search messages ( account id m search params search mailbox id )  ;  final  content values cv = new  content values ( 1 )  ;  cv . put (  mailbox columns . total   count total count )  ;  update (  content uris . with appended id (  mailbox . content   uri search mailbox id )  cv null null )  ;   log utils . d ( tag "" email provider#run search query .   total count to ui: %d"" total count )  ;   }  catch  (   remote exception e )   {   log utils . e ( ""search messages"" "" remote exception"" e )  ;   }   }  return null ;   }   }   . execute on executor (  async task . thread   pool   executor )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,send message list data changed notification,private void   (  )  {  final  context context = get context (  )  ;  final  intent intent = new  intent ( action   notify   message   list   dataset   changed )  ;  context . send broadcast ( intent )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,send notifier change,private void   (  uri base uri  string op  string id )  {  if  ( base uri  =  =  null )  return ;  if  ( op  !  =  null )   {  base uri = base uri . build upon (  )  . append encoded path ( op )  . build (  )  ;   }  long long id = 0l ;  try  {  long id =  long . value of ( id )  ;   }  catch  (   number format exception ignore )   {   }  if  ( long id  >  0 )   {  notifyui ( base uri id )  ;   }  else  {  notifyui ( base uri null )  ;   }  if  ( base uri . equals (  message . notifier   uri )  )   {  send message list data changed notification (  )  ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,set batch notifications set,private void   (  set <  uri >  batch notifications )  {  mtl batch notifications . set ( batch notifications )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,set services enabled,private static void   (  context context boolean enabled )  {   package manager pm = context . get package manager (  )  ;  pm . set component enabled setting ( new  component name ( context  attachment service . class )  enabled  ?   package manager . component   enabled   state   enabled :  package manager . component   enabled   state   disabled  package manager . dont   kill   app )  ;  start or stop service ( enabled context new  intent ( context  attachment service . class )  )  ;  final  notification controller controller =  notification controller creator holder . get instance ( context )  ;  if  ( controller  !  =  null )   {  controller . watch for messages (  )  ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,set services enabled async,public static void   ( final  context context )  {  if  ( context . get resources (  )  . get boolean ( r . bool . enable   services )  )   {   email async task . run async parallel ( new  runnable (  )  {  @ override public void run (  )  {  set services enabled sync ( context )  ;   }   }   )  ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,set services enabled sync,public static boolean   (  context context )  {   email content . init ( context )  ;   cursor c = null ;  try  {  c = context . get content resolver (  )  . query (  account . content   uri  account . id   projection null null null )  ;  boolean enable = c  !  =  null && c . get count (  )   >  0 ;  set services enabled ( context enable )  ;  return enable ;   }  finally  {  if  ( c  !  =  null )   {  c . close (  )  ;   }   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,shutdown,@ override public void   (  )  {  if  ( m database  !  =  null )   {  m database . close (  )  ;  m database = null ;   }  if  ( m body database  !  =  null )   {  m body database . close (  )  ;  m body database = null ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,start or stop service,private static void   ( boolean enabled  context context  intent intent )  {  if  ( enabled )   {  context . start service ( intent )  ;   }  else  {  context . stop service ( intent )  ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,start sync,private void   ( final  mailbox mailbox final int delta message count )  {  final android . accounts .  account account = get account manager account ( mailbox . m account key )  ;  if  ( account  !  =  null )   {  start sync ( account mailbox . m id delta message count )  ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,ui accounts,"private  cursor   (  string[] ui projection boolean suppress combined )  {  final  context context = get context (  )  ;  final sq lite database db = get database ( context )  ;  final  cursor account id cursor = db . raw query ( ""select    id from ""  +   account . table   name new  string[0] )  ;  final  matrix cursor mc ;  try  {  boolean combined account = false ;  if  (  ! suppress combined && account id cursor . get count (  )   >  1 )   {  combined account = true ;   }  final  bundle extras = new  bundle (  )  ;  extras . put int (  account cursor extra keys . accounts   loaded 1 )  ;  mc = new  matrix cursor with extra ( ui projection account id cursor . get count (  )  extras )  ;  final  object[] values = new  object[ui projection . length] ;  while  ( account id cursor . move to next (  )  )   {  final  string id = account id cursor . get string ( 0 )  ;  final  cursor account cursor = db . raw query ( gen query account ( ui projection id )  new  string[] { id }  )  ;  try  {  if  ( account cursor . move to next (  )  )   {  for  ( int i = 0 ;  i  <  ui projection . length ;  i +  +  )   {  values[i] = account cursor . get string ( i )  ;   }  mc . add row ( values )  ;   }   }  finally  {  account cursor . close (  )  ;   }   }  if  ( combined account )   {  add combined account row ( mc )  ;   }   }  finally  {  account id cursor . close (  )  ;   }  mc . set notification uri ( context . get content resolver (  )  uiprovider   all   accounts   notifier )  ;  return mc ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,ui delete account,"private int   (  uri uri )  {   context context = get context (  )  ;  long account id =  long . parse long ( uri . get last path segment (  )  )  ;  try  {  final  account account =  account . restore account with id ( context account id )  ;  if  ( account  =  =  null )   {  return 0 ;   }  delete account data ( context account id )  ;  uri =  content uris . with appended id (  account . content   uri account id )  ;  context . get content resolver (  )  . delete ( uri null null )  ;   account backup restore . backup ( context )  ;   security policy . get instance ( context )  . reduce policies (  )  ;  set services enabled sync ( context )  ;  return 1 ;   }  catch  (   exception e )   {   log utils . w (  logging . log   tag "" exception while deleting account"" e )  ;   }  return 0 ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,ui delete account data,private int   (  uri uri )  {   context context = get context (  )  ;  long account id =  long . parse long ( uri . get last path segment (  )  )  ;  final  account account =  account . restore account with id ( context account id )  ;  if  ( account  =  =  null )   {  return 0 ;   }  delete account data ( context account id )  ;  return 1 ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,ui delete message,private int   (  uri uri )  {  final  context context = get context (  )  ;   message msg = get message from last segment ( uri )  ;  if  ( msg  =  =  null )  return 0 ;   mailbox mailbox =  mailbox . restore mailbox with id ( context msg . m mailbox key )  ;  if  ( mailbox  =  =  null )  return 0 ;  if  ( mailbox . m type  =  =   mailbox . type   trash || mailbox . m type  =  =   mailbox . type   drafts )   {   attachment utilities . delete all attachment files ( context msg . m account key msg . m id )  ;  final int r = context . get content resolver (  )  . delete (  content uris . with appended id (  message . synced   content   uri msg . m id )  null null )  ;  notifyui folder ( mailbox . m id mailbox . m account key )  ;  notifyui message ( msg . m id )  ;  return r ;   }   mailbox trash mailbox =  mailbox . restore mailbox of type ( context msg . m account key  mailbox . type   trash )  ;  if  ( trash mailbox  =  =  null )   {  return 0 ;   }   content values values = new  content values (  )  ;  values . put (  message columns . mailbox   key trash mailbox . m id )  ;  final int r = ui update message ( uri values true )  ;  notifyui folder ( mailbox . m id mailbox . m account key )  ;  notifyui message ( msg . m id )  ;  return r ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,ui folder load more,private  cursor   ( final  mailbox mailbox )  {  if  ( mailbox  =  =  null )  return null ;  if  ( mailbox . m type  =  =   mailbox . type   search )   {  m search params . m offset +  = search   more   increment ;  run search query ( get context (  )  mailbox . m account key mailbox . m id )  ;   }  else  {  ui folder refresh ( mailbox visible   limit   increment )  ;   }  return null ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,ui folder refresh,private  cursor   ( final  mailbox mailbox final int delta message count )  {  if  ( mailbox  !  =  null )   {   refresh status monitor . get instance ( get context (  )  )  . monitor refresh status ( mailbox . m id new  refresh status monitor .  callback (  )  {  @ override public void on refresh completed (  long mailbox id  int result )  {  final int sync value = ui provider . create sync value (  email content . sync   status   user result )  ;  final  content values values = new  content values (  )  ;  values . put (  mailbox . ui   sync   status ui provider .  sync status . no   sync )  ;  values . put (  mailbox . ui   last   sync   result sync value )  ;  m database . update (  mailbox . table   name values where   id new  string[] {  string . value of ( mailbox id )  }  )  ;  notifyui folder ( mailbox . m id mailbox . m account key )  ;   }  @ override public void on timeout (  long mailbox id )  {   }   }   )  ;  start sync ( mailbox delta message count )  ;   }  return null ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,ui folders,private  cursor   ( final  uri uri final  string[] ui projection )  {  final  context context = get context (  )  ;  final sq lite database db = get database ( context )  ;  final  string id = uri . get path segments (  )  . get ( 1 )  ;  final  uri notify uri = uiprovider   folderlist   notifier . build upon (  )  . append encoded path ( id )  . build (  )  ;  final  cursor vc = ui virtual mailboxes ( id ui projection )  ;  vc . set notification uri ( context . get content resolver (  )  notify uri )  ;  if  ( id . equals ( combined   account   id   string )  )   {  return vc ;   }  else  {   cursor c = db . raw query ( gen query account mailboxes ( ui provider . folders   projection )  new  string[] { id }  )  ;  c = get folder list cursor ( c  long . value of ( id )  ui projection )  ;  c . set notification uri ( context . get content resolver (  )  notify uri )  ;  if  ( c . get count (  )   >  0 )   {   cursor[] cursors = new  cursor[] { vc c }  ;  return new  merge cursor ( cursors )  ;   }  else  {  return c ;   }   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,ui populate recent folders,"private int   (  uri uri )  {  final  context context = get context (  )  ;  final  string id = uri . get last path segment (  )  ;  final  uri[] recent folders = default recent folders ( id )  ;  final int num folders = recent folders . length ;  if  ( num folders  <  =  0 )   {  return 0 ;   }  final int rows updated = update timestamp ( context id recent folders )  ;   log utils . d ( tag ""ui populate recent folders: %d folders changed"" rows updated )  ;  return rows updated ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,ui purge folder,"private int   (  uri uri )  {  final  context context = get context (  )  ;  final long mailbox id =  long . parse long ( uri . get last path segment (  )  )  ;  final sq lite database db = get database ( context )  ;  final  cursor mailbox cursor = db . query (  mailbox . table   name new  string[] {  mailbox columns . account   key }   mailbox .    id  +  "" = ""  +  mailbox id null null null null )  ;  if  ( mailbox cursor  =  =  null ||  ! mailbox cursor . move to first (  )  )   {   log utils . wtf (  log utils . tag "" null or empty cursor when trying to purge mailbox %d"" mailbox id )  ;  return 0 ;   }  final long account id = mailbox cursor . get long ( mailbox cursor . get column index (  mailbox columns . account   key )  )  ;  final  string[] message projection = new  string[] {  message columns .    id }  ;  final  string message where =  message columns . mailbox   key  +  "" = ""  +  mailbox id ;  final  cursor message cursor = db . query (  message . table   name message projection message where null null null null )  ;  int deleted count = 0 ;  while  ( message cursor  !  =  null && message cursor . move to next (  )  )   {  final long message id = message cursor . get long ( message cursor . get column index (  message columns .    id )  )  ;   attachment utilities . delete all attachment files ( context account id message id )  ;  deleted count +  = context . get content resolver (  )  . delete (  content uris . with appended id (  message . synced   content   uri message id )  null null )  ;  notifyui message ( message id )  ;   }  notifyui folder ( mailbox id account id )  ;  return deleted count ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,ui query,"private  cursor   ( int match  uri uri  string[] ui projection final boolean unseen only )  {   context context = get context (  )  ;   content resolver resolver = context . get content resolver (  )  ;  sq lite database db = get database ( context )  ;   cursor c = null ;   string id = uri . get path segments (  )  . get ( 1 )  ;   uri notify uri = null ;  switch  ( match )   {  case ui   all   folders: notify uri = uiprovider   folderlist   notifier . build upon (  )  . append encoded path ( id )  . build (  )  ;  final  cursor vc = ui virtual mailboxes ( id ui projection )  ;  if  ( id . equals ( combined   account   id   string )  )   {  c = vc ;   }  else  {  final  cursor rawc = db . raw query ( gen query account all mailboxes ( ui projection )  new  string[] { id }  )  ;  rawc . set notification uri ( context . get content resolver (  )  notify uri )  ;  vc . set notification uri ( context . get content resolver (  )  notify uri )  ;  if  ( rawc . get count (  )   >  0 )   {  c = new  merge cursor ( new  cursor[] { rawc vc }  )  ;   }  else  {  c = rawc ;   }   }  break ;  case ui   full   folders:  {  final  string[] folder projection = folder projection from ui projection ( ui projection )  ;  c = db . raw query ( gen query account all mailboxes ( folder projection )  new  string[] { id }  )  ;  c = get folder list cursor ( c  long . value of ( id )  ui projection )  ;  notify uri = uiprovider   folderlist   notifier . build upon (  )  . append encoded path ( id )  . build (  )  ;  break ;   }  case ui   recent   folders: c = db . raw query ( gen query recent mailboxes ( ui projection )  new  string[] { id }  )  ;  notify uri = uiprovider   recent   folders   notifier . build upon (  )  . append path ( id )  . build (  )  ;  break ;  case ui   subfolders:  {  final  string[] folder projection = folder projection from ui projection ( ui projection )  ;  c = db . raw query ( gen query subfolders ( folder projection )  new  string[] { id }  )  ;  c = get folder list cursor ( c  mailbox . get account id for mailbox ( context id )  ui projection )  ;  final long account id =  mailbox . get account id for mailbox ( context id )  ;  notify uri =  content uris . with appended id ( uiprovider   folderlist   notifier account id )  ;  break ;   }  case ui   messages: long mailbox id =  long . parse long ( id )  ;  final  folder folder = get folder ( context mailbox id )  ;  if  ( folder  =  =  null )   {  return new  matrix cursor ( ui projection )  ;   }  if  ( is virtual mailbox ( mailbox id )  )   {  c = get virtual mailbox messages cursor ( db ui projection mailbox id unseen only )  ;   }  else  {  c = db . raw query ( gen query mailbox messages ( ui projection unseen only )  new  string[] { id }  )  ;   }  notify uri = uiprovider   conversation   notifier . build upon (  )  . append path ( id )  . build (  )  ;  c = new  email conversation cursor ( context c folder mailbox id )  ;  break ;  case ui   message:  message query qq = gen query view message ( ui projection id )  ;   string sql = qq . query ;   string att json = qq . attachment json ;  if  ( att json  !  =  null )   {  c = db . raw query ( sql new  string[] { att json id }  )  ;   }  else  {  c = db . raw query ( sql new  string[] { id }  )  ;   }  if  ( c  !  =  null )   {  c = new  email message cursor ( get context (  )  c ui provider .  message columns . body   html ui provider .  message columns . body   text )  ;   }  notify uri = uiprovider   message   notifier . build upon (  )  . append path ( id )  . build (  )  ;  break ;  case ui   attachments: final  list <  string >  content type query parameters = uri . get query parameters (  photo contract .  content type parameters . content   type )  ;  c = db . raw query ( gen query attachments ( ui projection content type query parameters )  new  string[] { id }  )  ;  c = new  attachments cursor ( context c )  ;  notify uri = uiprovider   attachments   notifier . build upon (  )  . append path ( id )  . build (  )  ;  break ;  case ui   attachment: c = db . raw query ( gen query attachment ( ui projection )  new  string[] { id }  )  ;  notify uri = uiprovider   attachment   notifier . build upon (  )  . append path ( id )  . build (  )  ;  break ;  case ui   attachment   by   cid: final  string cid = uri . get path segments (  )  . get ( 2 )  ;  final  string[] selection args =  { id cid }  ;  c = db . raw query ( gen query attachment by messageid and cid ( ui projection )  selection args )  ;  notify uri = uiprovider   attachments   notifier . build upon (  )  . append path ( id )  . build (  )  ;  break ;  case ui   folder: case ui   inbox: if  ( match  =  =  ui   inbox )   {  mailbox id =  mailbox . find mailbox of type ( context  long . parse long ( id )   mailbox . type   inbox )  ;  if  ( mailbox id  =  =   mailbox . no   mailbox )   {   log utils . d (  log utils . tag "" no inbox found for account %s"" id )  ;  return null ;   }   log utils . d (  log utils . tag "" found inbox id %d"" mailbox id )  ;   }  else  {  mailbox id =  long . parse long ( id )  ;   }  final  string mailbox id string =  long . to string ( mailbox id )  ;  if  ( is virtual mailbox ( mailbox id )  )   {  c = get virtual mailbox cursor ( mailbox id ui projection )  ;  notify uri = uiprovider   folder   notifier . build upon (  )  . append path ( mailbox id string )  . build (  )  ;   }  else  {  c = db . raw query ( gen query mailbox ( ui projection mailbox id string )  new  string[] { mailbox id string }  )  ;  final  list <  string >  projection list =  arrays . as list ( ui projection )  ;  final int name column = projection list . index of ( ui provider .  folder columns . name )  ;  final int type column = projection list . index of ( ui provider .  folder columns . type )  ;  if  ( c . move to first (  )  )   {  final  cursor close this = c ;  try  {  c = get ui folder cursor row from mailbox cursor row ( new  matrix cursor with cached columns ( ui projection )  ui projection . length c name column type column )  ;   }  finally  {  close this . close (  )  ;   }   }  notify uri = uiprovider   folder   notifier . build upon (  )  . append path ( mailbox id string )  . build (  )  ;   }  break ;  case ui   account: if  ( id . equals ( combined   account   id   string )  )   {   matrix cursor mc = new  matrix cursor with cached columns ( ui projection 1 )  ;  add combined account row ( mc )  ;  c = mc ;   }  else  {  c = db . raw query ( gen query account ( ui projection id )  new  string[] { id }  )  ;   }  notify uri = uiprovider   account   notifier . build upon (  )  . append path ( id )  . build (  )  ;  break ;  case ui   conversation: c = db . raw query ( gen query conversation ( ui projection )  new  string[] { id }  )  ;  break ;   }  if  ( notify uri  !  =  null )   {  c . set notification uri ( resolver notify uri )  ;   }  return c ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,ui quick response,"private  cursor   (  string[] ui projection )  {  final  context context = get context (  )  ;  final sq lite database db = get database ( context )  ;  final  string builder sb = gen select ( get quick response map (  )  ui projection )  ;  sb . append ( "" from ""  +   quick response . table   name )  ;  final  string query = sb . to string (  )  ;  return db . raw query ( query new  string[0] )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,ui quick response account,"private  cursor   (  string[] ui projection  string account )  {  final  context context = get context (  )  ;  final sq lite database db = get database ( context )  ;  final  string builder sb = gen select ( get quick response map (  )  ui projection )  ;  sb . append ( "" from ""  +   quick response . table   name )  ;  sb . append ( "" where ""  +   quick response . account   key  +  "" =  ? "" )  ;  final  string query = sb . to string (  )  ;  return db . raw query ( query new  string[] { account }  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,ui quick response id,"private  cursor   (  string[] ui projection  string id )  {  final  context context = get context (  )  ;  final sq lite database db = get database ( context )  ;  final  string builder sb = gen select ( get quick response map (  )  ui projection )  ;  sb . append ( "" from ""  +   quick response . table   name )  ;  sb . append ( "" where ""  +   quick response .    id  +  "" =  ? "" )  ;  final  string query = sb . to string (  )  ;  return db . raw query ( query new  string[] { id }  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,ui save draft message,private  uri   ( final long account id final  bundle extras )  {  final  mailbox mailbox = get mailbox by account id and type ( account id  mailbox . type   drafts )  ;  if  ( mailbox  =  =  null )  return null ;   message msg = null ;  if  ( extras . contains key (  base columns .    id )  )   {  final long message id = extras . get long (  base columns .    id )  ;  msg =  message . restore message with id ( get context (  )  message id )  ;   }  if  ( msg  =  =  null )   {  msg = new  message (  )  ;   }  return ui save message ( msg mailbox extras )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,ui save message,"private  uri   (  message msg  mailbox mailbox  bundle extras )  {  final  context context = get context (  )  ;  final  account account =  account . restore account with id ( context mailbox . m account key )  ;  if  ( account  =  =  null )  return null ;  final  string custom from address = extras . get string ( ui provider .  message columns . custom   from   address )  ;  if  (  !  text utils . is empty ( custom from address )  )   {  msg . m from = custom from address ;   }  else  {  msg . m from = account . get email address (  )  ;   }  msg . m time stamp =  system . current time millis (  )  ;  msg . m to = extras . get string ( ui provider .  message columns . to )  ;  msg . m cc = extras . get string ( ui provider .  message columns . cc )  ;  msg . m bcc = extras . get string ( ui provider .  message columns . bcc )  ;  msg . m subject = extras . get string ( ui provider .  message columns . subject )  ;  msg . m text = extras . get string ( ui provider .  message columns . body   text )  ;  msg . m html = extras . get string ( ui provider .  message columns . body   html )  ;  msg . m mailbox key = mailbox . m id ;  msg . m account key = mailbox . m account key ;  msg . m display name = msg . m to ;  msg . m flag loaded =  message . flag   loaded   complete ;  msg . m flag read = true ;  msg . m flag seen = true ;  msg . m quoted text start pos = extras . get int ( ui provider .  message columns . quote   start   pos 0 )  ;  int flags = 0 ;  final int draft type = extras . get int ( ui provider .  message columns . draft   type )  ;  switch  ( draft type )   {  case  draft type . forward: flags| =  message . flag   type   forward ;  break ;  case  draft type . reply   all: flags| =  message . flag   type   reply   all ;  case  draft type . reply: flags| =  message . flag   type   reply ;  break ;  case  draft type . compose: flags| =  message . flag   type   original ;  break ;   }  int draft info = 0 ;  if  ( extras . contains key ( ui provider .  message columns . quote   start   pos )  )   {  draft info = extras . get int ( ui provider .  message columns . quote   start   pos )  ;  if  ( extras . get int ( ui provider .  message columns . append   ref   message   content )   !  =  0 )   {  draft info| =  message . draft   info   append   ref   message ;   }   }  if  (  ! extras . contains key ( ui provider .  message columns . append   ref   message   content )  )   {  flags| =  message . flag   not   include   quoted   text ;   }  msg . m draft info = draft info ;  msg . m flags = flags ;  final  string ref = extras . get string ( ui provider .  message columns . ref   message   id )  ;  if  ( ref  !  =  null && msg . m quoted text start pos  >  =  0 )   {   string ref id =  uri . parse ( ref )  . get last path segment (  )  ;  try  {  msg . m source key =  long . parse long ( ref id )  ;   }  catch  (  number format exception e )   {   }   }  final  list < com . android . mail . providers .  attachment >  ui atts = com . android . mail . providers .  attachment . fromjson array ( extras . get string ( ui provider .  message columns . attachments )  )  ;  final  array list <  attachment >  atts = new  array list <  attachment >  (  )  ;  boolean has unloaded attachments = false ;   bundle attachment fds = extras . get parcelable ( ui provider .  send or save method param keys . opened   fd   map )  ;  for  ( com . android . mail . providers .  attachment ui att : ui atts )   {  final  uri att uri = ui att . uri ;  if  ( att uri  !  =  null && att uri . get authority (  )  . equals (  email content . authority )  )   {  final long att id =  long . parse long ( att uri . get last path segment (  )  )  ;  final  attachment att =  attachment . restore attachment with id ( context att id )  ;  if  ( att  !  =  null )   {  final  parcel p =  parcel . obtain (  )  ;  att . write to parcel ( p 0 )  ;  p . set data position ( 0 )  ;  final  attachment att clone = new  attachment ( p )  ;  p . recycle (  )  ;  att clone . m message key = 0 ;  if  ( mailbox . m type  =  =   mailbox . type   outbox && att . get content uri (  )   =  =  null &&  (  ( account . m flags &  account . flags   supports   smart   forward )   =  =  0 )  )   {  att clone . m flags| =  attachment . flag   download   forward ;  has unloaded attachments = true ;   }  atts . add ( att clone )  ;   }   }  else  {  final  string cached file uri =  attachment utils . cache attachment uri ( context ui att attachment fds )  ;  atts . add ( convert ui attachment to attachment ( ui att cached file uri msg . m account key )  )  ;   }   }  if  (  ! atts . is empty (  )  )   {  msg . m attachments = atts ;  msg . m flag attachment = true ;  if  ( has unloaded attachments )   {   utility . show toast ( context r . string . message   view   attachment   background   load )  ;   }   }  if  (  ! msg . is saved (  )  )   {  msg . save ( context )  ;   }  else  {  final  array list <  content provider operation >  ops = new  array list <  content provider operation >  (  )  ;  ops . add (  content provider operation . new delete (  content uris . with appended id (  attachment . message   id   uri msg . m id )  )  . build (  )  )  ;  ops . add (  content provider operation . new delete (  body . content   uri )  . with selection (  body columns . message   key  +  "" =  ? "" new  string[] {  long . to string ( msg . m id )  }  )  . build (  )  )  ;  msg . add save ops ( ops )  ;  try  {  apply batch ( ops )  ;   }  catch  (  operation application exception e )   {   log utils . d ( tag ""apply batch exception"" )  ;   }   }  notifyui message ( msg . m id )  ;  if  ( mailbox . m type  =  =   mailbox . type   outbox )   {  start sync ( mailbox 0 )  ;  final long original msg id = msg . m source key ;  if  ( original msg id  !  =  0 )   {  final  message original msg =  message . restore message with id ( context original msg id )  ;  if  ( original msg  !  =  null )   {  final  content values cv = new  content values (  )  ;  flags = original msg . m flags ;  switch  ( draft type )   {  case  draft type . forward: flags| =  message . flag   forwarded ;  break ;  case  draft type . reply   all: case  draft type . reply: flags| =  message . flag   replied   to ;  break ;   }  cv . put (  message columns . flags flags )  ;  context . get content resolver (  )  . update (  content uris . with appended id (  message . content   uri original msg id )  cv null null )  ;   }   }   }  return ui uri ( ""uimessage"" msg . m id )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,ui search,"private  cursor   (  uri uri  string[] projection )  {   log utils . d ( tag ""run search query in search %s"" uri )  ;  final long account id =  long . parse long ( uri . get last path segment (  )  )  ;   mailbox inbox =  mailbox . restore mailbox of type ( get context (  )  account id  mailbox . type   inbox )  ;  if  ( inbox  =  =  null )   {   log utils . w (  logging . log   tag "" in ui search  inbox doesn't exist for account ""  +  account id )  ;  return null ;   }   string filter = uri . get query parameter ( ui provider .  search query parameters . query )  ;  if  ( filter  =  =  null )   {  throw new  illegal argument exception ( "" no query parameter in search query"" )  ;   }   mailbox search mailbox = get search mailbox ( account id )  ;  final long search mailbox id = search mailbox . m id ;  m search params = new  search params ( inbox . m id filter search mailbox id )  ;  final  context context = get context (  )  ;  if  ( m search params . m offset  =  =  0 )   {   log utils . d ( tag ""deleting existing search results . "" )  ;  final  content resolver resolver = context . get content resolver (  )  ;  final  content values cv = new  content values ( 3 )  ;  cv . put (  mailbox . display   name m search params . m filter )  ;  cv . put (  mailbox . ui   sync   status  email content . sync   status   live )  ;  cv . put (  mailbox . total   count 0 )  ;  resolver . update (  content uris . with appended id (  mailbox . content   uri search mailbox id )  cv null null )  ;  resolver . delete (  message . content   uri  message columns . mailbox   key  +  "" = ""  +  search mailbox id null )  ;   }  run search query ( context account id search mailbox id )  ;  return ui query ( ui   folder  content uris . with appended id (  mailbox . content   uri search mailbox . m id )  projection false )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,ui send draft message,private  uri   ( final long account id final  bundle extras )  {  final  message msg ;  if  ( extras . contains key (  base columns .    id )  )   {  final long message id = extras . get long (  base columns .    id )  ;  msg =  message . restore message with id ( get context (  )  message id )  ;   }  else  {  msg = new  message (  )  ;   }  if  ( msg  =  =  null )  return null ;  final  mailbox mailbox = get mailbox by account id and type ( account id  mailbox . type   outbox )  ;  if  ( mailbox  =  =  null )  return null ;  final  mailbox sent mailbox = get mailbox by account id and type ( account id  mailbox . type   sent )  ;  if  ( sent mailbox  =  =  null )  return null ;  final  uri message uri = ui save message ( msg mailbox extras )  ;  notifyui (  mailbox . content   uri null )  ;  return message uri ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,ui undo,"private  cursor   (  string[] projection )  {  if  (  ! m last sequence ops . is empty (  )  )   {  try  {   matrix cursor c = new  matrix cursor with cached columns ( new  string[] { ui provider .  conversation columns . uri }  m last sequence ops . size (  )  )  ;  for  (   content provider operation op : m last sequence ops )   {  c . add row ( new  string[] { op . get uri (  )  . to string (  )  }  )  ;   }  apply batch ( m last sequence ops )  ;  m last sequence ops . clear (  )  ;  return c ;   }  catch  (   operation application exception e )   {   log utils . d ( tag ""apply batch exception"" )  ;   }   }  return new  matrix cursor with cached columns ( projection 0 )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,ui update attachment,"private int   (  uri uri  content values ui values )  {  int result = 0 ;   integer state value = ui values . get as integer ( ui provider .  attachment columns . state )  ;  if  ( state value  !  =  null )   {  long attachment id =  long . parse long ( uri . get last path segment (  )  )  ;   context context = get context (  )  ;   attachment attachment =  attachment . restore attachment with id ( context attachment id )  ;  if  ( attachment  =  =  null )   {  return result ;   }  int state = state value ;   content values values = new  content values (  )  ;  if  ( state  =  =  ui provider .  attachment state . not   saved || state  =  =  ui provider .  attachment state . redownloading )   {  values . put (  attachment columns . ui   state ui provider .  attachment state . not   saved )  ;  values . put (  attachment columns . flags attachment . m flags& = ~ attachment . flag   download   user   request )  ;  attachment . update ( context values )  ;  result = 1 ;   }  if  ( state  =  =  ui provider .  attachment state . downloading || state  =  =  ui provider .  attachment state . redownloading )   {  values . put (  attachment columns . ui   state ui provider .  attachment state . downloading )  ;   integer destination value = ui values . get as integer ( ui provider .  attachment columns . destination )  ;  values . put (  attachment columns . ui   destination destination value  =  =  null  ?  0 : destination value )  ;  values . put (  attachment columns . flags attachment . m flags |  attachment . flag   download   user   request )  ;  if  ( values . contains key (  attachment columns . location )  &&  text utils . is empty ( values . get as string (  attachment columns . location )  )  )   {   log utils . w ( tag new  throwable (  )  ""attachment with blank location"" )  ;   }  attachment . update ( context values )  ;  result = 1 ;   }  if  ( state  =  =  ui provider .  attachment state . saved )   {  if  (  !  text utils . is empty ( attachment . m content id )  )   {  notifyui ( uiprovider   message   notifier attachment . m message key )  ;   }  result = 1 ;   }   }  return result ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,ui update folder,private int   ( final  context context  uri uri  content values ui values )  {  if  ( ui values . contains key ( ui provider .  conversation columns . seen )  )   {  final int seen value = ui values . get as integer ( ui provider .  conversation columns . seen )  ;  if  ( seen value  =  =  1 )   {  final  string mailbox id = uri . get last path segment (  )  ;  final int rows = mark all seen ( context mailbox id )  ;  if  ( ui values . size (  )   =  =  1 )   {  return rows ;   }   }   }  final  uri our uri = convert to email provider uri ( uri  mailbox . content   uri true )  ;  if  ( our uri  =  =  null )  return 0 ;   content values our values = new  content values (  )  ;  for  (   string column name : ui values . key set (  )  )   {  if  ( column name . equals (  mailbox columns . last   touched   time )  )   {  our values . put (  mailbox columns . last   touched   time ui values . get as long ( column name )  )  ;   }   }  return update ( our uri our values null null )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,ui update message,"private int   (  uri uri  content values values boolean force sync )  {   context context = get context (  )  ;   message msg = get message from last segment ( uri )  ;  if  ( msg  =  =  null )  return 0 ;   mailbox mailbox =  mailbox . restore mailbox with id ( context msg . m mailbox key )  ;  if  ( mailbox  =  =  null )  return 0 ;   uri our base uri =  ( force sync || uploads to server ( context mailbox )  )   ?   message . synced   content   uri :  message . content   uri ;   uri our uri = convert to email provider uri ( uri our base uri true )  ;  if  ( our uri  =  =  null )  return 0 ;  if  ( values . contains key ( ui provider .  message operations . respond   column )  )   {  final  email service proxy service =  email service utils . get service for account ( context mailbox . m account key )  ;  try  {  service . send meeting response ( msg . m id values . get as integer ( ui provider .  message operations . respond   column )  )  ;  ui delete message ( uri )  ;   utility . show toast ( context r . string . confirm   response )  ;  notifyui conversation mailbox ( mailbox . m id )  ;   }  catch  (   remote exception e )   {   log utils . d ( tag "" remote exception while sending meeting response"" )  ;   }  return 1 ;   }  final  string operation = values . get as string ( ui provider .  conversation operations . operation   key )  ;  if  ( ui provider .  conversation operations . discard   drafts . equals ( operation )  || ui provider .  conversation operations . move   failed   to   drafts . equals ( operation )  )   {  ui delete message ( uri )  ;  return 1 ;   }   content values undo values = new  content values (  )  ;   content values our values = convert ui message values ( msg values )  ;  for  (   string column name : our values . key set (  )  )   {  if  ( column name . equals (  message columns . mailbox   key )  )   {  undo values . put (  message columns . mailbox   key msg . m mailbox key )  ;   }  else if  ( column name . equals (  message columns . flag   read )  )   {  undo values . put (  message columns . flag   read msg . m flag read )  ;   }  else if  ( column name . equals (  message columns . flag   seen )  )   {  undo values . put (  message columns . flag   seen msg . m flag seen )  ;   }  else if  ( column name . equals (  message columns . flag   favorite )  )   {  undo values . put (  message columns . flag   favorite msg . m flag favorite )  ;   }   }  if  ( undo values . size (  )   =  =  0 )   {  return  - 1 ;   }  final  boolean suppress undo = values . get as boolean ( ui provider .  conversation operations .  parameters . suppress   undo )  ;  if  ( suppress undo  =  =  null ||  ! suppress undo )   {  final  content provider operation op =  content provider operation . new update ( convert to email provider uri ( uri our base uri false )  )  . with values ( undo values )  . build (  )  ;  add to sequence ( uri op )  ;   }  return update ( our uri our values null null )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,ui update recent folders,private int   (  uri uri  content values values )  {  final int num folders = values . size (  )  ;  final  string id = uri . get path segments (  )  . get ( 1 )  ;  final  uri[] folders = new  uri[num folders] ;  final  context context = get context (  )  ;  int i = 0 ;  for  (  final  string uri string : values . key set (  )  )   {  folders[i] =  uri . parse ( uri string )  ;   }  return update timestamp ( context id folders )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,ui update settings,private int   ( final  context c final  content values ui values )  {  final  mail prefs mail prefs =  mail prefs . get ( c )  ;  if  ( ui values . contains key (  settings columns . auto   advance )  )   {  mail prefs . set auto advance mode ( ui values . get as integer (  settings columns . auto   advance )  )  ;   }  if  ( ui values . contains key (  settings columns . conversation   view   mode )  )   {  final int value = ui values . get as integer (  settings columns . conversation   view   mode )  ;  final boolean overview mode = value  =  =  ui provider .  conversation view mode . overview ;  mail prefs . set conversation overview mode ( overview mode )  ;   }  c . get content resolver (  )  . notify change ( uiprovider   all   accounts   notifier null false )  ;  return 1 ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,ui uri,public static  uri   (  string type long id )  {  return  uri . parse ( ui uri string ( type id )  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,ui uri string,"public static  string   (  string type long id )  {  return ""content: /  / ""  +   email content . authority  +  "" / "" +  type +   (  ( id  =  =   - 1 )   ?  """" :  ( "" / ""  +  id )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,ui virtual mailboxes,private  cursor   ( final  string id final  string[] ui projection )  {  final  matrix cursor mc = new  matrix cursor with cached columns ( ui projection )  ;  if  ( id . equals ( combined   account   id   string )  )   {  mc . add row ( get virtual mailbox row ( combined   account   id  mailbox . type   inbox ui projection )  )  ;  mc . add row ( get virtual mailbox row ( combined   account   id  mailbox . type   starred ui projection )  )  ;  mc . add row ( get virtual mailbox row ( combined   account   id  mailbox . type   unread ui projection )  )  ;   }  else  {  final long acct id =  long . parse long ( id )  ;  mc . add row ( get virtual mailbox row ( acct id  mailbox . type   starred ui projection )  )  ;  mc . add row ( get virtual mailbox row ( acct id  mailbox . type   unread ui projection )  )  ;   }  return mc ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,update,"@ override public int   (  uri uri  content values values  string selection  string[] selection args )  {   log utils . d ( tag "" update: ""  +  uri )  ;  if  ( integrity   check   uri . equals ( uri )  )   {  check databases (  )  ;  return 0 ;   }  else "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,update account sync interval,"private void   ( final long account id final  content values values )  {  final  integer sync interval = values . get as integer (  account columns . sync   interval )  ;  if  ( sync interval  =  =  null )   {  return ;   }  final android . accounts .  account account = get account manager account ( account id )  ;  if  ( account  =  =  null )   {  return ;   }   log utils . d ( tag "" setting sync interval for account %s to %d minutes"" account id sync interval )  ;  final  list <  periodic sync >  syncs =  content resolver . get periodic syncs ( account  email content . authority )  ;  for  (  final  periodic sync sync : syncs )   {   content resolver . remove periodic sync ( account  email content . authority sync . extras )  ;   }  if  ( sync interval  >  0 )   {   content resolver . add periodic sync ( account  email content . authority  bundle . empty sync interval *  date utils . minute   in   millis  /   date utils . second   in   millis )  ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,update sync status,private void   ( final  bundle extras )  {  final long id = extras . get long (  email service status . sync   status   id )  ;  final int status code = extras . get int (  email service status . sync   status   code )  ;  final  uri uri =  content uris . with appended id ( folder   status   uri id )  ;  notifyui ( uri null )  ;  final boolean in progress = status code  =  =   email service status . in   progress ;  if  ( in progress )   {   refresh status monitor . get instance ( get context (  )  )  . set sync started ( id )  ;   }  else  {  final int result = extras . get int (  email service status . sync   result )  ;  final  content values values = new  content values (  )  ;  values . put (  mailbox . ui   last   sync   result result )  ;  m database . update (  mailbox . table   name values where   id new  string[] {  string . value of ( id )  }  )  ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,update timestamp,"private int   ( final  context context  string id  uri[] folders )  {  int updated = 0 ;  final long now =  system . current time millis (  )  ;  final  content resolver resolver = context . get content resolver (  )  ;  final  content values touch values = new  content values ( 1 )  ;  for  (  final  uri folder : folders )   {  touch values . put (  mailbox columns . last   touched   time now )  ;   log utils . d ( tag ""update stamp: %s updated"" folder )  ;  updated +  = resolver . update ( folder touch values null null )  ;   }  final  uri to notify = uiprovider   recent   folders   notifier . build upon (  )  . append path ( id )  . build (  )  ;   log utils . d ( tag ""update timestamp:  notifying on %s"" to notify )  ;  notifyui ( to notify null )  ;  return updated ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,uploads to server,private static boolean   (  context context  mailbox m )  {  if  ( m . m type  =  =   mailbox . type   drafts || m . m type  =  =   mailbox . type   outbox || m . m type  =  =   mailbox . type   search )   {  return false ;   }   string protocol =  account . get protocol ( context m . m account key )  ;   email service info info =  email service utils . get service info ( context protocol )  ;  return  ( info  !  =  null && info . sync changes )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,uri with column,"private static  string   (  string type  string column name )  {  return ""'content: /  / ""  +   email content . authority  +  "" / "" +  type +  "" / ' || "" +  column name ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,uri withfq id,"private static  string   (  string type  string table name )  {  return ""'content: /  / ""  +   email content . authority  +  "" / "" +  type +  "" / ' || "" +  table name +  "" .    id"" ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,uri with id,private static  string   (  string type )  {  return uri with column ( type  base columns .    id )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,where with,"private static  string   (  string where  string selection )  {  if  ( selection  =  =  null )   {  return where ;   }  return where  +  "" and  ( ""  +  selection +  "" ) "" ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,where with id,"private static  string   (  string id  string selection )  {   string builder sb = new  string builder ( 256 )  ;  sb . append ( ""   id = "" )  ;  sb . append ( id )  ;  if  ( selection  !  =  null )   {  sb . append ( "" and  ( "" )  ;  sb . append ( selection )  ;  sb . append ( ' ) ' )  ;   }  return sb . to string (  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,write body file,"private static void   ( final  context c final long message id final  string ext final  string content )  throws io exception  {  final  file text file = get body file ( c message id ext )  ;  if  (  text utils . is empty ( content )  )   {  if  (  ! text file . delete (  )  )   {   log utils . v (  log utils . tag ""did not delete text body for %d"" message id )  ;   }   }  else  {  final  file writer w = new  file writer ( text file )  ;  try  {  w . write ( content )  ;   }  finally  {  w . close (  )  ;   }   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,write body files,"private static void   ( final  context c final long message id final  content values cv )  throws  illegal state exception  {  if  ( cv . contains key (  body columns . html   content )  )   {  final  string html content = cv . get as string (  body columns . html   content )  ;  try  {  write body file ( c message id ""html"" html content )  ;   }  catch  (  final io exception e )   {  throw new  illegal state exception ( ""io exception while writing html body ""  +  ""for message id ""  +   long . to string ( message id )  e )  ;   }   }  if  ( cv . contains key (  body columns . text   content )  )   {  final  string text content = cv . get as string (  body columns . text   content )  ;  try  {  write body file ( c message id ""txt"" text content )  ;   }  catch  (  final io exception e )   {  throw new  illegal state exception ( ""io exception while writing text body ""  +  ""for message id ""  +   long . to string ( message id )  e )  ;   }   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EasTestAuthenticatorService.java, eas authenticator,public   (  context context )  {  super ( context )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EasTestAuthenticatorService.java,add account,@ override public  bundle   (  account authenticator response response  string account type  string auth token type  string[] required features  bundle options )  throws  network error exception  {  if  ( options  !  =  null && options . contains key ( op
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EasTestAuthenticatorService.java,confirm credentials,@ override public  bundle   (  account authenticator response response  account account  bundle options )  {  return null ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EasTestAuthenticatorService.java,edit properties,@ override public  bundle   (  account authenticator response response  string account type )  {  return null ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EasTestAuthenticatorService.java,get auth token,@ override public  bundle   (  account authenticator response response  account account  string auth token type  bundle login options )  throws  network error exception  {  return null ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EasTestAuthenticatorService.java,get auth token label,@ override public  string   (  string auth token type )  {  return null ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EasTestAuthenticatorService.java,has features,@ override public  bundle   (  account authenticator response response  account account  string[] features )  throws  network error exception  {  return null ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EasTestAuthenticatorService.java,on bind,@ override public i binder   (  intent intent )  {  if  (  account manager . action   authenticator   intent . equals ( intent . get action (  )  )  )   {  return new  eas authenticator ( this )  . geti binder (  )  ;   }  else  {  return null ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EasTestAuthenticatorService.java,update credentials,@ override public  bundle   (  account authenticator response response  account account  string auth token type  bundle login options )  {  return null ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailBroadcastProcessorService.java, email broadcast processor service,public   (  )  {  super (  email broadcast processor service . class . get name (  )  )  ;  set intent redelivery ( true )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailBroadcastProcessorService.java,disable component,private void   ( final  class <  ?  >  klass )  {  get package manager (  )  . set component enabled setting ( new  component name ( this klass )   package manager . component   enabled   state   disabled  package manager . dont   kill   app )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailBroadcastProcessorService.java,fix periodic syncs,private void   ( final  string am account type final  map <  string  integer >  sync intervals )  {  final android . accounts .  account[] am accounts =  account manager . get ( this )  . get accounts by type ( am account type )  ;  for  (  android . accounts .  account am account : am accounts )   {  remove periodic syncs ( am account  email content . authority )  ;  remove periodic syncs ( am account  calendar contract . authority )  ;  remove periodic syncs ( am account  contacts contract . authority )  ;  final  integer sync interval = sync intervals . get ( am account . name )  ;  if  ( sync interval  !  =  null && sync interval  >  0 )   {   content resolver . add periodic sync ( am account  email content . authority  bundle . empty sync interval *  date utils . minute   in   millis  /   date utils . second   in   millis )  ;   }   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailBroadcastProcessorService.java,get sync intervals,private  map <  string  integer >    (  )  {  final  cursor c = get content resolver (  )  . query (  account . content   uri account   sync   interval   projection null null null )  ;  if  ( c  !  =  null )   {  final  map <  string  integer >  periodic syncs =  maps . new hash map with expected size ( c . get count (  )  )  ;  try  {  while  ( c . move to next (  )  )   {  periodic syncs . put ( c . get string ( account   sync   interval   address   column )  c . get int ( account   sync   interval   interval   column )  )  ;   }   }  finally  {  c . close (  )  ;   }  return periodic syncs ;   }  return  collections . empty map (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailBroadcastProcessorService.java,is component disabled,private boolean   ( final  class <  ?  >  klass )  {  return get package manager (  )  . get component enabled setting ( new  component name ( this klass )  )   =  =   package manager . component   enabled   state   disabled ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailBroadcastProcessorService.java,on app upgrade,"private void   (  )  {  if  ( is component disabled (  email upgrade broadcast receiver . class )  )   {  return ;   }  final  map <  string  string >  protocol map =  maps . new hash map with expected size ( 4 )  ;  protocol map . put ( ""imap"" get string ( r . string . protocol   legacy   imap )  )  ;  protocol map . put ( ""pop3"" get string ( r . string . protocol   pop3 )  )  ;  remove noop upgrades ( protocol map )  ;  if  (  ! protocol map . is empty (  )  )   {  protocol map . put ( ""imap   type"" get string ( r . string . account   manager   type   legacy   imap )  )  ;  protocol map . put ( ""pop3   type"" get string ( r . string . account   manager   type   pop3 )  )  ;  update account manager accounts of type ( ""com . android . email"" protocol map )  ;   }  protocol map . clear (  )  ;  protocol map . put ( ""eas"" get string ( r . string . protocol   eas )  )  ;  remove noop upgrades ( protocol map )  ;  if  (  ! protocol map . is empty (  )  )   {  protocol map . put ( ""eas   type"" get string ( r . string . account   manager   type   exchange )  )  ;  update account manager accounts of type ( ""com . android . exchange"" protocol map )  ;   }  disable component (  legacy email authenticator service . class )  ;  disable component (  legacy eas authenticator service . class )  ;  final  map <  string  integer >  sync intervals = get sync intervals (  )  ;  for  (  final  email service utils .  email service info service :  email service utils . get service info list ( this )  )   {  fix periodic syncs ( service . account type sync intervals )  ;   }  disable component (  email upgrade broadcast receiver . class )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailBroadcastProcessorService.java,on boot completed,private void   (  )  {  perform one time initialization (  )  ;  reconcile and start services (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailBroadcastProcessorService.java,on handle intent,@ override protected void   (  intent intent )  {  final  string action = intent . get action (  )  ;  if  ( action   broadcast . equals ( action )  )   {  final  intent broadcast intent = intent . get parcelable extra (  intent . extra   intent )  ;  fin
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailBroadcastProcessorService.java,on system account changed,"private void   (  )  {   log utils . i (  logging . log   tag "" system accounts updated . "" )  ;  reconcile and start services (  )  ;   notification action utils . resend notifications ( get application context (  )  null null )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailBroadcastProcessorService.java,perform one time initialization,"private void   (  )  {  final  preferences pref =  preferences . get preferences ( this )  ;  int progress = pref . get one time initialization progress (  )  ;  final int initial progress = progress ;  if  ( progress  <  1 )   {   log utils . i (  logging . log   tag "" onetime initialization: 1"" )  ;  progress = 1 ;   email service utils . enable exchange component ( this )  ;   }  if  ( progress  <  2 )   {   log utils . i (  logging . log   tag "" onetime initialization: 2"" )  ;  progress = 2 ;  set imap delete policy ( this )  ;   }  if  ( progress  !  =  initial progress )   {  pref . set one time initialization progress ( progress )  ;   log utils . i (  logging . log   tag "" onetime initialization: completed . "" )  ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailBroadcastProcessorService.java,process broadcast intent,public static void   (  context context  intent broadcast intent )  {   intent i = new  intent ( context  email broadcast processor service . class )  ;  i . set action ( action   broadcast )  ;  i . put extra (  intent . extra   intent broadcast intent )  ;  context . start service ( i )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailBroadcastProcessorService.java,process device policy message,public static void   (  context context int message )  {   intent i = new  intent ( context  email broadcast processor service . class )  ;  i . set action ( action   device   policy   admin )  ;  i . put extra ( extra   device   policy   admin message )  ;  context . start service ( i )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailBroadcastProcessorService.java,process upgrade broadcast intent,public static void   ( final  context context )  {  final  intent i = new  intent ( context  email broadcast processor service . class )  ;  i . set action ( action   upgrade   broadcast )  ;  context . start service ( i )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailBroadcastProcessorService.java,reconcile and start services,private void   (  )  {  on app upgrade (  )  ;   account reconciler . reconcile accounts ( this )  ;   email service utils . start remote services ( this )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailBroadcastProcessorService.java,remove noop upgrades,@ visible for testing protected static void   ( final  map <  string  string >  protocol map )  {  final  set <  string >  key set = new  hash set <  string >  ( protocol map . key set (  )  )  ;  for  (  final  string key : key set )   {  if  (  text uti
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailBroadcastProcessorService.java,remove periodic syncs,private static void   ( final android . accounts .  account am account final  string authority )  {  final  list <  periodic sync >  syncs =  content resolver . get periodic syncs ( am account authority )  ;  for  (  final  periodic sync sync : syncs )   {   content resolver . remove periodic sync ( am account authority sync . extras )  ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailBroadcastProcessorService.java,set imap delete policy,static void   (  context context )  {   content resolver resolver = context . get content resolver (  )  ;   cursor c = resolver . query (  account . content   uri  account . content   projection null null null )  ;  try  {  while  ( c . move to next (  )  )   {  long recv auth key = c . get long (  account . content   host   auth   key   recv   column )  ;   host auth recv auth =  host auth . restore host auth with id ( context recv auth key )  ;   string legacy imap protocol = context . get string ( r . string . protocol   legacy   imap )  ;  if  ( legacy imap protocol . equals ( recv auth . m protocol )  )   {  int flags = c . get int (  account . content   flags   column )  ;  flags& = ~ account . flags   delete   policy   mask ;  flags| =  account . delete   policy   on   delete  <  <   account . flags   delete   policy   shift ;   content values cv = new  content values (  )  ;  cv . put (  account columns . flags flags )  ;  long account id = c . get long (  account . content   id   column )  ;   uri uri =  content uris . with appended id (  account . content   uri account id )  ;  resolver . update ( uri cv null null )  ;   }   }   }  finally  {  c . close (  )  ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailBroadcastProcessorService.java,update account manager accounts of type,private void   ( final  string am account type final  map <  string  string >  protocol map )  {  final android . accounts .  account[] am accounts =  account manager . get ( this )  . get accounts by type ( am account type )  ;  for  (  android . accounts .  account am account : am accounts )   {   email service utils . update account manager type ( this am account protocol map )  ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailUpgradeBroadcastReceiver.java,on receive,@ override public void   ( final  context context final  intent intent )  {   email broadcast processor service . process upgrade broadcast intent ( context )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailBroadcastReceiver.java,on receive,@ override public void   (  context context  intent intent )  {   email broadcast processor service . process broadcast intent ( context intent )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailServiceStub.java, message retrieval listener bridge,public   ( final long message id final long attachment id final i email service callback callback )  {  m message id = message id ;  m attachment id = attachment id ;  m callback = callback ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailServiceStub.java,auto discover,@ override public  bundle   ( final  string user name final  string password )  throws  remote exception  {  return null ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailServiceStub.java,get api version,public int   (  )  {  return  email service version . current ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailServiceStub.java,init,protected void   (  context context )  {  m context = context ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailServiceStub.java,load attachment,@ override public void   ( final i email service callback cb final long account id final long attachment id final boolean background )  throws  remote exception  {   folder remote folder = null ;  try  {   attachment attachment =  attachment . restore att
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailServiceStub.java,load attachment progress,@ override public void   ( int progress )  {  try  {  m callback . load attachment status ( m message id m attachment id  email service status . in   progress progress )  ;   }  catch  (  final  remote exception e )   {   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailServiceStub.java,push modify,"@ override public void   ( final long account id )  throws  remote exception  {   log utils . e (  logging . log   tag ""push modify invalid for account type for %d"" account id )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailServiceStub.java,request sync,"protected void   ( long mailbox id boolean user request int delta message count )  {  final  mailbox mailbox =  mailbox . restore mailbox with id ( m context mailbox id )  ;  if  ( mailbox  =  =  null )  return ;  final  account account =  account . restore account with id ( m context mailbox . m account key )  ;  if  ( account  =  =  null )  return ;  final  email service info info =  email service utils . get service info for account ( m context account . m id )  ;  final android . accounts .  account acct = new android . accounts .  account ( account . m email address info . account type )  ;  final  bundle extras =  mailbox . create sync bundle ( mailbox id )  ;  if  ( user request )   {  extras . put boolean (  content resolver . sync   extras   manual true )  ;  extras . put boolean (  content resolver . sync   extras   do   not   retry true )  ;  extras . put boolean (  content resolver . sync   extras   expedited true )  ;   }  if  ( delta message count  !  =  0 )   {  extras . put int (  mailbox . sync   extra   delta   message   count delta message count )  ;   }   content resolver . request sync ( acct  email content . authority extras )  ;   log utils . i (  logging . log   tag ""request sync  email service stub start sync %s  %s"" account . to string (  )  extras . to string (  )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailServiceStub.java,search messages,@ override public int   ( final long account id final  search params params final long dest mailbox id )  throws  remote exception  {  return  email service status . success ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailServiceStub.java,send mail,@ override public void   ( final long account id )  throws  remote exception  {  send mail impl ( m context account id )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailServiceStub.java,send mail impl,"public static void   ( final  context context final long account id )  {  final  account account =  account . restore account with id ( context account id )  ;  if  ( account  =  =  null )   {   log utils . e (  log utils . tag ""account %d not found in send mail impl"" account id )  ;  return ;   }   traffic stats . set thread stats tag (  traffic flags . get smtp flags ( context account )  )  ;  final  notification controller nc =  notification controller creator holder . get instance ( context )  ;  final long outbox id =  mailbox . find mailbox of type ( context account . m id  mailbox . type   outbox )  ;  if  ( outbox id  =  =   mailbox . no   mailbox )   {  return ;   }  final  content resolver resolver = context . get content resolver (  )  ;  final  cursor c = resolver . query (  email content .  message . content   uri  email content .  message . id   column   projection  message columns . mailbox   key  +  "" =  ? "" new  string[] {  long . to string ( outbox id )  }  null )  ;  try  {  if  ( c . get count (  )   <  =  0 )   {  return ;   }  final  sender sender =  sender . get instance ( context account )  ;  final  store remote store =  store . get instance ( account context )  ;  final  content values move to sent values ;  if  ( remote store . require copy message to sent folder (  )  )   {   mailbox sent folder =  mailbox . restore mailbox of type ( context account id  mailbox . type   sent )  ;  move to sent values = new  content values (  )  ;  move to sent values . put (  message columns . mailbox   key sent folder . m id )  ;   }  else  {  move to sent values = null ;   }  while  ( c . move to next (  )  )   {  final long message id ;  if  ( move to sent values  !  =  null )   {  move to sent values . remove (  email content .  message columns . flags )  ;   }  try  {  message id = c . get long ( 0 )  ;  if  (  utility . has unloaded attachments ( context message id )  )   {  if  (  debug utils . debug )   {   log utils . d (  logging . log   tag "" can't send #""  +  message id  +  "" ;  unloaded attachments"" )  ;   }  continue ;   }  sender . send message ( message id )  ;   }  catch  (   messaging exception me )   {  if  ( me instanceof  authentication failed exception && nc  !  =  null )   {  nc . show login failed notification synchronous ( account . m id false )  ;   }  continue ;   }  final  uri synced uri =  content uris . with appended id (  email content .  message . synced   content   uri message id )  ;   attachment utilities . delete all cached attachment files ( context account . m id message id )  ;  if  ( move to sent values  !  =  null )   {  final  email content .  message msg =  email content .  message . restore message with id ( context message id )  ;  if  (  ( msg . m flags &  email content .  message . flag   type   forward )   !  =  0 )   {   attachment utilities . delete all attachment files ( context account . m id message id )  ;   }  final int flags = msg . m flags & ~ (  email content .  message . flag   type   reply |  email content .  message . flag   type   forward |  email content .  message . flag   type   reply   all|  email content .  message . flag   type   original )  ;  move to sent values . put (  email content .  message columns . flags flags )  ;  resolver . update ( synced uri move to sent values null null )  ;   }  else  {   attachment utilities . delete all attachment files ( context account . m id message id )  ;  final  uri uri =  content uris . with appended id (  email content .  message . content   uri message id )  ;  resolver . delete ( uri null null )  ;  resolver . delete ( synced uri null null )  ;   }   }  if  ( nc  !  =  null )   {  nc . cancel login failed notification ( account . m id )  ;   }   }  catch  (   messaging exception me )   {  if  ( me instanceof  authentication failed exception && nc  !  =  null )   {  nc . show login failed notification synchronous ( account . m id false )  ;   }   }  finally  {  c . close (  )  ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailServiceStub.java,sync,@ override public int   ( final long account id final  bundle sync extras )  {  return  email service status . success ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailServiceStub.java,update folder list,"@ override public void   ( final long account id )  throws  remote exception  {  final  account account =  account . restore account with id ( m context account id )  ;  if  ( account  =  =  null )   {   log utils . e (  log utils . tag "" account %d not f"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailServiceStub.java,validate,@ override public  bundle   (  host auth compat host auth com )  throws  remote exception  {  return null ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailServiceUtils.java,are remote services installed,public static boolean   (  context context )  {  for  (   email service info info : get service info list ( context )  )   {  if  ( info . intent action  !  =  null )   {  return true ;   }   }  return false ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailServiceUtils.java,as binder,@ override public i binder   (  )  {  return null ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailServiceUtils.java,as calendar sync adapter,"private static  uri   (  uri uri  string account  string account type )  {  return uri . build upon (  )  . append query parameter (  calendar contract . caller   is   syncadapter ""true"" )  . append query parameter (  calendars . account   name account )  . append query parameter (  calendars . account   type account type )  . build (  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailServiceUtils.java,auto discover,@ override public  bundle   (  string user name  string password )  throws  remote exception  {  return null ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailServiceUtils.java,disable exchange components,"public static void   ( final  context context )  {   log utils . d (  log utils . tag "" disabling eas authenticators"" )  ;  set component status ( context  eas authenticator service alternate . class false )  ;  set component status ( context  eas authenticator service . class false )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailServiceUtils.java,enable exchange component,"public static void   ( final  context context )  {  if  (  vendor policy loader . get instance ( context )  . use alternate exchange strings (  )  )   {   log utils . d (  log utils . tag "" enabling alternate eas authenticator"" )  ;  set component status ( context  eas authenticator service alternate . class true )  ;  set component status ( context  eas authenticator service . class false )  ;   }  else  {   log utils . d (  log utils . tag "" enabling eas authenticator"" )  ;  set component status ( context  eas authenticator service . class true )  ;  set component status ( context  eas authenticator service alternate . class false )  ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailServiceUtils.java,finish account manager blocker,"private static void   (  account manager future <  ?  >  future )  {  try  {  future . get result (  )  ;   }  catch  (   operation canceled exception e )   {   log utils . w (  log utils . tag e ""finish account manager blocker"" )  ;   }  catch  (   authenticator exception e )   {   log utils . w (  log utils . tag e ""finish account manager blocker"" )  ;   }  catch  (  io exception e )   {   log utils . w (  log utils . tag e ""finish account manager blocker"" )  ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailServiceUtils.java,get api version,public int   (  )  {  return  email service version . current ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailServiceUtils.java,get protocol from account type,public static @ nullable  string   ( final  context context final  string account type )  {  if  (  text utils . is empty ( account type )  )   {  return null ;   }  final  map <  string  email service info >  service info map = get service map ( context )  ;   string protocol = null ;  for  (  final  email service info info : service info map . values (  )  )   {  if  (  text utils . equals ( account type info . account type )  )   {  if  (  !  text utils . is empty ( protocol )  &&  !  text utils . equals ( protocol info . protocol )  )   {  return null ;   }  protocol = info . protocol ;   }   }  return protocol ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailServiceUtils.java,get service,"public static  email service proxy   (  context context  string protocol )  {   email service info info = null ;  if  ( protocol  !  =  null )   {  info = get service info ( context protocol )  ;   }  if  ( info  =  =  null )   {   log utils . w (  log utils . tag "" returning  null service for %s"" protocol )  ;  return new  email service proxy ( context  null service . class )  ;   }  else  {  return get service from info ( context info )  ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailServiceUtils.java,get service for account,public static  email service proxy   (  context context long account id )  {  return get service ( context  account . get protocol ( context account id )  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailServiceUtils.java,get service from info,public static  email service proxy   (  context context  email service info info )  {  if  ( info . klass  !  =  null )   {  return new  email service proxy ( context info . klass )  ;   }  else  {  final  intent service intent = get service intent ( info )  ;  return new  email service proxy ( context service intent )  ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailServiceUtils.java,get service info,public static  email service info   (  context context  string protocol )  {  return get service map ( context )  . get ( protocol )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailServiceUtils.java,get service info for account,public static  email service info   (  context context long account id )  {   string protocol =  account . get protocol ( context account id )  ;  return get service info ( context protocol )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailServiceUtils.java,get service info list,public static  collection <  email service info >    (  context context )  {  return get service map ( context )  . values (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailServiceUtils.java,get service intent,private static  intent   (  email service info info )  {  final  intent service intent = new  intent ( info . intent action )  ;  service intent . set package ( info . intent package )  ;  return service intent ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailServiceUtils.java,get service map,"private static  map <  string  email service info >    ( final  context context )  {  synchronized  ( s service map lock )   {  if  ( s service map  =  =  null )   {  s old configuration . set to ( context . get resources (  )  . get configuration (  )  )  ;   }  final int delta = s old configuration . update from ( context . get resources (  )  . get configuration (  )  )  ;  if  ( s service map  !  =  null &&  !  configuration . need new resources ( delta  activity info . config   locale )  )   {  return s service map ;   }  final  immutable map .  builder <  string  email service info >  builder =  immutable map . builder (  )  ;  if  (  ! context . get resources (  )  . get boolean ( r . bool . enable   services )  )   {  s service map = builder . build (  )  ;  return s service map ;   }  try  {  final  resources res = context . get resources (  )  ;  final  xml resource parser xml = res . get xml ( r . xml . services )  ;  int xml event type ;  while  (  ( xml event type = xml . next (  )  )   !  =   xml resource parser . end   document )   {  if  ( xml event type  =  =   xml resource parser . start   tag && ""emailservice"" . equals ( xml . get name (  )  )  )   {  final  email service info info = new  email service info (  )  ;  final  typed array ta = res . obtain attributes ( xml r . styleable .  email service info )  ;  info . protocol = ta . get string ( r . styleable .  email service info   protocol )  ;  info . account type = ta . get string ( r . styleable .  email service info   account type )  ;  info . name = ta . get string ( r . styleable .  email service info   name )  ;  info . hide = ta . get boolean ( r . styleable .  email service info   hide false )  ;  final  string klass = ta . get string ( r . styleable .  email service info   service class )  ;  info . intent action = ta . get string ( r . styleable .  email service info   intent )  ;  info . intent package = ta . get string ( r . styleable .  email service info   intent package )  ;  info . default ssl = ta . get boolean ( r . styleable .  email service info   default ssl false )  ;  info . port = ta . get integer ( r . styleable .  email service info   port 0 )  ;  info . port ssl = ta . get integer ( r . styleable .  email service info   port ssl 0 )  ;  info . offer tls = ta . get boolean ( r . styleable .  email service info   offer tls false )  ;  info . offer certs = ta . get boolean ( r . styleable .  email service info   offer certs false )  ;  info . offero auth = ta . get boolean ( r . styleable .  email service info   offero auth false )  ;  info . offer local deletes = ta . get boolean ( r . styleable .  email service info   offer local deletes false )  ;  info . default local deletes = ta . get integer ( r . styleable .  email service info   default local deletes  account . delete   policy   on   delete )  ;  info . offer prefix = ta . get boolean ( r . styleable .  email service info   offer prefix false )  ;  info . uses smtp = ta . get boolean ( r . styleable .  email service info   uses smtp false )  ;  info . uses autodiscover = ta . get boolean ( r . styleable .  email service info   uses autodiscover false )  ;  info . offer lookback = ta . get boolean ( r . styleable .  email service info   offer lookback false )  ;  info . default lookback = ta . get integer ( r . styleable .  email service info   default lookback  sync window . sync   window   3   days )  ;  info . sync changes = ta . get boolean ( r . styleable .  email service info   sync changes false )  ;  info . sync contacts = ta . get boolean ( r . styleable .  email service info   sync contacts false )  ;  info . sync calendar = ta . get boolean ( r . styleable .  email service info   sync calendar false )  ;  info . offer attachment preload = ta . get boolean ( r . styleable .  email service info   offer attachment preload false )  ;  info . sync interval strings = ta . get text array ( r . styleable .  email service info   sync interval strings )  ;  info . sync intervals = ta . get text array ( r . styleable .  email service info   sync intervals )  ;  info . default sync interval = ta . get integer ( r . styleable .  email service info   default sync interval 15 )  ;  info . infer prefix = ta . get string ( r . styleable .  email service info   infer prefix )  ;  info . offer load more = ta . get boolean ( r . styleable .  email service info   offer load more false )  ;  info . offer move to = ta . get boolean ( r . styleable .  email service info   offer move to false )  ;  info . requires setup = ta . get boolean ( r . styleable .  email service info   requires setup false )  ;  info . is gmail stub = ta . get boolean ( r . styleable .  email service info   is gmail stub false )  ;  if  ( klass  !  =  null )   {  try  {  info . klass =  (  class <  ?  extends  service >  )  class . for name ( klass )  ;   }  catch  (   class not found exception e )   {  throw new  illegal state exception ( "" class not found in service descriptor: ""  +  klass )  ;   }   }  if  ( info . klass  =  =  null && info . intent action  =  =  null &&  ! info . is gmail stub )   {  throw new  illegal state exception ( "" no class or intent action specified in service descriptor"" )  ;   }  if  ( info . klass  !  =  null && info . intent action  !  =  null )   {  throw new  illegal state exception ( "" both class and intent action specified in service descriptor"" )  ;   }  builder . put ( info . protocol info )  ;   }   }   }  catch  (   xml pull parser exception e )   {   }  catch  (  io exception e )   {   }  s service map = builder . build (  )  ;  return s service map ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailServiceUtils.java,is service available,public static boolean   (  context context  string protocol )  {   email service info info = get service info ( context protocol )  ;  if  ( info  =  =  null )  return false ;  if  ( info . klass  !  =  null )  return true ;  final  intent service intent = get service intent ( info )  ;  return new  email service proxy ( context service intent )  . test (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailServiceUtils.java,kill service,public static void   (  context context  string protocol )  {   email service info info = get service info ( context protocol )  ;  if  ( info  !  =  null && info . intent action  !  =  null )   {  final  intent service intent = get service intent ( info )  ;  service intent . put extra (  service proxy . extra   force   shutdown true )  ;  context . start service ( service intent )  ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailServiceUtils.java,move calendar data,"private static void   ( final  content resolver resolver final  string name final  string old type final  string new type )  {  final  uri old calendars =  calendars . content   uri . build upon (  )  . append query parameter (  calendar contract . caller   is   syncadapter ""true"" )  . append query parameter (  calendars . account   name name )  . append query parameter (  calendars . account   type old type )  . build (  )  ;  final  content values values = new  content values (  )  ;  values . put (  calendar contract .  calendars . account   type new type )  ;  resolver . update ( old calendars values  calendars . account   name  +  "" =  ?  and ""  +   calendars . account   type +  "" =  ? "" new  string[] { name old type }  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailServiceUtils.java,move contacts data,"private static void   ( final  content resolver resolver final  string name final  string old type final  string new type )  {  final  uri old contacts =  raw contacts . content   uri . build upon (  )  . append query parameter (  contacts contract . caller   is   syncadapter ""true"" )  . append query parameter (  raw contacts . account   name name )  . append query parameter (  raw contacts . account   type old type )  . build (  )  ;  final  content values values = new  content values (  )  ;  values . put (  calendar contract .  calendars . account   type new type )  ;  resolver . update ( old contacts values null null )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailServiceUtils.java,search messages,@ override public int   ( long account id  search params params long dest mailbox id )  throws  remote exception  {  return 0 ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailServiceUtils.java,set component status,public static void   ( final  context context  class <  ?  >  clazz boolean enabled )  {  final  component name c = new  component name ( context clazz . get name (  )  )  ;  context . get package manager (  )  . set component enabled setting ( c enabled  ?   package manager . component   enabled   state   enabled :  package manager . component   enabled   state   disabled  package manager . dont   kill   app )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailServiceUtils.java,set remote services logging,public static void   (  context context int debug bits )  {  for  (   email service info info : get service info list ( context )  )   {  if  ( info . intent action  !  =  null )   {   email service proxy service =  email service utils . get service ( context info . protocol )  ;  if  ( service  !  =  null )   {  try  {  service . set logging ( debug bits )  ;   }  catch  (   remote exception e )   {   }   }   }   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailServiceUtils.java,setup account manager account,public static  account manager future <  bundle >    ( final  context context final  account account final boolean email final boolean calendar final boolean contacts final  host auth host auth final  account manager callback <  bundle >  callback )  {  if  ( host auth  =  =  null )   {  return null ;   }  final  bundle options = new  bundle ( 5 )  ;  options . put string (  eas authenticator service . options   username account . m email address )  ;  options . put string (  eas authenticator service . options   password host auth . m password )  ;  options . put boolean (  eas authenticator service . options   contacts   sync   enabled contacts )  ;  options . put boolean (  eas authenticator service . options   calendar   sync   enabled calendar )  ;  options . put boolean (  eas authenticator service . options   email   sync   enabled email )  ;  final  email service info info = get service info ( context host auth . m protocol )  ;  return  account manager . get ( context )  . add account ( info . account type null null options null callback null )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailServiceUtils.java,start remote services,public static void   (  context context )  {  for  (   email service info info : get service info list ( context )  )   {  if  ( info . intent action  !  =  null )   {  final  intent service intent = get service intent ( info )  ;  context . start service ( service intent )  ;   }   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailServiceUtils.java,start service,public static void   (  context context  string protocol )  {   email service info info = get service info ( context protocol )  ;  if  ( info  !  =  null && info . intent action  !  =  null )   {  final  intent service intent = get service intent ( info )  ;  context . start service ( service intent )  ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailServiceUtils.java,sync,@ override public int   ( final long account id final  bundle sync extras )  {  return  email service status . success ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailServiceUtils.java,to string,"@ override public  string   (  )  {   string builder sb = new  string builder ( "" protocol: "" )  ;  sb . append ( protocol )  ;  sb . append ( ""  "" )  ;  sb . append ( klass  !  =  null  ?  "" local"" : "" remote"" )  ;  sb . append ( ""    account  type: "" ) "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailServiceUtils.java,update account manager type,"public static void   (  context context android . accounts .  account am account final  map <  string  string >  protocol map )  {  final  content resolver resolver = context . get content resolver (  )  ;  final  cursor c = resolver . query (  account . content   uri  account . content   projection  account columns . email   address  +  "" =  ? "" new  string[] { am account . name }  null )  ;  if  ( c  =  =  null )  return ;  try  {  if  ( c . move to next (  )  )   {  final  account account = new  account (  )  ;  account . restore ( c )  ;  final  host auth host auth =  host auth . restore host auth with id ( context account . m host auth key recv )  ;  if  ( host auth  =  =  null )   {  return ;   }  final  string new protocol = protocol map . get ( host auth . m protocol )  ;  if  ( new protocol  =  =  null )   {  return ;   }   log utils . w (  log utils . tag "" converting %s to %s"" am account . name new protocol )  ;  final  content values account values = new  content values (  )  ;  int old flags = account . m flags ;  account . m flags| =  account . flags   incomplete ;  account values . put (  account columns . flags account . m flags )  ;  final  uri account uri =  content uris . with appended id (  account . content   uri account . m id )  ;  resolver . update ( account uri account values null null )  ;  final  content values host values = new  content values (  )  ;  host values . put (  host auth columns . protocol new protocol )  ;  resolver . update (  content uris . with appended id (  host auth . content   uri host auth . m id )  host values null null )  ;   log utils . w (  log utils . tag "" updated  host auths"" )  ;  try  {  boolean email =  content resolver . get sync automatically ( am account  email content . authority )  ;  if  (  ! email )   {  email =  content resolver . get sync automatically ( am account ""com . android . email . provider"" )  ;   }  final boolean contacts =  content resolver . get sync automatically ( am account  contacts contract . authority )  ;  final boolean calendar =  content resolver . get sync automatically ( am account  calendar contract . authority )  ;   log utils . w (  log utils . tag "" email: %s   contacts: %s  calendar: %s"" email contacts calendar )  ;  final  string am name = am account . name ;  final  string old type = am account . type ;   content provider client client = context . get content resolver (  )  . acquire content provider client (  calendar contract . content   uri )  ;  byte[] calendar sync key = null ;  try  {  calendar sync key =  sync state contract .  helpers . get ( client as calendar sync adapter (  sync state . content   uri am name old type )  new android . accounts .  account ( am name old type )  )  ;   }  catch  (   remote exception e )   {   log utils . w (  log utils . tag "" get calendar key failed"" )  ;   }  finally  {  client . release (  )  ;   }  client = context . get content resolver (  )  . acquire content provider client (  contacts contract . authority   uri )  ;  byte[] contacts sync key = null ;  try  {  contacts sync key =  sync state contract .  helpers . get ( client  contacts contract .  sync state . content   uri new android . accounts .  account ( am name old type )  )  ;   }  catch  (   remote exception e )   {   log utils . w (  log utils . tag "" get contacts key failed"" )  ;   }  finally  {  client . release (  )  ;   }  if  ( calendar sync key  !  =  null )   {   log utils . w (  log utils . tag "" got calendar key: %s"" new  string ( calendar sync key )  )  ;   }  if  ( contacts sync key  !  =  null )   {   log utils . w (  log utils . tag "" got contacts key: %s"" new  string ( contacts sync key )  )  ;   }   account manager future <  ?  >  am future = setup account manager account ( context account email calendar contacts null )  ;  finish account manager blocker ( am future )  ;   log utils . w (  log utils . tag "" created new  account manager account"" )  ;  final  string account type = protocol map . get ( host auth . m protocol  +  ""   type"" )  ;  move calendar data ( context . get content resolver (  )  am name old type account type )  ;  move contacts data ( context . get content resolver (  )  am name old type account type )  ;  am future =  account manager . get ( context )  . remove account ( am account null null )  ;  finish account manager blocker ( am future )  ;   log utils . w (  log utils . tag "" deleted old  account manager account"" )  ;  if  ( account type  !  =  null && calendar sync key  !  =  null && calendar sync key . length  !  =  0 )   {  client = context . get content resolver (  )  . acquire content provider client (  calendar contract . content   uri )  ;  try  {   sync state contract .  helpers . set ( client as calendar sync adapter (  sync state . content   uri am name account type )  new android . accounts .  account ( am name account type )  calendar sync key )  ;   log utils . w (  log utils . tag "" set calendar key .  .  . "" )  ;   }  catch  (   remote exception e )   {   log utils . w (  log utils . tag "" set calendar key failed"" )  ;   }  finally  {  client . release (  )  ;   }   }  if  ( account type  !  =  null && contacts sync key  !  =  null && contacts sync key . length  !  =  0 )   {  client = context . get content resolver (  )  . acquire content provider client (  contacts contract . authority   uri )  ;  try  {   sync state contract .  helpers . set ( client  contacts contract .  sync state . content   uri new android . accounts .  account ( am name account type )  contacts sync key )  ;   log utils . w (  log utils . tag "" set contacts key .  .  . "" )  ;   }  catch  (   remote exception e )   {   log utils . w (  log utils . tag "" set contacts key failed"" )  ;   }   }   log utils . w (  log utils . tag "" account update completed . "" )  ;   }  finally  {  account values . put (  account columns . flags old flags )  ;  resolver . update ( account uri account values null null )  ;   log utils . w (  log utils . tag ""[ incomplete flag cleared]"" )  ;   }   }   }  finally  {  c . close (  )  ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailServiceUtils.java,validate,@ override public  bundle   (  host auth compat hostauth )  throws  remote exception  {  return null ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\ImapTempFileLiteral.java, imap temp file literal,"  (  fixed length input stream stream )  throws io exception  {  m size = stream . get length (  )  ;  m file =  file . create temp file ( ""imap"" "" . tmp""  temp directory . get temp directory (  )  )  ;   output stream out = new  file output stream ( m file )  ;  io utils . copy ( stream out )  ;  out . close (  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\ImapTempFileLiteral.java,destroy,"@ override public void   (  )  {  try  {  if  (  ! is destroyed (  )  && m file . exists (  )  )   {  m file . delete (  )  ;   }   }  catch  (   runtime exception re )   {   log utils . w (  logging . log   tag "" failed to remove temp file: ""  +  re . ge"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\ImapTempFileLiteral.java,finalize,@ override protected void   (  )  throws  throwable  {  try  {  destroy (  )  ;   }  finally  {  super . finalize (  )  ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\ImapTempFileLiteral.java,get as stream,"@ override public  input stream   (  )  {  check not destroyed (  )  ;  try  {  return new  file input stream ( m file )  ;   }  catch  (   file not found exception e )   {   log utils . w (  logging . log   tag "" imap temp file literal:  temp file not fo"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\ImapTempFileLiteral.java,get string,@ override public  string   (  )  {  check not destroyed (  )  ;  try  {  byte[] bytes = io utils . to byte array ( get as stream (  )  )  ;  if  ( bytes . length  >   imap response parser . literal   keep   in   memory   threshold )   {  throw new io exc
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\ImapTempFileLiteral.java,temp file exists for test,public boolean   (  )  {  return m file . exists (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\ImapTempFileLiteral.java,to string,"@ override public  string   (  )  {  return  string . format ( "" { %d byte literal ( file )  } "" m size )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\ImapService.java, local message info,public   (  cursor c )  {  m id = c . get long ( column   id )  ;  m flag read = c . get int ( column   flag   read )   !  =  0 ;  m flag favorite = c . get int ( column   flag   favorite )   !  =  0 ;  m flag loaded = c . get int ( column   flag   loaded )  ;  m server id = c . get string ( column   server   id )  ;  m flags = c . get int ( column   flags )  ;  m timestamp = c . get long ( column   timestamp )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\ImapService.java, sortable message,  (  message message long uid )  {  m message = message ;  m uid = uid ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\ImapService.java,compare,@ override public int   (  sortable message lhs  sortable message rhs )  {  return lhs . m uid  >  rhs . m uid  ?   - 1 : lhs . m uid  <  rhs . m uid  ?  1 : 0 ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\ImapService.java,download flag and envelope,"public static void   ( final  context context final  account account final  mailbox mailbox  folder remote folder  array list <  message >  unsynced messages  hash map <  string  local message info >  local message map final  array list <  long >  unseen messages )  throws  messaging exception  {   fetch profile fp = new  fetch profile (  )  ;  fp . add (  fetch profile .  item . flags )  ;  fp . add (  fetch profile .  item . envelope )  ;  final  hash map <  string  local message info >  local map copy ;  if  ( local message map  !  =  null )  local map copy = new  hash map <  string  local message info >  ( local message map )  ;  else  {  local map copy = new  hash map <  string  local message info >  (  )  ;   }  remote folder . fetch ( unsynced messages . to array ( new  message[unsynced messages . size (  ) ] )  fp new  message retrieval listener (  )  {  @ override public void message retrieved (   message message )  {  try  {  final  local message info local message info = local map copy . get ( message . get uid (  )  )  ;  final boolean local exists = local message info  !  =  null ;  if  (  ! local exists && message . is set (  flag . deleted )  )   {  return ;   }  final  email content .  message local message ;  if  (  ! local exists )   {  local message = new  email content .  message (  )  ;   }  else  {  local message =  email content .  message . restore message with id ( context local message info . m id )  ;   }  if  ( local message  !  =  null )   {  try  {   legacy conversions . update message fields ( local message message account . m id mailbox . m id )  ;   utilities . save or update ( local message context )  ;  if  (  ! message . is set (  flag . seen )  && unseen messages  !  =  null )   {  unseen messages . add ( local message . m id )  ;   }   }  catch  (   messaging exception me )   {   log utils . e (  logging . log   tag "" error while copying downloaded message . ""  +  me )  ;   }   }   }  catch  (   exception e )   {   log utils . e (  logging . log   tag "" error while storing downloaded message . ""  +  e . to string (  )  )  ;   }   }  @ override public void load attachment progress (  int progress )  {   }   }   )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\ImapService.java,get message decode error string,"public static  string   (  )  {  return s message decode error string  =  =  null  ?  """" : s message decode error string ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\ImapService.java,get remote mailbox for message,private static  mailbox   (  context context  email content .  message message )  {  if  (  !  text utils . is empty ( message . m protocol search info )  )   {  long account key = message . m account key ;   string protocol search info = message . m protocol search info ;  if  ( account key  =  =  m last search account key && protocol search info . equals ( m last search server id )  )   {  return m last search remote mailbox ;   }   cursor c = context . get content resolver (  )  . query (  mailbox . content   uri  mailbox . content   projection  mailbox . path   and   account   selection new  string[] { protocol search info  long . to string ( account key )  }  null )  ;  try  {  if  ( c . move to next (  )  )   {   mailbox mailbox = new  mailbox (  )  ;  mailbox . restore ( c )  ;  m last search account key = account key ;  m last search server id = protocol search info ;  m last search remote mailbox = mailbox ;  return mailbox ;   }  else  {  return null ;   }   }  finally  {  c . close (  )  ;   }   }  else  {  return  mailbox . restore mailbox with id ( context message . m mailbox key )  ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\ImapService.java,load unsynced messages,static void   ( final  context context final  account account  folder remote folder  array list <  message >  messages final  mailbox to mailbox )  throws  messaging exception  {   fetch profile fp = new  fetch profile (  )  ;  fp . add (  fetch profile .  item . structure )  ;  remote folder . fetch ( messages . to array ( new  message[messages . size (  ) ] )  fp null )  ;   message[] one message array = new  message[1] ;  for  (   message message : messages )   {   array list <  part >  viewables = new  array list <  part >  (  )  ;   array list <  part >  attachments = new  array list <  part >  (  )  ;   mime utility . collect parts ( message viewables attachments )  ;  one message array[0] = message ;  for  (   part part : viewables )   {  fp . clear (  )  ;  fp . add ( part )  ;  remote folder . fetch ( one message array fp null )  ;   }   utilities . copy one message to provider ( context message account to mailbox  email content .  message . flag   loaded   complete )  ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\ImapService.java,message retrieved,@ override public void   (  message message )  {  try  {   email content .  message local message = new  email content .  message (  )  ;   legacy conversions . update message fields ( local message message account . m id mailbox . m id )  ;  local messag
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\ImapService.java,on bind,@ override public i binder   (  intent intent )  {  m binder . init ( this )  ;  return m binder ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\ImapService.java,on create,@ override public void   (  )  {  super . on create (  )  ;  s message decode error string = get string ( r . string . message   decode   error )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\ImapService.java,on message not found,@ override public void   (  message message )  {  context . get content resolver (  )  . delete ( new message . get uri (  )  null null )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\ImapService.java,on message uid change,@ override public void   (  message message  string new uid )  {   content values cv = new  content values (  )  ;  cv . put (  message columns . server   id new uid )  ;  context . get content resolver (  )  . update ( new message . get uri (  )  cv null
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\ImapService.java,on start command,@ override public int   (  intent intent int flags int start id )  {  return  service . start   sticky ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\ImapService.java,process pending actions synchronous,private static void   (  context context  account account  store remote store boolean manual sync )  throws  messaging exception  {   traffic stats . set thread stats tag (  traffic flags . get sync flags ( context account )  )  ;   string[] account id args = new  string[] {  long . to string ( account . m id )  }  ;  process pending deletes synchronous ( context account remote store account id args )  ;  process pending uploads synchronous ( context account remote store account id args manual sync )  ;  process pending updates synchronous ( context account remote store account id args )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\ImapService.java,process pending append,private static boolean   (  context context  store remote store  mailbox mailbox  email content .  message message boolean manual sync )  throws  messaging exception  {  boolean update internal date = false ;  boolean update message = false ;  boolean delete message = false ;   folder remote folder = remote store . get folder ( mailbox . m server id )  ;  if  (  ! remote folder . exists (  )  )   {  if  (  ! remote folder . create (  folder type . holds   messages )  )   {  return false ;   }   }  remote folder . open (  open mode . read   write )  ;  if  ( remote folder . get mode (  )   !  =   open mode . read   write )   {  return false ;   }   message remote message = null ;  if  ( message . m server id  !  =  null && message . m server id . length (  )   >  0 )   {  remote message = remote folder . get message ( message . m server id )  ;   }  if  ( remote message  =  =  null )   {   message local message =  legacy conversions . make message ( context message )  ;  remote folder . append message ( context local message manual sync )  ;  message . m server id = local message . get uid (  )  ;  update internal date = true ;  update message = true ;   }  else  {   fetch profile fp = new  fetch profile (  )  ;  fp . add (  fetch profile .  item . envelope )  ;  remote folder . fetch ( new  message[] { remote message }  fp null )  ;   date local date = new  date ( message . m server time stamp )  ;   date remote date = remote message . get internal date (  )  ;  if  ( remote date  !  =  null && remote date . compare to ( local date )   >  0 )   {  delete message = true ;   }  else  {   message local message =  legacy conversions . make message ( context message )  ;  fp . clear (  )  ;  fp = new  fetch profile (  )  ;  fp . add (  fetch profile .  item . body )  ;  remote folder . append message ( context local message manual sync )  ;  message . m server id = local message . get uid (  )  ;  update internal date = true ;  update message = true ;  remote message . set flag (  flag . deleted true )  ;   }   }  if  ( update internal date && message . m server id  !  =  null )   {  try  {   message remote message2 = remote folder . get message ( message . m server id )  ;  if  ( remote message2  !  =  null )   {   fetch profile fp2 = new  fetch profile (  )  ;  fp2 . add (  fetch profile .  item . envelope )  ;  remote folder . fetch ( new  message[] { remote message2 }  fp2 null )  ;  final  date remote date = remote message2 . get internal date (  )  ;  if  ( remote date  !  =  null )   {  message . m server time stamp = remote message2 . get internal date (  )  . get time (  )  ;  update message = true ;   }   }   }  catch  (   messaging exception me )   {   }   }  if  ( delete message || update message )   {   uri uri =  content uris . with appended id (  email content .  message . content   uri message . m id )  ;   content resolver resolver = context . get content resolver (  )  ;  if  ( delete message )   {  resolver . delete ( uri null null )  ;   }  else if  ( update message )   {   content values cv = new  content values (  )  ;  cv . put (  message columns . server   id message . m server id )  ;  cv . put (  message columns . server   timestamp message . m server time stamp )  ;  resolver . update ( uri cv null null )  ;   }   }  return true ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\ImapService.java,process pending data change,"private static void   ( final  context context  store remote store  mailbox mailbox boolean change read boolean change flagged boolean change mailbox boolean change answered  email content .  message old message final  email content .  message new message )  throws  messaging exception  {   mailbox new mailbox = mailbox ;  mailbox = get remote mailbox for message ( context old message )  ;  if  ( new message . m server id  =  =  null || new message . m server id . equals ( """" )  || new message . m server id . starts with ( local   serverid   prefix )  ||  ( mailbox  =  =  null )  )   {  return ;   }  if  ( mailbox . m type  =  =   mailbox . type   drafts || mailbox . m type  =  =   mailbox . type   outbox )   {  return ;   }   folder remote folder = remote store . get folder ( mailbox . m server id )  ;  if  (  ! remote folder . exists (  )  )   {  return ;   }  remote folder . open (  open mode . read   write )  ;  if  ( remote folder . get mode (  )   !  =   open mode . read   write )   {  return ;   }   message remote message = remote folder . get message ( new message . m server id )  ;  if  ( remote message  =  =  null )   {  return ;   }  if  (  debug utils . debug )   {   log utils . d (  logging . log   tag "" update for msg id = ""  +  new message . m id  +  "" read = "" +  new message . m flag read +  "" flagged = "" +  new message . m flag favorite +  "" answered = "" +   (  ( new message . m flags &  email content .  message . flag   replied   to )   !  =  0 )  +  "" new mailbox = "" +  new message . m mailbox key )  ;   }   message[] messages = new  message[] { remote message }  ;  if  ( change read )   {  remote folder . set flags ( messages flag   list   seen new message . m flag read )  ;   }  if  ( change flagged )   {  remote folder . set flags ( messages flag   list   flagged new message . m flag favorite )  ;   }  if  ( change answered )   {  remote folder . set flags ( messages flag   list   answered  ( new message . m flags &  email content .  message . flag   replied   to )   !  =  0 )  ;   }  if  ( change mailbox )   {   folder to folder = remote store . get folder ( new mailbox . m server id )  ;  if  (  ! remote folder . exists (  )  )   {  return ;   }  remote message . set message id ( new message . m message id )  ;  remote folder . copy messages ( messages to folder new  message update callbacks (  )  {  @ override public void on message uid change (   message message   string new uid )  {   content values cv = new  content values (  )  ;  cv . put (  message columns . server   id new uid )  ;  context . get content resolver (  )  . update (  content uris . with appended id (  email content .  message . content   uri new message . m id )  cv null null )  ;   }  @ override public void on message not found (   message message )  {   }   }   )  ;  remote message . set flag (  flag . deleted true )  ;  remote folder . expunge (  )  ;   }  remote folder . close ( false )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\ImapService.java,process pending delete from trash,private static void   (  store remote store  mailbox old mailbox  email content .  message old message )  throws  messaging exception  {  if  ( old mailbox . m type  !  =   mailbox . type   trash )   {  return ;   }   folder remote trash folder = remote store . get folder ( old mailbox . m server id )  ;  if  (  ! remote trash folder . exists (  )  )   {  return ;   }  remote trash folder . open (  open mode . read   write )  ;  if  ( remote trash folder . get mode (  )   !  =   open mode . read   write )   {  remote trash folder . close ( false )  ;  return ;   }   message remote message = remote trash folder . get message ( old message . m server id )  ;  if  ( remote message  =  =  null )   {  remote trash folder . close ( false )  ;  return ;   }  remote message . set flag (  flag . deleted true )  ;  remote trash folder . expunge (  )  ;  remote trash folder . close ( false )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\ImapService.java,process pending deletes synchronous,"private static void   (  context context  account account  store remote store  string[] account id args )  {   cursor deletes = context . get content resolver (  )  . query (  email content .  message . deleted   content   uri  email content .  message . content   projection  email content .  message columns . account   key  +  "" =  ? "" account id args  email content .  message columns . mailbox   key )  ;  long last message id =  - 1 ;  try  {  while  ( deletes . move to next (  )  )   {   email content .  message old message =  email content . get content ( context deletes  email content .  message . class )  ;  if  ( old message  !  =  null )   {  last message id = old message . m id ;   mailbox mailbox = get remote mailbox for message ( context old message )  ;  if  ( mailbox  =  =  null )   {  continue ;   }  final boolean delete from trash = mailbox . m type  =  =   mailbox . type   trash ;  if  ( delete from trash )   {  process pending delete from trash ( remote store mailbox old message )  ;   }   uri uri =  content uris . with appended id (  email content .  message . deleted   content   uri old message . m id )  ;  context . get content resolver (  )  . delete ( uri null null )  ;   }   }   }  catch  (   messaging exception me )   {  if  (  debug utils . debug )   {   log utils . d (  logging . log   tag "" unable to process pending delete for id = ""  +  last message id  +  "": "" +  me )  ;   }   }  finally  {  deletes . close (  )  ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\ImapService.java,process pending move to trash,"private static void   ( final  context context  store remote store  mailbox new mailbox  email content .  message old message final  email content .  message new message )  throws  messaging exception  {  if  ( new message . m server id  =  =  null || new message . m server id . equals ( """" )  || new message . m server id . starts with ( local   serverid   prefix )  )   {  return ;   }   mailbox old mailbox = get remote mailbox for message ( context old message )  ;  if  ( old mailbox  =  =  null )   {  return ;   }  if  ( old mailbox . m type  =  =   mailbox . type   trash )   {  return ;   }   folder remote folder = remote store . get folder ( old mailbox . m server id )  ;  if  (  ! remote folder . exists (  )  )   {  return ;   }  remote folder . open (  open mode . read   write )  ;  if  ( remote folder . get mode (  )   !  =   open mode . read   write )   {  remote folder . close ( false )  ;  return ;   }   message remote message = remote folder . get message ( old message . m server id )  ;  if  ( remote message  =  =  null )   {  remote folder . close ( false )  ;  return ;   }   folder remote trash folder = remote store . get folder ( new mailbox . m server id )  ;  if  (  ! remote trash folder . exists (  )  )   {  remote trash folder . create (  folder type . holds   messages )  ;   }  if  ( remote trash folder . exists (  )  )   {  remote trash folder . open (  open mode . read   write )  ;  if  ( remote trash folder . get mode (  )   !  =   open mode . read   write )   {  remote folder . close ( false )  ;  remote trash folder . close ( false )  ;  return ;   }  remote folder . copy messages ( new  message[] { remote message }  remote trash folder new  folder .  message update callbacks (  )  {  @ override public void on message uid change (   message message   string new uid )  {   content values cv = new  content values (  )  ;  cv . put (  message columns . server   id new uid )  ;  context . get content resolver (  )  . update ( new message . get uri (  )  cv null null )  ;   }  @ override public void on message not found (   message message )  {  context . get content resolver (  )  . delete ( new message . get uri (  )  null null )  ;   }   }   )  ;  remote trash folder . close ( false )  ;   }  remote message . set flag (  flag . deleted true )  ;  remote folder . expunge (  )  ;  remote folder . close ( false )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\ImapService.java,process pending updates synchronous,"private static void   (  context context  account account  store remote store  string[] account id args )  {   content resolver resolver = context . get content resolver (  )  ;   cursor updates = resolver . query (  email content .  message . updated   content   uri  email content .  message . content   projection  email content .  message columns . account   key  +  "" =  ? "" account id args  email content .  message columns . mailbox   key )  ;  long last message id =  - 1 ;  try  {   mailbox mailbox = null ;  while  ( updates . move to next (  )  )   {  boolean change move to trash = false ;  boolean change read = false ;  boolean change flagged = false ;  boolean change mailbox = false ;  boolean change answered = false ;   email content .  message old message =  email content . get content ( context updates  email content .  message . class )  ;  last message id = old message . m id ;   email content .  message new message =  email content .  message . restore message with id ( context old message . m id )  ;  if  ( new message  !  =  null )   {  mailbox =  mailbox . restore mailbox with id ( context new message . m mailbox key )  ;  if  ( mailbox  =  =  null )   {  continue ;   }  if  ( old message . m mailbox key  !  =  new message . m mailbox key )   {  if  ( mailbox . m type  =  =   mailbox . type   trash )   {  change move to trash = true ;   }  else  {  change mailbox = true ;   }   }  change read = old message . m flag read  !  =  new message . m flag read ;  change flagged = old message . m flag favorite  !  =  new message . m flag favorite ;  change answered =  ( old message . m flags &  email content .  message . flag   replied   to )   !  =   ( new message . m flags &  email content .  message . flag   replied   to )  ;   }  if  ( remote store  =  =  null &&  ( change move to trash || change read || change flagged|| change mailbox|| change answered )  )   {  remote store =  store . get instance ( account context )  ;   }  if  ( change move to trash )   {  process pending move to trash ( context remote store mailbox old message new message )  ;   }  else if  ( change read || change flagged || change mailbox|| change answered )   {  process pending data change ( context remote store mailbox change read change flagged change mailbox change answered old message new message )  ;   }   uri uri =  content uris . with appended id (  email content .  message . updated   content   uri old message . m id )  ;  resolver . delete ( uri null null )  ;   }   }  catch  (   messaging exception me )   {  if  (  debug utils . debug )   {   log utils . d (  logging . log   tag "" unable to process pending update for id = ""  +  last message id  +  "": "" +  me )  ;   }   }  finally  {  updates . close (  )  ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\ImapService.java,process pending uploads synchronous,"private static void   (  context context  account account  store remote store  string[] account id args boolean manual sync )  {   content resolver resolver = context . get content resolver (  )  ;   cursor mailboxes = resolver . query (  mailbox . content   uri  mailbox . id   projection  mailbox columns . account   key  +  "" =  ? ""  +  "" and "" +   mailbox columns . type +  "" = "" +   mailbox . type   sent account id args null )  ;  long last message id =  - 1 ;  try  {  while  ( mailboxes . move to next (  )  )   {  long mailbox id = mailboxes . get long (  mailbox . id   projection   column )  ;   string[] mailbox key args = new  string[] {  long . to string ( mailbox id )  }  ;   mailbox mailbox = null ;   cursor upsyncs1 = resolver . query (  email content .  message . content   uri  email content .  message . id   projection  message columns . mailbox   key  +  "" =  ? ""  +  "" and  ( "" +   message columns . server   id +  "" is null"" +  "" or "" +   message columns . server   id +  "" = ''"" +  "" ) "" mailbox key args null )  ;  try  {  while  ( upsyncs1 . move to next (  )  )   {  if  ( remote store  =  =  null )   {  remote store =  store . get instance ( account context )  ;   }  if  ( mailbox  =  =  null )   {  mailbox =  mailbox . restore mailbox with id ( context mailbox id )  ;  if  ( mailbox  =  =  null )   {  continue ;   }   }  long id = upsyncs1 . get long (  email content .  message . id   projection   column )  ;  last message id = id ;  process upload message ( context remote store mailbox id manual sync )  ;   }   }  finally  {  if  ( upsyncs1  !  =  null )   {  upsyncs1 . close (  )  ;   }  if  ( remote store  !  =  null )   {  remote store . close connections (  )  ;   }   }   }   }  catch  (   messaging exception me )   {  if  (  debug utils . debug )   {   log utils . d (  logging . log   tag "" unable to process pending upsync for id = ""  +  last message id  +  "": "" +  me )  ;   }   }  finally  {  if  ( mailboxes  !  =  null )   {  mailboxes . close (  )  ;   }   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\ImapService.java,process upload message,"private static void   (  context context  store remote store  mailbox mailbox long message id boolean manual sync )  throws  messaging exception  {   email content .  message new message =  email content .  message . restore message with id ( context message id )  ;  final boolean delete update ;  if  ( new message  =  =  null )   {  delete update = true ;   log utils . d (  logging . log   tag "" upsync failed for null message  id = ""  +  message id )  ;   }  else if  ( mailbox . m type  =  =   mailbox . type   drafts )   {  delete update = false ;   log utils . d (  logging . log   tag "" upsync skipped for mailbox = drafts  id = ""  +  message id )  ;   }  else if  ( mailbox . m type  =  =   mailbox . type   outbox )   {  delete update = false ;   log utils . d (  logging . log   tag "" upsync skipped for mailbox = outbox  id = ""  +  message id )  ;   }  else if  ( mailbox . m type  =  =   mailbox . type   trash )   {  delete update = false ;   log utils . d (  logging . log   tag "" upsync skipped for mailbox = trash  id = ""  +  message id )  ;   }  else if  ( new message . m mailbox key  !  =  mailbox . m id )   {  delete update = false ;   log utils . d (  logging . log   tag "" upsync skipped ;  mailbox changed  id = ""  +  message id )  ;   }  else  {   log utils . d (  logging . log   tag "" upsync triggered for message id = ""  +  message id )  ;  delete update = process pending append ( context remote store mailbox new message manual sync )  ;   }  if  ( delete update )   {   uri uri =  content uris . with appended id (  email content .  message . updated   content   uri message id )  ;  context . get content resolver (  )  . delete ( uri null null )  ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\ImapService.java,search mailbox impl,"private static int   ( final  context context final long account id final  search params search params final long dest mailbox id )  throws  messaging exception  {  final  account account =  account . restore account with id ( context account id )  ;  final  mailbox mailbox =  mailbox . restore mailbox with id ( context search params . m mailbox id )  ;  final  mailbox dest mailbox =  mailbox . restore mailbox with id ( context dest mailbox id )  ;  if  ( account  =  =  null || mailbox  =  =  null || dest mailbox  =  =  null )   {   log utils . d (  logging . log   tag "" attempted search for %s ""  +  ""but account or mailbox information was missing"" search params )  ;  return 0 ;   }  final  content values status values = new  content values ( 2 )  ;  status values . put (  mailbox . ui   sync   status ui provider .  sync status . live   query )  ;  dest mailbox . update ( context status values )  ;   store remote store = null ;  int num search results = 0 ;  try  {  remote store =  store . get instance ( account context )  ;  final  folder remote folder = remote store . get folder ( mailbox . m server id )  ;  remote folder . open (  open mode . read   write )  ;   sortable message[] sortable messages = new  sortable message[0] ;  if  ( search params . m offset  =  =  0 )   {  final  message[] remote messages = remote folder . get messages ( search params null )  ;  final int remote count = remote messages . length ;  if  ( remote count  >  0 )   {  sortable messages = new  sortable message[remote count] ;  int i = 0 ;  for  (   message msg : remote messages )   {  sortable messages[i +  + ] = new  sortable message ( msg  long . parse long ( msg . get uid (  )  )  )  ;   }   arrays . sort ( sortable messages new  comparator <  sortable message >  (  )  {  @ override public int compare (   sortable message lhs   sortable message rhs )  {  return lhs . m uid  >  rhs . m uid  ?   - 1 : lhs . m uid  <  rhs . m uid  ?  1 : 0 ;   }   }   )  ;  s search results . put ( account id sortable messages )  ;   }   }  else  {  sortable messages = s search results . get ( account id )  ;   }  num search results =  ( sortable messages  !  =  null  ?  sortable messages . length : 0 )  ;  final int num to load =  math . min ( num search results  -  search params . m offset search params . m limit )  ;  dest mailbox . update message count ( context num search results )  ;  if  ( num to load  <  =  0 )   {  return 0 ;   }  final  array list <  message >  message list = new  array list <  >  (  )  ;  for  ( int i = search params . m offset ;  i  <  num to load  +  search params . m offset ;  i +  +  )   {  message list . add ( sortable messages[i] . m message )  ;   }  final  fetch profile fp = new  fetch profile (  )  ;  fp . add (  fetch profile .  item . flags )  ;  fp . add (  fetch profile .  item . envelope )  ;   message[] message array = message list . to array ( new  message[message list . size (  ) ] )  ;  remote folder . fetch ( message array fp new  message retrieval listener (  )  {  @ override public void message retrieved (   message message )  {  try  {   email content .  message local message = new  email content .  message (  )  ;   legacy conversions . update message fields ( local message message account . m id mailbox . m id )  ;  local message . m main mailbox key = local message . m mailbox key ;  local message . m mailbox key = dest mailbox id ;  int flag =  email content .  message . flag   loaded   complete ;  local message . m protocol search info = mailbox . m server id ;   utilities . save or update ( local message context )  ;   }  catch  (   messaging exception me )   {   log utils . e (  logging . log   tag me "" error while copying downloaded message . "" )  ;   }  catch  (   exception e )   {   log utils . e (  logging . log   tag e "" error while storing downloaded message . "" )  ;   }   }  @ override public void load attachment progress (  int progress )  {   }   }   )  ;  fp . clear (  )  ;  fp . add (  fetch profile .  item . structure )  ;  remote folder . fetch ( message array fp null )  ;   message[] one message array = new  message[1] ;  for  (   message message : message array )   {   array list <  part >  viewables = new  array list <  >  (  )  ;   array list <  part >  attachments = new  array list <  >  (  )  ;   mime utility . collect parts ( message viewables attachments )  ;  one message array[0] = message ;  for  (   part part : viewables )   {  fp . clear (  )  ;  fp . add ( part )  ;  remote folder . fetch ( one message array fp null )  ;   }   utilities . copy one message to provider ( context message account dest mailbox  email content .  message . flag   loaded   complete )  ;   }   }  finally  {  if  ( remote store  !  =  null )   {  remote store . close connections (  )  ;   }  status values . put (  mailbox . sync   time  system . current time millis (  )  )  ;  status values . put (  mailbox . ui   sync   status ui provider .  sync status . no   sync )  ;  dest mailbox . update ( context status values )  ;   }  return num search results ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\ImapService.java,search messages,@ override public int   ( long account id  search params search params long dest mailbox id )  {  try  {  return search mailbox impl ( get application context (  )  account id search params dest mailbox id )  ;   }  catch  (   messaging exception e )   { 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\ImapService.java,synchronize mailbox generic,"private synchronized static void   ( final  context context final  account account  store remote store final  mailbox mailbox final boolean load more final boolean ui refresh )  throws  messaging exception  {   log utils . d (  logging . log   tag ""synchronize mailbox generic ""  +  account  +  "" "" +  mailbox +  "" "" +  load more +  "" "" +  ui refresh )  ;  final  array list <  long >  unseen messages = new  array list <  long >  (  )  ;   content resolver resolver = context . get content resolver (  )  ;  if  ( mailbox . m type  =  =   mailbox . type   drafts || mailbox . m type  =  =   mailbox . type   outbox )   {  return ;   }  long end date ;  final long time since last full sync =  system clock . elapsed realtime (  )   -  mailbox . m last full sync time ;  final boolean full sync =  ( ui refresh || load more || time since last full sync  >  =  full   sync   interval   millis || time since last full sync  <  0 )  ;  if  ( account . m sync lookback  =  =   sync window . sync   window   all )   {  end date = 0 ;   }  else if  ( full sync )   {  end date =  system . current time millis (  )   -  full   sync   window   millis ;   cursor local oldest cursor = null ;  try  {  local oldest cursor = resolver . query (  email content .  message . content   uri  oldest timestamp info . projection  email content .  message columns . account   key  +  "" =  ? ""  +  "" and "" +   message columns . mailbox   key +  "" =  ?  and "" +   message columns . timestamp +  "" !  = 0"" new  string[] {  string . value of ( account . m id )   string . value of ( mailbox . m id )  }  null )  ;  if  ( local oldest cursor  !  =  null && local oldest cursor . move to first (  )  )   {  long oldest local message date = local oldest cursor . get long (  oldest timestamp info . column   oldest   timestamp )  ;  if  ( oldest local message date  >  0 )   {  end date =  math . min ( end date oldest local message date )  ;   log utils . d (  logging . log   tag ""oldest local message ""  +  oldest local message date )  ;   }   }   }  finally  {  if  ( local oldest cursor  !  =  null )   {  local oldest cursor . close (  )  ;   }   }   log utils . d (  logging . log   tag ""full sync: original window: now  -  ""  +  end date )  ;   }  else  {  end date =  system . current time millis (  )   -  quick   sync   window   millis ;   log utils . d (  logging . log   tag ""quick sync: original window: now  -  ""  +  end date )  ;   }  if  ( remote store  =  =  null )   {   log utils . d (  logging . log   tag ""account is apparently deleted"" )  ;  return ;   }  final  folder remote folder = remote store . get folder ( mailbox . m server id )  ;  if  ( mailbox . m type  =  =   mailbox . type   trash || mailbox . m type  =  =   mailbox . type   sent )   {  if  (  ! remote folder . exists (  )  )   {  if  (  ! remote folder . create (  folder type . holds   messages )  )   {   log utils . w (  logging . log   tag ""could not create remote folder type %d"" mailbox . m type )  ;  return ;   }   }   }  remote folder . open (  open mode . read   write )  ;  final int remote message count = remote folder . get message count (  )  ;  mailbox . update message count ( context remote message count )  ;   message[] remote messages ;  remote messages = remote folder . get messages ( 0 end date null )  ;   log utils . d (  logging . log   tag ""received ""  +  remote messages . length  +  "" messages"" )  ;  int total count needed ;  if  ( load more )   {  total count needed = remote messages . length  +  load   more   min   increment ;   }  else  {  total count needed = remote messages . length ;  if  ( full sync && total count needed  <  minimum   messages   to   sync )   {  total count needed = minimum   messages   to   sync ;   }   }   log utils . d (  logging . log   tag ""need ""  +  total count needed  +  "" total"" )  ;  final int additional messages needed = total count needed  -  remote messages . length ;  if  ( additional messages needed  >  0 )   {   log utils . d (  logging . log   tag ""trying to get ""  +  additional messages needed  +  "" more"" )  ;  long start date = end date  -  1 ;   message[] additional messages = new  message[0] ;  long window increase size = initial   window   size   increase ;  while  ( additional messages . length  <  additional messages needed && end date  >  0 )   {  end date = end date  -  window increase size ;  if  ( end date  <  0 )   {   log utils . d (  logging . log   tag ""window size too large  this is the last attempt"" )  ;  end date = 0 ;   }   log utils . d (  logging . log   tag ""requesting additional messages from range ""  +  start date  +  ""  -  "" +  end date )  ;  additional messages = remote folder . get messages ( start date end date null )  ;  window increase size* = 2 ;   }   log utils . d (  logging . log   tag ""additional messages ""  +  additional messages . length )  ;  if  ( additional messages . length  <  additional messages needed )   {   log utils . e (  logging . log   tag ""expected to find ""  +  additional messages needed  +  "" more messages  only got "" +  additional messages . length )  ;   }  int additional to keep = additional messages . length ;  if  ( additional messages . length  >  load   more   max   increment )   {  additional to keep = load   more   max   increment ;   }   message[] all messages = new  message[remote messages . length  +  additional to keep] ;   system . arraycopy ( remote messages 0 all messages 0 remote messages . length )  ;   system . arraycopy ( additional messages additional messages . length  -  additional to keep all messages remote messages . length additional to keep )  ;  remote messages = all messages ;   }   cursor local uid cursor = null ;   hash map <  string  local message info >  local message map = new  hash map <  string  local message info >  (  )  ;  try  {  final long query end date = 0 ;  local uid cursor = resolver . query (  email content .  message . content   uri  local message info . projection  email content .  message columns . account   key  +  "" =  ? ""  +  "" and "" +   message columns . mailbox   key +  "" =  ? "" +  "" and "" +   message columns . timestamp +  "" >  =  ? "" new  string[] {  string . value of ( account . m id )   string . value of ( mailbox . m id )   string . value of ( query end date )  }  null )  ;  while  ( local uid cursor . move to next (  )  )   {   local message info info = new  local message info ( local uid cursor )  ;  if  (  !  text utils . is empty ( info . m server id )  )   {  local message map . put ( info . m server id info )  ;   }   }   }  finally  {  if  ( local uid cursor  !  =  null )   {  local uid cursor . close (  )  ;   }   }  final  array list <  message >  unsynced messages = new  array list <  message >  (  )  ;  final  hash map <  string  message >  remote uid map = new  hash map <  string  message >  (  )  ;  for  ( int i = remote messages . length  -  1 ;  i  >  =  0 ;  i -  -  )   {   message message = remote messages[i] ;   log utils . d (  logging . log   tag ""remote message ""  +  message . get uid (  )  )  ;  remote uid map . put ( message . get uid (  )  message )  ;   local message info local message = local message map . get ( message . get uid (  )  )  ;  if  ( local message  =  =  null ||  ( local message . m flag loaded  =  =   email content .  message . flag   loaded   unloaded )  ||  ( local message . m flag loaded  =  =   email content .  message . flag   loaded   partial )  )   {  unsynced messages . add ( message )  ;   }   }  if  ( unsynced messages . size (  )   >  0 )   {  download flag and envelope ( context account mailbox remote folder unsynced messages local message map unseen messages )  ;   }   fetch profile fp = new  fetch profile (  )  ;  fp . add (  fetch profile .  item . flags )  ;  if  ( remote messages . length  >  max   messages   to   fetch )   {   list <  message >  remote message list =  arrays . as list ( remote messages )  ;  for  ( int start = 0 ;  start  <  remote message list . size (  )  ;  start +  = max   messages   to   fetch )   {  int end = start  +  max   messages   to   fetch ;  if  ( end  >  =  remote message list . size (  )  )   {  end = remote message list . size (  )   -  1 ;   }   list <  message >  chunk = remote message list . sub list ( start end )  ;  final  message[] partial array = chunk . to array ( new  message[chunk . size (  ) ] )  ;  remote folder . fetch ( partial array fp null )  ;   }   }  else  {  remote folder . fetch ( remote messages fp null )  ;   }  boolean remote supports seen = false ;  boolean remote supports flagged = false ;  boolean remote supports answered = false ;  for  (   flag flag : remote folder . get permanent flags (  )  )   {  if  ( flag  =  =   flag . seen )   {  remote supports seen = true ;   }  if  ( flag  =  =   flag . flagged )   {  remote supports flagged = true ;   }  if  ( flag  =  =   flag . answered )   {  remote supports answered = true ;   }   }  if  ( remote supports seen || remote supports flagged || remote supports answered )   {  for  (   message remote message : remote messages )   {   local message info local message info = local message map . get ( remote message . get uid (  )  )  ;  if  ( local message info  =  =  null )   {  continue ;   }  boolean local seen = local message info . m flag read ;  boolean remote seen = remote message . is set (  flag . seen )  ;  boolean new seen =  ( remote supports seen &&  ( remote seen  !  =  local seen )  )  ;  boolean local flagged = local message info . m flag favorite ;  boolean remote flagged = remote message . is set (  flag . flagged )  ;  boolean new flagged =  ( remote supports flagged &&  ( local flagged  !  =  remote flagged )  )  ;  int local flags = local message info . m flags ;  boolean local answered =  ( local flags &  email content .  message . flag   replied   to )   !  =  0 ;  boolean remote answered = remote message . is set (  flag . answered )  ;  boolean new answered =  ( remote supports answered &&  ( local answered  !  =  remote answered )  )  ;  if  ( new seen || new flagged || new answered )   {   uri uri =  content uris . with appended id (  email content .  message . content   uri local message info . m id )  ;   content values update values = new  content values (  )  ;  update values . put (  message columns . flag   read remote seen )  ;  update values . put (  message columns . flag   favorite remote flagged )  ;  if  ( remote answered )   {  local flags| =  email content .  message . flag   replied   to ;   }  else  {  local flags& = ~ email content .  message . flag   replied   to ;   }  update values . put (  message columns . flags local flags )  ;  resolver . update ( uri update values null null )  ;   }   }   }  for  (  final  message remote message : remote messages )   {  if  ( remote message . is set (  flag . deleted )  )   {  remote uid map . remove ( remote message . get uid (  )  )  ;  unsynced messages . remove ( remote message )  ;   }   }  for  (  final  local message info info : local message map . values (  )  )   {  if  ( info . m timestamp  >  =  end date &&  ! remote uid map . contains key ( info . m server id )  )   {   attachment utilities . delete all attachment files ( context account . m id info . m id )  ;  final  uri uri to delete =  content uris . with appended id (  email content .  message . content   uri info . m id )  ;  resolver . delete ( uri to delete null null )  ;  final  uri update row to delete =  content uris . with appended id (  email content .  message . updated   content   uri info . m id )  ;  resolver . delete ( update row to delete null null )  ;  final  uri delete row to delete =  content uris . with appended id (  email content .  message . deleted   content   uri info . m id )  ;  resolver . delete ( delete row to delete null null )  ;   }   }  load unsynced messages ( context account remote folder unsynced messages mailbox )  ;  if  ( full sync )   {  mailbox . update last full sync time ( context  system clock . elapsed realtime (  )  )  ;   }  remote folder . close ( false )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\ImapService.java,synchronize mailbox synchronous,"public static synchronized int   (  context context final  account account final  mailbox folder final boolean load more final boolean ui refresh )  throws  messaging exception  {   traffic stats . set thread stats tag (  traffic flags . get sync flags ( context account )  )  ;  final  notification controller nc =  notification controller creator holder . get instance ( context )  ;   store remote store = null ;  try  {  remote store =  store . get instance ( account context )  ;  process pending actions synchronous ( context account remote store ui refresh )  ;  synchronize mailbox generic ( context account remote store folder load more ui refresh )  ;  nc . cancel login failed notification ( account . m id )  ;   }  catch  (   messaging exception e )   {  if  (  logging . logd )   {   log utils . d (  logging . log   tag ""synchronize mailbox synchronous"" e )  ;   }  if  ( e instanceof  authentication failed exception )   {  nc . show login failed notification synchronous ( account . m id true )  ;   }  throw e ;   }  finally  {  if  ( remote store  !  =  null )   {  remote store . close connections (  )  ;   }   }  return  email service status . success ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\Pop3Service.java, fetch callback,  (  content resolver resolver  uri attachment uri )  {  m resolver = resolver ;  m attachment uri = attachment uri ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\Pop3Service.java, local message info,public   (  cursor c )  {  m id = c . get long ( column   id )  ;  m flag loaded = c . get int ( column   flag   loaded )  ;  m server id = c . get string ( column   server   id )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\Pop3Service.java,load attachment,@ override public void   ( final i email service callback callback final long account id final long attachment id final boolean background )  throws  remote exception  {   attachment att =  attachment . restore attachment with id ( m context attachment id
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\Pop3Service.java,load unsynced messages,"static void   ( final  context context final  account account  pop3 folder remote folder  array list <  pop3 message >  unsynced messages final  mailbox to mailbox )  throws  messaging exception  {  if  (  debug utils . debug )   {   log utils . d ( tag "" loading ""  +  unsynced messages . size (  )   +  "" unsynced messages"" )  ;   }  try  {  int cnt = unsynced messages . size (  )  ;  for  ( int i = 0 ;  i  <  cnt ;  i +  +  )   {  final  pop3 message message = unsynced messages . get ( i )  ;  remote folder . fetch body ( message  pop3 store . fetch   body   sane   suggested   size  /  76 null )  ;  int flag =  email content .  message . flag   loaded   complete ;  if  (  ! message . is complete (  )  )   {  flag =  email content .  message . flag   loaded   partial ;   }  if  (  debug utils . debug )   {   log utils . d ( tag "" message is ""  +   ( message . is complete (  )   ?  """" : ""not "" )   +  ""complete"" )  ;   }   utilities . copy one message to provider ( context message account to mailbox flag )  ;   }   }  catch  (  io exception e )   {  throw new  messaging exception (  messaging exception . ioerror )  ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\Pop3Service.java,on bind,@ override public i binder   (  intent intent )  {  m binder . init ( this )  ;  return m binder ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\Pop3Service.java,on start command,@ override public int   (  intent intent int flags int start id )  {  return  service . start   sticky ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\Pop3Service.java,report,@ override public void   ( int bytes read )  {  m content values . put (  attachment columns . ui   downloaded   size bytes read )  ;  m resolver . update ( m attachment uri m content values null null )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\Pop3Service.java,synchronize mailbox synchronous,"public static int   (  context context final  account account final  mailbox folder final int delta message count )  throws  messaging exception  {   traffic stats . set thread stats tag (  traffic flags . get sync flags ( context account )  )  ;  final  notification controller nc =  notification controller creator holder . get instance ( context )  ;  try  {  synchronize pop3 mailbox ( context account folder delta message count )  ;  if  ( nc  !  =  null )   {  nc . cancel login failed notification ( account . m id )  ;   }   }  catch  (   messaging exception e )   {  if  (  logging . logd )   {   log utils . v (  logging . log   tag ""synchronize mailbox"" e )  ;   }  if  ( e instanceof  authentication failed exception && nc  !  =  null )   {  nc . show login failed notification synchronous ( account . m id true )  ;   }  throw e ;   }  return  email service status . success ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\Pop3Service.java,synchronize pop mailbox,"private synchronized static void   ( final  context context final  account account final  mailbox mailbox final int delta message count )  throws  messaging exception  {   content resolver resolver = context . get content resolver (  )  ;  if  ( mailbox . m type  !  =   mailbox . type   inbox )   {  return ;   }   cursor local uid cursor = null ;   hash map <  string  local message info >  local message map = new  hash map <  string  local message info >  (  )  ;  try  {  local uid cursor = resolver . query (  email content .  message . content   uri  local message info . projection  message columns . mailbox   key  +  "" =  ? "" new  string[] {  string . value of ( mailbox . m id )  }  null )  ;  while  ( local uid cursor . move to next (  )  )   {   local message info info = new  local message info ( local uid cursor )  ;  local message map . put ( info . m server id info )  ;   }   }  finally  {  if  ( local uid cursor  !  =  null )   {  local uid cursor . close (  )  ;   }   }   pop3 store remote store =  (  pop3 store )  store . get instance ( account context )  ;  if  ( remote store  =  =  null )  return ;   pop3 folder remote folder =  (  pop3 folder ) remote store . get folder ( mailbox . m server id )  ;  remote folder . open (  open mode . read   write )  ;   string[] account id args = new  string[] {  long . to string ( account . m id )  }  ;  long trash mailbox id =  mailbox . find mailbox of type ( context account . m id  mailbox . type   trash )  ;   cursor updates = resolver . query (  email content .  message . updated   content   uri  email content .  message . id   column   projection  email content .  message columns . account   key  +  "" =  ? "" account id args null )  ;  try  {  while  ( updates . move to next (  )  )   {  long id = updates . get long (  message . id   columns   id   column )  ;   email content .  message current msg =  email content .  message . restore message with id ( context id )  ;  if  ( current msg . m mailbox key  =  =  trash mailbox id )   {   pop3 message pop message =  (  pop3 message ) remote folder . get message ( current msg . m server id )  ;  if  ( pop message  !  =  null )   {  remote folder . delete message ( pop message )  ;   }   }   uri uri =  content uris . with appended id (  email content .  message . updated   content   uri id )  ;  context . get content resolver (  )  . delete ( uri null null )  ;   }   }  finally  {  updates . close (  )  ;   }  final int remote message count = remote folder . get message count (  )  ;  mailbox . update message count ( context remote message count )  ;   pop3 message[] remote messages = new  pop3 message[0] ;  final  array list <  pop3 message >  unsynced messages = new  array list <  pop3 message >  (  )  ;   hash map <  string  pop3 message >  remote uid map = new  hash map <  string  pop3 message >  (  )  ;  if  ( remote message count  >  0 )   {  remote messages = remote folder . get messages ( remote message count remote message count )  ;   log utils . d (  logging . log   tag ""remote message count ""  +  remote message count )  ;  int count = 0 ;  int count needed = default   sync   count ;  for  (  final  pop3 message message : remote messages )   {  final  string uid = message . get uid (  )  ;  remote uid map . put ( uid message )  ;   }  for  (  final  pop3 message message : remote messages )   {  final  string uid = message . get uid (  )  ;  final  local message info local message = local message map . get ( uid )  ;  if  ( local message  =  =  null )   {  count +  +  ;   }  else  {   log utils . d (  logging . log   tag ""found a local message  need ""  +  delta message count  +  "" more remote messages"" )  ;  count needed = delta message count ;  count = 0 ;   }  if  ( local message  =  =  null ||  ( local message . m flag loaded  !  =   email content .  message . flag   loaded   complete && local message . m flag loaded  !  =   message . flag   loaded   partial )  )   {   log utils . d (  logging . log   tag ""need to sync ""  +  uid )  ;  unsynced messages . add ( message )  ;   }  else  {   log utils . d (  logging . log   tag ""don't need to sync ""  +  uid )  ;   }  if  ( count  >  =  count needed )   {   log utils . d (  logging . log   tag ""loaded ""  +  count  +  "" messages  stopping"" )  ;  break ;   }   }   }  else  {  if  (  debug utils . debug )   {   log utils . d ( tag ""***  message count is zero ?  ? "" )  ;   }  remote folder . close ( false )  ;  return ;   }   cursor c = resolver . query (  attachment . content   uri  attachment . content   projection  attachment columns . account   key  +  "" =  ?  and ""  +   attachment columns . ui   state +  "" = "" +   attachment state . downloading new  string[] {  long . to string ( account . m id )  }  null )  ;  try  {  final  content values values = new  content values (  )  ;  while  ( c . move to next (  )  )   {  values . put (  attachment columns . ui   state ui provider .  attachment state . saved )  ;   attachment att = new  attachment (  )  ;  att . restore ( c )  ;   message msg =  message . restore message with id ( context att . m message key )  ;  if  ( msg  =  =  null ||  ( msg . m flag loaded  =  =   message . flag   loaded   complete )  )   {  values . put (  attachment columns . ui   downloaded   size att . m size )  ;  resolver . update (  content uris . with appended id (  attachment . content   uri att . m id )  values null null )  ;  continue ;   }  else  {   string uid = msg . m server id ;   pop3 message pop message = remote uid map . get ( uid )  ;  if  ( pop message  !  =  null )   {   uri att uri =  content uris . with appended id (  attachment . content   uri att . m id )  ;  try  {  remote folder . fetch body ( pop message  - 1 new  fetch callback ( resolver att uri )  )  ;   }  catch  (  io exception e )   {  throw new  messaging exception (  messaging exception . ioerror )  ;   }  values . put (  attachment columns . ui   state  attachment state . saved )  ;  resolver . update ( att uri values null null )  ;  int flag =  email content .  message . flag   loaded   complete ;  if  (  ! pop message . is complete (  )  )   {   log utils . e ( tag "" how is this possible ? "" )  ;   }   utilities . copy one message to provider ( context pop message account mailbox flag )  ;  resolver . delete ( att uri null null )  ;   }  else  {   log utils . e ( tag "" could not find message for attachment ""  +  uid )  ;   }   }   }   }  finally  {  c . close (  )  ;   }   hash set <  string >  local uids to delete = new  hash set <  string >  ( local message map . key set (  )  )  ;  local uids to delete . remove all ( remote uid map . key set (  )  )  ;  for  (   string uid to delete : local uids to delete )   {   log utils . d (  logging . log   tag ""need to delete ""  +  uid to delete )  ;   local message info info to delete = local message map . get ( uid to delete )  ;   attachment utilities . delete all attachment files ( context account . m id info to delete . m id )  ;   uri uri to delete =  content uris . with appended id (  email content .  message . content   uri info to delete . m id )  ;  resolver . delete ( uri to delete null null )  ;   uri update row to delete =  content uris . with appended id (  email content .  message . updated   content   uri info to delete . m id )  ;  resolver . delete ( update row to delete null null )  ;   uri delete row to delete =  content uris . with appended id (  email content .  message . deleted   content   uri info to delete . m id )  ;  resolver . delete ( delete row to delete null null )  ;   }   log utils . d ( tag ""load unsynched messages ""  +  unsynced messages . size (  )  )  ;  load unsynced messages ( context account remote folder unsynced messages mailbox )  ;  remote folder . close ( false )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\setup\AuthenticatorSetupIntentHelper.java,action get create account intent,"public static  intent   ( final  context context final  string account manager type )  {  final  intent i = new  intent (  )  ;  i . set component ( new  component name ( context ""com . android . email . activity . setup .  account setup final"" )  )  ;  i . put extra ( extra   flow   mode flow   mode   account   manager )  ;  i . put extra ( extra   flow   account   type account manager type )  ;  return i ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\setup\AuthenticatorSetupIntentHelper.java,action new account intent,"public static  intent   ( final  context context )  {  final  intent i = new  intent (  )  ;  i . set component ( new  component name ( context ""com . android . email . activity . setup .  account setup final"" )  )  ;  i . put extra ( extra   flow   mode flow   mode   normal )  ;  return i ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\setup\AuthenticatorSetupIntentHelper.java,action new account with result intent,"public static  intent   ( final  context context )  {  final  intent i = new  intent (  )  ;  i . set component ( new  component name ( context ""com . android . email . activity . setup .  account setup final"" )  )  ;  i . put extra ( extra   flow   mode flow   mode   no   accounts )  ;  return i ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\ComposeActivityEmail.java,get email provider authority,@ override protected  string   (  )  {  return  email content . authority ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\ComposeActivityEmail.java,on create options menu,@ override public boolean   (  menu menu )  {  final boolean super created = super . on create options menu ( menu )  ;  if  ( m reply from account  !  =  null )   {  get menu inflater (  )  . inflate ( r . menu . email   compose   menu   extras menu )  ;
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\ComposeActivityEmail.java,on options item selected,@ override public boolean   (  menu item item )  {  if  ( item . get item id (  )   =  =  r . id . insert   quick   response   menu   item )   {   insert quick response dialog dialog =  insert quick response dialog . new instance ( null m reply from accou
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\ComposeActivityEmail.java,on quick response selected,public void   (  char sequence quick response )  {  final int sel end = m body view . get selection end (  )  ;  final int sel start = m body view . get selection start (  )  ;  if  ( sel end  >  =  0 && sel start  >  =  0 )   {  final  spannable string builder message body = new  spannable string builder ( m body view . get text (  )  )  ;  final int replace start = sel start  <  sel end  ?  sel start : sel end ;  final int replace end = sel start  <  sel end  ?  sel end : sel start ;  message body . replace ( replace start replace end quick response )  ;  m body view . set text ( message body )  ;  m body view . set selection ( replace start  +  quick response . length (  )  )  ;   }  else  {  m body view . append ( quick response )  ;  m body view . set selection ( m body view . get text (  )  . length (  )  )  ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\PopImapSyncAdapterService.java, pop imap sync adapter service,public   (  )  {  super (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\PopImapSyncAdapterService.java, sync adapter impl,public   (  context context )  {  super ( context true )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\PopImapSyncAdapterService.java,loads from server,private static boolean   (  context context  mailbox m  string protocol )  {   string legacy imap protocol = context . get string ( r . string . protocol   legacy   imap )  ;   string pop3 protocol = context . get string ( r . string . protocol   pop3 )  ;  if  ( legacy imap protocol . equals ( protocol )  )   {  return m . m type  !  =   mailbox . type   drafts && m . m type  !  =   mailbox . type   outbox && m . m type  !  =   mailbox . type   search ;   }  else if  ( pop3 protocol . equals ( protocol )  )   {  return  mailbox . type   inbox  =  =  m . m type ;   }  return false ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\PopImapSyncAdapterService.java,on bind,@ override public i binder   (  intent intent )  {  return m sync adapter . get sync adapter binder (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\PopImapSyncAdapterService.java,on create,@ override public void   (  )  {  super . on create (  )  ;  m sync adapter = new  sync adapter impl ( get application context (  )  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\PopImapSyncAdapterService.java,on perform sync,@ override public void   ( android . accounts .  account account  bundle extras  string authority  content provider client provider  sync result sync result )  {   pop imap sync adapter service . perform sync ( get context (  )  account extras provider sy
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\PopImapSyncAdapterService.java,perform sync,"private static void   (  context context android . accounts .  account account  bundle extras  content provider client provider  sync result sync result )  {   cursor c = null ;  try  {  c = provider . query ( com . android . emailcommon . provider .  account . content   uri  account . content   projection  account columns . email   address  +  "" =  ? "" new  string[] { account . name }  null )  ;  if  ( c  !  =  null && c . move to next (  )  )   {   account acct = new  account (  )  ;  acct . restore ( c )  ;  if  ( extras . get boolean (  content resolver . sync   extras   upload )  )   {   log utils . d ( tag "" upload sync request for ""  +  acct . m display name )  ;   array list <  long >  mailboxes to update ;   cursor updates cursor = provider . query (  message . updated   content   uri new  string[] {  message columns . mailbox   key }   message columns . account   key  +  "" =  ? "" new  string[] {  long . to string ( acct . m id )  }  null )  ;  try  {  if  (  ( updates cursor  =  =  null )  ||  ( updates cursor . get count (  )   =  =  0 )  )  return ;  mailboxes to update = new  array list <  long >  (  )  ;  while  ( updates cursor . move to next (  )  )   {   long mailbox id = updates cursor . get long ( 0 )  ;  if  (  ! mailboxes to update . contains ( mailbox id )  )   {  mailboxes to update . add ( mailbox id )  ;   }   }   }  finally  {  if  ( updates cursor  !  =  null )   {  updates cursor . close (  )  ;   }   }  for  (  long mailbox id : mailboxes to update )   {  sync ( context mailbox id extras sync result false 0 )  ;   }   }  else  {   log utils . d ( tag "" sync request for ""  +  acct . m display name )  ;   log utils . d ( tag extras . to string (  )  )  ;  final  email service proxy service =  email service utils . get service for account ( context acct . m id )  ;  service . update folder list ( acct . m id )  ;  long[] mailbox ids =  mailbox . get mailbox ids from bundle ( extras )  ;  if  ( mailbox ids  =  =  null || mailbox ids . length  =  =  0 )   {  final long inbox id =  mailbox . find mailbox of type ( context acct . m id  mailbox . type   inbox )  ;  if  ( inbox id  !  =   mailbox . no   mailbox )   {  mailbox ids = new long[1] ;  mailbox ids[0] = inbox id ;   }   }  if  ( mailbox ids  !  =  null )   {  boolean ui refresh = extras . get boolean (  content resolver . sync   extras   expedited false )  ;  int delta message count = extras . get int (  mailbox . sync   extra   delta   message   count 0 )  ;  for  (  long mailbox id : mailbox ids )   {  sync ( context mailbox id extras sync result ui refresh delta message count )  ;   }   }   }   }   }  catch  (   exception e )   {  e . print stack trace (  )  ;   }  finally  {  if  ( c  !  =  null )   {  c . close (  )  ;   }   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\PopImapSyncAdapterService.java,sync,"private static void   ( final  context context final long mailbox id final  bundle extras final  sync result sync result final boolean ui refresh final int delta message count )  {   temp directory . set temp directory ( context )  ;   mailbox mailbox =  mailbox . restore mailbox with id ( context mailbox id )  ;  if  ( mailbox  =  =  null )  return ;   account account =  account . restore account with id ( context mailbox . m account key )  ;  if  ( account  =  =  null )  return ;   content resolver resolver = context . get content resolver (  )  ;   string protocol = account . get protocol ( context )  ;  if  (  ( mailbox . m type  !  =   mailbox . type   outbox )  &&  ! loads from server ( context mailbox protocol )  )   {  resolver . delete (  message . updated   content   uri  message columns . mailbox   key  +  "" =  ? "" new  string[] {  long . to string ( mailbox . m id )  }  )  ;  return ;   }   log utils . d ( tag "" about to sync mailbox: ""  +  mailbox . m display name )  ;   uri mailbox uri =  content uris . with appended id (  mailbox . content   uri mailbox id )  ;   content values values = new  content values (  )  ;  final int sync status = ui refresh  ?   email content . sync   status   user :  email content . sync   status   background ;  values . put (  mailbox . ui   sync   status sync status )  ;  resolver . update ( mailbox uri values null null )  ;  try  {  int last sync result ;  try  {   string legacy imap protocol = context . get string ( r . string . protocol   legacy   imap )  ;  if  ( mailbox . m type  =  =   mailbox . type   outbox )   {   email service stub . send mail impl ( context account . m id )  ;   }  else  {  last sync result = ui provider . create sync value ( sync status  email content . last   sync   result   success )  ;   email service status . sync mailbox status ( resolver extras mailbox id  email service status . in   progress 0 last sync result )  ;  final int status ;  if  ( protocol . equals ( legacy imap protocol )  )   {  status =  imap service . synchronize mailbox synchronous ( context account mailbox delta message count  !  =  0 ui refresh )  ;   }  else  {  status =  pop3 service . synchronize mailbox synchronous ( context account mailbox delta message count )  ;   }   email service status . sync mailbox status ( resolver extras mailbox id status 0 last sync result )  ;   }   }  catch  (   messaging exception e )   {  final int type = e . get exception type (  )  ;  switch  ( type )   {  case  messaging exception . ioerror: last sync result = ui provider . create sync value ( sync status  email content . last   sync   result   connection   error )  ;   email service status . sync mailbox status ( resolver extras mailbox id  email service status . failure 0 last sync result )  ;  sync result . stats . num io exceptions +  +  ;  break ;  case  messaging exception . authentication   failed: last sync result = ui provider . create sync value ( sync status  email content . last   sync   result   auth   error )  ;   email service status . sync mailbox status ( resolver extras mailbox id  email service status . failure 0 last sync result )  ;  sync result . stats . num auth exceptions +  +  ;  break ;  case  messaging exception . server   error: last sync result = ui provider . create sync value ( sync status  email content . last   sync   result   server   error )  ;   email service status . sync mailbox status ( resolver extras mailbox id  email service status . failure 0 last sync result )  ;  break ;  default : last sync result = ui provider . create sync value ( sync status  email content . last   sync   result   internal   error )  ;   email service status . sync mailbox status ( resolver extras mailbox id  email service status . failure 0 last sync result )  ;   }   }   }  finally  {  values . put (  mailbox . ui   sync   status  email content . sync   status   none )  ;  values . put (  mailbox . sync   time  system . current time millis (  )  )  ;  resolver . update ( mailbox uri values null null )  ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\PolicyService.java,can disable camera,"public boolean   (  )  {   device policy manager dpm =  (  device policy manager ) m context . get system service (  context . device   policy   service )  ;  final  component name admin name = new  component name ( m context  security policy .  policy admin . class )  ;  final boolean camera disabled = dpm . get camera disabled ( admin name )  ;  if  ( camera disabled )   {  return true ;   }  else  {  try  {  dpm . set camera disabled ( admin name true )  ;  dpm . set camera disabled ( admin name false )  ;   }  catch  (   security exception e )   {   log utils . w ( log   tag "" security exception checking camera disabling . "" )  ;  return false ;   }   }  return true ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\PolicyService.java,is active,"@ override public boolean   (  policy policy )  {  try  {  return m security policy . is active ( policy )  ;   }  catch  (   runtime exception e )   {   log utils . e ( log   tag e "" exception thrown during call to  security policy#is active"" )  ;  throw"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\PolicyService.java,on bind,@ override public i binder   (  intent intent )  {  m context = this ;  m security policy =  security policy . get instance ( this )  ;  return m binder ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\PolicyService.java,remote wipe,"@ override public void   (  )  {  try  {  m security policy . remote wipe (  )  ;   }  catch  (   runtime exception e )   {   log utils . e ( log   tag e "" exception thrown during call to  security policy#remote wipe"" )  ;  throw e ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\PolicyService.java,set account hold flag,@ override public void   ( long account id boolean new state )  {   security policy . set account hold flag ( m context account id new state )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\PolicyService.java,set account policy,@ override public void   ( long account id  policy policy  string security key )  {  set account policy2 ( account id policy security key true )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\PolicyService.java,set account policy,@ override public void   ( long account id  policy policy  string security key boolean notify )  {  try  {  m security policy . set account policy ( account id policy security key notify )  ;   }  catch  (   runtime exception e )   {   log utils . e ( log
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\EventViewer.java,on create,@ override public void   (  bundle saved instance state )  {  super . on create ( saved instance state )  ;   uri uri = get intent (  )  . get data (  )  ;  long message id =  long . parse long ( uri . get last path segment (  )  )  ;   message msg =  mes
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\InsertQuickResponseDialog.java,get callback,private  callback   (  )  {   fragment target fragment = get target fragment (  )  ;  if  ( target fragment  !  =  null )   {  return  (  callback ) target fragment ;   }  return  (  callback ) get activity (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\InsertQuickResponseDialog.java,new instance,"public static  insert quick response dialog   (  fragment callback fragment  account account )  {  final  insert quick response dialog dialog = new  insert quick response dialog (  )  ;  if  ( callback fragment  !  =  null )   {  if  (  !  ( callback fragment instanceof  callback )  )   {  throw new  class cast exception ( callback fragment . to string (  )   +  "" must implement  callback"" )  ;   }  dialog . set target fragment ( callback fragment 0 )  ;   }   bundle args = new  bundle (  )  ;  args . put parcelable ( account   key account )  ;  dialog . set arguments ( args )  ;  return dialog ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\InsertQuickResponseDialog.java,on click,@ override public void   (  dialog interface dialog int which )  {  dialog . cancel (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\InsertQuickResponseDialog.java,on create dialog,@ override public  dialog   (  bundle saved instance state )  {  final  fragment target fragment = get target fragment (  )  ;  if  ( target fragment  !  =  null )   {  if  (  !  ( get activity (  )  instanceof  callback )  )   {  throw new  class cast ex
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\InsertQuickResponseDialog.java,on create loader,@ override public  loader <  cursor >    ( int id  bundle args )  {  return new  cursor loader ( context account . quick response uri ui provider . quick   response   projection null null null )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\InsertQuickResponseDialog.java,on item click,@ override public void   (  adapter view <  ?  >  parent  view view int position long id )  {  final  cursor c =  (  cursor ) list view . get item at position ( position )  ;  final  string quick response text = c . get string ( c . get column index ( ui 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\InsertQuickResponseDialog.java,on load finished,@ override public void   (  loader <  cursor >  loader  cursor data )  {  adapter . swap cursor ( data )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\InsertQuickResponseDialog.java,on loader reset,@ override public void   (  loader <  cursor >  loader )  {  adapter . swap cursor ( null )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\ContactStatusLoader.java, contact status loader,public   (  context context  string email address )  {  super ( context )  ;  m context = context ;  m email address = email address ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\ContactStatusLoader.java, result,public   (  bitmap photo int presence res id  uri lookup uri )  {  m photo = photo ;  m presence res id = presence res id ;  m lookup uri = lookup uri ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\ContactStatusLoader.java,get contact info,"public static  result   (  context context  string email address )  {   uri uri =  uri . with appended path (  email . content   lookup   uri  uri . encode ( email address )  )  ;   cursor c = context . get content resolver (  )  . query ( uri projection   photo   id   presence null null null )  ;  if  ( c  =  =  null )   {  return  result . unknown ;   }  final long photo id ;  final int presence status ;  try  {  if  (  ! c . move to first (  )  )   {  return  result . unknown ;   }  photo id = c . get long ( column   photo   id )  ;  presence status = c . get int ( column   presence )  ;   }  finally  {  c . close (  )  ;   }  final int presence status res id =  status updates . get presence icon resource id ( presence status )  ;   bitmap photo = null ;  if  ( photo id  !  =   - 1 )   {  final byte[] photo data =  utility . get first row blob ( context  content uris . with appended id (  data . content   uri photo id )  photo   projection null null null photo   column null )  ;  if  ( photo data  !  =  null )   {  try  {  photo =  bitmap factory . decode byte array ( photo data 0 photo data . length null )  ;   }  catch  (   out of memory error e )   {   log utils . d (  logging . log   tag "" decoding bitmap failed with ""  +  e . get message (  )  )  ;   }   }   }  final  uri lookup uri =  data . get contact lookup uri ( context . get content resolver (  )  uri )  ;  return new  result ( photo presence status res id lookup uri )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\ContactStatusLoader.java,is unknown,public boolean   (  )  {  return presence   unknown   resource   id  =  =  m presence res id ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\ContactStatusLoader.java,load in background,@ override public  result   (  )  {  return get contact info ( m context m email address )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\ContactStatusLoader.java,on reset,@ override protected void   (  )  {  stop loading (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\ContactStatusLoader.java,on start loading,@ override protected void   (  )  {  cancel load (  )  ;  force load (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\ContactStatusLoader.java,on stop loading,@ override protected void   (  )  {  cancel load (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountCheckSettingsFragment.java, account check task,public   (  context context  account check settings fragment callback int mode  setup data fragment setup data )  {  m context = context ;  m callback = callback ;  m mode = mode ;  m setup data = setup data ;  m account = setup data . get account (  )  ;  if  ( m account . m host auth recv  !  =  null )   {  m store host = m account . m host auth recv . m address ;  m check password = m account . m host auth recv . m password ;   }  else  {  m store host = null ;  m check password = null ;   }  m check email = m account . m email address ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountCheckSettingsFragment.java, auto discover results,public   ( boolean authentication error  host auth host auth )  {  super ( null )  ;  if  ( authentication error )   {  m exception type = autodiscover   authentication   failed ;   }  else  {  m exception type = autodiscover   authentication   result ;   }  m host auth = host auth ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountCheckSettingsFragment.java,do in background,"@ override protected  messaging exception   (  void .  .  .  params )  {  try  {  if  (  ( m mode &  setup data fragment . check   autodiscover )   !  =  0 )   {  if  ( is cancelled (  )  )  return null ;   log utils . d (  logging . log   tag "" begin aut"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountCheckSettingsFragment.java,get callback target,private  callback   (  )  {  final  fragment target = get target fragment (  )  ;  if  ( target instanceof  callback )   {  return  (  callback ) target ;   }   activity activity = get activity (  )  ;  if  ( activity instanceof  callback )   {  return  (  callback ) activity ;   }  throw new  illegal state exception (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountCheckSettingsFragment.java,get progress for mode,protected static int   ( int check mode )  {  switch  ( check mode )   {  case  setup data fragment . check   incoming: return state   check   incoming ;  case  setup data fragment . check   outgoing: return state   check   outgoing ;  case  setup data fragment . check   autodiscover: return state   check   autodiscover ;   }  return state   start ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountCheckSettingsFragment.java,get progress string,protected static  string   (  context context int progress )  {  int string id = 0 ;  switch  ( progress )   {  case state   check   autodiscover: string id = r . string . account   setup   check   settings   retr   info   msg ;  break ;  case state   start: case state   check   incoming: string id = r . string . account   setup   check   settings   check   incoming   msg ;  break ;  case state   check   outgoing: string id = r . string . account   setup   check   settings   check   outgoing   msg ;  break ;   }  if  ( string id  !  =  0 )   {  return context . get string ( string id )  ;   }  else  {  return null ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountCheckSettingsFragment.java,new instance,public static  account check settings fragment   ( int mode )  {  final  account check settings fragment f = new  account check settings fragment (  )  ;  final  bundle b = new  bundle ( 1 )  ;  b . put int ( args   mode mode )  ;  f . set arguments ( b )  ;  return f ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountCheckSettingsFragment.java,on activity created,@ override public void   (  bundle saved instance state )  {  super . on activity created ( saved instance state )  ;  m attached = true ;  if  ( m account check task  =  =  null )   {  final  setup data fragment .  setup data container container =  (  se
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountFinalizeFragment.java, final setup task loader,public   (  context context  account account )  {  super ( context )  ;  m account = account ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountFinalizeFragment.java,get account, account   (  )  {  return m account ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountFinalizeFragment.java,load in background,@ override public  boolean   (  )  {  final  content values cv = new  content values (  )  ;  cv . put (  email content .  account columns . display   name m account . get display name (  )  )  ;  cv . put (  email content .  account columns . sender   na
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountFinalizeFragment.java,new instance,public static  account finalize fragment   (  account account )  {  final  account finalize fragment f = new  account finalize fragment (  )  ;  final  bundle args = new  bundle ( 1 )  ;  args . put parcelable ( account   tag account )  ;  f . set arguments ( args )  ;  return f ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountCreationFragment.java, account creation fragment,public   (  )  {  m handler = new  handler (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountServerSettingsActivity.java,dismiss check settings fragment,private void   (  )  {  final  fragment f = get fragment manager (  )  . find fragment by tag (  account check settings fragment . tag )  ;  final  fragment d = get fragment manager (  )  . find fragment by tag (  check settings progress dialog fragment . tag )  ;  get fragment manager (  )  . begin transaction (  )  . remove ( f )  . remove ( d )  . commit (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountServerSettingsActivity.java,force back,private void   (  )  {  super . on back pressed (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountServerSettingsActivity.java,get account server fragment,public  account server base fragment   (  )  {  return m account server fragment ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountServerSettingsActivity.java,get intent for incoming,public static  intent   ( final  context context final  account account )  {  final  intent intent = new  intent ( context  account server settings activity . class )  ;  intent . put extra ( extra   account account )  ;  intent . put extra ( extra   which   settings incoming   settings )  ;  return intent ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountServerSettingsActivity.java,get intent for outgoing,public static  intent   ( final  context context final  account account )  {  final  intent intent = new  intent ( context  account server settings activity . class )  ;  intent . put extra ( extra   account account )  ;  intent . put extra ( extra   which   settings outgoing   settings )  ;  return intent ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountServerSettingsActivity.java,new instance for back,public static  unsaved changes dialog fragment   (  )  {  return new  unsaved changes dialog fragment (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountServerSettingsActivity.java,on account server save complete,@ override public void   (  )  {  super . on back pressed (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountServerSettingsActivity.java,on account serverui complete,@ override public void   ( int check mode )  {  final  fragment checker dialog =  check settings progress dialog fragment . new instance ( check mode )  ;  final  fragment checker fragment =  account check settings fragment . new instance ( check mode )  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountServerSettingsActivity.java,on attach fragment,@ override public void   (  fragment fragment )  {  super . on attach fragment ( fragment )  ;  if  ( fragment instanceof  account server base fragment )   {  m account server fragment =  (  account server base fragment ) fragment ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountServerSettingsActivity.java,on back pressed,@ override public void   (  )  {  final  account server base fragment account server fragment = get account server fragment (  )  ;  if  ( account server fragment  !  =  null )   {  if  ( account server fragment . have settings changed (  )  )   {   unsav
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountServerSettingsActivity.java,on check settings auto discover complete,@ override public void   ( int result )  {  throw new  illegal state exception (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountServerSettingsActivity.java,on check settings complete,@ override public void   (  )  {  dismiss check settings fragment (  )  ;  final  account server base fragment f = get account server fragment (  )  ;  if  ( f  !  =  null )   {  f . save settings (  )  ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountServerSettingsActivity.java,on check settings error,@ override public void   ( int reason  string message )  {  dismiss check settings fragment (  )  ;   check settings error dialog fragment . new instance ( reason message )  . show ( get fragment manager (  )   check settings error dialog fragment . tag )
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountServerSettingsActivity.java,on check settings error dialog edit certificate,@ override public void   (  )  {  final  account server base fragment f = get account server fragment (  )  ;  if  ( f instanceof  account setup incoming fragment )   {   account setup incoming fragment asif =  (  account setup incoming fragment ) f ;  as
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountServerSettingsActivity.java,on check settings progress dialog cancel,@ override public void   (  )  {  dismiss check settings fragment (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountServerSettingsActivity.java,on check settings security required,@ override public void   (  string host name )  {  dismiss check settings fragment (  )  ;   security required dialog fragment . new instance ( host name )  . show ( get fragment manager (  )   security required dialog fragment . tag )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountServerSettingsActivity.java,on click,@ override public void   (  dialog interface dialog int which )  {  activity . force back (  )  ;  dismiss (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountServerSettingsActivity.java,on create,@ override public void   (  bundle saved instance state )  {  super . on create ( saved instance state )  ;  m setup data . set flow mode (  authenticator setup intent helper . flow   mode   edit )  ;  set content view ( r . layout . account   server   se
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountServerSettingsActivity.java,on create dialog,@ override public  dialog   (  bundle saved instance state )  {  final  account server settings activity activity =  (  account server settings activity ) get activity (  )  ;  return new  alert dialog .  builder ( activity )  . set icon attribute ( andro
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountServerSettingsActivity.java,on security required dialog result,@ override public void   ( boolean ok )  {  if  ( ok )   {  final  account server base fragment f = get account server fragment (  )  ;  if  ( f  !  =  null )   {  f . save settings (  )  ;   }   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountCredentials.java,get account credentials intent,public static  intent   ( final  context context final  string email final  string protocol )  {  final  intent i = new  intent ( context  account credentials . class )  ;  i . put extra ( extra   email email )  ;  i . put extra ( extra   protocol protocol )  ;  return i ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountCredentials.java,on create,@ override public void   ( final  bundle saved instance state )  {  super . on create ( saved instance state )  ;  set content view ( r . layout . account   credentials )  ;  final  string email address = get intent (  )  . get string extra ( extra   emai
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountCredentials.java,on credentials complete,@ override public void   (  bundle results )  {  final  intent intent = new  intent (  )  ;  intent . put extras ( results )  ;  set result ( result   ok intent )  ;  finish (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountCredentials.java,on next button,@ override public void   (  )  {  final  account setup credentials fragment fragment =  (  account setup credentials fragment ) get fragment manager (  )  . find fragment by tag ( credentials   fragment   tag )  ;  final  bundle results = fragment . get c
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupABFragment.java,new instance,public static  account setupab fragment   ( final  string account email final  string user protocol final  string provider protocol )  {  final  bundle b = new  bundle ( 3 )  ;  b . put string ( account   email   arg account email )  ;  b . put string ( user   protocol   arg user protocol )  ;  b . put string ( provider   protocol   arg provider protocol )  ;  final  account setupab fragment f = new  account setupab fragment (  )  ;  f . set arguments ( b )  ;  return f ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountServerBaseFragment.java,collect user input,public void   (  )  {  final int phase = collect user input internal (  )  ;  final  callback callback =  (  callback ) get activity (  )  ;  callback . on account serverui complete ( phase )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSettingsEditQuickResponsesFragment.java,create args,public static  bundle   ( final  account account )  {  final  bundle b = new  bundle ( 1 )  ;  b . put parcelable ( arg   account account )  ;  return b ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSettingsEditQuickResponsesFragment.java,on activity created,@ override public void   (  bundle saved instance state )  {  super . on activity created ( saved instance state )  ;  final  simple cursor adapter adapter = new  simple cursor adapter ( get activity (  )  r . layout . quick   response   item null new  st
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSettingsEditQuickResponsesFragment.java,on attach,@ override public void   (  activity activity )  {  super . on attach ( activity )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSettingsEditQuickResponsesFragment.java,on create,@ override public void   (  bundle saved instance state )  {  super . on create ( saved instance state )  ;   bundle args = get arguments (  )  ;  m account = args . get parcelable ( arg   account )  ;  set has options menu ( true )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSettingsEditQuickResponsesFragment.java,on create loader,@ override public  loader <  cursor >    ( int id  bundle args )  {  return new  cursor loader ( get activity (  )  m account . quick response uri ui provider . quick   response   projection null null null )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSettingsEditQuickResponsesFragment.java,on create options menu,@ override public void   (  menu menu  menu inflater inflater )  {  menu . clear (  )  ;  inflater . inflate ( r . menu . quick   response   prefs   fragment   menu menu )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSettingsEditQuickResponsesFragment.java,on create view,@ override public  view   (  layout inflater inflater  view group container  bundle saved instance state )  {  final  view view = inflater . inflate ( r . layout . account   settings   edit   quick   responses   fragment container false )  ;  final  list 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSettingsEditQuickResponsesFragment.java,on item click,@ override public void   (  adapter view <  ?  >  parent  view view int position long id )  {  final  cursor c =  (  cursor ) list view . get item at position ( position )  ;  final  string quick response text = c . get string ( c . get column index ( ui 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSettingsEditQuickResponsesFragment.java,on load finished,@ override public void   (  loader <  cursor >  loader  cursor data )  {  adapter . swap cursor ( data )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSettingsEditQuickResponsesFragment.java,on loader reset,@ override public void   (  loader <  cursor >  loader )  {  adapter . swap cursor ( null )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSettingsEditQuickResponsesFragment.java,on options item selected,@ override public boolean   (  menu item item )  {  if  ( item . get item id (  )   =  =  r . id . create   new )   {   edit quick response dialog . new instance ( null m account . quick response uri true )  . show ( get fragment manager (  )  null )  ;  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupBasicsFragment.java,after text changed,@ override public void   (  editable s )  {  validate fields (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupBasicsFragment.java,get email,public  string   (  )  {  return m email view . get text (  )  . to string (  )  . trim (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupBasicsFragment.java,is manual setup,public boolean   (  )  {  return m manual setup ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupBasicsFragment.java,new instance,public static  account setup basics fragment   (  )  {  return new  account setup basics fragment (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupBasicsFragment.java,on click,@ override public void   (  view v )  {  final int view id = v . get id (  )  ;  final  callback callback =  (  callback ) get activity (  )  ;  if  ( view id  =  =  r . id . next )   {  m manual setup = false ;  callback . on next button (  )  ;   }  els
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupBasicsFragment.java,on create view,@ override public  view   (  layout inflater inflater  view group container  bundle saved instance state )  {  final  view view = inflate templated view ( inflater container r . layout . account   setup   basics   fragment  - 1 )  ;  m email view =  ui ut
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupBasicsFragment.java,on view state restored,@ override public void   (  bundle saved instance state )  {  super . on view state restored ( saved instance state )  ;  validate fields (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupBasicsFragment.java,set email,public void   ( final  string email )  {  m email view . set text ( email )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupBasicsFragment.java,set manual setup button visibility,public void   ( int visibility )  {  m manual setup view . set visibility ( visibility )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupBasicsFragment.java,set next button enabled,@ override public void   ( boolean enabled )  {  super . set next button enabled ( enabled )  ;  m manual setup view . set enabled ( enabled )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupBasicsFragment.java,validate fields,private void   (  )  {  final  string email field = get email (  )  ;  final  address[] addresses =  address . parse ( email field )  ;  final boolean email valid =  !  text utils . is empty ( email field )  && addresses . length  =  =  1 &&  !  text utils . is empty ( addresses[0] . get address (  )  )  ;  set next button enabled ( email valid )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupCredentialsFragment.java,after text changed,@ override public void   (  editable s )  {  validate password (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupCredentialsFragment.java,get client certificate,public  string   (  )  {  return m client certificate selector . get certificate (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupCredentialsFragment.java,get credential results,public  bundle   (  )  {  if  ( m results  !  =  null )   {  return m results ;   }  final  bundle results = new  bundle ( 2 )  ;  results . put string ( extra   password get password (  )  )  ;  results . put string ( extra   client   cert get client certificate (  )  )  ;  return results ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupCredentialsFragment.java,get password,public  string   (  )  {  if  ( m offero auth )   {  return m imap password text . get text (  )  . to string (  )  ;   }  else  {  return m regular password text . get text (  )  . to string (  )  ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupCredentialsFragment.java,new instance,public static  account setup credentials fragment   ( final  string email final  string protocol final  string client cert final boolean password failed final boolean standalone )  {  final  account setup credentials fragment f = new  account setup credentials fragment (  )  ;  final  bundle b = new  bundle ( 5 )  ;  b . put string ( extra   email email )  ;  b . put string ( extra   protocol protocol )  ;  b . put string ( extra   client   cert client cert )  ;  b . put boolean ( extra   password   failed password failed )  ;  b . put boolean ( extra   standalone standalone )  ;  f . set arguments ( b )  ;  return f ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupCredentialsFragment.java,on activity created,@ override public void   ( final  bundle saved instance state )  {  super . on activity created ( saved instance state )  ;  m app context = get activity (  )  . get application context (  )  ;  m email address = get arguments (  )  . get string ( extra  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupCredentialsFragment.java,on activity result,@ override public void   ( final int request code final int result code final  intent data )  {  if  ( request code  =  =  certificate   request )   {  if  ( result code  =  =   activity . result   ok )   {  final  string cert alias = data . get string ex
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupCredentialsFragment.java,on certificate requested,@ override public void   (  )  {  final  intent intent = new  intent ( get string ( r . string . intent   exchange   cert   action )  )  ;  intent . set data (  certificate requestor . certificate   request   uri )  ;  start activity for result ( intent c
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupCredentialsFragment.java,on click,@ override public void   ( final  view view )  {  final int view id = view . get id (  )  ;  if  ( view id  =  =  r . id . sign   in   with   oauth )   {  if  ( m oauth providers . size (  )   >  0 )   {  m provider id = m oauth providers . get ( 0 )  . i
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupCredentialsFragment.java,on create view,@ override public  view   ( final  layout inflater inflater final  view group container final  bundle saved instance state )  {  final boolean standalone = get arguments (  )  . get boolean ( extra   standalone )  ;  final  view view ;  if  ( standalone )
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSettingsFragment.java, account loader,private   (  context context  string account email long account id )  {  super ( context )  ;  m observer = new  force load content observer (  )  ;  m account email = account email ;  m account id = account id ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSettingsFragment.java, account loader callbacks,private   (  context context )  {  m context = context ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSettingsFragment.java,build arguments,public static  bundle   ( final long account id )  {  final  bundle b = new  bundle ( 1 )  ;  b . put long ( arg   account   id account id )  ;  return b ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSettingsFragment.java,get system policies list,"@ suppress warnings ( ""unused"" )  private  array list <  string >    (  policy policy )  {   resources res = m context . get resources (  )  ;   array list <  string >  policies = new  array list <  >  (  )  ;  if  ( policy . m password mode  !  =   polic"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSettingsFragment.java,load in background,@ override public  map <  string  object >    (  )  {  final  map <  string  object >  map = new  hash map <  >  (  )  ;  final  account account ;  if  (  !  text utils . is empty ( m account email )  )   {  account =  account . restore account with addre
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSettingsFragment.java,load settings,"private void   (  )  {  final  account preferences account preferences = new  account preferences ( m context m ui account . get email address (  )  )  ;  if  ( m inbox folder preferences  !  =  null )   {   notification utils . move notification setting ( account preferences m inbox folder preferences )  ;   }  final  string protocol = m account . get protocol ( m context )  ;  if  ( m service info  =  =  null )   {   log utils . e (  log utils . tag "" could not find service info for account %d with protocol %s"" m account . m id protocol )  ;  get activity (  )  . on back pressed (  )  ;  return ;   }  final android . accounts .  account android acct = m ui account . get account manager account (  )  ;  m account description =  (  edit text preference ) find preference ( preference   description )  ;  m account description . set summary ( m account . get display name (  )  )  ;  m account description . set text ( m account . get display name (  )  )  ;  m account description . set on preference change listener ( this )  ;  m account name =  (  edit text preference ) find preference ( preference   name )  ;   string sender name = m ui account . get sender name (  )  ;  if  ( sender name  =  =  null )   {  sender name = """" ;   }  m account name . set summary ( sender name )  ;  m account name . set text ( sender name )  ;  m account name . set on preference change listener ( this )  ;  final  string account signature = m account . get signature (  )  ;  m account signature =  (  edit text preference ) find preference ( preference   signature )  ;  m account signature . set text ( account signature )  ;  m account signature . set on preference change listener ( this )  ;   settings utils . update preference summary ( m account signature account signature r . string . preferences   signature   summary   not   set )  ;  m check frequency =  (  list preference ) find preference ( preference   frequency )  ;  m check frequency . set entries ( m service info . sync interval strings )  ;  m check frequency . set entry values ( m service info . sync intervals )  ;  if  ( m service info . sync contacts || m service info . sync calendar )   {  m check frequency . set value (  string . value of ( m account . get sync interval (  )  )  )  ;   }  else  {  boolean synced =  content resolver . get sync automatically ( android acct  email content . authority )  ;  if  ( synced )   {  m check frequency . set value (  string . value of ( m account . get sync interval (  )  )  )  ;   }  else  {  m check frequency . set value (  string . value of (  account . check   interval   never )  )  ;   }   }  m check frequency . set summary ( m check frequency . get entry (  )  )  ;  m check frequency . set on preference change listener ( this )  ;  final  preference quick response pref = find preference ( preference   quick   responses )  ;  if  ( quick response pref  !  =  null )   {  quick response pref . set on preference click listener ( new  preference .  on preference click listener (  )  {  @ override public boolean on preference click (   preference preference )  {  on edit quick responses ( m ui account )  ;  return true ;   }   }   )  ;   }  final  preference category data usage category =  (  preference category ) find preference ( preference   category   data   usage )  ;  if  ( m service info . offer lookback )   {  if  ( m sync window  =  =  null )   {  m sync window = new  list preference ( m context )  ;  m sync window . set key ( preference   sync   window )  ;  data usage category . add preference ( m sync window )  ;   }  m sync window . set title ( r . string . account   setup   options   mail   window   label )  ;  m sync window . set value (  string . value of ( m account . get sync lookback (  )  )  )  ;  final int max lookback ;  if  ( m account . m policy  !  =  null )   {  max lookback = m account . m policy . m max email lookback ;   }  else  {  max lookback = 0 ;   }   mailbox settings . setup lookback preference options ( m context m sync window max lookback false )  ;  m sync window . set order ( 2 )  ;  m sync window . set on preference change listener ( this )  ;  if  ( m sync settings  =  =  null )   {  m sync settings = new  preference ( m context )  ;  m sync settings . set key ( preference   sync   settings )  ;  data usage category . add preference ( m sync settings )  ;   }  m sync settings . set title ( r . string . folder   sync   settings   pref   title )  ;  m sync settings . set order ( 3 )  ;   }  final  preference category folder prefs =  (  preference category ) find preference ( preference   system   folders )  ;  if  ( folder prefs  !  =  null )   {  if  ( m service info . requires setup )   {   preference trash preference = find preference ( preference   system   folders   trash )  ;   intent i = new  intent ( m context  folder picker activity . class )  ;   uri uri =  email content . content   uri . build upon (  )  . append query parameter ( ""account""  long . to string ( m account . get id (  )  )  )  . build (  )  ;  i . set data ( uri )  ;  i . put extra (  folder picker activity . mailbox   type   extra  mailbox . type   trash )  ;  trash preference . set intent ( i )  ;   preference sent preference = find preference ( preference   system   folders   sent )  ;  i = new  intent ( m context  folder picker activity . class )  ;  i . set data ( uri )  ;  i . put extra (  folder picker activity . mailbox   type   extra  mailbox . type   sent )  ;  sent preference . set intent ( i )  ;   }  else  {  get preference screen (  )  . remove preference ( folder prefs )  ;   }   }  final  check box preference background attachments =  (  check box preference ) find preference ( preference   background   attachments )  ;  if  ( background attachments  !  =  null )   {  if  (  ! m service info . offer attachment preload )   {  data usage category . remove preference ( background attachments )  ;   }  else  {  background attachments . set checked ( 0  !  =   ( m account . get flags (  )  &  account . flags   background   attachments )  )  ;  background attachments . set on preference change listener ( this )  ;   }   }  final  preference category notifications category =  (  preference category ) find preference ( preference   category   notifications )  ;  if  ( m inbox folder preferences  !  =  null )   {  final  check box preference inbox notify =  (  check box preference ) find preference (  folder preferences .  preference keys . notifications   enabled )  ;  inbox notify . set checked ( m inbox folder preferences . are notifications enabled (  )  )  ;  inbox notify . set on preference change listener ( this )  ;  m inbox ringtone = find preference (  folder preferences .  preference keys . notification   ringtone )  ;  final  string ringtone uri = m inbox folder preferences . get notification ringtone uri (  )  ;  if  (  !  text utils . is empty ( ringtone uri )  )   {  m ringtone =  ringtone manager . get ringtone ( get activity (  )   uri . parse ( ringtone uri )  )  ;   }  set ringtone summary (  )  ;  m inbox ringtone . set on preference change listener ( this )  ;  m inbox ringtone . set on preference click listener ( new  on preference click listener (  )  {  @ override public boolean on preference click (  final  preference preference )  {  show ringtone picker (  )  ;  return true ;   }   }   )  ;  notifications category . set enabled ( true )  ;  m inbox vibrate =  (  check box preference ) find preference (  folder preferences .  preference keys . notification   vibrate )  ;  if  ( m inbox vibrate  !  =  null )   {  m inbox vibrate . set checked ( m inbox folder preferences . is notification vibrate enabled (  )  )  ;   vibrator vibrator =  (  vibrator ) m context . get system service (  context . vibrator   service )  ;  if  ( vibrator . has vibrator (  )  )   {  m inbox vibrate . set on preference change listener ( this )  ;   }  else  {  notifications category . remove preference ( m inbox vibrate )  ;  m inbox vibrate = null ;   }   }   }  else  {  notifications category . set enabled ( false )  ;   }  final  preference retry account = find preference ( preference   policies   retry   account )  ;  final  preference category policies category =  (  preference category ) find preference ( preference   category   policies )  ;  if  ( policies category  !  =  null )   {  get preference screen (  )  . remove preference ( policies category )  ;   }  if  ( retry account  !  =  null )   {  retry account . set on preference click listener ( new  preference .  on preference click listener (  )  {  @ override public boolean on preference click (   preference preference )  {   security policy . set account hold flag ( m context m account false )  ;  if  ( policies category  !  =  null )   {  policies category . remove preference ( retry account )  ;   }  return true ;   }   }   )  ;   }  find preference ( preference   incoming )  . set on preference click listener ( new  preference .  on preference click listener (  )  {  @ override public boolean on preference click (   preference preference )  {  on incoming settings ( m account )  ;  return true ;   }   }   )  ;  final  preference pref outgoing = find preference ( preference   outgoing )  ;  if  ( pref outgoing  !  =  null )   {  if  ( m service info . uses smtp && m account . m host auth send  !  =  null )   {  pref outgoing . set on preference click listener ( new  preference .  on preference click listener (  )  {  @ override public boolean on preference click (   preference preference )  {  on outgoing settings ( m account )  ;  return true ;   }   }   )  ;   }  else  {  if  ( m service info . uses smtp )   {   log utils . e (  log utils . tag "" account %d has a bad outbound hostauth"" m account . get id (  )  )  ;   }   preference category server category =  (  preference category ) find preference ( preference   category   server )  ;  server category . remove preference ( pref outgoing )  ;   }   }  final  check box preference sync contacts =  (  check box preference ) find preference ( preference   sync   contacts )  ;  final  check box preference sync calendar =  (  check box preference ) find preference ( preference   sync   calendar )  ;  final  check box preference sync email =  (  check box preference ) find preference ( preference   sync   email )  ;  if  ( sync contacts  !  =  null && sync calendar  !  =  null && sync email  !  =  null )   {  if  ( m service info . sync contacts || m service info . sync calendar )   {  if  ( m service info . sync contacts )   {  sync contacts . set checked (  content resolver . get sync automatically ( android acct  contacts contract . authority )  )  ;  sync contacts . set on preference change listener ( this )  ;   }  else  {  sync contacts . set checked ( false )  ;  sync contacts . set enabled ( false )  ;   }  if  ( m service info . sync calendar )   {  sync calendar . set checked (  content resolver . get sync automatically ( android acct  calendar contract . authority )  )  ;  sync calendar . set on preference change listener ( this )  ;   }  else  {  sync calendar . set checked ( false )  ;  sync calendar . set enabled ( false )  ;   }  sync email . set checked (  content resolver . get sync automatically ( android acct  email content . authority )  )  ;  sync email . set on preference change listener ( this )  ;   }  else  {  data usage category . remove preference ( sync contacts )  ;  data usage category . remove preference ( sync calendar )  ;  data usage category . remove preference ( sync email )  ;   }   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSettingsFragment.java,on activity created,@ override public void   (  bundle saved instance state )  {  super . on activity created ( saved instance state )  ;  final  bundle args = new  bundle ( 1 )  ;  if  (  !  text utils . is empty ( m account email )  )   {  args . put string (  account load
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSettingsFragment.java,on activity result,@ override public void   ( int request code int result code  intent data )  {  switch  ( request code )   {  case ringtone   request   code: if  ( result code  =  =   activity . result   ok && data  !  =  null )   {   uri uri = data . get parcelable extra
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSettingsFragment.java,on attach,@ override public void   (  activity activity )  {  super . on attach ( activity )  ;  m context = activity ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSettingsFragment.java,on create,@ override public void   (  bundle saved instance state )  {  super . on create ( saved instance state )  ;  set has options menu ( true )  ;  add preferences from resource ( r . xml . account   settings   preferences )  ;  if  (  ! get resources (  )  . 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSettingsFragment.java,on create loader,@ override public  loader <  map <  string  object >  >    ( int id  bundle args )  {  return new  account loader ( m context args . get string ( arg   account   email )  args . get long ( arg   account   id )  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSettingsFragment.java,on create options menu,@ override public void   (  menu menu  menu inflater inflater )  {  menu . clear (  )  ;  inflater . inflate ( r . menu . settings   fragment   menu menu )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSettingsFragment.java,on discard result,@ override protected void   (  map <  string  object >  result )  {  final  account account =  (  account ) result . get ( result   key   account )  ;  if  ( account  !  =  null )   {  if  ( account . m policy  !  =  null )   {  account . m policy . close
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSettingsFragment.java,on edit quick responses,public void   ( com . android . mail . providers .  account account )  {  final  bundle args =  account settings edit quick responses fragment . create args ( account )  ;  final  preference activity activity =  (  preference activity ) get activity (  )  ;  activity . start preference panel (  account settings edit quick responses fragment . class . get name (  )  args r . string . account   settings   edit   quick   responses   label null null 0 )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSettingsFragment.java,on incoming settings,public void   (  account account )  {  final  intent intent =  account server settings activity . get intent for incoming ( get activity (  )  account )  ;  get activity (  )  . start activity ( intent )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSettingsFragment.java,on load finished,@ override public void   (  loader <  map <  string  object >  >  loader  map <  string  object >  data )  {  final  activity activity = get activity (  )  ;  if  ( activity  =  =  null )   {  return ;   }  if  ( data  =  =  null )   {  activity . finish 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSettingsFragment.java,on outgoing settings,public void   (  account account )  {  final  intent intent =  account server settings activity . get intent for outgoing ( get activity (  )  account )  ;  get activity (  )  . start activity ( intent )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSettingsFragment.java,on preference change,@ override public boolean   (  preference preference  object new value )  {  final  string key = preference . get key (  )  ;  final  content values cv = new  content values ( 1 )  ;  if  ( key . equals ( preference   description )  )   {   string summary
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSettingsFragment.java,on preference click,@ override public boolean   (  preference preference )  {  on outgoing settings ( m account )  ;  return true ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSettingsFragment.java,on preference tree click,@ override public boolean   (  preference screen preference screen @ non null  preference preference )  {  final  string key = preference . get key (  )  ;  if  ( key . equals ( preference   sync   settings )  )   {  start activity (  mailbox settings . g
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSettingsFragment.java,on save instance state,@ override public void   ( @ non null  bundle outstate )  {  super . on save instance state ( outstate )  ;  if  ( m check frequency  !  =  null )   {  outstate . put char sequence array ( savestate   sync   interval   strings m check frequency . get entr
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSettingsFragment.java,set policy list summary,"@ suppress warnings ( ""unused"" )  private void   (  array list <  string >  policies  string policies to add  string preference name )  {   policy . add policy string to list ( policies to add policies )  ;  if  ( policies . size (  )   >  0 )   {   prefe"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSettingsFragment.java,set ringtone,"private void   (  uri ringtone )  {  if  ( ringtone  !  =  null )   {  m inbox folder preferences . set notification ringtone uri ( ringtone . to string (  )  )  ;  m ringtone =  ringtone manager . get ringtone ( get activity (  )  ringtone )  ;   }  else  {  m inbox folder preferences . set notification ringtone uri ( """" )  ;  m ringtone = null ;   }  set ringtone summary (  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSettingsFragment.java,set ringtone summary,private void   (  )  {  final  string summary = m ringtone  !  =  null  ?  m ringtone . get title ( m context )  : m context . get string ( r . string . silent   ringtone )  ;  m inbox ringtone . set summary ( summary )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSettingsFragment.java,show ringtone picker,private void   (  )  {   intent intent = new  intent (  ringtone manager . action   ringtone   picker )  ;  final  string ringtone uri = m inbox folder preferences . get notification ringtone uri (  )  ;  if  (  !  text utils . is empty ( ringtone uri )  )   {  intent . put extra (  ringtone manager . extra   ringtone   existing   uri  uri . parse ( ringtone uri )  )  ;   }  intent . put extra (  ringtone manager . extra   ringtone   show   default true )  ;  intent . put extra (  ringtone manager . extra   ringtone   default   uri  settings .  system . default   notification   uri )  ;  intent . put extra (  ringtone manager . extra   ringtone   show   silent true )  ;  intent . put extra (  ringtone manager . extra   ringtone   type  ringtone manager . type   notification )  ;  start activity for result ( intent ringtone   request   code )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupActivity.java,get setup data,@ override public  setup data fragment   (  )  {  return m setup data ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupActivity.java,on create,@ override public void   (  bundle saved instance state )  {  super . on create ( saved instance state )  ;  if  ( saved instance state  =  =  null )   {  final  bundle b = get intent (  )  . get extras (  )  ;  if  ( b  !  =  null )   {  m setup data = b
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFinal.java,collect credentials,private void   (  )  {  final  account setup credentials fragment f =  (  account setup credentials fragment ) get content fragment (  )  ;  final  bundle results = f . get credential results (  )  ;  m setup data . set credential results ( results )  ;  final  account account = m setup data . get account (  )  ;  final  host auth recv auth = account . get or create host auth recv ( this )  ;   account setup credentials fragment . populate host auth with results ( this recv auth m setup data . get credential results (  )  )  ;  m setup data . set incoming cred loaded ( true )  ;  final  email service utils .  email service info info = m setup data . get incoming service info ( this )  ;  if  ( info . uses smtp )   {  final  host auth send auth = account . get or create host auth send ( this )  ;   account setup credentials fragment . populate host auth with results ( this send auth m setup data . get credential results (  )  )  ;  m setup data . set outgoing cred loaded ( true )  ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFinal.java,destroy account creation fragment,"@ override public void   (  )  {  dismiss create account dialog (  )  ;  final  fragment f = get fragment manager (  )  . find fragment by tag (  account creation fragment . tag )  ;  if  ( f  =  =  null )   {   log utils . wtf (  log utils . tag "" couldn"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFinal.java,dismiss check settings fragment,private void   (  )  {  final  fragment f = get fragment manager (  )  . find fragment by tag (  account check settings fragment . tag )  ;  final  fragment d = get fragment manager (  )  . find fragment by tag (  check settings progress dialog fragment . tag )  ;  get fragment manager (  )  . begin transaction (  )  . remove ( f )  . remove ( d )  . commit (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFinal.java,dismiss create account dialog,protected void   (  )  {  final  dialog fragment f =  (  dialog fragment ) get fragment manager (  )  . find fragment by tag (  create account dialog fragment . tag )  ;  if  ( f  !  =  null )   {  f . dismiss (  )  ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFinal.java,finish,"@ override public void   (  )  {  if  ( m report account authenticator error )   {  if  ( m account authenticator response  !  =  null )   {  m account authenticator response . on error (  account manager . error   code   canceled ""canceled"" )  ;  m accou"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFinal.java,finish auto setup,"private boolean   (  )  {  final  string email = m setup data . get email (  )  ;  try  {  m provider . expand templates ( email )  ;  final  string primary protocol =  host auth . get protocol from string ( m provider . incoming uri )  ;   email service utils .  email service info info =  email service utils . get service info ( this primary protocol )  ;  if  (  ! info . is gmail stub &&  !  email service utils . is service available ( this info . protocol )  )   {   log utils . d (  log utils . tag "" protocol %s not available  using alternate"" info . protocol )  ;  m provider . expand alternate templates ( email )  ;  final  string alternate protocol =  host auth . get protocol from string ( m provider . incoming uri )  ;  info =  email service utils . get service info ( this alternate protocol )  ;   }  final  account account = m setup data . get account (  )  ;  final  host auth recv auth = account . get or create host auth recv ( this )  ;  recv auth . set host auth from string ( m provider . incoming uri )  ;  recv auth . set user name ( m provider . incoming username )  ;  recv auth . m port =  (  ( recv auth . m flags &  host auth . flag   ssl )   !  =  0 )   ?  info . port ssl : info . port ;  if  ( info . uses smtp )   {  final  host auth send auth = account . get or create host auth send ( this )  ;  send auth . set host auth from string ( m provider . outgoing uri )  ;  send auth . set user name ( m provider . outgoing username )  ;   }  populate setup data ( m owner name email )  ;  final  string duplicate account name = m existing accounts map  !  =  null  ?  m existing accounts map . get ( email )  : null ;  if  ( duplicate account name  !  =  null )   {  show duplicate account dialog ( duplicate account name )  ;  return false ;   }   }  catch  (  uri syntax exception e )   {  m skip auto discover = false ;  m pre configured failed = true ;   }  return true ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFinal.java,get content fragment,private  account setup fragment   (  )  {  return  (  account setup fragment ) get fragment manager (  )  . find fragment by tag ( content   fragment   tag )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFinal.java,initiate account creation,"private void   (  )  {  m is processing = true ;  get content fragment (  )  . set next button enabled ( false )  ;  final  account account = m setup data . get account (  )  ;  if  ( account . m host auth recv  =  =  null )   {  throw new  illegal state exception ( ""in  account setup options with null m host auth recv"" )  ;   }  final  account setup options fragment fragment =  (  account setup options fragment ) get content fragment (  )  ;  if  ( fragment  =  =  null )   {  throw new  illegal state exception ( "" fragment missing ! "" )  ;   }  account . set display name ( account . get email address (  )  )  ;  int new flags = account . get flags (  )  & ~ (  account . flags   background   attachments )  ;  final  email service utils .  email service info service info = m setup data . get incoming service info ( this )  ;  if  ( service info . offer attachment preload && fragment . get background attachments value (  )  )   {  new flags| =  account . flags   background   attachments ;   }  final  host auth host auth = account . get or create host auth recv ( this )  ;  if  ( host auth . m protocol . equals ( get string ( r . string . protocol   eas )  )  )   {  try  {  final double protocol version double =  double . parse double ( account . m protocol version )  ;  if  ( protocol version double  >  =  12 . 0 )   {  new flags| =  account . flags   supports   smart   forward |  account . flags   supports   global   search |  account . flags   supports   search ;   }   }  catch  (   number format exception e )   {   log utils . wtf (  log utils . tag e "" exception thrown parsing the protocol version . "" )  ;   }   }  account . set flags ( new flags )  ;  account . set sync interval ( fragment . get check frequency value (  )  )  ;  final  integer sync window value = fragment . get account sync window value (  )  ;  if  ( sync window value  !  =  null )   {  account . set sync lookback ( sync window value )  ;   }  if  ( m setup data . get policy (  )   !  =  null )   {  account . m flags| =  account . flags   security   hold ;  account . m policy = m setup data . get policy (  )  ;   }  final boolean sync email = fragment . get sync email value (  )  ;  final boolean sync calendar = service info . sync calendar && fragment . get sync calendar value (  )  ;  final boolean sync contacts = service info . sync contacts && fragment . get sync contacts value (  )  ;  final boolean enable notifications = fragment . get notify value (  )  ;  final  fragment f =  account creation fragment . new instance ( account sync email sync calendar sync contacts enable notifications )  ;  final  fragment transaction ft = get fragment manager (  )  . begin transaction (  )  ;  ft . add ( f  account creation fragment . tag )  ;  ft . commit (  )  ;  show create account dialog (  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFinal.java,initiate account finalize,private void   (  )  {  m is processing = true ;  get content fragment (  )  . set next button enabled ( false )  ;   account setup names fragment fragment =  (  account setup names fragment ) get content fragment (  )  ;  final  account account = m setup data . get account (  )  ;  final  string description = fragment . get description (  )  ;  if  (  !  text utils . is empty ( description )  )   {  account . set display name ( description )  ;   }  account . set sender name ( fragment . get sender name (  )  )  ;  final  fragment f =  account finalize fragment . new instance ( account )  ;  final  fragment transaction ft = get fragment manager (  )  . begin transaction (  )  ;  ft . add ( f  account finalize fragment . tag )  ;  ft . commit (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFinal.java,initiate auto discover,private void   (  )  {  initiate check settings fragment (  setup data fragment . check   autodiscover )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFinal.java,initiate check settings fragment,private void   ( int check mode )  {  final  fragment f =  account check settings fragment . new instance ( check mode )  ;  final  fragment d =  check settings progress dialog fragment . new instance ( check mode )  ;  get fragment manager (  )  . begin transaction (  )  . add ( f  account check settings fragment . tag )  . add ( d  check settings progress dialog fragment . tag )  . commit (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFinal.java,new instance,public static  create account dialog fragment   (  )  {  return new  create account dialog fragment (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFinal.java,onab protocol disambiguated,@ override public void   (  string chosen protocol )  {  if  (  !  text utils . equals ( m setup data . get incoming protocol ( this )  chosen protocol )  )   {  m is pre configured provider = false ;  m setup data . set incoming protocol ( this chosen pr
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFinal.java,on account creation fragment complete,@ override public void   (  )  {  destroy account creation fragment (  )  ;  if  ( m account authenticator response  !  =  null )   {  final  email service utils .  email service info info = m setup data . get incoming service info ( this )  ;  final  bun
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFinal.java,on account finalize fragment complete,@ override public void   (  )  {  finish (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFinal.java,on back pressed,@ override public void   (  )  {  if  ( m is processing )   {  return ;   }  if  ( m state  =  =  state   names )   {  finish (  )  ;   }  else  {  super . on back pressed (  )  ;   }  reset state from current fragment (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFinal.java,on basics complete,"private boolean   (  )  {  final  account setup basics fragment f =  (  account setup basics fragment ) get content fragment (  )  ;  final  string email = f . get email (  )  ;  m setup data . set incoming protocol ( this null )  ;  if  (  !  text utils . equals ( email m setup data . get email (  )  )  )   {  m password failed = false ;   }  m setup data . set email ( email )  ;  final  string[] email parts = email . split ( ""@"" )  ;  final  string domain = email parts[1] . trim (  )  ;  m provider =  account settings utils . find provider for domain ( this domain )  ;  if  ( m provider  !  =  null )   {  m is pre configured provider = true ;  if  ( m provider . note  !  =  null )   {  final  account setup note dialog fragment dialog fragment =  account setup note dialog fragment . new instance ( m provider . note )  ;  dialog fragment . show ( get fragment manager (  )   account setup note dialog fragment . tag )  ;  return false ;   }  else  {  return finish auto setup (  )  ;   }   }  else  {  m is pre configured provider = false ;  final  string existing account name = m existing accounts map  !  =  null  ?  m existing accounts map . get ( email )  : null ;  if  (  !  text utils . is empty ( existing account name )  )   {  show duplicate account dialog ( existing account name )  ;  return false ;   }  else  {  populate setup data ( m owner name email )  ;  m skip auto discover = false ;  return true ;   }   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFinal.java,on check settings auto discover complete,@ override public void   ( int result )  {  dismiss check settings fragment (  )  ;  proceed (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFinal.java,on check settings complete,@ override public void   (  )  {  m pre configured failed = false ;  m password failed = false ;  dismiss check settings fragment (  )  ;  proceed (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFinal.java,on check settings error,@ override public void   ( int reason  string message )  {  if  ( reason  =  =   check settings error dialog fragment . reason   authentication   failed || reason  =  =   check settings error dialog fragment . reason   certificate   required )   {  m pass
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFinal.java,on check settings error dialog edit certificate,@ override public void   (  )  {  if  ( m state  =  =  state   checking   preconfigured )   {  m pre configured failed = true ;  proceed (  )  ;   }  else  {  reset state from current fragment (  )  ;   }  final  account setup incoming fragment f =  (  ac
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFinal.java,on check settings error dialog edit settings,@ override public void   (  )  {  if  ( m state  =  =  state   checking   preconfigured || m state  =  =  state   auto   discover )   {  m pre configured failed = true ;  proceed (  )  ;   }  else  {  reset state from current fragment (  )  ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFinal.java,on check settings progress dialog cancel,@ override public void   (  )  {  dismiss check settings fragment (  )  ;  reset state from current fragment (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFinal.java,on check settings security required,@ override public void   (  string host name )  {  dismiss check settings fragment (  )  ;  final  dialog fragment f =  security required dialog fragment . new instance ( host name )  ;  f . show ( get fragment manager (  )   security required dialog frag
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFinal.java,on choose protocol,@ override public void   (  string protocol )  {  m setup data . set incoming protocol ( this protocol )  ;  final  account account = m setup data . get account (  )  ;  set defaults for protocol ( account )  ;  proceed (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFinal.java,on click,@ override public void   (  dialog interface dialog int which )  {  get activity (  )  . finish (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFinal.java,on create,@ override public void   (  bundle saved instance state )  {  super . on create ( saved instance state )  ;  final  intent intent = get intent (  )  ;  final  string action = intent . get action (  )  ;  if  ( intent   force   create   account  =  =  null
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFinal.java,on create dialog,@ override public  dialog   (  bundle saved instance state )  {  final  string message = get string ( r . string . account   setup   failed   dlg   auth   message r . string . system   account   create   failed )  ;  set cancelable ( false )  ;  return ne
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFinal.java,on create loader,@ override public  loader <  cursor >    ( final int id final  bundle args )  {  return new  cursor loader (  account setup final . this  mail app provider . get accounts uri (  )  new  string[] { ui provider .  account columns . account   manager   name 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFinal.java,on credentials complete,@ override public void   (  bundle results )  {  proceed (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFinal.java,on duplicate account dialog dismiss,@ override public void   (  )  {  reset state from current fragment (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFinal.java,on incoming complete,private void   (  )  {   account setup incoming fragment f =  (  account setup incoming fragment ) get content fragment (  )  ;  f . collect user input (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFinal.java,on load finished,@ override public void   ( final  loader <  cursor >  loader final  cursor data )  {  if  ( data  =  =  null ||  ! data . move to first (  )  )   {  m existing accounts map = null ;  return ;   }  m existing accounts map = new  hash map <  >  (  )  ;  fin
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFinal.java,on loader reset,@ override public void   ( final  loader <  cursor >  loader )  {  m existing accounts map = null ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFinal.java,on next button,@ override public void   (  )  {  if  (  ! m is processing )   {  proceed (  )  ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFinal.java,on note dialog cancel,@ override public void   (  )  {  reset state from current fragment (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFinal.java,on note dialog complete,@ override public void   (  )  {  finish auto setup (  )  ;  proceed (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFinal.java,on outgoing complete,private void   (  )  {   account setup outgoing fragment f =  (  account setup outgoing fragment ) get content fragment (  )  ;  f . collect user input (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFinal.java,on resume,@ override protected void   (  )  {  super . on resume (  )  ;  if  ( m force create )   {  m force create = false ;  proceed (  )  ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFinal.java,on save instance state,@ override public void   ( @ non null  bundle out state )  {  super . on save instance state ( out state )  ;  out state . put boolean ( savestate   key   is   processing m is processing )  ;  out state . put int ( savestate   key   state m state )  ;  ou
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFinal.java,on security required dialog result,@ override public void   ( boolean ok )  {  if  ( ok )   {  proceed (  )  ;   }  else  {  reset state from current fragment (  )  ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFinal.java,on start,@ override protected void   (  )  {  super . on start (  )  ;   analytics . get instance (  )  . activity start ( this )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFinal.java,on stop,@ override protected void   (  )  {  super . on stop (  )  ;   analytics . get instance (  )  . activity stop ( this )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFinal.java,populate host auths from setup data,"private void   (  )  {  final  string email = m setup data . get email (  )  ;  final  string[] email parts = email . split ( ""@"" )  ;  final  string domain = email parts[1] ;  final  account account = m setup data . get account (  )  ;  final  email service utils .  email service info info = m setup data . get incoming service info ( this )  ;  final  host auth recv auth = account . get or create host auth recv ( this )  ;  recv auth . set user name ( email )  ;  recv auth . set connection ( m setup data . get incoming protocol (  )  domain  host auth . port   unknown info . offer tls  ?   host auth . flag   tls :  host auth . flag   ssl )  ;   account setup credentials fragment . populate host auth with results ( this recv auth m setup data . get credential results (  )  )  ;  m setup data . set incoming cred loaded ( true )  ;  if  ( info . uses smtp )   {  final  host auth send auth = account . get or create host auth send ( this )  ;  send auth . set user name ( email )  ;  send auth . set connection (  host auth . legacy   scheme   smtp domain  host auth . port   unknown  host auth . flag   tls )  ;   account setup credentials fragment . populate host auth with results ( this send auth m setup data . get credential results (  )  )  ;  m setup data . set outgoing cred loaded ( true )  ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFinal.java,populate setup data,private void   (  string sender name  string sender email )  {  final  account account = m setup data . get account (  )  ;  account . set sender name ( sender name )  ;  account . set email address ( sender email )  ;  account . set display name ( sender email )  ;  set defaults for protocol ( account )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFinal.java,possibly divert to gmail,"private boolean   (  )  {  final  email service utils .  email service info info = m setup data . get incoming service info ( this )  ;  if  (  text utils . equals ( info . protocol ""gmail"" )  )   {  final  bundle options = new  bundle ( 1 )  ;  options . put boolean ( ""allow skip"" false )  ;   account manager . get ( this )  . add account ( ""com . google"" ""mail"" null options this null null )  ;  finish (  )  ;  return true ;   }  return false ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFinal.java,proceed,"protected void   (  )  {  m is processing = false ;  final  account setup fragment old content fragment = get content fragment (  )  ;  if  ( old content fragment  !  =  null )   {  old content fragment . set next button enabled ( true )  ;   }  get fragment manager (  )  . execute pending transactions (  )  ;  switch  ( m state )   {  case state   basics: final boolean advance = on basics complete (  )  ;  if  (  ! advance )   {  m state = state   basics   post ;  break ;   }  case state   basics   post: if  ( should divert to manual (  )  )   {  m skip auto discover = true ;  m is pre configured provider = false ;  m state = state   type ;   }  else  {  m skip auto discover = false ;  if  ( m is pre configured provider )   {  if  (  !  text utils . is empty ( m setup data . get am protocol (  )  )  &&  !  text utils . equals ( m setup data . get am protocol (  )  m setup data . get incoming protocol ( this )  )  )   {  m state = state   ab ;   }  else  {  m state = state   credentials ;  if  ( possibly divert to gmail (  )  )   {  return ;   }   }   }  else  {  final  string am protocol = m setup data . get am protocol (  )  ;  if  (  !  text utils . is empty ( am protocol )  )   {  m setup data . set incoming protocol ( this am protocol )  ;  final  account account = m setup data . get account (  )  ;  set defaults for protocol ( account )  ;  m state = state   credentials ;   }  else  {  m state = state   type ;   }   }   }  update content fragment ( true )  ;  break ;  case state   type: m state = state   credentials ;  update content fragment ( true )  ;  break ;  case state   ab: if  ( possibly divert to gmail (  )  )   {  return ;   }  m state = state   credentials ;  update content fragment ( true )  ;  break ;  case state   credentials: collect credentials (  )  ;  if  ( m is pre configured provider )   {  m state = state   checking   preconfigured ;  initiate check settings fragment (  setup data fragment . check   incoming |  setup data fragment . check   outgoing )  ;   }  else  {  populate host auths from setup data (  )  ;  if  ( m skip auto discover )   {  m state = state   manual   incoming ;  update content fragment ( true )  ;   }  else  {  m state = state   auto   discover ;  initiate auto discover (  )  ;   }   }  break ;  case state   checking   preconfigured: if  ( m pre configured failed )   {  if  ( m password failed )   {   fragment manager fm = get fragment manager (  )  ;  fm . pop back stack immediate ( credentials   backstack   tag 0 )  ;  final  account setup credentials fragment f =  (  account setup credentials fragment ) get content fragment (  )  ;  f . set password failed ( m password failed )  ;  reset state from current fragment (  )  ;   }  else  {  m state = state   manual   incoming ;  update content fragment ( true )  ;   }   }  else  {  m state = state   options ;  update content fragment ( true )  ;   }  break ;  case state   auto   discover: m state = state   manual   incoming ;  update content fragment ( true )  ;  break ;  case state   manual   incoming: on incoming complete (  )  ;  m state = state   checking   incoming ;  initiate check settings fragment (  setup data fragment . check   incoming )  ;  break ;  case state   checking   incoming: final  email service utils .  email service info service info = m setup data . get incoming service info ( this )  ;  if  ( service info . uses smtp )   {  m state = state   manual   outgoing ;   }  else  {  m state = state   options ;   }  update content fragment ( true )  ;  break ;  case state   manual   outgoing: on outgoing complete (  )  ;  m state = state   checking   outgoing ;  initiate check settings fragment (  setup data fragment . check   outgoing )  ;  break ;  case state   checking   outgoing: m state = state   options ;  update content fragment ( true )  ;  break ;  case state   options: m state = state   creating ;  initiate account creation (  )  ;  break ;  case state   creating: m state = state   names ;  update content fragment ( true )  ;  if  ( m setup data . get flow mode (  )   =  =   authenticator setup intent helper . flow   mode   force   create )   {  get fragment manager (  )  . execute pending transactions (  )  ;  initiate account finalize (  )  ;   }  break ;  case state   names: initiate account finalize (  )  ;  break ;  case state   finalize: finish (  )  ;  break ;  default :  log utils . wtf (  log utils . tag "" unknown state %d"" m state )  ;  break ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFinal.java,reset state from current fragment,private void   (  )  {   account setup fragment f = get content fragment (  )  ;  m state = f . get state (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFinal.java,set account,@ override public void   (  account account )  {  m setup data . set account ( account )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFinal.java,set defaults for protocol,public void   (  account account )  {  final  email service utils .  email service info info = m setup data . get incoming service info ( this )  ;  if  ( info  =  =  null )  return ;  account . m sync interval = info . default sync interval ;  account . m sync lookback = info . default lookback ;  if  ( info . offer local deletes )   {  account . set delete policy ( info . default local deletes )  ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFinal.java,should divert to manual,private boolean   (  )  {  final  account setup basics fragment f =  (  account setup basics fragment ) get content fragment (  )  ;  return f . is manual setup (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFinal.java,show create account dialog,protected void   (  )  {   create account dialog fragment . new instance (  )  . show ( get fragment manager (  )   create account dialog fragment . tag )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFinal.java,show create account error dialog,@ override public void   (  )  {  new  create account error dialog fragment (  )  . show ( get fragment manager (  )  null )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFinal.java,show duplicate account dialog,private void   ( final  string existing account name )  {  final  duplicate account dialog fragment dialog fragment =  duplicate account dialog fragment . new instance ( existing account name )  ;  dialog fragment . show ( get fragment manager (  )   duplicate account dialog fragment . tag )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFinal.java,update content fragment,"private void   ( boolean add to backstack )  {  final  account setup fragment f ;   string backstack tag = null ;  switch  ( m state )   {  case state   basics: f =  account setup basics fragment . new instance (  )  ;  break ;  case state   type: f =  account setup type fragment . new instance (  )  ;  break ;  case state   ab: f =  account setupab fragment . new instance ( m setup data . get email (  )  m setup data . get am protocol (  )  m setup data . get incoming protocol ( this )  )  ;  break ;  case state   credentials: f =  account setup credentials fragment . new instance ( m setup data . get email (  )  m setup data . get incoming protocol ( this )  m setup data . get client cert ( this )  m password failed false )  ;  backstack tag = credentials   backstack   tag ;  break ;  case state   manual   incoming: f =  account setup incoming fragment . new instance ( false )  ;  break ;  case state   manual   outgoing: f =  account setup outgoing fragment . new instance ( false )  ;  break ;  case state   options: f =  account setup options fragment . new instance (  )  ;  break ;  case state   names: f =  account setup names fragment . new instance (  )  ;  break ;  default : throw new  illegal state exception ( "" incorrect state ""  +  m state )  ;   }  f . set state ( m state )  ;  final  fragment transaction ft = get fragment manager (  )  . begin transaction (  )  ;  ft . set custom animations ( r . anim . fade   in r . anim . fade   out r . anim . fade   in r . anim . fade   out )  ;  ft . replace ( r . id . setup   fragment   container f content   fragment   tag )  ;  if  ( add to backstack )   {  ft . add to back stack ( backstack tag )  ;   }  ft . commit (  )  ;  final  input method manager imm =  (  input method manager ) get system service (  context . input   method   service )  ;  final  view fragment   container = find view by id ( r . id . setup   fragment   container )  ;  imm . hide soft input from window ( fragment   container . get window token (  )  0 )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupIncomingFragment.java, save settings loader,private   (  context context  setup data fragment setup data boolean settings mode )  {  super ( context )  ;  m setup data = setup data ;  m settings mode = settings mode ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupIncomingFragment.java,after text changed,@ override public void   (  editable s )  {  validate fields (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupIncomingFragment.java,collect user input internal,@ override public int   (  )  {  final  account account = m setup data . get account (  )  ;  if  ( m delete policy view . get visibility (  )   =  =   view . visible )   {  account . set delete policy (  (  integer )  (  (  spinner option ) m delete poli
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupIncomingFragment.java,configure editor,"private void   (  )  {  final  account account = m setup data . get account (  )  ;  if  ( account  =  =  null || account . m host auth recv  =  =  null )   {   log utils . e (  log utils . tag ""null account or host auth .  account null: %b host auth null: %b"" account  =  =  null account  =  =  null || account . m host auth recv  =  =  null )  ;  return ;   }  m base scheme = account . m host auth recv . m protocol ;  m server label view . set text ( r . string . account   setup   incoming   server   label )  ;  m server view . set content description ( get resources (  )  . get text ( r . string . account   setup   incoming   server   label )  )  ;  if  (  ! m service info . offer prefix )   {  m imap path prefix section view . set visibility (  view . gone )  ;   }  if  (  ! m service info . offer local deletes )   {  m delete policy label view . set visibility (  view . gone )  ;  m delete policy view . set visibility (  view . gone )  ;  m port view . set ime options (  editor info . ime   action   next )  ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupIncomingFragment.java,get port from security type,private int   ( boolean use ssl )  {  return use ssl  ?  m service info . port ssl : m service info . port ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupIncomingFragment.java,get save settings loader,@ override public  loader <  boolean >    (  )  {  return new  save settings loader ( m app context m setup data m settings mode )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupIncomingFragment.java,get ssl selected,private boolean   (  )  {  final int security type =  (  integer )  (  (  spinner option ) m security type view . get selected item (  )  )  . value ;  return  (  ( security type &  host auth . flag   ssl )   !  =  0 )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupIncomingFragment.java,have settings changed,@ override public boolean   (  )  {  final boolean delete policy changed ;  if  ( m delete policy view  !  =  null && m delete policy view . get visibility (  )   =  =   view . visible )   {  int new delete policy =  (  integer )  (  (  spinner option ) m
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupIncomingFragment.java,load in background,@ override public  boolean   (  )  {  if  ( m settings mode )   {  save settings after edit ( get context (  )  m setup data )  ;   }  else  {  save settings after setup ( get context (  )  m setup data )  ;   }  return true ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupIncomingFragment.java,load settings,private void   (  )  {  if  ( m loaded )  return ;  final  account account = m setup data . get account (  )  ;  final  host auth recv auth = account . get or create host auth recv ( m app context )  ;  m service info = m setup data . get incoming service info ( get activity (  )  )  ;  final  list <  vendor policy loader . o auth provider >  oauth providers =  account settings utils . get allo auth providers ( get activity (  )  )  ;  final boolean offero auth =  ( m service info . offero auth && oauth providers . size (  )   >  0 )  ;  m authentication view . set auth info ( offero auth recv auth )  ;  final  string username = recv auth . m login ;  if  ( username  !  =  null )   {  m username view . set text ( username )  ;   }  if  ( m service info . offer prefix )   {  final  string prefix = recv auth . m domain ;  if  ( prefix  !  =  null && prefix . length (  )   >  0 )   {  m imap path prefix view . set text ( prefix . substring ( 1 )  )  ;   }   }  m loaded delete policy = account . get delete policy (  )  ;   spinner option . set spinner option value ( m delete policy view m loaded delete policy )  ;  int flags = recv auth . m flags ;  if  ( m service info . default ssl )   {  flags| =  host auth . flag   ssl ;   }  int security type flags =  ( flags &  host auth . flag   transportsecurity   mask )  ;   spinner option . set spinner option value ( m security type view security type flags )  ;  final  string hostname = recv auth . m address ;  if  ( hostname  !  =  null )   {  m server view . set text ( hostname )  ;   }  final int port = recv auth . m port ;  if  ( port  !  =   host auth . port   unknown )   {  m port view . set text (  integer . to string ( port )  )  ;   }  else  {  update port from security type (  )  ;   }  if  (  !  text utils . is empty ( recv auth . m client cert alias )  )   {  m client certificate selector . set certificate ( recv auth . m client cert alias )  ;   }  final  parcel parcel =  parcel . obtain (  )  ;  parcel . write parcelable ( recv auth recv auth . describe contents (  )  )  ;  parcel . set data position ( 0 )  ;  m loaded recv auth = parcel . read parcelable (  host auth . class . get class loader (  )  )  ;  parcel . recycle (  )  ;  m loaded = true ;  validate fields (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupIncomingFragment.java,new instance,public static  account setup incoming fragment   ( boolean settings mode )  {  final  account setup incoming fragment f = new  account setup incoming fragment (  )  ;  f . set arguments ( get args ( settings mode )  )  ;  return f ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupIncomingFragment.java,on activity created,@ override public void   (  bundle saved instance state )  {  super . on activity created ( saved instance state )  ;  m client certificate selector . set host callback ( this )  ;  final  context context = get activity (  )  ;  final  setup data fragment
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupIncomingFragment.java,on activity result,@ override public void   ( int request code int result code  intent data )  {  if  ( request code  =  =  certificate   request && result code  =  =   activity . result   ok )   {  final  string cert alias = data . get string extra (  certificate requestor
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupIncomingFragment.java,on certificate requested,@ override public void   (  )  {  final  intent intent = new  intent ( get string ( r . string . intent   exchange   cert   action )  )  ;  intent . set data (  certificate requestor . certificate   request   uri )  ;  intent . put extra (  certificate re
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupIncomingFragment.java,on create,@ override public void   (  bundle saved instance state )  {  super . on create ( saved instance state )  ;  if  ( saved instance state  !  =  null )   {  m cache login credential = saved instance state . get string ( state   key   credential )  ;  m load
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupIncomingFragment.java,on create view,@ override public  view   (  layout inflater inflater  view group container  bundle saved instance state )  {  final  view view ;  if  ( m settings mode )   {  view = inflater . inflate ( r . layout . account   settings   incoming   fragment container fal
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupIncomingFragment.java,on destroy view,@ override public void   (  )  {  if  ( m username view  !  =  null )   {  m username view . remove text changed listener ( m validation text watcher )  ;   }  m username view = null ;  m server label view = null ;  if  ( m server view  !  =  null )   {  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupIncomingFragment.java,on item selected,@ override public void   (  adapter view <  ?  >  arg0  view arg1 int arg2 long arg3 )  {  update port from security type (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupIncomingFragment.java,on request sign in,@ override public void   (  )  {  final  string protocol = m setup data . get account (  )  . get or create host auth recv ( m app context )  . m protocol ;  final  intent intent =  account credentials . get account credentials intent ( get activity (  ) 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupIncomingFragment.java,on resume,@ override public void   (  )  {  super . on resume (  )  ;  validate fields (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupIncomingFragment.java,on save instance state,@ override public void   (  bundle out state )  {  super . on save instance state ( out state )  ;  out state . put string ( state   key   credential m cache login credential )  ;  out state . put boolean ( state   key   loaded m loaded )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupIncomingFragment.java,on use ssl changed,"public void   ( boolean use ssl )  {  if  ( m service info . offer certs )   {  final int mode = use ssl  ?   view . visible :  view . gone ;  m client certificate selector . set visibility ( mode )  ;   string device id = """" ;  try  {  device id =  device . get device id ( m app context )  ;   }  catch  (  io exception e )   {   }   (  (  text view )  ui utilities . get view ( get view (  )  r . id . device   id )  )  . set text ( device id )  ;  m device id section . set visibility ( mode )  ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupIncomingFragment.java,on validate state changed,@ override public void   (  )  {  validate fields (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupIncomingFragment.java,save settings,@ override public void   (  )  {  m loaded delete policy = m setup data . get account (  )  . get delete policy (  )  ;  super . save settings (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupIncomingFragment.java,save settings after edit,public static void   (  context context  setup data fragment setup data )  {  final  account account = setup data . get account (  )  ;  account . update ( context account . to content values (  )  )  ;  final  credential cred = account . m host auth recv . m credential ;  if  ( cred  !  =  null )   {  if  ( cred . is saved (  )  )   {  cred . update ( context cred . to content values (  )  )  ;   }  else  {  cred . save ( context )  ;  account . m host auth recv . m credential key = cred . m id ;   }   }  account . m host auth recv . update ( context account . m host auth recv . to content values (  )  )  ;   account backup restore . backup ( context )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupIncomingFragment.java,save settings after setup,"public static void   (  context context  setup data fragment setup data )  {  final  account account = setup data . get account (  )  ;  final  host auth recv auth = account . get or create host auth recv ( context )  ;  final  host auth send auth = account . get or create host auth send ( context )  ;  final  string host name =  account settings utils . infer server name ( context recv auth . m address null ""smtp"" )  ;  send auth . set login ( recv auth . m login recv auth . m password )  ;  send auth . set connection ( send auth . m protocol host name send auth . m port send auth . m flags )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupIncomingFragment.java,update port from security type,private void   (  )  {  final boolean ssl selected = get ssl selected (  )  ;  final int port = get port from security type ( ssl selected )  ;  m port view . set text (  integer . to string ( port )  )  ;  on use ssl changed ( ssl selected )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupIncomingFragment.java,validate fields,private void   (  )  {  if  (  ! m loaded )  return ;  enable next button (  !  text utils . is empty ( m username view . get text (  )  )  && m authentication view . get auth valid (  )  &&  utility . is server name valid ( m server view ) &&  utility . is port field valid ( m port view )  )  ;  m cache login credential = m username view . get text (  )  . to string (  )  . trim (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFragment.java,get state,public int   (  )  {  return m state ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFragment.java,inflate templated view,protected  view   ( final  layout inflater inflater final  view group container final int content layout final int headline )  {  final  view template = inflater . inflate ( r . layout . account   setup   template container false )  ;   text view headline view =  ui utilities . get view ( template r . id . headline )  ;  if  ( headline  >  0 )   {  headline view . set text ( headline )  ;  headline view . set visibility (  view . visible )  ;   }  else  {  headline view . set visibility (  view . gone )  ;   }  final  view group content container =  (  view group ) template . find view by id ( r . id . setup   fragment   content )  ;  inflater . inflate ( content layout content container true )  ;  m next button =  ui utilities . get view ( template r . id . next )  ;  m next button . set on click listener ( this )  ;  m previous button =  ui utilities . get view ( template r . id . previous )  ;  m previous button . set on click listener ( this )  ;  return template ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFragment.java,is next button enabled,public boolean   (  )  {  return m next button . is enabled (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupNamesFragment.java,get description,public  string   (  )  {  return m description . get text (  )  . to string (  )  . trim (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupNamesFragment.java,get sender name,public  string   (  )  {  return m name . get text (  )  . to string (  )  . trim (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupNamesFragment.java,new instance,public static  account setup names fragment   (  )  {  return new  account setup names fragment (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupNamesFragment.java,on activity created,@ override public void   (  bundle saved instance state )  {  super . on activity created ( saved instance state )  ;  get view (  )  ;  final  setup data fragment setup data =  (  (  setup data fragment .  setup data container ) get activity (  )  )  . g
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupNamesFragment.java,on create,@ override public void   (  bundle saved instance state )  {  super . on create ( saved instance state )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupNamesFragment.java,on create loader,@ override public  loader <  cursor >    ( int id  bundle args )  {  final  string[] projection = new  string[] {  contacts contract .  profile . display   name }  ;  return new  cursor loader ( loader context  contacts contract .  profile . content   uri
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupNamesFragment.java,on create view,@ override public  view   (  layout inflater inflater  view group container  bundle saved instance state )  {  final  view view = inflate templated view ( inflater container r . layout . account   setup   names   fragment r . string . account   setup   na
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupNamesFragment.java,on load finished,@ override public void   (  loader <  cursor >  loader  cursor data )  {  if  ( data  =  =  null ||  !  text utils . is empty ( m name . get text (  )  )  )   {  return ;   }  final  string name ;  if  ( data . move to first (  )  )   {  name = data . get
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupNoteDialogFragment.java,new instance,public static  account setup note dialog fragment   (  string note )  {  final  account setup note dialog fragment f = new  account setup note dialog fragment (  )  ;  final  bundle b = new  bundle ( 1 )  ;  b . put string ( bundle   key   note note )  ;  f . set arguments ( b )  ;  return f ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupNoteDialogFragment.java,on cancel,@ override public void   (  dialog interface dialog )  {  super . on cancel ( dialog )  ;  final  callback a =  (  callback ) get activity (  )  ;  a . on note dialog cancel (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupNoteDialogFragment.java,on click,@ override public void   (  dialog interface dialog int which )  {  dialog . cancel (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupNoteDialogFragment.java,on create dialog,@ override public  dialog   (  bundle saved instance state )  {  final  context context = get activity (  )  ;  final  string note = get arguments (  )  . get string ( bundle   key   note )  ;  set cancelable ( true )  ;  return new  alert dialog .  build
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupOptionsFragment.java,enable lookback spinner,private void   (  account account )  {  m sync window view . set visibility (  view . visible )  ;  m syncwindow label . set visibility (  view . visible )  ;  final  char sequence[] window values = get resources (  )  . get text array ( r . array . account   settings   mail   window   values )  ;  final  char sequence[] window entries = get resources (  )  . get text array ( r . array . account   settings   mail   window   entries )  ;  int max entry = window entries . length ;  final  policy policy = account . m policy ;  if  ( policy  !  =  null )   {  final int max lookback = policy . m max email lookback ;  if  ( max lookback  !  =  0 )   {  max entry = max lookback  +  1 ;   }   }  final  spinner option[] window options = new  spinner option[max entry] ;  int default index =  - 1 ;  for  ( int i = 0 ;  i  <  max entry ;  i +  +  )   {  final int value =  integer . value of ( window values[i] . to string (  )  )  ;  window options[i] = new  spinner option ( value window entries[i] . to string (  )  )  ;  if  ( value  =  =  sync   window   eas   default )   {  default index = i ;   }   }  final  array adapter <  spinner option >  window options adapter = new  array adapter <  >  ( get activity (  )  android . r . layout . simple   spinner   item window options )  ;  window options adapter . set drop down view resource ( android . r . layout . simple   spinner   dropdown   item )  ;  m sync window view . set adapter ( window options adapter )  ;   spinner option . set spinner option value ( m sync window view account . get sync lookback (  )  )  ;  if  ( default index  >  =  0 )   {  m sync window view . set selection ( default index )  ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupOptionsFragment.java,get account sync window value,public  integer   (  )  {  if  ( m sync window view . get visibility (  )   !  =   view . visible )   {  return null ;   }  return  (  integer )  (  (  spinner option ) m sync window view . get selected item (  )  )  . value ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupOptionsFragment.java,get background attachments value,public boolean   (  )  {  return m background attachments view . is checked (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupOptionsFragment.java,get check frequency value,public  integer   (  )  {  return  (  integer )  (  (  spinner option ) m check frequency view . get selected item (  )  )  . value ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupOptionsFragment.java,get notify value,public boolean   (  )  {  return m notify view . is checked (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupOptionsFragment.java,get sync calendar value,public boolean   (  )  {  return m sync calendar view . is checked (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupOptionsFragment.java,get sync contacts value,public boolean   (  )  {  return m sync contacts view . is checked (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupOptionsFragment.java,get sync email value,public boolean   (  )  {  return m sync email view . is checked (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupOptionsFragment.java,new instance,public static  account setup options fragment   (  )  {  return new  account setup options fragment (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupOptionsFragment.java,on activity created,@ override public void   (  bundle saved instance state )  {  super . on activity created ( saved instance state )  ;  final  view view = get view (  )  ;  final  setup data fragment setup data =  (  (  setup data fragment .  setup data container ) get ac
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupOptionsFragment.java,on create view,@ override public  view   (  layout inflater inflater  view group container  bundle saved instance state )  {  final  view view = inflate templated view ( inflater container r . layout . account   setup   options   fragment r . string . account   setup   
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupTypeFragment.java,new instance,public static  account setup type fragment   (  )  {  return new  account setup type fragment (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupOutgoingFragment.java, save settings loader,private   (  context context  setup data fragment setup data boolean settings mode )  {  super ( context )  ;  m setup data = setup data ;  m settings mode = settings mode ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupOutgoingFragment.java,after text changed,@ override public void   (  editable s )  {  validate fields (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupOutgoingFragment.java,collect user input internal,@ override public int   (  )  {  final  account account = m setup data . get account (  )  ;  final  host auth send auth = account . get or create host auth send ( m app context )  ;  if  ( m require login view . is checked (  )  )   {  final  string user
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupOutgoingFragment.java,get port from security type,private int   (  )  {  final int security type =  (  integer )  (  (  spinner option ) m security type view . get selected item (  )  )  . value ;  return  ( security type &  host auth . flag   ssl )   !  =  0  ?  smtp   port   ssl : smtp   port   normal ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupOutgoingFragment.java,get save settings loader,@ override public  loader <  boolean >    (  )  {  return new  save settings loader ( m app context m setup data m settings mode )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupOutgoingFragment.java,load in background,@ override public  boolean   (  )  {  if  ( m settings mode )   {  save settings after edit ( get context (  )  m setup data )  ;   }  else  {  save settings after setup ( get context (  )  m setup data )  ;   }  return true ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupOutgoingFragment.java,load settings,"private void   (  )  {  if  ( m loaded )  return ;  final  host auth send auth = m setup data . get account (  )  . get or create host auth send ( m app context )  ;  if  (  ! m setup data . is outgoing cred loaded (  )  )   {  send auth . set user name ( m setup data . get email (  )  )  ;   account setup credentials fragment . populate host auth with results ( m app context send auth m setup data . get credential results (  )  )  ;  final  string[] email parts = m setup data . get email (  )  . split ( ""@"" )  ;  final  string domain = email parts[1] ;  send auth . set connection ( send auth . m protocol domain  host auth . port   unknown  host auth . flag   none )  ;  m setup data . set outgoing cred loaded ( true )  ;   }  if  (  ( send auth . m flags &  host auth . flag   authenticate )   !  =  0 )   {  final  string username = send auth . m login ;  if  ( username  !  =  null )   {  m username view . set text ( username )  ;  m require login view . set checked ( true )  ;   }  final  list <  vendor policy loader . o auth provider >  oauth providers =  account settings utils . get allo auth providers ( get activity (  )  )  ;  m authentication view . set auth info ( oauth providers . size (  )   >  0 send auth )  ;  if  ( m authentication label  !  =  null )   {  m authentication label . set text ( r . string . authentication   label )  ;   }   }  final int flags = send auth . m flags &  host auth . flag   transportsecurity   mask ;   spinner option . set spinner option value ( m security type view flags )  ;  final  string hostname = send auth . m address ;  if  ( hostname  !  =  null )   {  m server view . set text ( hostname )  ;   }  final int port = send auth . m port ;  if  ( port  !  =   - 1 )   {  m port view . set text (  integer . to string ( port )  )  ;   }  else  {  update port from security type (  )  ;   }  final  parcel parcel =  parcel . obtain (  )  ;  parcel . write parcelable ( send auth send auth . describe contents (  )  )  ;  parcel . set data position ( 0 )  ;  m loaded send auth = parcel . read parcelable (  host auth . class . get class loader (  )  )  ;  parcel . recycle (  )  ;  m loaded = true ;  validate fields (  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupOutgoingFragment.java,new instance,public static  account setup outgoing fragment   ( boolean settings mode )  {  final  account setup outgoing fragment f = new  account setup outgoing fragment (  )  ;  f . set arguments ( get args ( settings mode )  )  ;  return f ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupOutgoingFragment.java,on activity created,@ override public void   (  bundle saved instance state )  {  super . on activity created ( saved instance state )  ;  final  context context = get activity (  )  ;  final  spinner option security types[] =  { new  spinner option (  host auth . flag   non
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupOutgoingFragment.java,on activity result,@ override public void   ( final int request code final int result code final  intent data )  {  if  ( request code  =  =  sign   in   request && result code  =  =   activity . result   ok )   {  final  account account = m setup data . get account (  )  ;
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupOutgoingFragment.java,on checked changed,@ override public void   (  compound button button view boolean is checked )  {  final  host auth send auth = m setup data . get account (  )  . get or create host auth send ( m app context )  ;  m authentication view . set auth info ( true send auth )  ;
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupOutgoingFragment.java,on create,@ override public void   (  bundle saved instance state )  {  super . on create ( saved instance state )  ;  if  ( saved instance state  !  =  null )   {  m loaded = saved instance state . get boolean ( state   key   loaded false )  ;   }  m base scheme =
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupOutgoingFragment.java,on create view,@ override public  view   (  layout inflater inflater  view group container  bundle saved instance state )  {  final  view view ;  if  ( m settings mode )   {  view = inflater . inflate ( r . layout . account   settings   outgoing   fragment container fal
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupOutgoingFragment.java,on item selected,@ override public void   (  adapter view <  ?  >  arg0  view arg1 int arg2 long arg3 )  {  update port from security type (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupOutgoingFragment.java,on request sign in,@ override public void   (  )  {  final  string protocol = m setup data . get account (  )  . get or create host auth recv ( m app context )  . m protocol ;  final  intent intent =  account credentials . get account credentials intent ( get activity (  ) 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupOutgoingFragment.java,on resume,@ override public void   (  )  {  super . on resume (  )  ;  validate fields (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupOutgoingFragment.java,on save instance state,@ override public void   (  bundle out state )  {  super . on save instance state ( out state )  ;  out state . put boolean ( state   key   loaded m loaded )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupOutgoingFragment.java,on validate state changed,@ override public void   (  )  {  validate fields (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupOutgoingFragment.java,run,@ override public void   (  )  {  m security type view . set on item selected listener ( new  adapter view .  on item selected listener (  )  {  @ override public void on item selected (   adapter view <  ?  >  arg0   view arg1  int arg2  long arg3 )  {  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupOutgoingFragment.java,save settings after edit,public static void   (  context context  setup data fragment setup data )  {  final  account account = setup data . get account (  )  ;  final  credential cred = account . m host auth send . m credential ;  if  ( cred  !  =  null )   {  if  ( cred . is saved (  )  )   {  cred . update ( context cred . to content values (  )  )  ;   }  else  {  cred . save ( context )  ;  account . m host auth send . m credential key = cred . m id ;   }   }  account . m host auth send . update ( context account . m host auth send . to content values (  )  )  ;   account backup restore . backup ( context )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupOutgoingFragment.java,update port from security type,private void   (  )  {  final int port = get port from security type (  )  ;  m port view . set text (  integer . to string ( port )  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupOutgoingFragment.java,validate fields,private void   (  )  {  if  (  ! m loaded )  return ;  boolean enabled =  utility . is server name valid ( m server view )  &&  utility . is port field valid ( m port view )  ;  if  ( enabled && m require login view . is checked (  )  )   {  enabled =  !  text utils . is empty ( m username view . get text (  )  )  && m authentication view . get auth valid (  )  ;   }  enable next button ( enabled )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\DebugFragment.java,clear migration state,private void   (  )  {   mail prefs prefs =  mail prefs . get ( get activity (  )  )  ;  prefs . set migration state (  mail prefs .  preference keys . migration   state   none )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\DebugFragment.java,clear web view cache,"private void   (  )  {   web view webview = new  web view ( get activity (  )  )  ;  try  {  webview . clear cache ( true )  ;   log utils . w (  logging . log   tag "" cleard  web view cache . "" )  ;   }  finally  {  webview . destroy (  )  ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\DebugFragment.java,on checked changed,@ override public void   (  compound button button view boolean is checked )  {  switch  ( button view . get id (  )  )   {  case r . id . debug   logging: m preferences . set enable debug logging ( is checked )  ;   debug utils . debug = is checked ;  br
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\DebugFragment.java,on click,@ override public void   (  view v )  {  switch  ( v . get id (  )  )   {  case r . id . clear   webview   cache: clear web view cache (  )  ;  break ;  case r . id . clear   migration   state: clear migration state (  )  ;  break ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\DebugFragment.java,on create view,"@ override public  view   (  layout inflater inflater  view group container  bundle saved instance state )  {  if  (  logging . debug   lifecycle &&  debug utils . debug )   {   log utils . d (  logging . log   tag "" debug fragment on create view"" )  ;   "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\DuplicateAccountDialogFragment.java,new instance,public static  duplicate account dialog fragment   (  string note )  {   duplicate account dialog fragment f = new  duplicate account dialog fragment (  )  ;   bundle b = new  bundle (  )  ;  b . put string ( bundle   key   account   name note )  ;  f . set arguments ( b )  ;  return f ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\DuplicateAccountDialogFragment.java,on create dialog,@ override public  dialog   (  bundle saved instance state )  {   context context = get activity (  )  ;   string account name = get arguments (  )  . get string ( bundle   key   account   name )  ;  set cancelable ( true )  ;  return new  alert dialog . 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\DuplicateAccountDialogFragment.java,on dismiss,@ override public void   (  dialog interface dialog )  {  super . on dismiss ( dialog )  ;  final  callback callback =  (  callback ) get activity (  )  ;  if  ( callback  !  =  null )   {  callback . on duplicate account dialog dismiss (  )  ;   }  else 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\EditQuickResponseDialog.java,after text changed,@ override public void   (  editable s )  {  m dialog . get button (  alert dialog . button   positive )  . set enabled ( s . length (  )   >  0 )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\EditQuickResponseDialog.java,new instance,public static  edit quick response dialog   (  string text  uri base uri boolean create )  {  final  edit quick response dialog dialog = new  edit quick response dialog (  )  ;   bundle args = new  bundle ( 4 )  ;  args . put string ( quick   response   string text )  ;  args . put parcelable ( quick   response   content   uri base uri )  ;  args . put boolean ( quick   response   create create )  ;  dialog . set arguments ( args )  ;  return dialog ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\EditQuickResponseDialog.java,on click,@ override public void   (  dialog interface dialog int which )  {  get activity (  )  . get content resolver (  )  . delete ( uri null null )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\EditQuickResponseDialog.java,on create dialog,@ override public  dialog   (  bundle saved instance state )  {  final  uri uri = get arguments (  )  . get parcelable ( quick   response   content   uri )  ;  final boolean create = get arguments (  )  . get boolean ( quick   response   create )  ;   str
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\EditQuickResponseDialog.java,on resume,@ override public void   (  )  {  super . on resume (  )  ;  if  ( m quick response edit text . length (  )   =  =  0 )   {  m dialog . get button (  alert dialog . button   positive )  . set enabled ( false )  ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\EditQuickResponseDialog.java,on save instance state,@ override public void   (  bundle out state )  {  super . on save instance state ( out state )  ;  out state . put string ( quick   response   string m quick response edit text . get text (  )  . to string (  )  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AuthenticationView.java, authentication view,public   (  context context  attribute set attrs int defstyle )  {  super ( context attrs defstyle )  ;   layout inflater . from ( context )  . inflate ( r . layout . authentication   view this true )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AuthenticationView.java,after text changed,@ override public void   (  editable s )  {  validate fields (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AuthenticationView.java,get auth valid,public boolean   (  )  {  if  ( m offero auth & m useo auth )   {  return mo auth provider  !  =  null ;   }  else  {  return  !  text utils . is empty ( m password edit . get text (  )  )  ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AuthenticationView.java,geto auth provider,public  string   (  )  {  return mo auth provider ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AuthenticationView.java,get password,public  string   (  )  {  return m password edit . get text (  )  . to string (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AuthenticationView.java,on click,@ override public void   (  view view )  {  if  ( view  =  =  m clear password view )   {  m password edit . set text ( null )  ;  update visibility (  )  ;  validate fields (  )  ;   }  else if  ( view  =  =  m clearo auth view )   {  m useo auth = false
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AuthenticationView.java,on finish inflate,@ override public void   (  )  {  super . on finish inflate (  )  ;  m password wrapper =  ui utilities . get view ( this r . id . password   wrapper )  ;  mo auth wrapper =  ui utilities . get view ( this r . id . oauth   wrapper )  ;  m password edit = 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\GeneralPreferences.java,on create,@ override public void   (  bundle saved instance state )  {  super . on create ( saved instance state )  ;  final  preference screen ps = get preference screen (  )  ;  final  preference removal action = find preference (  preference keys . removal   act
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\GeneralPreferences.java,supports archive,@ override protected boolean   (  )  {  return false ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\CheckSettingsErrorDialogFragment.java,get error string,"public static  string   (  context context  messaging exception ex )  {  final int id ;   string message = ex . get message (  )  ;  if  ( message  !  =  null )   {  message = message . trim (  )  ;   }  switch  ( ex . get exception type (  )  )   {  case  messaging exception . certificate   validation   error: id =  text utils . is empty ( message )   ?  r . string . account   setup   failed   dlg   certificate   message : r . string . account   setup   failed   dlg   certificate   message   fmt ;  break ;  case  messaging exception . authentication   failed: id = r . string . account   setup   failed   dlg   auth   message ;  break ;  case  messaging exception . autodiscover   authentication   failed: id = r . string . account   setup   autodiscover   dlg   authfail   message ;  break ;  case  messaging exception . authentication   failed   or   server   error: id = r . string . account   setup   failed   check   credentials   message ;  break ;  case  messaging exception . ioerror: id = r . string . account   setup   failed   ioerror ;  break ;  case  messaging exception . tls   required: id = r . string . account   setup   failed   tls   required ;  break ;  case  messaging exception . auth   required: id = r . string . account   setup   failed   auth   required ;  break ;  case  messaging exception . security   policies   unsupported: id = r . string . account   setup   failed   security   policies   unsupported ;   string[] unsupported policies =  (  string[] ) ex . get exception data (  )  ;  if  ( unsupported policies  =  =  null )   {   log utils . w (  log utils . tag "" no data for unsupported policies ? "" )  ;  break ;   }  final  string builder sb = new  string builder (  )  ;  boolean first = true ;  for  (  string policy name : unsupported policies )   {  if  ( first )   {  first = false ;   }  else  {  sb . append ( ""  "" )  ;   }  sb . append ( policy name )  ;   }  message = sb . to string (  )  ;  break ;  case  messaging exception . access   denied: id = r . string . account   setup   failed   access   denied ;  break ;  case  messaging exception . protocol   version   unsupported: id = r . string . account   setup   failed   protocol   unsupported ;  break ;  case  messaging exception . general   security: id = r . string . account   setup   failed   security ;  break ;  case  messaging exception . client   certificate   required: id = r . string . account   setup   failed   certificate   required ;  break ;  case  messaging exception . client   certificate   error: id = r . string . account   setup   failed   certificate   inaccessible ;  break ;  default : id =  text utils . is empty ( message )   ?  r . string . account   setup   failed   dlg   server   message : r . string . account   setup   failed   dlg   server   message   fmt ;  break ;   }  return  text utils . is empty ( message )   ?  context . get string ( id )  : context . get string ( id message )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\CheckSettingsErrorDialogFragment.java,get reason from exception,public static int   (  messaging exception ex )  {  final int exception code = ex . get exception type (  )  ;  switch  ( exception code )   {  case  messaging exception . autodiscover   authentication   failed: case  messaging exception . authentication   failed: return reason   authentication   failed ;  case  messaging exception . client   certificate   required: return reason   certificate   required ;   }  return reason   other ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\CheckSettingsErrorDialogFragment.java,new instance,public static  check settings error dialog fragment   ( int reason  string message )  {  final  check settings error dialog fragment fragment = new  check settings error dialog fragment (  )  ;  final  bundle arguments = new  bundle ( 2 )  ;  arguments . put string ( args   message message )  ;  arguments . put int ( args   reason reason )  ;  fragment . set arguments ( arguments )  ;  return fragment ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\CheckSettingsErrorDialogFragment.java,on cancel,@ override public void   (  dialog interface dialog )  {  super . on cancel ( dialog )  ;  final  callback callback =  (  callback ) get activity (  )  ;  callback . on check settings error dialog edit settings (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\EmailPreferenceActivity.java,enable debug menu,private void   (  )  {  m show debug menu = true ;  invalidate headers (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\EmailPreferenceActivity.java,get intent,@ override public  intent   (  )  {  final  intent intent = super . get intent (  )  ;  final long account id =  intent utilities . get account id from intent ( intent )  ;  if  ( account id  <  0 )   {  return intent ;   }   intent mod intent = new  inte
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\EmailPreferenceActivity.java,is valid fragment,@ override public boolean   (  string fragment name )  {  return true ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\EmailPreferenceActivity.java,on add new account,private void   (  )  {  final  intent setup intent =  authenticator setup intent helper . action new account intent ( this )  ;  start activity ( setup intent )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\EmailPreferenceActivity.java,on attach fragment,@ override public void   (  fragment f )  {  super . on attach fragment ( f )  ;  invalidate options menu (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\EmailPreferenceActivity.java,on build extra headers,@ override public void   (  list <  header >  target )  {  super . on build extra headers ( target )  ;  load headers from resource ( r . xml . email   extra   preference   headers target )  ;  if  ( debug   menu   allowed )   {  if  ( m show debug menu )
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\EmailPreferenceActivity.java,on create,@ override public void   (  bundle saved instance state )  {  super . on create ( saved instance state )  ;  final  intent i = get intent (  )  ;  if  ( saved instance state  =  =  null )   {  if  ( intent   account   manager   entry  =  =  null )   {  in
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\EmailPreferenceActivity.java,on create options menu,@ override public boolean   (  menu menu )  {  super . on create options menu ( menu )  ;  get menu inflater (  )  . inflate ( r . menu . settings   menu menu )  ;  m feedback menu item = menu . find item ( r . id . feedback   menu   item )  ;  return tru
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\EmailPreferenceActivity.java,on header click,@ override public void   ( @ non null  header header int position )  {  if  ( position  =  =  0 )   {  m num general header clicked +  +  ;  if  ( m num general header clicked  =  =  10 )   {  enable debug menu (  )  ;   }   }  else  {  m num general head
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\EmailPreferenceActivity.java,on key down,@ override public boolean   ( int key code @ non null  key event event )  {  if  ( event . get key code (  )   =  =  secret   key   codes[m secret key code index] )   {  m secret key code index +  +  ;  if  ( m secret key code index  =  =  secret   key   
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\EmailPreferenceActivity.java,on options item selected,@ override public boolean   (  menu item item )  {  switch  ( item . get item id (  )  )   {  case android . r . id . home: on back pressed (  )  ;  break ;  case r . id . feedback   menu   item:  utils . send feedback ( this m feedback uri false )  ;  br
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\EmailPreferenceActivity.java,on prepare options menu,@ override public boolean   (  menu menu )  {  super . on prepare options menu ( menu )  ;  if  ( m feedback menu item  !  =  null )   {  m feedback menu item . set visible (  !  uri . empty . equals ( m feedback uri )  )  ;   }  return true ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\CheckSettingsProgressDialogFragment.java,new instance,public static  check settings progress dialog fragment   ( int check mode )  {  final  check settings progress dialog fragment f = new  check settings progress dialog fragment (  )  ;  final  bundle b = new  bundle ( 1 )  ;  b . put int ( args   mode   int check mode )  ;  f . set arguments ( b )  ;  return f ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\CheckSettingsProgressDialogFragment.java,on cancel,@ override public void   (  dialog interface dialog )  {  super . on cancel ( dialog )  ;  final  callback callback =  (  callback ) get activity (  )  ;  if  ( callback  !  =  null )   {  callback . on check settings progress dialog cancel (  )  ;   }  e
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\HeadlessAccountSettingsLoader.java, load account incoming settings async task,private   (  context context boolean incoming )  {  m context = context ;  m incoming = incoming ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\HeadlessAccountSettingsLoader.java,do in background,protected  account   (  long .  .  .  params )  {  return  account . restore account with id ( m context params[0] )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\HeadlessAccountSettingsLoader.java,get outgoing settings uri,"public static  uri   ( long account id )  {  final  uri .  builder base uri =  uri . parse ( ""auth: /  / ""  +   email content . email   package   name  +  "" . account   settings / outgoing / "" )  . build upon (  )  ;   intent utilities . set account id ( base uri account id )  ;  return base uri . build (  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\HeadlessAccountSettingsLoader.java,on create,@ override public void   (  bundle saved instance state )  {  super . on create ( saved instance state )  ;  final  intent i = get intent (  )  ;  final long accountid =  intent utilities . get account id from intent ( i )  ;  if  ( saved instance state  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\HeadlessAccountSettingsLoader.java,on post execute,protected void   (  account result )  {  final  intent intent ;  if  ( m incoming )   {  intent =  account server settings activity . get intent for incoming ( m context result )  ;   }  else  {  intent =  account server settings activity . get intent for outgoing ( m context result )  ;   }  intent . set flags (  intent . flag   activity   new   task )  ;  m context . start activity ( intent )  ;  finish (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\OAuthAuthenticationActivity.java,o auth token loader,public   (  context context  string provider id  string code )  {  super ( context )  ;  m provider id = provider id ;  m code = code ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\OAuthAuthenticationActivity.java,load in background,@ override public  authentication result   (  )  {  try  {  final o auth authenticator authenticator = new o auth authenticator (  )  ;  final  authentication result result = authenticator . request access ( get context (  )  m provider id m code )  ;   l
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\OAuthAuthenticationActivity.java,on create,@ override public void   (  bundle bundle )  {  super . on create ( bundle )  ;   cookie sync manager . create instance ( this )  ;   cookie manager cm =  cookie manager . get instance (  )  ;  cm . remove all cookie (  )  ;  m wv = new  web view ( this )
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\OAuthAuthenticationActivity.java,on create loader,@ override public  loader <  authentication result >    ( int id  bundle data )  {  if  ( id  =  =  loader   id   oauth   token )   {  final  string provider id = data . get string ( extra   provider   id )  ;  final  string code = data . get string ( ext
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\OAuthAuthenticationActivity.java,on load finished,@ override public void   (  loader <  authentication result >  loader  authentication result data )  {  if  ( data  =  =  null )   {  set result ( result   oauth   failure null )  ;   toast . make text ( this r . string . oauth   error   description  toas
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\OAuthAuthenticationActivity.java,on save instance state,@ override protected void   (  bundle out state )  {  super . on save instance state ( out state )  ;  out state . put string ( extra   authentication   code m authentication code )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\OAuthAuthenticationActivity.java,should override url loading,@ override public boolean   (  web view wv  string url )  {  final  string deparameterized url ;  int i = url . last index of ( ' ? ' )  ;  if  ( i  =  =   - 1 )   {  deparameterized url = url ;   }  else  {  deparameterized url = url . substring ( 0 i ) 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\MailboxSettings.java, mailbox loader,private   (  context context long mailbox id )  {  super ( context )  ;  m mailbox id = mailbox id ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\MailboxSettings.java,do in background,@ override protected  void   (  void .  .  .  params )  {  final  content values cv = new  content values ( 2 )  ;  final  uri uri ;  if  ( sync interval changed )   {  cv . put (  mailbox columns . sync   interval sync interval )  ;   }  if  ( sync lookb
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\MailboxSettings.java,enable preferences,private void   ( boolean enabled )  {  m sync enabled pref . set enabled ( enabled )  ;  m sync lookback pref . set enabled ( enabled )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\MailboxSettings.java,get arguments,private static  bundle   ( long mailbox id )  {  final  bundle b = new  bundle ( 1 )  ;  b . put long ( extra   mailbox   id mailbox id )  ;  return b ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\MailboxSettings.java,get intent,public static  intent   (  context context  uri folders uri  folder inbox )  {  final  intent i = new  intent ( context  mailbox settings . class )  ;  i . put extra ( extra   folders   uri folders uri )  ;  i . put extra ( extra   inbox   id inbox . id )  ;  return i ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\MailboxSettings.java,is valid fragment,@ override protected boolean   (  string fragment name )  {  return true ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\MailboxSettings.java,load in background,@ override public  map <  string  object >    (  )  {  final  map <  string  object >  result = new  hash map <  >  (  )  ;  final  mailbox mailbox =  mailbox . restore mailbox with id ( get context (  )  m mailbox id )  ;  result . put ( result   key   m
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\MailboxSettings.java,on activity created,@ override public void   (  bundle saved instance state )  {  super . on activity created ( saved instance state )  ;  final long mailbox id = get arguments (  )  . get long ( extra   mailbox   id  mailbox . no   mailbox )  ;  if  ( mailbox id  =  =   mai
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\MailboxSettings.java,on build headers,@ override public void   (  list <  header >  target )  {  if  ( m folders . is empty (  )  )   {  final  header dummy = new  header (  )  ;  dummy . title res = r . string . mailbox   name   display   inbox ;  dummy . fragment =  mailbox settings fragmen
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\MailboxSettings.java,on create,@ override protected void   (  bundle saved instance state )  {  m inbox id = get intent (  )  . get int extra ( extra   inbox   id  - 1 )  ;  m folders uri = get intent (  )  . get parcelable extra ( extra   folders   uri )  ;  if  ( m folders uri  !  = 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\MailboxSettings.java,on create loader,@ override public  loader <  map <  string  object >  >    ( int id  bundle args )  {  final long mailbox id = args . get long ( extra   mailbox   id )  ;  return new  mailbox loader ( get activity (  )  mailbox id )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\MailboxSettings.java,on data loaded,private void   (  )  {   preconditions . check not null ( m mailbox )  ;  final  action bar action bar = get activity (  )  . get action bar (  )  ;  final  string mailbox name = m mailbox . m display name ;  if  ( action bar  !  =  null )   {  action bar . set title ( mailbox name )  ;  action bar . set subtitle ( get string ( r . string . mailbox   settings   activity   title )  )  ;   }  else  {  get activity (  )  . set title ( get string ( r . string . mailbox   settings   activity   title   with   mailbox mailbox name )  )  ;   }   mailbox settings . setup lookback preference options ( get activity (  )  m sync lookback pref m max lookback true )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\MailboxSettings.java,on destroy,@ override public void   (  )  {  super . on destroy (  )  ;  if  (  ! get activity (  )  . is changing configurations (  )  )   {  save to database (  )  ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\MailboxSettings.java,on load finished,@ override public void   (  loader <  map <  string  object >  >  loader  map <  string  object >  data )  {  final  mailbox mailbox =  (  mailbox )  ( data  =  =  null  ?  null : data . get (  mailbox loader . result   key   mailbox )  )  ;  if  ( mailbo
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\MailboxSettings.java,on options item selected,@ override public boolean   (  menu item item )  {  if  ( item . get item id (  )   =  =  android . r . id . home )   {  on back pressed (  )  ;  return true ;   }  return super . on options item selected ( item )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\MailboxSettings.java,on preference change,@ override public boolean   (  preference preference  object new value )  {  m sync lookback pref . set value (  (  string ) new value )  ;  m sync lookback pref . set summary ( m sync lookback pref . get entry (  )  )  ;  return false ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\MailboxSettings.java,on save instance state,@ override public void   ( @ non null  bundle out state )  {  super . on save instance state ( out state )  ;  out state . put parcelable ( bundle   mailbox m mailbox )  ;  out state . put int ( bundle   max   lookback m max lookback )  ;  out state . put
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\MailboxSettings.java,save to database,"private void   (  )  {  if  ( m mailbox  =  =  null )   {  return ;   }  final int sync interval = m sync enabled pref . is checked (  )   ?  1 : 0 ;  final int sync lookback =  integer . value of ( m sync lookback pref . get value (  )  )  ;  final boolean sync interval changed = sync interval  !  =  m mailbox . m sync interval ;  final boolean sync lookback changed = sync lookback  !  =  m mailbox . m sync lookback ;  if  (  ! sync interval changed &&  ! sync lookback changed )   {  return ;   }   log utils . i (  logging . log   tag "" saving mailbox settings .  .  . "" )  ;  enable preferences ( false )  ;  final long id = m mailbox . m id ;  final  context context = get activity (  )  . get application context (  )  ;  new  email async task <  void  void  void >  ( null )  {  @ override protected  void do in background (   void .  .  .  params )  {  final  content values cv = new  content values ( 2 )  ;  final  uri uri ;  if  ( sync interval changed )   {  cv . put (  mailbox columns . sync   interval sync interval )  ;   }  if  ( sync lookback changed )   {  cv . put (  mailbox columns . sync   lookback sync lookback )  ;   }  uri =  content uris . with appended id (  mailbox . content   uri id )  ;  context . get content resolver (  )  . update ( uri cv null null )  ;   log utils . i (  logging . log   tag "" saved: ""  +  uri )  ;  return null ;   }   }   . execute serial (  (  void[] ) null )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\MailboxSettings.java,setup lookback preference options,public static void   ( final  context context final  list preference pref final int max lookback final boolean show with default )  {  final  resources resources = context . get resources (  )  ;   char sequence[] entries ;   char sequence[] values ;  final int offset ;  if  ( show with default )   {  entries = resources . get text array ( r . array . account   settings   mail   window   entries   with   default )  ;  values = resources . get text array ( r . array . account   settings   mail   window   values   with   default )  ;  offset = 1 ;   }  else  {  entries = resources . get text array ( r . array . account   settings   mail   window   entries )  ;  values = resources . get text array ( r . array . account   settings   mail   window   values )  ;  offset = 0 ;   }  if  ( max lookback  >  0 )   {  final int size = max lookback  +  offset ;  entries =  arrays . copy of ( entries size )  ;  values =  arrays . copy of ( values size )  ;   }  pref . set entries ( entries )  ;  pref . set entry values ( values )  ;  pref . set summary ( pref . get entry (  )  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\PolicyListPreference.java, policy list preference,public   (  context ctx  attribute set attrs )  {  super ( ctx attrs )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\PolicyListPreference.java,on bind view,@ override protected void   (  view view )  {  super . on bind view ( view )  ;   (  (  text view ) view . find view by id ( android . r . id . summary )  )  . set max lines ( max   policies )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\SecurityRequiredDialogFragment.java,new instance,public static  security required dialog fragment   (  string host name )  {  final  security required dialog fragment fragment = new  security required dialog fragment (  )  ;  final  bundle arguments = new  bundle ( 1 )  ;  arguments . put string ( args   host   name host name )  ;  fragment . set arguments ( arguments )  ;  return fragment ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\SecurityRequiredDialogFragment.java,on cancel,@ override public void   (  dialog interface dialog )  {  super . on cancel ( dialog )  ;  final  callback callback =  (  callback ) get activity (  )  ;  if  ( callback  !  =  null )   {  callback . on security required dialog result ( false )  ;   }   }
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\SecurityRequiredDialogFragment.java,on click,@ override public void   (  dialog interface dialog int which )  {  dialog . cancel (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\SecurityRequiredDialogFragment.java,on create dialog,@ override public  dialog   (  bundle saved instance state )  {  final  context context = get activity (  )  ;  final  bundle arguments = get arguments (  )  ;  final  string host name = arguments . get string ( args   host   name )  ;  set cancelable ( t
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\SpinnerOption.java, spinner option,public   (  object value  string label )  {  this . value = value ;  this . label = label ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\SpinnerOption.java,set spinner option value,public static void   (  spinner spinner  object value )  {  for  ( int i = 0  count = spinner . get count (  )  ;  i  <  count ;  i +  +  )   {   spinner option so =  (  spinner option ) spinner . get item at position ( i )  ;  if  ( so . value . equals ( value )  )   {  spinner . set selection ( i true )  ;  return ;   }   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\SpinnerOption.java,to string,@ override public  string   (  )  {  return label ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\SetupDataFragment.java, setup data fragment,public   (  parcel in )  {  final  class loader loader = get class (  )  . get class loader (  )  ;  m flow mode = in . read int (  )  ;  set account (  (  account ) in . read parcelable ( loader )  )  ;  m email = in . read string (  )  ;  m credential results = in . read parcelable ( loader )  ;  final boolean[] creds loaded = in . create boolean array (  )  ;  m incoming cred loaded = creds loaded[0] ;  m outgoing cred loaded = creds loaded[1] ;  m policy = in . read parcelable ( loader )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\SetupDataFragment.java,create from parcel,@ override public  setup data fragment   (  parcel in )  {  return new  setup data fragment ( in )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\SetupDataFragment.java,describe contents,@ override public int   (  )  {  return 0 ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\SetupDataFragment.java,get account,public  account   (  )  {  return m account ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\SetupDataFragment.java,get am protocol,public  string   (  )  {  return m am protocol ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\SetupDataFragment.java,get client cert,public  string   (  context context )  {  final  host auth recv auth = m account . get or create host auth recv ( context )  ;  return recv auth . m client cert alias ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\SetupDataFragment.java,get credential results,public  bundle   (  )  {  return m credential results ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\SetupDataFragment.java,get email,public  string   (  )  {  return m email ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\SetupDataFragment.java,get flow mode,public int   (  )  {  return m flow mode ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\SetupDataFragment.java,get incoming protocol,public  string   (  context context )  {  if  ( m incoming protocol  !  =  null )   {  return m incoming protocol ;   }  final  host auth recv auth = m account . get or create host auth recv ( context )  ;  return recv auth . m protocol ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\SetupDataFragment.java,get incoming service info,public  email service utils .  email service info   (  context context )  {  if  ( m incoming service info  =  =  null )   {  m incoming service info =  email service utils . get service info ( context get incoming protocol ( context )  )  ;   }  return m incoming service info ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\SetupDataFragment.java,get policy,public synchronized  policy   (  )  {  return m policy ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\UiUtilities.java,check view,"private static  view   (  view v )  {  if  ( v  =  =  null )   {  throw new  illegal argument exception ( "" view doesn't exist"" )  ;   }  return v ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\UiUtilities.java,get view,"@ suppress warnings ( ""unchecked"" )  public static  < t extends  view > t   (  view parent int view id )  {  return  ( t ) check view ( parent . find view by id ( view id )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\UiUtilities.java,set visibility safe,public static void   (  view parent int view id int visibility )  {  set visibility safe ( parent . find view by id ( view id )  visibility )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\data\ClosingMatrixCursor.java, closing matrix cursor,public   (  string[] column names  cursor inner cursor )  {  super ( column names )  ;  m inner cursor = inner cursor ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\data\ClosingMatrixCursor.java,close,@ override public void   (  )  {  if  ( m inner cursor  !  =  null )   {  m inner cursor . close (  )  ;   }  super . close (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\EmailAddressValidator.java,fix text,"@ override public  char sequence   (  char sequence invalid text )  {  return """" ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\EmailAddressValidator.java,is valid,@ override public boolean   (  char sequence text )  {  return  address . parse ( text . to string (  )  )  . length  =  =  1 ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\mail\internet\EmailHtmlUtil.java,escape character to display,"public static  string   (  string text )  {   pattern pattern = plain   text   to   escape ;   matcher match = pattern . matcher ( text )  ;  if  ( match . find (  )  )   {   string builder out = new  string builder (  )  ;  int end = 0 ;  do  {  int start = match . start (  )  ;  out . append ( text . substring ( end start )  )  ;  end = match . end (  )  ;  int c = text . code point at ( start )  ;  if  ( c  =  =  ' ' )   {  for  ( int i = 1  n = end  -  start ;  i  <  n ;   +  + i )   {  out . append ( ""&nbsp ; "" )  ;   }  out . append ( ' ' )  ;   }  else if  ( c  =  =  '\r' || c  =  =  '\n' )   {  out . append ( "" < br > "" )  ;   }  else if  ( c  =  =  ' < ' )   {  out . append ( ""&lt ; "" )  ;   }  else if  ( c  =  =  ' > ' )   {  out . append ( ""&gt ; "" )  ;   }  else if  ( c  =  =  '&' )   {  out . append ( ""&amp ; "" )  ;   }   }  while  ( match . find (  )  )  ;  out . append ( text . substring ( end )  )  ;  text = out . to string (  )  ;   }  return text ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\mail\transport\StatusOutputStream.java, status output stream,public   (  output stream out )  {  super ( out )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\mail\transport\StatusOutputStream.java,write,"@ override public void   ( int one byte )  throws io exception  {  super . write ( one byte )  ;  m count +  +  ;  if  (  logging . logd )   {  if  ( m count % 1024  =  =  0 )   {   log utils . v (  logging . log   tag ""# ""  +  m count )  ;   }   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\EmailNotificationController.java, account content observer,public   ( final  handler handler final  context context )  {  super ( handler )  ;  m context = context ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\EmailNotificationController.java, email notification controller,protected   (  context context  clock clock )  {  m context = context . get application context (  )  ;   email content . init ( context )  ;  m notification manager =  (  notification manager ) context . get system service (  context . notification   service )  ;  m clock = clock ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\EmailNotificationController.java, message content observer,public   ( final  handler handler final  context context final long account id )  {  super ( handler )  ;  m context = context ;  m account id = account id ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\EmailNotificationController.java, notification thread,"public   (  )  {  new  thread ( null this "" email notification"" )  . start (  )  ;  synchronized  ( m lock )   {  while  ( m looper  =  =  null )   {  try  {  m lock . wait (  )  ;   }  catch  (   interrupted exception ex )   {   }   }   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\EmailNotificationController.java,cancel login failed notification,@ override public void   ( long account id )  {  m notification manager . cancel ( get login failed notification id ( account id )  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\EmailNotificationController.java,cancel notifications,@ override public void   ( final  context context final  account account )  {  final  email service utils .  email service info service info =  email service utils . get service info for account ( context account . m id )  ;  if  ( service info  =  =  nul
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\EmailNotificationController.java,cancel password expiration notifications,@ override public void   (  )  {  m notification manager . cancel ( notification   id   password   expiring )  ;  m notification manager . cancel ( notification   id   password   expired )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\EmailNotificationController.java,cancel security needed notification,@ override public void   (  )  {   email async task . run async parallel ( new  runnable (  )  {  @ override public void run (  )  {   cursor c = m context . get content resolver (  )  . query (  account . content   uri  account . id   projection null nul
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\EmailNotificationController.java,create base account notification builder,private  notification compat .  builder   ( long account id  string ticker  char sequence title  string content text  intent intent  integer number boolean enable audio boolean ongoing )  {   pending intent pending = null ;  if  ( intent  !  =  null )   {  pending =  pending intent . get activity ( m context 0 intent  pending intent . flag   update   current )  ;   }  final  notification compat .  builder builder = new  notification compat .  builder ( m context )  . set content title ( title )  . set content text ( content text )  . set content intent ( pending )  . set number ( number  =  =  null  ?  0 : number )  . set small icon ( r . drawable . ic   notification   mail   24dp )  . set when ( m clock . get time (  )  )  . set ticker ( ticker )  . set ongoing ( ongoing )  ;  if  ( enable audio )   {   account account =  account . restore account with id ( m context account id )  ;  setup sound and vibration ( builder account )  ;   }  return builder ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\EmailNotificationController.java,ensure handler exists,"private static synchronized void   (  )  {  if  ( s notification thread  =  =  null )   {  s notification thread = new  notification thread (  )  ;  s notification handler = new  handler ( s notification thread . get looper (  )  new  handler .  callback (  )  {  @ override public boolean handle message (  final android . os .  message message )  {   log utils . d ( log   tag "" delayed notification processing"" )  ;  synchronized  ( s notification delayed message lock )   {  s notification delayed message pending = false ;  final  context context =  (  context ) message . obj ;  if  ( s refresh all needed )   {  s refresh all needed = false ;  refresh all notifications internal ( context )  ;   }  for  (  final  long account id : s refresh account set )   {  refresh notifications for account internal ( context account id )  ;   }  s refresh account set . clear (  )  ;   }  return true ;   }   }   )  ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\EmailNotificationController.java,get instance,public static synchronized  email notification controller   (  context context )  {  if  ( s instance  =  =  null )   {  s instance = new  email notification controller ( context  clock . instance )  ;   }  return s instance ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\EmailNotificationController.java,get login failed notification id,private static int   ( long account id )  {  return notification   id   base   login   warning  +   ( int ) account id ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\EmailNotificationController.java,get looper,public  looper   (  )  {  return m looper ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\EmailNotificationController.java,handle message,"@ override public boolean   ( final android . os .  message message )  {   log utils . d ( log   tag "" delayed notification processing"" )  ;  synchronized  ( s notification delayed message lock )   {  s notification delayed message pending = false ;  fina"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\EmailNotificationController.java,handle update notification intent,@ override public void   (  context context  intent intent )  {  final  uri account uri = intent . get parcelable extra ( ui provider .  update notification extras . extra   account )  ;  final  uri folder uri = intent . get parcelable extra ( ui provider
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\EmailNotificationController.java,needs ongoing notification,private static boolean   ( int notification id )  {  return  ( notification id & notification   id   base   mask )   =  =  notification   id   base   security   needed ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\EmailNotificationController.java,on change,@ override public void   ( final boolean self change )  {  final  content resolver resolver = m context . get content resolver (  )  ;  final  cursor c = resolver . query (  account . content   uri  email content . id   projection null null null )  ;  fin
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\EmailNotificationController.java,refresh all notifications,private static void   ( final  context context )  {  synchronized  ( s notification delayed message lock )   {  if  ( s notification delayed message pending )   {  s refresh all needed = true ;   }  else  {  ensure handler exists (  )  ;  s notification handler . send message delayed ( android . os .  message . obtain ( s notification handler notification   delayed   message context )  notification   delay )  ;  s notification delayed message pending = true ;  refresh all notifications internal ( context )  ;   }   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\EmailNotificationController.java,refresh all notifications internal,private static void   ( final  context context )  {   notification utils . resend notifications ( context false null null null )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\EmailNotificationController.java,refresh notifications for account,private static void   ( final  context context final long account id )  {  synchronized  ( s notification delayed message lock )   {  if  ( s notification delayed message pending )   {  s refresh account set . add ( account id )  ;   }  else  {  ensure handler exists (  )  ;  s notification handler . send message delayed ( android . os .  message . obtain ( s notification handler notification   delayed   message context )  notification   delay )  ;  s notification delayed message pending = true ;  refresh notifications for account internal ( context account id )  ;   }   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\EmailNotificationController.java,refresh notifications for account internal,"private static void   ( final  context context final long account id )  {  final  uri account uri =  email provider . ui uri ( ""uiaccount"" account id )  ;  final  content resolver content resolver = context . get content resolver (  )  ;  final  cursor mailbox cursor = content resolver . query (  content uris . with appended id (  email content . mailbox   notification   uri account id )  null null null null )  ;  try  {  while  ( mailbox cursor . move to next (  )  )   {  final long mailbox id = mailbox cursor . get long (  email content . notification   mailbox   id   column )  ;  if  ( mailbox id  =  =  0 )  continue ;  final int unseen count = mailbox cursor . get int (  email content . notification   mailbox   unseen   count   column )  ;  final int unread count ;  if  ( unseen count  =  =  0 )   {  unread count = 0 ;   }  else  {  unread count = mailbox cursor . get int (  email content . notification   mailbox   unread   count   column )  ;   }  final  uri folder uri =  email provider . ui uri ( ""uifolder"" mailbox id )  ;   log utils . d ( log   tag "" changes to account ""  +  account id  +  ""  folder: "" +  mailbox id +  ""  unread count: "" +  unread count +  ""  unseen count: "" +  unseen count )  ;  final  intent intent = new  intent ( ui provider . action   update   notification )  ;  intent . set package ( context . get package name (  )  )  ;  intent . set type (  email provider . email   app   mime   type )  ;  intent . put extra ( ui provider .  update notification extras . extra   account account uri )  ;  intent . put extra ( ui provider .  update notification extras . extra   folder folder uri )  ;  intent . put extra ( ui provider .  update notification extras . extra   updated   unread   count unread count )  ;  intent . put extra ( ui provider .  update notification extras . extra   updated   unseen   count unseen count )  ;  context . send ordered broadcast ( intent null )  ;   }   }  finally  {  mailbox cursor . close (  )  ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\EmailNotificationController.java,register message notification,"private void   ( final long account id )  {   content resolver resolver = m context . get content resolver (  )  ;  if  ( account id  =  =   account . account   id   combined   view )   {   cursor c = resolver . query (  account . content   uri  email content . id   projection null null null )  ;  try  {  while  ( c . move to next (  )  )   {  long id = c . get long (  email content . id   projection   column )  ;  register message notification ( id )  ;   }   }  finally  {  c . close (  )  ;   }   }  else  {   content observer obs = m notification map . get ( account id )  ;  if  ( obs  !  =  null )  return ;   log utils . i ( log   tag "" registering for notifications for account ""  +  account id )  ;   content observer observer = new  message content observer ( s notification handler m context account id )  ;  resolver . register content observer (  message . notifier   uri true observer )  ;  m notification map . put ( account id observer )  ;  observer . on change ( true )  ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\EmailNotificationController.java,run,@ override public void   (  )  {  synchronized  ( m lock )   {   looper . prepare (  )  ;  m looper =  looper . my looper (  )  ;  m lock . notify all (  )  ;   }   process . set thread priority (  process . thread   priority   background )  ;   looper . 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\EmailNotificationController.java,setup sound and vibration,"private void   (  notification compat .  builder builder  account account )  {   string ringtone uri =  settings .  system . default   notification   uri . to string (  )  ;  boolean vibrate = false ;  final  cursor account cursor = m context . get content resolver (  )  . query (  email provider . ui uri ( ""uiaccount"" account . m id )  ui provider . accounts   projection null null null )  ;  com . android . mail . providers .  account ui account = null ;  try  {  if  ( account cursor . move to first (  )  )   {  ui account = com . android . mail . providers .  account . builder (  )  . build from ( account cursor )  ;   }   }  finally  {  account cursor . close (  )  ;   }  if  ( ui account  !  =  null )   {  final  cursor folder cursor = m context . get content resolver (  )  . query ( ui account . settings . default inbox ui provider . folders   projection null null null )  ;  if  ( folder cursor  =  =  null )   {   log utils . w ( log   tag "" null folder cursor for mailbox %s"" ui account . settings . default inbox )  ;   }  else  {   folder folder = null ;  try  {  if  ( folder cursor . move to first (  )  )   {  folder = new  folder ( folder cursor )  ;   }   }  finally  {  folder cursor . close (  )  ;   }  if  ( folder  !  =  null )   {  final  folder preferences folder preferences = new  folder preferences ( m context ui account . get email address (  )  folder true )  ;  ringtone uri = folder preferences . get notification ringtone uri (  )  ;  vibrate = folder preferences . is notification vibrate enabled (  )  ;   }  else  {   log utils . e ( log   tag "" null folder for mailbox %s"" ui account . settings . default inbox )  ;   }   }   }  else  {   log utils . e ( log   tag "" null ui account for account id %d"" account . m id )  ;   }  int defaults =  notification . default   lights ;  if  ( vibrate )   {  defaults| =  notification . default   vibrate ;   }  builder . set sound (  text utils . is empty ( ringtone uri )   ?  null :  uri . parse ( ringtone uri )  )  . set defaults ( defaults )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\EmailNotificationController.java,show download forward failed notification synchronous,@ override public void   (  attachment attachment )  {  final  message message =  message . restore message with id ( m context attachment . m message key )  ;  if  ( message  =  =  null )  return ;  final  mailbox mailbox =  mailbox . restore mailbox wit
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\EmailNotificationController.java,show login failed notification synchronous,@ override public void   ( long account id boolean incoming )  {  final  account account =  account . restore account with id ( m context account id )  ;  if  ( account  =  =  null )  return ;  final  mailbox mailbox =  mailbox . restore mailbox of type (
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\EmailNotificationController.java,show notification,private void   ( long account id  string ticker  string title  string content text  intent intent int notification id )  {  final  notification compat .  builder builder = create base account notification builder ( account id ticker title content text intent null true needs ongoing notification ( notification id )  )  ;  m notification manager . notify ( notification id builder . build (  )  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\EmailNotificationController.java,show password expired notification synchronous,@ override public void   ( long account id )  {  final  account account =  account . restore account with id ( m context account id )  ;  if  ( account  =  =  null )  return ;  final  intent intent =  account security . action device password expiration i
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\EmailNotificationController.java,show password expiring notification synchronous,@ override public void   ( long account id )  {  final  account account =  account . restore account with id ( m context account id )  ;  if  ( account  =  =  null )  return ;  final  intent intent =  account security . action device password expiration i
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\EmailNotificationController.java,show security changed notification,@ override public void   (  account account )  {  final  intent intent = new  intent (  intent . action   view  email provider . get incoming settings uri ( account . get id (  )  )  )  ;  final  string account name = account . get display name (  )  ;  f
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\EmailNotificationController.java,show security needed notification,@ override public void   (  account account )  {   intent intent =  account security . action update security intent ( m context account . m id true )  ;   string account name = account . get display name (  )  ;   string ticker = m context . get string (
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\EmailNotificationController.java,show security unsupported notification,@ override public void   (  account account )  {  final  intent intent = new  intent (  intent . action   view  email provider . get incoming settings uri ( account . get id (  )  )  )  ;  final  string account name = account . get display name (  )  ;  f
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\EmailNotificationController.java,unregister message notification,"private void   ( final long account id )  {   content resolver resolver = m context . get content resolver (  )  ;  if  ( account id  =  =   account . account   id   combined   view )   {   log utils . i ( log   tag "" unregistering notifications for all accounts"" )  ;  for  (   content observer observer : m notification map . values (  )  )   {  resolver . unregister content observer ( observer )  ;   }  m notification map . clear (  )  ;   }  else  {   log utils . i ( log   tag "" unregistering notifications for account ""  +  account id )  ;   content observer observer = m notification map . remove ( account id )  ;  if  ( observer  !  =  null )   {  resolver . unregister content observer ( observer )  ;   }   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\EmailNotificationController.java,watch for messages,@ override public void   (  )  {  ensure handler exists (  )  ;  s notification handler . post ( new  runnable (  )  {  @ override public void run (  )  {   content resolver resolver = m context . get content resolver (  )  ;  register message notificatio
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\preferences\EmailPreferenceMigrator.java,migrate,"@ suppress warnings ( ""deprecation"" )  protected static void   ( final  context context final int old version final int new version final  list <  account >  accounts )  {  final  preferences preferences =  preferences . get preferences ( context )  ;  fi"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\view\CertificateSelector.java, certificate selector,public   (  context context  attribute set attrs int def style )  {  super ( context attrs def style )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\view\CertificateSelector.java, saved state,private   (  parcel in )  {  super ( in )  ;  m value = in . read string (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\view\CertificateSelector.java,create from parcel,@ override public  saved state   (  parcel in )  {  return new  saved state ( in )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\view\CertificateSelector.java,get certificate,public  string   (  )  {  return m value ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\view\CertificateSelector.java,has certificate,public boolean   (  )  {  return m value  !  =  null ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\view\CertificateSelector.java,new array,@ override public  saved state[]   ( int size )  {  return new  saved state[size] ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\EmailApplication.java,create inline attachment view intent,@ override public  intent   (  context context  string url  conversation message message )  {  return null ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\EmailApplication.java,create inline attachment view intent builder,@ override public  inline attachment view intent builder   (  account account long conversation id )  {  return new  inline attachment view intent builder (  )  {  @ override public  intent create inline attachment view intent (   context context   string
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\EmailApplication.java,create preference migrator,@ override public  base preference migrator   (  )  {  return new  email preference migrator (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\EmailApplication.java,get instance,@ override public  notification controller   (  context context )  {  return  email notification controller . get instance ( context )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\StopWatch.java, stop watch,"private   (  string name )  {  m name = name ;  m start = get current time (  )  ;  m last split = m start ;   log utils . w (  logging . log   tag "" stop watch ( ""  +  m name  +  "" )  start"" )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\StopWatch.java,get current time,private static long   (  )  {  return  system clock . elapsed realtime (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\StopWatch.java,split,"public void   (  string label )  {  long now = get current time (  )  ;  long elapse = now  -  m last split ;   log utils . w (  logging . log   tag "" stop watch ( ""  +  m name  +  "" )  split ( "" +  label +  "" )  "" +  elapse )  ;  m last split = now ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\StopWatch.java,start,public static  stop watch   (  string name )  {  return new  stop watch ( name )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\StopWatch.java,stop,"public void   (  )  {  long now = get current time (  )  ;   log utils . w (  logging . log   tag "" stop watch ( ""  +  m name  +  "" )  stop: "" +   ( now  -  m last split )  +  ""  ( total "" +   ( now  -  m start )  +  "" ) "" )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email2\ui\CreateShortcutActivityEmail.java,on create,@ override public void   (  bundle icicle )  {  super . on create ( icicle )  ;   account[] cached accounts =  account utils . get syncing accounts ( this )  ;   intent intent = get intent (  )  ;  if  ( cached accounts  !  =  null && cached accounts . le
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email2\ui\MailActivityEmail.java,get view intent,"private  intent   ( long account id long mailbox id )  {  final  content resolver content resolver = get content resolver (  )  ;  final  cursor account cursor = content resolver . query (  email provider . ui uri ( ""uiaccount"" account id )  ui provider . accounts   projection   no   capabilities null null null )  ;  if  ( account cursor  =  =  null )   {   log utils . e ( log   tag "" null account cursor for m account id %d"" account id )  ;  return null ;   }  com . android . mail . providers .  account account = null ;  try  {  if  ( account cursor . move to first (  )  )   {  account = com . android . mail . providers .  account . builder (  )  . build from ( account cursor )  ;   }   }  finally  {  account cursor . close (  )  ;   }  final  cursor folder cursor = content resolver . query (  email provider . ui uri ( ""uifolder"" mailbox id )  ui provider . folders   projection null null null )  ;  if  ( folder cursor  =  =  null )   {   log utils . e ( log   tag "" null folder cursor for account %d  mailbox %d"" account id mailbox id )  ;  return null ;   }   folder folder = null ;  try  {  if  ( folder cursor . move to first (  )  )   {  folder = new  folder ( folder cursor )  ;   }  else  {   log utils . e ( log   tag "" empty folder cursor for account %d  mailbox %d"" account id mailbox id )  ;  return null ;   }   }  finally  {  folder cursor . close (  )  ;   }  return  utils . create view folder intent ( this folder . folder uri . full uri account )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email2\ui\MailActivityEmail.java,log,public static void   (  string message )  {   log utils . d (  logging . log   tag message )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email2\ui\MailActivityEmail.java,on create,@ override public void   (  bundle bundle )  {  final  intent intent = get intent (  )  ;  final  uri data = intent  !  =  null  ?  intent . get data (  )  : null ;  if  ( data  !  =  null )   {  final int match = s url matcher . match ( data )  ;  switch
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\mail\transport\SmtpSender.java, smtp sender,"public   (  context context  account account )  {  m context = context ;  m account = account ;   host auth send auth = account . get or create host auth send ( context )  ;  m transport = new  mail transport ( context ""smtp"" send auth )  ;   string[] user info parts = send auth . get login (  )  ;  m username = user info parts[0] ;  m password = user info parts[1] ;   credential cred = send auth . get credential ( context )  ;  if  ( cred  !  =  null )   {  m useo auth = true ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\mail\transport\SmtpSender.java,close,@ override public void   (  )  {  m transport . close (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\mail\transport\SmtpSender.java,execute sensitive command,private  string   (  string command  string sensitive replacement )  throws io exception   messaging exception  {  if  ( command  !  =  null )   {  m transport . write line ( command sensitive replacement )  ;   }   string line = m transport . read line ( true )  ;   string result = line ;  while  ( line . length (  )   >  =  4 && line . char at ( 3 )   =  =  ' - ' )   {  line = m transport . read line ( true )  ;  result +  = line . substring ( 3 )  ;   }  if  ( result . length (  )   >  0 )   {  char c = result . char at ( 0 )  ;  if  (  ( c  =  =  '4' )  ||  ( c  =  =  '5' )  )   {  throw new  messaging exception ( result )  ;   }   }  return result ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\mail\transport\SmtpSender.java,execute simple command,private  string   (  string command )  throws io exception   messaging exception  {  return execute sensitive command ( command null )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\mail\transport\SmtpSender.java,new instance,public static  sender   (  account account  context context )  throws  messaging exception  {  return new  smtp sender ( context account )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\mail\transport\SmtpSender.java,open,"@ override public void   (  )  throws  messaging exception  {  try  {  m transport . open (  )  ;  execute simple command ( null )  ;   string local host = ""localhost"" ;   inet address local address = m transport . get local address (  )  ;  if  ( local a"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\mail\transport\SmtpSender.java,sasl auth login,"private void   (  string username  string password )  throws  messaging exception   authentication failed exception  io exception  {  try  {  execute simple command ( ""auth login"" )  ;  execute sensitive command (  base64 . encode to string ( username . get bytes (  )   base64 . no   wrap )  "" / username redacted / "" )  ;  execute sensitive command (  base64 . encode to string ( password . get bytes (  )   base64 . no   wrap )  "" / password redacted / "" )  ;   }  catch  (   messaging exception me )   {  if  ( me . get message (  )  . length (  )   >  1 && me . get message (  )  . char at ( 1 )   =  =  '3' )   {  throw new  authentication failed exception ( me . get message (  )  )  ;   }  throw me ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\mail\transport\SmtpSender.java,sasl autho auth,"private void   ( final  string username final  string access token )  throws io exception   messaging exception  {  final  string auth phrase = ""user = ""  +  username  +  '\001' +  ""auth =  bearer "" +  access token +  '\001' +  '\001' ;  byte[] data =  base64 . encode ( auth phrase . get bytes (  )   base64 . no   wrap )  ;  try  {  execute sensitive command ( ""auth xoauth2 ""  +  new  string ( data )  ""auth xoauth2  / redacted / "" )  ;   }  catch  (   messaging exception me )   {  if  ( me . get message (  )  . length (  )   >  1 && me . get message (  )  . char at ( 1 )   =  =  '3' )   {  throw new  authentication failed exception ( me . get message (  )  )  ;   }  throw me ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\mail\transport\SmtpSender.java,sasl auth plain,"private void   (  string username  string password )  throws  messaging exception   authentication failed exception  io exception  {  byte[] data =  ( ""\000""  +  username  +  ""\000"" +  password )  . get bytes (  )  ;  data =  base64 . encode ( data  base64 . no   wrap )  ;  try  {  execute sensitive command ( ""auth plain ""  +  new  string ( data )  ""auth plain  / redacted / "" )  ;   }  catch  (   messaging exception me )   {  if  ( me . get message (  )  . length (  )   >  1 && me . get message (  )  . char at ( 1 )   =  =  '3' )   {  throw new  authentication failed exception ( me . get message (  )  )  ;   }  throw me ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\mail\transport\SmtpSender.java,send message,@ override public void   ( long message id )  throws  messaging exception  {  close (  )  ;  open (  )  ;   message message =  message . restore message with id ( m context message id )  ;  if  ( message  =  =  null )   {  throw new  messaging exception (
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\mail\transport\SmtpSender.java,set transport,public void   (  mail transport test transport )  {  m transport = test transport ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\mail\providers\EmailAccountCacheProvider.java,get authority,@ override protected  string   (  )  {  if  ( s authority  =  =  null )   {  s authority = get context (  )  . get string ( r . string . authority   account   cache   provider )  ;   }  return s authority ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\mail\providers\EmailAccountCacheProvider.java,get no accounts intent,@ override protected  intent   (  context context )  {  return  authenticator setup intent helper . action new account with result intent ( context )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\beetstra\jutf7\Base64Util.java, base util,"  ( final  string alphabet )  {  this . alphabet = alphabet . to char array (  )  ;  if  ( alphabet . length (  )   !  =  alphabet   length )  throw new  illegal argument exception ( ""alphabet has incorrect length  ( should be 64  not ""  +  alphabet . length (  )   +  "" ) "" )  ;  inverse alphabet = new int[128] ;   arrays . fill ( inverse alphabet  - 1 )  ;  for  ( int i = 0 ;  i  <  this . alphabet . length ;  i +  +  )   {  final char ch = this . alphabet[i] ;  if  ( ch  >  =  128 )  throw new  illegal argument exception ( ""invalid character in alphabet: ""  +  ch )  ;  inverse alphabet[ch] = i ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\beetstra\jutf7\Base64Util.java,contains,boolean   ( final char ch )  {  if  ( ch  >  =  128 )  return false ;  return inverse alphabet[ch]  >  =  0 ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\beetstra\jutf7\Base64Util.java,get char,byte   ( final int sextet )  {  return  ( byte ) alphabet[sextet] ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\beetstra\jutf7\Base64Util.java,get sextet,int   ( final byte ch )  {  if  ( ch  >  =  128 )  return  - 1 ;  return inverse alphabet[ch] ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\mail\browse\EmailConversationProvider.java,get authority,@ override protected  string   (  )  {  if  ( s authority  =  =  null )   {  s authority = get context (  )  . get string ( r . string . authority   conversation   provider )  ;   }  return s authority ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\beetstra\jutf7\ModifiedUTF7Charset.java, modifiedutf charset,  (  string name  string[] aliases )  {  super ( name aliases modified   base64   alphabet true )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\beetstra\jutf7\ModifiedUTF7Charset.java,can encode directly,boolean   ( char ch )  {  if  ( ch  =  =  shift (  )  )  return false ;  return ch  >  =  0x20 && ch  <  =  0x7e ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\beetstra\jutf7\ModifiedUTF7Charset.java,shift,byte   (  )  {  return '&' ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\beetstra\jutf7\ModifiedUTF7Charset.java,unshift,byte   (  )  {  return ' - ' ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\beetstra\jutf7\UTF7Charset.java,utf charset,  (  string name  string[] aliases boolean include optional )  {  super ( name aliases base64   alphabet false )  ;  if  ( include optional )  this . directly encoded = set   d  +  set   o  +  rule   3 ;  else this . directly encoded = set   d  +  rule   3 ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\beetstra\jutf7\UTF7Charset.java,can encode directly,boolean   ( char ch )  {  return directly encoded . index of ( ch )   >  =  0 ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\beetstra\jutf7\UTF7Charset.java,shift,byte   (  )  {  return ' + ' ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\beetstra\jutf7\UTF7Charset.java,unshift,byte   (  )  {  return ' - ' ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\beetstra\jutf7\CharsetProvider.java, charset provider,public   (  )  {  charsets =  arrays . as list ( new  charset[] { utf7charset imap4charset utf7o charset }  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\beetstra\jutf7\CharsetProvider.java,charset for name,@ override public  charset   (  string charset name )  {  charset name = charset name . to upper case (  )  ;  for  (  iterator <  charset >  iter = charsets . iterator (  )  ;  iter . has next (  )  ;   )   {   charset charset = iter . next (  )  ;  if  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\beetstra\jutf7\CharsetProvider.java,charsets,@ override public  iterator <  charset >    (  )  {  return charsets . iterator (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\beetstra\jutf7\UTF7StyleCharset.java,utf style charset,protected   (  string canonical name  string[] aliases  string alphabet boolean strict )  {  super ( canonical name aliases )  ;  this . base64 = new  base64 util ( alphabet )  ;  this . strict = strict ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\beetstra\jutf7\UTF7StyleCharsetEncoder.java,utf style charset encoder,  ( utf7 style charset cs  base64 util base64 boolean strict )  {  super ( cs avg   bytes   per   char max   bytes   per   char )  ;  this . cs = cs ;  this . base64 = base64 ;  this . strict = strict ;  this . shift = cs . shift (  )  ;  this . unshift = cs . unshift (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\beetstra\jutf7\UTF7StyleCharsetEncoder.java,encode base,private void   ( char ch  byte buffer out )  {  if  (  ! base64mode )  out . put ( shift )  ;  base64mode = true ;  bits to output +  = 16 ;  while  ( bits to output  >  =  6 )   {  bits to output -  = 6 ;  sextet +  =  ( ch  >  >  bits to output )  ;  sextet& = 0x3f ;  out . put ( base64 . get char ( sextet )  )  ;  sextet = 0 ;   }  sextet =  ( ch  <  <   ( 6  -  bits to output )  )  & 0x3f ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\beetstra\jutf7\UTF7StyleCharsetEncoder.java,encode loop,protected  coder result   (  char buffer in  byte buffer out )  {  while  ( in . has remaining (  )  )   {  if  ( out . remaining (  )   <  4 )  return  coder result . overflow ;  char ch = in . get (  )  ;  if  ( cs . can encode directly ( ch )  )   {  unshift ( out ch )  ;  out . put (  ( byte ) ch )  ;   }  else if  (  ! base64mode && ch  =  =  shift )   {  out . put ( shift )  ;  out . put ( unshift )  ;   }  else encode base64 ( ch out )  ;   }  if  ( base64mode && use ugly hack to force call to flush in java5 && out . limit (  )   !  =  max   bytes   per   char * in . limit (  )  )  return  coder result . overflow ;  return  coder result . underflow ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\beetstra\jutf7\UTF7StyleCharsetEncoder.java,impl flush,protected  coder result   (  byte buffer out )  {  if  ( base64mode )   {  if  ( out . remaining (  )   <  2 )  return  coder result . overflow ;  if  ( bits to output  !  =  0 )  out . put ( base64 . get char ( sextet )  )  ;  out . put ( unshift )  ;   }  return  coder result . underflow ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\beetstra\jutf7\UTF7StyleCharsetEncoder.java,impl reset,protected void   (  )  {  base64mode = false ;  sextet = 0 ;  bits to output = 0 ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\beetstra\jutf7\UTF7StyleCharsetEncoder.java,unshift,private void   (  byte buffer out char ch )  {  if  (  ! base64mode )  return ;  if  ( bits to output  !  =  0 )  out . put ( base64 . get char ( sextet )  )  ;  if  ( base64 . contains ( ch )  || ch  =  =  unshift || strict )  out . put ( unshift )  ;  base64mode = false ;  sextet = 0 ;  bits to output = 0 ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\IntentUtilitiesTests.java,brokentest get account uuid from intent,"public void   (  )  {   intent i ;  i = new  intent ( get context (  )  get class (  )  )  ;  assert equals ( null  intent utilities . get account uuid from intent ( i )  )  ;  i = new  intent (  intent . action   view  uri . parse ( ""content: /  / s / "" )  )  ;  assert equals ( null  intent utilities . get account uuid from intent ( i )  )  ;  i = new  intent (  intent . action   view  uri . parse ( ""content: /  / s /  ? account   uuid = "" )  )  ;  assert equals ( null  intent utilities . get account uuid from intent ( i )  )  ;  i = new  intent (  intent . action   view  uri . parse ( ""content: /  / s /  ? account   uuid = xyz"" )  )  ;  assert equals ( ""xyz""  intent utilities . get account uuid from intent ( i )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\IntentUtilitiesTests.java,brokentest get id from intent,"public void   (  )  {   intent i ;  i = new  intent ( get context (  )  get class (  )  )  ;  assert equals (  - 1  intent utilities . get account id from intent ( i )  )  ;  assert equals (  - 1  intent utilities . get mailbox id from intent ( i )  )  ;  assert equals (  - 1  intent utilities . get message id from intent ( i )  )  ;  check get id from intent ( ""content: /  / s / ""  - 1 )  ;  check get id from intent ( ""content: /  / s /  ? id = ""  - 1 )  ;  check get id from intent ( ""content: /  / s /  ? id = x""  - 1 )  ;  check get id from intent ( ""content: /  / s /  ? id =  - 100""  - 100 )  ;  check get id from intent ( ""content: /  / s /  ? id = 200"" 200 )  ;  i = new  intent (  intent . action   view  uri . parse ( ""content: /  / s /  ? account   id = 5&mailbox   id = 6&message   id = 7"" )  )  ;  assert equals ( 5  intent utilities . get account id from intent ( i )  )  ;  assert equals ( 6  intent utilities . get mailbox id from intent ( i )  )  ;  assert equals ( 7  intent utilities . get message id from intent ( i )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\IntentUtilitiesTests.java,brokentest simple,"public void   (  )  {  final  uri .  builder b =  intent utilities . create activity intent url builder ( "" / abc"" )  ;   intent utilities . set account id ( b 10 )  ;   intent utilities . set mailbox id ( b 20 )  ;   intent utilities . set message id ( b 30 )  ;   intent utilities . set account uuid ( b ""*uuid*"" )  ;  final  uri u = b . build (  )  ;  assert equals ( ""content"" u . get scheme (  )  )  ;  assert equals ( ""ui . email . android . com"" u . get authority (  )  )  ;  assert equals ( "" / abc"" u . get path (  )  )  ;  final  intent i = new  intent (  intent . action   main u )  ;  assert equals ( 10  intent utilities . get account id from intent ( i )  )  ;  assert equals ( 20  intent utilities . get mailbox id from intent ( i )  )  ;  assert equals ( 30  intent utilities . get message id from intent ( i )  )  ;  assert equals ( ""*uuid*""  intent utilities . get account uuid from intent ( i )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\IntentUtilitiesTests.java,check get id from intent,"public void   (  string uri long expected )  {   intent i = new  intent (  intent . action   view  uri . parse ( uri . replace ( ""id"" ""account   id"" )  )  )  ;  assert equals ( expected  intent utilities . get account id from intent ( i )  )  ;  i = new  intent (  intent . action   view  uri . parse ( uri . replace ( ""id"" ""mailbox   id"" )  )  )  ;  assert equals ( expected  intent utilities . get mailbox id from intent ( i )  )  ;  i = new  intent (  intent . action   view  uri . parse ( uri . replace ( ""id"" ""message   id"" )  )  )  ;  assert equals ( expected  intent utilities . get message id from intent ( i )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\beetstra\jutf7\UTF7StyleCharsetDecoder.java,utf style charset decoder,  ( utf7 style charset cs  base64 util base64 boolean strict )  {  super ( cs 0 . 6f 1 . 0f )  ;  this . base64 = base64 ;  this . strict = strict ;  this . shift = cs . shift (  )  ;  this . unshift = cs . unshift (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\beetstra\jutf7\UTF7StyleCharsetDecoder.java,basebits waiting,private boolean   (  )  {  return temp char  !  =  0 || bits read  >  =  6 ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\beetstra\jutf7\UTF7StyleCharsetDecoder.java,decode loop,protected  coder result   (  byte buffer in  char buffer out )  {  while  ( in . has remaining (  )  )   {  byte b = in . get (  )  ;  if  ( base64mode )   {  if  ( b  =  =  unshift )   {  if  ( base64bits waiting (  )  )  return malformed ( in )  ;  if  ( just shifted )   {  if  (  ! out . has remaining (  )  )  return overflow ( in )  ;  out . put (  ( char ) shift )  ;   }  else just unshifted = true ;  set unshifted (  )  ;   }  else  {  if  (  ! out . has remaining (  )  )  return overflow ( in )  ;   coder result result = handle base64 ( in out b )  ;  if  ( result  !  =  null )  return result ;   }  just shifted = false ;   }  else  {  if  ( b  =  =  shift )   {  base64mode = true ;  if  ( just unshifted && strict )  return malformed ( in )  ;  just shifted = true ;  continue ;   }  if  (  ! out . has remaining (  )  )  return overflow ( in )  ;  out . put (  ( char ) b )  ;  just unshifted = false ;   }   }  return  coder result . underflow ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\beetstra\jutf7\UTF7StyleCharsetDecoder.java,handle base,private  coder result   (  byte buffer in  char buffer out byte last read )  {   coder result result = null ;  int sextet = base64 . get sextet ( last read )  ;  if  ( sextet  >  =  0 )   {  bits read +  = 6 ;  if  ( bits read  <  16 )   {  temp char +  = sextet  <  <   ( 16  -  bits read )  ;   }  else  {  bits read -  = 16 ;  temp char +  = sextet  >  >   ( bits read )  ;  out . put (  ( char ) temp char )  ;  temp char =  ( sextet  <  <   ( 16  -  bits read )  )  & 0xffff ;   }   }  else  {  if  ( strict )  return malformed ( in )  ;  out . put (  ( char ) last read )  ;  if  ( base64bits waiting (  )  )  result = malformed ( in )  ;  set unshifted (  )  ;   }  return result ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\beetstra\jutf7\UTF7StyleCharsetDecoder.java,impl flush,protected  coder result   (  char buffer out )  {  if  (  ( base64mode && strict )  || base64bits waiting (  )  )  return  coder result . malformed for length ( 1 )  ;  return  coder result . underflow ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\beetstra\jutf7\UTF7StyleCharsetDecoder.java,impl reset,protected void   (  )  {  set unshifted (  )  ;  just unshifted = false ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\beetstra\jutf7\UTF7StyleCharsetDecoder.java,malformed,private  coder result   (  byte buffer in )  {  in . position ( in . position (  )   -  1 )  ;  return  coder result . malformed for length ( 1 )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\beetstra\jutf7\UTF7StyleCharsetDecoder.java,overflow,private  coder result   (  byte buffer in )  {  in . position ( in . position (  )   -  1 )  ;  return  coder result . overflow ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\beetstra\jutf7\UTF7StyleCharsetDecoder.java,set unshifted,private void   (  )  {  base64mode = false ;  bits read = 0 ;  temp char = 0 ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\AccountTestCase.java, account test case,public   (  )  {  super (  email provider . class  email content . authority )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\AccountTestCase.java,create account manager account,"protected void   (  string username )  {  final android . accounts .  account account = make account manager account ( username )  ;   account manager . get ( get context (  )  )  . add account explicitly ( account ""password"" null )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\AccountTestCase.java,delete account manager account,protected void   ( android . accounts .  account account )  {   account manager future <  boolean >  future =  account manager . get ( get context (  )  )  . remove account ( account null null )  ;  try  {  future . get result (  )  ;   }  catch  (   operation canceled exception e )   {   }  catch  (   authenticator exception e )   {   }  catch  (  io exception e )   {   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\AccountTestCase.java,delete temporary account manager accounts,protected void   (  )  {  for  (  android . accounts .  account account manager account : get exchange accounts (  )  )   {  if  ( account manager account . name . starts with ( test   account   prefix )  && account manager account . name . ends with ( test   account   suffix )  )   {  delete account manager account ( account manager account )  ;   }   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\AccountTestCase.java,get account manager accounts,protected android . accounts .  account[]   ( android . accounts .  account[] baseline )  {  android . accounts .  account[] raw list = get exchange accounts (  )  ;  if  ( baseline . length  =  =  0 )   {  return raw list ;   }   hash set < android . accounts .  account >  set = new  hash set < android . accounts .  account >  (  )  ;  for  (  android . accounts .  account add account : raw list )   {  set . add ( add account )  ;   }  for  (  android . accounts .  account remove account : baseline )   {  set . remove ( remove account )  ;   }  return set . to array ( new android . accounts .  account[0] )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\AccountTestCase.java,get exchange accounts,protected android . accounts .  account[]   (  )  {  return  account manager . get ( get context (  )  )  . get accounts by type ( test   account   type )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\AccountTestCase.java,get test account email address,protected  string   (  string name )  {  return test   account   prefix  +  name  +  test   account   suffix ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\AccountTestCase.java,get test account name,protected  string   (  string name )  {  return test   account   prefix  +  name ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\AccountTestCase.java,make account manager account,protected android . accounts .  account   (  string username )  {  return new android . accounts .  account ( username test   account   type )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\AccountTestCase.java,make exchange service account list,protected  array list <  account >    (  )  {   array list <  account >  account list = new  array list <  account >  (  )  ;   cursor c = get mock context (  )  . get content resolver (  )  . query (  account . content   uri  account . content   projection null null null )  ;  try  {  while  ( c . move to next (  )  )   {   account account = new  account (  )  ;  account . restore ( c )  ;  account list . add ( account )  ;   }   }  finally  {  c . close (  )  ;   }  return account list ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\AccountTestCase.java,setup provider and account manager account,protected  account   (  string username )  {  create account manager account ( username  +  test   account   suffix )  ;  return  provider test utils . setup account ( username true get mock context (  )  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\setup\AccountSetupOptionsTests.java, account setup options tests,public   (  )  {  super (  account setup final . class )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\setup\AccountSetupOptionsTests.java,check background attachments,"private void   (  string store uri boolean expect visible )  throws uri syntax exception  {   intent i = get test intent ( "" name"" store uri )  ;  this . set activity intent ( i )  ;  get activity and fields (  )  ;  boolean is null = m background attachments view  =  =  null ;  boolean is visible =  ! is null &&  ( m background attachments view . get visibility (  )   =  =   view . visible )  ;  if  (  ! expect visible )   {  assert true (  ! is visible )  ;   }  else  {  assert true (  ! is null )  ;  assert true ( is visible )  ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\setup\AccountSetupOptionsTests.java,frequency spinner has value,private boolean   ( int value )  {   spinner adapter sa = m check frequency view . get adapter (  )  ;  for  ( int i = 0 ;  i  <  sa . get count (  )  ;   +  + i )   {   spinner option so =  (  spinner option ) sa . get item ( i )  ;  if  ( so  !  =  null &&  (  (  integer ) so . value )   =  =  value )   {  return true ;   }   }  return false ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\setup\AccountSetupOptionsTests.java,get activity and fields,private void   (  )  {  m activity = get activity (  )  ;  m check frequency view =  (  spinner ) m activity . find view by id ( r . id . account   check   frequency )  ;  m background attachments view =  (  check box ) m activity . find view by id ( r . id . account   background   attachments )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\setup\AccountSetupOptionsTests.java,get test intent,private  intent   (  string name  string store uri )  throws uri syntax exception  {  final  account account = new  account (  )  ;  account . set sender name ( name )  ;  final  context context = get instrumentation (  )  . get target context (  )  ;  final  host auth auth = account . get or create host auth recv ( context )  ;  auth . set host auth from string ( store uri )  ;  final  setup data fragment setup data fragment = new  setup data fragment (  )  ;  setup data fragment . set flow mode (  authenticator setup intent helper . flow   mode   normal )  ;  setup data fragment . set account ( account )  ;  final  intent i = new  intent (  account setup final . action   jump   to   options )  ;  i . put extra (  setup data fragment . extra   setup   data setup data fragment )  ;  return i ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\setup\AccountSetupOptionsTests.java,test background attachments eas,"public void   (  )  throws uri syntax exception  {  check background attachments ( ""eas: /  / user:password@server . com"" true )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\setup\AccountSetupOptionsTests.java,test background attachments imap,"public void   (  )  throws uri syntax exception  {  check background attachments ( ""imap: /  / user:password@server . com"" true )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\setup\AccountSetupOptionsTests.java,test background attachments pop,"public void   (  )  throws uri syntax exception  {  check background attachments ( ""pop3: /  / user:password@server . com"" false )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\setup\AccountSetupOptionsTests.java,test push optioneas,"public void   (  )  throws uri syntax exception  {   intent i = get test intent ( "" name"" ""eas: /  / user:password@server . com"" )  ;  this . set activity intent ( i )  ;  get activity and fields (  )  ;  boolean has push = frequency spinner has value (  account . check   interval   push )  ;  assert true ( has push )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\setup\AccountSetupOptionsTests.java,test push optionimap,"public void   (  )  throws uri syntax exception  {   intent i = get test intent ( "" name"" ""imap: /  / user:password@server . com"" )  ;  this . set activity intent ( i )  ;  get activity and fields (  )  ;  boolean has push = frequency spinner has value (  account . check   interval   push )  ;  assert false ( has push )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\setup\AccountSetupOptionsTests.java,test push optionpop,"public void   (  )  throws uri syntax exception  {   intent i = get test intent ( "" name"" ""pop3: /  / user:password@server . com"" )  ;  this . set activity intent ( i )  ;  get activity and fields (  )  ;  boolean has push = frequency spinner has value (  account . check   interval   push )  ;  assert false ( has push )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\setup\AccountSetupOutgoingTests.java, account setup outgoing tests,public   (  )  {  super (  account setup final . class )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\setup\AccountSetupOutgoingTests.java,brokentest password no trim,"@ ui thread test public void   (  )  throws uri syntax exception  {  get activity and fields (  )  ;  check password ( null false )  ;  check password ( "" leading"" true )  ;  check password ( ""trailing "" true )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\setup\AccountSetupOutgoingTests.java,check password,private void   (  string password boolean expect next )  throws uri syntax exception  {  m authentication view . set password ( password )  ;  if  ( expect next )   {  assert true ( is next button enabled (  )  )  ;   }  else  {  assert false ( is next button enabled (  )  )  ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\setup\AccountSetupOutgoingTests.java,get activity and fields,private void   (  )  {  m activity = get activity (  )  ;  m server view =  (  edit text ) m activity . find view by id ( r . id . account   server )  ;  m authentication view =  (  authentication view ) m activity . find view by id ( r . id . authentication   view )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\setup\AccountSetupOutgoingTests.java,get test intent,private  intent   (  string sender uri string )  throws uri syntax exception  {  final  account account = new  account (  )  ;  final  context context = get instrumentation (  )  . get target context (  )  ;  final  host auth auth = account . get or create host auth send ( context )  ;  auth . set host auth from string ( sender uri string )  ;  final  setup data fragment setup data fragment = new  setup data fragment (  )  ;  setup data fragment . set flow mode (  authenticator setup intent helper . flow   mode   normal )  ;  setup data fragment . set account ( account )  ;  final  intent i = new  intent (  account setup final . action   jump   to   outgoing )  ;  i . put extra (  setup data fragment . extra   setup   data setup data fragment )  ;  return i ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\setup\AccountSetupOutgoingTests.java,is next button enabled,private boolean   (  )  {  final  view next button = m activity . find view by id ( r . id . next )  ;  return next button . is enabled (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\setup\AccountSetupOutgoingTests.java,run,@ override public void   (  )  {  final  check box require login view =  (  check box ) m activity . find view by id ( r . id . account   require   login )  ;  require login view . set checked ( true )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\setup\AccountSetupOutgoingTests.java,set up,"@ override protected void   (  )  throws  exception  {  super . set up (  )  ;   intent i = get test intent ( ""smtp: /  / user:password@server . com:999"" )  ;  set activity intent ( i )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\setup\AccountSetupOutgoingTests.java,test bad server variants,"@ ui thread test public void   (  )  {  get activity and fields (  )  ;  assert true ( is next button enabled (  )  )  ;  m server view . set text ( "" "" )  ;  assert false ( is next button enabled (  )  )  ;  m server view . set text ( ""serv$er . com"" )  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\setup\AccountSetupOutgoingTests.java,test bad uri no password,"public void   (  )  throws uri syntax exception  {   intent i = get test intent ( ""smtp: /  / user@server . com:999"" )  ;  set activity intent ( i )  ;  get activity and fields (  )  ;  assert false ( is next button enabled (  )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\setup\AccountSetupOutgoingTests.java,test bad uri no user,"public void   (  )  throws  throwable  {   intent i = get test intent ( ""smtp: /  / :password@server . com:999"" )  ;  set activity intent ( i )  ;  get activity and fields (  )  ;  run test on ui thread ( new  runnable (  )  {  @ override public void run (  )  {  final  check box require login view =  (  check box ) m activity . find view by id ( r . id . account   require   login )  ;  require login view . set checked ( true )  ;   }   }   )  ;  assert false ( is next button enabled (  )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\setup\AccountSetupOutgoingTests.java,test good server variants,"@ ui thread test public void   (  )  {  get activity and fields (  )  ;  assert true ( is next button enabled (  )  )  ;  m server view . set text ( "" server . com "" )  ;  assert true ( is next button enabled (  )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\setup\AccountSetupOutgoingTests.java,test good uri,@ ui thread test public void   (  )  {  get activity and fields (  )  ;  assert true ( is next button enabled (  )  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\setup\AccountSetupOutgoingTests.java,test good uri no port,"public void   (  )  throws uri syntax exception  {   intent i = get test intent ( ""smtp: /  / user:password@server . com"" )  ;  set activity intent ( i )  ;  get activity and fields (  )  ;  assert true ( is next button enabled (  )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\setup\EmailPreferenceActivityTests.java, email preference activity tests,public   (  )  {  super (  email preference activity . class )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\setup\EmailPreferenceActivityTests.java,frequency spinner has value,private boolean   ( int value )  {   char sequence[] values = m check frequency . get entry values (  )  ;  for  (   char sequence list value : values )   {  if  ( list value  !  =  null &&  integer . parse int ( list value . to string (  )  )   =  =  value )   {  return true ;   }   }  return false ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\setup\EmailPreferenceActivityTests.java,get activity and fields,private void   (  )  throws  throwable  {  final  email preference activity the activity = get activity (  )  ;  run test on ui thread ( new  runnable (  )  {  public void run (  )  {   }   }   )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\setup\EmailPreferenceActivityTests.java,get test intent,"private  intent   (  string name  string store uri  string sender uri )  throws uri syntax exception  {  m account = new  account (  )  ;  m account . set sender name ( name )  ;  m account . m email address = ""user@server . com"" ;  m account . get or create host auth recv ( m context )  . set host auth from string ( store uri )  ;  m account . get or create host auth send ( m context )  . set host auth from string ( sender uri )  ;  m account . save ( m context )  ;  m account id = m account . m id ;  return null ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\setup\EmailPreferenceActivityTests.java,set up,@ override protected void   (  )  throws  exception  {  super . set up (  )  ;  m context = get instrumentation (  )  . get target context (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\setup\EmailPreferenceActivityTests.java,tear down,@ override protected void   (  )  throws  exception  {  if  ( m account  !  =  null )   {   uri uri =  content uris . with appended id (  account . content   uri m account id )  ;  m context . get content resolver (  )  . delete ( uri null null )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\setup\EmailPreferenceActivityTests.java,test push optioneas,"public void   (  )  throws  throwable  {   intent i = get test intent ( "" name"" ""eas: /  / user:password@server . com"" ""eas: /  / user:password@server . com"" )  ;  set activity intent ( i )  ;  get activity and fields (  )  ;  boolean has push = frequency spinner has value (  account . check   interval   push )  ;  assert true ( has push )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\setup\EmailPreferenceActivityTests.java,test push optionimap,"public void   (  )  throws  throwable  {   intent i = get test intent ( "" name"" ""imap: /  / user:password@server . com"" ""smtp: /  / user:password@server . com"" )  ;  set activity intent ( i )  ;  get activity and fields (  )  ;  boolean has push = frequency spinner has value (  account . check   interval   push )  ;  assert false ( has push )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\setup\EmailPreferenceActivityTests.java,test push optionpop,"public void   (  )  throws  throwable  {   intent i = get test intent ( "" name"" ""pop3: /  / user:password@server . com"" ""smtp: /  / user:password@server . com"" )  ;  set activity intent ( i )  ;  get activity and fields (  )  ;  boolean has push = frequency spinner has value (  account . check   interval   push )  ;  assert false ( has push )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\setup\AccountSetupIncomingTests.java, account setup incoming tests,public   (  )  {  super (  account setup final . class )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\setup\AccountSetupIncomingTests.java,check password,private void   (  string password boolean expect next )  throws uri syntax exception  {  m authentication view . set password ( password )  ;  if  ( expect next )   {  assert true ( is next button enabled (  )  )  ;   }  else  {  assert false ( is next button enabled (  )  )  ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\setup\AccountSetupIncomingTests.java,get activity and fields,private void   (  )  {  m activity = get activity (  )  ;  m server view =  (  edit text ) m activity . find view by id ( r . id . account   server )  ;  m authentication view =  (  authentication view ) m activity . find view by id ( r . id . authentication   view )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\setup\AccountSetupIncomingTests.java,get test intent,private  intent   (  string store uri string )  throws uri syntax exception  {  final  account account = new  account (  )  ;  final  context context = get instrumentation (  )  . get target context (  )  ;  final  host auth auth = account . get or create host auth recv ( context )  ;  auth . set host auth from string ( store uri string )  ;  final  setup data fragment setup data fragment = new  setup data fragment (  )  ;  setup data fragment . set flow mode (  authenticator setup intent helper . flow   mode   normal )  ;  setup data fragment . set account ( account )  ;  final  intent i = new  intent (  account setup final . action   jump   to   incoming )  ;  i . put extra (  setup data fragment . extra   setup   data setup data fragment )  ;  return i ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\setup\AccountSetupIncomingTests.java,is next button enabled,private boolean   (  )  {  final  view next button = m activity . find view by id ( r . id . next )  ;  return next button . is enabled (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\setup\AccountSetupIncomingTests.java,set up,"@ override protected void   (  )  throws  exception  {  super . set up (  )  ;   intent i = get test intent ( ""imap: /  / user:password@server . com:999"" )  ;  set activity intent ( i )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\setup\AccountSetupIncomingTests.java,test bad server variants,"@ ui thread test public void   (  )  {  get activity and fields (  )  ;  assert true ( is next button enabled (  )  )  ;  m server view . set text ( "" "" )  ;  assert false ( is next button enabled (  )  )  ;  m server view . set text ( ""serv$er . com"" )  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\setup\AccountSetupIncomingTests.java,test bad uri no password,"public void   (  )  throws uri syntax exception  {   intent i = get test intent ( ""imap: /  / user@server . com:999"" )  ;  set activity intent ( i )  ;  get activity and fields (  )  ;  assert false ( is next button enabled (  )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\setup\AccountSetupIncomingTests.java,test bad uri no user,"public void   (  )  throws uri syntax exception  {   intent i = get test intent ( ""imap: /  / :password@server . com:999"" )  ;  set activity intent ( i )  ;  get activity and fields (  )  ;  assert false ( is next button enabled (  )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\setup\AccountSetupIncomingTests.java,test good server variants,"@ ui thread test public void   (  )  {  get activity and fields (  )  ;  assert true ( is next button enabled (  )  )  ;  m server view . set text ( "" server . com "" )  ;  assert true ( is next button enabled (  )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\setup\AccountSetupIncomingTests.java,test good uri,"public void   (  )  throws uri syntax exception  {   intent i = get test intent ( ""imap: /  / user:password@server . com:999"" )  ;  set activity intent ( i )  ;  get activity and fields (  )  ;  assert true ( is next button enabled (  )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\setup\AccountSetupIncomingTests.java,test good uri no port,"public void   (  )  throws uri syntax exception  {   intent i = get test intent ( ""imap: /  / user:password@server . com"" )  ;  set activity intent ( i )  ;  get activity and fields (  )  ;  assert true ( is next button enabled (  )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\setup\AccountSetupIncomingTests.java,test password no trim,"@ ui thread test public void   (  )  throws uri syntax exception  {  get activity and fields (  )  ;  check password ( null false )  ;  check password ( "" leading"" true )  ;  check password ( ""trailing "" true )  ;  check password ( ""em bedded"" true )  ;  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\ControllerProviderOpsTests.java, controller provider ops tests,public   (  )  {  super (  email provider . class  email content . authority )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\ControllerProviderOpsTests.java,set up,@ override public void   (  )  throws  exception  {  super . set up (  )  ;  m provider context = get mock context (  )  ;  m context = get context (  )  ;   content cache . invalidate all caches (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\ControllerProviderOpsTests.java,tear down,@ override public void   (  )  throws  exception  {  super . tear down (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\ControllerProviderOpsTests.java,test get mailbox server name,"public void   (  )  {  try  {   mailbox . get system mailbox name ( m context  - 1 )  ;  fail ( "" mailbox . get system mailbox name ( m context   - 1 )  succeeded without an exception"" )  ;   }  catch  (   illegal argument exception e )   {   }  assert equals ( "" inbox""  mailbox . get system mailbox name ( m context  mailbox . type   inbox )  )  ;  assert equals ( "" outbox""  mailbox . get system mailbox name ( m context  mailbox . type   outbox )  )  ;  assert equals ( "" trash""  mailbox . get system mailbox name ( m context  mailbox . type   trash )  )  ;  assert equals ( "" sent""  mailbox . get system mailbox name ( m context  mailbox . type   sent )  )  ;  assert equals ( "" junk""  mailbox . get system mailbox name ( m context  mailbox . type   junk )  )  ;   locale saved locale =  locale . get default (  )  ;   locale . set default (  locale . france )  ;  assert equals ( "" inbox""  mailbox . get system mailbox name ( m context  mailbox . type   inbox )  )  ;  assert equals ( "" outbox""  mailbox . get system mailbox name ( m context  mailbox . type   outbox )  )  ;  assert equals ( "" trash""  mailbox . get system mailbox name ( m context  mailbox . type   trash )  )  ;  assert equals ( "" sent""  mailbox . get system mailbox name ( m context  mailbox . type   sent )  )  ;  assert equals ( "" junk""  mailbox . get system mailbox name ( m context  mailbox . type   junk )  )  ;   locale . set default ( saved locale )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\setup\AccountSettingsUtilsTests.java,brokentest guess server name,"public void   (  )  {  assert equals ( ""foo . x . y . z""  account settings utils . infer server name ( m test context ""x . y . z"" ""foo"" null )  )  ;  assert equals ( "" pop . y . z""  account settings utils . infer server name ( m test context "" pop . y . z"" ""foo"" null )  )  ;  assert equals ( ""pop3 . y . z""  account settings utils . infer server name ( m test context ""pop3 . y . z"" ""foo"" null )  )  ;  assert equals ( ""im ap . y . z""  account settings utils . infer server name ( m test context ""im ap . y . z"" ""foo"" null )  )  ;  assert equals ( "" mail . y . z""  account settings utils . infer server name ( m test context "" mail . y . z"" ""foo"" null )  )  ;  assert equals ( ""bar . x . y . z""  account settings utils . infer server name ( m test context ""x . y . z"" null ""bar"" )  )  ;  assert equals ( ""bar . y . z""  account settings utils . infer server name ( m test context "" pop . y . z"" null ""bar"" )  )  ;  assert equals ( ""bar . y . z""  account settings utils . infer server name ( m test context ""pop3 . y . z"" null ""bar"" )  )  ;  assert equals ( ""bar . y . z""  account settings utils . infer server name ( m test context ""im ap . y . z"" null ""bar"" )  )  ;  assert equals ( "" mail . y . z""  account settings utils . infer server name ( m test context "" mail . y . z"" null ""bar"" )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\setup\AccountSettingsUtilsTests.java,set up,@ override protected void   (  )  throws  exception  {  super . set up (  )  ;  m test context = get instrumentation (  )  . get context (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\setup\AccountSettingsUtilsTests.java,test expand templates,"public void   (  )  {   provider test provider ;  test provider = new  provider (  )  ;  test provider . domain = ""cox . net"" ;  test provider . incoming uri template = ""pop3 + ssl + : /  / pop . east . $domain"" ;  test provider . outgoing uri template = ""smtp + ssl + : /  / smtp . east . $domain"" ;  test provider . incoming username template = ""$user"" ;  test provider . outgoing username template = ""$user"" ;  test provider . expand templates ( ""repl user@cox . net"" )  ;  assert equals ( ""repl user"" test provider . incoming username )  ;  assert equals ( ""repl user"" test provider . outgoing username )  ;  assert equals ( ""pop3 + ssl + : /  / pop . east . cox . net"" test provider . incoming uri )  ;  assert equals ( ""smtp + ssl + : /  / smtp . east . cox . net"" test provider . outgoing uri )  ;  test provider = new  provider (  )  ;  test provider . domain = ""earthlink . net"" ;  test provider . incoming uri template = ""pop3: /  / pop . earthlink . net"" ;  test provider . outgoing uri template = ""smtp: /  / smtpauth . earthlink . net:587"" ;  test provider . incoming username template = ""$email"" ;  test provider . outgoing username template = ""$email"" ;  test provider . expand templates ( ""repl user@earthlink . net"" )  ;  assert equals ( ""repl user@earthlink . net"" test provider . incoming username )  ;  assert equals ( ""repl user@earthlink . net"" test provider . outgoing username )  ;  assert equals ( ""pop3: /  / pop . earthlink . net"" test provider . incoming uri )  ;  assert equals ( ""smtp: /  / smtpauth . earthlink . net:587"" test provider . outgoing uri )  ;  test provider = new  provider (  )  ;  test provider . domain = ""tuffmail . com"" ;  test provider . incoming uri template = ""imap + ssl + : /  / mail . mxes . net"" ;  test provider . outgoing uri template = ""smtp + ssl + : /  / smtp . mxes . net"" ;  test provider . incoming username template = ""$user   $domain"" ;  test provider . outgoing username template = ""$user   $domain"" ;  test provider . expand templates ( ""repl user@tuffmail . com"" )  ;  assert equals ( ""repl user   tuffmail . com"" test provider . incoming username )  ;  assert equals ( ""repl user   tuffmail . com"" test provider . outgoing username )  ;  assert equals ( ""imap + ssl + : /  / mail . mxes . net"" test provider . incoming uri )  ;  assert equals ( ""smtp + ssl + : /  / smtp . mxes . net"" test provider . outgoing uri )  ;  test provider = new  provider (  )  ;  test provider . domain = ""yahoo . com"" ;  test provider . incoming uri template = ""imap + ssl + : /  / pop . yahoo . com"" ;  test provider . outgoing uri template = ""smtp + ssl + : /  / smtp . yahoo . com"" ;  test provider . incoming username template = ""joe   smith"" ;  test provider . outgoing username template = ""joe   smith"" ;  test provider . expand templates ( ""repl user@yahoo . com"" )  ;  assert equals ( ""joe   smith"" test provider . incoming username )  ;  assert equals ( ""joe   smith"" test provider . outgoing username )  ;  assert equals ( ""imap + ssl + : /  / pop . yahoo . com"" test provider . incoming uri )  ;  assert equals ( ""smtp + ssl + : /  / smtp . yahoo . com"" test provider . outgoing uri )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\setup\AccountSettingsUtilsTests.java,test find provider for domain,"public void   (  )  {   provider test provider ;  test provider =  account settings utils . find provider for domain ( m test context ""gmail . com"" r . xml . test   providers )  ;  assert not null ( test provider )  ;  assert equals ( ""imap + ssl + : /  / imap . gmail . com"" test provider . incoming uri template )  ;  assert equals ( ""smtp + ssl + : /  / smtp . gmail . com"" test provider . outgoing uri template )  ;  assert equals ( ""gmail . com"" test provider . domain )  ;  test provider =  account settings utils . find provider for domain ( m test context ""elmore . rr . com"" r . xml . test   providers )  ;  assert not null ( test provider )  ;  assert equals ( ""pop3: /  / pop - server . $domain"" test provider . incoming uri template )  ;  assert equals ( ""smtp: /  / mobile - smtp . roadrunner . com"" test provider . outgoing uri template )  ;  assert equals ( ""elmore . rr . com"" test provider . domain )  ;  test provider =  account settings utils . find provider for domain ( m test context ""leonard . rr . com"" r . xml . test   providers )  ;  assert not null ( test provider )  ;  assert equals ( ""pop3: /  / pop - server . firstonewins . com"" test provider . incoming uri template )  ;  test provider =  account settings utils . find provider for domain ( m test context ""nonexist . com"" r . xml . test   providers )  ;  assert null ( test provider )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\setup\AccountSettingsUtilsTests.java,test match provider,"public void   (  )  {  assert true (  account settings utils . match provider ( ""foo . com"" ""foo . com"" )  )  ;  assert false (  account settings utils . match provider ( ""foo . co"" ""foo . com"" )  )  ;  assert false (  account settings utils . match provider ( """" ""foo . com"" )  )  ;  assert true (  account settings utils . match provider ( ""foo . com"" ""fo ?  . com"" )  )  ;  assert true (  account settings utils . match provider ( ""foo . com"" ""f ?  ?  . com"" )  )  ;  assert true (  account settings utils . match provider ( ""fzz . com"" ""f ?  ?  . com"" )  )  ;  assert true (  account settings utils . match provider ( ""foo . com"" "" ?  ?  ?  .  ?  ?  ? "" )  )  ;  assert false (  account settings utils . match provider ( ""foo . com"" "" ?  ?  ?  .  ?  ?  ?  ? "" )  )  ;  assert true (  account settings utils . match provider ( ""foo . com"" ""* . com"" )  )  ;  assert true (  account settings utils . match provider ( ""foo . com"" ""foo . *"" )  )  ;  assert true (  account settings utils . match provider ( ""foo . com"" ""* . *"" )  )  ;  assert false (  account settings utils . match provider ( ""foo . com"" ""fox . *"" )  )  ;  assert true (  account settings utils . match provider ( ""foo . com"" ""* .  ?  ?  ? "" )  )  ;  assert false (  account settings utils . match provider ( ""foo . com"" ""* .  ? "" )  )  ;  assert false (  account settings utils . match provider ( ""foo . bar . com"" ""food . barge . comb"" )  )  ;  assert true (  account settings utils . match provider ( ""foo . bar . com"" ""foo . bar . com"" )  )  ;  assert false (  account settings utils . match provider ( ""foo . bar . com"" ""foo . bar . gag . com"" )  )  ;  assert true (  account settings utils . match provider ( ""foo . bar . com"" ""foo . * . com"" )  )  ;  assert true (  account settings utils . match provider ( ""foo . bar . com"" ""foo . * . *"" )  )  ;  assert false (  account settings utils . match provider ( ""foo . bar . com"" ""foo . bar . * . *"" )  )  ;  assert false (  account settings utils . match provider ( ""foo . bar . com"" ""foo . bar . *com"" )  )  ;  assert true (  account settings utils . match provider ( ""foo . bar . com"" ""* . bar . com"" )  )  ;  assert true (  account settings utils . match provider ( ""foo . bar . com"" ""* . * . com"" )  )  ;  assert true (  account settings utils . match provider ( ""foo . bar . com"" ""* . * . *"" )  )  ;  assert true (  account settings utils . match provider ( ""foo . bar . com"" ""foo . bar . *"" )  )  ;  assert true (  account settings utils . match provider ( ""foo . bar . com"" ""foo .  ?  ?  ?  . *"" )  )  ;  assert false (  account settings utils . match provider ( ""foo . bar . com"" ""foo . * ?  ?  . *"" )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\DBTestHelper.java, easy mock cursor,public   ( int count )  {  m count = count ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\DBTestHelper.java, mock context,public   (  context base context )  {  m base context = base context ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\DBTestHelper.java, my context,public   (  )  {  m provider = new  my provider (  )  ;  m content resolver = new  mock content resolver (  )  ;  m content resolver . add provider (  email content . authority m provider )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\DBTestHelper.java, my isolated context,public   (  content resolver resolver  context target context  context real context )  {  super ( resolver target context )  ;  m real context = real context ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\DBTestHelper.java,close,@ override public void   (  )  {  m closed = true ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\DBTestHelper.java,delete,@ override public int   (  uri uri  string selection  string[] selection args )  {  throw new  unsupported operation exception (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\DBTestHelper.java,get application context,@ override public  context   (  )  {  return this ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\DBTestHelper.java,get content resolver,@ override public  content resolver   (  )  {  return m content resolver ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\DBTestHelper.java,get count,@ override public int   (  )  {  return m count ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\DBTestHelper.java,get dir,"@ override public  file   (  string name int mode )  {  return m base context . get dir ( ""mockcontext2   ""  +  name mode )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\DBTestHelper.java,get my provider,public  my provider   (  )  {  return m provider ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\DBTestHelper.java,get package name,@ override public  string   (  )  {  return m real context . get package name (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\DBTestHelper.java,get provider context,"public static  context   (  context context )  throws  exception  {   mock content resolver resolver = new  mock content resolver (  )  ;  final  string filename prefix = ""test . "" ;   renaming delegating context target context wrapper = new  renaming delegating context ( new  mock context2 ( context )  context filename prefix )  ;  final  context provider context = new  my isolated context ( resolver target context wrapper context )  ;  provider context . get content resolver (  )  ;  final  email provider ep = new  email provider (  )  ;  ep . attach info ( provider context null )  ;  resolver . add provider (  email content . authority ep )  ;  final  attachment provider ap = new  attachment provider (  )  ;  ap . attach info ( provider context null )  ;  resolver . add provider (  attachment . attachment   provider   legacy   uri   prefix ap )  ;   content cache . invalidate all caches (  )  ;  return provider context ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\DBTestHelper.java,get resources,@ override public  resources   (  )  {  return m base context . get resources (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\DBTestHelper.java,get shared preferences,@ override public  shared preferences   (  string name int mode )  {  return new  mock shared preferences (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\DBTestHelper.java,get system service,@ override public  object   (  string name )  {  if  (  context . layout   inflater   service . equals ( name )  )   {  return m real context . get system service ( name )  ;   }  return super . get system service ( name )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\DBTestHelper.java,get theme,@ override public  theme   (  )  {  return m real context . get theme (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\DBTestHelper.java,get type,@ override public  string   (  uri uri )  {  throw new  unsupported operation exception (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\DBTestHelper.java,insert,@ override public  uri   (  uri uri  content values values )  {  throw new  unsupported operation exception (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\DBTestHelper.java,on create,@ override public boolean   (  )  {  throw new  unsupported operation exception (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\DBTestHelper.java,query,@ override public  cursor   (  uri uri  string[] projection  string selection  string[] selection args  string sort order )  {  m passed uri = uri ;  m passed projection = projection ;  m passed selection = selection ;  m passed selection args = selection
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\DBTestHelper.java,reset,public void   (  )  {  m query preset result = null ;  m passed uri = null ;  m passed projection = null ;  m passed selection = null ;  m passed selection args = null ;  m passed sort order = null ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\DBTestHelper.java,update,@ override public int   (  uri uri  content values values  string selection  string[] selection args )  {  throw new  unsupported operation exception (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\LegacyConversionsTest.java,set up,@ override protected void   (  )  throws  exception  {  super . set up (  )  ;   temp directory . set temp directory ( get context (  )  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\LegacyConversionsTest.java,test attachment round trip,"public void   (  )  throws  exception  {  final  context context = get context (  )  ;  final  mime multipart mp = new  mime multipart (  )  ;  mp . set sub type ( ""mixed"" )  ;  final long size ;  final  file temp dir = context . get cache dir (  )  ;  if  (  ! temp dir . is directory (  )  &&  ! temp dir . mkdirs (  )  )   {  fail ( "" could not create temporary directory"" )  ;   }  final  file temp attachment file =  file . create temp file ( ""test attachment round trip"" "" . txt"" temp dir )  ;  try  {  final  output stream att out = new  file output stream ( temp attachment file )  ;  try  {  att out . write ( "" test data"" . get bytes (  )  )  ;   }  finally  {  att out . close (  )  ;   }  size = temp attachment file . length (  )  ;  final  input stream att in = new  file input stream ( temp attachment file )  ;   legacy conversions . add attachment part ( mp ""text / plain"" size ""test . txt"" ""test content id"" att in )  ;   }  finally  {  if  (  ! temp attachment file . delete (  )  )   {  fail ( "" setup failure:  could not clean up temp file"" )  ;   }   }  final  mime message out message = new  mime message (  )  ;  out message . set body ( mp )  ;  final  mime message in message ;  final  file temp body file =  file . create temp file ( ""test attachment round trip"" "" . eml"" context . get cache dir (  )  )  ;  try  {  final  output stream body out = new  file output stream ( temp body file )  ;  try  {  out message . write to ( body out )  ;   }  finally  {  body out . close (  )  ;   }  final  input stream body in = new  file input stream ( temp body file )  ;  try  {  in message = new  mime message ( body in )  ;   }  finally  {  body in . close (  )  ;   }   }  finally  {  if  (  ! temp body file . delete (  )  )   {  fail ( "" setup failure:  could not clean up temp file"" )  ;   }   }  final  multipart in body =  (  multipart ) in message . get body (  )  ;  final  part att part = in body . get body part ( 0 )  ;  final  attachment att =  legacy conversions . mime part to attachment ( att part )  ;  assert equals ( att . m file name ""test . txt"" )  ;  assert equals ( att . m mime type ""text / plain"" )  ;  assert equals ( att . m size size )  ;  assert equals ( att . m content id ""test content id"" )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\LegacyConversionsTest.java,test update body fields null text,"public void   (  )  throws  messaging exception  {   array list <  part >  viewables = new  array list <  part >  (  )  ;  viewables . add ( new  mime body part ( null ""text / plain"" )  )  ;  final  body field data data =  conversion utilities . parse body fields ( viewables )  ;  assert null ( data . text content )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\LegacyConversionsTest.java,test update message fields    basic,"public void   (  )  throws  messaging exception  {  final  mime message message = new  mime message (  )  ;  message . set uid ( ""uid . 12345678"" )  ;  message . set sent date ( new  date ( 1 )  )  ;  message . set message id ( "" test -  message - id"" )  ;  message . set subject ( "" this is the subject"" )  ;  final  email content .  message local message = new  email content .  message (  )  ;  final boolean result =  legacy conversions . update message fields ( local message message 1 1 )  ;  assert true ( result )  ;  assert equals ( message . get uid (  )  local message . m server id )  ;  assert equals ( message . get subject (  )  local message . m subject )  ;  assert equals ( message . get message id (  )  local message . m message id )  ;  assert equals ( message . get sent date (  )  . get time (  )  local message . m time stamp )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\LegacyConversionsTest.java,test update message fields    encoded addresses,"public void   (  )  throws  messaging exception  {  final  string e = "" =  ? euc - kr ? b ? uvg50 ln4yko4pg =  =  ?  = "" ;  final  string d = ""\ube44\ubc00\ubc88\ud638\ub97c"" ;   string from list =  string . format ( ""%s  < sender@droid . com > "" e )  ;   string reply to list =  string . format ( ""%s  < reply1@droid . com >  %s  < reply2@droid . com > "" e e )  ;   string to list =  string . format ( ""%s  < toa@droid . com >  %s  < tob@droid . com > "" e e )  ;   string cc list =  string . format ( ""%s  < cca@droid . com >  %s  < ccb@droid . com > "" e e )  ;   string bcc list =  string . format ( ""%s  < bcca@droid . com >  %s  < bccb@droid . com > "" e e )  ;  final  address from =  address . from header ( from list ) [0] ;  final  address[] replies =  address . from header ( reply to list )  ;  final  address[] tos =  address . from header ( to list )  ;  final  address[] ccs =  address . from header ( cc list )  ;  final  address[] bccs =  address . from header ( bcc list )  ;  final  mime message message = new  mime message (  )  ;  message . set from ( from )  ;  message . set reply to ( replies )  ;  message . set recipients (  recipient type . to tos )  ;  message . set recipients (  recipient type . cc ccs )  ;  message . set recipients (  recipient type . bcc bccs )  ;  final  email content .  message local message = new  email content .  message (  )  ;  final boolean result =  legacy conversions . update message fields ( local message message 1 1 )  ;  assert true ( result )  ;   string decoded from =  string . format ( ""%s  < sender@droid . com > "" d )  ;   string decoded reply =  string . format ( ""%s  < reply1@droid . com >  %s  < reply2@droid . com > "" d d )  ;   string decoded to =  string . format ( ""%s  < toa@droid . com >  %s  < tob@droid . com > "" d d )  ;   string decoded cc =  string . format ( ""%s  < cca@droid . com >  %s  < ccb@droid . com > "" d d )  ;   string decoded bcc =  string . format ( ""%s  < bcca@droid . com >  %s  < bccb@droid . com > "" d d )  ;  assert equals ( decoded from local message . m from )  ;  assert equals ( decoded reply local message . m reply to )  ;  assert equals ( decoded to local message . m to )  ;  assert equals ( decoded cc local message . m cc )  ;  assert equals ( decoded bcc local message . m bcc )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\LegacyConversionsTest.java,test update message fields    no message id,"public void   (  )  throws  messaging exception  {  final  mime message message = new  mime message (  )  ;  message . set message id ( "" test -  message - id"" )  ;  message . remove header ( "" message - id"" )  ;  final  email content .  message local message = new  email content .  message (  )  ;  local message . m message id = "" test -  message - id -  second"" ;  final boolean result =  legacy conversions . update message fields ( local message message 1 1 )  ;  assert true ( result )  ;  assert equals ( "" test -  message - id -  second"" local message . m message id )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\LegacyConversionsTest.java,test update message fields    plain addresses,"public void   (  )  throws  messaging exception  {  final  string from list = "" sender  < sender@droid . com > "" ;  final  string reply to list = "" reply1  < reply1@droid . com >   reply2  < reply2@droid . com > "" ;  final  string to list = "" toa  < toa@droid . com >   tob  < tob@droid . com > "" ;  final  string cc list = "" cca  < cca@droid . com >   ccb  < ccb@droid . com > "" ;  final  string bcc list = "" bcca  < bcca@droid . com >   bcc2  < bccb@droid . com > "" ;  final  address from =  address . from header ( from list ) [0] ;  final  address[] replies =  address . from header ( reply to list )  ;  final  address[] tos =  address . from header ( to list )  ;  final  address[] ccs =  address . from header ( cc list )  ;  final  address[] bccs =  address . from header ( bcc list )  ;  final  mime message message = new  mime message (  )  ;  message . set from ( from )  ;  message . set reply to ( replies )  ;  message . set recipients (  recipient type . to tos )  ;  message . set recipients (  recipient type . cc ccs )  ;  message . set recipients (  recipient type . bcc bccs )  ;  final  email content .  message local message = new  email content .  message (  )  ;  final boolean result =  legacy conversions . update message fields ( local message message 1 1 )  ;  assert true ( result )  ;  assert equals ( from list local message . m from )  ;  assert equals ( reply to list local message . m reply to )  ;  assert equals ( to list local message . m to )  ;  assert equals ( cc list local message . m cc )  ;  assert equals ( bcc list local message . m bcc )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\imap\ImapElementTest.java,test none,public void   (  )  {  assert false (  imap element . none . is list (  )  )  ;  assert false (  imap element . none . is string (  )  )  ;  assert true (  imap element . none . equals for test (  imap element . none )  )  ;  assert false (  imap element . none . equals for test ( null )  )  ;  assert false (  imap element . none . equals for test (  imap test utils . string   1 )  )  ;  assert false (  imap element . none . equals for test (  imap test utils . list   1 )  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\LegacyConversionsTests.java, legacy conversions tests,public   (  )  {  super (  email provider . class  email content . authority )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\LegacyConversionsTests.java,brokentest add attachments,"public void   (  )  throws  messaging exception  io exception  {  final long account id = 1 ;  final long mailbox id = 1 ;  final  email content .  message local message =  provider test utils . setup message ( ""local - message"" account id mailbox id false true m provider context )  ;  final  message legacy message = prepare legacy message with attachments ( 2 false )  ;  convert and checkcheck added attachments ( local message legacy message )  ;  final  email content .  message local message2 =  provider test utils . setup message ( ""local - message"" account id mailbox id false true m provider context )  ;  final  message legacy message2 = prepare legacy message with attachments ( 2 true )  ;  convert and checkcheck added attachments ( local message2 legacy message2 )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\LegacyConversionsTests.java,brokentest add duplicate attachments,"public void   (  )  throws  messaging exception  io exception  {  final long account id = 1 ;  final long mailbox id = 1 ;  final  email content .  message local message =  provider test utils . setup message ( ""local - message"" account id mailbox id false true m provider context )  ;   message legacy message = prepare legacy message with attachments ( 2 false )  ;   array list <  part >  viewables = new  array list <  part >  (  )  ;   array list <  part >  attachments = new  array list <  part >  (  )  ;   mime utility . collect parts ( legacy message viewables attachments )  ;   legacy conversions . update attachments ( m provider context local message attachments )  ;   uri uri =  content uris . with appended id (  attachment . message   id   uri local message . m id )  ;  assert equals ( 2  email content . count ( m provider context uri null null )  )  ;   legacy conversions . update attachments ( m provider context local message attachments )  ;  assert equals ( 2  email content . count ( m provider context uri null null )  )  ;  legacy message = prepare legacy message with attachments ( 4 false )  ;  viewables = new  array list <  part >  (  )  ;  attachments = new  array list <  part >  (  )  ;   mime utility . collect parts ( legacy message viewables attachments )  ;   legacy conversions . update attachments ( m provider context local message attachments )  ;  assert equals ( 4  email content . count ( m provider context uri null null )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\LegacyConversionsTests.java,brokentest attachment dispositions,"public void   (  )  throws  messaging exception  io exception  {  final long account id = 1 ;  final long mailbox id = 1 ;   body part[] source attachments = new  body part[3] ;   body part attachment part ;  attachment part =  message test utils . body part ( ""image / jpg"" null )  ;  attachment part . set header (  mime header . header   content   type ""image / jpg"" )  ;  attachment part . set header (  mime header . header   content   transfer   encoding ""base64"" )  ;  attachment part . set header (  mime header . header   content   disposition ""attachment ; \n filename = \""file - 1\"" ; \n size = 100"" )  ;  attachment part . set header (  mime header . header   android   attachment   store   data ""100"" )  ;  source attachments[0] = attachment part ;  attachment part =  message test utils . body part ( ""image / gif"" null )  ;  attachment part . set header (  mime header . header   content   type ""image / gif"" )  ;  attachment part . set header (  mime header . header   content   transfer   encoding ""base64"" )  ;  attachment part . set header (  mime header . header   content   disposition ""inline ; \n filename = \""file - 2\"" ; \n size = 200"" )  ;  attachment part . set header (  mime header . header   android   attachment   store   data ""101"" )  ;  source attachments[1] = attachment part ;  attachment part =  message test utils . body part ( ""text / calendar"" null )  ;  attachment part . set header (  mime header . header   content   type ""text / calendar ;  charset = utf - 8 ;  method = request"" )  ;  attachment part . set header (  mime header . header   content   transfer   encoding ""7bit"" )  ;  attachment part . set header (  mime header . header   android   attachment   store   data ""102"" )  ;  source attachments[2] = attachment part ;  final  email content .  message local message =  provider test utils . setup message ( ""local - message"" account id mailbox id false true m provider context )  ;  final  message legacy message = prepare legacy message with attachments ( source attachments )  ;  convert and checkcheck added attachments ( local message legacy message )  ;  convert and checkcheck added attachments ( local message legacy message )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\LegacyConversionsTests.java,brokentest make legacy message,"public void   (  )  throws  messaging exception  {  long account1 id = 1 ;  long mailbox1 id = 1 ;   email content .  message local message1 =  provider test utils . setup message ( ""make - legacy"" account1 id mailbox1 id false true m provider context )  ;   message get message1 =  legacy conversions . make message ( m provider context local message1 )  ;  check legacy message ( ""no body"" local message1 get message1 )  ;   email content .  message local message2 =  provider test utils . setup message ( ""make - legacy"" account1 id mailbox1 id true false m provider context )  ;  local message2 . m flags& = ~ email content .  message . flag   type   mask ;  local message2 . save ( m provider context )  ;   message get message2 =  legacy conversions . make message ( m provider context local message2 )  ;  check legacy message ( ""simple body"" local message2 get message2 )  ;   email content .  message local message3 =  provider test utils . setup message ( ""make - legacy"" account1 id mailbox1 id true false m provider context )  ;  local message3 . m flags& = ~ email content .  message . flag   type   mask ;  local message3 . m flags| =  email content .  message . flag   type   reply ;  local message3 . save ( m provider context )  ;   message get message3 =  legacy conversions . make message ( m provider context local message3 )  ;  check legacy message ( ""reply - to"" local message3 get message3 )  ;   email content .  message local message4 =  provider test utils . setup message ( ""make - legacy"" account1 id mailbox1 id true false m provider context )  ;  local message4 . m flags& = ~ email content .  message . flag   type   mask ;  local message4 . m flags| =  email content .  message . flag   type   forward ;  local message4 . save ( m provider context )  ;   message get message4 =  legacy conversions . make message ( m provider context local message4 )  ;  check legacy message ( ""forwarding"" local message4 get message4 )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\LegacyConversionsTests.java,check attachment,"private void   (  string tag  part expected  email content .  attachment actual long account key )  throws  messaging exception  {   string content type =  mime utility . unfold and decode ( expected . get content type (  )  )  ;   string content type name =  mime utility . get header parameter ( content type ""name"" )  ;  assert equals ( tag expected . get mime type (  )  actual . m mime type )  ;   string disposition = expected . get disposition (  )  ;   string size string =  mime utility . get header parameter ( disposition ""size"" )  ;   string disposition filename =  mime utility . get header parameter ( disposition ""filename"" )  ;  long expected size =  ( size string  !  =  null )   ?   long . parse long ( size string )  : 0 ;  assert equals ( tag expected size actual . m size )  ;  assert equals ( tag expected . get content id (  )  actual . m content id )  ;   string expected name =  ( content type name  !  =  null )   ?  content type name : disposition filename ;  assert equals ( tag expected name actual . m file name )  ;  assert null ( tag actual . get content uri (  )  )  ;  assert true ( tag 0  !  =  actual . m message key )  ;   string expected part id = null ;   string[] store data = expected . get header (  mime header . header   android   attachment   store   data )  ;  if  ( store data  !  =  null && store data . length  >  0 )   {  expected part id = store data[0] ;   }  assert equals ( tag expected part id actual . m location )  ;  assert equals ( tag ""b"" actual . m encoding )  ;  assert equals ( tag account key actual . m account key )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\LegacyConversionsTests.java,check legacy message,"private void   (  string tag  email content .  message expect  message actual )  throws  messaging exception  {  assert equals ( tag expect . m server id actual . get uid (  )  )  ;  assert equals ( tag expect . m server time stamp actual . get internal date (  )  . get time (  )  )  ;  assert equals ( tag expect . m subject actual . get subject (  )  )  ;  assert equals ( tag expect . m from  address . to header ( actual . get from (  )  )  )  ;  assert equals ( tag expect . m time stamp actual . get sent date (  )  . get time (  )  )  ;  assert equals ( tag expect . m to  address . to header ( actual . get recipients (  recipient type . to )  )  )  ;  assert equals ( tag expect . m cc  address . to header ( actual . get recipients (  recipient type . cc )  )  )  ;  assert equals ( tag expect . m bcc  address . to header ( actual . get recipients (  recipient type . bcc )  )  )  ;  assert equals ( tag expect . m reply to  address . to header ( actual . get reply to (  )  )  )  ;  assert equals ( tag expect . m message id actual . get message id (  )  )  ;  assert equals ( tag expect . m flag read actual . is set (  flag . seen )  )  ;  assert equals ( tag expect . m flag favorite actual . is set (  flag . flagged )  )  ;   array list <  part >  viewables = new  array list <  part >  (  )  ;   array list <  part >  attachments = new  array list <  part >  (  )  ;   mime utility . collect parts ( actual viewables attachments )  ;   string get1 text = null ;   string get1 html = null ;  for  (   part viewable : viewables )   {   string text =  mime utility . get text from part ( viewable )  ;  if  ( viewable . get mime type (  )  . equals ignore case ( ""text / html"" )  )   {  get1 html = text ;   }  else  {  get1 text = text ;   }   }  assert equals ( tag expect . m text get1 text )  ;  assert equals ( tag expect . m html get1 html )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\LegacyConversionsTests.java,convert and checkcheck added attachments,"private void   ( final  email content .  message local message final  message legacy message )  throws  messaging exception  io exception  {   array list <  part >  viewables = new  array list <  part >  (  )  ;   array list <  part >  attachments = new  array list <  part >  (  )  ;   mime utility . collect parts ( legacy message viewables attachments )  ;   legacy conversions . update attachments ( m provider context local message attachments )  ;   uri uri =  content uris . with appended id (  attachment . message   id   uri local message . m id )  ;   cursor c = m provider context . get content resolver (  )  . query ( uri  attachment . content   projection null null null )  ;  try  {  assert equals ( 2 c . get count (  )  )  ;  while  ( c . move to next (  )  )   {   attachment attachment =  attachment . get content ( m provider context c  attachment . class )  ;  if  ( ""100"" . equals ( attachment . m location )  )   {  check attachment ( ""attachment1 part"" attachments . get ( 0 )  attachment local message . m account key )  ;   }  else if  ( ""101"" . equals ( attachment . m location )  )   {  check attachment ( ""attachment2 part"" attachments . get ( 1 )  attachment local message . m account key )  ;   }  else  {  fail ( "" unexpected attachment with location ""  +  attachment . m location )  ;   }   }   }  finally  {  c . close (  )  ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\LegacyConversionsTests.java,prepare legacy message with attachments,"private  message   (  body part[] attachments )  throws  messaging exception  {   multipart builder mp builder = new  multipart builder ( ""multipart / mixed"" )  ;  for  ( int i = 0 ;  i  <  attachments . length ;   +  + i )   {  mp builder . add body part ( attachments[i] )  ;   }  final  message legacy message = new  message builder (  )  . set body ( new  multipart builder ( ""multipart / mixed"" )  . add body part (  message test utils . body part ( ""text / html"" null )  )  . add body part ( mp builder . build body part (  )  )  . build (  )  )  . build (  )  ;  return legacy message ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\LegacyConversionsTests.java,set up,@ override public void   (  )  throws  exception  {  super . set up (  )  ;  m provider context = get mock context (  )  ;  m context = get context (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\internet\EmailHtmlUtilTest.java,brokentest escape character to display plain text,"public void   (  )  {   string plain tags =  email html util . escape character to display ( text tags )  ;  assert equals ( ""plain tag"" ""&lt ; b&gt ;  plain&lt ;  / b&gt ;  &amp ; "" plain tags )  ;   string plain spaces =  email html util . escape character to display ( text spaces )  ;  assert equals ( ""plain spaces"" ""3 spaces&nbsp ; &nbsp ;  end . "" plain spaces )  ;   string plain newlines =  email html util . escape character to display ( text newlines )  ;  assert equals ( ""plain spaces"" ""ab  < br > &nbsp ;   < br > &nbsp ; &nbsp ;   < br >  < br > "" plain newlines )  ;   string text all = text tags  +  ""\n""  +  text spaces +  ""\n"" +  text newlines ;   string plain all =  email html util . escape character to display ( text all )  ;  assert equals ( ""plain all"" ""&lt ; b&gt ;  plain&lt ;  / b&gt ;  &amp ;  < br > ""  +  ""3 spaces&nbsp ; &nbsp ;  end .  < br > ""  +  ""ab  < br > &nbsp ;   < br > &nbsp ; &nbsp ;   < br >  < br > "" plain all )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\imap\ImapListTest.java,get keyed list or empty,"public void   (  )  {  final  imap string k1 = new  imap simple string ( "" key"" )  ;   imap list list = build list ( k1 list   1 )  ;  assert element ( list   1 list . get keyed list or empty ( ""key"" false )  )  ;  assert element ( list   1 list . get keyed list or empty ( ""key"" true )  )  ;  assert element (  imap list . empty list . get keyed list or empty ( ""ke"" false )  )  ;  assert element ( list   1 list . get keyed list or empty ( ""ke"" true )  )  ;  assert element (  imap list . empty list . get keyed list or empty ( ""ke"" )  )  ;  assert element ( list   1 list . get keyed list or empty ( ""key"" )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\imap\ImapListTest.java,get keyed string or empty,"public void   (  )  {  final  imap string k1 = new  imap simple string ( "" key"" )  ;   imap list list = build list ( k1 string   1 )  ;  assert element ( string   1 list . get keyed list or empty ( ""key"" false )  )  ;  assert element ( string   1 list . get keyed list or empty ( ""key"" true )  )  ;  assert element (  imap string . empty list . get keyed list or empty ( ""ke"" false )  )  ;  assert element ( string   1 list . get keyed list or empty ( ""ke"" true )  )  ;  assert element (  imap string . empty list . get keyed list or empty ( ""ke"" )  )  ;  assert element ( string   1 list . get keyed list or empty ( ""key"" )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\imap\ImapListTest.java,test basics,public void   (  )  {   imap list list = new  imap list (  )  ;  assert true ( list . is list (  )  )  ;  assert false ( list . is string (  )  )  ;  assert true ( list . is empty (  )  )  ;  assert equals ( 0 list . size (  )  )  ;  list . add ( string   1 )  ;  assert false ( list . is empty (  )  )  ;  assert equals ( 1 list . size (  )  )  ;  list . add ( string   2 )  ;  assert equals ( 2 list . size (  )  )  ;  list . add ( list   1 )  ;  assert equals ( 3 list . size (  )  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\imap\ImapListTest.java,test contains,"public void   (  )  {  final  imap string k1 = new  imap simple string ( ""ab cd"" )  ;  final  imap string k2 = new  imap simple string ( "" def"" )  ;  final  imap string k3 = new  imap simple string ( ""abc"" )  ;   imap list list = build list ( k1 k2 k3 )  ;  assert true ( list . contains ( ""abc"" )  )  ;  assert true ( list . contains ( ""abcd"" )  )  ;  assert true ( list . contains ( ""def"" )  )  ;  assert false ( list . contains ( """" )  )  ;  assert false ( list . contains ( ""a"" )  )  ;  assert false ( list . contains ( null )  )  ;  assert false ( list . contains ( null )  )  ;  assert false (  imap list . empty . contains ( null )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\imap\ImapListTest.java,test empty,public void   (  )  {  assert true (  imap list . empty . is empty (  )  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\imap\ImapListTest.java,test flatten,"public void   (  )  {  assert equals ( ""[]""  imap list . empty . flatten (  )  )  ;  assert equals ( ""[a bc]"" build list ( string   1 )  . flatten (  )  )  ;  assert equals ( ""[[]]"" build list (  imap list . empty )  . flatten (  )  )  ;  assert equals ( ""[a bc [ x y z] a bc]"" build list ( string   1 build list (  imap string . empty string   2 )  string   1 )  . flatten (  )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\imap\ImapListTest.java,test get element or none,public void   (  )  {   imap list list = build list (  imap list . empty string   1 list   1  imap string . empty )  ;  assert element (  imap list . empty list . get element or none ( 0 )  )  ;  assert element ( string   1 list . get element or none ( 1 )  )  ;  assert element ( list   1 list . get element or none ( 2 )  )  ;  assert element (  imap string . empty list . get element or none ( 3 )  )  ;  assert element (  imap element . none list . get element or none ( 4 )  )  ;  assert element (  imap element . none  imap list . empty . get element or none ( 0 )  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\imap\ImapListTest.java,test get keyed element or null,"public void   (  )  {  final  imap string k1 = new  imap simple string ( ""ab cd"" )  ;  final  imap string k2 = new  imap simple string ( "" def"" )  ;  final  imap string k3 = new  imap simple string ( ""abc"" )  ;   imap list list = build list ( k1 string   1 k2 k3 k3 string   2 )  ;  assert element ( null list . get keyed element or null ( ""ab"" false )  )  ;  assert element ( string   1 list . get keyed element or null ( ""abcd"" false )  )  ;  assert element ( k3 list . get keyed element or null ( ""def"" false )  )  ;  assert element ( string   2 list . get keyed element or null ( ""abc"" false )  )  ;  assert element ( string   1 list . get keyed element or null ( ""ab"" true )  )  ;  assert element ( string   1 list . get keyed element or null ( ""abcd"" true )  )  ;  assert element ( k3 list . get keyed element or null ( ""def"" true )  )  ;  assert element ( string   1 list . get keyed element or null ( ""abc"" true )  )  ;  assert element ( null list . get keyed element or null ( null false )  )  ;  assert null (  imap list . empty . get keyed element or null ( ""ab"" false )  )  ;  assert element ( null build list ( k1 )  . get keyed element or null ( ""abcd"" false )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\imap\ImapListTest.java,test get list or empty,public void   (  )  {   imap list list = build list (  imap list . empty string   1 list   1  imap string . empty )  ;  assert element (  imap list . empty list . get list or empty ( 0 )  )  ;  assert element (  imap list . empty list . get list or empty ( 1 )  )  ;  assert element ( list   1 list . get list or empty ( 2 )  )  ;  assert element (  imap list . empty list . get list or empty ( 3 )  )  ;  assert element (  imap list . empty list . get list or empty ( 4 )  )  ;  assert element (  imap list . empty  imap list . empty . get list or empty ( 0 )  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\imap\ImapListTest.java,test get string or empty,public void   (  )  {   imap list list = build list (  imap list . empty string   1 list   1  imap string . empty )  ;  assert element (  imap string . empty list . get string or empty ( 0 )  )  ;  assert element ( string   1 list . get string or empty ( 1 )  )  ;  assert element (  imap string . empty list . get string or empty ( 2 )  )  ;  assert element (  imap string . empty list . get string or empty ( 3 )  )  ;  assert element (  imap string . empty list . get string or empty ( 4 )  )  ;  assert element (  imap string . empty  imap list . empty . get string or empty ( 0 )  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\imap\ImapListTest.java,test is,"public void   (  )  {  final  imap string abc = new  imap simple string ( "" abc"" )  ;   imap list list = build list (  imap list . empty abc list   1  imap string . empty )  ;  assert false ( list . is ( 0 ""abc"" )  )  ;  assert false ( list . is ( 1 ""ab"" )  )  ;  assert true ( list . is ( 1 ""abc"" )  )  ;  assert false ( list . is ( 2 ""abc"" )  )  ;  assert false ( list . is ( 3 ""abc"" )  )  ;  assert false ( list . is ( 4 ""abc"" )  )  ;  assert false ( list . is ( 0 ""ab"" false )  )  ;  assert false ( list . is ( 1 ""ab"" false )  )  ;  assert true ( list . is ( 1 ""abc"" false )  )  ;  assert false ( list . is ( 2 ""ab"" false )  )  ;  assert false ( list . is ( 3 ""ab"" false )  )  ;  assert false ( list . is ( 4 ""ab"" false )  )  ;  assert false ( list . is ( 0 ""ab"" true )  )  ;  assert true ( list . is ( 1 ""ab"" true )  )  ;  assert true ( list . is ( 1 ""abc"" true )  )  ;  assert false ( list . is ( 2 ""ab"" true )  )  ;  assert false ( list . is ( 3 ""ab"" true )  )  ;  assert false ( list . is ( 4 ""ab"" true )  )  ;  assert false ( list . is ( 0 null false )  )  ;  assert false (  imap list . empty . is ( 0 ""abc"" )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\imap\ImapResponseParserTest.java,expect messaging exception,"private static void   (  string response )  throws  exception  {  final  imap response parser p = generate parser ( 100000 response )  ;  try  {  p . read response (  )  ;  fail ( "" didn't throw  exception: response = '""  +  response  +  ""'"" )  ;   }  catch  (   messaging exception ok )   {  return ;   }  catch  (  io exception ok )   {  return ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\imap\ImapResponseParserTest.java,generate parser,private static  imap response parser   ( int literal keep in memory threshold  string responses )  {  return new  imap response parser ( new  byte array input stream (  utility . to ascii ( responses )  )  new  discourse logger ( 4 )  literal keep in memory threshold )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\imap\ImapResponseParserTest.java,set up,@ override protected void   (  )  throws  exception  {  super . set up (  )  ;   temp directory . set temp directory ( get context (  )  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\imap\ImapResponseParserTest.java,test alert,"public void   (  )  throws  exception  {   imap response r ;  final  imap response parser p = generate parser ( 100000 ""* ok [alert]\r\n""  +  ""* ok [alert] alert  (  message  )  %*\r\n""  +  ""* ok [abc] not alert\r\n"" )  ;  r = p . read response (  )  ;  assert true ( r . is ok (  )  )  ;  assert true ( r . get alert text or empty (  )  . is empty (  )  )  ;  r = p . read response (  )  ;  assert true ( r . is ok (  )  )  ;  assert equals ( ""alert  (  message  )  %*"" r . get alert text or empty (  )  . get string (  )  )  ;  r = p . read response (  )  ;  assert true ( r . is ok (  )  )  ;  assert true ( r . get alert text or empty (  )  . is empty (  )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\imap\ImapResponseParserTest.java,test bare lf,"public void   (  )  throws  exception  {   imap response r ;   imap response parser p = generate parser ( 3 ""* a b\n""  +  ""* x y\r\n"" )  ;  r = p . read response (  )  ;  assert element ( build response ( null false new  imap simple string ( ""a"" )  new  imap simple string ( ""b"" )  )  r )  ;  r = p . read response (  )  ;  assert element ( build response ( null false new  imap simple string ( ""x"" )  new  imap simple string ( ""y"" )  )  r )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\imap\ImapResponseParserTest.java,test basic,"public void   (  )  throws  exception  {   imap response r ;  final  imap response parser p = generate parser ( 100000 ""* status \""inbox\""  ( unseen 2 ) \r\n""  +  ""100 ok status completed\r\n""  +  "" +  continuation request +  ( \r\n"" +  ""* status  { 5 } \r\n"" +  ""in%ox  ( unseen 10 )  \""a b c\""\r\n"" +  ""101 ok status completed % !  ( \r\n"" +  ""102 ok 1\r\n"" +  ""* 1 fetch\r\n"" +  ""103 ok\r\n"" +  ""* a\r\n"" )  ;  r = p . read response (  )  ;  assert element ( build response ( null false new  imap simple string ( ""status"" )  new  imap simple string ( ""inbox"" )  build list ( new  imap simple string ( ""unseen"" )  new  imap simple string ( ""2"" )  )  )  r )  ;  r = p . read response (  )  ;  assert element ( build response ( ""100"" false new  imap simple string ( ""ok"" )  new  imap simple string ( ""status completed"" )  )  r )  ;  r = p . read response (  )  ;  assert element ( build response ( null true new  imap simple string ( ""continuation request +  ( "" )  )  r )  ;  r = p . read response (  )  ;  assert element ( build response ( null false new  imap simple string ( ""status"" )  new  imap memory literal ( create fixed length input stream ( ""in%ox"" )  )  build list ( new  imap simple string ( ""unseen"" )  new  imap simple string ( ""10"" )  )  new  imap simple string ( ""a b c"" )  )  r )  ;  r = p . read response (  )  ;  assert element ( build response ( ""101"" false new  imap simple string ( ""ok"" )  new  imap simple string ( ""status completed % !  ( "" )  )  r )  ;  r = p . read response (  )  ;  assert element ( build response ( ""102"" false new  imap simple string ( ""ok"" )  new  imap simple string ( ""1"" )  )  r )  ;  r = p . read response (  )  ;  assert element ( build response ( null false new  imap simple string ( ""1"" )  new  imap simple string ( ""fetch"" )  )  r )  ;  r = p . read response (  )  ;  assert element ( build response ( ""103"" false new  imap simple string ( ""ok"" )  )  r )  ;  r = p . read response (  )  ;  assert element ( build response ( null false new  imap simple string ( ""a"" )  )  r )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\imap\ImapResponseParserTest.java,test bracket,"public void   (  )  throws  exception  {   imap response r ;  final  imap response parser p = generate parser ( 100000 ""* aaa body[header . fields  ( \""date\"" \""subject\"" ) ]\r\n""  +  ""* bbb b[a b c]d e f\r\n"" )  ;  r = p . read response (  )  ;  assert equals ( ""body[header . fields  ( \""date\"" \""subject\"" ) ]"" r . get string or empty ( 1 )  . get string (  )  )  ;  r = p . read response (  )  ;  assert equals ( ""b[a b c]d"" r . get string or empty ( 1 )  . get string (  )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\imap\ImapResponseParserTest.java,test bye received,"public void   (  )  throws  exception  {  final  imap response parser p = generate parser ( 100000 ""* bye  autologout timer ;  idle for too long\r\n"" )  ;  try  {  p . read response (  )  ;  fail ( "" didn't throw  bye exception"" )  ;   }  catch  (   bye exception ok )   {   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\imap\ImapResponseParserTest.java,test expect,"public void   (  )  throws  exception  {  final  imap response parser p = generate parser ( 100000 ""abc"" )  ;  p . expect ( 'a' )  ;  p . expect ( 'b' )  ;  try  {  p . expect ( 'c' )  ;  fail (  )  ;   }  catch  (  io exception e )   {   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\imap\ImapResponseParserTest.java,test literal,"public void   (  )  throws  exception  {   imap response r ;   imap response parser p = generate parser ( 3 ""* test  { 3 } \r\n""  +  ""abc\r\n"" )  ;  r = p . read response (  )  ;  assert element ( build response ( null false new  imap simple string ( ""test"" )  new  imap memory literal ( create fixed length input stream ( ""abc"" )  )  )  r )  ;  p = generate parser ( 2 ""* test  { 3 } \r\n""  +  ""abc\r\n"" )  ;  r = p . read response (  )  ;  assert element ( build response ( null false new  imap simple string ( ""test"" )  new  imap temp file literal ( create fixed length input stream ( ""abc"" )  )  )  r )  ;  p = generate parser ( 0 ""* test  { 3 } \r\n""  +  ""abc  { 4 } \r\n""  +  ""wxyz\r\n"" )  ;  r = p . read response (  )  ;  assert element ( build response ( null false new  imap simple string ( ""test"" )  new  imap temp file literal ( create fixed length input stream ( ""abc"" )  )  new  imap temp file literal ( create fixed length input stream ( ""wxyz"" )  )  )  r )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\imap\ImapResponseParserTest.java,test literal string conversion,"public void   (  )  throws  exception  {   imap response r ;  final  imap response parser p = generate parser ( 100000 ""* xxx  { 5 } \r\n""  +  ""a b c\r\n"" )  ;  assert equals ( ""a b c"" p . read response (  )  . get string or empty ( 1 )  . get string (  )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\imap\ImapResponseParserTest.java,test malformed response,"public void   (  )  throws  exception  {  expect messaging exception ( """" )  ;  expect messaging exception ( ""\r"" )  ;  expect messaging exception ( ""\r\n"" )  ;  expect messaging exception ( ""*\r\n"" )  ;  expect messaging exception ( ""1\r\n"" )  ;  expect messaging exception ( ""* \r\n"" )  ;  expect messaging exception ( ""1 \r\n"" )  ;  expect messaging exception ( ""* a  ( \r\n"" )  ;  expect messaging exception ( ""* a  ) \r\n"" )  ;  expect messaging exception ( ""* a  (  (  ) \r\n"" )  ;  expect messaging exception ( ""* a  (  )  ) \r\n"" )  ;  expect messaging exception ( ""* a [\r\n"" )  ;  expect messaging exception ( ""* a ]\r\n"" )  ;  expect messaging exception ( ""* a [[]\r\n"" )  ;  expect messaging exception ( ""* a []]\r\n"" )  ;  expect messaging exception ( ""* a  ( [ ) ]\r\n"" )  ;  expect messaging exception ( ""* a"" )  ;  expect messaging exception ( ""*  { 3 } "" )  ;  expect messaging exception ( ""*  { 3 } \r\nab"" )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\imap\ImapResponseParserTest.java,test nest,"public void   (  )  throws  exception  {   imap response r ;  final  imap response parser p = generate parser ( 100000 ""* a  ( a b  (  )  def )   ( a  ( ab )  )   (  (  (  )   (  )  )  )   (  ( a )  ab )   (  ( x y zz )   (  )  [] [a b]  ( a b c )  ) ""  +  ""  ( [abc] a[abc] ) \r\n"" )  ;  r = p . read response (  )  ;  assert element ( build response ( null false new  imap simple string ( ""a"" )  build list ( new  imap simple string ( ""a"" )  new  imap simple string ( ""b"" )  build list (  )  new  imap simple string ( ""def"" )  )  build list ( new  imap simple string ( ""a"" )  build list ( new  imap simple string ( ""ab"" )  )  )  build list ( build list ( build list (  )  build list (  )  )  )  build list ( build list ( new  imap simple string ( ""a"" )  )  new  imap simple string ( ""ab"" )  )  build list ( build list ( new  imap simple string ( ""x"" )  new  imap simple string ( ""y"" )  new  imap simple string ( ""zz"" )  )  build list (  )  build list (  )  build list ( new  imap simple string ( ""a"" )  new  imap simple string ( ""b"" )  )  build list ( new  imap simple string ( ""a"" )  new  imap simple string ( ""b"" )  new  imap simple string ( ""c"" )  )  )  build list ( build list ( new  imap simple string ( ""abc"" )  )  new  imap simple string ( ""a[abc]"" )  )  )  r )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\imap\ImapResponseParserTest.java,test nil,"public void   (  )  throws  exception  {   imap response r ;  final  imap response parser p = generate parser ( 100000 ""* nil nil nil \""nil\""  { 3 } \r\n""  +  ""nil\r\n"" )  ;  r = p . read response (  )  ;  assert element ( build response ( null false  imap string . empty  imap string . empty  imap string . empty new  imap simple string ( ""nil"" )  new  imap memory literal ( create fixed length input stream ( ""nil"" )  )  )  r )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\imap\ImapResponseParserTest.java,test ok with long message,"public void   (  )  throws  exception  {   imap response r ;  final  imap response parser p = generate parser ( 100000 ""* ok [capability imap4 imap4rev1 literal +  id starttls auth = plain auth = login""  +  ""auth = cram - md5] server . domain . tld\t cyrus imap4 v2 . 3 . 8 - os x  server 10 . 5:""  +  "" \t\t\t9f33 server ready %%\r\n"" )  ;  assert true ( p . read response (  )  . is ok (  )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\imap\ImapResponseParserTest.java,testread until,"public void   (  )  throws  exception  {  final  imap response parser p = generate parser ( 100000 "" ! ab ! c !  ! def ! "" )  ;  assert equals ( """" p . read until ( ' ! ' )  )  ;  assert equals ( ""ab"" p . read until ( ' ! ' )  )  ;  assert equals ( ""c"" p . read until ( ' ! ' )  )  ;  assert equals ( """" p . read until ( ' ! ' )  )  ;  assert equals ( ""def"" p . read until ( ' ! ' )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\imap\ImapResponseTest.java,test get alert text or empty,"public void   (  )  {  assert equals ( ""alert text"" build response ( ""tag"" false new  imap simple string ( ""ok"" )  build list ( new  imap simple string ( ""alert"" )  )  new  imap simple string ( ""alert text"" )  )  . get alert text or empty (  )  . get string (  )  )  ;  assert equals ( """" build response ( ""tag"" false new  imap simple string ( ""ok"" )  build list ( new  imap simple string ( ""x"" )  )  new  imap simple string ( ""alert text"" )  )  . get alert text or empty (  )  . get string (  )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\imap\ImapResponseTest.java,test get response code or empty,"public void   (  )  {  assert equals ( ""rescode"" build response ( ""tag"" false new  imap simple string ( ""ok"" )  build list ( new  imap simple string ( ""rescode"" )  )  )  . get response code or empty (  )  . get string (  )  )  ;  assert equals ( """" build response ( ""tag"" false new  imap simple string ( ""status"" )  build list ( new  imap simple string ( ""rescode"" )  )  )  . get response code or empty (  )  . get string (  )  )  ;  assert equals ( """" build response ( ""tag"" false new  imap simple string ( ""ok"" )  new  imap simple string ( ""xxx"" )  build list ( new  imap simple string ( ""rescode"" )  )  )  . get response code or empty (  )  . get string (  )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\imap\ImapResponseTest.java,test get status response text or empty,"public void   (  )  {  assert equals ( """" build response ( ""tag"" false new  imap simple string ( ""xxx"" )  new  imap simple string ( "" ! text ! "" )  )  . get status response text or empty (  )  . get string (  )  )  ;  assert equals ( "" ! text ! "" build response ( ""tag"" false new  imap simple string ( ""ok"" )  new  imap simple string ( "" ! text ! "" )  )  . get status response text or empty (  )  . get string (  )  )  ;  assert equals ( "" ! text ! "" build response ( ""tag"" false new  imap simple string ( ""ok"" )  build list ( new  imap simple string ( ""xxx"" )  )  new  imap simple string ( "" ! text ! "" )  )  . get status response text or empty (  )  . get string (  )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\imap\ImapResponseTest.java,test is data response,"public void   (  )  {  final  imap response ok = build response ( ""tag"" false new  imap simple string ( ""ok"" )  )  ;  final  imap response search = build response ( null false new  imap simple string ( ""search"" )  new  imap simple string ( ""1"" )  )  ;  final  imap response exists = build response ( null false new  imap simple string ( ""3"" )  new  imap simple string ( ""exists"" )  )  ;  final  imap response tagged   exists = build response ( ""tag"" false new  imap simple string ( ""1"" )  new  imap simple string ( ""exists"" )  )  ;  assert true ( search . is data response ( 0  imap constants . search )  )  ;  assert true ( exists . is data response ( 1  imap constants . exists )  )  ;  assert false ( search . is data response ( 1  imap constants . search )  )  ;  assert false ( exists . is data response ( 0  imap constants . exists )  )  ;  assert false ( exists . is data response ( 1  imap constants . fetch )  )  ;  assert false ( tagged   exists . is data response ( 1  imap constants . exists )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\imap\ImapResponseTest.java,test is ok,"public void   (  )  {  assert true ( build response ( null false new  imap simple string ( ""ok"" )  )  . is ok (  )  )  ;  assert false ( build response ( null false new  imap simple string ( ""no"" )  )  . is ok (  )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\imap\ImapResponseTest.java,test is tagged,"public void   (  )  {  assert true ( build response ( ""a"" false )  . is tagged (  )  )  ;  assert false ( build response ( null false )  . is tagged (  )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\imap\ImapStringTest.java,check get date or null on different locales,"private static void   (  )  throws  exception  {   imap simple string s = new  imap simple string ( ""01 -  jan - 2009 11:34:56  - 0100"" )  ;  assert equals ( ""1  jan 2009 12:34:56 gmt"" s . get date or null (  )  . togmt string (  )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\imap\ImapStringTest.java,do literal test,private static void   (  imap string s  string content )  throws io exception  {  assert equals ( content s . get string (  )  )  ;  assert equals ( content  utility . from ascii ( io utils . to byte array ( s . get as stream (  )  )  )  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\imap\ImapStringTest.java,set up,@ override protected void   (  )  throws  exception  {  super . set up (  )  ;   temp directory . set temp directory ( get context (  )  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\imap\ImapStringTest.java,test basics,"public void   (  )  throws  exception  {  final  imap simple string s = new  imap simple string ( "" abcd"" )  ;  assert false ( s . is empty (  )  )  ;  assert equals ( "" abcd"" s . get string (  )  )  ;  assert equals ( "" abcd""  utility . from ascii ( io utils . to byte array ( s . get as stream (  )  )  )  )  ;  assert false ( s . is number (  )  )  ;  assert false ( s . is date (  )  )  ;  assert false ( s . is ( null )  )  ;  assert false ( s . is ( """" )  )  ;  assert true ( s . is ( ""abcd"" )  )  ;  assert false ( s . is ( ""abc"" )  )  ;  assert false ( s . starts with ( null )  )  ;  assert true ( s . starts with ( """" )  )  ;  assert true ( s . starts with ( ""a"" )  )  ;  assert true ( s . starts with ( ""abcd"" )  )  ;  assert false ( s . starts with ( ""z"" )  )  ;  assert false ( s . starts with ( ""abcde"" )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\imap\ImapStringTest.java,test empty,"public void   (  )  throws  exception  {  assert true (  imap string . empty . is empty (  )  )  ;  assert equals ( """"  imap string . empty . get string (  )  )  ;  assert equals ( """"  utility . from ascii ( io utils . to byte array (  imap string . empty . get as stream (  )  )  )  )  ;  assert false (  imap string . empty . is number (  )  )  ;  assert false (  imap string . empty . is date (  )  )  ;  assert true (  imap string . empty . is ( """" )  )  ;  assert true (  imap string . empty . starts with ( """" )  )  ;  assert false (  imap string . empty . is ( ""a"" )  )  ;  assert false (  imap string . empty . starts with ( ""a"" )  )  ;  assert true ( new  imap simple string ( null )  . is empty (  )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\imap\ImapStringTest.java,test get date or null,"public void   (  )  {  final  imap string date = new  imap simple string ( ""01 -  jan - 2009 11:34:56  - 0100"" )  ;  assert true ( date . is date (  )  )  ;   date d = date . get date or null (  )  ;  assert not null ( d )  ;  assert equals ( ""1  jan 2009 12:34:56 gmt"" d . togmt string (  )  )  ;  final  imap string non date = new  imap simple string ( ""1234"" )  ;  assert false ( non date . is date (  )  )  ;  assert null ( non date . get date or null (  )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\imap\ImapStringTest.java,test get date or null on different locales,public void   (  )  throws  exception  {   locale saved locale =  locale . get default (  )  ;  try  {   locale . set default (  locale . us )  ;  check get date or null on different locales (  )  ;   locale . set default (  locale . japan )  ;  check get date or null on different locales (  )  ;   }  finally  {   locale . set default ( saved locale )  ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\imap\ImapStringTest.java,test get number or zero,"public void   (  )  {  assert equals ( 1234 new  imap simple string ( ""1234"" )  . get number or zero (  )  )  ;  assert equals (  - 1 new  imap simple string ( "" - 1"" )  . get number or zero (  )  )  ;  assert equals ( 0 new  imap simple string ( """" )  . get number or zero (  )  )  ;  assert equals ( 0 new  imap simple string ( ""x"" )  . get number or zero (  )  )  ;  assert equals ( 0 new  imap simple string ( ""1234e"" )  . get number or zero (  )  )  ;  assert equals ( 0 new  imap simple string ( ""99999999999999999999"" )  . get number or zero (  )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\imap\ImapStringTest.java,test imap memory literal,"public void   (  )  throws  exception  {  final  string content = ""abc"" ;  do literal test ( new  imap memory literal ( create fixed length input stream ( content )  )  content )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\imap\ImapStringTest.java,test imap temp file literal,"public void   (  )  throws  exception  {  final  string content = ""def"" ;   imap temp file literal l = new  imap temp file literal ( create fixed length input stream ( content )  )  ;  do literal test ( l content )  ;  assert true ( l . temp file exists for test (  )  )  ;  l . destroy (  )  ;  assert false ( l . temp file exists for test (  )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\imap\ImapTestUtils.java,assert element,"public static final void   (  string message  imap element expected  imap element actual )  {  if  ( expected  =  =  null && actual  =  =  null )   {  return ;   }  if  ( expected  !  =  null && expected . equals for test ( actual )  )   {  return ;   }   assert . fail (  string . format ( ""%s expected = %s\nactual = %s"" message expected actual )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\imap\ImapTestUtils.java,build list,public static final  imap list   (  imap element .  .  .  elements )  {   imap list list = new  imap list (  )  ;  for  (   imap element e : elements )   {  list . add ( e )  ;   }  return list ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\imap\ImapTestUtils.java,build response,public static final  imap response   (  string tag boolean is continuation request  imap element .  .  .  elements )  {   imap response res = new  imap response ( tag is continuation request )  ;  for  (   imap element e : elements )   {  res . add ( e )  ;   }  return res ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\imap\ImapTestUtils.java,create fixed length input stream,"public static  fixed length input stream   (  string content )  {   byte array input stream in = new  byte array input stream (  utility . to ascii ( content  +  ""#trailing"" )  )  ;  return new  fixed length input stream ( in content . length (  )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\imap\ImapTestUtils.java,parse response,"public static final  imap response   (  string line )  {   imap response parser p = new  imap response parser ( new  byte array input stream (  utility . to ascii ( line  +  ""\r\n"" )  )  new  discourse logger ( 4 )  )  ;  try  {  return p . read response (  )  ;   }  catch  (   exception e )   {  throw new  runtime exception ( e )  ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\imap\ImapUtilityTests.java,test get imap range values,"public void   (  )  {   string[] expected ;   string[] actual ;  expected = new  string[] { ""1"" ""2"" ""3"" }  ;  actual =  imap utility . get imap range values ( ""1:3"" )  ;   more asserts . assert equals ( expected actual )  ;  expected = new  string[] { ""16"" ""15"" ""14"" }  ;  actual =  imap utility . get imap range values ( ""16:14"" )  ;   more asserts . assert equals ( expected actual )  ;  expected =  empty array string ;  actual =  imap utility . get imap range values ( """" )  ;   more asserts . assert equals ( expected actual )  ;  expected =  empty array string ;  actual =  imap utility . get imap range values ( null )  ;   more asserts . assert equals ( expected actual )  ;  expected =  empty array string ;  actual =  imap utility . get imap range values ( ""a"" )  ;   more asserts . assert equals ( expected actual )  ;  expected =  empty array string ;  actual =  imap utility . get imap range values ( ""6"" )  ;   more asserts . assert equals ( expected actual )  ;  expected =  empty array string ;  actual =  imap utility . get imap range values ( ""1:3 6"" )  ;   more asserts . assert equals ( expected actual )  ;  expected =  empty array string ;  actual =  imap utility . get imap range values ( ""1:x"" )  ;   more asserts . assert equals ( expected actual )  ;  expected =  empty array string ;  actual =  imap utility . get imap range values ( ""1:*"" )  ;   more asserts . assert equals ( expected actual )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\imap\ImapUtilityTests.java,test get imap sequence values,"public void   (  )  {   string[] expected ;   string[] actual ;  expected = new  string[] { ""1"" }  ;  actual =  imap utility . get imap sequence values ( ""1"" )  ;   more asserts . assert equals ( expected actual )  ;  expected = new  string[] { ""1"" ""3"" ""2"" }  ;  actual =  imap utility . get imap sequence values ( ""1 3 2"" )  ;   more asserts . assert equals ( expected actual )  ;  expected = new  string[] { ""4"" ""5"" ""6"" }  ;  actual =  imap utility . get imap sequence values ( ""4:6"" )  ;   more asserts . assert equals ( expected actual )  ;  expected = new  string[] { ""9"" ""8"" ""7"" }  ;  actual =  imap utility . get imap sequence values ( ""9:7"" )  ;   more asserts . assert equals ( expected actual )  ;  expected = new  string[] { ""1"" ""2"" ""3"" ""4"" ""9"" ""8"" ""7"" }  ;  actual =  imap utility . get imap sequence values ( ""1 2:4 9:7"" )  ;   more asserts . assert equals ( expected actual )  ;  expected = new  string[] { ""1"" ""5"" }  ;  actual =  imap utility . get imap sequence values ( ""1 x 5"" )  ;   more asserts . assert equals ( expected actual )  ;  expected = new  string[] { ""1"" ""2"" ""3"" }  ;  actual =  imap utility . get imap sequence values ( ""a:d 1:3"" )  ;   more asserts . assert equals ( expected actual )  ;  expected =  empty array string ;  actual =  imap utility . get imap sequence values ( """" )  ;   more asserts . assert equals ( expected actual )  ;  expected =  empty array string ;  actual =  imap utility . get imap sequence values ( null )  ;   more asserts . assert equals ( expected actual )  ;  expected =  empty array string ;  actual =  imap utility . get imap sequence values ( ""a"" )  ;   more asserts . assert equals ( expected actual )  ;  expected =  empty array string ;  actual =  imap utility . get imap sequence values ( ""1:x"" )  ;   more asserts . assert equals ( expected actual )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\imap\ImapUtilityTests.java,test imap quote,"public void   (  )  {  assert equals ( ""\""abcd\""""  imap utility . imap quoted ( ""abcd"" )  )  ;  assert equals ( ""\""ab\\\""cd\""""  imap utility . imap quoted ( ""ab\""cd"" )  )  ;  assert equals ( ""\""ab\\\\cd\""""  imap utility . imap quoted ( ""ab\\cd"" )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\StoreTests.java, store tests,public   (  class <  email provider >  provider class  string provider authority )  {  super (  email provider . class  email content . authority )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\StoreTests.java,set up,@ override public void   (  )  throws  exception  {  super . set up (  )  ;  m mock context = get mock context (  )  ;   store . s stores . clear (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\StoreTests.java,test get instance,"public void   (  )  throws  messaging exception  {   store test store ;   account test account =  provider test utils . setup account ( ""pop"" false m mock context )  ;   host auth test auth = new  host auth (  )  ;  test account . m host auth recv = test auth ;  test auth . m address = ""pop3 . google . com"" ;  test auth . m protocol = ""pop3"" ;  test account . save ( m mock context )  ;  test store =  store . get instance ( test account get context (  )  )  ;  assert equals ( 1  store . s stores . size (  )  )  ;  assert same ( test store  store . s stores . get ( test account . m host auth recv )  )  ;   store . s stores . clear (  )  ;  test account =  provider test utils . setup account ( ""pop"" false m mock context )  ;  test auth = new  host auth (  )  ;  test account . m host auth recv = test auth ;  test auth . m address = ""imap . google . com"" ;  test auth . m protocol = ""imap"" ;  test account . save ( m mock context )  ;  test store =  store . get instance ( test account get context (  )  )  ;  assert equals ( 1  store . s stores . size (  )  )  ;  assert same ( test store  store . s stores . get ( test account . m host auth recv )  )  ;   store . s stores . clear (  )  ;  test account =  provider test utils . setup account ( ""unknown"" false m mock context )  ;  test auth = new  host auth (  )  ;  test auth . m address = ""unknown . google . com"" ;  test auth . m protocol = ""unknown"" ;  try  {  test store =  store . get instance ( test account get context (  )  )  ;  fail ( "" store#get instance (  )  should have thrown an exception"" )  ;   }  catch  (   messaging exception expected )   {   }  assert equals ( 0  store . s stores . size (  )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\StoreTests.java,test update mailbox,"public void   (  )  {   mailbox test mailbox = new  mailbox (  )  ;   store . update mailbox ( test mailbox 1l ""inbox"" ' / ' true  mailbox . type   mail )  ;  assert equals ( 1l test mailbox . m account key )  ;  assert equals ( ""inbox"" test mailbox . m display name )  ;  assert equals ( ""inbox"" test mailbox . m server id )  ;  assert equals ( ' / ' test mailbox . m delimiter )  ;   store . update mailbox ( test mailbox 2l ""inbox / a"" ' / ' true  mailbox . type   mail )  ;  assert equals ( 2l test mailbox . m account key )  ;  assert equals ( ""a"" test mailbox . m display name )  ;  assert equals ( ""inbox / a"" test mailbox . m server id )  ;  assert equals ( ' / ' test mailbox . m delimiter )  ;   store . update mailbox ( test mailbox 3l ""inbox / a / b / c / d"" ' / ' true  mailbox . type   mail )  ;  assert equals ( 3l test mailbox . m account key )  ;  assert equals ( ""d"" test mailbox . m display name )  ;  assert equals ( ""inbox / a / b / c / d"" test mailbox . m server id )  ;  assert equals ( ' / ' test mailbox . m delimiter )  ;   store . update mailbox ( test mailbox 4l ""inbox / a / b / c"" '\0' true  mailbox . type   mail )  ;  assert equals ( 4l test mailbox . m account key )  ;  assert equals ( ""inbox / a / b / c"" test mailbox . m display name )  ;  assert equals ( ""inbox / a / b / c"" test mailbox . m server id )  ;  assert equals ( '\0' test mailbox . m delimiter )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\Pop3StoreUnitTests.java,check fetched message,"private void   (  message message int msg num boolean body )  throws  messaging exception  {   address[] to = message . get recipients (  recipient type . to )  ;  assert not null ( to )  ;  assert equals ( 1 to . length )  ;  assert equals ( "" smith@ registry .  org"" to[0] . get address (  )  )  ;  assert null ( to[0] . get personal (  )  )  ;   address[] from = message . get from (  )  ;  assert not null ( from )  ;  assert equals ( 1 from . length )  ;  assert equals ( "" jones@ registry .  org"" from[0] . get address (  )  )  ;  assert null ( from[0] . get personal (  )  )  ;   address[] cc = message . get recipients (  recipient type . cc )  ;  assert not null ( cc )  ;  assert equals ( 1 cc . length )  ;  assert equals ( "" chris@ registry .  org"" cc[0] . get address (  )  )  ;  assert null ( cc[0] . get personal (  )  )  ;   address[] replyto = message . get reply to (  )  ;  assert not null ( replyto )  ;  assert equals ( 1 replyto . length )  ;  assert equals ( "" roger@ registry .  org"" replyto[0] . get address (  )  )  ;  assert null ( replyto[0] . get personal (  )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\Pop3StoreUnitTests.java,check one unread,private void   (  mock transport mock transport )  throws  messaging exception  {  open folder with message ( mock transport )  ;  setup uidl sequence ( mock transport 1 )  ;   message[] messages = m folder . get messages ( 1 1 null )  ;  assert equals ( 1 messages . length )  ;  assert equals ( get single messageuid ( 1 )  messages[0] . get uid (  )  )  ;  setup list sequence ( mock transport 1 )  ;   fetch profile fp = new  fetch profile (  )  ;  fp . add (  fetch profile .  item . flags )  ;  fp . add (  fetch profile .  item . envelope )  ;  m folder . fetch ( messages fp null )  ;  assert equals ( per   message   size messages[0] . get size (  )  )  ;   mime message message =  (  mime message ) messages[0] ;  message . get recipients (  recipient type . to )  ;  message . get recipients (  recipient type . cc )  ;  message . get recipients (  recipient type . bcc )  ;  setup single message ( mock transport 1 false )  ;  fp = new  fetch profile (  )  ;  fp . add (  fetch profile .  item . body )  ;  m folder . fetch ( messages fp null )  ;  check fetched message ( messages[0] 1 false )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\Pop3StoreUnitTests.java,get single messageuid,"private static  string   ( int msg num )  {  final  string uid   head = ""abcdef - "" ;  final  string uid   tail = """" ;  return uid   head  +   integer . to string ( msg num )   +  uid   tail ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\Pop3StoreUnitTests.java,open and inject mock transport,private  mock transport   (  )  {   mock transport mock transport = new  mock transport ( m context m host auth )  ;  mock transport . set security (  host auth . flag   none false )  ;  m store . set transport ( mock transport )  ;  return mock transport ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\Pop3StoreUnitTests.java,open folder with message,private void   (  mock transport mock transport )  throws  messaging exception  {  setup open folder ( mock transport 1 null )  ;  m folder . open (  open mode . read   only )  ;  assert equals ( 1 m folder . get message count (  )  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\Pop3StoreUnitTests.java,set up,@ override protected void   (  )  throws  exception  {  super . set up (  )  ;  m mock context = db test helper .  provider context setup helper . get provider context ( get context (  )  )  ;   temp directory . set temp directory ( m mock context )  ;  m
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\Pop3StoreUnitTests.java,setup broken list sequence,"private static void   (  mock transport transport int num messages )  {  transport . expect ( ""list"" """" )  ;  for  ( int msg num = 1 ;  msg num  <  =  num messages ;   +  + msg num )   {  transport . expect ( null """" )  ;   }  transport . expect ( null """" )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\Pop3StoreUnitTests.java,setup list sequence,"private static void   (  mock transport transport int num messages )  {  transport . expect ( ""list"" "" + ok sending scan listing"" )  ;  for  ( int msg num = 1 ;  msg num  <  =  num messages ;   +  + msg num )   {  transport . expect ( null  integer . to string ( msg num )   +  "" ""  +   integer . to string ( per   message   size * msg num )  )  ;   }  transport . expect ( null "" . "" )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\Pop3StoreUnitTests.java,setup open folder,"private void   (  mock transport mock transport int stat count  string capabilities )  {  mock transport . expect ( null "" + ok  hello there from the  mock  transport . "" )  ;  if  ( capabilities  =  =  null )   {  mock transport . expect ( ""capa"" "" - err unimplemented"" )  ;   }  else  {  mock transport . expect ( ""capa"" "" + ok capabilities follow"" )  ;  mock transport . expect ( null capabilities . split ( "" "" )  )  ;  mock transport . expect ( null "" . "" )  ;   }  mock transport . expect ( ""user user"" "" + ok  user name accepted"" )  ;  mock transport . expect ( ""pass password"" "" + ok  logged in"" )  ;  if  ( stat count  =  =   - 1 )   {  mock transport . expect ( ""stat"" """" )  ;   }  else  {   string stat = "" + ok ""  +   integer . to string ( stat count )   +  "" "" +   integer . to string ( per   message   size * stat count )  ;  mock transport . expect ( ""stat"" stat )  ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\Pop3StoreUnitTests.java,setup single message,private static void   (  mock transport transport int msg num boolean body )  {  setup single message top ( transport msg num false false )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\Pop3StoreUnitTests.java,setup single message top,"private static void   (  mock transport transport int msg num boolean top try boolean top supported )  {   string msg num string =  integer . to string ( msg num )  ;   string top command = ""top ""  +  msg num string  +  "" 673"" ;   string retr command = ""retr ""  +  msg num string ;  if  ( top try )   {  if  ( top supported )   {  transport . expect ( top command "" + ok message follows"" )  ;   }  else  {  transport . expect ( top command "" - err unsupported command"" )  ;  transport . expect ( retr command "" + ok message follows"" )  ;   }   }  else  {  transport . expect ( retr command "" + ok message follows"" )  ;   }  transport . expect ( null "" date: 26  aug 76 1429 edt"" )  ;  transport . expect ( null "" from:  jones@ registry .  org"" )  ;  transport . expect ( null "" to:  smith@ registry .  org"" )  ;  transport . expect ( null ""cc:  chris@ registry .  org"" )  ;  transport . expect ( null "" reply -  to:  roger@ registry .  org"" )  ;  transport . expect ( null """" )  ;  transport . expect ( null "" . "" )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\Pop3StoreUnitTests.java,setup uidl sequence,"private static void   (  mock transport transport int num messages )  {  transport . expect ( ""uidl"" "" + ok sending uidl list"" )  ;  for  ( int msg num = 1 ;  msg num  <  =  num messages ;   +  + msg num )   {  transport . expect ( null  integer . to string ( msg num )   +  "" ""  +  get single messageuid ( msg num )  )  ;   }  transport . expect ( null "" . "" )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\Pop3StoreUnitTests.java,test catch closeda,"public void   (  )  throws  messaging exception  {   mock transport mock transport = open and inject mock transport (  )  ;  open folder with message ( mock transport )  ;  mock transport . close input stream (  )  ;  try  {  setup uidl sequence ( mock transport 1 )  ;   message[] messages = m folder . get messages ( 1 1 null )  ;  assert equals ( 1 messages . length )  ;  assert equals ( get single messageuid ( 1 )  messages[0] . get uid (  )  )  ;  fail ( "" broken stream should cause get messages (  )  to throw . "" )  ;   }  catch  (   messaging exception me )   {   }  assert false ( ""folder should be 'closed' after an io error"" m folder . is open (  )  )  ;  check one unread ( mock transport )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\Pop3StoreUnitTests.java,test catch closedb,"public void   (  )  throws  messaging exception  {   mock transport mock transport = open and inject mock transport (  )  ;  open folder with message ( mock transport )  ;  try  {  mock transport . expect ( ""uidl"" "" + ok sending uidl list"" )  ;  mock transport . expect ( null ""bad - data""  +  "" ""  +  ""the - uidl"" )  ;  mock transport . expect ( null "" . "" )  ;   message[] messages = m folder . get messages ( 1 1 null )  ;  fail ( "" bad uidl should cause get messages (  )  to throw . "" )  ;   }  catch  (   messaging exception me )   {   }  assert false ( ""folder should be 'closed' after an io error"" m folder . is open (  )  )  ;  check one unread ( mock transport )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\Pop3StoreUnitTests.java,test catch closedc,"public void   (  )  throws  messaging exception  {   mock transport mock transport = open and inject mock transport (  )  ;  setup open folder ( mock transport 6000 null )  ;  m folder . open (  open mode . read   only )  ;  assert equals ( 6000 m folder . get message count (  )  )  ;  try  {  mock transport . expect ( ""uidl 1"" "" + ok ""  +  ""bad - data""  +  "" "" +  ""the - uidl"" )  ;   message[] messages = m folder . get messages ( 1 1 null )  ;  fail ( "" bad uidl should cause get messages (  )  to throw . "" )  ;   }  catch  (   messaging exception me )   {   }  assert false ( ""folder should be 'closed' after an io error"" m folder . is open (  )  )  ;  check one unread ( mock transport )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\Pop3StoreUnitTests.java,test catch closed,"public void   (  )  throws  messaging exception  {   mock transport mock transport = open and inject mock transport (  )  ;  open folder with message ( mock transport )  ;  setup uidl sequence ( mock transport 1 )  ;   message[] messages = m folder . get messages ( 1 1 null )  ;  assert equals ( 1 messages . length )  ;  assert equals ( get single messageuid ( 1 )  messages[0] . get uid (  )  )  ;  mock transport . close input stream (  )  ;  try  {  setup list sequence ( mock transport 1 )  ;   fetch profile fp = new  fetch profile (  )  ;  fp . add (  fetch profile .  item . flags )  ;  fp . add (  fetch profile .  item . envelope )  ;  m folder . fetch ( messages fp null )  ;  assert equals ( per   message   size messages[0] . get size (  )  )  ;  fail ( "" broken stream should cause fetch (  )  to throw . "" )  ;   }  catch  (   messaging exception me )   {   }  assert false ( ""folder should be 'closed' after an io error"" m folder . is open (  )  )  ;  check one unread ( mock transport )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\Pop3StoreUnitTests.java,test catch closeda,"public void   (  )  throws  messaging exception  {   mock transport mock transport = open and inject mock transport (  )  ;  open folder with message ( mock transport )  ;  setup uidl sequence ( mock transport 1 )  ;   message[] messages = m folder . get messages ( 1 1 null )  ;  assert equals ( 1 messages . length )  ;  assert equals ( get single messageuid ( 1 )  messages[0] . get uid (  )  )  ;  setup broken list sequence ( mock transport 1 )  ;  try  {   fetch profile fp = new  fetch profile (  )  ;  fp . add (  fetch profile .  item . flags )  ;  fp . add (  fetch profile .  item . envelope )  ;  m folder . fetch ( messages fp null )  ;  assert equals ( per   message   size messages[0] . get size (  )  )  ;  fail ( "" broken stream should cause fetch (  )  to throw . "" )  ;   }  catch  (   messaging exception me )   {   }  assert false ( ""folder should be 'closed' after an io error"" m folder . is open (  )  )  ;  check one unread ( mock transport )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\Pop3StoreUnitTests.java,test catch closed,"public void   (  )  throws  messaging exception  {   mock transport mock transport = open and inject mock transport (  )  ;  open folder with message ( mock transport )  ;  setup uidl sequence ( mock transport 1 )  ;   message[] messages = m folder . get messages ( 1 1 null )  ;  assert equals ( 1 messages . length )  ;  assert equals ( get single messageuid ( 1 )  messages[0] . get uid (  )  )  ;  setup list sequence ( mock transport 1 )  ;   fetch profile fp = new  fetch profile (  )  ;  fp . add (  fetch profile .  item . flags )  ;  fp . add (  fetch profile .  item . envelope )  ;  m folder . fetch ( messages fp null )  ;  assert equals ( per   message   size messages[0] . get size (  )  )  ;  mock transport . close input stream (  )  ;  try  {  setup single message ( mock transport 1 false )  ;  fp = new  fetch profile (  )  ;  fp . add (  fetch profile .  item . body )  ;  m folder . fetch ( messages fp null )  ;  check fetched message ( messages[0] 1 false )  ;  fail ( "" broken stream should cause fetch (  )  to throw . "" )  ;   }  catch  (   messaging exception me )   {   }  assert false ( ""folder should be 'closed' after an io error"" m folder . is open (  )  )  ;  check one unread ( mock transport )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\Pop3StoreUnitTests.java,test catch closed,"public void   (  )  throws  messaging exception  {   mock transport mock transport = open and inject mock transport (  )  ;  open folder with message ( mock transport )  ;  setup uidl sequence ( mock transport 1 )  ;   message[] messages = m folder . get messages ( 1 1 null )  ;  assert equals ( 1 messages . length )  ;  assert equals ( get single messageuid ( 1 )  messages[0] . get uid (  )  )  ;  mock transport . close input stream (  )  ;  try  {  mock transport . expect ( ""dele 1"" "" + ok message deleted"" )  ;  m folder . set flags ( messages new  flag[] {  flag . deleted }  true )  ;  fail ( "" broken stream should cause fetch (  )  to throw . "" )  ;   }  catch  (   messaging exception me )   {   }  assert false ( ""folder should be 'closed' after an io error"" m folder . is open (  )  )  ;  check one unread ( mock transport )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\Pop3StoreUnitTests.java,test catch closeda,"public void   (  )  throws  messaging exception  {   mock transport mock transport = open and inject mock transport (  )  ;  setup open folder ( mock transport  - 1 null )  ;  try  {  m folder . open (  open mode . read   only )  ;  fail ( "" broken stat should cause open (  )  to throw . "" )  ;   }  catch  (   messaging exception me )   {   }  assert false ( ""folder should be 'closed' after an io error"" m folder . is open (  )  )  ;  check one unread ( mock transport )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\Pop3StoreUnitTests.java,test check settings,"public void   (  )  throws  messaging exception  {   mock transport mock transport = open and inject mock transport (  )  ;  setup open folder ( mock transport 0 null )  ;  setup uidl sequence ( mock transport 1 )  ;  mock transport . expect ( ""quit"" """" )  ;  m store . check settings (  )  ;  setup open folder ( mock transport 0 ""uidl"" )  ;  mock transport . expect ( ""quit"" """" )  ;  m store . check settings (  )  ;  try  {  setup open folder ( mock transport 0 null )  ;  mock transport . expect ( ""uidl"" "" - err unsupported"" )  ;  mock transport . expect ( ""quit"" """" )  ;  m store . check settings (  )  ;  fail ( "" messaging exception was expected due to uidl unsupported . "" )  ;   }  catch  (   messaging exception me )   {   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java, secondary mock context,public   (  context mocked  context underlying )  {  super ( mocked )  ;  m underlying = underlying ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,check message uids,private static void   (  string[] expected uids  message[] actual messages )  {   array list <  string >  list = new  array list <  string >  (  )  ;  for  (   message m : actual messages )   {  list . add ( m . get uid (  )  )  ;   }   more asserts . assert equals ( expected uids list . to array ( new  string[0] )  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\Pop3StoreUnitTests.java,test check settings capabilities,"public void   (  )  throws  messaging exception  {   mock transport mock transport = open and inject mock transport (  )  ;  mock transport . expect ( null "" - err from the  mock  transport . "" )  ;  try  {   pop3 store .  pop3 folder folder = m store . new  pop3 folder ( ""inbox"" )  ;  folder . open (  open mode . read   write )  ;  fail ( "" should have thrown exception"" )  ;   }  catch  (   messaging exception me )   {   }  mock transport . expect ( ""quit"" """" )  ;  mock transport . expect close (  )  ;  setup open folder ( mock transport 0 ""uidl"" )  ;  mock transport . expect ( ""quit"" """" )  ;  m store . check settings (  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,create folder,private  imap folder   ( long id  string display name  string server id char delimiter )  {   imap folder folder = new  imap folder ( null server id )  ;   mailbox mailbox = new  mailbox (  )  ;  mailbox . m id = id ;  mailbox . m display name = display name ;  mailbox . m server id = server id ;  mailbox . m delimiter = delimiter ;  mailbox . m flags = 0xaaaaaaa8 ;  folder . m mailbox = mailbox ;  return folder ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,create package context,@ override public  context   (  string package name int flags )  throws  name not found exception  {  return m underlying . create package context ( package name flags )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\Pop3StoreUnitTests.java,test get message by uid,"public void   (  )  throws  messaging exception  {   mock transport mock transport = open and inject mock transport (  )  ;  setup open folder ( mock transport 2 null )  ;  m folder . open (  open mode . read   write )  ;  assert equals ( 2 m folder . get message count (  )  )  ;  setup uidl sequence ( mock transport 2 )  ;   string uid1 = get single messageuid ( 1 )  ;   string uid2 = get single messageuid ( 2 )  ;   string uid3 = get single messageuid ( 3 )  ;   message msg1 = m folder . get message ( uid1 )  ;  assert true ( ""message with uid1"" msg1  !  =  null )  ;   message msg3 = m folder . get message ( uid3 )  ;  assert true ( ""message with uid3"" msg3  =  =  null )  ;   message msg2 = m folder . get message ( uid2 )  ;  assert true ( ""message with uid2"" msg2  !  =  null )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,expect capability,"private void   (  mock transport mock transport boolean with id boolean with uid plus )  {   string capability list = ""* capability imap4rev1 starttls auth = gssapi logindisabled"" ;  capability list +  = with id  ?  "" id"" : """" ;  capability list +  = with uid plus  ?  ""  uid pl us"" : """" ;  mock transport . expect ( get next tag ( false )   +  "" capability"" new  string[] { capability list get next tag ( true )   +  "" ok capability completed"" }  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,expect login,"private void   (  mock transport mock transport boolean start tls boolean with id boolean with uid plus  string[] imap id response  string login response )  {  mock transport . expect ( null ""* ok  imap 2000  ready  to  assist  you"" )  ;  expect capability ( mock transport with id with uid plus )  ;  if  ( start tls )   {  mock transport . expect ( get next tag ( false )   +  "" starttls"" get next tag ( true )   +  ""  ok starting tls"" )  ;  mock transport . expect start tls (  )  ;  expect capability ( mock transport with id with uid plus )  ;   }  if  ( with id )   {   string expected next tag = get next tag ( false )  ;   string last = imap id response[imap id response . length  -  1] ;  last = expected next tag  +  "" ""  +  last ;  imap id response[imap id response . length  -  1] = last ;  mock transport . expect ( get next tag ( false )   +  "" id \\ (  . *\\ ) "" imap id response )  ;  get next tag ( true )  ;   }  mock transport . expect ( get next tag ( false )   +  "" login user \""password\"""" get next tag ( true )   +  "" ""  +  login response )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,expect noop,"private void   (  mock transport mock transport boolean ok )  {   string response = ok  ?  "" ok success"" : "" no timeout"" ;  mock transport . expect ( get next tag ( false )   +  "" noop"" new  string[] { get next tag ( true )   +  response }  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,expect select,"private void   (  mock transport mock transport  string folder  string read write mode )  {  mock transport . expect ( get next tag ( false )   +  "" select \""""  +  folder +  ""\"""" new  string[] { ""* flags  ( \\ answered \\ flagged \\ draft \\ deleted \\ seen ) "" ""* ok [permanentflags  ( \\ answered \\ flagged \\ draft \\ deleted \\ seen \\* ) ]"" ""* 0 exists"" ""* 0 recent"" ""* ok [unseen 0]"" ""* ok [uidnext 1]"" get next tag ( true )   +  "" ok [""  +  read write mode +  ""] "" +  folder +  "" selected .   (  success ) "" }  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,get copy messages pattern,"private  string   (  )  {  return get next tag ( false )   +  "" uid copy 11\\ 12 \\\""& ze vnl iqe - \\\"""" ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,get next tag,public  string   ( boolean advance )  {  if  ( advance )   +  + m tag ;  return  integer . to string ( m tag )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,get search messages pattern,"private  string   (  string message id )  {  return get next tag ( false )   +  "" uid search header  message -  id \""""  +  message id +  ""\"""" ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,get shared preferences,@ override public  shared preferences   (  string name int mode )  {  return new  mock shared preferences (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,on message not found,@ override public void   (  message message )  {   +  + message not found called ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,on message uid change,@ override public void   (  message message  string new uid )  {   +  + message uid change called ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,open and inject mock transport,"private  mock transport   ( int connection security boolean trust all certificates )  {   mock transport mock transport =  mock transport . create mock transport ( m test context )  ;  mock transport . set security ( connection security trust all certificates )  ;  mock transport . set host ( ""mock . server . com"" )  ;  m store . set transport for test ( mock transport )  ;  return mock transport ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,prepare for append test,"private  imap message   (  mock transport mock  string response )  throws  exception  {   imap message message =  (  imap message ) m folder . create message ( ""initial uid"" )  ;  message . set from ( new  address ( ""me@test . com"" )  )  ;  message . set recipient (  recipient type . to new  address ( ""you@test . com"" )  )  ;  message . set message id ( "" < message . id@test . com > "" )  ;  message . set flag directly for test (  flag . seen true )  ;  message . set body ( new  text body ( "" test  body"" )  )  ;  mock . expect ( get next tag ( false )   +  "" append \\\""""  +  folder   encoded +  ""\\\"" \\ ( \\\\seen\\ )  \\ { 166\\ } "" new  string[] { "" +  go a head"" }  )  ;  mock . expect literally ( "" from: me@test . com"" no   reply )  ;  mock . expect literally ( "" to: you@test . com"" no   reply )  ;  mock . expect literally ( "" message - id:  < message . id@test . com > "" no   reply )  ;  mock . expect literally ( "" content -  type: text / plain ; "" no   reply )  ;  mock . expect literally ( "" charset = utf - 8"" no   reply )  ;  mock . expect literally ( "" content -  transfer -  encoding: base64"" no   reply )  ;  mock . expect literally ( """" no   reply )  ;  mock . expect literally ( ""vg vzdcb cb2r5"" no   reply )  ;  mock . expect literally ( """" new  string[] { ""* 7 exists"" get next tag ( true )   +  "" ""  +  response }  )  ;  return message ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,reset tag,private int   ( int tag )  {  int old tag = m tag ;  m tag = tag ;  return old tag ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,run,"@ override public void   (  mock transport mock transport )  throws  exception  {  mock transport . expectio exception (  )  ;  final  folder folder = m store . get folder ( ""test"" )  ;  folder . open (  open mode . read   write )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,run and expect messaging exception,"private void   (  run and expect messaging exception target target )  throws  exception  {  try  {  final  mock transport mock transport = open and inject mock transport (  )  ;  setup open folder ( mock transport )  ;  m folder . open (  open mode . read   write )  ;  target . run ( mock transport )  ;  fail ( "" messaging exception expected . "" )  ;   }  catch  (   messaging exception expected )   {   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,set up,@ override protected void   (  )  throws  exception  {  super . set up (  )  ;   context real context = get instrumentation (  )  . get target context (  )  ;   imap store . s imap id =  imap store . make common imap id ( real context . get package name (
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,setup copy messages,"private void   ( boolean with uid plus )  throws  exception  {  m copy mock = open and inject mock transport (  )  ;  setup open folder ( m copy mock new  string[] { ""* id nil"" ""ok"" }  ""read - write"" with uid plus )  ;  m folder . open (  open mode . read   write )  ;  m copy to folder = m store . get folder ( ""\u65e5\u672c\u8a9e"" )  ;   message m1 = m folder . create message ( ""11"" )  ;  m1 . set message id ( "" < 4d8978ae . 0000005d@m58 . foo . com > "" )  ;   message m2 = m folder . create message ( ""12"" )  ;  m2 . set message id ( "" < 549373104msosi1:145osims@bar . com > "" )  ;  m copy messages = new  message[] { m1 m2 }  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,setup open folder,private void   (  mock transport mock transport  string[] imap id response  string read write mode boolean with uid plus )  {  expect login ( mock transport imap id response with uid plus )  ;  expect select ( mock transport folder   encoded read write mode )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,test append failure,"public void   (  )  throws  exception  {   mock transport mock = open and inject mock transport (  )  ;  setup open folder ( mock )  ;  m folder . open (  open mode . read   write )  ;   imap message message = prepare for append test ( mock ""no  no space left on the server . "" )  ;  assert equals ( ""initial uid"" message . get uid (  )  )  ;  mock . expect literally ( get next tag ( false )   +  "" uid search header message - id  < message . id@test . com > "" new  string[] { ""* search"" get next tag ( true )   +  "" ok  search completed . "" }  )  ;  mock . expect literally ( get next tag ( false )   +  "" uid search  ( header message - id  < message . id@test . com >  ) "" new  string[] { ""* search"" get next tag ( true )   +  "" ok  search completed . "" }  )  ;  m folder . append message ( get instrumentation (  )  . get target context (  )  message false )  ;  assert equals ( ""initial uid"" message . get uid (  )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,test append messages,"public void   (  )  throws  exception  {   mock transport mock = open and inject mock transport (  )  ;  setup open folder ( mock )  ;  m folder . open (  open mode . read   write )  ;   imap message message = prepare for append test ( mock ""ok [appenduid 1234567 13]  (  success ) "" )  ;  m folder . append message ( get instrumentation (  )  . get target context (  )  message false )  ;  assert equals ( ""13"" message . get uid (  )  )  ;  assert equals ( 7 m folder . get message count (  )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,test append messages no append uid,"public void   (  )  throws  exception  {   mock transport mock = open and inject mock transport (  )  ;  setup open folder ( mock )  ;  m folder . open (  open mode . read   write )  ;   imap message message = prepare for append test ( mock ""ok  success"" )  ;  mock . expect literally ( get next tag ( false )   +  "" uid search header message - id  < message . id@test . com > "" new  string[] { ""* search 321"" get next tag ( true )   +  "" ok success"" }  )  ;  mock . expect literally ( get next tag ( false )   +  "" uid search  ( header message - id  < message . id@test . com >  ) "" new  string[] { ""* search 321"" get next tag ( true )   +  "" ok success"" }  )  ;  m folder . append message ( get instrumentation (  )  . get target context (  )  message false )  ;  assert equals ( ""321"" message . get uid (  )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,test check settings,"public void   (  )  throws  exception  {   mock transport mock = open and inject mock transport (  )  ;  expect login ( mock )  ;  m store . check settings (  )  ;  reset tag (  )  ;  expect login ( mock false false false new  string[] { ""* id nil"" ""ok"" }  ""no authentication failed"" )  ;  try  {  m store . check settings (  )  ;  fail (  )  ;   }  catch  (   messaging exception expected )   {   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,test copy messages,"public void   (  )  throws  exception  {  setup copy messages ( true )  ;  m copy mock . expect ( get copy messages pattern (  )  new  string[] { ""*  ok copy in progress"" get next tag ( true )   +  "" ok [copyuid 777 11 12 45 46] uid copy completed"" }  )  ;   message update callback counter cb = new  message update callback counter (  )  ;  m folder . copy messages ( m copy messages m copy to folder cb )  ;  assert equals ( 0 cb . message not found called )  ;  assert equals ( 2 cb . message uid change called )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,test copy messages,"public void   (  )  throws  exception  {  setup copy messages ( true )  ;  m copy mock . expect ( get copy messages pattern (  )  new  string[] { ""*  no  some error occured during the copy"" get next tag ( true )   +  "" ok [copyuid 777 11 12 45 46] uid copy completed"" }  )  ;   message update callback counter cb = new  message update callback counter (  )  ;  m folder . copy messages ( m copy messages m copy to folder cb )  ;  assert equals ( 0 cb . message not found called )  ;  assert equals ( 2 cb . message uid change called )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,test copy messages,"public void   (  )  throws  exception  {  try  {  setup copy messages ( false )  ;  m copy mock . expect ( get copy messages pattern (  )  new  string[] { get next tag ( true )   +  ""  no copy did not finish"" }  )  ;  m folder . copy messages ( m copy messages m copy to folder null )  ;  fail ( "" messaging exception expected . "" )  ;   }  catch  (   messaging exception expected )   {   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,test copy messages,"public void   (  )  throws  exception  {  try  {  setup copy messages ( true )  ;  m copy mock . expect ( get copy messages pattern (  )  new  string[] { ""* bad failed for some reason"" get next tag ( true )   +  ""  ok copy completed"" }  )  ;  m folder . copy messages ( m copy messages m copy to folder null )  ;  fail ( "" messaging exception expected . "" )  ;   }  catch  (   messaging exception expected )   {   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,test copy messages,"public void   (  )  throws  exception  {  try  {  setup copy messages ( false )  ;  m copy mock . expect ( get copy messages pattern (  )  new  string[] { get next tag ( true )   +  ""  bad copy completed"" }  )  ;  m folder . copy messages ( m copy messages m copy to folder null )  ;  fail ( "" messaging exception expected . "" )  ;   }  catch  (   messaging exception expected )   {   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,test copy messages,"public void   (  )  throws  exception  {  setup copy messages ( false )  ;  m copy mock . expect ( get copy messages pattern (  )  new  string[] { get next tag ( true )   +  "" ok uid copy completed"" }  )  ;  int save tag = reset tag (  )  ;  expect login ( m copy mock new  string[] { ""* id nil"" ""ok"" }  false )  ;  expect select ( m copy mock ""& ze vnl iqe - "" ""read - write"" )  ;  m copy mock . expect ( get search messages pattern ( "" < 4d8978ae . 0000005d@m58 . foo . com > "" )  new  string[] { ""*  se ar ch 777"" get next tag ( true )   +  "" ok uid search completed  ( 1 msgs in 3 . 14159 secs ) "" }  )  ;  m copy mock . expect ( get search messages pattern ( "" < 549373104msosi1:145osims@bar . com > "" )  new  string[] { ""* s ea rch 1818"" get next tag ( true )   +  "" ok uid search completed  ( 1 msgs in 2 . 71828 secs ) "" }  )  ;  reset tag ( save tag )  ;  expect select ( m copy mock folder   encoded ""read - write"" )  ;   message update callback counter cb = new  message update callback counter (  )  ;  m folder . copy messages ( m copy messages m copy to folder cb )  ;  assert equals ( 0 cb . message not found called )  ;  assert equals ( 2 cb . message uid change called )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,test copy messages,"public void   (  )  throws  exception  {  setup copy messages ( false )  ;  m copy mock . expect ( get copy messages pattern (  )  new  string[] { get next tag ( true )   +  "" ok uid copy completed"" }  )  ;  int save tag = reset tag (  )  ;  expect login ( m copy mock new  string[] { ""* id nil"" ""ok"" }  false )  ;  expect select ( m copy mock ""& ze vnl iqe - "" ""read - write"" )  ;  m copy mock . expect ( get search messages pattern ( "" < 4d8978ae . 0000005d@m58 . foo . com > "" )  new  string[] { ""*  se ar ch"" get next tag ( true )   +  "" ok uid search completed  ( 0 msgs in 6 . 02214 secs ) "" }  )  ;  m copy mock . expect ( get search messages pattern ( "" < 549373104msosi1:145osims@bar . com > "" )  new  string[] { ""* s ea rch"" get next tag ( true )   +  "" ok uid search completed  ( 0 msgs in 2 . 99792 secs ) "" }  )  ;  reset tag ( save tag )  ;  expect select ( m copy mock folder   encoded ""read - write"" )  ;   message update callback counter cb = new  message update callback counter (  )  ;  m folder . copy messages ( m copy messages m copy to folder cb )  ;  assert equals ( 0 cb . message not found called )  ;  assert equals ( 0 cb . message uid change called )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,test copy messages,"public void   (  )  throws  exception  {  setup copy messages ( false )  ;  m copy mock . expect ( get copy messages pattern (  )  new  string[] { get next tag ( true )   +  "" ok uid copy completed"" }  )  ;  int save tag = reset tag (  )  ;  expect login ( m copy mock new  string[] { ""* id nil"" ""ok"" }  false )  ;  expect select ( m copy mock ""& ze vnl iqe - "" ""read - write"" )  ;  m copy mock . expect ( get search messages pattern ( "" < 4d8978ae . 0000005d@m58 . foo . com > "" )  new  string[] { get next tag ( true )   +  ""  bad search failed"" }  )  ;  m copy mock . expect ( get search messages pattern ( "" < 549373104msosi1:145osims@bar . com > "" )  new  string[] { get next tag ( true )   +  ""  bad search failed"" }  )  ;  reset tag ( save tag )  ;  expect select ( m copy mock folder   encoded ""read - write"" )  ;   message update callback counter cb = new  message update callback counter (  )  ;  m folder . copy messages ( m copy messages m copy to folder cb )  ;  assert equals ( 0 cb . message not found called )  ;  assert equals ( 0 cb . message uid change called )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,test copy messagesio exception,"public void   (  )  throws  exception  {  run and expect messaging exception ( new  run and expect messaging exception target (  )  {  @ override public void run (   mock transport mock transport )  throws  exception  {  mock transport . expectio exception (  )  ;  final  message message = m folder . create message ( ""1"" )  ;  final  folder folder = m store . get folder ( ""test"" )  ;  m folder . copy messages ( new  message[] { message }  folder null )  ;   }   }   )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,test create,"public void   (  )  throws  exception  {   mock transport mock = open and inject mock transport (  )  ;  expect login ( mock )  ;   folder folder = m store . get folder ( ""\u65e5\u672c\u8a9e"" )  ;  assert true ( folder . can create (  folder type . holds   messages )  )  ;  mock . expect ( get next tag ( false )   +  "" create \\\""& ze vnl iqe - \\\"""" new  string[] { get next tag ( true )   +  "" ok  success"" }  )  ;  assert true ( folder . create (  folder type . holds   messages )  )  ;  expect noop ( mock true )  ;  mock . expect ( get next tag ( false )   +  "" create \\\""& ze vnl iqe - \\\"""" new  string[] { get next tag ( true )   +  "" no  can't create folder"" }  )  ;  assert false ( folder . create (  folder type . holds   messages )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,test create hierarchy,"public void   (  )  {   hash map <  string  imap folder >  test map = new  hash map <  string  imap folder >  (  )  ;   imap folder[] folders =  { create folder ( 1l ""inbox"" ""inbox"" ' / ' )  create folder ( 2l ""b"" ""inbox / b"" ' / ' )  create folder ( 3l ""a"" ""a"" ' / ' )  create folder ( 4l ""b"" ""a / b"" ' / ' )  create folder ( 5l ""c"" ""a / c"" ' / ' )  create folder ( 6l ""d"" ""a / d"" ' / ' )  create folder ( 7l ""b"" ""a / d / b"" ' / ' )  create folder ( 8l ""b"" ""a / d / b / b"" ' / ' )  create folder ( 9l ""g"" ""g"" ' / ' )  }  ;  for  (   imap folder folder : folders )   {  test map . put ( folder . get name (  )  folder )  ;   }   imap store . create hierarchy ( test map )  ;  assert equals (  - 1l folders[0] . m mailbox . m parent key )  ;  assert equals ( 0xaaaaaaab folders[0] . m mailbox . m flags )  ;  assert equals ( 1l folders[1] . m mailbox . m parent key )  ;  assert equals ( 0xaaaaaaa8 folders[1] . m mailbox . m flags )  ;  assert equals (  - 1l folders[2] . m mailbox . m parent key )  ;  assert equals ( 0xaaaaaaab folders[2] . m mailbox . m flags )  ;  assert equals ( 3l folders[3] . m mailbox . m parent key )  ;  assert equals ( 0xaaaaaaa8 folders[3] . m mailbox . m flags )  ;  assert equals ( 3l folders[4] . m mailbox . m parent key )  ;  assert equals ( 0xaaaaaaa8 folders[4] . m mailbox . m flags )  ;  assert equals ( 3l folders[5] . m mailbox . m parent key )  ;  assert equals ( 0xaaaaaaab folders[5] . m mailbox . m flags )  ;  assert equals ( 6l folders[6] . m mailbox . m parent key )  ;  assert equals ( 0xaaaaaaab folders[6] . m mailbox . m flags )  ;  assert equals ( 7l folders[7] . m mailbox . m parent key )  ;  assert equals ( 0xaaaaaaa8 folders[7] . m mailbox . m flags )  ;  assert equals (  - 1l folders[8] . m mailbox . m parent key )  ;  assert equals ( 0xaaaaaaa8 folders[8] . m mailbox . m flags )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,test decode folder name,"public void   (  )  {  assert equals ( """"  imap store . decode folder name ( """" null )  )  ;  assert equals ( ""a""  imap store . decode folder name ( ""a"" null )  )  ;  assert equals ( ""xyz""  imap store . decode folder name ( ""xyz"" null )  )  ;  assert equals ( ""\u65e5\u672c\u8a9e""  imap store . decode folder name ( ""& ze vnl iqe - "" null )  )  ;  assert equals ( "" ! \u65e5\u672c\u8a9e ! ""  imap store . decode folder name ( "" ! & ze vnl iqe -  ! "" null )  )  ;  assert equals ( """"  imap store . decode folder name ( """" """" )  )  ;  assert equals ( ""a""  imap store . decode folder name ( ""a"" """" )  )  ;  assert equals ( ""xyz""  imap store . decode folder name ( ""xyz"" """" )  )  ;  assert equals ( ""\u65e5\u672c\u8a9e""  imap store . decode folder name ( ""& ze vnl iqe - "" """" )  )  ;  assert equals ( "" ! \u65e5\u672c\u8a9e ! ""  imap store . decode folder name ( "" ! & ze vnl iqe -  ! "" """" )  )  ;  assert equals ( """"  imap store . decode folder name ( ""[ gmail] / "" ""[ gmail] / "" )  )  ;  assert equals ( ""a""  imap store . decode folder name ( ""[ gmail] / a"" ""[ gmail] / "" )  )  ;  assert equals ( ""xyz""  imap store . decode folder name ( ""[ gmail] / xyz"" ""[ gmail] / "" )  )  ;  assert equals ( ""\u65e5\u672c\u8a9e""  imap store . decode folder name ( ""[ gmail] / & ze vnl iqe - "" ""[ gmail] / "" )  )  ;  assert equals ( "" ! \u65e5\u672c\u8a9e ! ""  imap store . decode folder name ( ""[ gmail] /  ! & ze vnl iqe -  ! "" ""[ gmail] / "" )  )  ;  assert equals ( ""inbox / ""  imap store . decode folder name ( ""inbox / "" ""[ gmail] / "" )  )  ;  assert equals ( ""inbox / a""  imap store . decode folder name ( ""inbox / a"" ""[ gmail] / "" )  )  ;  assert equals ( ""inbox / xyz""  imap store . decode folder name ( ""inbox / xyz"" ""[ gmail] / "" )  )  ;  assert equals ( ""inbox / \u65e5\u672c\u8a9e""  imap store . decode folder name ( ""inbox / & ze vnl iqe - "" ""[ gmail] / "" )  )  ;  assert equals ( ""inbox /  ! \u65e5\u672c\u8a9e ! ""  imap store . decode folder name ( ""inbox /  ! & ze vnl iqe -  ! "" ""[ gmail] / "" )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,test encode folder name,"public void   (  )  {  assert equals ( """"  imap store . encode folder name ( """" null )  )  ;  assert equals ( ""a""  imap store . encode folder name ( ""a"" null )  )  ;  assert equals ( ""xyz""  imap store . encode folder name ( ""xyz"" null )  )  ;  assert equals ( ""& ze vnl iqe - ""  imap store . encode folder name ( ""\u65e5\u672c\u8a9e"" null )  )  ;  assert equals ( "" ! & ze vnl iqe -  ! ""  imap store . encode folder name ( "" ! \u65e5\u672c\u8a9e ! "" null )  )  ;  assert equals ( """"  imap store . encode folder name ( """" """" )  )  ;  assert equals ( ""a""  imap store . encode folder name ( ""a"" """" )  )  ;  assert equals ( ""xyz""  imap store . encode folder name ( ""xyz"" """" )  )  ;  assert equals ( ""& ze vnl iqe - ""  imap store . encode folder name ( ""\u65e5\u672c\u8a9e"" """" )  )  ;  assert equals ( "" ! & ze vnl iqe -  ! ""  imap store . encode folder name ( "" ! \u65e5\u672c\u8a9e ! "" """" )  )  ;  assert equals ( ""[ gmail] / ""  imap store . encode folder name ( """" ""[ gmail] / "" )  )  ;  assert equals ( ""[ gmail] / a""  imap store . encode folder name ( ""a"" ""[ gmail] / "" )  )  ;  assert equals ( ""[ gmail] / xyz""  imap store . encode folder name ( ""xyz"" ""[ gmail] / "" )  )  ;  assert equals ( ""[ gmail] / & ze vnl iqe - ""  imap store . encode folder name ( ""\u65e5\u672c\u8a9e"" ""[ gmail] / "" )  )  ;  assert equals ( ""[ gmail] /  ! & ze vnl iqe -  ! ""  imap store . encode folder name ( "" ! \u65e5\u672c\u8a9e ! "" ""[ gmail] / "" )  )  ;  assert equals ( ""inbox""  imap store . encode folder name ( ""inbox"" ""[ gmail] / "" )  )  ;  assert equals ( ""inbox""  imap store . encode folder name ( ""inbox"" ""[ gmail] / "" )  )  ;  assert equals ( "" in box""  imap store . encode folder name ( "" in box"" ""[ gmail] / "" )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,test ensure prefix is valid,"public void   (  )  {  m store . m path separator = null ;  m store . m path prefix = null ;  m store . ensure prefix is valid (  )  ;  assert null ( m store . m path prefix )  ;  m store . m path prefix = """" ;  m store . ensure prefix is valid (  )  ;  assert equals ( """" m store . m path prefix )  ;  m store . m path prefix = ""foo"" ;  m store . ensure prefix is valid (  )  ;  assert equals ( ""foo"" m store . m path prefix )  ;  m store . m path prefix = ""foo . "" ;  m store . ensure prefix is valid (  )  ;  assert equals ( ""foo . "" m store . m path prefix )  ;  m store . m path separator = """" ;  m store . m path prefix = null ;  m store . ensure prefix is valid (  )  ;  assert null ( m store . m path prefix )  ;  m store . m path prefix = """" ;  m store . ensure prefix is valid (  )  ;  assert equals ( """" m store . m path prefix )  ;  m store . m path prefix = ""foo"" ;  m store . ensure prefix is valid (  )  ;  assert equals ( ""foo"" m store . m path prefix )  ;  m store . m path prefix = ""foo . "" ;  m store . ensure prefix is valid (  )  ;  assert equals ( ""foo . "" m store . m path prefix )  ;  m store . m path separator = "" . "" ;  m store . m path prefix = null ;  m store . ensure prefix is valid (  )  ;  assert null ( m store . m path prefix )  ;  m store . m path prefix = """" ;  m store . ensure prefix is valid (  )  ;  assert equals ( """" m store . m path prefix )  ;  m store . m path prefix = ""foo"" ;  m store . ensure prefix is valid (  )  ;  assert equals ( ""foo . "" m store . m path prefix )  ;  m store . m path prefix = ""foo . "" ;  m store . ensure prefix is valid (  )  ;  assert equals ( ""foo . "" m store . m path prefix )  ;  m store . m path prefix = ""foo / "" ;  m store . ensure prefix is valid (  )  ;  assert equals ( ""foo /  . "" m store . m path prefix )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,test excess fetch result,"public void   (  )  throws  messaging exception  {   mock transport mock = open and inject mock transport (  )  ;  setup open folder ( mock )  ;  m folder . open (  open mode . read   write )  ;   message message1 = m folder . create message ( ""1"" )  ;  assert false ( message1 . is set (  flag . seen )  )  ;   fetch profile fp = new  fetch profile (  )  ;  fp . clear (  )  ;  fp . add (  fetch profile .  item . flags )  ;  mock . expect ( get next tag ( false )   +  "" uid fetch 1 \\ ( uid flags\\ ) "" new  string[] { ""* 1 fetch  ( uid 1 flags  ( \\ seen )  ) "" ""* 2 fetch  ( flags  ( \\ seen )  ) "" get next tag ( true )   +  "" ok success"" }  )  ;  m folder . fetch ( new  message[] { message1 }  fp null )  ;  assert true ( message1 . is set (  flag . seen )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,test exists,"public void   (  )  throws  exception  {   mock transport mock = open and inject mock transport (  )  ;  expect login ( mock )  ;   folder folder = m store . get folder ( ""\u65e5\u672c\u8a9e"" )  ;  mock . expect ( get next tag ( false )   +  "" status \\\""& ze vnl iqe - \\\"" \\ ( uidvalidity\\ ) "" new  string[] { ""* status \""& ze vnl iqe - \""  ( messages 10 ) "" get next tag ( true )   +  "" ok success"" }  )  ;  assert true ( folder . exists (  )  )  ;  expect noop ( mock true )  ;  folder = m store . get folder ( ""no such folder"" )  ;  mock . expect ( get next tag ( false )   +  "" status \\\""no such folder\\\"" \\ ( uidvalidity\\ ) "" new  string[] { get next tag ( true )   +  "" no  no such folder ! "" }  )  ;  assert false ( folder . exists (  )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,test expunge,"public void   (  )  throws  exception  {   mock transport mock = open and inject mock transport (  )  ;  setup open folder ( mock )  ;  m folder . open (  open mode . read   write )  ;  mock . expect ( get next tag ( false )   +  "" expunge"" new  string[] { get next tag ( true )   +  "" ok success"" }  )  ;  m folder . expunge (  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,test expungeio exception,public void   (  )  throws  exception  {  run and expect messaging exception ( new  run and expect messaging exception target (  )  {  @ override public void run (   mock transport mock transport )  throws  exception  {  mock transport . expectio exception (  )  ;  m folder . expunge (  )  ;   }   }   )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,test fetch attachment,"public void   (  )  throws  exception  {   mock transport mock = open and inject mock transport (  )  ;  setup open folder ( mock )  ;  m folder . open (  open mode . read   write )  ;  final  message message = m folder . create message ( ""1"" )  ;  final  fetch profile fp = new  fetch profile (  )  ;  fp . add (  fetch profile .  item . structure )  ;  mock . expect ( get next tag ( false )   +  "" uid fetch 1 \\ ( uid bodystructure\\ ) "" new  string[] { ""* 9 fetch  ( uid 1 bodystructure  (  ( \""text\"" \""plain\""  ( \""charset\"" \""iso - 8859 - 1\"" ) ""  +  "" cid nil \""7bit\"" 18 3 nil nil nil ) ""  +  "" ( \""image\"" \""png\"""" +  ""  ( \""name\"" \""device . png\"" )  nil nil \""base64\"" 117840 nil  ( \""attachment\"""" +  "" ( \""filename\"" \""device . png\"" )  )  nil ) "" +  ""\""mixed\"" )  ) "" get next tag ( true )   +  "" ok success"" }  )  ;  m folder . fetch ( new  message[] { message }  fp null )  ;   body body = message . get body (  )  ;  assert true ( body instanceof  mime multipart )  ;   mime multipart mime multipart =  (  mime multipart ) body ;  assert equals ( 2 mime multipart . get count (  )  )  ;   part part1 = mime multipart . get body part ( 1 )  ;  assert true ( part1 instanceof  mime body part )  ;   mime body part mime part1 =  (  mime body part ) part1 ;  fp . clear (  )  ;  fp . add ( mime part1 )  ;  mock . expect ( get next tag ( false )   +  "" uid fetch 1 \\ ( uid body . peek\\[2\\]\\ ) "" new  string[] { ""* 9 fetch  ( uid 1 body[2]  { 4 } "" ""yw jj ) "" get next tag ( true )   +  "" ok success"" }  )  ;  m folder . fetch ( new  message[] { message }  fp null )  ;  assert equals ( ""abc""  utility . from utf8 ( io utils . to byte array ( mime part1 . get body (  )  . get input stream (  )  )  )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,test fetch body,"public void   (  )  throws  messaging exception  {  final  mock transport mock = open and inject mock transport (  )  ;  setup open folder ( mock )  ;  m folder . open (  open mode . read   write )  ;  final  message message = m folder . create message ( ""1"" )  ;  final  fetch profile fp = new  fetch profile (  )  ;  fp . add (  fetch profile .  item . body )  ;  mock . expect ( get next tag ( false )   +  "" uid fetch 1 \\ ( uid body . peek\\[\\]\\ ) "" new  string[] { ""* 9 fetch  ( uid 1 body[]  { 23 } "" ""from: a@b . com"" """" ""test"" "" ) "" get next tag ( true )   +  "" ok success"" }  )  ;  m folder . fetch ( new  message[] { message }  fp null )  ;  assert equals ( ""a@b . com"" message . get header ( ""from"" ) [0] )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,test fetch body sane,"public void   (  )  throws  messaging exception  {  final  mock transport mock = open and inject mock transport (  )  ;  setup open folder ( mock )  ;  m folder . open (  open mode . read   write )  ;  final  message message = m folder . create message ( ""1"" )  ;  final  fetch profile fp = new  fetch profile (  )  ;  fp . add (  fetch profile .  item . body   sane )  ;  mock . expect ( get next tag ( false )   +  "" uid fetch 1 \\ ( uid body . peek\\[\\] < 0 . 51200 > \\ ) "" new  string[] { ""* 9 fetch  ( uid 1 body[]  { 23 } "" ""from: a@b . com"" """" ""test"" "" ) "" get next tag ( true )   +  "" ok success"" }  )  ;  m folder . fetch ( new  message[] { message }  fp null )  ;  assert equals ( ""a@b . com"" message . get header ( ""from"" ) [0] )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,test fetch body structure malformed,"public void   (  )  throws  exception  {  final  mock transport mock = open and inject mock transport (  )  ;  setup open folder ( mock )  ;  m folder . open (  open mode . read   write )  ;  final  message message = m folder . create message ( ""1"" )  ;  final  fetch profile fp = new  fetch profile (  )  ;  fp . add (  fetch profile .  item . structure )  ;  mock . expect ( get next tag ( false )   +  "" uid fetch 1 \\ ( uid bodystructure\\ ) "" new  string[] { ""* 9 fetch  ( uid 1 bodystructure  ( \""text\"" \""plain\""  (  ) ""  +  "" nil nil nil 123e 3 )  ) "" get next tag ( true )   +  "" ok success"" }  )  ;  m folder . fetch ( new  message[] { message }  fp null )  ;   more asserts . assert equals ( new  string[] { ""text / plain"" }  message . get header ( "" content -  type"" )  )  ;  assert null ( message . get header ( "" content -  transfer -  encoding"" )  )  ;  assert null ( message . get header ( "" content - id"" )  )  ;  assert null ( message . get header ( "" content -  disposition"" )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,test fetch body structure multipart,"public void   (  )  throws  exception  {  final  mock transport mock = open and inject mock transport (  )  ;  setup open folder ( mock )  ;  m folder . open (  open mode . read   write )  ;  final  message message = m folder . create message ( ""1"" )  ;  final  fetch profile fp = new  fetch profile (  )  ;  fp . add (  fetch profile .  item . structure )  ;  mock . expect ( get next tag ( false )   +  "" uid fetch 1 \\ ( uid bodystructure\\ ) "" new  string[] { ""* 9 fetch  ( uid 1 bodystructure  (  ( \""text\"" \""plain\""  (  )   { 20 } "" ""long content id#@ ! @#""  +  "" nil \""7bit\"" 18 3 nil nil nil ) ""  +  "" ( \""image\"" \""png\""  ( \""name\""  { 10 } "" ""device . png )  nil nil \""base64\""  { 6 } "" ""117840 nil  ( \""attachment\""  ( \""filename\"" \""device . png\"" )  )  nil ) ""  +  "" ( \""text\"" \""html\""  (  )  nil nil \""7bit\"" 100 nil 123  ( \""attachment\""""  +  "" ( \""filename\""  { 15 } "" ""attachment . html \""size\"" 555 )  )  nil ) ""  +  "" (  ( \""text\"" \""html\"" nil nil \""base64\"" )  ( \""xxx\"" \""yyy\"" )  ) ""  +  ""\""mixed\""  ( \""boundary\"" \""00032556278a7005e40486d159ca\"" )  nil nil )  ) "" get next tag ( true )   +  "" ok success"" }  )  ;  m folder . fetch ( new  message[] { message }  fp null )  ;  final  body body = message . get body (  )  ;  assert true ( body instanceof  mime multipart )  ;   mime multipart mime multipart =  (  mime multipart ) body ;  assert equals ( 4 mime multipart . get count (  )  )  ;  assert equals ( ""mixed"" mime multipart . get sub type for test (  )  )  ;  final  part part1 = mime multipart . get body part ( 0 )  ;  final  part part2 = mime multipart . get body part ( 1 )  ;  final  part part3 = mime multipart . get body part ( 2 )  ;  final  part part4 = mime multipart . get body part ( 3 )  ;  assert true ( part1 instanceof  mime body part )  ;  assert true ( part2 instanceof  mime body part )  ;  assert true ( part3 instanceof  mime body part )  ;  assert true ( part4 instanceof  mime body part )  ;  final  mime body part mime part1 =  (  mime body part ) part1 ;  final  mime body part mime part2 =  (  mime body part ) part2 ;  final  mime body part mime part3 =  (  mime body part ) part3 ;  final  mime body part mime part4 =  (  mime body part ) part4 ;   more asserts . assert equals ( new  string[] { ""1"" }  part1 . get header ( ""x -  android -  attachment -  store data"" )  )  ;   more asserts . assert equals ( new  string[] { ""2"" }  part2 . get header ( ""x -  android -  attachment -  store data"" )  )  ;   more asserts . assert equals ( new  string[] { ""3"" }  part3 . get header ( ""x -  android -  attachment -  store data"" )  )  ;   more asserts . assert equals ( new  string[] { ""text / plain"" }  part1 . get header ( "" content -  type"" )  )  ;   more asserts . assert equals ( new  string[] { ""image / png ; \n name = \""device . png\"""" }  part2 . get header ( "" content -  type"" )  )  ;   more asserts . assert equals ( new  string[] { ""text / html"" }  part3 . get header ( "" content -  type"" )  )  ;   more asserts . assert equals ( new  string[] { ""long content id#@ ! @#"" }  part1 . get header ( "" content - id"" )  )  ;  assert null ( part2 . get header ( "" content - id"" )  )  ;  assert null ( part3 . get header ( "" content - id"" )  )  ;   more asserts . assert equals ( new  string[] { ""7bit"" }  part1 . get header ( "" content -  transfer -  encoding"" )  )  ;   more asserts . assert equals ( new  string[] { ""base64"" }  part2 . get header ( "" content -  transfer -  encoding"" )  )  ;   more asserts . assert equals ( new  string[] { ""7bit"" }  part3 . get header ( "" content -  transfer -  encoding"" )  )  ;   more asserts . assert equals ( new  string[] { "" ; \n size = 18"" }  part1 . get header ( "" content -  disposition"" )  )  ;   more asserts . assert equals ( new  string[] { ""attachment ; \n filename = \""device . png\"" ; \n size = 117840"" }  part2 . get header ( "" content -  disposition"" )  )  ;   more asserts . assert equals ( new  string[] { ""attachment ; \n filename = \""attachment . html\"" ; \n size = \""555\"""" }  part3 . get header ( "" content -  disposition"" )  )  ;  final  body part4body = part4 . get body (  )  ;  assert true ( part4body instanceof  mime multipart )  ;   mime multipart mime multipart part4 =  (  mime multipart ) part4body ;  assert equals ( 2 mime multipart part4 . get count (  )  )  ;  final  mime body part mime part41 =  (  mime body part ) mime multipart part4 . get body part ( 0 )  ;  final  mime body part mime part42 =  (  mime body part ) mime multipart part4 . get body part ( 1 )  ;   more asserts . assert equals ( new  string[] { ""4 . 1"" }  mime part41 . get header ( ""x -  android -  attachment -  store data"" )  )  ;   more asserts . assert equals ( new  string[] { ""4 . 2"" }  mime part42 . get header ( ""x -  android -  attachment -  store data"" )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,test fetch body structure simple,"public void   (  )  throws  exception  {  final  mock transport mock = open and inject mock transport (  )  ;  setup open folder ( mock )  ;  m folder . open (  open mode . read   write )  ;  final  message message = m folder . create message ( ""1"" )  ;  final  fetch profile fp = new  fetch profile (  )  ;  fp . add (  fetch profile .  item . structure )  ;  mock . expect ( get next tag ( false )   +  "" uid fetch 1 \\ ( uid bodystructure\\ ) "" new  string[] { ""* 9 fetch  ( uid 1 bodystructure  ( \""text\"" \""plain\"" nil""  +  "" nil nil nil 18 3 nil nil nil )  ) "" get next tag ( true )   +  "" ok success"" }  )  ;  m folder . fetch ( new  message[] { message }  fp null )  ;   more asserts . assert equals ( new  string[] { ""text / plain"" }  message . get header ( "" content -  type"" )  )  ;  assert null ( message . get header ( "" content -  transfer -  encoding"" )  )  ;  assert null ( message . get header ( "" content - id"" )  )  ;   more asserts . assert equals ( new  string[] { "" ; \n size = 18"" }  message . get header ( "" content -  disposition"" )  )  ;   more asserts . assert equals ( new  string[] { ""text"" }  message . get header ( ""x -  android -  attachment -  store data"" )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,test fetch flag envelope,"public void   (  )  throws  messaging exception  {  final  mock transport mock = open and inject mock transport (  )  ;  setup open folder ( mock )  ;  m folder . open (  open mode . read   write )  ;  final  message message = m folder . create message ( ""1"" )  ;  final  fetch profile fp = new  fetch profile (  )  ;  fp . add (  fetch profile .  item . flags )  ;  fp . add (  fetch profile .  item . envelope )  ;  mock . expect ( get next tag ( false )   +  "" uid fetch 1 \\ ( uid flags internaldate rfc822\\ . size body\\ . peek\\[header . fields""  +  "" \\ ( date subject from content - type to cc message - id\\ ) \\]\\ ) "" new  string[] { ""* 9 fetch  ( uid 1 rfc822 . size 120626 internaldate \""17 - may - 2010 22:00:15  + 0000\""""  +  ""flags  ( \\ seen )  body[header . fields  ( d ate s ubject f rom c ontent - type to cc""  +  "" m essage - id ) ]"" +  ""  { 279 } "" "" from:  xxxxxx  yyyyy  < userxx@android . com > "" "" date:  mon  17  may 2010 14:59:52  - 0700"" "" message - id:  < x0000000000000000000000000000000000000000000000y@android . com > "" "" subject: ssubject"" "" to: android . test01@android . com"" "" content -  type: multipart / mixed ;  boundary = a00000000000000000000000000b"" """" "" ) "" get next tag ( true )   +  "" ok success"" }  )  ;  m folder . fetch ( new  message[] { message }  fp null )  ;  assert equals ( ""android . test01@android . com"" message . get header ( ""to"" ) [0] )  ;  assert equals ( "" xxxxxx  yyyyy  < userxx@android . com > "" message . get header ( ""from"" ) [0] )  ;  assert equals ( ""multipart / mixed ;  boundary = a00000000000000000000000000b"" message . get header ( "" content -  type"" ) [0] )  ;  assert true ( message . is set (  flag . seen )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,test fetchio exception,"public void   (  )  throws  exception  {  run and expect messaging exception ( new  run and expect messaging exception target (  )  {  @ override public void run (   mock transport mock transport )  throws  exception  {  mock transport . expectio exception (  )  ;  final  message message = m folder . create message ( ""1"" )  ;  final  fetch profile fp = new  fetch profile (  )  ;  fp . add (  fetch profile .  item . structure )  ;  m folder . fetch ( new  message[] { message }  fp null )  ;   }   }   )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,test folder name with special chars,"public void   (  )  throws  exception  {  final  string folder   1 = ""@u88**%    st"" ;  final  string folder   1   quoted =  pattern . quote ( folder   1 )  ;  final  string folder   2 = ""folder test   06"" ;   mock transport mock = open and inject mock transport (  )  ;  expect login ( mock )  ;  expect noop ( mock true )  ;  mock . expect ( get next tag ( false )   +  "" list \""\"" \""\\*\"""" new  string[] { ""* list  (  )  \"" / \"" \""""  +  folder   1  +  ""\"""" ""* list  (  )  \"" / \"" \""""  +  folder   2  +  ""\"""" get next tag ( true )   +  "" ok success"" }  )  ;  final  folder[] folders = m store . update folders (  )  ;   array list <  string >  list = new  array list <  string >  (  )  ;  for  (   folder f : folders )   {  list . add ( f . get name (  )  )  ;   }   more asserts . assert equals ( new  string[] { ""inbox"" folder   2 folder   1 }  list . to array ( new  string[0] )  )  ;  expect noop ( mock true )  ;  mock . expect ( get next tag ( false )   +  "" select \""""  +  folder   1   quoted +  ""\"""" new  string[] { ""* flags  ( \\ answered \\ flagged \\ draft \\ deleted \\ seen ) "" ""* ok [permanentflags  ( \\ answered \\ flagged \\ draft \\ deleted \\ seen \\* ) ]"" ""* 0 exists"" ""* 0 recent"" ""* ok [unseen 0]"" ""* ok [uidnext 1]"" get next tag ( true )   +  "" ok [read - write] ""  +  folder   1 }  )  ;  folders[2] . open (  open mode . read   write )  ;  folders[2] . close ( false )  ;  expect noop ( mock true )  ;  mock . expect ( get next tag ( false )   +  "" select \""""  +  folder   2 +  ""\"""" new  string[] { ""* flags  ( \\ answered \\ flagged \\ draft \\ deleted \\ seen ) "" ""* ok [permanentflags  ( \\ answered \\ flagged \\ draft \\ deleted \\ seen \\* ) ]"" ""* 0 exists"" ""* 0 recent"" ""* ok [unseen 0]"" ""* ok [uidnext 1]"" get next tag ( true )   +  "" ok [read - write] ""  +  folder   2 }  )  ;  folders[1] . open (  open mode . read   write )  ;  folders[1] . close ( false )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,test get all folders,"public void   (  )  throws  exception  {   mock transport mock = open and inject mock transport (  )  ;  expect login ( mock )  ;  expect noop ( mock true )  ;  mock . expect ( get next tag ( false )   +  "" list \""\"" \""\\*\"""" new  string[] { ""* list  ( \\h as no children )  \"" / \"" \""inbox\"""" ""* list  ( \\h asnochildren )  \"" / \"" \"" drafts\"""" ""* list  ( \\n oselect )  \"" / \"" \""no select\"""" ""* list  ( \\h as no children )  \"" / \"" \""& ze vnl iqe - \"""" get next tag ( true )   +  "" ok success"" }  )  ;   folder[] folders = m store . update folders (  )  ;   imap folder test folder ;  test folder =  (  imap folder ) folders[0] ;  assert equals ( ""inbox"" test folder . get name (  )  )  ;  assert equals ( selectable   bits test folder . m mailbox . m flags & selectable   bits )  ;  test folder =  (  imap folder ) folders[1] ;  assert equals ( ""no select"" test folder . get name (  )  )  ;  assert equals ( 0 test folder . m mailbox . m flags & selectable   bits )  ;  test folder =  (  imap folder ) folders[2] ;  assert equals ( ""\u65e5\u672c\u8a9e"" test folder . get name (  )  )  ;  assert equals ( selectable   bits test folder . m mailbox . m flags & selectable   bits )  ;  test folder =  (  imap folder ) folders[3] ;  assert equals ( "" drafts"" test folder . get name (  )  )  ;  assert equals ( selectable   bits test folder . m mailbox . m flags & selectable   bits )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,test get connection,"public void   (  )  throws  exception  {   mock transport mock = open and inject mock transport (  )  ;  assert equals ( 0 m store . get connection pool for test (  )  . size (  )  )  ;  final  imap connection con1 = m store . get connection (  )  ;  assert not null ( con1 )  ;  assert equals ( 0 m store . get connection pool for test (  )  . size (  )  )  ;  assert false ( con1 . is transport open for test (  )  )  ;  expect login ( mock )  ;  con1 . open (  )  ;  assert true ( con1 . is transport open for test (  )  )  ;  final  imap connection con2 = m store . get connection (  )  ;  assert not null ( con2 )  ;  assert equals ( 0 m store . get connection pool for test (  )  . size (  )  )  ;  assert false ( con2 . is transport open for test (  )  )  ;  assert not same ( con1 con2 )  ;  int save tag = reset tag (  )  ;  expect login ( mock )  ;  con2 . open (  )  ;  assert true ( con1 . is transport open for test (  )  )  ;  m store . pool connection ( con1 )  ;  assert equals ( 1 m store . get connection pool for test (  )  . size (  )  )  ;  save tag = reset tag ( save tag )  ;  mock . expect ( get next tag ( false )   +  "" noop"" new  string[] { get next tag ( true )   +  "" ok success"" }  )  ;  final  imap connection con1b = m store . get connection (  )  ;  assert equals ( 0 m store . get connection pool for test (  )  . size (  )  )  ;  assert same ( con1 con1b )  ;  assert true ( con1 . is transport open for test (  )  )  ;  m store . pool connection ( con2 )  ;  assert equals ( 1 m store . get connection pool for test (  )  . size (  )  )  ;  reset tag ( save tag )  ;  mock . expect ( get next tag ( false )   +  "" noop"" new  string[] { get next tag ( true )   +  ""* bye bye"" }  )  ;  final  imap connection con3 = m store . get connection (  )  ;  assert not null ( con3 )  ;  assert equals ( 0 m store . get connection pool for test (  )  . size (  )  )  ;  assert not same ( con1 con3 )  ;  assert not same ( con2 con3 )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\Pop3StoreUnitTests.java,test no folder roles yet,public void   (  )  {   folder[] remote folders = m store . update folders (  )  ;  for  (   folder folder : remote folders )   {  assert equals (  folder .  folder role . unknown folder . get role (  )  )  ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\Pop3StoreUnitTests.java,test one unread,public void   (  )  throws  messaging exception  {   mock transport mock transport = open and inject mock transport (  )  ;  check one unread ( mock transport )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,test get message,"public void   (  )  throws  exception  {   mock transport mock = open and inject mock transport (  )  ;  setup open folder ( mock )  ;  m folder . open (  open mode . read   write )  ;  mock . expect ( get next tag ( false )   +  "" uid search uid 123"" new  string[] { ""* search 123"" get next tag ( true )   +  "" ok success"" }  )  ;  assert equals ( ""123"" m folder . get message ( ""123"" )  . get uid (  )  )  ;  mock . expect ( get next tag ( false )   +  "" uid search uid 123"" new  string[] { get next tag ( true )   +  "" no not found"" }  )  ;  assert null ( m folder . get message ( ""123"" )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,test get messages,"public void   (  )  throws  exception  {   mock transport mock = open and inject mock transport (  )  ;  setup open folder ( mock )  ;  m folder . open (  open mode . read   write )  ;  mock . expect ( get next tag ( false )   +  "" uid search 3:5 not deleted"" new  string[] { ""* search 3 4"" get next tag ( true )   +  "" ok success"" }  )  ;  check message uids ( new  string[] { ""3"" ""4"" }  m folder . get messages ( 3 5 null )  )  ;  mock . expect ( get next tag ( false )   +  "" uid search 3:5 not deleted"" new  string[] { get next tag ( true )   +  "" no not found"" }  )  ;  check message uids ( new  string[] {  }  m folder . get messages ( 3 5 null )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,test get messages,"public void   (  )  throws  exception  {   mock transport mock = open and inject mock transport (  )  ;  setup open folder ( mock )  ;  m folder . open (  open mode . read   write )  ;  check message uids ( new  string[] { ""3"" ""4"" ""5"" }  m folder . get messages ( new  string[] { ""3"" ""4"" ""5"" }  null )  )  ;  check message uids ( new  string[] {  }  m folder . get messages ( new  string[] {  }  null )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,test get unread message count,"public void   (  )  throws  exception  {   mock transport mock = open and inject mock transport (  )  ;  setup open folder ( mock )  ;  m folder . open (  open mode . read   write )  ;  mock . expect ( get next tag ( false )   +  "" status \\\""""  +  folder   encoded +  ""\\\"" \\ ( unseen\\ ) "" new  string[] { ""* status \""""  +  folder   encoded  +  ""\""  ( x 1 unseen 123 ) "" get next tag ( true )   +  "" ok copy completed"" }  )  ;  assert equals ( 123 m folder . get unread message count (  )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,test get unread message count with literal string,"public void   (  )  throws  exception  {   mock transport mock = open and inject mock transport (  )  ;  setup open folder ( mock )  ;  mock . expect ( get next tag ( false )   +  "" status \""""  +  folder   encoded +  ""\"" \\ ( unseen\\ ) "" new  string[] { ""* status  { 5 } "" folder   encoded  +  ""  ( unseen 10 ) "" get next tag ( true )   +  "" ok status completed"" }  )  ;  m folder . open (  open mode . read   write )  ;  int unread count = m folder . get unread message count (  )  ;  assert equals ( ""get unread message count with literal string"" 10 unread count )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\Pop3StoreUnitTests.java,test retr variants,public void   (  )  throws  messaging exception  {   mock transport mock transport = open and inject mock transport (  )  ;  open folder with message ( mock transport )  ;  setup uidl sequence ( mock transport 2 )  ;   message[] messages = m folder . get messages ( 1 2 null )  ;  assert equals ( 2 messages . length )  ;  setup list sequence ( mock transport 2 )  ;   fetch profile fp = new  fetch profile (  )  ;  fp . add (  fetch profile .  item . flags )  ;  fp . add (  fetch profile .  item . envelope )  ;  m folder . fetch ( messages fp null )  ;  for  (   message message : messages )   {  message . get recipients (  recipient type . to )  ;  message . get recipients (  recipient type . cc )  ;  message . get recipients (  recipient type . bcc )  ;   }   message[] single message = new  message[] { messages[0] }  ;  setup single message top ( mock transport 1 true true )  ;  fp = new  fetch profile (  )  ;  fp . add (  fetch profile .  item . body   sane )  ;  m folder . fetch ( single message fp null )  ;  check fetched message ( single message[0] 1 false )  ;  single message[0] = messages[1] ;  setup single message top ( mock transport 2 true false )  ;  fp = new  fetch profile (  )  ;  fp . add (  fetch profile .  item . body   sane )  ;  m folder . fetch ( single message fp null )  ;  check fetched message ( single message[0] 2 false )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,test get unread message count with quoted string,"public void   (  )  throws  exception  {   mock transport mock = open and inject mock transport (  )  ;  setup open folder ( mock )  ;  mock . expect ( get next tag ( false )   +  "" status \""""  +  folder   encoded +  ""\"" \\ ( unseen\\ ) "" new  string[] { ""* status \""""  +  folder   encoded  +  ""\""  ( unseen 2 ) "" get next tag ( true )   +  "" ok status completed"" }  )  ;  m folder . open (  open mode . read   write )  ;  int unread count = m folder . get unread message count (  )  ;  assert equals ( ""get unread message count with quoted string"" 2 unread count )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\Pop3StoreUnitTests.java,test sent upload requested,public void   (  )  {  assert true ( m store . require copy message to sent folder (  )  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,test imap id bad,"public void   (  )  throws  messaging exception  {   mock transport mock transport = open and inject mock transport (  )  ;  setup open folder ( mock transport new  string[] { ""bad unknown command bad - char - %"" }  ""read - write"" )  ;  m folder . open (  open mode . read   write )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\Pop3StoreUnitTests.java,test simple login,public void   (  )  throws  messaging exception  {   mock transport mock transport = open and inject mock transport (  )  ;  setup open folder ( mock transport 0 null )  ;  m folder . open (  open mode . read   only )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\Pop3StoreUnitTests.java,test small folder functions,"public void   (  )  {  assert equals (  open mode . read   write m folder . get mode (  )  )  ;  assert false ( m folder . can create (  folder type . holds   folders )  )  ;  assert false ( m folder . can create (  folder type . holds   messages )  )  ;  assert false ( m folder . create (  folder type . holds   folders )  )  ;  assert false ( m folder . create (  folder type . holds   messages )  )  ;  assert equals (  - 1 m folder . get unread message count (  )  )  ;   flag[] flags = m folder . get permanent flags (  )  ;  assert equals ( 1 flags . length )  ;  assert equals (  flag . deleted flags[0] )  ;  m folder . delete ( false )  ;  assert null ( m folder . expunge (  )  )  ;  try  {  m folder . copy messages ( null null null )  ;  fail ( "" exception not thrown by copy messages (  ) "" )  ;   }  catch  (   unsupported operation exception e )   {   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,test imap id basic,"public void   (  )  {   string id =  imap store . get imap id ( m test context ""user - name"" ""host - name"" capability   response . flatten (  )  )  ;   hash map <  string  string >  map = tokenize imap id ( id )  ;  assert equals ( m test context . get package name (  )  map . get ( ""name"" )  )  ;  assert equals ( ""android"" map . get ( ""os"" )  )  ;  assert not null ( map . get ( ""os - version"" )  )  ;  assert not null ( map . get ( ""vendor"" )  )  ;  assert not null ( map . get ( ""aguid"" )  )  ;  id =  imap store . make common imap id ( ""package name"" ""version"" ""code name"" ""model"" ""id"" ""vendor"" ""network - operator"" )  ;  map = tokenize imap id ( id )  ;  assert equals ( ""package name"" map . get ( ""name"" )  )  ;  assert equals ( ""android"" map . get ( ""os"" )  )  ;  assert equals ( ""version ;  id"" map . get ( ""os - version"" )  )  ;  assert equals ( ""vendor"" map . get ( ""vendor"" )  )  ;  assert equals ( null map . get ( ""x - android - device - model"" )  )  ;  assert equals ( ""network - operator"" map . get ( ""x - android - mobile - net - operator"" )  )  ;  assert equals ( null map . get ( ""aguid"" )  )  ;  id =  imap store . make common imap id ( ""package name"" """" ""rel"" ""model"" ""id"" ""vendor"" """" )  ;  map = tokenize imap id ( id )  ;  assert equals ( ""package name"" map . get ( ""name"" )  )  ;  assert equals ( ""android"" map . get ( ""os"" )  )  ;  assert equals ( ""1 . 0 ;  id"" map . get ( ""os - version"" )  )  ;  assert equals ( ""vendor"" map . get ( ""vendor"" )  )  ;  assert equals ( ""model"" map . get ( ""x - android - device - model"" )  )  ;  assert equals ( null map . get ( ""x - android - mobile - net - operator"" )  )  ;  assert equals ( null map . get ( ""aguid"" )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\Pop3StoreUnitTests.java,test store folders functions,"public void   (  )  {   folder[] folders = m store . update folders (  )  ;  assert equals ( 1 folders . length )  ;  assert same ( m folder folders[0] )  ;  assert equals ( ""inbox"" m folder . get name (  )  )  ;   pop3 store .  pop3 folder folder mixed case inbox = m store . new  pop3 folder ( ""i nb ox"" )  ;  assert equals ( ""inbox"" folder mixed case inbox . get name (  )  )  ;   pop3 store .  pop3 folder folder not inbox = m store . new  pop3 folder ( ""not - inbox"" )  ;  assert equals ( ""not - inbox"" folder not inbox . get name (  )  )  ;  assert true ( m folder . exists (  )  )  ;  assert true ( folder mixed case inbox . exists (  )  )  ;  assert false ( folder not inbox . exists (  )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\Pop3StoreUnitTests.java,testuidl comcast variant,"public void   (  )  {   pop3 store .  pop3 folder .  uidl parser parser = m folder . new  uidl parser (  )  ;  parser . parse multi line ( ""101 ""  +  unique   id   1 )  ;  assert equals ( 101 parser . m message number )  ;  assert equals ( unique   id   1 parser . m unique id )  ;  assert false ( parser . m end of message )  ;  assert false ( parser . m err )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\Pop3StoreUnitTests.java,testuidl parser multi,"public void   (  )  {   pop3 store .  pop3 folder .  uidl parser parser = m folder . new  uidl parser (  )  ;  parser . parse multi line ( ""101 ""  +  unique   id   1 )  ;  assert equals ( 101 parser . m message number )  ;  assert equals ( unique   id   1 parser . m unique id )  ;  assert false ( parser . m end of message )  ;  assert false ( parser . m err )  ;  parser . parse multi line ( "" . "" )  ;  assert true ( parser . m end of message )  ;  assert false ( parser . m err )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,test imap id device id,"public void   (  )  throws  messaging exception  {   host auth test auth ;   account test account ;  test auth = new  host auth (  )  ;  test auth . set login ( ""user1"" ""password"" )  ;  test auth . set connection ( ""imap"" ""server"" 999 )  ;  test account = new  account (  )  ;  test account . m host auth recv = test auth ;   imap store test store1a =  (  imap store )  imap store . new instance ( test account m test context )  ;  test auth = new  host auth (  )  ;  test auth . set login ( ""user1"" ""password"" )  ;  test auth . set connection ( ""imap"" ""server"" 999 )  ;  test account = new  account (  )  ;  test account . m host auth recv = test auth ;   imap store test store1b =  (  imap store )  imap store . new instance ( test account m test context )  ;  test auth = new  host auth (  )  ;  test auth . set login ( ""user2"" ""password"" )  ;  test auth . set connection ( ""imap"" ""server"" 999 )  ;  test account = new  account (  )  ;  test account . m host auth recv = test auth ;   imap store test store2 =  (  imap store )  imap store . new instance ( test account m test context )  ;   string capabilities = capability   response . flatten (  )  ;   string id1a =  imap store . get imap id ( m test context ""user1"" ""host - name"" capabilities )  ;   string id1b =  imap store . get imap id ( m test context ""user1"" ""host - name"" capabilities )  ;   string id2 =  imap store . get imap id ( m test context ""user2"" ""host - name"" capabilities )  ;   string uid1a = tokenize imap id ( id1a )  . get ( ""aguid"" )  ;   string uid1b = tokenize imap id ( id1b )  . get ( ""aguid"" )  ;   string uid2 = tokenize imap id ( id2 )  . get ( ""aguid"" )  ;  assert equals ( uid1a uid1b )  ;   more asserts . assert not equal ( uid1a uid2 )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\Pop3StoreUnitTests.java,testuidl parser multi fail,"public void   (  )  {   pop3 store .  pop3 folder .  uidl parser parser = m folder . new  uidl parser (  )  ;  boolean result ;  result = parser . parse multi line ( null )  ;  assert false ( result )  ;  result = parser . parse multi line ( """" )  ;  assert false ( result )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,test imap id filtering,"public void   (  )  {   string id =  imap store . make common imap id ( ""abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz"" ""0123456789"" ""code name"" ""model"" "" -     +  =  ; : .   /  /  "" ""v ( e ) n\""d\ro\nr"" "" (  ) \"""" )  ;   hash map <  string  string >  map = tokenize imap id ( id )  ;  assert equals ( ""abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz"" map . get ( ""name"" )  )  ;  assert equals ( ""0123456789 ;   -     +  =  ; : .   /  /  "" map . get ( ""os - version"" )  )  ;  assert equals ( ""vendor"" map . get ( ""vendor"" )  )  ;  assert null ( map . get ( ""x - android - mobile - net - operator"" )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\Pop3StoreUnitTests.java,testuidl parser single,"public void   (  )  {   pop3 store .  pop3 folder .  uidl parser parser = m folder . new  uidl parser (  )  ;  parser . parse single line ( "" + ok 101 ""  +  unique   id   1 )  ;  assert equals ( 101 parser . m message number )  ;  assert equals ( unique   id   1 parser . m unique id )  ;  assert true ( parser . m end of message )  ;  parser . parse single line ( "" - err what ?  ?  ? "" )  ;  assert true ( parser . m err )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,test imap id not supported,"public void   (  )  throws  messaging exception  {   mock transport mock transport = open and inject mock transport (  )  ;  setup open folder ( mock transport null ""read - write"" )  ;  m folder . open (  open mode . read   write )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\Pop3StoreUnitTests.java,testuidl parser single fail,"public void   (  )  {   pop3 store .  pop3 folder .  uidl parser parser = m folder . new  uidl parser (  )  ;  boolean result ;  result = parser . parse single line ( null )  ;  assert false ( result )  ;  result = parser . parse single line ( """" )  ;  assert false ( result )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,test imap id ok parsing,"public void   (  )  throws  messaging exception  {   mock transport mock transport = open and inject mock transport (  )  ;  setup open folder ( mock transport new  string[] { ""* id nil"" ""ok [id] bad - char - %"" }  ""read - write"" )  ;  m folder . open (  open mode . read   write )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,test imap id secure server not sent,"public void   (  )  throws  messaging exception  {   mock transport mock transport = open and inject mock transport (  )  ;  mock transport . set host ( ""e mail . s ecur eser ver . n et"" )  ;  mock transport . expect ( null ""* ok  imap 2000  ready  to  assist  you"" )  ;  expect capability ( mock transport true false )  ;  mock transport . expect ( get next tag ( false )   +  "" login user \""password\"""" get next tag ( true )   +  "" ""  +  ""ok user authenticated  (  success ) "" )  ;  expect select ( mock transport folder   encoded ""read - write"" )  ;  m folder . open (  open mode . read   write )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,test imap id secure server parse fail,"public void   (  )  {   mock transport mock transport = open and inject mock transport (  )  ;  setup open folder ( mock transport new  string[] { ""* id (  \""name\"" \"" godaddy imap\"" \""version\"" \""3 . 1 . 0\"" ) "" ""ok"" }  ""read - write"" )  ;  try  {  m folder . open (  open mode . read   write )  ;  fail ( "" expected  messaging exception"" )  ;   }  catch  (   messaging exception expected )   {   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,test imap id with vendor policy,"public void   (  )  {  try  {   mock vendor policy . inject ( m test context )  ;   bundle result = new  bundle (  )  ;  result . put string ( ""get imap id"" ""\""test - key\"" \""test - value\"""" )  ;   mock vendor policy . mock result = result ;   string id =  imap store . get imap id ( m test context ""user - name"" ""host - name""  imap test utils . parse response ( ""* capability imap4rev1 xxx yyy z"" )  . flatten (  )  )  ;  assert equals ( ""test - value"" tokenize imap id ( id )  . get ( ""test - key"" )  )  ;  assert equals ( ""get imap id""  mock vendor policy . passed policy )  ;  assert equals ( ""user - name""  mock vendor policy . passed bundle . get string ( ""get imap id . user"" )  )  ;  assert equals ( ""host - name""  mock vendor policy . passed bundle . get string ( ""get imap id . host"" )  )  ;  assert equals ( ""[capability imap4rev1 xxx yyy z]""  mock vendor policy . passed bundle . get string ( ""get imap id . capabilities"" )  )  ;   }  finally  {   vendor policy loader . clear instance for test (  )  ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,test join message uids,"public void   (  )  throws  exception  {  assert equals ( """"  imap store . join message uids ( new  message[] {  }  )  )  ;  assert equals ( ""a""  imap store . join message uids ( new  message[] { m folder . create message ( ""a"" )  }  )  )  ;  assert equals ( ""a xx""  imap store . join message uids ( new  message[] { m folder . create message ( ""a"" )  m folder . create message ( ""xx"" )  }  )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,test login failure,"public void   (  )  throws  exception  {   mock transport mock transport = open and inject mock transport (  )  ;  expect login ( mock transport false false false new  string[] { ""* id nil"" ""ok"" }  ""no authentication failed"" )  ;  try  {  m store . get connection (  )  . open (  )  ;  fail ( "" didn't throw  authentication failed exception"" )  ;   }  catch  (   authentication failed exception expected )   {   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,test nil message,"public void   (  )  throws  messaging exception  {   mock transport mock = open and inject mock transport (  )  ;  setup open folder ( mock )  ;  m folder . open (  open mode . read   write )  ;   fetch profile fp = new  fetch profile (  )  ;  fp . clear (  )  ;  fp . add (  fetch profile .  item . structure )  ;   message message1 = m folder . create message ( ""1"" )  ;  mock . expect ( get next tag ( false )   +  "" uid fetch 1 \\ ( uid bodystructure\\ ) "" new  string[] { ""* 1 fetch  ( uid 1 bodystructure  ( text plain nil nil nil 7bit 0 0 nil nil nil )  ) "" get next tag ( true )   +  "" ok success"" }  )  ;  m folder . fetch ( new  message[] { message1 }  fp null )  ;  mock . expect ( get next tag ( false )   +  "" uid fetch 1 \\ ( uid body . peek\\[text\\]\\ ) "" new  string[] { ""* 1 fetch  ( uid 1 body[text] nil ) "" get next tag ( true )   +  "" ok success"" }  )  ;   array list <  part >  viewables = new  array list <  part >  (  )  ;   array list <  part >  attachments = new  array list <  part >  (  )  ;   mime utility . collect parts ( message1 viewables attachments )  ;  assert true ( viewables . size (  )   =  =  1 )  ;   part empty body part = viewables . get ( 0 )  ;  fp . clear (  )  ;  fp . add ( empty body part )  ;  m folder . fetch ( new  message[] { message1 }  fp null )  ;  viewables = new  array list <  part >  (  )  ;  attachments = new  array list <  part >  (  )  ;   mime utility . collect parts ( message1 viewables attachments )  ;  assert true ( viewables . size (  )   =  =  1 )  ;  empty body part = viewables . get ( 0 )  ;   string text =  mime utility . get text from part ( empty body part )  ;  assert null ( text )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,test no folder roles yet,public void   (  )  {  assert equals (  folder .  folder role . unknown m folder . get role (  )  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,test open,"public void   (  )  throws  exception  {   mock transport mock = open and inject mock transport (  )  ;  expect login ( mock )  ;  final  folder folder = m store . get folder ( ""test"" )  ;  mock . expect ( get next tag ( false )   +  "" select \\\""test\\\"""" new  string[] { get next tag ( true )   +  "" no no such mailbox"" }  )  ;  try  {  folder . open (  open mode . read   write )  ;  fail (  )  ;   }  catch  (   messaging exception expected )   {   }  expect noop ( mock true )  ;  mock . expect ( get next tag ( false )   +  "" select \\\""test\\\"""" new  string[] { ""* 1 exists"" get next tag ( true )   +  "" ok [read - write]"" }  )  ;  folder . open (  open mode . read   write )  ;  assert true ( folder . exists (  )  )  ;  assert equals ( 1 folder . get message count (  )  )  ;  assert equals (  open mode . read   write folder . get mode (  )  )  ;  assert true ( folder . is open (  )  )  ;  folder . close ( false )  ;  assert false ( folder . is open (  )  )  ;  expect noop ( mock true )  ;  mock . expect ( get next tag ( false )   +  "" select \\\""test\\\"""" new  string[] { ""* 2 exists"" get next tag ( true )   +  "" ok [read - only]"" }  )  ;  folder . open (  open mode . read   write )  ;  assert true ( folder . exists (  )  )  ;  assert equals ( 2 folder . get message count (  )  )  ;  assert equals (  open mode . read   only folder . get mode (  )  )  ;  expect noop ( mock true )  ;  mock . expect ( get next tag ( false )   +  "" select \\\""test\\\"""" new  string[] { ""* 15 exists"" get next tag ( true )   +  "" ok selected"" }  )  ;  folder . open (  open mode . read   write )  ;  assert true ( folder . exists (  )  )  ;  assert equals ( 15 folder . get message count (  )  )  ;  assert equals (  open mode . read   write folder . get mode (  )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,test openio exception,"public void   (  )  throws  exception  {  run and expect messaging exception ( new  run and expect messaging exception target (  )  {  @ override public void run (   mock transport mock transport )  throws  exception  {  mock transport . expectio exception (  )  ;  final  folder folder = m store . get folder ( ""test"" )  ;  folder . open (  open mode . read   write )  ;   }   }   )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,test quota alert,"public void   (  )  throws  exception  {   mock transport mock = open and inject mock transport (  )  ;  expect login ( mock )  ;   folder folder = m store . get folder ( ""inbox"" )  ;  mock . expect ( get next tag ( false )   +  "" select \""inbox\"""" new  string[] { ""* flags  ( \\ answered \\ flagged \\ draft \\ deleted \\ seen  non junk $ forwarded  junk""  +  "" $ label4 $ label1 $ label2 $ label3 $ label5 $mdn sent  old ) "" ""* ok [permanentflags  ( \\ answered \\ flagged \\ draft \\ deleted \\ seen  non junk""  +  "" $ forwarded  junk $ label4 $ label1 $ label2 $ label3 $ label5 $mdn sent  old \\* ) ]"" ""* 6406 exists"" ""* 0 recent"" ""* ok [unseen 5338]"" ""* ok [uidvalidity 1055957975]"" ""* ok [uidnext 449625]"" ""* no [alert]  mailbox is at 98% of quota"" get next tag ( true )   +  "" ok [read - write]  completed"" }  )  ;  folder . open (  open mode . read   write )  ;  assert equals ( 6406 folder . get message count (  )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,test read only,"public void   (  )  throws  messaging exception  {   mock transport mock = open and inject mock transport (  )  ;  setup open folder ( mock ""read - only"" )  ;  m folder . open (  open mode . read   only )  ;  assert equals (  open mode . read   only m folder . get mode (  )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,test read write,"public void   (  )  throws  messaging exception  {   mock transport mock = open and inject mock transport (  )  ;  setup open folder ( mock ""read - write"" )  ;  m folder . open (  open mode . read   write )  ;  assert equals (  open mode . read   write m folder . get mode (  )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,test search for uids,"public void   (  )  throws  exception  {   mock transport mock = open and inject mock transport (  )  ;  setup open folder ( mock )  ;  m folder . open (  open mode . read   write )  ;  mock . expect ( get next tag ( false )   +  "" uid search x"" new  string[] { ""* search 1"" get next tag ( true )   +  "" ok success"" }  )  ;   more asserts . assert equals ( new  string[] { ""1"" }  m folder . search for uids ( ""x"" )  )  ;  mock . expect ( get next tag ( false )   +  "" uid search uid 123"" new  string[] { ""* search 123 4 567"" ""* search"" ""* search 0"" ""* search"" ""* search 100 200 300"" get next tag ( true )   +  "" ok success"" }  )  ;   more asserts . assert equals ( new  string[] { ""123"" ""4"" ""567"" ""0"" ""100"" ""200"" ""300"" }  m folder . search for uids ( ""uid 123"" )  )  ;  mock . expect ( get next tag ( false )   +  "" uid search some criteria"" new  string[] { get next tag ( true )   +  "" no not found"" }  )  ;   more asserts . assert equals ( new  string[] {  }  m folder . search for uids ( ""some criteria"" )  )  ;  mock . expect ( get next tag ( false )   +  "" uid search some criteria"" new  string[] { get next tag ( true )   +  "" ok success"" }  )  ;   more asserts . assert equals ( new  string[] {  }  m folder . search for uids ( ""some criteria"" )  )  ;  mock . expect ( get next tag ( false )   +  "" uid search some criteria"" new  string[] { ""* search"" get next tag ( true )   +  "" ok success"" }  )  ;   more asserts . assert equals ( new  string[] {  }  m folder . search for uids ( ""some criteria"" )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,test search for uidsio exception,"public void   (  )  throws  exception  {  run and expect messaging exception ( new  run and expect messaging exception target (  )  {  @ override public void run (   mock transport mock transport )  throws  exception  {  mock transport . expectio exception (  )  ;  m folder . get message ( ""uid"" )  ;   }   }   )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,test sent upload requested,public void   (  )  {  assert true ( m store . require copy message to sent folder (  )  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,test server id,"public void   (  )  throws  messaging exception  {   mock transport mock transport = open and inject mock transport (  )  ;  setup open folder ( mock transport new  string[] { ""* id  ( \""name\"" \"" cyrus\"" \""version\"" \""1 . 5\""""  +  "" \""os\"" \""sunos\"" \""os - version\"" \""5 . 5\""""  +  "" \""support - url\"" \""mailto:cyrus - bugs + @andrew . cmu . edu\"" ) "" ""ok"" }  ""read - write"" )  ;  m folder . open (  open mode . read   write )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,test set flags,"public void   (  )  throws  exception  {   mock transport mock = open and inject mock transport (  )  ;  setup open folder ( mock )  ;  m folder . open (  open mode . read   write )  ;   message[] messages = new  message[] { m folder . create message ( ""11"" )  m folder . create message ( ""12"" )  }  ;  mock . expect ( get next tag ( false )   +  "" uid store 11\\ 12 \\ + flags . silent \\ ( \\\\flagged \\\\seen\\ ) "" new  string[] { get next tag ( true )   +  "" ok success"" }  )  ;  m folder . set flags ( messages new  flag[] {  flag . flagged  flag . seen }  true )  ;  mock . expect ( get next tag ( false )   +  "" uid store 11\\ 12 \\ - flags . silent \\ ( \\\\deleted\\ ) "" new  string[] { get next tag ( true )   +  "" ok success"" }  )  ;  m folder . set flags ( messages new  flag[] {  flag . deleted }  false )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,test simple login,public void   (  )  throws  messaging exception  {   mock transport mock transport = open and inject mock transport (  )  ;  setup open folder ( mock transport )  ;  m folder . open (  open mode . read   write )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,test small folder functions,public void   (  )  {  assert true ( m folder . can create (  folder type . holds   folders )  )  ;  assert true ( m folder . can create (  folder type . holds   messages )  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,test tls open,"public void   (  )  throws  messaging exception  {   mock transport mock transport = open and inject mock transport (  host auth . flag   tls false )  ;  expect login ( mock transport true false false new  string[] { ""* id nil"" ""ok"" }  ""ok user authenticated  (  success ) "" )  ;  mock transport . expect ( get next tag ( false )   +  "" select \""""  +  folder   encoded +  ""\"""" new  string[] { ""* flags  ( \\ answered \\ flagged \\ draft \\ deleted \\ seen ) "" ""* ok [permanentflags  ( \\ answered \\ flagged \\ draft \\ deleted \\ seen \\* ) ]"" ""* 0 exists"" ""* 0 recent"" ""* ok [unseen 0]"" ""* ok [uidnext 1]"" get next tag ( true )   +  "" ok [""  +  ""read - write"" +  ""] "" +  folder   encoded +  "" selected .   (  success ) "" }  )  ;  m folder . open (  open mode . read   write )  ;  assert true ( mock transport . is tls started (  )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,test unread message countio exception,public void   (  )  throws  exception  {  run and expect messaging exception ( new  run and expect messaging exception target (  )  {  @ override public void run (   mock transport mock transport )  throws  exception  {  mock transport . expectio exception (  )  ;  m folder . get unread message count (  )  ;   }   }   )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,tokenize imap id,"private  hash map <  string  string >    (  string id )  {   string[] elements = id . split ( ""\"""" )  ;   hash map <  string  string >  map = new  hash map <  string  string >  (  )  ;  for  ( int i = 0 ;  i  <  elements . length ;   )   {  map . put ( elements[i  +  1] elements[i  +  3] )  ;  i +  = 4 ;   }  return map ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\transport\MockTransport.java, mock transport,public   (  context context  host auth host auth )  {  super ( context log   tag host auth )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\transport\MockTransport.java, transaction,  ( int other type )  {  m action = other type ;  m pattern = null ;  m responses = null ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\transport\MockTransport.java,clone,@ override public  mock transport   (  )  {  return this ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\transport\MockTransport.java,close,@ override public void   (  )  {  m open = false ;  m input open = false ;  if  ( m pairs . size (  )   >  0 )   {   transaction expect = m pairs . remove ( 0 )  ;  if  ( expect . m action  =  =   transaction . action   client   close )   {  return ;   } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\transport\MockTransport.java,close input stream,public void   (  )  {  m input open = false ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\transport\MockTransport.java,create mock transport,public static  mock transport   (  context context )  {  return new  mock transport ( context new  host auth (  )  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\transport\MockTransport.java,expect,public void   (  string pattern  string[] responses )  {   transaction pair = new  transaction ( pattern responses )  ;  m pairs . add ( pair )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\transport\MockTransport.java,expect close,public void   (  )  {  m pairs . add ( new  transaction (  transaction . action   client   close )  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\transport\MockTransport.java,expectio exception,public void   (  )  {  m pairs . add ( new  transaction (  transaction . action   io   exception )  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\transport\MockTransport.java,expect literally,"public void   (  string literal  string[] responses )  {  expect ( ""^""  +   pattern . quote ( literal )   +  ""$"" responses )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\transport\MockTransport.java,expect start tls,public void   (  )  {  m pairs . add ( new  transaction (  transaction . action   start   tls )  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\transport\MockTransport.java,get input stream,@ override public  input stream   (  )  {   smtp sender unit tests . assert true ( m open )  ;  return new  mock input stream (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\transport\MockTransport.java,get local address,@ override public  inet address   (  )  {  if  ( is open (  )  )   {  return m local address ;   }  else  {  return null ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\transport\MockTransport.java,get output stream,@ override public  output stream   (  )  {   assert . assert true ( m open )  ;  return new  mock output stream (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\transport\MockTransport.java,is open,@ override public boolean   (  )  {  return m open ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\transport\MockTransport.java,is tls started,public boolean   (  )  {  return m tls started ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\transport\MockTransport.java,open,@ override public void   (  )  {  m open = true ;  m input open = true ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\transport\MockTransport.java,read,@ override public int   (  )  throws io exception  {  if  (  ! m input open )   {  throw new io exception (  )  ;   }  if  ( m next line  !  =  null && m next index  <  m next line . length )   {  return m next line[m next index +  + ] ;   }   string next
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\transport\MockTransport.java,read line,"public  string   (  )  throws io exception  {   smtp sender unit tests . assert true ( m open )  ;  if  (  ! m input open )   {  throw new io exception ( "" reading from  mock transport with closed input"" )  ;   }  if  (  ( m queued input . size (  )   =  =  0 )  &&  ( m pairs . size (  )   >  0 )  )   {   transaction pair = m pairs . get ( 0 )  ;  if  ( pair . m pattern  =  =  null )   {  m pairs . remove ( 0 )  ;  send response ( pair )  ;   }   }  if  ( m queued input . size (  )   =  =  0 )   {   log utils . w ( log   tag "" underflow reading from  mock transport"" )  ;  return """" ;   }   string line = m queued input . remove ( 0 )  ;  if  ( debug   log   streams )   {   log utils . d ( log   tag "" <  <  <  ""  +  line )  ;   }  if  ( special   response   ioexception . equals ( line )  )   {  throw new io exception ( "" expected io exception . "" )  ;   }  return line ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\transport\MockTransport.java,reopen tls,@ override public void   (  )  {   smtp sender unit tests . assert true ( m open )  ;   transaction expect = m pairs . remove ( 0 )  ;   smtp sender unit tests . assert true ( expect . m action  =  =   transaction . action   start   tls )  ;  m tls starte
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\transport\MockTransport.java,send response,"private void   (  transaction pair )  {  switch  ( pair . m action )   {  case  transaction . action   inject   text: for  (   string s : pair . m responses )   {  m queued input . add ( s )  ;   }  break ;  case  transaction . action   io   exception: m queued input . add ( special   response   ioexception )  ;  break ;  default :  assert . fail ( "" invalid action for send response: ""  +  pair . m action )  ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\transport\MockTransport.java,set host,public void   (  string address )  {  m host auth . m address = address ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\transport\MockTransport.java,set mock local address,public void   (  inet address address )  {  m local address = address ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\transport\MockTransport.java,set security,public void   ( int connection security boolean trust all certificates )  {  m host auth . m flags = connection security &  ( trust all certificates  ?   host auth . flag   trust   all : 0xff )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\transport\MockTransport.java,to string,"@ override public  string   (  )  {  switch  ( m action )   {  case action   inject   text: return m pattern  +  "": ""  +   arrays . to string ( m responses )  ;  case action   client   close: return "" expect the client to close"" ;  case action   io   exce"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\transport\MockTransport.java,write,@ override public void   ( int one byte )  throws io exception  {  if  ( one byte  =  =  '\r' )   {  write line ( sb . to string (  )  null )  ;  sb = new  string builder (  )  ;   }  else if  ( one byte  =  =  '\n' )   {   }  else  {  sb . append (  ( ch
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\transport\MockTransport.java,write line,"@ override public void   (  string s  string sensitive replacement )  throws io exception  {  if  ( debug   log   streams )   {   log utils . d ( log   tag "" >  >  >  ""  +  s )  ;   }   smtp sender unit tests . assert true ( m open )  ;   smtp sender unit"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\transport\DiscourseLoggerTest.java,b,private static  yte[] b (  string chars )  {  byte[] ret = new byte[chars . length (  ) ] ;  for  ( int i = 0 ;  i  <  chars . length (  )  ;  i +  +  )   {  ret[i] =  ( byte ) chars . char at ( i )  ;   }  return ret ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\transport\DiscourseLoggerTest.java,check discourse store,"private void   ( int store size  object[] discource  string[] expected )  {   discourse logger store = new  discourse logger ( store size )  ;  for  (   object o : discource )   {  if  ( o instanceof  string )   {  store . add sent command (  (  string ) o )  ;   }  else if  ( o instanceof byte[] )   {  for  (  byte b :  ( byte[] ) o )   {  store . add received byte ( b )  ;   }   }  else  {  fail ( "" invalid argument .   test broken . "" )  ;   }   }   more asserts . assert equals ( expected store . get lines (  )  )  ;  store . log last discourse (  )  ;  assert equals ( 0 store . get lines (  )  . length )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\transport\DiscourseLoggerTest.java,o,private static  object[]   (  object .  .  .  objects )  {  return objects ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\transport\DiscourseLoggerTest.java,s,private  tatic  string[] s (  string .  .  .  strings )  {  return strings ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\transport\DiscourseLoggerTest.java,test discourse logger,"public void   (  )  {  check discourse store ( 4 o (  )  s (  )  )  ;  check discourse store ( 4 o ( ""command"" )  s ( ""command"" )  )  ;  check discourse store ( 4 o ( ""1a"" ""2b"" ""3"" ""4dd"" )  s ( ""1a"" ""2b"" ""3"" ""4dd"" )  )  ;  check discourse store ( 4 o ( ""1"" ""2"" ""3"" ""4"" ""5"" )  s ( ""2"" ""3"" ""4"" ""5"" )  )  ;  check discourse store ( 4 o ( b ( ""a"" )  )  s ( ""a"" )  )  ;  check discourse store ( 4 o ( b ( ""a\nb\nc"" )  )  s ( ""a"" ""b"" ""c"" )  )  ;  check discourse store ( 4 o ( b ( ""a\nbcd\nc\ndef\u0080\u0001g\r\n"" )  )  s ( ""a"" ""bcd"" ""c"" ""def\\x80\\x01g"" )  )  ;  check discourse store ( 4 o ( ""1"" b ( ""2"" )  ""3"" b ( ""4\n5\n"" )  ""6 7 8"" ""7 a bbb ccc"" b ( ""* aaa8\n* bbb9\n7 ccc 10"" )  )  s ( ""7 a bbb ccc"" ""* aaa8"" ""* bbb9"" ""7 ccc 10"" )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\transport\SmtpSenderUnitTests.java,expect simple attachment,"private void   (  mock transport mock transport  attachment attachment )  {  mock transport . expect ( "" content -  type: ""  +  attachment . m mime type  +  "" ; "" )  ;  mock transport . expect ( "" name = \""""  +  attachment . m file name  +  ""\"""" )  ;  mock transport . expect ( "" content -  transfer -  encoding: base64"" )  ;  mock transport . expect ( "" content -  disposition: attachment ; "" )  ;  mock transport . expect ( "" filename = \""""  +  attachment . m file name  +  ""\"" ; "" )  ;  mock transport . expect ( "" size = ""  +   long . to string ( attachment . m size )  )  ;  mock transport . expect ( """" )  ;   string attachment content uri = attachment . get content uri (  )  ;  if  ( attachment content uri  !  =  null && attachment content uri . starts with ( ""file: /  / "" )  )   {  mock transport . expect ( test   string   base64 )  ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\transport\SmtpSenderUnitTests.java,expect simple message,"private void   (  mock transport mock transport )  {  mock transport . expect ( ""mail from: <  jones@ registry .  org > "" ""250 2 . 1 . 0  <  jones@ registry .  org >  sender ok"" )  ;  mock transport . expect ( ""rcpt to: <  smith@ registry .  org > "" ""250 2 . 1 . 5  <  smith@ registry .  org >  recipient ok"" )  ;  mock transport . expect ( ""data"" ""354 enter mail  end with  .  on a line by itself"" )  ;  mock transport . expect ( "" date:  . *"" )  ;  mock transport . expect ( "" message - id:  . *"" )  ;  mock transport . expect ( "" from:  jones@ registry .  org"" )  ;  mock transport . expect ( "" to:  smith@ registry .  org"" )  ;  mock transport . expect ( ""mime -  version: 1 . 0"" )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\transport\SmtpSenderUnitTests.java,open and inject mock transport,private  mock transport   (  )  throws  unknown host exception  {   mock transport mock transport = new  mock transport ( m context m host auth )  ;  mock transport . set security (  host auth . flag   none false )  ;  m sender . set transport ( mock transport )  ;  mock transport . set mock local address (  inet address . get by name ( local   address )  )  ;  return mock transport ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\transport\SmtpSenderUnitTests.java,set up,@ override protected void   (  )  throws  exception  {  super . set up (  )  ;  m provider context = db test helper .  provider context setup helper . get provider context ( get context (  )  )  ;  m context = get context (  )  ;  m host auth = new  host 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\transport\SmtpSenderUnitTests.java,setup open,"private void   (  mock transport mock transport  string capabilities )  {  mock transport . expect ( null ""220  mock transport 2000  ready  to  assist  you  peewee"" )  ;  mock transport . expect ( ""ehlo  . *"" ""250 - 10 . 20 . 30 . 40 hello"" )  ;  if  ( capabilities  =  =  null )   {  mock transport . expect ( null ""250 - help"" )  ;  mock transport . expect ( null ""250 - auth login plain cram - md5"" )  ;  mock transport . expect ( null ""250 - size 15728640"" )  ;  mock transport . expect ( null ""250 - enhancedstatuscodes"" )  ;  mock transport . expect ( null ""250 - 8bitmime"" )  ;   }  else  {  for  (   string capability : capabilities . split ( "" "" )  )   {  mock transport . expect ( null ""250 - ""  +  capability )  ;   }   }  mock transport . expect ( null ""250 + ok"" )  ;  mock transport . expect ( ""auth plain  . *"" ""235 2 . 7 . 0  .  .  .  authentication succeeded"" )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\transport\SmtpSenderUnitTests.java,setup simple attachment,"private  attachment   (  context context long message id )  {   attachment attachment = new  attachment (  )  ;  attachment . m file name = ""the file . jpg"" ;  attachment . m mime type = ""image / jpg"" ;  attachment . m size = 0 ;  attachment . m content id = null ;  attachment . set content uri ( ""content: /  / com . android . email / 1 / 1"" )  ;  attachment . m message key = message id ;  attachment . m location = null ;  attachment . m encoding = null ;  return attachment ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\transport\SmtpSenderUnitTests.java,setup simple message,"private  message   (  )  {   message message = new  message (  )  ;  message . m time stamp =  system . current time millis (  )  ;  message . m from =  address . parse to header ( "" jones@ registry .  org"" )  ;  message . m to =  address . parse to header ( "" smith@ registry .  org"" )  ;  message . m message id = ""1234567890"" ;  return message ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\transport\SmtpSenderUnitTests.java,test empty line response,"public void   (  )  throws  exception  {   mock transport mock transport = open and inject mock transport (  )  ;  mock transport . expect close (  )  ;  mock transport . expect ( null ""220  mock transport 2000  ready  to  assist  you  peewee"" )  ;  mock transport . expect literally ( ""ehlo [""  +  local   address  +  ""]"" null )  ;  try  {  m sender . send message (  - 1 )  ;  fail ( "" should not be able to send with failed open (  ) "" )  ;   }  catch  (   messaging exception me )   {   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\transport\SmtpSenderUnitTests.java,test send message with body,"public void   (  )  throws  exception  {   mock transport mock transport = open and inject mock transport (  )  ;  mock transport . expect close (  )  ;  setup open ( mock transport null )  ;   message message = setup simple message (  )  ;  message . save ( m provider context )  ;   body body = new  body (  )  ;  body . m message key = message . m id ;  body . m text content = test   string ;  body . save ( m provider context )  ;  expect simple message ( mock transport )  ;  mock transport . expect ( "" content -  type: text / plain ;  charset = utf - 8"" )  ;  mock transport . expect ( "" content -  transfer -  encoding: base64"" )  ;  mock transport . expect ( """" )  ;  mock transport . expect ( test   string   base64 )  ;  mock transport . expect ( ""\r\n\\ . "" ""250 2 . 0 . 0 kv2f1a00c02 rf8w3 vv mail accepted for delivery"" )  ;  m sender . send message ( message . m id )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\transport\SmtpSenderUnitTests.java,test send message with empty attachment,"public void   (  )  throws  messaging exception  io exception  {   mock transport mock transport = open and inject mock transport (  )  ;  mock transport . expect close (  )  ;  setup open ( mock transport null )  ;   message message = setup simple message (  )  ;  message . save ( m provider context )  ;   attachment attachment = setup simple attachment ( m provider context message . m id )  ;  attachment . save ( m provider context )  ;  expect simple message ( mock transport )  ;  mock transport . expect ( "" content -  type: multipart / mixed ;  boundary = \"" . *"" )  ;  mock transport . expect ( """" )  ;  mock transport . expect ( "" -  -  -  -  . *"" )  ;  expect simple attachment ( mock transport attachment )  ;  mock transport . expect ( """" )  ;  mock transport . expect ( "" -  -  -  -  . * -  - "" )  ;  mock transport . expect ( ""\r\n\\ . "" ""250 2 . 0 . 0 kv2f1a00c02 rf8w3 vv mail accepted for delivery"" )  ;  m sender . send message ( message . m id )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\transport\SmtpSenderUnitTests.java,test simple login,public void   (  )  throws  exception  {   mock transport mock transport = open and inject mock transport (  )  ;  setup open ( mock transport null )  ;  m sender . open (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\MessagingControllerUnitTests.java, my mock folder,public   (  folder role role  string name )  {  m role = role ;  m name = name ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\MessagingControllerUnitTests.java,create test account,private void   (  )  {  m account = new  account (  )  ;  m account . save ( get context (  )  )  ;  m account id = m account . m id ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\MessagingControllerUnitTests.java,get name,@ override public  string   (  )  {  return m name ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\MessagingControllerUnitTests.java,get role,@ override public  folder role   (  )  {  return m role ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\MessagingControllerUnitTests.java,tear down,@ override protected void   (  )  throws  exception  {  super . tear down (  )  ;  if  ( m account  !  =  null )   {   uri uri =  content uris . with appended id (  account . content   uri m account id )  ;  get context (  )  . get content resolver (  )  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\MockClock.java,advance,public void   ( long milliseconds )  {  m time +  = milliseconds ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\MockClock.java,get time,@ override public long   (  )  {  return m time ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\MockSharedPreferences.java,apply,public void   (  )  {  commit (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\MockSharedPreferences.java,clear,public  editor   (  )  {  m temp values . clear (  )  ;  return this ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\MockSharedPreferences.java,commit,"@ suppress warnings ( ""unchecked"" )  public boolean   (  )  {  m values =  (  hash map <  string  object >  ) m temp values . clone (  )  ;  return true ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\MockSharedPreferences.java,contains,public boolean   (  string key )  {  return m values . contains key ( key )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\MockSharedPreferences.java,edit,"@ suppress warnings ( ""unchecked"" )  public  editor   (  )  {  m temp values =  (  hash map <  string  object >  ) m values . clone (  )  ;  return this ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\MockSharedPreferences.java,get all,public  map <  string  ?  >    (  )  {  return new  hash map <  string  object >  ( m values )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\MockSharedPreferences.java,get boolean,public boolean   (  string key boolean def value )  {  if  ( m values . contains key ( key )  )   {  return  (  (  boolean ) m values . get ( key )  )  . boolean value (  )  ;   }  return def value ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\MockSharedPreferences.java,get float,public float   (  string key float def value )  {  if  ( m values . contains key ( key )  )   {  return  (  (  float ) m values . get ( key )  )  . float value (  )  ;   }  return def value ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\MockSharedPreferences.java,get int,public int   (  string key int def value )  {  if  ( m values . contains key ( key )  )   {  return  (  (  integer ) m values . get ( key )  )  . int value (  )  ;   }  return def value ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\MockSharedPreferences.java,get long,public long   (  string key long def value )  {  if  ( m values . contains key ( key )  )   {  return  (  (  long ) m values . get ( key )  )  . long value (  )  ;   }  return def value ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\MockSharedPreferences.java,get string,public  string   (  string key  string def value )  {  if  ( m values . contains key ( key )  )  return  (  string ) m values . get ( key )  ;  return def value ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\MockSharedPreferences.java,get string set,"@ suppress warnings ( ""unchecked"" )  public  set <  string >    (  string key  set <  string >  def values )  {  if  ( m values . contains key ( key )  )   {  return  (  set <  string >  ) m values . get ( key )  ;   }  return def values ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\MockSharedPreferences.java,put boolean,public  editor   (  string key boolean value )  {  m temp values . put ( key  boolean . value of ( value )  )  ;  return this ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\MockSharedPreferences.java,put float,public  editor   (  string key float value )  {  m temp values . put ( key value )  ;  return this ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\MockSharedPreferences.java,put int,public  editor   (  string key int value )  {  m temp values . put ( key value )  ;  return this ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\MockSharedPreferences.java,put long,public  editor   (  string key long value )  {  m temp values . put ( key value )  ;  return this ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\MockSharedPreferences.java,put string,public  editor   (  string key  string value )  {  m temp values . put ( key value )  ;  return this ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\MockSharedPreferences.java,put string set,public  editor   (  string key  set <  string >  values )  {  m temp values . put ( key values )  ;  return this ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\MockSharedPreferences.java,register on shared preference change listener,public void   (  on shared preference change listener listener )  {  throw new  unsupported operation exception (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\MockSharedPreferences.java,remove,public  editor   (  string key )  {  m temp values . remove ( key )  ;  return this ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\MockSharedPreferences.java,unregister on shared preference change listener,public void   (  on shared preference change listener listener )  {  throw new  unsupported operation exception (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\MockVendorPolicy.java,get policy,public static  bundle   (  string policy  bundle args )  {  passed policy = policy ;  passed bundle = args ;  return mock result ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\MockVendorPolicy.java,inject,public static void   (  context context )  {   vendor policy loader . inject policy for test ( context context . get package name (  )   mock vendor policy . class )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ContentCacheTests.java, content cache tests,public   (  )  {  super (  email provider . class  email content . authority )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ContentCacheTests.java,get one row cursor,private  cursor   (  )  {   matrix cursor cursor = new  matrix cursor with cached columns ( simple   projection 1 )  ;  cursor . add row ( simple   row )  ;  return cursor ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ContentCacheTests.java,set up,@ override public void   (  )  throws  exception  {  super . set up (  )  ;  m mock context = get mock context (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ContentCacheTests.java,tear down,@ override public void   (  )  throws  exception  {  super . tear down (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ContentCacheTests.java,test cached cursors,"public void   (  )  {  final  content resolver resolver = m mock context . get content resolver (  )  ;  final  context context = m mock context ;   account acct =  provider test utils . setup account ( ""account"" true context )  ;   provider test utils . setup mailbox ( ""box1"" acct . m id true context )  ;   mailbox box =  provider test utils . setup mailbox ( ""box2"" acct . m id true context )  ;   uri uri =  content uris . with appended id (  mailbox . content   uri box . m id )  ;   cursor cursor = resolver . query ( uri  mailbox . content   projection null null null )  ;  assert true ( cursor instanceof  cursor wrapper )  ;   cursor wrapped cursor =  (  (  cursor wrapper ) cursor )  . get wrapped cursor (  )  ;  assert true ( wrapped cursor instanceof  cached cursor )  ;   cached cursor cached cursor =  (  cached cursor ) wrapped cursor ;   cursor active cursor = cached cursor . get wrapped cursor (  )  ;  int active count =  content cache . s active cursors . get count ( active cursor )  ;  assert equals ( 1 active count )  ;   string[] column names = cursor . get column names (  )  ;  assert equals (  mailbox . content   projection . length column names . length )  ;  for  ( int i = 0 ;  i  <   mailbox . content   projection . length ;  i +  +  )   {  assert equals (  mailbox . content   projection[i] column names[i] )  ;   }  assert equals ( 1 cursor . get count (  )  )  ;  cursor . move to next (  )  ;  assert equals ( 0 cursor . get position (  )  )  ;  cursor . move to position ( 0 )  ;  assert equals ( 0 cursor . get position (  )  )  ;  assert false ( cursor . move to position ( 1 )  )  ;  cursor . close (  )  ;  assert true ( cached cursor . is closed (  )  )  ;  assert false ( active cursor . is closed (  )  )  ;  assert false (  content cache . s active cursors . contains ( active cursor )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ContentCacheTests.java,test close cached cursor,"public void   (  )  {   content cache cache = new  content cache ( "" name"" simple   projection 2 )  ;   cursor underlying cursor = get one row cursor (  )  ;   cursor cached cursor1 = new  cached cursor ( underlying cursor cache ""1"" )  ;   cursor cached cursor2 = new  cached cursor ( underlying cursor cache ""1"" )  ;  assert equals ( 2  content cache . s active cursors . get count ( underlying cursor )  )  ;  cached cursor1 . close (  )  ;  assert true ( cached cursor1 . is closed (  )  )  ;  assert false ( underlying cursor . is closed (  )  )  ;  cached cursor2 . close (  )  ;  assert true ( cached cursor2 . is closed (  )  )  ;  assert equals ( 0  content cache . s active cursors . get count ( underlying cursor )  )  ;  assert true ( underlying cursor . is closed (  )  )  ;  underlying cursor = get one row cursor (  )  ;  cached cursor1 = cache . put cursor ( underlying cursor ""2"" simple   projection cache . get cache token ( ""2"" )  )  ;  cached cursor2 = new  cached cursor ( underlying cursor cache ""2"" )  ;  assert equals ( 2  content cache . s active cursors . get count ( underlying cursor )  )  ;  cached cursor1 . close (  )  ;  cached cursor2 . close (  )  ;  assert equals ( 0  content cache . s active cursors . get count ( underlying cursor )  )  ;  assert false ( underlying cursor . is closed (  )  )  ;  cached cursor2 = new  cached cursor ( underlying cursor cache ""2"" )  ;  assert equals ( 1  content cache . s active cursors . get count ( underlying cursor )  )  ;  cache . invalidate (  )  ;  cached cursor2 . close (  )  ;  assert equals ( 0  content cache . s active cursors . get count ( underlying cursor )  )  ;  assert true ( underlying cursor . is closed (  )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ContentCacheTests.java,test content cache remove eldest entry,"public void   (  )  {   content cache cache = new  content cache ( "" name"" simple   projection 2 )  ;   cursor cursor1 = get one row cursor (  )  ;   cache token token = cache . get cache token ( ""1"" )  ;  cache . put cursor ( cursor1 ""1"" simple   projection token )  ;  assert equals ( 1 cache . size (  )  )  ;   cursor cursor2 = get one row cursor (  )  ;  token = cache . get cache token ( ""2"" )  ;  cache . put cursor ( cursor1 ""2"" simple   projection token )  ;  assert equals ( 2 cache . size (  )  )  ;   cursor cached cursor = cache . get cached cursor ( ""1"" simple   projection )  ;  assert not null ( cached cursor )  ;  assert true ( cached cursor instanceof  cached cursor )  ;  cached cursor = cache . get cached cursor ( ""2"" simple   projection )  ;  assert not null ( cached cursor )  ;  assert true ( cached cursor instanceof  cached cursor )  ;  assert false ( cursor1 . is closed (  )  )  ;  assert false ( cursor2 . is closed (  )  )  ;   cursor cursor3 = get one row cursor (  )  ;  token = cache . get cache token ( ""3"" )  ;  cache . put cursor ( cursor1 ""3"" simple   projection token )  ;  assert equals ( 2 cache . size (  )  )  ;  cached cursor = cache . get cached cursor ( ""1"" simple   projection )  ;  assert null ( cached cursor )  ;  cached cursor = cache . get cached cursor ( ""2"" simple   projection )  ;  assert not null ( cached cursor )  ;  assert true ( cached cursor instanceof  cached cursor )  ;  cached cursor = cache . get cached cursor ( ""3"" simple   projection )  ;  assert not null ( cached cursor )  ;  assert true ( cached cursor instanceof  cached cursor )  ;  assert false ( cursor1 . is closed (  )  )  ;  assert false ( cursor2 . is closed (  )  )  ;  assert false ( cursor3 . is closed (  )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ContentCacheTests.java,test counter map,"public void   (  )  {   content cache .  counter map <  string >  map = new  content cache .  counter map <  string >  ( 4 )  ;  map . add ( ""1"" )  ;  assert true ( map . contains ( ""1"" )  )  ;  map . add ( ""2"" )  ;  map . add ( ""2"" )  ;  map . subtract ( ""2"" )  ;  assert true ( map . contains ( ""2"" )  )  ;  map . subtract ( ""2"" )  ;  try  {  map . subtract ( ""2"" )  ;  fail ( "" removing a third time should throw an exception"" )  ;   }  catch  (   illegal state exception e )   {   }  try  {  map . subtract ( ""3"" )  ;  fail ( "" removing object never added should throw an exception"" )  ;   }  catch  (   illegal state exception e )   {   }  assert equals ( 1 map . size (  )  )  ;  assert true ( map . contains ( ""1"" )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ContentCacheTests.java,test token list,"public void   (  )  {   token list list = new  token list ( "" name"" )  ;   cache token token1a = list . add ( ""1"" )  ;  assert true ( token1a . is valid (  )  )  ;  assert equals ( ""1"" token1a . get id (  )  )  ;  assert equals ( 1 list . size (  )  )  ;   cache token token1b = list . add ( ""1"" )  ;  assert true ( token1b . is valid (  )  )  ;  assert equals ( ""1"" token1b . get id (  )  )  ;  assert true ( token1a . equals ( token1b )  )  ;  assert equals ( 2 list . size (  )  )  ;   cache token token2 = list . add ( ""2"" )  ;  assert false ( token1a . equals ( token2 )  )  ;  assert equals ( 3 list . size (  )  )  ;  assert equals ( 2 list . invalidate tokens ( ""1"" )  )  ;  assert false ( token1a . is valid (  )  )  ;  assert false ( token1b . is valid (  )  )  ;  assert true ( token2 . is valid (  )  )  ;  assert equals ( 1 list . size (  )  )  ;  assert equals ( token2 list . get ( 0 )  )  ;   cache token token3a = list . add ( ""3"" )  ;   cache token token3b = list . add ( ""3"" )  ;   cache token token3c = list . add ( ""3"" )  ;  assert true ( list . remove ( token3a )  )  ;  assert true ( list . remove ( token3b )  )  ;  assert true ( token3a . is valid (  )  )  ;  assert true ( token3b . is valid (  )  )  ;  assert true ( token3c . is valid (  )  )  ;  assert equals ( 2 list . size (  )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\AttachmentProviderTests.java, attachment provider tests,public   (  )  {  super (  attachment provider . class  attachment . attachment   provider   legacy   uri   prefix )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\AttachmentProviderTests.java,add attachment to db,private long   (  account for account  attachment new attachment )  {  new attachment . save ( m mock context )  ;  return new attachment . m id ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\AttachmentProviderTests.java,create attachment,"private  uri   (  account account long message id  string content uri str )  {   attachment new attachment =  provider test utils . setup attachment ( message id ""file"" 100 false m mock context )  ;  new attachment . set content uri ( content uri str )  ;  long attachment id = add attachment to db ( account new attachment )  ;   uri attachment uri =  attachment utilities . get attachment uri ( account . m id attachment id )  ;  return attachment uri ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\AttachmentProviderTests.java,create attachment file,private  string   (  account for account long id )  throws io exception  {   file out file = get attachment file ( for account id )  ;   bitmap bitmap =  bitmap factory . decode resource ( get context (  )  . get resources (  )  r . drawable . ic   attach   file   18dp )  ;   file output stream out = new  file output stream ( out file )  ;  bitmap . compress (  bitmap .  compress format . png 100 out )  ;  out . close (  )  ;  return out file . get absolute path (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\AttachmentProviderTests.java,create message,"private static  message   (  context c  mailbox b )  {   message m =  provider test utils . setup message ( ""1"" b . m account key b . m id true false c false false )  ;  m . m flag loaded =  message . flag   loaded   complete ;  m . save ( c )  ;  return m ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\AttachmentProviderTests.java,get attachment file,"private  file   (  account for account long id )  {   string id string =  long . to string ( id )  ;   file attachments dir = m mock context . get database path ( for account . m id  +  "" . db   att"" )  ;  if  (  ! attachments dir . exists (  )  )   {  attachments dir . mkdirs (  )  ;   }  return new  file ( attachments dir id string )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\AttachmentProviderTests.java,populate account mailbox,"private void   (  account account long mailbox id int num attachments )  throws io exception  {  long account id = account . m id ;   message message1a =  provider test utils . setup message ( ""msg1a"" account id mailbox id false true m mock context )  ;   provider test utils . setup message ( ""msg1b"" account id mailbox id false true m mock context )  ;  for  ( int count = 0 ;  count  <  num attachments ;  count +  +  )   {   attachment new attachment =  provider test utils . setup attachment ( message1a . m id ""file""  +  count 100 * count true m mock context )  ;  create attachment file ( account new attachment . m id )  ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\AttachmentProviderTests.java,set up,@ override public void   (  )  throws  exception  {  super . set up (  )  ;  m mock context = get mock context (  )  ;  m mock resolver = m mock context . get content resolver (  )  ;  m email provider = new  email provider (  )  ;  m email provider . att
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\AttachmentProviderTests.java,test delete account,"public void   (  )  throws io exception  {   account account1 =  provider test utils . setup account ( ""attach - acct - del1"" false m mock context )  ;  account1 . save ( m mock context )  ;  long account1 id = account1 . m id ;   mailbox mailbox1 =  provider test utils . setup mailbox ( ""mbox1"" account1 id true m mock context )  ;  long mailbox1 id = mailbox1 . m id ;   mailbox mailbox2 =  provider test utils . setup mailbox ( ""mbox2"" account1 id true m mock context )  ;  long mailbox2 id = mailbox2 . m id ;   account account2 =  provider test utils . setup account ( ""attach - acct - del2"" false m mock context )  ;  account2 . save ( m mock context )  ;  long account2 id = account2 . m id ;   mailbox mailbox3 =  provider test utils . setup mailbox ( ""mbox3"" account2 id true m mock context )  ;  long mailbox3 id = mailbox3 . m id ;   mailbox mailbox4 =  provider test utils . setup mailbox ( ""mbox4"" account2 id true m mock context )  ;  long mailbox4 id = mailbox4 . m id ;  populate account mailbox ( account1 mailbox1 id 3 )  ;  populate account mailbox ( account1 mailbox2 id 1 )  ;  populate account mailbox ( account2 mailbox3 id 5 )  ;  populate account mailbox ( account2 mailbox4 id 2 )  ;   file directory1 =  attachment utilities . get attachment directory ( m mock context account1 . m id )  ;  assert equals ( 4 directory1 . list files (  )  . length )  ;   file directory2 =  attachment utilities . get attachment directory ( m mock context account2 . m id )  ;  assert equals ( 7 directory2 . list files (  )  . length )  ;   attachment utilities . delete all account attachment files ( m mock context account1 id )  ;  assert equals ( 0 directory1 . list files (  )  . length )  ;  assert equals ( 7 directory2 . list files (  )  . length )  ;   attachment utilities . delete all account attachment files ( m mock context account2 id )  ;  assert equals ( 0 directory1 . list files (  )  . length )  ;  assert equals ( 0 directory2 . list files (  )  . length )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\AttachmentProviderTests.java,test delete files,"public void   (  )  throws io exception  {   account account1 =  provider test utils . setup account ( ""attachment - query"" false m mock context )  ;  account1 . save ( m mock context )  ;  final long message1 id = 1 ;  final long message2 id = 2 ;  final long message3 id = 3 ;  final long message4 id = 4 ;   attachment new attachment1 =  provider test utils . setup attachment ( message1 id ""file1"" 100 true m mock context )  ;   attachment new attachment2 =  provider test utils . setup attachment ( message2 id ""file2"" 200 true m mock context )  ;   attachment new attachment3 =  provider test utils . setup attachment ( message2 id ""file3"" 100 true m mock context )  ;   attachment new attachment4 =  provider test utils . setup attachment ( message3 id ""file4"" 100 true m mock context )  ;  create attachment file ( account1 new attachment1 . m id )  ;  create attachment file ( account1 new attachment2 . m id )  ;  create attachment file ( account1 new attachment3 . m id )  ;   file attachments dir =  attachment utilities . get attachment directory ( m mock context account1 . m id )  ;  assert equals ( 3 attachments dir . list files (  )  . length )  ;   attachment utilities . delete all attachment files ( m mock context account1 . m id message4 id )  ;  assert equals ( 3 attachments dir . list files (  )  . length )  ;   attachment utilities . delete all attachment files ( m mock context account1 . m id message3 id )  ;  assert equals ( 3 attachments dir . list files (  )  . length )  ;   attachment utilities . delete all attachment files ( m mock context account1 . m id message2 id )  ;  assert equals ( 1 attachments dir . list files (  )  . length )  ;   attachment utilities . delete all attachment files ( m mock context account1 . m id message1 id )  ;  assert equals ( 0 attachments dir . list files (  )  . length )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\AttachmentProviderTests.java,test delete mailbox,"public void   (  )  throws io exception  {   account account1 =  provider test utils . setup account ( ""attach - mbox - del"" false m mock context )  ;  account1 . save ( m mock context )  ;  long account1 id = account1 . m id ;   mailbox mailbox1 =  provider test utils . setup mailbox ( ""mbox1"" account1 id true m mock context )  ;  long mailbox1 id = mailbox1 . m id ;   mailbox mailbox2 =  provider test utils . setup mailbox ( ""mbox2"" account1 id true m mock context )  ;  long mailbox2 id = mailbox2 . m id ;  populate account mailbox ( account1 mailbox1 id 3 )  ;  populate account mailbox ( account1 mailbox2 id 1 )  ;   file attachments dir =  attachment utilities . get attachment directory ( m mock context account1 . m id )  ;  assert equals ( 4 attachments dir . list files (  )  . length )  ;   attachment utilities . delete all mailbox attachment files ( m mock context account1 id mailbox1 id )  ;  assert equals ( 1 attachments dir . list files (  )  . length )  ;   attachment utilities . delete all mailbox attachment files ( m mock context account1 id mailbox2 id )  ;  assert equals ( 0 attachments dir . list files (  )  . length )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\AttachmentProviderTests.java,test get type,"public void   (  )  throws  messaging exception  {   account account1 =  provider test utils . setup account ( ""get - type"" false m mock context )  ;  account1 . save ( m mock context )  ;  final long message1 id = 1 ;  long attachment1 id = 1 ;  long attachment2 id = 2 ;  long attachment3 id = 3 ;  long attachment4 id = 4 ;  long attachment5 id = 5 ;  long attachment6 id = 6 ;   uri attachment1 uri =  attachment utilities . get attachment uri ( account1 . m id attachment1 id )  ;   string type = m mock resolver . get type ( attachment1 uri )  ;  assert null ( type )  ;   attachment new attachment2 =  provider test utils . setup attachment ( message1 id ""file2"" 100 false m mock context )  ;  new attachment2 . m mime type = ""image / jpg"" ;  attachment2 id = add attachment to db ( account1 new attachment2 )  ;   attachment new attachment3 =  provider test utils . setup attachment ( message1 id ""file3"" 100 false m mock context )  ;  new attachment3 . m mime type = ""text / plain"" ;  attachment3 id = add attachment to db ( account1 new attachment3 )  ;   attachment new attachment4 =  provider test utils . setup attachment ( message1 id ""file4 . doc"" 100 false m mock context )  ;  new attachment4 . m mime type = ""application / octet - stream"" ;  attachment4 id = add attachment to db ( account1 new attachment4 )  ;   attachment new attachment5 =  provider test utils . setup attachment ( message1 id ""file5 . xyz"" 100 false m mock context )  ;  new attachment5 . m mime type = ""application / octet - stream"" ;  attachment5 id = add attachment to db ( account1 new attachment5 )  ;   attachment new attachment6 =  provider test utils . setup attachment ( message1 id ""file6"" 100 false m mock context )  ;  new attachment6 . m mime type = """" ;  attachment6 id = add attachment to db ( account1 new attachment6 )  ;   uri uri =  attachment utilities . get attachment uri ( account1 . m id attachment2 id )  ;  type = m mock resolver . get type ( uri )  ;  assert equals ( ""image / jpg"" type )  ;  uri =  attachment utilities . get attachment uri ( account1 . m id attachment3 id )  ;  type = m mock resolver . get type ( uri )  ;  assert equals ( ""text / plain"" type )  ;  uri =  attachment utilities . get attachment uri ( account1 . m id attachment4 id )  ;  type = m mock resolver . get type ( uri )  ;  assert equals ( ""application / msword"" type )  ;  uri =  attachment utilities . get attachment uri ( account1 . m id attachment5 id )  ;  type = m mock resolver . get type ( uri )  ;  assert equals ( ""application / xyz"" type )  ;  uri =  attachment utilities . get attachment uri ( account1 . m id attachment6 id )  ;  type = m mock resolver . get type ( uri )  ;  assert equals ( ""application / octet - stream"" type )  ;  uri =  attachment utilities . get attachment thumbnail uri ( account1 . m id attachment2 id 62 62 )  ;  type = m mock resolver . get type ( uri )  ;  assert equals ( ""image / png"" type )  ;  uri =  attachment utilities . get attachment thumbnail uri ( account1 . m id attachment3 id 62 62 )  ;  type = m mock resolver . get type ( uri )  ;  assert equals ( ""image / png"" type )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\AttachmentProviderTests.java,test inbox query,"public void   (  )  {   account a1 =  provider test utils . setup account ( ""inboxquery - 1"" true m mock context )  ;   account a2 =  provider test utils . setup account ( ""inboxquery - 2"" true m mock context )  ;   mailbox b1 =  provider test utils . setup mailbox ( ""box1"" a1 . m id true m mock context  mailbox . type   inbox )  ;   mailbox b2 =  provider test utils . setup mailbox ( ""box2"" a1 . m id true m mock context  mailbox . type   mail )  ;   mailbox b3 =  provider test utils . setup mailbox ( ""box3"" a2 . m id true m mock context  mailbox . type   inbox )  ;   mailbox b4 =  provider test utils . setup mailbox ( ""box4"" a2 . m id true m mock context  mailbox . type   mail )  ;   mailbox bt =  provider test utils . setup mailbox ( ""boxt"" a2 . m id true m mock context  mailbox . type   trash )  ;   message m11 = create message ( m mock context b1 )  ;   message m12 = create message ( m mock context b1 )  ;   message m21 = create message ( m mock context b2 )  ;   message m22 = create message ( m mock context b2 )  ;   message m31 = create message ( m mock context b3 )  ;   message mt1 = create message ( m mock context bt )  ;  create attachment ( a1 m11 . m id null )  ;  create attachment ( a1 m11 . m id null )  ;  create attachment ( a1 m12 . m id null )  ;  create attachment ( a1 m12 . m id ""file: /  /  / path / to / file1"" )  ;  create attachment ( a1 m21 . m id null )  ;  create attachment ( a1 m21 . m id null )  ;  create attachment ( a1 m22 . m id null )  ;  create attachment ( a1 m22 . m id ""file: /  /  / path / to / file2"" )  ;  create attachment ( a2 m31 . m id null )  ;  create attachment ( a2 mt1 . m id null )  ;  create attachment ( a2 mt1 . m id null )  ;   cursor c = null ;  try  {  c = m mock context . get content resolver (  )  . query (  attachment . content   uri  attachment info . projection  email content .  attachment . precache   selection null  attachment . record   id  +  "" desc"" )  ;  assert equals ( 9 c . get count (  )  )  ;   }  finally  {  c . close (  )  ;   }  try  {  c = m mock context . get content resolver (  )  . query (  attachment . content   uri  attachment info . projection  email content .  attachment . precache   inbox   selection null  attachment . record   id  +  "" desc"" )  ;  assert equals ( 4 c . get count (  )  )  ;   }  finally  {  c . close (  )  ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\AttachmentProviderTests.java,test open file,"public void   (  )  throws  messaging exception  io exception  {   account account1 =  provider test utils . setup account ( ""open - file"" false m mock context )  ;  account1 . save ( m mock context )  ;  final long message1 id = 1 ;  long attachment1 id = 1 ;  long attachment2 id = 2 ;   uri file1 uri =  attachment utilities . get attachment uri ( account1 . m id attachment1 id )  ;   uri file2 uri =  attachment utilities . get attachment uri ( account1 . m id attachment2 id )  ;   asset file descriptor afd ;  try  {  afd = m mock resolver . open asset file descriptor ( file1 uri ""r"" )  ;  fail ( "" should throw an exception on a missing attachment entry"" )  ;   }  catch  (   file not found exception fnf )   {   }   attachment new attachment =  provider test utils . setup attachment ( message1 id ""file"" 100 false m mock context )  ;  attachment1 id = add attachment to db ( account1 new attachment )  ;  assert equals ( "" broken test:  unexpected id assignment"" 1 attachment1 id )  ;  try  {  afd = m mock resolver . open asset file descriptor ( file1 uri ""r"" )  ;  fail ( "" should throw an exception on a missing attachment file"" )  ;   }  catch  (   file not found exception fnf )   {   }  create attachment file ( account1 attachment2 id )  ;   attachment new attachment2 =  provider test utils . setup attachment ( message1 id ""file"" 100 false m mock context )  ;  new attachment2 . m content id = null ;  new attachment2 . set content uri (  attachment utilities . get attachment uri ( account1 . m id attachment2 id )  . to string (  )  )  ;  new attachment2 . m mime type = ""image / png"" ;  attachment2 id = add attachment to db ( account1 new attachment2 )  ;  assert equals ( "" broken test:  unexpected id assignment"" 2 attachment2 id )  ;  afd = m mock resolver . open asset file descriptor ( file2 uri ""r"" )  ;  assert not null ( afd )  ;  afd . close (  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\AttachmentProviderTests.java,test open thumbnail,"public void   (  )  throws  messaging exception  io exception  {   account account1 =  provider test utils . setup account ( ""open - thumbnail"" false m mock context )  ;  account1 . save ( m mock context )  ;  final long message1 id = 1 ;  long attachment1 id = 1 ;  long attachment2 id = 2 ;   uri thumb1 uri =  attachment utilities . get attachment thumbnail uri ( account1 . m id attachment1 id 62 62 )  ;   uri thumb2 uri =  attachment utilities . get attachment thumbnail uri ( account1 . m id attachment2 id 62 62 )  ;   asset file descriptor afd = m mock resolver . open asset file descriptor ( thumb1 uri ""r"" )  ;  assert null ( afd )  ;   attachment new attachment =  provider test utils . setup attachment ( message1 id ""file"" 100 false m mock context )  ;  attachment1 id = add attachment to db ( account1 new attachment )  ;  assert equals ( "" broken test:  unexpected id assignment"" 1 attachment1 id )  ;  afd = m mock resolver . open asset file descriptor ( thumb1 uri ""r"" )  ;  assert null ( afd )  ;  create attachment file ( account1 attachment2 id )  ;   attachment new attachment2 =  provider test utils . setup attachment ( message1 id ""file"" 100 false m mock context )  ;  new attachment2 . m content id = null ;  new attachment2 . set content uri (  attachment utilities . get attachment uri ( account1 . m id attachment2 id )  . to string (  )  )  ;  new attachment2 . m mime type = ""image / png"" ;  attachment2 id = add attachment to db ( account1 new attachment2 )  ;  assert equals ( "" broken test:  unexpected id assignment"" 2 attachment2 id )  ;  afd = m mock resolver . open asset file descriptor ( thumb2 uri ""r"" )  ;  assert not null ( afd )  ;  afd . close (  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\AttachmentProviderTests.java,test query,"public void   (  )  throws  messaging exception  {   account account1 =  provider test utils . setup account ( ""attachment - query"" false m mock context )  ;  account1 . save ( m mock context )  ;  final long message1 id = 1 ;  long attachment1 id = 1 ;  long attachment2 id = 2 ;  long attachment3 id = 3 ;   uri attachment1 uri =  attachment utilities . get attachment uri ( account1 . m id attachment1 id )  ;   uri attachment2 uri =  attachment utilities . get attachment uri ( account1 . m id attachment2 id )  ;   uri attachment3 uri =  attachment utilities . get attachment uri ( account1 . m id attachment3 id )  ;   cursor c = m mock resolver . query ( attachment1 uri  (  string[] ) null null  (  string[] ) null null )  ;  assert null ( c )  ;   attachment new attachment1 =  provider test utils . setup attachment ( message1 id ""file1"" 100 false m mock context )  ;  new attachment1 . set content uri (  attachment utilities . get attachment uri ( account1 . m id attachment1 id )  . to string (  )  )  ;  attachment1 id = add attachment to db ( account1 new attachment1 )  ;  assert equals ( "" broken test:  unexpected id assignment"" 1 attachment1 id )  ;   attachment new attachment2 =  provider test utils . setup attachment ( message1 id ""file2"" 200 false m mock context )  ;  new attachment2 . set content uri (  attachment utilities . get attachment uri ( account1 . m id attachment2 id )  . to string (  )  )  ;  attachment2 id = add attachment to db ( account1 new attachment2 )  ;  assert equals ( "" broken test:  unexpected id assignment"" 2 attachment2 id )  ;   attachment new attachment3 =  provider test utils . setup attachment ( message1 id ""file3"" 300 false m mock context )  ;  new attachment3 . set content uri (  attachment utilities . get attachment uri ( account1 . m id attachment3 id )  . to string (  )  )  ;  attachment3 id = add attachment to db ( account1 new attachment3 )  ;  assert equals ( "" broken test:  unexpected id assignment"" 3 attachment3 id )  ;  attachment2 uri =  attachment utilities . get attachment uri ( account1 . m id attachment2 id )  ;  c = m mock resolver . query ( attachment2 uri new  string[] {  attachment utilities .  columns .    id  attachment utilities .  columns . data  attachment utilities .  columns . display   name  attachment utilities .  columns . size }  null null null )  ;  assert equals ( 1 c . get count (  )  )  ;  assert true ( c . move to first (  )  )  ;  assert equals ( attachment2 id c . get long ( 0 )  )  ;  assert equals ( attachment2 uri . to string (  )  c . get string ( 1 )  )  ;  assert equals ( ""file2"" c . get string ( 2 )  )  ;  assert equals ( 200 c . get int ( 3 )  )  ;  attachment3 uri =  attachment utilities . get attachment uri ( account1 . m id attachment3 id )  ;  c = m mock resolver . query ( attachment3 uri new  string[] {  attachment utilities .  columns . size  attachment utilities .  columns . display   name  attachment utilities .  columns . data  attachment utilities .  columns .    id }  null null null )  ;  assert equals ( 1 c . get count (  )  )  ;  assert true ( c . move to first (  )  )  ;  assert equals ( attachment3 id c . get long ( 3 )  )  ;  assert equals ( attachment3 uri . to string (  )  c . get string ( 2 )  )  ;  assert equals ( ""file3"" c . get string ( 1 )  )  ;  assert equals ( 300 c . get int ( 0 )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\AttachmentProviderTests.java,test resolve attachment id to content uri,"public void   (  )  throws  messaging exception  {   account account1 =  provider test utils . setup account ( ""attachment - query"" false m mock context )  ;  account1 . save ( m mock context )  ;  final long message1 id = 1 ;  final long attachment1 id = 1 ;  final  uri attachment1 uri =  attachment utilities . get attachment uri ( account1 . m id attachment1 id )  ;   uri result =  attachment utilities . resolve attachment id to content uri ( m mock resolver attachment1 uri )  ;  assert equals ( attachment1 uri result )  ;   {   uri attachment uri = create attachment ( account1 message1 id ""file: /  /  / path / to / file"" )  ;   uri content uri =  attachment utilities . resolve attachment id to content uri ( m mock resolver attachment uri )  ;  assert equals ( ""file: /  /  / path / to / file"" content uri . to string (  )  )  ;   }   {   uri attachment uri = create attachment ( account1 message1 id null )  ;   uri content uri =  attachment utilities . resolve attachment id to content uri ( m mock resolver attachment uri )  ;  assert equals ( attachment uri content uri )  ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\PolicyTests.java, policy tests,public   (  )  {  super (  email provider . class  email content . authority )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\PolicyTests.java,set up,@ override public void   (  )  throws  exception  {  super . set up (  )  ;  m mock context = get mock context (  )  ;   content cache . invalidate all caches (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\PolicyTests.java,setup simple attachment,private  attachment   (  string name long size  account acct )  {   attachment att =  provider test utils . setup attachment (  - 1 name size false m mock context )  ;  att . m account key = acct . m id ;  return att ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\PolicyTests.java,tear down,@ override public void   (  )  throws  exception  {  super . tear down (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\PolicyTests.java,test get account id with policy key,"public void   (  )  {   string security sync key = ""key"" ;   account account1 =  provider test utils . setup account ( ""acct1"" true m mock context )  ;   policy policy1 = new  policy (  )  ;   security policy . set account policy ( m mock context account1 policy1 security sync key )  ;   account account2 =  provider test utils . setup account ( ""acct2"" true m mock context )  ;   policy policy2 = new  policy (  )  ;   security policy . set account policy ( m mock context account2 policy2 security sync key )  ;  account1 . refresh ( m mock context )  ;  account2 . refresh ( m mock context )  ;  assert true ( account1 . m policy key  >  0 )  ;  assert true ( account2 . m policy key  >  0 )  ;  assert equals ( account1 . m id  policy . get account id with policy key ( m mock context account1 . m policy key )  )  ;  assert equals ( account2 . m id  policy . get account id with policy key ( m mock context account2 . m policy key )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\PolicyTests.java,test parcel,public void   (  )  {   policy policy = new  policy (  )  ;  policy . m password mode =  policy . password   mode   strong ;  policy . m password min length = 6 ;  policy . m password complex chars = 5 ;  policy . m password expiration days = 4 ;  policy . m password history = 3 ;  policy . m password max fails = 8 ;  policy . m max screen lock time = 600 ;  policy . m require remote wipe = true ;  policy . m require encryption = true ;  policy . m require encryption external = true ;  policy . m require manual sync when roaming = true ;  policy . m dont allow camera = false ;  policy . m dont allow attachments = true ;  policy . m dont allow html = false ;  policy . m max attachment size = 22222 ;  policy . m max text truncation size = 33333 ;  policy . m max html truncation size = 44444 ;  policy . m max email lookback = 5 ;  policy . m max calendar lookback = 6 ;  policy . m password recovery enabled = true ;   parcel parcel =  parcel . obtain (  )  ;  policy . write to parcel ( parcel 0 )  ;  parcel . set data position ( 0 )  ;   policy read policy =  policy . creator . create from parcel ( parcel )  ;  assert equals ( policy read policy )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\PolicyTests.java,test set and clear account policy,"public void   (  )  {   string security sync key = ""key"" ;   account account =  provider test utils . setup account ( ""acct"" true m mock context )  ;  assert equals ( 0 account . m policy key )  ;  assert equals ( 0  email content . count ( m mock context  policy . content   uri )  )  ;   policy policy = new  policy (  )  ;   security policy . set account policy ( m mock context account policy security sync key )  ;  account . refresh ( m mock context )  ;  assert true ( account . m policy key  >  0 )  ;   policy db policy =  policy . restore policy with id ( m mock context account . m policy key )  ;  assert not null ( db policy )  ;  assert equals ( policy db policy )  ;  assert equals ( security sync key account . m security sync key )  ;   security policy . clear account policy ( m mock context account )  ;  account . refresh ( m mock context )  ;  assert equals ( 0 account . m policy key )  ;  assert equals ( 0  email content . count ( m mock context  policy . content   uri )  )  ;  account . refresh ( m mock context )  ;  assert null ( account . m security sync key )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\PolicyTests.java,test set attachment flags for new policy,"public void   (  )  {   account acct =  provider test utils . setup account ( ""acct1"" true m mock context )  ;   policy policy1 = new  policy (  )  ;  policy1 . m dont allow attachments = true ;   security policy . set account policy ( m mock context acct policy1 null )  ;   mailbox box =  provider test utils . setup mailbox ( ""box1"" acct . m id true m mock context )  ;   message msg1 =  provider test utils . setup message ( ""message1"" acct . m id box . m id false false m mock context )  ;   array list <  attachment >  atts = new  array list <  attachment >  (  )  ;   attachment att1 = setup simple attachment ( ""file name1"" 10001l acct )  ;  atts . add ( att1 )  ;   attachment att2 = setup simple attachment ( ""file name2"" 20001l acct )  ;  atts . add ( att2 )  ;  msg1 . m attachments = atts ;  msg1 . save ( m mock context )  ;   message msg2 =  provider test utils . setup message ( ""message2"" acct . m id box . m id false false m mock context )  ;  atts . clear (  )  ;   attachment att3 = setup simple attachment ( ""file name3"" 70001l acct )  ;  atts . add ( att3 )  ;   attachment att4 = setup simple attachment ( ""file name4"" 5001l acct )  ;  atts . add ( att4 )  ;  msg2 . m attachments = atts ;  msg2 . save ( m mock context )  ;  assert equals ( 4  email content . count ( m mock context  attachment . content   uri )  )  ;  assert equals ( 0  email content . count ( m mock context  attachment . content   uri cant   download   selection null )  )  ;   policy . set attachment flags for new policy ( m mock context acct policy1 )  ;  assert equals ( 4  email content . count ( m mock context  attachment . content   uri cant   download   selection null )  )  ;   policy policy2 = new  policy (  )  ;  policy2 . m max attachment size = 20000 ;   policy . set attachment flags for new policy ( m mock context acct policy2 )  ;  assert equals ( 2  email content . count ( m mock context  attachment . content   uri cant   download   selection null )  )  ;  att2 =  attachment . restore attachment with id ( m mock context att2 . m id )  ;  assert true (  ( att2 . m flags &  attachment . flag   policy   disallows   download )   !  =  0 )  ;  att3 =  attachment . restore attachment with id ( m mock context att3 . m id )  ;  assert true (  ( att3 . m flags &  attachment . flag   policy   disallows   download )   !  =  0 )  ;   policy policy3 = new  policy (  )  ;  policy3 . m max attachment size = 5001 ;   policy . set attachment flags for new policy ( m mock context acct policy3 )  ;  assert equals ( 3  email content . count ( m mock context  attachment . content   uri cant   download   selection null )  )  ;  att4 =  attachment . restore attachment with id ( m mock context att4 . m id )  ;  assert true (  ( att4 . m flags &  attachment . flag   policy   disallows   download )   =  =  0 )  ;   policy policy4 = new  policy (  )  ;   policy . set attachment flags for new policy ( m mock context acct policy4 )  ;  assert equals ( 0  email content . count ( m mock context  attachment . content   uri cant   download   selection null )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\AccountBackupRestoreTests.java, account backup restore tests,public   (  )  {  super (  email provider . class  email content . authority )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\AccountBackupRestoreTests.java,assert restored account equal,"public static void   (  account expect  account actual )  {  assert equals ( "" m display name"" expect . m display name actual . m display name )  ;  assert equals ( "" m email address"" expect . m email address actual . m email address )  ;  assert equals ( "" m sync lookback"" expect . m sync lookback actual . m sync lookback )  ;  assert equals ( "" m sync interval"" expect . m sync interval actual . m sync interval )  ;  assert equals ( "" m flags"" expect . m flags actual . m flags )  ;  assert equals ( "" m sender name"" expect . m sender name actual . m sender name )  ;  assert equals ( "" m protocol version"" expect . m protocol version actual . m protocol version )  ;  assert equals ( "" m signature"" expect . m signature actual . m signature )  ;  assert equals ( 0 actual . m policy key )  ;  assert null ( actual . m sync key )  ;  assert null ( actual . m security sync key )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\AccountBackupRestoreTests.java,set up,@ override protected void   (  )  throws  exception  {  super . set up (  )  ;  m mock context = get mock context (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\AccountBackupRestoreTests.java,tear down,@ override protected void   (  )  throws  exception  {  super . tear down (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\AccountBackupRestoreTests.java,test backup and restore,"public void   (  )  {   account saved1 =  provider test utils . setup account ( ""test backup1"" false m mock context )  ;  saved1 . m host auth recv =  provider test utils . setup host auth ( ""legacy - recv"" 0 false m mock context )  ;  saved1 . m host auth send =  provider test utils . setup host auth ( ""legacy - send"" 0 false m mock context )  ;  saved1 . save ( m mock context )  ;   account saved2 =  provider test utils . setup account ( ""test backup2"" false m mock context )  ;  saved2 . m host auth recv =  provider test utils . setup host auth ( ""legacy - recv"" 0 false m mock context )  ;  saved2 . m host auth send =  provider test utils . setup host auth ( ""legacy - send"" 0 false m mock context )  ;  saved2 . save ( m mock context )  ;  assert equals ( 2  email content . count ( m mock context  account . content   uri )  )  ;  assert equals ( 4  email content . count ( m mock context  host auth . content   uri )  )  ;   account backup restore . backup ( m mock context )  ;   content resolver cr = m mock context . get content resolver (  )  ;  cr . delete (  account . content   uri null null )  ;  cr . delete (  host auth . content   uri null null )  ;  assert equals ( 0  email content . count ( m mock context  account . content   uri )  )  ;  assert equals ( 0  email content . count ( m mock context  host auth . content   uri )  )  ;  get provider (  )  . shutdown (  )  ;  assert equals ( 2  email content . count ( m mock context  account . content   uri )  )  ;  assert equals ( 4  email content . count ( m mock context  host auth . content   uri )  )  ;   cursor c = cr . query (  account . content   uri  account . content   projection null null ""   id asc"" )  ;  assert not null ( c )  ;  assert true ( c . move to next (  )  )  ;   account restored = new  account (  )  ;  restored . restore ( c )  ;   host auth recv =  host auth . restore host auth with id ( m mock context restored . m host auth key recv )  ;  assert not null ( recv )  ;   host auth send =  host auth . restore host auth with id ( m mock context restored . m host auth key send )  ;  assert not null ( send )  ;   provider test utils . assert host auth equal ( ""backup"" saved1 . m host auth recv recv false )  ;   provider test utils . assert host auth equal ( ""backup"" saved1 . m host auth send send false )  ;  assert restored account equal ( saved1 restored )  ;  assert true ( c . move to next (  )  )  ;  restored = new  account (  )  ;  restored . restore ( c )  ;  recv =  host auth . restore host auth with id ( m mock context restored . m host auth key recv )  ;  assert not null ( recv )  ;  send =  host auth . restore host auth with id ( m mock context restored . m host auth key send )  ;  assert not null ( send )  ;   provider test utils . assert host auth equal ( ""backup"" saved2 . m host auth recv recv false )  ;   provider test utils . assert host auth equal ( ""backup"" saved2 . m host auth send send false )  ;  assert restored account equal ( saved2 restored )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\ResourceHelperTest.java,brokentest get account color,public void   (  )  {   integer last color = null ;   paint last paint = null ;  for  ( long account id =  - 1 ;  account id  <  100 ;  account id +  +  )   {   integer color = m resource helper . get account color ( account id )  ;   paint paint = m resource helper . get account color paint ( account id )  ;  assert not null ( color )  ;  assert not null ( paint )  ;  assert false ( color . equals ( last color )  )  ;  assert false ( paint . equals ( last paint )  )  ;  last color = color ;  last paint = paint ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\ResourceHelperTest.java,set up,@ override protected void   (  )  throws  exception  {  super . set up (  )  ;  m resource helper =  resource helper . get instance ( get context (  )  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTestUtils.java,assert account equal,"public static void   (  string caller  account expect  account actual )  {  if  ( expect  =  =  actual )   {  return ;   }  assert email content equal ( caller expect actual )  ;  assert equals ( caller  +  "" m display name"" expect . m display name actual . m display name )  ;  assert equals ( caller  +  "" m email address"" expect . m email address actual . m email address )  ;  assert equals ( caller  +  "" m sync key"" expect . m sync key actual . m sync key )  ;  assert equals ( caller  +  "" m sync lookback"" expect . m sync lookback actual . m sync lookback )  ;  assert equals ( caller  +  "" m sync interval"" expect . m sync interval actual . m sync interval )  ;  assert equals ( caller  +  "" m host auth key recv"" expect . m host auth key recv actual . m host auth key recv )  ;  assert equals ( caller  +  "" m host auth key send"" expect . m host auth key send actual . m host auth key send )  ;  assert equals ( caller  +  "" m flags"" expect . m flags actual . m flags )  ;  assert equals ( caller  +  "" m sender name"" expect . m sender name actual . m sender name )  ;  assert equals ( caller  +  "" m protocol version"" expect . m protocol version actual . m protocol version )  ;  assert equals ( caller  +  "" m security sync key"" expect . m security sync key actual . m security sync key )  ;  assert equals ( caller  +  "" m signature"" expect . m signature actual . m signature )  ;  assert equals ( caller  +  "" m policy key"" expect . m policy key actual . m policy key )  ;  assert equals ( caller  +  "" m ping duration"" expect . m ping duration actual . m ping duration )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTestUtils.java,assert attachment equal,"public static void   (  string caller  attachment expect  attachment actual )  {  if  ( expect  =  =  actual )   {  return ;   }  assert email content equal ( caller expect actual )  ;  assert equals ( caller  +  "" m file name"" expect . m file name actual . m file name )  ;  assert equals ( caller  +  "" m mime type"" expect . m mime type actual . m mime type )  ;  assert equals ( caller  +  "" m size"" expect . m size actual . m size )  ;  assert equals ( caller  +  "" m content id"" expect . m content id actual . m content id )  ;  assert equals ( caller  +  "" m content uri"" expect . get content uri (  )  actual . get content uri (  )  )  ;  assert equals ( caller  +  "" m cached file uri"" expect . get cached file uri (  )  actual . get cached file uri (  )  )  ;  assert equals ( caller  +  "" m message key"" expect . m message key actual . m message key )  ;  assert equals ( caller  +  "" m location"" expect . m location actual . m location )  ;  assert equals ( caller  +  "" m encoding"" expect . m encoding actual . m encoding )  ;  assert equals ( caller  +  "" m content"" expect . m content actual . m content )  ;  assert equals ( caller  +  "" m flags"" expect . m flags actual . m flags )  ;   more asserts . assert equals ( caller  +  "" m content bytes"" expect . m content bytes actual . m content bytes )  ;  assert equals ( caller  +  "" m account key"" expect . m account key actual . m account key )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTestUtils.java,assert email content equal,"private static void   (  string caller  email content expect  email content actual )  {  if  ( expect  =  =  actual )   {  return ;   }  assert equals ( caller  +  "" m id"" expect . m id actual . m id )  ;  assert equals ( caller  +  "" m base uri"" expect . m base uri actual . m base uri )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTestUtils.java,assert host auth equal,"public static void   (  string caller  host auth expect  host auth actual boolean test email content )  {  if  ( expect  =  =  actual )   {  return ;   }  if  ( test email content )   {  assert email content equal ( caller expect actual )  ;   }  assert equals ( caller  +  "" m protocol"" expect . m protocol actual . m protocol )  ;  assert equals ( caller  +  "" m address"" expect . m address actual . m address )  ;  assert equals ( caller  +  "" m port"" expect . m port actual . m port )  ;  assert equals ( caller  +  "" m flags"" expect . m flags actual . m flags )  ;  assert equals ( caller  +  "" m login"" expect . m login actual . m login )  ;  assert equals ( caller  +  "" m password"" expect . m password actual . m password )  ;  assert equals ( caller  +  "" m domain"" expect . m domain actual . m domain )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTestUtils.java,assert mailbox equal,"public static void   (  string caller  mailbox expect  mailbox actual )  {  if  ( expect  =  =  actual )   {  return ;   }  assert email content equal ( caller expect actual )  ;  assert equals ( caller  +  "" m display name"" expect . m display name actual . m display name )  ;  assert equals ( caller  +  "" m server id"" expect . m server id actual . m server id )  ;  assert equals ( caller  +  "" m parent server id"" expect . m parent server id actual . m parent server id )  ;  assert equals ( caller  +  "" m parent key"" expect . m parent key actual . m parent key )  ;  assert equals ( caller  +  "" m account key"" expect . m account key actual . m account key )  ;  assert equals ( caller  +  "" m type"" expect . m type actual . m type )  ;  assert equals ( caller  +  "" m delimiter"" expect . m delimiter actual . m delimiter )  ;  assert equals ( caller  +  "" m sync key"" expect . m sync key actual . m sync key )  ;  assert equals ( caller  +  "" m sync lookback"" expect . m sync lookback actual . m sync lookback )  ;  assert equals ( caller  +  "" m sync interval"" expect . m sync interval actual . m sync interval )  ;  assert equals ( caller  +  "" m sync time"" expect . m sync time actual . m sync time )  ;  assert equals ( caller  +  "" m flag visible"" expect . m flag visible actual . m flag visible )  ;  assert equals ( caller  +  "" m sync status"" expect . m sync status actual . m sync status )  ;  assert equals ( caller  +  "" m last touched time"" expect . m last touched time actual . m last touched time )  ;  assert equals ( caller  +  "" m ui sync status"" expect . m ui sync status actual . m ui sync status )  ;  assert equals ( caller  +  "" m ui last sync result"" expect . m ui last sync result actual . m ui last sync result )  ;  assert equals ( caller  +  "" m total count"" expect . m total count actual . m total count )  ;  assert equals ( caller  +  "" m hierarchical name"" expect . m hierarchical name actual . m hierarchical name )  ;  assert equals ( caller  +  "" m last full sync time"" expect . m last full sync time actual . m last full sync time )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTestUtils.java,assert message equal,"public static void   (  string caller  message expect  message actual )  {  if  ( expect  =  =  actual )   {  return ;   }  assert email content equal ( caller expect actual )  ;  assert equals ( caller  +  "" m display name"" expect . m display name actual . m display name )  ;  assert equals ( caller  +  "" m time stamp"" expect . m time stamp actual . m time stamp )  ;  assert equals ( caller  +  "" m subject"" expect . m subject actual . m subject )  ;  assert equals ( caller  +  "" m flag read  =  false"" expect . m flag read actual . m flag read )  ;  assert equals ( caller  +  "" m flag read  =  false"" expect . m flag seen actual . m flag seen )  ;  assert equals ( caller  +  "" m flag loaded"" expect . m flag loaded actual . m flag loaded )  ;  assert equals ( caller  +  "" m flag favorite"" expect . m flag favorite actual . m flag favorite )  ;  assert equals ( caller  +  "" m flag attachment"" expect . m flag attachment actual . m flag attachment )  ;  assert equals ( caller  +  "" m flags"" expect . m flags actual . m flags )  ;  assert equals ( caller  +  "" m server id"" expect . m server id actual . m server id )  ;  assert equals ( caller  +  "" m server time stamp"" expect . m server time stamp actual . m server time stamp )  ;  assert equals ( caller  +  "" m draft info"" expect . m draft info actual . m draft info )  ;  assert equals ( caller  +  "" m message id"" expect . m message id actual . m message id )  ;  assert equals ( caller  +  "" m mailbox key"" expect . m mailbox key actual . m mailbox key )  ;  assert equals ( caller  +  "" m account key"" expect . m account key actual . m account key )  ;  assert equals ( caller  +  "" m main mailbox key"" expect . m main mailbox key actual . m main mailbox key )  ;  assert equals ( caller  +  "" m from"" expect . m from actual . m from )  ;  assert equals ( caller  +  "" m to"" expect . m to actual . m to )  ;  assert equals ( caller  +  "" m cc"" expect . m cc actual . m cc )  ;  assert equals ( caller  +  "" m bcc"" expect . m bcc actual . m bcc )  ;  assert equals ( caller  +  "" m reply to"" expect . m reply to actual . m reply to )  ;  assert equals ( caller  +  "" m meeting info"" expect . m meeting info actual . m meeting info )  ;  assert equals ( caller  +  "" m snippet"" expect . m snippet actual . m snippet )  ;  assert equals ( caller  +  "" m protocol search info"" expect . m protocol search info actual . m protocol search info )  ;  assert equals ( caller  +  "" m thread topic"" expect . m thread topic actual . m thread topic )  ;  assert equals ( caller  +  "" m sync data"" expect . m sync data actual . m sync data )  ;  assert equals ( caller  +  "" m sync data"" expect . m server conversation id actual . m server conversation id )  ;  assert equals ( caller  +  "" m text"" expect . m text actual . m text )  ;  assert equals ( caller  +  "" m html"" expect . m html actual . m html )  ;  assert equals ( caller  +  "" m source key"" expect . m source key actual . m source key )  ;  assert equals ( caller  +  "" m quoted text start pos"" expect . m quoted text start pos actual . m quoted text start pos )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTestUtils.java,create temp eml file,"public static  uri   (  context context  message msg  file directory )  throws  exception  {   file output file =  file . create temp file ( ""message"" ""tmp"" directory )  ;  assert not null ( output file )  ;   file output stream output stream = new  file output stream ( output file )  ;   rfc822 output . write to ( context msg output stream true false null )  ;  output stream . close (  )  ;  return  uri . from file ( output file )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTestUtils.java,delete account,public static void   (  context context long account id )  {  context . get content resolver (  )  . delete (  content uris . with appended id (  account . content   uri account id )  null null )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTestUtils.java,setup account,"public static  account   (  string name boolean save it  context context )  {   account account = new  account (  )  ;  account . m display name = name ;  account . m email address = name  +  ""@android . com"" ;  account . m sync key = ""sync - key - ""  +  name ;  account . m sync lookback = 1 ;  account . m sync interval =  account . check   interval   never ;  account . m host auth key recv = 0 ;  account . m host auth key send = 0 ;  account . m flags = 4 ;  account . m sender name = name ;  account . m protocol version = ""2 . 5""  +  name ;  account . m policy key = 0 ;  account . m security sync key = ""sec - sync - key - ""  +  name ;  account . m signature = ""signature - ""  +  name ;  if  ( save it )   {  account . save ( context )  ;   }  return account ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTestUtils.java,setup attachment,public static  attachment   ( long message id  string file name long length boolean save it  context context )  {  return setup attachment ( message id file name length 0 save it context )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTestUtils.java,setup body,public static  body   ( long message id  string text content  string html content boolean save it  context context )  {   body body = new  body (  )  ;  body . m message key = message id ;  body . m html content = html content ;  body . m text content = text content ;  body . m source key = message id  +  0x1000 ;  if  ( save it )   {  body . save ( context )  ;   }  return body ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTestUtils.java,setup host auth,"public static  host auth   (  string protocol  string name boolean save it  context context )  {   host auth host auth = new  host auth (  )  ;  host auth . m protocol = protocol ;  host auth . m address = ""address - ""  +  name ;  host auth . m port = 100 ;  host auth . m flags = 200 ;  host auth . m login = ""login - ""  +  name ;  host auth . m password = ""password - ""  +  name ;  host auth . m domain = ""domain - ""  +  name ;  if  ( save it )   {  host auth . save ( context )  ;   }  return host auth ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTestUtils.java,setup mailbox,"public static  mailbox   (  string name long account id boolean save it  context context int type char delimiter )  {   mailbox box = new  mailbox (  )  ;  int delimiter index = name . last index of ( delimiter )  ;   string display name = name ;  if  ( delimiter index  >  0 )   {  display name = name . substring ( delimiter index  +  1 )  ;   }  box . m display name = display name ;  box . m server id = name ;  box . m parent server id = ""parent - serverid - ""  +  name ;  box . m parent key = 4 ;  box . m account key = account id ;  box . m type = type ;  box . m delimiter = delimiter ;  box . m sync key = ""sync - key - ""  +  name ;  box . m sync lookback = 2 ;  box . m sync interval =  account . check   interval   never ;  box . m sync time = 3 ;  box . m flag visible = true ;  box . m flags = 5 ;  if  ( save it )   {  box . save ( context )  ;   }  return box ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTestUtils.java,setup message,"public static  message   (  string name long account id long mailbox id boolean add body boolean save it  context context boolean starred boolean read )  {   message message = new  message (  )  ;  message . m display name = name ;  message . m time stamp = 100  +  name . length (  )  ;  message . m subject = ""subject ""  +  name ;  message . m flag read = read ;  message . m flag seen = read ;  message . m flag loaded =  message . flag   loaded   unloaded ;  message . m flag favorite = starred ;  message . m flag attachment = true ;  message . m flags = 0 ;  message . m server id = ""serverid ""  +  name ;  message . m server time stamp = 300  +  name . length (  )  ;  message . m message id = ""messageid ""  +  name ;  message . m mailbox key = mailbox id ;  message . m account key = account id ;  message . m from = ""from ""  +  name ;  message . m to = ""to ""  +  name ;  message . m cc = ""cc ""  +  name ;  message . m bcc = ""bcc ""  +  name ;  message . m reply to = ""replyto ""  +  name ;  message . m meeting info = ""123""  +  account id  +  mailbox id +  name . length (  )  ;  if  ( add body )   {  message . m text = ""body text ""  +  name ;  message . m html = ""body html ""  +  name ;  message . m source key = 400  +  name . length (  )  ;   }  if  ( save it )   {  message . save ( context )  ;   }  return message ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\SecurityPolicyTests.java, mock context,public   (  context mock context  context real context )  {  super ( mock context )  ;  m real context = real context ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\SecurityPolicyTests.java, policy set,private   ( long flags )  {  m min password length =  ( int )  (  ( flags &  legacy policy set . password   length   mask )   >  >   legacy policy set . password   length   shift )  ;  m password mode =  ( int )  ( flags &  legacy policy set . password   mode   mask )  ;  m max password fails =  ( int )  (  ( flags &  legacy policy set . password   max   fails   mask )   >  >   legacy policy set . password   max   fails   shift )  ;  m max screen lock time =  ( int )  (  ( flags &  legacy policy set . screen   lock   time   mask )   >  >   legacy policy set . screen   lock   time   shift )  ;  m require remote wipe = 0  !  =   ( flags &  legacy policy set . require   remote   wipe )  ;  m password expiration days =  ( int )  (  ( flags &  legacy policy set . password   expiration   mask )   >  >   legacy policy set . password   expiration   shift )  ;  m password history =  ( int )  (  ( flags &  legacy policy set . password   history   mask )   >  >   legacy policy set . password   history   shift )  ;  m password complex chars =  ( int )  (  ( flags &  legacy policy set . password   complex   chars   mask )   >  >   legacy policy set . password   complex   chars   shift )  ;  m require encryption = 0  !  =   ( flags &  legacy policy set . require   encryption )  ;  m require encryption external = 0  !  =   ( flags &  legacy policy set . require   encryption   external )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\SecurityPolicyTests.java, security policy tests,public   (  )  {  super (  email provider . class  email content . authority )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\SecurityPolicyTests.java,assert account policy consistent,"private long   ( long account id long old key )  {   account account =  account . restore account with id ( m mock context account id )  ;  long policy key = account . m policy key ;  assert true ( policy key  >  0 )  ;   policy policy =  policy . restore policy with id ( m mock context policy key )  ;  assert not null ( policy )  ;  assert equals ( account . m policy key policy . m id )  ;  assert equals ( account id  policy . get account id with policy key ( m mock context policy . m id )  )  ;  if  ( old key  >  0 )   {  assert null ( ""old policy not cleaned up""  policy . restore policy with id ( m mock context old key )  )  ;   }  return policy key ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\SecurityPolicyTests.java,get application context,@ override public  context   (  )  {  return this ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\SecurityPolicyTests.java,get package name,@ override public  string   (  )  {  return m real context . get package name (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\SecurityPolicyTests.java,get system service,@ override public  object   (  string name )  {  return m real context . get system service ( name )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\SecurityPolicyTests.java,policy set equals policy,private boolean   (  policy set ps  policy policy )  {  if  (  ( ps . m password mode  >  >   legacy policy set . password   mode   shift )   !  =  policy . m password mode )   {  return false ;   }  if  ( ps . m min password length  !  =  policy . m password min length )  return false ;  if  ( ps . m password complex chars  !  =  policy . m password complex chars )  return false ;  if  ( ps . m password history  !  =  policy . m password history )  return false ;  if  ( ps . m password expiration days  !  =  policy . m password expiration days )  return false ;  if  ( ps . m max password fails  !  =  policy . m password max fails )  return false ;  if  ( ps . m max screen lock time  !  =  policy . m max screen lock time )  return false ;  if  ( ps . m require remote wipe  !  =  policy . m require remote wipe )  return false ;  if  ( ps . m require encryption  !  =  policy . m require encryption )  return false ;  if  ( ps . m require encryption external  !  =  policy . m require encryption external )  return false ;  return true ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\SecurityPolicyTests.java,set up,@ override protected void   (  )  throws  exception  {  super . set up (  )  ;  m mock context = new  mock context2 ( get mock context (  )  m context )  ;   content cache . invalidate all caches (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\SecurityPolicyTests.java,setup policy,private  policy   ( int min password length int password mode int max password fails int max screen lock time boolean require remote wipe int password expiration days int password history int password complex chars boolean require encryption boolean dont allow camera )  throws  illegal argument exception  {   policy policy = new  policy (  )  ;  policy . m password min length = min password length ;  policy . m password mode = password mode ;  policy . m password max fails = max password fails ;  policy . m max screen lock time = max screen lock time ;  policy . m require remote wipe = require remote wipe ;  policy . m password expiration days = password expiration days ;  policy . m password history = password history ;  policy . m password complex chars = password complex chars ;  policy . m require encryption = require encryption ;  policy . m dont allow camera = dont allow camera ;  return policy ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\SecurityPolicyTests.java,tear down,@ override protected void   (  )  throws  exception  {  super . tear down (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\SecurityPolicyTests.java,test aggregator,"public void   (  )  {  m security policy =  security policy . get instance ( m mock context )  ;  assert equals ( empty   policy m security policy . compute aggregate policy (  )  )  ;   provider test utils . setup account ( ""no - sec - 1"" true m mock context )  ;   provider test utils . setup account ( ""no - sec - 2"" true m mock context )  ;  assert equals ( empty   policy m security policy . compute aggregate policy (  )  )  ;   account a3 =  provider test utils . setup account ( ""sec - 3"" true m mock context )  ;   policy p3ain = setup policy ( 10  policy . password   mode   simple 0 0 false 0 0 0 false false )  ;   security policy . set account policy ( m mock context a3 p3ain null )  ;   policy p3aout = m security policy . compute aggregate policy (  )  ;  assert not null ( p3aout )  ;  assert equals ( p3ain p3aout )  ;   policy p3bin = setup policy ( 10  policy . password   mode   simple 15 16 false 6 2 3 false false )  ;   security policy . set account policy ( m mock context a3 p3bin null )  ;   policy p3bout = m security policy . compute aggregate policy (  )  ;  assert not null ( p3bout )  ;  assert equals ( p3bin p3bout )  ;   policy p4in = setup policy ( 20  policy . password   mode   strong 25 26 false 0 5 7 false true )  ;   account a4 =  provider test utils . setup account ( ""sec - 4"" true m mock context )  ;   security policy . set account policy ( m mock context a4 p4in null )  ;   policy p4out = m security policy . compute aggregate policy (  )  ;  assert not null ( p4out )  ;  assert equals ( 20 p4out . m password min length )  ;  assert equals (  policy . password   mode   strong p4out . m password mode )  ;  assert equals ( 15 p4out . m password max fails )  ;  assert equals ( 16 p4out . m max screen lock time )  ;  assert equals ( 6 p4out . m password expiration days )  ;  assert equals ( 5 p4out . m password history )  ;  assert equals ( 7 p4out . m password complex chars )  ;  assert false ( p4out . m require remote wipe )  ;  assert false ( p4out . m require encryption )  ;  assert false ( p4out . m require encryption external )  ;  assert true ( p4out . m dont allow camera )  ;   policy p5in = setup policy ( 4  policy . password   mode   simple 5 6 true 1 0 0 true false )  ;   account a5 =  provider test utils . setup account ( ""sec - 5"" true m mock context )  ;   security policy . set account policy ( m mock context a5 p5in null )  ;   policy p5out = m security policy . compute aggregate policy (  )  ;  assert not null ( p5out )  ;  assert equals ( 20 p5out . m password min length )  ;  assert equals (  policy . password   mode   strong p5out . m password mode )  ;  assert equals ( 5 p5out . m password max fails )  ;  assert equals ( 6 p5out . m max screen lock time )  ;  assert equals ( 1 p5out . m password expiration days )  ;  assert equals ( 5 p5out . m password history )  ;  assert equals ( 7 p5out . m password complex chars )  ;  assert true ( p5out . m require remote wipe )  ;  assert false ( p5out . m require encryption external )  ;  assert true ( p5out . m dont allow camera )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\SecurityPolicyTests.java,test disable admin,"public void   (  )  {   account a1 =  provider test utils . setup account ( ""disable - 1"" true m mock context )  ;   policy p1 = setup policy ( 10  policy . password   mode   simple 0 0 false 0 0 0 false false )  ;   security policy . set account policy ( m mock context a1 p1 ""security - sync - key - 1"" )  ;   account a2 =  provider test utils . setup account ( ""disable - 2"" true m mock context )  ;   policy p2 = setup policy ( 20  policy . password   mode   strong 25 26 false 0 0 0 false false )  ;   security policy . set account policy ( m mock context a2 p2 ""security - sync - key - 2"" )  ;   account a3 =  provider test utils . setup account ( ""disable - 3"" true m mock context )  ;   security policy . clear account policy ( m mock context a3 )  ;  m security policy =  security policy . get instance ( m mock context )  ;   policy before = m security policy . get aggregate policy (  )  ;  m security policy . on admin enabled ( true )  ;   policy after1 = m security policy . get aggregate policy (  )  ;  assert equals ( before after1 )  ;   account a1a =  account . restore account with id ( m mock context a1 . m id )  ;  assert not null ( a1a . m security sync key )  ;  assert true ( a1a . m policy key  >  0 )  ;   account a2a =  account . restore account with id ( m mock context a2 . m id )  ;  assert not null ( a2a . m security sync key )  ;  assert true ( a2a . m policy key  >  0 )  ;   account a3a =  account . restore account with id ( m mock context a3 . m id )  ;  assert null ( a3a . m security sync key )  ;  assert true ( a3a . m policy key  =  =  0 )  ;  m security policy . delete secured accounts ( m mock context )  ;   policy after2 = m security policy . get aggregate policy (  )  ;  assert equals ( empty   policy after2 )  ;   account a1b =  account . restore account with id ( m mock context a1 . m id )  ;  assert null ( a1b )  ;   account a2b =  account . restore account with id ( m mock context a2 . m id )  ;  assert null ( a2b )  ;   account a3b =  account . restore account with id ( m mock context a3 . m id )  ;  assert null ( a3b . m security sync key )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\SecurityPolicyTests.java,test equals,@ small test public void   (  )  {   policy p1 = setup policy ( 1  policy . password   mode   strong 3 4 true 7 8 9 false false )  ;   policy p2 = setup policy ( 1  policy . password   mode   strong 3 4 true 7 8 9 false false )  ;   policy p3 = setup poli
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\SecurityPolicyTests.java,test find expiring account,"public void   (  )  {   provider test utils . setup account ( ""expiring - 1"" true m mock context )  ;  long next expiring account id =  security policy . find shortest expiration ( m mock context )  ;  assert equals (  - 1 next expiring account id )  ;   account a2 =  provider test utils . setup account ( ""expiring - 2"" true m mock context )  ;   policy p2 = setup policy ( 20  policy . password   mode   strong 25 26 false 30 0 0 false true )  ;   security policy . set account policy ( m mock context a2 p2 null )  ;  next expiring account id =  security policy . find shortest expiration ( m mock context )  ;  assert equals ( a2 . m id next expiring account id )  ;   account a3 =  provider test utils . setup account ( ""expiring - 3"" true m mock context )  ;   policy p3 = setup policy ( 20  policy . password   mode   strong 25 26 false 60 0 0 false true )  ;   security policy . set account policy ( m mock context a3 p3 null )  ;  next expiring account id =  security policy . find shortest expiration ( m mock context )  ;  assert equals ( a2 . m id next expiring account id )  ;   account a4 =  provider test utils . setup account ( ""expiring - 4"" true m mock context )  ;   policy p4 = setup policy ( 20  policy . password   mode   strong 25 26 false 15 0 0 false true )  ;   security policy . set account policy ( m mock context a4 p4 null )  ;  next expiring account id =  security policy . find shortest expiration ( m mock context )  ;  assert equals ( a4 . m id next expiring account id )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java, mock context,public   (  context mock context  context real context )  {  super ( mock context )  ;  m real context = real context ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\SecurityPolicyTests.java,test getdp manager password quality,public void   (  )  {   policy p1 = setup policy ( 0  policy . password   mode   none 0 0 false 0 0 0 false false )  ;  assert equals (  device policy manager . password   quality   unspecified p1 . getdp manager password quality (  )  )  ;   policy p2 = setup policy ( 4  policy . password   mode   simple 0 0 false 0 0 0 false false )  ;  assert equals (  device policy manager . password   quality   numeric p2 . getdp manager password quality (  )  )  ;   policy p3 = setup policy ( 4  policy . password   mode   strong 0 0 false 0 0 0 false false )  ;  assert equals (  device policy manager . password   quality   alphanumeric p3 . getdp manager password quality (  )  )  ;   policy p4 = setup policy ( 4  policy . password   mode   strong 0 0 false 0 0 2 false false )  ;  assert equals (  device policy manager . password   quality   complex p4 . getdp manager password quality (  )  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java, provider tests,public   (  )  {  super (  email provider . class  email content . authority )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\SecurityPolicyTests.java,test policy flags to policy,public void   (  )  {  long flags = 67096612l ;   policy set ps = new  policy set ( flags )  ;   policy policy =  legacy policy set . flags to policy ( flags )  ;  assert true ( policy set equals policy ( ps policy )  )  ;  flags = 52776591691846l ;  ps = new  policy set ( flags )  ;  policy =  legacy policy set . flags to policy ( flags )  ;  assert true ( policy set equals policy ( ps policy )  )  ;  flags = 1689605957029924l ;  ps = new  policy set ( flags )  ;  policy =  legacy policy set . flags to policy ( flags )  ;  assert true ( policy set equals policy ( ps policy )  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,am account list has account,private boolean   ( android . accounts .  account[] am account list  account account  context context )  {   string email = account . m email address ;  for  (  android . accounts .  account am account : am account list )   {  if  ( am account . name . equals ( email )  )   {  return true ;   }   }  return false ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\SecurityPolicyTests.java,test set clear hold flag,"public void   (  )  {   account a2 =  provider test utils . setup account ( ""holdflag - 2"" false m mock context )  ;  a2 . m flags =  account . flags   sync   disabled |  account . flags   security   hold ;  a2 . save ( m mock context )  ;   account a2a =  account . restore account with id ( m mock context a2 . m id )  ;  assert equals (  account . flags   sync   disabled |  account . flags   security   hold a2a . m flags )  ;   security policy . set account hold flag ( m mock context a2 false )  ;  assert equals (  account . flags   sync   disabled a2 . m flags )  ;   account a2b =  account . restore account with id ( m mock context a2 . m id )  ;  assert equals (  account . flags   sync   disabled a2b . m flags )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,assert equals,private void   (  mailbox expected  mailbox actual )  {  if  ( expected  =  =  null && actual  =  =  null )  return ;  assert true ( expected  !  =  null && actual  !  =  null )  ;  assert equals except server id ( expected actual expected . m server id )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,assert equals except server id,private void   (  mailbox expected  mailbox actual  string server id )  {  if  ( expected  =  =  null && actual  =  =  null )  return ;  assert true ( expected  !  =  null && actual  !  =  null )  ;  assert equals ( expected . m display name actual . m display name )  ;  assert equals ( server id actual . m server id )  ;  assert equals ( expected . m parent key actual . m parent key )  ;  assert equals ( expected . m account key actual . m account key )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\SecurityPolicyTests.java,test setting account policy,"@ small test public void   (  )  {   account account =  provider test utils . setup account ( ""testaccount"" true m mock context )  ;  long account id = account . m id ;   policy initial = setup policy ( 10  policy . password   mode   simple 0 0 false 0 0 "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,count,private int   (  context context  uri uri  string selection  string[] selection args )  {   cursor c = context . get content resolver (  )  . query ( uri  email content . id   projection selection selection args null )  ;  try  {  return c . get count (  )  ;   }  finally  {  c . close (  )  ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,create account,private  account   (  context c  string name  host auth recv auth  host auth send auth )  {   account account =  provider test utils . setup account ( name false c )  ;  if  ( recv auth  !  =  null )   {  account . m host auth key recv = recv auth . m id ;  if  ( send auth  =  =  null )   {  account . m host auth key send = recv auth . m id ;   }   }  if  ( send auth  !  =  null )   {  account . m host auth key send = send auth . m id ;   }  account . save ( c )  ;  return account ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,create mailbox,"private  mailbox   (  context c  string display name  string server id long parent key long account id )  {   mailbox box = new  mailbox (  )  ;  box . m display name = display name ;  box . m server id = server id ;  box . m parent key = parent key ;  box . m account key = account id ;  box . m type =  mailbox . type   mail ;  box . m delimiter = ' / ' ;  box . m sync key = ""sync - key"" ;  box . m sync lookback = 2 ;  box . m sync interval =  account . check   interval   never ;  box . m sync time = 3 ;  box . m flag visible = true ;  box . m flags = 5 ;  box . save ( c )  ;  return box ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,create message,"private static  message   (  context c  mailbox b boolean starred boolean read )  {  return  provider test utils . setup message ( ""1"" b . m account key b . m id true true c starred read )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,create type mailbox,"private  mailbox   (  context c long account id int type )  {   mailbox box = new  mailbox (  )  ;  box . m display name = ""foo"" ;  box . m server id = ""1:1"" ;  box . m parent key = 0 ;  box . m account key = account id ;  box . m type = type ;  box . save ( c )  ;  return box ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,get application context,@ override public  context   (  )  {  return this ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\SecurityPolicyTests.java,test wipe expiring accounts,"public void   (  )  {  m security policy =  security policy . get instance ( m mock context )  ;   account a1 =  provider test utils . setup account ( ""expired - 1"" true m mock context )  ;   account a2 =  provider test utils . setup account ( ""expired - 2"" true m mock context )  ;   policy p2 = setup policy ( 20  policy . password   mode   strong 25 26 false 0 0 0 false true )  ;   security policy . set account policy ( m mock context a2 p2 null )  ;  long account1 id = a1 . m id ;  long account2 id = a2 . m id ;   mailbox box1 =  provider test utils . setup mailbox ( ""box1"" account1 id true m mock context )  ;  long box1 id = box1 . m id ;   provider test utils . setup message ( ""message1"" account1 id box1 id false true m mock context )  ;   provider test utils . setup message ( ""message2"" account1 id box1 id false true m mock context )  ;   mailbox box2 =  provider test utils . setup mailbox ( ""box2"" account2 id true m mock context )  ;  long box2 id = box2 . m id ;   provider test utils . setup message ( ""message3"" account2 id box2 id false true m mock context )  ;   provider test utils . setup message ( ""message4"" account2 id box2 id false true m mock context )  ;  boolean wiped =  security policy . wipe expired accounts ( m mock context )  ;  assert false ( wiped )  ;  assert equals ( 2  email content . count ( m mock context  account . content   uri )  )  ;  assert equals ( 2  email content . count ( m mock context  mailbox . content   uri )  )  ;  assert equals ( 4  email content . count ( m mock context  message . content   uri )  )  ;   account a3 =  provider test utils . setup account ( ""expired - 3"" true m mock context )  ;   policy p3 = setup policy ( 20  policy . password   mode   strong 25 26 false 30 0 0 false true )  ;   security policy . set account policy ( m mock context a3 p3 null )  ;  long account3 id = a3 . m id ;   mailbox box3 =  provider test utils . setup mailbox ( ""box3"" account3 id true m mock context )  ;  long box3 id = box3 . m id ;   provider test utils . setup message ( ""message5"" account3 id box3 id false true m mock context )  ;   provider test utils . setup message ( ""message6"" account3 id box3 id false true m mock context )  ;  assert equals ( 3  email content . count ( m mock context  account . content   uri )  )  ;  assert equals ( 3  email content . count ( m mock context  mailbox . content   uri )  )  ;  assert equals ( 6  email content . count ( m mock context  message . content   uri )  )  ;  wiped =  security policy . wipe expired accounts ( m mock context )  ;  assert true ( wiped )  ;  assert equals ( 3  email content . count ( m mock context  account . content   uri )  )  ;  assert equals ( 2  email content . count ( m mock context  mailbox . content   uri )  )  ;  assert equals ( 4  email content . count ( m mock context  message . content   uri )  )  ;   account account =  account . restore account with id ( m mock context account1 id )  ;  assert equals ( 0 account . m flags &  account . flags   security   hold )  ;  account =  account . restore account with id ( m mock context account2 id )  ;  assert equals ( 0 account . m flags &  account . flags   security   hold )  ;  account =  account . restore account with id ( m mock context account3 id )  ;  assert equals (  account . flags   security   hold account . m flags &  account . flags   security   hold )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,get eclair style shortcut uri,"private static  uri   (  account account )  {  return  account . content   uri . build upon (  )  . append encoded path ( """"  +  account . m id )  . build (  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,get message count,private int   ( long mailbox id )  {  return  utility . get first row int ( m mock context  content uris . with appended id (  mailbox . content   uri mailbox id )  new  string[] {  mailbox columns . message   count }  null null null 0 )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,get package name,@ override public  string   (  )  {  return m real context . get package name (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,get system service,@ override public  object   (  string name )  {  return m real context . get system service ( name )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,get unread count,"private int   ( long mailbox id )  {   string text = null ;   cursor c = null ;  try  {  c = m mock context . get content resolver (  )  . query (  mailbox . content   uri mailbox   unread   count   projection  email content . record   id  +  "" =  ? "" new  string[] {  string . value of ( mailbox id )  }  null )  ;  c . move to first (  )  ;  text = c . get string ( mailbox   unread   count   colmun )  ;   }  finally  {  c . close (  )  ;   }  return  integer . value of ( text )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,load body for message id,"private  body   ( long message id )  {   cursor c = null ;  try  {  c = m mock context . get content resolver (  )  . query (  email content .  body . content   uri  email content .  body . content   projection  body columns . message   key  +  "" =  ? "" new  string[] {  string . value of ( message id )  }  null )  ;  int num bodies = c . get count (  )  ;  assert true ( ""at most one body"" num bodies  <  2 )  ;  return c . move to first (  )   ?   email content . get content ( m mock context c  body . class )  : null ;   }  finally  {  c . close (  )  ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,set minus one to message counts,private void   (  )  {   content values values = new  content values (  )  ;  values . put (  mailbox columns . message   count  - 1 )  ;  sq lite database db = get provider (  )  . get database ( m mock context )  ;  db . update (  mailbox . table   name values null null )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,set up,@ override public void   (  )  throws  exception  {  super . set up (  )  ;  m mock context = new  mock context2 ( get mock context (  )  get context (  )  )  ;  m provider = get provider (  )  ;  m provider . inject attachment service ( mock   attachment
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,setup unread message,public static  message   (  string name long account id long mailbox id boolean add body boolean save it  context context )  {   message msg =  provider test utils . setup message ( name account id mailbox id add body false context )  ;  msg . m flag read = false ;  if  ( save it )   {  msg . save ( context )  ;   }  return msg ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,tear down,@ override public void   (  )  throws  exception  {  super . tear down (  )  ;  m provider . inject attachment service ( null )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,test account delete,"public void   (  )  {   account account1 =  provider test utils . setup account ( ""account - delete - 1"" true m mock context )  ;  long account1 id = account1 . m id ;   account account2 =  provider test utils . setup account ( ""account - delete - 2"" true m mock context )  ;  long account2 id = account2 . m id ;  int num boxes =  email content . count ( m mock context  account . content   uri null null )  ;  assert equals ( 2 num boxes )  ;   uri uri =  content uris . with appended id (  account . content   uri account1 id )  ;  m mock context . get content resolver (  )  . delete ( uri null null )  ;  num boxes =  email content . count ( m mock context  account . content   uri null null )  ;  assert equals ( 1 num boxes )  ;  uri =  content uris . with appended id (  account . content   uri account2 id )  ;  m mock context . get content resolver (  )  . delete ( uri null null )  ;  num boxes =  email content . count ( m mock context  account . content   uri null null )  ;  assert equals ( 0 num boxes )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,test account get host auth recv,"public void   (  )  {   account account =  provider test utils . setup account ( ""account - hostauth"" false m mock context )  ;  account . m host auth recv =  provider test utils . setup host auth ( ""account - hostauth - recv""  - 1 false m mock context )  ;  account . save ( m mock context )  ;   host auth auth get ;   host auth auth test ;  auth test = account . m host auth recv ;  assert not null ( auth test )  ;  assert true ( account . m host auth key recv  !  =  0 )  ;  auth get = account . get or create host auth recv ( m mock context )  ;  assert true ( auth get  =  =  auth test )  ;  auth test =  host auth . restore host auth with id ( m mock context account . m host auth key recv )  ;  account . m host auth recv = null ;  auth get = account . get or create host auth recv ( m mock context )  ;  assert not null ( auth get )  ;  assert not null ( account . m host auth recv )  ;   provider test utils . assert host auth equal ( ""test account get host auth recv - 1"" auth test auth get )  ;  auth test = new  host auth (  )  ;  account . m host auth recv = null ;  account . m host auth key recv = 0 ;  auth get = account . get or create host auth recv ( m mock context )  ;  assert not null ( auth get )  ;  assert not null ( account . m host auth recv )  ;   provider test utils . assert host auth equal ( ""test account get host auth recv - 2"" auth test auth get )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,test account get host auth send,"public void   (  )  {   account account =  provider test utils . setup account ( ""account - hostauth"" false m mock context )  ;  account . m host auth send =  provider test utils . setup host auth ( ""account - hostauth - send""  - 1 false m mock context )  ;  account . save ( m mock context )  ;   host auth auth get ;   host auth auth test ;  auth test = account . m host auth send ;  assert not null ( auth test )  ;  assert true ( account . m host auth key send  !  =  0 )  ;  auth get = account . get or create host auth send ( m mock context )  ;  assert true ( auth get  =  =  auth test )  ;  auth test =  host auth . restore host auth with id ( m mock context account . m host auth key send )  ;  account . m host auth send = null ;  auth get = account . get or create host auth send ( m mock context )  ;  assert not null ( auth get )  ;  assert not null ( account . m host auth send )  ;   provider test utils . assert host auth equal ( ""test account get host auth send - 1"" auth test auth get )  ;  auth test = new  host auth (  )  ;  account . m host auth send = null ;  account . m host auth key send = 0 ;  auth get = account . get or create host auth send ( m mock context )  ;  assert not null ( auth get )  ;  assert not null ( account . m host auth send )  ;   provider test utils . assert host auth equal ( ""test account get host auth sendv - 2"" auth test auth get )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,test account is security hold,"public void   (  )  {  final  context context = m mock context ;   account acct1 =  provider test utils . setup account ( ""acct1"" true context )  ;   account acct2 =  provider test utils . setup account ( ""acct2"" false context )  ;  acct2 . m flags| =  account . flags   security   hold ;  acct2 . save ( context )  ;  assert false (  account . is security hold ( context acct1 . m id )  )  ;  assert true (  account . is security hold ( context acct2 . m id )  )  ;  assert false (  account . is security hold ( context 9999999 )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,test account is valid id,"public void   (  )  {  final  account account1 =  provider test utils . setup account ( ""account - 1"" true m mock context )  ;  final  account account2 =  provider test utils . setup account ( ""account - 2"" true m mock context )  ;  assert true (  account . is valid id ( m mock context account1 . m id )  )  ;  assert true (  account . is valid id ( m mock context account2 . m id )  )  ;  assert false (  account . is valid id ( m mock context 1234567 )  )  ;  assert false (  account . is valid id ( m mock context  - 1 )  )  ;  assert false (  account . is valid id ( m mock context  - 500 )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,test account parcel,"public void   (  )  {   account account1 =  provider test utils . setup account ( ""parcel"" false m mock context )  ;   bundle b = new  bundle (  )  ;  b . put parcelable ( ""account"" account1 )  ;   parcel p =  parcel . obtain (  )  ;  b . write to parcel ( p 0 )  ;  p . set data position ( 0 )  ;   bundle b2 = new  bundle (  account . class . get class loader (  )  )  ;  b2 . read from parcel ( p )  ;   account account2 =  (  account ) b2 . get parcelable ( ""account"" )  ;  p . recycle (  )  ;   provider test utils . assert account equal ( ""test account parcel"" account1 account2 )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,test account save,"@ small test public void   (  )  {   account account1 =  provider test utils . setup account ( ""account - save"" true m mock context )  ;  long account1 id = account1 . m id ;   account account2 =  account . restore account with id ( m mock context account"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,test account save host auth,"@ small test public void   (  )  {   account account1 =  provider test utils . setup account ( ""account - hostauth"" false m mock context )  ;  account1 . m host auth recv =  provider test utils . setup host auth ( ""account - hostauth - recv""  - 1 false m "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,test body database corruption recovery,"public void   (  )  {  final  content resolver resolver = m mock context . get content resolver (  )  ;  final  context context = m mock context ;   account acct =  provider test utils . setup account ( ""acct1"" true context )  ;   mailbox box1 =  provider test utils . setup mailbox ( ""box1"" acct . m id true context )  ;   provider test utils . setup message ( ""message1"" acct . m id box1 . m id true true context )  ;   provider test utils . setup message ( ""message2"" acct . m id box1 . m id true true context )  ;   provider test utils . setup message ( ""message3"" acct . m id box1 . m id true true context )  ;   provider test utils . setup message ( ""message4"" acct . m id box1 . m id true true context )  ;  int count =  email content . count ( m mock context  message . content   uri null null )  ;  assert equals ( 4 count )  ;  count =  email content . count ( m mock context  body . content   uri null null )  ;  assert equals ( 4 count )  ;   file db file = m mock context . get database path (  email provider . body   database   name )  ;  assert true ( db file  !  =  null )  ;  assert true ( db file . exists (  )  )  ;  assert true ( db file . delete (  )  )  ;  assert false ( db file . exists (  )  )  ;  db file = m mock context . get database path (  email provider . database   name )  ;  assert true ( db file  !  =  null )  ;  assert true ( db file . exists (  )  )  ;  resolver . update (  email provider . integrity   check   uri null null null )  ;  count =  email content . count ( m mock context  message . content   uri null null )  ;  assert equals ( 0 count )  ;  count =  email content . count ( m mock context  body . content   uri null null )  ;  assert equals ( 0 count )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,test body retrieve,"public void   (  )  {   message message1 =  provider test utils . setup message ( ""bodyretrieve"" 1 1 true true m mock context )  ;  long message id = message1 . m id ;  assert equals ( message1 . m text  body . restore body text with message id ( m mock context message id )  )  ;  assert equals ( message1 . m html  body . restore body html with message id ( m mock context message id )  )  ;  assert equals ( message1 . m source key  body . restore body source key ( m mock context message id )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,test cascade delete account,"public void   (  )  {   account account1 =  provider test utils . setup account ( ""account - delete - cascade"" true m mock context )  ;  long account1 id = account1 . m id ;   mailbox box1 =  provider test utils . setup mailbox ( ""box1"" account1 id true m mock context )  ;  long box1 id = box1 . m id ;   provider test utils . setup message ( ""message1"" account1 id box1 id false true m mock context )  ;   provider test utils . setup message ( ""message2"" account1 id box1 id false true m mock context )  ;  int num accounts =  email content . count ( m mock context  account . content   uri null null )  ;  assert equals ( 1 num accounts )  ;  int num boxes =  email content . count ( m mock context  mailbox . content   uri null null )  ;  assert equals ( 1 num boxes )  ;  int num messages =  email content . count ( m mock context  message . content   uri null null )  ;  assert equals ( 2 num messages )  ;   uri uri =  content uris . with appended id (  account . content   uri account1 id )  ;  m mock context . get content resolver (  )  . delete ( uri null null )  ;  num accounts =  email content . count ( m mock context  account . content   uri null null )  ;  assert equals ( 0 num accounts )  ;  num boxes =  email content . count ( m mock context  mailbox . content   uri null null )  ;  assert equals ( 0 num boxes )  ;  num messages =  email content . count ( m mock context  message . content   uri null null )  ;  assert equals ( 0 num messages )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,test cascade delete mailbox,"public void   (  )  {   account account1 =  provider test utils . setup account ( ""mailbox - delete - cascade"" true m mock context )  ;  long account1 id = account1 . m id ;   mailbox box1 =  provider test utils . setup mailbox ( ""box1"" account1 id true m mock context )  ;  long box1 id = box1 . m id ;   message message1 =  provider test utils . setup message ( ""message1"" account1 id box1 id false true m mock context )  ;   message message2 =  provider test utils . setup message ( ""message2"" account1 id box1 id false true m mock context )  ;   message message3 =  provider test utils . setup message ( ""message3"" account1 id box1 id false true m mock context )  ;   message message4 =  provider test utils . setup message ( ""message4"" account1 id box1 id false true m mock context )  ;   provider test utils . setup message ( ""message5"" account1 id box1 id false true m mock context )  ;   provider test utils . setup message ( ""message6"" account1 id box1 id false true m mock context )  ;   string selection =  email content .  message columns . account   key  +  "" =  ?  and ""  +   email content .  message columns . mailbox   key +  "" =  ? "" ;   string[] sel args = new  string[] {  string . value of ( account1 id )   string . value of ( box1 id )  }  ;  int num messages =  email content . count ( m mock context  message . content   uri selection sel args )  ;  assert equals ( 6 num messages )  ;   content values cv = new  content values (  )  ;  cv . put (  message columns . server   id ""server   id"" )  ;   content resolver resolver = m mock context . get content resolver (  )  ;  resolver . update (  content uris . with appended id (  message . synced   content   uri message1 . m id )  cv null null )  ;  resolver . update (  content uris . with appended id (  message . synced   content   uri message2 . m id )  cv null null )  ;  resolver . delete (  content uris . with appended id (  message . synced   content   uri message3 . m id )  null null )  ;  resolver . delete (  content uris . with appended id (  message . synced   content   uri message4 . m id )  null null )  ;  num messages =  email content . count ( m mock context  message . content   uri selection sel args )  ;  assert equals ( 4 num messages )  ;  num messages =  email content . count ( m mock context  message . deleted   content   uri selection sel args )  ;  assert equals ( 2 num messages )  ;  num messages =  email content . count ( m mock context  message . updated   content   uri selection sel args )  ;  assert equals ( 2 num messages )  ;   uri uri =  content uris . with appended id (  mailbox . content   uri box1 id )  ;  resolver . delete ( uri null null )  ;  num messages =  email content . count ( m mock context  message . content   uri selection sel args )  ;  assert equals ( 0 num messages )  ;  num messages =  email content . count ( m mock context  message . deleted   content   uri selection sel args )  ;  assert equals ( 0 num messages )  ;  num messages =  email content . count ( m mock context  message . updated   content   uri selection sel args )  ;  assert equals ( 0 num messages )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,test cascade message delete,"public void   (  )  {   account account1 =  provider test utils . setup account ( ""message - cascade"" true m mock context )  ;  long account1 id = account1 . m id ;   mailbox box1 =  provider test utils . setup mailbox ( ""box1"" account1 id true m mock context )  ;  long box1 id = box1 . m id ;   message message1 =  provider test utils . setup message ( ""message1"" account1 id box1 id true false m mock context )  ;   array list <  attachment >  atts = new  array list <  attachment >  (  )  ;  for  ( int i = 0 ;  i  <  2 ;  i +  +  )   {  atts . add (  provider test utils . setup attachment (  - 1 expected attachment names[i] expected attachment sizes[i] false m mock context )  )  ;   }  message1 . m attachments = atts ;  message1 . save ( m mock context )  ;  long message1 id = message1 . m id ;   message message2 =  provider test utils . setup message ( ""message2"" account1 id box1 id true false m mock context )  ;  atts = new  array list <  attachment >  (  )  ;  for  ( int i = 0 ;  i  <  2 ;  i +  +  )   {  atts . add (  provider test utils . setup attachment (  - 1 expected attachment names[i] expected attachment sizes[i] false m mock context )  )  ;   }  message2 . m attachments = atts ;  message2 . save ( m mock context )  ;  long message2 id = message2 . m id ;   string body selection =  body columns . message   key  +  "" in  (  ?   ?  ) "" ;   string attachment selection =  attachment columns . message   key  +  "" in  (  ?   ?  ) "" ;   string[] sel args = new  string[] {  string . value of ( message1 id )   string . value of ( message2 id )  }  ;  int num bodies =  email content . count ( m mock context  body . content   uri body selection sel args )  ;  assert equals ( 2 num bodies )  ;  int num attachments =  email content . count ( m mock context  attachment . content   uri attachment selection sel args )  ;  assert equals ( 4 num attachments )  ;   uri uri =  content uris . with appended id (  message . content   uri message1 id )  ;  m mock context . get content resolver (  )  . delete ( uri null null )  ;  num bodies =  email content . count ( m mock context  body . content   uri body selection sel args )  ;  assert equals ( 1 num bodies )  ;  num attachments =  email content . count ( m mock context  attachment . content   uri attachment selection sel args )  ;  assert equals ( 2 num attachments )  ;  uri =  content uris . with appended id (  message . content   uri message2 id )  ;  m mock context . get content resolver (  )  . delete ( uri null null )  ;  num bodies =  email content . count ( m mock context  body . content   uri body selection sel args )  ;  assert equals ( 0 num bodies )  ;  num attachments =  email content . count ( m mock context  attachment . content   uri attachment selection sel args )  ;  assert equals ( 0 num attachments )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,test cleanup orphans,"public void   (  )  {   email provider ep = get provider (  )  ;  sq lite database db = ep . get database ( m mock context )  ;   account a =  provider test utils . setup account ( ""account1"" true m mock context )  ;   mailbox a1 = create type mailbox ( m mock context  - 1  mailbox . type   inbox )  ;   mailbox a2 = create type mailbox ( m mock context a . m id  mailbox . type   mail )  ;   mailbox a3 = create type mailbox ( m mock context  - 1  mailbox . type   drafts )  ;   mailbox a4 = create type mailbox ( m mock context a . m id  mailbox . type   sent )  ;   mailbox a5 = create type mailbox ( m mock context a . m id  mailbox . type   trash )  ;   mailbox ax = new  mailbox (  )  ;  ax . m id = 69105 ;   message m1 = create message ( m mock context a1 true false  message . flag   loaded   complete )  ;   message m2 = create message ( m mock context a2 true false  message . flag   loaded   complete )  ;   message m3 = create message ( m mock context a3 true false  message . flag   loaded   complete )  ;   message m4 = create message ( m mock context a4 true false  message . flag   loaded   complete )  ;   message m5 = create message ( m mock context a5 true false  message . flag   loaded   complete )  ;   message mx = create message ( m mock context ax true false  message . flag   loaded   complete )  ;   policy p1 = new  policy (  )  ;  p1 . save ( m mock context )  ;   policy p2 = new  policy (  )  ;  p2 . save ( m mock context )  ;   content cache . invalidate all caches (  )  ;   email provider . delete unlinked ( db  mailbox . table   name  mailbox columns . account   key  account columns .    id  account . table   name )  ;   email provider . delete unlinked ( db  message . table   name  message columns . account   key  account columns .    id  account . table   name )  ;   email provider . delete unlinked ( db  policy . table   name  policy columns .    id  account columns . policy   key  account . table   name )  ;  assert null (  mailbox . restore mailbox with id ( m mock context a1 . m id )  )  ;  assert not null (  mailbox . restore mailbox with id ( m mock context a2 . m id )  )  ;  assert null (  mailbox . restore mailbox with id ( m mock context a3 . m id )  )  ;  assert not null (  mailbox . restore mailbox with id ( m mock context a4 . m id )  )  ;  assert not null (  mailbox . restore mailbox with id ( m mock context a5 . m id )  )  ;  assert null (  mailbox . restore mailbox with id ( m mock context ax . m id )  )  ;  assert null (  message . restore message with id ( m mock context m1 . m id )  )  ;  assert not null (  message . restore message with id ( m mock context m2 . m id )  )  ;  assert null (  message . restore message with id ( m mock context m3 . m id )  )  ;  assert not null (  message . restore message with id ( m mock context m4 . m id )  )  ;  assert not null (  message . restore message with id ( m mock context m5 . m id )  )  ;  assert null (  message . restore message with id ( m mock context mx . m id )  )  ;  assert null (  policy . restore policy with id ( m mock context p1 . m id )  )  ;  assert null (  policy . restore policy with id ( m mock context p2 . m id )  )  ;  a =  account . restore account with id ( m mock context a . m id )  ;  assert not null (  policy . restore policy with id ( m mock context a . m policy key )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,test clear account hold flags,"public void   (  )  {   account a1 =  provider test utils . setup account ( ""holdflag - 1"" false m mock context )  ;  a1 . m flags =  account . flags   supports   search ;  a1 . m policy = new  policy (  )  ;  a1 . save ( m mock context )  ;   account a2 =  provider test utils . setup account ( ""holdflag - 2"" false m mock context )  ;  a2 . m flags =  account . flags   supports   smart   forward |  account . flags   security   hold ;  a2 . m policy = new  policy (  )  ;  a2 . save ( m mock context )  ;   account . clear security hold on all accounts ( m mock context )  ;   account a1a =  account . restore account with id ( m mock context a1 . m id )  ;  assert equals (  account . flags   supports   search a1a . m flags )  ;   account a2a =  account . restore account with id ( m mock context a2 . m id )  ;  assert equals (  account . flags   supports   smart   forward a2a . m flags )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,test create index,"public void   (  )  {   string old str = ""create index message   ""  +   message columns . timestamp  +  "" on "" +   message . table   name +  ""  ( "" +   message columns . timestamp +  "" )  ; "" ;   string new str = db helper . create index (  message . table   name  message columns . timestamp )  ;  assert equals ( new str old str )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,test create unique file,"public void   (  )  throws io exception  {  if  (  !  environment . get external storage state (  )  . equals (  environment . media   mounted )  )   {  return ;   }  try  {   string file name = ""a11achm3n1 . doc"" ;   file unique file =  attachment . create unique file ( file name )  ;  assert equals ( file name unique file . get name (  )  )  ;  if  ( unique file . create new file (  )  )   {  unique file =  attachment . create unique file ( file name )  ;  assert equals ( ""a11achm3n1 - 2 . doc"" unique file . get name (  )  )  ;  if  ( unique file . create new file (  )  )   {  unique file =  attachment . create unique file ( file name )  ;  assert equals ( ""a11achm3n1 - 3 . doc"" unique file . get name (  )  )  ;   }   }  file name = ""a11achm3n1"" ;  unique file =  attachment . create unique file ( file name )  ;  assert equals ( file name unique file . get name (  )  )  ;  if  ( unique file . create new file (  )  )   {  unique file =  attachment . create unique file ( file name )  ;  assert equals ( ""a11achm3n1 - 2"" unique file . get name (  )  )  ;   }   }  finally  {   file directory =  environment . get external storage directory (  )  ;   string[] file names = new  string[] { ""a11achm3n1 . doc"" ""a11achm3n1 - 2 . doc"" ""a11achm3n1"" }  ;  int length = file names . length ;  for  ( int i = 0 ;  i  <  length ;  i +  +  )   {   file file = new  file ( directory file names[i] )  ;  if  ( file . exists (  )  )   {  file . delete (  )  ;   }   }   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,test database corruption recovery,"public void   (  )  {  final  content resolver resolver = m mock context . get content resolver (  )  ;  final  context context = m mock context ;   account acct =  provider test utils . setup account ( ""acct1"" true context )  ;   mailbox box1 =  provider test utils . setup mailbox ( ""box1"" acct . m id true context )  ;   provider test utils . setup message ( ""message1"" acct . m id box1 . m id true true context )  ;   provider test utils . setup message ( ""message2"" acct . m id box1 . m id true true context )  ;   provider test utils . setup message ( ""message3"" acct . m id box1 . m id true true context )  ;   provider test utils . setup message ( ""message4"" acct . m id box1 . m id true true context )  ;  int count =  email content . count ( m mock context  message . content   uri null null )  ;  assert equals ( 4 count )  ;  count =  email content . count ( m mock context  body . content   uri null null )  ;  assert equals ( 4 count )  ;   file db file = m mock context . get database path (  email provider . database   name )  ;  assert true ( db file  !  =  null )  ;  assert true ( db file . exists (  )  )  ;  assert true ( db file . delete (  )  )  ;  assert false ( db file . exists (  )  )  ;  db file = m mock context . get database path (  email provider . body   database   name )  ;  assert true ( db file  !  =  null )  ;  assert true ( db file . exists (  )  )  ;  resolver . update (  email provider . integrity   check   uri null null null )  ;  count =  email content . count ( m mock context  body . content   uri null null )  ;  assert equals ( 0 count )  ;  count =  email content . count ( m mock context  message . content   uri null null )  ;  assert equals ( 0 count )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,test delete attachment by message id uri,"public void   (  )  {   content resolver mock resolver = m mock context . get content resolver (  )  ;   provider test utils . setup attachment ( 1 ""a1"" 100 true m mock context )  ;   provider test utils . setup attachment ( 1 ""a2"" 200 true m mock context )  ;   attachment a3 =  provider test utils . setup attachment ( 2 ""a3"" 300 true m mock context )  ;   attachment a4 =  provider test utils . setup attachment ( 2 ""a4"" 400 true m mock context )  ;   uri uri =  content uris . with appended id (  attachment . message   id   uri 1 )  ;  mock resolver . delete ( uri null null )  ;   cursor c = mock resolver . query (  attachment . content   uri  attachment . content   projection null null  attachment columns . size )  ;  assert equals ( 2 c . get count (  )  )  ;  try  {  c . move to first (  )  ;   attachment a3 get =  email content . get content ( m mock context c  attachment . class )  ;   provider test utils . assert attachment equal ( ""get attach by uri - 3"" a3 a3 get )  ;  c . move to next (  )  ;   attachment a4 get =  email content . get content ( m mock context c  attachment . class )  ;   provider test utils . assert attachment equal ( ""get attach by uri - 4"" a4 a4 get )  ;   }  finally  {  c . close (  )  ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,test delete body,"public void   (  )  {  final  content resolver resolver = m mock context . get content resolver (  )  ;   account account1 =  provider test utils . setup account ( ""orphaned body"" true m mock context )  ;  long account1 id = account1 . m id ;   mailbox box1 =  provider test utils . setup mailbox ( ""box1"" account1 id true m mock context )  ;  long box1 id = box1 . m id ;   message message1 =  provider test utils . setup message ( ""message1"" account1 id box1 id false true m mock context )  ;  long message1 id = message1 . m id ;   message message2 =  provider test utils . setup message ( ""message1"" account1 id box1 id true true m mock context )  ;  long message2 id = message2 . m id ;  assert not null ( load body for message id ( message2 id )  )  ;  resolver . delete (  content uris . with appended id (  message . content   uri message1 id )  null null )  ;  assert not null ( load body for message id ( message2 id )  )  ;  resolver . delete (  content uris . with appended id (  message . content   uri message2 id )  null null )  ;  assert null ( load body for message id ( message2 id )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,test delete orphan bodies,"public void   (  )  {  final  content resolver resolver = m mock context . get content resolver (  )  ;   account account1 =  provider test utils . setup account ( ""orphaned body"" true m mock context )  ;  long account1 id = account1 . m id ;   mailbox box1 =  provider test utils . setup mailbox ( ""box1"" account1 id true m mock context )  ;  long box1 id = box1 . m id ;   mailbox box2 =  provider test utils . setup mailbox ( ""box2"" account1 id true m mock context )  ;  long box2 id = box2 . m id ;   message message1 =  provider test utils . setup message ( ""message1"" account1 id box1 id false true m mock context )  ;  long message1 id = message1 . m id ;   message message2 =  provider test utils . setup message ( ""message1"" account1 id box1 id true true m mock context )  ;  long message2 id = message2 . m id ;  assert not null ( load body for message id ( message2 id )  )  ;  resolver . delete (  content uris . with appended id (  message . content   uri message1 id )  null null )  ;  resolver . delete (  content uris . with appended id (  mailbox . content   uri box2 id )  null null )  ;  assert not null ( load body for message id ( message2 id )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,test delete orphan messages,"public void   (  )  {  final  content resolver resolver = m mock context . get content resolver (  )  ;  final  context context = m mock context ;   account acct =  provider test utils . setup account ( ""orphaned body"" true context )  ;   mailbox box1 =  provider test utils . setup mailbox ( ""box1"" acct . m id true context )  ;   mailbox box2 =  provider test utils . setup mailbox ( ""box2"" acct . m id true context )  ;   message msg1   1 =  provider test utils . setup message ( ""message1"" acct . m id box1 . m id false true context )  ;   message msg1   2 =  provider test utils . setup message ( ""message2"" acct . m id box1 . m id false true context )  ;   message msg1   3 =  provider test utils . setup message ( ""message3"" acct . m id box1 . m id false true context )  ;   message msg1   4 =  provider test utils . setup message ( ""message4"" acct . m id box1 . m id false true context )  ;   message msg2   1 =  provider test utils . setup message ( ""message1"" acct . m id box2 . m id false true context )  ;   message msg2   2 =  provider test utils . setup message ( ""message2"" acct . m id box2 . m id false true context )  ;   message msg2   3 =  provider test utils . setup message ( ""message3"" acct . m id box2 . m id false true context )  ;   message msg2   4 =  provider test utils . setup message ( ""message4"" acct . m id box2 . m id false true context )  ;  resolver . delete (  content uris . with appended id (  message . synced   content   uri msg1   1 . m id )  null null )  ;  resolver . delete (  content uris . with appended id (  message . synced   content   uri msg1   2 . m id )  null null )  ;  resolver . delete (  content uris . with appended id (  message . synced   content   uri msg2   1 . m id )  null null )  ;  resolver . delete (  content uris . with appended id (  message . synced   content   uri msg2   2 . m id )  null null )  ;  assert equals ( 4  email content . count ( context  message . deleted   content   uri null null )  )  ;   content values v = new  content values (  )  ;  v . put (  message columns . display   name "" -  - updated -  - "" )  ;  resolver . update (  content uris . with appended id (  message . synced   content   uri msg1   3 . m id )  v null null )  ;  resolver . update (  content uris . with appended id (  message . synced   content   uri msg1   4 . m id )  v null null )  ;  resolver . update (  content uris . with appended id (  message . synced   content   uri msg2   3 . m id )  v null null )  ;  resolver . update (  content uris . with appended id (  message . synced   content   uri msg2   4 . m id )  v null null )  ;  assert equals ( 4  email content . count ( context  message . updated   content   uri null null )  )  ;  long del box id = 10 ;   message msgx   a =  provider test utils . setup message ( ""messagea"" acct . m id del box id false false context )  ;   message msgx   b =  provider test utils . setup message ( ""messageb"" acct . m id del box id false false context )  ;   message msgx   c =  provider test utils . setup message ( ""messagec"" acct . m id del box id false false context )  ;   message msgx   d =  provider test utils . setup message ( ""messaged"" acct . m id del box id false false context )  ;   content values cv ;  long msg id = 10 ;  try  {  cv = msgx   a . to content values (  )  ;  cv . put (  email content . record   id msg id +  +  )  ;  resolver . insert (  message . deleted   content   uri cv )  ;   }  catch  (   illegal argument exception e )   {   }  try  {  cv = msgx   b . to content values (  )  ;  cv . put (  email content . record   id msg id +  +  )  ;  resolver . insert (  message . deleted   content   uri cv )  ;   }  catch  (   illegal argument exception e )   {   }  try  {  cv = msgx   c . to content values (  )  ;  cv . put (  email content . record   id msg id +  +  )  ;  resolver . insert (  message . updated   content   uri cv )  ;   }  catch  (   illegal argument exception e )   {   }  try  {  cv = msgx   d . to content values (  )  ;  cv . put (  email content . record   id msg id +  +  )  ;  resolver . insert (  message . updated   content   uri cv )  ;   }  catch  (   illegal argument exception e )   {   }  assert equals ( 6  email content . count ( context  message . updated   content   uri null null )  )  ;  assert equals ( 6  email content . count ( context  message . deleted   content   uri null null )  )  ;   email provider . delete message orphans ( get provider (  )  . get database ( context )   message . deleted   table   name )  ;   email provider . delete message orphans ( get provider (  )  . get database ( context )   message . updated   table   name )  ;  assert equals ( 4  email content . count ( context  message . updated   content   uri null null )  )  ;  assert equals ( 4  email content . count ( context  message . deleted   content   uri null null )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,test get account for message id,"public void   (  )  {  final  context c = m mock context ;   account a =  provider test utils . setup account ( ""acct"" true c )  ;   message m1 =  provider test utils . setup message ( ""1"" a . m id 1 true true c false false )  ;   message m2 =  provider test utils . setup message ( ""1"" a . m id 2 true true c false false )  ;   provider test utils . assert account equal ( ""x"" a  account . get account for message id ( c m1 . m id )  )  ;   provider test utils . assert account equal ( ""x"" a  account . get account for message id ( c m2 . m id )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,test get account get inbox id test,"public void   (  )  {  final  context c = m mock context ;   account a2 =  provider test utils . setup account ( ""acct2"" true c )  ;   mailbox b2i =  provider test utils . setup mailbox ( ""b2b"" a2 . m id true c  mailbox . type   inbox )  ;  assert equals ( b2i . m id  account . get inbox id ( c a2 . m id )  )  ;  assert equals (  - 1  account . get inbox id ( c 999999 )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\service\EmailBroadcastProcessorServiceTests.java, email broadcast processor service tests,public   (  )  {  super (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,test get account id for message id,"public void   (  )  {  final  context c = m mock context ;   account a1 =  provider test utils . setup account ( ""acct1"" true c )  ;   account a2 =  provider test utils . setup account ( ""acct2"" true c )  ;   mailbox b1 =  provider test utils . setup mailbox ( ""box1"" a1 . m id true c  mailbox . type   mail )  ;   mailbox b2 =  provider test utils . setup mailbox ( ""box2"" a2 . m id true c  mailbox . type   mail )  ;   message m1 = create message ( c b1 false false )  ;   message m2 = create message ( c b2 false false )  ;  assert equals ( a1 . m id  account . get account id for message id ( c m1 . m id )  )  ;  assert equals ( a2 . m id  account . get account id for message id ( c m2 . m id )  )  ;  assert equals (  - 1  account . get account id for message id ( c 12345 )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\service\EmailBroadcastProcessorServiceTests.java,get account flags,"private int   ( long account id )  throws  no such element exception  {   uri uri =  content uris . with appended id (  account . content   uri account id )  ;   integer flags =  utility . get first row int ( m mock context uri new  string[] {  account columns . flags }  null null null 0 )  ;  if  ( flags  =  =  null )   {  throw new  no such element exception ( "" no cursor"" )  ;   }  return flags ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\service\EmailBroadcastProcessorServiceTests.java,set up,@ override public void   (  )  throws  exception  {  super . set up (  )  ;  m mock context = get mock context (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\service\EmailBroadcastProcessorServiceTests.java,setup simple host auth,"private  host auth   (  string protocol )  {   host auth host auth =  provider test utils . setup host auth ( protocol ""name"" false m context )  ;  host auth . m protocol = protocol ;  return host auth ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\service\EmailBroadcastProcessorServiceTests.java,tear down,@ override public void   (  )  throws  exception  {  super . tear down (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,test get attachment by message id uri,"public void   (  )  {   attachment a1 =  provider test utils . setup attachment ( 1 ""a1"" 100 true m mock context )  ;   attachment a2 =  provider test utils . setup attachment ( 1 ""a2"" 200 true m mock context )  ;   provider test utils . setup attachment ( 2 ""a3"" 300 true m mock context )  ;   provider test utils . setup attachment ( 2 ""a4"" 400 true m mock context )  ;   uri uri =  content uris . with appended id (  attachment . message   id   uri 1 )  ;   cursor c = m mock context . get content resolver (  )  . query ( uri  attachment . content   projection null null  attachment columns . size )  ;  assert equals ( 2 c . get count (  )  )  ;  try  {  c . move to first (  )  ;   attachment a1 get =  email content . get content ( m mock context c  attachment . class )  ;   provider test utils . assert attachment equal ( ""get attach by uri - 1"" a1 a1 get )  ;  c . move to next (  )  ;   attachment a2 get =  email content . get content ( m mock context c  attachment . class )  ;   provider test utils . assert attachment equal ( ""get attach by uri - 2"" a2 a2 get )  ;   }  finally  {  c . close (  )  ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,test get default account none explicitly set,"@ small test public void   (  )  {   account account1 =  provider test utils . setup account ( ""account - default - 1"" false m mock context )  ;  account1 . save ( m mock context )  ;  long default account id =  account . get default account id ( m mock c"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\service\EmailBroadcastProcessorServiceTests.java,test set imap delete policy,"public void   (  )  {   account account1 =  provider test utils . setup account ( ""eas - account1"" false m mock context )  ;  account1 . m host auth recv = setup simple host auth ( ""eas"" )  ;  account1 . m host auth send = account1 . m host auth recv ;  account1 . save ( m mock context )  ;  long account id1 = account1 . m id ;   account account2 =  provider test utils . setup account ( ""pop - account1"" false m mock context )  ;  account2 . m host auth recv = setup simple host auth ( ""pop3"" )  ;  account2 . m host auth send = setup simple host auth ( ""smtp"" )  ;  account2 . m flags = 0x08 ;  account2 . save ( m mock context )  ;  long account id2 = account2 . m id ;   account account3 =  provider test utils . setup account ( ""pop - account2"" false m mock context )  ;  account3 . m host auth recv = setup simple host auth ( ""pop3"" )  ;  account3 . m host auth send = setup simple host auth ( ""smtp"" )  ;  account3 . save ( m mock context )  ;  long account id3 = account3 . m id ;   account account4 =  provider test utils . setup account ( ""imap - account1"" false m mock context )  ;  account4 . m host auth recv = setup simple host auth ( ""imap"" )  ;  account4 . m host auth send = setup simple host auth ( ""smtp"" )  ;  account4 . m flags = 0xa5a5a5a5 ;  account4 . save ( m mock context )  ;  long account id4 = account4 . m id ;   account account5 =  provider test utils . setup account ( ""imap - account2"" false m mock context )  ;  account5 . m host auth recv = setup simple host auth ( ""imap"" )  ;  account5 . m host auth send = setup simple host auth ( ""smtp"" )  ;  account5 . m flags = 0x0c ;  account5 . save ( m mock context )  ;  long account id5 = account5 . m id ;   account account6 =  provider test utils . setup account ( ""imap - account3"" false m mock context )  ;  account6 . m host auth recv = setup simple host auth ( ""imap"" )  ;  account6 . m host auth send = setup simple host auth ( ""smtp"" )  ;  account6 . m flags = 0 ;  account6 . save ( m mock context )  ;  long account id6 = account6 . m id ;   email broadcast processor service . set imap delete policy ( m mock context )  ;  int account flags1 = get account flags ( account id1 )  ;  assert equals ( 4 account flags1 )  ;  int account flags2 = get account flags ( account id2 )  ;  assert equals ( 8 account flags2 )  ;  int account flags3 = get account flags ( account id3 )  ;  assert equals ( 4 account flags3 )  ;  int account flags4 = get account flags ( account id4 )  ;  assert equals ( 0xa5a5a5a9 account flags4 )  ;  int account flags5 = get account flags ( account id5 )  ;  assert equals ( 0x00000008 account flags5 )  ;  int account flags6 = get account flags ( account id6 )  ;  assert equals ( 0x00000008 account flags6 )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,test get default account with last used account,"public void   (  )  {  long last used account id =  account . no   account ;  long default account id =  account . get default account id ( m mock context last used account id )  ;  assert equals (  account . no   account default account id )  ;   account account1 =  provider test utils . setup account ( ""account - default - 1"" false m mock context )  ;  account1 . save ( m mock context )  ;  long account1 id = account1 . m id ;   account account2 =  provider test utils . setup account ( ""account - default - 2"" false m mock context )  ;  account2 . save ( m mock context )  ;  long account2 id = account2 . m id ;   account account3 =  provider test utils . setup account ( ""account - default - 3"" false m mock context )  ;  account3 . save ( m mock context )  ;  long account3 id = account3 . m id ;  default account id =  account . get default account id ( m mock context last used account id )  ;  assert true ( default account id  =  =  account1 id )  ;  last used account id = default account id ;  default account id =  account . get default account id ( m mock context last used account id )  ;  assert equals ( account1 id default account id )  ;  last used account id = account2 id ;  default account id =  account . get default account id ( m mock context last used account id )  ;  assert equals ( account2 id default account id )  ;  last used account id = account3 id ;  default account id =  account . get default account id ( m mock context last used account id )  ;  assert equals ( account3 id default account id )  ;   uri uri =  content uris . with appended id (  account . content   uri account1 id )  ;  m mock context . get content resolver (  )  . delete ( uri null null )  ;  default account id =  account . get default account id ( m mock context last used account id )  ;  assert equals ( account3 id default account id )  ;  uri =  content uris . with appended id (  account . content   uri account3 id )  ;  m mock context . get content resolver (  )  . delete ( uri null null )  ;  default account id =  account . get default account id ( m mock context last used account id )  ;  assert equals ( account2 id default account id )  ;  last used account id = default account id ;  uri =  content uris . with appended id (  account . content   uri account2 id )  ;  m mock context . get content resolver (  )  . delete ( uri null null )  ;  default account id =  account . get default account id ( m mock context last used account id )  ;  assert equals (  account . no   account default account id )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,test get key column long,"public void   (  )  {  final  context c = m mock context ;   account a =  provider test utils . setup account ( ""acct"" true c )  ;   mailbox b1 =  provider test utils . setup mailbox ( ""box1"" a . m id true c  mailbox . type   mail )  ;   mailbox b2 =  provider test utils . setup mailbox ( ""box2"" a . m id true c  mailbox . type   mail )  ;   message m1 = create message ( c b1 false false )  ;   message m2 = create message ( c b2 false false )  ;  assert equals ( a . m id  message . get key column long ( c m1 . m id  message columns . account   key )  )  ;  assert equals ( a . m id  message . get key column long ( c m2 . m id  message columns . account   key )  )  ;  assert equals ( b1 . m id  message . get key column long ( c m1 . m id  message columns . mailbox   key )  )  ;  assert equals ( b2 . m id  message . get key column long ( c m2 . m id  message columns . mailbox   key )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,test get protocol,"public void   (  )  {   account account1 =  provider test utils . setup account ( ""account - hostauth"" false m mock context )  ;  account1 . m host auth recv =  provider test utils . setup host auth ( ""eas"" ""account - hostauth - recv"" false m mock context )  ;  account1 . m host auth send =  provider test utils . setup host auth ( ""foo"" ""account - hostauth - send"" false m mock context )  ;  account1 . save ( m mock context )  ;  assert equals ( ""eas""  account . get protocol ( m mock context account1 . m id )  )  ;  assert equals ( ""eas"" account1 . get protocol ( m mock context )  )  ;   account account2 =  provider test utils . setup account ( ""account - nohostauth"" false m mock context )  ;  account2 . save ( m mock context )  ;  assert null (  account . get protocol ( m mock context account2 . m id )  )  ;  assert null ( account2 . get protocol ( m mock context )  )  ;  assert null (  account . get protocol ( m mock context 0 )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,test illegal uri,"public void   (  )  {  final  content resolver cr = m mock context . get content resolver (  )  ;   content values cv = new  content values (  )  ;   uri uri =  uri . parse ( ""content: /  / ""  +   email content . authority  +  "" / fooble"" )  ;  try  {  cr . insert ( uri cv )  ;  fail ( "" insert should have thrown exception"" )  ;   }  catch  (   illegal argument exception e )   {   }  try  {  cr . update ( uri cv null null )  ;  fail ( "" update should have thrown exception"" )  ;   }  catch  (   illegal argument exception e )   {   }  try  {  cr . delete ( uri null null )  ;  fail ( "" delete should have thrown exception"" )  ;   }  catch  (   illegal argument exception e )   {   }  try  {  cr . query ( uri  email content . id   projection null null null )  ;  fail ( "" query should have thrown exception"" )  ;   }  catch  (   illegal argument exception e )   {   }  uri =  uri . parse ( ""content: /  / ""  +   email content . authority  +  "" / mailbox / fred"" )  ;  try  {  cr . query ( uri  email content . id   projection null null null )  ;  fail ( "" query should have thrown exception"" )  ;   }  catch  (   illegal argument exception e )   {   }  uri =  uri . parse ( ""content: /  / ""  +   email content . authority  +  "" / mailbox /  - 1"" )  ;   cursor c = cr . query ( uri  email content . id   projection null null null )  ;  assert not null ( c )  ;  assert equals ( 0 c . get count (  )  )  ;  c . close (  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,test lookup body id with message id,"public void   (  )  {  final  content resolver resolver = m mock context . get content resolver (  )  ;   account account1 =  provider test utils . setup account ( ""orphaned body"" true m mock context )  ;  long account1 id = account1 . m id ;   mailbox box1 =  provider test utils . setup mailbox ( ""box1"" account1 id true m mock context )  ;  long box1 id = box1 . m id ;   message message1 =  provider test utils . setup message ( ""message1"" account1 id box1 id false true m mock context )  ;  long message1 id = message1 . m id ;  long body id1 =  body . lookup body id with message id ( m mock context message1 id )  ;  assert equals ( body id1  - 1 )  ;   message message2 =  provider test utils . setup message ( ""message1"" account1 id box1 id true true m mock context )  ;  long message2 id = message2 . m id ;  long body id2 =  body . lookup body id with message id ( m mock context message2 id )  ;   body body = load body for message id ( message2 id )  ;  assert not null ( body )  ;  assert equals ( body . m id body id2 )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,test message delete,"public void   (  )  {   account account1 =  provider test utils . setup account ( ""message - delete"" true m mock context )  ;  long account1 id = account1 . m id ;   mailbox box1 =  provider test utils . setup mailbox ( ""box1"" account1 id true m mock context )  ;  long box1 id = box1 . m id ;   message message1 =  provider test utils . setup message ( ""message1"" account1 id box1 id false true m mock context )  ;  long message1 id = message1 . m id ;   message message2 =  provider test utils . setup message ( ""message2"" account1 id box1 id false true m mock context )  ;  long message2 id = message2 . m id ;   string selection =  email content .  message columns . account   key  +  "" =  ?  and ""  +   email content .  message columns . mailbox   key +  "" =  ? "" ;   string[] sel args = new  string[] {  string . value of ( account1 id )   string . value of ( box1 id )  }  ;  int num messages =  email content . count ( m mock context  message . content   uri selection sel args )  ;  assert equals ( 2 num messages )  ;   uri uri =  content uris . with appended id (  message . content   uri message1 id )  ;  m mock context . get content resolver (  )  . delete ( uri null null )  ;  num messages =  email content . count ( m mock context  message . content   uri selection sel args )  ;  assert equals ( 1 num messages )  ;  uri =  content uris . with appended id (  message . content   uri message2 id )  ;  m mock context . get content resolver (  )  . delete ( uri null null )  ;  num messages =  email content . count ( m mock context  message . content   uri selection sel args )  ;  assert equals ( 0 num messages )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,test message query with limit,"public void   (  )  {  final  context context = m mock context ;   account acct =  provider test utils . setup account ( ""orphaned body"" true context )  ;   mailbox box1 =  provider test utils . setup mailbox ( ""box1"" acct . m id true context )  ;   mailbox box2 =  provider test utils . setup mailbox ( ""box2"" acct . m id true context )  ;   provider test utils . setup message ( ""message1"" acct . m id box1 . m id false true context )  ;   provider test utils . setup message ( ""message2"" acct . m id box1 . m id false true context )  ;   provider test utils . setup message ( ""message3"" acct . m id box1 . m id false true context )  ;   provider test utils . setup message ( ""message4"" acct . m id box1 . m id false true context )  ;   provider test utils . setup message ( ""message1"" acct . m id box2 . m id false true context )  ;   provider test utils . setup message ( ""message2"" acct . m id box2 . m id false true context )  ;   provider test utils . setup message ( ""message3"" acct . m id box2 . m id false true context )  ;   provider test utils . setup message ( ""message4"" acct . m id box2 . m id false true context )  ;  assert equals ( 8 count ( m mock context  message . content   uri null null )  )  ;  assert equals ( 1 count ( m mock context  email content . uri with limit (  message . content   uri 1 )  null null )  )  ;  assert equals ( 3 count ( m mock context  email content . uri with limit (  message . content   uri 3 )  null null )  )  ;  assert equals ( 8 count ( m mock context  email content . uri with limit (  message . content   uri 100 )  null null )  )  ;   string[] args = new  string[] {  long . to string ( box1 . m id )  }  ;  assert equals ( 4 count ( m mock context  message . content   uri  message columns . mailbox   key  +  "" =  ? "" args )  )  ;  assert equals ( 1 count ( m mock context  email content . uri with limit (  message . content   uri 1 )   message columns . mailbox   key  +  "" =  ? "" args )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,test message save,"@ medium test public void   (  )  {   account account1 =  provider test utils . setup account ( ""message - save"" true m mock context )  ;  long account1 id = account1 . m id ;   mailbox box1 =  provider test utils . setup mailbox ( ""box1"" account1 id true"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,test message save adds snippet,"public void   (  )  {   account account =  provider test utils . setup account ( ""message - snippet"" true m mock context )  ;   mailbox box =  provider test utils . setup mailbox ( ""box1"" account . m id true m mock context )  ;   message message =  provider test utils . setup message ( ""message"" account . m id box . m id false false m mock context )  ;  message . m text = "" this is some text"" ;  message . m html = "" < html >  this is some text <  / html > "" ;  message . save ( m mock context )  ;   message restored message =  message . restore message with id ( m mock context message . m id )  ;  assert equals ( restored message . m snippet  text utilities . make snippet from plain text ( message . m text )  )  ;  message =  provider test utils . setup message ( ""message"" account . m id box . m id false false m mock context )  ;  message . m text = null ;  message . m html = "" < html >  this is some text <  / html > "" ;  message . save ( m mock context )  ;  restored message =  message . restore message with id ( m mock context message . m id )  ;  assert equals ( restored message . m snippet  text utilities . make snippet from html text ( message . m html )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,test message save with just attachments,"@ medium test public void   (  )  {   account account1 =  provider test utils . setup account ( ""message - save"" true m mock context )  ;  long account1 id = account1 . m id ;   mailbox box1 =  provider test utils . setup mailbox ( ""box1"" account1 id true"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,test message update,"public void   (  )  {   account account1 =  provider test utils . setup account ( ""message - update"" true m mock context )  ;  long account1 id = account1 . m id ;   mailbox box1 =  provider test utils . setup mailbox ( ""box1"" account1 id true m mock context )  ;  long box1 id = box1 . m id ;   message message1 =  provider test utils . setup message ( ""message1"" account1 id box1 id false true m mock context )  ;  long message1 id = message1 . m id ;   message message2 =  provider test utils . setup message ( ""message2"" account1 id box1 id false true m mock context )  ;  long message2 id = message2 . m id ;   content resolver cr = m mock context . get content resolver (  )  ;   string selection =  email content .  message columns . account   key  +  "" =  ?  and ""  +   email content .  message columns . mailbox   key +  "" =  ? "" ;   string[] sel args = new  string[] {  string . value of ( account1 id )   string . value of ( box1 id )  }  ;  int num messages =  email content . count ( m mock context  message . content   uri selection sel args )  ;  assert equals ( 2 num messages )  ;   uri uri =  content uris . with appended id (  message . content   uri message1 id )  ;   content values cv = new  content values (  )  ;  cv . put (  message columns . from   list ""from - list"" )  ;  cr . update ( uri cv null null )  ;  num messages =  email content . count ( m mock context  message . updated   content   uri selection sel args )  ;  assert equals ( 0 num messages )  ;   message restored message =  message . restore message with id ( m mock context message1 id )  ;  assert equals ( ""from - list"" restored message . m from )  ;  uri =  content uris . with appended id (  message . synced   content   uri message2 id )  ;  cv = new  content values (  )  ;  cv . put (  message columns . from   list ""from - list"" )  ;  cr . update ( uri cv null null )  ;  num messages =  email content . count ( m mock context  message . updated   content   uri selection sel args )  ;  assert equals ( 1 num messages )  ;  restored message =  message . restore message with id ( m mock context message2 id )  ;  assert equals ( ""from - list"" restored message . m from )  ;   cursor c = cr . query (  message . updated   content   uri  message . content   projection null null null )  ;  try  {  assert true ( c . move to first (  )  )  ;   message original message =  email content . get content ( m mock context c  message . class )  ;  assert equals ( ""from message2"" original message . m from )  ;  assert false ( c . move to next (  )  )  ;   }  finally  {  c . close (  )  ;   }  cr . delete (  content uris . with appended id (  message . synced   content   uri message2 id )  null null )  ;  num messages =  email content . count ( m mock context  message . updated   content   uri selection sel args )  ;  assert equals ( 0 num messages )  ;  num messages =  email content . count ( m mock context  message . deleted   content   uri selection sel args )  ;  assert equals ( 1 num messages )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,test message with attachment,"@ medium test public void   (  )  {   account account1 =  provider test utils . setup account ( ""message - save"" true m mock context )  ;  long account1 id = account1 . m id ;   mailbox box1 =  provider test utils . setup mailbox ( ""box1"" account1 id true"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,test recalculate message counts,"public void   (  )  {  final  context c = m mock context ;   account a1 =  provider test utils . setup account ( ""holdflag - 1"" true c )  ;   account a2 =  provider test utils . setup account ( ""holdflag - 2"" true c )  ;   mailbox b1 =  provider test utils . setup mailbox ( ""box1"" a1 . m id true c  mailbox . type   inbox )  ;   mailbox b2 =  provider test utils . setup mailbox ( ""box2"" a1 . m id true c  mailbox . type   outbox )  ;   mailbox b3 =  provider test utils . setup mailbox ( ""box3"" a2 . m id true c  mailbox . type   inbox )  ;   mailbox b4 =  provider test utils . setup mailbox ( ""box4"" a2 . m id true c  mailbox . type   outbox )  ;   mailbox bt =  provider test utils . setup mailbox ( ""boxt"" a2 . m id true c  mailbox . type   trash )  ;   message m11 = create message ( c b1 true false  message . flag   loaded   complete )  ;   message m21 = create message ( c b2 false false  message . flag   loaded   complete )  ;   message m22 = create message ( c b2 true true  message . flag   loaded   complete )  ;   message m31 = create message ( c b3 false false  message . flag   loaded   complete )  ;   message m32 = create message ( c b3 false false  message . flag   loaded   complete )  ;   message m33 = create message ( c b3 true true  message . flag   loaded   complete )  ;   message mt1 = create message ( c bt true false  message . flag   loaded   complete )  ;   message mt2 = create message ( c bt true false  message . flag   loaded   complete )  ;   message mt3 = create message ( c bt false false  message . flag   loaded   complete )  ;  assert equals ( 1 get message count ( b1 . m id )  )  ;  assert equals ( 2 get message count ( b2 . m id )  )  ;  assert equals ( 3 get message count ( b3 . m id )  )  ;  assert equals ( 0 get message count ( b4 . m id )  )  ;  assert equals ( 3 get message count ( bt . m id )  )  ;  set minus one to message counts (  )  ;  assert equals (  - 1 get message count ( b1 . m id )  )  ;  assert equals (  - 1 get message count ( b2 . m id )  )  ;  assert equals (  - 1 get message count ( b3 . m id )  )  ;  assert equals (  - 1 get message count ( b4 . m id )  )  ;  assert equals (  - 1 get message count ( bt . m id )  )  ;  sq lite database db = get provider (  )  . get database ( m mock context )  ;  db helper . recalculate message count ( db )  ;  assert equals ( 1 get message count ( b1 . m id )  )  ;  assert equals ( 2 get message count ( b2 . m id )  )  ;  assert equals ( 3 get message count ( b3 . m id )  )  ;  assert equals ( 0 get message count ( b4 . m id )  )  ;  assert equals ( 3 get message count ( bt . m id )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,test synced message delete,"public void   (  )  {   account account1 =  provider test utils . setup account ( ""synced - message - delete"" true m mock context )  ;  long account1 id = account1 . m id ;   mailbox box1 =  provider test utils . setup mailbox ( ""box1"" account1 id true m mock context )  ;  long box1 id = box1 . m id ;   message message1 =  provider test utils . setup message ( ""message1"" account1 id box1 id false true m mock context )  ;  long message1 id = message1 . m id ;   message message2 =  provider test utils . setup message ( ""message2"" account1 id box1 id false true m mock context )  ;  long message2 id = message2 . m id ;   string selection =  email content .  message columns . account   key  +  "" =  ?  and ""  +   email content .  message columns . mailbox   key +  "" =  ? "" ;   string[] sel args = new  string[] {  string . value of ( account1 id )   string . value of ( box1 id )  }  ;  int num messages =  email content . count ( m mock context  message . content   uri selection sel args )  ;  assert equals ( 2 num messages )  ;  num messages =  email content . count ( m mock context  message . deleted   content   uri selection sel args )  ;  assert equals ( 0 num messages )  ;   uri uri =  content uris . with appended id (  message . synced   content   uri message1 id )  ;  m mock context . get content resolver (  )  . delete ( uri null null )  ;  num messages =  email content . count ( m mock context  message . content   uri selection sel args )  ;  assert equals ( 1 num messages )  ;  num messages =  email content . count ( m mock context  message . deleted   content   uri selection sel args )  ;  assert equals ( 1 num messages )  ;  uri =  content uris . with appended id (  message . content   uri message2 id )  ;  m mock context . get content resolver (  )  . delete ( uri null null )  ;  num messages =  email content . count ( m mock context  message . content   uri selection sel args )  ;  assert equals ( 0 num messages )  ;  num messages =  email content . count ( m mock context  message . deleted   content   uri selection sel args )  ;  assert equals ( 1 num messages )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,test unread count triggers,"public void   (  )  {   account account =  provider test utils . setup account ( ""triggers"" true m mock context )  ;   mailbox boxa =  provider test utils . setup mailbox ( ""boxa"" account . m id true m mock context )  ;   mailbox boxb =  provider test utils . setup mailbox ( ""boxb"" account . m id true m mock context )  ;   mailbox boxc =  provider test utils . setup mailbox ( ""boxc"" account . m id true m mock context )  ;  assert equals ( 0 get unread count ( boxa . m id )  )  ;  assert equals ( 0 get unread count ( boxb . m id )  )  ;  assert equals ( 0 get unread count ( boxc . m id )  )  ;   message message1 = setup unread message ( ""message1"" account . m id boxa . m id false true m mock context )  ;   message message2 = setup unread message ( ""message2"" account . m id boxa . m id false true m mock context )  ;   message message3 = setup unread message ( ""message3"" account . m id boxa . m id false true m mock context )  ;  setup unread message ( ""message4"" account . m id boxc . m id false true m mock context )  ;  assert equals ( 3 get unread count ( boxa . m id )  )  ;  assert equals ( 0 get unread count ( boxb . m id )  )  ;  assert equals ( 1 get unread count ( boxc . m id )  )  ;   content resolver cr = m mock context . get content resolver (  )  ;   uri uri =  content uris . with appended id (  message . content   uri message1 . m id )  ;  cr . delete ( uri null null )  ;  assert equals ( 2 get unread count ( boxa . m id )  )  ;  assert equals ( 0 get unread count ( boxb . m id )  )  ;  assert equals ( 1 get unread count ( boxc . m id )  )  ;  message2 . m mailbox key = boxb . m id ;   content values cv = new  content values (  )  ;  cv . put (  message columns . mailbox   key boxb . m id )  ;  cr . update (  content uris . with appended id (  message . content   uri message2 . m id )  cv null null )  ;  assert equals ( 1 get unread count ( boxa . m id )  )  ;  assert equals ( 1 get unread count ( boxb . m id )  )  ;  assert equals ( 1 get unread count ( boxc . m id )  )  ;  cv . clear (  )  ;  cv . put (  message columns . flag   read 1 )  ;  cr . update (  content uris . with appended id (  message . content   uri message3 . m id )  cv null null )  ;  assert equals ( 0 get unread count ( boxa . m id )  )  ;  assert equals ( 1 get unread count ( boxb . m id )  )  ;  assert equals ( 1 get unread count ( boxc . m id )  )  ;  message3 . m mailbox key = boxc . m id ;  cv . clear (  )  ;  cv . put (  message columns . mailbox   key boxc . m id )  ;  cr . update (  content uris . with appended id (  message . content   uri message3 . m id )  cv null null )  ;  assert equals ( 0 get unread count ( boxa . m id )  )  ;  assert equals ( 1 get unread count ( boxb . m id )  )  ;  assert equals ( 1 get unread count ( boxc . m id )  )  ;  cv . clear (  )  ;  cv . put (  message columns . flag   read 0 )  ;  cr . update (  content uris . with appended id (  message . content   uri message3 . m id )  cv null null )  ;  assert equals ( 0 get unread count ( boxa . m id )  )  ;  assert equals ( 1 get unread count ( boxb . m id )  )  ;  assert equals ( 2 get unread count ( boxc . m id )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,test update body with message id,"public void   (  )  {   account account1 =  provider test utils . setup account ( ""orphaned body"" true m mock context )  ;  long account1 id = account1 . m id ;   mailbox box1 =  provider test utils . setup mailbox ( ""box1"" account1 id true m mock context )  ;  long box1 id = box1 . m id ;  final  string text content = ""foobar some odd text"" ;  final  string html content = ""and some html"" ;   content values values = new  content values (  )  ;  values . put (  body columns . text   content text content )  ;  values . put (  body columns . html   content html content )  ;  values . put (  body columns . source   message   key 17 )  ;   message message1 =  provider test utils . setup message ( ""message1"" account1 id box1 id false true m mock context )  ;  long message1 id = message1 . m id ;   body body1 = load body for message id ( message1 id )  ;  assert null ( body1 )  ;   body . update body with message id ( m mock context message1 id values )  ;  body1 = load body for message id ( message1 id )  ;  assert not null ( body1 )  ;  assert equals ( body1 . m text content text content )  ;  assert equals ( body1 . m html content html content )  ;  assert equals ( body1 . m source key 17 )  ;   message message2 =  provider test utils . setup message ( ""message1"" account1 id box1 id true true m mock context )  ;  long message2 id = message2 . m id ;   body body2 = load body for message id ( message2 id )  ;  assert not null ( body2 )  ;  assert true (  ! body2 . m text content . equals ( text content )  )  ;   body . update body with message id ( m mock context message2 id values )  ;  body2 = load body for message id ( message1 id )  ;  assert not null ( body2 )  ;  assert equals ( body2 . m text content text content )  ;  assert equals ( body2 . m html content html content )  ;  assert equals ( body2 . m source key 17 )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\service\AttachmentServiceTests.java,test attachment watchdog alarm,public void   (  )  {  final  attachment service attachment service = new  attachment service (  )  ;  final  attachment service .  attachment watchdog watchdog = attachment service . m watchdog ;  final long now =  system . current time millis (  )  ;  final  attachment service .  download request dr = new  attachment service .  download request (  attachment service . priority   foreground 1 )  ;  dr . m last callback time = now ;  attachment service . m downloads in progress . put ( dr . m attachment id dr )  ;  final boolean should cancel = watchdog . validate download request ( dr 60000 now )  ;  assert false ( should cancel )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\service\AttachmentServiceTests.java,test attachment watchdog alarm needs cancel,public void   (  )  {  final  attachment service attachment service = new  attachment service (  )  ;  final  attachment service .  attachment watchdog watchdog = attachment service . m watchdog ;  final long now =  system . current time millis (  )  ;  final  attachment service .  download request dr = new  attachment service .  download request (  attachment service . priority   foreground 1 )  ;  dr . m last callback time = now  -  60000 ;  attachment service . m downloads in progress . put ( dr . m attachment id dr )  ;  final boolean should cancel = watchdog . validate download request ( dr 1000 now )  ;  assert true ( should cancel )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\service\AttachmentServiceTests.java,test download queue add request,public void   (  )  {  final  attachment service .  download queue dq = new  attachment service .  download queue (  )  ;  final  attachment service .  download request dr = new  attachment service .  download request (  attachment service . priority   foreground 1 )  ;  final boolean result = dq . add request ( dr )  ;  assert true ( result )  ;  assert equals ( 1 dq . get size (  )  )  ;  assert false ( dq . is empty (  )  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\service\AttachmentServiceTests.java,test download queue add request existing,public void   (  )  {  final  attachment service .  download queue dq = new  attachment service .  download queue (  )  ;  final  attachment service .  download request dr = new  attachment service .  download request (  attachment service . priority   foreground 1 )  ;  boolean result = dq . add request ( dr )  ;  assert true ( result )  ;  assert equals ( 1 dq . get size (  )  )  ;  assert false ( dq . is empty (  )  )  ;  result = dq . add request ( dr )  ;  assert true ( result )  ;  assert equals ( 1 dq . get size (  )  )  ;  assert false ( dq . is empty (  )  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\service\AttachmentServiceTests.java,test download queue add request null,public void   (  )  {  final  attachment service .  download queue dq = new  attachment service .  download queue (  )  ;  boolean exception thrown = false ;  try  {  dq . add request ( null )  ;   }  catch  (   null pointer exception ex )   {  exception thrown = true ;   }  assert true ( exception thrown )  ;  assert equals ( 0 dq . get size (  )  )  ;  assert true ( dq . is empty (  )  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\service\AttachmentServiceTests.java,test download queue empty queue,public void   (  )  {  final  attachment service .  download queue dq = new  attachment service .  download queue (  )  ;  assert equals ( 0 dq . get size (  )  )  ;  assert true ( dq . is empty (  )  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\service\AttachmentServiceTests.java,test download queue find request by id,public void   (  )  {  final  attachment service .  download queue dq = new  attachment service .  download queue (  )  ;  final  attachment service .  download request dr = new  attachment service .  download request (  attachment service . priority   foreground 1 )  ;  final boolean result = dq . add request ( dr )  ;  assert true ( result )  ;  final  attachment service .  download request dr result = dq . find request by id ( 1 )  ;  assert not null ( dr result )  ;  assert equals ( dr dr result )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\service\AttachmentServiceTests.java,test download queue find request by id invalid id,public void   (  )  {  final  attachment service .  download queue dq = new  attachment service .  download queue (  )  ;  final  attachment service .  download request dr = new  attachment service .  download request (  attachment service . priority   foreground 1 )  ;  final boolean result = dq . add request ( dr )  ;  assert true ( result )  ;  final  attachment service .  download request dr result = dq . find request by id (  - 1 )  ;  assert null ( dr result )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\service\AttachmentServiceTests.java,test download queue find request by id unknown id,public void   (  )  {  final  attachment service .  download queue dq = new  attachment service .  download queue (  )  ;  final  attachment service .  download request dr = new  attachment service .  download request (  attachment service . priority   foreground 1 )  ;  final boolean result = dq . add request ( dr )  ;  assert true ( result )  ;  final  attachment service .  download request dr result = dq . find request by id ( 5 )  ;  assert null ( dr result )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\service\AttachmentServiceTests.java,test download queue get next request,public void   (  )  {  final  attachment service .  download queue dq = new  attachment service .  download queue (  )  ;  final  attachment service .  download request dr = new  attachment service .  download request (  attachment service . priority   foreground 1 )  ;  boolean result = dq . add request ( dr )  ;  assert true ( result )  ;  final  attachment service .  download request dr2 = new  attachment service .  download request (  attachment service . priority   send   mail 2 )  ;  result = dq . add request ( dr2 )  ;  assert true ( result )  ;  final  attachment service .  download request dr3 = new  attachment service .  download request (  attachment service . priority   background 3 )  ;  result = dq . add request ( dr3 )  ;  assert true ( result )  ;  assert equals ( 3 dq . get size (  )  )  ;  assert false ( dq . is empty (  )  )  ;   attachment service .  download request dr result = dq . get next request (  )  ;  assert equals ( dr dr result )  ;  assert equals ( 2 dq . get size (  )  )  ;  assert false ( dq . is empty (  )  )  ;  dr result = dq . get next request (  )  ;  assert equals ( dr2 dr result )  ;  assert equals ( 1 dq . get size (  )  )  ;  assert false ( dq . is empty (  )  )  ;  dr result = dq . get next request (  )  ;  assert equals ( dr3 dr result )  ;  assert equals ( 0 dq . get size (  )  )  ;  assert true ( dq . is empty (  )  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\service\AttachmentServiceTests.java,test download queue get next request empty queue,public void   (  )  {  final  attachment service .  download queue dq = new  attachment service .  download queue (  )  ;   attachment service .  download request dr result = dq . get next request (  )  ;  assert null ( dr result )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\service\AttachmentServiceTests.java,test download queue remove request,public void   (  )  {  final  attachment service .  download queue dq = new  attachment service .  download queue (  )  ;  final  attachment service .  download request dr = new  attachment service .  download request (  attachment service . priority   foreground 1 )  ;  boolean result = dq . add request ( dr )  ;  assert true ( result )  ;  assert equals ( 1 dq . get size (  )  )  ;  assert false ( dq . is empty (  )  )  ;  result = dq . remove request ( dr )  ;  assert true ( result )  ;  assert equals ( 0 dq . get size (  )  )  ;  assert true ( dq . is empty (  )  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\service\AttachmentServiceTests.java,test download queue remove request does not exist,public void   (  )  {  final  attachment service .  download queue dq = new  attachment service .  download queue (  )  ;  final  attachment service .  download request dr = new  attachment service .  download request (  attachment service . priority   foreground 1 )  ;  boolean result = dq . add request ( dr )  ;  assert true ( result )  ;  assert equals ( 1 dq . get size (  )  )  ;  assert false ( dq . is empty (  )  )  ;  result = dq . remove request ( new  attachment service .  download request (  attachment service . priority   foreground 2 )  )  ;  assert false ( result )  ;  assert equals ( 1 dq . get size (  )  )  ;  assert false ( dq . is empty (  )  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\service\AttachmentServiceTests.java,test download queue remove request null,public void   (  )  {  final  attachment service .  download queue dq = new  attachment service .  download queue (  )  ;  final  attachment service .  download request dr = new  attachment service .  download request (  attachment service . priority   foreground 1 )  ;  boolean result = dq . add request ( dr )  ;  assert true ( result )  ;  assert equals ( dq . get size (  )  1 )  ;  assert false ( dq . is empty (  )  )  ;  result = dq . remove request ( null )  ;  assert true ( result )  ;  assert equals ( 1 dq . get size (  )  )  ;  assert false ( dq . is empty (  )  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\service\AttachmentServiceTests.java,test download queue size reporting,public void   (  )  {  final  attachment service .  download queue dq = new  attachment service .  download queue (  )  ;  final  attachment service .  download request dr = new  attachment service .  download request (  attachment service . priority   foreground 1 )  ;  boolean result = dq . add request ( dr )  ;  assert true ( result )  ;  assert equals ( 1 dq . get size (  )  )  ;  assert false ( dq . is empty (  )  )  ;  result = dq . add request ( dr )  ;  assert true ( result )  ;  assert equals ( 1 dq . get size (  )  )  ;  assert false ( dq . is empty (  )  )  ;  final  attachment service .  download request dr2 = new  attachment service .  download request (  attachment service . priority   foreground 2 )  ;  result = dq . add request ( dr2 )  ;  assert true ( result )  ;  assert equals ( 2 dq . get size (  )  )  ;  assert false ( dq . is empty (  )  )  ;  final  attachment service .  download request dr3 = new  attachment service .  download request (  attachment service . priority   foreground 3 )  ;  result = dq . add request ( dr3 )  ;  assert true ( result )  ;  assert equals ( 3 dq . get size (  )  )  ;  assert false ( dq . is empty (  )  )  ;   attachment service .  download request return request = dq . get next request (  )  ;  assert not null ( return request )  ;  assert equals ( 2 dq . get size (  )  )  ;  assert false ( dq . is empty (  )  )  ;  final  attachment service .  download request dr4 = new  attachment service .  download request (  attachment service . priority   foreground 4 )  ;  result = dq . add request ( dr4 )  ;  assert true ( result )  ;  assert equals ( 3 dq . get size (  )  )  ;  assert false ( dq . is empty (  )  )  ;  return request = dq . get next request (  )  ;  assert not null ( return request )  ;  assert equals ( 2 dq . get size (  )  )  ;  assert false ( dq . is empty (  )  )  ;  return request = dq . get next request (  )  ;  assert not null ( return request )  ;  assert equals ( 1 dq . get size (  )  )  ;  assert false ( dq . is empty (  )  )  ;  return request = dq . get next request (  )  ;  assert not null ( return request )  ;  assert equals ( 0 dq . get size (  )  )  ;  assert true ( dq . is empty (  )  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\service\AttachmentServiceTests.java,test download queue test date,public void   (  )  {  final  attachment service .  download queue dq = new  attachment service .  download queue (  )  ;  final  attachment service .  download request dr = new  attachment service .  download request (  attachment service . priority   foreground 1 )  ;  boolean result = dq . add request ( dr )  ;  assert true ( result )  ;  final  attachment service .  download request dr2 = new  attachment service .  download request (  attachment service . priority   foreground 2 )  ;  result = dq . add request ( dr2 )  ;  assert true ( result )  ;  final  attachment service .  download request dr3 = new  attachment service .  download request (  attachment service . priority   foreground 3 )  ;  result = dq . add request ( dr3 )  ;  assert true ( result )  ;  final  attachment service .  download request dr4 = new  attachment service .  download request (  attachment service . priority   foreground 4 )  ;  result = dq . add request ( dr4 )  ;  assert true ( result )  ;  final  attachment service .  download request dr5 = new  attachment service .  download request (  attachment service . priority   foreground 5 )  ;  result = dq . add request ( dr5 )  ;  assert true ( result )  ;  final  attachment service .  download request dr6 = new  attachment service .  download request (  attachment service . priority   foreground 6 )  ;  result = dq . add request ( dr6 )  ;  assert true ( result )  ;  long last time = 0 ;  for  ( int i = 0 ;  i  <  dq . get size (  )  ;  i +  +  )   {  final  attachment service .  download request return request = dq . get next request (  )  ;  assert not null ( return request )  ;  final long request time = return request . m created time ;  assert true ( request time  >  =  last time )  ;  last time = request time ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\service\AttachmentServiceTests.java,test download queue test priority,public void   (  )  {  final  attachment service .  download queue dq = new  attachment service .  download queue (  )  ;  final  attachment service .  download request dr = new  attachment service .  download request (  attachment service . priority   foreground 1 )  ;  boolean result = dq . add request ( dr )  ;  assert true ( result )  ;  final  attachment service .  download request dr2 = new  attachment service .  download request (  attachment service . priority   background 2 )  ;  result = dq . add request ( dr2 )  ;  assert true ( result )  ;  final  attachment service .  download request dr3 = new  attachment service .  download request (  attachment service . priority   send   mail 3 )  ;  result = dq . add request ( dr3 )  ;  assert true ( result )  ;  final  attachment service .  download request dr4 = new  attachment service .  download request (  attachment service . priority   send   mail 4 )  ;  result = dq . add request ( dr4 )  ;  assert true ( result )  ;  final  attachment service .  download request dr5 = new  attachment service .  download request (  attachment service . priority   foreground 5 )  ;  result = dq . add request ( dr5 )  ;  assert true ( result )  ;  final  attachment service .  download request dr6 = new  attachment service .  download request (  attachment service . priority   background 6 )  ;  result = dq . add request ( dr6 )  ;  assert true ( result )  ;  int last priority =  attachment service . priority   highest ;  for  ( int i = 0 ;  i  <  dq . get size (  )  ;  i +  +  )   {  final  attachment service .  download request return request = dq . get next request (  )  ;  assert not null ( return request )  ;  final int request priority = return request . m priority ;  assert true ( request priority  >  =  last priority )  ;  last priority = request priority ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\service\AttachmentServiceTests.java,test download request is equals,public void   (  )  {  final  attachment service .  download request dr = new  attachment service .  download request (  attachment service . priority   foreground 1 )  ;  final  attachment service .  download request dr2 = new  attachment service .  download request (  attachment service . priority   foreground 2 )  ;  assert true ( dr . equals ( dr )  )  ;  assert false ( dr . equals ( dr2 )  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\service\AttachmentServiceTests.java,test service callback attachment complete update,public void   (  )  {  final  attachment service attachment service = new  attachment service (  )  ;  final  email content .  attachment attachment = new  email content .  attachment (  )  ;  attachment . m size = 1000 ;  final  content values values = attachment service . m service callback . get attachment update values ( attachment  email service status . success 75 )  ;  assert true ( values . size (  )   =  =  0 )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\service\AttachmentServiceTests.java,test service callback attachment error update,public void   (  )  {  final  attachment service attachment service = new  attachment service (  )  ;  final  email content .  attachment attachment = new  email content .  attachment (  )  ;  attachment . m size = 1000 ;  final  content values values = attachment service . m service callback . get attachment update values ( attachment  email service status . connection   error 75 )  ;  assert true ( values . size (  )   =  =  0 )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\service\AttachmentServiceTests.java,test service callback attachment in progress update,public void   (  )  {  final  attachment service attachment service = new  attachment service (  )  ;  final  email content .  attachment attachment = new  email content .  attachment (  )  ;  attachment . m size = 1000 ;  final  content values values = attachment service . m service callback . get attachment update values ( attachment  email service status . in   progress 75 )  ;  assert true ( values . size (  )   =  =  2 )  ;  assert true ( values . contains key (  email content .  attachment columns . ui   state )  )  ;  assert true ( values . contains key (  email content .  attachment columns . ui   downloaded   size )  )  ;  assert true ( values . get as integer (  email content .  attachment columns . ui   state )   =  =  ui provider .  attachment state . downloading )  ;  assert true ( values . get as integer (  email content .  attachment columns . ui   downloaded   size )  . int value (  )   =  =  750 )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\VendorPolicyLoaderTest.java,set up,"@ override protected void   (  )  throws  exception  {  super . set up (  )  ;  m test apk package name = get context (  )  . get package name (  )   +  "" . tests"" ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\VendorPolicyLoaderTest.java,tear down,@ override protected void   (  )  throws  exception  {  super . tear down (  )  ;   vendor policy loader . clear instance for test (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\VendorPolicyLoaderTest.java,test find provider for domain,"public void   (  )  {   vendor policy loader pl =  vendor policy loader . get instance ( get context (  )  )  ;   provider p = pl . find provider for domain ( ""yahoo . com"" )  ;  if  ( p  =  =  null )  return ;  assert null ( p . id )  ;  assert null ( p . label )  ;  assert equals ( ""yahoo . com"" p . domain )  ;  assert not null ( p . incoming uri template )  ;  assert not null ( p . incoming username template )  ;  assert not null ( p . outgoing uri template )  ;  assert not null ( p . outgoing username template )  ;  assert true ( p . note  =  =  null || p . note . length (  )   >  0 )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\VendorPolicyLoaderTest.java,test get imap id values,"public void   (  )  {   vendor policy loader pl =  vendor policy loader . get instance ( get context (  )  )  ;   string id = pl . get imap id values ( ""user - name"" ""server . yahoo . com"" ""imap4rev1 starttls auth = gssapi"" )  ;  if  ( id  =  =  null )  return ;  assert equals ( ""\"""" id . char at ( 0 )  )  ;  assert equals ( ""\"""" id . char at ( id . length (  )   -  1 )  )  ;   string[] elements = id . split ( ""\"""" )  ;  assert equals ( 0 elements . length % 4 )  ;  for  ( int i = 0 ;  i  <  elements . length ;   )   {  assert true ( elements[i]  =  =  null || elements[i] . starts with ( "" "" )  )  ;  assert true ( elements[i  +  1] . char at ( 0 )   !  =  ' ' )  ;  assert true ( elements[i  +  2] . starts with ( "" "" )  )  ;  assert true ( elements[i  +  3] . char at ( 0 )   !  =  ' ' )  ;  i +  = 4 ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\VendorPolicyLoaderTest.java,test get policy,"public void   (  )  {   mock vendor policy . inject ( get context (  )  )  ;   vendor policy loader pl =  vendor policy loader . get instance ( get context (  )  )  ;   bundle result = new  bundle (  )  ;  result . put int ( ""ret"" 1 )  ;   mock vendor policy . mock result = result ;   bundle args = new  bundle (  )  ;  args . put string ( ""arg1"" ""a"" )  ;   bundle actual result = pl . get policy ( ""policy1"" args )  ;  assert equals ( ""policy"" ""policy1""  mock vendor policy . passed policy )  ;  assert equals ( ""arg"" ""a""  mock vendor policy . passed bundle . get string ( ""arg1"" )  )  ;  assert equals ( ""result"" 1 actual result . get int ( ""ret"" )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\VendorPolicyLoaderTest.java,test get policy non system,"public void   (  )  {   vendor policy loader pl = new  vendor policy loader ( get context (  )  m test apk package name  mock vendor policy . class . get name (  )  false )  ;   mock vendor policy . passed policy = null ;  assert equals (  bundle . empty pl . get policy ( ""policy1"" null )  )  ;  assert null (  mock vendor policy . passed policy )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\VendorPolicyLoaderTest.java,test is system package,"public void   (  )  {  final  context c = get context (  )  ;  assert equals ( false  vendor policy loader . is system package ( c ""no . such . package"" )  )  ;  assert equals ( false  vendor policy loader . is system package ( c m test apk package name )  )  ;  assert equals ( true  vendor policy loader . is system package ( c ""com . android . settings"" )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\VendorPolicyLoaderTest.java,test package not exist,"public void   (  )  {   vendor policy loader pl = new  vendor policy loader ( get context (  )  ""no . such . package"" ""no . such .  class"" true )  ;  assert equals (  bundle . empty pl . get policy ( null null )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\ThrottleTest.java, mock timer,public   (  clock clock )  {  m clock = clock ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\ThrottleTest.java,advance clock,private void   ( int milliseconds )  {  m clock . advance ( milliseconds )  ;  m timer . run expired tasks (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\ThrottleTest.java,run,@ override public void   (  )  {  m counter +  +  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\ThrottleTest.java,run expired tasks,public void   (  )  {  while  (  ! m tasks . is empty (  )  )   {   entry e = m tasks . peek (  )  ;  if  ( e . m scheduled time  >  m clock . get time (  )  )   {  break ;   }  e . m task . run (  )  ;  m tasks . poll (  )  ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\ThrottleTest.java,schedule,@ override public void   (  timer task task long delay )  {  if  ( delay  =  =  0 )   {  task . run (  )  ;   }  else  {   entry e = new  entry (  )  ;  e . m scheduled time = m clock . get time (  )   +  delay ;  e . m task = task ;  m tasks . offer ( e 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\ThrottleTest.java,send message at time,@ override public boolean   (  message msg long uptime millis )  {  msg . get callback (  )  . run (  )  ;  return true ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\ThrottleTest.java,test multi calls,public void   (  )  {  m target . on event (  )  ;  advance clock ( 1 )  ;  m target . on event (  )  ;  advance clock ( 1 )  ;  m target . on event (  )  ;  advance clock ( 1 )  ;  m target . on event (  )  ;  advance clock ( 1 )  ;  m target . on event (  )  ;  assert true ( m target . get timeout for test (  )   >  100 )  ;  advance clock ( 2000 )  ;  assert true ( m runnable . m counter  <  5 )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\ThrottleTest.java,test single calls,public void   (  )  {  m target . on event (  )  ;  advance clock ( 0 )  ;  assert equals ( 0 m runnable . m counter )  ;  advance clock ( 99 )  ;  assert equals ( 0 m runnable . m counter )  ;  advance clock ( 1 )  ;  assert equals ( 1 m runnable . m counter )  ;  advance clock ( 10000 )  ;  assert equals ( 1 m runnable . m counter )  ;  m target . on event (  )  ;  advance clock ( 0 )  ;  assert equals ( 1 m runnable . m counter )  ;  advance clock ( 99 )  ;  assert equals ( 1 m runnable . m counter )  ;  advance clock ( 1 )  ;  assert equals ( 2 m runnable . m counter )  ;  advance clock ( 10000 )  ;  assert equals ( 2 m runnable . m counter )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\ThrottleTest.java,test update timeout,public void   (  )  {  assert equals ( 100 m target . get timeout for test (  )  )  ;  m target . update timeout (  )  ;  assert equals ( 100 m target . get timeout for test (  )  )  ;  m clock . advance ( 10 )  ;  m target . update timeout (  )  ;  assert equals ( 200 m target . get timeout for test (  )  )  ;  m clock . advance (  throttle . timeout   extend   interval )  ;  m target . update timeout (  )  ;  assert equals ( 400 m target . get timeout for test (  )  )  ;  m clock . advance (  throttle . timeout   extend   interval )  ;  m target . update timeout (  )  ;  assert equals ( 500 m target . get timeout for test (  )  )  ;  m clock . advance (  throttle . timeout   extend   interval  +  1 )  ;  m target . update timeout (  )  ;  assert equals ( 100 m target . get timeout for test (  )  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\TestUtils.java,assert view visible,"public static void   (  view v )  {  if  ( v  =  =  null )   {  throw new  null pointer exception (  )  ;   }  for  (  ;   ;   )   {  assert true ( ""visibility for ""  +  v  view . visible  =  =  v . get visibility (  )  )  ;   view parent parent = v . get parent (  )  ;  if  ( parent  =  =  null ||  !  ( parent instanceof  view )  )   {  break ;   }  v =  (  view ) parent ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\TestUtils.java,b,pu lic static byte[] b ( int .  .  .  array )  {  if  ( array  =  =  null )   {  return null ;   }  byte[] ret = new byte[array . length] ;  for  ( int i = 0 ;  i  <  ret . length ;  i +  +  )   {  ret[i] =  ( byte ) array[i] ;   }  return ret ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\TestUtils.java,expect throwable,"public static void   (  runnable runnable  class <  ?  extends  throwable >  expected throwable )  {  try  {  runnable . run (  )  ;  fail ( "" expected throwable not thrown . "" )  ;   }  catch  (   throwable th )   {  if  ( expected throwable . is assignable from ( th . get class (  )  )  )   {  return ;   }  fail ( "" cought unexpected throwable ""  +  th . get class (  )  . get name (  )  )  ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\TestUtils.java,is met,@ override public boolean   (  )  {  return false ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\TestUtils.java,is screen on and not locked,public static boolean   (  context context )  {   power manager pm =  (  power manager ) context . get system service (  context . power   service )  ;  if  (  ! pm . is screen on (  )  )   {  return false ;   }   keyguard manager km =  (  keyguard manager ) context . get system service (  context . keyguard   service )  ;  if  ( km . in keyguard restricted input mode (  )  )   {  return false ;   }  return true ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\TestUtils.java,run,"@ override public void   (  )  {  wait until ( ""message"" new  condition (  )  {  @ override public boolean is met (  )  {  return false ;   }   }   0 )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\TestUtils.java,testb,public void   (  )  {  assert null ( b ( null )  )  ;   more asserts . assert equals ( new byte[] {  }  b (  )  )  ;   more asserts . assert equals ( new byte[] { 1 2  ( byte ) 0xff }  b ( 1 2 0xff )  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\TestUtils.java,test expect throwable,public void   (  )  {  try  {  expect throwable ( new  runnable (  )  {  @ override public void run (  )  {   }   }    throwable . class )  ;  fail (  )  ;   }  catch  (   assertion failed error ok )   {   }  try  {  expect throwable ( new  runnable (  )  {  @ override public void run (  )  {  throw new  runtime exception (  )  ;   }   }    error . class )  ;  fail (  )  ;   }  catch  (   assertion failed error ok )   {   }  expect throwable ( new  runnable (  )  {  @ override public void run (  )  {  throw new  runtime exception (  )  ;   }   }    exception . class )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\TestUtils.java,test wait until,"public void   (  )  {  wait until ( ""message"" new  condition (  )  {  @ override public boolean is met (  )  {  return true ;   }   }   1000000 )  ;  expect throwable ( new  runnable (  )  {  @ override public void run (  )  {  wait until ( ""message"" new  condition (  )  {  @ override public boolean is met (  )  {  return false ;   }   }   0 )  ;   }   }    assertion failed error . class )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\TestUtils.java,wait until,"public static void   (  string message  condition condition int timeout seconds )  {   log utils . d (  logging . log   tag message  +  "":  waiting .  .  . "" )  ;  final long timeout =  system . current time millis (  )   +  timeout seconds * 1000 ;  while  (  system . current time millis (  )   <  timeout )   {  if  ( condition . is met (  )  )   {  return ;   }  try  {   thread . sleep ( 500 )  ;   }  catch  (   interrupted exception ignore )   {   }   }  fail ( message  +  "":  timeout"" )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\DeviceTests.java,test get consistent device id,"public void   (  )  {   telephony manager tm =  (  telephony manager ) get context (  )  . get system service (  context . telephony   service )  ;  if  ( tm  =  =  null )   {   log utils . w (  logging . log   tag "" telephony manager not supported .   skipping . "" )  ;  return ;   }  final  string device id =  device . get consistent device id ( get context (  )  )  ;  final  string device id2 =  device . get consistent device id ( get context (  )  )  ;  assert equals ( device id device id2 )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\internet\MimeHeaderUnitTests.java,test write to string,"public void   (  )  throws  exception  {   mime header header = new  mime header (  )  ;   string actual1 = header . write to string (  )  ;  assert equals ( ""empty header"" actual1 null )  ;  header . set header ( "" header1"" ""value1"" )  ;   string actual2 = header . write to string (  )  ;  assert equals ( ""single header"" actual2 "" header1: value1\r\n"" )  ;  header . set header ( "" header2"" ""value2"" )  ;   string actual3 = header . write to string (  )  ;  assert equals ( ""multiple headers"" actual3 "" header1: value1\r\n""  +  "" header2: value2\r\n"" )  ;  header . set header (  mime header . header   android   attachment   store   data ""value3"" )  ;   string actual4 = header . write to string (  )  ;  assert equals ( ""multiple headers"" actual4 "" header1: value1\r\n""  +  "" header2: value2\r\n"" )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\internet\MimeBodyPartTest.java,test get content id,"public void   (  )  throws  messaging exception  {   mime body part bp = new  mime body part (  )  ;  assert null ( bp . get content id (  )  )  ;  final  string cid1 = ""cid . 1@android . com"" ;  bp . set header (  mime header . header   content   id cid1 )  ;  assert equals ( cid1 bp . get content id (  )  )  ;  bp . set header (  mime header . header   content   id "" < ""  +  cid1  +  "" > "" )  ;  assert equals ( cid1 bp . get content id (  )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\internet\MimeUtilityTest.java,brokentest collect parts,"public void   (  )  throws  messaging exception   exception  {  final  string cid1 = "" < i   12e8248b4f0874cb > "" ;  final  part cid1bp =  message test utils . body part ( ""image / gif ;  name = \""im1 . gif\"""" cid1 )  ;  final  string cid2 = "" < ii   12e8248b4f0874cb > "" ;  final  part cid2bp =  message test utils . body part ( ""image / gif"" cid2 )  ;  cid2bp . add header (  mime header . header   content   disposition ""inline ;  filename = \""im2 . gif\"""" )  ;  final  string cid3 = "" < iii   12e8248b4f0874cb > "" ;  final  part cid3bp =  message test utils . body part ( ""image / gif"" cid3 )  ;  cid3bp . add header (  mime header . header   content   disposition ""attachment ;  filename = \""im3 . gif\"""" )  ;  final  string cid4 = "" < iv   12e8248b4f0874cb > "" ;  final  part cid4bp =  message test utils . body part ( ""image / gif"" cid4 )  ;  final  string cid5 = "" < v   12e8248b4f0874cb > "" ;  final  part cid5bp =  message test utils . body part ( ""image / gif"" cid5 )  ;  cid5bp . add header (  mime header . header   content   disposition ""inline"" )  ;  final  array list <  part >  view1 = new  array list <  part >  (  )  ;  final  array list <  part >  attach1 = new  array list <  part >  (  )  ;   mime utility . collect parts ( cid1bp view1 attach1 )  ;  assert equals ( 1 attach1 . size (  )  )  ;  assert equals ( attach1 . get ( 0 )  cid1bp )  ;  final  array list <  part >  view2 = new  array list <  part >  (  )  ;  final  array list <  part >  attach2 = new  array list <  part >  (  )  ;   mime utility . collect parts ( cid2bp view2 attach2 )  ;  assert equals ( 1 attach2 . size (  )  )  ;  assert equals ( attach2 . get ( 0 )  cid2bp )  ;  final  array list <  part >  view3 = new  array list <  part >  (  )  ;  final  array list <  part >  attach3 = new  array list <  part >  (  )  ;   mime utility . collect parts ( cid3bp view3 attach3 )  ;  assert equals ( 1 attach3 . size (  )  )  ;  assert equals ( attach3 . get ( 0 )  cid3bp )  ;  final  array list <  part >  view4 = new  array list <  part >  (  )  ;  final  array list <  part >  attach4 = new  array list <  part >  (  )  ;   mime utility . collect parts ( cid4bp view4 attach4 )  ;  assert equals ( 0 attach4 . size (  )  )  ;  final  array list <  part >  view5 = new  array list <  part >  (  )  ;  final  array list <  part >  attach5 = new  array list <  part >  (  )  ;   mime utility . collect parts ( cid5bp view5 attach5 )  ;  assert equals ( 0 attach5 . size (  )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\internet\MimeUtilityTest.java,test complex decode,"public void   (  )  {   string result1 =  mime utility . unfold and decode ( calendar   subject   unicode )  ;  assert equals ( calendar   subject   plain result1 )  ;   string degenerate1 =  mime utility . unfold and decode ( calendar   degenerate   unicode   1 )  ;  assert equals ( ""degenerate case 1"" calendar   degenerate   unicode   1 degenerate1 )  ;   string degenerate2 =  mime utility . unfold and decode ( calendar   degenerate   unicode   2 )  ;  assert equals ( ""degenerate case 2"" calendar   degenerate   unicode   2 degenerate2 )  ;   string degenerate3 =  mime utility . unfold and decode ( calendar   degenerate   unicode   3 )  ;  assert equals ( ""degenerate case 3"" calendar   degenerate   unicode   3 degenerate3 )  ;   string degenerate4 =  mime utility . unfold and decode ( calendar   degenerate   unicode   4 )  ;  assert equals ( ""degenerate case 4"" calendar   degenerate   unicode   4 degenerate4 )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\internet\MimeUtilityTest.java,test content type charset,"public void   (  )  throws  messaging exception  {  final  string unicode   expect = "" this is some happy unicode text \u263a"" ;  final  string windows1252   expect = "" this is some happy unicode text \u00e2\u02dc\u00ba"" ;   text body tb = new  text body ( unicode   expect )  ;   mime body part p = new  mime body part (  )  ;   string got text  mime type  charset ;  p . set body ( tb )  ;  p . set header (  mime header . header   content   type ""text / html ;  charset = utf - 8"" )  ;  got text =  mime utility . get text from part ( p )  ;  assert true (  mime utility . mime type matches ( p . get mime type (  )  ""text / html"" )  )  ;  assert equals ( unicode   expect got text )  ;  p . set body ( tb )  ;  p . set header (  mime header . header   content   type ""text / html ;  charset = windows - 1252"" )  ;  got text =  mime utility . get text from part ( p )  ;  assert true (  mime utility . mime type matches ( p . get mime type (  )  ""text / html"" )  )  ;  assert equals ( windows1252   expect got text )  ;  p . set body ( tb )  ;  p . set header (  mime header . header   content   type ""text / html ;  prop1  =  \""test\"" ;  charset  =  \""utf - 8\"" ;  prop2  =  \""test\"""" )  ;  got text =  mime utility . get text from part ( p )  ;  assert true (  mime utility . mime type matches ( p . get mime type (  )  ""text / html"" )  )  ;  assert equals ( unicode   expect got text )  ;  p . set body ( tb )  ;  p . set header (  mime header . header   content   type ""text / html ;  prop1  =  \""test\"" ;  charset  =  \""windows - 1252\"" ;  prop2  =  \""test\"""" )  ;  got text =  mime utility . get text from part ( p )  ;  assert true (  mime utility . mime type matches ( p . get mime type (  )  ""text / html"" )  )  ;  assert equals ( windows1252   expect got text )  ;  p . set body ( tb )  ;  p . set header (  mime header . header   content   type ""text /  html  ;  cha rset = utf - 8"" )  ;  got text =  mime utility . get text from part ( p )  ;  assert true (  mime utility . mime type matches ( p . get mime type (  )  ""text / html"" )  )  ;  assert equals ( unicode   expect got text )  ;  p . set body ( tb )  ;  p . set header (  mime header . header   content   type ""text /  html  ;  cha rset = windows - 1252"" )  ;  got text =  mime utility . get text from part ( p )  ;  assert true (  mime utility . mime type matches ( p . get mime type (  )  ""text / html"" )  )  ;  assert equals ( windows1252   expect got text )  ;  p . set body ( tb )  ;  p . set header (  mime header . header   content   type ""text / html ;  charset = utf - 8  (  plain text ) "" )  ;  got text =  mime utility . get text from part ( p )  ;  assert true (  mime utility . mime type matches ( p . get mime type (  )  ""text / html"" )  )  ;  p . set body ( tb )  ;  p . set header (  mime header . header   content   type ""text / html ;  charset = windows - 1252  (  plain text ) "" )  ;  got text =  mime utility . get text from part ( p )  ;  assert true (  mime utility . mime type matches ( p . get mime type (  )  ""text / html"" )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\internet\MimeUtilityTest.java,test decode simple,public void   (  )  {   string result1 =  mime utility . decode ( short   unicode   encoded )  ;  assert equals ( short   unicode result1 )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\internet\MimeUtilityTest.java,test efficient fold and encode,public void   (  )  {   string result1 =  mime utility . fold and encode ( short   plain )  ;   string result2 =  mime utility . fold and encode2 ( short   plain 10 )  ;   string result3 =  mime utility . fold ( short   plain 10 )  ;  assert same ( short   plain result1 )  ;  assert same ( short   plain result2 )  ;  assert same ( short   plain result3 )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\internet\MimeUtilityTest.java,test efficient unfold and decode,public void   (  )  {   string result1 =  mime utility . unfold ( short   plain )  ;   string result2 =  mime utility . decode ( short   plain )  ;   string result3 =  mime utility . unfold and decode ( short   plain )  ;  assert same ( short   plain result1 )  ;  assert same ( short   plain result2 )  ;  assert same ( short   plain result3 )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\internet\MimeUtilityTest.java,test fold and encode,public void   (  )  {   string result1 =  mime utility . fold and encode2 ( short   unicode 10 )  ;  assert equals ( short   unicode   encoded result1 )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\internet\MimeUtilityTest.java,test fold and encode supplemental,"public void   (  )  {   string result1 =  mime utility . fold and encode2 ( short   supplemental "" subject: "" . length (  )  )  ;   string result2 =  mime utility . fold and encode2 ( long   supplemental "" subject: "" . length (  )  )  ;   string result3 =  mime utility . fold and encode2 ( long   supplemental   2 "" subject: "" . length (  )  )  ;  assert equals ( ""short supplemental"" short   supplemental   encoded result1 )  ;  assert equals ( ""long supplemental"" long   supplemental   encoded result2 )  ;  assert equals ( ""long supplemental 2"" long   supplemental   encoded   2 result3 )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\internet\MimeUtilityTest.java,test fold and encode supplemental quoted printable,"public void   (  )  {   string result =  mime utility . fold and encode2 ( long   supplemental   qp "" subject: "" . length (  )  )  ;  assert equals ( ""long supplement quoted printable"" long   supplemental   qp   encoded result )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\internet\MimeUtilityTest.java,test fold and encode with long split,"public void   (  )  {   string result =  mime utility . fold and encode2 ( long   unicode   split "" subject: "" . length (  )  )  ;  assert equals ( ""long string"" long   unicode   split   encoded result )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\internet\MimeUtilityTest.java,test get header parameter,"public void   (  )  {  assert null ( ""null header check""  mime utility . get header parameter ( null ""name"" )  )  ;  assert equals ( ""null name first param per code"" ""header""  mime utility . get header parameter ( header   multi   parameter null )  )  ;  assert equals ( ""null name full header"" header   no   parameter  mime utility . get header parameter ( header   no   parameter null )  )  ;  assert equals ( ""get 1st param"" "" param1 value""  mime utility . get header parameter ( header   multi   parameter "" param1 name"" )  )  ;  assert equals ( ""get 2nd param"" "" param2 value""  mime utility . get header parameter ( header   multi   parameter "" param2 name"" )  )  ;  assert equals ( ""get missing param"" null  mime utility . get header parameter ( header   multi   parameter "" param3 name"" )  )  ;  assert equals ( ""get 2nd param all lc"" "" param2 value""  mime utility . get header parameter ( header   multi   parameter ""param2name"" )  )  ;  assert equals ( ""get 2nd param all uc"" "" param2 value""  mime utility . get header parameter ( header   multi   parameter ""param2name"" )  )  ;  assert equals ( ""get 1st param"" "" param1 value""  mime utility . get header parameter ( header   quoted   multi   parameter "" param1 name"" )  )  ;  assert equals ( ""get 2nd param"" "" param2 value""  mime utility . get header parameter ( header   quoted   multi   parameter "" param2 name"" )  )  ;  assert equals ( ""malformed filename param"" null  mime utility . get header parameter ( header   malformed   parameter ""filename"" )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\internet\MimeUtilityTest.java,test get text from part content type case,"public void   (  )  throws  messaging exception  {  final  string the text = "" this is the text of the part"" ;   text body tb = new  text body ( the text )  ;   mime body part p = new  mime body part (  )  ;  p . set header (  mime header . header   content   type ""text / plain"" )  ;  p . set body ( tb )  ;   string got text =  mime utility . get text from part ( p )  ;  assert equals ( the text got text )  ;  p . set header (  mime header . header   content   type ""text / plain"" )  ;  p . set body ( tb )  ;  got text =  mime utility . get text from part ( p )  ;  assert equals ( the text got text )  ;  p . set header (  mime header . header   content   type ""text / other"" )  ;  p . set body ( tb )  ;  got text =  mime utility . get text from part ( p )  ;  assert equals ( the text got text )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\internet\MimeUtilityTest.java,test mime type matches,"public void   (  )  {  assert false (  mime utility . mime type matches ( ""foo / bar"" ""text / plain"" )  )  ;  assert true (  mime utility . mime type matches ( ""text / plain"" ""text / plain"" )  )  ;  assert true (  mime utility . mime type matches ( ""text / plain"" ""text / plain"" )  )  ;  assert true (  mime utility . mime type matches ( ""text / plain"" ""text / plain"" )  )  ;  assert true (  mime utility . mime type matches ( ""text / plain"" ""* / plain"" )  )  ;  assert true (  mime utility . mime type matches ( ""text / plain"" ""text / *"" )  )  ;  assert true (  mime utility . mime type matches ( ""text / plain"" ""* / *"" )  )  ;  assert false (  mime utility . mime type matches ( ""foo / bar"" ""* / plain"" )  )  ;  assert false (  mime utility . mime type matches ( ""foo / bar"" ""text / *"" )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\internet\MimeUtilityTest.java,test mime type matches array,"public void   (  )  {   string[] array zero = new  string[0] ;  assert false (  mime utility . mime type matches ( ""text / plain"" array zero )  )  ;   string[] array one = new  string[] { ""text / plain"" }  ;  assert false (  mime utility . mime type matches ( ""foo / bar"" array one )  )  ;  assert true (  mime utility . mime type matches ( ""text / plain"" array one )  )  ;   string[] array two = new  string[] { ""text / plain"" ""match / this"" }  ;  assert false (  mime utility . mime type matches ( ""foo / bar"" array two )  )  ;  assert true (  mime utility . mime type matches ( ""text / plain"" array two )  )  ;  assert true (  mime utility . mime type matches ( ""match / this"" array two )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\internet\MimeUtilityTest.java,test padding of fold and encode,"public void   (  )  {   string result1 =  mime utility . fold and encode2 ( padded2   unicode 0 )  ;   string result2 =  mime utility . fold and encode2 ( padded1   unicode 0 )  ;   string result3 =  mime utility . fold and encode2 ( padded0   unicode 0 )  ;  assert equals ( ""padding 2"" padded2   unicode   encoded result1 )  ;  assert equals ( ""padding 1"" padded1   unicode   encoded result2 )  ;  assert equals ( ""padding 0"" padded0   unicode   encoded result3 )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\internet\MimeUtilityTest.java,test unfold and decode simple,public void   (  )  {   string result1 =  mime utility . unfold and decode ( short   unicode   encoded )  ;  assert equals ( short   unicode result1 )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\internet\MimeMessageTest.java,brokentest white space,"public void   (  )  throws  messaging exception  io exception  {   string entire message = "" from:  pete ( a wonderful \\ )  chap )   < pete ( his account ) @silly . test ( his host )  > \r\n""  +  "" to:a  group (  some people ) \r\n""  +  "" : chris  jones  < c@ (  chris's host .  ) public . example >  \r\n"" +  "" joe@example . org \r\n"" +  ""  john  < jdoe@one . test >   ( my dear friend )  ;   ( the end of the group ) \r\n"" +  "" cc: (  empty list )  ( start )  undisclosed recipients : ( nobody ( that i know )  )   ; \r\n"" +  "" date:  thu \r\n"" +  "" 13\r\n"" +  ""  feb\r\n"" +  "" 1969\r\n"" +  "" 23:32\r\n"" +  ""  - 0330  (  newfoundland  time ) \r\n"" +  "" message - id:  < testabcd . 1234@silly . test > \r\n"" +  "" content -  type: \r\n"" +  "" text / html \r\n"" +  ""  ;  x - blah = \""y - blah\""  ;  \r\n"" +  "" charset = \""us - ascii\""  ;   ( comment ) \r\n"" +  ""\r\n"" +  "" < html >  < body >  testing .  <  / body >  <  / html > \r\n"" ;   mime message mm = null ;  mm = new  mime message ( new  byte array input stream ( entire message . get bytes ( ""us - ascii"" )  )  )  ;  assert true ( mm . get mime type (  )   mime utility . mime type matches ( ""text / html"" mm . get mime type (  )  )  )  ;  assert equals ( new  date (  - 27723480000l )  mm . get sent date (  )  )  ;  assert equals ( "" < testabcd . 1234@silly . test > "" mm . get message id (  )  )  ;   address[] to addresses = mm . get recipients (  mime message .  recipient type . to )  ;  assert equals ( ""joe@example . org"" to addresses[1] . get address (  )  )  ;  assert equals ( ""jdoe@one . test"" to addresses[2] . get address (  )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\internet\MimeMessageTest.java,do test set sent date,"private void   (  )  throws  messaging exception   parse exception  {  long expected time = 1230800400000l ;   date date = new  date ( expected time )  ;   mime message message = new  mime message (  )  ;  message . set sent date ( date )  ;   string[] headers = message . get header ( "" date"" )  ;  assert equals ( 1 headers . length )  ;   simple date format format = new  simple date format ( ""eee  dd mmm yyyy hh:mm:ss z""  locale . us )  ;   date result = format . parse ( headers[0] )  ;  assert equals ( expected time result . get time (  )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\internet\MimeMessageTest.java,set up,@ override protected void   (  )  throws  exception  {  super . set up (  )  ;   temp directory . set temp directory ( get context (  )  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\internet\MimeMessageTest.java,test ebay date,"public void   (  )  throws  messaging exception  io exception  {   string entire message = "" to:a@b . com\r\n""  +  "" date: thu  10  dec 09 15:08:08 gmt - 0700""  +  ""\r\n"" +  ""\r\n"" ;   mime message mm = null ;  mm = new  mime message ( new  byte array input stream ( entire message . get bytes ( ""us - ascii"" )  )  )  ;   date actual = mm . get sent date (  )  ;   date expected = new  date (  date . utc ( 109 11 10 15 8 8 )   +  7 * 60 * 60* 1000 )  ;  assert equals ( expected actual )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\internet\MimeMessageTest.java,test encoding address field,"public void   (  )  throws  messaging exception  {   address no name1 = new  address ( ""noname1@dom1 . com"" )  ;   address no name2 = new  address ( "" < noname2@dom2 . com > "" """" )  ;   address simple name = new  address ( ""address3@dom3 . org"" ""simple long and long long name"" )  ;   address dquote name = new  address ( ""address4@dom4 . org"" ""name 4 long long name"" )  ;   address quoted name = new  address ( ""bigg@dom5 . net"" ""big \""g\"""" )  ;   address utf16 name = new  address ( "" < address6@co . jp > "" ""\""\u65e5\u672c\u8a9e\"""" )  ;   address utf32 name = new  address ( "" < address8@ne . jp > "" ""\ud834\udf01\ud834\udf46"" )  ;   mime message message = new  mime message (  )  ;  message . set from ( no name1 )  ;  message . set recipient (  recipient type . to no name2 )  ;  message . set recipients (  recipient type . cc new  address[] { simple name dquote name }  )  ;  message . set reply to ( new  address[] { quoted name utf16 name utf32 name }  )  ;   string[] from = message . get header ( "" from"" )  ;   string[] to = message . get header ( "" to"" )  ;   string[] cc = message . get header ( "" cc"" )  ;   string[] reply to = message . get header ( "" reply - to"" )  ;  assert equals ( ""from address count"" 1 from . length )  ;  assert equals ( ""no name 1"" ""noname1@dom1 . com"" from[0] )  ;  assert equals ( ""to address count"" 1 to . length )  ;  assert equals ( ""no name 2"" ""noname2@dom2 . com"" to[0] )  ;  assert equals ( ""cc address count"" 1 cc . length )  ;  assert equals ( ""simple name & double quoted name"" ""simple long and long long name  < address3@dom3 . org >   \""name 4 long long\r\n""  +  "" name\""  < address4@dom4 . org > "" cc[0] )  ;  assert equals ( ""reply - to address count"" 1 reply to . length )  ;  assert equals ( ""quoted name & encoded name"" ""\""big \\\""g\\\""\""  < bigg@dom5 . net >    =  ? utf - 8 ? b ? 5pel5pys6 kqe ?  = \r\n""  +  ""  < address6@co . jp >    =  ? utf - 8 ? b ? 8j2 mgf cdjyy =  ?  =   < address8@ne . jp > "" reply to[0] )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\internet\MimeMessageTest.java,test extended header,"public void   (  )  throws  messaging exception  {   mime message message = new  mime message (  )  ;  assert null ( ""non existent header"" message . get extended header ( ""x -  non -  existent"" )  )  ;  message . set extended header ( ""x -  header1"" ""value1"" )  ;  message . set extended header ( ""x -  header2"" ""value2\n value3\r\n value4\r\n"" )  ;  assert equals ( ""simple value"" ""value1"" message . get extended header ( ""x -  header1"" )  )  ;  assert equals ( ""multi line value"" ""value2 value3 value4"" message . get extended header ( ""x -  header2"" )  )  ;  assert null ( ""non existent header 2"" message . get extended header ( ""x -  non -  existent"" )  )  ;  message . set extended header ( ""x -  header1"" ""value4"" )  ;  assert equals ( ""over written value"" ""value4"" message . get extended header ( ""x -  header1"" )  )  ;  message . set extended header ( ""x -  header1"" null )  ;  assert null ( ""remove header"" message . get extended header ( ""x -  header1"" )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\internet\MimeMessageTest.java,test extended headers,"public void   (  )  throws  messaging exception  {   mime message message = new  mime message (  )  ;  assert null ( ""new message"" message . get extended headers (  )  )  ;  message . set extended headers ( null )  ;  assert null ( ""null headers"" message . get extended headers (  )  )  ;  message . set extended headers ( """" )  ;  assert null ( ""empty headers"" message . get extended headers (  )  )  ;  message . set extended headers ( ""x -  header1: value1\r\n"" )  ;  assert equals ( ""header 1 value"" ""value1"" message . get extended header ( ""x -  header1"" )  )  ;  assert equals ( ""header 1"" ""x -  header1: value1\r\n"" message . get extended headers (  )  )  ;  message . set extended headers ( null )  ;  message . set extended header ( ""x -  header2"" ""value2"" )  ;  message . set extended header ( ""x -  header3"" ""value3\n value4\r\n value5\r\n"" )  ;  assert equals ( ""headers 2 3"" ""x -  header2: value2\r\n""  +  ""x -  header3: value3 value4 value5\r\n"" message . get extended headers (  )  )  ;  message . set extended headers ( ""x -  header3: value3 value4 value5\r\n""  +  ""x -  header2: value2\r\n"" )  ;  assert equals ( ""header 2"" ""value2"" message . get extended header ( ""x -  header2"" )  )  ;  assert equals ( ""header 3"" ""value3 value4 value5"" message . get extended header ( ""x -  header3"" )  )  ;  assert equals ( ""headers 3 2"" ""x -  header3: value3 value4 value5\r\n""  +  ""x -  header2: value2\r\n"" message . get extended headers (  )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\internet\MimeMessageTest.java,test get content id,"public void   (  )  throws  messaging exception  {   mime message message = new  mime message (  )  ;  assert null ( message . get content id (  )  )  ;  final  string cid1 = ""cid . 1@android . com"" ;  message . set header (  mime header . header   content   id cid1 )  ;  assert equals ( cid1 message . get content id (  )  )  ;  message . set header (  mime header . header   content   id "" < ""  +  cid1  +  "" > "" )  ;  assert equals ( cid1 message . get content id (  )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\internet\MimeMessageTest.java,test invalid headers,"public void   (  )  throws  messaging exception  io exception  {   string entire message = "" to:\r\n""  +  "" cc: ! invalid ! address !   a@b . com\r\n""  +  "" bcc: undisclosed recipients ; \r\n"" +  ""invalid header\r\n"" +  "" message - id: < testabcd . 1234@silly . test > \r\n"" +  ""\r\n"" +  "" testing\r\n"" ;   mime message mm = null ;  mm = new  mime message ( new  byte array input stream ( entire message . get bytes ( ""us - ascii"" )  )  )  ;  assert equals ( 0 mm . get recipients (  mime message .  recipient type . to )  . length )  ;  assert equals ( 1 mm . get recipients (  mime message .  recipient type . cc )  . length )  ;  assert equals ( ""a@b . com"" mm . get recipients (  mime message .  recipient type . cc ) [0] . get address (  )  )  ;  assert equals ( 0 mm . get recipients (  mime message .  recipient type . bcc )  . length )  ;  assert equals ( "" < testabcd . 1234@silly . test > "" mm . get message id (  )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\internet\MimeMessageTest.java,test message id,"public void   (  )  throws  messaging exception  {   mime message message1 = new  mime message (  )  ;   mime message message2 = new  mime message (  )  ;   string id1 = message1 . get message id (  )  ;   string id2 = message2 . get message id (  )  ;  assert not null ( id1 )  ;  assert not null ( id2 )  ;  assert false ( "" message - id should be unique"" id1 . equals ( id2 )  )  ;  final  string test id1 = ""test - message - id - one"" ;  message1 . set message id ( test id1 )  ;  assert equals ( ""set and get  message - id"" test id1 message1 . get message id (  )  )  ;  final  string test id2 = ""test - message - id - two"" ;  message2 . set message id ( test id1 )  ;  message2 . set message id ( test id2 )  ;  assert equals ( ""set and get  message - id"" test id2 message2 . get message id (  )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\internet\MimeMessageTest.java,test parse no message id,"public void   (  )  throws  messaging exception  io exception  {   string entire message = "" to: user@domain . com\r\n""  +  ""\r\n""  +  "" testing\r\n"" ;   mime message mm = null ;  mm = new  mime message ( new  byte array input stream ( entire message . get bytes ( ""us - ascii"" )  )  )  ;  assert null ( mm . get message id (  )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\internet\MimeMessageTest.java,test parsing address field,"public void   (  )  throws  messaging exception  {   mime message message = new  mime message (  )  ;  message . set header ( "" from"" ""noname1@dom1 . com"" )  ;  message . set header ( "" to"" "" < noname2@dom2 . com > "" )  ;  message . set header ( "" cc"" ""simple name  < address3@dom3 . org >  \r\n""  +  "" \""name 4\""  < address4@dom4 . org > "" )  ;  message . set header ( "" reply - to"" ""\""big \\\""g\\\""\""  < bigg@dom5 . net >  \r\n""  +  ""  =  ? utf - 8 ? b ? 5pel5pys6 kqe ?  = \r\n""  +  ""  < address6@co . jp >  \n"" +  "" \"" =  ? utf - 8 ? b ? 8j2 mgf cdjyy =  ?  = \""  < address8@ne . jp > "" )  ;   address[] from = message . get from (  )  ;   address[] to = message . get recipients (  recipient type . to )  ;   address[] cc = message . get recipients (  recipient type . cc )  ;   address[] reply to = message . get reply to (  )  ;  assert equals ( ""from address count"" 1 from . length )  ;  assert equals ( ""no name 1 address"" ""noname1@dom1 . com"" from[0] . get address (  )  )  ;  assert null ( ""no name 1 name"" from[0] . get personal (  )  )  ;  assert equals ( ""to address count"" 1 to . length )  ;  assert equals ( ""no name 2 address"" ""noname2@dom2 . com"" to[0] . get address (  )  )  ;  assert null ( ""no name 2 name"" to[0] . get personal (  )  )  ;  assert equals ( ""cc address count"" 2 cc . length )  ;  assert equals ( ""simple name address"" ""address3@dom3 . org"" cc[0] . get address (  )  )  ;  assert equals ( ""simple name name"" ""simple name"" cc[0] . get personal (  )  )  ;  assert equals ( ""double quoted name address"" ""address4@dom4 . org"" cc[1] . get address (  )  )  ;  assert equals ( ""double quoted name name"" ""name 4"" cc[1] . get personal (  )  )  ;  assert equals ( ""reply - to address count"" 3 reply to . length )  ;  assert equals ( ""quoted name address"" ""bigg@dom5 . net"" reply to[0] . get address (  )  )  ;  assert equals ( ""quoted name name"" ""big \""g\"""" reply to[0] . get personal (  )  )  ;  assert equals ( ""utf - 16 name address"" ""address6@co . jp"" reply to[1] . get address (  )  )  ;  assert equals ( ""utf - 16 name name"" ""\u65e5\u672c\u8a9e"" reply to[1] . get personal (  )  )  ;  assert equals ( ""utf - 32 name address"" ""address8@ne . jp"" reply to[2] . get address (  )  )  ;  assert equals ( ""utf - 32 name name"" ""\ud834\udf01\ud834\udf46"" reply to[2] . get personal (  )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\internet\MimeMessageTest.java,test set long subject,"public void   (  )  throws  messaging exception  {   mime message message = new  mime message (  )  ;  message . set subject ( long   unicode   16 )  ;  assert equals ( ""unicode readback 16"" long   unicode   16 message . get subject (  )  )  ;  message . set subject ( long   unicode   64 )  ;  assert equals ( ""unicode readback 64"" long   unicode   64 message . get subject (  )  )  ;   string raw header = message . get first header ( "" subject"" )  ;   string[] split = raw header . split ( ""\r\n"" )  ;  assert true ( ""long subject should fold"" split . length  >  1 )  ;  for  (   string s : split )   {  assert true ( ""split lines max length 78"" s . length (  )   <  =  76 )  ;   string trimmed = s . trim (  )  ;  assert true ( ""split lines are encoded"" trimmed . starts with ( "" =  ? "" )  && trimmed . ends with ( "" ?  = "" )  )  ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\internet\MimeMessageTest.java,test set sent date,@ medium test public void   (  )  throws  messaging exception   parse exception  {   locale saved locale =  locale . get default (  )  ;   locale . set default (  locale . us )  ;  do test set sent date (  )  ;   locale . set default (  locale . japan )  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\internet\MimeMessageTest.java,test set subject,"public void   (  )  throws  messaging exception  {   mime message message = new  mime message (  )  ;  message . set subject ( short   unicode )  ;  assert equals ( ""unicode readback"" short   unicode message . get subject (  )  )  ;   string raw header = message . get first header ( "" subject"" )  ;  assert equals ( ""raw readback"" short   unicode   encoded raw header )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\internet\MimeMessageTest.java,test set subject plain,"public void   (  )  throws  messaging exception  {   mime message message = new  mime message (  )  ;  message . set subject ( short   plain )  ;  assert equals ( ""plain subjects"" short   plain message . get subject (  )  )  ;   string raw header = message . get first header ( "" subject"" )  ;  assert equals ( ""plain subject not encoded""  - 1 raw header . index of ( "" =  ? "" )  )  ;  message . set subject ( long   plain   64 )  ;  raw header = message . get first header ( "" subject"" )  ;   string[] split = raw header . split ( ""\r\n"" )  ;  assert equals ( ""64 shouldn't fold"" 1 split . length )  ;  message . set subject ( long   plain   256 )  ;  raw header = message . get first header ( "" subject"" )  ;  split = raw header . split ( ""\r\n"" )  ;  assert true ( ""long subject should fold"" split . length  >  1 )  ;  for  (   string s : split )   {  assert true ( ""split lines max length 78"" s . length (  )   <  =  76 )  ;   string trimmed = s . trim (  )  ;  assert false ( ""split lines are not encoded"" trimmed . starts with ( "" =  ? "" )  )  ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\internet\MimeMessageTest.java,test store flags,public void   (  )  throws  messaging exception  {   mime message message = new  mime message (  )  ;   flag[] flags = message . get flags (  )  ;  assert equals ( 0 flags . length )  ;  message . set flag (  flag . x   store   1 true )  ;  assert true ( message . is set (  flag . x   store   1 )  )  ;  assert false ( message . is set (  flag . x   store   2 )  )  ;  message . set flag (  flag . x   store   2 true )  ;  assert true ( message . is set (  flag . x   store   1 )  )  ;  assert true ( message . is set (  flag . x   store   2 )  )  ;  message . set flag (  flag . x   store   1 false )  ;  assert false ( message . is set (  flag . x   store   1 )  )  ;  assert true ( message . is set (  flag . x   store   2 )  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\internet\MimeMessageTest.java,test undisclosed recipients,"public void   (  )  throws  messaging exception  io exception  {   string entire message = "" to: undisclosed recipients: ; \r\n""  +  "" cc: undisclosed recipients: ; \r\n""  +  "" bcc: undisclosed recipients: ; \r\n"" +  ""\r\n"" ;   mime message mm = null ;  mm = new  mime message ( new  byte array input stream ( entire message . get bytes ( ""us - ascii"" )  )  )  ;  assert equals ( 0 mm . get recipients (  mime message .  recipient type . to )  . length )  ;  assert equals ( 0 mm . get recipients (  mime message .  recipient type . cc )  . length )  ;  assert equals ( 0 mm . get recipients (  mime message .  recipient type . bcc )  . length )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\internet\MimeMessageTest.java,test write to header,"public void   (  )  throws  exception  {   mime message message = new  mime message (  )  ;  message . set header ( "" header1"" ""value1"" )  ;  message . set header (  mime header . header   android   attachment   store   data ""value2"" )  ;  message . set extended header ( ""x -  header3"" ""value3"" )  ;  message . set header ( "" header4"" ""value4"" )  ;  message . set extended header ( ""x -  header5"" ""value5"" )  ;   byte array output stream out = new  byte array output stream (  )  ;  message . write to ( out )  ;  out . close (  )  ;   string expected string = "" header1: value1\r\n""  +  "" header4: value4\r\n""  +  "" message - id: ""  +  message . get message id (  )   +  ""\r\n"" +  ""\r\n"" ;  byte[] expected = expected string . get bytes (  )  ;  byte[] actual = out . to byte array (  )  ;  assert equals ( ""output length"" expected . length actual . length )  ;  for  ( int i = 0 ;  i  <  actual . length ;   +  + i )   {  assert equals ( ""output byte[""  +  i  +  ""]"" expected[i] actual[i] )  ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\mail\FlagTests.java,test flags upper case,public void   (  )  {  for  (   flag flag :  flag . values (  )  )   {   string name = flag . name (  )  ;  assert equals ( name . to upper case (  )  name )  ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\internet\Rfc822OutputTests.java, rfc output tests,public   (  )  {  super (  email provider . class  email content . authority )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\internet\Rfc822OutputTests.java,check mime version,"private void   ( org . apache . james . mime4j . message .  message mime message )  {   header header = mime message . get header (  )  ;   field content type = header . get field ( ""mime - version"" )  ;  assert true ( content type . get body (  )  . equals ( ""1 . 0"" )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\internet\Rfc822OutputTests.java,create test body,private  body   (  message message )  {  return  body . restore body with message id ( m mock context message . m id )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\internet\Rfc822OutputTests.java,set up,@ override public void   (  )  throws  exception  {  super . set up (  )  ;  m mock context = get mock context (  )  ;  m forward intro = m mock context . get string ( r . string . message   compose   fwd   header   fmt subject sender recipient   to recip
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\internet\Rfc822OutputTests.java,test boundary digit,public void   (  )  {   rfc822 output . s boundary digit = 0 ;   rfc822 output . get next boundary (  )  ;  assert equals ( 1  rfc822 output . s boundary digit )  ;   rfc822 output . get next boundary (  )  ;  assert equals ( 2  rfc822 output . s boundary digit )  ;   rfc822 output . get next boundary (  )  ;  assert equals ( 3  rfc822 output . s boundary digit )  ;   rfc822 output . get next boundary (  )  ;  assert equals ( 4  rfc822 output . s boundary digit )  ;   rfc822 output . get next boundary (  )  ;  assert equals ( 5  rfc822 output . s boundary digit )  ;   rfc822 output . get next boundary (  )  ;  assert equals ( 6  rfc822 output . s boundary digit )  ;   rfc822 output . get next boundary (  )  ;  assert equals ( 7  rfc822 output . s boundary digit )  ;   rfc822 output . get next boundary (  )  ;  assert equals ( 8  rfc822 output . s boundary digit )  ;   rfc822 output . get next boundary (  )  ;  assert equals ( 9  rfc822 output . s boundary digit )  ;   rfc822 output . get next boundary (  )  ;  assert equals ( 0  rfc822 output . s boundary digit )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\internet\Rfc822OutputTests.java,test build body text with forward,public void   (  )  {   message msg = new  message (  )  ;  msg . m text = text ;  msg . m from = sender ;  msg . m to = recipient   to ;  msg . m cc = recipient   cc ;  msg . m subject = subject ;  msg . m flags =  message . flag   type   forward ;  msg . save ( m mock context )  ;   body body = create test body ( msg )  ;   string[] body parts =  rfc822 output . build body text ( body false )  ;  assert equals ( text  +  m forward intro  +  reply   text   body body parts[0] )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\internet\Rfc822OutputTests.java,test get html body,public void   (  )  {   string actual ;  actual =  rfc822 output . get html body ( html   full   body )  ;  assert equals ( html   full   result actual )  ;  actual =  rfc822 output . get html body ( html   body   body )  ;  assert equals ( html   body   result actual )  ;  actual =  rfc822 output . get html body ( html   no   body   body )  ;  assert equals ( html   no   body   result actual )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\internet\Rfc822OutputTests.java,test get next boundary,public void   (  )  {   string[] result array = new  string[boundary   count] ;  for  ( int i = 0 ;  i  <  boundary   count ;  i +  +  )   {  result array[i] =  rfc822 output . get next boundary (  )  ;   }  for  ( int i = 0 ;  i  <  boundary   count ;  i +  +  )   {  final  string result1 = result array[i] ;  for  ( int j = 0 ;  j  <  boundary   count ;  j +  +  )   {  if  ( i  =  =  j )   {  continue ;   }  final  string result2 = result array[j] ;  assert false ( result1 . equals ( result2 )  )  ;   }   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\internet\Rfc822OutputTests.java,test write to alternative part,"@ suppress warnings ( ""unchecked"" )  public void   (  )  throws io exception   messaging exception  {   message msg = new  message (  )  ;  msg . m text = text ;  msg . m from = sender ;  msg . m attachments = new  array list <  attachment >  (  )  ;   at"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\internet\Rfc822OutputTests.java,test write to mixed part,"@ suppress warnings ( ""unchecked"" )  public void   (  )  throws io exception   messaging exception  {   message msg = new  message (  )  ;  msg . m text = text ;  msg . m from = sender ;  msg . m attachments = new  array list <  attachment >  (  )  ;   at"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\internet\Rfc822OutputTests.java,test write to text,"public void   (  )  throws io exception   messaging exception  {   message msg = new  message (  )  ;  msg . m text = text ;  msg . m from = sender ;  msg . save ( m mock context )  ;   byte array output stream byte stream = new  byte array output stream (  )  ;   rfc822 output . write to ( m mock context msg byte stream true false null )  ;   byte array input stream message input stream = new  byte array input stream ( byte stream . to byte array (  )  )  ;  org . apache . james . mime4j . message .  message mime message = new org . apache . james . mime4j . message .  message ( message input stream )  ;  check mime version ( mime message )  ;  assert false ( mime message . is multipart (  )  )  ;  assert equals ( ""text / plain"" mime message . get mime type (  )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\mail\PackedStringTests.java,test packed string,"public void   (  )  {   packed string ps = new  packed string ( packed   string   tagged )  ;  assert equals ( ""val1"" ps . get ( ""tag1"" )  )  ;  assert equals ( ""val2"" ps . get ( ""tag2"" )  )  ;  assert equals ( ""val3"" ps . get ( ""tag3"" )  )  ;  assert equals ( ""val4"" ps . get ( ""tag4"" )  )  ;  assert null ( ps . get ( ""tag100"" )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\mail\PackedStringTests.java,test packed string builder create,"public void   (  )  {   packed string .  builder b = new  packed string .  builder (  )  ;  b . put ( ""tag1"" ""value1"" )  ;  b . put ( ""tag2"" ""value2"" )  ;  b . put ( ""tag3"" ""value3"" )  ;  b . put ( ""tag4"" ""value4"" )  ;   string packed out = b . to string (  )  ;   packed string .  builder b2 = new  packed string .  builder ( packed out )  ;  assert equals ( ""value1"" b2 . get ( ""tag1"" )  )  ;  assert equals ( ""value2"" b2 . get ( ""tag2"" )  )  ;  assert equals ( ""value3"" b2 . get ( ""tag3"" )  )  ;  assert equals ( ""value4"" b2 . get ( ""tag4"" )  )  ;  assert null ( b2 . get ( ""tag100"" )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\mail\PackedStringTests.java,test packed string builder edit,"public void   (  )  {   packed string .  builder b = new  packed string .  builder ( packed   string   tagged )  ;  assert equals ( ""val1"" b . get ( ""tag1"" )  )  ;  assert equals ( ""val2"" b . get ( ""tag2"" )  )  ;  assert equals ( ""val3"" b . get ( ""tag3"" )  )  ;  assert equals ( ""val4"" b . get ( ""tag4"" )  )  ;  assert null ( b . get ( ""tag100"" )  )  ;  b . put ( ""tag2"" ""two"" )  ;  b . put ( ""tag3"" null )  ;  b . put ( ""tag5"" ""value5"" )  ;  assert equals ( ""val1"" b . get ( ""tag1"" )  )  ;  assert equals ( ""two"" b . get ( ""tag2"" )  )  ;  assert equals ( null b . get ( ""tag3"" )  )  ;  assert equals ( ""val4"" b . get ( ""tag4"" )  )  ;  assert equals ( ""value5"" b . get ( ""tag5"" )  )  ;  assert null ( b . get ( ""tag100"" )  )  ;   string packed out = b . to string (  )  ;   packed string .  builder b2 = new  packed string .  builder ( packed out )  ;  assert equals ( ""val1"" b2 . get ( ""tag1"" )  )  ;  assert equals ( ""two"" b2 . get ( ""tag2"" )  )  ;  assert equals ( null b2 . get ( ""tag3"" )  )  ;  assert equals ( ""val4"" b2 . get ( ""tag4"" )  )  ;  assert equals ( ""value5"" b2 . get ( ""tag5"" )  )  ;  assert null ( b2 . get ( ""tag100"" )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\mail\MockFolder.java,can create,@ override public boolean   (  folder type type )  {  return false ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\mail\MockFolder.java,create,@ override public boolean   (  folder type type )  {  return false ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\mail\MockFolder.java,create message,@ override public  message   (  string uid )  {  return null ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\mail\MockFolder.java,exists,@ override public boolean   (  )  {  return false ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\mail\MockFolder.java,expunge,@ override public  message[]   (  )  {  return null ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\mail\MockFolder.java,get message,@ override public  message   (  string uid )  {  return null ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\mail\MockFolder.java,get message count,@ override public int   (  )  {  return 0 ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\mail\MockFolder.java,get messages,@ override public  message[]   ( long start date long end date  message retrieval listener listener )  throws  messaging exception  {  return null ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\mail\MockFolder.java,get mode,@ override public  open mode   (  )  {  return null ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\mail\MockFolder.java,get name,@ override public  string   (  )  {  return null ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\mail\MockFolder.java,get permanent flags,@ override public  flag[]   (  )  {  return null ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\mail\MockFolder.java,get unread message count,@ override public int   (  )  {  return 0 ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\mail\MockFolder.java,is open,@ override public boolean   (  )  {  return false ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\provider\AccountTest.java,get host authjson,"private static  host auth   (  string username  string password )  {  final  host auth ha = new  host auth (  )  ;  ha . set login ( username password )  ;  ha . m protocol = ""imap"" ;  ha . m address = ""dhoff@example . com"" ;  ha . m port = 543 ;  ha . m flags = 777 ;  return ha ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\provider\AccountTest.java,test deserialize fromjson,"public void   (  )  throws json exception  {  final json object json = new json object (  )  ;  json . put (  email content .  account columns . display   name "" david  hasselhoff"" )  ;  json . put (  email content .  account columns . email   address ""dhoff@example . com"" )  ;  json . put (  email content .  account columns . sync   lookback 42 )  ;  json . put (  email content .  account columns . sync   interval 99 )  ;  json . put (  account . json   tag   host   auth   recv get host authjson ( ""receiver"" ""recpass"" )  . to json (  )  )  ;  json . put (  account . json   tag   host   auth   send get host authjson ( ""send"" ""sendpass"" )  . to json (  )  )  ;  json . put (  email content .  account columns . flags 22 )  ;  json . put (  email content .  account columns . sender   name "" friend of  kitt"" )  ;  json . put (  email content .  account columns . protocol   version ""protocol version 3 . 14"" )  ;  json . put (  email content .  account columns . signature "" david with a heart over the i"" )  ;  json . put (  email content .  account columns . ping   duration 77 )  ;  final  account a =  account . from json ( json )  ;  assert equals ( "" david  hasselhoff"" a . get display name (  )  )  ;  assert equals ( ""dhoff@example . com"" a . get email address (  )  )  ;  assert equals ( 42 a . get sync lookback (  )  )  ;  assert equals ( 99 a . get sync interval (  )  )  ;  assert equals ( ""receiver"" a . m host auth recv . m login )  ;  assert equals ( ""recpass"" a . m host auth recv . m password )  ;  assert equals ( ""send"" a . m host auth send . m login )  ;  assert equals ( ""sendpass"" a . m host auth send . m password )  ;  assert equals ( 22 a . get flags (  )  )  ;  assert equals ( "" friend of  kitt"" a . get sender name (  )  )  ;  assert equals ( ""protocol version 3 . 14"" a . m protocol version )  ;  assert equals ( "" david with a heart over the i"" a . get signature (  )  )  ;  assert equals ( 77 a . m ping duration )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\provider\AccountTest.java,test serialize and deserialize withjson,"public void   (  )  {  final  account before = new  account (  )  ;  before . set display name ( "" david  hasselhoff"" )  ;  before . set email address ( ""dhoff@example . com"" )  ;  before . m sync key = ""sync key"" ;  before . set sync lookback ( 42 )  ;  before . set sync interval ( 99 )  ;  before . set flags ( 1  <  <  5 )  ;  before . set sender name ( "" friend of  kitt"" )  ;  before . m protocol version = ""protocol version 3 . 14"" ;  before . m security sync key = ""security sync key"" ;  before . set signature ( "" david with a heart over the i"" )  ;  before . m policy key = 66 ;  before . m ping duration = 77 ;  before . m host auth recv = get host authjson ( ""receiver"" ""recpass"" )  ;  before . ensure loaded ( get context (  )  )  ;  final  account after =  account . from json ( before . to json (  )  )  ;  assert equals ( before . get display name (  )  after . get display name (  )  )  ;  assert equals ( before . get email address (  )  after . get email address (  )  )  ;  assert equals ( before . get sync lookback (  )  after . get sync lookback (  )  )  ;  assert equals ( before . get sync interval (  )  after . get sync interval (  )  )  ;  assert equals ( before . m host auth send after . m host auth send )  ;  assert equals ( before . m host auth key send after . m host auth key send )  ;  assert equals ( before . m host auth key recv after . m host auth key recv )  ;  assert equals ( before . get flags (  )  after . get flags (  )  )  ;  assert equals ( before . get sender name (  )  after . get sender name (  )  )  ;  assert equals ( before . m protocol version after . m protocol version )  ;  assert equals ( before . get signature (  )  after . get signature (  )  )  ;  assert equals ( before . m ping duration after . m ping duration )  ;  assert null ( after . m sync key )  ;  assert equals ( 0 after . m policy key )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\mail\MessageTestUtils.java, multipart builder,"public   (  string mime type  string boundary )  {  m content type = mime type  +  "" ;  boundary = ""  +  boundary ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\mail\MessageTestUtils.java, text builder,public   (  string preamble )  {  m builder . append ( preamble )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\mail\MessageTestUtils.java,add body part,public  multipart builder   ( final  body part body part )  {  m parts . add ( body part )  ;  return this ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\mail\MessageTestUtils.java,add cid img,"public  text builder   (  string content id )  {  return add tag ( ""img"" ""src"" ""cid:""  +  content id )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\mail\MessageTestUtils.java,add tag,"public  text builder   (  string tag  string attribute  string value )  {  return add text (  string . format ( "" < %s %s = \""%s\"" > "" tag attribute value )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\mail\MessageTestUtils.java,add text,public  text builder   (  string text )  {  m builder . append ( text )  ;  return this ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\mail\MessageTestUtils.java,add uid img,"public  text builder   (  uri content uri )  {  return add tag ( ""img"" ""src"" content uri . to string (  )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\mail\MessageTestUtils.java,body part,public static  body part   (  string mime type  string content id )  throws  messaging exception  {  final  mime body part bp = new  mime body part ( null mime type )  ;  if  ( content id  !  =  null )   {  bp . set header (  mime header . header   content   id content id )  ;   }  return bp ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\mail\MessageTestUtils.java,build,public  string   (  string epilogue )  {  m builder . append ( epilogue )  ;  return m builder . to string (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\mail\MessageTestUtils.java,build body part,public  body part   (  )  throws  messaging exception  {  final  body part bp = new  mime body part (  )  ;  bp . set body ( this . build (  )  )  ;  return bp ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\mail\MessageTestUtils.java,content uri,public static  uri   ( long attachment id  account account )  {  return  attachment utilities . get attachment uri ( account . m id attachment id )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\mail\MessageTestUtils.java,set body,public  message builder   ( final  body body )  {  m body = body ;  return this ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\mail\MessageTestUtils.java,text part,public static  body part   (  string mime type  string text )  throws  messaging exception  {  final  text body text body = new  text body ( text )  ;  final  mime body part text part = new  mime body part ( text body )  ;  text part . set header (  mime header . header   content   type mime type )  ;  return text part ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\provider\HostAuthTests.java,test deserialize fromjson,"public void   (  )  throws json exception  {  final json object json = new json object (  )  ;  json . put (  email content .  host auth columns . protocol ""imap"" )  ;  json . put (  email content .  host auth columns . address ""dhoff@example . com"" )  ;  json . put (  email content .  host auth columns . port 1337 )  ;  json . put (  email content .  host auth columns . flags 293847 )  ;  json . put (  email content .  host auth columns . login ""dhoff"" )  ;  json . put (  email content .  host auth columns . password ""daknightrida"" )  ;  json . put (  email content .  host auth columns . domain ""example . com"" )  ;  json . put (  email content .  host auth columns . client   cert   alias ""i'm a client cert alias"" )  ;  json . put (  host auth . json   tag   credential  credential . empty . to json (  )  )  ;  final  host auth ha =  host auth . from json ( json )  ;  assert equals ( ""imap"" ha . m protocol )  ;  assert equals ( ""dhoff@example . com"" ha . m address )  ;  assert equals ( 1337 ha . m port )  ;  assert equals ( 293847 ha . m flags )  ;  assert equals ( ""dhoff"" ha . m login )  ;  assert equals ( ""daknightrida"" ha . m password )  ;  assert equals ( ""example . com"" ha . m domain )  ;  assert equals ( ""i'm a client cert alias"" ha . m client cert alias )  ;  assert equals (  credential . empty ha . m credential )  ;  assert null ( ha . m server cert )  ;  assert equals (  - 1 ha . m credential key )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\provider\HostAuthTests.java,test parceling,"public void   (  )  {  final  host auth orig = new  host auth (  )  ;  orig . m port = 993 ;  orig . m protocol = ""imap"" ;  orig . m address = ""example . com"" ;  orig . m login = ""user"" ;  orig . m password = ""supersecret"" ;  orig . m domain = ""domain"" ;  orig . m client cert alias = ""certalias"" ;  final  parcel p1 =  parcel . obtain (  )  ;  orig . write to parcel ( p1 0 )  ;  p1 . set data position ( 0 )  ;  final  host auth unparceled1 = new  host auth ( p1 )  ;  p1 . recycle (  )  ;  assert equals ( orig unparceled1 )  ;  assert equals ( orig . m credential key unparceled1 . m credential key )  ;  assert equals ( orig . m credential unparceled1 . m credential )  ;  orig . get or create credential ( new  mock context (  )  )  ;  final  parcel p2 =  parcel . obtain (  )  ;  orig . write to parcel ( p2 0 )  ;  p2 . set data position ( 0 )  ;  final  host auth unparceled2 = new  host auth ( p2 )  ;  p2 . recycle (  )  ;  assert equals ( orig unparceled2 )  ;  assert equals ( orig . m credential key unparceled2 . m credential key )  ;  assert equals ( orig . m credential unparceled2 . m credential )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\provider\HostAuthTests.java,test serialize and deserialize withjson,"public void   (  )  {  final  host auth before = new  host auth (  )  ;  before . m protocol = ""imap"" ;  before . m address = ""dhoff@example . com"" ;  before . m port = 1337 ;  before . m flags = 293847 ;  before . set login ( ""dhoff"" ""daknightrida"" )  ;  before . m domain = ""example . com"" ;  before . m client cert alias = ""i'm a client cert alias"" ;  before . m server cert = new byte[] {  ( byte ) 0xff  ( byte ) 0xaa }  ;  before . m credential key = 9873425 ;  before . m credential =  credential . empty ;  before . ensure loaded ( get context (  )  )  ;  final  host auth after =  host auth . from json ( before . to json (  )  )  ;  assert equals ( before . m protocol after . m protocol )  ;  assert equals ( before . m address after . m address )  ;  assert equals ( before . m port after . m port )  ;  assert equals ( before . m flags after . m flags )  ;  assert true (  arrays . equals ( before . get login (  )  after . get login (  )  )  )  ;  assert equals ( before . m domain after . m domain )  ;  assert equals ( before . m client cert alias after . m client cert alias )  ;  assert equals ( before . m credential after . m credential )  ;  assert null ( after . m server cert )  ;  assert equals (  - 1 after . m credential key )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\provider\HostAuthTests.java,test set connection flags,"public void   (  )  {   host auth ha = new  host auth (  )  ;  ha . set connection ( ""imap"" ""server"" 123 0 )  ;  assert equals ( 0 ha . m flags )  ;  ha . set connection ( ""imap"" ""server""  - 1 0 )  ;  assert equals ( 0 ha . m flags )  ;  ha . set connection ( ""pop3"" ""server"" 123 0 )  ;  assert equals ( 0 ha . m flags )  ;  ha . set connection ( ""pop3"" ""server""  - 1 0 )  ;  assert equals ( 0 ha . m flags )  ;  ha . set connection ( ""eas"" ""server"" 123 0 )  ;  assert equals ( 0 ha . m flags )  ;  ha . set connection ( ""eas"" ""server""  - 1 0 )  ;  assert equals ( 0 ha . m flags )  ;  ha . set connection ( ""smtp"" ""server"" 123 0 )  ;  assert equals ( 0 ha . m flags )  ;  ha . set connection ( ""smtp"" ""server""  - 1 0 )  ;  assert equals ( 0 ha . m flags )  ;  ha . set connection ( ""imap"" ""server""  host auth . port   unknown  host auth . flag   ssl )  ;  assert equals (  host auth . flag   ssl ha . m flags )  ;  ha . set connection ( ""imap"" ""server""  host auth . port   unknown  host auth . flag   ssl |  host auth . flag   trust   all )  ;  assert equals (  host auth . flag   ssl |  host auth . flag   trust   all ha . m flags )  ;  ha . set connection ( ""imap"" ""server""  host auth . port   unknown  host auth . flag   tls )  ;  assert equals (  host auth . flag   tls ha . m flags )  ;  ha . set connection ( ""imap"" ""server""  host auth . port   unknown  host auth . flag   tls |  host auth . flag   trust   all )  ;  assert equals (  host auth . flag   tls |  host auth . flag   trust   all ha . m flags )  ;  ha . set connection ( ""imap"" ""server""  host auth . port   unknown  host auth . flag   authenticate )  ;  assert equals ( 0 ha . m flags )  ;  ha . set connection ( ""imap"" ""server""  host auth . port   unknown 0xfffffff4 )  ;  assert equals ( 0x10 ha . m flags )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\provider\HostAuthTests.java,test set connection with certs,"public void   (  )  {   host auth ha = new  host auth (  )  ;  ha . set connection ( ""eas"" ""server""  host auth . port   unknown  host auth . flag   ssl ""client - cert"" )  ;  assert equals (  host auth . flag   ssl ha . m flags )  ;  assert equals ( ""client - cert"" ha . m client cert alias )  ;  ha . set connection ( ""eas"" ""server""  host auth . port   unknown  host auth . flag   tls ""client - cert"" )  ;  assert equals (  host auth . flag   tls ha . m flags )  ;  assert equals ( ""client - cert"" ha . m client cert alias )  ;  ha . set connection ( ""eas"" ""server""  host auth . port   unknown  host auth . flag   ssl |  host auth . flag   trust   all ""client - cert"" )  ;  assert equals (  host auth . flag   ssl |  host auth . flag   trust   all ha . m flags )  ;  assert equals ( ""client - cert"" ha . m client cert alias )  ;  try  {  ha . set connection ( ""eas"" ""server""  host auth . port   unknown 0 ""client - cert"" )  ;  fail ( "" shouldn't be able to set a client certificate on an unsecure connection"" )  ;   }  catch  (   illegal argument exception expected )   {   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\provider\HostAuthTests.java,test set login,"public void   (  )  {   host auth ha = new  host auth (  )  ;  ha . set login ( ""user:password"" )  ;  assert equals ( ""user"" ha . m login )  ;  assert equals ( ""password"" ha . m password )  ;  ha . set login ( ""%20us%20er%20:password"" )  ;  assert equals ( ""%20us%20er%20"" ha . m login )  ;  assert equals ( ""password"" ha . m password )  ;  ha . set login ( ""user:%20pass%20word%20"" )  ;  assert equals ( ""user"" ha . m login )  ;  assert equals ( ""%20pass%20word%20"" ha . m password )  ;  ha . set login ( ""user:"" )  ;  assert equals ( ""user"" ha . m login )  ;  assert equals ( """" ha . m password )  ;  ha . set login ( "":password"" )  ;  assert equals ( """" ha . m login )  ;  assert equals ( ""password"" ha . m password )  ;  ha . set login ( """" )  ;  assert null ( ha . m login )  ;  assert null ( ha . m password )  ;  ha . set login ( null )  ;  assert null ( ha . m login )  ;  assert null ( ha . m password )  ;  ha . set login ( ""userpassword"" )  ;  assert equals ( ""userpassword"" ha . m login )  ;  assert null ( ha . m password )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\provider\HostAuthTests.java,test set login authenticate,"public void   (  )  {   host auth ha = new  host auth (  )  ;  ha . m flags = 0x00000000 ;  ha . set login ( ""user"" ""password"" )  ;  assert equals (  host auth . flag   authenticate ha . m flags )  ;  ha . m flags = 0x00000000 ;  ha . set login ( ""user"" """" )  ;  assert equals (  host auth . flag   authenticate ha . m flags )  ;  ha . m flags = 0xffffffff ;  ha . set login ( """" ""password"" )  ;  assert equals ( ~ host auth . flag   authenticate ha . m flags )  ;  ha . m flags = 0x00000000 ;  ha . set login ( ""user"" null )  ;  assert equals (  host auth . flag   authenticate ha . m flags )  ;  ha . m flags = 0xffffffff ;  ha . set login ( null ""password"" )  ;  assert equals ( ~ host auth . flag   authenticate ha . m flags )  ;  ha . m flags = 0xffffffff ;  ha . set login ( null null )  ;  assert equals ( ~ host auth . flag   authenticate ha . m flags )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\provider\QuickResponseTests.java, quick response tests,public   (  )  {  super (  email provider . class  email content . authority )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\provider\QuickResponseTests.java,set up,@ override public void   (  )  throws  exception  {  super . set up (  )  ;  m mock context = get mock context (  )  ;  m provider = get provider (  )  ;   content cache . invalidate all caches (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\service\SearchParamsTests.java,brokentest parcel,"public void   (  )  {   search params params = new  search params ( 1 ""query"" )  ;  params . m include children = true ;  params . m limit = 66 ;  params . m offset = 99 ;   parcel parcel =  parcel . obtain (  )  ;  params . write to parcel ( parcel 0 )  ;  parcel . set data position ( 0 )  ;   search params read params =  search params . creator . create from parcel ( parcel )  ;  assert equals ( params . m filter read params . m filter )  ;  assert equals ( params . m include children read params . m include children )  ;  assert equals ( params . m limit read params . m limit )  ;  assert equals ( params . m offset read params . m offset )  ;  assert equals ( params . m mailbox id read params . m mailbox id )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\provider\MailboxTests.java, mailbox tests,public   (  )  {  super (  email provider . class  email content . authority )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\provider\MailboxTests.java,build test mailbox,private  mailbox   (  string server id  string name )  {   mailbox test mailbox = new  mailbox (  )  ;  test mailbox . m server id = server id ;  test mailbox . m display name =  ( name  =  =  null )   ?  test   display   name : name ;  test mailbox . m parent server id = test   parent   server   id ;  test mailbox . m sync key = test   sync   key ;  test mailbox . m sync status = test   sync   status ;  test mailbox . m account key = 1l ;  test mailbox . m delimiter = ' / ' ;  test mailbox . m flags = 2 ;  test mailbox . m flag visible = true ;  test mailbox . m parent key = 3l ;  test mailbox . m sync interval = 4 ;  test mailbox . m sync lookback = 5 ;  test mailbox . m sync time = 6l ;  test mailbox . m type = 7 ;  test mailbox . m last touched time = 10l ;  return test mailbox ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\provider\MailboxTests.java,create message,"private static  message   (  context c  mailbox b boolean starred boolean read int flag loaded )  {   message message =  provider test utils . setup message ( ""1"" b . m account key b . m id true false c starred read )  ;  message . m flag loaded = flag loaded ;  message . save ( c )  ;  return message ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\provider\MailboxTests.java,get message count,private int   ( long mailbox id )  {  return  utility . get first row int ( m mock context  content uris . with appended id (  mailbox . content   uri mailbox id )  new  string[] {  mailbox columns . message   count }  null null null 0 )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\provider\MailboxTests.java,set up,@ override public void   (  )  throws  exception  {  super . set up (  )  ;  m mock context = get mock context (  )  ;  m provider = get provider (  )  ;   content cache . invalidate all caches (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\provider\MailboxTests.java,test can move from,"public void   (  )  {  final  context c = m mock context ;   account a =  provider test utils . setup account ( ""acct1"" true c )  ;   mailbox bi =  provider test utils . setup mailbox ( ""b1"" a . m id true c  mailbox . type   inbox )  ;   mailbox bm =  provider test utils . setup mailbox ( ""b1"" a . m id true c  mailbox . type   mail )  ;   mailbox bd =  provider test utils . setup mailbox ( ""b1"" a . m id true c  mailbox . type   drafts )  ;   mailbox bo =  provider test utils . setup mailbox ( ""b1"" a . m id true c  mailbox . type   outbox )  ;  assert true ( bi . can have messages moved (  )  )  ;  assert true ( bm . can have messages moved (  )  )  ;  assert false ( bd . can have messages moved (  )  )  ;  assert false ( bo . can have messages moved (  )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\provider\MailboxTests.java,test delete,"public void   (  )  {  final  context c = m mock context ;   account account1 =  provider test utils . setup account ( ""mailbox - delete"" true c )  ;  long account1 id = account1 . m id ;   mailbox box1 =  provider test utils . setup mailbox ( ""box1"" account1 id true c )  ;  long box1 id = box1 . m id ;   mailbox box2 =  provider test utils . setup mailbox ( ""box2"" account1 id true c )  ;  long box2 id = box2 . m id ;   string selection =  email content .  mailbox columns . account   key  +  "" =  ? "" ;   string[] sel args = new  string[] {  string . value of ( account1 id )  }  ;  int num boxes =  email content . count ( c  mailbox . content   uri selection sel args )  ;  assert equals ( 2 num boxes )  ;   uri uri =  content uris . with appended id (  mailbox . content   uri box1 id )  ;  c . get content resolver (  )  . delete ( uri null null )  ;  num boxes =  email content . count ( c  mailbox . content   uri selection sel args )  ;  assert equals ( 1 num boxes )  ;  uri =  content uris . with appended id (  mailbox . content   uri box2 id )  ;  c . get content resolver (  )  . delete ( uri null null )  ;  num boxes =  email content . count ( c  mailbox . content   uri selection sel args )  ;  assert equals ( 0 num boxes )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\provider\MailboxTests.java,test find mailbox of type,"public void   (  )  {  final  context context = m mock context ;   account acct1 =  provider test utils . setup account ( ""acct1"" true context )  ;   mailbox acct1 inbox =  provider test utils . setup mailbox ( "" inbox1"" acct1 . m id true context  mailbox . type   inbox )  ;   mailbox acct1 calendar =  provider test utils . setup mailbox ( "" cal1"" acct1 . m id true context  mailbox . type   calendar )  ;   mailbox acct1 contacts =  provider test utils . setup mailbox ( "" con1"" acct1 . m id true context  mailbox . type   contacts )  ;   account acct2 =  provider test utils . setup account ( ""acct1"" true context )  ;   mailbox acct2 inbox =  provider test utils . setup mailbox ( "" inbox2"" acct2 . m id true context  mailbox . type   inbox )  ;   mailbox acct2 calendar =  provider test utils . setup mailbox ( "" cal2"" acct2 . m id true context  mailbox . type   calendar )  ;   mailbox acct2 contacts =  provider test utils . setup mailbox ( "" con2"" acct2 . m id true context  mailbox . type   contacts )  ;  assert equals ( acct1 inbox . m id  mailbox . find mailbox of type ( context acct1 . m id  mailbox . type   inbox )  )  ;  assert equals ( acct2 inbox . m id  mailbox . find mailbox of type ( context acct2 . m id  mailbox . type   inbox )  )  ;  assert equals ( acct1 calendar . m id  mailbox . find mailbox of type ( context acct1 . m id  mailbox . type   calendar )  )  ;  assert equals ( acct2 calendar . m id  mailbox . find mailbox of type ( context acct2 . m id  mailbox . type   calendar )  )  ;  assert equals ( acct1 contacts . m id  mailbox . find mailbox of type ( context acct1 . m id  mailbox . type   contacts )  )  ;  assert equals ( acct2 contacts . m id  mailbox . find mailbox of type ( context acct2 . m id  mailbox . type   contacts )  )  ;  assert equals (  mailbox . no   mailbox  mailbox . find mailbox of type ( context acct1 . m id  mailbox . type   drafts )  )  ;  assert equals (  mailbox . no   mailbox  mailbox . find mailbox of type ( context acct1 . m id  mailbox . type   outbox )  )  ;  context . get content resolver (  )  . delete (  content uris . with appended id (  account . content   uri acct1 . m id )  null null )  ;  assert equals (  mailbox . no   mailbox  mailbox . find mailbox of type ( context acct1 . m id  mailbox . type   inbox )  )  ;  assert equals (  mailbox . no   mailbox  mailbox . find mailbox of type ( context acct1 . m id  mailbox . type   calendar )  )  ;  assert equals (  mailbox . no   mailbox  mailbox . find mailbox of type ( context acct1 . m id  mailbox . type   contacts )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\provider\MailboxTests.java,test get display name,"public void   (  )  {  final  context c = m mock context ;   account a =  provider test utils . setup account ( ""acct1"" true c )  ;   mailbox bi =  provider test utils . setup mailbox ( ""b1"" a . m id true c  mailbox . type   inbox )  ;   mailbox bm =  provider test utils . setup mailbox ( ""b2"" a . m id true c  mailbox . type   mail )  ;  assert equals ( ""b1""  mailbox . get display name ( c bi . m id )  )  ;  assert equals ( ""b2""  mailbox . get display name ( c bm . m id )  )  ;  assert equals ( null  mailbox . get display name ( c 999999 )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\provider\MailboxTests.java,test get hashes,public void   (  )  {  final  context c = m mock context ;   mailbox test mailbox = build test mailbox ( test   server   id )  ;  test mailbox . save ( c )  ;   object[] test hash ;  test hash = new  object[] { test mailbox . m id test   display   name test   server   id test   parent   server   id 1l 7  ( int ) ' / ' test   sync   key 5 4 6l true 2 8 test   sync   status 3l 9l 10l }  ;   more asserts . assert equals ( test hash test mailbox . get hashes (  )  )  ;  test mailbox . m display name = null ;  test mailbox . m parent server id = null ;  test mailbox . m server id = null ;  test mailbox . m sync key = null ;  test mailbox . m sync status = null ;  test mailbox . m flag visible = false ;  test hash = new  object[] { test mailbox . m id null null null 1l 7  ( int ) ' / ' null 5 4 6l false 2 8 null 3l 9l 10l }  ;   more asserts . assert equals ( test hash test mailbox . get hashes (  )  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\provider\MailboxTests.java,test get mailbox for message id,"public void   (  )  {  final  context c = m mock context ;   mailbox b1 =  provider test utils . setup mailbox ( ""box1"" 1 true c  mailbox . type   mail )  ;   mailbox b2 =  provider test utils . setup mailbox ( ""box2"" 1 true c  mailbox . type   mail )  ;   message m1 =  provider test utils . setup message ( ""1"" b1 . m account key b1 . m id true true c false false )  ;   message m2 =  provider test utils . setup message ( ""1"" b2 . m account key b2 . m id true true c false false )  ;   provider test utils . assert mailbox equal ( ""x"" b1  mailbox . get mailbox for message id ( c m1 . m id )  )  ;   provider test utils . assert mailbox equal ( ""x"" b2  mailbox . get mailbox for message id ( c m2 . m id )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\provider\MailboxTests.java,test get mailbox type,"public void   (  )  {  final  context c = m mock context ;   account a =  provider test utils . setup account ( ""acct1"" true c )  ;   mailbox bi =  provider test utils . setup mailbox ( ""b1"" a . m id true c  mailbox . type   inbox )  ;   mailbox bm =  provider test utils . setup mailbox ( ""b2"" a . m id true c  mailbox . type   mail )  ;  assert equals (  mailbox . type   inbox  mailbox . get mailbox type ( c bi . m id )  )  ;  assert equals (  mailbox . type   mail  mailbox . get mailbox type ( c bm . m id )  )  ;  assert equals (  - 1  mailbox . get mailbox type ( c 999999 )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\provider\MailboxTests.java,test is refreshable,"public void   (  )  {  final  context c = m mock context ;   account a =  provider test utils . setup account ( ""acct1"" true c )  ;   mailbox bi =  provider test utils . setup mailbox ( ""b1"" a . m id true c  mailbox . type   inbox )  ;   mailbox bm =  provider test utils . setup mailbox ( ""b1"" a . m id true c  mailbox . type   mail )  ;   mailbox bd =  provider test utils . setup mailbox ( ""b1"" a . m id true c  mailbox . type   drafts )  ;   mailbox bo =  provider test utils . setup mailbox ( ""b1"" a . m id true c  mailbox . type   outbox )  ;  assert true (  mailbox . is refreshable ( c bi . m id )  )  ;  assert true (  mailbox . is refreshable ( c bm . m id )  )  ;  assert false (  mailbox . is refreshable ( c bd . m id )  )  ;  assert false (  mailbox . is refreshable ( c bo . m id )  )  ;  assert false (  mailbox . is refreshable ( c 9999999 )  )  ;  assert false (  mailbox . is refreshable ( c  mailbox . query   all   drafts )  )  ;  assert false (  mailbox . is refreshable ( c  mailbox . query   all   inboxes )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\provider\MailboxTests.java,test message count,"public void   (  )  {  final  context c = m mock context ;   account a1 =  provider test utils . setup account ( ""holdflag - 1"" true c )  ;   account a2 =  provider test utils . setup account ( ""holdflag - 2"" true c )  ;   mailbox b1 =  provider test utils . setup mailbox ( ""box1"" a1 . m id true c  mailbox . type   inbox )  ;   mailbox b2 =  provider test utils . setup mailbox ( ""box2"" a1 . m id true c  mailbox . type   outbox )  ;   mailbox b3 =  provider test utils . setup mailbox ( ""box3"" a2 . m id true c  mailbox . type   inbox )  ;   mailbox b4 =  provider test utils . setup mailbox ( ""box4"" a2 . m id true c  mailbox . type   outbox )  ;   mailbox bt =  provider test utils . setup mailbox ( ""boxt"" a2 . m id true c  mailbox . type   trash )  ;  assert equals ( 0 get message count ( b1 . m id )  )  ;  assert equals ( 0 get message count ( b2 . m id )  )  ;  assert equals ( 0 get message count ( b3 . m id )  )  ;  assert equals ( 0 get message count ( b4 . m id )  )  ;  assert equals ( 0 get message count ( bt . m id )  )  ;  assert equals ( 0  message . get favorite message count ( c )  )  ;  assert equals ( 0  message . get favorite message count ( c a1 . m id )  )  ;  assert equals ( 0  message . get favorite message count ( c a2 . m id )  )  ;   message m11 = create message ( c b1 true false  message . flag   loaded   complete )  ;   message m21 = create message ( c b2 false false  message . flag   loaded   complete )  ;   message m22 = create message ( c b2 true true  message . flag   loaded   complete )  ;   message m31 = create message ( c b3 false false  message . flag   loaded   complete )  ;   message m32 = create message ( c b3 false false  message . flag   loaded   complete )  ;   message m33 = create message ( c b3 true true  message . flag   loaded   complete )  ;   message mt1 = create message ( c bt true false  message . flag   loaded   complete )  ;   message mt2 = create message ( c bt true false  message . flag   loaded   complete )  ;   message mt3 = create message ( c bt false false  message . flag   loaded   complete )  ;  assert equals ( 1 get message count ( b1 . m id )  )  ;  assert equals ( 2 get message count ( b2 . m id )  )  ;  assert equals ( 3 get message count ( b3 . m id )  )  ;  assert equals ( 0 get message count ( b4 . m id )  )  ;  assert equals ( 3 get message count ( bt . m id )  )  ;  assert equals ( 3  message . get favorite message count ( c )  )  ;  assert equals ( 2  message . get favorite message count ( c a1 . m id )  )  ;  assert equals ( 1  message . get favorite message count ( c a2 . m id )  )  ;   content values values = new  content values (  )  ;  values . put (  message columns . mailbox   key b4 . m id )  ;  get provider (  )  . update (  message . content   uri values  email content . id   selection new  string[] { """"  +  m32 . m id }  )  ;  assert equals ( 1 get message count ( b1 . m id )  )  ;  assert equals ( 2 get message count ( b2 . m id )  )  ;  assert equals ( 2 get message count ( b3 . m id )  )  ;  assert equals ( 1 get message count ( b4 . m id )  )  ;  get provider (  )  . delete (  message . content   uri  email content . id   selection new  string[] { """"  +  m11 . m id }  )  ;  get provider (  )  . delete (  message . content   uri  email content . id   selection new  string[] { """"  +  m21 . m id }  )  ;  assert equals ( 0 get message count ( b1 . m id )  )  ;  assert equals ( 1 get message count ( b2 . m id )  )  ;  assert equals ( 2 get message count ( b3 . m id )  )  ;  assert equals ( 1 get message count ( b4 . m id )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\provider\MailboxTests.java,test parcelling,"public void   (  )  {   mailbox original = build test mailbox ( ""server id"" ""display name for mailbox"" )  ;   parcel p =  parcel . obtain (  )  ;  original . write to parcel ( p 0 )  ;  p . set data position ( 0 )  ;   mailbox unparcelled =  mailbox . creator . create from parcel ( p )  ;   more asserts . assert equals ( original . get hashes (  )  unparcelled . get hashes (  )  )  ;   mailbox phony = build test mailbox ( ""different id"" ""display name for mailbox"" )  ;  assert false (  arrays . equals ( phony . get hashes (  )  unparcelled . get hashes (  )  )  )  ;  p . recycle (  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\provider\MailboxTests.java,test parcelling with partial mailbox,"public void   (  )  {   mailbox unpopulated = new  mailbox (  )  ;  unpopulated . m display name = ""the only thing filled in for some reason"" ;   parcel p =  parcel . obtain (  )  ;  unpopulated . write to parcel ( p 0 )  ;  p . set data position ( 0 )  ;   mailbox unparcelled =  mailbox . creator . create from parcel ( p )  ;   more asserts . assert equals ( unpopulated . get hashes (  )  unparcelled . get hashes (  )  )  ;  p . recycle (  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\provider\MailboxTests.java,test restore mailbox for path,"public void   (  )  {  final  context c = m mock context ;   mailbox test mailbox ;  test mailbox =  provider test utils . setup mailbox ( ""a / b / c / box"" 1 true c  mailbox . type   mail )  ;   provider test utils . assert mailbox equal ( ""x"" test mailbox  mailbox . restore mailbox for path ( c 1 ""a / b / c / box"" )  )  ;  assert null (  mailbox . restore mailbox for path ( c 2 ""a / b / c / box"" )  )  ;  assert null (  mailbox . restore mailbox for path ( c 1 ""a / b / c"" )  )  ;  assert null (  mailbox . restore mailbox for path ( c 1 ""a / b / c / %"" )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\provider\MailboxTests.java,test restore mailbox of type,"public void   (  )  {  final  context context = get mock context (  )  ;   account acct1 =  provider test utils . setup account ( ""acct1"" true context )  ;   mailbox acct1 inbox =  provider test utils . setup mailbox ( "" inbox1"" acct1 . m id true context  mailbox . type   inbox )  ;   mailbox acct1 calendar =  provider test utils . setup mailbox ( "" cal1"" acct1 . m id true context  mailbox . type   calendar )  ;   mailbox acct1 contacts =  provider test utils . setup mailbox ( "" con1"" acct1 . m id true context  mailbox . type   contacts )  ;   account acct2 =  provider test utils . setup account ( ""acct1"" true context )  ;   mailbox acct2 inbox =  provider test utils . setup mailbox ( "" inbox2"" acct2 . m id true context  mailbox . type   inbox )  ;   mailbox acct2 calendar =  provider test utils . setup mailbox ( "" cal2"" acct2 . m id true context  mailbox . type   calendar )  ;   mailbox acct2 contacts =  provider test utils . setup mailbox ( "" con2"" acct2 . m id true context  mailbox . type   contacts )  ;   provider test utils . assert mailbox equal ( ""test restore mailbox of type"" acct1 inbox  mailbox . restore mailbox of type ( context acct1 . m id  mailbox . type   inbox )  )  ;   provider test utils . assert mailbox equal ( ""test restore mailbox of type"" acct2 inbox  mailbox . restore mailbox of type ( context acct2 . m id  mailbox . type   inbox )  )  ;   provider test utils . assert mailbox equal ( ""test restore mailbox of type"" acct1 calendar  mailbox . restore mailbox of type ( context acct1 . m id  mailbox . type   calendar )  )  ;   provider test utils . assert mailbox equal ( ""test restore mailbox of type"" acct2 calendar  mailbox . restore mailbox of type ( context acct2 . m id  mailbox . type   calendar )  )  ;   provider test utils . assert mailbox equal ( ""test restore mailbox of type"" acct1 contacts  mailbox . restore mailbox of type ( context acct1 . m id  mailbox . type   contacts )  )  ;   provider test utils . assert mailbox equal ( ""test restore mailbox of type"" acct2 contacts  mailbox . restore mailbox of type ( context acct2 . m id  mailbox . type   contacts )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\provider\MailboxTests.java,test restore mailbox with id,"public void   (  )  {  final  context c = m mock context ;   mailbox test mailbox ;  test mailbox =  provider test utils . setup mailbox ( ""box1"" 1 true c  mailbox . type   mail )  ;   provider test utils . assert mailbox equal ( ""x"" test mailbox  mailbox . restore mailbox with id ( c test mailbox . m id )  )  ;  test mailbox =  provider test utils . setup mailbox ( ""box2"" 1 true c  mailbox . type   mail )  ;   provider test utils . assert mailbox equal ( ""x"" test mailbox  mailbox . restore mailbox with id ( c test mailbox . m id )  )  ;  assert null (  mailbox . restore mailbox with id ( c 8 )  )  ;  assert null (  mailbox . restore mailbox with id ( c  - 1 )  )  ;  assert null (  mailbox . restore mailbox with id ( c  long . max   value )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\provider\MailboxTests.java,test save,"public void   (  )  {  final  context c = m mock context ;   account account1 =  provider test utils . setup account ( ""mailbox - save"" true c )  ;  long account1 id = account1 . m id ;   mailbox box1 =  provider test utils . setup mailbox ( ""box1"" account1 id true c )  ;  long box1 id = box1 . m id ;   mailbox box2 =  mailbox . restore mailbox with id ( c box1 id )  ;   provider test utils . assert mailbox equal ( ""test mailbox save"" box1 box2 )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\utility\DelayedOperationsTests.java, delayed operations for test,public   (  )  {  super ( null )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\utility\DelayedOperationsTests.java,brokentest cancel,public void   (  )  {  final  atomic integer i = new  atomic integer ( 1 )  ;   runnable r ;  m delayed operations . post ( r = new  runnable (  )  {  @ override public void run (  )  {  i . add and get ( 2 )  ;   }   }   )  ;  m delayed operations . remove callbacks ( r )  ;  m delayed operations . post ( new  runnable (  )  {  @ override public void run (  )  {  i . add and get ( 4 )  ;   }   }   )  ;  assert equals ( 1 m delayed operations . m pending operations . size (  )  )  ;  assert equals ( 1 i . get (  )  )  ;  m delayed operations . run queued operations (  )  ;  assert equals ( 5 i . get (  )  )  ;  assert equals ( 0 m delayed operations . m pending operations . size (  )  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\utility\DelayedOperationsTests.java,brokentest cancel all,public void   (  )  {  final  atomic integer i = new  atomic integer ( 1 )  ;  m delayed operations . post ( new  runnable (  )  {  @ override public void run (  )  {  i . add and get ( 2 )  ;   }   }   )  ;  m delayed operations . post ( new  runnable (  )  {  @ override public void run (  )  {  i . add and get ( 4 )  ;   }   }   )  ;  assert equals ( 2 m delayed operations . m pending operations . size (  )  )  ;  assert equals ( 1 i . get (  )  )  ;  m delayed operations . remove callbacks (  )  ;  assert equals ( 0 m delayed operations . m posted to handler . size (  )  )  ;  assert equals ( 1 i . get (  )  )  ;  assert equals ( 0 m delayed operations . m pending operations . size (  )  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\utility\DelayedOperationsTests.java,brokentest enueue,public void   (  )  {  final  atomic integer i = new  atomic integer ( 1 )  ;  m delayed operations . post ( new  runnable (  )  {  @ override public void run (  )  {  i . add and get ( 2 )  ;   }   }   )  ;  m delayed operations . post ( new  runnable (  )  {  @ override public void run (  )  {  i . add and get ( 4 )  ;   }   }   )  ;  assert equals ( 2 m delayed operations . m pending operations . size (  )  )  ;  assert equals ( 1 i . get (  )  )  ;  m delayed operations . run queued operations (  )  ;  assert equals ( 7 i . get (  )  )  ;  assert equals ( 0 m delayed operations . m pending operations . size (  )  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\utility\DelayedOperationsTests.java,cancel runnable,@ override void   (  runnable r )  {  m posted to handler . remove ( r )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\utility\DelayedOperationsTests.java,post runnable,@ override void   (  runnable r )  {  m posted to handler . add ( r )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\utility\DelayedOperationsTests.java,run,@ override public void   (  )  {  i . add and get ( 4 )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\utility\DelayedOperationsTests.java,run queued operations,public void   (  )  {  for  (   runnable r : m posted to handler )   {  r . run (  )  ;   }  m posted to handler . clear (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\utility\DelayedOperationsTests.java,set up,@ override protected void   (  )  throws  exception  {  super . set up (  )  ;  m delayed operations = new  delayed operations for test (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\utility\SSLUtilsTest.java,assert scheme name valid,private void   (  string s )  {  assert true (  pattern . matches ( safe   scheme   pattern s )  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\utility\SSLUtilsTest.java,random string,private  string   (  random r )  {  int length =  ( r . next int (  )  % 5 )   +  10 ;   string builder sb = new  string builder (  )  ;  for  ( int i = 0 ;  i  <  length ;  i +  +  )   {  sb . append ( random   dict[ math . abs ( r . next int (  )  )  % random   dict . length] )  ;   }  return sb . to string (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\utility\SSLUtilsTest.java,test scheme name escape already safe,"public void   (  )  {  assert equals ( ""http"" ssl utils . escape for scheme name ( ""http"" )  )  ;  assert equals ( ""https"" ssl utils . escape for scheme name ( ""https"" )  )  ;  assert equals ( ""ftp"" ssl utils . escape for scheme name ( ""ftp"" )  )  ;  assert equals ( ""z39 . 50r"" ssl utils . escape for scheme name ( ""z39 . 50r"" )  )  ;  assert equals ( ""fake - protocol . yes"" ssl utils . escape for scheme name ( ""fake - protocol . yes"" )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\utility\SSLUtilsTest.java,test scheme name escape is safe,"public void   (  )  {  assert scheme name valid ( ssl utils . escape for scheme name ( ""name with spaces"" )  )  ;  assert scheme name valid ( ssl utils . escape for scheme name ( ""odd * & characters"" )  )  ;  assert scheme name valid ( ssl utils . escape for scheme name ( ""f3v ! l ; 891023 - 47  + "" )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\utility\SSLUtilsTest.java,test scheme names are more or less unique,"public void   (  )  {  assert equals ( ssl utils . escape for scheme name ( ""name with spaces"" )  ssl utils . escape for scheme name ( ""name with spaces"" )  )  ;  assert equals ( ssl utils . escape for scheme name ( ""name with spaces"" )  ssl utils . escape for scheme name ( ""name with spaces"" )  )  ;   random random = new  random ( 314159 )  ;  for  ( int i = 0 ;  i  <  100 ;  i +  +  )   {   string s1 = random string ( random )  ;   string s2 = random string ( random )  ;   more asserts . assert not equal ( ssl utils . escape for scheme name ( s1 )  ssl utils . escape for scheme name ( s2 )  )  ;   }   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\utility\AttachmentUtilitiesTests.java,test get filename extension,"public void   (  )  {  final  string file   no   extension = ""myfile"" ;  final  string file   extension = ""myfile . p df"" ;  final  string file   two   extensions = ""myfile . false .  abc"" ;  assert null (  attachment utilities . get filename extension ( null )  )  ;  assert null (  attachment utilities . get filename extension ( """" )  )  ;  assert null (  attachment utilities . get filename extension ( file   no   extension )  )  ;  assert equals ( ""pdf""  attachment utilities . get filename extension ( file   extension )  )  ;  assert equals ( ""abc""  attachment utilities . get filename extension ( file   two   extensions )  )  ;   attachment utilities . get filename extension ( ""filename . "" )  ;   attachment utilities . get filename extension ( "" . extension"" )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\utility\AttachmentUtilitiesTests.java,test infer mime type,"public void   (  )  {  final  string default   mix = "" application /  octet - stream"" ;  final  string default   lower = default   mix . to lower case (  )  ;  final  string text   plain = ""text / plain"" ;  final  string type   img   png = ""image / png"" ;  final  string file   png = ""myfile . false . p ng"" ;  final  string file   abc = ""myfile . false . a bc"" ;  final  string file   no   ext = ""myfile"" ;  assert equals ( ""message / rfc822""  attachment utilities . infer mime type ( ""a . eml"" null )  )  ;  assert equals ( ""message / rfc822""  attachment utilities . infer mime type ( ""a . eml"" """" )  )  ;  assert equals ( ""message / rfc822""  attachment utilities . infer mime type ( ""a . eml"" default   lower )  )  ;  assert equals ( ""message / rfc822""  attachment utilities . infer mime type ( ""a . e ml"" text   plain )  )  ;  assert equals ( ""message / rfc822""  attachment utilities . infer mime type ( ""a . eml"" type   img   png )  )  ;  assert equals ( ""mime / type""  attachment utilities . infer mime type ( file   png "" mime /  ty pe"" )  )  ;  assert equals ( ""mime / type""  attachment utilities . infer mime type ( file   abc "" mime /  ty pe"" )  )  ;  assert equals ( ""mime / type""  attachment utilities . infer mime type ( file   no   ext "" mime /  ty pe"" )  )  ;  assert equals ( ""mime / type""  attachment utilities . infer mime type ( null "" mime /  ty pe"" )  )  ;  assert equals ( ""mime / type""  attachment utilities . infer mime type ( """" "" mime /  ty pe"" )  )  ;  assert equals ( ""image / png""  attachment utilities . infer mime type ( file   png null )  )  ;  assert equals ( ""image / png""  attachment utilities . infer mime type ( file   png """" )  )  ;  assert equals ( ""image / png""  attachment utilities . infer mime type ( file   png default   mix )  )  ;  assert equals ( ""image / png""  attachment utilities . infer mime type ( file   png text   plain )  )  ;  assert equals ( ""application / abc""  attachment utilities . infer mime type ( file   abc null )  )  ;  assert equals ( ""application / abc""  attachment utilities . infer mime type ( file   abc """" )  )  ;  assert equals ( ""application / abc""  attachment utilities . infer mime type ( file   abc default   mix )  )  ;  assert equals ( default   lower  attachment utilities . infer mime type ( file   no   ext null )  )  ;  assert equals ( default   lower  attachment utilities . infer mime type ( file   no   ext """" )  )  ;  assert equals ( default   lower  attachment utilities . infer mime type ( file   no   ext default   mix )  )  ;  assert equals ( default   lower  attachment utilities . infer mime type ( null null )  )  ;  assert equals ( default   lower  attachment utilities . infer mime type ( """" """" )  )  ;  assert equals ( text   plain  attachment utilities . infer mime type ( file   abc text   plain )  )  ;  assert equals ( text   plain  attachment utilities . infer mime type ( file   no   ext text   plain )  )  ;  assert equals ( text   plain  attachment utilities . infer mime type ( null text   plain )  )  ;  assert equals ( text   plain  attachment utilities . infer mime type ( """" text   plain )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\utility\EmailAsyncTaskTests.java, my task,public   (  tracker tracker )  {  super ( tracker )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\utility\EmailAsyncTaskTests.java, my task sub class,public   (  tracker tracker )  {  super ( tracker )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\utility\EmailAsyncTaskTests.java,do in background,@ override protected  string   (  string .  .  .  params )  {  m do in background arg = params ;  return m do in background result ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\utility\EmailAsyncTaskTests.java,on cancelled,@ override protected void   (  string result )  {  m on cancelled arg = result ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\utility\EmailAsyncTaskTests.java,on success,@ override protected void   (  string result )  {  m on post execute arg = result ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\utility\EmailAsyncTaskTests.java,test all,"public void   (  )  throws  exception  {  final  email async task .  tracker tracker = new  email async task .  tracker (  )  ;  assert equals ( 0 tracker . get task count for test (  )  )  ;  final  my task task1 = new  my task ( tracker )  ;  assert equals ( 1 tracker . get task count for test (  )  )  ;  final  my task task2 = new  my task ( tracker )  ;  assert equals ( 2 tracker . get task count for test (  )  )  ;  final  my task task3 = new  my task ( tracker )  ;  assert equals ( 3 tracker . get task count for test (  )  )  ;  final  my task task4 = new  my task ( tracker )  ;  assert equals ( 4 tracker . get task count for test (  )  )  ;  task1 . m do in background result = ""r"" ;  assert equals ( ""r"" task1 . call do in background for test ( ""1"" ""2"" )  )  ;   more asserts . assert equals ( new  string[] { ""1"" ""2"" }  task1 . m do in background arg )  ;  task1 . call on post execute for test ( ""a"" )  ;  assert equals ( 3 tracker . get task count for test (  )  )  ;  assert equals ( ""a"" task1 . m on post execute arg )  ;  assert null ( task1 . m on cancelled arg )  ;  task3 . call on cancelled for test ( ""b"" )  ;  assert equals ( 2 tracker . get task count for test (  )  )  ;  assert null ( task3 . m on post execute arg )  ;  assert equals ( ""b"" task3 . m on cancelled arg )  ;  tracker . cancel all interrupt (  )  ;  assert equals ( 0 tracker . get task count for test (  )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\utility\EmailAsyncTaskTests.java,test cancell others,public void   (  )  {  final  email async task .  tracker tracker = new  email async task .  tracker (  )  ;  final  my task task1 = new  my task ( tracker )  ;  final  my task task2 = new  my task ( tracker )  ;  final  my task task3 = new  my task ( tracker )  ;  final  my task sub1 = new  my task sub class ( tracker )  ;  final  my task sub2 = new  my task sub class ( tracker )  ;  final  my task sub3 = new  my task sub class ( tracker )  ;  assert equals ( 6 tracker . get task count for test (  )  )  ;  tracker . cancel others ( task3 )  ;  assert equals ( 4 tracker . get task count for test (  )  )  ;  assert true ( tracker . contains task for test ( task3 )  )  ;  tracker . cancel others ( sub1 )  ;  assert equals ( 2 tracker . get task count for test (  )  )  ;  assert true ( tracker . contains task for test ( task3 )  )  ;  assert true ( tracker . contains task for test ( sub1 )  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\utility\EmailAsyncTaskTests.java,test null tracker,public void   (  )  {  final  my task task1 = new  my task ( null )  ;  task1 . unregister self (  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\utility\UtilityTest.java,create new file,@ override public boolean   (  file f )  throws io exception  {  return true ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\utility\UtilityTest.java,get countdown file creator,private static  new file creator   (  )  {  return new  new file creator (  )  {  private int m countdown = 5 ;  @ override public boolean create new file (   file f )  throws io exception  {  return m countdown -  -   <  =  0 ;   }   }   ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\utility\UtilityTest.java,get true file creator,private static  new file creator   (  )  {  return new  new file creator (  )  {  @ override public boolean create new file (   file f )  throws io exception  {  return true ;   }   }   ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\utility\UtilityTest.java,test create unique file,@ small test public void   (  )  throws  exception  {  final  file directory = new  isolated context ( new  mock content resolver (  )  get context (  )  )  . get files dir (  )  ;  final  file created1 =  utility . create unique file internal ( get true 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\utility\UtilityTest.java,test create unique file compare,@ small test public void   (  )  throws  exception  {  final  file directory = new  isolated context ( new  mock content resolver (  )  get context (  )  )  . get files dir (  )  ;  final  file created1 =  utility . create unique file internal ( get count
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\utility\UtilityTest.java,test create unique file extensions,@ small test public void   (  )  throws  exception  {  final  file directory = new  isolated context ( new  mock content resolver (  )  get context (  )  )  . get files dir (  )  ;  final  file created1 =  utility . create unique file internal ( get true 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\utility\UtilityTest.java,test create unique file with percent,@ small test public void   (  )  throws  exception  {  final  file directory = new  isolated context ( new  mock content resolver (  )  get context (  )  )  . get files dir (  )  ;  final  file created1 =  utility . create unique file internal ( get true 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\utility\UtilityTest.java,test parse date times,"@ small test public void   (  )  throws  exception  {  test parse date times helper ( ""20090211t180303z"" 2009 2 11 18 3 3 )  ;  test parse date times helper ( ""20090211"" 2009 2 11 0 0 0 )  ;  try  {  test parse date times helper ( ""200902"" 0 0 0 0 0 0 )  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\utility\UtilityTest.java,test parse date times helper,private void   (  string date int year int month int day int hour int minute int second )  throws  exception  {   gregorian calendar cal =  utility . parse date time to calendar ( date )  ;  assert equals ( year cal . get (  calendar . year )  )  ;  assert equals ( month cal . get (  calendar . month )   +  1 )  ;  assert equals ( day cal . get (  calendar . day   of   month )  )  ;  assert equals ( hour cal . get (  calendar . hour   of   day )  )  ;  assert equals ( minute cal . get (  calendar . minute )  )  ;  assert equals ( second cal . get (  calendar . second )  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\utility\UtilityTest.java,test parse email date time,"@ small test public void   (  )  throws  exception  {  test parse email date time helper ( ""2010 - 02 - 23t16:01:05 . 000z"" 2010 2 23 16 1 5 0 )  ;  test parse email date time helper ( ""2009 - 02 - 11t18:03:31 . 123z"" 2009 2 11 18 3 31 123 )  ;  test pars"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\utility\UtilityTest.java,test parse email date time helper,"private void   (  string date int year int month int day int hour int minute int second int millis )  throws  exception  {   gregorian calendar cal = new  gregorian calendar ( year month  -  1 day hour minute second )  ;  cal . set time zone (  time zone . get time zone ( ""gmt"" )  )  ;  long time in millis =  utility . parse email date time to millis ( date )  ;  assert equals ( cal . get time in millis (  )   +  millis time in millis )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\utility\TextUtilitiesTests.java,assert highlight unchanged,private void   (  string str )  {  assert equals ( str  text utilities . highlight terms in html ( str null )  )  ;   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\utility\TextUtilitiesTests.java,brokentest highlight duplicate term text,"public void   (  )  {   string text = "" this should be visible"" ;   spannable string builder ssb =  (  spannable string builder )  text utilities . highlight terms in text ( text ""should should"" )  ;   background color span[] spans = ssb . get spans ( 0 ssb . length (  )   background color span . class )  ;  assert equals ( 1 spans . length )  ;   background color span span = spans[0] ;  assert equals ( text . index of ( ""should"" )  ssb . get span start ( span )  )  ;  assert equals ( text . index of ( "" be"" )  ssb . get span end ( span )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\utility\TextUtilitiesTests.java,brokentest highlight overlap term text,"public void   (  )  {   string text = "" this shoulder is visible"" ;   spannable string builder ssb =  (  spannable string builder )  text utilities . highlight terms in text ( text ""should ould"" )  ;   background color span[] spans = ssb . get spans ( 0 ssb . length (  )   background color span . class )  ;  assert equals ( 1 spans . length )  ;   background color span span = spans[0] ;  assert equals ( text . index of ( ""should"" )  ssb . get span start ( span )  )  ;  assert equals ( text . index of ( ""er is"" )  ssb . get span end ( span )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\utility\TextUtilitiesTests.java,brokentest highlight overlap term text,"public void   (  )  {   string text = "" the shoulders are visible"" ;   spannable string builder ssb =  (  spannable string builder )  text utilities . highlight terms in text ( text ""shoulder shoulders"" )  ;   background color span[] spans = ssb . get spans ( 0 ssb . length (  )   background color span . class )  ;  assert equals ( 2 spans . length )  ;   background color span span = spans[0] ;  assert equals ( text . index of ( ""shoulder"" )  ssb . get span start ( span )  )  ;  assert equals ( text . index of ( ""s are visible"" )  ssb . get span end ( span )  )  ;  span = spans[1] ;  assert equals ( text . index of ( ""s are visible"" )  ssb . get span start ( span )  )  ;  assert equals ( text . index of ( "" are visible"" )  ssb . get span end ( span )  )  ;  assert equals ( text ssb . to string (  )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\utility\TextUtilitiesTests.java,brokentest highlight single term text,"public void   (  )  {   string text = "" this <  should be visibl > e"" ;   spannable string builder ssb =  (  spannable string builder )  text utilities . highlight terms in text ( text "" visi"" )  ;   background color span[] spans = ssb . get spans ( 0 ssb . length (  )   background color span . class )  ;  assert equals ( 1 spans . length )  ;   background color span span = spans[0] ;  assert equals ( text . index of ( ""visi"" )  ssb . get span start ( span )  )  ;  assert equals ( text . index of ( ""bl > e"" )  ssb . get span end ( span )  )  ;  assert equals ( text ssb . to string (  )  )  ;  text = "" the research word should be a search result"" ;  ssb =  (  spannable string builder )  text utilities . highlight terms in text ( text "" search"" )  ;  spans = ssb . get spans ( 0 ssb . length (  )   background color span . class )  ;  assert equals ( 2 spans . length )  ;  span = spans[0] ;  assert equals ( text . index of ( ""search word"" )  ssb . get span start ( span )  )  ;  assert equals ( text . index of ( "" word"" )  ssb . get span end ( span )  )  ;  span = spans[1] ;  assert equals ( text . index of ( ""search result"" )  ssb . get span start ( span )  )  ;  assert equals ( text . index of ( "" result"" )  ssb . get span end ( span )  )  ;  assert equals ( text ssb . to string (  )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\utility\TextUtilitiesTests.java,brokentest highlight two term text,"public void   (  )  {   string text = "" this should be visible"" ;   spannable string builder ssb =  (  spannable string builder )  text utilities . highlight terms in text ( text ""visi should"" )  ;   background color span[] spans = ssb . get spans ( 0 ssb . length (  )   background color span . class )  ;  assert equals ( 2 spans . length )  ;   background color span span = spans[0] ;  assert equals ( text . index of ( ""should"" )  ssb . get span start ( span )  )  ;  assert equals ( text . index of ( "" be"" )  ssb . get span end ( span )  )  ;  span = spans[1] ;  assert equals ( text . index of ( ""visi"" )  ssb . get span start ( span )  )  ;  assert equals ( text . index of ( ""ble"" )  ssb . get span end ( span )  )  ;  assert equals ( text ssb . to string (  )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\utility\TextUtilitiesTests.java,find tag end,private void   (  string text  string tag )  {  int calculated end =  text utilities . find tag end ( text tag 0 )  ;  int known end = text . index of ( '@' )   +  2 ;  if  ( known end  =  =  1 )   {  assert equals (  - 1 calculated end )  ;   }  else  {  assert equals ( calculated end known end )  ;   }   }  
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\utility\TextUtilitiesTests.java,test find tag end,"public void   (  )  {  find tag end ( "" < tag foo = \""bar\""@  /  >   < blah blah > "" ""tag"" )  ;  find tag end ( "" < tag foo = \""bar\"" > some text@ <  / tag > some more text"" ""tag"" )  ;  find tag end ( "" < tag foo = \""bar\"" > some more text but no end tag"" ""tag"" )  ;  find tag end ( "" < tag foo = \""bar\"" > some more text but no end tag"" ""tag "" )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\utility\TextUtilitiesTests.java,test highlight no term,"public void   (  )  {  assert highlight unchanged ( "" < html >  < style foo = \""bar\"" >  not <  / style >  visible <  / html > "" )  ;  assert highlight unchanged ( "" < html >  < nostrip foo = \""bar\"" >  is <  / nostrip >  visible <  / html > "" )  ;  assert highlight unchanged ( "" < html >  visible < style foo = \""bar\"" >  not"" )  ;  assert highlight unchanged ( "" < html >  visible < style foo = \""bar\"" >  not <  / style >  again visible"" )  ;  assert highlight unchanged ( "" < html >  visible < style foo = \""bar\"" /  >  again visible"" )  ;  assert highlight unchanged ( "" < html >  visible < style foo = \""bar\"" /  >  < head >  <  /  / blah < style >  not <  / head >  again visible"" )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\utility\TextUtilitiesTests.java,test highlight single term html,"public void   (  )  {   string str = "" < html >  < style foo = \""bar\"" >  not <  / style >  visible <  / html > "" ;  assert equals ( str  text utilities . highlight terms in html ( "" < html >  < style foo = \""bar\"" >  not <  / style >  visible <  / html > "" ""style"" )  )  ;  assert equals ( "" < html >  < style foo = \""bar\"" >  not <  / style >  < span ""  +  ""style = \""background - color: ""  +   text utilities . highlight   color   string  +  ""\"" >  visi <  / span > ble <  / html > ""  text utilities . highlight terms in html ( str "" visi"" )  )  ;  assert equals ( "" < html >  visible < style foo = \""bar\"" >  not <  / style > a < span""  +  "" style = \""background - color: ""  +   text utilities . highlight   color   string  +  ""\"" > gain <  / span >  visible""  text utilities . highlight terms in html ( "" < html >  visible < style foo = \""bar\"" >  not <  / style >  again visible"" ""gain"" )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\utility\TextUtilitiesTests.java,test html snippet,"public void   (  )  {  assert equals ( """"  text utilities . make snippet from html text ( null )  )  ;  assert equals ( """"  text utilities . make snippet from html text ( """" )  )  ;  assert equals ( """"  text utilities . make snippet from html text ( "" \n\r\t\r\t\n"" )  )  ;  char c =  text utilities . non   breaking   space   character ;  assert equals ( ""foo""  text utilities . make snippet from html text ( c  +  ""\r\n\tfoo \n\t\r""  +  c )  )  ;  assert equals ( ""foo bar""  text utilities . make snippet from html text ( c  +  ""\r\n\tfoo \r\n bar\n\t\r""  +  c )  )  ;  assert equals ( "" foo -  bar =  bletch""  text utilities . make snippet from plain text ( "" foo -  -  -  -  -  bar =  =  =  =  =  =  =  bletch"" )  )  ;  assert equals ( "" > ""  text utilities . make snippet from html text ( ""&nbsp ; &gt ; "" )  )  ;  assert equals ( ""& <  >  \""""  text utilities . make snippet from html text ( ""&amp ; &lt ; &gt ; &nbsp ; &quot ; "" )  )  ;  assert equals ( ""abc""  text utilities . make snippet from html text ( ""&#65 ; &#66 ; &#67 ; "" )  )  ;  assert equals ( ""abc""  text utilities . make snippet from html text ( ""&#x41 ; &#x42 ; &#x43 ; "" )  )  ;  assert equals ( "" hi there""  text utilities . make snippet from html text ( "" < html >  hi there <  / html > "" )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\utility\TextUtilitiesTests.java,test plain snippet,"public void   (  )  {  assert equals ( """"  text utilities . make snippet from plain text ( null )  )  ;  assert equals ( """"  text utilities . make snippet from plain text ( """" )  )  ;  assert equals ( """"  text utilities . make snippet from plain text ( "" \n\r\t\r\t\n"" )  )  ;  char c =  text utilities . non   breaking   space   character ;  assert equals ( ""foo""  text utilities . make snippet from plain text ( c  +  ""\r\n\tfoo \n\t\r""  +  c )  )  ;  assert equals ( ""foo bar""  text utilities . make snippet from plain text ( c  +  ""\r\n\tfoo \r\n bar\n\t\r""  +  c )  )  ;  assert equals ( "" foo -  bar =  bletch""  text utilities . make snippet from plain text ( "" foo -  -  -  -  -  bar =  =  =  =  =  =  =  bletch"" )  )  ;  assert equals ( ""&nbsp ; &gt ; ""  text utilities . make snippet from plain text ( ""&nbsp ; &gt ; "" )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\utility\TextUtilitiesTests.java,test strip content,"public void   (  )  {  assert equals ( "" visible""  text utilities . make snippet from html text ( "" < html >  < style foo = \""bar\"" >  not <  / style >  visible <  / html > "" )  )  ;  assert equals ( "" visible""  text utilities . make snippet from html text ( "" < html >  < style foo = \""bar\"" >  not <  / style >  visible <  / html > "" )  )  ;  assert equals ( "" is visible""  text utilities . make snippet from html text ( "" < html >  < nostrip foo = \""bar\"" >  is <  / nostrip >  visible <  / html > "" )  )  ;  assert equals ( "" visible""  text utilities . make snippet from html text ( "" < html >  visible < style foo = \""bar\"" >  not"" )  )  ;  assert equals ( "" visible again visible""  text utilities . make snippet from html text ( "" < html >  visible < style foo = \""bar\"" >  not <  / style >  again visible"" )  )  ;  assert equals ( "" visible again visible""  text utilities . make snippet from html text ( "" < html >  visible < style foo = \""bar\"" /  >  again visible"" )  )  ;  assert equals ( "" visible again visible""  text utilities . make snippet from html text ( "" < html >  visible < style foo = \""bar\"" /  >  < head >  <  /  / blah < style >  not <  / head >  again visible"" )  )  ;   }  "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\utility\TextUtilitiesTests.java,test strip html entity edge cases,"public void   (  )  {  int[] skip count = new int[1] ;  char c =  text utilities . strip html entity ( ""&"" 0 skip count )  ;  assert equals ( c '&' )  ;  assert equals ( 0 skip count[0] )  ;  c =  text utilities . strip html entity ( ""& ; "" 0 skip count )  ;  assert equals ( c '&' )  ;  assert equals ( 0 skip count[0] )  ;  c =  text utilities . strip html entity ( ""&nosuch ; "" 0 skip count )  ;  assert equals ( c '&' )  ;  assert equals ( 0 skip count[0] )  ;  c =  text utilities . strip html entity ( ""&nbspandmore ; "" 0 skip count )  ;  assert equals ( c '&' )  ;  assert equals ( 0 skip count[0] )  ;  c =  text utilities . strip html entity ( ""&#abc"" 0 skip count )  ;  assert equals ( c '&' )  ;  assert equals ( 0 skip count[0] )  ;  c =  text utilities . strip html entity ( ""&#12b"" 0 skip count )  ;  assert equals ( c '&' )  ;  assert equals ( 0 skip count[0] )  ;  c =  text utilities . strip html entity ( ""&#xabc"" 0 skip count )  ;  assert equals ( c '&' )  ;  assert equals ( 0 skip count[0] )  ;  c =  text utilities . strip html entity ( ""&#x19g"" 0 skip count )  ;  assert equals ( c '&' )  ;  assert equals ( 0 skip count[0] )  ;   }  "
