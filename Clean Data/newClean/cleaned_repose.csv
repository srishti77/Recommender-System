ProjectName,methodName,methodBody
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\artifacts\cli-utils\src\main\java\org\openrepose\cli\command\AbstractCommand.java,available commands,@ override public  command[]   (  )  {  return empty   command   array ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\artifacts\cli-utils\src\main\java\org\openrepose\cli\command\AbstractCommandList.java,perform,"@ override public  command result   (  string[] arguments )  {  final  string builder message = new  string builder ( "" available commands: \r\n"" )  ;  for  (   command available command : available commands (  )  )   {  message . append ( available comma"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\artifacts\cli-utils\src\main\java\org\openrepose\cli\command\datastore\distributed\CacheKeyEncoder.java,get command description,"@ override public  string   (  )  {  return "" encodes a cache key into a representation that the distributed datastore can address . "" ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\artifacts\cli-utils\src\main\java\org\openrepose\cli\command\datastore\distributed\CacheKeyEncoder.java,get command token,"@ override public  string   (  )  {  return ""encode - key"" ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\artifacts\cli-utils\src\main\java\org\openrepose\cli\command\datastore\distributed\CacheKeyEncoder.java,perform,"@ override public  command result   (  string[] arguments )  {  if  ( arguments . length  !  =  1 )   {  return new  invalid arguments ( "" the cache key encoder expects one  string argument . "" )  ;   }  try  {  final byte[] hash bytes = md5 message diges"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\artifacts\cli-utils\src\main\java\org\openrepose\cli\command\datastore\local\AuthGroupsRemover.java,get command description,"@ override public  string   (  )  {  return "" removes a user's auth groups from the local datastore . "" ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\artifacts\cli-utils\src\main\java\org\openrepose\cli\command\datastore\local\AuthGroupsRemover.java,get command token,"@ override public  string   (  )  {  return ""remove - groups"" ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\artifacts\cli-utils\src\main\java\org\openrepose\cli\command\datastore\local\AuthGroupsRemover.java,perform,"@ override public  command result   (  string[] arguments )  {  if  ( arguments . length  !  =  arg   size )   {  return new  invalid arguments ( "" the groups remover expects three string arguments . "" )  ;   }   command result result ;  try  {  final  re"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\artifacts\cli-utils\src\main\java\org\openrepose\cli\command\datastore\distributed\DistributedDatastoreCommandList.java,available commands,@ override public  command[]   (  )  {  return new  command[] { new  cache key encoder (  )  }  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\artifacts\cli-utils\src\main\java\org\openrepose\cli\command\datastore\distributed\DistributedDatastoreCommandList.java,get command description,"@ override public  string   (  )  {  return "" commands related to managing the distributed datastore component"" ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\artifacts\cli-utils\src\main\java\org\openrepose\cli\command\datastore\distributed\DistributedDatastoreCommandList.java,get command token,"@ override public  string   (  )  {  return ""dist - datastore"" ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\artifacts\cli-utils\src\main\java\org\openrepose\cli\command\datastore\local\LocalDatastoreCommandList.java,available commands,@ override public  command[]   (  )  {  return new  command[] { new  auth token and roles remover (  )  new  auth groups remover (  )  new  rate limits remover (  )  }  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\artifacts\cli-utils\src\main\java\org\openrepose\cli\command\datastore\local\LocalDatastoreCommandList.java,get command description,"@ override public  string   (  )  {  return "" commands related to managing the local datastore"" ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\artifacts\cli-utils\src\main\java\org\openrepose\cli\command\datastore\local\LocalDatastoreCommandList.java,get command token,"@ override public  string   (  )  {  return ""local - datastore"" ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\artifacts\cli-utils\src\main\java\org\openrepose\cli\command\datastore\local\AuthTokenAndRolesRemover.java,get command description,"@ override public  string   (  )  {  return "" removes a user's auth token and roles from the local datastore . "" ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\artifacts\cli-utils\src\main\java\org\openrepose\cli\command\datastore\local\AuthTokenAndRolesRemover.java,get command token,"@ override public  string   (  )  {  return ""remove - token"" ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\artifacts\cli-utils\src\main\java\org\openrepose\cli\command\datastore\local\AuthTokenAndRolesRemover.java,perform,"@ override public  command result   (  string[] arguments )  {  if  ( arguments . length  !  =  arguments   length )   {  return new  invalid arguments ( "" the token remover expects three string arguments . "" )  ;   }   command result result ;  try  {  fi"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\artifacts\cli-utils\src\main\java\org\openrepose\cli\command\datastore\local\RateLimitsRemover.java,get command description,"@ override public  string   (  )  {  return "" removes a user's rate limits from the local datastore . "" ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\artifacts\cli-utils\src\main\java\org\openrepose\cli\command\datastore\local\RateLimitsRemover.java,get command token,"@ override public  string   (  )  {  return ""remove - limits"" ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\artifacts\cli-utils\src\main\java\org\openrepose\cli\command\datastore\local\RateLimitsRemover.java,perform,"@ override public  command result   (  string[] arguments )  {  if  ( arguments . length  !  =  2 )   {  return new  invalid arguments ( "" the limits remover expects two string arguments . "" )  ;   }   command result result ;  try  {  final  repose local "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\artifacts\cli-utils\src\main\java\org\openrepose\cli\command\datastore\local\ReposeJMXClient.java, reposejmx client,"public   (  string port )  throws io exception   malformed object name exception  {  final  string jmx rmi url = ""service:jmx:rmi: /  /  / jndi / rmi: /  / :""  +  port  +  "" / jmxrmi"" ;  final jmx serviceurl url = new jmx serviceurl ( jmx rmi url )  ;  final jmx connector jmxc = jmx connector factory . connect ( url null )  ;  final m bean server connection repose connection = jmxc . getm bean server connection (  )  ;  repose local cachem bean proxy = jmx . newm bean proxy ( repose connection new  object name ( repose   local   cache   object   name )   repose local cachem bean . class true )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\artifacts\cli-utils\src\main\java\org\openrepose\cli\command\datastore\local\ReposeJMXClient.java,remove all cache data,@ override public void   (  )  {  repose local cachem bean proxy . remove all cache data (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\artifacts\cli-utils\src\main\java\org\openrepose\cli\command\datastore\local\ReposeJMXClient.java,remove groups,@ override public boolean   (  string tenant id  string token )  {  return repose local cachem bean proxy . remove groups ( tenant id token )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\artifacts\cli-utils\src\main\java\org\openrepose\cli\command\datastore\local\ReposeJMXClient.java,remove limits,@ override public boolean   (  string encoded user id )  {  return repose local cachem bean proxy . remove limits ( encoded user id )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\artifacts\cli-utils\src\main\java\org\openrepose\cli\command\datastore\local\ReposeJMXClient.java,remove token and roles,@ override public boolean   (  string tenant id  string token )  {  return repose local cachem bean proxy . remove token and roles ( tenant id token )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\artifacts\cli-utils\src\main\java\org\openrepose\cli\command\results\InvalidArguments.java, invalid arguments,public   (  string message )  {  super ( message )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\artifacts\cli-utils\src\main\java\org\openrepose\cli\command\results\InvalidArguments.java,get status code,@ override public int   (  )  {  return  status codes . invalid   arguments ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\artifacts\cli-utils\src\main\java\org\openrepose\cli\command\results\CommandFailure.java, command failure,public   ( int status code  string message )  {  this . status code = status code ;  this . message = message ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\artifacts\cli-utils\src\main\java\org\openrepose\cli\command\results\CommandFailure.java,get status code,@ override public int   (  )  {  return status code ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\artifacts\cli-utils\src\main\java\org\openrepose\cli\command\results\CommandFailure.java,get string result,@ override public  string   (  )  {  return message ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\artifacts\cli-utils\src\main\java\org\openrepose\cli\CommandDriver.java, command driver,public   (  command command  string[] args )  {  this . my command = command ;  this . args =  arrays . copy of ( args args . length )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\artifacts\cli-utils\src\main\java\org\openrepose\cli\CommandDriver.java,go,public  command result   (  )  {  return args . length  >  0  ?  next command ( args[0] )  : my command . perform ( args )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\artifacts\cli-utils\src\main\java\org\openrepose\cli\CommandDriver.java,main,"@ suppress warnings (  { ""squid:s106"" ""pmd .  system println"" ""squid:s1147"" }  )  public static void   (  string[] args )  {  final  command result result = new  command driver ( new  root command line (  )  args )  . go (  )  ;  if  (  string utils . is "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\artifacts\cli-utils\src\main\java\org\openrepose\cli\CommandDriver.java,next command,public  command result   (  string next argument )  {  if  (  string utils . is blank ( next argument )  )   {  throw new  illegal argument exception (  )  ;   }  for  (   command available command : my command . available commands (  )  )   {  if  ( available command . get command token (  )  . equals ignore case ( next argument )  )   {  return new  command driver ( available command  arrays . copy of range ( args 1 args . length )  )  . go (  )  ;   }   }  return my command . perform ( args )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\artifacts\cli-utils\src\main\java\org\openrepose\cli\command\results\MessageResult.java, message result,public   (  string message )  {  this . message = message ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\artifacts\cli-utils\src\main\java\org\openrepose\cli\command\results\MessageResult.java,get status code,@ override public int   (  )  {  return  status codes . ok ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\artifacts\cli-utils\src\main\java\org\openrepose\cli\command\results\MessageResult.java,get string result,@ override public  string   (  )  {  return message ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\artifacts\cli-utils\src\main\java\org\openrepose\cli\RootCommandLine.java,available commands,@ override public  command[]   (  )  {  return new  command[] { new  distributed datastore command list (  )  new  local datastore command list (  )  }  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\artifacts\cli-utils\src\main\java\org\openrepose\cli\RootCommandLine.java,get command description,"@ override public  string   (  )  {  throw new  unsupported operation exception ( "" root command has no description . "" )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\artifacts\cli-utils\src\main\java\org\openrepose\cli\RootCommandLine.java,get command token,"@ override public  string   (  )  {  throw new  unsupported operation exception ( "" root command has no token . "" )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\artifacts\cli-utils\src\test\java\org\openrepose\cli\RootCommandLineTest.java,should return command array,@ test public void   (  )  {  assert not null ( commands )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\artifacts\cli-utils\src\test\java\org\openrepose\cli\RootCommandLineTest.java,should throw exception when getting command description,@ test ( expected =  unsupported operation exception . class )  public void   (  )  {  root command line . get command description (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\artifacts\cli-utils\src\test\java\org\openrepose\cli\RootCommandLineTest.java,should throw exception when getting command token,@ test ( expected =  unsupported operation exception . class )  public void   (  )  {  root command line . get command token (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\artifacts\cli-utils\src\test\java\org\openrepose\cli\command\results\CommandFailureTest.java,test message,"@ test public void   (  )  {   command failure test failure = new  command failure ( 0 ""test message"" )  ;  assert that ( test failure . get string result (  )  equal to ( ""test message"" )  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\artifacts\cli-utils\src\test\java\org\openrepose\cli\command\results\CommandFailureTest.java,test status,"@ test public void   (  )  {   command failure test failure = new  command failure ( 0 ""test message"" )  ;  assert that ( test failure . get status code (  )  equal to ( 0 )  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\main\java\org\openrepose\commons\config\ConfigurationResourceException.java, configuration resource exception,public   (  string string  throwable thrwbl )  {  super ( string thrwbl )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\main\java\org\openrepose\commons\config\manager\LockedConfigurationUpdater.java, locked configuration updater,public   (  keyed stack lock update lock  object update key )  {  this . update lock = update lock ;  this . update key = update key ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\main\java\org\openrepose\commons\config\manager\LockedConfigurationUpdater.java,configuration updated,@ override public final void   ( t configuration object )  {  update lock . lock ( update key )  ;  try  {  on configuration updated ( configuration object )  ;   }  finally  {  update lock . unlock ( update key )  ;   }  is initialized = true ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\main\java\org\openrepose\commons\config\manager\LockedConfigurationUpdater.java,is initialized,@ override public boolean   (  )  {  return is initialized ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\artifacts\web-application\src\main\java\org\openrepose\core\ReposeInitializer.java,on startup,@ override public void   (  servlet context servlet context )  throws  servlet exception  {   annotation config web application context root context = new  annotation config web application context (  )  ;   string config root =  system . get property ( c
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\main\java\org\openrepose\commons\config\parser\generic\GenericResourceConfigurationParser.java, generic resource configuration parser,public   (  )  {  super (  configuration resource . class )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\main\java\org\openrepose\commons\config\parser\generic\GenericResourceConfigurationParser.java,read,@ override public  configuration resource   (  configuration resource cr )  {  return cr ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\main\java\org\openrepose\commons\config\parser\common\AbstractConfigurationObjectParser.java, abstract configuration object parser,public   (  class < t >  configuration class )  {  this . configuration class = configuration class ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\main\java\org\openrepose\commons\config\parser\common\AbstractConfigurationObjectParser.java,configuration class,@ override public final  class < t >    (  )  {  return configuration class ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\main\java\org\openrepose\commons\config\parser\inputstream\InputStreamConfigurationParser.java, input stream configuration parser,public   (  )  {  super (  input stream . class )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\main\java\org\openrepose\commons\config\parser\inputstream\InputStreamConfigurationParser.java,read,"@ override public  input stream   (  configuration resource cr )  {  try  {  return cr . new input stream (  )  ;   }  catch  (  io exception ex )   {  throw new  resource resolution exception ( "" unable to read configuration file: ""  +  cr . name (  )  e"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\main\java\org\openrepose\commons\config\parser\jaxb\UnmarshallerResourceContext.java, unmarshaller resource context,public   (  configuration resource cfg resource )  {  this . cfg resource = cfg resource ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\main\java\org\openrepose\commons\config\parser\jaxb\UnmarshallerResourceContext.java,perform,"@ suppress warnings ( ""pmd .  preserve stack trace"" )  @ override public  object   (  unmarshaller validator resource )  {  try  {  return resource . validate unmarshal ( cfg resource . new input stream (  )  )  ;   }  catch  (  jaxb exception jaxbe )   {"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\main\java\org\openrepose\commons\config\parser\jaxb\UnmarshallerPoolableObjectFactory.java, unmarshaller poolable object factory,public   ( jaxb context context url xsd stream source )  {  this . context = context ;  this . xsd stream source = xsd stream source ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\main\java\org\openrepose\commons\config\parser\jaxb\UnmarshallerPoolableObjectFactory.java,make object,"@ override public  unmarshaller validator   (  )  {  try  {   unmarshaller validator uv = new  unmarshaller validator ( context )  ;  if  ( xsd stream source  !  =  null )   {   schema factory factory =  schema factory . new instance ( ""http: /  / www . w"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\main\java\org\openrepose\commons\config\parser\jaxb\TemplatingJaxbConfigurationParser.java, templating jaxb configuration parser,public   (  class < t >  configuration class url xsd stream source  class loader loader )  throws jaxb exception  {  super ( configuration class xsd stream source loader )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\main\java\org\openrepose\commons\config\parser\jaxb\TemplatingJaxbConfigurationParser.java,exists,@ override public boolean   (  )  throws io exception  {  return cr . exists (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\main\java\org\openrepose\commons\config\parser\jaxb\TemplatingJaxbConfigurationParser.java,name,@ override public  string   (  )  {  return cr . name (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\main\java\org\openrepose\commons\config\parser\jaxb\TemplatingJaxbConfigurationParser.java,new input stream,@ override public  input stream   (  )  throws io exception  {  return reify conf ( cr . new input stream (  )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\main\java\org\openrepose\commons\config\parser\jaxb\TemplatingJaxbConfigurationParser.java,read,@ override public t   (  configuration resource cr )  {  return super . read ( new  configuration resource (  )  {  @ override public boolean updated (  )  throws io exception  {  return cr . updated (  )  ;   }  @ override public boolean exists (  )  thr
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\main\java\org\openrepose\commons\config\parser\jaxb\TemplatingJaxbConfigurationParser.java,reify conf,private  input stream   (  input stream raw conf )  throws io exception  {   jtwig model model =  jtwig model . new model (  collections . unmodifiable map (  system . getenv (  )  )  )  ;   string template = io utils . to string ( raw conf  standard charsets . utf   8 )  ;   string result =  jtwig template . inline template ( template env   conf )  . render ( model )  ;  return new  byte array input stream ( result . get bytes (  standard charsets . utf   8 )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\main\java\org\openrepose\commons\config\parser\jaxb\TemplatingJaxbConfigurationParser.java,updated,@ override public boolean   (  )  throws io exception  {  return cr . updated (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\main\java\org\openrepose\commons\config\parser\jaxb\JaxbConfigurationParser.java, jaxb configuration parser,public   (  class < t >  configuration class url xsd stream source  class loader loader )  throws jaxb exception  {  this ( configuration class jaxb context . new instance ( configuration class . get package (  )  . get name (  )  loader )  xsd stream source )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\main\java\org\openrepose\commons\config\parser\jaxb\JaxbConfigurationParser.java,read,@ override public t   (  configuration resource cr )  {   object rtn = null ;   unmarshaller validator pooled object ;  try  {  pooled object = object pool . borrow object (  )  ;  try  {  final  object unmarshalled object = pooled object . validate unmar
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\main\java\org\openrepose\commons\config\parser\properties\PropertiesFileConfigurationParser.java, properties file configuration parser,public   (  )  {  super (  properties . class )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\main\java\org\openrepose\commons\config\parser\properties\PropertiesFileConfigurationParser.java,read,@ override public  properties   (  configuration resource cr )  {   properties properties = new  properties (  )  ;  try  {  properties . load ( cr . new input stream (  )  )  ;   }  catch  (  io exception ex )   {  throw new  resource resolution exceptio
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\main\java\org\openrepose\commons\config\resource\impl\ByteArrayConfigurationResource.java, byte array configuration resource,public   (  string name byte[] source array )  {  this . source array =  array utilities . null safe copy ( source array )  ;  this . name = name ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\main\java\org\openrepose\commons\config\resource\impl\ByteArrayConfigurationResource.java,exists,@ override public boolean   (  )  throws io exception  {  return true ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\main\java\org\openrepose\commons\config\resource\impl\ByteArrayConfigurationResource.java,name,@ override public  string   (  )  {  return name ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\main\java\org\openrepose\commons\config\resource\impl\ByteArrayConfigurationResource.java,new input stream,@ override public  input stream   (  )  throws io exception  {  return new  byte array input stream ( source array )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\main\java\org\openrepose\commons\config\resource\impl\ByteArrayConfigurationResource.java,updated,@ override public boolean   (  )  throws io exception  {  return false ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\main\java\org\openrepose\commons\config\parser\jaxb\UnmarshallerValidator.java, unmarshaller validator,public   ( jaxb context context )  throws jaxb exception   parser configuration exception  {   document builder factory dbf =  document builder factory . new instance (  )  ;  dbf . set namespace aware ( true )  ;  db = dbf . new document builder (  )  ;  unmarshaller = context . create unmarshaller (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\main\java\org\openrepose\commons\config\parser\jaxb\UnmarshallerValidator.java,set schema,public void   (  schema schema )  {  this . schema = schema ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\main\java\org\openrepose\commons\config\parser\jaxb\UnmarshallerValidator.java,validate,"public dom source   (  document doc )  throws io exception  sax exception  {  if  ( schema  !  =  null )   {  schema . new validator (  )  . validate ( new dom source ( doc )  )  ;   }  else  {  log . debug ( "" validate method called  but not given any schema"" )  ;   }  return new dom source ( doc )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\main\java\org\openrepose\commons\config\parser\jaxb\UnmarshallerValidator.java,validate unmarshal,public  object   (  input stream inputstream )  throws jaxb exception  io exception  sax exception  {   document doc ;  try  {  doc = db . parse ( inputstream )  ;   }  finally  {  db . reset (  )  ;   }  dom source source = validate ( doc )  ;  return unmarshaller . unmarshal ( source )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\main\java\org\openrepose\commons\config\resource\impl\DirectoryResourceResolver.java, directory resource resolver,public   (  string configuration root )  {  this . configuration root = preppend fileuri spec ( configuration root )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\main\java\org\openrepose\commons\config\resource\impl\DirectoryResourceResolver.java,get configuration root,public  string   (  )  {  return configuration root ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\main\java\org\openrepose\commons\config\resource\impl\DirectoryResourceResolver.java,preppend fileuri spec,"final  string   (  string urn )  {  return  ! urn . starts with ( ""file: /  / "" )   ?  ""file: /  / ""  +  urn : urn ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\main\java\org\openrepose\commons\config\resource\impl\DirectoryResourceResolver.java,resolve,"@ override public  configuration resource   (  string resource name )  {  final  string spec = resource name . contains ( "": /  / "" )   ?  resource name :  string utils . join ( configuration root  file . separator resource name )  ;  try  {  return new  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\main\java\org\openrepose\commons\config\resource\impl\FileDirectoryResourceResolver.java, file directory resource resolver,public   (  string config root )  {  this . config root = config root ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\main\java\org\openrepose\commons\config\resource\impl\FileDirectoryResourceResolver.java,get config root,public  string   (  )  {  return this . config root ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\main\java\org\openrepose\commons\config\resource\impl\FileDirectoryResourceResolver.java,is resolvable,"private url   (  string resource name )  {  try  {  return new url ( resource name )  ;   }  catch  (   malformedurl exception murle )   {  log . trace ( "" unable to build url for resource  it is a configuration file"" murle )  ;   }  return null ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\main\java\org\openrepose\commons\config\resource\impl\FileDirectoryResourceResolver.java,resolve,@ override public  configuration resource   (  string resource name )  {   file spec = null ;  url configurl = is resolvable ( resource name )  ;  try  {  if  ( configurl  =  =  null )   {  spec = new  file ( config root resource name )  ;  configurl = sp
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\main\java\org\openrepose\commons\config\resource\impl\BufferedURLConfigurationResource.java, bufferedurl configuration resource,public   ( url resource url )  {  this . resource url = resource url ;  internal byte array = new byte[default   byte   array   size] ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\main\java\org\openrepose\commons\config\resource\impl\BufferedURLConfigurationResource.java,exists,@ override public boolean   (  )  throws io exception  {  return resource url . open connection (  )  . get content length (  )   >  0 ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\main\java\org\openrepose\commons\config\resource\impl\BufferedURLConfigurationResource.java,name,@ override public  string   (  )  {  return resource url . to string (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\main\java\org\openrepose\commons\config\resource\impl\BufferedURLConfigurationResource.java,new digester output stream,"private  message digester output stream   (  string digest spec )  {  try  {  return new  message digester output stream (  message digest . get instance ( digest spec )  )  ;   }  catch  (   no such algorithm exception nsae )   {  throw new  configuration resource exception ( ""unrecognized digest specification"" nsae )  ;   }   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\main\java\org\openrepose\commons\config\resource\impl\BufferedURLConfigurationResource.java,new input stream,"@ override public synchronized  input stream   (  )  throws io exception  {  if  ( byte buffer  =  =  null &&  ! updated (  )  )   {  throw new io exception ( "" failed to perform initial read"" )  ;   }  return new  byte buffer input stream ( byte buffer ."
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\main\java\org\openrepose\commons\config\resource\impl\BufferedURLConfigurationResource.java,read,"private byte[]   (  byte buffer buffer )  throws io exception  {  final  output stream buffer out = new  byte buffer output stream ( buffer )  ;  final  message digester output stream mdos = new digester output stream ( ""md5"" )  ;  final  output stream splitter splitter = new  output stream splitter ( buffer out mdos )  ;   input stream url input = null ;  try  {  url input = resource url . open stream (  )  ;  int read ;  while  (  ( read = url input . read ( internal byte array )  )   >   - 1 )   {  splitter . write ( internal byte array 0 read )  ;   }   }  finally  {  splitter . close (  )  ;  if  ( url input  !  =  null )   {  url input . close (  )  ;   }   }  return mdos . get digest (  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\main\java\org\openrepose\commons\config\resource\impl\BufferedURLConfigurationResource.java,updated,@ override public synchronized boolean   (  )  throws io exception  {  final  byte buffer fresh buffer = new  cyclic byte buffer (  )  ;  final byte[] new digest = read ( fresh buffer )  ;  if  ( digest  =  =  null ||  ! new  byte array comparator ( diges
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\test\java\org\openrepose\commons\config\manager\LockedConfigurationUpdaterTest.java, sample config object,  (  list <  string >  config properties )  {  this . config properties = config properties ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\test\java\org\openrepose\commons\config\manager\LockedConfigurationUpdaterTest.java, test config updater,  (  keyed stack lock update lock  object update key  string property int sleep time  thread next thread boolean join thread )  {  super ( update lock update key )  ;  this . property = property ;  this . sleep time = sleep time ;  this . next thread = next thread ;  this . join thread = join thread ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\test\java\org\openrepose\commons\config\manager\LockedConfigurationUpdaterTest.java,do join thread,"private static void   (  thread t )  {  try  {  t . join (  )  ;   }  catch  (   interrupted exception e )   {   thread . current thread (  )  . interrupt (  )  ;  throw new  runtime exception ( "" ugh  i can't join the thread ! "" e )  ;   }   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\test\java\org\openrepose\commons\config\manager\LockedConfigurationUpdaterTest.java,on configuration updated,@ override protected void   (  sample config object configuration object )  {   optional <  thread >  thread =  optional . of nullable ( next thread )  ;  thread . if present (  thread::start )  ;  try  {   thread . sleep ( sleep time )  ;   }  catch  (  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\test\java\org\openrepose\commons\config\manager\LockedConfigurationUpdaterTest.java,setup,@ before public void   (  )  {  update lock = new  keyed stack lock (  )  ;  update key1 = new  object (  )  ;  update key2 = new  object (  )  ;  config properties = new  array list <  >  (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\test\java\org\openrepose\commons\config\manager\LockedConfigurationUpdaterTest.java,should lock when using unique keys,"@ test public void   (  )  throws  interrupted exception  {  final  sample config object config = new  sample config object ( config properties )  ;  final  test config updater updater2 = new  test config updater ( update lock update key2 ""prop2"" 0 null f"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\test\java\org\openrepose\commons\config\manager\LockedConfigurationUpdaterTest.java,should not lock when using shared keys,"@ test public void   (  )  throws  interrupted exception  {  final  sample config object config = new  sample config object ( config properties )  ;  final  test config updater updater2 = new  test config updater ( update lock update key1 ""prop2"" 0 null t"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\test\java\org\openrepose\commons\config\manager\LockedConfigurationUpdaterTest.java,update,void   (  string property )  {  config properties . add ( property )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\test\java\org\openrepose\commons\config\parser\inputstream\InputStreamConfigurationParserTest.java,set up,@ before public void   (  )  throws io exception  {  instance = new  input stream configuration parser (  )  ;  cr = mock (  configuration resource . class )  ;  stream = mock (  input stream . class )  ;  when ( cr . new input stream (  )  )  . then retu
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\test\java\org\openrepose\commons\config\parser\inputstream\InputStreamConfigurationParserTest.java,should get input stream,"@ test public void   (  )  throws io exception  {   input stream actual = instance . read ( cr )  ;  verify ( cr times ( 1 )  )  . new input stream (  )  ;  assert that ( "" should get input stream"" actual same instance ( stream )  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\test\java\org\openrepose\commons\config\parser\inputstream\InputStreamConfigurationParserTest.java,should throw resource resolution exception,@ test ( expected =  resource resolution exception . class )  public void   (  )  {  instance . read ( bad cr )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\test\java\org\openrepose\commons\config\parser\inputstream\InputStreamConfigurationParserTest.java,test read,@ test public void   (  )  {   input stream result = instance . read ( cr )  ;  assert not null ( result )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\test\java\org\openrepose\commons\config\parser\generic\GenericResourceConfigurationParserTest.java,test read,@ test public void   (  )  {   configuration resource cr = mock (  configuration resource . class )  ;   generic resource configuration parser instance = new  generic resource configuration parser (  )  ;   configuration resource exp result = null ;   con
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\test\java\org\openrepose\commons\config\parser\jaxb\JaxbConfigurationParserTest.java,create config,"private static  string   (  string hello msg )  {  return "" <  ? xml version = \""1 . 0\"" encoding = \""utf - 8\"" ?  > \n""  +  ""\n""  +  "" < element > \n"" +  ""  < hello > ""  +  hello msg  +  "" <  / hello > \n"" +  ""  < goodbye >  see ya .  <  / goodbye > \n"" +  "" <  / element > \n"" ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\test\java\org\openrepose\commons\config\parser\jaxb\JaxbConfigurationParserTest.java,should read configuration resource,@ test public void   (  )  throws jaxb exception  io exception  {  final jaxb context jaxb context = jaxb context . new instance (  element . class )  ;   configuration parser <  element >  parser = new  jaxb configuration parser <  >  (  element . class 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\test\java\org\openrepose\commons\config\parser\jaxb\JaxbConfigurationParserTest.java,test read,@ test ( expected =  class cast exception . class )  public void   (  )  throws jaxb exception  io exception  {  final jaxb context jaxb context = jaxb context . new instance (  element . class )  ;   configuration parser <  string >  parser = new  jaxb c
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\test\java\org\openrepose\commons\config\parser\jaxb\test\ObjectFactory.java,create unmarshaller test,"@ xml element decl ( namespace = ""http: /  / docs . openrepose . org / repose / unmarshaller - test / v0 . 0"" name = ""unmarshaller - test"" )  public jaxb element <  unmarshaller validator test impl >    (  unmarshaller validator test impl value )  {  retu"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\test\java\org\openrepose\commons\config\parser\jaxb\TemplatingJaxbConfigurationParserTest.java,create config,"private static  string   (  string hello msg )  {  return "" <  ? xml version = \""1 . 0\"" encoding = \""utf - 8\"" ?  > \n""  +  ""\n""  +  "" < element > \n"" +  ""  < hello > ""  +  hello msg  +  "" <  / hello > \n"" +  ""  < goodbye >  see ya .  <  / goodbye > \n"" +  "" <  / element > \n"" ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\test\java\org\openrepose\commons\config\parser\jaxb\TemplatingJaxbConfigurationParserTest.java,create hello msg,"private static  string   (  string name )  {  return  string . format ( "" hello %s ! "" name )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\test\java\org\openrepose\commons\config\parser\jaxb\TemplatingJaxbConfigurationParserTest.java,should remove template comment in configuration resource,@ test public void   (  )  throws jaxb exception  io exception  {  final jaxb context jaxb context = jaxb context . new instance (  element . class )  ;   configuration parser <  element >  parser = new  templating jaxb configuration parser <  >  (  eleme
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\test\java\org\openrepose\commons\config\parser\jaxb\TemplatingJaxbConfigurationParserTest.java,should template environment variable in configuration resource,"@ test public void   (  )  throws jaxb exception  io exception  {  assume true ( "" the ""  +  test   user   env   var  +  "" environment variable must be set to"" +  test   user   name +  "" for this test"" test   user   name . equals (  system . getenv ( test"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\test\java\org\openrepose\commons\config\parser\jaxb\TemplatingJaxbConfigurationParserTest.java,should throw exception when missing environment variable,"@ test ( expected =  class cast exception . class )  public void   (  )  throws jaxb exception  io exception  {  assume true ( "" the not   a   var environment variable must not be set for this test""  system . getenv ( ""not   a   var"" )   =  =  null )  ;  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\test\java\org\openrepose\commons\config\parser\jaxb\UnmarshallerResourceContextTest.java,should perform unmarshall,@ test public void   (  )  throws io exception  jaxb exception   parser configuration exception  {   configuration resource cfg resource = mock (  configuration resource . class )  ;   byte array input stream cfg stream = new  byte array input stream ( cf
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\test\java\org\openrepose\commons\config\parser\jaxb\UnmarshallerResourceContextTest.java,test perform,@ test ( expected =  resource context exception . class )  public void   (  )  throws io exception  jaxb exception   no such algorithm exception   parser configuration exception  {   configuration resource cfg resource = mock (  configuration resource . c
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\test\java\org\openrepose\commons\config\resource\impl\BufferedURLConfigurationResourceTest.java,should return name,"@ test public void   (  )  throws  malformedurl exception  {   string url string = ""file: / meta - inf / test / test . properties"" ;  url url = new url ( url string )  ;   configuration resource config resource = new  bufferedurl configuration resource ( "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\test\java\org\openrepose\commons\config\resource\impl\ByteArrayConfigurationResourceTest.java,setup,"@ before public void   (  )  {  byte[] bytes =  { 1 2 3 }  ;   string name = ""my   byte   array"" ;  byte array configuration resource = new  byte array configuration resource ( name bytes )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\test\java\org\openrepose\commons\config\resource\impl\ByteArrayConfigurationResourceTest.java,should return false for updated,@ test public void   (  )  throws io exception  {  assert false ( byte array configuration resource . updated (  )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\test\java\org\openrepose\commons\config\resource\impl\ByteArrayConfigurationResourceTest.java,should return name,"@ test public void   (  )  {   string name = ""my   byte   array"" ;  assert equals ( name byte array configuration resource . name (  )  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\test\java\org\openrepose\commons\config\resource\impl\ByteArrayConfigurationResourceTest.java,should return new input stream,@ test public void   (  )  throws io exception  {   input stream input stream = byte array configuration resource . new input stream (  )  ;  assert not null ( input stream )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\test\java\org\openrepose\commons\config\resource\impl\ByteArrayConfigurationResourceTest.java,should return true for exists,@ test public void   (  )  throws io exception  {  assert true ( byte array configuration resource . exists (  )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\test\java\org\openrepose\commons\config\resource\impl\DirectoryResourceResolverTest.java,should not double prepend file uri spec,"@ test public void   (  )  {  final  directory resource resolver resolver = new  directory resource resolver ( ""file: /  /  / etc / powerapi"" )  ;  assert equals ( "" should append file uri spec to configuration root"" ""file: /  /  / etc / powerapi"" resolve"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\test\java\org\openrepose\commons\config\resource\impl\DirectoryResourceResolverTest.java,should prepend file uri spec to configuration roots,"@ test public void   (  )  {  final  directory resource resolver resolver = new  directory resource resolver ( "" / etc / powerapi"" )  ;  assert equals ( "" should append file uri spec to configuration root"" ""file: /  /  / etc / powerapi"" resolver . get con"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\test\java\org\openrepose\commons\config\resource\impl\DirectoryResourceResolverTest.java,should resolve with any validuri scheme,"@ test public void   (  )  {   configuration resource resolver config resolver = new  directory resource resolver ( "" / whatevah"" )  ;   configuration resource config resource = config resolver . resolve ( ""whatevah"" )  ;  assert not null ( config resourc"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\arrays\ByteArrayComparator.java, byte array comparator,public   ( byte[] first byte[] second )  {  this . first =  array utilities . null safe copy ( first )  ;  this . second =  array utilities . null safe copy ( second )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\arrays\ByteArrayComparator.java,arrays are equal,public boolean   (  )  {  boolean same = first . length  =  =  second . length ;  if  ( same )   {  for  ( int i = 0 ;  i  <  first . length && same ;  i +  +  )   {  same = first[i]  =  =  second[i] ;   }   }  return same ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\collections\EnumerationIterable.java, enumeration iterable,public   (  enumeration < t >  enumeration )  {  this . enumeration iterator = new  enumeration iterator <  >  ( enumeration )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\collections\EnumerationIterable.java,iterator,@ override public  iterator < t >    (  )  {  return enumeration iterator ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\collections\EnumerationIterator.java, enumeration iterator,public   (  enumeration < t >  enumeration )  {  this . enumeration = enumeration ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\collections\EnumerationIterator.java,has next,@ override public boolean   (  )  {  return enumeration . has more elements (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\collections\EnumerationIterator.java,next,@ override public t   (  )  {  if  (  ! enumeration . has more elements (  )  )   {  throw new  no such element exception (  )  ;   }  return enumeration . next element (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\collections\EnumerationIterator.java,remove,"@ override public void   (  )  {  throw new  unsupported operation exception ( "" enumerations do not support element removal . "" )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\ArrayUtilities.java,null safe copy,public static byte[]   ( byte[] array )  {  return array  !  =  null  ?   arrays . copy of ( array array . length )  : null ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\test\java\org\openrepose\commons\config\parser\properties\PropertiesFileConfigurationParserTest.java,set up,"@ before public void   (  )  throws io exception  {   byte array output stream out = new  byte array output stream (  )  ;  instance = new  properties file configuration parser (  )  ;  props = new  properties (  )  ;  props . set property ( ""key"" ""value"""
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\test\java\org\openrepose\commons\config\parser\properties\PropertiesFileConfigurationParserTest.java,should return valid properties file,"@ test public void   (  )  {   properties actual = instance . read ( cr )  ;  assert equals ( "" should get properties file"" props actual )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\test\java\org\openrepose\commons\config\parser\properties\PropertiesFileConfigurationParserTest.java,test read,@ test ( expected =  resource resolution exception . class )  public void   (  )  {  instance . read ( bad cr )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\encoding\UUIDEncodingProvider.java,bytes touuid,public static uuid   ( byte[] uuid bytes )  {  final byte[] buffer = new byte[uuid   buffer   size] ;   system . arraycopy ( uuid bytes 0 buffer 0 byte   bit   length )  ;  final long msb = qword to long ( buffer )  ;   system . arraycopy ( uuid bytes byte   bit   length buffer 0 byte   bit   length )  ;  final long lsb = qword to long ( buffer )  ;  return new uuid ( msb lsb )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\encoding\UUIDEncodingProvider.java,decode,@ override public byte[]   (  string hash )  {  final uuid uuid = uuid . from string ( hash )  ;  final byte[] buffer = new byte[uuid   byte   size] ;   system . arraycopy ( long to qword ( uuid . get most significant bits (  )  )  0 buffer 0 byte   bit  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\encoding\UUIDEncodingProvider.java,encode,@ override public  string   ( byte[] hash )  {  final byte[] buffer = new byte[uuid   buffer   size] ;   system . arraycopy ( hash 0 buffer 0 byte   bit   length )  ;  final long msb = qword to long ( buffer )  ;   system . arraycopy ( hash byte   bit   l
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\encoding\UUIDEncodingProvider.java,get instance,public static  encoding provider   (  )  {  return instance ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\encoding\UUIDEncodingProvider.java,long to qword,private static byte[]   ( long l )  {  final byte[] q word = new byte[qword   byte   length] ;  for  ( int p = 0  shift = 0 ;  p  <  qword   byte   length ;  p +  +   shift +  = byte   bit   length )   {  q word[p] =  ( byte )  (  ( l  >  >  shift )  & mask )  ;   }  return q word ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\encoding\UUIDEncodingProvider.java,qword to long,private static long   ( byte[] q word )  {  long l = 0 ;  for  ( int p = 0  shift = 0 ;  p  <  qword   byte   length ;  p +  +   shift +  = byte   bit   length )   {  l +  =  ( long )  ( q word[p] & mask )   <  <  shift ;   }  return l ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\header\HeaderName.java, header name,private   (  string name )  {  this . name = name ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\header\HeaderName.java,equals,@ override public boolean   (  object o )  {  if  ( this  =  =  o )   {  return true ;   }  if  ( o  =  =  null || get class (  )   !  =  o . get class (  )  )   {  return false ;   }   header name that =  (  header name ) o ;  if  ( name  !  =  null )   
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\header\HeaderName.java,get name,public  string   (  )  {  return name ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\header\HeaderName.java,hash code,@ override public int   (  )  {  return name  !  =  null  ?  name . to lower case (  )  . hash code (  )  : 0 ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\header\HeaderName.java,to string,"@ override public  string   (  )  {  return "" header name { ""  +  ""name = '""  +  name  +  '\'' +  ' } ' ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\header\HeaderName.java,wrap,public static  header name   (  string name )  {  return new  header name ( name )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\header\HeaderValueParser.java, header value parser,public   (  string raw value )  {  this . raw header value = raw value ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\header\HeaderValueParser.java,concat,"private  string   (  string[] values int start  string delimiter )  {   string builder sb = new  string builder ( """" )  ;  int index = start ;  while  ( index  <  values . length )   {  if  ( sb . length (  )   >  0 )   {  sb . append ( delimiter )  ;   }  sb . append ( values[index +  + ] . trim (  )  )  ;   }  return sb . to string (  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\header\HeaderValueParser.java,parse,"@ suppress warnings ( ""squid: redundant throws declaration check"" )  public  header value   (  )  throws  malformed header value exception  {  final  map <  string  string >  parameters = new  hash map <  >  (  )  ;  final  string[] parameter split = raw "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\header\HeaderValueParser.java,parse parameter,"@ suppress warnings ( ""squid: redundant throws declaration check"" )  private void   (  map <  string  string >  parameters  string unparsed parameter )  throws  malformed header value exception  {  final  string[] key value split = unparsed parameter . sp"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\header\HeaderValueImpl.java, header value impl,public   (  string value  map <  string  string >  parameters )  {  this . parsed quality factor = get quality factor ( parameters )  ;  this . parameters = new  hash map ( parameters )  ;  this . value = value ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\header\HeaderValueImpl.java,compare header values,private int   (  string first  string second )  {  int comparasion value =  - 1 ;  if  ( first  !  =  null )   {  if  ( second  =  =  null )   {  comparasion value = 1 ;   }  else  {  comparasion value = first . compare to ( second )  ;   }   }  else if  ( second  =  =  null )   {  comparasion value = 0 ;   }  return comparasion value ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\header\HeaderValueImpl.java,compare to,"@ override @ suppress warnings ( ""squid:s1244"" )  public int   (  header value that )  {  int comparasion value = 1 ;  if  ( that  !  =  null )   {  if  ( this . get quality factor (  )   !  =  that . get quality factor (  )  )   {  comparasion value = th"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\header\HeaderValueImpl.java,equals,@ override public boolean   (  object obj )  {  if  ( obj  =  =  null )   {  return false ;   }  if  ( get class (  )   !  =  obj . get class (  )  )   {  return false ;   }  final  header value impl other =  (  header value impl ) obj ;  return compare t
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\header\HeaderValueImpl.java,equals to,public boolean   (  header value header value )  {   map <  string  string >  compare params = new  hash map ( parameters )  ;  compare params . remove ( quality   factor   param   name )  ;   map <  string  string >  compare params2 = new  hash map ( header value . get parameters (  )  )  ;  compare params2 . remove ( quality   factor   param   name )  ;  if  (  string utils . equals ignore case ( header value . get value (  )  value )  && compare params . equals ( compare params2 )  )   {  return true ;   }  return false ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\header\HeaderValueImpl.java,get parameters,@ override public  map <  string  string >    (  )  {  return  collections . unmodifiable map ( parameters )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\header\HeaderValueImpl.java,get quality factor,@ override public double   (  )  {  return parsed quality factor ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\header\HeaderValueImpl.java,get value,@ override public  string   (  )  {  return value ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\header\HeaderValueImpl.java,has quality factor,public boolean   (  )  {  return parameters . contains key ( quality   factor   param   name )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\header\HeaderValueImpl.java,hash code,@ override public int   (  )  {  int hash = hash   base ;  hash = hash   prime * hash  +   ( this . parameters  !  =  null  ?  this . parameters . hash code (  )  : 0 )  ;  hash = hash   prime * hash  +   ( this . value  !  =  null  ?  this . value . hash
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\header\HeaderValueImpl.java,quality factor to parameter map,"@ suppress warnings ( ""squid:s1244"" )  private static  map <  string  string >    ( double quality factor )  {  final  map <  string  string >  parameters = new  hash map <  >  (  )  ;  if  ( quality factor  !  =  default   quality )   {  parameters . put"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\header\HeaderValueImpl.java,to string,"@ override public  string   (  )  {  if  ( value  =  =  null )   {  return """" ;   }  final  string builder builder = new  string builder ( value )  ;  if  (  ! parameters . is empty (  )  )   {  builder . append ( "" ; "" )  ;  final  iterator <  entry <  s"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\header\MalformedHeaderValueException.java, malformed header value exception,public   (  string string )  {  super ( string )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\HttpDate.java, http date,public   ( final  date utc time )  {  this . utc time =  (  date ) utc time . clone (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\HttpDate.java,torfc,"public  string   (  )  {  final  simple date format formatter = new  simple date format ( ""e  dd mmm yyyy hh:mm:ss z"" )  ;  formatter . set time zone ( gmt   timezone )  ;  return formatter . format ( utc time )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\header\SplittableHeaderUtil.java, splittable header util,public   (  string[] .  .  .  constant )  {  set default splittable (  )  ;  for  (   string[] cts : constant )   {   collections . add all ( splittable headers cts )  ;   }   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\header\SplittableHeaderUtil.java,is splittable,public boolean   (  string st )  {  return splittable headers . contains ( st . to lower case (  )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\header\SplittableHeaderUtil.java,set default splittable,private void   (  )  {  splittable headers = new  tree set <  >  ( case   insensitive   compare )  ;  splittable headers . add all (  arrays . as list ( default   split )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\media\MediaType.java, media type,public   (  string value  mime type media type  map <  string  string >  parameters )  {  super ( value parameters )  ;  this . mime type = media type ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\media\MediaType.java,equals,@ override public boolean   (  object obj )  {  if  ( obj  =  =  null )   {  return false ;   }  if  ( get class (  )   !  =  obj . get class (  )  )   {  return false ;   }  final  media type other =  (  media type ) obj ;  if  ( this . mime type  !  =  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\media\MediaType.java,get mime type,public  mime type   (  )  {  return mime type ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\media\MediaType.java,hash code,@ override public int   (  )  {  int hash = hash   code   num2 * hash   code   num1  +   ( this . mime type  !  =  null  ?  this . mime type . hash code (  )  : 0 )  ;  return hash  +  super . hash code (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\ExtendedHttpHeader.java,values,public static  string[]   (  )  {  return new  string[] { x   ttl }  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\media\MediaRangeProcessor.java, media range processor,public   (  list <  ?  extends  header value >  values )  {  this . values = values ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\media\MediaRangeProcessor.java,process,"public  media type   (  header value header value )  {   string media type with parameters stripped = header value . get value (  )  . split ( "" ; "" ) [0] ;   mime type media type =  mime type . get matching mime type ( media type with parameters stripped )  ;  if  (  mime type . unknown . equals ( media type )  )   {  media type =  mime type . guess media type from string ( media type with parameters stripped )  ;   }  return new  media type ( media type with parameters stripped media type header value . get parameters (  )  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\media\MimeType.java, mime type,"  (  string top level type name  string sub type name )  {  this . top level type name = top level type name ;  this . sub type name = sub type name ;  this . name = top level type name  +  "" / ""  +  sub type name ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\media\MimeType.java,get matching mime type,public static  mime type   (  string mime type )  {  if  (  string utils . is not blank ( mime type )  )   {  for  (   mime type ct : values (  )  )   {  if  ( ct . get name (  )  . equals ignore case ( mime type )  )   {  return ct ;   }   }   }  return unknown ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\media\MimeType.java,get name,public  string   (  )  {  return name ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\media\MimeType.java,get sub type name,public  string   (  )  {  return sub type name ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\media\MimeType.java,get top level type name,public  string   (  )  {  return top level type name ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\media\MimeType.java,guess media type from string,public static  mime type   (  string mime type )  {  if  (  string utils . is not blank ( mime type )  )   {  for  (   mime type ct : values (  )  )   {  if  ( mime type . contains ( ct . get top level type name (  )  )  && mime type . contains ( ct . get sub type name (  )  )  )   {  return ct ;   }   }   }  return unknown ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\media\MimeType.java,to string,@ override public  string   (  )  {  return name ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\OpenStackServiceHeader.java,values,public static  string[]   (  )  {  return new  string[] { extended   authorization identity   status user   name user   id tenant   name tenant   id roles authenticated   by impersonator   id impersonator   name impersonator   roles default   region x   expiration contact   id }  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\normal\QueryParameterCollection.java, query parameter collection,public   (  string query )  {  parameter tracker = new  linked hash map <  >  (  )  ;  if  (  !  string utils . is blank ( query )  )   {  parse query parameters ( query )  ;   }   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\normal\QueryParameterCollection.java,add new parameter,private void   (  string name  string value )  {  final  query parameter uri parameter = new  query parameter ( name )  ;  uri parameter . add value ( value )  ;  parameter tracker . put ( name uri parameter )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\normal\QueryParameterCollection.java,add parameter,private void   (  string name  string value )  {  final  query parameter uri parameter = parameter tracker . get ( name )  ;  if  ( uri parameter  =  =  null )   {  add new parameter ( name value )  ;   }  else  {  uri parameter . add value ( value )  ;   }   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\normal\QueryParameterCollection.java,get parameters,public  list <  query parameter >    (  )  {  return new  array list <  >  ( parameter tracker . values (  )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\normal\QueryParameterCollection.java,parse query parameters,"private void   (  string query )  {  final  string[] query parameters = query   pair   pattern . split ( query )  ;  for  (   string kv pair : query parameters )   {  final  string[] key value pair = query   key   value   pattern . split ( kv pair 2 )  ;  if  ( key value pair . length  =  =  2 )   {  add parameter ( key value pair[0] key value pair[1] )  ;   }  else  {  add parameter ( key value pair[0] """" )  ;   }   }   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\normal\QueryParameterCollection.java,to string,@ override public  string   (  )  {   string builder query params = new  string builder (  )  ;  for  (   query parameter parameter : parameter tracker . values (  )  )   {  for  (   string value : parameter . get values (  )  )   {  if  (  ! query params
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\normal\QueryParameter.java, query parameter,public   (  string name )  {  this . name = name ;  this . values = new  linked list <  >  (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\normal\QueryParameter.java,add value,public void   (  string value )  {  values . add ( value )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\normal\QueryParameter.java,compare to,@ override public int   (  query parameter o )  {  return get name (  )  . compare to ( o . get name (  )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\normal\QueryParameter.java,equals,@ override public boolean   (  object o )  {  if  (  !  ( o instanceof  query parameter )  )   {  return false ;   }  return compare to (  (  query parameter ) o )   =  =  0 ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\normal\QueryParameter.java,get name,public  string   (  )  {  return name ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\normal\QueryParameter.java,get values,public  list <  string >    (  )  {  return values ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\normal\QueryParameter.java,hash code,@ override public int   (  )  {  return hash  +   ( this . name  !  =  null  ?  this . name . hash code (  )  : 0 )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\PowerApiHeader.java,values,public static  string[]   (  )  {  return new  string[] { next   route user groups domain x   catalog }  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\normal\QueryStringNormalizer.java, query string normalizer,public   (  parameter filter factory parameter filter factory boolean alphabetize )  {  this . parameter filter factory = parameter filter factory ;  this . alphabetize = alphabetize ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\normal\QueryStringNormalizer.java,normalize,@ override public  string   (  string source )  {  final  query parameter collection parsed query parameters = new  query parameter collection ( source )  ;  final  list <  query parameter >  query parameters = parsed query parameters . get parameters (  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\normal\QueryStringNormalizer.java,write parameter,"public void   (  string builder query string builder  query parameter query parameter )  {  final  parameter filter parameter filter = parameter filter factory . new instance (  )  ;  for  (  final  string value : query parameter . get values (  )  )   {  if  ( parameter filter . should accept ( query parameter . get name (  )  )  )   {  if  (  ! query string builder . to string (  )  . is empty (  )  &&  ! query string builder . to string (  )  . ends with ( ""&"" )  )   {  query string builder . append (  query parameter collection . query   pair   delimiter )  ;   }  query string builder . append ( query parameter . get name (  )  )  ;  query string builder . append (  query parameter collection . query   key   value   delimiter )  ;  query string builder . append ( value )  ;   }  else  {  break ;   }   }   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\normal\QueryStringNormalizer.java,write parameters,private  string   (  list <  query parameter >  query parameters )  {  final  string builder query string builder = new  string builder (  )  ;  for  (   query parameter next parameter : query parameters )   {  write parameter ( query string builder next parameter )  ;   }  return query string builder . to string (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\InputStreamUtilities.java,stream to string,"public static  string   (  input stream stream )  throws io exception  {   string string value = """" ;  if  ( stream  !  =  null )   {  final  string builder string builder = new  string builder (  )  ;  final  buffered reader in = new  buffered reader ( new  input stream reader ( stream  standard charsets . utf   8 )  )  ;   string next line ;  while  (  ( next line = in . read line (  )  )   !  =  null )   {  string builder . append ( next line )  ;   }  string value = string builder . to string (  )  ;   }  return string value ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\ServiceClientResponse.java, service client response,public   ( int code  header[] headers  input stream data )  {  this . status code = code ;  this . headers = headers ;  this . data = data ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\ServiceClientResponse.java,get data,public  input stream   (  )  {  return data ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\ServiceClientResponse.java,get headers,public  header[]   (  )  {  return headers ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\ServiceClientResponse.java,get status,public int   (  )  {  return status code ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\ServiceClient.java, service client,public   (  string connection pool id  http client service http client service )  {  this . connection pool id = connection pool id ;  this . http client service = http client service ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\ServiceClient.java,execute,"@ suppress warnings ( ""squid:s2093"" )  private  service client response   (  http request base base  string .  .  .  query parameters )  {  try  {   http client client = get client with basic auth (  )  ;  for  ( int index = 0 ;  index  <  query parameter"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\ServiceClient.java,get,"public  service client response   (  string uri  map <  string  string >  headers  string .  .  .  query parameters )  {  uri uri built ;   http get httpget = new  http get ( uri )  ;  if  ( query parameters  !  =  null )   {  if  ( query parameters . length % 2  !  =  0 )   {  throw new  illegal argument exception ( "" query parameters must be in pairs . "" )  ;   }  try  {  uri builder builder = new uri builder ( uri )  ;  for  ( int index = 0 ;  index  <  query parameters . length ;  index = index  +  2 )   {  builder . set parameter ( query parameters[index] query parameters[index  +  1] )  ;   }  uri built = builder . build (  )  ;  httpget = new  http get ( uri built )  ;   }  catch  (  uri syntax exception e )   {  log . error ( "" error building request uri"" e )  ;  return new  service client response (  http servlet response . sc   internal   server   error null )  ;   }   }  set headers ( httpget headers )  ;  return execute ( httpget )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\ServiceClient.java,get client with basic auth,private  http client   (  )  {   http client container client response = null ;  try  {  client response = http client service . get client ( connection pool id )  ;  return client response . get http client (  )  ;   }  finally  {  if  ( client response  !  =  null )   {  http client service . release client ( client response )  ;   }   }   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\ServiceClient.java,post,"public  service client response   (  string uri  map <  string  string >  headers  string body  media type content media type )  {   http post post = new  http post ( uri )  ;   map <  string  string >  request headers = new  hash map <  >  (  )  ;  request headers . put all ( headers )  ;   string local content type = content media type . get type (  )   +  "" / ""  +  content media type . get subtype (  )  ;  request headers . put (  http headers . content   type local content type )  ;  if  (  ! request headers . contains key (  http headers . accept )  )   {  request headers . put (  http headers . accept  media type . application   xml )  ;   }  set headers ( post request headers )  ;  if  ( body  !  =  null &&  ! body . is empty (  )  )   {  post . set entity ( new  input stream entity ( new  byte array input stream ( body . get bytes (  )  )  body . length (  )  )  )  ;   }  return execute ( post )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\ServiceClient.java,set headers,private void   (  http request base base  map <  string  string >  headers )  {  final  set <  map .  entry <  string  string >  >  entries = headers . entry set (  )  ;  for  (   map .  entry <  string  string >  entry : entries )   {  base . add header ( entry . get key (  )  entry . get value (  )  )  ;   }   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\buffer\CyclicByteBuffer.java, cyclic byte buffer,public   (  byte array provider byte array provider  cyclic byte buffer byte buffer )  {  this . byte array provider = byte array provider ;  final int readable length = byte buffer . available (  )  ;  final int allocation size = readable length  >  0 && readable length  >  default   buffer   size  ?  readable length : default   buffer   size ;  initial size = allocation size ;  if  ( byte buffer . buffer  !  =  null )   {  buffer = byte array provider . allocate ( allocation size )  ;  if  ( byte buffer . next readable index  +  readable length  >  byte buffer . buffer . length )   {  final int trimmed length = byte buffer . buffer . length  -  byte buffer . next readable index ;   system . arraycopy ( byte buffer . buffer byte buffer . next readable index buffer 0 trimmed length )  ;   system . arraycopy ( byte buffer . buffer 0 buffer trimmed length readable length  -  trimmed length )  ;   }  else  {   system . arraycopy ( byte buffer . buffer byte buffer . next readable index buffer 0 readable length )  ;   }   }  this . next readable index = 0 ;  this . next writable index =  ( readable length  <  allocation size )   ?  readable length : 0 ;  this . has elements = byte buffer . available (  )   >  0 ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\buffer\CyclicByteBuffer.java,allocate,public void   (  )  {  if  ( buffer  =  =  null )   {  buffer = byte array provider . allocate ( initial size )  ;   }   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\buffer\CyclicByteBuffer.java,available,@ override public int   (  )  {  if  ( buffer  =  =  null )   {  return 0 ;   }  if  ( next writable index  =  =  next readable index && has elements )   {  return buffer . length ;   }  return next writable index  <  next readable index  ?  next writable
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\buffer\CyclicByteBuffer.java,clear,@ override public void   (  )  {  next readable index = 0 ;  next writable index = 0 ;  has elements = false ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\buffer\CyclicByteBuffer.java,copy,@ override public  byte buffer   (  )  {  return new  cyclic byte buffer ( byte array provider this )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\buffer\CyclicByteBuffer.java,get,@ override public int   ( byte[] b )  throws io exception  {  return get ( b 0 b . length )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\buffer\CyclicByteBuffer.java,grow,private void   ( int min length )  {  allocate (  )  ;  final int new size = buffer . length  +  buffer . length *  ( min length  /  buffer . length  +  1 )  ;  final byte[] new buffer = byte array provider . allocate ( new size )  ;  final int read = get ( new buffer 0 new size )  ;  buffer = new buffer ;  next writable index = read ;  next readable index = 0 ;  has elements = true ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\buffer\CyclicByteBuffer.java,put,@ override public int   ( byte[] b )  throws io exception  {  return put ( b 0 b . length )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\buffer\CyclicByteBuffer.java,remaining,@ override public int   (  )  {  if  ( buffer  =  =  null )   {  return initial size ;   }  if  ( next writable index  =  =  next readable index && has elements )   {  return 0 ;   }  return next writable index  <  next readable index  ?  next readable in
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\buffer\CyclicByteBuffer.java,skip,@ override public int   ( int len )  {  allocate (  )  ;  int bytes skipped = len ;  if  ( len  >  available (  )  )   {  bytes skipped = available (  )  ;  next readable index = 0 ;  next writable index = 0 ;   }  else  {  next readable index = next read
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\BufferCapacityException.java, buffer capacity exception,public   (  string string )  {  super ( string )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\buffer\SynchronizedByteBuffer.java, synchronized byte buffer,public   (  byte buffer internal buffer )  {  this . internal buffer = internal buffer ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\buffer\SynchronizedByteBuffer.java,available,@ override public synchronized int   (  )  {  return internal buffer . available (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\buffer\SynchronizedByteBuffer.java,clear,@ override public synchronized void   (  )  {  internal buffer . clear (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\buffer\SynchronizedByteBuffer.java,copy,@ override public synchronized  byte buffer   (  )  {  return internal buffer . copy (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\buffer\SynchronizedByteBuffer.java,get,@ override public synchronized byte   (  )  throws io exception  {  return internal buffer . get (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\buffer\SynchronizedByteBuffer.java,put,@ override public synchronized void   ( byte b )  throws io exception  {  internal buffer . put ( b )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\buffer\SynchronizedByteBuffer.java,remaining,@ override public synchronized int   (  )  {  return internal buffer . remaining (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\buffer\SynchronizedByteBuffer.java,skip,@ override public synchronized int   ( int bytes )  {  return internal buffer . skip ( bytes )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\ByteBufferOutputStream.java, byte buffer output stream,public   (  byte buffer shared buffer )  {  this . shared buffer = shared buffer ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\ByteBufferOutputStream.java,flush stream,@ override public void   (  )  throws io exception  {  shared buffer . skip ( shared buffer . available (  )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\ByteBufferOutputStream.java,write byte,@ override public void   ( int b )  throws io exception  {  shared buffer . put (  ( byte ) b )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\ByteBufferInputStream.java, byte buffer input stream,public   (  byte buffer shared buffer )  {  this . shared buffer = shared buffer ;  closed = false ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\ByteBufferInputStream.java,available,@ override public int   (  )  throws io exception  {  check for closed stream (  )  ;  return shared buffer . available (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\ByteBufferInputStream.java,check for closed stream,"private void   (  )  throws io exception  {  if  ( closed )   {  throw new io exception ( "" input stream has been closed .   futher operations are prohibited"" )  ;   }   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\ByteBufferInputStream.java,close,@ override public void   (  )  throws io exception  {  check for closed stream (  )  ;  closed = true ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\ByteBufferInputStream.java,mark supported,@ override public boolean   (  )  {  return false ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\ByteBufferInputStream.java,normalize buffer read length,private int   ( int read length )  {  return read length  =  =  0  ?   - 1 : read length ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\ByteBufferInputStream.java,read,@ override public int   ( byte[] b int off int len )  throws io exception  {  check for closed stream (  )  ;  return normalize buffer read length ( shared buffer . get ( b off len )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\ByteBufferInputStream.java,skip,@ override public long   ( long n )  throws io exception  {  check for closed stream (  )  ;  long skipped ;  long skipped total = 0 ;  long c = n ;  if  ( c  >  0 )   {  do  {  int to skip = c  >   integer . max   value  ?   integer . max   value :  ( in
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\ByteBufferServletOutputStream.java, byte buffer servlet output stream,public   (  byte buffer shared buffer )  {  this . shared buffer = shared buffer ;  closed = false ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\ByteBufferServletOutputStream.java,close,@ override public void   (  )  throws io exception  {  check for closed stream (  )  ;  closed = true ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\ByteBufferServletOutputStream.java,flush,@ override public void   (  )  throws io exception  {  check for closed stream (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\ByteBufferServletOutputStream.java,is closed,public boolean   (  )  {  return closed ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\ByteBufferServletOutputStream.java,write,@ override public void   ( byte[] b int off int len )  throws io exception  {  check for closed stream (  )  ;  shared buffer . put ( b off len )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\BufferedServletInputStream.java, buffered servlet input stream,public   (  input stream input stream )  {  this . input stream = new  buffered input stream ( input stream )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\BufferedServletInputStream.java,available,@ override public int   (  )  throws io exception  {  return input stream . available (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\BufferedServletInputStream.java,close,@ override public void   (  )  throws io exception  {  input stream . close (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\BufferedServletInputStream.java,mark,@ override public void   ( int readlimit )  {  input stream . mark ( readlimit )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\BufferedServletInputStream.java,mark supported,@ override public boolean   (  )  {  return input stream . mark supported (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\BufferedServletInputStream.java,read,@ override public int   (  )  throws io exception  {  return input stream . read (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\BufferedServletInputStream.java,reset,@ override public void   (  )  throws io exception  {  input stream . reset (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\InputStreamMerger.java, input stream merger,private   (  input stream .  .  .  streams )  {  this . streams = streams ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\InputStreamMerger.java,available,@ override public int   (  )  throws io exception  {  if  ( have current stream (  )  )   {  return get current stream (  )  . available (  )  ;   }  return 0 ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\InputStreamMerger.java,close,@ override public void   (  )  throws io exception  {  for  (   input stream stream : streams )   {  if  ( stream  !  =  null )   {  stream . close (  )  ;   }   }   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\InputStreamMerger.java,get current stream,private  input stream   (  )  {  return streams[index] ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\InputStreamMerger.java,have current stream,private boolean   (  )  {  while  ( index  <  streams . length && streams[index]  =  =  null )   {  index +  +  ;   }  return index  <  streams . length ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\InputStreamMerger.java,mark supported,@ override public boolean   (  )  {  return false ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\InputStreamMerger.java,merge,public static  input stream   (  input stream .  .  .  streams )  {  return new  input stream merger ( streams )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\InputStreamMerger.java,read,@ override public int   ( byte[] b int off int len )  throws io exception  {  int total read = 0 ;  int remaining = len ;  while  ( remaining  >  0 && have current stream (  )  )   {  int result = get current stream (  )  . read ( b total read  +  off rem
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\InputStreamMerger.java,reset,"@ override public void   (  )  throws io exception  {  throw new io exception ( "" reset not supported"" )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\InputStreamMerger.java,skip,@ override public long   ( long count )  throws io exception  {  long skipped ;  long total skipped = 0 ;  long remaining = count ;  while  ( have current stream (  )  && remaining  >  0 )   {  skipped = get current stream (  )  . skip ( remaining )  ;  r
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\InputStreamMerger.java,wrap,public static  input stream   (  string string )  {  return new  byte array input stream ( string . get bytes (  standard charsets . utf   8 )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\ClassLoaderAwareObjectInputStream.java, class loader aware object input stream,public   (  input stream in  class loader class loader )  throws io exception  {  super ( in )  ;  this . class loader = class loader ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\ClassLoaderAwareObjectInputStream.java,resolve class,@ override protected  class <  ?  >    (  object stream class desc )  throws io exception   class not found exception  {  try  {  return class loader . load class ( desc . get name (  )  )  ;   }  catch  (   class not found exception ignored )   {  log . 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\ObjectSerializer.java, object serializer,public   (  class loader class loader )  {  this . class loader = class loader ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\ObjectSerializer.java,read object,public  serializable   (  input stream is )  throws io exception   class not found exception  {  final  object input stream ois = new  class loader aware object input stream ( is class loader )  ;  final  serializable read object =  (  serializable ) ois . read object (  )  ;  ois . close (  )  ;  return read object ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\ObjectSerializer.java,write object,public byte[]   (  serializable o )  throws io exception  {  final  byte array output stream baos = new  byte array output stream (  )  ;  final  object output stream oos = new  object output stream ( baos )  ;  oos . write object ( o )  ;  return baos . to byte array (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\OneTimeUseOutputStream.java,check for closed stream,"private void   (  )  throws io exception  {  if  ( closed )   {  throw new io exception ( "" input stream has been closed .   further operations are prohibited"" )  ;   }   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\OneTimeUseOutputStream.java,close,@ override public final void   (  )  throws io exception  {  check for closed stream (  )  ;  close stream (  )  ;  closed = true ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\MessageDigesterOutputStream.java, message digester output stream,public   (  message digest digest )  {  this . digest = digest ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\MessageDigesterOutputStream.java,close stream,@ override public void   (  )  throws io exception  {  digest bytes = digest . digest (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\MessageDigesterOutputStream.java,flush stream,@ override public void   (  )  throws io exception  {  digest . reset (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\MessageDigesterOutputStream.java,get digest,public byte[]   (  )  {  return digest bytes . clone (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\MessageDigesterOutputStream.java,write byte,@ override public void   ( int b )  throws io exception  {  digest . update (  ( byte ) b )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\OutputStreamSplitter.java, output stream splitter,public   (  output stream .  .  .  jis )  {  streams to split to =  arrays . as list ( jis )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\OutputStreamSplitter.java,close,@ override public void   (  )  throws io exception  {  for  (   output stream os : streams to split to )   {  os . close (  )  ;   }   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\OutputStreamSplitter.java,flush,@ override public void   (  )  throws io exception  {  for  (   output stream os : streams to split to )   {  os . flush (  )  ;   }   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\OutputStreamSplitter.java,write,@ override public void   ( byte[] bytes int i int i1 )  throws io exception  {  for  (   output stream os : streams to split to )   {  os . write ( bytes i i1 )  ;   }   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\RawInputStreamReader.java,copy to,public long   (  input stream is  output stream os int buffer size )  throws io exception  {  final byte[] internal buffer = new byte[buffer size] ;  long total = 0 ;  int read ;  while  (  ( read = is . read ( internal buffer )  )   !  =   - 1 )   {  os . write ( internal buffer 0 read )  ;  total +  = read ;   }  return total ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\RawInputStreamReader.java,instance,public static  raw input stream reader   (  )  {  return instance ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\RawInputStreamReader.java,read fully,"public byte[]   (  input stream is long byte limit )  throws io exception  {  final  byte array output stream baos = new  byte array output stream (  )  ;  final byte[] internal buffer = new byte[default   internal   buffer   size] ;  int read ;  long limit = byte limit ;  while  (  ( read = is . read ( internal buffer )  )   !  =   - 1 )   {  limit -  = read ;  if  ( limit  <  0 )   {  throw new  buffer capacity exception ( "" read limit reached .   max buffer size: ""  +  limit  +  "" bytes"" )  ;   }  baos . write ( internal buffer 0 read )  ;   }  return baos . to byte array (  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\stream\LimitedReadInputStream.java, limited read input stream,public   ( long read limit  input stream delegate stream )  {  this . delegate stream = delegate stream ;  this . read limit = read limit ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\stream\LimitedReadInputStream.java,mark,@ override public void   ( int readlimit )  {  delegate stream . mark ( readlimit )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\stream\LimitedReadInputStream.java,mark supported,@ override public boolean   (  )  {  return delegate stream . mark supported (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\stream\LimitedReadInputStream.java,read,"@ override public int   (  )  throws io exception  {  if  (  +  + bytes read  >  read limit )   {  throw new  read limit reached exception ( "" read limit of ""  +  read limit  +  "" for input stream has been reached"" )  ;   }  return delegate stream . read "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\stream\LimitedReadInputStream.java,reset,@ override public void   (  )  throws io exception  {  delegate stream . reset (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\buffer\HeapspaceByteArrayProvider.java,allocate,"@ override public byte[]   ( int capacity )  {  if  ( capacity  <  =  0 )   {  throw new  illegal argument exception ( "" byte array capacity must be greater than zero  -  got ""  +  capacity )  ;   }  return new byte[capacity] ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\buffer\HeapspaceByteArrayProvider.java,get instance,public static  byte array provider   (  )  {  return instance ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\format\converters\DateConversionFormat.java,get pattern,public static  string   (  string name )  {  if  ( iso   8601 . equals ignore case ( name )  )   {  return iso   8601   pattern ;   }  return rfc   1123   pattern ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\constraint\StatusCodeConstraint.java, status code constraint,"public   (  string codes )  {  this . is inclusive pass =  ! codes . starts with ( "" ! "" )  ;  status codes = new  hash set <  >  (  )  ;  for  (   string st : status   code   rx . split ( remove negation ( codes )  )  )   {  status codes . add (  integer . parse int ( st )  )  ;   }   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\constraint\StatusCodeConstraint.java,add status code,public void   (  integer status code )  {  status codes . add ( status code )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\constraint\StatusCodeConstraint.java,pass,private boolean   ( boolean passed by default int response status code )  {  boolean passed =  ! passed by default ;  for  (  int target status code : status codes )   {  if  ( response status code  =  =  target status code )   {  passed =  ! passed ;  break ;   }   }  return passed ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\constraint\StatusCodeConstraint.java,remove negation,"private  string   (  string codes )  {  return codes . starts with ( "" ! "" )   ?  codes . substring ( 1 )  : codes ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\format\converters\DateTimeFormatConverter.java,convert,@ override public  string   (  string value  string input format  string output format )  {  if  (  !  string utils . is blank ( value )  &&  !  string utils . is blank ( output format )  )   {  try  {   string input pattern =  date conversion format . ge
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\stream\ServletInputStreamWrapper.java, servlet input stream wrapper,public   (  input stream is )  {  this . is = is ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\stream\ServletInputStreamWrapper.java,available,@ override public int   (  )  throws io exception  {  return is . available (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\stream\ServletInputStreamWrapper.java,close,@ override public void   (  )  throws io exception  {  is . close (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\stream\ServletInputStreamWrapper.java,mark,@ override public void   ( int readlimit )  {  is . mark ( readlimit )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\stream\ServletInputStreamWrapper.java,mark supported,@ override public boolean   (  )  {  return is . mark supported (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\stream\ServletInputStreamWrapper.java,read,@ override public int   ( byte[] b int off int len )  throws io exception  {  return is . read ( b off len )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\stream\ServletInputStreamWrapper.java,reset,@ override public void   (  )  throws io exception  {  is . reset (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\stream\ServletInputStreamWrapper.java,skip,@ override public long   ( long n )  throws io exception  {  return is . skip ( n )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\format\converters\TypeConversionFormatFactory.java, type conversion format factory,"  (  class <  ?  extends  format converter >  converter )  {  try  {   converter map . add converter ( name (  )  converter . new instance (  )  )  ;   }  catch  (   instantiation exception| illegal access exception ex )   {   logger factory . get logger (  type conversion format factory . class )  . error ( "" unable to instantiate converter: ""  +  converter . get name (  )  ex )  ;   }   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\format\converters\TypeConversionFormatFactory.java,add converter,public static void   (  string name  format converter converter )  {  conversion   map . put ( name converter )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\format\converters\TypeConversionFormatFactory.java,get converter,public static  format converter   (  string name )  {  if  (  string utils . is blank ( name )  )   {  return null ;   }  return conversion   map . get ( name )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\format\stock\HeaderHandler.java, header handler,public   (  string header name  list <  string >  arguments )  {  this . header name = header name ;  this . arguments = arguments ;  check arguments (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\format\stock\HeaderHandler.java,check arguments,private void   (  )  {  if  (  ! arguments . is empty (  )  )   {  this . converter =  type conversion format factory . get converter ( arguments . get ( 0 )  )  ;   }  if  ( arguments . size (  )   >  1 )   {  this . output format = arguments . get ( 1 )  ;   }  if  ( arguments . size (  )   >  2 )   {  this . input format = arguments . get ( 2 )  ;   }   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\format\stock\HeaderHandler.java,convert,protected  string   (  string value )  {  if  ( converter  !  =  null )   {  return converter . convert ( value input format output format )  ;   }  return value ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\format\stock\HeaderHandler.java,get arguments,public  list <  string >    (  )  {  return arguments ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\format\stock\HeaderHandler.java,get header name,public  string   (  )  {  return header name ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\format\stock\HeaderHandler.java,get values,protected  string   (  collection <  string >  values )  {  return get values (  collections . enumeration ( values )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\format\LogArgumentFormatter.java,format,@ override public  string   (  http servlet request request  http servlet response response )  {  boolean pass = true ;  if  ( status code constraint  !  =  null )   {  pass = status code constraint . pass ( response )  ;   }  return pass && get logic (  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\format\LogArgumentFormatter.java,get logic,public  formatter logic   (  )  {  return logic ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\format\LogArgumentFormatter.java,set logic,public void   (  formatter logic logic )  {  this . logic = logic ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\format\LogArgumentFormatter.java,set status code constraint,public void   (  status code constraint status code constraint )  {  this . status code constraint = status code constraint ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\format\stock\LocalAddressHandler.java,handle,@ override public  string   (  http servlet request request  http servlet response response )  {  return request . get local addr (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\format\stock\CanonicalPortHandler.java,handle,@ override public  string   (  http servlet request request  http servlet response response )  {  return  string . value of ( request . get local port (  )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\stream\ReadLimitReachedException.java, read limit reached exception,public   (  string string )  {  super ( string )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\format\stock\RemoteHostHandler.java,handle,@ override public  string   (  http servlet request request  http servlet response response )  {  return request . get remote host (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\format\stock\QueryStringHandler.java,handle,"@ override public  string   (  http servlet request request  http servlet response response )  {  return request . get query string (  )   =  =  null  ?  """" : request . get query string (  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\format\stock\RemoteUserHandler.java,handle,@ override public  string   (  http servlet request request  http servlet response response )  {  return request . get header (  power api header . user )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\format\stock\RemoteAddressHandler.java,handle,@ override public  string   (  http servlet request request  http servlet response response )  {  return request . get remote addr (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\format\stock\RequestHeaderHandler.java, request header handler,public   (  string header name  list <  string >  arguments )  {  super ( header name arguments )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\format\stock\RequestHeaderHandler.java,handle,@ override public  string   (  http servlet request request  http servlet response response )  {  return get values ( request . get headers ( get header name (  )  )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\format\stock\RequestLineHandler.java,handle,@ override public  string   (  http servlet request request  http servlet response response )  {  return new  string builder ( request . get method (  )  )  . append ( space )  . append ( request . get requesturi (  )  )  . append ( space )  . append ( re
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\format\stock\RequestMethodHandler.java,handle,@ override public  string   (  http servlet request request  http servlet response response )  {  return request . get method (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\format\stock\RequestProtocolHandler.java,handle,@ override public  string   (  http servlet request request  http servlet response response )  {  return request . get protocol (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\format\stock\ResponseHeaderHandler.java, response header handler,public   (  string header name  list <  string >  arguments )  {  super ( header name arguments )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\format\stock\ResponseHeaderHandler.java,handle,@ override public  string   (  http servlet request request  http servlet response response )  {  return get values ( response . get headers ( get header name (  )  )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\format\stock\ResponseTimeHandler.java, response time handler,public   ( double multiplier )  {  this . multiplier = multiplier ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\format\stock\ResponseTimeHandler.java,handle,"@ override public  string   (  http servlet request request  http servlet response response )  {   object start time = request . get attribute ( start   time   attribute )  ;   string response time = """" ;  if  ( start time  !  =  null )   {  response time"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\format\stock\ResponseBytesHandler.java,handle,"@ override public  string   (  http servlet request request  http servlet response response )  {   string content length = "" - 1"" ;   string content length header = response . get header (  http headers . content   length )  ;  if  (  string utils . is no"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\format\stock\ResponseMessageHandler.java, response message handler,public   (  http log formatter state state )  {  this . state = state ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\format\stock\ResponseMessageHandler.java,handle,@ override public  string   (  http servlet request request  http servlet response response )  {   string message = null ;  if  ( response instanceof  http servlet response wrapper )   {  message =  (  (  http servlet response wrapper ) response )  . get 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\format\stock\StatusCodeHandler.java,handle,@ override public  string   (  http servlet request request  http servlet response response )  {  return  string . value of ( response . get status (  )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\format\stock\StringHandler.java, string handler,public   (  string static string content )  {  this . static string content = static string content ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\format\stock\StringHandler.java,handle,@ override public  string   (  http servlet request request  http servlet response response )  {  return static string content ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\format\stock\TraceGuidHandler.java, trace guid handler,public   (  )  {  super (  common http header . trace   guid  collections .  <  string > empty list (  )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\format\stock\TraceGuidHandler.java,handle,@ override public  string   (  http servlet request request  http servlet response response )  {  return  tracing header helper . get trace guid ( get values ( request . get headers ( get header name (  )  )  )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\format\stock\TimeReceivedHandler.java, time received handler,"@ suppress warnings ( ""squid:s1848"" )  public   ( final  string date format )  {  this . date format =  string utils . is empty ( date format )   ?  default   date   format : date format ;  new  simple date format ( date format )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\format\stock\TimeReceivedHandler.java,handle,@ override public  string   (  http servlet request request  http servlet response response )  {  return new  simple date format ( date format )  . format (  calendar . get instance (  )  . get time (  )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\format\stock\UrlRequestedHandler.java,handle,@ override public  string   (  http servlet request request  http servlet response response )  {  return request . get requesturl (  )  . to string (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\HttpLogFormatter.java, http log formatter,public   (  string format template  http log formatter state http log formatter state )  {  this . format template = handle tabs and newlines ( format template )  ;  this . http log formatter state = http log formatter state ;  handler list = new  linked list <  >  (  )  ;  build (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\HttpLogFormatter.java,build,private void   (  )  {  final  matcher m =  log constants . pattern . matcher ( format template )  ;  int previous token end = 0 ;  while  ( m . find (  )  )   {  handle string content ( previous token end m . start (  )  handler list )  ;  handler list . add ( handle argument ( new  log argument group extractor ( m )  )  )  ;  previous token end = m . end (  )  ;   }  handle string content ( previous token end format template . length (  )  handler list )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\HttpLogFormatter.java,format,public  string   (  string message  http servlet request request  http servlet response response )  {  final  string builder builder = new  string builder ( message )  ;  for  (   format argument handler formatter : handler list )   {  builder . append ( formatter . format ( request response )  )  ;   }  return builder . to string (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\HttpLogFormatter.java,get handler list, list <  format argument handler >    (  )  {  return new  linked list <  >  ( handler list )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\HttpLogFormatter.java,handle argument,private  log argument formatter   (  log argument group extractor extractor )  {  final  log argument formatter arg formatter = new  log argument formatter (  )  ;  if  (  ! is blank ( extractor . get status codes (  )  )  )   {  arg formatter . set status code constraint ( new  status code constraint ( extractor . get status codes (  )  )  )  ;   }  set logic ( extractor arg formatter )  ;  return arg formatter ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\HttpLogFormatter.java,handle string content,private void   ( int previous token end int current token start  list <  format argument handler >  arg handler list )  {  final  string between elements = format template . substring ( previous token end current token start )  ;  if  (  ! is empty ( between elements )  )   {  arg handler list . add ( handle argument (  log argument group extractor . string entity ( between elements )  )  )  ;   }   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\HttpLogFormatter.java,handle tabs and newlines,"private  string   (  string format template )  {   matcher tabs matcher = tabs . matcher ( format template )  ;   matcher newlines matcher = newlines . matcher ( tabs matcher . replace all ( ""\t"" )  )  ;  return newlines matcher . replace all ( ""\n"" )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\HttpLogFormatter.java,set logic,"@ suppress warnings ( ""pmd .  ncss method count"" )  public void   ( final  log argument group extractor extractor final  log argument formatter formatter )  {  final  string extractor entity = extractor . get entity (  )  ;  if  ( extractor entity  =  =  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\format\stock\ResponseBytesClfHandler.java,handle,"@ override public  string   (  http servlet request request  http servlet response response )  {   string content length = "" - 1"" ;   string content length header = response . get header (  http headers . content   length )  ;  if  (  string utils . is no"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\LogArgumentGroupExtractor.java, log argument group extractor,public   (  matcher m )  {  life cycle modifier = get group value ( m lifecycle   group   index )  ;  status codes = get group value ( m status   code   index )  ;  variable = get group value ( m variable   index )  ;  variable argument separator = get group value ( m var   arg   separator   index )  ;  arguments = parse arguments ( get group value ( m arguments   index )  )  ;  entity = get group value ( m entity   index )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\LogArgumentGroupExtractor.java,equals,"@ suppress warnings ( ""squid:s1067"" )  @ override public boolean   (  object o )  {  boolean result = false ;  if  ( o instanceof  log argument group extractor )   {   log argument group extractor other =  (  log argument group extractor ) o ;  result =  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\LogArgumentGroupExtractor.java,get arguments,public  list <  string >    (  )  {  return arguments ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\LogArgumentGroupExtractor.java,get entity,public  string   (  )  {  return entity ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\LogArgumentGroupExtractor.java,get format,"public  string   (  )  {  return variable  +  variable argument separator  +   string utils . join ( arguments "" "" )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\LogArgumentGroupExtractor.java,get group value,"private  string   (  matcher m int index )  {   string value = m . group ( index )  ;  return value  !  =  null  ?  value : """" ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\LogArgumentGroupExtractor.java,get life cycle modifier,public  string   (  )  {  return life cycle modifier ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\LogArgumentGroupExtractor.java,get status codes,public  string   (  )  {  return status codes ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\LogArgumentGroupExtractor.java,get variable,public  string   (  )  {  return variable ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\LogArgumentGroupExtractor.java,hash code,"@ override public int   (  )  {  int hash = hash   base ;  hash = hash   prime * hash  +   string utils . default if empty ( life cycle modifier """" )  . hash code (  )  ;  hash = hash   prime * hash  +   string utils . default if empty ( status codes """" )"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\LogArgumentGroupExtractor.java,instance,"public static  log argument group extractor   (  string life cycle modifier  string status codes  string variable  string arguments  string entity )  {  return new  log argument group extractor ( life cycle modifier status codes variable """" arguments entity )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\LogArgumentGroupExtractor.java,parse arguments,"private  list <  string >    (  string arguments )  {   list <  string >  result = new  array list <  >  (  )  ;  if  ( arguments  !  =  null )   {   collections . add all ( result arguments . split ( ""[  ]"" )  )  ;   }  return result ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\LogArgumentGroupExtractor.java,string entity,"public static  log argument group extractor   (  string variable )  {  return new  log argument group extractor ( """" """" variable """" """"  log format argument . string )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\ExceptionLogger.java, exception logger,public   (  logger logger ref )  {  this . logger ref = logger ref ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\ExceptionLogger.java,new exception,public  < t extends  exception > t   (  string message  throwable cause  class < t >  exception class )  {   throwable new exception instance ;  if  ( cause  =  =  null )   {  new exception instance =  reflection tools . construct ( exception class message )  ;   }  else  {  new exception instance =  reflection tools . construct ( exception class message cause )  ;   }  logger ref . error ( message cause )  ;  return  ( t ) new exception instance ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\net\NetUtilities.java, net utilities exception,public   (  string message  throwable cause )  {  super ( message cause )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\net\NetUtilities.java,best guess hostname,"public static  string   (  )  {   string result ;  if  (  system . get property ( ""os . name"" )  . starts with ( "" windows"" )  )   {  log . debug ( "" looking up a windows computername environment var for the jmx name"" )  ;  result =  system . getenv ( ""computername"" )  ;   }  else  {  log . debug ( "" looking up a linux hostname environment var for the jmx name"" )  ;   string env hostname =  system . getenv ( ""hostname"" )  ;  if  ( env hostname  !  =  null )   {  result = env hostname ;   }  else  {  log . debug ( "" unable to find a  linux hostname environment var  trying another tool"" )  ;  try  {  result =  inet address . get local host (  )  . get host name (  )  ;   }  catch  (   unknown host exception e )   {  log . warn ( "" unable to resolve local hostname for jmx"" e )  ;  result = default   domain   prefix ;   }   }   }  return result ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\net\NetUtilities.java,get local address,"public static  string   (  )  {  try  {  final  inet address addr =  inet address . get local host (  )  ;  return addr . get host address (  )  ;   }  catch  (   unknown host exception e )   {  throw new  net utilities exception ( "" failed to get container address"" e )  ;   }   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\net\NetUtilities.java,get local host name,"public static  string   (  )  {  try  {  final  inet address addr =  inet address . get local host (  )  ;  return addr . get host name (  )  ;   }  catch  (   unknown host exception e )   {  throw new  net utilities exception ( "" failed to get hostname .   something weird is going on . "" e )  ;   }   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\net\NetUtilities.java,is local host,"public static boolean   (  string hostname )  {  boolean result = false ;  try  {  final  inet address host address = network   name   resolver . lookup name ( hostname )  ;  result = network   interface   provider . has interface for ( host address )  ;   }  catch  (   unknown host exception uhe )   {  log . error ( "" unable to look up network host name .   reason: ""  +  uhe . get message (  )  uhe )  ;   }  catch  (   socket exception socket exception )   {  log . error ( socket exception . get message (  )  socket exception )  ;   }  return result ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\net\IpAddressRange.java, ip address range,public   (  string network int mask )  throws  unknown host exception  {  this . network =  inet address . get by name ( network )  . get address (  )  ;  this . mask = mask ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\net\IpAddressRange.java,address in range,public boolean   ( byte[] address )  throws  unknown host exception  {  return match ( get ip (  )  address get mask (  )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\net\IpAddressRange.java,get ip,public byte[]   (  )  {  return  ( byte[] ) network . clone (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\net\IpAddressRange.java,get mask,public int   (  )  {  return mask ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\net\IpAddressRange.java,match,private boolean   ( byte byte1 byte byte2 int bits )  {  int shift = byte   size  -  bits ;  int first =  ( byte1  >  >  shift )   <  <  shift ;  int second =  ( byte2  >  >  shift )   <  <  shift ;  return  ( first ^ second )   =  =  0 ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\net\StaticNetworkInterfaceProvider.java,get instance,public static  network interface provider   (  )  {  return instance ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\net\StaticNetworkInterfaceProvider.java,get interface for,@ override public  network interface   (  inet address address )  throws  socket exception  {  for  (   network interface iface : get network interfaces (  )  )   {  for  (   inet address iface address : new  enumeration iterable <  >  ( iface . get inet 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\net\StaticNetworkInterfaceProvider.java,get network interfaces,@ override public  iterable <  network interface >    (  )  throws  socket exception  {  return new  enumeration iterable <  >  (  network interface . get network interfaces (  )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\net\StaticNetworkInterfaceProvider.java,has interface for,@ override public boolean   (  inet address address )  throws  socket exception  {  return get interface for ( address )   !  =  null ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\net\StaticNetworkNameResolver.java,get instance,public static  static network name resolver   (  )  {  return instance ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\net\StaticNetworkNameResolver.java,lookup name,@ override public  inet address   (  string host )  throws  unknown host exception  {  return  inet address . get by name ( host )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\pooling\ResourceAccessException.java, resource access exception,public   (  string message  throwable cause )  {  super ( message cause )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\pooling\GenericBlockingResourcePool.java, generic blocking resource pool,public   (  construction strategy < r >  constructor int min pool size int max pool size )  {  this . constructor = constructor ;  checkout counter = 0 ;  pool = new  linked list <  >  (  )  ;  pool lock = new  reentrant lock ( true )  ;  pool has resources = pool lock . new condition (  )  ;  resize minimum ( min pool size )  ;  resize maximum ( max pool size )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\pooling\GenericBlockingResourcePool.java,checkin,private void   ( r resource )  {  try  {  pool lock . lock (  )  ;  if  ( pool . size (  )   +  checkout counter  <  max pool size )   {  pool . add ( resource )  ;  pool has resources . signal (  )  ;   }  checkout counter -  -  ;   }  finally  {  pool lock . unlock (  )  ;   }   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\pooling\GenericBlockingResourcePool.java,checkout,"@ suppress warnings ( ""squid:s2142"" )  private r   (  )  {  try  {  pool lock . lock (  )  ;  r resource ;  if  ( pool . is empty (  )  && checkout counter  !  =  max pool size )   {  resource = constructor . construct (  )  ;   }  else  {  while  ( pool "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\pooling\GenericBlockingResourcePool.java,resize maximum,private void   ( int new size )  {  try  {  pool lock . lock (  )  ;  max pool size = new size ;  while  ( pool . size (  )   +  checkout counter  >  max pool size &&  ! pool . is empty (  )  )   {  pool . poll (  )  ;   }   }  finally  {  pool lock . unlock (  )  ;   }   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\pooling\GenericBlockingResourcePool.java,resize minimum,private void   ( final int new min pool size )  {  try  {  pool lock . lock (  )  ;  while  ( checkout counter  +  pool . size (  )   <  new min pool size )   {  pool . add ( constructor . construct (  )  )  ;   }   }  finally  {  pool lock . unlock (  )  ;   }   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\pooling\GenericBlockingResourcePool.java,set maximum pool size,@ override public void   ( int new size )  {  resize maximum ( new size )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\pooling\GenericBlockingResourcePool.java,set minimum pool size,@ override public void   ( int new size )  {  resize minimum ( new size )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\pooling\GenericBlockingResourcePool.java,size,@ override public int   (  )  {  try  {  pool lock . lock (  )  ;  return checkout counter  +  pool . size (  )  ;   }  finally  {  pool lock . unlock (  )  ;   }   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\pooling\GenericBlockingResourcePool.java,use,@ override public void   (  simple resource context < r >  new context )  {  final r resource = checkout (  )  ;  try  {  new context . perform ( resource )  ;   }  finally  {  checkin ( resource )  ;   }   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\pooling\ResourceConstructionException.java, resource construction exception,public   (  string message  throwable cause )  {  super ( message cause )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\pooling\ResourceContextException.java, resource context exception,public   (  string message  throwable cause )  {  super ( message cause )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\proxy\ProxyRequestException.java, proxy request exception,public   (  string message  throwable cause )  {  super ( message cause )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\proxy\TargetHostInfo.java, target host info,"public   (  string target host )  {  uri target uri = null ;  try  {  target uri = new uri ( target host )  ;   }  catch  (  uri syntax exception e )   {  log . error ( "" invalid target host url: ""  +  target host e )  ;   }  proxied host uri = target uri ;  proxied host url = as uri ( proxied host uri )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\proxy\TargetHostInfo.java,as uri,"private url   ( uri host )  {  if  ( host  =  =  null || host . get scheme (  )   =  =  null || host . get host (  )   =  =  null )   {  return null ;   }  try  {  return new url ( host . get scheme (  )  host . get host (  )  host . get port (  )  """" )  ;   }  catch  (   malformedurl exception ex )   {  log . error ( "" invalid host url: ""  +  host ex )  ;   }  return null ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\proxy\TargetHostInfo.java,get proxied host uri,public uri   (  )  {  return proxied host uri ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\proxy\TargetHostInfo.java,get proxied host url,public url   (  )  {  return proxied host url ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\regex\ExtractorResult.java, extractor result,public   (  string result k key )  {  this . result = result ;  this . key = key ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\regex\ExtractorResult.java,get key,public k   (  )  {  return key ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\regex\ExtractorResult.java,get result,public  string   (  )  {  return result ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\regex\ExtractorResult.java,has key,public boolean   (  )  {  return key  !  =  null ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\regex\ExtractorResult.java,has result,public boolean   (  )  {  return result  !  =  null ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\reflection\ReflectionTools.java,construct,"public static  < t > t   (  class < t >  clazz  object .  .  .  parameters )  {  try  {  return get constructor ( clazz to class array ( parameters )  )  . new instance ( parameters )  ;   }  catch  (   exception instanciation exception )   {  throw new  reflection exception ( "" failed to create new instance of class: ""  +  clazz . get canonical name (  )   +  "" .   pump cause for more details . "" instanciation exception )  ;   }   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\reflection\ReflectionTools.java,get constructor,"@ suppress warnings ( ""squid:s2095"" )  public static  < t >  constructor < t >    (  class < t >  clazz  class <  ?  > [] parameters )  throws  no such method exception  {  return  arrays . stream (  (  constructor < t > [] ) clazz . get constructors (  )"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\reflection\ReflectionTools.java,parameters match,private static boolean   (  class <  ?  > [] some params  class <  ?  > [] other params )  {  if  ( other params . length  !  =  some params . length )   {  return false ;   }  for  ( int i = 0 ;  i  <  some params . length ;  i +  +  )   {   class <  ?  >  some class = some params[i] ;   class <  ?  >  other class = other params[i] ;  if  ( other class  !  =  null &&  ! some class . is assignable from ( other class )  )   {  return false ;   }   }  return true ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\reflection\ReflectionTools.java,to class array,public static  class <  ?  > []   (  object .  .  .  objects )  {  final  class <  ?  > [] class array = new  class <  ?  > [objects . length] ;  for  ( int i = 0 ;  i  <  objects . length ;  i +  +  )   {  class array[i] = objects[i]  !  =  null  ?  objects[i] . get class (  )  : null ;   }  return class array ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\reflection\ReflectionException.java, reflection exception,public   (  string message  throwable cause )  {  super ( message cause )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\regex\RegexSelector.java, regex selector,public   (  )  {  compiled patterns = new  linked list <  >  (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\regex\RegexSelector.java,add pattern,public void   (  string pattern k key )  {  compiled patterns . add ( new  selector pattern <  >  (  pattern . compile ( pattern )  key )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\regex\RegexSelector.java,clear,public void   (  )  {  compiled patterns . clear (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\regex\RegexSelector.java,get last match,public  pattern   (  )  {  return last match ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\regex\RegexSelector.java,select,public  selector result < k >    (  string select on )  {  for  (   selector pattern < k >  selector : compiled patterns )   {  if  ( selector . matcher ( select on )  . matches (  )  )   {  last match = selector . get pattern (  )  ;  return new  selector result <  >  ( selector . get key (  )  )  ;   }   }  return  selector result . empty result (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\regex\SelectorPattern.java, selector pattern,public   (  pattern pattern k key )  {  this . pattern = pattern ;  this . key = key ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\regex\SelectorPattern.java,get key,public k   (  )  {  return key ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\regex\SelectorPattern.java,get pattern,public  pattern   (  )  {  return pattern ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\regex\SelectorPattern.java,matcher,public  matcher   (  string target )  {  return pattern . matcher ( target )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\regex\SelectorResult.java, selector result,public   ( k key )  {  this . key = key ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\regex\SelectorResult.java,empty result,public static  selector result   (  )  {  return empty   instance ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\regex\SelectorResult.java,get key,public k   (  )  {  return key ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\regex\SelectorResult.java,has key,public boolean   (  )  {  return key  !  =  null ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\RegexList.java, regex list,public   (  )  {  this . regex matchers = new  linked list <  >  (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\RegexList.java,add,public void   (  string new regex target )  {  regex matchers . add (  pattern . compile ( new regex target )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\RegexList.java,find,public  matcher   (  string target )  {  for  (   pattern target pattern : regex matchers )   {  final  matcher matcher ref = target pattern . matcher ( target )  ;  if  ( matcher ref . find (  )  )   {  return matcher ref ;   }   }  return null ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\RegexList.java,matches,public  matcher   (  string target )  {  for  (   pattern target pattern : regex matchers )   {  final  matcher matcher ref = target pattern . matcher ( target )  ;  if  ( matcher ref . matches (  )  )   {  return matcher ref ;   }   }  return null ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\servlet\context\exceptions\ContextAdapterResolutionException.java, context adapter resolution exception,public   (  string message )  {  super ( message )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\servlet\http\QualityFormatException.java, quality format exception,public   (  string message  throwable cause )  {  super ( message cause )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\servlet\http\HttpServletRequestUtil.java,get protocol version,"public static  string   ( final  http servlet request request )  {   string rtn = """" ;  final  string request protocol = request . get protocol (  )  ;  if  (  string utils . is not blank ( request protocol )  )   {  rtn = request protocol . contains ( ""1 . 0"" )   ?  ""1 . 0"" : ""1 . 1"" ;   }  return rtn ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\servlet\http\RequestHeaderContainer.java, request header container,public   (  http servlet request request )  {  this . request = request ;  this . header names = extract header names (  )  ;  this . header values = extract header values (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\servlet\http\RequestHeaderContainer.java,contains header,@ override public boolean   (  string name )  {   list <  header value >  values = get header values ( name )  ;  return values  !  =  null &&  ! values . is empty (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\servlet\http\RequestHeaderContainer.java,extract header names,private  list <  header name >    (  )  {   list <  header name >  result = new  linked list <  >  (  )  ;  if  ( request  !  =  null )   {   enumeration <  string >  names = request . get header names (  )  ;  if  ( names  !  =  null )   {  while  ( names . has more elements (  )  )   {  result . add (  header name . wrap ( names . next element (  )  )  )  ;   }   }   }  return result ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\servlet\http\RequestHeaderContainer.java,extract header values,private  map <  header name  list <  header value >  >    (  )  {   map <  header name  list <  header value >  >  value map = new  hash map <  >  (  )  ;  if  ( request  !  =  null )   {  for  (   header name wrapped name : get header names (  )  )   {  value map . put ( wrapped name extract values ( wrapped name )  )  ;   }   }  return value map ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\servlet\http\RequestHeaderContainer.java,extract values,private  list <  header value >    (  header name name )  {   list <  header value >  values = new  array list <  >  (  )  ;   enumeration <  string >  vals = request . get headers ( name . get name (  )  )  ;  while  ( vals . has more elements (  )  )   {  values . add ( new  header value impl ( vals . next element (  )  )  )  ;   }  return values ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\servlet\http\RequestHeaderContainer.java,get container type,@ override public  header container type   (  )  {  return  header container type . request ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\servlet\http\RequestHeaderContainer.java,get header names,"@ suppress warnings ( ""pmd .  constructor calls overridable method"" )  @ override public  list <  header name >    (  )  {  return header names ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\servlet\http\RequestHeaderContainer.java,get header values,@ override public  list <  header value >    (  string name )  {  return header values . get (  header name . wrap ( name )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\regex\KeyedRegexExtractor.java, keyed regex extractor,public   (  )  {  compiled patterns = new  linked list <  >  (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\regex\KeyedRegexExtractor.java,add pattern,public void   (  string regex string k key )  {  compiled patterns . add ( new  selector pattern <  >  (  pattern . compile ( regex string )  key )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\regex\KeyedRegexExtractor.java,clear,public void   (  )  {  compiled patterns . clear (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\regex\KeyedRegexExtractor.java,extract,public  extractor result < k >    (  string target )  {  for  (   selector pattern < k >  selector : compiled patterns )   {  final  matcher matcher = selector . matcher ( target )  ;  if  ( matcher . find (  )  && matcher . group count (  )   >  0 )   {  return new  extractor result <  >  ( matcher . group ( 1 )  selector . get key (  )  )  ;   }   }  return null ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\servlet\http\ResponseHeaderContainer.java, response header container,public   (  http servlet response response )  {  this . response = response ;  this . header names = extract header names (  )  ;  this . header values = extract header values (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\servlet\http\ResponseHeaderContainer.java,contains header,@ override public boolean   (  string name )  {   list <  header value >  values = get header values ( name )  ;  return values  !  =  null &&  ! values . is empty (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\servlet\http\ResponseHeaderContainer.java,extract header names,private  list <  header name >    (  )  {   list <  header name >  result = new  linked list <  >  (  )  ;  if  ( response  !  =  null )   {   collection <  string >  names = response . get header names (  )  ;  for  (   string name : names )   {  result . add (  header name . wrap ( name )  )  ;   }   }  return result ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\servlet\http\ResponseHeaderContainer.java,extract header values,private  map <  header name  list <  header value >  >    (  )  {   map <  header name  list <  header value >  >  value map = new  hash map <  >  (  )  ;  if  ( response  !  =  null )   {  for  (   header name header name key : header names )   {   string name = header name key . get name (  )  ;   list <  header value >  values = new  array list <  >  (  )  ;  values . add ( new  header value impl ( response . get header ( name )  )  )  ;  value map . put ( header name key values )  ;   }   }  return value map ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\servlet\http\ResponseHeaderContainer.java,get container type,@ override public  header container type   (  )  {  return  header container type . response ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\servlet\http\ResponseHeaderContainer.java,get header names,"@ suppress warnings ( ""pmd .  constructor calls overridable method"" )  @ override public  list <  header name >    (  )  {  return header names ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\servlet\http\ResponseHeaderContainer.java,get header values,@ override public  list <  header value >    (  string name )  {  return header values . get (  header name . wrap ( name )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\SetUtilities.java,null safe equals,public static  < t > boolean   (  set < t >  one  set < t >  two )  {  return one  =  =  null  ?  two  =  =  null :  ( two  !  =  null && one . equals ( two )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\servlet\http\RouteDestination.java, route destination,"public   (  string destination id  string uri double quality )  {  if  ( destination id  =  =  null )   {  throw new  illegal argument exception ( ""destination id cannot be null"" )  ;   }  this . destination id = destination id ;  this . uri = uri  !  =  null  ?  uri : """" ;  this . quality = quality ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\servlet\http\RouteDestination.java,compare to,"@ override public int   (  object o )  {  if  (  !  ( o instanceof  route destination )  )   {  throw new  illegal argument exception ( "" cannot compare to non  route destination instance"" )  ;   }   route destination r =  (  route destination ) o ;  int "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\servlet\http\RouteDestination.java,equals,@ override public boolean   (  object o )  {  if  (  !  ( o instanceof  route destination )  )   {  return false ;   }  return compare to ( o )   =  =  0 ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\servlet\http\RouteDestination.java,get context removed,public  string   (  )  {  return context removed ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\servlet\http\RouteDestination.java,get destination id,public  string   (  )  {  return destination id ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\servlet\http\RouteDestination.java,get quality,public double   (  )  {  return quality ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\servlet\http\RouteDestination.java,get uri,public  string   (  )  {  return uri ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\servlet\http\RouteDestination.java,hash code,@ override public int   (  )  {  int hash = base   hash ;  hash = prime * hash  +   ( this . destination id  !  =  null  ?  this . destination id . hash code (  )  : 0 )  ;  hash = prime * hash  +   ( this . uri  !  =  null  ?  this . uri . hash code (  )
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\servlet\http\RouteDestination.java,set context removed,public void   (  string context removed )  {  this . context removed = context removed ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\SystemUtils.java,get pid,"public static  string   (  )  {  return  management factory . get runtimemx bean (  )  . get name (  )  . split ( ""@"" ) [0] ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\thread\DestroyableThreadWrapper.java, destroyable thread wrapper,"public   (  thread thread reference  destroyable thread logic )  {  if  ( thread reference  =  =  null || thread logic  =  =  null )   {  throw new  illegal argument exception ( "" references for creating a destroyable thread reference must not be null . ""  +  "" thread  reference: ""  +  thread reference  +  ""  -   thread  logic: "" +  thread logic )  ;   }  this . thread reference = thread reference ;  this . thread logic = thread logic ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\thread\DestroyableThreadWrapper.java,destroy,"@ override @ suppress warnings ( ""squid:s2142"" )  public synchronized void   (  )  {  thread logic . destroy (  )  ;  if  ( thread reference . get state (  )   !  =   thread .  state . new )   {  thread reference . interrupt (  )  ;  while  ( thread refer"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\thread\DestroyableThreadWrapper.java,new thread,public static  < t extends  destroyable &  runnable >  destroyable thread wrapper   ( t thread logic )  {  return new  destroyable thread wrapper ( new  thread ( thread logic )  thread logic )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\thread\DestroyableThreadWrapper.java,start,"public void   (  )  {  if  ( thread reference . get state (  )   !  =   thread .  state . new )   {  throw new  illegal state exception ( "" thread already started .   thread object: ""  +  thread reference )  ;   }  thread reference . start (  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\thread\KeyedStackLock.java, keyed stack lock,public   (  )  {  wait depth = 0 ;  locked = false ;  current key = null ;  threads holding lock = new  hash set <  >  (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\thread\KeyedStackLock.java,clear lock status,private void   (  )  {  current key = null ;  locked = false ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\thread\KeyedStackLock.java,is locked,public boolean   (  )  {  return locked ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\thread\KeyedStackLock.java,lock,"public void   (  object key )  {  try  {  lock interruptibly ( key )  ;   }  catch  (   interrupted exception ie )   {   string key string = key  !  =  null  ?  key . to string (  )  : ""undefined"" ;  log . warn ( ""failed lock attempt using key: ""  +  key string ie )  ;   thread . current thread (  )  . interrupt (  )  ;   }   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\thread\KeyedStackLock.java,lock interruptibly,public synchronized void   (  object key )  throws  interrupted exception  {  final  lock request qlr = new  lock request (  thread . current thread (  )  key )  ;  if  ( wait depth  >  0 ||  ( locked &&  ! current key . equals ( key )  )  )   {  do  {  wait depth +  +  ;  wait (  )  ;  wait depth -  -  ;   }  while  ( locked && current key  !  =  qlr . get lock key (  )  )  ;   }  register thread ( qlr )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\thread\KeyedStackLock.java,register thread,"private void   (  lock request qlr )  {  log . debug ( "" registering thread: ""  +  qlr . get thread reference (  )  . to string (  )  )  ;  if  (  ! threads holding lock . add ( qlr . get thread reference (  )  )  )   {  log . warn ( ""failed thread registration [lock key: ""  +  qlr . get lock key (  )   +  ""]"" )  ;   }  if  (  ! locked )   {  locked = true ;  current key = qlr . get lock key (  )  ;   }   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\thread\KeyedStackLock.java,try lock,public synchronized boolean   (  object key )  {  if  (  ! locked || current key . equals ( key )  )   {  register thread ( new  lock request (  thread . current thread (  )  key )  )  ;  return true ;   }  return false ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\thread\KeyedStackLock.java,unlock,"public synchronized void   (  object key )  {  if  (  ! locked )   {  throw new  illegal state exception ( "" keyed lock is not currently locked"" )  ;   }  if  (  ! current key . equals ( key )  )   {  throw new  illegal argument exception ( "" key does not match the key used to hold the lock"" )  ;   }  final  thread current thread reference =  thread . current thread (  )  ;  if  (  ! threads holding lock . remove ( current thread reference )  )   {  throw new  illegal monitor state exception ( "" thread reference: ""  +  current thread reference . get name (  )   +  "" does not have a keyed lock on this lock"" )  ;   }  if  ( threads holding lock . is empty (  )  )   {  clear lock status (  )  ;   }  if  ( wait depth  >  0 )   {  notify (  )  ;   }   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\transform\jaxb\AbstractJaxbTransform.java, abstract jaxb transform,public   ( jaxb context ctx )  {  jaxb context = ctx ;  marshaller pool = new  soft reference object pool <  >  ( new  base poolable object factory <  marshaller >  (  )  {  @ override public  marshaller make object (  )  {  try  {  return jaxb context . create marshaller (  )  ;   }  catch  (  jaxb exception jaxbe )   {  throw new  resource construction exception ( jaxbe . get message (  )  jaxbe )  ;   }   }   }   )  ;  unmarshaller pool = new  soft reference object pool <  >  ( new  base poolable object factory <  unmarshaller >  (  )  {  @ override public  unmarshaller make object (  )  {  try  {  return jaxb context . create unmarshaller (  )  ;   }  catch  (  jaxb exception jaxbe )   {  throw new  resource construction exception ( jaxbe . get message (  )  jaxbe )  ;   }   }   }   )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\transform\jaxb\AbstractJaxbTransform.java,get marshaller pool,protected  object pool <  marshaller >    (  )  {  return marshaller pool ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\transform\jaxb\AbstractJaxbTransform.java,get unmarshaller pool,protected  object pool <  unmarshaller >    (  )  {  return unmarshaller pool ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\transform\jaxb\AbstractJaxbTransform.java,make object,@ override public  unmarshaller   (  )  {  try  {  return jaxb context . create unmarshaller (  )  ;   }  catch  (  jaxb exception jaxbe )   {  throw new  resource construction exception ( jaxbe . get message (  )  jaxbe )  ;   }   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\thread\LockRequest.java, lock request,public   (  thread thread reference  object thread key )  {  this . thread reference = thread reference ;  this . lock key = thread key ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\thread\LockRequest.java,get lock key,public  object   (  )  {  return lock key ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\thread\LockRequest.java,get thread reference,public  thread   (  )  {  return thread reference ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\transform\jaxb\JaxbEntityToXml.java, jaxb entity to xml,public   ( jaxb context ctx )  {  super ( ctx )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\transform\jaxb\JaxbEntityToXml.java,transform,@ override public  string   ( final jaxb element source )  {   string rtn = null ;   marshaller pooled object ;  final  object pool <  marshaller >  object pool = get marshaller pool (  )  ;  try  {  pooled object = object pool . borrow object (  )  ;  tr
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\StringUriUtilities.java,append path,"public static  string   (  string base url  string .  .  .  paths )  {   string path = concat uris ( paths )  ;  if  (  string utils . is blank ( path )  )   {  return base url ;   }   string builder url ;  if  ( base url . ends with ( "" / "" )  )   {  url = new  string builder ( base url . substring ( 0 base url . length (  )   -  1 )  )  ;   }  else  {  url = new  string builder ( base url )  ;   }  return url . append ( path )  . to string (  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\StringUriUtilities.java,concat uris,"public static  string   (  string .  .  .  uris )  {   string builder builder = new  string builder (  )  ;  for  (   string uri : uris )   {  if  (  string utils . is not blank ( uri )  )   {  if  (  ! uri . starts with ( "" / "" )  &&  ! uri . is empty (  )  )   {  builder . append ( "" / "" )  ;   }  builder . append ( uri )  ;   }   }  return builder . to string (  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\StringUriUtilities.java,encode uri,"public static  string   (  string uri )  {   string encoded uri = """" ;  try  {  encoded uri = url encoder . encode ( uri ""utf8"" )  ;   }  catch  (   unsupported encoding exception ignored )   {  log . trace ( ""failed to encode uri: ""  +  uri ignored )  ;   }  return encoded uri ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\StringUriUtilities.java,format uri,"public static  string   (  string uri )  {  if  (  string utils . starts with ( uri ""\\"" )  )   {  return uri ;   }  if  (  string utils . is blank ( uri )  ||  string utils . equals ignore case ( "" / "" uri )  )   {  return "" / "" ;   }  final  string builder external name = new  string builder ( uri )  ;  if  ( external name . char at ( 0 )   !  =  ' / ' )   {  external name . insert ( 0 "" / "" )  ;   }  int double slash = external name . index of ( "" /  / "" )  ;  while  ( double slash  >   - 1 )   {  external name . replace ( double slash double slash  +  2 "" / "" )  ;  double slash = external name . index of ( "" /  / "" )  ;   }  if  ( external name . char at ( external name . length (  )   -  1 )   =  =  ' / ' && external name . length (  )   !  =  1 )   {  external name . delete char at ( external name . length (  )   -  1 )  ;   }  return external name . to string (  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\StringUriUtilities.java,format uri no lead,public static  string   (  string uri )  {   string builder external name = new  string builder ( format uri ( uri )  )  ;  if  ( external name . char at ( 0 )   =  =  ' / ' )   {  external name . delete char at ( 0 )  ;   }  return external name . to string (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\StringUriUtilities.java,index of uri fragment,public static int   (  string uri  string uri fragment )  {  final int index = uri . index of ( uri fragment )  ;  if  ( uri . length (  )   >  uri fragment . length (  )   +  index )   {  return uri . char at ( index  +  uri fragment . length (  )  )   =  =  ' / '  ?  index :  - 1 ;   }  return index ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\transform\jaxb\StreamToJaxbTransform.java, stream to jaxb transform,public   ( jaxb context jc )  {  super ( jc )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\transform\jaxb\StreamToJaxbTransform.java,transform,@ override public jaxb element < t >    ( final  input stream source )  {  jaxb element < t >  rtn = null ;   unmarshaller pooled object ;  final  object pool <  unmarshaller >  object pool = get unmarshaller pool (  )  ;  try  {  pooled object = object p
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\transform\jaxb\JaxbToStreamTransform.java, jaxb to stream transform,public   ( jaxb context ctx )  {  super ( ctx )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\transform\jaxb\JaxbToStreamTransform.java,transform,@ override public void   ( final jaxb element source final t target )  {   marshaller pooled object ;  final  object pool <  marshaller >  object pool = get marshaller pool (  )  ;  try  {  pooled object = object pool . borrow object (  )  ;  try  {  pool
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\thread\Poller.java, poller,public   (  runnable task long interval )  {  this . interval = interval ;  this . task = task ;  should continue = true ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\thread\Poller.java,destroy,@ override public synchronized void   (  )  {  should continue = false ;  notify (  )  ;  task thread . interrupt (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\thread\Poller.java,run,"@ override @ suppress warnings ( ""squid:s2142"" )  public void   (  )  {  task thread =  thread . current thread (  )  ;  while  ( should continue &&  ! task thread . is interrupted (  )  )   {  try  {  task . run (  )  ;  synchronized  ( this )   {  wait "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\transform\xslt\AbstractXslTransform.java, abstract xsl transform,"public   (  templates transform templates )  {  this . transformation templates = transform templates ;  xslt resource pool = new  soft reference object pool <  >  ( new  base poolable object factory <  transformer >  (  )  {  @ override public  transformer make object (  )  {  try  {  return transformation templates . new transformer (  )  ;   }  catch  (   transformer configuration exception configuration exception )   {  throw new  xslt transformation exception ( "" failed to generate xslt transformer .   reason: ""  +  configuration exception . get message (  )  configuration exception )  ;   }   }   }   )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\transform\xslt\AbstractXslTransform.java,get xsl transformer pool,protected  object pool <  transformer >    (  )  {  return xslt resource pool ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\transform\xslt\AbstractXslTransform.java,make object,"@ override public  transformer   (  )  {  try  {  return transformation templates . new transformer (  )  ;   }  catch  (   transformer configuration exception configuration exception )   {  throw new  xslt transformation exception ( "" failed to generate "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\transform\xslt\JaxbXsltToStringTransform.java, jaxb xslt to string transform,public   (  templates transform templates jaxb context jaxb context )  {  this . construction = new  xslt transform construction (  )  ;  this . transformation templates = transform templates ;  this . jaxb context = jaxb context ;  xslt resource pool = construction . generate xslt resource pool ( transformation templates )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\transform\xslt\JaxbXsltToStringTransform.java,transform,@ override public  string   ( final jaxb element source )  {   string rtn = null ;   transformer pooled object ;  try  {  pooled object = xslt resource pool . borrow object (  )  ;  try  (  string writer string writer = new  string writer (  )  )  {  fina
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\transform\xslt\StreamToXsltTransform.java, stream to xslt transform,public   (  templates transformation templates )  {  super ( transformation templates )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\transform\xslt\StreamToXsltTransform.java,transform,@ override public void   ( final  input stream source final  output stream target )  {   transformer pooled object ;  final  object pool <  transformer >  object pool = get xsl transformer pool (  )  ;  try  {  pooled object = object pool . borrow object 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\transform\xslt\XsltToStreamTransform.java, xslt to stream transform,public   (  templates transform templates jaxb context jaxb context )  {  this . jaxb context = jaxb context ;  final  xslt transform construction construction = new  xslt transform construction (  )  ;  xslt resource pool = construction . generate xslt resource pool ( transform templates )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\transform\xslt\XsltToStreamTransform.java,transform,@ override public void   ( final jaxb element source final t target )  {   transformer pooled object ;  try  {  pooled object = xslt resource pool . borrow object (  )  ;  try  {  pooled object . transform ( new jaxb source ( jaxb context source )  new  s
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\transform\xslt\XsltTransformationException.java, xslt transformation exception,public   (  string message  throwable cause )  {  super ( message cause )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\transform\xslt\XsltTransformConstruction.java,generate xslt resource pool,"public  object pool <  transformer >    ( final  templates transformation templates )  {  return new  soft reference object pool <  >  ( new  base poolable object factory <  transformer >  (  )  {  @ override public  transformer make object (  )  {  try  {  return transformation templates . new transformer (  )  ;   }  catch  (   transformer configuration exception configuration exception )   {  throw new  xslt transformation exception ( "" failed to generate xslt transformer .   reason: ""  +  configuration exception . get message (  )  configuration exception )  ;   }   }   }   )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\transform\xslt\XsltTransformConstruction.java,make object,"@ override public  transformer   (  )  {  try  {  return transformation templates . new transformer (  )  ;   }  catch  (   transformer configuration exception configuration exception )   {  throw new  xslt transformation exception ( "" failed to generate "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\xslt\LogTemplatesWrapper.java, log templates wrapper,public   (  templates templates )  {  this . templates = templates ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\xslt\LogTemplatesWrapper.java,get output properties,@ override public  properties   (  )  {  return templates . get output properties (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\xslt\LogTemplatesWrapper.java,new transformer,@ override public  transformer   (  )  throws  transformer configuration exception  {   transformer tr = templates . new transformer (  )  ;  tr . set error listener ( new  log error listener (  )  )  ;  return tr ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\xslt\LogErrorListener.java,error,@ override public void   (  transformer exception te )  {  throw exception   log . new exception ( stock   error   msg  +  te . get message and location (  )  te  runtime exception . class )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\xslt\LogErrorListener.java,fatal error,@ override public void   (  transformer exception te )  {  throw exception   log . new exception ( stock   error   msg  +  te . get message and location (  )  te  runtime exception . class )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\xslt\LogErrorListener.java,warning,@ override public void   (  transformer exception te )  {  log . warn ( te . get message and location (  )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\arrays\ByteArrayComparatorTest.java,should identify identical arrays,"@ test public void   (  )  {  final byte[] first = new byte[] { 0x1 0x2 0x3 }   second = new byte[] { 0x1 0x2 0x3 }  ;  assert true ( "" arrays that are identical should return true for asserting that they are equal"" new  byte array comparator ( first seco"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\arrays\ByteArrayComparatorTest.java,should return false for arrays with differing contents,"@ test public void   (  )  {  final byte[] first = new byte[] { 0x1 0x2 0x3 }   second = new byte[] { 0x1 0x2 0x5 }  ;  assert false ( "" arrays that have different contents should return false for asserting that they are equal"" new  byte array comparator "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\arrays\ByteArrayComparatorTest.java,should return false for arrays with differing sizes,"@ test public void   (  )  {  final byte[] first = new byte[] { 0x1 0x2 0x3 }   second = new byte[] { 0x1 0x2 }  ;  assert false ( "" arrays that have different sizes should return false for asserting that they are equal"" new  byte array comparator ( first"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\encoding\UUIDEncodingProviderTest.java,should convert well formeduuid strings,@ test public void   (  )  {  final byte[] expected bytes = new byte[16] ;  for  ( int i = 0 ;  i  <  expected bytes . length ;  i +  +  )   {  expected bytes[i] = 1 ;   }  final uuid uuid = uuid . from string ( uuid encoding provider . get instance (  ) 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\encoding\UUIDEncodingProviderTest.java,should encodemd hash values,"@ test public void   (  )  throws  exception  {  final  string expected uuid value = ""cecda330 - 5a61 - 26cd - 1a71 - d5fe34a8e302"" ;  final byte[] hash bytes =  message digest . get instance ( ""md5"" )  . digest ( ""object - key"" . get bytes (  )  )  ;  as"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\ArrayUtilitiesTest.java,test null safe copy non null,"@ test public void   (  )  {   string[] array =  { ""element1"" ""element2"" }  ;  assert that (  array utilities . null safe copy ( array )  equal to ( array )  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\ArrayUtilitiesTest.java,test null safe copy non null byte,"@ test public void   (  )  {  byte[] array = ""array"" . get bytes (  )  ;  assert that (  array utilities . null safe copy ( array )  equal to ( array )  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\ArrayUtilitiesTest.java,test null safe copy null,@ test public void   (  )  {  assert that (  array utilities . null safe copy (  (  object[] ) null )  equal to ( null )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\ArrayUtilitiesTest.java,test null safe copy null byte,@ test public void   (  )  {  assert that (  array utilities . null safe copy (  ( byte[] ) null )  equal to ( null )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\http\HttpDateTest.java,should output correct format,"@ test public void   (  )  {  final  string expected = "" sun  06  nov 1994 08:49:37 gmt"" ;  final  calendar then =  calendar . get instance (  )  ;  then . set time zone (  time zone . get time zone ( ""gmt"" )  )  ;  then . set ( 1994 10 6 8 49 37 )  ;  as"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\http\CommonHttpHeaderTest.java,should equal ignoring case,"@ test public void   (  )  {  assert that (  common http header . x   forwarded   for is ( equal to ignoring case ( ""x - forwarded - for"" )  )  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\http\ExtendedHttpHeaderTest.java,should equal ignoring case,"@ test public void   (  )  {  assert that (  extended http header . x   ttl is ( equal to ignoring case ( ""x - ttl"" )  )  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\http\media\MediaTypeTest.java,should return false if comparinga different type,"@ test public void   (  )  {   mime type media type =  mime type . get matching mime type ( ""application / vnd . rackspace . services . a - v1 . 0 + xml"" )  ;   media type one media range = new  media type ( ""application / vnd . rackspace . services . a -"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\http\media\MediaTypeTest.java,should return true if comparing equal types,"@ test public void   (  )  {   mime type media type =  mime type . get matching mime type ( ""application / vnd . rackspace . services . a - v1 . 0 + xml"" )  ;   media type one media range = new  media type ( ""application / vnd . rackspace . services . a -"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\http\normal\ArrayWhiteListParameterFilterFactory.java, array white list parameter filter factory,public   (  string[] white list )  {  this . white list =  arrays . copy of ( white list white list . length )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\http\normal\ArrayWhiteListParameterFilterFactory.java,new instance,@ override public  parameter filter   (  )  {  return new  array white list parameter filter ( white list )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\http\header\HeaderValueImplTest.java,should compare string values when quality factors are equal,"@ test public void   (  )  {  final  header value first = new  header value impl ( ""equal"" 0 . 8 )   second = new  header value impl ( ""equal"" 0 . 8 )   third = new  header value impl ( ""eqlam"" 0 . 8 )  ;  assert equals ( "" comparing header values must ma"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\http\header\HeaderValueImplTest.java,should handle null header value string,"@ test public void   (  )  {  final  header value first = new  header value impl ( """" 0 . 8 )   second = new  header value impl ( null 0 . 8 )  ;  assert equals ( "" null header value strings must compare against valid header value strings as lesser than v"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\http\header\HeaderValueImplTest.java,should handle null header values,"@ test public void   (  )  {  final  header value first = new  header value impl ( """" 0 . 8 )  ;  assert equals ( "" null header values must compare against valid values as lesser than valid values"" 1 first . compare to ( null )  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\http\header\HeaderValueImplTest.java,should identify when header value has no quality factor,"@ test public void   (  )  {  final  header value impl header value = new  header value impl ( ""value""  collections .  <  string  string > empty map (  )  )  ;  assert false ( "" header value correctly identify whether or not it has an assigned quality fac"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\http\header\HeaderValueImplTest.java,should out put empty with null value,"@ test public void   (  )  {  final  header value impl header value = new  header value impl ( null  collections .  <  string  string > empty map (  )  )  ;  assert equals ( "" header value should be blank when passed null . "" """" header value . to string ("
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\http\header\HeaderValueImplTest.java,should output value parameters,"@ test public void   (  )  {  final  list <  pattern >  patterns = new  array list <  >  (  )  ;  for  (  int i :  arrays . as list ( 1 2 3 )  )   {  patterns . add (  pattern . compile ( "" . * ;  ?  ( param""  +  i  +  "" = "" +  i +  "" )  ;  ?  . *"" )  )  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\http\header\HeaderValueImplTest.java,should output value quality factor,"@ test public void   (  )  {  final  header value impl header value = new  header value impl ( ""value"" 0 . 5 )  ;  assert equals ( "" header value must match expected output"" ""value ; q = 0 . 5"" header value . to string (  )  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\http\header\HeaderValueImplTest.java,should output value with no parameters,"@ test public void   (  )  {  final  header value impl header value = new  header value impl ( ""value""  collections .  <  string  string > empty map (  )  )  ;  assert equals ( "" header value should only contain value when no parameters are present . "" ""v"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\http\header\HeaderValueImplTest.java,should return equals when two headers are the same even with differing qualities,"@ test public void   (  )  {  final  map <  string  string >  parameters = new  hash map <  >  (  )  ;  parameters . put ( ""param1"" ""1"" )  ;  parameters . put ( ""param2"" ""2"" )  ;  parameters . put ( ""param3"" ""3"" )  ;  final  header value impl header value"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\http\header\HeaderValueImplTest.java,should return negative one when no quality factor can be determined,"@ test public void   (  )  {  final  header value impl header value = new  header value impl ( ""value""  collections .  <  string  string > empty map (  )  )  ;  assert that ( "" header value must match expected output"" header value . get quality factor (  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\http\header\HeaderValueImplTest.java,should return throw number format exception for unparsable quality factors,"@ test ( expected =  malformed header value exception . class )  public void   (  )  {  final  map <  string  string >  parameters = new  hash map <  >  (  )  ;  parameters . put ( ""q"" ""nan"" )  ;  final  header value impl header value = new  header value "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\http\header\HeaderValueImplTest.java,should use quality factor,"@ test public void   (  )  {  final  header value first = new  header value impl ( """" 0 . 8 )   second = new  header value impl ( """" 0 . 2 )  ;  assert equals ( "" matching quality factors and values must return 0"" 0 first . compare to ( first )  )  ;  ass"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\http\media\MimeTypeTest.java,should return guessed media type,"@ test public void   (  )  {   string media type string = ""text / xml"" ;   mime type returned media type =  mime type . guess media type from string ( media type string )  ;  assert equals ( returned media type . get name (  )  media type string )  ;   } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\http\media\MimeTypeTest.java,should return unknown media type,"@ test public void   (  )  {   string media type string = ""application / what's up doc"" ;   mime type returned media type =  mime type . get matching mime type ( media type string )  ;  assert equals (  mime type . unknown returned media type )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\http\normal\ArrayWhiteListParameterFilter.java, array white list parameter filter,public   (  string[] white list )  {  this . white list =  arrays . copy of ( white list white list . length )  ;   ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\http\normal\ArrayWhiteListParameterFilter.java,should accept,@ override public boolean   (  string name )  {  for  (   string whitelist name : white list )   {  if  ( name . equals ( whitelist name )  )   {  return true ;   }   }  return false ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\buffer\SynchronizedByteBufferTest.java,set up,@ before public void   (  )  {  b = mock (  byte buffer . class )  ;  buffer = new  synchronized byte buffer ( b )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\buffer\SynchronizedByteBufferTest.java,should call available,@ test public void   (  )  {  int expected = 42 ;  when ( b . available (  )  )  . then return ( expected )  ;  int avail = buffer . available (  )  ;  verify ( b )  . available (  )  ;  assert equals ( expected avail )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\buffer\SynchronizedByteBufferTest.java,should call clear,@ test public void   (  )  {  buffer . clear (  )  ;  verify ( b )  . clear (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\buffer\SynchronizedByteBufferTest.java,should call copy,@ test public void   (  )  {   byte buffer expected = mock (  byte buffer . class )  ;  when ( b . copy (  )  )  . then return ( expected )  ;   byte buffer actual = buffer . copy (  )  ;  verify ( b )  . copy (  )  ;  assert that ( actual equal to ( expe
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\buffer\SynchronizedByteBufferTest.java,should call get,@ test public void   (  )  throws io exception  {  byte expected = 7 ;  when ( b . get (  )  )  . then return ( expected )  ;  byte actual = buffer . get (  )  ;  verify ( b )  . get (  )  ;  assert equals ( expected actual )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\buffer\SynchronizedByteBufferTest.java,should call get bytes,@ test public void   (  )  throws io exception  {  byte[] some array = new byte[10] ;  buffer . get ( some array )  ;  byte[] expected = some array ;  verify ( b )  . get ( eq ( expected )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\buffer\SynchronizedByteBufferTest.java,should call get bytes with offset,@ test public void   (  )  throws io exception  {  byte[] some array = new byte[10] ;  int off = 5 ;  int len = 1 ;  buffer . get ( some array off len )  ;  byte[] expected = some array ;  verify ( b )  . get ( eq ( expected )  eq ( off )  eq ( len )  )  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\buffer\SynchronizedByteBufferTest.java,should call put byte,@ test public void   (  )  throws io exception  {  byte byte val = 1 ;  buffer . put ( byte val )  ;  verify ( b )  . put ( eq ( byte val )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\buffer\SynchronizedByteBufferTest.java,should call put byte array,@ test public void   (  )  throws io exception  {  byte[] byte val =  { 1 2 }  ;  buffer . put ( byte val )  ;  verify ( b )  . put ( eq ( byte val )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\buffer\SynchronizedByteBufferTest.java,should call put byte array with offset,@ test public void   (  )  throws io exception  {  byte[] byte val =  { 1 2 }  ;  int off = 3 ;  int len = 7 ;  buffer . put ( byte val off len )  ;  verify ( b )  . put ( eq ( byte val )  eq ( off )  eq ( len )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\buffer\SynchronizedByteBufferTest.java,should call remaining,@ test public void   (  )  {  int expected = 17 ;  when ( b . remaining (  )  )  . then return ( expected )  ;  int actual = buffer . remaining (  )  ;  verify ( b )  . remaining (  )  ;  assert equals ( expected actual )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\buffer\SynchronizedByteBufferTest.java,should call skip,@ test public void   (  )  {  int expected = 5 ;  when ( b . skip ( any int (  )  )  )  . then return ( expected )  ;  int len = 10 ;  int actual = buffer . skip ( len )  ;  verify ( b )  . skip ( eq ( len )  )  ;  assert equals ( expected actual )  ;   }
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\BufferCapacityExceptionTest.java,should preserve throwable,"@ test public void   (  )  {   throwable cause = new  exception ( ""i am some trouble maker"" )  ;   buffer capacity exception exception = new  buffer capacity exception ( "" message"" cause )  ;  assert equals ( cause exception . get cause (  )  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\buffer\CyclicByteBufferTest.java,fill,private static byte[]   ( byte[] array )  {  for  ( int i = 0 ;  i  <  array . length ;  i +  +  )   {  array[i] =  ( byte )  ( i %  byte . max   value )  ;   }  return array ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\buffer\CyclicByteBufferTest.java,should allocate sufficient buffer,@ test public void   (  )  throws io exception  {  byte[] data written = fill ( new byte[default   size  +  10] )  ;  source buffer . put ( data written )  ;   byte buffer dest = source buffer . copy (  )  ;  byte[] data read = new byte[data written . len
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\buffer\CyclicByteBufferTest.java,should clear empty buffer,"@ test public void   (  )  {  int expected = source buffer . remaining (  )  ;  source buffer . clear (  )  ;  int actual = source buffer . remaining (  )  ;  assert equals ( "" remaining should be unchanged after clearing empty buffer"" expected actual )  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\buffer\CyclicByteBufferTest.java,should clear partially full buffer,"@ test public void   (  )  throws io exception  {  int expected = source buffer . remaining (  )  ;  source buffer . put ( fill ( new byte[20] )  )  ;  source buffer . clear (  )  ;  int actual = source buffer . remaining (  )  ;  assert that ( "" remainin"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\buffer\CyclicByteBufferTest.java,should copy buffer,"@ test public void   (  )  throws  exception  {   byte buffer dest = source buffer . copy (  )  ;  assert not null ( dest )  ;  assert equals ( "" dest and source available should be the same"" source buffer . available (  )  dest . available (  )  )  ;  as"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\buffer\CyclicByteBufferTest.java,should copy wrapped buffers,@ test public void   (  )  throws io exception  {  byte[] data written = fill ( new byte[default   size] )  ;  source buffer . put ( new byte[10] )  ;  source buffer . get ( new byte[10] )  ;  source buffer . put ( data written )  ;   byte buffer dest = s
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\buffer\CyclicByteBufferTest.java,should grow buffer,"@ test public void   (  )  throws io exception  {  final int expected available = 2048 ;  buffer . put ( new byte[6] )  ;  buffer . get ( new byte[6] )  ;  assert equals ( "" buffer size should should have 2048 available after growing"" expected available b"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\buffer\CyclicByteBufferTest.java,should grow buffer and preserve byte order,@ test public void   (  )  throws io exception  {  final byte[] expected header = new byte[8] ;  for  ( int i = 0 ;  i  <  expected header . length ;  i +  +  )   {  expected header[i] =  ( byte ) i ;   }  buffer . put ( expected header )  ;  buffer . put
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\buffer\CyclicByteBufferTest.java,should grow buffer when exactly full,@ test public void   (  )  throws io exception  {  final int expected available = 2048 ;  buffer . put (  ( byte ) 0x01 )  ;  buffer . put (  ( byte ) 0x02 )  ;  buffer . put (  ( byte ) 0x03 )  ;  buffer . put (  ( byte ) 0x04 )  ;  buffer . put (  ( byt
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\buffer\CyclicByteBufferTest.java,should handle large arrays,@ test public void   (  )  throws io exception  {  buffer = new  cyclic byte buffer (  )  ;  final byte[] random bytes = new byte[64] ;  new  random (  system . nano time (  )  )  . next bytes ( random bytes )  ;  buffer . put ( random bytes )  ;  final b
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\buffer\CyclicByteBufferTest.java,should have default buffer size available,"@ test public void   (  )  {  buffer . allocate (  )  ;  assert equals ( "" should have default buffer size"" default   size buffer . remaining (  )  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\buffer\CyclicByteBufferTest.java,should honor offsets,@ test public void   (  )  throws io exception  {  buffer = new  cyclic byte buffer (  )  ;  final byte[] random bytes = new byte[64] ;  new  random (  system . nano time (  )  )  . next bytes ( random bytes )  ;  buffer . put ( random bytes )  ;  final b
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\buffer\CyclicByteBufferTest.java,should preserve data,@ test public void   (  )  throws io exception  {  byte[] data written = fill ( new byte[10] )  ;  source buffer . put ( data written )  ;   byte buffer dest = source buffer . copy (  )  ;  byte[] data read = new byte[data written . length] ;  dest . get 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\buffer\CyclicByteBufferTest.java,should put into buffer,"@ test public void   (  )  throws io exception  {  final byte expected = 0x1 ;  buffer . put ( expected )  ;  assert equals ( "" byte in buffer should be same as the byte put into the buffer"" expected buffer . get (  )  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\buffer\CyclicByteBufferTest.java,should read from full buffer,"@ test public void   (  )  throws io exception  {  int expected = 2048 ;  source buffer . put ( fill ( new byte[2048] )  )  ;  assert equals ( "" available should be entire buffer"" expected source buffer . available (  )  )  ;  byte[] buffer = new byte[204"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\buffer\CyclicByteBufferTest.java,should read until supplied byte array is full,"@ test public void   (  )  throws io exception  {  final int expected = 32 ;  buffer . put ( new byte[64] )  ;  assert equals ( "" byte buffer should fill given array and return the amount read"" expected buffer . get ( new byte[32] )  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\buffer\CyclicByteBufferTest.java,should return negative one for single byte reads with empty buffer,"@ test public void   (  )  throws io exception  {  assert equals ( "" buffer should return negative one on empty single byte read""  - 1 buffer . get (  )  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\buffer\CyclicByteBufferTest.java,should return read with empty buffer,"@ test public void   (  )  throws io exception  {  assert equals ( "" buffer should return zero when a read is made against an empty buffer"" 0 buffer . get ( new byte[16] )  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\buffer\CyclicByteBufferTest.java,should skip bytes,"@ test public void   (  )  throws io exception  {  buffer . put (  ( byte ) 1 )  ;  buffer . put ( new byte[256] )  ;  buffer . put (  ( byte ) 100 )  ;  assert equals ( "" header byte before skipping must mach expected"" 1 buffer . get (  )  )  ;  buffer ."
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\buffer\CyclicByteBufferTest.java,should skip to end of data,"@ test public void   (  )  throws io exception  {  byte[] data = fill ( new byte[10] )  ;  buffer . put ( data )  ;  int expected = data . length ;  int actual = buffer . skip ( default   size )  ;  assert equals ( "" should skip to end of buffer"" expected"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\buffer\CyclicByteBufferTest.java,should wrap puts,@ test public void   (  )  throws io exception  {  buffer = new  cyclic byte buffer (  heapspace byte array provider . get instance (  )  10 0 0 false false )  ;  byte[] data = fill ( new byte[7] )  ;  buffer . put ( data )  ;  buffer . get ( data )  ;  a
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\buffer\CyclicByteBufferTest.java,should wrap puts and preserve order,"@ test public void   (  )  throws io exception  {  byte[] data1 written = new byte[10] ;  buffer . put ( fill ( data1 written )  )  ;  assert equals ( "" should reduce remaining"" default   size  -  data1 written . length buffer . remaining (  )  )  ;  byte"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\buffer\CyclicByteBufferTest.java,should wrap skip,@ test public void   (  )  throws io exception  {  buffer = new  cyclic byte buffer (  heapspace byte array provider . get instance (  )  10 0 0 false false )  ;  byte[] data = new byte[] { 1 2 3 4 5 6 7 }  ;  buffer . put ( data )  ;  buffer . get ( data
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\buffer\CyclicByteBufferTest.java,stand up,@ before public void   (  )  {  source buffer = new  cyclic byte buffer (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\http\normal\QueryStringNormalizerTest.java,before,"@ before public void   (  )  {  final  parameter filter factory parameter filter factory = new  array white list parameter filter factory ( new  string[] { ""a"" ""b"" ""c"" ""d"" }  )  ;  query string normalizer = new  query string normalizer ( parameter filter "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\http\normal\QueryStringNormalizerTest.java,should alphabetize parameters,"@ test public void   (  )  {  final  string query = ""c = 124&a = 111&d = 4&b = 8271"" ;  final  string actual = query string normalizer . normalize ( query )  ;  final  string[] query param pairs = actual . split ( ""&"" )  ;  assert equals ( ""uri normalizer"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\http\normal\QueryStringNormalizerTest.java,should filter bad parameters,"@ test public void   (  )  {  final  string query = ""cache - busting = 2395819035&a = 1"" ;  final  string actual = query string normalizer . normalize ( query )  ;  assert that ( ""uri normalizer must filter bad query parameters . "" actual not ( contains s"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\http\normal\QueryStringNormalizerTest.java,should normalize contiguous collections,"@ test public void   (  )  {  final  string query = ""b = 4&c = 111&a = 1&a = 2&a = 3&d = 441"" ;  final  string actual = query string normalizer . normalize ( query )  ;  final  string[] query param pairs = actual . split ( ""&"" )  ;  assert equals ( ""uri n"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\http\normal\QueryStringNormalizerTest.java,should normalize split collections,"@ test public void   (  )  {  final  string query = ""a = 1&b = 4&c = 111&a = 3&d = 441&a = 2"" ;  final  string actual = query string normalizer . normalize ( query )  ;  final  string[] query param pairs = actual . split ( ""&"" )  ;  assert equals ( ""uri n"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\ByteBufferInputStreamTest.java,answer,@ override public  object   (  invocation on mock invocation )  throws  throwable  {  int count = 0 ;   object[] args = invocation . get arguments (  )  ;  for  (   object arg : args )   {  if  ( arg instanceof byte[] )   {  byte[] bytes =  ( byte[] ) arg
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\ByteBufferInputStreamTest.java,any byte array,public static byte[]   (  )  {  return arg that ( new  is byte array (  )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\ByteBufferInputStreamTest.java,check array values,private void   ( byte[] array )  {  for  ( int i = 0 ;  i  <  array . length ;  i +  +  )   {  assert equals (  ( byte ) i array[i] )  ;   }   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\ByteBufferInputStreamTest.java,matches,@ override public boolean   (  object argument )  {  boolean result =  ( argument instanceof byte[] )  ;  return result ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\ByteBufferInputStreamTest.java,set up,@ before public void   (  )  throws io exception  {  buffer = mock (  byte buffer . class )  ;  when ( buffer . available (  )  )  . then return ( 10 )  ;  when ( buffer . get (  )  )  . then return (  ( byte ) 1 )  ;  when ( buffer . get ( any byte array
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\ByteBufferInputStreamTest.java,should call skip until total bytes skipped,@ test public void   (  )  throws io exception  {  int expected = 100 ;  stream . skip ( expected )  ;  verify ( buffer times ( 10 )  )  . skip ( any int (  )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\ByteBufferInputStreamTest.java,should exit if zero skipped,@ test public void   (  )  throws io exception  {  int expected = 0 ;  assert equals ( expected stream . skip ( magic   skip )  )  ;  verify ( buffer times ( 1 )  )  . skip ( any int (  )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\ByteBufferInputStreamTest.java,should fill byte array,@ test public void   (  )  throws io exception  {  byte[] array = new byte[5] ;  assert equals ( array . length stream . read ( array )  )  ;  check array values ( array )  ;  verify ( buffer )  . get ( any byte array (  )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\ByteBufferInputStreamTest.java,should ignore negative skip,@ test public void   (  )  throws io exception  {  int expected = 0 ;  assert equals ( expected stream . skip (  - 10 )  )  ;  verify ( buffer times ( 0 )  )  . skip ( any int (  )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\ByteBufferInputStreamTest.java,should ignore zero skip,@ test public void   (  )  throws io exception  {  int expected = 0 ;  assert equals ( expected stream . skip ( 0 )  )  ;  verify ( buffer times ( 0 )  )  . skip ( any int (  )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\ByteBufferInputStreamTest.java,should not skip more than max int bytes at once,"@ test public void   (  )  throws io exception  {  long expected = 3 * new  long (  integer . max   value )   +  1 ;  long actual = stream . skip ( expected )  ;  assert equals ( "" should skip requested number of bytes"" expected actual )  ;  verify ( buff"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\ByteBufferInputStreamTest.java,should not support mark,"@ test public void   (  )  {  assert false ( "" should not support marking"" stream . mark supported (  )  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\ByteBufferInputStreamTest.java,should pass offset and length,@ test public void   (  )  throws io exception  {  byte[] array = new byte[5] ;  assert equals ( array . length stream . read ( array 2 5 )  )  ;  check array values ( array )  ;  verify ( buffer )  . get ( any byte array (  )  eq ( 2 )  eq ( 5 )  )  ;   
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\ByteBufferInputStreamTest.java,should pass skip value to buffer,@ test public void   (  )  throws io exception  {  int expected = 10 ;  stream . skip ( expected )  ;  verify ( buffer )  . skip ( expected )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\ByteBufferInputStreamTest.java,should return available if source has data available,"@ test public void   (  )  throws io exception  {  int expected = 10 ;  assert equals ( "" should have data available"" expected stream . available (  )  )  ;  verify ( buffer )  . available (  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\ByteBufferInputStreamTest.java,should return one byte when reading,@ test public void   (  )  throws io exception  {  byte expected = 1 ;  assert equals ( expected stream . read (  )  )  ;  verify ( buffer )  . get (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\ByteBufferInputStreamTest.java,should stop reading on no bytes remaining,@ test public void   (  )  throws  exception  {  final byte[] bytes = new byte[] { 1 2 3 }  ;   byte buffer local buffer = new  cyclic byte buffer (  )  ;  local buffer . put ( bytes )  ;  stream = new  byte buffer input stream ( local buffer . copy (  ) 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\ByteBufferInputStreamTest.java,should throw exception when checking available,@ test ( expected = io exception . class )  public void   (  )  throws io exception  {  stream . available (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\ByteBufferInputStreamTest.java,should throw exception when closing,@ test ( expected = io exception . class )  public void   (  )  throws io exception  {  stream . close (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\ByteBufferInputStreamTest.java,should throw exception when reading,@ test ( expected = io exception . class )  public void   (  )  throws io exception  {  stream . read (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\ByteBufferInputStreamTest.java,should throw exception when reading byte buffer,@ test ( expected = io exception . class )  public void   (  )  throws io exception  {  byte[] bytes = new byte[0] ;  stream . read ( bytes )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\ByteBufferInputStreamTest.java,should throw exception when reading byte buffer with offset,@ test ( expected = io exception . class )  public void   (  )  throws io exception  {  byte[] bytes = new byte[0] ;  stream . read ( bytes 0 10 )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\ByteBufferInputStreamTest.java,should throw exception when skipping,@ test ( expected = io exception . class )  public void   (  )  throws io exception  {  stream . skip ( 0 )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\ByteBufferInputStreamTest.java,test read   args,"@ test public void   (  )  throws  exception  {   system . out . println ( ""read"" )  ;  byte[] b = null ;  int off = 0 ;  int len = 0 ;   byte buffer input stream instance = null ;  int exp result = 0 ;  int result = instance . read ( b off len )  ;  asse"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\ByteBufferInputStreamTest.java,test read   byte arr,"@ test public void   (  )  throws  exception  {   system . out . println ( ""read"" )  ;  byte[] b = null ;   byte buffer input stream instance = null ;  int exp result = 0 ;  int result = instance . read ( b )  ;  assert equals ( exp result result )  ;  fa"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\ByteBufferInputStreamTest.java,test skip,"@ test public void   (  )  throws  exception  {   system . out . println ( ""skip"" )  ;  long n = 0l ;   byte buffer input stream instance = null ;  long exp result = 0l ;  long result = instance . skip ( n )  ;  assert equals ( exp result result )  ;  fai"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\ByteBufferOutputStreamTest.java,set up,@ before public void   (  )  {  buffer = mock (  byte buffer . class )  ;  when ( buffer . available (  )  )  . then return ( buffer   size )  ;  stream = new  byte buffer output stream ( buffer )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\ByteBufferOutputStreamTest.java,should call flush stream,@ test public void   (  )  throws io exception  {  stream . flush (  )  ;  verify ( buffer )  . skip ( any int (  )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\ByteBufferOutputStreamTest.java,should call write byte,@ test public void   (  )  throws io exception  {  int b = 1 ;  stream . write ( b )  ;  verify ( buffer )  . put ( eq (  ( byte ) b )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\ByteBufferOutputStreamTest.java,should flush stream,@ test public void   (  )  throws io exception  {  stream . flush stream (  )  ;  verify ( buffer times ( 1 )  )  . skip ( buffer   size )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\ByteBufferOutputStreamTest.java,should throw exception if stream is closed,@ test ( expected = io exception . class )  public void   (  )  throws io exception  {  stream . close (  )  ;  stream . flush (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\ByteBufferOutputStreamTest.java,should write byte,@ test public void   (  )  throws io exception  {  int b = 1 ;  stream . write byte ( b )  ;  verify ( buffer )  . put ( eq (  ( byte ) b )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\ByteBufferServletOutputStreamTest.java,set up,@ before public void   (  )  {  buffer = mock (  byte buffer . class )  ;  stream = new  byte buffer servlet output stream ( buffer )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\ByteBufferServletOutputStreamTest.java,should write byte,@ test public void   (  )  throws io exception  {  int b = 1 ;  stream . write ( b )  ;  verify ( buffer )  . put ( eq (  ( byte ) b )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\ByteBufferServletOutputStreamTest.java,should write bytes,@ test public void   (  )  throws io exception  {  byte[] bytes = new byte[10] ;  stream . write ( bytes )  ;  verify ( buffer )  . put ( eq ( bytes )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\ByteBufferServletOutputStreamTest.java,should write bytes with offset and length,@ test public void   (  )  throws io exception  {  byte[] bytes = new byte[10] ;  int offset = 1 ;  int length = 10 ;  stream . write ( bytes offset length )  ;  verify ( buffer )  . put ( eq ( bytes )  eq ( offset )  eq ( length )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\MessageDigesterOutputStreamTest.java,set up,@ before public void   (  )  {  digest = mock (  message digest . class )  ;  when ( digest . digest (  )  )  . then return ( digest bytes )  ;  stream = new  message digester output stream ( digest )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\MessageDigesterOutputStreamTest.java,should get digest bytes,@ test public void   (  )  throws io exception  {  stream . close stream (  )  ;  byte[] actual = stream . get digest (  )  ;  assert array equals ( digest bytes actual )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\MessageDigesterOutputStreamTest.java,should get digest when closing stream,@ test public void   (  )  throws io exception  {  stream . close stream (  )  ;  verify ( digest )  . digest (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\MessageDigesterOutputStreamTest.java,should reset digest when flushing stream,@ test public void   (  )  throws io exception  {  stream . flush stream (  )  ;  verify ( digest )  . reset (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\MessageDigesterOutputStreamTest.java,should write bytes,@ test public void   (  )  throws io exception  {  int b = 1 ;  stream . write ( b )  ;  verify ( digest )  . update ( eq (  ( byte ) b )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\InputStreamMergerTest.java,set up,@ before public void   (  )  {  stream1 =  input stream merger . wrap ( stream   data1 )  ;  stream2 =  input stream merger . wrap ( stream   data2 )  ;  stream3 =  input stream merger . wrap ( stream   data3 )  ;  combined stream =  (  input stream merge
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\InputStreamMergerTest.java,setup,@ before public void   (  )  {  stream =  input stream merger . merge (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\InputStreamMergerTest.java,should close all streams,@ test public void   (  )  throws io exception  {  merged . close (  )  ;  verify ( stream1 )  . close (  )  ;  verify ( stream2 )  . close (  )  ;  verify ( stream3 )  . close (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\InputStreamMergerTest.java,should handle empty streams,"@ test public void   (  )  throws io exception  {   input stream empty stream1 =  input stream merger . wrap ( """" )  ;   input stream empty stream2 =  input stream merger . wrap ( """" )  ;   input stream empty stream3 =  input stream merger . wrap ( """" )  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\InputStreamMergerTest.java,should handle null streams,@ test public void   (  )  throws io exception  {   input stream stream =  input stream merger . merge ( null stream2 stream3 )  ;   string expected = stream   data2  +  stream   data3 ;   buffered reader reader = new  buffered reader ( new  input stream 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\InputStreamMergerTest.java,should handle null streams,@ test public void   (  )  throws io exception  {   input stream stream =  input stream merger . merge ( stream1 null stream3 )  ;   string expected = stream   data1  +  stream   data3 ;   buffered reader reader = new  buffered reader ( new  input stream 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\InputStreamMergerTest.java,should handle null streams,@ test public void   (  )  throws io exception  {   input stream stream =  input stream merger . merge ( stream1 stream2 null )  ;   string expected = stream   data1  +  stream   data2 ;   buffered reader reader = new  buffered reader ( new  input stream 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\InputStreamMergerTest.java,should handle null streams,@ test public void   (  )  throws io exception  {   input stream stream =  input stream merger . merge (  (  input stream ) null )  ;  int expected =  - 1 ;  assert equals ( expected stream . read (  )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\InputStreamMergerTest.java,should handle null streams,@ test public void   (  )  throws io exception  {   input stream stream =  input stream merger . merge (  )  ;  int expected =  - 1 ;  assert equals ( expected stream . read (  )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\InputStreamMergerTest.java,should handle skipping beyond end of data,@ test public void   (  )  throws io exception  {  long expected =  ( stream   data1  +  stream   data2  +  stream   data3 )  . length (  )  ;  long to skip = expected  +  10 ;  long actual = combined stream . skip ( to skip )  ;  assert equals ( expected
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\InputStreamMergerTest.java,should ignore mark requests,@ test public void   (  )  {  stream . mark ( 1 )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\InputStreamMergerTest.java,should merge multiple input streams,@ test public void   (  )  throws io exception  {   buffered reader reader = new  buffered reader ( new  input stream reader ( combined stream )  )  ;   string result = reader . read line (  )  ;  assert equals ( stream   data1  +  stream   data2  +  stre
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\InputStreamMergerTest.java,should not support marking,@ test public void   (  )  {  assert false ( stream . mark supported (  )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\InputStreamMergerTest.java,should not support reset,@ test ( expected = io exception . class )  public void   (  )  throws io exception  {  combined stream . reset (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\InputStreamMergerTest.java,should read entire stream,@ test public void   (  )  throws io exception  {  long expected =  ( stream   data1  +  stream   data2  +  stream   data3 )  . length (  )  ;  int value = combined stream . read (  )  ;  int actual read count = 0 ;  while  ( value  >  =  0 )   {  actual 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\InputStreamMergerTest.java,should read into byte array,@ test public void   (  )  throws io exception  {  byte[] bytes = new byte[ ( stream   data1  +  stream   data2 )  . length (  ) ] ;   string expected = stream   data1  +  stream   data2 ;  int read length = combined stream . read ( bytes )  ;  assert equ
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\InputStreamMergerTest.java,should return available of current stream,@ test public void   (  )  throws io exception  {  int available = combined stream . available (  )  ;  assert equals ( stream   data1 . length (  )  available )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\InputStreamMergerTest.java,should skip multiple streams of data,@ test public void   (  )  throws io exception  {  long to skip =  ( stream   data1  +  stream   data2 )  . length (  )  ;  long skipped = combined stream . skip ( to skip )  ;  assert equals ( to skip skipped )  ;   buffered reader reader = new  buffered
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\InputStreamMergerTest.java,should skip null streams,@ test public void   (  )  throws io exception  {  merged with null . close (  )  ;  verify ( stream1 )  . close (  )  ;  verify ( stream2 )  . close (  )  ;  verify ( stream3 )  . close (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\InputStreamMergerTest.java,should skip within first stream,@ test public void   (  )  throws io exception  {  long expected = stream   data1 . length (  )   -  1 ;  long actual = combined stream . skip ( expected )  ;  assert equals ( expected actual )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\InputStreamMergerTest.java,should wrapa string asa stream,@ test public void   (  )  throws io exception  {   buffered reader reader = new  buffered reader ( new  input stream reader ( stream1 )  )  ;   string result = reader . read line (  )  ;  assert equals ( stream   data1 result )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\ObjectSerializerTest.java, my serializable object,  (  string field1  string field2 )  {  this . field1 = field1 ;  this . field2 = field2 ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\ObjectSerializerTest.java,equals,@ override public boolean   (  object other )  {  boolean result = false ;  if  ( other  !  =  null && other instanceof  my serializable object )   {   my serializable object o =  (  my serializable object ) other ;  result =  ( field1  =  =  null && o . 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\ObjectSerializerTest.java,set up,"@ before public void   (  )  {  serializer = new  object serializer ( this . get class (  )  . get class loader (  )  )  ;  target = new  my serializable object ( ""x123"" ""y123"" )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\ObjectSerializerTest.java,should read serialize object,@ test public void   (  )  throws io exception   class not found exception  {  byte[] serialized = serializer . write object ( target )  ;  assert not null ( serialized )  ;   serializable actual = serializer . read object ( serialized )  ;  assert not nu
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\ObjectSerializerTest.java,should serialize object,@ test public void   (  )  throws io exception  {  byte[] serialized = serializer . write object ( target )  ;  assert not null ( serialized )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\SimpleBufferInputStreamTest.java,should read till buffer is empty,"@ test public void   (  )  throws  exception  {  final  byte buffer sbb = new  cyclic byte buffer (  )  ;  sbb . put ( ""expected"" . get bytes (  )  )  ;  final  input stream is = new  byte buffer input stream ( sbb )  ;  final byte[] bytes = new byte[1024"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\SimpleBufferInputStreamTest.java,should read till buffer is empty using byte array read,"@ test public void   (  )  throws  exception  {  final  byte buffer sbb = new  cyclic byte buffer (  )  ;  sbb . put ( ""expected"" . get bytes (  )  )  ;  final  input stream is = new  byte buffer input stream ( sbb )  ;  final byte[] bytes = new byte[1024"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\OutputStreamSplitterTest.java,set up,@ before public void   (  )  {  stream1 = mock (  output stream . class )  ;  stream2 = mock (  output stream . class )  ;  stream3 = mock (  output stream . class )  ;  splitter = new  output stream splitter ( stream1 stream2 stream3 )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\OutputStreamSplitterTest.java,should close all streams,@ test public void   (  )  throws io exception  {  splitter . close (  )  ;  verify ( stream1 )  . close (  )  ;  verify ( stream2 )  . close (  )  ;  verify ( stream3 )  . close (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\OutputStreamSplitterTest.java,should flush all streams,@ test public void   (  )  throws io exception  {  splitter . flush (  )  ;  verify ( stream1 )  . flush (  )  ;  verify ( stream2 )  . flush (  )  ;  verify ( stream3 )  . flush (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\OutputStreamSplitterTest.java,should write bytes to all streams,@ test public void   (  )  throws io exception  {  byte[] value =  { 1 2 3 4 5 }  ;  splitter . write ( value )  ;  verify ( stream1 )  . write ( eq ( value )  )  ;  verify ( stream2 )  . write ( eq ( value )  )  ;  verify ( stream3 )  . write ( eq ( valu
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\OutputStreamSplitterTest.java,should write bytes to all streams,@ test public void   (  )  throws io exception  {  byte[] value =  { 1 2 3 4 5 }  ;  int i = 3 ;  int i1 = 7 ;  splitter . write ( value i i1 )  ;  verify ( stream1 )  . write ( eq ( value )  eq ( i )  eq ( i1 )  )  ;  verify ( stream2 )  . write ( eq ( v
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\OutputStreamSplitterTest.java,should write to all streams,@ test public void   (  )  throws io exception  {  int value = 1 ;  splitter . write ( value )  ;  verify ( stream1 )  . write ( eq ( value )  )  ;  verify ( stream2 )  . write ( eq ( value )  )  ;  verify ( stream3 )  . write ( eq ( value )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\stream\LimitedReadInputStreamTest.java,should allow reading,"@ test public void   (  )  throws  exception  {  final  limited read input stream stream = new  limited read input stream ( 10 mocked input stream )  ;  assert equals ( "" limited read input stream must delegate reads to the wrapped  input stream"" 1 stream"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\stream\LimitedReadInputStreamTest.java,should halt reading when limit is breached,@ test ( expected =  read limit reached exception . class )  public void   (  )  throws  exception  {  final  limited read input stream stream = new  limited read input stream ( 0 mocked input stream )  ;  stream . read (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\stream\LimitedReadInputStreamTest.java,stand up,@ before public void   (  )  throws  exception  {  mocked input stream = mock (  input stream . class )  ;  when ( mocked input stream . read (  )  )  . then return ( 1 )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\constraint\StatusCodeConstraintTest.java,setup,@ before public void   (  )  {  status code constraint = new  status code constraint ( inclusive   pass )  ;  status code constraint . add status code ( existent   status   code )  ;  response = mock (  http servlet response . class )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\constraint\StatusCodeConstraintTest.java,should return false when code exists,@ test public void   (  )  {  when ( response . get status (  )  )  . then return ( existent   status   code )  ;  assert false ( status code constraint . pass ( response )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\constraint\StatusCodeConstraintTest.java,should return false when not code exists,@ test public void   (  )  {  when ( response . get status (  )  )  . then return ( non   existent   status   code )  ;  assert false ( status code constraint . pass ( response )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\constraint\StatusCodeConstraintTest.java,should return true when code exists,@ test public void   (  )  {  when ( response . get status (  )  )  . then return ( existent   status   code )  ;  assert true ( status code constraint . pass ( response )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\constraint\StatusCodeConstraintTest.java,should return true when not code exists,@ test public void   (  )  {  when ( response . get status (  )  )  . then return ( non   existent   status   code )  ;  assert true ( status code constraint . pass ( response )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\stream\ServletInputStreamWrapperTest.java,set up,@ before public void   (  )  {  stream = mock (  input stream . class )  ;  wrapper = new  servlet input stream wrapper ( stream )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\stream\ServletInputStreamWrapperTest.java,should delegate for availablity,@ test public void   (  )  throws  exception  {  wrapper . available (  )  ;  verify ( stream )  . available (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\stream\ServletInputStreamWrapperTest.java,should delegate for close,@ test public void   (  )  throws  exception  {  wrapper . close (  )  ;  verify ( stream )  . close (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\stream\ServletInputStreamWrapperTest.java,should delegate mark,@ test public void   (  )  throws io exception  {  wrapper . mark ( 10 )  ;  verify ( stream )  . mark ( 10 )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\stream\ServletInputStreamWrapperTest.java,should delegate mark supported,@ test public void   (  )  throws io exception  {  wrapper . mark supported (  )  ;  verify ( stream )  . mark supported (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\stream\ServletInputStreamWrapperTest.java,should delegate reset,@ test public void   (  )  throws io exception  {  wrapper . reset (  )  ;  verify ( stream )  . reset (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\stream\ServletInputStreamWrapperTest.java,should delegate skip,@ test public void   (  )  throws io exception  {  wrapper . skip ( 10l )  ;  verify ( stream )  . skip ( 10l )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\stream\ServletInputStreamWrapperTest.java,should read bytes from input stream,@ test public void   (  )  throws io exception  {  byte[] b arr = new byte[10] ;  wrapper . read ( b arr )  ;  verify ( stream )  . read ( b arr )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\stream\ServletInputStreamWrapperTest.java,should read constrained bytes from input stream,@ test public void   (  )  throws io exception  {  byte[] b arr = new byte[10] ;  wrapper . read ( b arr 2 2 )  ;  verify ( stream )  . read ( b arr 2 2 )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\stream\ServletInputStreamWrapperTest.java,should read from input stream,@ test public void   (  )  throws io exception  {  wrapper . read (  )  ;  verify ( stream )  . read (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\LogArgumentGroupExtractorTest.java,should be equal,"@ test public void   (  )  {  final  log argument group extractor e1 =  log argument group extractor . instance ( """" "" ! 100 200 300"" ""somevar"" """" ""i"" )  ;  final  log argument group extractor e2 =  log argument group extractor . instance ( """" "" ! 100 200"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\LogArgumentGroupExtractorTest.java,should extract escaped percent,"@ test public void   (  )  {  final  string template = ""%%"" ;  final  log argument group extractor expected =  log argument group extractor . instance ( """" """" """" """" ""%"" )  ;  final  matcher m = pattern . matcher ( template )  ;  m . find (  )  ;   log arg"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\LogArgumentGroupExtractorTest.java,should extract formats,"@ test public void   (  )  {  final  string template = ""% >  ! 100 200 300 { somevar format1 format2 } i"" ;  final  log argument group extractor expected =  log argument group extractor . instance ( "" > "" "" ! 100 200 300"" ""somevar"" ""format1 format2"" ""i"" )"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\LogArgumentGroupExtractorTest.java,should extract formats,"@ test public void   (  )  {  final  string template = ""% >  ! 100 200 300 { somevar format1 format2 } i"" ;  final  log argument group extractor expected =  log argument group extractor . instance ( "" > "" "" ! 100 200 300"" ""somevar"" ""format1 format2"" ""i"" )"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\LogArgumentGroupExtractorTest.java,should extract life cycle modifiers,"@ test public void   (  )  {  final  string template = ""% >  ! 100 200 300 { somevar } i"" ;  final  log argument group extractor expected =  log argument group extractor . instance ( "" > "" "" ! 100 200 300"" ""somevar"" """" ""i"" )  ;  final  matcher m = pattern"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\LogArgumentGroupExtractorTest.java,should extract negated status codes,"@ test public void   (  )  {  final  string template = ""% ! 100 200 300 { somevar } i"" ;  final  log argument group extractor expected =  log argument group extractor . instance ( """" "" ! 100 200 300"" ""somevar"" """" ""i"" )  ;  final  matcher m = pattern . mat"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\LogArgumentGroupExtractorTest.java,should extract status codes,"@ test public void   (  )  {  final  string template = ""%100 200 300 { somevar } i"" ;  final  log argument group extractor expected =  log argument group extractor . instance ( """" ""100 200 300"" ""somevar"" """" ""i"" )  ;  final  matcher m = pattern . matcher ("
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\LogArgumentGroupExtractorTest.java,should extract variables,"@ test public void   (  )  {  final  string template = ""% { somevar } i"" ;  final  log argument group extractor expected =  log argument group extractor . instance ( """" """" ""somevar"" """" ""i"" )  ;  final  matcher m = pattern . matcher ( template )  ;  m . fi"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\LogArgumentGroupExtractorTest.java,should have same hash code,"@ test public void   (  )  {  final  log argument group extractor e1 =  log argument group extractor . instance ( """" "" ! 100 200 300"" ""somevar"" """" ""i"" )  ;  final  log argument group extractor e2 =  log argument group extractor . instance ( null "" ! 100 2"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\LogArgumentGroupExtractorTest.java,should have same hash code,"@ test public void   (  )  {  final  log argument group extractor e1 =  log argument group extractor . instance ( ""1"" """" ""somevar"" """" ""i"" )  ;  final  log argument group extractor e2 =  log argument group extractor . instance ( ""1"" null ""somevar"" """" ""i"" )"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\LogArgumentGroupExtractorTest.java,should have same hash code,"@ test public void   (  )  {  final  log argument group extractor e1 =  log argument group extractor . instance ( """" "" ! 100 200 300"" """" """" ""i"" )  ;  final  log argument group extractor e2 =  log argument group extractor . instance ( null "" ! 100 200 300"""
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\LogArgumentGroupExtractorTest.java,should have same hash code,"@ test public void   (  )  {  final  log argument group extractor e1 =  log argument group extractor . instance ( """" "" ! 100 200 300"" ""somevar"" """" """" )  ;  final  log argument group extractor e2 =  log argument group extractor . instance ( null "" ! 100 20"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\LogArgumentGroupExtractorTest.java,should not be equal,"@ test public void   (  )  {  final  log argument group extractor e1 =  log argument group extractor . instance ( """" "" ! 100 200 300"" ""somevar"" """" ""i"" )  ;  assert false ( e1 . equals ( new  object (  )  )  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\LogArgumentGroupExtractorTest.java,should not be equal when comparing null to empty,"@ test public void   (  )  {  final  log argument group extractor e1 =  log argument group extractor . instance ( """" "" ! 100 200 300"" ""somevar"" """" ""i"" )  ;  final  log argument group extractor e2 =  log argument group extractor . instance ( null "" ! 100 2"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\RawInputStreamReaderTest.java,set up,@ before public void   (  )  {  reader =  raw input stream reader . instance (  )  ;  in stream = new  byte array input stream ( data . get bytes (  )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\RawInputStreamReaderTest.java,should copy input stream to output stream,@ test public void   (  )  throws io exception  {   byte array output stream baos = new  byte array output stream (  )  ;  reader . copy to ( in stream baos )  ;  assert equals ( data new  string ( baos . to byte array (  )  )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\RawInputStreamReaderTest.java,should read buffer,@ test public void   (  )  throws io exception  {  byte[] actual = reader . read fully ( in stream )  ;  assert equals ( data new  string ( actual )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\RawInputStreamReaderTest.java,should read buffer with limit,@ test public void   (  )  throws io exception  {  byte[] actual = reader . read fully ( in stream data . length (  )  )  ;  assert equals ( data new  string ( actual )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\RawInputStreamReaderTest.java,should return number of bytes copied,@ test public void   (  )  throws io exception  {   byte array output stream baos = new  byte array output stream (  )  ;  long actual = reader . copy to ( in stream baos )  ;  assert equals ( data . length (  )  actual )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\RawInputStreamReaderTest.java,should throw buffer capacity exception,@ test ( expected =  buffer capacity exception . class )  public void   (  )  throws io exception  {  byte[] actual = reader . read fully ( in stream 1 )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\LogFormatArgumentTest.java,should equal ignoring case,"@ test public void   (  )  {  assert that (  log format argument . percent is ( equal to ignoring case ( ""%"" )  )  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\ExceptionLoggerTest.java,setup,@ before public void   (  )  {  logger ref = mock (  logger . class )  ;  cause = new  illegal state exception (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\ExceptionLoggerTest.java,should leave cause null,@ test public void   (  )  {   runtime exception actual = exception logger . new exception ( test   message  runtime exception . class )  ;  assert null ( actual . get cause (  )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\ExceptionLoggerTest.java,should log error,@ test public void   (  )  {  new  exception logger ( logger ref )  . new exception ( test   message cause  runtime exception . class )  ;  verify ( logger ref )  . error ( test   message cause )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\ExceptionLoggerTest.java,should set cause,@ test public void   (  )  {   runtime exception actual = new  exception logger ( logger ref )  . new exception ( test   message cause  runtime exception . class )  ;  assert equals ( cause actual . get cause (  )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\ExceptionLoggerTest.java,should use message,@ test public void   (  )  {   runtime exception actual = exception logger . new exception ( test   message  runtime exception . class )  ;  assert equals ( test   message actual . get message (  )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\net\IpAddressRangeTest.java,set up,@ before public void   (  )  throws  unknown host exception  {  range1 = new  ip address range ( cidr1 )  ;  range2 = new  ip address range ( address )  ;  range3 = new  ip address range ( cidr ipv6 )  ;  range4 = new  ip address range ( address 48 )  ;  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\net\IpAddressRangeTest.java,should find addresses in range,"@ test public void   (  )  throws  unknown host exception  {  assert true ( range1 . address in range ( ""198 . 51 . 100 . 254"" )  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\net\IpAddressRangeTest.java,should handle exact addresses,"@ test public void   (  )  throws  unknown host exception  {  assert true ( range2 . address in range ( address )  )  ;  assert false ( range2 . address in range ( ""192 . 168 . 1 . 2"" )  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\net\IpAddressRangeTest.java,should handle invalid mask,"@ test public void   (  )  throws  unknown host exception  {  assert true ( range4 . address in range ( address )  )  ;  assert false ( range4 . address in range ( ""192 . 168 . 1 . 2"" )  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\net\IpAddressRangeTest.java,should handle ipv,"@ test public void   (  )  throws  unknown host exception  {  assert true ( range3 . address in range ( ""2001:db8::1"" )  )  ;  assert false ( range3 . address in range ( ""2001:db9::1"" )  )  ;  assert false ( range3 . address in range ( ""127 . 0 . 0 . 1"" )"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\net\IpAddressRangeTest.java,should not find addresses that are not in range,"@ test public void   (  )  throws  unknown host exception  {  assert false ( range1 . address in range ( ""198 . 51 . 104 . 1"" )  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\net\IpAddressRangeTest.java,should throw exception for invalid address,"@ test ( expected =  unknown host exception . class )  public void   (  )  throws  unknown host exception  {  range1 . address in range ( "" invalid"" )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\format\converters\DateConversionFormatTest.java,should get correct pattern,@ test public void   (  )  {   string format =  date conversion format . get pattern (  date conversion format . iso   8601 )  ;  assert not null ( format )  ;  assert equals (  date conversion format . iso   8601   pattern format )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\format\converters\DateConversionFormatTest.java,should get default pattern,"@ test public void   (  )  {   string format =  date conversion format . get pattern ( "" doesn't  exist"" )  ;  assert not null ( format )  ;  assert equals (  date conversion format . rfc   1123   pattern format )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\HttpLogFormatterTest.java, bad handler,"@ test ( expected =  illegal argument exception . class )  public void   (  )  {  final  log argument group extractor extractor =  log argument group extractor . instance ( """" """" """" """" "" bad argument"" )  ;  http log formatter . set logic ( extractor forma"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\HttpLogFormatterTest.java, canonical port handler,"@ test public void   (  )  {  final  log argument group extractor extractor =  log argument group extractor . instance ( """" """" """" """"  log format argument . canonical   port )  ;  http log formatter . set logic ( extractor formatter )  ;  assert that ( for"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\HttpLogFormatterTest.java, escape the message for default,"@ test public void   (  )  {  assert equals ( ""\b\n\t\f\r\\\""' / & <  > "" new  http log formatter ( ""%m"" )  . format ( request response )  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\HttpLogFormatterTest.java, escape the message for json,"@ test public void   (  )  {  assert equals ( ""\\b\\n\\t\\f\\r\\\\\\\""'\\ / & <  > "" new  http log formatter ( ""%m""  http log formatter state . json )  . format ( request response )  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\HttpLogFormatterTest.java, escape the message for plain,"@ test public void   (  )  {  assert equals ( ""\b\n\t\f\r\\\""' / & <  > "" new  http log formatter ( ""%m""  http log formatter state . plain )  . format ( request response )  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\HttpLogFormatterTest.java, escape the message for xml,"@ test public void   (  )  {  assert equals ( ""\n\t\r\\&quot ; &apos ;  / &amp ; &lt ; &gt ; "" new  http log formatter ( ""%m""  http log formatter state . xml )  . format ( request response )  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\HttpLogFormatterTest.java, local address handler,"@ test public void   (  )  {  final  log argument group extractor extractor =  log argument group extractor . instance ( """" """" """" """"  log format argument . local   address )  ;  http log formatter . set logic ( extractor formatter )  ;  assert that ( form"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\HttpLogFormatterTest.java, null handler,"@ test ( expected =  illegal argument exception . class )  public void   (  )  {  final  log argument group extractor extractor =  log argument group extractor . instance ( """" """" """" """" null )  ;  http log formatter . set logic ( extractor formatter )  ;  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\HttpLogFormatterTest.java, percent handler,"@ test public void   (  )  {  final  log argument group extractor extractor =  log argument group extractor . instance ( """" """" """" """"  log format argument . percent )  ;  http log formatter . set logic ( extractor formatter )  ;  assert that ( formatter . "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\HttpLogFormatterTest.java, query string handler,"@ test public void   (  )  {  final  log argument group extractor extractor =  log argument group extractor . instance ( """" """" """" """"  log format argument . query   string )  ;  http log formatter . set logic ( extractor formatter )  ;  assert that ( forma"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\HttpLogFormatterTest.java, remote address handler,"@ test public void   (  )  {  final  log argument group extractor extractor =  log argument group extractor . instance ( """" """" """" """"  log format argument . remote   address )  ;  http log formatter . set logic ( extractor formatter )  ;  assert that ( for"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\HttpLogFormatterTest.java, remote host handler,"@ test public void   (  )  {  final  log argument group extractor extractor =  log argument group extractor . instance ( """" """" """" """"  log format argument . remote   host )  ;  http log formatter . set logic ( extractor formatter )  ;  assert that ( format"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\HttpLogFormatterTest.java, remote user handler,"@ test public void   (  )  {  final  log argument group extractor extractor =  log argument group extractor . instance ( """" """" """" """"  log format argument . remote   user )  ;  http log formatter . set logic ( extractor formatter )  ;  assert that ( format"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\HttpLogFormatterTest.java, request guid handler,"@ test public void   (  )  {  final  log argument group extractor extractor =  log argument group extractor . instance ( """" """" """" """"  log format argument . trace   guid )  ;  http log formatter . set logic ( extractor formatter )  ;  assert that ( formatt"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\HttpLogFormatterTest.java, request header handler,"@ test public void   (  )  {  final  log argument group extractor extractor =  log argument group extractor . instance ( """" """" """" """"  log format argument . request   header )  ;  http log formatter . set logic ( extractor formatter )  ;  assert that ( for"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\HttpLogFormatterTest.java, request line handler,"@ test public void   (  )  {  final  log argument group extractor extractor =  log argument group extractor . instance ( """" """" """" """"  log format argument . request   line )  ;  http log formatter . set logic ( extractor formatter )  ;  assert that ( forma"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\HttpLogFormatterTest.java, request method handler,"@ test public void   (  )  {  final  log argument group extractor extractor =  log argument group extractor . instance ( """" """" """" """"  log format argument . request   method )  ;  http log formatter . set logic ( extractor formatter )  ;  assert that ( for"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\HttpLogFormatterTest.java, request protocol handler,"@ test public void   (  )  {  final  log argument group extractor extractor =  log argument group extractor . instance ( """" """" """" """"  log format argument . request   protocol )  ;  http log formatter . set logic ( extractor formatter )  ;  assert that ( f"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\HttpLogFormatterTest.java, response bytes clf handler,"@ test public void   (  )  {  final  log argument group extractor extractor =  log argument group extractor . instance ( """" """" """" """"  log format argument . response   clf   bytes )  ;  http log formatter . set logic ( extractor formatter )  ;  assert that"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\HttpLogFormatterTest.java, response bytes handler,"@ test public void   (  )  {  final  log argument group extractor extractor =  log argument group extractor . instance ( """" """" """" """"  log format argument . response   bytes )  ;  http log formatter . set logic ( extractor formatter )  ;  assert that ( for"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\HttpLogFormatterTest.java, response header handler,"@ test public void   (  )  {  final  log argument group extractor extractor =  log argument group extractor . instance ( """" """" """" """"  log format argument . response   header )  ;  http log formatter . set logic ( extractor formatter )  ;  assert that ( fo"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\HttpLogFormatterTest.java, response message handler,"@ test public void   (  )  {  final  log argument group extractor extractor =  log argument group extractor . instance ( """" """" """" """"  log format argument . response   reason )  ;  http log formatter . set logic ( extractor formatter )  ;  assert that ( fo"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\HttpLogFormatterTest.java, response time handler microseconds,"@ test public void   (  )  {  final  log argument group extractor extractor =  log argument group extractor . instance ( """" """" """" """"  log format argument . response   time   microseconds )  ;  http log formatter . set logic ( extractor formatter )  ;  ass"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\HttpLogFormatterTest.java, response time handler seconds,"@ test public void   (  )  {  final  log argument group extractor extractor =  log argument group extractor . instance ( """" """" """" """"  log format argument . response   time   seconds )  ;  http log formatter . set logic ( extractor formatter )  ;  assert t"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\HttpLogFormatterTest.java, status code handler,"@ test public void   (  )  {  final  log argument group extractor extractor =  log argument group extractor . instance ( """" """" """" """"  log format argument . status   code )  ;  http log formatter . set logic ( extractor formatter )  ;  assert that ( format"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\HttpLogFormatterTest.java, string handler,"@ test public void   (  )  {  final  log argument group extractor extractor =  log argument group extractor . instance ( """" """" """" """"  log format argument . string )  ;  http log formatter . set logic ( extractor formatter )  ;  assert that ( formatter . g"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\HttpLogFormatterTest.java, time received handler,"@ test public void   (  )  {  final  log argument group extractor extractor =  log argument group extractor . instance ( """" """" """" """"  log format argument . time   received )  ;  http log formatter . set logic ( extractor formatter )  ;  assert that ( form"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\HttpLogFormatterTest.java, url requested handler,"@ test public void   (  )  {  final  log argument group extractor extractor =  log argument group extractor . instance ( """" """" """" """"  log format argument . url   requested )  ;  http log formatter . set logic ( extractor formatter )  ;  assert that ( form"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\HttpLogFormatterTest.java, when escaping the message,public   (  )  throws io exception  {  when ( mock response . get output stream (  )  )  . then return ( new  servlet output stream (  )  {  @ override public void write (  int b )  throws io exception  {   }   }   )  ;  response = new  http servlet response wrapper ( mock response  response mode . passthrough  response mode . readonly )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\HttpLogFormatterTest.java,setup,@ before public void   (  )  throws io exception  {  response . send error ( 0 escape this )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\HttpLogFormatterTest.java,should correctly construct request line,"@ test public void   (  )  {  when ( request . get protocol (  )  )  . then return ( ""http / 1 . 1"" )  ;  when ( request . get requesturi (  )  )  . then return ( "" / index . html"" )  ;  when ( request . get method (  )  )  . then return ( ""get"" )  ;  fin"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\HttpLogFormatterTest.java,should correctly detect escape sequences,"@ test public void   (  )  {  final  http log formatter formatter = new  http log formatter ( ""%h %% %u %u"" )  ;  assert that ( "" should have parsed seven handlers . "" formatter . get handler list (  )  . size (  )  equal to ( 7 )  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\HttpLogFormatterTest.java,should correctly parse empty space,"@ test public void   (  )  {  final  http log formatter formatter = new  http log formatter ( ""%h%%%u%u"" )  ;  assert that ( "" should have parsed four handlers . "" formatter . get handler list (  )  . size (  )  equal to ( 4 )  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\HttpLogFormatterTest.java,should not have set logic by default,@ test public void   (  )  {  assert null ( formatter . get logic (  )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\HttpLogFormatterTest.java,should parse custom time format,"@ test public void   (  )  {  final  string custom date format regex = ""\\d { 4 }  - \\d { 2 }  - \\d { 2 }  \\d { 2 } :\\d { 2 } :\\d { 2 } "" ;  final  http log formatter http log formatter = new  http log formatter ( ""% { yyyy - mm - dd hh:mm:ss } t"" ) "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\HttpLogFormatterTest.java,should parse exclusive status code restrictions,"@ test public void   (  )  {  final  http log formatter formatter = new  http log formatter ( ""% ! 401 403u"" )  ;  final  string expected = ""http: /  / some . place . net / u / r / l"" ;  assert equals ( expected formatter . format ( request response )  ) "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\HttpLogFormatterTest.java,should parse inclusive status code restrictions,"@ test public void   (  )  {  final  http log formatter formatter = new  http log formatter ( ""%200 201u"" )  ;  final  string expected = ""http: /  / some . place . net / u / r / l"" ;  when ( response . get status (  )  )  . then return ( 200 )  ;  assert "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\HttpLogFormatterTest.java,should parse simple time format,"@ test public void   (  )  {  final  string default date format regex = ""\\d { 4 }  - \\d { 2 }  - \\d { 2 }  \\d { 2 } :\\d { 2 } :\\d { 2 } "" ;  final  http log formatter formatter = new  http log formatter ( ""%t"" )  ;  assert equals ( 1 formatter . get"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\HttpLogFormatterTest.java,should preserve string formatting,"@ test public void   (  )  {  final  http log formatter formatter = new  http log formatter ( ""%%log output%% %u"" )  ;  final  string expected = ""%log output% http: /  / some . place . net / u / r / l"" ;  assert equals ( expected formatter . format ( requ"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\HttpLogFormatterTest.java,should replace token with request guid,"@ test public void   (  )  {  final  http log formatter formatter = new  http log formatter ( ""%""  +   log format argument . trace   guid )  ;  final  string expected = ""test - guid"" ;   vector <  string >  req guid values = new  vector <  >  (  )  ;  req"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\pooling\GenericResourcePoolTest.java,perform,@ override public void   (  target resource )  throws  resource context exception  {  active resource count +  +  ;  try  {  while  ( run )   {   thread . sleep ( 10 )  ;   }   }  catch  (   interrupted exception ignored )   {   }  finally  {  active reso
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\pooling\GenericResourcePoolTest.java,run,@ override public void   (  )  {  active thread count +  +  ;  try  {  resource pool . use ( context )  ;   }  finally  {  active thread count -  -  ;   }   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\pooling\GenericResourcePoolTest.java,should allow returns from context,@ test public void   (  )  {  assert true ( resource pool . use ( new  resource context <  target  boolean >  (  )  {  @ override public  boolean perform (   target resource )  {  return true ;   }   }   )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\pooling\GenericResourcePoolTest.java,should generate new resources,@ test public void   (  )  {  resource pool = new  generic blocking resource pool <  >  (  target::new 0 5 )  ;  resource pool . use ( new  simple resource context <  target >  (  )  {  @ override public void perform (   target resource )  {  assert not n
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\pooling\GenericResourcePoolTest.java,should handle thread pressure,@ test public void   (  )  throws  exception  {  int num test threads = 8 ;  run = true ;  active thread count = 0 ;  active resource count = 0 ;  final  simple resource context <  target >  context = new  simple resource context <  target >  (  )  {  @ o
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\pooling\GenericResourcePoolTest.java,should prime pool with minimum size,@ test public void   (  )  {  resource pool . set minimum pool size ( 2 )  ;  assert that ( resource pool . size (  )  equal to ( 2 )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\pooling\GenericResourcePoolTest.java,should reduce pool with maximum size,@ test public void   (  )  {  resource pool . set minimum pool size ( 4 )  ;  resource pool . set minimum pool size ( 1 )  ;  resource pool . set maximum pool size ( 3 )  ;  assert that ( resource pool . size (  )  equal to ( 3 )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\pooling\GenericResourcePoolTest.java,stand up,@ before public void   (  )  {  resource pool = new  generic blocking resource pool <  >  (  target::new min pool size max pool size )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\ReflectionToolsTest.java,should construct without parameters,@ test public void   (  )  throws  exception  {  assert not null (  reflection tools . construct (  string . class )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\ReflectionToolsTest.java,should correctly match paramter lists,"@ test public void   (  )  {  assert equals ( ""a  magical  string""  reflection tools . construct (  string . class ""a  magical  string"" )  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\ReflectionToolsTest.java,should correctly match paramter lists with null,@ test public void   (  )  {   exception ex =  reflection tools . construct (  exception . class null null )  ;  assert not null ( ex )  ;  assert null ( ex . get message (  )  )  ;  assert null ( ex . get cause (  )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\proxy\TargetHostInfoTest.java,get proxied host uri   returns expected uri,"@ test public void   (  )  throws  exception  {   target host info target host info = new  target host info ( target host )  ;  assert equals ( "" returned uri was not the expected uri"" new uri ( target host )  target host info . get proxied host uri (  ) "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\proxy\TargetHostInfoTest.java,get proxied host uri   returns null on invalid uri,"@ test public void   (  )  throws  exception  {   target host info target host info = new  target host info ( invalid target host )  ;  assert null ( "" returned uri was null as expected"" target host info . get proxied host uri (  )  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\proxy\TargetHostInfoTest.java,get proxied host url   returns expected url,"@ test public void   (  )  throws  exception  {   target host info target host info = new  target host info ( target host )  ;  assert equals ( "" returned url was not the expected url"" new url ( ""http"" ""otherhost . com""  - 1 """" )  target host info . get p"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\proxy\TargetHostInfoTest.java,get proxied host url   returns null on invalid url,"@ test public void   (  )  throws  exception  {   target host info target host info = new  target host info ( invalid target host )  ;  assert null ( "" returned url was null as expected"" target host info . get proxied host url (  )  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\reflection\ReflectionToolsTest.java, simple class,public   (  string x  integer y )  {  this . x = x ;  this . y = y ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\reflection\ReflectionToolsTest.java,setup,@ before public void   (  )  {  simple class constructor = null ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\reflection\ReflectionToolsTest.java,should construct without parameters,@ test public void   (  )  throws  exception  {  assert not null (  reflection tools . construct (  string . class )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\reflection\ReflectionToolsTest.java,should correctly match paramter lists,"@ test public void   (  )  {   assert . assert equals ( ""a  magical  string""  reflection tools . construct (  string . class ""a  magical  string"" )  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\reflection\ReflectionToolsTest.java,should correctly match paramter lists with null,"@ test public void   (  )  {   exception ex =  reflection tools . construct (  exception . class null null )  ;  assert not null ( ""should not be null"" ex )  ;  assert null ( ""should not have message"" ex . get message (  )  )  ;  assert null ( ""should not"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\reflection\ReflectionToolsTest.java,should not fail on null references,@ test public void   (  )  {   class[] actual ;   object obj = null ;  actual =  reflection tools . to class array ( obj )  ;  assert null ( actual[0] )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\reflection\ReflectionToolsTest.java,should return array of associated classes,"@ test public void   (  )  {   integer i = 42 ;   string s = ""string"" ;   double d = 101 . 5 ;   class[] actual ;  actual =  reflection tools . to class array ( i s d null )  ;  assert equals ( ""integer""  integer . class actual[0] )  ;  assert equals ( ""s"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\reflection\ReflectionToolsTest.java,should return constructors with matching signature,@ test public void   (  )  throws  no such method exception  {   class <  ?  > [] type array =  {  string . class  integer . class }  ;  simple class constructor =  reflection tools . get constructor (  simple class . class type array )  ;  assert that ( 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\reflection\ReflectionToolsTest.java,should support empty constructors,"@ test public void   (  )  {   assert . assert equals ( """"  reflection tools . construct (  string . class )  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\reflection\ReflectionToolsTest.java,should support empty params,@ test public void   (  )  throws  no such method exception  {   class <  ?  > [] type array = new  class <  ?  > [0] ;  simple class constructor =  reflection tools . get constructor (  simple class . class type array )  ;  assert that ( simple class con
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\reflection\ReflectionToolsTest.java,should throw exception if constructor is not found,@ test ( expected =  no such method exception . class )  public void   (  )  throws  no such method exception  {   class <  ?  > [] type array =  {  integer . class  string . class }  ;   reflection tools . get constructor (  simple class . class type arr
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\reflection\ReflectionToolsTest.java,to string,"@ override public  string   (  )  {  return ""[""  +  x  +  ""]: "" +  y ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\regex\KeyedRegexExtractorTest.java,should capture user with negative id,"@ test public void   (  )  {  final  keyed regex extractor <  object >  extractor = new  keyed regex extractor <  >  (  )  ;  final  object expected key = new  object (  )  ;  final  string pattern = "" . * / servers /  ( [ - |\\w] +  )  /  ?  . *"" ;  extr"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\regex\KeyedRegexExtractorTest.java,should return first capture group,"@ test public void   (  )  {  final  keyed regex extractor <  object >  extractor = new  keyed regex extractor <  >  (  )  ;  final  object expected key = new  object (  )  ;  final  string pattern = ""a ( [^z] +  ) z"" ;  extractor . add pattern ( pattern "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\regex\KeyedRegexExtractorTest.java,should use null keys,"@ test public void   (  )  {  final  keyed regex extractor <  object >  extractor = new  keyed regex extractor <  >  (  )  ;  final  string pattern = ""a ( [^z] +  ) z"" ;  extractor . add pattern ( pattern )  ;   extractor result result = extractor . extra"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\regex\RegexSelectorTest.java,before all,"@ before public final void   (  )  {  selector = new  regex selector <  >  (  )  ;  selector . add pattern ( ""\\d\\d\\d[ +  - ]"" ""not expected"" )  ;  selector . add pattern ( ""[ +  - ]\\d\\d\\d"" ""expected"" )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\regex\RegexSelectorTest.java,should clear stored selectors,"@ test public void   (  )  {  final  selector result <  string >  found result = selector . select ( "" - 124"" )  ;  assert true ( "" selector must have a key . "" found result . has key (  )  )  ;  assert equals ( "" selector should select expected key . "" """
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\regex\RegexSelectorTest.java,should return empty result with no match,"@ test public void   (  )  {  final  selector result <  string >  empty result = selector . select ( ""expected"" )  ;  assert false ( "" selector must not have a key . "" empty result . has key (  )  )  ;  assert null ( "" selector should select expected key "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\regex\RegexSelectorTest.java,should select on regex match,"@ test public void   (  )  {  final  selector result <  string >  found result = selector . select ( "" - 124"" )  ;  assert true ( "" selector must have a key . "" found result . has key (  )  )  ;  assert equals ( "" selector should select expected key . "" """
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\servlet\http\RouteDestinationTest.java,set up,"@ before public void   (  )  {  route dst1 = new  route destination ( ""dst1"" "" / service / dst1"" new  float ( 1 . 0 )  )  ;  route dst2 = new  route destination ( ""dst2"" "" / service / dst2"" new  float (  - 1 . 0 )  )  ;  route dst3 = new  route destinatio"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\servlet\http\RouteDestinationTest.java,should compare destinations with uri,@ test public void   (  )  {  int compared = route dst1 . compare to ( route dst4 )  ;  assert that ( compared less than ( 0 )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\servlet\http\RouteDestinationTest.java,should have different hash per destination,@ test public void   (  )  {   integer h1 = route dst1 . hash code (  )  ;   integer h2 = route dst2 . hash code (  )  ;  assert that ( h1 not ( equal to ( h2 )  )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\servlet\http\RouteDestinationTest.java,should return destination with first destination id,@ test public void   (  )  {   integer compared = route dst1 . compare to ( route dst3 )  ;  assert that ( compared less than ( 0 )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\servlet\http\RouteDestinationTest.java,should return destination with highest quality,@ test public void   (  )  {  int compared = route dst1 . compare to ( route dst2 )  ;  assert equals ( compared 1 )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\RegexListTest.java,should find,@ test public void   (  )  {  assert not null ( regex list . find ( match   against )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\RegexListTest.java,should match,@ test public void   (  )  {  assert not null ( regex list . matches ( match   against )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\RegexListTest.java,should not match,@ test public void   (  )  {  assert null ( regex list . matches ( match   against )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\RegexListTest.java,should return null for find,@ test public void   (  )  {  assert null ( new  regex list (  )  . find ( match   against )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\RegexListTest.java,should return null for matches,@ test public void   (  )  {  assert null ( new  regex list (  )  . matches ( match   against )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\RegexListTest.java,stand up,@ before public void   (  )  {  regex list = new  regex list (  )  ;  regex list . add ( match   regex )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\SetUtilitiesTest.java,should return false if first set is null,"@ test public void   (  )  {   set <  string >  one = null ;   set <  string >  two = new  hash set (  )  ;  two . add ( ""abc"" )  ;  assert false (  set utilities . null safe equals ( one two )  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\SetUtilitiesTest.java,should return false if non null sets are different,"@ test public void   (  )  {   set <  string >  one = new  hash set (  )  ;  one . add ( ""abc"" )  ;   set <  string >  two = new  hash set (  )  ;  two . add ( ""def"" )  ;  assert false (  set utilities . null safe equals ( one two )  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\SetUtilitiesTest.java,should return false if non null sets are same but different case,"@ test public void   (  )  {   set <  string >  one = new  hash set (  )  ;  one . add ( ""abc"" )  ;   set <  string >  two = new  hash set (  )  ;  two . add ( "" abc"" )  ;  assert false (  set utilities . null safe equals ( one two )  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\SetUtilitiesTest.java,should return false if second set is null,"@ test public void   (  )  {   set <  string >  one = new  hash set (  )  ;  one . add ( ""abc"" )  ;   set <  string >  two = null ;  assert false (  set utilities . null safe equals ( one two )  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\SetUtilitiesTest.java,should return true if both sets are null,@ test public void   (  )  {   set <  string >  one = null ;   set <  string >  two = null ;  assert true (  set utilities . null safe equals ( one two )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\SetUtilitiesTest.java,should return true if non null sets are same,"@ test public void   (  )  {   set <  string >  one = new  hash set (  )  ;  one . add ( ""abc"" )  ;   set <  string >  two = new  hash set (  )  ;  two . add ( ""abc"" )  ;  assert true (  set utilities . null safe equals ( one two )  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\StringUriUtilitiesTest.java,should add leading slash,"@ test public void   (  )  {   string uri1 = ""one / two"" ;   string uri2 = ""three / four"" ;   string expected = "" / ""  +  uri1  +  "" / "" +  uri2 ;   string actual =  string uri utilities . concat uris ( uri1 uri2 )  ;  assert equals ( expected actual )  ;"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\StringUriUtilitiesTest.java,should add root reference,"@ test public void   (  )  {  assert equals ( "" should add a root reference to a uri"" "" / a / resource""  string uri utilities . format uri ( ""a / resource"" )  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\StringUriUtilitiesTest.java,should change when encoding encodable characters,"@ test public void   (  )  {   string uri1 = ""key$test"" ;   string uri2 =  string uri utilities . encode uri ( uri1 )  ;  assert equals ( uri2 ""key%24test"" )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\StringUriUtilitiesTest.java,should handle one string,"@ test public void   (  )  {   string uri1 = ""one / two / "" ;   string expected = "" / one / two / "" ;   string actual =  string uri utilities . concat uris ( uri1 )  ;  assert equals ( expected actual )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\StringUriUtilitiesTest.java,should handle single,"@ test public void   (  )  {   string uri1 = "" / "" ;   string uri2 = "" / "" ;   string expected = "" /  / "" ;   string actual =  string uri utilities . concat uris ( uri1 uri2 )  ;  assert equals ( expected actual )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\StringUriUtilitiesTest.java,should identify appended fragments,"@ test public void   (  )  {  assert equals ( 24  string uri utilities . index of uri fragment ( "" / requested / uri / versioned / v1"" "" / v1"" )  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\StringUriUtilitiesTest.java,should identify embedded fragments,"@ test public void   (  )  {  assert equals ( 10  string uri utilities . index of uri fragment ( "" / versioned / v1 / requested / uri"" "" / v1"" )  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\StringUriUtilitiesTest.java,should identify prepended fragments,"@ test public void   (  )  {  assert equals ( 0  string uri utilities . index of uri fragment ( "" / v1 / requested / uri"" "" / v1"" )  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\StringUriUtilitiesTest.java,should identify root fragments,"@ test public void   (  )  {  assert equals ( 0  string uri utilities . index of uri fragment ( "" / v1"" "" / v1"" )  )  ;  assert equals ( 0  string uri utilities . index of uri fragment ( "" / v1 / "" "" / v1"" )  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\StringUriUtilitiesTest.java,should not change when encoding non encodable characters,"@ test public void   (  )  {   string uri1 = ""qwerasdfjklvcxhjkfe - 3djfkdfs"" ;   string uri2 =  string uri utilities . encode uri ( uri1 )  ;  assert equals ( uri2 uri1 )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\StringUriUtilitiesTest.java,should not identify partially matching embedded fragments,"@ test public void   (  )  {  assert equals (  - 1  string uri utilities . index of uri fragment ( "" / versioned / v12 / requested / uri"" "" / v1"" )  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\StringUriUtilitiesTest.java,should not remove extra slash,"@ test public void   (  )  {   string uri1 = ""one / two / "" ;   string uri2 = "" / three / four / "" ;   string expected = "" / one / two /  / three / four / "" ;   string actual =  string uri utilities . concat uris ( uri1 uri2 )  ;  assert equals ( expected"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\StringUriUtilitiesTest.java,should remove trailing slash,"@ test public void   (  )  {  assert equals ( "" should remove trailing slashes from a uri"" "" / a / resource""  string uri utilities . format uri ( "" / a / resource / "" )  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\StringUriUtilitiesTest.java,should removing extra leading slashes,"@ test public void   (  )  {  assert equals ( "" should remove multiple leading slasshes from a uri"" "" / a / resource""  string uri utilities . format uri ( "" /  /  /  /  /  /  /  /  /  / a / resource /  /  / "" )  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\StringUriUtilitiesTest.java,should return root contexturi,"@ test public void   (  )  {  assert equals ( "" should not return an empty string when passed a root context uri"" "" / ""  string uri utilities . format uri ( "" / "" )  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\StringUriUtilitiesTest.java,should return root contexturi,"@ test public void   (  )  {  assert equals ( "" should not return an empty string when passed a root context uri"" "" / ""  string uri utilities . format uri ( "" /  /  /  /  /  /  /  /  / "" )  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\StringUriUtilitiesTest.java,should return root contexturi,"@ test public void   (  )  {  assert equals ( "" should not return an empty string when passed a root context uri"" "" / ""  string uri utilities . format uri ( """" )  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\StringUriUtilitiesTest.java,should skip empty strings,"@ test public void   (  )  {   string uri1 = ""one / two / "" ;   string uri2 = "" / three / four / "" ;   string expected = "" / one / two /  / three / four / "" ;   string actual =  string uri utilities . concat uris ( """" "" "" uri1 "" "" """" uri2 """" )  ;  assert "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\thread\KeyedStackLockTest.java,assert threads,public static void   (  string msg  keyed stack lock test thread .  .  .  threads )  throws  interrupted exception  {  for  (   keyed stack lock test thread t : threads )   {  if  (  ! t . started (  )  )   {  t . exec (  )  ;   }   }  int iterations = 0 ;  while  (  ! threads finished ( threads )  &&  +  + iterations  <  50 )   {   thread . sleep ( 10 )  ;   }  for  (   keyed stack lock test thread t : threads )   {  assert true ( msg t . passed (  )  )  ;   }   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\thread\KeyedStackLockTest.java,should fail if not locked,@ test ( expected =  illegal state exception . class )  public void   (  )  throws  exception  {  lock . unlock ( key   a )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\thread\KeyedStackLockTest.java,should fail if trying to unlock using wrong key,"@ test ( expected =  illegal argument exception . class )  public void   (  )  throws  exception  {  assert true ( ""is now locked"" lock . try lock ( key   a )  )  ;  lock . unlock ( key   b )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\thread\KeyedStackLockTest.java,should fail with different key,"@ test public void   (  )  throws  exception  {  assert false ( ""is not locked yet"" lock . is locked (  )  )  ;  assert threads ( "" should lock when unlocked"" new  turn key locking thread ( lock key   a )  )  ;  assert true ( ""should now be locked"" lock ."
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\thread\KeyedStackLockTest.java,should pass if same thread attempts to lock with same key,@ test public void   (  )  throws  exception  {  assert true ( lock . try lock ( key   a )  )  ;  assert true ( lock . try lock ( key   a )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\thread\KeyedStackLockTest.java,should pass with same key,"@ test public void   (  )  throws  exception  {  assert threads ( "" should pass multiple threads using the same key"" new  turn key locking thread ( lock key   a )  new  turn key locking thread ( lock key   a )  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\thread\KeyedStackLockTest.java,should process queued lock requests using different keys,@ test public void   (  )  throws  exception  {  final  turn key locking thread threada = new  turn key locking thread ( lock key   a )  ;  final  turn key locking blocking thread threadb = new  turn key locking blocking thread ( lock key   b )  ;  assert
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\thread\KeyedStackLockTest.java,should queue multiple lock requests using different keys,@ test public void   (  )  throws  exception  {  assert true ( lock . try lock ( key   a )  )  ;  assert false ( lock . try lock ( key   b )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\thread\KeyedStackLockTest.java,should unlock if same key,"@ test public void   (  )  throws  exception  {  lock . try lock ( key   a )  ;  assert true ( ""before"" lock . is locked (  )  )  ;  lock . unlock ( key   a )  ;  assert false ( ""after"" lock . is locked (  )  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\thread\KeyedStackLockTest.java,should unlock one of many if same key,"@ test public void   (  )  throws  exception  {  assert true ( ""key   a"" lock . try lock ( key   a )  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\thread\KeyedStackLockTest.java,stand up,@ before public void   (  )  {  lock = new  keyed stack lock (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\thread\KeyedStackLockTest.java,threads finished,public static boolean   (  keyed stack lock test thread .  .  .  threads )  {  for  (   keyed stack lock test thread t : threads )   {  if  (  ! t . finished (  )  )   {  return false ;   }   }  return true ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\thread\TurnKeyLockingBlockingThread.java, turn key locking blocking thread,public   (  keyed stack lock lock reference  object key )  {  super ( lock reference key )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\thread\TurnKeyLockingBlockingThread.java,toggle lock state,@ override protected void   (  )  {  if  ( lock )   {  lock reference . lock ( key )  ;  passed = true ;   }  else  {  lock reference . unlock ( key )  ;   }  lock =  ! lock ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\thread\TurnKeyLockingThread.java, turn key locking thread,public   (  keyed stack lock lock reference  object key )  {  this . lock reference = lock reference ;  this . key = key ;  finished = false ;  passed = false ;  run = false ;  should stop = false ;  lock = true ;  super . start (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\thread\TurnKeyLockingThread.java,exec,@ override public synchronized void   (  )  {  run = true ;  notify (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\thread\TurnKeyLockingThread.java,finished,@ override public boolean   (  )  {  return finished ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\thread\TurnKeyLockingThread.java,kill,@ override public void   (  )  {  should stop = true ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\thread\TurnKeyLockingThread.java,passed,@ override public boolean   (  )  {  return passed ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\thread\TurnKeyLockingThread.java,run,@ override public void   (  )  {  while  (  ! should stop )   {  synchronized  ( this )   {  if  (  ! run )   {  try  {  wait (  )  ;   }  catch  (   interrupted exception ie )   {  return ;   }   }  else  {  finished = false ;  toggle lock state (  )  ; 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\thread\TurnKeyLockingThread.java,started,@ override public boolean   (  )  {  return run ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\thread\TurnKeyLockingThread.java,toggle lock state,protected void   (  )  {  if  ( lock )   {  passed = lock reference . try lock ( key )  ;   }  else  {  lock reference . unlock ( key )  ;   }  lock =  ! lock ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\api-validator-filter\src\main\java\org\openrepose\filters\apivalidator\ApiValidatorFilter.java, api validator filter,@ inject public   (  configuration service configuration service  optional <  metrics service >  metrics service @ value (  repose spring properties . core . config   root )   string configuration root )  {  this . configuration service = configuration se
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\api-validator-filter\src\main\java\org\openrepose\filters\apivalidator\ApiValidatorFilter.java,destroy,@ override public void   (  )  {  configuration service . unsubscribe from ( config file name handler factory )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\api-validator-filter\src\main\java\org\openrepose\filters\apivalidator\ApiValidatorFilter.java,do filter,@ override public void   (  servlet request request  servlet response response  filter chain chain )  throws io exception   servlet exception  {   api validator handler handler = handler factory . build handler (  )  ;  if  ( handler  =  =  null )   {  lo
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\api-validator-filter\src\main\java\org\openrepose\filters\apivalidator\ApiValidatorFilter.java,init,"@ override public void   (  filter config filter config )  throws  servlet exception  {  log . trace ( ""api  validator filter initializing .  .  . "" )  ;  config file name = new  filter config helper ( filter config )  . get filter config ( default   conf"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\transform\xslt\AbstractXslTransformTest.java, sample xsl transform,public   (  templates    transformation templates )  {  super (    transformation templates )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\transform\xslt\AbstractXslTransformTest.java,setup,@ before public void   (  )  {  templates = mock (  templates . class )  ;  xsl transform = new  sample xsl transform ( templates )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\transform\xslt\AbstractXslTransformTest.java,should return non null for transformer pool,@ test public void   (  )  {   object pool <  transformer >  transformer pool ;  transformer pool = xsl transform . get xsl transformer pool (  )  ;  assert not null ( transformer pool )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\transform\xslt\AbstractXslTransformTest.java,should return pool with default min size of one,@ test public void   (  )  throws  exception  {  when ( templates . new transformer (  )  )  . then return ( mock (  transformer . class )  )  ;   integer expected  actual ;   object pool <  transformer >  transformer pool ;  expected = 1 ;  transformer p
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\transform\xslt\AbstractXslTransformTest.java,should throw exception if xsl transformer can not be generated,@ test ( expected =  xslt transformation exception . class )  public void   (  )  throws  exception  {  when ( templates . new transformer (  )  )  . then throw ( new  transformer configuration exception (  )  )  ;  new  sample xsl transform ( templates )
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\transform\jaxb\AbstractJaxbTransformTest.java, sample jaxb transform,public   ( jaxb context ctx )  {  super ( ctx )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\transform\jaxb\AbstractJaxbTransformTest.java,setup,@ before public void   (  )  {  jaxb context = mock ( jaxb context . class )  ;  jaxb transform = new  sample jaxb transform ( jaxb context )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\transform\jaxb\AbstractJaxbTransformTest.java,should return non null for marshaller pool,@ test public void   (  )  {  assert not null ( jaxb transform . get marshaller pool (  )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\transform\jaxb\AbstractJaxbTransformTest.java,should return non null for unmarshaller pool,@ test public void   (  )  {  assert not null ( jaxb transform . get unmarshaller pool (  )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\transform\jaxb\AbstractJaxbTransformTest.java,should throw exception if can not create marshaller pool,"@ test ( expected =  resource construction exception . class )  public void   (  )  throws  exception  {  when ( jaxb context . create marshaller (  )  )  . then throw ( new jaxb exception ( ""test"" )  )  ;  jaxb transform . get marshaller pool (  )  . bor"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\transform\jaxb\AbstractJaxbTransformTest.java,should throw exception if can not create unmarshaller pool,"@ test ( expected =  resource construction exception . class )  public void   (  )  throws  exception  {  when ( jaxb context . create unmarshaller (  )  )  . then throw ( new jaxb exception ( ""test"" )  )  ;  jaxb transform . get unmarshaller pool (  )  ."
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\transform\xslt\XsltTransformConstructionTest.java,set up,@ before public void   (  )  throws  exception  {  xslt transform construction = new  xslt transform construction (  )  ;  transformer = mock (  transformer . class )  ;  templates = mock (  templates . class )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\transform\xslt\XsltTransformConstructionTest.java,should return type pool,@ test public void   (  )  throws  exception  {  when ( templates . new transformer (  )  )  . then return ( transformer )  ;  assert that ( xslt transform construction . generate xslt resource pool ( templates )  is ( instance of (  object pool . class )
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\api-validator-filter\src\main\java\org\openrepose\filters\apivalidator\ApiValidatorHandlerFactory.java, api validator handler factory,public   (  configuration service configuration service  string configuration root  string config  optional <  metrics service >  metrics service )  {  this . configuration service = configuration service ;  this . config root = configuration root ;  this . config = config ;  this . metrics service = metrics service ;  this . wadl listener = new  api validator wadl listener (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\api-validator-filter\src\main\java\org\openrepose\filters\apivalidator\ApiValidatorHandlerFactory.java,add wadl listener,"private void   (  string wadl )  {  if  ( wadl  =  =  null )   {  return ;   }  log . info ( "" watching wadl: ""  +  wadl )  ;  configuration service . subscribe to ( ""api - validator"" wadl wadl listener new  generic resource configuration parser (  )  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\api-validator-filter\src\main\java\org\openrepose\filters\apivalidator\ApiValidatorHandlerFactory.java,build handler,public  api validator handler   (  )  {  synchronized  ( config lock )   {  initialize (  )  ;  if  (  ! initialized )   {  return null ;   }  return new  api validator handler ( default validator validators multi role match delegating mode metrics service )  ;   }   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\api-validator-filter\src\main\java\org\openrepose\filters\apivalidator\ApiValidatorHandlerFactory.java,configuration updated,"@ override public void   (  configuration resource config )  {  log . info ( ""wadl file changed: ""  +  config . name (  )  )  ;  synchronized  ( wadl lock )   {  if  ( validators  =  =  null )   {  return ;   }  boolean validator forwadl found = false ;  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\api-validator-filter\src\main\java\org\openrepose\filters\apivalidator\ApiValidatorHandlerFactory.java,get normalized path,"private  string   (  string uri )  {   string path = uri ;  try  {  path = new url ( uri )  . to string (  )  ;   }  catch  (   malformedurl exception ex )   {  log . warn ( "" invalid url: ""  +  uri ex )  ;   }  return path ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\api-validator-filter\src\main\java\org\openrepose\filters\apivalidator\ApiValidatorHandlerFactory.java,get wadl listener, api validator wadl listener   (  )  {  return wadl listener ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\api-validator-filter\src\main\java\org\openrepose\filters\apivalidator\ApiValidatorHandlerFactory.java,get wadl path, string   (  string uri )  {  return new  file ( config root uri )  . touri (  )  . to string (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\api-validator-filter\src\main\java\org\openrepose\filters\apivalidator\ApiValidatorHandlerFactory.java,initialize,"private void   (  )  {  synchronized  ( wadl lock )   {  if  ( initialized || validator configuration  =  =  null )   {  return ;   }   validator configurator validator configurator = new  validator configurator ( validator configuration config root config )  ;  multi role match = validator configuration . is multi role match (  )  ;  default validator = validator configurator . get default validator (  )  ;  validators = validator configurator . get validators (  )  ;  delegating mode = validator configuration . get delegating (  )   !  =  null ;  for  (   validator info validator : validators )   {  log . debug ( "" adding listener for  {  }  :  {  } "" validator . get name (  )  validator . get uri (  )  )  ;  add wadl listener ( validator . get uri (  )  )  ;   }  initialized = true ;   }   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\api-validator-filter\src\main\java\org\openrepose\filters\apivalidator\ApiValidatorHandlerFactory.java,is initialized,@ override public boolean   (  )  {  return is initialized ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\api-validator-filter\src\main\java\org\openrepose\filters\apivalidator\ApiValidatorHandlerFactory.java,set validators,void   (  list <  validator info >  validators )  {  this . validators = validators ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\api-validator-filter\src\main\java\org\openrepose\filters\apivalidator\ApiValidatorHandlerFactory.java,unsubscribe all wadl listeners,"private void   (  )  {  synchronized  ( wadl lock )   {  initialized = false ;  if  ( validators  =  =  null )   {  return ;   }  for  (   validator info info : validators )   {  if  (  string utils . is not blank ( info . get uri (  )  )  )   {  configuration service . unsubscribe from ( info . get uri (  )  wadl listener )  ;   }  if  ( info . get validator (  )   !  =  null )   {  log . debug ( ""destroying validator:  {  } "" info . get name (  )  )  ;  info . get validator (  )  . destroy (  )  ;   }   }   }   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\api-validator-filter\src\main\java\org\openrepose\filters\apivalidator\ApiValidatorHandler.java, api validator handler,public   (  validator info default validator  list <  validator info >  validators boolean multi role match boolean delegating mode  optional <  metrics service >  metrics service )  {  this . validators = new  array list <  >  ( validators . size (  )  )  ;  this . matched roles = new  hash set <  >  (  )  ;  this . validators . add all ( validators )  ;  this . multi role match = multi role match ;  this . default validator = default validator ;  this . delegating mode = delegating mode ;  this . metrics service = metrics service ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\api-validator-filter\src\main\java\org\openrepose\filters\apivalidator\ApiValidatorHandler.java,append default validator,private boolean   (  list <  validator info >  validator list )  {  if  ( default validator  !  =  null )   {  if  (  ! multi role match )   {  validator list . add ( default validator )  ;   }  else if  (  ! validator list . contains ( default validator )  )   {  validator list . add ( 0 default validator )  ;   }  return true ;   }  return false ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\api-validator-filter\src\main\java\org\openrepose\filters\apivalidator\ApiValidatorHandler.java,do filter,"public void   (  http servlet request request  http servlet response response  filter chain chain )  {   http servlet request wrapper wrapped request = new  http servlet request wrapper ( request )  ;   list <  string >  roles = wrapped request . get preferred splittable headers (  open stack service header . roles )  ;  if  ( roles . is empty (  )  )   {  roles =  collections . singleton list ( """" )  ;   }   result last validator result = null ;  boolean is valid = false ;  try  {  matched roles . clear (  )  ;   list <  validator info >  matched validators = get validators for roles ( roles )  ;  if  (  ! matched validators . is empty (  )  )   {  for  (   validator info validator info : matched validators )   {   validator validator = validator info . get validator (  )  ;  if  ( validator  =  =  null )   {  log . warn ( "" validator not available for request:  {  } "" validator info . get uri (  )  )  ;  response . set status (  http servlet response . sc   bad   gateway )  ;   }  else  {  last validator result = validator . validate ( wrapped request response chain )  ;  is valid = last validator result  !  =  null && last validator result . valid (  )  ;  if  ( is valid )   {  break ;   }   }   }  if  (  ! is valid )   {  metrics service . if present ( ms  -  >   {   aggregate meter factory meter factory = ms . create summing meter factory ( invalid   request   metric   prefix )  ;  matched roles . for each ( role  -  >  meter factory . create meter ( role )  . mark (  )  )  ;   }   )  ;  if  ( multi role match )   {  send multi match error response ( last validator result response )  ;   }   }   }  else  {  response . send error (  http servlet response . sc   forbidden )  ;   }   }  catch  (   validator exception|wadl exception|io exception e )   {  log . error ( "" error processing validation"" e )  ;  response . set status (  http servlet response . sc   bad   gateway )  ;   }   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\api-validator-filter\src\main\java\org\openrepose\filters\apivalidator\ApiValidatorHandler.java,get error result,private  error result   (  result last result )  {  if  ( last result instanceof  error result )   {  return  (  error result ) last result ;   }  return null ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\api-validator-filter\src\main\java\org\openrepose\filters\apivalidator\ApiValidatorHandler.java,get validators for roles,protected  list <  validator info >    (  list <  string >  list roles )  {   set <  validator info >  validator set = new  linked hash set <  >  (  )  ;   set <  string >  roles = new  hash set <  >  ( list roles )  ;  for  (   validator info validator : validators )   {  for  (   string validator roles : validator . get roles (  )  )   {  if  ( roles . contains ( validator roles )  )   {  validator set . add ( validator )  ;  matched roles . add ( validator roles )  ;   }   }   }   list <  validator info >  validator list = new  array list <  >  ( validator set )  ;  if  ( append default validator ( validator list )  )   {  matched roles . add all ( roles )  ;   }  return  ! multi role match &&  ! validator list . is empty (  )   ?  validator list . sub list ( 0 1 )  : validator list ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\api-validator-filter\src\main\java\org\openrepose\filters\apivalidator\ApiValidatorHandler.java,send multi match error response,"private void   (  result result  http servlet response response )  {  try  {   error result error = get error result ( result )  ;  if  ( error  !  =  null &&  ! delegating mode )   {  response . set status ( error . code (  )  )  ;  response . send error ( error . code (  )  error . message (  )  )  ;   }   }  catch  (   validator exception|wadl exception|io exception e )   {  log . error ( "" some error"" e )  ;  response . set status (  http servlet response . sc   bad   gateway )  ;   }   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\api-validator-filter\src\main\java\org\openrepose\filters\apivalidator\ValidatorInfo.java, validator info,public   (  list <  string >  roles  node wadl  string system id  config config  string name )  {  this . roles = roles ;  this . config = config ;  this . wadl = wadl ;  this . system id = system id ;  this . uri = null ;  this . name =  (  string utils . is empty ( name )  &&  ! roles . is empty (  )  )   ?  get name from roles ( roles )  : name ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\api-validator-filter\src\main\java\org\openrepose\filters\apivalidator\ValidatorInfo.java,clear validator,public void   (  )  {  synchronized  ( validator lock )   {  if  ( validator  !  =  null )   {  validator . destroy (  )  ;  validator = null ;   }   }   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\api-validator-filter\src\main\java\org\openrepose\filters\apivalidator\ValidatorInfo.java,get name,public  string   (  )  {  return name ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\api-validator-filter\src\main\java\org\openrepose\filters\apivalidator\ValidatorInfo.java,get name from roles, string   (  list <  string >  roles )  {   string builder rtn = new  string builder (  )  ;  for  (   string role : roles )   {  rtn . append ( role . replace ( ' / ' ' - ' )  . replace ( ' ' ' - ' )  . replace ( ' = ' ' - ' )  . replace ( ':' ' - ' )  . replace ( '*' ' - ' )  . replace ( ' ? ' ' - ' )  . replace ( ' ' ' - ' )  . replace ( '\u00a0' ' - ' )  )  . append ( '   ' )  ;   }  return rtn . substring ( 0 rtn . length (  )   -  1 )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\api-validator-filter\src\main\java\org\openrepose\filters\apivalidator\ValidatorInfo.java,get roles,public  list <  string >    (  )  {  return roles ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\api-validator-filter\src\main\java\org\openrepose\filters\apivalidator\ValidatorInfo.java,get source,"private  source   (  )  {  if  ( wadl  !  =  null )   {  return new dom source ( wadl system id )  ;   }  if  ( uri  !  =  null )   {  return new sax source ( new  input source ( uri )  )  ;   }  throw new  illegal argument exception ( ""wadl  source  not  specified"" )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\api-validator-filter\src\main\java\org\openrepose\filters\apivalidator\ValidatorInfo.java,get uri,public  string   (  )  {  return uri ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\api-validator-filter\src\main\java\org\openrepose\filters\apivalidator\ValidatorInfo.java,get validator,public  validator   (  )  {  init validator (  )  ;  return validator ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\api-validator-filter\src\main\java\org\openrepose\filters\apivalidator\ValidatorInfo.java,init validator,"public boolean   (  )  {  log . debug ( ""call to  validator info#init validator .   validator is  {  }  .   from thread  {  } "" validator  thread . current thread (  )  . get name (  )  )  ;  synchronized  ( validator lock )   {  if  ( validator  !  =  null )   {  return true ;   }  try  {  log . debug ( "" calling the validator creation method for  {  } "" name )  ;  validator =  validator . apply ( name  +   system . current time millis (  )  get source (  )  config )  ;  return true ;   }  catch  (   validator exception|wadl exception e )   {  log . warn ( "" error loading validator for wadl: ""  +  uri e )  ;  return false ;   }   }   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\api-validator-filter\src\main\java\org\openrepose\filters\apivalidator\ValidatorInfo.java,reinit validator,"public boolean   (  )  {  synchronized  ( validator lock )   {  if  ( validator  !  =  null )   {  log . debug ( ""in re init validator  destroying:  {  } "" validator )  ;  validator . destroy (  )  ;  validator = null ;   }   }  return init validator (  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\api-validator-filter\src\main\java\org\openrepose\filters\apivalidator\ValidatorInfo.java,set validator,void   (  validator validator )  {  this . validator = validator ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\api-validator-filter\src\test\java\org\openrepose\filters\apivalidator\ValidatorInfoTest.java,get handlers,private  dispatch result handler   (  )  {   list <  result handler >  handlers = new  array list <  >  (  )  ;  handlers . add ( new  servlet result handler (  )  )  ;  return new  dispatch result handler ( scala . collection .  java conversions . as scala buffer ( handlers )  . to list (  )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\api-validator-filter\src\test\java\org\openrepose\filters\apivalidator\ValidatorInfoTest.java,setup,@ before public void   (  )  {  this . config = new  config (  )  ;  config . set result handler ( get handlers (  )  )  ;  config . set use saxonee validation ( false )  ;  config . set check well formed ( true )  ;  config . set checkxsd grammar ( true 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\api-validator-filter\src\test\java\org\openrepose\filters\apivalidator\ValidatorInfoTest.java,should create validator once,"@ test public void   (  )  {   validator validator = instance . get validator (  )  ;  assert not null ( validator )  ;   validator validator1 = instance . get validator (  )  ;  assert not null ( validator1 )  ;  assert that ( "" should return exact same "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\api-validator-filter\src\test\java\org\openrepose\filters\apivalidator\ValidatorInfoTest.java,should generate validator name when passed null,@ test public void   (  )  {  assert equals ( instance . get name (  )  instance . get name from roles ( instance . get roles (  )  )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\api-validator-filter\src\test\java\org\openrepose\filters\apivalidator\ValidatorInfoTest.java,should generate validator name when provided,@ test public void   (  )  {  assert equals ( instance2 . get name (  )  name )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\api-validator-filter\src\test\java\org\openrepose\filters\apivalidator\ValidatorInfoTest.java,should not have forbidden chars in validator name,"@ test public void   (  )  {  roles . add ( ""role / with / slashes"" )  ;  roles . add ( ""role with commas"" )  ;  roles . add ( ""role = with = equals"" )  ;  roles . add ( ""role:with:colons"" )  ;  roles . add ( ""role*with*asterisks"" )  ;  roles . add ( ""rol"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\api-validator-filter\src\test\java\org\openrepose\filters\apivalidator\ApiValidatorHandlerTest.java,setup,@ before public void   (  )  {  chain = mock (  filter chain . class )  ;  request = new  mock http servlet request (  )  ;  response = new  mock http servlet response (  )  ;  default validator = mock (  validator . class )  ;  default validator info = n
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\api-validator-filter\src\test\java\org\openrepose\filters\apivalidator\ApiValidatorHandlerTest.java,should add default validator as least priority when multi match,"@ test public void   (  )  {   list <  string >  roles =  collections . singleton list ( ""role1"" )  ;   list <  validator info >  validators = new  array list <  >  (  )  ;  validators . add ( role1 validator info )  ;  validators . add ( role2 validator "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\api-validator-filter\src\test\java\org\openrepose\filters\apivalidator\ApiValidatorHandlerTest.java,should call default validator when no role match,@ test public void   (  )  {  instance . do filter ( request response chain )  ;  verify ( default validator )  . validate ( any (  http servlet request wrapper . class )  eq ( response )  eq ( chain )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\api-validator-filter\src\test\java\org\openrepose\filters\apivalidator\ApiValidatorHandlerTest.java,should call validator for role,"@ test public void   (  )  {  request . add header (  open stack service header . roles ""junk ; q = 0 . 8 role1 ; q = 0 . 9 bbq ; q = 0 . 9 stuff ; q = 0 . 7"" )  ;  instance . do filter ( request response chain )  ;  verify ( role1 validator )  . validate"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\api-validator-filter\src\test\java\org\openrepose\filters\apivalidator\ApiValidatorHandlerTest.java,should handle exceptions in validators,"@ test public void   (  )  {  request . add header (  open stack service header . roles ""blowup validator"" )  ;  instance . do filter ( request response chain )  ;  verify ( blowup validator )  . validate ( any (  http servlet request wrapper . class )  e"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\api-validator-filter\src\test\java\org\openrepose\filters\apivalidator\ApiValidatorHandlerTest.java,should handle null validators,"@ test public void   (  )  {  request . add header (  open stack service header . roles ""null validator"" )  ;  instance . do filter ( request response chain )  ;  verify ( null validator info )  . get validator (  )  ;  assert equals (  http servlet respo"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\api-validator-filter\src\test\java\org\openrepose\filters\apivalidator\ApiValidatorHandlerTest.java,should retain validator order when multi match and has default role,"@ test public void   (  )  {   list <  string >  roles =  arrays . as list ( ""role1"" ""role2"" ""defaultrole"" )  ;   list <  validator info >  validators = new  array list <  >  (  )  ;  validators . add ( role1 validator info )  ;  validators . add ( defaul"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\echo-filter\src\main\java\org\openrepose\filters\echo\EchoFilter.java,do filter,@ override public void   (  servlet request request  servlet response response  filter chain chain )  throws io exception   servlet exception  {  final  http servlet request http request =  (  http servlet request ) request ;  final  http servlet response
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\api-validator-filter\src\main\java\org\openrepose\filters\apivalidator\ValidatorConfigurator.java, validator configurator,public   (  validator configuration val config  string config root  string wadl uri )  {  process configuration ( val config config root wadl uri )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\api-validator-filter\src\main\java\org\openrepose\filters\apivalidator\ValidatorConfigurator.java,create configuration,private  config   (  validator item validator item boolean is delegating double delegation quality boolean multi role match  string config root  string component name )  {   config config = new  config (  )  ;  config . setxsd engine ( validator item . get xsd engine (  )  . value (  )  )  ;  config . setxsl engine ( validator item . get xsl engine (  )  . value (  )  )  ;  config . set result handler ( get handlers ( validator item is delegating delegation quality multi role match config root component name )  )  ;  config . set check well formed ( validator item . is check well formed (  )  )  ;  config . set checkxsd grammar ( validator item . is check xsd grammar (  )  || validator item . is check grammars (  )  )  ;  config . set checkjson grammar ( validator item . is check grammars (  )  )  ;  config . set check elements ( validator item . is check elements (  )  )  ;  config . setx path version ( validator item . get xpath version (  )  )  ;  config . set check plain params ( validator item . is check plain params (  )  )  ;  config . set doxsd grammar transform ( validator item . is do xsd grammar transform (  )  )  ;  config . set enable pre process extension ( validator item . is enable pre process extension (  )  )  ;  config . set remove dups ( validator item . is remove dups (  )  )  ;  config . set validate checker ( validator item . is validate checker (  )  )  ;  config . set joinx path checks ( validator item . is join xpath checks (  )  )  ;  config . set check headers ( validator item . is check headers (  )  )  ;  config . set enable ignorexsd extension ( validator item . is enable ignore xsd extension (  )  )  ;  config . set enable rax roles extension ( validator item . is enable rax roles (  )  )  ;  config . set mask rax roles403 ( validator item . is mask rax roles403 (  )  )  ;  config . set set param defaults ( true )  ;  config . set enable authenticated by extension ( true )  ;  return config ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\api-validator-filter\src\main\java\org\openrepose\filters\apivalidator\ValidatorConfigurator.java,get default validator,public  validator info   (  )  {  return default validator ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\api-validator-filter\src\main\java\org\openrepose\filters\apivalidator\ValidatorConfigurator.java,get handlers,"private  dispatch result handler   (  validator item validator item boolean is delegating double delegation quality boolean multi role match  string config root  string component name )  {   list <  result handler >  handlers = new  array list <  >  (  )  ;  if  ( is delegating )   {  handlers . add ( new  method label handler (  )  )  ;  handlers . add ( new  delegation handler ( delegation quality component name )  )  ;   }  else if  (  ! multi role match )   {  handlers . add ( new  servlet result handler (  )  )  ;   }  if  ( validator item . is enable api coverage (  )  )   {  handlers . add ( new  instrumented handler (  )  )  ;  handlers . add ( new  api coverage handler (  )  )  ;   }  if  (  string utils . is not blank ( validator item . get dot output (  )  )  )   {  final  string dot path =  string uri utilities . format uri ( get path ( validator item . get dot output (  )  config root )  )  ;   file out = new  file ( dot path )  ;  try  {  if  ( out . exists (  )  && out . can write (  )  ||  ! out . exists (  )  && out . create new file (  )  )   {  handlers . add ( new  save dot handler ( out  ! validator item . is enable api coverage (  )  true )  )  ;   }  else  {  log . warn ( "" cannot write to dot file: ""  +  dot path )  ;   }   }  catch  (  io exception ex )   {  log . warn ( "" cannot write to dot file: ""  +  dot path ex )  ;   }   }  return new  dispatch result handler ( scala . collection .  java conversions . as scala buffer ( handlers )  . to list (  )  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\api-validator-filter\src\main\java\org\openrepose\filters\apivalidator\ValidatorConfigurator.java,get path,private  string   (  string path  string config root )  {   file file = new  file ( path )  ;  if  (  ! file . is absolute (  )  )   {  file = new  file ( config root path )  ;   }  return file . get absolute path (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\api-validator-filter\src\main\java\org\openrepose\filters\apivalidator\ValidatorConfigurator.java,get validators,public  list <  validator info >    (  )  {  return validators ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\api-validator-filter\src\main\java\org\openrepose\filters\apivalidator\ValidatorConfigurator.java,get wadl path,private  string   (  string uri  string config root )  {  if  (  paths . get ( uri )  . is absolute (  )  )   {  return new  file ( uri )  . to string (  )  ;   }  else  {  return new  file ( config root uri )  . touri (  )  . to string (  )  ;   }   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\api-validator-filter\src\main\java\org\openrepose\filters\apivalidator\ValidatorConfigurator.java,log deprecation warnings,"private void   (  validator configuration validator configuration )  {  if  ( validator configuration . is multi role match (  )  )   {  log . warn ( "" support for multi - role - match has been deprecated in  repose 8 and will be removed in  repose 9 . "" )  ;   }  if  ( validator configuration . get validator (  )  . size (  )   >  1 )   {  log . warn ( "" support for multiple validators has been deprecated in  repose 8 and will be removed in  repose 9 . "" )  ;   }  for  (   validator item validator item : validator configuration . get validator (  )  )   {  if  ( validator item . get any (  )   !  =  null )   {  log . warn ( "" support for embedded wad ls has been deprecated in  repose 8 and will be removed in  repose 9 . "" )  ;  break ;   }   }  for  (   validator item validator item : validator configuration . get validator (  )  )   {  if  ( validator item . get role (  )   !  =  null &&  ! validator item . get role (  )  . is empty (  )  )   {  log . warn ( "" support for specifying roles in the validator config has been deprecated in  repose 8 and will be removed in  repose 9 .   please use rax:roles in the wadl instead . "" )  ;  break ;   }   }   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\api-validator-filter\src\main\java\org\openrepose\filters\apivalidator\ValidatorConfigurator.java,process configuration,"public void   (  validator configuration validator configuration  string config root  string wadl uri )  {  log deprecation warnings ( validator configuration )  ;  default validator = null ;   list <  ?  extends  validator item >  validator items = validator configuration . get validator (  )  ;  validators = new  array list <  >  ( validator items . size (  )  )  ;   delegating type delegating type = validator configuration . get delegating (  )  ;  boolean is delegating = delegating type  !  =  null ;  double delegation quality = is delegating  ?  delegating type . get quality (  )  : 0 . 0 ;   string component name = is delegating  ?  delegating type . get component name (  )  : ""api - validator"" ;  for  (   validator item validator item : validator items )   {   config configuration = create configuration ( validator item is delegating delegation quality validator configuration . is multi role match (  )  config root component name )  ;  configuration . set preserve request body ( validator configuration . is multi role match (  )  )  ;   validator info validator = validator item . get any (  )   !  =  null  ?  new  validator info ( validator item . get role (  )  validator item . get any (  )  get wadl path ( wadl uri config root )  configuration validator item . get validator name (  )  )  : new  validator info ( validator item . get role (  )  get wadl path ( validator item . get wadl (  )  config root )  configuration validator item . get validator name (  )  )  ;  validators . add ( validator )  ;  if  ( validator item . is default (  )  && default validator  =  =  null )   {  default validator = validator ;   }   }   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\flush-output-filter\src\test\java\org\openrepose\filters\flush\FlushOutputFilterTest.java,should call flush buffer,@ test public void   (  )  throws io exception   servlet exception  {   servlet response response = mock (  servlet response . class )  ;   ( new  flush output filter (  )  )  . do filter ( mock (  servlet request . class )  response mock (  filter chain 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\exception-filter\src\main\java\org\openrepose\experimental\filters\exception\ExceptionFilter.java,do filter,"@ override @ suppress warnings ( ""squid:s00112"" )  public void   (  servlet request servlet request  servlet response servlet response  filter chain filter chain )  throws io exception   servlet exception  {  log . warn ( ""in the do filter method of  exce"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\exception-filter\src\main\java\org\openrepose\experimental\filters\exception\ExceptionFilter.java,init,"@ override public void   (  filter config filter config )  throws  servlet exception  {  log . warn ( ""start ""  +  this . get class (  )  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\ip-user-filter\src\main\java\edazdarevic\commons\net\CIDRUtils.java,cidr utils,"public   (  string cidr )  throws  unknown host exception  {  this . cidr = cidr ;  if  ( this . cidr . contains ( "" / "" )  )   {  int index = this . cidr . index of ( ' / ' )  ;   string address part = this . cidr . substring ( 0 index )  ;   string network part = this . cidr . substring ( index  +  1 )  ;  inet address =  inet address . get by name ( address part )  ;  prefix length =  integer . parse int ( network part )  ;  calculate (  )  ;   }  else  {  throw new  illegal argument exception ( ""not an valid cidr format ! "" )  ;   }   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\ip-user-filter\src\main\java\edazdarevic\commons\net\CIDRUtils.java,calculate,private void   (  )  throws  unknown host exception  {   byte buffer mask buffer ;  int target size ;  if  ( inet address . get address (  )  . length  =  =  4 )   {  mask buffer =  byte buffer . allocate ( 4 )  . put int (  - 1 )  ;  target size = 4 ;   }  else  {  mask buffer =  byte buffer . allocate ( 16 )  . put long (  - 1l )  . put long (  - 1l )  ;  target size = 16 ;   }   big integer mask =  ( new  big integer ( 1 mask buffer . array (  )  )  )  . not (  )  . shift right ( prefix length )  ;   byte buffer buffer =  byte buffer . wrap ( inet address . get address (  )  )  ;   big integer ip val = new  big integer ( 1 buffer . array (  )  )  ;   big integer start ip = ip val . and ( mask )  ;   big integer end ip = start ip . add ( mask . not (  )  )  ;  byte[] start ip arr = to bytes ( start ip . to byte array (  )  target size )  ;  byte[] end ip arr = to bytes ( end ip . to byte array (  )  target size )  ;  this . start address =  inet address . get by address ( start ip arr )  ;  this . end address =  inet address . get by address ( end ip arr )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\ip-user-filter\src\main\java\edazdarevic\commons\net\CIDRUtils.java,get broadcast address,public  string   (  )  {  return this . end address . get host address (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\ip-user-filter\src\main\java\edazdarevic\commons\net\CIDRUtils.java,get network address,public  string   (  )  {  return this . start address . get host address (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\ip-user-filter\src\main\java\edazdarevic\commons\net\CIDRUtils.java,is in range,public boolean   (  string ip address )  throws  unknown host exception  {   inet address address =  inet address . get by name ( ip address )  ;   big integer start = new  big integer ( 1 this . start address . get address (  )  )  ;   big integer end = new  big integer ( 1 this . end address . get address (  )  )  ;   big integer target = new  big integer ( 1 address . get address (  )  )  ;  int st = start . compare to ( target )  ;  int te = target . compare to ( end )  ;  return  ( st  <  1 )  &&  ( te  <  1 )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\ip-user-filter\src\main\java\edazdarevic\commons\net\CIDRUtils.java,to bytes,private byte[]   ( byte[] array int target size )  {  int counter = 0 ;   list <  byte >  new arr = new  array list <  >  (  )  ;  while  ( counter  <  target size &&  ( array . length  -  1  -  counter  >  =  0 )  )   {  new arr . add ( 0 array[array . length  -  1  -  counter] )  ;  counter +  +  ;   }  int size = new arr . size (  )  ;  for  ( int i = 0 ;  i  <   ( target size  -  size )  ;  i +  +  )   {  new arr . add ( 0  ( byte ) 0 )  ;   }  byte[] ret = new byte[new arr . size (  ) ] ;  for  ( int i = 0 ;  i  <  new arr . size (  )  ;  i +  +  )   {  ret[i] = new arr . get ( i )  ;   }  return ret ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\flush-output-filter\src\main\java\org\openrepose\filters\flush\FlushOutputFilter.java,do filter,@ override public void   (  servlet request request  servlet response response  filter chain chain )  throws io exception   servlet exception  {  chain . do filter ( request response )  ;  response . flush buffer (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\main\java\org\openrepose\filters\ratelimiting\exception\RateLimitingSerializationException.java, rate limiting serialization exception,public   (  string message  throwable t )  {  super ( message t )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\main\java\org\openrepose\filters\ratelimiting\log\LimitLogger.java, limit logger,public   (  string user  http servlet request request )  {  this . user = user ;  this . request = request ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\main\java\org\openrepose\filters\ratelimiting\log\LimitLogger.java,get sanitized user identification,public  string   (  )  {   string user identification = user ;  final  string x auth token = request . get header (  common http header . auth   token )  ;  if  (  string utils . equals ignore case ( x auth token user identification )  )   {  final  string x forwarded for = request . get header (  common http header . x   forwarded   for )  ;  user identification = x forwarded for  !  =  null  ?  x forwarded for : request . get remote host (  )  ;   }  return user identification ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\main\java\org\openrepose\filters\ratelimiting\log\LimitLogger.java,log,"public void   (  string configured  string used )  {  log . info ( "" rate limiting user ""  +  get sanitized user identification (  )   +  "" at limit amount "" +  used +  "" . "" )  ;  log . info ( "" user rate limited for request ""  +  request . get method (  )   +  "" "" +  request . get requesturl (  )  +  "" . "" )  ;  log . info ( "" configured rate limit is: ""  +  configured )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\main\java\org\openrepose\filters\ratelimiting\RateLimitingFilter.java, rate limiting filter,@ inject public   (  datastore service datastore service  configuration service configuration service  event service event service )  {  this . datastore service = datastore service ;  this . configuration service = configuration service ;  this . event s
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\main\java\org\openrepose\filters\ratelimiting\RateLimitingFilter.java,build handler,private  rate limiting handler   (  )  {   rate limiting config current config = config . get (  )  ;  return new  rate limiting handler ( new  rate limiting service helper ( current config . rate limiting service new  active limits writer (  )  new  combined limits writer (  )  )  event service current config . include absolute limits current config . describe limits uri regex current config . is over limit429 response code current config . datastore warn limit )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\main\java\org\openrepose\filters\ratelimiting\RateLimitingFilter.java,configuration updated,@ override public void   (  rate limiting configuration configuration object )  throws  update failed exception  {   rate limiting config new config = new  rate limiting config (  )  ;  new config . rate limiting service =  rate limiting service factory .
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\main\java\org\openrepose\filters\ratelimiting\RateLimitingFilter.java,destroy,"@ override public void   (  )  {  log . trace ( "" rate  limiting filter destroying .  .  . "" )  ;  configuration service . unsubscribe from ( config filename this )  ;  log . trace ( "" rate  limiting filter destroyed . "" )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\main\java\org\openrepose\filters\ratelimiting\RateLimitingFilter.java,do filter,"@ override public void   (  servlet request request  servlet response response  filter chain chain )  throws io exception   servlet exception  {  if  (  ! initialized )   {  log . error ( "" filter has not yet initialized .  .  .   please check your config"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\main\java\org\openrepose\filters\ratelimiting\RateLimitingFilter.java,get datastore,"private  datastore   (  datastore type datastore type )  {   string requested datastore = datastore type . value (  )  ;  if  (  string utils . is not blank ( requested datastore )  )   {  log . info ( "" requesting datastore  {  } "" datastore type )  ;  if  ( requested datastore . equals ( default   datastore   name )  )   {  log . info ( "" using requested datastore  {  } "" requested datastore )  ;  return datastore service . get default datastore (  )  ;   }   datastore datastore = datastore service . get datastore ( requested datastore )  ;  if  ( datastore  !  =  null )   {  log . info ( "" using requested datastore  {  } "" requested datastore )  ;  return datastore ;   }  else  {  log . warn ( "" requested datastore not found"" )  ;   }   }   datastore target datastore = datastore service . get distributed datastore (  )  ;  if  ( target datastore  !  =  null )   {  log . info ( "" using distributed datastore  {  } "" target datastore . get name (  )  )  ;   }  else  {  log . warn ( "" there were no distributed datastore managers available .   clustering for rate - limiting will be disabled . "" )  ;  target datastore = datastore service . get default datastore (  )  ;   }  return target datastore ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\main\java\org\openrepose\filters\ratelimiting\RateLimitingFilter.java,init,"@ override public void   (  filter config filter config )  throws  servlet exception  {  log . trace ( "" rate  limiting filter initializing .  .  . "" )  ;  config filename = new  filter config helper ( filter config )  . get filter config ( default   conf"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\main\java\org\openrepose\filters\ratelimiting\RateLimitingFilter.java,is initialized,@ override public boolean   (  )  {  return initialized ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\main\java\org\openrepose\filters\ratelimiting\RateLimitingHandler.java, rate limiting handler,public   (  rate limiting service helper rate limiting service helper  event service event service boolean include absolute limits  optional <  pattern >  describe limits uri pattern boolean over limit429 response code int datastore warn limit )  {  this . include absolute limits = include absolute limits ;  this . describe limits uri pattern = describe limits uri pattern ;  this . rate limiting service helper = rate limiting service helper ;  this . over limit429 response code = over limit429 response code ;  this . datastore warn limit = datastore warn limit ;  this . event service = event service ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\main\java\org\openrepose\filters\ratelimiting\RateLimitingHandler.java, upstream exception,public   (  string message )  {  super ( message )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\main\java\org\openrepose\filters\ratelimiting\RateLimitingHandler.java,describe limits for request,private  filter action   (  http servlet request wrapper request  http servlet response wrapper response )  {  if  ( include absolute limits )   {  request . replace header (  http headers . accept  media type . application   xml   value )  ;  return  filter action . process   response ;   }  else  {  return no upstream response ( request response )  ;   }   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\main\java\org\openrepose\filters\ratelimiting\RateLimitingHandler.java,get preferred media type,private  optional <  media type >    (  list <  string >  accept values )  {   optional <  media type >  preferred media type =  optional . of ( default   media   type )  ;  if  (  ! accept values . is empty (  )  )   {   list <  media type >  parsed accept media types = accept values . stream (  )  . map (  rate limiting handler::parse media type )  . filter (  optional::is present )  . map (  optional::get )  . sorted (  media type . specificity   comparator )  . collect (  collectors . to list (  )  )  ;  preferred media type = supported   media   types . stream (  )  . map ( supported media type  -  >  parsed accept media types . stream (  )  . filter ( supported media type::is compatible with )  . find first (  )  . filter ( accept media type  -  >  accept media type . get quality value (  )   !  =  0 . 0 )  . map ( accept media type  -  >   (  map .  entry <  media type  media type >  ) new  abstract map .  simple entry ( supported media type accept media type )  )  )  . filter (  optional::is present )  . map (  optional::get )  . sorted (  map .  entry . comparing by value (  media type . quality   value   comparator )  )  . map (  map .  entry::get key )  . find first (  )  ;   }  return preferred media type ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\main\java\org\openrepose\filters\ratelimiting\RateLimitingHandler.java,handle request,"public  filter action   (  http servlet request wrapper request  http servlet response wrapper response )  {   filter action filter action ;  if  ( request has expected headers ( request )  )   {  if  (  ! record limited request ( request response )  )   {  filter action =  filter action . return ;   }  else if  ( describe limits uri pattern . is present (  )  && describe limits uri pattern . get (  )  . matcher ( request . get requesturi (  )  )  . matches (  )  )   {   optional <  media type >  preferred media type = get preferred media type ( request . get splittable headers (  http headers . accept )  )  ;  if  (  ! preferred media type . is present (  )  )   {  response . set status ( sc   not   acceptable )  ;  filter action =  filter action . return ;   }  else  {  original preferred accept = preferred media type . get (  )  ;  filter action = describe limits for request ( request response )  ;   }   }  else  {  filter action =  filter action . pass ;   }   }  else  {  log . warn ( "" expected header:  {  }  was not supplied in the request .   rate limiting requires this header to operate . ""  power api header . user )  ;  response . set status ( sc   unauthorized )  ;  filter action =  filter action . return ;   }  return filter action ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\main\java\org\openrepose\filters\ratelimiting\RateLimitingHandler.java,handle response,"public void   (  http servlet request wrapper request  http servlet response wrapper response )  {  try  {  if  ( response . get content type (  )   !  =  null )   {   input stream absolute input stream ;  if  ( response . get content type (  )  . equals ignore case (  media type . application   json   value )  )   {   string new xml =  upstream json to xml . convert ( response . get output stream as input stream (  )  )  ;  absolute input stream = new  byte array input stream ( new xml . get bytes (  standard charsets . utf   8 )  )  ;   }  else if  ( response . get content type (  )  . equals ignore case (  media type . application   xml   value )  )   {  absolute input stream = response . get output stream as input stream (  )  ;   }  else  {  log . error ( "" upstream limits responded with a content type we cannot understand:  {  } "" response . get content type (  )  )  ;  throw new  upstream exception ( "" upstream limits responded with a content type we cannot understand: ""  +  response . get content type (  )  )  ;   }   byte array output stream output stream = new  byte array output stream (  )  ;  final  media type media type = rate limiting service helper . query combined limits ( request original preferred accept absolute input stream output stream )  ;  response . set output ( new  byte array input stream ( output stream . to byte array (  )  )  )  ;  response . set content type ( media type . to string (  )  )  ;   }  else  {  log . warn ( ""no data received from upstream limits  only sending regular rate limits ! "" )  ;  no upstream response ( request response )  ;   }   }  catch  (   upstream exception ue )   {  log . error ( "" failure when querying limits .   reason: ""  +  ue . get message (  )  ue )  ;  response . set status ( sc   bad   gateway )  ;   }  catch  (   exception e )   {  log . error ( "" failure when querying limits .   reason: ""  +  e . get message (  )  e )  ;  response . set status ( sc   internal   server   error )  ;   }   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\main\java\org\openrepose\filters\ratelimiting\RateLimitingHandler.java,no upstream response,"private  filter action   (  http servlet request wrapper request  http servlet response wrapper response )  {  try  {   byte array output stream output stream = new  byte array output stream (  )  ;  final  media type media type = rate limiting service helper . query active limits ( request original preferred accept output stream )  ;  response . set output ( new  byte array input stream ( output stream . to byte array (  )  )  )  ;  response . set content type ( media type . to string (  )  )  ;  response . set status ( sc   ok )  ;   }  catch  (   exception e )   {  log . error ( "" failure when querying limits .   reason: ""  +  e . get message (  )  e )  ;  response . set status ( sc   internal   server   error )  ;   }  return  filter action . return ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\main\java\org\openrepose\filters\ratelimiting\RateLimitingHandler.java,parse media type,"private static  optional <  media type >    (  string type )  {   optional <  media type >  parsed type =  optional . empty (  )  ;  try  {  parsed type =  optional . of (  media type . parse media type ( type )  )  ;   }  catch  (   illegal argument exception iae )   {  log . warn ( "" media type could not be parsed:  {  } "" type iae )  ;   }  return parsed type ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\main\java\org\openrepose\filters\ratelimiting\RateLimitingHandler.java,record limited request,"private boolean   (  http servlet request request  http servlet response wrapper response )  {  boolean success = false ;  try  {  rate limiting service helper . track limits ( request datastore warn limit )  ;  success = true ;   }  catch  (   over limit exception e )   {  log . trace ( "" over  limit"" e )  ;  new  limit logger ( e . get user (  )  request )  . log ( e . get configured limit (  )   integer . to string ( e . get current limit amount (  )  )  )  ;  final  http date next available time = new  http date ( e . get next available time (  )  )  ;  if  ( e . get user (  )  . equals (  rate limiting service impl . global   limit   user )  )   {  response . set status ( sc   service   unavailable )  ;   }  else if  ( over limit429 response code )   {  response . set status (  extended status codes . sc   too   many   requests )  ;   }  else  {  response . set status ( sc   request   entity   too   large )  ;   }  response . add header (  http headers . retry   after next available time . torfc1123 (  )  )  ;  event service . new event (  rate limit filter event . over   limit new  over limit data ( e datastore warn limit request response . get status (  )  )  )  ;   }  catch  (   cache exception e )   {  log . error ( "" failure when tracking limits . "" e )  ;  response . set status ( sc   bad   gateway )  ;   }  catch  (   datastore operation exception doe )   {  log . error ( "" unable to communicate with dist - datastore . "" doe )  ;  response . set status ( sc   service   unavailable )  ;   }  return success ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\main\java\org\openrepose\filters\ratelimiting\RateLimitingHandler.java,request has expected headers,private boolean   (  http servlet request request )  {  return request . get header (  power api header . user )   !  =  null ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\main\java\org\openrepose\filters\ratelimiting\RateLimitingServiceHelper.java, rate limiting service helper,public   (  rate limiting service service  active limits writer active limits writer  combined limits writer combined limits writer )  {  this . service = service ;  this . active limits writer = active limits writer ;  this . combined limits writer = combined limits writer ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\main\java\org\openrepose\filters\ratelimiting\RateLimitingServiceHelper.java,decodeuri,private  string   (  string uri )  {  return uri . create ( uri )  . get path (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\main\java\org\openrepose\filters\ratelimiting\RateLimitingServiceHelper.java,get preferred groups,public  list <  string >    (  http servlet request request )  {  final  http servlet request wrapper mutable request = new  http servlet request wrapper ( request )  ;  return mutable request . get preferred splittable headers (  power api header . groups )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\main\java\org\openrepose\filters\ratelimiting\RateLimitingServiceHelper.java,get preferred user,public  string   (  http servlet request request )  {  final  http servlet request wrapper mutable request = new  http servlet request wrapper ( request )  ;  final  list <  string >  preferred users = mutable request . get preferred splittable headers (  power api header . user )  ;   string preferred user = null ;  if  (  ! preferred users . is empty (  )  )   {  preferred user = preferred users . get ( 0 )  ;   }  return preferred user ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\main\java\org\openrepose\filters\ratelimiting\RateLimitingServiceHelper.java,query active limits,public  media type   (  http servlet request request  media type preferred media type  output stream output stream )  {   rate limit list rate limits = service . query limits ( get preferred user ( request )  get preferred groups ( request )  )  ;  return active limits writer . write ( rate limits preferred media type output stream )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\main\java\org\openrepose\filters\ratelimiting\RateLimitingServiceHelper.java,query combined limits,public  media type   (  http servlet request request  media type preferred media type  input stream absolute limits  output stream output stream )  {   rate limit list rate limits = service . query limits ( get preferred user ( request )  get preferred groups ( request )  )  ;  return combined limits writer . write ( rate limits preferred media type absolute limits output stream )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\main\java\org\openrepose\filters\ratelimiting\RateLimitingServiceHelper.java,track limits,public void   (  http servlet request request int datastore warn limit )  throws  over limit exception  {  service . track limits ( get preferred user ( request )  get preferred groups ( request )  decodeuri ( request . get requesturi (  )  )   http servlet request wrapper . parse query string ( request . get query string (  )  )  request . get method (  )  datastore warn limit )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\main\java\org\openrepose\filters\ratelimiting\util\combine\CombinedLimitsTransformer.java, combined limits transformer,public   (  templates templates jaxb context jaxb context  object factory factory )  {  super ( templates )  ;  this . jaxb context = jaxb context ;  this . factory = factory ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\main\java\org\openrepose\filters\ratelimiting\util\combine\CombinedLimitsTransformer.java,transform,@ override public void   ( final  limits transform pair source final  output stream target )  {   transformer pooled object ;  final  object pool <  transformer >  object pool = get xsl transformer pool (  )  ;  try  {  pooled object = object pool . borro
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\main\java\org\openrepose\filters\ratelimiting\util\combine\CombinedLimitsTransformerException.java, combined limits transformer exception,public   (  string message )  {  super ( message )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\main\java\org\openrepose\filters\ratelimiting\util\combine\InputStreamUriParameter.java, input stream uri parameter,"public   (  input stream input stream reference )  {  this . input stream reference = input stream reference ;  this . href spec = ""reference:jio:""  +  input stream reference . to string (  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\main\java\org\openrepose\filters\ratelimiting\util\combine\InputStreamUriParameter.java,get href,public  string   (  )  {  return href spec ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\main\java\org\openrepose\filters\ratelimiting\util\combine\InputStreamUriParameter.java,resolve,"@ override public  source   (  string href  string base )  throws  transformer exception  {  if  ( href spec . equals ( href )  )   {  return new  stream source ( input stream reference )  ;   }  throw new  combined limits transformer exception ( "" failed"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\main\java\org\openrepose\filters\ratelimiting\util\combine\LimitsTransformPair.java, limits transform pair,public   (  input stream is  rate limit list rll )  {  this . is = is ;  this . rll = rll ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\main\java\org\openrepose\filters\ratelimiting\util\combine\LimitsTransformPair.java,get input stream,public  input stream   (  )  {  return is ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\main\java\org\openrepose\filters\ratelimiting\util\combine\LimitsTransformPair.java,get rate limit list,public  rate limit list   (  )  {  return rll ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\main\java\org\openrepose\filters\ratelimiting\write\ActiveLimitsWriter.java,write,"public  media type   (  rate limit list active rate limits  media type media type  output stream output stream )  {  try  {  final  limits limits = new  limits (  )  ;  limits . set rates ( active rate limits )  ;  final  byte array output stream bos = new  byte array output stream (  )  ;  response   transformer . entity as xml ( limits bos )  ;  final  limits response mime type writer response writer = new  limits response mime type writer ( response   transformer )  ;  return response writer . write limits response ( bos . to byte array (  )  media type output stream )  ;   }  catch  (   exception ex )   {  log . error ( "" failed to serialize limits upon user request .   reason: ""  +  ex . get message (  )  ex )  ;  throw new  rate limiting serialization exception ( "" failed to serialize limits upon user request .   reason: ""  +  ex . get message (  )  ex )  ;   }   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\main\java\org\openrepose\filters\ratelimiting\util\TransformHelper.java,build jaxb context,"public static jaxb context   (  class .  .  .  object factories )  {  try  {  return jaxb context . new instance ( object factories )  ;   }  catch  (   exception e )   {  throw exception   log . new exception ( "" unable to build  rate  limiter .   reason: ""  +  e . get message (  )  e  power api context exception . class )  ;   }   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\main\java\org\openrepose\filters\ratelimiting\util\TransformHelper.java,get templates from input stream,"public static  templates   (  input stream i stream )  {  try  {  return  transform helper . parse xslt ( new  stream source ( i stream )  )  ;   }  catch  (   transformer configuration exception tce )   {  throw exception   log . new exception ( "" failed to generate new transform templates"" tce  runtime exception . class )  ;   }   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\main\java\org\openrepose\filters\ratelimiting\util\TransformHelper.java,parse xslt,private static  templates   (  source s )  throws  transformer configuration exception  {  synchronized  ( xslt   transformer   factory )   {  return new  log templates wrapper ( xslt   transformer   factory . new templates ( s )  )  ;   }   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\main\java\org\openrepose\filters\ratelimiting\util\LimitsEntityStreamTransformer.java, limits entity stream transformer,public   ( jaxb context context )  {  json transform = new  stream to xslt transform (  transform helper . get templates from input stream (  limits entity stream transformer . class . get resource as stream ( json   xsl   location )  )  )  ;  combiner = new  combined limits transformer (  transform helper . get templates from input stream (  limits entity stream transformer . class . get resource as stream ( combiner   xsl   location )  )  context limits   object   factory )  ;  entiy transform = new  jaxb to stream transform ( context )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\main\java\org\openrepose\filters\ratelimiting\util\LimitsEntityStreamTransformer.java,build jaxb context,private static jaxb context   (  )  {  return  transform helper . build jaxb context ( limits   object   factory . get class (  )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\main\java\org\openrepose\filters\ratelimiting\util\LimitsEntityStreamTransformer.java,combine,public void   (  limits transform pair pair  output stream out )  {  combiner . transform ( pair out )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\main\java\org\openrepose\filters\ratelimiting\util\LimitsEntityStreamTransformer.java,entity as xml,public void   (  limits l  output stream output )  {  entiy transform . transform ( limits   object   factory . create limits ( l )  output )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\main\java\org\openrepose\filters\ratelimiting\util\LimitsEntityStreamTransformer.java,stream as json,public void   (  input stream in  output stream out )  {  json transform . transform ( in out )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\main\java\org\openrepose\filters\ratelimiting\write\CombinedLimitsWriter.java,write,"public  media type   (  rate limit list active rate limits  media type media type  input stream absolute limits  output stream output stream )  {  try  {  final  limits transform pair transform pair = new  limits transform pair ( absolute limits active rate limits )  ;  final  byte array output stream bos = new  byte array output stream (  )  ;  response   transformer . combine ( transform pair bos )  ;  final  limits response mime type writer response writer = new  limits response mime type writer ( response   transformer )  ;  return response writer . write limits response ( bos . to byte array (  )  media type output stream )  ;   }  catch  (   exception ex )   {  log . error ( "" failed to serialize limits upon user request .   reason: ""  +  ex . get message (  )  ex )  ;  throw new  rate limiting serialization exception ( "" failed to serialize limits upon user request .   reason: ""  +  ex . get message (  )  ex )  ;   }   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\main\java\org\openrepose\filters\ratelimiting\write\LimitsResponseMimeTypeWriter.java, limits response mime type writer,public   (  limits entity stream transformer response transformer )  {  this . response transformer = response transformer ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\main\java\org\openrepose\filters\ratelimiting\write\LimitsResponseMimeTypeWriter.java,write limits response,public  media type   ( byte[] readable contents  media type media type  output stream output stream )  throws io exception  {  if  (  media type . application   xml   value . equals ignore case ( media type . to string (  )  )  )   {  output stream . write ( readable contents )  ;  return  media type . application   xml ;   }  else  {  response transformer . stream as json ( new  byte array input stream ( readable contents )  output stream )  ;  return  media type . application   json ;   }   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\test\java\org\openrepose\filters\ratelimiting\LimitLoggerTest.java,should return request remote host,"@ test public void   (  )  {  final  limit logger logger = new  limit logger ( ""some   username"" mocked request )  ;  when ( mocked request . get header (  common http header . auth   token )  )  . then return ( ""some   username"" )  ;  when ( mocked reque"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\test\java\org\openrepose\filters\ratelimiting\LimitLoggerTest.java,should return username,"@ test public void   (  )  {  final  limit logger logger = new  limit logger ( ""some   username"" mocked request )  ;  when ( mocked request . get header (  common http header . auth   token )  )  . then return ( null )  ;  final  string user id = logger ."
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\test\java\org\openrepose\filters\ratelimiting\LimitLoggerTest.java,should returnx forwarded for,"@ test public void   (  )  {  final  limit logger logger = new  limit logger ( ""some   username"" mocked request )  ;  when ( mocked request . get header (  common http header . auth   token )  )  . then return ( ""some   username"" )  ;  when ( mocked reque"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\test\java\org\openrepose\filters\ratelimiting\RateLimitingTestSupport.java,create handler,public static  rate limiting handler   (  rate limiting configuration configuration object  event service event service  distributed datastore datastore )  {   rate limit cache rate limit cache = new  managed rate limit cache ( datastore )  ;   rate limiting service rate limiting service =  rate limiting service factory . create rate limiting service ( rate limit cache configuration object )  ;   optional <  pattern >  describe limits uri regex = configuration object . get request endpoint (  )   !  =  null  ?   optional . of (  pattern . compile ( configuration object . get request endpoint (  )  . get uri regex (  )  )  )  :  optional . empty (  )  ;  boolean include absolute limits = configuration object . get request endpoint (  )   !  =  null && configuration object . get request endpoint (  )  . is include absolute limits (  )  ;  return new  rate limiting handler ( new  rate limiting service helper ( rate limiting service new  active limits writer (  )  new  combined limits writer (  )  )  event service include absolute limits describe limits uri regex configuration object . is over limit429 response code (  )  configuration object . get datastore warn limit (  )  . int value (  )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\test\java\org\openrepose\filters\ratelimiting\RateLimitingTestSupport.java,default rate limiting configuration,"public static  rate limiting configuration   (  )  {  final  rate limiting configuration new cfg = new  rate limiting configuration (  )  ;  final  request endpoint endpoint = new  request endpoint (  )  ;  endpoint . set include absolute limits (  boolean . true )  ;  endpoint . set uri regex ( "" / v1 . 0 / limits /  ? "" )  ;  new cfg . set request endpoint ( endpoint )  ;  new cfg . get limit group (  )  . add ( new configured limit group ( default   user   role default   uri default   uri   regex default   limit   group   id )  )  ;  new cfg . get limit group (  )  . add ( new multi method configured limit group ( default   user   role multi   method   uri multi   method   uri   regex multi   method   limit   group   id )  )  ;  return new cfg ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\test\java\org\openrepose\filters\ratelimiting\RateLimitingTestSupport.java,new configured limit group,"public static  configured limit group   (  string user role  string rate limit uri  string uri regex  string limit group id )  {  final int value = 3 ;  final  configured limit group limit group = new  configured limit group (  )  ;  limit group . set default (  boolean . true )  ;  limit group . set id ( limit group id )  ;  limit group . get groups (  )  . add ( user role )  ;  limit group . get limit (  )  . add ( new configured rate limit ( ""one""  time unit . minute new  array list <  http method >  (  )  {   {  add (  http method . get )  ;   }   }   rate limit uri uri regex value )  )  ;  limit group . get limit (  )  . add ( new configured rate limit ( ""two""  time unit . minute new  array list <  http method >  (  )  {   {  add (  http method . put )  ;   }   }   rate limit uri uri regex value )  )  ;  limit group . get limit (  )  . add ( new configured rate limit ( ""three""  time unit . minute new  array list <  http method >  (  )  {   {  add (  http method . post )  ;   }   }   rate limit uri uri regex value )  )  ;  limit group . get limit (  )  . add ( new configured rate limit ( ""four""  time unit . minute new  array list <  http method >  (  )  {   {  add (  http method . delete )  ;   }   }   rate limit uri uri regex value )  )  ;  return limit group ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\test\java\org\openrepose\filters\ratelimiting\RateLimitingTestSupport.java,new configured rate limit,public static  configured ratelimit   (  string id  time unit unit  list <  http method >  methods  string rate limit uri  string uri regex int value )  {  final  configured ratelimit rate limit = new  configured ratelimit (  )  ;  rate limit . set id ( id )  ;  rate limit . set unit ( unit )  ;  rate limit . set uri ( rate limit uri )  ;  rate limit . set uri regex ( uri regex )  ;  rate limit . set value ( value )  ;  for  (   http method method : methods )   {  rate limit . get http methods (  )  . add ( method )  ;   }  return rate limit ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\test\java\org\openrepose\filters\ratelimiting\RateLimitingTestSupport.java,new multi method configured limit group,"public static  configured limit group   (  string user role  string rate limit uri  string uri regex  string limit group id )  {  final int value = 3 ;  final  configured limit group limit group = new  configured limit group (  )  ;  limit group . set default (  boolean . false )  ;  limit group . set id ( limit group id )  ;  limit group . get groups (  )  . add ( user role )  ;  limit group . get limit (  )  . add ( new configured rate limit ( ""one""  time unit . minute new  array list <  http method >  (  )  {   {  add (  http method . get )  ;  add (  http method . put )  ;  add (  http method . post )  ;  add (  http method . delete )  ;   }   }   rate limit uri uri regex value )  )  ;  return limit group ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\test\java\org\openrepose\filters\ratelimiting\RateLimitingTestSupport.java,new regex cache,public static  map <  string  map <  string  pattern >  >    (  list <  configured limit group >  clg list )  {  final  map <  string  map <  string  pattern >  >  regex cache = new  hash map <  >  (  )  ;  for  (   configured limit group clg : clg list )   {  final  map <  string  pattern >  limit group regex cache = new  hash map <  >  (  )  ;  for  (   configured ratelimit crl : clg . get limit (  )  )   {  limit group regex cache . put ( crl . get uri (  )   pattern . compile ( crl . get uri regex (  )  )  )  ;   }  regex cache . put ( clg . get id (  )  limit group regex cache )  ;   }  return regex cache ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\test\java\org\openrepose\filters\ratelimiting\util\combine\CombineLimitsTransformTest.java,create rate limit list,"private  rate limit list   (  )  {  final  map <  string  cached rate limit >  cache map ;  final  configured limit group configured limit group ;   linked list <  http method >  methods = new  linked list <  http method >  (  )  ;  methods . add (  http method . get )  ;  methods . add (  http method . put )  ;  methods . add (  http method . post )  ;  methods . add (  http method . delete )  ;  cache map = new  hash map <  >  (  )  ;  configured limit group = new  configured limit group (  )  ;  configured limit group . set default (  boolean . true )  ;  configured limit group . set id ( ""configured - limit - group"" )  ;  configured limit group . get groups (  )  . add ( ""user"" )  ;  cache map . put ( simple   id new  cached rate limit ( new limit config ( simple   id simple   uri simple   uri   regex methods )  1 )  )  ;  configured limit group . get limit (  )  . add ( new limit config ( simple   id simple   uri simple   uri   regex methods )  )  ;  cache map . put ( complex   id new  cached rate limit ( new limit config ( complex   id complex   uri complex   uri   regex methods )  1 )  )  ;  configured limit group . get limit (  )  . add ( new limit config ( complex   id complex   uri complex   uri   regex methods )  )  ;  return new  rate limit list builder ( cache map configured limit group )  . to rate limit list (  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\test\java\org\openrepose\filters\ratelimiting\util\combine\CombineLimitsTransformTest.java,get document,private  document   (  string actual )  throws  parser configuration exception  sax exception  io exception  {   document builder builder = builder factory . new document builder (  )  ;  return builder . parse ( new  byte array input stream ( actual . get bytes (  )  )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\test\java\org\openrepose\filters\ratelimiting\util\combine\CombineLimitsTransformTest.java,getx path,private x path   (  )  {  x path factory x pathfactory = x path factory . new instance (  )  ;  return x pathfactory . newx path (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\test\java\org\openrepose\filters\ratelimiting\util\combine\CombineLimitsTransformTest.java,new limit config,private  configured ratelimit   (  string limit id  string uri  string uri regex  linked list <  http method >  methods )  {  final  configured ratelimit configured rate limit = new  configured ratelimit (  )  ;  configured rate limit . set id ( limit id )  ;  configured rate limit . set unit (  time unit . hour )  ;  configured rate limit . set uri ( uri )  ;  configured rate limit . set uri regex ( uri regex )  ;  configured rate limit . set value ( 20 )  ;  for  (   http method m : methods )   {  configured rate limit . get http methods (  )  . add ( m )  ;   }  return configured rate limit ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\test\java\org\openrepose\filters\ratelimiting\util\combine\CombineLimitsTransformTest.java,should combine input stream with jaxb element,"@ test public void   (  )  throws  exception  {  final  input stream is =  combine limits transform test . class . get resource as stream ( "" / meta - inf / schema / examples / absolute - limits . xml"" )  ;   rate limit list rll = create rate limit list ("
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\test\java\org\openrepose\filters\ratelimiting\util\combine\CombineLimitsTransformTest.java,stand up,@ before public void   (  )  throws  exception  {  combiner = new  combined limits transformer (  transform helper . get templates from input stream (  limits entity stream transformer . class . get resource as stream ( combiner   xsl   location )  )  jax
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\test\java\org\openrepose\filters\ratelimiting\RateLimitingHandlerTest.java,before any,@ before public void   (  )  throws  exception  {  datastore = mock (  distributed datastore . class )  ;  event service = mock (  event service . class )  ;  final  datastore service service = mock (  datastore service . class )  ;  when ( service . get 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\test\java\org\openrepose\filters\ratelimiting\RateLimitingHandlerTest.java,new handler,public  rate limiting handler   (  )  {  return  rate limiting test support . create handler ( default rate limiting configuration (  )  event service datastore )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\test\java\org\openrepose\filters\ratelimiting\RateLimitingHandlerTest.java,setup,"@ before public void   (  )  {  default config . set id ( ""one"" )  ;  default config . set uri ( "" . *"" )  ;  default config . set uri regex ( "" . *"" )  ;  default config . get http methods (  )  . add (  http method . get )  ;  default config . set value"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\test\java\org\openrepose\filters\ratelimiting\RateLimitingHandlerTest.java,should change accept type to xml when json absolute limits is requested,"@ test public void   (  )  {  mocked request . set requesturi ( "" / v1 . 0 / limits"" )  ;  mocked request . add header ( "" accept""  media type . application   xml   value )  ;   http servlet request wrapper wrapped request = new  http servlet request wrap"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\test\java\org\openrepose\filters\ratelimiting\RateLimitingHandlerTest.java,should pass valid requests,"@ test public void   (  )  {  mocked request . set requesturi ( "" / v1 . 0 / 12345 / resource"" )  ;  mocked request . add header ( "" accept""  media type . application   json   value )  ;   hash map <  string  cached rate limit >  limit map = new  hash map"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\test\java\org\openrepose\filters\ratelimiting\RateLimitingHandlerTest.java,should process response when absolute limits integration is enabled,"@ test public void   (  )  {  mocked request . set requesturi ( "" / v1 . 0 / limits"" )  ;  mocked request . add header ( "" accept""  media type . application   json   value )  ;   filter action filter action = new handler (  )  . handle request ( new  http"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\test\java\org\openrepose\filters\ratelimiting\RateLimitingHandlerTest.java,should raise event when rate limit breaches,"@ test public void   (  )  throws  over limit exception  {   rate limiting service helper helper = mock (  rate limiting service helper . class )  ;  mocked request . add header ( "" accept""  media type . application   xml   value )  ;   rate limiting hand"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\test\java\org\openrepose\filters\ratelimiting\RateLimitingHandlerTest.java,should reject describe limits call acceptinga zero quality supported type with,"@ test public void   (  )  {  mocked request . set requesturi ( "" / v1 . 0 / limits"" )  ;  mocked request . add header ( "" accept"" ""application / xml ; q = 0 . 0"" )  ;   filter action filter action = new handler (  )  . handle request ( new  http servlet "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\test\java\org\openrepose\filters\ratelimiting\RateLimitingHandlerTest.java,should reject describe limits call accepting unsupported type with,"@ test public void   (  )  {  mocked request . set requesturi ( "" / v1 . 0 / limits"" )  ;  mocked request . add header ( "" accept"" ""leqz"" )  ;   filter action filter action = new handler (  )  . handle request ( new  http servlet request wrapper ( mocked "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\test\java\org\openrepose\filters\ratelimiting\RateLimitingHandlerTest.java,should return json describe limits call when highest quality supported type,"@ test public void   (  )  {  mocked request . set requesturi ( "" / v1 . 0 / limits"" )  ;  mocked request . add header ( "" accept"" ""application / xml ; q = 0 . 5  application / json ; q = 0 . 8  text / xml"" )  ;   rate limiting configuration rate limiting"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\test\java\org\openrepose\filters\ratelimiting\RateLimitingHandlerTest.java,should return json describe limits call when most specific supported type,"@ test public void   (  )  {  mocked request . set requesturi ( "" / v1 . 0 / limits"" )  ;  mocked request . add header ( "" accept"" ""application / *  application / json"" )  ;   rate limiting configuration rate limiting configuration = default rate limiting"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\test\java\org\openrepose\filters\ratelimiting\RateLimitingHandlerTest.java,should return json describe limits call with no accept type no upstream,"@ test public void   (  )  {  mocked request . set requesturi ( "" / v1 . 0 / limits"" )  ;   http servlet request wrapper wrapped request = new  http servlet request wrapper ( mocked request )  ;   rate limiting configuration rate limiting configuration = "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\test\java\org\openrepose\filters\ratelimiting\RateLimitingHandlerTest.java,should return unauthorized when user information is missing,"@ test public void   (  )  {   filter action filter action = new handler (  )  . handle request ( new  http servlet request wrapper ( mocked request )  mocked response )  ;  assert equals ( "" handler must return on rate limiting failure""  filter action . "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\test\java\org\openrepose\filters\ratelimiting\RateLimitingHandlerTest.java,should return xml describe limits call when json is most specific supported but not highest quality type,"@ test public void   (  )  {  mocked request . set requesturi ( "" / v1 . 0 / limits"" )  ;  mocked request . add header ( "" accept"" ""application / * ; q = 0 . 8  application / json ; q = 0 . 5"" )  ;   rate limiting configuration rate limiting configuration"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\test\java\org\openrepose\filters\ratelimiting\write\LimitsResponseMimeTypeWriterTest.java, when writing,public   (  )  throws io exception  {  transformer = mock (  limits entity stream transformer . class )  ;  out = mock (  output stream . class )  ;  final  input stream in = mock (  input stream . class )  ;  this . writer = new  limits response mime type writer ( transformer )  ;  do nothing (  )  . when ( transformer )  . stream as json ( in out )  ;  do nothing (  )  . when ( out )  . write ( readable contents )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\test\java\org\openrepose\filters\ratelimiting\write\LimitsResponseMimeTypeWriterTest.java,should choose json path,@ test public void   (  )  throws io exception  {  writer . write limits response ( readable contents  media type . application   json out )  ;  verify ( transformer times ( 1 )  )  . stream as json ( any (  input stream . class )  any (  output stream . 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\test\java\org\openrepose\filters\ratelimiting\write\LimitsResponseMimeTypeWriterTest.java,should choose xml path,@ test public void   (  )  throws io exception  {  writer . write limits response ( readable contents  media type . application   xml out )  ;  verify ( out times ( 1 )  )  . write ( readable contents )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\test\java\org\openrepose\filters\ratelimiting\util\combine\InputStreamUriParameterTest.java,setup,"@ before public void   (  )  {  input stream reference = mock (  input stream . class )  ;  when ( input stream reference . to string (  )  )  . then return ( ""stream ref"" )  ;  input stream uri parameter = new  input stream uri parameter ( input stream r"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\test\java\org\openrepose\filters\ratelimiting\util\combine\InputStreamUriParameterTest.java,should return new stream source if is matching href,"@ test public void   (  )  throws  transformer exception  {   string valid href = ""reference:jio:stream ref"" ;  assert not null ( input stream uri parameter . resolve ( valid href null )  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\test\java\org\openrepose\filters\ratelimiting\util\combine\InputStreamUriParameterTest.java,should throw exception if is not matching href,"@ test ( expected =  combined limits transformer exception . class )  public void   (  )  throws  transformer exception  {   string valid href = ""reference:jio:invalid stream ref"" ;  assert not null ( input stream uri parameter . resolve ( valid href null"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\tightly-coupled-filter\src\main\java\org\openrepose\experimental\filters\servletcontract\TightlyCoupledFilter.java,do filter,"@ override @ suppress warnings ( ""squid:s00112"" )  public void   (  servlet request servlet request  servlet response servlet response  filter chain filter chain )  throws io exception   servlet exception  {   http servlet response wrapper mutable respons"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\tightly-coupled-filter\src\main\java\org\openrepose\experimental\filters\servletcontract\TightlyCoupledFilter.java,init,"@ override public void   (  filter config filter config )  throws  servlet exception  {  log . debug ( "" start ""  +  this . get class (  )  . get name (  )  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\servlet-contract-filter\src\main\java\org\openrepose\experimental\filters\servletcontract\ResponseCaptureFilter.java, filter servlet output stream,public   (  byte array output stream streamp )  {  stream = streamp ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\servlet-contract-filter\src\main\java\org\openrepose\experimental\filters\servletcontract\ResponseCaptureFilter.java, response wrapper,public   (  http servlet response resp )  {  super ( resp )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\servlet-contract-filter\src\main\java\org\openrepose\experimental\filters\servletcontract\ResponseCaptureFilter.java,do filter,"@ suppress warnings ( ""squid:s00112"" )  @ override public void   (  servlet request servlet request  servlet response servlet response  filter chain filter chain )  throws io exception   servlet exception  {   response wrapper resp wrap = new  response wr"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\servlet-contract-filter\src\main\java\org\openrepose\experimental\filters\servletcontract\ResponseCaptureFilter.java,get content,"public  string   (  )  {  try  {  stream . flush (  )  ;  stream . close (  )  ;   }  catch  (  io exception e )   {  log . trace ( "" caught  exception while flushing and closing stream . "" e )  ;   }  return stream . to string (  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\servlet-contract-filter\src\main\java\org\openrepose\experimental\filters\servletcontract\ResponseCaptureFilter.java,get output stream,@ override public  servlet output stream   (  )  throws io exception  {  return so stream ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\servlet-contract-filter\src\main\java\org\openrepose\experimental\filters\servletcontract\ResponseCaptureFilter.java,get writer,@ override public  print writer   (  )  {  return writer ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\servlet-contract-filter\src\main\java\org\openrepose\experimental\filters\servletcontract\ResponseCaptureFilter.java,init,"@ override public void   (  filter config filter config )  throws  servlet exception  {  log . info ( "" start  {  } "" this . get class (  )  . get name (  )  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\servlet-contract-filter\src\main\java\org\openrepose\experimental\filters\servletcontract\ResponseCaptureFilter.java,write,@ override public void   ( byte[] b int off int len )  throws io exception  {  stream . write ( b off len )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\test\java\org\openrepose\filters\ratelimiting\util\LimitsEntityStreamTransformerTest.java,should stream open stack format,"@ test public void   (  )  {  final  string json   limits = "" { \""limits\"" :  { \""rate\"" : [ { \""uri\"" : \"" / v1 . 0 / *\"" \""regex\"" : \""^ / 1 . 0 /  . *\"" ""  +  ""\""limit\"" : [ { \""verb\"" : \""get\"" \""value\"" : 600000 \""remaining\"" : 426852 \""unit\"" : \""ho"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\httpx\HttpxException.java, httpx exception,public   (  throwable cause )  {  super ( cause )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\httpx\HttpxMarshallerUtility.java,get context,"private static jaxb context   (  )  {  try  {  return jaxb context . new instance ( httpx   package  httpx marshaller utility . class . get class loader (  )  )  ;   }  catch  (  jaxb exception ex )   {  throw new  httpx exception ( "" error creating jaxb context for httpx"" ex )  ;   }   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\httpx\HttpxMarshallerUtility.java,get schema source,"private static  schema   (  )  {   schema factory factory =  schema factory . new instance ( xml constants . w3c   xml   schema   ns   uri xerces   factory   name  httpx marshaller utility . class . get class loader (  )  )  ;   input stream input stream =  httpx marshaller . class . get resource as stream ( httpx   schema )  ;  url inputurl =  httpx marshaller . class . get resource ( httpx   schema )  ;   source schema source = new  stream source ( input stream inputurl . to external form (  )  )  ;  try  {  return factory . new schema ( schema source )  ;   }  catch  (  sax exception ex )   {  throw new  httpx exception ( "" unable to load httpx schema"" ex )  ;   }   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\httpx\HttpxMarshallerUtility.java,make object,@ override public  unmarshaller   (  )  {  try  {   unmarshaller unmarshaller = jaxb   context . create unmarshaller (  )  ;  unmarshaller . set schema ( schema )  ;  return unmarshaller ;   }  catch  (  jaxb exception ex )   {  throw new  httpx exception
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\httpx\HttpxProducer.java, httpx producer,public   (  http servlet request request  http servlet response response )  {  this . request = request ;  this . response = response ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\httpx\HttpxProducer.java,get header list,private  header list   (  header container container )  {   header list result = object   factory . create header list (  )  ;   list <  quality name value pair >  header list = result . get header (  )  ;  for  (   header name name : container . get header names (  )  )   {   list <  header value >  values = container . get header values ( name . get name (  )  )  ;  for  (   header value value : values )   {   quality name value pair header = new  quality name value pair (  )  ;  header . set name ( name . get name (  )  )  ;  header . set value ( value . get value (  )  )  ;  header . set quality ( value . get quality factor (  )  )  ;  header list . add ( header )  ;   }   }  return result ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\httpx\HttpxProducer.java,get headers,public  headers   (  )  {  if  ( headers  =  =  null )   {  headers = object   factory . create headers (  )  ;  headers . set request ( get header list ( new  request header container ( request )  )  )  ;  headers . set response ( get header list ( new  response header container ( response )  )  )  ;   }  return headers ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\httpx\HttpxProducer.java,get request information,"@ suppress warnings ( ""squid:s2254"" )  public  request information   (  )  {  if  ( request information  =  =  null )   {  request information = object   factory . create request information (  )  ;  request information . set uri ( request . get requestur"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\httpx\HttpxProducer.java,get request parameters,public  query parameters   (  )  {  if  ( query parameters  =  =  null )   {  query parameters = object   factory . create query parameters (  )  ;  if  ( request  !  =  null )   {   list <  name value pair >  parameters = query parameters . get parameter (  )  ;   set <  entry <  string  string[] >  >  params = request . get parameter map (  )  . entry set (  )  ;  for  (   entry <  string  string[] >  entry : params )   {  for  (   string value : entry . get value (  )  )   {   name value pair param = new  name value pair (  )  ;  param . set name ( entry . get key (  )  )  ;  param . set value ( value )  ;  parameters . add ( param )  ;   }   }   }   }  return query parameters ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\httpx\HttpxMarshaller.java, httpx marshaller,public   (  )  {  object factory = new  object factory (  )  ;  parser factory = sax parser factory . new instance (  )  ;  parser factory . set namespace aware ( true )  ;  parser factory . setx include aware ( false )  ;  parser factory . set validating ( true )  ;  parser factory . set schema (  httpx marshaller utility . schema )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\httpx\HttpxMarshaller.java,marshall,"private void   (  object o  output stream out )  {   marshaller pooled object = null ;   object pool <  marshaller >  marshaller pool =  httpx marshaller utility . marshaller   pool ;  try  {  try  {  pooled object = marshaller pool . borrow object (  )  ;  pooled object . marshal ( o out )  ;   }  catch  (   exception ex )   {  marshaller pool . invalidate object ( pooled object )  ;  pooled object = null ;  throw new  httpx exception ( "" error marshalling httpx object"" ex )  ;   }  finally  {  if  ( pooled object  !  =  null )   {  marshaller pool . return object ( pooled object )  ;   }   }   }  catch  (   exception e )   {  throw new  httpx exception ( "" error marshalling httpx object"" e )  ;   }   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\httpx\HttpxMarshaller.java,unmarshall,"public  < t > t   (  input stream xml )  {  t rtn object = null ;   unmarshaller pooled object = null ;   object pool <  unmarshaller >  unmarshaller pool =  httpx marshaller utility . unmarshaller   pool ;  try  {  try  {  pooled object = unmarshaller pool . borrow object (  )  ;  xml reader xml reader = parser factory . newsax parser (  )  . getxml reader (  )  ;  sax source source = new sax source ( xml reader new  input source ( xml )  )  ;   object result = pooled object . unmarshal ( source )  ;  if  ( result instanceof jaxb element )   {  jaxb element element =  ( jaxb element ) result ;  rtn object =  ( t ) element . get value (  )  ;   }  else  {  rtn object =  ( t ) result ;   }   }  catch  (   exception ex )   {  unmarshaller pool . invalidate object ( pooled object )  ;  pooled object = null ;  throw new  httpx exception ( "" error unmarshalling xml input"" ex )  ;   }  finally  {  if  ( pooled object  !  =  null )   {  unmarshaller pool . return object ( pooled object )  ;   }   }   }  catch  (   exception e )   {  log . error ( "" error unmarshalling xml input"" e )  ;  throw new  httpx exception ( "" error unmarshalling xml input"" e )  ;   }  return rtn object ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\httpx\HttpxMarshaller.java,unmarshall headers,public  headers   (  input stream xml )  {  return unmarshall ( xml )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\httpx\HttpxMarshaller.java,unmarshall query parameters,public  query parameters   (  input stream xml )  {  return unmarshall ( xml )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\httpx\HttpxMarshaller.java,unmarshall request information,public  request information   (  input stream xml )  {  return unmarshall ( xml )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\httpx\marshaller\MarshallerFactory.java,new instance,public static  marshaller   (  )  {  return new  message envelope marshaller (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\httpx\ObjectFactoryUser.java,get object factory,public  object factory   (  )  {  return object factory ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\httpx\ObjectFactoryUser.java,set object factory,public void   (  object factory object factory )  {  this . object factory = object factory ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\httpx\marshaller\MarshallerException.java, marshaller exception,public   (  string message  throwable throwable )  {  super ( message throwable )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\httpx\processor\cdata\UnknownContentStreamProcessor.java,process,@ override public  input stream   (  input stream source stream )  {  return  input stream merger . merge (  input stream merger . wrap ( unknown   prefix )  source stream  input stream merger . wrap ( unknown   suffix )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\httpx\marshaller\MessageEnvelopeMarshaller.java,marshall,"@ override public  input stream   (  message envelope message envelope )  {   byte array output stream output stream = new  byte array output stream (  )  ;  try  {  jaxb context jaxb context = jaxb context . new instance ( ""org . openrepose . core . http"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\httpx\processor\common\PreProcessorException.java, pre processor exception,public   (  string message  throwable cause )  {  super ( message cause )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\httpx\processor\json\elements\EndElement.java, end element,"@ suppress warnings ( ""squid:s1172"" )  public   (  string element  string name )  {  super ( element )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\httpx\processor\json\elements\EndElement.java,output element,@ override public void   (  content handler handler )  throws sax exception  {  handler . end element ( jsonx   uri get local name (  )  get qname (  )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\httpx\processor\json\elements\BaseElement.java, base element,public   (  string element  attributes impl attrs )  {  this . element = element ;  this . attrs = attrs ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\httpx\processor\json\elements\BaseElement.java,get attributes,public  attributes impl   (  )  {  return attrs ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\httpx\processor\json\elements\BaseElement.java,get element,public  string   (  )  {  return element ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\httpx\processor\json\elements\BaseElement.java,get local name,public  string   (  )  {  return get local name ( element )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\httpx\processor\json\elements\BaseElement.java,get qname,public  string   (  )  {  return get qname ( element )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\httpx\processor\json\elements\ElementFactory.java, element factory,  (  string token name  string element name )  {  this . token name = token name ;  this . element name = element name ;  this . element class = null ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\httpx\processor\json\elements\ElementFactory.java,get element,"public static  element   (  string token name  string name )  {   element result = null ;  for  (   element factory element : values (  )  )   {  if  ( element . token name . equals ( token name )  )   {  if  ( element . element class  !  =  null )   {  try  {  result =  (  element ) element . element class . get constructors (  ) [0] . new instance ( element . element name name )  ;   }  catch  (   exception ex )   {  result = null ;  log . trace ( "" caught  unknown  exception"" ex )  ;   }   }  break ;   }   }  return result ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\httpx\processor\json\elements\ElementFactory.java,get scalar element,"public static  < t >  element   (  string token name  string name t value )  {   element result = null ;  for  (   element factory element : values (  )  )   {  if  ( element . token name . equals ( token name )  )   {  if  ( element . element class  !  =  null )   {  try  {  result =  (  element ) element . element class . get constructors (  ) [0] . new instance ( element . element name name value )  ;   }  catch  (   exception ex )   {  result = null ;  log . trace ( "" caught  unknown  exception"" ex )  ;   }   }  else  {  result = new  scalar element <  >  ( element . element name name value )  ;   }  break ;   }   }  return result ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\httpx\processor\json\elements\StartElement.java, start element,"public   (  string element  string name )  {  super ( element )  ;  if  ( name  !  =  null )   {  get attributes (  )  . add attribute ( """" ""name"" ""name"" ""xsd:string"" name )  ;   }   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\httpx\processor\json\elements\StartElement.java,output element,@ override public void   (  content handler handler )  throws sax exception  {  handler . start element ( jsonx   uri get local name (  )  get qname (  )  get attributes (  )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\httpx\processor\json\elements\ScalarElement.java, scalar element,"public   (  string element  string name t value )  {  super ( element )  ;  this . value = value ;  if  ( name  !  =  null )   {  get attributes (  )  . add attribute ( """" ""name"" ""name"" ""xsd:string"" name )  ;   }   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\httpx\processor\json\elements\ScalarElement.java,output element,@ override public void   (  content handler handler )  throws sax exception  {  handler . start element ( jsonx   uri get local name (  )  get qname (  )  get attributes (  )  )  ;  if  ( value  !  =  null )   {  char[] char value = value . to string (  )
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\httpx\processor\TranslationPreProcessor.java, translation pre processor,public   (  input stream input  media type content type boolean json preprocessing )  {  this . input = input ;  this . json preprocessing = json preprocessing ;  this . content type = content type ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\httpx\processor\TranslationPreProcessor.java,get body stream,public  input stream   (  )  throws io exception  {  final  input stream result ;  switch  (  body content media type . get media type ( content type . get mime type (  )  . get name (  )  )  )   {  case xml: result = input ;  break ;  case json: result = json preprocessing  ?  get json processor (  )  . process ( input )  : input ;  break ;  default : result = get unknown content processor (  )  . process ( input )  ;  break ;   }  return result ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\httpx\processor\TranslationPreProcessor.java,get json processor,protected  input stream processor   (  )  {  return new  jsonx stream processor ( new  json factory (  )  handler   factory )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\httpx\processor\TranslationPreProcessor.java,get unknown content processor,protected  input stream processor   (  )  {  return new  unknown content stream processor (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\httpx\processor\json\JsonxStreamProcessor.java, json stream processor,public   (  transformer handler handler  input stream json in  output stream out )  throws io exception  {  this . handler = handler ;  this . jp = json factory . create json parser ( json in )  ;  this . out = out ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\httpx\processor\json\JsonxStreamProcessor.java, jsonx stream processor,public   (  json factory json factory sax transformer factory handler factory  properties properties )  {  this . json factory = json factory ;  this . handler factory = handler factory ;  format = properties ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\httpx\processor\json\JsonxStreamProcessor.java,destroy,@ override public void   (  )  {  exit thread = true ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\httpx\processor\json\JsonxStreamProcessor.java,end document,"private void   (  )  throws sax exception  {  try  {  handler . end prefix mapping ( xsd   prefix )  ;   }  catch  (   exception ex )   {  log . warn ( "" unable to end prefix mapping: ""  +  xsd   prefix ex )  ;   }  try  {  handler . end prefix mapping ( json   prefix )  ;   }  catch  (   exception ex )   {  log . warn ( "" unable to end prefix mapping: ""  +  json   prefix ex )  ;   }  handler . end document (  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\httpx\processor\json\JsonxStreamProcessor.java,output item,private void   (  json parser jp  content handler handler )  throws io exception  sax exception  {   json token token = jp . get current token (  )  ;   string field name = jp . get current name (  )  ;  if  ( token . is scalar value (  )  )   {  if  ( token . is numeric (  )  )   {   element factory . get scalar element ( token . name (  )  field name jp . get number value (  )  )  . output element ( handler )  ;   }  else  {   element factory . get scalar element ( token . name (  )  field name jp . get text (  )  )  . output element ( handler )  ;   }   }  else  {   element element =  element factory . get element ( token . name (  )  field name )  ;  if  ( element  !  =  null )   {  element . output element ( handler )  ;   }   }   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\httpx\processor\json\JsonxStreamProcessor.java,process,@ override public  input stream   (  input stream source stream )  {  try  {  final  transformer handler transformer handler = handler factory . new transformer handler (  )  ;  final  piped input stream result stream = new  piped input stream (  )  ;  fi
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\httpx\processor\json\JsonxStreamProcessor.java,run,@ override public void   (  )  {  try  {  start document (  )  ;  try  {  while  ( jp . next token (  )   !  =  null &&  ! exit thread )   {  output item ( jp handler )  ;   }   }  finally  {  end document (  )  ;   }   }  catch  (   exception ex )   {  l
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\httpx\processor\json\JsonxStreamProcessor.java,start document,private void   (  )  throws sax exception  {  handler . start document (  )  ;  handler . start prefix mapping ( json   prefix json   uri )  ;  handler . start prefix mapping ( xsd   prefix xsd   uri )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\httpx\processor\json\elements\NullElement.java, null element,public   (  string element  string name  string value )  {  super ( element name value )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\httpx\processor\util\BodyContentMediaType.java, body content media type,  (  string regex )  {  pattern =  pattern . compile ( regex )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\httpx\processor\util\BodyContentMediaType.java,get media type,public static  body content media type   (  string content type )  {  if  ( content type  !  =  null )   {  for  (   body content media type media type : values (  )  )   {  if  ( media type . get pattern (  )  . matcher ( content type )  . matches (  )  )   {  return media type ;   }   }   }  return unknown ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\httpx\processor\util\BodyContentMediaType.java,get pattern, pattern   (  )  {  return pattern ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\httpx\processor\json\elements\NullElement.java,output element,@ override public void   (  content handler handler )  throws sax exception  {  handler . start element ( jsonx   uri get local name (  )  get qname (  )  get attributes (  )  )  ;  handler . end element ( jsonx   uri get local name (  )  get qname (  )  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\resolvers\ClassPathUriResolver.java, class path uri resolver,public   ( uri resolver parent )  {  super ( parent )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\resolvers\ClassPathUriResolver.java,resolve,@ override public  source   (  string href  string base )  throws  transformer exception  {  if  ( href  !  =  null && href . starts with ( classpath   prefix )  )   {   string path = href . substring ( classpath   prefix . length (  )  )  ;   input strea
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\resolvers\HttpxUriInputParameterResolver.java, httpx uri input parameter resolver,public   ( uri resolver parent )  {  super ( parent )  ;  marshaller = new  httpx marshaller (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\resolvers\HttpxUriInputParameterResolver.java,get headers,private  headers   (  )  {  return headers  !  =  null  ?  headers : get producer (  )  . get headers (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\resolvers\HttpxUriInputParameterResolver.java,get producer,private  httpx producer   (  )  {  if  ( producer  =  =  null )   {  producer = new  httpx producer ( request response )  ;   }  return producer ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\resolvers\HttpxUriInputParameterResolver.java,get request information,private  request information   (  )  {  return info  !  =  null  ?  info : get producer (  )  . get request information (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\resolvers\HttpxUriInputParameterResolver.java,get request parameters,private  query parameters   (  )  {  return params  !  =  null  ?  params : get producer (  )  . get request parameters (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\resolvers\HttpxUriInputParameterResolver.java,reset,public void   (  )  {  request = null ;  response = null ;  producer = null ;  headers = null ;  params = null ;  info = null ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\resolvers\HttpxUriInputParameterResolver.java,resolve,@ override public  source   (  string href  string base )  throws  transformer exception  {  if  ( href  !  =  null )   {  if  ( href . starts with ( headers   prefix )  )   {  return new  stream source ( marshaller . marshall ( get headers (  )  )  )  ; 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\resolvers\HttpxUriInputParameterResolver.java,set headers,public void   (  headers headers )  {  this . headers = headers ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\resolvers\HttpxUriInputParameterResolver.java,set params,public void   (  query parameters params )  {  this . params = params ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\resolvers\HttpxUriInputParameterResolver.java,set request,public void   (  http servlet request request )  {  this . request = request ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\resolvers\HttpxUriInputParameterResolver.java,set request information,public void   (  request information info )  {  this . info = info ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\resolvers\HttpxUriInputParameterResolver.java,set response,public void   (  http servlet response response )  {  this . response = response ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\resolvers\OutputStreamUriParameterResolver.java, output stream uri parameter resolver,public   (  outputuri resolver parent )  {  this . parent = parent ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\resolvers\OutputStreamUriParameterResolver.java, resource not found exception,  (  string message )  {  super ( message )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\resolvers\OutputStreamUriParameterResolver.java,add stream,public  string   (  output stream output stream reference  string name )  {   string key = get href ( name )  ;  streams . put ( key output stream reference )  ;  return key ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\resolvers\OutputStreamUriParameterResolver.java,clear streams,public void   (  )  {  streams . clear (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\resolvers\OutputStreamUriParameterResolver.java,close,@ override public void   (  result result )  throws  transformer exception  {  try  {   (  (  stream result ) result )  . get output stream (  )  . close (  )  ;   }  catch  (  io exception ex )   {  throw new  transformer exception ( ex )  ;   }   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\resolvers\OutputStreamUriParameterResolver.java,get href,"public  string   (  string name )  {  try  {  return prefix  +   uri utils . encode path segment ( name ""utf - 8"" )  ;   }  catch  (   unsupported encoding exception ex )   {  log . trace ( ""unable to encode path segment to utf - 8"" ex )  ;  return prefix  +  name ;   }   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\resolvers\OutputStreamUriParameterResolver.java,new instance,@ override public  outputuri resolver   (  )  {  return new  output stream uri parameter resolver ( this )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\resolvers\OutputStreamUriParameterResolver.java,resolve,@ override public  result   (  string href  string base )  throws  transformer exception  {   output stream stream = streams . get ( href )  ;  if  ( stream  !  =  null )   {   stream result result = new  stream result ( stream )  ;  try  {  result . set 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\resolvers\SourceUriResolver.java, source uri resolver,public   ( uri resolver parent )  {  this . parent = parent ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\resolvers\SourceUriResolver.java,get parent,public uri resolver   (  )  {  return parent ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\resolvers\SourceUriResolver.java,resolve,@ override public  source   (  string href  string base )  throws  transformer exception  {  if  ( parent  !  =  null )   {  return parent . resolve ( href base )  ;   }  return null ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\resolvers\InputStreamUriParameterResolver.java, input stream uri parameter resolver,public   ( uri resolver parent )  {  super ( parent )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\resolvers\InputStreamUriParameterResolver.java,add resolver,public void   ( uri resolver resolver )  {  resolvers . add ( resolver )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\resolvers\InputStreamUriParameterResolver.java,add stream,public  string   (  input stream input stream reference  string name )  {   string key = get href ( name )  ;  streams . put ( key input stream reference )  ;  return key ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\resolvers\InputStreamUriParameterResolver.java,clear streams,public void   (  )  {  streams . clear (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\resolvers\InputStreamUriParameterResolver.java,get href,public  string   (  string name )  {  return prefix  +  name ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\resolvers\InputStreamUriParameterResolver.java,remove stream,public void   (  string name )  {  streams . remove ( name )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\resolvers\InputStreamUriParameterResolver.java,resolve,@ override public  source   (  string href  string base )  throws  transformer exception  {   input stream stream = streams . get ( href )  ;  if  ( stream  !  =  null )   {  try  {  return new  stream source ( stream new uri ( href )  . to string (  )  )
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\resolvers\SourceUriResolverChain.java, source uri resolver chain,public   ( uri resolver parent )  {  super ( parent )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\resolvers\SourceUriResolverChain.java,add resolver,public void   ( uri resolver resolver )  {  resolvers . add ( resolver )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\resolvers\SourceUriResolverChain.java,get resolver of type,public  < t extends uri resolver > t   (  class < t >  type )  {  for  (  uri resolver resolver : resolvers )   {  if  ( type . is assignable from ( resolver . get class (  )  )  )   {  return  ( t ) resolver ;   }   }  return null ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\resolvers\SourceUriResolverChain.java,resolve,@ override public  source   (  string href  string base )  throws  transformer exception  {  for  (  uri resolver resolver : resolvers )   {   source source = resolver . resolve ( href base )  ;  if  ( source  !  =  null )   {  return source ;   }   }  re
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\xmlfilterchain\ReposeEntityResolver.java, repose entity resolver,  (  entity resolver parent boolean allow entities )  {  this . parent = parent ;  this . allow entities = allow entities ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\TranslationFilter.java, translation filter,@ inject public   (  configuration service configuration service @ value (  repose spring properties . core . config   root )   string configuration root )  {  this . configuration service = configuration service ;  this . configuration root = configurati
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\TranslationFilter.java,add style sheets to watch list,private void   ( final  translation base translation )  {  if  ( translation . get style sheets (  )   !  =  null )   {  for  (   style sheet sheet : translation . get style sheets (  )  . get style (  )  )   {  if  ( sheet . get href (  )   !  =  null )   {  xsl listener . add to watch list ( sheet . get href (  )  )  ;   }   }   }   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\xmlfilterchain\ReposeEntityResolver.java,resolve entity,"@ override public  input source   (  string public id  string system id )  throws sax exception  io exception  {  log . warn (  ( allow entities  ?  "" resolving"" : "" removing"" )   +  ""  entity[public id = '""  +   ( public id  !  =  null  ?  public id : """""
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\TranslationFilter.java,build chain pool,private  object pool <  xml filter chain >    ( final  translation base translation )  {  return new  soft reference object pool <  >  ( new  xml filter chain factory ( xslt chain builder translation configuration root config )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\TranslationFilter.java,build processor pools,public void   (  )  {  synchronized  ( lock )   {  request processor pools . clear (  )  ;  response processor pools . clear (  )  ;  if  ( configuration . get response translations (  )   !  =  null )   {  for  (  final  response translation translation : configuration . get response translations (  )  . get response translation (  )  )   {  add style sheets to watch list ( translation )  ;   }   }  if  ( configuration . get request translations (  )   !  =  null )   {  for  (  final  request translation translation : configuration . get request translations (  )  . get request translation (  )  )   {  add style sheets to watch list ( translation )  ;   }   }  if  ( configuration . get response translations (  )   !  =  null )   {  for  (  final  response translation translation : configuration . get response translations (  )  . get response translation (  )  )   {   list <  xslt parameter >  params = build xsl param list ( translation )  ;   object pool <  xml filter chain >  pool = build chain pool ( translation )  ;  response processor pools . add ( new  xml chain pool ( translation . get content type (  )  translation . get accept (  )  null translation . get code regex (  )  translation . get translated content type (  )  params pool )  )  ;   }   }  if  ( configuration . get request translations (  )   !  =  null )   {  for  (  final  request translation translation : configuration . get request translations (  )  . get request translation (  )  )   {   list <  xslt parameter >  params = build xsl param list ( translation )  ;   object pool <  xml filter chain >  pool = build chain pool ( translation )  ;  request processor pools . add ( new  xml chain pool ( translation . get content type (  )  translation . get accept (  )  translation . get http methods (  )  null translation . get translated content type (  )  params pool )  )  ;   }   }   }   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\TranslationFilter.java,build xsl param list,private  list <  xslt parameter >    (  translation base translation )  {  final  list <  xslt parameter >  params = new  array list <  >  (  )  ;  if  ( translation . get style sheets (  )   !  =  null )   {  for  (   style sheet sheet : translation . get style sheets (  )  . get style (  )  )   {  for  (   style param param : sheet . get param (  )  )   {  params . add ( new  xslt parameter <  >  ( sheet . get id (  )  param . get name (  )  param . get value (  )  )  )  ;   }   }   }  return params ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\TranslationFilter.java,configuration updated,@ override public void   (  translation config new config )  {  synchronized  ( lock )   {  configuration = new config ;  if  ( configuration . get xsl engine (  )   =  =  xsl engine . saxon   ee )   {  update transformer pool ( saxon   ee   factory   nam
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\TranslationFilter.java,destroy,@ override public void   (  )  {  configuration service . unsubscribe from ( config this )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\TranslationFilter.java,do filter,"@ override public void   (  servlet request request  servlet response response  filter chain chain )  throws io exception   servlet exception  {  if  (  ! is initialized )   {  log . error ( "" filter has not yet initialized .  .  .   please check your con"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\TranslationFilter.java,get handler chain pool,private  list <  xml chain pool >    (  string method  media type content type  list <  media type >  accept  string status  list <  xml chain pool >  pools )  {   list <  xml chain pool >  chains = new  array list <  >  (  )  ;  for  (   media type value : accept )   {  for  (   xml chain pool pool : pools )   {  if  ( pool . accepts ( method content type value status )  )   {  chains . add ( pool )  ;  if  (  ! configuration . is multi match (  )  )   {  break ;   }   }   }   }  return chains ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\TranslationFilter.java,get input parameters,"private  list <  xslt parameter >    ( final  http servlet request wrapper request final  http servlet response wrapper response final  translation result last result )  {   list <  xslt parameter >  inputs = new  array list <  >  (  )  ;  final  string request id =  (  string ) request . get attribute ( ""request id"" )  ;  inputs . add ( new  xslt parameter <  >  ( ""request"" request )  )  ;  inputs . add ( new  xslt parameter <  >  ( ""response"" response )  )  ;  inputs . add ( new  xslt parameter <  >  ( ""request id"" request id )  )  ;  if  ( last result  !  =  null )   {  if  ( last result . get request info (  )   !  =  null )   {  inputs . add ( new  xslt parameter <  >  ( ""request info"" last result . get request info (  )  )  )  ;   }  if  ( last result . get headers (  )   !  =  null )   {  inputs . add ( new  xslt parameter <  >  ( ""headers"" last result . get headers (  )  )  )  ;   }  if  ( last result . get query parameters (  )   !  =  null )   {  inputs . add ( new  xslt parameter <  >  ( ""query params"" last result . get query parameters (  )  )  )  ;   }   }  inputs . add ( new  xslt parameter <  >  ( input   headers   uri ""repose:input:headers:""  +  request id )  )  ;  inputs . add ( new  xslt parameter <  >  ( input   query   uri ""repose:input:query:""  +  request id )  )  ;  inputs . add ( new  xslt parameter <  >  ( input   request   uri ""repose:input:request:""  +  request id )  )  ;  inputs . add ( new  xslt parameter <  >  ( ""output - headers - uri"" ""repose:output:headers . xml"" )  )  ;  inputs . add ( new  xslt parameter <  >  ( ""output - query - uri"" ""repose:output:query . xml"" )  )  ;  inputs . add ( new  xslt parameter <  >  ( ""output - request - uri"" ""repose:output:request . xml"" )  )  ;  return inputs ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\TranslationFilter.java,handle request,"public  handle request result   (  http servlet request wrapper request  http servlet response wrapper response )  {   filter action filter action = return ;   http servlet request wrapper rtn request = request ;   media type content type =  http servlet wrappers helper . get content type ( rtn request )  ;   list <  media type >  accept values =  http servlet wrappers helper . get accept values ( rtn request )  ;   list <  xml chain pool >  pools = get handler chain pool ( rtn request . get method (  )  content type accept values """" new  array list <  >  ( request processor pools )  )  ;  if  ( pools . is empty (  )  )   {  filter action = process   response ;   }  else  {  try  {   translation result result = null ;  for  (   xml chain pool pool : pools )   {  final  servlet input stream in = rtn request . get input stream (  )  ;  final  byte buffer internal buffer = new  cyclic byte buffer ( default   buffer   size true )  ;  result = pool . execute pool ( new  translation pre processor ( in content type true )  . get body stream (  )  new  byte buffer servlet output stream ( internal buffer )  get input parameters ( rtn request response result )  )  ;  if  ( result . is success (  )  )   {  rtn request = new  http servlet request wrapper ( rtn request new  byte buffer input stream ( internal buffer )  )  ;  result . apply results ( rtn request response )  ;  if  (  string utils . is not blank ( pool . get result content type (  )  )  )   {  rtn request . replace header ( content   type pool . get result content type (  )  )  ;  content type =  http servlet wrappers helper . get content type ( pool . get result content type (  )  )  ;   }  response . set status ( sc   ok )  ;  filter action = process   response ;   }  else  {  response . set status ( sc   bad   request )  ;  break ;   }   }   }  catch  (  io exception ex )   {  log . error ( "" error executing request transformer chain"" ex )  ;  response . set status ( sc   internal   server   error )  ;   }   }  return new  handle request result ( filter action rtn request response )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\TranslationFilter.java,handle response,"public void   (  http servlet request wrapper request  http servlet response wrapper response )  {   media type content type =  http servlet wrappers helper . get content type ( response )  ;   list <  media type >  accept values =  http servlet wrappers helper . get accept values ( request )  ;   list <  xml chain pool >  pools = get handler chain pool ( """" content type accept values  string . value of ( response . get status (  )  )  new  array list <  >  ( response processor pools )  )  ;  if  (  ! pools . is empty (  )  )   {  try  {   byte array output stream baos = new  byte array output stream (  )  ;   translation result result = null ;  for  (   xml chain pool pool : pools )   {  final  input stream in = response . get output stream as input stream (  )  ;  if  ( in  !  =  null && in . available (  )   >  0 )   {  result = pool . execute pool ( new  translation pre processor ( in content type true )  . get body stream (  )  baos get input parameters ( request response result )  )  ;  if  ( result . is success (  )  )   {  result . apply results ( request response )  ;  if  (  string utils . is not blank ( pool . get result content type (  )  )  )   {  content type =  http servlet wrappers helper . get content type ( pool . get result content type (  )  )  ;  response . replace header ( content   type content type . get value (  )  )  ;   }  response . set output ( new  byte array input stream ( baos . to byte array (  )  )  )  ;   }  else  {  response . set status ( sc   internal   server   error )  ;  break ;   }   }   }   }  catch  (  io exception ex )   {  log . error ( "" error executing response transformer chain"" ex )  ;  response . set status ( sc   internal   server   error )  ;   }   }   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\TranslationFilter.java,init,"@ override public void   (  filter config filter config )  throws  servlet exception  {  config = new  filter config helper ( filter config )  . get filter config ( default   config )  ;  log . info ( "" initializing filter using config ""  +  config )  ;  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\TranslationFilter.java,is initialized,@ override public boolean   (  )  {  return is initialized ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\TranslationFilter.java,update transformer pool,private void   (  string trans factory class )  {  if  (  ! transformer factory . get class (  )  . get canonical name (  )  . equals ( trans factory class )  )   {  transformer factory =  ( sax transformer factory )  transformer factory . new instance ( trans factory class this . get class (  )  . get class loader (  )  )  ;   }   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\StyleSheetInfo.java, style sheet info,public   (  string id  node xsl  string system id )  {  this . id = id ;  this . uri = null ;  this . xsl = xsl ;  this . system id = system id ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\StyleSheetInfo.java,get id,public  string   (  )  {  return id ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\StyleSheetInfo.java,get system id,public  string   (  )  {  return system id ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\StyleSheetInfo.java,get uri,public  string   (  )  {  return uri ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\StyleSheetInfo.java,get xsl,public  node   (  )  {  return xsl ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\xmlfilterchain\TranslationResult.java, translation result,  ( boolean success  list <  xslt parameter <  ?  extends  output stream >  >  outputs )  {  this . success = success ;  this . outputs = outputs ;  this . marshaller = new  httpx marshaller (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\xmlfilterchain\TranslationResult.java,apply headers,"@ suppress warnings ( ""squid:s1244"" )  private void   ( final  http servlet request wrapper request final  http servlet response wrapper response )  {   headers headers = get headers (  )  ;  if  ( headers  =  =  null )   {  return ;   }  if  ( headers . "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\xmlfilterchain\TranslationResult.java,apply query params,"private void   ( final  http servlet request wrapper request )  {   query parameters params = get query parameters (  )  ;  if  ( params  =  =  null )   {  return ;   }  if  ( params . get parameter (  )   !  =  null )   {   string builder sb = new  string builder (  )  ;  for  (   name value pair param : params . get parameter (  )  )   {  if  ( sb . length (  )   >  0 )   {  sb . append ( ""&"" )  ;   }  sb . append ( param . get name (  )  )  . append ( "" = "" )  . append ( param . get value (  )   !  =  null  ?  param . get value (  )  : """" )  ;   }  request . set query string ( sb . to string (  )  )  ;   }   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\xmlfilterchain\TranslationResult.java,apply request info,"private void   ( final  http servlet request wrapper request )  {   request information request info = get request info (  )  ;  if  ( request info  =  =  null )   {  return ;   }  if  (  string utils . is not blank ( request info . get uri (  )  )  )   {  request . set requesturi ( request info . get uri (  )  )  ;   }  if  (  string utils . is not blank ( request info . get url (  )  )  )   {  try  {  url url = new url ( request info . get url (  )  )  ;  if  (  string utils . is not blank ( url . get protocol (  )  )  )   {  request . set scheme ( url . get protocol (  )  )  ;   }  if  (  string utils . is not blank ( url . get host (  )  )  )   {  request . set server name ( url . get host (  )  )  ;   }  if  ( url . get port (  )   >  0 )   {  request . set server port ( url . get port (  )  )  ;   }  if  (  string utils . is not blank ( url . get path (  )  )  )   {  request . set requesturi ( url . get path (  )  )  ;   }  if  (  string utils . is not blank ( url . get query (  )  )  )   {  request . set query string ( url . get query (  )  )  ;   }   }  catch  (   malformedurl exception e )   {  log . info ( "" failed to parse the translated url:  {  } "" request info . get url (  )  )  ;  log . trace ( """" e )  ;   }   }   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\xmlfilterchain\TranslationResult.java,apply results,public void   ( final  http servlet request wrapper request final  http servlet response wrapper response )  {  apply headers ( request response )  ;  apply query params ( request )  ;  apply request info ( request )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\xmlfilterchain\TranslationResult.java,get headers,"public  headers   (  )  {   byte array output stream headers output = get headers stream (  )  ;  if  ( headers output  =  =  null )   {  return null ;   }  byte[] out = headers output . to byte array (  )  ;   byte array input stream input = new  byte array input stream ( out )  ;  if  ( input . available (  )   =  =  0 )   {  return null ;   }  if  ( log . is debug enabled (  )  )   {  log . debug ( "" new headers: ""  +  new  string ( out  standard charsets . utf   8 )  )  ;   }  return marshaller . unmarshall headers ( input )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\xmlfilterchain\TranslationResult.java,get headers stream,public  < t extends  output stream > t   (  )  {  return get stream ( headers   output )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\xmlfilterchain\TranslationResult.java,get params,public  < t extends  output stream > t   (  )  {  return get stream ( query   output )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\xmlfilterchain\TranslationResult.java,get query parameters,public  query parameters   (  )  {   byte array output stream params output = get params (  )  ;  if  ( params output  =  =  null )   {  return null ;   }   byte array input stream input = new  byte array input stream ( params output . to byte array (  )  )  ;  if  ( input . available (  )   =  =  0 )   {  return null ;   }  return marshaller . unmarshall query parameters ( input )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\xmlfilterchain\TranslationResult.java,get request info,"public  request information   (  )  {   byte array output stream request output = get request info stream (  )  ;  if  ( request output  =  =  null )   {  return null ;   }  byte[] request bytes = request output . to byte array (  )  ;   byte array input stream input = new  byte array input stream ( request bytes )  ;  if  ( input . available (  )   =  =  0 )   {  return null ;   }  if  ( log . is debug enabled (  )  )   {  log . debug ( "" new request info: ""  +  new  string ( request bytes  standard charsets . utf   8 )  )  ;   }  return marshaller . unmarshall request information ( input )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\xmlfilterchain\TranslationResult.java,get request info stream,public  < t extends  output stream > t   (  )  {  return get stream ( request   output )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\xmlfilterchain\TranslationResult.java,get stream,private  < t extends  output stream > t   (  string name )  {  if  ( outputs  =  =  null )   {  return null ;   }  for  (   xslt parameter <  ?  extends  output stream >  output : outputs )   {  if  ( name . equals ignore case ( output . get name (  )  )  )   {  return  ( t ) output . get value (  )  ;   }   }  return null ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\xmlfilterchain\TranslationResult.java,is success,public boolean   (  )  {  return success ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\xmlfilterchain\XmlChainPool.java, xml chain pool,"public   (  string content type  string accept  list <  http method >  http methods  string status regex  string result content type  list <  xslt parameter >  params  object pool <  xml filter chain >  pool )  {  this . content type = content type ;  this . accept all content types =  string utils . equals ignore case ( this . content type  mime type . wildcard . get name (  )  )  ;  this . accept = accept ;  this . accept all =  string utils . equals ignore case ( this . accept  mime type . wildcard . get name (  )  )  ;  this . result content type = result content type ;  this . object pool = pool ;  this . http methods = http methods  !  =  null  ?  http methods : new  array list <  >  (  )  ;  this . status regex =  string utils . is not blank ( status regex )   ?   pattern . compile ( status regex )  : null ;  this . params = params ;  if  ( this . http methods . is empty (  )  )   {  this . all methods = true ;   }  else  {  for  (   http method method : this . http methods )   {  this . all methods| = ""all"" . equals ignore case ( method . name (  )  )  ;   }   }   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\xmlfilterchain\XmlChainPool.java,accepts,public boolean   (  string method  media type content type  media type accept  string status code )  {  boolean matches accept = accept all ||  string utils . equals ignore case ( this . accept accept . get value (  )  )  ;  boolean matches content type = accept all content types ||  string utils . equals ignore case ( this . content type content type . get value (  )  )  ;  boolean matches status code = status regex  !  =  null &&  string utils . is not blank ( status code )   ?  status regex . matcher ( status code )  . matches (  )  : true ;  boolean matches method =  string utils . is not blank ( method )   ?  all methods || matches method ( method )  : true ;  return matches accept && matches content type && matches status code&& matches method ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\xmlfilterchain\XmlChainPool.java,execute pool,"public  translation result   ( final  input stream in final  output stream out final  list <  xslt parameter >  inputs )  {   translation result rtn = new  translation result ( false )  ;   xml filter chain pooled object ;  try  {  pooled object = object pool . borrow object (  )  ;  try  {  inputs . add all ( params )  ;   list <  xslt parameter <  ?  extends  output stream >  >  outputs = get output parameters (  )  ;  pooled object . execute chain ( in out inputs outputs )  ;  rtn = new  translation result ( true outputs )  ;   }  catch  (   xslt exception e )   {  object pool . invalidate object ( pooled object )  ;  pooled object = null ;  log . warn ( "" error processing transforms"" e . get message (  )  e )  ;   }  catch  (   exception e )   {  object pool . invalidate object ( pooled object )  ;  pooled object = null ;  log . error ( "" failed to utilize the  xml filter chain .   reason:  {  } "" e . get localized message (  )  )  ;  log . trace ( """" e )  ;   }  finally  {  if  ( pooled object  !  =  null )   {  object pool . return object ( pooled object )  ;   }   }   }  catch  (   exception e )   {  log . error ( "" failed to obtain an  xml filter chain .   reason:  {  } "" e . get localized message (  )  )  ;  log . trace ( """" e )  ;   }  return rtn ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\xmlfilterchain\XmlChainPool.java,get output parameters,private  list <  xslt parameter <  ?  extends  output stream >  >    (  )  {   list <  xslt parameter <  ?  extends  output stream >  >  outputs = new  array list <  >  (  )  ;  outputs . add ( new  xslt parameter <  output stream >  (  translation result . headers   output new  byte array output stream (  )  )  )  ;  outputs . add ( new  xslt parameter <  output stream >  (  translation result . query   output new  byte array output stream (  )  )  )  ;  outputs . add ( new  xslt parameter <  output stream >  (  translation result . request   output new  byte array output stream (  )  )  )  ;  return outputs ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\xmlfilterchain\XmlChainPool.java,get result content type,public  string   (  )  {  return result content type ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\xmlfilterchain\XmlChainPool.java,matches method,private boolean   (  string request method )  {  boolean result = false ;  for  (   http method method : http methods )   {  result| = method . name (  )  . equals ignore case ( request method )  ;   }  return result ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\xmlfilterchain\XmlFilterChainBuilder.java, xml filter chain builder,"public   ( sax transformer factory factory boolean allow entities boolean allow declarations )  {  this . factory = factory ;  this . allow entities = allow entities ;  this . allow dtd declarations = allow declarations ;  try  {  factory . set feature ( xml constants . feature   secure   processing true )  ;  factory . set feature (  feature keys . allow   external   functions  boolean . true )  ;   }  catch  (   transformer configuration exception ex )   {  log . error ( "" error"" ex )  ;   }   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\xmlfilterchain\XmlFilterChainBuilder.java,build,"@ suppress warnings ( ""squid: redundant throws declaration check"" )  public  xml filter chain   (  style sheet info .  .  .  stylesheets )  throws  xslt exception  {  try  {   list <  xml filter reference >  filters = new  array list <  >  (  )  ;  xml re"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\xmlfilterchain\XmlFilterChainBuilder.java,do build,"private xml filter   (  style sheet info resource  source source )  {  try  {  return factory . newxml filter ( source )  ;   }  catch  (   transformer configuration exception ex )   {  log . error ( "" error creating xml  filter for ""  +  resource . get uri (  )  ex )  ;  throw new  xslt exception ( ex )  ;   }   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\xmlfilterchain\XmlFilterChainBuilder.java,get class path resource,"protected  stream source   (  string path )  {   string resource = path . substring ( classpath   prefix . length (  )  )  ;   input stream input = get class (  )  . get resource as stream ( resource )  ;  url inputurl = get class (  )  . get resource ( resource )  ;  if  ( input  !  =  null )   {  return new  stream source ( input inputurl . to external form (  )  )  ;   }  throw new  xslt exception ( "" unable to load stylesheet ""  +  path )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\xmlfilterchain\XmlFilterChainBuilder.java,get sax reader,"protected xml reader   (  )  throws  parser configuration exception  sax exception  {  sax parser factory spf = sax parser factory . new instance (  )  ;  spf . setx include aware ( false )  ;  spf . set feature ( xml constants . feature   secure   processing true )  ;  spf . set validating ( true )  ;  spf . set namespace aware ( true )  ;  spf . set feature ( ""http: /  / apache . org / xml / features / disallow - doctype - decl""  ! allow dtd declarations )  ;  sax parser parser = spf . newsax parser (  )  ;  xml reader reader = parser . getxml reader (  )  ;  reader . set entity resolver ( new  repose entity resolver ( reader . get entity resolver (  )  allow entities )  )  ;  log . info ( ""sax parser factory class: ""  +  spf . get class (  )  . get canonical name (  )  )  ;  log . info ( ""sax parser class: ""  +  parser . get class (  )  . get canonical name (  )  )  ;  log . info ( ""xml reader class: ""  +  reader . get class (  )  . get canonical name (  )  )  ;  return reader ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\xmlfilterchain\XmlFilterChainBuilder.java,get stylesheet source,"protected  source   (  style sheet info stylesheet )  {  if  ( stylesheet . get xsl (  )   !  =  null )   {  return node to stream source ( stylesheet . get xsl (  )  stylesheet . get system id (  )  )  ;   }  else if  ( stylesheet . get uri (  )   !  =  null )   {  if  ( stylesheet . get uri (  )  . starts with ( classpath   prefix )  )   {  return get class path resource ( stylesheet . get uri (  )  )  ;   }  else  {  try  {  url stylesheeturl = new url ( stylesheet . get uri (  )  )  ;  return new  stream source ( stylesheeturl . open stream (  )  stylesheeturl . to external form (  )  )  ;   }  catch  (  io exception ex )   {  throw new  xslt exception ( "" unable to load stylesheet: ""  +  stylesheet . get uri (  )  ex )  ;   }   }   }  throw new  illegal argument exception ( "" no stylesheet specified for ""  +  stylesheet . get id (  )  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\xmlfilterchain\XmlFilterChainBuilder.java,node to stream source,private  stream source   (  node node  string system id )  {  try  {  dom source dom source = new dom source ( node system id )  ;   string writer string writer = new  string writer (  )  ;   stream result result = new  stream result ( string writer )  ;   transformer transformer = xalanc transformer factory . new transformer (  )  ;  transformer . transform ( dom source result )  ;   string reader reader = new  string reader ( string writer . to string (  )  )  ;  return new  stream source ( reader )  ;   }  catch  (   transformer exception ex )   {  throw new  xslt exception ( ex )  ;   }   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\xmlfilterchain\XmlFilterChainExecutor.java, xml filter chain executor,"public   (  xml filter chain chain )  {  this . chain = chain ;  format . put (  output keys . omit   xml   declaration ""yes"" )  ;  format . put (  output keys . encoding ""utf - 8"" )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\xmlfilterchain\XmlFilterChainExecutor.java,execute chain,"@ suppress warnings ( ""squid: redundant throws declaration check"" )  public void   (  input stream in  output stream output  list <  xslt parameter >  inputs  list <  xslt parameter <  ?  extends  output stream >  >  outputs )  throws  xslt exception  {  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\xmlfilterchain\XmlFilterChainExecutor.java,find input uris,private  list <  string >    (  list <  xslt parameter >  inputs )  {   list <  string >  uris = new  array list <  >  (  )  ;  for  (   xslt parameter parameter : inputs )   {  if  ( is input uri name ( parameter . get name (  )  )  )   {  uris . add (  (  string ) parameter . get value (  )  )  ;   }   }  return uris ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\xmlfilterchain\XmlFilterChainExecutor.java,get output uri resolver,protected  output stream uri parameter resolver   (  transformer transformer )  {  if  ( transformer instanceof  controller )   {   controller controller =  (  controller ) transformer ;   outputuri resolver resolver = controller . get outputuri resolver (  )  ;  if  (  !  ( resolver instanceof  output stream uri parameter resolver )  )   {  resolver = new  output stream uri parameter resolver ( controller . get outputuri resolver (  )  )  ;  controller . set outputuri resolver ( resolver )  ;   }  return  (  output stream uri parameter resolver ) resolver ;   }  return null ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\xmlfilterchain\XmlFilterChainExecutor.java,get resolver chain,protected  source uri resolver chain   (  transformer transformer )  {  uri resolver resolver = transformer . geturi resolver (  )  ;   source uri resolver chain resolver chain ;  if  (  !  ( resolver instanceof  source uri resolver chain )  )   {  resolver chain = new  source uri resolver chain ( resolver )  ;  resolver chain . add resolver ( new  input stream uri parameter resolver (  )  )  ;  resolver chain . add resolver ( new  httpx uri input parameter resolver (  )  )  ;  resolver chain . add resolver ( new  class path uri resolver (  )  )  ;  transformer . seturi resolver ( resolver chain )  ;   }  else  {  resolver chain =  (  source uri resolver chain ) resolver ;   }  return resolver chain ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\xmlfilterchain\XmlFilterChainExecutor.java,getsax source,protected sax source   (  input source source )  {  if  ( chain . get filters (  )  . is empty (  )  )   {  return new sax source ( source )  ;   }  xml reader last filter = chain . get filters (  )  . get ( chain . get filters (  )  . size (  )   -  1 )  . get reader (  )  ;  return new sax source ( last filter source )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\xmlfilterchain\XmlFilterChainExecutor.java,is input uri name,private boolean   (  string name )  {  return  translation filter . input   headers   uri . equals ( name )  ||  translation filter . input   query   uri . equals ( name )  ||  translation filter . input   request   uri . equals ( name )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\xmlfilterchain\XmlFilterChainExecutor.java,remove input uris from pool,"private void   (  document pool document pool  list <  string >  uris )  {  for  (   string uri : uris )   {   document info document info = document pool . find ( uri )  ;  if  ( document info  !  =  null )   {  log . trace ( "" removing document  {  } "" uri )  ;  document pool . discard ( document info )  ;   }  else  {  log . trace ( "" tried to remove document  {  }  but wasn't present . "" uri )  ;   }   }   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\xmlfilterchain\XmlFilterChainExecutor.java,set alternate outputs,"private void   (  transformer transformer  list <  xslt parameter <  ?  extends  output stream >  >  outputs )  {   output stream uri parameter resolver resolver = get output uri resolver ( transformer )  ;  if  ( resolver  !  =  null )   {  resolver . clear streams (  )  ;  if  ( outputs  !  =  null &&  ! outputs . is empty (  )  )   {  for  (   xslt parameter <  ?  extends  output stream >  output : outputs )   {   string param name = resolver . add stream ( output . get value (  )  output . get name (  )  )  ;  transformer . set parameter ( ""headers output uri"" param name )  ;   }   }   }   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\xmlfilterchain\XmlFilterChainExecutor.java,set input parameters,"protected void   (  string id  transformer transformer  list <  xslt parameter >  inputs )  {   source uri resolver chain resolver chain = get resolver chain ( transformer )  ;   input stream uri parameter resolver resolver = resolver chain . get resolver of type (  input stream uri parameter resolver . class )  ;  resolver . clear streams (  )  ;  if  ( inputs  !  =  null &&  ! inputs . is empty (  )  )   {   httpx uri input parameter resolver headers resolver = resolver chain . get resolver of type (  httpx uri input parameter resolver . class )  ;  headers resolver . reset (  )  ;  for  (   xslt parameter input : inputs )   {  if  ( ""*"" . equals ( input . get style id (  )  )  || id  !  =  null && id . equals ( input . get style id (  )  )  )   {   string param = null ;  if  ( input . get value (  )  instanceof  input stream )   {  param = resolver . add stream (  (  input stream ) input . get value (  )  )  ;   }  else if  ( input . get value (  )  instanceof  http servlet request )   {  headers resolver . set request (  (  http servlet request ) input . get value (  )  )  ;   }  else if  ( input . get value (  )  instanceof  http servlet response )   {  headers resolver . set response (  (  http servlet response ) input . get value (  )  )  ;   }  else if  ( input . get value (  )  instanceof  headers )   {  headers resolver . set headers (  (  headers ) input . get value (  )  )  ;   }  else if  ( input . get value (  )  instanceof  query parameters )   {  headers resolver . set params (  (  query parameters ) input . get value (  )  )  ;   }  else if  ( input . get value (  )  instanceof  request information )   {  headers resolver . set request information (  (  request information ) input . get value (  )  )  ;   }  else  {  param = input . get value (  )   !  =  null  ?  input . get value (  )  . to string (  )  : null ;   }  if  ( param  !  =  null )   {  transformer . set parameter ( input . get name (  )  param )  ;   }   }   }   }   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\XsltException.java, xslt exception,public   (  string message  throwable cause )  {  super ( message cause )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\xmlfilterchain\XmlFilterChain.java, xml filter chain,public   ( sax transformer factory factory  list <  xml filter reference >  filters )  {  this . factory = factory ;  this . filters = filters ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\xmlfilterchain\XmlFilterChain.java,execute chain,"@ suppress warnings ( ""squid: redundant throws declaration check"" )  public void   (  input stream in  output stream output  list <  xslt parameter >  inputs  list <  xslt parameter <  ?  extends  output stream >  >  outputs )  throws  xslt exception  {  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\xmlfilterchain\XmlFilterChain.java,get factory,public sax transformer factory   (  )  {  return factory ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\xmlfilterchain\XmlFilterChain.java,get filters,public  list <  xml filter reference >    (  )  {  return filters ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\XsltParameter.java, xslt parameter,public   (  string style  string name t value )  {  this . style id = style ;  this . name = name ;  this . value = value ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\XsltParameter.java,get name,public  string   (  )  {  return name ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\XsltParameter.java,get style id,public  string   (  )  {  return style id ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\XsltParameter.java,get value,public t   (  )  {  return value ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\xmlfilterchain\XmlFilterReference.java, xml filter reference,"public   (  string id xml reader reader )  {  log . info ( "" translation style sheet ""  +  id  +  "" using  xml filter of type: "" +  reader . get class (  )  . get canonical name (  )  )  ;  this . id = id ;  this . reader = reader ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\xmlfilterchain\XmlFilterReference.java,get id,public  string   (  )  {  return id ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\xmlfilterchain\XmlFilterReference.java,get reader,public xml reader   (  )  {  return reader ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\xmlfilterchain\XmlFilterChainFactory.java, xml filter chain factory,public   ( final  xml filter chain builder xslt chain builder final  translation base translation final  string config root final  string config )  {  this . builder = xslt chain builder ;  this . translation = translation ;  this . config root = config root ;  this . config = config ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\xmlfilterchain\XmlFilterChainFactory.java,get absolute xsl path,"private  string   (  string xsl path )  {  return  ! xsl path . contains ( "": /  / "" )   ?   string utils . join ( ""file: /  / "" config root "" / "" xsl path )  : xsl path ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\xmlfilterchain\XmlFilterChainFactory.java,make object,@ override public  xml filter chain   (  )  {   list <  style sheet info >  stylesheets = new  array list <  >  (  )  ;  if  ( translation . get style sheets (  )   !  =  null )   {  for  (   style sheet sheet : translation . get style sheets (  )  . get 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\XslUpdateListener.java, xsl update listener,public   (  translation filter translation filter  configuration service configuration service  string config root )  {  this . translation filter = translation filter ;  this . configuration service = configuration service ;  this . watch list = new  hash set <  >  (  )  ;  this . config root = config root ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\XslUpdateListener.java,add to watch list,public void   (  string path )  {  watch list . add ( get absolute path ( path )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\XslUpdateListener.java,configuration updated,"@ override public void   (  configuration resource config )  {  log . info ( ""xsl file changed: ""  +  config . name (  )  )  ;  translation filter . build processor pools (  )  ;  is initialized = true ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\XslUpdateListener.java,get absolute path,"private  string   (  string xsl path )  {  return  ! xsl path . contains ( "": /  / "" )   ?   string utils . join ( ""file: /  / "" config root "" / "" xsl path )  : xsl path ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\XslUpdateListener.java,is initialized,@ override public boolean   (  )  {  return is initialized ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\XslUpdateListener.java,listen,"public void   (  )  {  for  (   string xsl : watch list )   {  log . info ( "" watching xsl: ""  +  xsl )  ;  configuration service . subscribe to ( ""translation"" xsl this new  generic resource configuration parser (  )  false )  ;   }   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\XslUpdateListener.java,unsubscribe,public void   (  )  {  for  (   string xsl : watch list )   {  configuration service . unsubscribe from ( xsl this )  ;   }  watch list . clear (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\httpx\processor\json\elements\ElementFactoryTest.java,test get element,"@ test public void   (  )  {   string token name = ""start   object"" ;   string name = ""fid"" ;   element result =  element factory . get element ( token name name )  ;  assert not null ( result )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\httpx\processor\json\elements\ElementFactoryTest.java,test get scalar element,"@ test public void   (  )  {   string token name = ""value   string"" ;   string name = ""fid"" ;   object value = ""value"" ;   element exp result = new  scalar element <  >  ( ""value   string"" ""fid"" ""value"" )  ;   element result =  element factory . get scala"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\httpx\processor\json\elements\BaseElementTest.java,set up class,"@ before class public static void   (  )  {   attributes impl atts = new  attributes impl (  )  ;  atts . add attribute ( """" ""date"" ""date"" ""java . lang .  string"" ""25 - dec - 05"" )  ;  instance = new  base element ( ""id: testid"" atts )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\httpx\processor\json\elements\BaseElementTest.java,tear down class,@ after class public static void   (  )  {  instance = null ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\httpx\processor\json\elements\BaseElementTest.java,test get attributes,"@ test public void   (  )  {   attributes impl exp result = new  attributes impl (  )  ;  exp result . add attribute ( """" ""date"" ""date"" ""java . lang .  string"" ""25 - dec - 05"" )  ;   attributes impl result = instance . get attributes (  )  ;  assert equal"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\httpx\processor\json\elements\BaseElementTest.java,test get element,"@ test public void   (  )  {   string exp result = ""id: testid"" ;   string result = instance . get element (  )  ;  assert equals ( exp result result )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\httpx\processor\json\elements\BaseElementTest.java,test get local name   args,"@ test public void   (  )  {   string exp result = "" testid"" ;   string result = instance . get local name (  )  ;  assert equals ( exp result result )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\httpx\processor\json\elements\BaseElementTest.java,test get local name    string,"@ test public void   (  )  {   string name = ""id: testid"" ;   string exp result = "" testid"" ;   string result =  base element . get local name ( name )  ;  assert equals ( exp result result )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\httpx\processor\json\elements\BaseElementTest.java,test get qname   args,"@ test public void   (  )  {   string exp result = ""json: testid"" ;   string result = instance . get qname (  )  ;  assert equals ( exp result result )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\httpx\processor\json\elements\BaseElementTest.java,test get qname    string,"@ test public void   (  )  {   string name = ""id: testid"" ;   string exp result = ""json: testid"" ;   string result =  base element . get qname ( name )  ;  assert equals ( exp result result )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\httpx\processor\json\elements\NullElementTest.java,test output element,"@ test public void   (  )  throws  exception  {   content handler handler = mock (  content handler . class )  ;   null element instance = new  null element (  base element . jsonx   uri ""fid"" ""value"" )  ;  instance . output element ( handler )  ;  assert"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\httpx\processor\common\PreProcessorExceptionTest.java,should process custom message,"@ test public void   (  )  {   string expected exception message = "" oops !   something unexpected happened . "" ;   pre processor exception pre processor exception = new  pre processor exception ( expected exception message )  ;  assert equals ( expected "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\httpx\processor\json\elements\ScalarElementTest.java,test output element,"@ test public void   (  )  throws  exception  {   content handler handler = mock (  content handler . class )  ;   scalar element instance = new  scalar element (  base element . jsonx   uri ""fid"" ""value"" )  ;  instance . output element ( handler )  ;  as"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\resolvers\ClassPathUriResolverTest.java,set up,@ before public void   (  )  {  parent = mock ( uri resolver . class )  ;  resolver = new  class path uri resolver ( parent )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\resolvers\ClassPathUriResolverTest.java,should call parent resolver for non class path resources,"@ test public void   (  )  throws  transformer exception  {   string href = "" / style . xsl"" ;   string base = ""base"" ;   source resource = resolver . resolve ( href base )  ;  verify ( parent )  . resolve ( eq ( href )  eq ( base )  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\resolvers\ClassPathUriResolverTest.java,should find resource,"@ test public void   (  )  throws  transformer exception  {   source resource = resolver . resolve (  class path uri resolver . classpath   prefix  +  "" / style . xsl"" """" )  ;  assert that ( "" resource path should not be empty"" resource . get system id ( "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\resolvers\ClassPathUriResolverTest.java,should handle null href,"@ test public void   (  )  throws  transformer exception  {   source resource = resolver . resolve ( null """" )  ;  assert null ( "" should handle null href"" resource )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\resolvers\ClassPathUriResolverTest.java,should return null when resource not found,"@ test public void   (  )  throws  transformer exception  {   source resource = resolver . resolve (  class path uri resolver . classpath   prefix  +  "" / blah . xsl"" """" )  ;  assert null ( "" should return null for non - existent resource"" resource )  ;  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\resolvers\InputStreamUriParameterResolverTest.java,set up,@ before public void   (  )  {  parent = mock (  input stream uri parameter resolver . class )  ;  resolver = new  input stream uri parameter resolver ( parent )  ;  input = mock (  input stream . class )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\resolvers\InputStreamUriParameterResolverTest.java,should add stream,"@ test public void   (  )  throws  transformer exception  {   string name = ""data"" ;   string href = resolver . get href ( name )  ;   string actual href = resolver . add stream ( input name )  ;  assert equals ( ""hre fs should be equal"" href actual href "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\resolvers\InputStreamUriParameterResolverTest.java,should call additional resolver,"@ test public void   (  )  throws  transformer exception  {   string href = ""otherdata"" ;   string base = ""base"" ;  uri resolver additional = mock ( uri resolver . class )  ;  resolver . add resolver ( additional )  ;  resolver . resolve ( href base )  ; "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\resolvers\InputStreamUriParameterResolverTest.java,should call parent resolver,"@ test public void   (  )  throws  transformer exception  {   string href = ""otherdata"" ;   string base = ""base"" ;  resolver . resolve ( href base )  ;  verify ( parent )  . resolve ( href base )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\resolvers\InputStreamUriParameterResolverTest.java,should remove stream,"@ test public void   (  )  throws  transformer exception  {   string href = resolver . get href ( input )  ;   string actual href = resolver . add stream ( input )  ;   stream source source =  (  stream source ) resolver . resolve ( href ""base"" )  ;  asse"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\resolvers\InputStreamUriParameterResolverTest.java,should remove stream by name,"@ test public void   (  )  throws  transformer exception  {   string name = ""data"" ;   string href = resolver . get href ( name )  ;   string actual href = resolver . add stream ( input name )  ;  assert equals ( ""hre fs should be equal"" href actual href "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\resolvers\InputStreamUriParameterResolverTest.java,should return source of additional resolver,"@ test public void   (  )  throws  transformer exception  {   string href = ""otherdata"" ;   string base = ""base"" ;  uri resolver additional = mock ( uri resolver . class )  ;   source source = mock (  source . class )  ;  when ( additional . resolve ( any"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\httpx\processor\json\elements\StartElementTest.java,test output element,"@ test public void   (  )  throws  exception  {   content handler handler = mock (  content handler . class )  ;   start element instance = new  start element (  base element . jsonx   uri ""fid"" )  ;  instance . output element ( handler )  ;  assert equal"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\httpx\processor\json\elements\EndElementTest.java,test output element,"@ test public void   (  )  throws  exception  {   content handler handler = mock (  content handler . class )  ;   end element instance = new  end element (  base element . jsonx   uri ""nid"" )  ;  instance . output element ( handler )  ;  assert equals ( "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\resolvers\OutputStreamUriParameterResolverTest.java,set up,@ before public void   (  )  throws  transformer exception  {  parent = mock (  outputuri resolver . class )  ;  output = mock (  output stream . class )  ;  resolver = new  output stream uri parameter resolver ( parent )  ;  result = mock (  result . cla
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\resolvers\OutputStreamUriParameterResolverTest.java,should add stream,"@ test public void   (  )  throws  transformer exception  {   string name = ""out"" ;  resolver . add stream ( output name )  ;   string href = resolver . get href ( name )  ;  assert not null ( "" should return the href for our output stream"" href )  ;   st"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\resolvers\OutputStreamUriParameterResolverTest.java,should call parent resolver,"@ test public void   (  )  throws  transformer exception  {   string name = ""some uri"" ;   string href = name ;   string base = ""somebase"" ;   result result = resolver . resolve ( href base )  ;  verify ( parent )  . resolve ( href base )  ;  assert not n"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\resolvers\OutputStreamUriParameterResolverTest.java,should throw exception when cannot resolve,"@ test ( expected =  runtime exception . class )  public void   (  )  throws  transformer exception  {  final  string doesnt exist = ""reference:jio:doesn't exist"" ;  resolver . resolve ( doesnt exist ""somebase"" )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\TranslationFilterHandlersTest.java,setup,"@ before public void   (  )  throws  exception  {   configuration service configuration service = mock (  configuration service . class )  ;   string configuration root = """" ;  filter = new  translation filter ( configuration service configuration root ) "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\TranslationFilterHandlersTest.java,should create processor pools on config update,@ test public void   (  )  throws  exception  {   translation config config = new  translation config (  )  ;   request translations request translations = new  request translations (  )  ;   response translations response translations = new  response tra
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\TranslationFilterMethodsAllTest.java,setup,"@ before public void   (  )  throws  exception  {   configuration service configuration service = mock (  configuration service . class )  ;   string configuration root = """" ;  filter = new  translation filter ( configuration service configuration root ) "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\TranslationFilterMethodsAllTest.java,setup spec,"@ before class public static void   (  )  throws  exception  {  content remove me = io utils . to byte array (  translation filter methods match test . class . get resource as stream ( "" / remove - me - element . xml"" )  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\TranslationFilterMethodsAllTest.java,should translate request body for any method post,"@ test public void   (  )  throws io exception  sax exception  {  mock request = new  mock http servlet request (  http method . post . value (  )  "" / 129 . 0 . 0 . 1 / servers / "" )  ;  mock request . add header ( accept application   xml   value )  ;  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\TranslationFilterMethodsAllTest.java,should translate request body for any method put,"@ test public void   (  )  throws io exception  sax exception  {  mock request = new  mock http servlet request (  http method . put . value (  )  "" / 129 . 0 . 0 . 1 / servers / "" )  ;  mock request . add header ( accept application   xml   value )  ;  m"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\TranslationFilterMethodsMatchTest.java,setup,"@ before public void   (  )  throws  exception  {   configuration service configuration service = mock (  configuration service . class )  ;   string configuration root = """" ;  filter = new  translation filter ( configuration service configuration root ) "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\TranslationFilterMethodsMatchTest.java,setup spec,"@ before class public static void   (  )  throws  exception  {  content remove me = io utils . to byte array (  translation filter methods match test . class . get resource as stream ( "" / remove - me - element . xml"" )  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\TranslationFilterMethodsMatchTest.java,should not translate request body for non matching method,"@ test public void   (  )  throws io exception  sax exception  {  mock request = new  mock http servlet request (  http method . put . value (  )  "" / 129 . 0 . 0 . 1 / servers / "" )  ;  mock request . add header ( accept application   xml   value )  ;  m"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\TranslationFilterMethodsMatchTest.java,should translate request body for matching method,"@ test public void   (  )  throws io exception  sax exception  {  mock request = new  mock http servlet request (  http method . post . value (  )  "" / 129 . 0 . 0 . 1 / servers / "" )  ;  mock request . add header ( accept application   xml   value )  ;  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\xslt\xmlfilterchain\XmlFilterChainPoolTest.java,set up,"@ before public void   (  )  {   list <  http method >  http methods = new  array list <  http method >  (  )  ;  http methods . add (  http method . post )  ;  response pool for xml = new  xml chain pool ( ""application / xml"" ""application / xml"" null ""4["
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\xslt\xmlfilterchain\XmlFilterChainPoolTest.java,should accept request criteria,"@ test public void   (  )  {  assert true ( "" should accept our response values"" request pool for xml . accepts ( ""post"" xml xml """" )  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\xslt\xmlfilterchain\XmlFilterChainPoolTest.java,should accept response criteria,"@ test public void   (  )  {  assert true ( "" should accept our response values"" response pool for xml . accepts ( """" xml xml ""400"" )  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\xslt\xmlfilterchain\XmlFilterChainPoolTest.java,should reject request criteria when accept type is wrong,"@ test public void   (  )  {  assert false ( "" should reject invalid accept"" request pool for xml . accepts ( """" xml json """" )  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\xslt\xmlfilterchain\XmlFilterChainPoolTest.java,should reject request criteria when content type is wrong,"@ test public void   (  )  {  assert false ( "" should reject invalid content type"" request pool for xml . accepts ( """" json xml """" )  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\xslt\xmlfilterchain\XmlFilterChainPoolTest.java,should reject request criteria when method wrong,"@ test public void   (  )  {  assert false ( "" should reject invalid method"" request pool for xml . accepts ( ""get"" xml xml """" )  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\xslt\xmlfilterchain\XmlFilterChainPoolTest.java,should reject response criteria when accept type is wrong,"@ test public void   (  )  {  assert false ( "" should reject invalid accept"" response pool for xml . accepts ( """" xml json ""400"" )  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\xslt\xmlfilterchain\XmlFilterChainPoolTest.java,should reject response criteria when content type is wrong,"@ test public void   (  )  {  assert false ( "" should reject invalid content type"" response pool for xml . accepts ( """" json xml ""400"" )  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\xslt\xmlfilterchain\XmlFilterChainPoolTest.java,should reject response criteria when response code wrong,"@ test public void   (  )  {  assert false ( "" should reject invalid response code"" response pool for xml . accepts ( """" xml xml ""200"" )  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\TranslationFilterTest.java,setup,"@ before public void   (  )  throws  exception  {   configuration service configuration service = mock (  configuration service . class )  ;   string configuration root = """" ;  filter = new  translation filter ( configuration service configuration root ) "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\TranslationFilterTest.java,setup spec,"@ before class public static void   (  )  throws  exception  {  content empty = io utils . to byte array (  translation filter test . class . get resource as stream ( "" / empty . xml"" )  )  ;  content remove me = io utils . to byte array (  translation fi"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\TranslationFilterTest.java,should not modify response status if,@ test public void   (  )  throws  exception  {  mock response . set status (  - 1 )  ;  http servlet request wrapper = new  http servlet request wrapper ( mock request )  ;  http servlet response wrapper = new  http servlet response wrapper ( mock respon
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\TranslationFilterTest.java,should not translate request body for unconfigured accept,"@ test public void   (  )  throws io exception  sax exception  {  mock request . set content ( content remove me )  ;  mock request . add header ( accept ""application / other"" )  ;  mock response . set content type ( ""application / other"" )  ;  http servl"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\TranslationFilterTest.java,should not translate response body for unconfigured accept,@ test public void   (  )  throws io exception  sax exception  {  mock request . add header ( accept application   json   value )  ;  mock request . set content type ( application   xml   value )  ;  http servlet request wrapper = new  http servlet reques
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\TranslationFilterTest.java,should translate empty request body,@ test public void   (  )  throws io exception  sax exception  {  mock request . add header ( accept application   xml   value )  ;  mock request . set content ( content empty )  ;  http servlet request wrapper = new  http servlet request wrapper ( mock r
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\TranslationFilterTest.java,should translate empty response body,@ test public void   (  )  throws io exception  sax exception  {  mock request . add header ( accept application   xml   value )  ;  http servlet request wrapper = new  http servlet request wrapper ( mock request )  ;  http servlet response wrapper = new 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\TranslationFilterTest.java,should translate non empty request body,@ test public void   (  )  throws io exception  sax exception  {  mock request . add header ( accept application   xml   value )  ;  mock request . set content ( content remove me )  ;  http servlet request wrapper = new  http servlet request wrapper ( mo
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\TranslationFilterTest.java,should translate non empty response body,@ test public void   (  )  throws io exception  sax exception  {  mock request . add header ( accept application   xml   value )  ;  http servlet request wrapper = new  http servlet request wrapper ( mock request )  ;  http servlet response wrapper = new 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\TranslationFilterTest.java,should translate null response body,@ test public void   (  )  throws io exception  sax exception  {  mock request . add header ( accept application   xml   value )  ;  http servlet request wrapper = new  http servlet request wrapper ( mock request )  ;  http servlet response wrapper = new 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\xslt\xmlfilterchain\XsltFilterChainBuilderTest.java,before,"@ before class public static void   (  )  {   system . set property ( ""javax . xml . transform .  transformer factory""  translation filter . saxon   he   factory   name )  ;  factory =  ( sax transformer factory )  transformer factory . new instance (  ) "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\xslt\xmlfilterchain\XsltFilterChainBuilderTest.java,set up,"@ before public void   (  )  {  builder = new  xml filter chain builder ( factory false true )  ;  output = new  byte array output stream (  )  ;  body = get class (  )  . get resource as stream ( "" / empty . xml"" )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\xslt\xmlfilterchain\XsltFilterChainBuilderTest.java,should handle empty set of styles,"@ test public void   (  )  {   xml filter chain chain = builder . build (  )  ;  assert not null ( "" should build an empty filter chain"" chain )  ;  assert equals ( "" should have 1 filter"" 1 chain . get filters (  )  . size (  )  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\xslt\xmlfilterchain\XsltFilterChainBuilderTest.java,should handle style sheet list,"@ test public void   (  )  {   xml filter chain chain = builder . build ( new  style sheet info ( """" ""classpath: /  /  / style . xsl"" )  )  ;  assert not null ( "" should build a filter chain"" chain )  ;  assert equals ( "" should have 1 filter"" 1 chain . g"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\xslt\xmlfilterchain\XsltFilterChainBuilderTest.java,should use input output streams,"@ test public void   (  )  {   list <  xslt parameter >  inputs = new  array list <  >  (  )  ;   xml filter chain chain = builder . build ( new  style sheet info ( """" ""classpath: /  /  / style . xsl"" )  )  ;  chain . execute chain ( body output inputs nu"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\main\java\org\openrepose\filters\versioning\domain\VersionedHostNotFoundException.java, versioned host not found exception,public   (  string message )  {  super ( message )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\main\java\org\openrepose\filters\versioning\domain\ConfigurationData.java, configuration data,public   (  map <  string  destination >  configured hosts  map <  string  service version mapping >  service mappings )  {  this . configured hosts = configured hosts ;  this . service mappings = service mappings ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\main\java\org\openrepose\filters\versioning\domain\ConfigurationData.java,find origin service by uri,public  versioned origin service   (  http servlet request wrapper request )  throws  versioned host not found exception  {  for  (   map .  entry <  string  service version mapping >  entry : service mappings . entry set (  )  )   {  final  versioned request versioned request = new  versioned request ( request entry . get value (  )  )  ;  if  ( versioned request . request belongs to version mapping (  )  )   {  return new  versioned origin service ( entry . get value (  )  get host for version mapping ( entry . get value (  )  )  )  ;   }   }  return null ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\main\java\org\openrepose\filters\versioning\domain\ConfigurationData.java,get configured hosts,public  map <  string  destination >    (  )  {  return configured hosts ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\main\java\org\openrepose\filters\versioning\domain\ConfigurationData.java,get host for version mapping,"public  destination   (  service version mapping mapping )  throws  versioned host not found exception  {  final  destination host = configured hosts . get ( mapping . get pp dest id (  )  )  ;  if  ( host  =  =  null )   {  throw new  versioned host not found exception ( "" endpoint: ""  +  mapping . get pp dest id (  )   +  "" is not specified in the system model"" )  ;   }  return host ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\main\java\org\openrepose\filters\versioning\domain\ConfigurationData.java,get matching media type,public org . openrepose . filters . versioning . config .  media type   (  service version mapping service version mapping  media type prefered media type )  {  final  media type list configured media types = service version mapping . get media types (  )  ;  if  ( configured media types  =  =  null )   {  return null ;   }  for  (  org . openrepose . filters . versioning . config .  media type configured media type : configured media types . get media type (  )  )   {   header value media type = new  header value parser ( configured media type . get type (  )  )  . parse (  )  ;  if  ( prefered media type . equals to ( media type )  )   {  return configured media type ;   }   }  return null ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\main\java\org\openrepose\filters\versioning\domain\ConfigurationData.java,get origin service for request,public  versioned origin service   (  http servlet request wrapper request )  throws  versioned host not found exception  {   versioned origin service target origin service = find origin service by uri ( request )  ;  if  ( target origin service  =  =  null )   {  final  media type range =  request media range interrogator . interrogate ( request . get requesturi (  )  request . get preferred splittable headers with parameters (  http headers . accept )  )  . get ( 0 )  ;  final  versioned map type current service version = get service version for media range ( range )  ;  if  ( current service version  !  =  null )   {  final  destination destination = get host for version mapping ( current service version . get service version mapping (  )  )  ;  request . replace header (  http headers . accept current service version . get media type (  )  . get base (  )  )  ;  target origin service = new  versioned origin service ( current service version . get service version mapping (  )  destination )  ;   }   }  return target origin service ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\main\java\org\openrepose\filters\versioning\domain\ConfigurationData.java,get service mappings,public  collection <  service version mapping >    (  )  {  return service mappings . values (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\main\java\org\openrepose\filters\versioning\domain\ConfigurationData.java,get service version for media range,public  versioned map type   (  media type prefered media range )  {  org . openrepose . filters . versioning . config .  media type media type ;  for  (   map .  entry <  string  service version mapping >  service mapping : service mappings . entry set (  )  )   {  media type = get matching media type ( service mapping . get value (  )  prefered media range )  ;  if  ( media type  !  =  null )   {  return new  versioned map type ( service mapping . get value (  )  media type )  ;   }   }  return null ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\main\java\org\openrepose\filters\versioning\domain\ConfigurationData.java,is request for versions,"public boolean   (  http servlet request uniform resource info )  {  return "" / "" . equals (  string uri utilities . format uri ( uniform resource info . get requesturi (  )  )  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\main\java\org\openrepose\filters\versioning\domain\ConfigurationData.java,version choices as list,public  version choice list   (  http servlet request wrapper request )  {  final  version choice list version choices = new  version choice list (  )  ;  for  (   service version mapping mapping : get service mappings (  )  )   {  final  versioned request versioned request = new  versioned request ( request mapping )  ;  final  version choice choice = new  version choice factory ( mapping )  . create (  )  ;  final  link self reference = new  link (  )  ;  self reference . set rel (  relation . self )  ;  self reference . set href ( versioned request . as externalurl (  )  )  ;  choice . get link (  )  . add ( self reference )  ;  version choices . get version (  )  . add ( choice )  ;   }  return version choices ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\main\java\org\openrepose\filters\versioning\domain\VersionedOriginService.java, versioned origin service,public   (  service version mapping mapping  destination origin service host )  {  this . mapping = mapping ;  this . origin service host = origin service host ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\main\java\org\openrepose\filters\versioning\domain\VersionedMapType.java,get media type,public  media type   (  )  {  return media type ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\main\java\org\openrepose\filters\versioning\domain\VersionedOriginService.java,get mapping,public  service version mapping   (  )  {  return mapping ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\main\java\org\openrepose\filters\versioning\domain\VersionedMapType.java,get service version mapping,public  service version mapping   (  )  {  return service version mapping ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\main\java\org\openrepose\filters\versioning\domain\VersionedOriginService.java,get origin service host,public  destination   (  )  {  return origin service host ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\main\java\org\openrepose\filters\versioning\util\RequestUrlTokenizer.java, request url tokenizer,private   (  string service root href  string version id  string resource )  {  this . service root href = service root href ;  this . version id = version id ;  this . resource = resource ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\main\java\org\openrepose\filters\versioning\util\RequestUrlTokenizer.java,get resource,public  string   (  )  {  return resource ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\main\java\org\openrepose\filters\versioning\util\RequestUrlTokenizer.java,get service root href,public  string   (  )  {  return service root href ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\main\java\org\openrepose\filters\versioning\util\RequestUrlTokenizer.java,get version id,public  string   (  )  {  return version id ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\main\java\org\openrepose\filters\versioning\util\RequestUrlTokenizer.java,has version info,public static boolean   (  string version token  set <  string >  version ids )  {  boolean found = false ;  for  (   string version id : version ids )   {  if  ( version id . equals ( version token )  )   {  found = true ;  break ;   }   }  return found ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\main\java\org\openrepose\filters\versioning\util\RequestUrlTokenizer.java,tokenize,"public static  request url tokenizer   (  string request url  set <  string >  version ids )  {  if  ( version ids  =  =  null )   {  throw new  illegal argument exception ( ""version ids must be provided ! "" )  ;   }   string service root href = """" ;   string version id = """" ;   string resource = """" ;   matcher matcher ;  matcher = service   root   href   pattern . matcher ( request url )  ;  if  ( matcher . find (  )  )   {  service root href = matcher . group ( 0 )  ;   }  boolean has version info = false ;  matcher = version   id   pattern . matcher ( request url )  ;  if  ( matcher . find (  )  && has version info ( matcher . group ( 1 )  version ids )  )   {  version id = matcher . group ( 1 )  ;  has version info = true ;   }  matcher = has version info  ?  resource   pattern . matcher ( request url )  : resource   without   version   pattern . matcher ( request url )  ;  if  ( matcher . find (  )  &&  ! "" / "" . equals ( matcher . group ( 1 )  )  )   {  resource = matcher . group ( 1 )  ;   }  return new  request url tokenizer ( service root href version id resource )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\main\java\org\openrepose\filters\versioning\domain\VersionedRequest.java, versioned request,public   (  http servlet request wrapper request  service version mapping mapping )  {  this . request = request ;  this . mapping = mapping ;  this . client addressed host = request . get header (  http headers . host )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\main\java\org\openrepose\filters\versioning\domain\VersionedRequest.java,as externalurl,public  string   (  )  {  return request . get requesturl (  )  . to string (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\main\java\org\openrepose\filters\versioning\domain\VersionedRequest.java,as internaluri,public  string   (  )  {  return remove version prefix ( request mapping . get id (  )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\main\java\org\openrepose\filters\versioning\domain\VersionedRequest.java,as internalurl,"public  string   (  )  {  return  string utils . join ( request . get scheme (  )   +  "": /  / "" client addressed host as internaluri (  )  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\main\java\org\openrepose\filters\versioning\domain\VersionedRequest.java,get mapping,public  service version mapping   (  )  {  return mapping ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\main\java\org\openrepose\filters\versioning\domain\VersionedRequest.java,get request,public  http servlet request wrapper   (  )  {  return request ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\main\java\org\openrepose\filters\versioning\domain\VersionedRequest.java,is request for root,"public boolean   (  )  {  return "" / "" . equals (  string uri utilities . format uri ( request . get requesturi (  )  )  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\main\java\org\openrepose\filters\versioning\domain\VersionedRequest.java,remove version prefix,"private  string   (  http servlet request request  string version )  {  if  ( request . get requesturi (  )  . char at ( 0 )   !  =  ' / ' )   {  throw new  illegal argument exception ( "" request uri must be a uri with a root reference  -  i . e .  the uri must start with ' / '"" )  ;   }  final  string uri =  string uri utilities . format uri ( request . get requesturi (  )  )  ;  final  string formatted version =  string uri utilities . format uri ( version )  ;  if  ( formatted version . length (  )   =  =  1 )   {  return uri ;   }  final  string contained version = formatted version  +  "" / "" ;  final int start = uri . index of ( contained version )  ;  if  ( start  >  =  0 )   {  return uri . replace first ( contained version "" / "" )  ;   }  else if  ( uri . ends with ( formatted version )  )   {  return uri . replace ( formatted version "" / "" )  ;   }  return uri ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\main\java\org\openrepose\filters\versioning\domain\VersionedRequest.java,request belongs to version mapping,public boolean   (  )  {  final  string requested uri =  string uri utilities . format uri ( request . get requesturi (  )  )  ;  final  string version uri =  string uri utilities . format uri ( mapping . get id (  )  )  ;  return index of uri fragment ( requested uri version uri )   =  =  0 ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\main\java\org\openrepose\filters\versioning\domain\VersionedRequest.java,request matches version mapping,public boolean   (  )  {  final  string requested uri =  string uri utilities . format uri ( request . get requesturi (  )  )  ;  return requested uri . equals (  string uri utilities . format uri ( mapping . get id (  )  )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\main\java\org\openrepose\filters\versioning\util\ContentTransformer.java, content transformer,"public   (  json format json format )  {  try  {  final jaxb context context = jaxb context . new instance ( org . openrepose . filters . versioning . schema .  object factory . class org . openrepose . filters . versioning . config .  object factory . class )  ;   string json xslt = xslt   dir  +   (  (  json format . compute  =  =  json format )   ?  json   xslt   compute : json   xslt   identity )  ;  final  templates json xslt templates =  content transformer . parse xslt ( new  stream source ( get class (  )  . get resource as stream ( json xslt )  )  )  ;  xml stream transform = new  jaxb to stream transform <  >  ( context )  ;  json stream transform = new  xslt to stream transform <  >  ( json xslt templates context )  ;   }  catch  (   exception ex )   {  throw new  power api context exception ( "" failed to build transformation processors for response marshalling .   reason: ""  +  ex . get message (  )  ex )  ;   }   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\main\java\org\openrepose\filters\versioning\util\ContentTransformer.java,parse xslt,private static  templates   (  source s )  throws  transformer configuration exception  {  synchronized  ( xslt   transformer   factory )   {  return new  log templates wrapper ( xslt   transformer   factory . new templates ( s )  )  ;   }   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\main\java\org\openrepose\filters\versioning\util\ContentTransformer.java,transform,public void   ( jaxb element element  media type media range  output stream output stream )  {  switch  ( media range . get mime type (  )  )   {  case application   xml: xml stream transform . transform ( element output stream )  ;  break ;  case application   json: case unknown: default : json stream transform . transform ( element output stream )  ;  break ;   }   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\main\java\org\openrepose\filters\versioning\util\VariantParser.java,get media type from variant,"public static  mime type   (  string variant )  {  final  matcher matcher = variant   regex . matcher ( variant )  ;   mime type media type = null ;  if  ( matcher . matches (  )  )   {  if  ( variant . to lower case (  )  . contains ( ""xml"" )  )   {  media type =  mime type . application   xml ;   }  else if  ( variant . to lower case (  )  . contains ( ""json"" )  )   {  media type =  mime type . application   json ;   }   }  return media type ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\main\java\org\openrepose\filters\versioning\util\VersionChoiceFactory.java, version choice factory,public   (  service version mapping service version mapping )  {  this . service version mapping = service version mapping ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\main\java\org\openrepose\filters\versioning\util\VersionChoiceFactory.java,convert media types,private  media type list   (  )  {   media type list media type list = null ;  if  ( service version mapping . get media types (  )   !  =  null )   {  media type list = new  media type list (  )  ;  for  (   media type configured media type : service version mapping . get media types (  )  . get media type (  )  )   {  org . openrepose . filters . versioning . schema .  media type response media type = new org . openrepose . filters . versioning . schema .  media type (  )  ;  response media type . set base ( configured media type . get base (  )  )  ;  response media type . set type ( configured media type . get type (  )  )  ;  media type list . get media type (  )  . add ( response media type )  ;   }   }  return media type list ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\main\java\org\openrepose\filters\versioning\util\VersionChoiceFactory.java,create,public  version choice   (  )  {   version choice version choice = new  version choice (  )  ;  version choice . set id ( service version mapping . get id (  )  )  ;  version choice . set status ( service version mapping . get status (  )   =  =  null  ?  null :  version status . from value ( service version mapping . get status (  )  . value (  )  )  )  ;  version choice . set media types ( convert media types (  )  )  ;  return version choice ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\main\java\org\openrepose\filters\versioning\util\RequestMediaRangeInterrogator.java,interrogate,public static  list <  media type >    (  string request uri  list <  string >  accept header values )  {  final  list <  media type >  ranges = new  linked list <  >  (  )  ;  final  mime type media type =  variant parser . get media type from variant ( request uri )  ;  if  ( media type  =  =  null )   {   list <  header value >  converted values = accept header values . stream (  )  . map ( header value  -  >  new  header value parser ( header value )  . parse (  )  )  . collect (  collectors . to list (  )  )  ;  ranges . add all ( new  media range processor ( converted values )  . process (  )  )  ;   }  else  {  ranges . add ( new  media type ( media type . get name (  )  media type 1 )  )  ;   }  if  ( ranges . is empty (  )  )   {  ranges . add ( new  media type (  mime type . unspecified . get name (  )   mime type . unspecified  - 1 )  )  ;   }  return ranges ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\testhelpers\ConfigurationDataCreator.java,create configured hosts,"public static  map <  string  destination >    ( int num of hosts )  {   map <  string  destination >  hosts = new  hash map <  string  destination >  (  )  ;  for  ( int i = 0 ;  i  <  num of hosts ;  i +  +  )   {   destination endpoint host = new  destination endpoint (  )  ;  host . set id ( ""service - v1 . ""  +  i )  ;  hosts . put ( ""service - v1 . ""  +  i host )  ;   }  return hosts ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\testhelpers\ConfigurationDataCreator.java,create configured mappings,"public static  map <  string  service version mapping >    ( int num of mappings )  {   map <  string  service version mapping >  mappings = new  hash map <  string  service version mapping >  (  )  ;   string id ;   service version mapping mapping ;  for  ( int i = 0 ;  i  <  num of mappings ;  i +  +  )   {  id = ""v1 . ""  +  i ;  mapping = new  service version mapping (  )  ;  mapping . set id ( id )  ;  mapping . set pp dest id ( ""service - v1 . ""  +  i )  ;  mapping . set status (  version status . current )  ;   media type media type ;   media type list media types = new  media type list (  )  ;  media type = new  media type (  )  ;  media type . set base ( ""application / xml"" )  ;  media type . set type ( ""application / vnd . vendor . service - v1 . ""  +  i  +  "" + xml"" )  ;  media types . get media type (  )  . add ( media type )  ;  media type = new  media type (  )  ;  media type . set base ( ""application / json"" )  ;  media type . set type ( ""application / vnd . vendor . service - v1 . ""  +  i  +  "" + json"" )  ;  media types . get media type (  )  . add ( media type )  ;  mapping . set media types ( media types )  ;  mappings . put ( id mapping )  ;   }  return mappings ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\testhelpers\ConfigurationDataCreator.java,create configured mappings with accept parameters,"public static  map <  string  service version mapping >    ( int num of mappings )  {   map <  string  service version mapping >  mappings = new  hash map <  string  service version mapping >  (  )  ;   string id ;   service version mapping mapping ;  for  ( int i = 0 ;  i  <  num of mappings ;  i +  +  )   {  id = ""v1 . ""  +  i ;  mapping = new  service version mapping (  )  ;  mapping . set id ( id )  ;  mapping . set pp dest id ( ""service - v1 . ""  +  i )  ;  mapping . set status (  version status . current )  ;   media type media type ;   media type list media types = new  media type list (  )  ;  media type = new  media type (  )  ;  media type . set base ( ""application / xml"" )  ;  media type . set type ( ""application / vnd . vendor . service ;  x = v1 . ""  +  i  +  "" ;  y = xml"" )  ;  media types . get media type (  )  . add ( media type )  ;  media type = new  media type (  )  ;  media type . set base ( ""application / json"" )  ;  media type . set type ( ""application / vnd . vendor . service ;  x = v1 . ""  +  i  +  "" ;  y = json"" )  ;  media types . get media type (  )  . add ( media type )  ;  mapping . set media types ( media types )  ;  mappings . put ( id mapping )  ;   }  return mappings ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\testhelpers\ConfigurationDataCreator.java,create version ids,public static  set <  string >    ( int num of mappings )  {   map <  string  service version mapping >  mappings = create configured mappings ( num of mappings )  ;  return mappings . key set (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\domain\VersionedRequestTest.java,should build accurateur ls,"@ test public void   (  )  {  final  http servlet request wrapper request = mock (  http servlet request wrapper . class )  ;  when ( request . get requesturi (  )  )  . then return ( "" / a / requested / resource"" )  ;  when ( request . get scheme (  )  )"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\domain\VersionedRequestTest.java,should handle external requests with context root,"@ test public void   (  )  {  final  http servlet request wrapper request = mock (  http servlet request wrapper . class )  ;  when ( request . get requesturi (  )  )  . then return ( "" / v1 . 0 / a / requested / resource"" )  ;  when ( request . get reque"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\domain\VersionedRequestTest.java,should handle fuzzed requests,"@ test public void   (  )  {  final  http servlet request wrapper request = mock (  http servlet request wrapper . class )  ;  when ( request . get requesturi (  )  )  . then return ( "" / v1 . 0a / requested / resource"" )  ;  final  string expected = "" / "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\domain\VersionedRequestTest.java,should handle non versioned requests,"@ test public void   (  )  {  final  http servlet request wrapper request = mock (  http servlet request wrapper . class )  ;  when ( request . get requesturi (  )  )  . then return ( "" / a / requested / resource"" )  ;  final  string expected = "" / a / re"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\domain\VersionedRequestTest.java,should handle versioned requests,"@ test public void   (  )  {  final  http servlet request wrapper request = mock (  http servlet request wrapper . class )  ;  when ( request . get requesturi (  )  )  . then return ( "" / v1 . 0 / a / requested / resource"" )  ;  final  string expected = """
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\domain\VersionedRequestTest.java,should handle versioned requests with context root,"@ test public void   (  )  {  final  http servlet request wrapper request = mock (  http servlet request wrapper . class )  ;  when ( request . get requesturi (  )  )  . then return ( "" / context / v1 . 0 / a / requested / resource"" )  ;  final  string ex"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\domain\VersionedRequestTest.java,should identify owning versions,@ test public void   (  )  {  final  http servlet request wrapper version one = mock (  http servlet request wrapper . class )  ;  final  http servlet request wrapper version two = mock (  http servlet request wrapper . class )  ;  when ( version one . ge
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\domain\VersionedRequestTest.java,should identify version,"@ test public void   (  )  {  final  http servlet request wrapper request = mock (  http servlet request wrapper . class )  ;  when ( request . get requesturi (  )  )  . then return ( "" / v1 . 0 / resource"" )  ;  final  versioned request versioned request"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\domain\VersionedRequestTest.java,should identify version with trailing slash,"@ test public void   (  )  {  final  http servlet request wrapper request = mock (  http servlet request wrapper . class )  ;  when ( request . get requesturi (  )  )  . then return ( "" / v1 . 0 / resource / "" )  ;  final  versioned request versioned requ"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\domain\VersionedRequestTest.java,should match,@ test public void   (  )  {  final  http servlet request wrapper version one = mock (  http servlet request wrapper . class )  ;  final  http servlet request wrapper version one with resource = mock (  http servlet request wrapper . class )  ;  final  ht
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\domain\VersionedRequestTest.java,should not accept uri without root,"@ test ( expected =  illegal argument exception . class )  public void   (  )  {  final  http servlet request wrapper request = mock (  http servlet request wrapper . class )  ;  when ( request . get requesturi (  )  )  . then return ( ""a / requested / re"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\domain\VersionedRequestTest.java,should not match partial version matches,"@ test public void   (  )  {  final  http servlet request wrapper request = mock (  http servlet request wrapper . class )  ;  when ( request . get requesturi (  )  )  . then return ( "" / v1 . 01 / resource / "" )  ;  final  versioned request versioned req"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\domain\VersionedRequestTest.java,should not rewrite versioned uri,"@ test public void   (  )  {  final  string expected = "" /    v1 . 0 / a / requested / resource"" ;  final  http servlet request wrapper request = mock (  http servlet request wrapper . class )  ;  when ( request . get requesturi (  )  )  . then return ( e"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\domain\VersionedRequestTest.java,stand up,"@ before public void   (  )  {  media range list = new  linked list <  >  (  )  ;  media range list . add ( new  media type ( """"  mime type . unknown  - 1 )  )  ;  mapping = new  service version mapping (  )  ;  mapping . set id ( ""v1 . 0"" )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\domain\ConfigurationDataTest.java,set up,"@ before public void   (  )  {   repose cluster domain = new  repose cluster (  )  ;  domain . set filters ( mock (  filter list . class )  )  ;   node local host = new  node (  )  ;  local host . set hostname ( ""localhost"" )  ;  local host . set http por"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\domain\ConfigurationDataTest.java,should return configured hosts,@ test public void   (  )  {  assert equals ( configured hosts configuration data . get configured hosts (  )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\domain\ConfigurationDataTest.java,should return host for service mapping,@ test public void   (  )  throws  versioned host not found exception  {  assert equals ( local endpoint configuration data . get host for version mapping ( version1 )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\domain\ConfigurationDataTest.java,should return if request is for versions,"@ test public void   (  )  {   http servlet request wrapper request = mock (  http servlet request wrapper . class )  ;  when ( request . get requesturi (  )  )  . then return ( "" / "" )  ;  assert true ( "" should return true that this request is for the s"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\domain\ConfigurationDataTest.java,should return null if no match for media range is found,"@ test public void   (  )  throws  versioned host not found exception  {   http servlet request wrapper request = mock (  http servlet request wrapper . class )  ;  when ( request . get requesturi (  )  )  . then return ( "" / service / rs"" )  ;  assert nu"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\domain\ConfigurationDataTest.java,should return version choices as list,"@ test public void   (  )  {   http servlet request wrapper request = mock (  http servlet request wrapper . class )  ;  when ( request . get requesturi (  )  )  . then return ( "" / v1"" )  ;  when ( request . get requesturl (  )  )  . then return ( new  s"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\domain\ConfigurationDataTest.java,should return versioned origin service from accept header,"@ test public void   (  )  throws  versioned host not found exception  {   http servlet request wrapper request = mock (  http servlet request wrapper . class )  ;  when ( request . get requesturi (  )  )  . then return ( "" / service / rs"" )  ;  when ( re"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\domain\ConfigurationDataTest.java,should return versioned origin service fromuri,"@ test public void   (  )  throws  versioned host not found exception  {   http servlet request wrapper request = mock (  http servlet request wrapper . class )  ;  when ( request . get requesturi (  )  )  . then return ( "" / v1 / service / rs"" )  ;   ver"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\util\RequestUrlTokenizerTest.java,setup,@ before public void   (  )  {  version ids = create version ids ( 2 )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\util\RequestUrlTokenizerTest.java,should expose resource info,"@ test public void   (  )  {  assert equals ( "" / resource / info"" tokenizer . get resource (  )  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\util\RequestUrlTokenizerTest.java,should expose service root href,"@ test public void   (  )  {  assert equals ( ""http: /  / rackspacecloud . com / "" tokenizer . get service root href (  )  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\util\RequestUrlTokenizerTest.java,should expose version id,"@ test public void   (  )  {  assert equals ( ""v1 . 1"" tokenizer . get version id (  )  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\util\RequestUrlTokenizerTest.java,should return false if is not in version id set,"@ test public void   (  )  {  assert false (  request url tokenizer . has version info ( ""version - 1"" version ids )  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\util\RequestUrlTokenizerTest.java,should return true if is in version id set,"@ test public void   (  )  {  assert true (  request url tokenizer . has version info ( ""v1 . 0"" version ids )  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\util\ContentTransformerTest.java,get file as string,private static  string   (  string file name )  {  try  {  return  file utils . read file to string ( new  file (  content transformer test . class . get resource ( file name )  . touri (  )  )  )  ;   }  catch  (  io exception e )   {  throw new  uncheckedio exception ( e )  ;   }  catch  (  uri syntax exception e )   {  throw new  runtime exception ( e )  ;   }   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\util\ContentTransformerTest.java,setup,"@ before class @ suppress warnings ( ""unchecked"" )  public static void   (  )  throws jaxb exception  {  xml transformer = new  stream to jaxb transform ( jaxb context . new instance ( org . openrepose . filters . versioning . schema .  object factory . c"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\util\ContentTransformerTest.java,should marshal choices xml,"@ test @ suppress warnings ( ""unchecked"" )  public void   (  )  {  final jaxb element jaxb element = xml transformer . transform (  content transformer test . class . get resource as stream ( xml   choices )  )  ;  assert true ( jaxb element . get declare"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\util\ContentTransformerTest.java,should marshal version xml,"@ test @ suppress warnings ( ""unchecked"" )  public void   (  )  {  final jaxb element jaxb element = xml transformer . transform (  content transformer test . class . get resource as stream ( xml   version )  )  ;  assert true ( jaxb element . get declare"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\util\ContentTransformerTest.java,should marshal versions xml,"@ test @ suppress warnings ( ""unchecked"" )  public void   (  )  {  final jaxb element jaxb element = xml transformer . transform (  content transformer test . class . get resource as stream ( xml   versions )  )  ;  assert true ( jaxb element . get declar"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\util\ContentTransformerTest.java,should transform choices to json,"@ test public void   (  )  throws  exception  {   string expected = get file as string ( json   choices )  ;   string actual = transform xml to format ( get file as string ( "" / meta - inf / schema / examples / xml / choices . xml"" )  new  media type (  m"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\util\ContentTransformerTest.java,should transform version identity to json,@ test public void   (  )  throws  exception  {   string expected = get file as string ( json   version   identity )  ;   string actual = transform xml to format ( version xml file reader new  media type (  mime type . application   json  - 1 )  new  cont
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\util\ContentTransformerTest.java,should transform version to json,@ test public void   (  )  throws  exception  {   string expected = get file as string ( json   version )  ;   string actual = transform xml to format ( version xml file reader new  media type (  mime type . application   json  - 1 )  new  content transfo
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\util\ContentTransformerTest.java,should transform version to xml,@ test public void   (  )  throws  exception  {   string expected = version xml file reader ;   string actual = transform xml to format ( version xml file reader new  media type (  mime type . application   xml  - 1 )  new  content transformer (  json for
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\util\ContentTransformerTest.java,should transform versions identity to json,@ test public void   (  )  throws  exception  {   string expected = get file as string ( json   versions   identity )  ;   string actual = transform xml to format ( versions xml file reader new  media type (  mime type . application   json  - 1 )  new  co
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\util\ContentTransformerTest.java,should transform versions to json,@ test public void   (  )  throws  exception  {   string expected = get file as string ( json   versions )  ;   string actual = transform xml to format ( versions xml file reader new  media type (  mime type . application   json  - 1 )  new  content trans
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\util\ContentTransformerTest.java,should transform versions to xml,@ test public void   (  )  throws  exception  {   string expected = versions xml file reader ;   string actual = transform xml to format ( versions xml file reader new  media type (  mime type . application   xml  - 1 )  new  content transformer (  json f
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\util\ContentTransformerTest.java,transform xml to format,private  string   (  string source  media type media type  content transformer content transformer )  {  jaxb element jaxb element = xml transformer . transform ( io utils . to input stream ( source )  )  ;   byte array output stream transform stream = new  byte array output stream (  )  ;  content transformer . transform ( jaxb element media type transform stream )  ;  return transform stream . to string (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\util\RequestMediaRangeInterrogatorTest.java,should return media type from accept header,"@ test public void   (  )  {   list <  media type >  media range =  request media range interrogator . interrogate ( ""http: /  / servers . api . openstack . org / images""  collections . singleton list ( ""application / xml"" )  )  ;  assert equals (  mime t"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\util\RequestMediaRangeInterrogatorTest.java,should return media type from variant,"@ test public void   (  )  {   list <  media type >  media range =  request media range interrogator . interrogate ( ""http: /  / cloudservers / images . json""  collections . singleton list ( """" )  )  ;  assert equals (  mime type . application   json medi"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\util\VariantParserTest.java,should ignore query parameters,@ test public void   (  )  {  assert equals (  mime type . application   xml  variant parser . get media type from variant ( uri   with   params )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\util\VariantParserTest.java,should match last variant,@ test public void   (  )  {  assert equals (  mime type . application   xml  variant parser . get media type from variant ( uri   with   multiple   media   type )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\util\VariantParserTest.java,should match media typeuri,@ test public void   (  )  {  assert that ( media   type   uri matches pattern (  variant parser . variant   regex )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\util\VariantParserTest.java,should match standarduri,@ test public void   (  )  {  assert that ( standard   uri matches pattern (  variant parser . variant   regex )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\util\VariantParserTest.java,should match versioned media typeuri,@ test public void   (  )  {  assert that ( versioned   media   type   uri matches pattern (  variant parser . variant   regex )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\util\VariantParserTest.java,should match versioneduri,@ test public void   (  )  {  assert that ( versioned   uri matches pattern (  variant parser . variant   regex )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\util\VariantParserTest.java,should not match baduri,"@ test public void   (  )  {  assert that ( ""tzs: / baduri|hehe"" not ( matches pattern (  variant parser . variant   regex )  )  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\util\VariantParserTest.java,should return media type,@ test public void   (  )  {   mime type media type =  variant parser . get media type from variant ( uri   with   json   media   type )  ;  assert equals (  mime type . application   json media type )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\util\VariantParserTest.java,should return null for variant without extension,"public void   (  )  {  assert null ( "" variants without extensions should return null""  variant parser . get media type from variant ( """" )  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\util\VariantParserTest.java,should return null when no variant content type is specified,@ test public void   (  )  {  assert null (  variant parser . get media type from variant ( standard   uri )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\akka-http-client-service\akka-http-client-service-api\src\main\java\org\openrepose\core\services\serviceclient\akka\AkkaServiceClientException.java, akka service client exception,public   (  string message  throwable cause )  {  super ( message cause )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\akka-http-client-service\akka-http-client-service-impl\src\main\java\org\openrepose\core\services\serviceclient\akka\impl\ActorRequest.java,get active span,public  span   (  )  {  return active span ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\akka-http-client-service\akka-http-client-service-impl\src\main\java\org\openrepose\core\services\serviceclient\akka\impl\ActorRequest.java,get logging context map,public  map <  string  string >    (  )  {  return logging context map ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\akka-http-client-service\akka-http-client-service-impl\src\main\java\org\openrepose\core\services\serviceclient\akka\impl\AkkaServiceClientFactoryImpl.java, akka service client factory impl,@ inject public   (  http client service http client service  configuration service configuration service )  {  this . http client service = http client service ;  this . configuration service = configuration service ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\akka-http-client-service\akka-http-client-service-impl\src\main\java\org\openrepose\core\services\serviceclient\akka\impl\AkkaServiceClientFactoryImpl.java,new akka service client,@ override public  akka service client   (  string connection pool id )  {  return new  akka service client impl ( connection pool id http client service configuration service )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\akka-http-client-service\akka-http-client-service-impl\src\main\java\org\openrepose\core\services\serviceclient\akka\impl\AuthGetRequest.java, auth get request,public   (  string hash key  string uri  map <  string  string >  headers )  {  this . uri = uri ;  this . headers = headers ;  this . hash key = hash key ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\akka-http-client-service\akka-http-client-service-impl\src\main\java\org\openrepose\core\services\serviceclient\akka\impl\AuthGetRequest.java,consistent hash key,@ override public  string   (  )  {  return hash key (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\akka-http-client-service\akka-http-client-service-impl\src\main\java\org\openrepose\core\services\serviceclient\akka\impl\AuthGetRequest.java,get headers,public  map <  string  string >    (  )  {  return headers ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\akka-http-client-service\akka-http-client-service-impl\src\main\java\org\openrepose\core\services\serviceclient\akka\impl\AuthGetRequest.java,get uri,public  string   (  )  {  return uri ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\akka-http-client-service\akka-http-client-service-impl\src\main\java\org\openrepose\core\services\serviceclient\akka\impl\AuthGetRequest.java,hash key,public  string   (  )  {  return hash key ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\akka-http-client-service\akka-http-client-service-impl\src\main\java\org\openrepose\core\services\serviceclient\akka\impl\AkkaServiceClientImpl.java, akka service client impl,"public   (  string connection pool id  http client service http client service  configuration service configuration service )  {  this . connection pool id = connection pool id ;  this . service client = new  service client ( connection pool id http client service )  ;  this . configuration service = configuration service ;   config custom conf =  config factory . load (  )  ;   config base conf =  config factory . default reference (  )  ;   config conf = custom conf . with fallback ( base conf )  ;  actor system =  actor system . create ( "" auth client actors"" conf )  ;  configuration service . subscribe to ( http   conn   pool   config   name this  http connection pool config . class )  ;  quick future cache =  cache builder . new builder (  )  . expire after write ( future   cache   ttl future   cache   unit )  . build (  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\akka-http-client-service\akka-http-client-service-impl\src\main\java\org\openrepose\core\services\serviceclient\akka\impl\AkkaServiceClientImpl.java,configuration updated,@ override public void   (  http connection pool config configuration object )  throws  update failed exception  {   pool type default pool = configuration object . get pool (  )  . get ( 0 )  ;  boolean is pool configured = false ;  for  (   pool type po
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\akka-http-client-service\akka-http-client-service-impl\src\main\java\org\openrepose\core\services\serviceclient\akka\impl\AkkaServiceClientImpl.java,destroy,@ override public void   (  )  {  configuration service . unsubscribe from ( http   conn   pool   config   name this )  ;  actor system . shutdown (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\akka-http-client-service\akka-http-client-service-impl\src\main\java\org\openrepose\core\services\serviceclient\akka\impl\AkkaServiceClientImpl.java,get,@ override public  service client response   (  string hash key  string uri  map <  string  string >  headers boolean check cache )  throws  akka service client exception  {   auth get request auth get request = new  auth get request ( hash key uri header
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\akka-http-client-service\akka-http-client-service-impl\src\main\java\org\openrepose\core\services\serviceclient\akka\impl\AkkaServiceClientImpl.java,get future,"private  future   (  consistent hashable hashable request  timeout timeout boolean check cache )  throws  execution exception  {   object hash key = hashable request . consistent hash key (  )  ;  log . trace ( "" getting future for:  {  } "" hash key )  ;  if  ( check cache )   {  return quick future cache . get ( hash key  (  )   -  >  make request ( hashable request timeout )  )  ;   }  else  {  return make request ( hashable request timeout )  ;   }   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\akka-http-client-service\akka-http-client-service-impl\src\main\java\org\openrepose\core\services\serviceclient\akka\impl\AkkaServiceClientImpl.java,is initialized,@ override public boolean   (  )  {  return initialized ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\akka-http-client-service\akka-http-client-service-impl\src\main\java\org\openrepose\core\services\serviceclient\akka\impl\AkkaServiceClientImpl.java,make request,"private  future   (  consistent hashable hashable request  timeout timeout )  {  log . trace ( "" call for:  {  } "" hashable request . consistent hash key (  )  )  ;  return ask ( token actor ref hashable request timeout )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\akka-http-client-service\akka-http-client-service-impl\src\main\java\org\openrepose\core\services\serviceclient\akka\impl\AkkaServiceClientImpl.java,post,@ override public  service client response   (  string hash key  string uri  map <  string  string >  headers  string payload  media type content media type boolean check cache )  throws  akka service client exception  {   auth post request auth post requ
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\akka-http-client-service\akka-http-client-service-impl\src\main\java\org\openrepose\core\services\serviceclient\akka\impl\AuthPostRequest.java, auth post request,public   (  string hash key  string uri  map <  string  string >  headers  string payload  media type content media type )  {  this . uri = uri ;  this . headers = headers ;  this . payload = payload ;  this . hash key = hash key ;  this . content media type = content media type ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\akka-http-client-service\akka-http-client-service-impl\src\main\java\org\openrepose\core\services\serviceclient\akka\impl\AuthPostRequest.java,consistent hash key,@ override public  string   (  )  {  return hash key ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\akka-http-client-service\akka-http-client-service-impl\src\main\java\org\openrepose\core\services\serviceclient\akka\impl\AuthPostRequest.java,get content media type,public  media type   (  )  {  return content media type ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\akka-http-client-service\akka-http-client-service-impl\src\main\java\org\openrepose\core\services\serviceclient\akka\impl\AuthPostRequest.java,get headers,public  map <  string  string >    (  )  {  return headers ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\akka-http-client-service\akka-http-client-service-impl\src\main\java\org\openrepose\core\services\serviceclient\akka\impl\AuthPostRequest.java,get payload,public  string   (  )  {  return payload ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\akka-http-client-service\akka-http-client-service-impl\src\main\java\org\openrepose\core\services\serviceclient\akka\impl\AuthPostRequest.java,get uri,public  string   (  )  {  return uri ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\akka-http-client-service\akka-http-client-service-impl\src\main\java\org\openrepose\core\services\serviceclient\akka\impl\AuthTokenFutureActor.java, auth token future actor,public   (  service client service client )  {  this . service client = service client ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\akka-http-client-service\akka-http-client-service-impl\src\main\java\org\openrepose\core\services\serviceclient\akka\impl\AuthTokenFutureActor.java,on receive,@ override public void   (  object message )  {   scope scope =  noop scope manager .  noop scope . instance ;  if  ( message instanceof  actor request )   {  final  actor request request =  (  actor request ) message ;  for  (   string key : request . ge
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\akka-http-client-service\akka-http-client-service-impl\src\main\java\org\openrepose\core\services\serviceclient\akka\impl\ReusableServiceClientResponse.java, reusable service client response,"public   ( int code  header[] headers  input stream data )  {  super ( code headers data )  ;  try  {  data array = io utils . to byte array ( data )  ;   }  catch  (  io exception e )   {  log . error ( "" not able read inputstream to byte array: ""  +  e . get message (  )  e )  ;   }   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\akka-http-client-service\akka-http-client-service-impl\src\main\java\org\openrepose\core\services\serviceclient\akka\impl\ReusableServiceClientResponse.java,get data,@ override public  input stream   (  )  {  return new  byte array input stream ( data array )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\atom-feed-service\atom-feed-service-api\src\main\java\org\openrepose\nodeservice\atomfeed\FeedReadRequest.java, feed read request,public   ( uri uri )  {  seturi ( uri )  ;  headers = new  tree map <  >  (  string . case   insensitive   order )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\atom-feed-service\atom-feed-service-api\src\main\java\org\openrepose\nodeservice\atomfeed\FeedReadRequest.java,get headers,public  map <  string  list <  string >  >    (  )  {  return this . headers ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\atom-feed-service\atom-feed-service-api\src\main\java\org\openrepose\nodeservice\atomfeed\FeedReadRequest.java,geturi,public uri   (  )  {  return this . uri ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\atom-feed-service\atom-feed-service-api\src\main\java\org\openrepose\nodeservice\atomfeed\FeedReadRequest.java,seturi,public void   ( uri uri )  {  this . uri = uri ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\atom-feed-service\atom-feed-service-api\src\main\java\org\openrepose\nodeservice\atomfeed\AuthenticationRequestException.java, authentication request exception,public   (  string message  throwable cause )  {  super ( message cause )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-api\src\main\java\org\openrepose\core\services\datastore\DatastoreAccessControl.java, datastore access control,public   (  list <  inet address >  allowed hosts boolean allow all )  {  this . allowed hosts = allowed hosts ;  this . allow all = allow all ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-api\src\main\java\org\openrepose\core\services\datastore\DatastoreAccessControl.java,get allowed hosts,public  list <  inet address >    (  )  {  return allowed hosts ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-api\src\main\java\org\openrepose\core\services\datastore\DatastoreAccessControl.java,should allow all,public boolean   (  )  {  return allow all ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-api\src\main\java\org\openrepose\core\services\datastore\DatastoreOperationException.java, datastore operation exception,public   (  string message )  {  super ( message )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-api\src\main\java\org\openrepose\core\services\datastore\DatastoreServiceException.java, datastore service exception,public   (  string message )  {  super ( message )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-api\src\main\java\org\openrepose\core\services\datastore\DatastoreUnavailableException.java, datastore unavailable exception,public   (  string string )  {  super ( string )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-api\src\main\java\org\openrepose\core\services\datastore\distributed\ClusterConfiguration.java, cluster configuration,public   (  request proxy service proxy service  encoding provider encoding provider  cluster view cluster view )  {  this . proxy service = proxy service ;  this . encoding provider = encoding provider ;  this . cluster view = cluster view ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-api\src\main\java\org\openrepose\core\services\datastore\distributed\ClusterConfiguration.java,get cluster view,public  cluster view   (  )  {  return cluster view ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-api\src\main\java\org\openrepose\core\services\datastore\distributed\ClusterConfiguration.java,get encoding provider,public  encoding provider   (  )  {  return encoding provider ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-api\src\main\java\org\openrepose\core\services\datastore\distributed\ClusterConfiguration.java,get proxy service,public  request proxy service   (  )  {  return proxy service ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-api\src\main\java\org\openrepose\core\services\datastore\distributed\RemoteBehavior.java,value of or null,public static  remote behavior   (  string enum name )  {  final  string uppercase enum name = enum name . to upper case (  )  ;  for  (   remote behavior behavior : values (  )  )   {  if  ( behavior . name (  )  . equals ( uppercase enum name )  )   {  return behavior ;   }   }  return null ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-api\src\main\java\org\openrepose\core\services\datastore\hash\MD5MessageDigestFactory.java,algorithm name,@ override public  string   (  )  {  return digest   name ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-api\src\main\java\org\openrepose\core\services\datastore\hash\MD5MessageDigestFactory.java,get instance,public static  message digest factory   (  )  {  return instance ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-api\src\main\java\org\openrepose\core\services\datastore\hash\AbstractMessageDigestFactory.java,new message digest,@ override public  message digest   (  )  throws  no such algorithm exception  {  return  message digest . get instance ( algorithm name (  )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-api\src\main\java\org\openrepose\core\services\datastore\types\StringValue.java, patch,public   (  string value )  {  this . value = value ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-api\src\main\java\org\openrepose\core\services\datastore\types\StringValue.java, string value,public   (  string value )  {  this . value = value ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-api\src\main\java\org\openrepose\core\services\datastore\types\StringValue.java,apply patch,@ override public  string value   (  patch patch )  {   string original value = value ;  value = value  +  patch . new from patch (  )  . get value (  )  ;  return new  string value ( original value  +  patch . new from patch (  )  . get value (  )  )  ; 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-api\src\main\java\org\openrepose\core\services\datastore\types\StringValue.java,get value,public  string   (  )  {  return value ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-api\src\main\java\org\openrepose\core\services\datastore\types\StringValue.java,new from patch,@ override public  string value   (  )  {  return new  string value ( value )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\ClusterMember.java, cluster member,public   ( int required validation passes  inet socket address member address int dropped member rest time )  {  this . member address = member address ;  this . dropped member rest time = dropped member rest time ;  this . required validation passes = required validation passes ;  online = true ;  validation pass = 0 ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\ClusterMember.java,get member address,public  inet socket address   (  )  {  return member address ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\ClusterMember.java,is offline,public boolean   (  )  {  return  ! online ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\ClusterMember.java,is online,public boolean   (  )  {  return online ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\ClusterMember.java,log member retry,private void   ( long now in milliseconds )  {  if  ( validation pass +  +   <  required validation passes )   {  rest period =  ( long ) dropped member rest time  /  validation pass ;  dropped time = now in milliseconds ;   }  else  {  validation pass = 0 ;  dropped time = 0 ;  online = true ;   }   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\ClusterMember.java,now in milliseconds,private static long   (  )  {  return  system . current time millis (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\ClusterMember.java,set offline,public void   (  )  {  dropped time = now in milliseconds (  )  ;  rest period = dropped member rest time ;  validation pass = 0 ;  online = false ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\ClusterMember.java,should retry,public boolean   (  )  {  final long now in milliseconds = now in milliseconds (  )  ;  final boolean retry = now in milliseconds  -  dropped time  >  rest period ;  if  ( retry )   {  log member retry ( now in milliseconds )  ;   }  return retry ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\DatastoreServiceImpl.java, datastore service impl,@ inject public   (  optional <  metrics service >  metrics service )  {  local datastore manager = new eh cache datastore manager ( metrics service )  ;  distributed managers = new  hash map <  >  (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\DatastoreServiceImpl.java,create datastore,@ override public  distributed datastore   (  string datastore name  cluster configuration configuration )  {  return create distributed datastore ( datastore name configuration null false )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\DatastoreServiceImpl.java,create distributed datastore,@ override public  distributed datastore   (  string datastore name  cluster configuration configuration  string conn pool id boolean use https )  {   datastore manager manager = new  hash ring datastore manager ( configuration local datastore manager . g
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\DatastoreServiceImpl.java,create remote datastore,@ override public  distributed datastore   (  string datastore name  request proxy service proxy service  encoding provider encoding provider  inet socket address target  string conn pool id boolean use https )  {   datastore manager manager = new  remote
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\DatastoreServiceImpl.java,destroy,"@ pre destroy public void   (  )  {  log . info ( "" destroying datastore service context"" )  ;  shutdown (  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\DatastoreServiceImpl.java,destroy datastore,@ override public void   (  string datastore name )  {  final  datastore manager manager to unregister = distributed managers . get ( datastore name )  ;  if  ( manager to unregister  !  =  null )   {  distributed managers . remove ( datastore name )  ;  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\DatastoreServiceImpl.java,get datastore,@ override public  datastore   (  string datastore name )  {  if  ( distributed managers . contains key ( datastore name )  )   {  return distributed managers . get ( datastore name )  . get datastore (  )  ;   }  return null ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\DatastoreServiceImpl.java,get default datastore,@ override public  datastore   (  )  {  return local datastore manager . get datastore (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\DatastoreServiceImpl.java,get distributed datastore,@ override public  distributed datastore   (  )  {  if  (  ! distributed managers . is empty (  )  )   {  return  (  distributed datastore ) distributed managers . values (  )  . iterator (  )  . next (  )  . get datastore (  )  ;   }  return null ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\DatastoreServiceImpl.java,shutdown,@ override public void   (  )  {  for  (   string datastore name : distributed managers . key set (  )  )   {  destroy datastore ( datastore name )  ;   }  local datastore manager . destroy (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\CacheRequest.java, cache request,public   (  string cache key int ttl in seconds byte[] payload  remote behavior requested remote behavior )  {  this . cache key = cache key ;  this . ttl in seconds = ttl in seconds ;  this . payload =  array utilities . null safe copy ( payload )  ;  this . requested remote behavior = requested remote behavior ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\CacheRequest.java,get cache key,public  string   (  )  {  return cache key ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\CacheRequest.java,get payload,public byte[]   (  )  {  return payload . clone (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\CacheRequest.java,get requested remote behavior,public  remote behavior   (  )  {  return requested remote behavior ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\CacheRequest.java,get ttl in seconds,public int   (  )  {  return ttl in seconds ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\CacheRequest.java,has payload,public boolean   (  )  {  return payload  !  =  null ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\CacheRequest.java,is cache request valid,public static boolean   (  http servlet request request )  {  return request . get requesturi (  )  . starts with ( cache   uri   path )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\CacheRequest.java,marshall cache request,"@ suppress warnings ( ""squid: redundant throws declaration check"" )  public static  cache request   (  http servlet request request )  throws  malformed cache request exception  {  final  string cache key = get cache key ( request )  ;  return new  cache "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\CacheRequest.java,marshall cache request with payload,"@ suppress warnings ( ""squid: redundant throws declaration check"" )  public static  cache request   (  http servlet request request )  throws  malformed cache request exception  {  final  string cache key = get cache key ( request )  ;  try  {  final  str"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\CacheRequest.java,url for,"public static  string   (  inet socket address remote endpoint boolean use https )  {  return ""http""  +   ( use https  ?  ""s"" : """" )   +  "": /  / "" +  remote endpoint . get address (  )  . get host address (  )  +  "":"" +  remote endpoint . get port (  )  +  cache   uri   path ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\HashRingDatastoreManager.java, hash ring datastore manager,"public   (  cluster configuration configuration  datastore local datastore  string conn pool id boolean use https )  {  datastore = new  hash ring datastore ( new  remote command executor ( configuration . get proxy service (  )  )  configuration . get cluster view (  )  """" local datastore md5 message digest factory . get instance (  )  configuration . get encoding provider (  )  conn pool id use https )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\HashRingDatastoreManager.java,get datastore,@ override public  datastore   (  )  {  return datastore ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\HashRingDatastoreManager.java,is distributed,@ override public boolean   (  )  {  return true ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\remote\command\AbstractRemoteCommand.java, abstract remote command,public   (  string cache object key  inet socket address remote endpoint  string conn pool id boolean use https )  {  this . cache object key = cache object key ;  this . remote endpoint = remote endpoint ;  this . conn pool id = conn pool id ;  this . use https = use https ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\remote\command\AbstractRemoteCommand.java,get base url,public  string   (  )  {  return  cache request . url for ( remote endpoint use https )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\remote\command\AbstractRemoteCommand.java,get body,protected byte[]   (  )  {  return new byte[0] ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\remote\command\AbstractRemoteCommand.java,get cache object key,protected  string   (  )  {  return cache object key ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\remote\command\AbstractRemoteCommand.java,get connection pool id,public  string   (  )  {  return conn pool id ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\remote\command\AbstractRemoteCommand.java,get headers,protected  map <  string  string >    (  remote behavior remote behavior )  {   map <  string  string >  headers = new  hash map <  >  (  )  ;  headers . put (  datastore header . remote   behavior remote behavior . name (  )  )  ;  return headers ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\remote\command\AbstractRemoteCommand.java,get remote endpoint,protected  inet socket address   (  )  {  return remote endpoint ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\remote\command\AbstractRemoteCommand.java,get url,public  string   (  )  {  return  cache request . url for ( get remote endpoint (  )  get cache object key (  )  use https )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\HashRingDatastore.java, hash ring datastore,"public   (  remote command executor remote command executor  cluster view cluster view  string datastore prefix  datastore local datastore  message digest factory hash provider  encoding provider encoding provider  string conn pool id boolean use https )  {  this . name = datastore   name ;  this . encoding provider = encoding provider ;  this . hash provider = hash provider ;  this . dataset prefix = datastore prefix ;  this . conn pool id = conn pool id ;  this . use https = use https ;  this . cluster view = cluster view ;  this . local datastore = local datastore ;  this . remote command executor = remote command executor ;  if  ( local datastore  =  =  null )   {  log . warn ( "" local datastore is null"" )  ;   }   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\HashRingDatastore.java,get,@ override public  serializable   (  string hashed key byte[] id  remote behavior remote behavior )  {  return  (  serializable ) perform action ( hashed key id new  datastore action (  )  {  @ override public  object perform remote (   string name   inet
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\HashRingDatastore.java,get hash,"private byte[]   (  string key )  {  final byte[] string bytes =  ( dataset prefix  +  key )  . get bytes (  standard charsets . utf   8 )  ;  try  {  return hash provider . new message digest (  )  . digest ( string bytes )  ;   }  catch  (   no such algorithm exception algorithm exception )   {  throw new  datastore operation exception ( "" failed to hash key .   reason: ""  +  algorithm exception . get message (  )  algorithm exception )  ;   }   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\HashRingDatastore.java,get name,@ override public  string   (  )  {  return name ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\HashRingDatastore.java,get target,"public  inet socket address   ( byte[] hash bytes )  {  final  inet socket address[] ring members = cluster view . members (  )  ;  if  ( ring members . length  <  =  0 )   {  if  (  ! cluster member warning )   {  log . info ( "" no members to route to in datastore cluster .  .  .  unable to route this datastore request . "" )  ;  cluster member warning = true ;   }  return null ;   }  cluster member warning = false ;  final int member address = new  big integer ( hash bytes )  . mod (  big integer . value of ( ring members . length )  )  . abs (  )  . int value (  )  ;  return ring members[member address] ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\HashRingDatastore.java,is remote target,"private boolean   (  inet socket address target )  {  if  ( target  =  =  null )   {  return false ;   }  try  {  if  ( local datastore  =  =  null )   {  return  ! cluster view . is local ( target )  ;   }  synchronized  ( lock )   {   boolean is local =  (  boolean ) local datastore . get ( target . to string (  )  )  ;  if  ( is local  =  =  null )   {  is local = cluster view . is local ( target )  ;  local datastore . put ( target . to string (  )  is local default   ttl  time unit . minutes )  ;   }  return  ! is local ;   }   }  catch  (   socket exception se )   {  throw new  datastore operation exception ( "" unable to identify local cluster target datastore"" se )  ;   }   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\HashRingDatastore.java,patch,@ override public  serializable   (  string hashed key byte[] id final  serializable patch patch final int ttl final  time unit time unit  remote behavior remote behavior )  {  return  (  serializable ) perform action ( hashed key id new  datastore action
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\HashRingDatastore.java,perform action,"private  object   (  string name byte[] id  datastore action action  remote behavior initial behavior )  {  if  ( initial behavior  !  =   remote behavior . disallow   forwarding )   {  return perform remote ( name id action initial behavior )  ;   }  else  {  log . debug ( "" forwarding for ""  +  action . to string (  )   +  "" datastore action has been disabled by request . "" )  ;   }  return action . perform local ( name )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\HashRingDatastore.java,perform local,@ override public  object   (  string name )  {  return local datastore . patch ( name patch ttl time unit )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\HashRingDatastore.java,perform remote,@ override public  object   (  string name  inet socket address target  remote behavior remote behavior )  {  return remote command executor . execute ( new org . openrepose . core . services . datastore . impl . distributed . remote . command .  patch ( 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\HashRingDatastore.java,put,@ override public void   (  string hashed key byte[] id final  serializable value final int ttl final  time unit time unit  remote behavior remote behavior )  {  perform action ( hashed key id new  datastore action (  )  {  @ override public  object perfo
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\HashRingDatastore.java,remove,@ override public boolean   (  string hashed key byte[] id  remote behavior remote behavior )  {  return  (  boolean ) perform action ( hashed key id new  datastore action (  )  {  @ override public  object perform remote (   string name   inet socket add
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\HashRingDatastore.java,remove all,@ override public void   (  )  {  local datastore . remove all (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\HashRingDatastore.java,to string,"@ override public  string   (  )  {  return ""patch"" ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\remote\command\Delete.java, delete,public   (  string cache object key  inet socket address remote endpoint  string conn pool id boolean use https )  {  super ( cache object key remote endpoint conn pool id use https )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\remote\command\Delete.java,execute,@ override public  service client response   (  request proxy service proxy service  remote behavior remote behavior )  {  return proxy service . delete ( get base url (  )  get cache object key (  )  get headers ( remote behavior )  get connection pool i
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\remote\command\Delete.java,handle response,@ override public  object   (  service client response response )  throws io exception  {  return  boolean . value of ( response . get status (  )   =  =   http servlet response . sc   accepted )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\MalformedCacheRequestException.java, malformed cache request exception,public   (  string error  throwable cause )  {  super ( error cause )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\remote\command\Get.java, get,public   (  string cache object key  inet socket address remote endpoint  string conn pool id boolean use https )  {  super ( cache object key remote endpoint conn pool id use https )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\remote\command\Get.java,execute,@ override public  service client response   (  request proxy service proxy service  remote behavior remote behavior )  {  return proxy service . get ( get base url (  )  get cache object key (  )  get headers ( remote behavior )  get connection pool id (
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\remote\command\Get.java,handle response,@ override public  object   (  service client response response )  throws io exception  {  final int status code = response . get status (  )  ;  if  ( status code  =  =   http servlet response . sc   ok )   {  final  input stream internal stream referenc
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\remote\command\Put.java, put,"@ suppress warnings ( ""pmd .  array is stored directly"" )  public   (  time unit time unit  serializable value int ttl  string cache object key  inet socket address remote endpoint  string conn pool id boolean use https )  {  super ( cache object key remo"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\remote\command\Put.java,execute,@ override public  service client response   (  request proxy service proxy service  remote behavior remote behavior )  {  return proxy service . put ( get base url (  )  get cache object key (  )  get headers ( remote behavior )  get body (  )  get conne
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\remote\command\Put.java,get body,"@ override protected byte[]   (  )  {  try  {  return object serializer . write object ( value )  ;   }  catch  (  io exception ioe )   {  throw new  datastore operation exception ( "" failed to serialize value to be put"" ioe )  ;   }   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\remote\command\Put.java,get headers,@ override protected  map <  string  string >    (  remote behavior remote behavior )  {   map <  string  string >  headers = super . get headers ( remote behavior )  ;  headers . put (  extended http header . x   ttl  string . value of (  time unit . sec
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\remote\command\Put.java,handle response,"@ override public  object   (  service client response response )  throws io exception  {  if  ( response . get status (  )   !  =   http servlet response . sc   accepted )   {  throw new  datastore operation exception ( "" remote request failed with: ""  +"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\remote\command\Patch.java, patch,"@ suppress warnings ( ""pmd .  array is stored directly"" )  public   (  time unit time unit  serializable patch patch int ttl  string cache object key  inet socket address remote endpoint  string conn pool id boolean use https )  {  super ( cache object ke"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\remote\command\Patch.java,execute,@ override public  service client response   (  request proxy service proxy service  remote behavior remote behavior )  {  return proxy service . patch ( get base url (  )  get cache object key (  )  get headers ( remote behavior )  get body (  )  get con
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\remote\command\Patch.java,get body,@ override protected byte[]   (  )  {  return value ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\remote\command\Patch.java,get headers,@ override protected  map <  string  string >    (  remote behavior remote behavior )  {   map <  string  string >  headers = super . get headers ( remote behavior )  ;  headers . put (  extended http header . x   ttl  string . value of (  time unit . sec
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\remote\command\Patch.java,handle response,@ override public  object   (  service client response response )  throws io exception  {  if  ( response . get status (  )   =  =   http servlet response . sc   ok )   {  final  input stream internal stream reference = response . get data (  )  ;  try  {
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\ThreadSafeClusterView.java, thread safe cluster view,public   (  network interface provider network interface provider  list <  cluster member >  cluster members  list <  integer >  listen ports )  {  this . network interface provider = network interface provider ;  this . cluster members = cluster members ;  this . listen ports = listen ports ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\ThreadSafeClusterView.java,copy,@ override public  thread safe cluster view   (  )  {  return new  thread safe cluster view ( cluster members listen ports )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\ThreadSafeClusterView.java,has damaged members,@ override public synchronized boolean   (  )  {  for  (   cluster member member : cluster members )   {  if  (  ! member . is online (  )  )   {  return true ;   }   }  return false ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\ThreadSafeClusterView.java,is local,@ override public boolean   (  inet socket address addr )  throws  socket exception  {  boolean have port = false ;  for  (   integer port : listen ports )   {  if  ( addr . get port (  )   =  =  port )   {  have port = true ;  break ;   }   }  if  ( have
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\ThreadSafeClusterView.java,member damaged,"@ override public synchronized void   (  inet socket address address  string reason )  {  for  (   cluster member member : cluster members )   {  if  ( member . get member address (  )  . equals ( address )  )   {  log . warn ( "" cluster member \""""  +  me"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\ThreadSafeClusterView.java,members,@ override public synchronized  inet socket address[]   (  )  {  final  linked list <  inet socket address >  active cluster members = new  linked list <  >  (  )  ;  for  (   cluster member member : cluster members )   {  final boolean member is online =
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\ThreadSafeClusterView.java,normalize cluster members,private static void   (  list <  cluster member >  members )  {   collections . sort ( members cluster   member   comparator )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\ThreadSafeClusterView.java,single port cluster view,public static  thread safe cluster view   ( int port )  {   list <  integer >  port list = new  array list <  >  (  )  ;  port list . add ( port )  ;  return new  thread safe cluster view ( port list )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\ThreadSafeClusterView.java,update members,@ override public void   (  list <  inet socket address >  view )  {  update members ( view . to array ( new  inet socket address[view . size (  ) ] )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\remote\RemoteCommandExecutor.java, remote command executor,public   (  request proxy service proxy service )  {  this . proxy service = proxy service ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\remote\RemoteCommandExecutor.java,execute,"public  object   ( final  remote command command  remote behavior behavior )  {  try  {   service client response execute = command . execute ( proxy service behavior )  ;  return command . handle response ( execute )  ;   }  catch  (   proxy request exception ex )   {  throw new  remote connection exception ( "" error communicating with remote node"" ex )  ;   }  catch  (  io exception ex )   {  throw new  datastore operation exception ( "" error handling response"" ex )  ;   }   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\remote\RemoteConnectionException.java, remote connection exception,public   (  string message  throwable cause )  {  super ( message cause )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\ehcache\EHCacheDatastore.java,eh cache datastore,public   (  ehcache eh cache instance )  {  this . eh cache instance = eh cache instance ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\ehcache\EHCacheDatastore.java,get,@ override public  serializable   (  string key )  {   element element = eh cache instance . get ( key )  ;  if  ( element  !  =  null )   {  return element . get value (  )  ;   }  else  {  return null ;   }   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\ehcache\EHCacheDatastore.java,get name,@ override public  string   (  )  {  return name ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\ehcache\EHCacheDatastore.java,patch,@ override public  serializable   (  string key  patch patch int ttl  time unit time unit )  {   serializable potential new value =  (  serializable ) patch . new from patch (  )  ;   element element = new  element ( key potential new value )  ;   element
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\ehcache\EHCacheDatastore.java,put,@ override public void   (  string key  serializable value int ttl  time unit time unit )  {   element put me = new  element ( key value )  ;  put me . set time to live (  ( int )  time unit . seconds . convert ( ttl time unit )  )  ;  eh cache instance .
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\ehcache\EHCacheDatastore.java,remove,@ override public boolean   (  string key )  {  return eh cache instance . remove ( key )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\ehcache\EHCacheDatastore.java,remove all,@ override public void   (  )  {  eh cache instance . remove all (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\remote\RemoteDatastore.java, remote datastore,"public   (  remote command executor remote command executor  string datastore prefix  datastore local datastore  message digest factory hash provider  encoding provider encoding provider  inet socket address target  string conn pool id boolean use https )  {  this . name = datastore   name ;  this . encoding provider = encoding provider ;  this . hash provider = hash provider ;  this . dataset prefix = datastore prefix ;  this . target = target ;  this . conn pool id = conn pool id ;  this . use https = use https ;  this . local datastore = local datastore ;  this . remote command executor = remote command executor ;  if  ( local datastore  =  =  null )   {  log . warn ( "" local datastore is null"" )  ;   }   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\remote\RemoteDatastore.java,get,@ override public  serializable   (  string hashed key byte[] id  remote behavior remote behavior )  {  return  (  serializable ) perform remote ( hashed key new  datastore action (  )  {  @ override public  object perform remote (   string name   inet so
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\remote\RemoteDatastore.java,get hash,"private byte[]   (  string key )  {  final byte[] string bytes =  ( dataset prefix  +  key )  . get bytes (  standard charsets . utf   8 )  ;  try  {  return hash provider . new message digest (  )  . digest ( string bytes )  ;   }  catch  (   no such algorithm exception algorithm exception )   {  throw new  datastore operation exception ( "" failed to hash key .   reason: ""  +  algorithm exception . get message (  )  algorithm exception )  ;   }   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\remote\RemoteDatastore.java,get name,@ override public  string   (  )  {  return name ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\remote\RemoteDatastore.java,patch,@ override public  serializable   (  string hashed key byte[] id final  serializable patch patch final int ttl final  time unit time unit  remote behavior remote behavior )  {  return  (  serializable ) perform remote ( hashed key new  datastore action ( 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\remote\RemoteDatastore.java,perform local,@ override public  object   (  string name )  {  return local datastore . patch ( name patch ttl time unit )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\remote\RemoteDatastore.java,perform remote,@ override public  object   (  string name  inet socket address target  remote behavior remote behavior )  {  return remote command executor . execute ( new org . openrepose . core . services . datastore . impl . distributed . remote . command .  patch ( 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\remote\RemoteDatastore.java,put,@ override public void   (  string hashed key byte[] id final  serializable value final int ttl final  time unit time unit  remote behavior remote behavior )  {  perform remote ( hashed key new  datastore action (  )  {  @ override public  object perform 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\remote\RemoteDatastore.java,remove,@ override public boolean   (  string hashed key byte[] id  remote behavior remote behavior )  {  return  (  boolean ) perform remote ( hashed key new  datastore action (  )  {  @ override public  object perform remote (   string name   inet socket addres
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\remote\RemoteDatastore.java,remove all,@ override public void   (  )  {  local datastore . remove all (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\remote\RemoteDatastore.java,to string,"@ override public  string   (  )  {  return ""patch"" ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\remote\RemoteDatastoreManager.java, remote datastore manager,"public   (  request proxy service proxy service  encoding provider encoding provider  datastore local datastore  inet socket address target  string conn pool id boolean use https )  {  datastore = new  remote datastore ( new  remote command executor ( proxy service )  """" local datastore md5 message digest factory . get instance (  )  encoding provider target conn pool id use https )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\remote\RemoteDatastoreManager.java,get datastore,@ override public  datastore   (  )  {  return datastore ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\remote\RemoteDatastoreManager.java,is distributed,@ override public boolean   (  )  {  return true ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\ehcache\EHCacheDatastoreManager.java,eh cache datastore manager,"public   (  optional <  metrics service >  metrics service )  {   configuration default configuration = new  configuration (  )  ;  default configuration . set name ( cache   manager   name )  ;  default configuration . set default cache configuration ( new  cache configuration (  )  . disk persistent ( false )  )  ;  default configuration . set update check ( false )  ;  this . cache manager instance =  cache manager . new instance ( default configuration )  ;   string cache name = cache   name   prefix  +  "":""  +  cache manager instance . get name (  )  +  uuid . randomuuid (  )  . to string (  )  ;  final  ehcache cache orig = new  cache ( cache name 20000 false false 5 2 )  ;  cache manager instance . add cache ( cache orig )  ;  this . cache = cache orig ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\ehcache\EHCacheDatastoreManager.java,destroy,"@ override public void   (  )  {  try  {  if  ( cache manager instance  !  =  null )   {  cache manager instance . removal all (  )  ;  cache manager instance . shutdown (  )  ;   }   }  catch  (   exception e )   {  log . warn ( "" error occurred when shu"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\ehcache\EHCacheDatastoreManager.java,get datastore,@ override public  datastore   (  )  {  return new eh cache datastore ( cache )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\ehcache\EHCacheDatastoreManager.java,is distributed,@ override public boolean   (  )  {  return false ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\nodeservice\distributed\cluster\utils\AccessListDeterminator.java,get access list,"public static  datastore access control   (  distributed datastore configuration config  list <  inet address >  cluster members )  {   list <  inet address >  host access list = new  linked list <  >  (  )  ;  boolean allow all = config . get allowed hosts (  )  . is allow all (  )  ;  host access list . add all ( cluster members )  ;  if  (  ! allow all )   {  host access list . add all ( get configured allowed hosts ( config )  )  ;   }  if  ( allow all )   {  log . info ( "" the distributed datastore component is configured in allow - all mode meaning that any host can access  store and delete cached objects . "" )  ;   }  else  {  log . info ( "" the distributed datastore component has access controls configured meaning that only the configured hosts and cluster members ""  +  ""can access  store and delete cached objects . "" )  ;   }  log . debug ( "" allowed  hosts: ""  +  host access list . to string (  )  )  ;  return new  datastore access control ( host access list allow all )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\nodeservice\distributed\cluster\utils\AccessListDeterminator.java,get cluster members,"public static  list <  inet address >    (  system model config  string cluster id )  {   repose cluster cluster =  cluster member determinator . get current cluster ( config . get repose cluster (  )  cluster id )  ;  final  list <  inet address >  repose cluster members = new  linked list <  >  (  )  ;  for  (   node node : cluster . get nodes (  )  . get node (  )  )   {  try  {  final  inet address host address =  inet address . get by name ( node . get hostname (  )  )  ;  repose cluster members . add ( host address )  ;   }  catch  (   unknown host exception e )   {  log . warn ( "" unable to resolve host: ""  +  node . get hostname (  )   +  ""for  node "" +  node . get id (  )  +  "" in  repose  cluster "" +  cluster id e )  ;   }   }  return repose cluster members ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\nodeservice\distributed\cluster\utils\AccessListDeterminator.java,get configured allowed hosts,"private static  list <  inet address >    (  distributed datastore configuration cur distributed datastore configuration )  {  final  list <  inet address >  configured allowed hosts = new  linked list <  >  (  )  ;  for  (   host access control host : cur distributed datastore configuration . get allowed hosts (  )  . get allow (  )  )   {  try  {  final  inet address host address =  inet address . get by name ( host . get host (  )  )  ;  configured allowed hosts . add ( host address )  ;   }  catch  (   unknown host exception e )   {  log . warn ( "" unable to resolve host: ""  +  host . get host (  )  e )  ;   }   }  return configured allowed hosts ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\nodeservice\distributed\cluster\utils\ClusterMemberDeterminator.java,get cluster members,public static  list <  inet socket address >    (  system model config  distributed datastore configuration dd config  string cluster id )  {  final  list <  inet socket address >  cache siblings = new  linked list <  >  (  )  ;   repose cluster cluster = get current cluster ( config . get repose cluster (  )  cluster id )  ;  try  {  if  ( cluster  !  =  null )   {  for  (   node node : cluster . get nodes (  )  . get node (  )  )   {  final  inet address host address =  inet address . get by name ( node . get hostname (  )  )  ;  final int port = get nodedd port ( dd config cluster . get id (  )  node . get id (  )  )  ;  final  inet socket address host socket address = new  inet socket address ( host address port )  ;  cache siblings . add ( host socket address )  ;   }   }   }  catch  (   unknown host exception ex )   {  log . error ( ex . get message (  )  ex )  ;   }  return cache siblings ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\nodeservice\distributed\cluster\utils\ClusterMemberDeterminator.java,get current cluster,public static  repose cluster   (  list <  repose cluster >  clusters  string cluster id )  {  for  (   repose cluster cluster : clusters )   {  if  (  string utils . equals ( cluster id cluster . get id (  )  )  )   {  return cluster ;   }   }  return null ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\nodeservice\distributed\cluster\utils\ClusterMemberDeterminator.java,get defaultdd port,"public static int   (  distributed datastore configuration config  string cluster id )  {  int port =  - 1 ;  for  (   port cur port : config . get port config (  )  . get port (  )  )   {  if  ( cur port . get cluster (  )  . equals ignore case ( cluster id )  && "" - 1"" . equals ( cur port . get node (  )  )  )   {  port = cur port . get port (  )  ;   }   }  return port ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\nodeservice\distributed\cluster\utils\ClusterMemberDeterminator.java,get nodedd port,"public static int   (  distributed datastore configuration config  string cluster id  string node id )  {  log . debug ( "" finding  dist datastore  port for cluster:  {  }  node:  {  } "" cluster id node id )  ;  int port = get defaultdd port ( config cluster id )  ;  for  (   port cur port : config . get port config (  )  . get port (  )  )   {  if  ( cur port . get cluster (  )  . equals ignore case ( cluster id )  && cur port . get node (  )  . equals ignore case ( node id )  )   {  port = cur port . get port (  )  ;  break ;   }   }  return port ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\nodeservice\distributed\servlet\DistributedDatastoreServlet.java, distributed datastore servlet,public   (  datastore service datastore  cluster configuration cluster configuration  datastore access control acl  distributed datastore configuration dd config  tracer tracer  string repose version  uri redaction service uri redaction service )  {  this . datastore service = datastore ;  this . cluster configuration = cluster configuration ;  this . host acl = new  atomic reference <  >  ( acl )  ;  this . dd config = dd config ;  this . tracer = tracer ;  this . repose version = repose version ;  this . uri redaction service = uri redaction service ;  local datastore = datastore . get default datastore (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\nodeservice\distributed\servlet\DistributedDatastoreServlet.java,destroy,"@ override public void   (  )  {  super . destroy (  )  ;  log . info ( "" unregistering  datastore:  {  } "" distributed   hash   ring )  ;  datastore service . destroy datastore ( distributed   hash   ring )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\nodeservice\distributed\servlet\DistributedDatastoreServlet.java,do delete,"@ suppress warnings ( ""squid:s1989"" )  @ override protected void   (  http servlet request req  http servlet response resp )  throws io exception  {  try  {  final  cache request cache delete =  cache request . marshall cache request ( req )  ;  local dat"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\nodeservice\distributed\servlet\DistributedDatastoreServlet.java,do get,"@ suppress warnings ( ""squid:s1989"" )  @ override protected void   (  http servlet request req  http servlet response resp )  throws io exception  {  try  {   cache request cache get =  cache request . marshall cache request ( req )  ;  final  serializabl"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\nodeservice\distributed\servlet\DistributedDatastoreServlet.java,do patch,"@ suppress warnings ( ""squid:s1989"" )  private void   (  http servlet request req  http servlet response resp )  throws io exception  {  try  {  final  cache request cache patch =  cache request . marshall cache request with payload ( req )  ;   serializa"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\nodeservice\distributed\servlet\DistributedDatastoreServlet.java,do put,"@ suppress warnings ( ""squid:s1989"" )  @ override protected void   (  http servlet request req  http servlet response resp )  throws io exception  {  try  {  final  cache request cache put =  cache request . marshall cache request with payload ( req )  ; "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\nodeservice\distributed\servlet\DistributedDatastoreServlet.java,do trace,"@ suppress warnings ( ""squid:s1989"" )  @ override protected void   (  http servlet request req  http servlet response resp )  throws  servlet exception  io exception  {  resp . send error ( sc   method   not   allowed )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\nodeservice\distributed\servlet\DistributedDatastoreServlet.java,get cluster view,public  cluster view   (  )  {  return cluster configuration . get cluster view (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\nodeservice\distributed\servlet\DistributedDatastoreServlet.java,handle malformed cache request exception,"private void   (  malformed cache request exception mcre  http servlet response response )  throws io exception  {  log . error ( "" handling  malformed  cache  request"" mcre )  ;  switch  ( mcre . get message (  )  )   {  case object   too   large: response . get writer (  )  . write ( mcre . get message (  )  )  ;  response . set status ( sc   request   entity   too   large )  ;  break ;  case cache   key   invalid: case ttl   header   not   positive: case unexpected   remote   behavior: response . get writer (  )  . write ( mcre . get message (  )  )  ;  response . set status ( sc   bad   request )  ;  break ;  default : response . send error ( sc   internal   server   error )  ;   }   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\nodeservice\distributed\servlet\DistributedDatastoreServlet.java,init,"@ override public void   (  servlet config config )  throws  servlet exception  {  super . init ( config )  ;  log . info ( "" registering datastore:  {  } "" distributed   hash   ring )  ;  boolean use https = dd config . get keystore filename (  )   !  = "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\nodeservice\distributed\servlet\DistributedDatastoreServlet.java,is allowed,"private boolean   (  http servlet request request )  {  boolean allowed = host acl . get (  )  . should allow all (  )  ;  if  (  ! allowed )   {  try  {  final  inet address remote client =  inet address . get by name ( request . get remote host (  )  )  ;  for  (   inet address allowed address : host acl . get (  )  . get allowed hosts (  )  )   {  if  ( remote client . equals ( allowed address )  )   {  allowed = true ;  break ;   }   }   }  catch  (   unknown host exception uhe )   {  log . error ( "" unknown host exception caught while trying to resolve host: ""  +  request . get remote host (  )   +  ""  reason: "" +  uhe . get message (  )  uhe )  ;   }   }  return allowed ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\nodeservice\distributed\servlet\DistributedDatastoreServlet.java,is request valid,private boolean   (  http servlet request req  http servlet response resp )  {  boolean valid = false ;  if  (  ! is allowed ( req )  )   {  resp . set status ( sc   unauthorized )  ;   }  else if  (  !  cache request . is cache request valid ( req )  )   {  resp . set status ( sc   not   found )  ;   }  else  {  valid = true ;   }  return valid ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\nodeservice\distributed\servlet\DistributedDatastoreServlet.java,service,@ override protected void   (  http servlet request req  http servlet response resp )  throws  servlet exception  io exception  {  final  scope scope = start span ( req tracer log  tags . span   kind   server repose version uri redaction service )  ;  try
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\nodeservice\distributed\servlet\DistributedDatastoreServlet.java,update acl,public void   (  datastore access control acl )  {  this . host acl . set ( acl )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\nodeservice\distributed\jetty\DistributedDatastoreLauncherService.java, distributed datastore launcher service,@ inject public   ( @ value (  repose spring properties . node . cluster   id )   string cluster id @ value (  repose spring properties . node . node   id )   string node id @ value (  repose spring properties . core . config   root )   string config root
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\nodeservice\distributed\jetty\DistributedDatastoreLauncherService.java,configuration heartbeat,"private void   (  )  {  synchronized  ( heartbeat lock )   {  if  ( currentdd config . get (  )   !  =  null && current system model . get (  )   !  =  null && is running )   {   distributed datastore configuration dd config = currentdd config . get (  )  ;   system model system model = current system model . get (  )  ;  int dd port =  cluster member determinator . get nodedd port ( dd config cluster id node id )  ;  if  ( dd port  =  =   - 1 )   {  log . error ( "" unable to determine  distributed  datastore port for  {  }  :  {  } "" cluster id node id )  ;  health check service proxy . report issue ( dd   config   issue "" dist -  datastore  configuration  issue: dd port not defined""  severity . broken )  ;  return ;   }  if  ( dd port  <  =  0 || dd port  >  65535 )   {  log . error ( "" distributed  datastore port out of range:  {  } "" dd port )  ;  health check service proxy . report issue ( dd   config   issue "" dist -  datastore  configuration  issue: dd port out of range""  severity . broken )  ;  return ;   }  if  (  ! dd server . is present (  )  )   {   cluster configuration configuration = new  cluster configuration ( request proxy service uuid encoding provider . get instance (  )   thread safe cluster view . single port cluster view ( dd port )  )  ;  dd servlet = new  distributed datastore servlet ( datastore service configuration new  datastore access control (  collections . empty list (  )  false )  dd config tracer repose version uri redaction service )  ;   distributed datastore server server = new  distributed datastore server ( cluster id node id dd servlet dd config )  ;  this . dd server =  optional . of ( server )  ;  try  {  log . info ( "" starting  distributed  datastore listener on port  {  }  "" dd port )  ;  server . run server ( dd port config root )  ;  health check service proxy . resolve issue ( dd   config   issue )  ;   }  catch  (   exception e )   {  log . error ( "" unable to start  distributed  datastore  server instance on  {  } "" dd port e )  ;  health check service proxy . report issue ( dd   config   issue "" dist -  datastore  configuration  issue:  unable to start  distributed  datastore: ""  +  e . get message (  )   severity . broken )  ;   }   }  if  ( dd server . is present (  )  )   {  try  {  int existing port = dd server . get (  )  . get port (  )  ;  log . info ( "" updating existing  distributed  datastore  server instance on  {  }  to  {  } "" existing port dd port )  ;  dd server . get (  )  . run server ( dd port config root )  ;  health check service proxy . resolve issue ( dd   config   issue )  ;   }  catch  (   exception e )   {  log . error ( "" unable to start  distributed  datastore  server instance on  {  } "" dd port e )  ;  health check service proxy . report issue ( dd   config   issue "" dist -  datastore  configuration  issue:  unable to start  distributed  datastore: ""  +  e . get message (  )   severity . broken )  ;   }  dd servlet . get cluster view (  )  . update members (  cluster member determinator . get cluster members ( system model dd config cluster id )  )  ;  dd servlet . update acl (  access list determinator . get access list ( dd config  access list determinator . get cluster members ( system model cluster id )  )  )  ;   }   }   }   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\nodeservice\distributed\jetty\DistributedDatastoreLauncherService.java,configuration updated,@ override public void   (  system model configuration object )  {   system model interrogator smi = new  system model interrogator ( cluster id node id )  ;   optional <  repose cluster >  cluster option = smi . get local cluster ( configuration object )
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\nodeservice\distributed\jetty\DistributedDatastoreLauncherService.java,destroy,"@ pre destroy public void   (  )  {  health check service proxy . deregister (  )  ;  configuration service . unsubscribe from ( ""system - model . cfg . xml"" system model listener )  ;  stop distributed datastore (  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\nodeservice\distributed\jetty\DistributedDatastoreLauncherService.java,initialize,"@ post construct public void   (  )  {  url system modelxsd = get class (  )  . get resource ( "" / meta - inf / schema / system - model / system - model . xsd"" )  ;  configuration service . subscribe to ( ""system - model . cfg . xml"" system modelxsd syste"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\nodeservice\distributed\jetty\DistributedDatastoreLauncherService.java,is initialized,@ override public boolean   (  )  {  return is running ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\nodeservice\distributed\jetty\DistributedDatastoreLauncherService.java,start distributed datastore,"@ suppress warnings ( ""squid:s3398"" )  private void   (  )  {  is running = true ;  dd config listener = new  distributed datastore configuration listener (  )  ;  url xsdurl = get class (  )  . get resource ( "" / meta - inf / schema / dist - datastore / "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\nodeservice\distributed\jetty\DistributedDatastoreLauncherService.java,stop distributed datastore,"private void   (  )  {  is running = false ;  configuration service . unsubscribe from ( ""dist - datastore . cfg . xml"" dd config listener )  ;  synchronized  ( heartbeat lock )   {  if  ( dd server . is present (  )  )   {   distributed datastore server server = dd server . get (  )  ;  log . info ( "" stopping  distributed  datastore listener at port  {  }  "" server . get port (  )  )  ;  try  {  server . stop (  )  ;   }  catch  (   exception e )   {  log . error ( "" unable to stop  distributed  datastore listener at port  {  } "" server . get port (  )  e )  ;   }  dd server =  optional . empty (  )  ;   }   }  health check service proxy . resolve issue ( dd   config   issue )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\nodeservice\remote\RemoteDatastoreLauncherService.java, remote datastore launcher service,@ inject public   ( @ value (  repose spring properties . node . cluster   id )   string cluster id @ value (  repose spring properties . node . node   id )   string node id  datastore service datastore service  configuration service configuration service
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\nodeservice\remote\RemoteDatastoreLauncherService.java,configuration updated,@ override public void   (  remote datastore configuration configuration object )  {   remote datastore configuration current remote datastore configuration = current configuration . get (  )  ;   optional <  remote cluster configuration >  old cluster co
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\nodeservice\remote\RemoteDatastoreLauncherService.java,destroy,@ pre destroy public void   (  )  {  health check service proxy . deregister (  )  ;  configuration service . unsubscribe from ( system   config   name system model listener )  ;  destroy remote datastore (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\nodeservice\remote\RemoteDatastoreLauncherService.java,destroy remote datastore,private void   (  )  {  is running = false ;  datastore service . destroy datastore ( remote   datastore   name )  ;  configuration service . unsubscribe from ( default   config   name configuration listener )  ;  health check service proxy . resolve issue ( remote   datastore   service   config   issue )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\nodeservice\remote\RemoteDatastoreLauncherService.java,init,@ post construct public void   (  )  {  url system modelxsd = get class (  )  . get resource ( system   config   schema )  ;  configuration service . subscribe to ( system   config   name system modelxsd system model listener  system model . class )  ;   
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\nodeservice\remote\RemoteDatastoreLauncherService.java,init remote datastore,"private void   (  )  {  health check service proxy . report issue ( remote   datastore   service   config   issue "" remote  datastore  service  configuration  error""  severity . broken )  ;  url xsdurl = get class (  )  . get resource ( default   config   schema )  ;  configuration service . subscribe to ( default   config   name xsdurl configuration listener  remote datastore configuration . class )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\nodeservice\remote\RemoteDatastoreLauncherService.java,is initialized,@ override public boolean   (  )  {  return initialized ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\nodeservice\distributed\jetty\DistributedDatastoreServer.java, distributed datastore server,public   (  string cluster id  string node id  distributed datastore servlet dd servlet  distributed datastore configuration dd config )  {  this . cluster id = cluster id ;  this . node id = node id ;  this . dd servlet = dd servlet ;  this . dd config = dd config ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\nodeservice\distributed\jetty\DistributedDatastoreServer.java,get port,public int   (  )  {  return port ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\nodeservice\distributed\jetty\DistributedDatastoreServer.java,run server,"public void   ( int port  string config root )  throws  exception  {  if  ( this . port  !  =  port )   {  if  ( server  !  =  null )   {  server . stop (  )  ;   }  server = new  server (  )  ;   server connector conn ;  if  ( dd config . get keystore filename (  )   !  =  null )   {   ssl context factory cf = new  ssl context factory (  )  ;  cf . set key store path (  file utilities . guarded absolute file ( config root dd config . get keystore filename (  )  )  . get absolute path (  )  )  ;  cf . set key store password ( dd config . get keystore password (  )  )  ;  cf . set key manager password ( dd config . get key password (  )  )  ;  cf . set need client auth ( true )  ;  if  ( dd config . get truststore filename (  )   !  =  null )   {  cf . set trust store path (  file utilities . guarded absolute file ( config root dd config . get truststore filename (  )  )  . get absolute path (  )  )  ;  cf . set trust store password ( dd config . get truststore password (  )  )  ;   }  conn = new  server connector ( server cf )  ;   }  else  {  conn = new  server connector ( server )  ;   }  conn . get connection factory (  http connection factory . class )  . get http configuration (  )  . set send server version ( false )  ;  conn . set port ( port )  ;  this . port = port ;  server . add connector ( conn )  ;   servlet context handler root context = new  servlet context handler ( server "" / "" )  ;   servlet holder holder = new  servlet holder ( dd servlet )  ;  holder . set name ( "" dist datastore servlet - ""  +  cluster id  +  "" - "" +  node id )  ;  root context . add servlet ( holder "" / *"" )  ;  server . set handler ( root context )  ;  server . set stop at shutdown ( true )  ;  server . start (  )  ;   }   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\nodeservice\distributed\jetty\DistributedDatastoreServer.java,stop,public void   (  )  throws  exception  {  if  ( server  !  =  null && server . is started (  )  )   {  server . stop (  )  ;   }   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\AbstractHashRingDatastoreTest.java, testing hash ring datastore,public   (  cluster view cluster view  string datastore prefix  datastore local datastore  message digest factory hash provider  encoding provider encoding provider )  {  super ( null cluster view datastore prefix local datastore hash provider encoding provider null false )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\AbstractHashRingDatastoreTest.java,get http port list,private  list <  integer >    ( int port )  {   list <  integer >  ports = new  array list <  >  (  )  ;  ports . add ( port )  ;  return ports ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\AbstractHashRingDatastoreTest.java,should select correct target,"@ test public void   (  )  throws  exception  {  datastore = new  testing hash ring datastore ( cluster vew """" mocked datastore md5 message digest factory . get instance (  )  uuid encoding provider . get instance (  )  )  ;  final byte[] id = new byte[] "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\AbstractHashRingDatastoreTest.java,should use local target,"@ test public void   (  )  throws  exception  {  datastore = new  testing hash ring datastore ( single node cluster view """" mocked datastore md5 message digest factory . get instance (  )  uuid encoding provider . get instance (  )  )  ;  final byte[] id "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\AbstractHashRingDatastoreTest.java,stand up,@ before public void   (  )  throws  exception  {  addresses = new  inet address[] {  inet address . get by address ( new byte[] { 10 1 1 11 }  )   inet address . get by address ( new byte[] { 10 1 1 12 }  )   inet address . get by address ( new byte[] { 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\CacheRequestTest.java,mock request with method,"public  http servlet request   (  string cache key  string method  string remote host )  {  final  http servlet request mocked request = mock (  http servlet request . class )  ;  when ( mocked request . get requesturi (  )  )  . then return (  cache request . cache   uri   path  +  cache key )  ;  when ( mocked request . get method (  )  )  . then return ( method )  ;  when ( mocked request . get local addr (  )  )  . then return ( ""localhost"" )  ;  when ( mocked request . get local port (  )  )  . then return ( 2101 )  ;  when ( mocked request . get remote host (  )  )  . then return ( remote host )  ;  when ( mocked request . get header (  datastore header . remote   behavior )  )  . then return ( ""allow   forwarding"" )  ;  return mocked request ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\CacheRequestTest.java,should build http request with key,@ test public void   (  )  throws  unknown host exception  {  final  inet socket address addr = new  inet socket address (  inet address . get by address ( new byte[] { 127 0 0 1 }  )  1000 )  ;  final  string url for =  cache request . url for ( addr res
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\CacheRequestTest.java,should build http request without key,@ test public void   (  )  throws  unknown host exception  {  final  inet socket address addr = new  inet socket address (  inet address . get by address ( new byte[] { 127 0 0 1 }  )  1000 )  ;  final  string url for =  cache request . url for ( addr fal
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\CacheRequestTest.java,should build https request with key,@ test public void   (  )  throws  unknown host exception  {  final  inet socket address addr = new  inet socket address (  inet address . get by address ( new byte[] { 127 0 0 1 }  )  1000 )  ;  final  string url for =  cache request . url for ( addr res
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\CacheRequestTest.java,should build https request without key,@ test public void   (  )  throws  unknown host exception  {  final  inet socket address addr = new  inet socket address (  inet address . get by address ( new byte[] { 127 0 0 1 }  )  1000 )  ;  final  string url for =  cache request . url for ( addr tru
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\CacheRequestTest.java,should ignore case for remote behavior directive,"@ test public void   (  )  {  final  http servlet request request = mock request with method ( ""get"" ""localhost"" )  ;  when ( request . get header (  datastore header . remote   behavior )  )  . then return ( ""di sall ow   forwa rding"" )  ;  final  cache "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\CacheRequestTest.java,should marshall get requests,@ test public void   (  )  throws  unknown host exception  {  final  inet socket address addr = new  inet socket address (  inet address . get by address ( new byte[] { 127 0 0 1 }  )  1000 )  ;  final  string url for =  cache request . url for ( addr res
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\CacheRequestTest.java,should marshall request,"@ test public void   (  )  throws io exception  {  final  http servlet request request = mock request with method ( ""put"" ""localhost"" )  ;  when ( request . get header (  extended http header . x   ttl )  )  . then return ( ""5"" )  ;  when ( request . get "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\CacheRequestTest.java,should not match if request path doesnt start with cacheuri,"@ test public void   (  )  {  when ( mock request . get requesturi (  )  )  . then return ( "" / stuff / ""  +   cache request . cache   uri   path  +  "" / foobar"" )  ;  assert false (  cache request . is cache request valid ( mock request )  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\CacheRequestTest.java,should pass if request path starts with cacheuri,"@ test public void   (  )  {  when ( mock request . get requesturi (  )  )  . then return (  cache request . cache   uri   path  +  "" / foobar"" )  ;  assert true (  cache request . is cache request valid ( mock request )  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\CacheRequestTest.java,should reject bad cache key uri,"@ test ( expected =  malformed cache request exception . class )  public void   (  )  {  final  http servlet request request = mock request with method ( ""fail"" ""get"" ""localhost"" )  ;   cache request . marshall cache request ( request )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\CacheRequestTest.java,should reject bad remote behavior directives,"@ test ( expected =  malformed cache request exception . class )  public void   (  )  {  final  http servlet request request = mock request with method ( ""get"" ""localhost"" )  ;  when ( request . get header (  datastore header . remote   behavior )  )  . t"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\CacheRequestTest.java,should reject badttl,"@ test ( expected =  malformed cache request exception . class )  public void   (  )  throws io exception  {  final  http servlet request request = mock request with method ( ""put"" ""localhost"" )  ;  when ( request . get header (  extended http header . x "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\CacheRequestTest.java,should reject blank cache key uri,"@ test ( expected =  malformed cache request exception . class )  public void   (  )  {  final  http servlet request request = mock request with method ( """" ""get"" ""localhost"" )  ;   cache request . marshall cache request ( request )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\CacheRequestTest.java,should reject cache objects that are too large,"@ test ( expected =  malformed cache request exception . class )  public void   (  )  throws io exception  {  final  http servlet request request = mock request with method ( ""put"" ""localhost"" )  ;  when ( request . get input stream (  )  )  . then return"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\CacheRequestTest.java,should reject negativettl,"@ test ( expected =  malformed cache request exception . class )  public void   (  )  throws io exception  {  final  http servlet request request = mock request with method ( ""put"" ""localhost"" )  ;  when ( request . get header (  extended http header . x "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\CacheRequestTest.java,should use default remote behavior directive when one is not set in the request,"@ test public void   (  )  {  final  http servlet request request = mock request with method ( ""get"" ""localhost"" )  ;  when ( request . get header (  datastore header . remote   behavior )  )  . then return ( null )  ;  final  cache request cache request "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\CacheRequestTest.java,should use defaultttl when not specified,"@ test public void   (  )  throws io exception  {  final  http servlet request request = mock request with method ( ""put"" ""localhost"" )  ;  when ( request . get input stream (  )  )  . then return ( new  servlet input stream wrapper ( new  byte array inpu"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\ClusterMemberTest.java,should allow retry after member cooldown,"@ test public void   (  )  {  final  inet socket address address = mock (  inet socket address . class )  ;  final  cluster member cluster member = new  cluster member ( address 1 )  ;  cluster member . set offline (  )  ;  sleep ( 5 )  ;  assert true ( """
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\ClusterMemberTest.java,should mark member offline,"@ test public void   (  )  {  final  inet socket address address = mock (  inet socket address . class )  ;  final  cluster member cluster member = new  cluster member ( address 10 )  ;  assert false ( ""a cluster member must start in an online state"" clus"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\ClusterMemberTest.java,should not allow retry before member cooldown,"@ test public void   (  )  {  final  inet socket address address = mock (  inet socket address . class )  ;  final  cluster member cluster member = new  cluster member ( address 1000 )  ;  cluster member . set offline (  )  ;  assert false ( ""a cluster me"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\ClusterMemberTest.java,should online member after member completes all validation passes,@ test public void   (  )  {  final  inet socket address address = mock (  inet socket address . class )  ;  final  cluster member cluster member = new  cluster member ( 1 address 1 )  ;  cluster member . set offline (  )  ;  sleep ( 5 )  ;  assert true (
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\ClusterMemberTest.java,should reset validation passes,@ test public void   (  )  {  final  inet socket address address = mock (  inet socket address . class )  ;  final  cluster member cluster member = new  cluster member ( 1 address 1 )  ;  cluster member . set offline (  )  ;  sleep ( 5 )  ;  assert true (
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\ClusterMemberTest.java,sleep,"public static void   ( int miliseconds )  {  try  {   thread . sleep ( miliseconds )  ;   }  catch  (   interrupted exception ie )   {  fail ( "" thread was interrupted  -  unable to complete test . "" )  ;   }   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\command\DeleteTest.java,should return false on failure,"@ test public void   (  )  throws  exception  {  final  delete delete command = new  delete ( ""object - key"" new  inet socket address (  inet address . get by address ( new byte[] { 127 0 0 1 }  )  1000 )  null false )  ;  final  service client response r"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\command\DeleteTest.java,should return true on success,"@ test public void   (  )  throws  exception  {  final  delete delete command = new  delete ( ""object - key"" new  inet socket address (  inet address . get by address ( new byte[] { 127 0 0 1 }  )  1000 )  null false )  ;  final  service client response r"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\command\DeleteTest.java,should target correct deletion url,"@ test public void   (  )  throws  unknown host exception  {  final  delete delete command = new  delete ( ""object - key"" new  inet socket address (  inet address . get by address ( new byte[] { 127 0 0 1 }  )  1000 )  null false )  ;  assert equals ( "" d"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\command\GetTest.java,should return true on success,"@ test public void   (  )  throws  exception  {  final  get get command = new  get ( ""object - key"" new  inet socket address (  inet address . get by address ( new byte[] { 127 0 0 1 }  )  1000 )  null false )  ;  final  service client response response ="
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\command\GetTest.java,should target correct deletion url,"@ test public void   (  )  throws  unknown host exception  {  final  get get command = new  get ( ""object - key"" new  inet socket address (  inet address . get by address ( new byte[] { 127 0 0 1 }  )  1000 )  null false )  ;   assert . assert equals ( "" "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\command\GetTest.java,should throw exeption on unauthorized,"@ test ( expected =  datastore operation exception . class )  public void   (  )  throws  exception  {  final  get get command = new  get ( ""object - key"" new  inet socket address (  inet address . get by address ( new byte[] { 127 0 0 1 }  )  1000 )  nul"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\command\PatchTest.java,get url   should target correct patch url,"@ test public void   (  )  throws  unknown host exception  {  final int ttl = 30 ;  final  string key = ""some key"" ;  final  patch patch command = new  patch (  time unit . minutes new  test patch (  )  ttl key new  inet socket address (  inet address . g"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\command\PatchTest.java,new from patch,"@ override public  string   (  )  {  throw new  unsupported operation exception ( ""org . openrepose . services . datastore . impl . distributed . remote . command .  patch test .  test patch . new from patch hasn't been written yet"" )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\command\PatchTest.java,process response   should return patched value on success,"@ test public void   (  )  throws  exception  {  final int ttl = 30 ;  final  patch patch command = new  patch (  time unit . minutes new  test patch (  )  ttl ""somekey"" new  inet socket address (  inet address . get by address ( new byte[] { 127 0 0 1 } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\command\PatchTest.java,process response   should throw exeption on unauthorized,"@ test ( expected =  datastore operation exception . class )  public void   (  )  throws  exception  {  final int ttl = 30 ;  final  patch patch command = new  patch (  time unit . minutes new  test patch (  )  ttl ""somekey"" new  inet socket address (  in"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\command\PutTest.java,should return true on success,"@ test public void   (  )  throws  exception  {  final  string put data = "" put data"" ;  final int ttl = 30 ;  final  put put command = new  put (  time unit . minutes put data ttl ""somekey"" new  inet socket address (  inet address . get by address ( new "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\command\PutTest.java,should target correct put url,"@ test public void   (  )  throws  unknown host exception  {  final  string put data = "" put data"" ;  final int ttl = 30 ;  final  string key = ""some key"" ;  final  put put command = new  put (  time unit . minutes put data ttl key new  inet socket addres"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\command\PutTest.java,should throw exeption on unauthorized,"@ test ( expected =  datastore operation exception . class )  public void   (  )  throws  exception  {  final  string put data = "" put data"" ;  final int ttl = 30 ;  final  put put command = new  put (  time unit . minutes put data ttl ""somekey"" new  inet"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\RemoteCommandExecutorTest.java, testable remote command,private   ( boolean throwsio exception )  {  this . throwsio exception = throwsio exception ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\RemoteCommandExecutorTest.java,execute,@ override public  service client response   (  request proxy service proxy service  remote behavior remote behavior )  {  return mock (  service client response . class )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\RemoteCommandExecutorTest.java,handle response,"@ override public  object   (  service client response http response )  throws io exception  {  if  ( exception  !  =  null )   {  throw exception ;   }  if  ( throwsio exception )   {  throw new io exception ( ""foo"" new  illegal argument exception (  )  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\RemoteCommandExecutorTest.java,setup,@ before public void   (  )  throws  exception  {  mock request proxy service = mock (  request proxy service . class )  ;  executor = new  remote command executor ( mock request proxy service )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\RemoteCommandExecutorTest.java,should catch proxy request exceptions,"@ test ( expected =  remote connection exception . class )  public void   (  )  {  executor . execute ( new  testable remote command ( new  proxy request exception ( ""foo"" new  illegal argument exception (  )  )  )   remote behavior . allow   forwarding )"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\RemoteCommandExecutorTest.java,should perform remote command,"@ test public void   (  )  {  final  object result = executor . execute ( new  testable remote command (  )   remote behavior . allow   forwarding )  ;  assert equals ( "" executor must return the remote command's response""  boolean . true result )  ;   } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\RemoteCommandExecutorTest.java,should throw datastore operation exceptions forio exceptions,@ test ( expected =  datastore operation exception . class )  public void   (  )  {  executor . execute ( new  testable remote command ( true )   remote behavior . allow   forwarding )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\ThreadSafeClusterViewTest.java,set up,@ before public void   (  )  throws  exception  {  service ports = mock (  list . class )  ;  i = 1 ;  inet socket address = new  inet socket address ( i )  ;  cluster member = new  cluster member ( inet socket address i )  ;  cluster members = new  linke
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\ThreadSafeClusterViewTest.java,should create thread safe cluster view with list of cluster members and service ports,@ test public void   (  )  {  thread safe cluster view = new  thread safe cluster view ( cluster members service ports )  ;  assert not null ( thread safe cluster view )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\ThreadSafeClusterViewTest.java,should create thread safe cluster view with network interface provider and list of cluster members and service ports,@ test public void   (  )  {  thread safe cluster view = new  thread safe cluster view ( network interface provider cluster members service ports )  ;  assert not null ( thread safe cluster view )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\ThreadSafeClusterViewTest.java,should create thread safe cluster view with service ports,@ test public void   (  )  {  thread safe cluster view = new  thread safe cluster view ( service ports )  ;  assert not null ( thread safe cluster view )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\ThreadSafeClusterViewTest.java,should report damaged members,@ test public void   (  )  {  thread safe cluster view = new  thread safe cluster view ( network interface provider cluster members service ports )  ;  assert false ( thread safe cluster view . has damaged members (  )  )  ;  cluster member . set offline 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\ThreadSafeClusterViewTest.java,should return members,@ test public void   (  )  {  assert that ( thread safe cluster view . members (  )  is ( instance of (  inet socket address[] . class )  )  )  ;  assert equals ( thread safe cluster view . members (  ) [0] cluster member . get member address (  )  )  ;  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\ThreadSafeClusterViewTest.java,should return thread safe cluster view when copied,@ test public void   (  )  {  assert that ( thread safe cluster view . copy (  )  is ( instance of (  thread safe cluster view . class )  )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\HashRingDatastoreTest.java,get name   returns expected name,@ test public void   (  )  throws  exception  {  assert that ( hash ring datastore . get name (  )  equal to (  hash ring datastore . datastore   name )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\HashRingDatastoreTest.java,should catchdo exception from is remote target,@ test public void   (  )  throws  exception  {  when ( cluster view . members (  )  )  . then return ( new  inet socket address[] { inet socket address }  new  inet socket address[] {  }  )  ;  when ( local datastore . get ( any (  string . class )  )  )
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\HashRingDatastoreTest.java,should catchdo exception from perform remote,@ test public void   (  )  throws  exception  {  when ( cluster view . members (  )  )  . then return ( new  inet socket address[] { inet socket address }  new  inet socket address[] {  }  )  ;  when ( local datastore . get ( any (  string . class )  )  )
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\HashRingDatastoreTest.java,should catchrc exception from perform remote,@ test public void   (  )  throws  exception  {  when ( cluster view . members (  )  )  . then return ( new  inet socket address[] { inet socket address }  new  inet socket address[] {  }  )  ;  when ( local datastore . get ( any (  string . class )  )  )
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\HashRingDatastoreTest.java,should patch existing element,"@ test public void   (  )  throws  exception  {   string key = ""key - one"" ;  byte[] id = new byte[] { 1 2 3 }  ;   string value = ""1  2  3"" ;   string new value = ""  4  5"" ;   string value .  patch second patch = new  string value .  patch ( new value ) "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\HashRingDatastoreTest.java,should patch new element,"@ test public void   (  )  throws  exception  {   string key = ""key - one"" ;  byte[] id = new byte[] { 1 2 3 }  ;   string value = ""1  2  3"" ;  when ( cluster view . members (  )  )  . then return ( new  inet socket address[] { inet socket address }  new "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\HashRingDatastoreTest.java,stand up,@ before public void   (  )  throws  exception  {  inet socket address = new  inet socket address (  inet address . get by address ( new byte[] { 10 1 1 11 }  )  2200 )  ;  local datastore = mock (  datastore . class )  ;  cluster view = mock (  cluster v
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\nodeservice\distributed\cluster\utils\AccessListDeterminatorTest.java,set up,@ before public void   (  )  {  filters = new  array list <  filter >  (  )  ;  filter list = new  filter list (  )  ;  filter list . get filter (  )  . add all ( filters )  ;  node1 = new  node (  )  ;  node1 . set http port ( 8888 )  ;  node1 . set host
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\nodeservice\distributed\cluster\utils\AccessListDeterminatorTest.java,should get access list,"@ test public void   (  )  {   list <  inet address >  cluster members =  access list determinator . get cluster members ( sys config ""repose cluster"" )  ;   datastore access control allowed hosts =  access list determinator . get access list ( dd config "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\nodeservice\distributed\cluster\utils\AccessListDeterminatorTest.java,should get cluster members,"@ test public void   (  )  {   list <  inet address >  cluster members =  access list determinator . get cluster members ( sys config ""repose cluster"" )  ;  assert that ( "" should have two cluster members"" cluster members . size (  )  equal to ( 2 )  )  ;"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\ehcache\EHCacheDatastoreTest.java,get name   get name,"@ test public void   (  )  throws  exception  {  assert that ( datastore . get name (  )  equal to ( ""local / default"" )  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\ehcache\EHCacheDatastoreTest.java,get   gets null element,"@ test public void   (  )  {  final  string key = ""doesn't exist"" ;   serializable element = datastore . get ( key )  ;  assert null ( element )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\ehcache\EHCacheDatastoreTest.java,patch   should raise ttl   if higher,"@ test public void   (  )  throws  exception  {   ehcache cache = mock (  ehcache . class )  ;   element returned element = new  element ( ""key"" new  string value ( """" )  )  ;  when ( cache . put if absent ( any (  element . class )  )  )  . then return ("
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\ehcache\EHCacheDatastoreTest.java,patch   should return updated value,"@ test public void   (  )  throws  exception  {   string key = ""my element"" ;   string value = ""1  2  3"" ;   string new value = ""  4"" ;  datastore . patch ( key new  string value .  patch ( value )  5 days )  ;   string value element =  (  string value ) "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\ehcache\EHCacheDatastoreTest.java,patch   should set ttl,@ test public void   (  )  throws  exception  {   ehcache cache = mock (  ehcache . class )  ;  eh cache datastore datastore = new eh cache datastore ( cache )  ;   argument captor <  element >  captor =  argument captor . for class (  element . class )  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\ehcache\EHCacheDatastoreTest.java,patch   ttl should be reset,"@ test public void   (  )  throws  exception  {   ehcache cache = mock (  ehcache . class )  ;   element returned element = new  element ( ""key"" new  string value ( """" )  )  ;  when ( cache . put if absent ( any (  element . class )  )  )  . then return ("
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\ehcache\EHCacheDatastoreTest.java,put   gets existing element,"@ test public void   (  )  {  final  string key = ""my element"" ;   string value = ""1  2  3"" ;  datastore . put ( key value )  ;   serializable element = datastore . get ( key )  ;  assert not null ( element )  ;  assert that (  (  string ) element equal t"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\ehcache\EHCacheDatastoreTest.java,put   removes existing element pastttl,"@ test public void   (  )  throws  exception  {  final  string key = ""my other element"" ;   string value = ""1  2  3"" ;  int ttl = 1 ;  datastore . put ( key value ttl seconds )  ;   serializable element = datastore . get ( key )  ;  assert not null ( elem"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\ehcache\EHCacheDatastoreTest.java,remove all   removes all entries,"@ test public void   (  )  throws  exception  {   string key1 = ""a key"" ;   string key2 = ""a different key"" ;   string value = ""some value"" ;  datastore . put ( key1 value )  ;  datastore . put ( key2 value )  ;   serializable element = datastore . get ( "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\ehcache\EHCacheDatastoreTest.java,remove   removes existing element,"@ test public void   (  )  {  final  string key = ""my other element"" ;   string value = ""1  2  3"" ;  datastore . put ( key value )  ;  datastore . remove ( key )  ;   serializable element = datastore . get ( key )  ;  assert null ( element )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\ehcache\EHCacheDatastoreTest.java,set up,@ before public void   (  )  {  cache = new  cache ( uuid . randomuuid (  )  . to string (  )  20000 false false 5 2 )  ;  cache manager . add cache ( cache )  ;  datastore = new eh cache datastore ( cache )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\ehcache\EHCacheDatastoreTest.java,set up class,"@ before class public static void   (  )  {   configuration default configuration = new  configuration (  )  ;  default configuration . set name ( "" test cache manager"" )  ;  default configuration . set default cache configuration ( new  cache configurati"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\ehcache\EHCacheDatastoreTest.java,should patch existing element,"@ test public void   (  )  {   string key = ""my element"" ;   string value = ""1  2  3"" ;   string new value = ""  4"" ;  datastore . patch ( key new  string value .  patch ( value )  )  ;  datastore . patch ( key new  string value .  patch ( new value )  )  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\ehcache\EHCacheDatastoreTest.java,should patch existing element withttl,"@ test public void   (  )  {   string key = ""my element"" ;   string value = ""1  2  3"" ;   string new value = ""  4"" ;  datastore . patch ( key new  string value .  patch ( value )  5 days )  ;  datastore . patch ( key new  string value .  patch ( new value"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\ehcache\EHCacheDatastoreTest.java,should patch new element,"@ test public void   (  )  {   string key = ""my element"" ;   string value = ""1  2  3"" ;  datastore . patch ( key new  string value .  patch ( value )  )  ;   string value element =  (  string value ) datastore . get ( key )  ;  assert not null ( element )"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\ehcache\EHCacheDatastoreTest.java,should patch new element withttl,"@ test public void   (  )  {   string key = ""my element"" ;   string value = ""1  2  3"" ;  datastore . patch ( key new  string value .  patch ( value )  5 days )  ;   string value element =  (  string value ) datastore . get ( key )  ;  assert not null ( el"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\ehcache\EHCacheDatastoreTest.java,tear down class,@ after class public static void   (  )  {  cache manager . removal all (  )  ;  cache manager . shutdown (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\nodeservice\distributed\cluster\utils\ClusterMemberDeterminatorTest.java,set up,@ before public void   (  )  {  filters = new  array list <  filter >  (  )  ;  filter list = new  filter list (  )  ;  filter list . get filter (  )  . add all ( filters )  ;  node1 = new  node (  )  ;  node1 . set http port ( 8888 )  ;  node1 . set host
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\nodeservice\distributed\cluster\utils\ClusterMemberDeterminatorTest.java,when determining current cluster,"@ test public void   (  )  {   repose cluster get cluster =  cluster member determinator . get current cluster ( sys config . get repose cluster (  )  ""repose cluster"" )  ;  assert that ( ""should retrieve cluster"" get cluster . get id (  )  equal to ( ""re"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\nodeservice\distributed\cluster\utils\ClusterMemberDeterminatorTest.java,when retrieving cluster members,"@ test public void   (  )  {   list <  inet socket address >  cluster view =  cluster member determinator . get cluster members ( sys config dd config ""repose cluster"" )  ;  assert that ( "" cluster has 2 repose nodes"" cluster view . size (  )  equal to ( "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\nodeservice\distributed\cluster\utils\ClusterMemberDeterminatorTest.java,when retrievingdd port,"@ test public void   (  )  {  int dd port =  cluster member determinator . get nodedd port ( dd config ""repose cluster"" ""node1"" )  ;  int dd port2 =  cluster member determinator . get nodedd port ( dd config ""repose cluster"" ""node2"" )  ;  assert that ( "" "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\nodeservice\distributed\cluster\utils\ClusterMemberDeterminatorTest.java,when retrieving non existant cluster,"@ test public void   (  )  {   repose cluster get cluster =  cluster member determinator . get current cluster ( sys config . get repose cluster (  )  ""non existant cluster"" )  ;  assert null ( "" no cluster retrieved"" get cluster )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\health-check-service\health-check-service-api\src\main\java\org\openrepose\core\services\healthcheck\HealthCheckReport.java, health check report,public   (  string message  severity level )  {  this . message = message ;  this . level = level ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\health-check-service\health-check-service-api\src\main\java\org\openrepose\core\services\healthcheck\HealthCheckReport.java,get level,public  severity   (  )  {  return level ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\health-check-service\health-check-service-api\src\main\java\org\openrepose\core\services\healthcheck\HealthCheckReport.java,get message,public  string   (  )  {  return message ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\health-check-service\health-check-service-impl\src\main\java\org\openrepose\core\services\healthcheck\impl\HealthCheckServiceImpl.java,deregister,@ override public void   (  )  {   health check service impl . this . reports . remove ( this )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\health-check-service\health-check-service-impl\src\main\java\org\openrepose\core\services\healthcheck\impl\HealthCheckServiceImpl.java,get diagnosis,@ override public  health check report   (  string issue name )  {  return  health check service impl . this . reports . get ( this )  . get ( issue name )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\health-check-service\health-check-service-impl\src\main\java\org\openrepose\core\services\healthcheck\impl\HealthCheckServiceImpl.java,get report ids,@ override public  set <  string >    (  )  {  return  health check service impl . this . reports . get ( this )  . key set (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\health-check-service\health-check-service-impl\src\main\java\org\openrepose\core\services\healthcheck\impl\HealthCheckServiceImpl.java,get reports,@ override public  map <  string  health check report >    (  )  {  return  health check service impl . this . reports . get ( this )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\health-check-service\health-check-service-impl\src\main\java\org\openrepose\core\services\healthcheck\impl\HealthCheckServiceImpl.java,is healthy,@ override public boolean   (  )  {  for  (   map .  entry <  health check service proxy  map <  string  health check report >  >  string map entry : reports . entry set (  )  )   {  for  (   map .  entry <  string  health check report >  entry : string m
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\health-check-service\health-check-service-impl\src\main\java\org\openrepose\core\services\healthcheck\impl\HealthCheckServiceImpl.java,register,@ override public  health check service proxy   (  )  {   health check service proxy proxy = new  health check service proxy impl (  )  ;  reports . put ( proxy new  hash map <  >  (  )  )  ;  return proxy ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\health-check-service\health-check-service-impl\src\main\java\org\openrepose\core\services\healthcheck\impl\HealthCheckServiceImpl.java,report issue,"@ override public void   (  string issue name  string message  severity severity )  {  log . info ( "" health check service . report issue: ""  +  issue name  +  "" reported by "" +   system . identity hash code ( this )  )  ;   health check service impl . th"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\health-check-service\health-check-service-impl\src\main\java\org\openrepose\core\services\healthcheck\impl\HealthCheckServiceImpl.java,resolve issue,@ override public void   (  string issue name )  {   iterator <  string >  itr = reports . get ( this )  . key set (  )  . iterator (  )  ;  while  ( itr . has next (  )  )   {   string cur = itr . next (  )  ;  if  ( cur . equals ( issue name )  )   {  l
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\http-client-service\http-client-service-impl\src\main\java\org\openrepose\core\services\httpclient\impl\ClientDecommissionManager.java, client decommission manager,public   (  http client user manager user manager )  {  this . decommissioner = new  client decommissioner ( user manager )  ;  this . decomm thread = new  thread ( decommissioner )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\http-client-service\http-client-service-impl\src\main\java\org\openrepose\core\services\httpclient\impl\ClientDecommissionManager.java,decommission client,public void   (  http client client )  {  decommissioner . add client to be decommissioned ( client )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\http-client-service\http-client-service-impl\src\main\java\org\openrepose\core\services\httpclient\impl\ClientDecommissionManager.java,start thread,"public void   (  )  {  log . debug ( "" starting  http client  decommissioner  thread"" )  ;  decomm thread . start (  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\http-client-service\http-client-service-impl\src\main\java\org\openrepose\core\services\httpclient\impl\ClientDecommissionManager.java,stop thread,"public void   (  )  {  log . info ( "" shutting down  http client  service  decommissioner"" )  ;  decommissioner . stop (  )  ;  decomm thread . interrupt (  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\http-client-service\http-client-service-impl\src\main\java\org\openrepose\core\services\httpclient\impl\ClientDecommissioner.java, client decommissioner,public   (  http client user manager user manager )  {  client list = new  array list <  >  (  )  ;  list lock = new  object (  )  ;  done = false ;  this . user manager = user manager ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\http-client-service\http-client-service-impl\src\main\java\org\openrepose\core\services\httpclient\impl\ClientDecommissioner.java,add client to be decommissioned,public void   (  http client client )  {  synchronized  ( list lock )   {   pooling client connection manager conn man =  (  pooling client connection manager ) client . get connection manager (  )  ;  conn man . close expired connections (  )  ;  conn man . set max total ( 1 )  ;  conn man . set default max per route ( 1 )  ;  client list . add ( client )  ;   }   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\http-client-service\http-client-service-impl\src\main\java\org\openrepose\core\services\httpclient\impl\ClientDecommissioner.java,run,"@ override @ suppress warnings ( ""squid:s2142"" )  public void   (  )  {  while  (  ! this . done )   {  synchronized  ( list lock )   {  log . trace ( "" iterating through decommissioned clients .  .  . "" )  ;   list <  http client >  clients to remove = n"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\http-client-service\http-client-service-impl\src\main\java\org\openrepose\core\services\httpclient\impl\ClientDecommissioner.java,stop,public void   (  )  {  this . done = true ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\http-client-service\http-client-service-impl\src\main\java\org\openrepose\core\services\httpclient\impl\ConnectionKeepAliveWithTimeoutStrategy.java, connection keep alive with timeout strategy,public   ( int timeout )  {  this . timeout = timeout ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\http-client-service\http-client-service-impl\src\main\java\org\openrepose\core\services\httpclient\impl\ConnectionKeepAliveWithTimeoutStrategy.java,get keep alive duration,@ override public long   (  http response response  http context context )  {  long duration = super . get keep alive duration ( response context )  ;  if  ( duration  >  0 )   {  return duration ;   }  return timeout  =  =  0  ?   - 1 : timeout ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\http-client-service\http-client-service-impl\src\main\java\org\openrepose\core\services\httpclient\impl\HttpClientContainerImpl.java, http client container impl,public   (  http client http client  string client instance id  string user id )  {  this . http client = http client ;  this . client instance id = client instance id ;  this . user id = user id ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\http-client-service\http-client-service-impl\src\main\java\org\openrepose\core\services\httpclient\impl\HttpClientContainerImpl.java,get client instance id,@ override public  string   (  )  {  return client instance id ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\http-client-service\http-client-service-impl\src\main\java\org\openrepose\core\services\httpclient\impl\HttpClientContainerImpl.java,get http client,@ override public  http client   (  )  {  return http client ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\http-client-service\http-client-service-impl\src\main\java\org\openrepose\core\services\httpclient\impl\HttpClientContainerImpl.java,get user id,@ override public  string   (  )  {  return user id ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\http-client-service\http-client-service-impl\src\main\java\org\openrepose\core\services\httpclient\impl\HttpClientUserManager.java,add user," string   (  string client instance id )  {  if  ( client instance id  =  =  null || client instance id . is empty (  )  )   {  throw new  illegal argument exception ( "" no client id provided ! "" )  ;   }   string user id = uuid . randomuuid (  )  . to string (  )  ;  final  list <  string >  users ;  if  ( registered client users . contains key ( client instance id )  )   {  users = registered client users . get ( client instance id )  ;   }  else  {  users =  collections . synchronized list ( new  array list <  string >  (  )  )  ;   }  users . add ( user id )  ;  registered client users . put ( client instance id users )  ;  return user id ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\http-client-service\http-client-service-impl\src\main\java\org\openrepose\core\services\httpclient\impl\HttpClientUserManager.java,has users,public boolean   (  string client instance id )  {  if  (  ! registered client users . contains key ( client instance id )  || registered client users . get ( client instance id )  . is empty (  )  )   {  return false ;   }  return true ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\http-client-service\http-client-service-impl\src\main\java\org\openrepose\core\services\httpclient\impl\HttpClientUserManager.java,remove user,"void   (  string client instance id  string user id )  {  if  ( client instance id  =  =  null || client instance id . is empty (  )  || user id  =  =  null || user id . is empty (  )  )   {  throw new  illegal argument exception ( "" no client and / or user id provided ! "" )  ;   }  if  ( registered client users . contains key ( client instance id )  )   {  registered client users . get ( client instance id )  . remove ( user id )  ;   }   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\http-client-service\http-client-service-impl\src\main\java\org\openrepose\core\services\httpclient\impl\HttpConnectionPoolProvider.java,create headers,private static  collection <  header >    (  list <  header type >  config headers )  {   collection <  header >  headers = new  array list <  >  (  )  ;  for  (   header type config header : config headers )   {  headers . add ( new  basic header ( config header . get name (  )  config header . get value (  )  )  )  ;   }  return headers ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\http-client-service\http-client-service-impl\src\main\java\org\openrepose\core\services\httpclient\impl\HttpConnectionPoolProvider.java,gen client,"public static  http client   (  string config root  pool type pool conf  tracer tracer  string repose version  uri redaction service uri redaction service )  {   pooling client connection manager cm = new  pooling client connection manager (  )  ;  cm . set default max per route ( pool conf . get http conn manager max per route (  )  )  ;  cm . set max total ( pool conf . get http conn manager max total (  )  )  ;   http params params = new  basic http params (  )  ;  params . set parameter (  clientp names . cookie   policy  cookie policy . ignore   cookies )  ;  params . set boolean parameter (  clientp names . handle   redirects false )  ;  params . set int parameter (  core connectionp names . so   timeout pool conf . get http socket timeout (  )  )  ;  params . set int parameter (  core connectionp names . connection   timeout pool conf . get http connection timeout (  )  )  ;  params . set parameter (  core connectionp names . tcp   nodelay pool conf . is http tcp nodelay (  )  )  ;  params . set parameter (  core connectionp names . max   header   count pool conf . get http connection max header count (  )  )  ;  params . set parameter (  core connectionp names . max   line   length pool conf . get http connection max line length (  )  )  ;  params . set parameter (  core connectionp names . socket   buffer   size pool conf . get http socket buffer size (  )  )  ;  params . set parameter ( chunked   encoding   param pool conf . get chunked encoding (  )  )  ;  if  ( pool conf . get headers (  )   !  =  null )   {  params . set parameter (  clientp names . default   headers create headers ( pool conf . get headers (  )  . get header (  )  )  )  ;   }  final  string uuid = uuid . randomuuid (  )  . to string (  )  ;  params . set parameter ( client   instance   id uuid )  ;   default http client client = new  default http client ( cm params )  ;  client . add request interceptor ( new  repose tracing request interceptor ( tracer repose version uri redaction service )  )  ;  client . add response interceptor ( new  tracing response interceptor (  )  )  ;  ssl context ssl context =  proxy utilities . get trusting ssl context (  )  ;  if  ( pool conf . get keystore filename (  )   !  =  null )   {  ssl context = generate ssl context for keystore ( config root pool conf )  ;   }  ssl socket factory ssf = new ssl socket factory ( ssl context ssl socket factory . allow   all   hostname   verifier )  ;   scheme registry registry = cm . get scheme registry (  )  ;   scheme scheme = new  scheme ( ""https"" default   https   port ssf )  ;  registry . register ( scheme )  ;  client . set keep alive strategy ( new  connection keep alive with timeout strategy ( pool conf . get keepalive timeout (  )  )  )  ;  log . info ( ""http connection pool  {  }  with instance id  {  }  has been created"" pool conf . get id (  )  uuid )  ;  return client ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\http-client-service\http-client-service-impl\src\main\java\org\openrepose\core\services\httpclient\impl\HttpConnectionPoolProvider.java,generate ssl context for keystore,"private static ssl context   (  string config root  pool type pool conf )  {  ssl context ssl context ;  try  {  ssl context builder ssl context builder = ssl contexts . custom (  )  ;   file keystore file = new  file ( pool conf . get keystore filename (  )  )  ;  if  (  ! keystore file . is absolute (  )  )   {  keystore file = new  file ( config root pool conf . get keystore filename (  )  )  ;   }  char[] keystore password = pool conf . get keystore password (  )   =  =  null  ?  null : pool conf . get keystore password (  )  . to char array (  )  ;  char[] key password = pool conf . get key password (  )   =  =  null  ?  null : pool conf . get key password (  )  . to char array (  )  ;  ssl context builder = ssl context builder . load key material ( keystore file keystore password key password )  ;  if  ( pool conf . get truststore filename (  )   =  =  null )   {  ssl context builder = ssl context builder . load trust material ( keystore file keystore password )  ;   }  else  {   file truststore file = new  file ( pool conf . get truststore filename (  )  )  ;  if  (  ! truststore file . is absolute (  )  )   {  truststore file = new  file ( config root pool conf . get truststore filename (  )  )  ;   }  char[] truststore password = pool conf . get truststore password (  )   =  =  null  ?  null : pool conf . get truststore password (  )  . to char array (  )  ;  ssl context builder = ssl context builder . load trust material ( truststore file truststore password )  ;   }  ssl context = ssl context builder . build (  )  ;   }  catch  (   general security exception|io exception e )   {  log . warn ( "" failed to properly configure the ssl client for  {  }  due to:  {  } "" pool conf . get id (  )  e . get localized message (  )  )  ;  log . trace ( """" e )  ;  log . info ( "" failing over to basic  trusting ssl context . "" )  ;  ssl context =  proxy utilities . get trusting ssl context (  )  ;   }  return ssl context ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\http-client-service\http-client-service-impl\src\main\java\org\openrepose\core\services\httpclient\impl\HttpConnectionPoolServiceImpl.java, http connection pool service impl,@ inject public   (  configuration service configuration service  health check service health check service  tracer tracer @ value (  repose spring properties . core . config   root )   string config root @ value (  repose spring properties . core . repos
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\http-client-service\http-client-service-impl\src\main\java\org\openrepose\core\services\httpclient\impl\HttpConnectionPoolServiceImpl.java,client generator,private  http client   (  string config root  pool type pool type )  {  return  http connection pool provider . gen client ( config root pool type tracer repose version uri redaction service )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\http-client-service\http-client-service-impl\src\main\java\org\openrepose\core\services\httpclient\impl\HttpConnectionPoolServiceImpl.java,configuration updated,@ override public void   (  http connection pool config pool config )  {  configure ( pool config )  ;  health check service proxy . resolve issue ( http   connection   pool   service   report )  ;  initialized = true ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\http-client-service\http-client-service-impl\src\main\java\org\openrepose\core\services\httpclient\impl\HttpConnectionPoolServiceImpl.java,configure,public void   (  http connection pool config config )  {   hash map <  string  http client >  new pool map = new  hash map <  >  (  )  ;  for  (   pool type pool type : config . get pool (  )  )   {  if  ( pool type . is default (  )  )   {  default client id = pool type . get id (  )  ;   }  new pool map . put ( pool type . get id (  )  client generator ( config root pool type )  )  ;   }  if  (  ! pool map . is empty (  )  )   {  decommission manager . decommission client ( pool map )  ;   }  pool map = new pool map ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\http-client-service\http-client-service-impl\src\main\java\org\openrepose\core\services\httpclient\impl\HttpConnectionPoolServiceImpl.java,destroy,@ pre destroy public void   (  )  {  configuration service . unsubscribe from ( default   config   name configuration listener )  ;  shutdown (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\http-client-service\http-client-service-impl\src\main\java\org\openrepose\core\services\httpclient\impl\HttpConnectionPoolServiceImpl.java,get available clients,@ override public  set <  string >    (  )  {  verify initialized (  )  ;  return pool map . key set (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\http-client-service\http-client-service-impl\src\main\java\org\openrepose\core\services\httpclient\impl\HttpConnectionPoolServiceImpl.java,get client,@ override public  http client container   (  string client id )  {  verify initialized (  )  ;  final  http client requested client ;  if  ( client id  =  =  null )   {  requested client = pool map . get ( default client id )  ;   }  else if  (  ! is ava
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\http-client-service\http-client-service-impl\src\main\java\org\openrepose\core\services\httpclient\impl\HttpConnectionPoolServiceImpl.java,get default client,@ override public  http client container   (  )  {  return get client ( null )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\http-client-service\http-client-service-impl\src\main\java\org\openrepose\core\services\httpclient\impl\HttpConnectionPoolServiceImpl.java,init,"@ post construct public void   (  )  {  log . debug ( "" initializing  http connection pool service"" )  ;  decommission manager . start thread (  )  ;  health check service proxy . report issue ( http   connection   pool   service   report "" http  client  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\http-client-service\http-client-service-impl\src\main\java\org\openrepose\core\services\httpclient\impl\HttpConnectionPoolServiceImpl.java,is available,@ override public boolean   (  string client id )  {  verify initialized (  )  ;  return pool map . contains key ( client id )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\http-client-service\http-client-service-impl\src\main\java\org\openrepose\core\services\httpclient\impl\HttpConnectionPoolServiceImpl.java,is initialized,@ override public boolean   (  )  {  return initialized ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\http-client-service\http-client-service-impl\src\main\java\org\openrepose\core\services\httpclient\impl\HttpConnectionPoolServiceImpl.java,release client,@ override public void   (  http client container http client container )  {  verify initialized (  )  ;   string client instance id = http client container . get client instance id (  )  ;   string user id = http client container . get user id (  )  ;  h
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\http-client-service\http-client-service-impl\src\main\java\org\openrepose\core\services\httpclient\impl\HttpConnectionPoolServiceImpl.java,shutdown,"@ override public void   (  )  {  log . info ( "" shutting down http connection pools"" )  ;  for  (   http client client : pool map . values (  )  )   {  client . get connection manager (  )  . shutdown (  )  ;   }  decommission manager . stop thread (  ) "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\http-client-service\http-client-service-impl\src\main\java\org\openrepose\core\services\httpclient\impl\HttpConnectionPoolServiceImpl.java,verify initialized,"private void   (  )  {  if  (  ! initialized )   {  throw new  illegal state exception ( "" the  http connection pool service has not yet been initialized"" )  ;   }   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\http-client-service\http-client-service-impl\src\main\java\org\openrepose\core\services\httpclient\impl\ProxyUtilities.java,get accepted issuers,@ override public x509 certificate[]   (  )  {  return new x509 certificate[0] ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\http-client-service\http-client-service-impl\src\main\java\org\openrepose\core\services\httpclient\impl\ProxyUtilities.java,get trusting ssl context,"public static ssl context   (  )  {   trust manager[] trust all certs = new  trust manager[] { new  all trusting manager (  )  }  ;  try  {  ssl context sc = ssl context . get instance ( ""ssl"" )  ;  sc . init ( null trust all certs new  secure random (  )  )  ;  return sc ;   }  catch  (   exception e )   {  log . error ( "" problem creating ssl context: "" e )  ;   }  return null ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\cache\ManagedRateLimitCache.java, managed rate limit cache,public   (  datastore datastore )  {  this . datastore = datastore ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\cache\ManagedRateLimitCache.java,get user rate limit map,private  map <  string  cached rate limit >    (  string user )  {  final  serializable element = datastore . get ( user )  ;  return  ( element  =  =  null )   ?  new  hash map <  >  (  )  :  (  (  user rate limit ) element )  . get limit map (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\cache\ManagedRateLimitCache.java,get user rate limits,@ override public  map <  string  cached rate limit >    (  string user )  {  final  map <  string  cached rate limit >  account rate limit map = get user rate limit map ( user )  ;  return  collections . unmodifiable map ( account rate limit map )  ;   }
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\cache\ManagedRateLimitCache.java,update limit,@ override public  next available response   (  string user  list <  pair <  string  configured ratelimit >  >  matching limits  time unit largest unit int datastore warn limit )  throws io exception  {   user rate limit patch result =  (  user rate limit
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\cache\NextAvailableResponse.java, next available response,public   (  pair <  configured ratelimit  cached rate limit >  limit pair )  {  this . limit pair = limit pair ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\cache\NextAvailableResponse.java,get current limit amount,public int   (  )  {  return limit pair . get value (  )  . amount (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\cache\NextAvailableResponse.java,get limit pair,public  pair <  configured ratelimit  cached rate limit >    (  )  {  return limit pair ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\cache\NextAvailableResponse.java,get reset time,public  date   (  )  {  return new  date ( limit pair . get value (  )  . get next expiration time (  )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\cache\NextAvailableResponse.java,has requests remaining,public boolean   (  )  {  return  ( limit pair  =  =  null )  ||  ( limit pair . get value (  )  . max amount (  )   -  limit pair . get value (  )  . amount (  )   >  =  0 )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\cache\NextAvailableResponse.java,to string,"@ override public  string   (  )  {  return "" next available response { ""  +  ""has requests = ""  +  has requests remaining (  )   +  ""  reset time = "" +  get reset time (  )  . get time (  )  +  ""  current limit amount = "" +  get current limit amount (  )"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\cache\util\ObjectSerializer.java,instance,public static  object serializer   (  )  {  return instance ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\cache\util\ObjectSerializer.java,write object,public byte[]   (  serializable o )  throws io exception  {  final  byte array output stream baos = new  byte array output stream (  )  ;  final  object output stream oos = new  object output stream ( baos )  ;  oos . write object ( o )  ;  return baos . to byte array (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\cache\util\TimeUnitConverter.java,from schema type to concurrent,"public static  time unit   ( org . openrepose . core . services . ratelimit . config .  time unit unit )  {  switch  ( unit )   {  case second: return  time unit . seconds ;  case minute: return  time unit . minutes ;  case hour: return  time unit . hours ;  case day: return  time unit . days ;  default : throw new  illegal argument exception ( "" time unit: ""  +  unit . to string (  )   +  "" is not supported"" )  ;   }   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\cache\UserRateLimit.java, patch,public   (  list <  pair <  string  configured ratelimit >  >  patch map )  {  this . limit map = new  array list <  >  ( patch map )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\cache\UserRateLimit.java, user rate limit,private   (  map <  string  cached rate limit >  limit map  pair <  configured ratelimit  cached rate limit >  lowest limit )  {  this . limit map = new  concurrent hash map <  >  ( limit map )  ;  this . least remaining limit = lowest limit ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\cache\UserRateLimit.java,adjust limit,private  cached rate limit   (  pair <  string  configured ratelimit >  limit entry )  {   cached rate limit return rate limit ;  while  ( true )   {   cached rate limit new rate limit = new  cached rate limit ( limit entry . get value (  )  1 )  ;   cached rate limit old rate limit = limit map . put if absent ( limit entry . get key (  )  new rate limit )  ;  if  ( old rate limit  =  =  null )   {  return new rate limit ;   }  if  (  (  system . current time millis (  )   -  old rate limit . timestamp (  )  )   >  old rate limit . unit (  )  )   {  return rate limit = new rate limit ;   }  else  {  return rate limit = new  cached rate limit ( limit entry . get value (  )  old rate limit . amount (  )   +  1 old rate limit . timestamp (  )  )  ;   }  if  ( limit map . replace ( limit entry . get key (  )  old rate limit return rate limit )  )   {  return return rate limit ;   }   }   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\cache\UserRateLimit.java,apply patch,@ override public  user rate limit   (  patch patch )  {   hash map <  string  cached rate limit >  return limits = new  hash map <  >  (  )  ;   pair <  configured ratelimit  cached rate limit >  lowest limit = null ;  for  (   pair <  string  configured
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\cache\UserRateLimit.java,get limit map,public  list <  pair <  string  configured ratelimit >  >    (  )  {  return limit map ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\cache\UserRateLimit.java,get lowest limit,public  pair <  configured ratelimit  cached rate limit >    (  )  {  return least remaining limit ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\cache\UserRateLimit.java,new from patch,@ override public  user rate limit   (  )  {   user rate limit new user limit = new  user rate limit (  )  ;  return new user limit . apply patch ( this )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\config\RateLimitingConfigHelper.java, rate limiting config helper,public   (  rate limiting configuration rate limiting configuration )  {  this . global limit group = process global limits ( rate limiting configuration . get global limit group (  )  )  ;  this . configured limit groups = process configuration ( rate limiting configuration )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\config\RateLimitingConfigHelper.java,deep copy limit group,private  configured limit group   (  configured limit group original group )  {  final  configured limit group new group = new  configured limit group (  )  ;  new group . set default ( original group . is default (  )  )  ;  new group . set id ( original group . get id (  )  )  ;  final  list <  string >  new role list = new  array list <  >  ( original group . get groups (  )  )  ;   collections . copy ( new role list original group . get groups (  )  )  ;  new group . get groups (  )  . add all ( new role list )  ;  final  list <  configured ratelimit >  new limits = new  array list <  >  ( original group . get limit (  )  )  ;   collections . copy ( new limits original group . get limit (  )  )  ;  new group . get limit (  )  . add all ( new limits )  ;  return new group ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\config\RateLimitingConfigHelper.java,get configured group by role,public  configured limit group   (  list <  string >  groups )  {   configured limit group default limit group = new  configured limit group (  )  ;  for  (   configured limit group configured limit group : configured limit groups )   {  if  ( configured limit group . is default (  )  )   {  default limit group = configured limit group ;   }  for  (   string group : groups )   {  if  ( configured limit group . get groups (  )  . contains ( group )  )   {  return configured limit group ;   }   }   }  return default limit group ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\config\RateLimitingConfigHelper.java,get global limit group,public  global limit group   (  )  {  return global limit group ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\config\RateLimitingConfigHelper.java,process configuration,"private  list <  configured limit group >    (  rate limiting configuration configuration object )  {  boolean default set = false ;  final  list <  configured limit group >  new limit groups = new  array list <  >  (  )  ;  for  (   configured limit group limit group : configuration object . get limit group (  )  )   {  if  ( limit group . is default (  )  )   {  if  ( default set )   {  limit group . set default ( false )  ;  log . warn ( "" rate - limiting  configuration has more than one default group set .   limit  group '""  +  limit group . get id (  )   +  ""' will not be set as a default limit group .   please update your configuration file . "" )  ;   }  else  {  default set = true ;   }   }  final  configured limit group new limit group = deep copy limit group ( limit group )  ;  new limit group . get limit (  )  . clear (  )  ;  for  (   configured ratelimit configured ratelimit : limit group . get limit (  )  )   {  final  configured ratelimit new limit = new  configured rate limit wrapper ( configured ratelimit )  ;  new limit group . get limit (  )  . add ( new limit )  ;   }  new limit groups . add ( new limit group )  ;   }  if  (  ! default set && configuration object . get global limit group (  )   =  =  null )   {  log . warn ( "" none of the specified rate limit groups have the default parameter set  and a global limit group has not been defined . ""  +  ""  running without a default or global rate limiting group is dangerous !   please update your config . "" )  ;   }  return new limit groups ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\config\RateLimitingConfigHelper.java,process global limits,private  global limit group   (  global limit group old global limit group )  {   global limit group new global limit group = new  global limit group (  )  ;  if  ( old global limit group  !  =  null )   {  for  (   configured ratelimit configured ratelimit : old global limit group . get limit (  )  )   {   configured ratelimit new limit = new  configured rate limit wrapper ( configured ratelimit )  ;  new global limit group . get limit (  )  . add ( new limit )  ;   }   }  return new global limit group ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\config\ConfiguredRateLimitWrapper.java, configured rate limit wrapper,public   (  configured ratelimit configured rate limit )  {  this . configured rate limit = configured rate limit ;  this . regex pattern =  pattern . compile ( configured rate limit . get uri regex (  )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\config\ConfiguredRateLimitWrapper.java,equals,@ override public boolean   (  object o )  {  if  ( this  =  =  o )   {  return true ;   }  if  ( o  =  =  null || get class (  )   !  =  o . get class (  )  )   {  return false ;   }   configured rate limit wrapper that =  (  configured rate limit wrappe
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\config\ConfiguredRateLimitWrapper.java,get http methods,@ override public  list <  http method >    (  )  {  return configured rate limit . get http methods (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\config\ConfiguredRateLimitWrapper.java,get id,@ override public  string   (  )  {  return configured rate limit . get id (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\config\ConfiguredRateLimitWrapper.java,get query param names,@ override public  list <  string >    (  )  {  return configured rate limit . get query param names (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\config\ConfiguredRateLimitWrapper.java,get regex pattern,public  pattern   (  )  {  return regex pattern ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\config\ConfiguredRateLimitWrapper.java,get unit,@ override public  time unit   (  )  {  return configured rate limit . get unit (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\config\ConfiguredRateLimitWrapper.java,get uri,@ override public  string   (  )  {  return configured rate limit . get uri (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\config\ConfiguredRateLimitWrapper.java,get uri regex,@ override public  string   (  )  {  return configured rate limit . get uri regex (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\config\ConfiguredRateLimitWrapper.java,get value,@ override public int   (  )  {  return configured rate limit . get value (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\config\ConfiguredRateLimitWrapper.java,hash code,@ override public int   (  )  {  int result = configured rate limit  !  =  null  ?  configured rate limit . hash code (  )  : zero ;  result = prime * result  +   ( regex pattern  !  =  null  ?  regex pattern . hash code (  )  : zero )  ;  return result ;
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\config\ConfiguredRateLimitWrapper.java,set id,@ override public void   (  string value )  {  configured rate limit . set id ( value )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\config\ConfiguredRateLimitWrapper.java,set unit,@ override public void   (  time unit value )  {  configured rate limit . set unit ( value )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\config\ConfiguredRateLimitWrapper.java,set uri,@ override public void   (  string value )  {  configured rate limit . set uri ( value )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\config\ConfiguredRateLimitWrapper.java,set uri regex,@ override public void   (  string value )  {  configured rate limit . set uri regex ( value )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\config\ConfiguredRateLimitWrapper.java,set value,@ override public void   ( int value )  {  configured rate limit . set value ( value )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\config\ConfiguredRateLimitWrapper.java,to string,@ override public  string   (  )  {  return configured rate limit . to string (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\exception\OverLimitException.java, over limit exception,public   (  string msg  string user  date next available time int current limit amount  string configured limit )  {  super ( msg )  ;  this . user = user ;  this . next available time =  (  date ) next available time . clone (  )  ;  this . current limit amount = current limit amount ;  this . configured limit = configured limit ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\exception\OverLimitException.java,get configured limit,public  string   (  )  {  return configured limit ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\exception\OverLimitException.java,get current limit amount,public int   (  )  {  return current limit amount ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\exception\OverLimitException.java,get next available time,public  date   (  )  {  return  (  date ) next available time . clone (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\exception\OverLimitException.java,get user,public  string   (  )  {  return user ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\exception\CacheException.java, cache exception,public   (  string message  throwable t )  {  super ( message t )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\LimitKey.java,get limit key,"public static  string   (  string limit group  string limit id  matcher uri matcher boolean use capture groups )  {  final int group count = uri matcher . group count (  )  ;  final  string builder cache id buffer = new  string builder (  )  ;  cache id buffer . append (  string . value of ( limit group . hash code (  )  )  )  ;  cache id buffer . append ( "":"" )  . append (  string . value of ( limit id . hash code (  )  )  )  ;  if  ( use capture groups )   {  for  ( int i = 1 ;  i  <  =  group count ;   +  + i )   {  cache id buffer . append ( "":"" )  . append (  string . value of ( uri matcher . group ( i )  . hash code (  )  )  )  ;   }   }  return cache id buffer . to string (  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\OverLimitData.java, over limit data,public   (  over limit exception exception int data store warn limit  http servlet request request int response code )  {  this . user = exception . get user (  )  ;  this . next available time = exception . get next available time (  )  ;  this . current limit amount = exception . get current limit amount (  )  ;  this . configured limit = exception . get configured limit (  )  ;  this . groups = request . get header (  power api header . groups )  ;  this . request = request ;  this . response code = response code ;  this . data store warn limit = data store warn limit ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\OverLimitData.java,get configured limit,public  string   (  )  {  return configured limit ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\OverLimitData.java,get current limit amount,public int   (  )  {  return current limit amount ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\OverLimitData.java,get data store warn limit,public int   (  )  {  return data store warn limit ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\OverLimitData.java,get groups,public  string   (  )  {  return groups ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\OverLimitData.java,get next available time,public  date   (  )  {  return next available time ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\OverLimitData.java,get request,public  http servlet request   (  )  {  return request ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\OverLimitData.java,get response code,public int   (  )  {  return response code ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\OverLimitData.java,get user,public  string   (  )  {  return user ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\RateLimiter.java, rate limiter,public   (  rate limit cache cache )  {  this . cache = cache ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\RateLimiter.java,handle rate limit,"public void   (  string user  list <  pair <  string  configured ratelimit >  >  matching limits  time unit largest unit int datastore warn limit )  throws  over limit exception  {  try  {   next available response next available = cache . update limit ( user matching limits largest unit datastore warn limit )  ;  if  ( next available  !  =  null &&  ! next available . has requests remaining (  )  )   {  throw new  over limit exception ( "" user rate limited ! "" user next available . get reset time (  )  next available . get current limit amount (  )  next available . get limit pair (  )  . get left (  )  . to string (  )  )  ;   }   }  catch  (  io exception ioe )   {  log . error ( ""io exception caught during cache commit for rate limit user: ""  +  user  +  ""  reason: "" +  ioe . get message (  )  ioe )  ;  throw new  cache exception ( ""io exception caught during cache commit for rate limit . "" ioe )  ;   }   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\RateLimitingServiceImpl.java, rate limiting service impl,"public   (  rate limit cache cache  rate limiting configuration rate limiting configuration )  {  if  ( rate limiting configuration  =  =  null )   {  throw new  illegal argument exception ( "" rate limiting configuration must not be null . "" )  ;   }  this . cache = cache ;  this . rate limiter = new  rate limiter ( cache )  ;  this . helper = new  rate limiting config helper ( rate limiting configuration )  ;  this . global limit group = helper . get global limit group (  )  ;  use capture groups = rate limiting configuration . is use capture groups (  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\RateLimitingServiceImpl.java,decode query string,"private  string   (  string query string )  {   string processed query string = query string ;  try  {  processed query string = url decoder . decode ( processed query string ""utf - 8"" )  ;   }  catch  (   unsupported encoding exception uee )   {  log . error ( "" rate limiting service . decode query string  -   unsupported  encoding"" uee )  ;   }  return processed query string ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\RateLimitingServiceImpl.java,http method matches,private boolean   (  list <  http method >  config methods  string request method )  {  return config methods . is empty (  )  || config methods . contains (  http method . all )  || config methods . contains (  http method . value of ( request method . to upper case (  )  )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\RateLimitingServiceImpl.java,query limits,"@ override public  rate limit list   (  string user  list <  string >  groups )  {  if  (  string utils . is blank ( user )  )   {  throw new  illegal argument exception ( "" user required when querying rate limits . "" )  ;   }  final  map <  string  cache"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\RateLimitingServiceImpl.java,query parameter name matches,private boolean   (  list <  string >  configured query params  map <  string  string[] >  request parameter map )  {  for  (   string configured param key : configured query params )   {  boolean match found = false ;  for  (   string request param key : request parameter map . key set (  )  )   {  if  ( decode query string ( configured param key )  . equals ignore case ( decode query string ( request param key )  )  )   {  match found = true ;  break ;   }   }  if  (  ! match found )   {  return false ;   }   }  return true ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\RateLimitingServiceImpl.java,track limits,@ override public void   (  string user  list <  string >  groups  string uri  map <  string  string[] >  parameter map  string http method int datastore warn limit )  throws  over limit exception  {  if  (  string utils . is blank ( user )  )   {  throw 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\RateLimitingServiceFactory.java,create rate limiting service,public static  rate limiting service   (  rate limit cache cache  rate limiting configuration rate limiting configuration )  {  return new  rate limiting service impl ( cache rate limiting configuration )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\cache\CachedRateLimit.java, cached rate limit,public   (  configured ratelimit cfg int count long timestamp )  {  this . max count = cfg . get value (  )  ;  this . unit =  time unit converter . from schema type to concurrent ( cfg . get unit (  )  )  . to millis ( 1 )  ;  this . config id = cfg . get id (  )  ;  this . count = count ;  this . timestamp = timestamp ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\cache\CachedRateLimit.java,amount,public int   (  )  {  vacuum (  )  ;  return count ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\cache\CachedRateLimit.java,get config id,public  string   (  )  {  return config id ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\cache\CachedRateLimit.java,get next expiration time,public long   (  )  {  vacuum (  )  ;  return timestamp  +  unit ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\cache\CachedRateLimit.java,get soonest request time,public long   (  )  {  vacuum (  )  ;  if  ( count  <  max count )   {  return  system . current time millis (  )  ;   }  else  {  return timestamp  +  unit ;   }   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\cache\CachedRateLimit.java,log hit,public void   (  )  {  vacuum (  )  ;   +  + count ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\cache\CachedRateLimit.java,max amount,public int   (  )  {  return max count ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\cache\CachedRateLimit.java,timestamp,public long   (  )  {  vacuum (  )  ;  return timestamp ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\cache\CachedRateLimit.java,unit,public long   (  )  {  return unit ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\cache\CachedRateLimit.java,vacuum,private void   (  )  {  final long now =  system . current time millis (  )  ;  if  ( now  >  timestamp  +  unit )   {  count = 0 ;  timestamp = now ;   }   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\RateLimitListBuilder.java, rate limit list builder,public   (  map <  string  cached rate limit >  cached rate limits  list <  configured limit group >  configured limit groups )  {  this . cached rate limits = cached rate limits ;  this . configured limit groups = configured limit groups ;  live rate limit map = new  hash map <  >  (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\RateLimitListBuilder.java,as list,private static  list <  configured limit group >    (  configured limit group group )  {  final  list <  configured limit group >  list = new  linked list <  >  (  )  ;  list . add ( group )  ;  return list ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\RateLimitListBuilder.java,get cached rate limit from set,private  cached rate limit   (  configured ratelimit configured ratelimit  collection <  cached rate limit >  limit set )  {  for  (   cached rate limit cached rate limit : limit set )   {  if  ( cached rate limit . get config id (  )  . equals ( configured ratelimit . get id (  )  )  )   {  return cached rate limit ;   }   }  return null ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\RateLimitListBuilder.java,process live rate limits,private void   (  configured ratelimit configured rate limit  calendar cal  cached rate limit cached limit )  {   list <  http method >  http methods = configured rate limit . get http methods (  )  ;  if  ( http methods . is empty (  )  )   {  http methods =  collections . singleton list (  http method . all )  ;   }  for  (   http method method : http methods )   {  final  rate limit limit = new  rate limit (  )  ;  limit . set value ( configured rate limit . get value (  )  )  ;  limit . set unit ( configured rate limit . get unit (  )  )  ;  limit . set verb ( method )  ;  long earliest expiration date =  system . current time millis (  )  ;  int remaining requests = configured rate limit . get value (  )  ;  if  ( cached limit  !  =  null )   {  earliest expiration date = cached limit . get next expiration time (  )  ;  remaining requests = cached limit . max amount (  )   -  cached limit . amount (  )  ;   }  cal . set time in millis ( earliest expiration date )  ;  limit . set remaining ( remaining requests )  ;  limit . set next available ( datatype   factory . newxml gregorian calendar (  (  gregorian calendar ) cal )  )  ;  final  string config id = configured rate limit . get id (  )  ;   resource rate limits rate limits = live rate limit map . get ( config id )  ;  if  ( rate limits  =  =  null )   {  rate limits = new  resource rate limits (  )  ;  rate limits . set regex ( configured rate limit . get uri regex (  )  )  ;  rate limits . set uri ( configured rate limit . get uri (  )  )  ;  live rate limit map . put ( config id rate limits )  ;   }  rate limits . get limit (  )  . add ( limit )  ;   }   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\RateLimitListBuilder.java,to rate limit list,"public  rate limit list   (  )  {  if  ( datatype   factory  =  =  null )   {  throw new  illegal state exception ( "" datatype factory for producing limits responses is not set .   this is a runtime error . "" )  ;   }  final  rate limit list rate limit list = new  rate limit list (  )  ;  final  calendar cal =  gregorian calendar . get instance (  )  ;  cal . set time zone (  time zone . get time zone ( ""gmt"" )  )  ;  for  (   configured limit group configured limit group : configured limit groups )   {  for  (   configured ratelimit configured rate limit : configured limit group . get limit (  )  )   {  final  cached rate limit cached limit = get cached rate limit from set ( configured rate limit cached rate limits . values (  )  )  ;  process live rate limits ( configured rate limit cal cached limit )  ;   }   }  for  (   resource rate limits resource scoped limits : live rate limit map . values (  )  )   {  rate limit list . get rate (  )  . add ( resource scoped limits )  ;   }  return rate limit list ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\utils\StringUtilities.java,is blank,public static boolean   (  string st )  {  return is empty ( st )  || is   blank   pattern . matcher ( st )  . matches (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\utils\StringUtilities.java,is empty,public static boolean   (  string st )  {  return st  =  =  null || st . length (  )   =  =  0 ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\test\java\org\openrepose\core\services\ratelimit\cache\CachedRateLimitTest.java,amount   get,@ test public void   (  )  {  final  cached rate limit limit = new  cached rate limit ( cfg )  ;  assert that ( limit . amount (  )  equal to ( 0 )  )  ;  limit . log hit (  )  ;  assert that ( limit . amount (  )  equal to ( 1 )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\test\java\org\openrepose\core\services\ratelimit\cache\CachedRateLimitTest.java,get config limit key   should create correctcl key,@ test public void   (  )  {  final  cached rate limit limit = new  cached rate limit ( cfg )  ;  assert that ( limit . get config id (  )  equal to ( cfg . get id (  )  )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\test\java\org\openrepose\core\services\ratelimit\cache\CachedRateLimitTest.java,max amount   get,@ test public void   (  )  {  final  cached rate limit limit = new  cached rate limit ( cfg )  ;  assert that ( limit . max amount (  )  equal to ( 6 )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\test\java\org\openrepose\core\services\ratelimit\cache\CachedRateLimitTest.java,setup,@ before public void   (  )  {  final  linked list <  http method >  methods = new  linked list <  http method >  (  )  ;  methods . add (  http method . get )  ;  methods . add (  http method . post )  ;  cfg = mock (  configured ratelimit . class )  ;  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\test\java\org\openrepose\core\services\ratelimit\cache\CachedRateLimitTest.java,should give accurate expiration dates,@ test public void   (  )  {  final  cached rate limit limit = new  cached rate limit ( cfg )  ;  limit . log hit (  )  ;  limit . log hit (  )  ;  long current time =  system . current time millis (  )  ;  final long soonest request = limit . get soonest
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\test\java\org\openrepose\core\services\ratelimit\cache\CachedRateLimitTest.java,should log hits,@ test public void   (  )  {  final  cached rate limit limit = new  cached rate limit ( cfg )  ;  limit . log hit (  )  ;  limit . log hit (  )  ;  limit . log hit (  )  ;  assert that ( limit . amount (  )  equal to ( 3 )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\test\java\org\openrepose\core\services\ratelimit\cache\CachedRateLimitTest.java,should maintain hits that have not expired,@ test public void   (  )  {  when ( cfg . get value (  )  )  . then return ( 3 )  ;  when ( cfg . get unit (  )  )  . then return (  time unit . second )  ;  final  cached rate limit limit = new  cached rate limit ( cfg )  ;  limit . log hit (  )  ;  try
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\test\java\org\openrepose\core\services\ratelimit\cache\CachedRateLimitTest.java,should vacuum expired hits,@ test public void   (  )  {  when ( cfg . get value (  )  )  . then return ( 3 )  ;  when ( cfg . get unit (  )  )  . then return (  time unit . second )  ;  final  cached rate limit limit = new  cached rate limit ( cfg )  ;  limit . log hit (  )  ;  try
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\test\java\org\openrepose\core\services\ratelimit\cache\CachedRateLimitTest.java,timestamp   get,@ test public void   (  )  {  long before =  system . current time millis (  )  ;  final  cached rate limit limit = new  cached rate limit ( cfg )  ;  long after =  system . current time millis (  )  ;  assert that ( limit . timestamp (  )  greater than o
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\test\java\org\openrepose\core\services\ratelimit\cache\CachedRateLimitTest.java,unit   get,@ test public void   (  )  {  final  cached rate limit limit = new  cached rate limit ( cfg )  ;  assert that ( limit . unit (  )  equal to ( java . util . concurrent .  time unit . minutes . to millis ( 1 )  )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\test\java\org\openrepose\core\services\ratelimit\cache\ManagedRateLimitCacheTest.java,describe to,"@ override public void   (  description description )  {  description . append text ( "" response with success: ""  +  has requests  +  "" reset time greater than: "" +  reset time +  ""and less than: "" +   ( reset time  +  120000 )  +  "" current limit amount:"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\test\java\org\openrepose\core\services\ratelimit\cache\ManagedRateLimitCacheTest.java,get user rate limits   should return cached key sets,"@ test public void   (  )  throws  exception  {   hash map <  string  cached rate limit >  limit map = new  hash map <  >  (  )  ;  limit map . put ( ""12345"" new  cached rate limit ( default config )  )  ;  when ( datastore . get ( account )  )  . then re"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\test\java\org\openrepose\core\services\ratelimit\cache\ManagedRateLimitCacheTest.java,get user rate limits   should return empty sets when no limit keys exist,"@ test public void   (  )  {  assert that ( "" should have an empty map when no limits have been registered for an account"" rate limit cache . get user rate limits ( ""key"" )  . entry set (  )  empty (  )  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\test\java\org\openrepose\core\services\ratelimit\cache\ManagedRateLimitCacheTest.java,has values,"private  matcher <  next available response >    ( final boolean has requests final long reset time final int current limit amount )  {  return new  type safe matcher <  next available response >  (  )  {  @ override protected boolean matches safely (   next available response item )  {  return  ( item . has requests remaining (  )   =  =  has requests )  &&  ( item . get reset time (  )  . get time (  )   >  reset time )  &&  ( item . get reset time (  )  . get time (  )   <   ( reset time  +  120000 )  ) &&  ( item . get current limit amount (  )   =  =  current limit amount )  ;   }  @ override public void describe to (   description description )  {  description . append text ( "" response with success: ""  +  has requests  +  "" reset time greater than: "" +  reset time +  ""and less than: "" +   ( reset time  +  120000 )  +  "" current limit amount: "" +  current limit amount )  ;   }   }   ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\test\java\org\openrepose\core\services\ratelimit\cache\ManagedRateLimitCacheTest.java,matches safely,@ override protected boolean   (  next available response item )  {  return  ( item . has requests remaining (  )   =  =  has requests )  &&  ( item . get reset time (  )  . get time (  )   >  reset time )  &&  ( item . get reset time (  )  . get time (  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\test\java\org\openrepose\core\services\ratelimit\cache\ManagedRateLimitCacheTest.java,set up,"@ before public void   (  )  throws  exception  {  datastore = mock (  datastore . class )  ;  rate limit cache = new  managed rate limit cache ( datastore )  ;  default config . set uri ( "" . *"" )  ;  default config . set uri regex ( "" . *"" )  ;  default"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\test\java\org\openrepose\core\services\ratelimit\cache\ManagedRateLimitCacheTest.java,update limit   should send patch to datastore,"@ test public void   (  )  throws  exception  {   hash map <  string  cached rate limit >  limit map = new  hash map <  >  (  )  ;  limit map . put ( ""test key"" new  cached rate limit ( default config )  )  ;  when ( datastore . patch ( any (  string . cl"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\test\java\org\openrepose\core\services\ratelimit\cache\ManagedRateLimitCacheTest.java,update limit   uses returned values   to populate result object,@ test public void   (  )  throws  exception  {  long now =  system . current time millis (  )  ;   cached rate limit cached rate limit = new  cached rate limit ( default config )  ;  cached rate limit . log hit (  )  ;   hash map <  string  cached rate l
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\test\java\org\openrepose\core\services\ratelimit\cache\NextAvailableResponseTest.java,set up,@ before public void   (  )  throws  exception  {   configured ratelimit config limit = mock (  configured ratelimit . class )  ;   cached rate limit cached limit = mock (  cached rate limit . class )  ;  expiration time = new  date (  system . current ti
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\test\java\org\openrepose\core\services\ratelimit\cache\NextAvailableResponseTest.java,test get current limit amount,@ test public void   (  )  throws  exception  {  assert that ( next available response . get current limit amount (  )  equal to ( 5 )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\test\java\org\openrepose\core\services\ratelimit\cache\NextAvailableResponseTest.java,test get limit pair,@ test public void   (  )  throws  exception  {  assert that ( next available response . get limit pair (  )  equal to ( limit pair )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\test\java\org\openrepose\core\services\ratelimit\cache\NextAvailableResponseTest.java,test get reset time,@ test public void   (  )  throws  exception  {  assert that ( next available response . get reset time (  )  . get time (  )  equal to ( expiration time )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\test\java\org\openrepose\core\services\ratelimit\cache\NextAvailableResponseTest.java,test has requests remaining,@ test public void   (  )  throws  exception  {  assert true ( next available response . has requests remaining (  )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\test\java\org\openrepose\core\services\ratelimit\exception\OverLimitExceptionTest.java,set up,@ before public void   (  )  {  instance = new  over limit exception ( message user date limit configured limit )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\test\java\org\openrepose\core\services\ratelimit\exception\OverLimitExceptionTest.java,should return clone of date,@ test public void   (  )  {  instance . get next available time (  )  . set time ( 100 )  ;  assert equals ( date instance . get next available time (  )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\test\java\org\openrepose\core\services\ratelimit\exception\OverLimitExceptionTest.java,should store message,@ test public void   (  )  {  assert equals ( message instance . get message (  )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\test\java\org\openrepose\core\services\ratelimit\exception\OverLimitExceptionTest.java,should store next date,@ test public void   (  )  {  assert equals ( date instance . get next available time (  )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\test\java\org\openrepose\core\services\ratelimit\exception\OverLimitExceptionTest.java,should store user,@ test public void   (  )  {  assert equals ( user instance . get user (  )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\test\java\org\openrepose\core\services\ratelimit\RateLimitingTestSupport.java,default rate limiting configuration,"public static  rate limiting configuration   (  )  {  final  rate limiting configuration new cfg = new  rate limiting configuration (  )  ;  final  request endpoint endpoint = new  request endpoint (  )  ;  endpoint . set include absolute limits (  boolean . true )  ;  endpoint . set uri regex ( "" / v1 . 0 / limits /  ? "" )  ;  new cfg . set request endpoint ( endpoint )  ;  new cfg . get limit group (  )  . add ( new configured limit group ( default   user   role default   uri default   uri   regex default   limit   group   id )  )  ;  new cfg . get limit group (  )  . add ( new multi method configured limit group ( default   user   role multi   method   uri multi   method   uri   regex multi   method   limit   group   id )  )  ;  new cfg . set global limit group ( new global limit group (  )  )  ;  return new cfg ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\test\java\org\openrepose\core\services\ratelimit\RateLimitingTestSupport.java,new configured limit group,"public static  configured limit group   (  string user role  string rate limit uri  string uri regex  string limit group id )  {  final int value = 3 ;  final  configured limit group limit group = new  configured limit group (  )  ;  limit group . set default (  boolean . true )  ;  limit group . set id ( limit group id )  ;  limit group . get groups (  )  . add ( user role )  ;  limit group . get limit (  )  . add ( new configured rate limit ( ""one""  time unit . minute new  array list <  http method >  (  )  {   {  add (  http method . get )  ;   }   }   rate limit uri uri regex value )  )  ;  limit group . get limit (  )  . add ( new configured rate limit ( ""two""  time unit . minute new  array list <  http method >  (  )  {   {  add (  http method . put )  ;   }   }   rate limit uri uri regex value )  )  ;  limit group . get limit (  )  . add ( new configured rate limit ( ""three""  time unit . minute new  array list <  http method >  (  )  {   {  add (  http method . post )  ;   }   }   rate limit uri uri regex value )  )  ;  limit group . get limit (  )  . add ( new configured rate limit ( ""four""  time unit . minute new  array list <  http method >  (  )  {   {  add (  http method . delete )  ;   }   }   rate limit uri uri regex value )  )  ;  return limit group ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\test\java\org\openrepose\core\services\ratelimit\RateLimitingTestSupport.java,new configured rate limit,public static  configured ratelimit   (  string id  time unit unit  list <  http method >  methods  string rate limit uri  string uri regex int value )  {  final  configured ratelimit rate limit = new  configured ratelimit (  )  ;  rate limit . set id ( id )  ;  rate limit . set unit ( unit )  ;  rate limit . set uri ( rate limit uri )  ;  rate limit . set uri regex ( uri regex )  ;  rate limit . set value ( value )  ;  for  (   http method method : methods )   {  rate limit . get http methods (  )  . add ( method )  ;   }  return rate limit ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\test\java\org\openrepose\core\services\ratelimit\RateLimitingTestSupport.java,new global limit group,"public static  global limit group   (  )  {  final  global limit group global limit group = new  global limit group (  )  ;  global limit group . get limit (  )  . add ( new  configured rate limit wrapper ( new configured rate limit ( ""catch - all""  time unit . minute new  array list <  http method >  (  )  {   {  add (  http method . all )  ;   }   }   ""*"" "" . *"" 1 )  )  )  ;  return global limit group ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\test\java\org\openrepose\core\services\ratelimit\RateLimitingTestSupport.java,new multi method configured limit group,"public static  configured limit group   (  string user role  string rate limit uri  string uri regex  string limit group id )  {  final int value = 3 ;  final  configured limit group limit group = new  configured limit group (  )  ;  limit group . set default (  boolean . true )  ;  limit group . set id ( limit group id )  ;  limit group . get groups (  )  . add ( user role )  ;  limit group . get limit (  )  . add ( new configured rate limit ( ""five""  time unit . minute new  array list <  http method >  (  )  {   {  add (  http method . get )  ;  add (  http method . put )  ;  add (  http method . post )  ;  add (  http method . delete )  ;   }   }   rate limit uri uri regex value )  )  ;  return limit group ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\test\java\org\openrepose\core\services\ratelimit\RateLimitingTestSupport.java,new regex cache,public static  map <  string  map <  string  pattern >  >    (  list <  configured limit group >  clg list )  {  final  map <  string  map <  string  pattern >  >  regex cache = new  hash map <  >  (  )  ;  for  (   configured limit group clg : clg list )   {  final  map <  string  pattern >  limit group regex cache = new  hash map <  >  (  )  ;  for  (   configured ratelimit crl : clg . get limit (  )  )   {  limit group regex cache . put ( crl . get uri (  )   pattern . compile ( crl . get uri regex (  )  )  )  ;   }  regex cache . put ( clg . get id (  )  limit group regex cache )  ;   }  return regex cache ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\test\java\org\openrepose\core\services\ratelimit\RateLimiterTest.java,setup,"@ before public void   (  )  {  uri matcher . matches (  )  ;  key =  limit key . get limit key ( ""unique - group"" configured rate limit . get id (  )  uri matcher true )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\test\java\org\openrepose\core\services\ratelimit\RateLimiterTest.java,should throw cache exception,@ test ( expected =  cache exception . class )  public void   (  )  throws  over limit exception  io exception  {  final  rate limiter rate limiter = new  rate limiter ( mocked cache )  ;  when ( mocked cache . update limit ( any (  string . class )  any 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\test\java\org\openrepose\core\services\ratelimit\RateLimiterTest.java,should throw over limit exception,@ test ( expected =  over limit exception . class )  public void   (  )  throws io exception   over limit exception  {  final  rate limiter rate limiter = new  rate limiter ( mocked cache )  ;  when ( mocked cache . update limit ( any (  string . class ) 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\test\java\org\openrepose\core\services\ratelimit\RateLimiterTest.java,should update limit without exceptions,@ test public void   (  )  throws io exception   over limit exception  {  final  rate limiter rate limiter = new  rate limiter ( mocked cache )  ;  when ( mocked cache . update limit ( any (  string . class )  any (  list . class )  any (  time unit . cla
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\test\java\org\openrepose\core\services\ratelimit\RateLimitListBuilderTest.java,should construct live limits,@ test public void   (  )  {  final  rate limit list rll = new  rate limit list builder ( cache map configured limit group )  . to rate limit list (  )  ;  final  limits limits = new  limits (  )  ;  limits . set rates ( rll )  ;  assert equals ( 4 rll . 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\test\java\org\openrepose\core\services\ratelimit\RateLimitListBuilderTest.java,stand up,@ before public void   (  )  {   linked list <  http method >  methods = new  linked list <  http method >  (  )  ;  methods . add (  http method . get )  ;  methods . add (  http method . put )  ;  methods . add (  http method . post )  ;  methods . add 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\test\java\org\openrepose\core\services\ratelimit\RateLimitingConfigHelperTest.java,get global limit group,@ test public void   (  )  {  assert that ( helper . get global limit group (  )  . get limit (  )  . size (  )  equal to ( 1 )  )  ;  assert that ( helper . get global limit group (  )  . get limit (  )  . get ( 0 )  instance of (  configured rate limit 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\test\java\org\openrepose\core\services\ratelimit\RateLimitingConfigHelperTest.java,setup spec,@ before public void   (  )  {  this . config =  rate limiting test support . default rate limiting configuration (  )  ;  this . helper = new  rate limiting config helper ( config )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\test\java\org\openrepose\core\services\ratelimit\RateLimitingConfigHelperTest.java,should get group by role,"@ test public void   (  )  {   list <  string >  roles = new  array list <  >  (  )  ;  roles . add ( ""group"" )  ;  roles . add ( ""anotha"" )  ;   configured limit group group = helper . get configured group by role ( roles )  ;  assert equals ( group . ge"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\test\java\org\openrepose\core\services\ratelimit\RateLimitServiceTestContext.java,new limit config,protected  configured ratelimit   (  string limit id  string uri  string uri regex  list <  http method >  methods  list <  string >  query names )  {  final  configured ratelimit configured rate limit = new  configured ratelimit (  )  ;  configured rate limit . set id ( limit id )  ;  configured rate limit . set unit (  time unit . hour )  ;  configured rate limit . set uri ( uri )  ;  configured rate limit . set uri regex ( uri regex )  ;  configured rate limit . set value ( 20 )  ;  for  (   string qn : query names )   {  configured rate limit . get query param names (  )  . add ( qn )  ;   }  for  (   http method m : methods )   {  configured rate limit . get http methods (  )  . add ( m )  ;   }  return configured rate limit ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\domain\Port.java, port,public   (  string protocol int number )  {  this . protocol = protocol ;  this . number = number ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\domain\Port.java,equals,@ override public boolean   (  object other )  {  if  (  !  ( other instanceof  port )  )   {  return false ;   }   port p =  (  port ) other ;  if  ( protocol  !  =  null )   {  return number  =  =  p . get number (  )  && protocol . equals ignore case (
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\domain\Port.java,get number,public int   (  )  {  return number ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\domain\Port.java,get protocol,public  string   (  )  {  return protocol ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\domain\Port.java,hash code,@ override public int   (  )  {  int hash = base   hash ;  hash = prime * hash  +   ( this . protocol  !  =  null  ?  this . protocol . hash code (  )  : 0 )  ;  hash = prime * hash  +  this . number ;  return hash ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\commons\utils\classloader\EarDescriptor.java, ear descriptor,public   (  string application name  map <  string  filter type >  registered filters )  {  this . application name = application name ;  this . registered filters = registered filters ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\commons\utils\classloader\EarDescriptor.java,get application name,public  string   (  )  {  return application name ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\commons\utils\classloader\EarDescriptor.java,get registered filters,public  map <  string  filter type >    (  )  {  return  collections . unmodifiable map ( registered filters )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\filter\logic\DispatchPathBuilder.java, dispatch path builder,public   (  string request  string context )  {  this . request path = request ;  this . context = context ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\filter\logic\DispatchPathBuilder.java,build,public  string   (  )  {   string dispatch path = request path ;  if  ( dispatch path . starts with ( context )  )   {  dispatch path = dispatch path . substring ( context . length (  )  )  ;   }  return dispatch path ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\filter\routing\DestinationLocation.java, destination location,public   ( url url uri uri )  {  this . url = url ;  this . uri = uri ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\filter\routing\DestinationLocation.java,get uri,public uri   (  )  {  return uri ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\filter\routing\DestinationLocation.java,get url,public url   (  )  {  return url ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\filter\routing\DestinationLocationBuilder.java, destination location builder,public   (  routing service routing service  node localhost )  {  this . routing service = routing service ;  this . localhost = localhost ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\filter\routing\DestinationLocationBuilder.java,build,"public  destination location   (  destination destination  string uri  http servlet request request )  throws  malformedurl exception  uri syntax exception  {  if  ( destination  =  =  null )   {  throw new  illegal argument exception ( ""destination cannot be null"" )  ;   }  if  ( destination instanceof  destination endpoint )   {  return build endpoint location ( destination uri request )  ;   }  else if  ( destination instanceof  destination cluster )   {  return build domain location ( destination uri request )  ;   }  else  {  throw new  illegal argument exception ( "" unknown destination type: ""  +  destination . get class (  )  . get name (  )  )  ;   }   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\filter\routing\DestinationLocationBuilder.java,build domain location,"private  destination location   (  destination destination  string uri  http servlet request request )  throws  malformedurl exception  uri syntax exception  {  if  (  !  ( destination instanceof  destination cluster )  )   {  throw new  illegal argument exception ( "" destination must be of type  destination cluster"" )  ;   }   destination cluster domain =  (  destination cluster ) destination ;   node node = routing service . get routable node ( domain . get cluster (  )  . get id (  )  )  ;  if  ( node  =  =  null )   {  log . warn ( "" no routable node for domain: ""  +  domain . get id (  )  )  ;  return null ;   }  int port = https   protocol . equals ignore case ( domain . get protocol (  )  )   ?  node . get https port (  )  : node . get http port (  )  ;  return new  destination location ( new url ( domain . get protocol (  )  node . get hostname (  )  port domain . get root path (  )   +  uri )  new uri ( domain . get protocol (  )  null node . get hostname (  )  port domain . get root path (  )   +  uri request . get query string (  )  null )  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\filter\routing\DestinationLocationBuilder.java,build endpoint location,private  destination location   (  destination destination  string uri  http servlet request request )  throws  malformedurl exception  uri syntax exception  {   list <  port >  local ports = local port list (  )  ;  return new  destination location ( new  endpoint url builder ( localhost local ports destination uri request )  . build (  )  new  endpoint uri builder ( local ports destination uri request )  . build (  )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\filter\routing\DestinationLocationBuilder.java,local port list,"private  list <  port >    (  )  {   linked list <  port >  list = new  linked list <  >  (  )  ;  if  ( localhost . get http port (  )   >  0 )   {  list . add ( new  port ( ""http"" localhost . get http port (  )  )  )  ;   }  if  ( localhost . get https port (  )   >  0 )   {  list . add ( new  port ( ""https"" localhost . get https port (  )  )  )  ;   }  return list ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\filter\routing\EndpointUriBuilder.java, endpoint uri builder,  (  list <  port >  local ports  destination destination  string uri  http servlet request request )  {  this . uri = uri ;  this . local ports = local ports ;  this . request = request ;  endpoint =  (  destination endpoint ) destination ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\filter\routing\EndpointUriBuilder.java,build,public uri   (  )  throws uri syntax exception  {   string scheme = determine scheme (  )  ;   string hostname = determine hostname ( scheme )  ;   string root path = endpoint . get root path (  )  ;   string path =  string uri utilities . concat uris ( root path uri )  ;  int port = scheme  =  =  null || hostname  =  =  null  ?   - 1 : endpoint . get port (  )  ;  return new uri ( hostname  !  =  null  ?  scheme : null null hostname port path request . get query string (  )  null )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\filter\routing\EndpointUriBuilder.java,determine hostname,"private  string   (  string scheme )  {  if  (  string utils . is blank ( scheme )  )   {  return null ;   }   port port = new  port ( scheme endpoint . get port (  )  )  ;  if  ( local ports . contains ( port )  &&  ( endpoint . get hostname (  )   =  =  null || ""localhost"" . equals ignore case ( endpoint . get hostname (  )  )  )  )   {  return null ;   }  return endpoint . get hostname (  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\filter\routing\EndpointUriBuilder.java,determine scheme,private  string   (  )  {   string scheme = endpoint . get protocol (  )  ;  if  (  string utils . is blank ( scheme )  || endpoint . get port (  )   <  =  0 )   {  return null ;   }  return scheme ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\filter\routing\EndpointUrlBuilder.java, endpoint url builder,  (  node localhost  list <  port >  local ports  destination destination  string uri  http servlet request request )  {  this . localhost = localhost ;  this . uri = uri ;  this . local ports = local ports ;  this . request = request ;  endpoint =  (  destination endpoint ) destination ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\filter\routing\EndpointUrlBuilder.java,build,public url   (  )  throws  malformedurl exception  {   port port = determine url port (  )  ;   string hostname = determine hostname (  )  ;   string root path = endpoint . get root path (  )  ;   string path =  string uri utilities . concat uris ( root path uri )  ;  return new url ( port . get protocol (  )  hostname port . get number (  )  path )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\filter\routing\EndpointUrlBuilder.java,determine hostname,private  string   (  )  {   string hostname = endpoint . get hostname (  )  ;  if  (  string utils . is blank ( hostname )  )   {  hostname = localhost . get hostname (  )  ;   }  return hostname ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\filter\routing\EndpointUrlBuilder.java,determine url port,"private  port   (  )  throws  malformedurl exception  {  if  (  !  string utils . is blank ( endpoint . get protocol (  )  )  )   {  int port = endpoint . get port (  )   <  =  0  ?  local port for protocol ( endpoint . get protocol (  )  )  : endpoint . get port (  )  ;  return new  port ( endpoint . get protocol (  )  port )  ;   }   port port = new  port ( request . get scheme (  )  request . get local port (  )  )  ;  if  ( local ports . contains ( port )  )   {  return port ;   }  throw new  malformedurl exception ( "" cannot determine destination port . "" )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\filter\routing\EndpointUrlBuilder.java,local port for protocol,private int   (  string protocol )  {  for  (   port port : local ports )   {  if  ( port . get protocol (  )  . equals ignore case ( protocol )  )   {  return port . get number (  )  ;   }   }  return 0 ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\proxy\common\AbstractRequestProcessor.java,exclude header,protected boolean   (  string header )  {  return exclude   headers   set . contains ( header . to lower case (  )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\proxy\HttpException.java, http exception,public   (  string message  throwable cause )  {  super ( message cause )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\proxy\DelegatingServletContext.java, delegating servlet context,public   (  servlet context context )  {  this . context = context ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\proxy\DelegatingServletContext.java,add filter,@ override public  filter registration .  dynamic   (  string filter name  class <  ?  extends  filter >  filter class )  {  return context . add filter ( filter name filter class )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\proxy\DelegatingServletContext.java,add listener,@ override public void   (  class <  ?  extends  event listener >  listener class )  {  context . add listener ( listener class )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\proxy\DelegatingServletContext.java,add servlet,@ override public  servlet registration .  dynamic   (  string servlet name  class <  ?  extends  servlet >  servlet class )  {  return context . add servlet ( servlet name servlet class )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\proxy\DelegatingServletContext.java,create filter,@ override public  < t extends  filter > t   (  class < t >  clazz )  throws  servlet exception  {  return context . create filter ( clazz )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\proxy\DelegatingServletContext.java,create listener,@ override public  < t extends  event listener > t   (  class < t >  clazz )  throws  servlet exception  {  return context . create listener ( clazz )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\proxy\DelegatingServletContext.java,create servlet,@ override public  < t extends  servlet > t   (  class < t >  clazz )  throws  servlet exception  {  return context . create servlet ( clazz )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\proxy\DelegatingServletContext.java,declare roles,@ override public void   (  string .  .  .  role names )  {  context . declare roles ( role names )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\proxy\DelegatingServletContext.java,get attribute,@ override public  object   (  string name )  {  return context . get attribute ( name )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\proxy\DelegatingServletContext.java,get attribute names,@ override public  enumeration <  string >    (  )  {  return context . get attribute names (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\proxy\DelegatingServletContext.java,get class loader,@ override public  class loader   (  )  {  return context . get class loader (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\proxy\DelegatingServletContext.java,get context,@ override public  servlet context   (  string uripath )  {  return context . get context ( uripath )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\proxy\DelegatingServletContext.java,get context path,@ override public  string   (  )  {  return context . get context path (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\proxy\DelegatingServletContext.java,get default session tracking modes,@ override public  set <  session tracking mode >    (  )  {  return context . get default session tracking modes (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\proxy\DelegatingServletContext.java,get effective major version,@ override public int   (  )  {  return context . get effective major version (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\proxy\DelegatingServletContext.java,get effective minor version,@ override public int   (  )  {  return context . get effective minor version (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\proxy\DelegatingServletContext.java,get effective session tracking modes,@ override public  set <  session tracking mode >    (  )  {  return context . get effective session tracking modes (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\proxy\DelegatingServletContext.java,get filter registration,@ override public  filter registration   (  string filter name )  {  return context . get filter registration ( filter name )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\proxy\DelegatingServletContext.java,get filter registrations,@ override public  map <  string  ?  extends  filter registration >    (  )  {  return context . get filter registrations (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\proxy\DelegatingServletContext.java,get init parameter,@ override public  string   (  string name )  {  return context . get init parameter ( name )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\proxy\DelegatingServletContext.java,get init parameter names,@ override public  enumeration <  string >    (  )  {  return context . get init parameter names (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\proxy\DelegatingServletContext.java,get jsp config descriptor,@ override public  jsp config descriptor   (  )  {  return context . get jsp config descriptor (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\proxy\DelegatingServletContext.java,get major version,@ override public int   (  )  {  return context . get major version (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\proxy\DelegatingServletContext.java,get mime type,@ override public  string   (  string file )  {  return context . get mime type ( file )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\proxy\DelegatingServletContext.java,get minor version,@ override public int   (  )  {  return context . get minor version (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\proxy\DelegatingServletContext.java,get named dispatcher,@ override public  request dispatcher   (  string name )  {  return context . get named dispatcher ( name )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\proxy\DelegatingServletContext.java,get real path,@ override public  string   (  string path )  {  return context . get real path ( path )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\proxy\DelegatingServletContext.java,get request dispatcher,@ override public  request dispatcher   (  string path )  {  return context . get request dispatcher ( path )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\proxy\DelegatingServletContext.java,get resource,@ override public url   (  string path )  throws  malformedurl exception  {  return context . get resource ( path )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\proxy\DelegatingServletContext.java,get resource as stream,@ override public  input stream   (  string path )  {  return context . get resource as stream ( path )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\proxy\DelegatingServletContext.java,get resource paths,@ override public  set <  string >    (  string path )  {  return context . get resource paths ( path )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\proxy\DelegatingServletContext.java,get server info,@ override public  string   (  )  {  return context . get server info (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\proxy\DelegatingServletContext.java,get servlet,@ override public  servlet   (  string name )  throws  servlet exception  {  return context . get servlet ( name )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\proxy\DelegatingServletContext.java,get servlet context name,@ override public  string   (  )  {  return context . get servlet context name (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\proxy\DelegatingServletContext.java,get servlet names,@ override public  enumeration <  string >    (  )  {  return context . get servlet names (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\proxy\DelegatingServletContext.java,get servlet registration,@ override public  servlet registration   (  string servlet name )  {  return context . get servlet registration ( servlet name )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\proxy\DelegatingServletContext.java,get servlet registrations,@ override public  map <  string  ?  extends  servlet registration >    (  )  {  return context . get servlet registrations (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\proxy\DelegatingServletContext.java,get servlets,@ override public  enumeration <  servlet >    (  )  {  return context . get servlets (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\proxy\DelegatingServletContext.java,get session cookie config,@ override public  session cookie config   (  )  {  return context . get session cookie config (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\proxy\DelegatingServletContext.java,get virtual server name,@ override public  string   (  )  {  return context . get virtual server name (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\proxy\DelegatingServletContext.java,log,@ override public void   (  string message  throwable throwable )  {  context . log ( message throwable )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\proxy\DelegatingServletContext.java,remove attribute,@ override public void   (  string name )  {  context . remove attribute ( name )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\proxy\DelegatingServletContext.java,set attribute,@ override public void   (  string name  object object )  {  context . set attribute ( name object )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\proxy\DelegatingServletContext.java,set init parameter,@ override public boolean   (  string name  string value )  {  return context . set init parameter ( name value )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\proxy\DelegatingServletContext.java,set session tracking modes,@ override public void   (  set <  session tracking mode >  session tracking modes )  {  context . set session tracking modes ( session tracking modes )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\proxy\HttpRequestDispatcher.java, http request dispatcher,public   (  request proxy service proxy service  string target host )  {  this . target host = target host ;  this . proxy service = proxy service ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\proxy\HttpRequestDispatcher.java,forward,"@ override public void   (  servlet request request  servlet response response )  throws  servlet exception  io exception  {  if  ( proxy service  =  =  null )   {  log . warn ( "" request  proxy  service is not set .  .  .  ignoring request"" )  ;  return "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\proxy\HttpRequestDispatcher.java,include,"@ override public void   (  servlet request request  servlet response response )  throws  servlet exception  io exception  {  throw new  unsupported operation exception ( ""repose does not support include . "" )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\proxy\ServletContextWrapper.java, servlet context wrapper,"public   (  servlet context context  string context name  request proxy service request proxy service )  {  super ( context )  ;  this . target context = context name ;  this . proxy service = request proxy service ;  uri uri = null ;   string target host port = null ;  try  {  uri = new uri ( target context )  ;  target host port = uri . get host (  )   +  "":""  +  uri . get port (  )  ;   }  catch  (  uri syntax exception ex )   {  log . error ( "" invalid target context: ""  +  target context ex )  ;   }  this . target = target host port ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\proxy\ServletContextWrapper.java,clean path,"private  string   (  string uri )  {  return uri  =  =  null  ?  """" : uri . split ( ""\\ ? "" ) [0] ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\proxy\ServletContextWrapper.java,get context,"@ override public  servlet context   (  string uripath )  {  log . debug ( "" getting a context for  {  } "" uripath )  ;  final  string uri = clean path ( uripath )  ;  if  ( uri . matches ( ""^https ? : /  /  . *"" )  )   {  return new  servlet context wrap"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\proxy\ServletContextWrapper.java,get dispatcher,"private  request dispatcher   (  )  {   request dispatcher dispatcher = null ;  log . debug ( "" getting request matcher for  {  } "" target )  ;  if  ( target  !  =  null )   {  return new  http request dispatcher ( proxy service target context )  ;   }  return dispatcher ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\proxy\ServletContextWrapper.java,get request dispatcher,"@ override public  request dispatcher   (  string path )  {   request dispatcher dispatcher ;  if  ( target context . matches ( ""^https ? : /  /  . *"" )  )   {  dispatcher = get dispatcher (  )  ;  if  ( dispatcher  =  =  null )   {  dispatcher = new  htt"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\config\impl\ConfigurationResourceWatcher.java, configuration resource watcher,public   (  event service event manager )  {  this . event manager = event manager ;  watch map = new  concurrent hash map <  >  (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\config\impl\ConfigurationResourceWatcher.java,run,"@ override public void   (  )  {  for  (   configuration resource resource : watch map . values (  )  )   {  try  {  if  ( resource . updated (  )  )   {  event manager . new event (  configuration event . update resource )  ;  log . info ( "" updated ""  +"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\config\impl\ConfigurationResourceWatcher.java,stop watching,public void   (  string resource name )  {  watch map . remove ( resource name )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\config\impl\ConfigurationResourceWatcher.java,watch,public void   (  configuration resource resource )  {  watch map . put ( resource . name (  )  resource )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\config\impl\ConfigurationServiceException.java, configuration service exception,public   (  string message )  {  super ( message )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\config\impl\ParserListenerPair.java, parser listener pair,public   (  update listener listener  configuration parser parser  string filter name )  {  this . listener = new  weak reference <  >  ( listener )  ;  this . parser = parser ;  class loader =  thread . current thread (  )  . get context class loader (  )  ;  this . filter name = filter name ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\config\impl\ParserListenerPair.java,get class loader,public  class loader   (  )  {  return class loader ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\config\impl\ParserListenerPair.java,get filter name,public  string   (  )  {  return filter name ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\config\impl\ParserListenerPair.java,get listener,public  update listener   (  )  {  return listener . get (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\config\impl\ParserListenerPair.java,get parser,public  configuration parser   (  )  {  return parser ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\datastore\distributed\impl\ehcache\ReposeLocalCache.java, repose local cache,@ inject public   (  datastore service datastore service )  {  this . datastore service = datastore service ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\config\impl\ConfigurationUpdateManagerImpl.java, configuration update manager impl,@ inject public   (  event service event manager  threading service threading service )  {  this . event manager = event manager ;  this . threading service = threading service ;  listener map = new  concurrent hash map <  >  (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\datastore\distributed\impl\ehcache\ReposeLocalCache.java,get cache key,"private  string   (  string tenant id  string token )  {   string key ;  if  (  string utils . is not blank ( tenant id )  )   {  key = tenant id  +  "":""  +  token ;   }  else  {  key = token ;   }  return key ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\config\impl\ConfigurationUpdateManagerImpl.java,config update,"private void   (  update listener upd  object cfg )  throws  update failed exception  {  upd . configuration updated ( cfg )  ;  log . debug ( "" configuration  updated: ""  +  cfg . to string (  )  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\config\impl\ConfigurationUpdateManagerImpl.java,destroy,@ pre destroy @ override public void   (  )  {  resource watcher thread . destroy (  )  ;  listener map . clear (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\datastore\distributed\impl\ehcache\ReposeLocalCache.java,get encoded user cache key,private  string   (  string user )  throws  no such algorithm exception  {  final byte[] hash bytes = md5 message digest factory . get instance (  )  . new message digest (  )  . digest ( user . get bytes (  standard charsets . utf   8 )  )  ;  return uuid encoding provider . get instance (  )  . encode ( hash bytes )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\datastore\distributed\impl\ehcache\ReposeLocalCache.java,remove all cache data,@ override @ managed operation public void   (  )  {  datastore service . get default datastore (  )  . remove all (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\config\impl\ConfigurationUpdateManagerImpl.java,initialize,@ post construct public void   (  )  {  resource watcher = new  configuration resource watcher ( event manager )  ;  final  poller poller logic = new  poller ( resource watcher 15000 )  ;  resource watcher thread = new  destroyable thread wrapper ( thread
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\config\impl\ConfigurationUpdateManagerImpl.java,on event,@ override public void   (  event <  configuration event  configuration resource >  e )  {  final  string payload name = e . payload (  )  . name (  )  ;   map <  integer  parser listener pair >  listeners = listener map . get ( payload name )  ;  log . i
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\config\impl\ConfigurationUpdateManagerImpl.java,register listener,@ override public  < t > void   (  update listener < t >  listener  configuration resource resource  configuration parser < t >  parser  string filter name )  {  synchronized  ( listener lock )   {   concurrent hash map <  integer  parser listener pair > 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\config\impl\ConfigurationServiceImpl.java, configuration service impl,@ inject public   (  configuration update manager configuration update manager @ value (  repose spring properties . core . config   root )   string config root )  {  this . update manager = configuration update manager ;  this . config root = config root
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\config\impl\ConfigurationServiceImpl.java, parser pool key,public   (  class clazz url xsd url )  {  this . clazz = clazz ;  this . xsd url = xsd url ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\config\impl\ConfigurationUpdateManagerImpl.java,unregister listener,@ override public  < t > void   (  update listener < t >  listener  configuration resource resource )  {  synchronized  ( listener lock )   {   concurrent hash map <  integer  parser listener pair >  resource listeners = listener map . get ( resource . na
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\config\impl\ConfigurationServiceImpl.java,destroy,@ override public void   (  )  {  parser pool cache . clear (  )  ;  update manager . destroy (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\config\impl\ConfigurationServiceImpl.java,equals,@ override public boolean   (  object o )  {  if  ( this  =  =  o )   {  return true ;   }  if  ( o  =  =  null || get class (  )   !  =  o . get class (  )  )   {  return false ;   }   parser pool key that =  (  parser pool key ) o ;  if  ( clazz  !  =  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\config\impl\ConfigurationServiceImpl.java,get pooled jaxb configuration parser,"private  < t >  configuration parser < t >    (  class < t >  configuration class url xsd stream source )  {   parser pool key pk = new  parser pool key ( configuration class xsd stream source )  ;  final  weak reference <  configuration parser >  parser reference = parser pool cache . get ( pk )  ;   configuration parser < t >  parser = parser reference  !  =  null  ?  parser reference . get (  )  : null ;  log . debug ( "" parser found from the reference is  {  } "" parser )  ;   class loader loader = configuration class . get class loader (  )  ;  if  ( parser  =  =  null )   {  log . debug ( "" creating new jaxb configuration parser for the given configuration class:  {  } "" configuration class )  ;  try  {  parser = new  templating jaxb configuration parser <  >  ( configuration class xsd stream source loader )  ;   }  catch  (  jaxb exception e )   {  throw new  configuration service exception ( "" failed to create a jaxb context for a configuration parser ! "" e )  ;   }  parser pool cache . put ( pk new  weak reference <  >  ( parser )  )  ;   }  return parser ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\config\impl\ConfigurationServiceImpl.java,get resource resolver,@ override public  configuration resource resolver   (  )  {  return this . resource resolver ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\config\impl\ConfigurationServiceImpl.java,hash code,@ override public int   (  )  {  int result = clazz  !  =  null  ?  clazz . hash code (  )  : 0 ;  result = 31 * result  +   ( xsd url  !  =  null  ?  xsd url . hash code (  )  : 0 )  ;  return result ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\config\impl\ConfigurationServiceImpl.java,init,"@ post construct public void   (  )  {  log . debug ( "" loading configuration files from directory:  {  } "" config root )  ;  if  (  string utils . is blank ( config root )  )   {  throw new  power api context exception ( "" power api requires a configurat"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\config\impl\ConfigurationServiceImpl.java,set resource resolver,public void   (  configuration resource resolver resource resolver )  {  this . resource resolver = resource resolver ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\config\impl\ConfigurationServiceImpl.java,subscribe to,@ override public  < t > void   (  string filter name  string configuration name  update listener < t >  listener  configuration parser < t >  custom parser boolean send notification now )  {  final  configuration resource resource = resource resolver . r
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\config\impl\ConfigurationServiceImpl.java,unsubscribe from,@ override public void   (  string configuration name  update listener listener )  {  update manager . unregister listener ( listener resource resolver . resolve ( configuration name )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\datastore\distributed\impl\ehcache\ReposeLocalCache.java,remove groups,"@ override @ managed operation public boolean   (  string tenant id  string token )  {  boolean removed = datastore service . get default datastore (  )  . remove ( auth   group   cache   prefix  +  "" . ""  +  get cache key ( tenant id token )  )  ;  log ."
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\datastore\distributed\impl\ehcache\ReposeLocalCache.java,remove limits,@ override @ managed operation public boolean   (  string user id )  {  boolean removed = remove with unencoded user ( user id )  ;  if  (  ! removed )   {  removed = remove with encoded user ( user id )  ;   }  return removed ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\datastore\distributed\impl\ehcache\ReposeLocalCache.java,remove token and roles,"@ override @ managed operation public boolean   (  string tenant id  string token )  {  boolean removed = datastore service . get default datastore (  )  . remove ( auth   token   cache   prefix  +  "" . ""  +  get cache key ( tenant id token )  )  ;  log ."
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\datastore\distributed\impl\ehcache\ReposeLocalCache.java,remove with encoded user,"private boolean   (  string user id )  {  boolean removed = false ;  try  {  removed = datastore service . get default datastore (  )  . remove ( get encoded user cache key ( user id )  )  ;  log . info ( "" removed rate limits from cache: ""  +  removed  +   (  string utils . is not blank ( user id )   ?  ""  ( ""  +  user id  +  "" ) "" : """" )  )  ;   }  catch  (   no such algorithm exception e )   {  log . error ( "" your instance of the  java  runtime  environment does not support the md5 hash algorithm . "" e )  ;   }  return removed ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\datastore\distributed\impl\ehcache\ReposeLocalCache.java,remove with unencoded user,private boolean   (  string user id )  {  return datastore service . get default datastore (  )  . remove ( user id )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\deploy\ArtifactDirectoryWatcher.java, artifact directory watcher,public   (  event service event manager reference )  {  this . event manager reference = event manager reference ;  this . check interval in milliseconds = default   directory   check   interval ;  artifact modification times = new  hash map <  >  (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\deploy\ArtifactDirectoryWatcher.java,check artifacts,"public synchronized boolean   (  )  {  final  set <  string >  removed artifacts = new  hash set <  >  ( artifact modification times . key set (  )  )  ;  if  ( artifact directory  =  =  null )   {  throw new  deployment directory not found exception ( "" the  power api configured deployment directory is null .   please check the  power api configuration file . "" )  ;   }   list <  artifact directory item >  items = new  array list <  >  (  )  ;  for  (   string artifact path : artifact directory . list (  ear filename filter . get instance (  )  )  )   {  final  file artifact file = new  file ( artifact directory artifact path )  ;  final long last modified time = artifact file . last modified (  )  ;  if  ( artifact modification times . contains key ( artifact path )  )   {  final long last recorded modified time = artifact modification times . get ( artifact path )  ;  removed artifacts . remove ( artifact path )  ;  if  ( last recorded modified time  !  =  last modified time )   {  artifact modification times . put ( artifact path last modified time )  ;  items . add ( new  artifact directory item (  application artifact event . updated artifact file . get absolute path (  )  )  )  ;   }   }  else  {  items . add ( new  artifact directory item (  application artifact event . new artifact file . get absolute path (  )  )  )  ;   }  artifact modification times . put ( artifact path last modified time )  ;   }  for  (   string artifact path : removed artifacts )   {  final  file artifact file = new  file ( artifact directory artifact path )  ;  artifact modification times . remove ( artifact path )  ;  items . add ( new  artifact directory item (  application artifact event . deleted artifact file . get absolute path (  )  )  )  ;   }  if  (  ! items . is empty (  )  )   {  event manager reference . new event (  application artifact event . artifacts   modified items )  ;   }  return  ! items . is empty (  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\deploy\ArtifactDirectoryWatcher.java,destroy,@ override public void   (  )  {  should continue = false ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\deploy\ArtifactDirectoryWatcher.java,run,"@ override public synchronized void   (  )  {  should continue = true ;  while  ( should continue )   {  check artifacts (  )  ;  try  {  wait ( check interval in milliseconds )  ;   }  catch  (   interrupted exception ie )   {  log . info ( "" artifact di"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\deploy\ArtifactDirectoryWatcher.java,update artifact directory location,public synchronized void   (  file new artifact directory )  {  artifact directory = new artifact directory ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\deploy\ArtifactDirectoryWatcher.java,update check interval,public synchronized void   ( int check interval )  {  check interval in milliseconds = check interval ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\deploy\ArtifactManager.java, artifact manager,@ inject public   (  event service event service  configuration service configuration service  threading service threading service )  {  this . event service = event service ;  this . configuration service = configuration service ;  this . threading servi
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\deploy\ArtifactManager.java,all artifacts loaded,@ override public boolean   (  )  {  return  ! container configuration listener . get dir watcher (  )  . check artifacts (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\deploy\ArtifactManager.java,delete,"private void   (  file file )  {  if  ( file . is directory (  )  )   {  for  (   file c : file . list files (  )  )   {  delete ( c )  ;   }   }  if  (  ! file . delete (  )  )   {  log . warn ( "" failure to delete file ""  +  file . get name (  )   +  "" on repose shutdown . "" )  ;   }   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\deploy\ArtifactManager.java,destroy,"@ override @ pre destroy public void   (  )  {  log . debug ( "" artifact manager going down ! "" )  ;  class loader context map . clear (  )  ;  try  {  event service . squelch ( this  application artifact event . class )  ;  if  ( container configuration "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\deploy\ArtifactManager.java,get loaded applications,@ override public  collection <  ear class loader context >    (  )  {  return  collections . unmodifiable collection ( class loader context map . values (  )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\deploy\ArtifactManager.java,has filter,@ override public boolean   (  string filter name )  {  for  (   ear class loader context ctx : class loader context map . values (  )  )   {  if  ( ctx . get ear descriptor (  )  . get registered filters (  )  . key set (  )  . contains ( filter name )  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\deploy\ArtifactManager.java,init,@ post construct public void   (  )  {  this . container configuration listener = new  container configuration listener ( event service )  ;  watcher thread = new  destroyable thread wrapper ( threading service . new thread ( container configuration liste
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\deploy\ArtifactManager.java,load artifact,"private  ear class loader context   (  string archive path )  {  final  file archive = new  file ( archive path )  ;   ear class loader context context = null ;  try  {   file unpack root = new  file ( container configuration listener . get deployment directory (  )  unpack prefix )  ;  unpack root . mkdirs (  )  ;  container configuration listener . validate deployment directory (  )  ;   ear class provider provider = new  ear class provider ( archive unpack root )  ;   class loader ear class loader = provider . get class loader (  )  ;   ear descriptor descriptor = provider . get ear descriptor (  )  ;  context = new  really simple ear class loader context ( descriptor ear class loader )  ;  artifact application names . put ( archive . get absolute path (  )  context . get ear descriptor (  )  . get application name (  )  )  ;   }  catch  (   ear processing exception e )   {  log . error ( "" failure in loading artifact  \"" {  } \"" . "" archive . get absolute path (  )  e )  ;   }  return context ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\deploy\ArtifactManager.java,on event,@ override public void   (  event <  application artifact event  list <  artifact directory item >  >  e )  {  final  list <  artifact directory item >  artifacts = e . payload (  )  ;   list <  ear class loader context >  contexts = new  array list <  > 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\deploy\ArtifactManager.java,only once,@ override public void   (  event <  power filter event  long >  e )  {  watcher thread . start (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\deploy\DeploymentDirectoryNotFoundException.java, deployment directory not found exception,public   (  string message )  {  super ( message )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\deploy\ContainerConfigurationListener.java, container configuration listener,public   (  event service event service )  {  dir watcher = new  artifact directory watcher ( event service )  ;  dir watcher . update artifact directory location ( deployment directory )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\deploy\ContainerConfigurationListener.java,configuration updated,@ override public synchronized void   (  container configuration configuration object )  {  if  ( configuration object . get deployment config (  )   !  =  null )   {  final  artifact directory ad = configuration object . get deployment config (  )  . get
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\deploy\ContainerConfigurationListener.java,get deployment directory,public  file   (  )  {  return deployment directory ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\deploy\ContainerConfigurationListener.java,get dir watcher,public synchronized  artifact directory watcher   (  )  {  return dir watcher ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\deploy\ContainerConfigurationListener.java,is auto clean,public synchronized boolean   (  )  {  return auto clean ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\deploy\ContainerConfigurationListener.java,is initialized,@ override public boolean   (  )  {  return is initialized ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\deploy\ContainerConfigurationListener.java,validate deployment directory,"public synchronized void   (  )  {  if  ( deployment directory  =  =  null )   {  throw new  illegal state exception ( "" the  power api configured deployment directory is null .   please check the  power api configuration file . "" )  ;   }  else if  (  ! deployment directory . exists (  )  )   {  throw new  illegal state exception ( "" the deployment directory ""  +  deployment directory . get path (  )   +  "" does not exist .   please "" +  ""create the  power api deployment directory . "" )  ;   }  else if  (  ! deployment directory . can write (  )  )   {  throw new  illegal state exception ( "" power api does not have permission to write to the deployment directory ""  +  deployment directory . get path (  )   +  "" .   please ensure the directory is configured with permissions 760 "" +  ""and has the correct owner and group . "" )  ;   }  else if  (  ! deployment directory . can execute (  )  )   {  throw new  illegal state exception ( "" power api does not have permission to execute against the deployment directory ""  +  deployment directory . get path (  )   +  "" .   please ensure the directory is configured with permissions 760 "" +  ""and has the correct owner and group . "" )  ;   }   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\deploy\ArtifactDirectoryItem.java, artifact directory item,public   (  application artifact event event  string path )  {  this . path = path ;  this . event = event ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\deploy\ArtifactDirectoryItem.java,get event,public  application artifact event   (  )  {  return event ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\deploy\ArtifactDirectoryItem.java,get path,public  string   (  )  {  return path ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\deploy\EarFilenameFilter.java,accept,"@ override public boolean   (  file dir  string name )  {  return name . length (  )   >  ear   extension   length && "" . ear"" . equals ignore case ( name . substring ( name . length (  )   -  ear   extension   length )  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\deploy\EarFilenameFilter.java,get instance,public static  filename filter   (  )  {  return instance ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\event\ComparableClassWrapper.java, comparable class wrapper,public   (  class <  ?  extends t >  wrapped class )  {  this . wrapped class = wrapped class ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\event\ComparableClassWrapper.java,compare to,@ override public int   (  comparable class wrapper < t >  o )  {  return wrapped class . get canonical name (  )  . compare to ( o . wrapped class . get canonical name (  )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\event\ComparableClassWrapper.java,equals,@ override public boolean   (  object o )  {  if  (  !  ( o instanceof  comparable class wrapper )  )   {  return false ;   }  return compare to (  (  comparable class wrapper < t >  ) o )   =  =  0 ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\event\ComparableClassWrapper.java,hash code,@ override public int   (  )  {  return hash  +   ( this . wrapped class  !  =  null  ?  this . wrapped class . hash code (  )  : 0 )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\event\EventListenerDescriptor.java, event listener descriptor,public   (  event listener < t  ?  >  listener  collection < t >  targeted events )  {  this . subscriptions = new  hash set <  >  ( targeted events )  ;  this . listener = listener ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\event\EventListenerDescriptor.java,answers to,public boolean   ( t type to look for )  {  for  (  t event type : subscriptions )   {  if  ( event type  =  =  type to look for )   {  return true ;   }   }  return false ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\event\EventListenerDescriptor.java,get listener,public  event listener < t  ?  >    (  )  {  return listener ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\event\EventListenerDescriptor.java,listen for,public void   (  collection < t >  types )  {  subscriptions . add all ( types )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\event\EventListenerDescriptor.java,silence,public boolean   (  collection < t >  types )  {  final  list < t >  types to remove = new  linked list <  >  ( types )  ;  final  iterator < t >  targeted event iterator = subscriptions . iterator (  )  ;  while  ( targeted event iterator . has next (  )  )   {  final t event = targeted event iterator . next (  )  ;  if  ( types to remove . remove ( event )  )   {  targeted event iterator . remove (  )  ;   }   }  return subscriptions . is empty (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\event\impl\SimpleEvent.java, simple event,public   ( t type p payload  event service em )  {  this . type = type ;  this . payload = payload ;  this . em = em ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\event\impl\SimpleEvent.java,event manager,@ override public  event service   (  )  {  return em ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\event\impl\SimpleEvent.java,payload,@ override public p   (  )  {  return payload ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\event\impl\SimpleEvent.java,type,@ override public t   (  )  {  return type ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\event\EventServiceImpl.java, event service impl,public   (  )  {  listener map = new  tree map <  >  (  )  ;  event queue = new  linked list <  >  (  )  ;  event queue lock = new  reentrant lock (  )  ;  queue not empty = event queue lock . new condition (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\event\EventServiceImpl.java,get or create listener set,private  < t extends  enum >  set <  event listener descriptor >    (  class < t >  e )  {  final  comparable class wrapper <  enum >  class wrapper = new  comparable class wrapper <  >  ( e )  ;   set <  event listener descriptor >  listener set = listener map . get ( class wrapper )  ;  if  ( listener set  =  =  null )   {  listener set = new  hash set <  >  (  )  ;  listener map . put ( class wrapper listener set )  ;   }  return listener set ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\event\EventServiceImpl.java,listen,"@ override public  < t extends  enum > void   (  event listener < t  ?  >  el t .  .  .  events )  {  if  ( events  =  =  null || events . length  =  =  0 )   {  throw new  illegal argument exception ( "" must subscribe to at least one event type"" )  ;   }"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\event\EventServiceImpl.java,new event,@ override public void   (  enum e  object payload )  {  event queue lock . lock (  )  ;  try  {  event queue . add ( new  simple event ( e payload this )  )  ;  if  ( event queue . size (  )   =  =  1 )   {  queue not empty . signal all (  )  ;   }   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\event\EventServiceImpl.java,next dispatcher,@ override public synchronized  event dispatcher   (  )  throws  interrupted exception  {  final  event e = next event (  )  ;  return new  event dispatcher impl ( e  collections . unmodifiable set ( get or create listener set ( e . type (  )  . get class
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\event\EventServiceImpl.java,next event,"private  event   (  )  throws  interrupted exception  {  event queue lock . lock (  )  ;  try  {  while  ( event queue . is empty (  )  )   {  queue not empty . await (  )  ;   }  return event queue . poll (  )  ;   }  catch  (   interrupted exception ie )   {  log . trace ( "" power  proxy  event  manager  interrupted"" ie )  ;   thread . current thread (  )  . interrupt (  )  ;  throw ie ;   }  finally  {  event queue lock . unlock (  )  ;   }   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\event\EventServiceImpl.java,regsiter listener,private  < t extends  enum > void   (  event listener < t  ?  >  el  class < t >  enum class  collection < t >  events )  {  boolean found = false ;  final  set <  event listener descriptor >  descriptor set = get or create listener set ( enum class )  ;  for  (   event listener descriptor < t >  descriptor : descriptor set )   {  if  ( descriptor . get listener (  )   =  =  el )   {  descriptor . listen for ( events )  ;  found = true ;  break ;   }   }  if  (  ! found )   {  descriptor set . add ( new  event listener descriptor <  >  ( el events )  )  ;   }   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\event\EventServiceImpl.java,squelch,"@ override @ suppress warnings ( ""squid:s134"" )  public  < t extends  enum > void   (  event listener < t  ?  >  el t .  .  .  events )  {  if  ( events  =  =  null || events . length  =  =  0 )   {  throw new  illegal argument exception ( "" must unsubscr"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\event\EventDispatcherImpl.java, event dispatcher impl,public   (  event e  set <  event listener descriptor >  listeners )  {  this . listeners = listeners ;  this . e = e ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\event\EventDispatcherImpl.java,dispatch,@ override public void   (  )  {  for  (   event listener descriptor event listener wrapper : listeners )   {  if  ( event listener wrapper . answers to ( e . type (  )  )  )   {  event listener wrapper . get listener (  )  . on event ( e )  ;   }   }   }
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\event\EventDispatcherImpl.java,get event,@ override public  event   (  )  {  return e ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\event\PowerProxyEventKernel.java, power proxy event kernel,@ inject public   (  event service event manager  threading service impl threading service )  {  this . event manager = event manager ;  this . threading service = threading service ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\event\PowerProxyEventKernel.java,destroy,@ override @ pre destroy public void   (  )  {  should continue = false ;  event kernel thread . destroy (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\event\PowerProxyEventKernel.java,init,"@ post construct public void   (  )  {  event kernel thread = new  destroyable thread wrapper ( threading service . new thread ( this "" event  kernel  thread"" )  this )  ;  event kernel thread . start (  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\event\PowerProxyEventKernel.java,run,"@ override @ suppress warnings ( ""squid:s2583"" )  public void   (  )  {  should continue = true ;  try  {  while  ( should continue )   {  final  event dispatcher dispatcher = event manager . next dispatcher (  )  ;  if  ( log . is debug enabled (  )  )  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\event\listener\SingleFireEventListener.java, single fire event listener,public   (  class < t >  event class )  {  this . event class = event class ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\event\listener\SingleFireEventListener.java,on event,@ override public synchronized void   (  event < t p >  e )  {  if  (  ! fired )   {  only once ( e )  ;  fired = true ;   }  e . event manager (  )  . squelch ( this event class )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\jmx\ConfigurationInformationCompositeDataBuilder.java, configuration information composite data builder,public   (  filter information filter )  {  this . filter = filter ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\jmx\ConfigurationInformationCompositeDataBuilder.java,get description,"@ override public  string   (  )  {  return "" information about filter ""  +  filter . get name (  )   +  "" . "" ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\jmx\ConfigurationInformationCompositeDataBuilder.java,get item descriptions,"@ override public  string[]   (  )  {  return new  string[] { "" the filter id in the filter chain . "" "" the filter name . "" "" the uri  reg  ex for this filter . "" "" the configuration file specified for this filter instance . "" "" boolean indication of conf"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\jmx\ConfigurationInformationCompositeDataBuilder.java,get item name,@ override public  string   (  )  {  return filter . get name (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\jmx\ConfigurationInformationCompositeDataBuilder.java,get item names,"@ override public  string[]   (  )  {  return new  string[] { ""id"" ""name"" ""regex"" ""configuration"" ""successfully initialized"" ""successfully loaded configurations"" ""loading failed configurations"" }  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\jmx\ConfigurationInformationCompositeDataBuilder.java,get item types,@ override public  open type[]   (  )  {  return new  open type[] {  simple type . string  simple type . string  simple type . string  simple type . string  simple type . boolean  simple type . string  simple type . string }  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\jmx\ConfigurationInformationCompositeDataBuilder.java,get items,@ override public  object[]   (  )  {  final  list <  object >  items = new  array list <  >  (  )  ;  items . add ( filter . get id (  )  )  ;  items . add ( filter . get name (  )  )  ;  items . add ( filter . get regex (  )  )  ;  items . add ( filter 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\jmx\ConfigurationInformation.java, configuration information,@ inject public   (  configuration service configuration service )  {  this . configuration service = configuration service ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\jmx\ConfigurationInformation.java,configuration updated,@ override public void   (  system model system model )  {  initialized = false ;   map <  string  list <  string >  >  all nodes =  system model interrogator . all cluster nodes ( system model )  ;  for  (   map .  entry <  string  list <  string >  >  e
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\jmx\ConfigurationInformation.java,destroy,"@ pre destroy public void   (  )  {  configuration service . unsubscribe from ( ""system - model . cfg . xml"" system model listener )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\jmx\ConfigurationInformation.java,get per node filter information,"@ override @ managed operation ( description = "" gets all the per - node - filter information that this host's system model knows about"" )  public  map <  string  list <  composite data >  >    (  )  throws  open data exception  {   hash map <  string  li"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\jmx\ConfigurationInformation.java,init,"@ post construct public void   (  )  {  log . info ( "" created  configuration information m bean"" )  ;  system model listener = new  system model listener (  )  ;  configuration service . subscribe to ( ""system - model . cfg . xml"" system model listener  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\jmx\ConfigurationInformation.java,is initialized,@ override public boolean   (  )  {  return initialized ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\jmx\ConfigurationInformation.java,is node ready,"@ override @ managed attribute ( description = ""tells you if this node is ready"" )  public boolean   (  string cluster id  string node id )  {   boolean result = node status . get ( key ( cluster id node id )  )  ;  if  ( result  =  =  null )   {  return "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\jmx\ConfigurationInformation.java,key,"private  string   (  string cluster id  string node id )  {  return cluster id  +  "" - ""  +  node id ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\jmx\ConfigurationInformation.java,update node status,public void   (  string cluster id  string node id boolean ready )  {  node status . put ( key ( cluster id node id )  ready )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\jmx\FilterInformation.java, filter information,public   (  string id  string name  string regex  string configuration  boolean is configuaration loaded )  {  this . id = id ;  this . name = name ;  this . regex = regex ;  this . configuration = configuration ;  this . is configuaration loaded = is configuaration loaded ;  success configuration loadinginformation = new  hash map <  string  string[] >  (  )  ;  failed configuration loading information = new  hash map <  string  string[] >  (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\jmx\FilterInformation.java,get configuration,public  string   (  )  {  return configuration ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\jmx\FilterInformation.java,get failed configuration loading information,public  map <  string  string[] >    (  )  {  return failed configuration loading information ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\jmx\FilterInformation.java,get id,public  string   (  )  {  return id ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\jmx\FilterInformation.java,get is configuaration loaded,public  boolean   (  )  {  return is configuaration loaded ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\jmx\FilterInformation.java,get name,public  string   (  )  {  return name ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\jmx\FilterInformation.java,get regex,public  string   (  )  {  return regex ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\jmx\FilterInformation.java,get success configuration loadinginformation,public  map <  string  string[] >    (  )  {  return success configuration loadinginformation ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\jmx\FilterInformation.java,set configuaration loaded,public void   ( boolean is configuaration loaded )  {  this . is configuaration loaded = is configuaration loaded ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\jmx\FilterInformation.java,set failed configuration loading information,public void   (  map failed configuration loading information )  {  this . failed configuration loading information = failed configuration loading information ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\jmx\FilterInformation.java,set success configuration loadinginformation,public void   (  map success configuration loadinginformation )  {  this . success configuration loadinginformation = success configuration loadinginformation ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\logging\LoggingServiceImpl.java, logging service impl,@ inject public   (  configuration service configuration service )  {  this . configuration service = configuration service ;  this . configuration listener = new  container configuration listener (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\logging\LoggingServiceImpl.java,configuration updated,@ override public void   (  container configuration configuration object )  {  if  ( configuration object . get deployment config (  )   !  =  null )   {  update logging configuration ( configuration object . get deployment config (  )  . get logging conf
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\logging\LoggingServiceImpl.java,destroy,"@ pre destroy public void   (  )  {  configuration service . unsubscribe from ( ""container . cfg . xml"" configuration listener )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\logging\LoggingServiceImpl.java,init,"@ post construct @ suppress warnings ( ""squid:s106"" )  public void   (  )  {  url container xsdurl = get class (  )  . get resource ( "" / meta - inf / schema / container / container - configuration . xsd"" )  ;  configuration service . subscribe to ( ""cont"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\logging\LoggingServiceImpl.java,is initialized,@ override public boolean   (  )  {  return is initialized ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\logging\LoggingServiceImpl.java,update logging configuration,"@ override public void   (  string config file name )  {  if  ( config file name  =  =  null )   {  log . debug ( "" requested to reload a null configuration . "" )  ;   }  else if  ( config file name . equals ( current config file name )  )   {  log . debu"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\destinations\impl\DestinationInfoLogic.java, destination info logic,private   (  destination info logic destination info logic )  {  data store = new  destination info store ( destination info logic . data store )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\destinations\impl\DestinationInfoLogic.java,accumulate response time,@ override public void   ( long response time )  {  data store . set accumulated response time ( data store . get accumulated response time (  )   +  response time )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\destinations\impl\DestinationInfoLogic.java,copy,@ override public  destination info   (  )  {  return new  destination info logic ( this )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\destinations\impl\DestinationInfoLogic.java,elapsed time in seconds,public double   (  )  {  return  (  system . current time millis (  )   -  data store . get start time (  )  )   /  double   thousand ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\destinations\impl\DestinationInfoLogic.java,equals,@ override public boolean   (  object o )  {  if  ( this  =  =  o )   {  return true ;   }  if  ( o instanceof  destination info logic )   {   destination info logic other =  (  destination info logic ) o ;  return  objects . equal ( this . data store oth
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\destinations\impl\DestinationInfoLogic.java,get accumulated response time,public long   (  )  {  return data store . get accumulated response time (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\destinations\impl\DestinationInfoLogic.java,get average response time,@ override public double   (  )  {  double average response time =  ( double ) data store . get total responses (  )   /  data store . get accumulated response time (  )  ;  if  (  double . is nan ( average response time )  )   {  return double   zero ;  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\destinations\impl\DestinationInfoLogic.java,get destination id,@ override public  string   (  )  {  return data store . get destination id (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\destinations\impl\DestinationInfoLogic.java,get status code counts,public  map <  integer  status code response store >    (  )  {  return data store . get status code counts (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\destinations\impl\DestinationInfoLogic.java,get throughput,@ override public double   (  )  {  double throughput =  ( double ) data store . get total responses (  )   /  elapsed time in seconds (  )  ;  if  (  double . is nan ( throughput )  )   {  return double   zero ;   }  else  {  return throughput ;   }   } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\destinations\impl\DestinationInfoLogic.java,get total requests,@ override public long   (  )  {  return data store . get total requests (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\destinations\impl\DestinationInfoLogic.java,get total response time,@ override public long   ( int status code )  {   status code response store count = data store . get status code counts (  )  . get ( status code )  ;  if  ( count  !  =  null )   {  return count . get accumulated response time (  )  ;   }  else  {  retu
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\destinations\impl\DestinationInfoLogic.java,get total responses,public long   (  )  {  return data store . get total responses (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\destinations\impl\DestinationInfoLogic.java,get total status code,@ override public long   ( int status code )  {   status code response store count = data store . get status code counts (  )  . get ( status code )  ;  if  ( count  !  =  null )   {  return count . get total count (  )  ;   }  else  {  return long   zero
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\destinations\impl\DestinationInfoLogic.java,hash code,@ override public int   (  )  {  return  objects . hash code ( data store )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\destinations\impl\DestinationInfoLogic.java,increment request count,@ override public void   (  )  {  data store . set total requests ( data store . get total requests (  )   +  int   one )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\destinations\impl\DestinationInfoLogic.java,increment response count,@ override public void   (  )  {  data store . set total responses ( data store . get total responses (  )   +  int   one )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\destinations\impl\DestinationInfoLogic.java,increment status code count,@ override public void   ( int status code long time )  {   status code response store value = data store . get status code counts (  )  . get ( status code )  ;  if  ( value  !  =  null )   {  data store . get status code counts (  )  . put ( status code
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\destinations\impl\DestinationInfoStore.java, destination info store,private   (  string destination id long start time long total requests long total responses  map <  integer  status code response store >  status code counts long accumulated response time )  {  this . destination id = destination id ;  this . start time = start time ;  this . total requests = total requests ;  this . total responses = total responses ;  this . status code counts = deep copy status code counts ( status code counts )  ;  this . accumulated response time = accumulated response time ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\destinations\impl\DestinationInfoStore.java,deep copy status code counts,private static  map <  integer  status code response store >    (  map <  integer  status code response store >  status code counts )  {   map <  integer  status code response store >  copy = new  hash map <  >  (  )  ;  for  (   map .  entry <  integer  status code response store >  entry : status code counts . entry set (  )  )   {  copy . put ( entry . get key (  )  new  status code response store ( entry . get value (  )  )  )  ;   }  return copy ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\destinations\impl\DestinationInfoStore.java,equals,"@ suppress warnings ( ""squid:s1067"" )  @ override public boolean   (  object o )  {  if  ( o  =  =  this )   {  return true ;   }  if  ( o instanceof  destination info store )   {   destination info store other =  (  destination info store ) o ;  return  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\destinations\impl\DestinationInfoStore.java,get accumulated response time,public long   (  )  {  return accumulated response time ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\destinations\impl\DestinationInfoStore.java,get destination id,public  string   (  )  {  return destination id ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\destinations\impl\DestinationInfoStore.java,get start time,public long   (  )  {  return start time ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\destinations\impl\DestinationInfoStore.java,get status code counts,protected  map <  integer  status code response store >    (  )  {  return status code counts ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\destinations\impl\DestinationInfoStore.java,get total requests,public long   (  )  {  return total requests ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\destinations\impl\DestinationInfoStore.java,get total responses,public long   (  )  {  return total responses ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\destinations\impl\DestinationInfoStore.java,hash code,@ override public int   (  )  {  return  objects . hash code ( destination id accumulated response time start time total requests total responses status code counts )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\destinations\impl\DestinationInfoStore.java,set accumulated response time,protected void   ( long accumulated response time )  {  this . accumulated response time = accumulated response time ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\destinations\impl\DestinationInfoStore.java,set total requests,protected void   ( long total requests )  {  this . total requests = total requests ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\destinations\impl\DestinationInfoStore.java,set total responses,protected void   ( long total responses )  {  this . total responses = total responses ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\impl\ReportingServiceImpl.java, reporting service impl,@ inject public   (  configuration service configuration service )  {  this . configuration service = configuration service ;  this . container configuration listener = new  container configuration listener (  )  ;  this . system model listener = new  sys
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\impl\ReportingServiceImpl.java,configuration updated,@ override public void   (  system model system model )  {  final  list <  string >  endpoint ids = new  array list <  >  (  )  ;  for  (   repose cluster repose cluster : system model . get repose cluster (  )  )   {  final  destination list destination 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\impl\ReportingServiceImpl.java,destroy,"@ pre destroy public void   (  )  {  shutdown (  )  ;  configuration service . unsubscribe from ( ""system - model . cfg . xml"" system model listener )  ;  configuration service . unsubscribe from ( ""container . cfg . xml"" container configuration listener "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\impl\ReportingServiceImpl.java,get destination info,@ override public synchronized  destination info   (  string destination id )  {  return destinations . get ( destination id )  . copy (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\impl\ReportingServiceImpl.java,get destinations,@ override public synchronized  list <  destination info >    (  )  {  final  list <  destination info >  new destinations = new  array list <  >  (  )  ;  for  (   map .  entry <  string  destination info >  entry : destinations . entry set (  )  )   {  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\impl\ReportingServiceImpl.java,get last reset,@ override public synchronized  date   (  )  {  return  (  date ) last reset . clone (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\impl\ReportingServiceImpl.java,get repose info,@ override public synchronized  repose info   (  )  {  return repose info . copy (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\impl\ReportingServiceImpl.java,increment repose request count,@ override public synchronized void   (  )  {  repose info . increment request count (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\impl\ReportingServiceImpl.java,increment repose response count,@ override public synchronized void   (  )  {  repose info . increment response count (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\impl\ReportingServiceImpl.java,increment repose status code count,@ override public synchronized void   ( int status code long time )  {  repose info . increment status code count ( status code time )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\impl\ReportingServiceImpl.java,increment request count,@ override public synchronized void   (  string destination id )  {  if  ( destinations . get ( destination id )   !  =  null )   {  destinations . get ( destination id )  . increment request count (  )  ;   }   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\impl\ReportingServiceImpl.java,init,"@ post construct public void   (  )  {  url xsdurl = get class (  )  . get resource ( "" / meta - inf / schema / system - model / system - model . xsd"" )  ;  url container xsdurl = get class (  )  . get resource ( "" / meta - inf / schema / container / cont"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\impl\ReportingServiceImpl.java,is initialized,@ override public boolean   (  )  {  return is initialized ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\impl\ReportingServiceImpl.java,manage timer,private void   ( int seconds )  {  reporting timer task . cancel (  )  ;  timer . purge (  )  ;  reporting timer task = new  reporting timer task (  )  ;  long delay in milliseconds =  time unit . seconds . to millis ( seconds )  ;  last reset = new  date (  system . current time millis (  )  )  ;  timer . schedule at fixed rate ( reporting timer task delay in milliseconds delay in milliseconds )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\impl\ReportingServiceImpl.java,process repose request size,@ override public synchronized void   ( long request size )  {  repose info . process request size ( request size )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\impl\ReportingServiceImpl.java,process repose response size,@ override public synchronized void   ( long response size )  {  repose info . process response size ( response size )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\impl\ReportingServiceImpl.java,record service response,@ override public synchronized void   (  string destination id int status code long response time )  {  increment repose response count (  )  ;  if  ( destinations . get ( destination id )   !  =  null )   {   destination info destination = destinations .
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\impl\ReportingServiceImpl.java,reset,"@ suppress warnings ( ""squid:s3398"" )  private synchronized void   (  )  {  final  map <  string  destination info >  new destinations = new  hash map <  >  (  )  ;  for  (   map .  entry <  string  destination info >  entry : destinations . entry set (  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\impl\ReportingServiceImpl.java,run,@ override public void   (  )  {  reset (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\impl\ReportingServiceImpl.java,shutdown,@ override public void   (  )  {  timer . cancel (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\impl\ReportingServiceImpl.java,update configuration,@ override public synchronized void   (  list <  string >  destination ids int seconds )  {  destinations . clear (  )  ;  for  (   string id : destination ids )   {  final  destination info destination info = new  destination info logic ( id )  ;  destin
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\jmx\CompositeDataBuilder.java,get composite type,private  composite type   (  )  throws  open data exception  {  return new  composite type ( get item name (  )  get description (  )  get item names (  )  get item descriptions (  )  get item types (  )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\jmx\DestinationCompositeDataBuilder.java, destination composite data builder,public   (  destination info destination info )  {  this . destination info = destination info ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\jmx\DestinationCompositeDataBuilder.java,get description,"@ override public  string   (  )  {  return "" information about destination id ""  +  destination info . get destination id (  )   +  "" . "" ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\jmx\DestinationCompositeDataBuilder.java,get item descriptions,"@ override public  string[]   (  )  {  return new  string[] { "" the repose system - model id of the destination . "" "" the total number of requests sent to this destination . "" "" the total number of 400 response codes received from this destination . "" "" t"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\jmx\DestinationCompositeDataBuilder.java,get item name,@ override public  string   (  )  {  return destination info . get destination id (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\jmx\DestinationCompositeDataBuilder.java,get item names,"@ override public  string[]   (  )  {  return new  string[] { ""destination id"" ""total requests"" ""total400s"" ""total500s"" ""response time in millis"" ""throughput in seconds"" }  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\jmx\DestinationCompositeDataBuilder.java,get item types,@ override public  open type[]   (  )  {  return new  open type[] {  simple type . string  simple type . long  simple type . long  simple type . long  simple type . double  simple type . double }  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\jmx\DestinationCompositeDataBuilder.java,get items,@ override public  object[]   (  )  {  final  list <  object >  itemsb = new  array list <  >  (  )  ;  itemsb . add ( destination info . get destination id (  )  )  ;  itemsb . add ( destination info . get total requests (  )  )  ;  itemsb . add ( destin
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\jmx\ReposeReport.java, repose report,@ inject public   (  reporting service reporting service )  {  this . reporting service = reporting service ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\jmx\ReposeReport.java,get destination info,"@ override @ managed operation public  list <  composite data >    (  )  throws  open data exception  {   list <  composite data >  composite data list = new  array list <  >  (  )  ;  log . debug ( ""jmx:  retrieving destination information . "" )  ;  for "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\jmx\ReposeReport.java,get last reset,@ override @ managed operation public  date   (  )  {  return reporting service . get last reset (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\jmx\ReposeReport.java,get totals repose to client,"@ override @ managed operation public  string   (  )  {  log . debug ( ""jmx:  retrieving total number of 400s from  repose to  client . "" )  ;  return  long . to string ( reporting service . get repose info (  )  . get total status code ( status   code   "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\jmx\ReposeReport.java,get totals repose to client,"@ override @ managed operation public  string   (  )  {  log . debug ( ""jmx:  retrieving total number of 500s from  repose to  client . "" )  ;  return  long . to string ( reporting service . get repose info (  )  . get total status code ( status   code   "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\metrics\MetricsJmxObjectNameFactory.java,create name,"@ override public  object name   (  string type  string domain  string name )  {  try  {  return get name ( domain name )  ;   }  catch  (   malformed object name exception mone )   {  logger . warn ( "" unable to register  {  }   {  } "" domain name mone )"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\metrics\MetricsJmxObjectNameFactory.java,get instance,public static  metrics jmx object name factory   (  )  {  if  ( instance  =  =  null )   {  instance = new  metrics jmx object name factory (  )  ;   }  return instance ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\metrics\MultiMeter.java, multi meter,public   (  meter .  .  .  auxiliary meters )  {  this . auxiliary meters = auxiliary meters ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\metrics\MultiMeter.java,mark,@ override public void   ( long n )  {  super . mark ( n )  ;  markn all ( n auxiliary meters )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\metrics\MultiMeter.java,mark all,public static void   (  meter .  .  .  meters )  {  for  (   meter meter : meters )   {  meter . mark (  )  ;   }   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\metrics\MultiMeter.java,markn all,public static void   ( long n  meter .  .  .  meters )  {  for  (   meter meter : meters )   {  meter . mark ( n )  ;   }   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\metrics\SummingMeterFactory.java, summing meter factory,private   (  metric registry metric registry  string name prefix  summing meter supplier ancestral meter supplier )  {  this . name prefix = name prefix ;  this . metric registry = metric registry ;  this . across all meter = metric registry . meter ( name ( name prefix across   all )  ancestral meter supplier )  ;  this . summing meter supplier = new  summing meter supplier ( across all meter )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\metrics\SummingMeterFactory.java, summing meter supplier,public   (  meter .  .  .  auxiliary meters )  {  this . auxiliary meters = auxiliary meters ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\metrics\SummingMeterFactory.java,create child factory,@ override public  summing meter factory   (  string name )  {  return new  summing meter factory ( metric registry name ( name prefix name )  summing meter supplier )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\metrics\SummingMeterFactory.java,create meter,@ override public  meter   (  string name )  {  return metric registry . meter ( name ( name prefix name )  summing meter supplier )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\metrics\SummingMeterFactory.java,get aggregate meter,@ override public  meter   (  )  {  return across all meter ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\metrics\SummingMeterFactory.java,new metric,@ override public  meter   (  )  {  return new  multi meter ( auxiliary meters )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\repose\ReposeInfoLogic.java, repose info logic,private   (  repose info logic repose info logic )  {  data store = new  repose info store ( repose info logic . data store )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\repose\ReposeInfoLogic.java,copy,@ override public  repose info   (  )  {  return new  repose info logic ( this )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\repose\ReposeInfoLogic.java,get accumulated request size,public long   (  )  {  return data store . get accumulated request size (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\repose\ReposeInfoLogic.java,get accumulated response size,public long   (  )  {  return data store . get accumulated response size (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\repose\ReposeInfoLogic.java,get average request size,@ override public double   (  )  {  double average request size =  ( double ) data store . get accumulated response size (  )   /   ( double ) data store . get total requests (  )  ;  if  (  double . is nan ( average request size )  )   {  return double  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\repose\ReposeInfoLogic.java,get average response size,@ override public double   (  )  {  double average response size =  ( double ) data store . get accumulated response size (  )   /   ( double ) data store . get total responses (  )  ;  if  (  double . is nan ( average response size )  )   {  return doubl
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\repose\ReposeInfoLogic.java,get maximum request size,@ override public long   (  )  {  return data store . get max request size (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\repose\ReposeInfoLogic.java,get maximum response size,@ override public long   (  )  {  return data store . get max response size (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\repose\ReposeInfoLogic.java,get minimum request size,@ override public long   (  )  {  return data store . get min request size (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\repose\ReposeInfoLogic.java,get minimum response size,@ override public long   (  )  {  return data store . get min response size (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\repose\ReposeInfoLogic.java,get status code counts,public  map <  integer  status code response store >    (  )  {  return data store . get status code counts (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\repose\ReposeInfoLogic.java,get total requests,public long   (  )  {  return data store . get total requests (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\repose\ReposeInfoLogic.java,get total responses,public long   (  )  {  return data store . get total responses (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\repose\ReposeInfoLogic.java,get total status code,@ override public long   ( int status code )  {   long count = long   zero ;  for  (   integer code : data store . get status code counts (  )  . key set (  )  )   {  if  ( code % status code  <  response   code   seperator )   {  count +  = data store . 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\repose\ReposeInfoLogic.java,increment request count,@ override public void   (  )  {  data store . set total requests ( data store . get total requests (  )   +  int   one )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\repose\ReposeInfoLogic.java,increment response count,@ override public void   (  )  {  data store . set total responses ( data store . get total responses (  )   +  int   one )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\repose\ReposeInfoLogic.java,increment status code count,@ override public void   ( int status code long time )  {   status code response store value = data store . get status code counts (  )  . get ( status code )  ;  if  ( value  !  =  null )   {  data store . get status code counts (  )  . put ( status code
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\repose\ReposeInfoLogic.java,process request size,@ override public void   ( long request size )  {  data store . process request size ( request size )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\repose\ReposeInfoLogic.java,process response size,@ override public void   ( long response size )  {  data store . process response size ( response size )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\repose\ReposeInfoStore.java, repose info store,protected   (  repose info store repose info store )  {  this . status code counts = deep copy status code counts ( repose info store . status code counts )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\repose\ReposeInfoStore.java,deep copy status code counts,private  map <  integer  status code response store >    (  map <  integer  status code response store >  status code counts )  {   map <  integer  status code response store >  copy = new  hash map <  >  (  )  ;  for  (   map .  entry <  integer  status code response store >  entry : status code counts . entry set (  )  )   {  copy . put ( entry . get key (  )  new  status code response store ( entry . get value (  )  )  )  ;   }  return copy ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\repose\ReposeInfoStore.java,get accumulated request size,public long   (  )  {  return accumulated request size ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\repose\ReposeInfoStore.java,get accumulated response size,public long   (  )  {  return accumulated response size ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\repose\ReposeInfoStore.java,get max request size,public long   (  )  {  return max request size ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\repose\ReposeInfoStore.java,get max response size,public long   (  )  {  return max response size ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\repose\ReposeInfoStore.java,get min request size,public long   (  )  {  return min request size ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\repose\ReposeInfoStore.java,get min response size,public long   (  )  {  return min response size ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\repose\ReposeInfoStore.java,get status code counts,public  map <  integer  status code response store >    (  )  {  return status code counts ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\repose\ReposeInfoStore.java,get total requests,public long   (  )  {  return total requests ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\repose\ReposeInfoStore.java,get total responses,public long   (  )  {  return total responses ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\repose\ReposeInfoStore.java,process request size,protected void   ( long request size )  {  this . accumulated request size +  = request size ;  if  ( request size  <  min request size || min request size  =  =  0 )   {  min request size = request size ;   }  if  ( request size  >  max request size )   {  max request size = request size ;   }   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\repose\ReposeInfoStore.java,process response size,protected void   ( long response size )  {  this . accumulated response size +  = response size ;  if  ( response size  <  min response size || min response size  =  =  0 )   {  min response size = response size ;   }  if  ( response size  >  max response size )   {  max response size = response size ;   }   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\repose\ReposeInfoStore.java,set total requests,protected void   ( long total requests )  {  this . total requests = total requests ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\repose\ReposeInfoStore.java,set total responses,protected void   ( long total responses )  {  this . total responses = total responses ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\StatusCodeResponseStore.java, status code response store,public   ( long total count long accumulated response time )  {  this . total count = total count ;  this . accumulated response time = accumulated response time ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\StatusCodeResponseStore.java,equals,@ override public boolean   (  object o )  {  if  (  !  ( o instanceof  status code response store )  )   {  return false ;   }   status code response store other =  (  status code response store ) o ;  return other . accumulated response time  =  =  accu
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\StatusCodeResponseStore.java,get accumulated response time,public  long   (  )  {  return accumulated response time ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\StatusCodeResponseStore.java,get total count,public  long   (  )  {  return total count ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\StatusCodeResponseStore.java,hash code,@ override public int   (  )  {  int hash = hash ;  hash = hash * hash  +   ( int )  ( this . total count ^  ( this . total count  >  >  >  shift )  )  ;  hash = hash * hash  +   ( int )  ( this . accumulated response time ^  ( this . accumulated response
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\StatusCodeResponseStore.java,update,public  status code response store   ( long count long time )  {  this . total count +  = count ;  this . accumulated response time +  = time ;  return this ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\rms\HrefFileReader.java,read,"public  string   (  string href  string href id )  {  final  file f = validate href ( href href id )  ;   string string message = """" ;  if  ( f  !  =  null )   {  try  {  string message =  file utils . read file to string ( f  charset . default charset (  )  )  ;   }  catch  (  io exception ioe )   {  log . error (  string utils . join ( "" failed to read file: "" f . get absolute path (  )  ""  -   reason: "" ioe . get message (  )  )  ioe )  ;   }   }  return string message ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\rms\HrefFileReader.java,validate href,"public  file   (  string href  string href id )  {  final  matcher m = uri   pattern . matcher ( href )  ;   file f = null ;  if  ( m . find (  )  && href . starts with ( ""file: /  / "" )  )   {  try  {  f = new  file ( new uri ( href )  )  ;   }  catch  (  uri syntax exception urise )   {  log . error ( "" bad uri syntax in message href for status code: ""  +  href id urise )  ;   }   }  return f ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\rms\ImmutableStatusCodes.java, immutable status codes,private   (  list <  status code matcher >  status codes )  {  status code matcher list . clear (  )  ;  status code matcher list . add all ( status codes )  ;  status code regexes . clear (  )  ;  for  (   status code matcher code : status code matcher list )   {  status code regexes . put ( code . get id (  )   pattern . compile ( code . get code regex (  )  )  )  ;   }   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\rms\ImmutableStatusCodes.java,build,public static  immutable status codes   (  list <  status code matcher >  status code matchers )  {  return new  immutable status codes ( status code matchers )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\rms\ImmutableStatusCodes.java,get matching status code,public  status code matcher   (  string status code )  {   status code matcher matched code = null ;  for  (   status code matcher code : status code matcher list )   {  if  ( status code regexes . get ( code . get id (  )  )  . matcher ( status code )  . matches (  )  )   {  matched code = code ;  break ;   }   }  return matched code ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\rms\ImmutableFormatTemplates.java, immutable format templates,"private   (  list <  status code matcher >  status codes )  {  format templates . clear (  )  ;  for  (   status code matcher status code : status codes )   {  for  (   message message : status code . get message (  )  )   {  final  string status code id = status code . get id (  )  ;  final  string href = message . get href (  )  ;  final  string string template =  !  string utils . is blank ( href )   ?  new  href file reader (  )  . read ( href status code id )  : message . get value (  )  ;  final  string media type = message . get media type (  )  ;  final  string content type = message . get content type (  )  . to upper case (  )  ;  final  http log formatter state state = content type . contains ( ""json"" )   ?   http log formatter state . json : content type . contains ( ""xml"" )   ?   http log formatter state . xml :  http log formatter state . plain ;  format templates . put ( status code id  +  media type new  http log formatter ( string template state )  )  ;   }   }   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\rms\ImmutableFormatTemplates.java,build,public static  immutable format templates   (  list <  status code matcher >  status codes )  {  return new  immutable format templates ( status codes )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\rms\ImmutableFormatTemplates.java,get matching log formatter,public  http log formatter   (  string status code id  string media type )  {  return format templates . get ( status code id  +  media type )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\rms\MessageFilter.java,filter by media type,public static  message   (  list <  message >  messages  list <  media type >  media types )  {   message wildcard = null ;  if  ( messages  !  =  null && media types  !  =  null )   {  for  (   media type media type : media types )   {  for  (   message message : messages )   {  final  string message media type = message . get media type (  )  ;  if  (  string utils . equals ignore case ( message media type media type . get value (  )  )  )   {  return message ;   }  if  ( wildcard  =  =  null &&  string utils . equals ignore case ( message media type  mime type . wildcard . get name (  )  )  )   {  wildcard = message ;   }   }   }   }  return wildcard ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\metrics\MetricsServiceImpl.java, metrics service impl,@ inject public   (  configuration service configuration service  health check service health check service )  {  this . configuration service = configuration service ;  this . health check service proxy = health check service . register (  )  ;  this . m
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\metrics\MetricsServiceImpl.java,add graphite server,private void   (  string host int port long period  string prefix )  throws io exception  {   graphite graphite = new  graphite ( host port )  ;   graphite reporter reporter =  graphite reporter . for registry ( metric registry )  . prefixed with (  metric registry . name ( prefix  net utilities . best guess hostname (  )  )  )  . build ( graphite )  ;  reporter . start ( period  time unit . seconds )  ;  synchronized  ( list graphite )   {  list graphite . add ( reporter )  ;   }   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\metrics\MetricsServiceImpl.java,configuration updated,@ override public void   (  metrics configuration metricsc )  {  shutdown graphite (  )  ;  jmx reporter . stop (  )  ;  if  ( metricsc . get graphite (  )   !  =  null )   {  for  (   graphite server gs : metricsc . get graphite (  )  . get server (  )  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\metrics\MetricsServiceImpl.java,create summing meter factory,@ override public  aggregate meter factory   (  string name prefix )  {  return new  summing meter factory ( metric registry name prefix )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\metrics\MetricsServiceImpl.java,destroy,@ pre destroy @ override public void   (  )  {  configuration service . unsubscribe from ( default   config   name metrics cfg listener )  ;  jmx reporter . stop (  )  ;  shutdown graphite (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\metrics\MetricsServiceImpl.java,get registry,@ override public  metric registry   (  )  {  return metric registry ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\metrics\MetricsServiceImpl.java,init,"@ post construct public void   (  )  {  health check service proxy . report issue ( metrics   service   config   report "" metrics  service  configuration  error""  severity . broken )  ;  url xsdurl = get class (  )  . get resource ( "" / meta - inf / schem"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\metrics\MetricsServiceImpl.java,is enabled,public boolean   (  )  {  return enabled ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\metrics\MetricsServiceImpl.java,is initialized,@ override public boolean   (  )  {  return initialized ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\metrics\MetricsServiceImpl.java,set enabled,public void   ( boolean b )  {  this . enabled = b ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\metrics\MetricsServiceImpl.java,shutdown graphite,private void   (  )  {  synchronized  ( list graphite )   {  for  (   graphite reporter graphite : list graphite )   {  graphite . stop (  )  ;   }   }   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\routing\robin\Clusters.java, clusters,public   (  system model config )  {  domains = new  hash map <  >  (  )  ;  for  (   cluster domain : config . get repose cluster (  )  )   {  domains . put ( domain . get id (  )  new  cluster wrapper ( domain )  )  ;   }  for  (   cluster domain : config . get service cluster (  )  )   {  domains . put ( domain . get id (  )  new  cluster wrapper ( domain )  )  ;   }   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\routing\robin\Clusters.java,get domain,public  cluster wrapper   (  string id )  {  return domains . get ( id )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\rms\ResponseMessageServiceImpl.java, response message service impl,@ inject public   (  configuration service configuration service )  {  this . configuration service = configuration service ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\rms\ResponseMessageServiceImpl.java,config set to if empty,private boolean   (  status code matcher matched code )  {  return  string utils . equals ignore case ( matched code . get overwrite (  )  . value (  )   overwrite type . if   empty . value (  )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\rms\ResponseMessageServiceImpl.java,configuration updated,@ override public void   (  response messaging configuration configuration object )  {  set initialized (  )  ;  update configuration ( configuration object . get status code (  )  )  ;  is initialized = true ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\rms\ResponseMessageServiceImpl.java,get http log formatter,private  http log formatter   (  status code matcher matched code  string preferred media type )  {   http log formatter http log formatter = null ;  if  ( matched code  !  =  null && preferred media type  !  =  null )   {  configuration lock . lock ( read key )  ;  try  {  http log formatter = immutable format templates . get matching log formatter ( matched code . get id (  )  preferred media type )  ;   }  finally  {  configuration lock . unlock ( read key )  ;   }   }  return http log formatter ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\rms\ResponseMessageServiceImpl.java,get matching status code,private  status code matcher   (  string response code )  {   status code matcher matched code = null ;  configuration lock . lock ( read key )  ;  try  {  if  ( immutable status codes  !  =  null )   {  matched code = immutable status codes . get matching status code ( response code )  ;   }   }  finally  {  configuration lock . unlock ( read key )  ;   }  return matched code ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\rms\ResponseMessageServiceImpl.java,handle,"@ override public void   (  http servlet request request  http servlet response wrapper response )  throws io exception  {  if  (  ! is initialized (  )  )   {  response . send error (  http servlet response . sc   service   unavailable "" error creating  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\rms\ResponseMessageServiceImpl.java,has body,"private boolean   (  http servlet response wrapper response )  {  boolean has body = false ;  try  {  has body = response . get output stream as input stream (  )  . available (  )   >  0 ;   }  catch  (  io exception e )   {  log . warn ( "" unable to retrieve response body input stream"" e )  ;   }  return has body ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\rms\ResponseMessageServiceImpl.java,init,"@ post construct public void   (  )  {  try  {  url xsdurl = get class (  )  . get resource ( "" / meta - inf / schema / response - messaging / response - messaging . xsd"" )  ;  configuration service . subscribe to ( ""response - messaging . cfg . xml"" xsdu"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\rms\ResponseMessageServiceImpl.java,is initialized,@ override public boolean   (  )  {  return is initialized ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\rms\ResponseMessageServiceImpl.java,overwrite response body,private void   (  http servlet response wrapper response final  string formatted output  string content type )  throws io exception  {  response . reset error (  )  ;  response . reset buffer (  )  ;  response . set header (  http headers . content   type content type )  ;  response . set content length ( formatted output . length (  )  )  ;  response . get writer (  )  . write ( formatted output )  ;  response . get writer (  )  . flush (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\rms\ResponseMessageServiceImpl.java,set initialized,@ override public void   (  )  {  this . initialized = true ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\rms\ResponseMessageServiceImpl.java,update configuration,@ override public void   (  list <  status code matcher >  status code matchers )  {  configuration lock . lock ( update key )  ;  try  {  immutable status codes =  immutable status codes . build ( status code matchers )  ;  immutable format templates =  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\routing\robin\RoundRobinRoutingService.java, round robin routing service,@ inject public   (  configuration service configuration service )  {  config listener = new  power api config listener (  )  ;  this . configuration service = configuration service ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\routing\robin\RoundRobinRoutingService.java,after properties set,"@ post construct public void   (  )  {  url xsdurl = get class (  )  . get resource ( "" / meta - inf / schema / system - model / system - model . xsd"" )  ;  configuration service . subscribe to ( ""system - model . cfg . xml"" xsdurl config listener  system"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\routing\robin\RoundRobinRoutingService.java,configuration updated,@ override public void   (  system model configuration object )  {  config = configuration object ;  domains = new  clusters ( config )  ;  is initialized = true ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\routing\robin\RoundRobinRoutingService.java,destroy,"@ pre destroy public void   (  )  {  configuration service . unsubscribe from ( ""system - model . cfg . xml"" config listener )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\routing\robin\RoundRobinRoutingService.java,get routable node,"@ override public  node   (  string domain id )  {   cluster wrapper domain = domains . get domain ( domain id )  ;  if  ( domain  !  =  null )   {  return domain . get next node (  )  ;   }  log . debug ( ""no route - able node found  returning null"" )  ;"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\routing\robin\RoundRobinRoutingService.java,is initialized,@ override public boolean   (  )  {  return is initialized ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\routing\robin\ClusterWrapper.java, cluster wrapper,"public   (  cluster domain )  {  if  ( domain  =  =  null )   {  throw new  illegal argument exception ( "" domain cannot be null"" )  ;   }  this . nodes = domain . get nodes (  )   !  =  null  ?  domain . get nodes (  )  . get node (  )  : new  array list <  >  (  )  ;  this . node count = nodes . size (  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\routing\robin\ClusterWrapper.java,get next node,public  node   (  )  {  synchronized  ( nodes )   {  if  ( current index  =  =   integer . max   value )   {  current index = 0 ;   }  return get node ( current index +  +  )  ;   }   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\routing\robin\ClusterWrapper.java,get node,public  node   ( int index )  {  return node count  >  0 && index  >  =  0  ?  nodes . get ( index % node count )  : null ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\spring\ReposeBanner.java,print,"public static void   (  logger log )  {  try  {  final  input stream banner input stream =  repose banner . class . get resource as stream ( "" / repose . banner"" )  ;   scanner s = new  scanner ( banner input stream )  . use delimiter ( ""\\a"" )  ;  if  ( s . has next (  )  )   {  log . info ( ""\n""  +  s . next (  )  )  ;   }  else  {  log . warn ( "" unable to find the beautiful narwhal banner .   this is a bad thing . "" )  ;   }   }  catch  (   exception e )   {  log . warn ( ""non - fatal  -   unable to log the beautiful narwhal banner .   sad day . "" e )  ;   }   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\threading\impl\ThreadingServiceImpl.java, threading service impl,public   (  )  {  live thread references = new  hash set <  >  (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\threading\impl\ThreadingServiceImpl.java,new thread,@ override public  thread   (  runnable r  string name )  {  final  thread t = new  thread ( r name )  ;  live thread references . add ( new  weak reference <  >  ( t )  )  ;  return t ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\spring\CoreSpringProvider.java,get context for filter,"public static  abstract application context   (  application context parent context  class loader loader  string class name  string context name )  throws  class not found exception  {   annotation config application context filter context = new  annotation config application context (  )  ;  filter context . set class loader ( loader )  ;  filter context . set parent ( parent context )  ;  filter context . set display name ( context name )  ;  log . debug ( "" creating  filter  context using parent context:  {  } "" parent context . get display name (  )  )  ;   class teh filter = loader . load class ( class name )  ;   string package to scan = teh filter . get package (  )  . get name (  )  ;  log . debug ( "" filter  context scan package:  {  } "" package to scan )  ;   property sources placeholder configurer prop config = new  property sources placeholder configurer (  )  ;  prop config . set environment ( filter context . get environment (  )  )  ;  filter context . add bean factory post processor ( prop config )  ;  filter context . scan ( package to scan )  ;  filter context . refresh (  )  ;  if  ( log . is trace enabled (  )  )   {  for  (   string s : filter context . get bean definition names (  )  )   {  log . trace ( "" filter context bean:  {  } "" s )  ;   }   }  return filter context ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\spring\CoreSpringProvider.java,get core context,"public  application context   (  )  {  if  (  ! configured )   {  log . error ( "" core  context requested before configured ! "" )  ;   }  return core context ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\spring\CoreSpringProvider.java,get instance,public static  core spring provider   (  )  {  return instance ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\spring\CoreSpringProvider.java,get node context,"public  abstract application context   (  string cluster id  string node id )  {   annotation config application context node context = new  annotation config application context (  )  ;  node context . set parent ( get core context (  )  )  ;  node context . set display name ( cluster id  +  "" - ""  +  node id +  "" - context"" )  ;   properties props = new  properties (  )  ;  props . put (  repose spring properties . strip spring value stupidity (  repose spring properties . node . node   id )  node id )  ;  props . put (  repose spring properties . strip spring value stupidity (  repose spring properties . node . cluster   id )  cluster id )  ;   properties property source mps = new  properties property source ( cluster id  +  "" - ""  +  node id +  "" - "" +  ""props"" props )  ;  node context . get environment (  )  . get property sources (  )  . add first ( mps )  ;  if  ( log . is trace enabled (  )  )   {  for  (   property source source : node context . get environment (  )  . get property sources (  )  )   {   enumerable property source eps =  (  enumerable property source ) source ;  log . trace ( ""node context  -   property names for  {  } :  {  } "" eps . get name (  )  eps . get property names (  )  )  ;   }   }   property sources placeholder configurer prop config = new  property sources placeholder configurer (  )  ;  prop config . set environment ( node context . get environment (  )  )  ;  node context . add bean factory post processor ( prop config )  ;   string node service package = conf . get string ( ""node spring context path"" )  ;  log . debug ( "" creating node service context for  {  }  -  {  } "" cluster id node id )  ;  log . debug ( "" node service annotation scanning package  {  } "" node service package )  ;  node context . scan ( node service package )  ;  node context . refresh (  )  ;  return node context ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\spring\ReposeJmxNamingStrategy.java, repose jmx naming strategy,"public   (  annotation jmx attribute source attribute source )  {  super ( attribute source )  ;  this . attribute source = attribute source ;  this . jmx domain =  net utilities . best guess hostname (  )  ;  log . info ( "" configuring  spring jmx naming strategy with domain  {  } "" jmx domain )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\spring\ReposeJmxNamingStrategy.java,get object name,@ override public  object name   (  object managed bean  string bean key )  throws  malformed object name exception  {   class <  ?  >  managed class =  aop utils . get target class ( managed bean )  ;   managed resource mr = this . attribute source . get
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\spring\CoreSpringProvider.java,initialize core context,"public void   (  string config root boolean insecure )  {  if  (  ! configured )   {   string repose version = conf . get string ( ""repose version"" )  ;   string core scan package = conf . get string ( ""core spring context path"" )  ;  log . debug ( "" creating  core spring provider ! "" )  ;  log . debug ( "" core service annotation scanning package  {  } "" core scan package )  ;  log . debug ( "" config  root:  {  } "" config root )  ;  log . debug ( ""  insecurity:  {  } "" insecure )  ;  log . info ( "" starting up  repose  core  spring  context  ( logging may be redirected as the logging service comes up ) "" )  ;  core context = new  annotation config application context (  )  ;  core context . set display name ( "" repose core context"" )  ;   properties props = new  properties (  )  ;  props . put (  repose spring properties . strip spring value stupidity (  repose spring properties . core . config   root )  config root )  ;  props . put (  repose spring properties . strip spring value stupidity (  repose spring properties . core . insecure )  insecure )  ;  props . put (  repose spring properties . strip spring value stupidity (  repose spring properties . core . repose   version )  repose version )  ;   properties property source mps = new  properties property source ( ""core - properties"" props )  ;  core context . get environment (  )  . get property sources (  )  . add first ( mps )  ;   property sources placeholder configurer prop config = new  property sources placeholder configurer (  )  ;  prop config . set environment ( core context . get environment (  )  )  ;  core context . add bean factory post processor ( prop config )  ;  if  ( log . is trace enabled (  )  )   {  for  (   property source source : core context . get environment (  )  . get property sources (  )  )   {   enumerable property source eps =  (  enumerable property source ) source ;  log . trace ( ""core context  -   property names for  {  } :  {  } "" eps . get name (  )  eps . get property names (  )  )  ;   }   }  core context . scan ( core scan package )  ;  if  ( conf . has path ( ""extended spring context path"" )  )   {  final  string extended service package = conf . get string ( ""extended spring context path"" )  ;  core context . scan ( extended service package )  ;  log . info ( "" scanning additional service path  =   {  } "" extended service package )  ;   }   generic bean definition m bean server = new  generic bean definition (  )  ;  m bean server . set bean class ( m bean server factory bean . class )  ;   mutable property values m bean server props = new  mutable property values (  )  ;  m bean server props . add ( ""locate existing server if possible"" true )  ;  m bean server . set property values ( m bean server props )  ;  core context . register bean definition ( ""reposem bean server"" m bean server )  ;   generic bean definition jmx attribute source = new  generic bean definition (  )  ;  jmx attribute source . set bean class (  annotation jmx attribute source . class )  ;  core context . register bean definition ( ""jmx attribute source"" jmx attribute source )  ;   generic bean definition jmx naming strategy = new  generic bean definition (  )  ;  jmx naming strategy . set bean class (  repose jmx naming strategy . class )  ;  jmx naming strategy . set autowire mode (  abstract bean definition . autowire   constructor )  ;   generic bean definition m bean exporter = new  generic bean definition (  )  ;  m bean exporter . set bean class (  annotationm bean exporter . class )  ;   mutable property values m bean exporter props = new  mutable property values (  )  ;  m bean exporter props . add ( ""autodetect"" true )  ;  m bean exporter props . add ( ""server"" m bean server )  ;  m bean exporter props . add ( ""naming strategy"" jmx naming strategy )  ;  m bean exporter . set property values ( m bean exporter props )  ;  core context . register bean definition ( ""exporter"" m bean exporter )  ;  core context . refresh (  )  ;   repose banner . print ( log )  ;  core context . register shutdown hook (  )  ;  configured = true ;   }  else  {  log . error ( "" additional call to initialize  core  context ignored ! "" )  ;   }   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\httpcomponent\HttpComponentFactory.java, entity enclosing delete,public   ( uri uri )  {  super . seturi ( uri )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\httpcomponent\HttpComponentFactory.java, entity enclosing method wrapper,public   (  http entity enclosing request base method )  {  this . method = method ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\httpcomponent\HttpComponentFactory.java, http component factory,  (  string method  class <  ?  extends  http request base >  http class  class <  ?  extends  http component processable request >  wrapper class )  {  this . method = method ;  this . http class = http class ;  this . wrapper class = wrapper class ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\httpcomponent\HttpComponentFactory.java, http method base wrapper,public   (  http request base method )  {  this . method = method ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\httpcomponent\HttpComponentFactory.java,get instance,private static  http component processable request   (  http component factory method factory uri uri )  {   http component processable request request = null ;  if  ( method factory  !  =  null )   {  try  {   constructor <  ?  extends  http request base >  http constructor = method factory . http class . get constructor ( uri . class )  ;   http request base http method = http constructor . new instance ( uri )  ;   constructor <  ?  extends  http component processable request >  constructor =  (  constructor <  ?  extends  http component processable request >  ) method factory . wrapper class . get constructors (  ) [0] ;  request = constructor . new instance ( http method )  ;   }  catch  (   invocation target exception| no such method exception| illegal access exception| instantiation exception ex )   {  log . error ( construction   error ex )  ;   }   }  return request ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\httpcomponent\HttpComponentFactory.java,get method,"@ override public  string   (  )  {  return ""delete"" ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\httpcomponent\HttpComponentFactory.java,process,@ override public  http request base   (  http component request processor processor )  throws io exception  {  return processor . process ( method )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\httpcomponent\HttpComponentInputStream.java, http component input stream,"public   (  http entity entity )  throws io exception  {  if  ( entity  =  =  null )   {  throw new  illegal argument exception ( "" entity cannot be null"" )  ;   }  this . entity = entity ;  source = entity . get content (  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\httpcomponent\HttpComponentInputStream.java,available,@ override public int   (  )  throws io exception  {  if  ( source  =  =  null )   {  return 0 ;   }  return source . available (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\httpcomponent\HttpComponentInputStream.java,close,@ override public void   (  )  throws io exception  {  if  ( entity  !  =  null )   {   entity utils . consume ( entity )  ;   }  if  ( source  !  =  null )   {  source . close (  )  ;   }   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\httpcomponent\HttpComponentInputStream.java,mark,@ override public synchronized void   ( int i )  {  if  ( source  !  =  null )   {  source . mark ( i )  ;   }   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\httpcomponent\HttpComponentInputStream.java,mark supported,@ override public boolean   (  )  {  if  ( source  !  =  null )   {  return source . mark supported (  )  ;   }  return false ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\httpcomponent\HttpComponentInputStream.java,read,@ override public int   ( byte[] bytes int i int i1 )  throws io exception  {  if  ( source  =  =  null )   {  return  - 1 ;   }  return source . read ( bytes i i1 )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\httpcomponent\HttpComponentInputStream.java,reset,@ override public synchronized void   (  )  throws io exception  {  if  ( source  !  =  null )   {  source . reset (  )  ;   }   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\httpcomponent\HttpComponentInputStream.java,skip,@ override public long   ( long l )  throws io exception  {  if  ( source  =  =  null )   {  return  - 1 ;   }  return source . skip ( l )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\httpcomponent\HttpComponentRequestProcessor.java, http component request processor,public   (  http servlet request request uri host boolean rewrite host header  string chunked encoding )  {  this . source request = request ;  this . target host = host ;  this . rewrite host header = rewrite host header ;  this . chunked encoding = chunked encoding ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\httpcomponent\HttpComponentRequestProcessor.java,get entity length,"private int   (  )  throws io exception  {  int entity length =  - 1 ;  switch  ( chunked encoding . to lower case (  )  )   {  case ""true"": case ""1"": break ;  case ""auto"": if  (  string utils . equals ignore case ( source request . get header ( ""transfer - encoding"" )  ""chunked"" )  )   {  break ;   }  case ""false"": case ""0"": entity length = get size of request body (  )  ;  break ;  default : log . warn ( "" invalid chunked encoding value  -  -  using chunked encoding"" )  ;  break ;   }  return entity length ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\httpcomponent\HttpComponentRequestProcessor.java,get size of request body,private int   (  )  throws io exception  {  final  byte array output stream source entity = new  byte array output stream (  )  ;   raw input stream reader . instance (  )  . copy to ( source request . get input stream (  )  source entity )  ;  final  servlet input stream readable entity = new  buffered servlet input stream ( new  byte array input stream ( source entity . to byte array (  )  )  )  ;  source request = new  http servlet request wrapper ( source request readable entity )  ;  return source entity . size (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\httpcomponent\HttpComponentRequestProcessor.java,get uri,public uri   (  string target )  throws uri syntax exception  {  uri builder builder = new uri builder ( target )  ;  set query string ( builder )  ;  return builder . build (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\httpcomponent\HttpComponentRequestProcessor.java,process,public synchronized  http request base   (  http entity enclosing request base method )  throws io exception  {  final int content length = get entity length (  )  ;  set headers ( method )  ;  method . set entity ( new  input stream entity ( source request . get input stream (  )  content length )  )  ;  return method ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\httpcomponent\HttpComponentRequestProcessor.java,process header value,"private  string   (  string header name  string header value )  {   string result = header value ;  if  ( rewrite host header && header name . equals ignore case (  http headers . host )  )   {  result = target host . get host (  )   +  "":""  +  target host . get port (  )  ;   }  return result ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\httpcomponent\HttpComponentRequestProcessor.java,set headers,private void   (  http request base method )  {  final  enumeration <  string >  header names = source request . get header names (  )  ;  while  ( header names . has more elements (  )  )   {  final  string header name = header names . next element (  )  ;  if  ( exclude header ( header name )  )   {  continue ;   }  final  enumeration <  string >  header values = source request . get headers ( header name )  ;  while  ( header values . has more elements (  )  )   {   string header value = header values . next element (  )  ;  method . add header ( header name process header value ( header name header value )  )  ;   }   }   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\httpcomponent\HttpComponentRequestProcessor.java,set query string,private void   ( uri builder builder )  throws uri syntax exception  {   string query string = source request . get query string (  )  ;  if  (  string utils . is not blank ( query string )  )   {  builder . set query ( query string )  ;  if  ( builder . get query params (  )  . is empty (  )  )   {  builder . remove query (  )  ;   }   }   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\httpcomponent\HttpComponentResponseProcessor.java, http component response processor,public   (  http response http response  http servlet response response int response code )  {  this . response = response ;  this . response code = response code ;  this . http response = http response ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\httpcomponent\HttpComponentResponseProcessor.java,process,public void   (  )  throws io exception  {  response . set status ( response code )  ;  if  ( response code  =  =   http servlet response . sc   not   modified )   {  response . set int header ( content   length 0 )  ;   }  else  {  set response headers (  )  ;  set response body (  )  ;   }   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\httpcomponent\HttpComponentResponseProcessor.java,send translated redirect,public void   ( int status code )  throws  http exception  io exception  {  set response headers (  )  ;  response . set status ( status code )  ;  set response body (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\httpcomponent\HttpComponentResponseProcessor.java,set response body,private void   (  )  throws io exception  {   http entity entity = http response . get entity (  )  ;  if  ( entity  !  =  null )   {  final  output stream client out = response . get output stream (  )  ;  entity . write to ( client out )  ;  client out . flush (  )  ;   entity utils . consume ( entity )  ;   }   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\httpcomponent\HttpComponentResponseProcessor.java,set response headers,private void   (  )  throws io exception  {  for  (   header header : http response . get all headers (  )  )   {   string name = header . get name (  )  ;  if  (  ! exclude   headers   set . contains ( name . to lower case (  )  )  )   {  response . add header ( name header . get value (  )  )  ;   }   }   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\httpcomponent\RequestProxyServiceImpl.java, request proxy service impl,@ inject public   (  configuration service configuration service  health check service health check service  http client service http client service @ value (  repose spring properties . node . cluster   id )   string cluster id @ value (  repose spring p
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\httpcomponent\RequestProxyServiceImpl.java,configuration updated,@ override public void   (  system model config )  {   system model interrogator system model interrogator = new  system model interrogator ( cluster id node id )  ;   optional <  repose cluster >  local cluster = system model interrogator . get local clu
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\httpcomponent\RequestProxyServiceImpl.java,delete,@ override public  service client response   (  string base uri  string extra uri  map <  string  string >  headers  string conn pool id )  {   http delete delete = new  http delete (  string uri utilities . append path ( base uri extra uri )  )  ;  set h
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\httpcomponent\RequestProxyServiceImpl.java,destroy,"@ pre destroy public void   (  )  {  health check service proxy . deregister (  )  ;  configuration service . unsubscribe from ( ""system - model . cfg . xml"" system model listener )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\httpcomponent\RequestProxyServiceImpl.java,execute,"@ suppress warnings ( ""squid:s2093"" )  private  service client response   (  http request base base  string conn pool id )  {   http client container http client container = get client ( conn pool id )  ;  try  {   http response http response = http clien"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\httpcomponent\RequestProxyServiceImpl.java,execute proxy request,"private int   (  http client http client  http request base http method proxy request  http servlet response response )  throws io exception   http exception  {  try  {   http response http response = http client . execute ( http method proxy request )  ;  int response code = http response . get status line (  )  . get status code (  )  ;   http component response processor response processor = new  http component response processor ( http response response response code )  ;  if  ( response code  >  =   http servlet response . sc   multiple   choices && response code  <   http servlet response . sc   not   modified )   {  response processor . send translated redirect ( response code )  ;   }  else  {  response processor . process (  )  ;   }  return response code ;   }  catch  (   client protocol exception ex )   {  if  (  throwables . get root cause ( ex )  instanceof  read limit reached exception )   {  log . error ( "" error reading request content"" ex )  ;  response . send error (  http servlet response . sc   request   entity   too   large "" error reading request content"" )  ;   }  else  {  log . error ( "" error processing outgoing request"" ex )  ;  return  - 1 ;   }   }  return 1 ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\httpcomponent\RequestProxyServiceImpl.java,get,@ override public  service client response   (  string base uri  string extra uri  map <  string  string >  headers  string conn pool id )  {  return get (  string uri utilities . append path ( base uri extra uri )  headers conn pool id )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\httpcomponent\RequestProxyServiceImpl.java,get client,private  http client container   (  string client id )  {  return http client service . get client ( client id )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\httpcomponent\RequestProxyServiceImpl.java,get proxied host,"private  http host   (  string target host )  throws  http exception  {  try  {  return uri utils . extract host ( new uri ( target host )  )  ;   }  catch  (  uri syntax exception ex )   {  log . error ( "" invalid target host url: ""  +  target host ex )  ;   }  throw new  http exception ( "" invalid target host"" )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\httpcomponent\RequestProxyServiceImpl.java,init,"@ post construct public void   (  )  {  configuration service . subscribe to ( ""system - model . cfg . xml"" system model listener  system model . class )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\httpcomponent\RequestProxyServiceImpl.java,is initialized,@ override public boolean   (  )  {  return is initialized ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\httpcomponent\RequestProxyServiceImpl.java,patch,@ override public  service client response   (  string base uri  string path  map <  string  string >  headers byte[] body  string conn pool id )  {   http patch patch = new  http patch (  string uri utilities . append path ( base uri path )  )  ;  set he
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\httpcomponent\RequestProxyServiceImpl.java,proxy request,@ override public int   (  string target host  http servlet request request  http servlet response response  string conn pool id )  throws io exception  {   http client container http client container = get client ( conn pool id )  ;  try  {  final  strin
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\httpcomponent\RequestProxyServiceImpl.java,put,@ override public  service client response   (  string base uri  string path  map <  string  string >  headers byte[] body  string conn pool id )  {  return put (  string uri utilities . append path ( base uri path )  headers body conn pool id )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\httpcomponent\RequestProxyServiceImpl.java,set headers,private void   (  http request base base  map <  string  string >  headers )  {  final  set <  map .  entry <  string  string >  >  entries = headers . entry set (  )  ;  for  (   map .  entry <  string  string >  entry : entries )   {  base . add header ( entry . get key (  )  entry . get value (  )  )  ;   }   string traceguid = mdc . get (  tracing key . tracing   key )  ;  if  (  !  string utils . is empty ( traceguid )  )   {   header via header = base . get first header (  common http header . via )  ;  base . add header (  common http header . trace   guid  tracing header helper . create tracing header ( traceguid via header  !  =  null  ?  via header . get value (  )  : null )  )  ;   }   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\httpcomponent\RequestProxyServiceImpl.java,set rewrite host header,@ override public void   ( boolean value )  {  this . rewrite host header = value ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\request\RequestHeaderServiceImpl.java, request header service impl,@ inject public   (  configuration service configuration service  container configuration service container configuration service  health check service health check service @ value (  repose spring properties . node . cluster   id )   string cluster id @ 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\request\RequestHeaderServiceImpl.java,configuration updated,@ override public void   (  system model system model )  {  final  system model interrogator interrogator = new  system model interrogator ( cluster id node id )  ;   optional <  node >  ln = interrogator . get local node ( system model )  ;  if  ( ln . i
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\request\RequestHeaderServiceImpl.java,destroy,"@ pre destroy public void   (  )  {  health check service proxy . deregister (  )  ;  configuration service . unsubscribe from ( ""system - model . cfg . xml"" system model listener )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\request\RequestHeaderServiceImpl.java,init,"@ post construct public void   (  )  {  url system model xsdurl = get class (  )  . get resource ( "" / meta - inf / schema / system - model / system - model . xsd"" )  ;  configuration service . subscribe to ( ""system - model . cfg . xml"" system model xsdu"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\request\RequestHeaderServiceImpl.java,is initialized,@ override public boolean   (  )  {  return is initialized ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\request\RequestHeaderServiceImpl.java,set via,@ override public void   (  http servlet request wrapper request )  {  final  string builder builder = new  string builder (  )  ;  builder . append (  http servlet request util . get protocol version ( request )  )  ;  final  optional <  string >  reques
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\request\RequestHeaderServiceImpl.java,setx forwarded for,@ override public void   (  http servlet request wrapper request )  {  request . add header (  common http header . x   forwarded   for request . get remote addr (  )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\response\LocationHeaderBuilder.java,extract host path,"private static url   (  http servlet request request )  throws  malformedurl exception  {  final  string builder my host name = new  string builder ( request . get scheme (  )  )  . append ( "": /  / "" )  . append ( request . get server name (  )  )  ;  my host name . append ( "":"" )  . append ( request . get server port (  )  )  ;  my host name . append ( request . get context path (  )  )  ;  return new url ( my host name . to string (  )  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\response\LocationHeaderBuilder.java,fix path prefix,private static  string   (  string location path  string requested prefix  string added prefix )  {   string prefix to remove = get absolute path ( added prefix )  ;   string prefix to add = get absolute path ( requested prefix )  ;   string result = location path ;  if  ( location path . starts with ( prefix to remove )  )   {  result = prefix to add  +  get absolute path ( location path . substring ( prefix to remove . length (  )  )  )  ;   }  return result ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\response\LocationHeaderBuilder.java,get absolute path,"private static  string   (  string in path )  {  if  (  string utils . is blank ( in path )  )   {  return """" ;   }  return  ! in path . starts with ( "" / "" )   ?  "" / ""  +  in path : in path ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\response\LocationHeaderBuilder.java,get default port,private static int   (  string scheme )  {  if  ( https . equals ignore case ( scheme )  )   {  return default   https   port ;   }  if  ( http . equals ignore case ( scheme )  )   {  return default   http   port ;   }  return  - 1 ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\response\LocationHeaderBuilder.java,get location url,private static url   (  http servlet response servlet response )  throws  malformedurl exception  {   string location header = servlet response . get header (  http headers . location )  ;  if  (  string utils . is not blank ( location header )  )   {  return new url ( location header )  ;   }  return null ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\response\LocationHeaderBuilder.java,get port,private static int   ( url url )  {  if  ( url . get port (  )   =  =   - 1 )   {  return get default port ( url . get protocol (  )  )  ;   }  return url . get port (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\response\LocationHeaderBuilder.java,set location header,public static void   (  http servlet request original request  http servlet response servlet response  string destination uri  string requested context  string root path )  throws  malformedurl exception  {  final url location url = get location url ( servlet response )  ;  if  ( location url  =  =  null )   {  return ;   }  final url requested host url = extract host path ( original request )  ;  final url proxied host url = new  target host info ( destination uri )  . get proxied host url (  )  ;  final  string translated location url = translate location url ( location url proxied host url requested host url requested context root path )  ;  if  ( translated location url  !  =  null )   {  servlet response . set header (  http headers . location translated location url )  ;   }   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\response\LocationHeaderBuilder.java,should rewrite location,private static boolean   ( url location url url proxied host url url requested host )  {  if  ( proxied host url  =  =  null || location url . get host (  )  . equals ( proxied host url . get host (  )  )  && get port ( location url )   =  =  get port ( proxied host url )  )   {  return true ;   }  if  ( location url . get host (  )  . equals ( requested host . get host (  )  )  && get port ( location url )   =  =  get port ( requested host )  )   {  return true ;   }  return false ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\response\LocationHeaderBuilder.java,translate location url,"private static  string   ( url location url url proxied host url url requested host  string requested context  string proxied root path )  {   string builder buffer = new  string builder (  )  ;  if  ( location url  =  =  null )   {  return null ;   }  if  (  string utils . is empty ( location url . get host (  )  )  )   {  return requested context ;   }  if  ( should rewrite location ( location url proxied host url requested host )  )   {  buffer . append ( requested host . get protocol (  )  )  . append ( "": /  / "" )  . append ( requested host . get host (  )  )  ;  if  ( requested host . get port (  )   !  =  default   http   port )   {  buffer . append ( "":"" )  . append ( requested host . get port (  )  )  ;   }  buffer . append ( fix path prefix ( location url . get file (  )  requested context proxied root path )  )  ;   }  return buffer . length (  )   =  =  0  ?  location url . to external form (  )  : buffer . to string (  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\EmptyServlet.java,service,"@ override protected void   (  http servlet request req  http servlet response resp )  throws  servlet exception  io exception  {  log . debug ( "" hit the empty servlet at the end of the chain"" )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\response\ResponseHeaderServiceImpl.java, response header service impl,@ inject public   (  container configuration service container configuration service @ value (  repose spring properties . core . repose   version )   string repose version )  {  this . container configuration service = container configuration service ;  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\response\ResponseHeaderServiceImpl.java,clean path,"private  string   (  string uri )  {  return uri  =  =  null  ?  """" : uri . split ( ""\\ ? "" ) [0] ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\response\ResponseHeaderServiceImpl.java,fix location header,@ override public void   (  http servlet request original request  http servlet response response  route destination destination  string destination location uri  string proxied root context )  {   string destination uri = clean path ( destination locatio
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\response\ResponseHeaderServiceImpl.java,set via,@ override public void   (  http servlet request request  http servlet response response )  {  final  optional <  string >  response via = container configuration service . get response via (  )  ;  final boolean include via repose version = container con
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\filtercontext\FilterConfigWrapper.java, filter config wrapper,"public   (  servlet context servlet context  filter type filter type  string config )  {  if  ( filter type  =  =  null )   {  throw new  illegal argument exception ( ""filter type cannot be null"" )  ;   }  this . servlet context = servlet context ;  this . filter type = filter type ;  this . config = config ;  init params = new  hash map <  >  (  )  ;  init params . put ( ""filter - config"" config )  ;  for  (   param value type param : filter type . get init param (  )  )   {  init params . put ( param . get param name (  )  . get value (  )  param . get param value (  )  . get value (  )  )  ;   }   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\filtercontext\FilterConfigWrapper.java,get filter config,public  string   (  )  {  return config ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\filtercontext\FilterConfigWrapper.java,get filter name,@ override public  string   (  )  {  return filter type . get filter name (  )  . get value (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\filtercontext\FilterConfigWrapper.java,get init parameter,@ override public  string   (  string name )  {  return init params . get ( name )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\filtercontext\FilterConfigWrapper.java,get init parameter names,@ override public  enumeration <  string >    (  )  {  return  collections . enumeration ( init params . key set (  )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\filtercontext\FilterConfigWrapper.java,get servlet context,@ override public  servlet context   (  )  {  return servlet context ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\filtercontext\FilterContext.java, filter context,"public   (  filter filter  abstract application context filter app context org . openrepose . core . systemmodel . config .  filter filter config )  {  this . filter = filter ;  this . filter app context = filter app context ;  this . filter config = filter config ;  if  ( filter config  !  =  null && filter config . get uri regex (  )   !  =  null )   {  filter config . get name (  )  ;  this . name = filter config . get name (  )  ;  this . uri regex = filter config . get uri regex (  )  ;  this . uri pattern =  pattern . compile ( uri regex )  ;   }  else  {  this . name = ""n / a"" ;  this . uri regex = "" . *"" ;  this . uri pattern =  pattern . compile ( this . uri regex )  ;   }   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\filtercontext\FilterContext.java,destroy,@ override public void   (  )  {  if  ( filter  !  =  null )   {  filter . destroy (  )  ;   }  if  ( filter app context  !  =  null )   {  filter app context . close (  )  ;   }   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\filtercontext\FilterContext.java,get filter,public  filter   (  )  {  return filter ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\filtercontext\FilterContext.java,get filter app context,public  abstract application context   (  )  {  return filter app context ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\filtercontext\FilterContext.java,get filter config,public org . openrepose . core . systemmodel . config .  filter   (  )  {  return filter config ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\filtercontext\FilterContext.java,get name,public  string   (  )  {  return name ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\filtercontext\FilterContext.java,get uri pattern,public  pattern   (  )  {  return uri pattern ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\filtercontext\FilterContext.java,get uri regex,public  string   (  )  {  return uri regex ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\filtercontext\FilterContext.java,is filter available,public boolean   (  )  {  return filter  !  =  null ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\FilterInitializationException.java, filter initialization exception,public   (  string message )  {  super ( message )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\filtercontext\FilterContextFactory.java, filter context factory,@ inject public   (  application context application context  class loader manager service class loader manager service )  {  this . application context = application context ;  this . class loader manager service = class loader manager service ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\filtercontext\FilterContextFactory.java,build filter contexts,"public  list <  filter context >    (  servlet context servlet context  list <  filter >  filters to create )  throws  filter initialization exception  {  final  list <  filter context >  filter contexts = new  linked list <  >  (  )  ;  for  (  org . openrepose . core . systemmodel . config .  filter papi filter : filters to create )   {  if  ( class loader manager service . has filter ( papi filter . get name (  )  )  )   {  final  filter context context = load filter context ( papi filter class loader manager service . get loaded applications (  )  servlet context )  ;  filter contexts . add ( context )  ;   }  else  {  log . error ( "" unable to satisfy requested filter chain  -  none of the loaded artifacts supply a filter named ""  +  papi filter . get name (  )  )  ;  throw new  filter initialization exception ( "" unable to satisfy requested filter chain  -  none of the loaded artifacts supply a filter named ""  +  papi filter . get name (  )  )  ;   }   }  return filter contexts ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\filtercontext\FilterContextFactory.java,get unique context name,"private  string   (  filter filter info )  {   string builder sb = new  string builder (  )  ;  if  ( filter info . get id (  )   !  =  null )   {  sb . append ( filter info . get id (  )  )  . append ( "" - "" )  ;   }  sb . append ( filter info . get name (  )  )  . append ( "" - "" )  ;  sb . append ( uuid . randomuuid (  )  . to string (  )  )  ;  return sb . to string (  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\filtercontext\FilterContextFactory.java,load filter context,"@ suppress warnings ( ""squid:s2259"" )  private  filter context   (  filter filter  collection <  ear class loader context >  loaded applications  servlet context servlet context )  throws  filter initialization exception  {   filter type filter type = nul"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\InvalidMethodException.java, invalid method exception,public   (  string message  throwable exception )  {  super ( message exception )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\intrafilterlogging\RequestLog.java, request log,"public   (  http servlet request http servlet request  filter filter )  throws io exception  {  preamble = "" intrafilter  request  log"" ;  timestamp = new  date time (  )  . to string (  )  ;  current filter =  string utils . is empty ( filter . get id (  )  )   ?  filter . get name (  )  : filter . get id (  )   +  "" - ""  +  filter . get name (  )  ;  http method = http servlet request . get method (  )  ;  requesturi = http servlet request . get requesturi (  )  ;  headers = convert request headers to map ( http servlet request )  ;  try  {   servlet input stream input stream = http servlet request . get input stream (  )  ;  if  ( input stream . mark supported (  )  )   {  input stream . mark (  integer . max   value )  ;  request body = io utils . to string ( input stream )  ;  input stream . reset (  )  ;   }  else  {  log . warn ( "" unable to populate request body  -   {  }  does not support mark / reset . "" input stream )  ;   }   }  catch  (  io exception e )   {  log . warn ( "" unable to populate request body . "" e )  ;   }   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\intrafilterlogging\RequestLog.java,convert request headers to map,"private  map <  string  string >    (  http servlet request http servlet request )  {   map <  string  string >  header map = new  linked hash map <  >  (  )  ;   list <  string >  header names =  collections . list ( http servlet request . get header names (  )  )  ;  for  (   string header name : header names )   {   string joiner string joiner = new  string joiner ( "" "" )  ;   collections . list ( http servlet request . get headers ( header name )  )  . for each ( string joiner::add )  ;  header map . put ( header name string joiner . to string (  )  )  ;   }  return header map ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\intrafilterlogging\ResponseLog.java, response log,"public   (  http servlet response wrapper wrapped servlet response  filter filter )  throws io exception  {  preamble = "" intrafilter  response  log"" ;  timestamp = new  date time (  )  . to string (  )  ;  current filter =  string utils . is empty ( filter . get id (  )  )   ?  filter . get name (  )  : filter . get id (  )   +  "" - ""  +  filter . get name (  )  ;  http response code =  integer . to string ( wrapped servlet response . get status (  )  )  ;  headers = convert response headers to map ( wrapped servlet response )  ;  response body = io utils . to string ( wrapped servlet response . get output stream as input stream (  )  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\intrafilterlogging\ResponseLog.java,convert response headers to map,"private  map <  string  string >    (  http servlet response wrapper wrapped servlet response )  {   hash map <  string  string >  header map = new  linked hash map <  >  (  )  ;   collection <  string >  header names = wrapped servlet response . get header names (  )  ;  for  (   string header name : header names )   {   string joiner string joiner = new  string joiner ( "" "" )  ;  wrapped servlet response . get headers ( header name )  . for each ( string joiner::add )  ;  header map . put ( header name string joiner . to string (  )  )  ;   }  return header map ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\PowerFilterChain.java, power filter chain,public   (  list <  filter context >  filter chain copy  filter chain container filter chain  power filter router router  optional <  metrics service >  metrics service  optional <  string >  bypass url )  throws  power filter chain exception  {  this . filter chain copy = new  linked list <  >  ( filter chain copy )  ;  this . container filter chain = container filter chain ;  this . router = router ;  this . metrics service = metrics service ;  this . bypass url = bypass url ;  splittabel header util = new  splittable header util (  power api header . values (  )   open stack service header . values (  )   extended http header . values (  )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\PowerFilterChain.java,convert pojo to json string,private  string   (  object object )  throws io exception  {   object mapper object mapper = new  object mapper (  )  ;  object mapper . set visibility (  property accessor . field  json auto detect .  visibility . any )  ;  return object mapper . write value as string ( object )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\PowerFilterChain.java,do filter,@ override public void   (  servlet request servlet request  servlet response servlet response )  throws io exception   servlet exception  {   http servlet request http request =  (  http servlet request ) servlet request ;   http servlet response http re
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\PowerFilterChain.java,do repose filter,"private void   (  http servlet request http request  http servlet response http response  filter context filter context )  throws io exception   servlet exception  {   http servlet request maybe wrapped servlet request = http request ;   http servlet response maybe wrapped servlet response = http response ;  try  {  boolean is intra filter logging enabled = intrafilter   log . is trace enabled (  )  ;  if  ( is intra filter logging enabled )   {   servlet input stream input stream = maybe wrapped servlet request . get input stream (  )  ;  if  (  ! input stream . mark supported (  )  )   {   byte array output stream source entity = new  byte array output stream (  )  ;   raw input stream reader . instance (  )  . copy to ( input stream source entity )  ;  input stream = new  buffered servlet input stream ( new  byte array input stream ( source entity . to byte array (  )  )  )  ;   }  maybe wrapped servlet request = new  http servlet request wrapper ( maybe wrapped servlet request input stream )  ;  maybe wrapped servlet response = new  http servlet response wrapper ( maybe wrapped servlet response  response mode . passthrough  response mode . readonly )  ;  intrafilter   log . trace ( intrafilter request log (  (  http servlet request wrapper ) maybe wrapped servlet request filter context )  )  ;   }  filter context . get filter (  )  . do filter ( maybe wrapped servlet request maybe wrapped servlet response this )  ;  if  ( is intra filter logging enabled )   {  intrafilter   log . trace ( intrafilter response log (  (  http servlet response wrapper ) maybe wrapped servlet response filter context maybe wrapped servlet request . get header ( intrafilter   uuid )  )  )  ;   }   }  catch  (   exception ex )   {   string filter name = filter context . get filter (  )  . get class (  )  . get simple name (  )  ;  log . error ( "" failure in filter: ""  +  filter name  +  ""  -   reason: "" +  ex . get message (  )  ex )  ;  maybe wrapped servlet response . set status (  http servlet response . sc   internal   server   error )  ;   }   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\PowerFilterChain.java,do routing,"private void   (  http servlet request http request  servlet response servlet response )  {  final  http servlet response wrapper wrapped response = new  http servlet response wrapper (  (  http servlet response ) servlet response mutable passthrough )  ;  try  {  if  ( is response ok ( wrapped response )  )   {  container filter chain . do filter ( http request wrapped response )  ;   }  if  ( is response ok ( wrapped response )  )   {  router . route ( new  http servlet request wrapper ( http request )  wrapped response )  ;   }  split response headers ( wrapped response )  ;   }  catch  (   exception ex )   {  log . error ( "" failure in filter within container filter chain .   reason: ""  +  ex . get message (  )  ex )  ;  wrapped response . send error (  http servlet response . sc   internal   server   error )  ;   }  finally  {  wrapped response . commit to response (  )  ;   }   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\PowerFilterChain.java,get filter chain for request,"private  list <  filter context >    (  string uri )  {   list <  filter context >  filters = new  linked list <  >  (  )  ;  if  ( bypass url . map ( url  -  >   pattern . compile ( url )  . matcher ( uri )  . matches (  )  )  . or else ( false )  )   {  log . debug ( ""uri:  {  }  matched bypass criteria using empty filter chain"" uri )  ;   }  else  {  for  (   filter context filter : filter chain copy )   {  if  ( filter . get uri pattern (  )   =  =  null || filter . get uri pattern (  )  . matcher ( uri )  . matches (  )  )   {  filters . add ( filter )  ;   }   }   }  return filters ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\PowerFilterChain.java,intrafilter request log,private  string   (  http servlet request wrapper wrapped servlet request  filter context filter context )  throws io exception  {  if  (  string utils . is empty ( wrapped servlet request . get header ( intrafilter   uuid )  )  )   {  wrapped servlet request . add header ( intrafilter   uuid uuid . randomuuid (  )  . to string (  )  )  ;   }   request log request log = new  request log ( wrapped servlet request filter context . get filter config (  )  )  ;  return convert pojo to json string ( request log )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\PowerFilterChain.java,intrafilter response log,private  string   (  http servlet response wrapper wrapped servlet response  filter context filter context  string uuid )  throws io exception  {  if  (  string utils . is empty ( wrapped servlet response . get header ( intrafilter   uuid )  )  )   {  wrapped servlet response . add header ( intrafilter   uuid uuid )  ;   }   response log response log = new  response log ( wrapped servlet response filter context . get filter config (  )  )  ;  return convert pojo to json string ( response log )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\PowerFilterChain.java,is current filter chain available,"private boolean   (  )  {  boolean result = true ;  for  (   filter context filter : current filters )   {  if  (  ! filter . is filter available (  )  )   {  log . warn ( "" filter is not available for processing requests: ""  +  filter . get name (  )  )  ;   }  result& = filter . is filter available (  )  ;   }  return result ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\PowerFilterChain.java,is response ok,private boolean   (  http servlet response response )  {  return response . get status (  )   <   http servlet response . sc   internal   server   error ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\PowerFilterChain.java,set start time for http logger,private void   ( long start time  http servlet request http request )  {  long start = start time ;  if  ( start time  =  =  0 )   {  start =  system . current time millis (  )  ;   }  http request . set attribute ( start   time   attribute start )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\PowerFilterChain.java,split request header values,"private  list <  string >    (  enumeration <  string >  header values )  {   list <  string >  split headers = new  array list <  >  (  )  ;  while  ( header values . has more elements (  )  )   {   string header value = header values . next element (  )  ;   string[] split values = header value . split ( "" "" )  ;   collections . add all ( split headers split values )  ;   }  return split headers ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\PowerFilterChain.java,split request headers,private void   (  http servlet request wrapper request )  {   collections . list ( request . get header names (  )  )  . stream (  )  . filter ( splittabel header util::is splittable )  . for each ( header name  -  >   {   enumeration <  string >  header values = request . get headers ( header name )  ;  request . remove header ( header name )  ;  split request header values ( header values )  . for each ( header value  -  >  request . add header ( header name header value )  )  ;   }   )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\PowerFilterChain.java,split response header values,"private  collection <  string >    (  collection <  string >  header values )  {   list <  string >  final values = new  array list <  >  (  )  ;  for  (   string passed value : header values )   {   string[] split values = passed value . split ( "" "" )  ;   collections . add all ( final values split values )  ;   }  return final values ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\PowerFilterChain.java,split response headers,private void   (  http servlet response wrapper http servlet response wrapper )  {  http servlet response wrapper . get header names (  )  . stream (  )  . filter ( splittabel header util::is splittable )  . for each ( header name  -  >   {   collection <  string >  split values = split response header values ( http servlet response wrapper . get headers ( header name )  )  ;  http servlet response wrapper . remove header ( header name )  ;  split values . stream (  )  . filter (  string utils::is not empty )  . for each ( split value  -  >  http servlet response wrapper . add header ( header name split value )  )  ;   }   )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\PowerFilterChain.java,start filter chain,"public void   (  http servlet request wrapper wrapped request  http servlet response wrapper wrapped response )  throws io exception   servlet exception  {  boolean add trace header = trace request ( wrapped request )  ;  boolean use trace = add trace header || metrics service . is present (  )  ;  tracer = new  request tracer ( use trace add trace header )  ;  current filters = get filter chain for request ( wrapped request . get requesturi (  )  )  ;  filter chain available = is current filter chain available (  )  ;  wrapped request . set attribute ( ""filter chain available for request"" filter chain available )  ;  wrapped request . set attribute ( ""http: /  / openrepose . org / request url"" wrapped request . get requesturl (  )  . to string (  )  )  ;  split request headers ( wrapped request )  ;  do filter ( wrapped request wrapped response )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\PowerFilterChain.java,trace request,"private boolean   (  http servlet request request )  {  return request . get header ( ""x -  trace -  request"" )   !  =  null ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\PowerFilterChain.java,update timer,"private void   (  string name long duration millis )  {  metrics service . if present ( ms  -  >  ms . get registry (  )  . timer (  metric registry . name ( ""org . openrepose . core .  filter processing time .  delay"" name )  )  . update ( duration millis  time unit . milliseconds )  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\PowerFilter.java, power filter,@ inject public   ( @ value (  repose spring properties . node . cluster   id )   string cluster id @ value (  repose spring properties . node . node   id )   string node id @ value (  repose spring properties . core . repose   version )   string repose v
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\PowerFilter.java,configuration heartbeat,"private void   (  )  {  if  ( current system model . get (  )   !  =  null && artifact manager . all artifacts loaded (  )  )   {  synchronized  ( configuration lock )   {   system model interrogator interrogator = new  system model interrogator ( cluster id node id )  ;   system model system model = current system model . get (  )  ;   optional <  node >  local node = interrogator . get local node ( system model )  ;   optional <  repose cluster >  local cluster = interrogator . get local cluster ( system model )  ;   optional <  destination >  default destination = interrogator . get default destination ( system model )  ;  if  ( local node . is present (  )  && local cluster . is present (  )  && default destination . is present (  )  )   {   repose cluster service domain = local cluster . get (  )  ;   destination default dst = default destination . get (  )  ;  health check service proxy . resolve issue ( system   model   config   health   report )  ;  try  {   filter list list of filters = local cluster . get (  )  . get filters (  )  ;   list <  filter context >  new filter chain ;  if  ( list of filters  !  =  null )   {  new filter chain = filter context factory . build filter contexts ( get servlet context (  )  list of filters . get filter (  )  )  ;   }  else  {  new filter chain =  collections . empty list (  )  ;   }   list <  filter context >  old filter chain = current filter chain . get and set ( new filter chain )  ;  power filter router . set ( power filter router factory . get power filter router ( service domain local node . get (  )  get servlet context (  )  default dst . get id (  )  )  )  ;  if  ( old filter chain  !  =  null )   {  for  (   filter context ctx : old filter chain )   {  ctx . destroy (  )  ;   }   }  if  ( log . is debug enabled (  )  )   {   list <  string >  filter chain info = new  linked list <  >  (  )  ;  for  (   filter context ctx : new filter chain )   {  filter chain info . add ( ctx . get name (  )   +  "" - ""  +  ctx . get filter (  )  . get class (  )  . get name (  )  )  ;   }  log . debug ( "" {  } : {  }   -  -   repose filter chain:  {  } "" cluster id node id filter chain info )  ;   }  log . info ( "" {  } : {  }   -  -   repose ready"" cluster id node id )  ;  configuration information . update node status ( cluster id node id true )  ;   }  catch  (   filter initialization exception fie )   {  log . error ( "" {  } : {  }   -  -   unable to create new filter chain . "" cluster id node id fie )  ;  configuration information . update node status ( cluster id node id false )  ;   }  catch  (   power filter chain exception e )   {  log . error ( "" {  } : {  }   -  -   unable to initialize filter chain builder . "" cluster id node id e )  ;  configuration information . update node status ( cluster id node id false )  ;   }   }  else  {  log . error ( "" {  } : {  }   -  -   unhealthy system - model config  ( cannot identify local node  or no default destination )   -  please check your system - model . cfg . xml"" cluster id node id )  ;  health check service proxy . report issue ( system   model   config   health   report "" unable to identify the ""  +  ""local host in the system model  or no default destination  -  please check your system - model . cfg . xml""  severity . broken )  ;   }   }   }   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\PowerFilter.java,configuration updated,"@ override public void   (  system model configuration object )  {  log . debug ( "" {  } : {  }   new system model configuration provided"" cluster id node id )  ;   system model previous system model = current system model . get and set ( configuration ob"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\PowerFilter.java,destroy,"@ override public void   (  )  {  health check service proxy . deregister (  )  ;  log . info ( "" {  } : {  }   -  -   destroying  power filter bean"" cluster id node id )  ;  event service . squelch ( application deployment listener  application deploymen"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\PowerFilter.java,do filter,"@ override @ suppress warnings ( ""squid:s1848"" )  public void   (  servlet request request  servlet response response  filter chain chain )  throws io exception   servlet exception  {  final long start time =  system . current time millis (  )  ;  final  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\PowerFilter.java,get request filter chain,"private  power filter chain   (  http servlet response http response  filter chain chain )  throws  servlet exception  io exception  {   power filter chain request filter chain = null ;  try  {  boolean healthy = health check service . is healthy (  )  ;   list <  filter context >  filter chain = current filter chain . get (  )  ;   power filter router router = power filter router . get (  )  ;  if  (  ! healthy || filter chain  =  =  null || router  =  =  null )   {  log . warn ( "" {  } : {  }   -  -   repose is not ready ! "" cluster id node id )  ;  log . debug ( "" {  } : {  }   -  -   health status:  {  } "" cluster id node id healthy )  ;  log . debug ( "" {  } : {  }   -  -   current filter chain:  {  } "" cluster id node id filter chain )  ;  log . debug ( "" {  } : {  }   -  -   power  filter  router:  {  } "" cluster id node id router )  ;  http response . send error (  http servlet response . sc   service   unavailable "" currently unable to serve requests"" )  ;  configuration information . update node status ( cluster id node id false )  ;   }  else  {  request filter chain = new  power filter chain ( filter chain chain router metrics service  optional . of nullable ( current system model . get (  )  . get repose cluster (  )  . stream (  )  . filter ( cluster  -  >  cluster . get id (  )  . equals ( cluster id )  )  . find first (  )  . get (  )  . get filters (  )  )  . map (  filter list::get bypass uri regex )  )  ;   }   }  catch  (   power filter chain exception ex )   {  log . warn ( "" {  } : {  }   -  -   error creating filter chain"" cluster id node id ex )  ;  http response . send error (  http servlet response . sc   service   unavailable "" error creating filter chain"" )  ;  configuration information . update node status ( cluster id node id false )  ;   }  return request filter chain ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\PowerFilter.java,init filter bean,"@ override public void   (  )  {  log . info ( "" {  } : {  }   -  -   initializing  power filter bean"" cluster id node id )  ;   servlet context wrapper wrapped servlet context = new  servlet context wrapper ( get servlet context (  )  request proxy servi"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\PowerFilter.java,is initialized,@ override public boolean   (  )  {  return is initialized ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\PowerFilter.java,mark response code helper,"public static void   (  metrics service metrics service int response code  logger log  string component )  {  int code = response code  /  100 ;   string meter id = null ;  if  ( 1  <  code && code  <  6 )   {  meter id =  string . format ( ""%dxx"" code )  ;   }  if  ( meter id  !  =  null )   {  metrics service . get registry (  )  . meter (  metric registry . name ( ""org . openrepose . core .  response code"" component meter id )  )  . mark (  )  ;   }  else  {  log . error (  ( component  !  =  null  ?  component  +  "": "" : """" )   +  "" encountered invalid response code: ""  +  response code )  ;   }   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\PowerFilter.java,on event,"@ override public void   (  event <  application deployment event  list <  string >  >  e )  {  log . info ( "" {  } : {  }   -  -   application collection has been modified .   application that changed:  {  } "" cluster id node id e . payload (  )  )  ;   "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\PowerFilterRouterFactory.java, power filter router factory,@ inject public   ( @ value (  repose spring properties . node . node   id )   string node id @ value (  repose spring properties . node . cluster   id )   string cluster id  reporting service reporting service  request header service request header servi
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\PowerFilterRouterFactory.java,add destinations,private void   (  list <  ?  extends  destination >  dest list  map <  string  destination >  target list )  {  for  (   destination dest : dest list )   {  target list . put ( dest . get id (  )  dest )  ;   }   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\RequestTracer.java, request tracer,public   ( boolean trace boolean add header )  {  this . trace = trace ;  this . add header = add header ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\RequestTracer.java,trace enter,public long   (  )  {  if  (  ! trace )   {  return 0 ;   }  start time =  system . current time millis (  )  ;  return start time ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\RequestTracer.java,trace exit,"public long   (  http servlet response response  string filter name )  {  if  (  ! trace )   {  return 0 ;   }  long total request time =  system . current time millis (  )   -  start time ;  if  ( add header )   {  response . add header ( ""x - ""  +  filter name  +  "" -  time"" total request time  +  ""ms"" )  ;   }  return total request time ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\PowerFilterRouterFactory.java,get power filter router,"public  power filter router   (  repose cluster domain  node localhost  servlet context servlet context  string default destination )  throws  power filter chain exception  {  log . info ( "" {  } : {  }   -  -   reticulating  splines  -   building  power  filter  router"" cluster id node id )  ;  if  ( log . is debug enabled (  )  )   {   string cluster = domain . get id (  )  ;   list <  string >  cluster nodes = new  linked list <  >  (  )  ;  for  (   node n : domain . get nodes (  )  . get node (  )  )   {  cluster nodes . add ( n . get id (  )   +  "" - ""  +  n . get hostname (  )  )  ;   }  log . debug ( "" {  } : {  }   -   cluster nodes from cluster  {  }  for this router:  {  } "" cluster id node id cluster cluster nodes )  ;   list <  string >  destinations = new  linked list <  >  (  )  ;  for  (   destination endpoint endpoint : domain . get destinations (  )  . get endpoint (  )  )   {  destinations . add ( endpoint . get id (  )   +  "" - ""  +  endpoint . get hostname (  )  +  "":"" +  endpoint . get port (  )  )  ;   }  log . debug ( "" {  } : {  }   -   cluster destinations from cluster  {  }  for this router:  {  } "" cluster id node id cluster destinations )  ;   }  if  ( localhost  =  =  null || domain  =  =  null )   {  throw new  power filter chain exception ( "" domain and localhost cannot be null"" )  ;   }   destination location builder location builder = new  destination location builder ( routing service localhost )  ;   map <  string  destination >  destinations = new  hash map <  >  (  )  ;  if  ( domain . get destinations (  )   !  =  null )   {  add destinations ( domain . get destinations (  )  . get endpoint (  )  destinations )  ;  add destinations ( domain . get destinations (  )  . get target (  )  destinations )  ;   }  return new  power filter router impl ( location builder destinations domain default destination servlet context request header service response header service reporting service metrics service )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\PowerFilterChainException.java, power filter chain exception,public   (  string message  throwable cause )  {  super ( message cause )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\PowerFilterRouterImpl.java, power filter router impl,public   (  destination location builder location builder  map <  string  destination >  destinations  repose cluster domain  string default destination  servlet context servlet context  request header service request header service  response header service response header service  reporting service reporting service  optional <  metrics service >  metrics service )  {  this . location builder = location builder ;  this . destinations = destinations ;  this . domain = domain ;  this . default destination = default destination ;  this . servlet context = servlet context ;  this . request header service = request header service ;  this . response header service = response header service ;  this . metrics service = metrics service ;  this . reporting service = reporting service ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\PowerFilterRouterImpl.java,get endpoint,"private  string   (  destination dest  destination location location )  {   string builder sb = new  string builder (  )  ;  sb . append ( location . get uri (  )  . get host (  )  )  . append ( "":"" )  . append ( location . get uri (  )  . get port (  )  )  ;  if  ( dest instanceof  destination endpoint )   {  sb . append ( dest . get root path (  )  )  ;   }  else if  ( dest instanceof  destination cluster )   {  sb . append ( dest . get root path (  )  )  ;   }  else  {  throw new  illegal argument exception ( "" unknown destination type: ""  +  dest . get class (  )  . get name (  )  )  ;   }  return sb . to string (  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\PowerFilterRouterImpl.java,mark request timeout helper,"private void   ( int response code  string endpoint )  {  metrics service . filter (         -  >  response code  =  =  http   client   timeout )  . if present ( ms  -  >  ms . get registry (  )  . meter (  metric registry . name ( ""org . openrepose . core .  request timeout .  timeout to origin"" endpoint )  )  . mark (  )  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\PowerFilterRouterImpl.java,route,"@ override @ suppress warnings ( ""unchecked"" )  public void   (  http servlet request wrapper servlet request  http servlet response servlet response )  throws io exception   servlet exception  uri syntax exception  {   destination location location = nul"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\filter\FilterInitializationExceptionTest.java,should process custom message,"@ test public void   (  )  {   string expected exception message = "" oops !   something unexpected happened . "" ;   filter initialization exception filter initialization exception = new  filter initialization exception ( expected exception message new  th"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\filter\PowerFilterEventTest.java,should be usable,@ test public void   (  )  {   power filter event filter event =  power filter event . power   filter   configured ;  assert equals (  power filter event . power   filter   configured filter event )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\filter\FakeFilterListClass.java, fake filter list class,public   (  )  {  super . filter = new  array list <  filter >  (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\filter\FakeFilterListClass.java,add filter,public void   (  filter filter )  {  super . filter . add ( filter )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\filter\FakeFilterRegistration.java,get class name,@ override public  string   (  )  {  return null ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\filter\FakeFilterRegistration.java,get init parameter,@ override public  string   (  string name )  {  return null ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\filter\FakeFilterRegistration.java,get init parameters,@ override public  map <  string  string >    (  )  {  return null ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\filter\FakeFilterRegistration.java,get name,@ override public  string   (  )  {  return null ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\filter\FakeFilterRegistration.java,get servlet name mappings,@ override public  collection <  string >    (  )  {  return null ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\filter\FakeFilterRegistration.java,get url pattern mappings,@ override public  collection <  string >    (  )  {  return null ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\filter\FakeFilterRegistration.java,set init parameter,@ override public boolean   (  string name  string value )  {  return false ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\filter\FakeFilterRegistration.java,set init parameters,@ override public  set <  string >    (  map <  string  string >  init parameters )  {  return null ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\filter\RequestTracerTest.java,should not return time since enter call and should not add header to response,@ test public void   (  )  throws  exception  {  boolean trace = false ;  boolean add header = true ;  long time ;   request tracer rt ;  response = mock (  http servlet response . class )  ;  rt = new  request tracer ( trace add header )  ;  rt . trace e
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\filter\RequestTracerTest.java,should not return time since initialization,@ test public void   (  )  throws  exception  {  boolean trace = false ;  boolean add header = true ;  long time ;   request tracer rt ;  rt = new  request tracer ( trace add header )  ;   thread . sleep ( 1000l )  ;  time = rt . trace enter (  )  ;  asse
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\filter\RequestTracerTest.java,should return time since enter call and add header to response,@ test public void   (  )  throws  exception  {  boolean trace = true ;  boolean add header = true ;  long time ;   request tracer rt ;  response = mock (  http servlet response . class )  ;  rt = new  request tracer ( trace add header )  ;  rt . trace en
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\filter\RequestTracerTest.java,should return time since enter call and should not add header to response,@ test public void   (  )  throws  exception  {  boolean trace = true ;  boolean add header = false ;  long time ;   request tracer rt ;  response = mock (  http servlet response . class )  ;  rt = new  request tracer ( trace add header )  ;  rt . trace e
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\filter\RequestTracerTest.java,should return time since initialization,@ test public void   (  )  throws  exception  {  boolean trace = true ;  boolean add header = true ;  long time ;   request tracer rt ;  rt = new  request tracer ( trace add header )  ;   thread . sleep ( 1000l )  ;  time = rt . trace enter (  )  ;  asser
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\filter\RequestTracerPerfTest.java,check performance under load,@ test public void   (  )  {  boolean trace = true ;  boolean add header = true ;  long total millis = 0 ;  final  request tracer rt = new  request tracer ( trace add header )  ;  for  ( int i = 0 ;  i  <  100 ;   +  + i )   {  rt . trace enter (  )  ;  r
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\filter\RequestTracerPerfTest.java,check performance under load multi threaded,@ test public void   (  )  {  boolean trace = true ;  boolean add header = true ;  long total time = 0 ;  final  request tracer rt = new  request tracer ( trace add header )  ;  final  thread[] threads = new  thread[num   threads] ;  final long[] times = 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\filter\RequestTracerPerfTest.java,run,"public void   (  )  {  long total millis = 0 ;  for  ( int i = 0 ;  i  <  num   hits ;   +  + i )   {  long start time =  system . current time millis (  )  ;  rt . trace enter (  )  ;  rt . trace exit ( response ""my filter"" )  ;  long end time =  system . current time millis (  )  ;  total millis +  = end time  -  start time ;   }  times[index] = total millis ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\datastore\distributed\impl\ehcache\ReposeLocalCacheTest.java,set up,"@ before public void   (  )  {  tenant id = ""tenant id"" ;  token = ""token"" ;  user id = ""user id"" ;  repose local cache mock = mock (  repose local cache . class )  ;  reset ( metrics service )  ;  reset ( metric registry )  ;  reset ( timer )  ;  reset ("
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\datastore\distributed\impl\ehcache\ReposeLocalCacheTest.java,should remove cache data,"@ test public void   (  )  {  repose local cache real = new  repose local cache ( datastore service )  ;  final  string key = ""my element"" ;   string value = ""1  2  3"" ;  datastore = datastore service . get default datastore (  )  ;  datastore . put ( key"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\datastore\distributed\impl\ehcache\ReposeLocalCacheTest.java,should return boolean when removing groups,@ test public void   (  )  {  assert that ( repose local cache mock . remove groups ( tenant id token )  is ( instance of (  boolean . class )  )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\datastore\distributed\impl\ehcache\ReposeLocalCacheTest.java,should return boolean when removing limits,@ test public void   (  )  {  assert that ( repose local cache mock . remove limits ( user id )  is ( instance of (  boolean . class )  )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\datastore\distributed\impl\ehcache\ReposeLocalCacheTest.java,should return boolean when removing tokens and roles,@ test public void   (  )  {  assert that ( repose local cache mock . remove token and roles ( tenant id token )  is ( instance of (  boolean . class )  )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\reporting\destinations\DestinationInfoLogicTest.java,setup,@ before public void   (  )  {  destination info logic = new  destination info logic ( destination id )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\reporting\destinations\DestinationInfoLogicTest.java,should accumulate response time,@ test public void   (  )  {  destination info logic . accumulate response time ( 1000l )  ;  assert equals ( 1000l destination info logic . get accumulated response time (  )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\reporting\destinations\DestinationInfoLogicTest.java,should copy,@ test public void   (  )  {  destination info logic . get status code counts (  )  . put ( 200 new  status code response store ( 7l 0 )  )  ;   destination info copy = destination info logic . copy (  )  ;  destination info logic . increment status code 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\reporting\destinations\DestinationInfoLogicTest.java,should equal unmodified copy,@ test public void   (  )  {  destination info logic . increment request count (  )  ;  destination info logic . get status code counts (  )  . put ( 400 new  status code response store ( 5l 0 )  )  ;   destination info copy = destination info logic . cop
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\reporting\destinations\DestinationInfoLogicTest.java,should get average response time,@ test public void   (  )  {  long total responses = 1000l ;  long response time = 2l ;  double expected average response time = total responses  /  response time ;  for  ( int i = 0 ;  i  <  total responses ;  i +  +  )   {  destination info logic . incr
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\reporting\destinations\DestinationInfoLogicTest.java,should get id,@ test public void   (  )  {  assert equals ( destination id destination info logic . get destination id (  )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\reporting\destinations\DestinationInfoLogicTest.java,should get throughput,@ test public void   (  )  throws  interrupted exception  {  long total responses = 1000l ;  long sleep time = 1000l ;  double max variance in ms = 10 . 0 ;  double max throughput variance = max variance in ms  /  1000 . 0 * sleep time ;  for  ( int i = 0
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\reporting\destinations\DestinationInfoLogicTest.java,should increment request count,@ test public void   (  )  {  destination info logic . increment request count (  )  ;  assert equals ( 1 destination info logic . get total requests (  )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\reporting\destinations\DestinationInfoLogicTest.java,should increment response count,@ test public void   (  )  {  destination info logic . increment response count (  )  ;  assert equals ( 1 destination info logic . get total responses (  )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\reporting\destinations\DestinationInfoLogicTest.java,should increment status code count,@ test public void   (  )  {  destination info logic . increment status code count ( 400 10 )  ;  destination info logic . increment status code count ( 400 20 )  ;  assert equals ( 2 destination info logic . get total status code ( 400 )  )  ;  assert eq
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\reporting\destinations\DestinationInfoLogicTest.java,should produce different hashcodes,@ test public void   (  )  {  destination info logic . increment request count (  )  ;  destination info logic . get status code counts (  )  . put ( 400 new  status code response store ( 5l 0 )  )  ;   destination info copy = destination info logic . cop
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\reporting\destinations\DestinationInfoLogicTest.java,should return zero if no elapsed time,@ test public void   (  )  {  assert equals ( 0 destination info logic . get throughput (  )  0 . 1 )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\reporting\destinations\DestinationInfoLogicTest.java,should return zero if no response time,@ test public void   (  )  {  assert equals ( 0 destination info logic . get average response time (  )  0 . 1 )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\reporting\destinations\DestinationInfoLogicTest.java,should return zero if status code not tracked,@ test public void   (  )  {  assert equals ( 0 destination info logic . get total status code ( 500 )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\deploy\EarFilenameFilterTest.java,set up,@ before public void   (  )  {  ear filename filter =  (  ear filename filter )  ear filename filter . get instance (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\deploy\EarFilenameFilterTest.java,should return false for empty ear name,"@ test public void   (  )  {  assert false ( ear filename filter . accept ( dir """" )  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\deploy\EarFilenameFilterTest.java,should return false for invalid ear name,"@ test public void   (  )  {  assert false ( ear filename filter . accept ( dir ""filter - bunder"" )  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\deploy\EarFilenameFilterTest.java,should return true for valid ear name,"@ test public void   (  )  {  assert true ( ear filename filter . accept ( dir ""filter - bundle . ear"" )  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\reporting\metrics\MetricsServiceImplTest.java,create summing meter factory should be passed the service metric registry,"@ test public void   (  )  throws  exception  {   string name prefix =  metric registry . name ( ""test"" ""name"" ""prefix"" )  ;   string name = ""foo"" ;   metric registry metric registry = metrics service . get registry (  )  ;   aggregate meter factory summi"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\reporting\metrics\MetricsServiceImplTest.java,set up,@ before public void   (  )  {  metrics service = new  metrics service impl ( mock (  configuration service . class )  mock (  health check service . class )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\reporting\metrics\MetricsServiceImplTest.java,test get registry,@ test public void   (  )  {   metric registry registry = metrics service . get registry (  )  ;  assert not null ( registry )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\reporting\metrics\MetricsServiceImplTest.java,test service enabled disabled,@ test public void   (  )  throws  malformed object name exception   attribute not found exception  m bean exception   reflection exception   instance not found exception  {  metrics service . set enabled ( false )  ;  assert false ( metrics service . is 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\reporting\jmx\ReposeReportTest.java,set up,"@ before public void   (  )  {  destination ids . add ( ""id   1"" )  ;  destination ids . add ( ""id   2"" )  ;  destination ids . add ( ""id   7"" )  ;  reporting service = new  reporting service impl ( mock (  configuration service . class )  )  ;  reporting"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\reporting\jmx\ReposeReportTest.java,when retrievings from report,"@ test public void   (  )  {   long refresh = new  long ( ""4333"" )  ;  reporting service . increment repose status code count ( 400 refresh )  ;  reporting service . increment repose status code count ( 401 refresh )  ;  reporting service . increment repo"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\reporting\jmx\ReposeReportTest.java,when retrievings from report,"@ test public void   (  )  {   long refresh = new  long ( ""4333"" )  ;  reporting service . increment repose status code count ( 500 refresh )  ;  reporting service . increment repose status code count ( 503 refresh )  ;  reporting service . increment repo"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\reporting\jmx\ReposeReportTest.java,when retrieving destination info,"@ test public void   (  )  throws  open data exception  {   long refresh = new  long ( ""4333"" )  ;  reporting service . record service response ( ""id   1"" 400 refresh )  ;  reporting service . record service response ( ""id   1"" 401 refresh )  ;  reporting"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\reporting\metrics\MetricsServiceContextTest.java,set up,@ before public void   (  )  {  configuration service = mock (  configuration service . class )  ;  health check service = mock (  health check service . class )  ;  health check service proxy = mock (  health check service proxy . class )  ;  when ( heal
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\reporting\metrics\MetricsServiceContextTest.java,verify issue reported,@ test public void   (  )  throws io exception  {   configuration resource resolver resource resolver = mock (  configuration resource resolver . class )  ;   configuration resource configuration resource = mock (  configuration resource . class )  ;  whe
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\reporting\metrics\MetricsServiceContextTest.java,verify registered to health check service,@ test public void   (  )  {  verify ( health check service times ( 1 )  )  . register (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\reporting\metrics\MultiMeterTest.java,mark all should mark all input meters on call,@ test public void   (  )  throws  exception  {   meter meter one = mock (  meter . class )  ;   meter meter two = mock (  meter . class )  ;   meter meter three = mock (  meter . class )  ;   multi meter . mark all ( meter one meter two meter three )  ; 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\reporting\metrics\MultiMeterTest.java,markn all should mark all input metersn times on call,@ test public void   (  )  throws  exception  {  long n = 10 ;   meter meter one = mock (  meter . class )  ;   meter meter two = mock (  meter . class )  ;   meter meter three = mock (  meter . class )  ;   multi meter . markn all ( n meter one meter two
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\reporting\metrics\MultiMeterTest.java,markn should mark all metersn times,@ test public void   (  )  throws  exception  {  long n = 10 ;   meter meter one = mock (  meter . class )  ;   meter meter two = mock (  meter . class )  ;   multi meter multi meter = new  multi meter ( meter one meter two )  ;  multi meter . mark ( n ) 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\reporting\metrics\MultiMeterTest.java,mark should mark all meters once,@ test public void   (  )  throws  exception  {   meter meter one = mock (  meter . class )  ;   meter meter two = mock (  meter . class )  ;   multi meter multi meter = new  multi meter ( meter one meter two )  ;  multi meter . mark (  )  ;  verify ( met
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\reporting\ReportingServiceImplTest.java,setup,"@ before public void   (  )  {  destination ids . add ( ""id   1"" )  ;  destination ids . add ( ""id   2"" )  ;  destination ids . add ( ""id   7"" )  ;  reporting service = new  reporting service impl ( mock (  configuration service . class )  )  ;  reporting"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\reporting\ReportingServiceImplTest.java,should record service response,"@ test public void   (  )  {   long response time = new  long ( ""200"" )  ;  reporting service . record service response ( ""id   1"" 202 response time )  ;   destination info dst info = reporting service . get destination info ( ""id   1"" )  ;  assert equals"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\reporting\ReportingServiceImplTest.java,should reset values every seconds,"@ test public void   (  )  throws  interrupted exception  {  for  ( int i = 0 ;  i  <  5 ;  i +  +  )   {  reporting service . increment request count ( ""id   7"" )  ;   }  assert equals ( 5 reporting service . get destination info ( ""id   7"" )  . get tota"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\reporting\ReportingServiceImplTest.java,should return destination list,@ test public void   (  )  {   list <  destination info >  dst = reporting service . get destinations (  )  ;  assert equals ( 3 dst . size (  )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\rms\HrefFileReaderTest.java,should return null if href is nota file,"@ test public void   (  )  {  assert null ( href file reader . validate href ( ""http: /  / something"" ""file   id"" )  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\reporting\repose\ReposeInfoLogicTest.java,setup,@ before public void   (  )  {  repose info logic = new  repose info logic (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\reporting\repose\ReposeInfoLogicTest.java,should accumulate request size,@ test public void   (  )  {  repose info logic . process request size ( 105l )  ;  assert equals ( 105l repose info logic . get accumulated request size (  )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\reporting\repose\ReposeInfoLogicTest.java,should accumulate response size,@ test public void   (  )  {  repose info logic . process response size ( 107l )  ;  assert equals ( 107l repose info logic . get accumulated response size (  )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\reporting\repose\ReposeInfoLogicTest.java,should copy,@ test public void   (  )  {  repose info logic . increment status code count ( 200 10 )  ;   repose info copy = repose info logic . copy (  )  ;  repose info logic . increment status code count ( 200 20 )  ;  assert not same ( copy . get total status cod
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\reporting\repose\ReposeInfoLogicTest.java,should get average request size,@ test public void   (  )  {  long total requests = 1000l ;  long request size = 2l ;  double expected average request size = request size  /  total requests ;  for  ( int i = 0 ;  i  <  1000 ;  i +  +  )   {  repose info logic . increment request count (
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\reporting\repose\ReposeInfoLogicTest.java,should get average response size,@ test public void   (  )  {  long total responses = 1000l ;  long response size = 2l ;  double expected average response size = response size  /  total responses ;  for  ( int i = 0 ;  i  <  1000 ;  i +  +  )   {  repose info logic . increment response c
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\reporting\repose\ReposeInfoLogicTest.java,should increment requests,@ test public void   (  )  {  repose info logic . increment request count (  )  ;  assert equals ( 1 repose info logic . get total requests (  )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\reporting\repose\ReposeInfoLogicTest.java,should increment responses,@ test public void   (  )  {  repose info logic . increment response count (  )  ;  assert equals ( 1 repose info logic . get total responses (  )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\reporting\repose\ReposeInfoLogicTest.java,should increment status code,@ test public void   (  )  {  repose info logic . increment status code count ( 400 10 )  ;  assert equals ( 1 repose info logic . get total status code ( 400 )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\reporting\repose\ReposeInfoLogicTest.java,should return zero if no requests,@ test public void   (  )  {  assert equals ( 0 repose info logic . get average request size (  )  0 . 1 )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\reporting\repose\ReposeInfoLogicTest.java,should return zero if no responses,@ test public void   (  )  {  assert equals ( 0 repose info logic . get average response size (  )  0 . 1 )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\reporting\repose\ReposeInfoLogicTest.java,should update request min max,@ test public void   (  )  {  repose info logic . process request size ( 85l )  ;  assert equals ( 85l repose info logic . get minimum request size (  )  )  ;  assert equals ( 85l repose info logic . get maximum request size (  )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\reporting\repose\ReposeInfoLogicTest.java,should update response min max,@ test public void   (  )  {  repose info logic . process response size ( 55l )  ;  assert equals ( 55l repose info logic . get minimum response size (  )  )  ;  assert equals ( 55l repose info logic . get maximum response size (  )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\reporting\metrics\SummingMeterFactoryImplTest.java,construction should register across all meter,@ test public void   (  )  throws  exception  {  verify ( metric registry )  . meter ( name ( name   prefix across   all )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\reporting\metrics\SummingMeterFactoryImplTest.java,create aggregate meter should register and return an aggregated meter,"@ test public void   (  )  throws  exception  {   string meter name = ""foo"" ;   meter meter = summing meter factory . create meter ( meter name )  ;  verify ( metric registry )  . meter ( eq ( name ( name   prefix meter name )  )  arg that ( instance of ("
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\reporting\metrics\SummingMeterFactoryImplTest.java,create child factory should returna summing meter factory that produces hierarchically cumulative meters,"@ test public void   (  )  throws  exception  {   metric registry registry = new  metric registry (  )  ;   aggregate meter factory parent factory = new  summing meter factory ( registry ""parent"" )  ;   aggregate meter factory child factory = parent facto"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\reporting\metrics\SummingMeterFactoryImplTest.java,get across all meter should return the across all meter,@ test public void   (  )  throws  exception  {   meter meter = summing meter factory . get aggregate meter (  )  ;  assert that ( meter is ( across all meter )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\reporting\metrics\SummingMeterFactoryImplTest.java,setup,@ before public void   (  )  {  across all meter = mock (  meter . class )  ;  meter = mock (  meter . class )  ;  metric registry = mock (  metric registry . class )  ;  when ( metric registry . meter (  matchers . ends with ( across   all )  )  )  . the
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\servlet\boot\event\EventServiceImplTest.java,should block when no events are available,@ test public void   (  )  throws  interrupted exception  {  final  test event sent event =  test event . event   occurred ;  final  atomic reference <  enum >  received event = new  atomic reference <  >  (  )  ;  final  atomic reference <  exception >  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\servlet\boot\event\EventServiceImplTest.java,should not fail when removing non existent listener,@ test public void   (  )  {  manager . squelch ( null  test event . one )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\servlet\boot\event\EventServiceImplTest.java,should register listeners,"@ test public void   (  )  throws  exception  {  final  string expected = ""expected"" ;  manager . listen ( e  -  >   {  assert equals ( "" event payload must match expected value"" expected e . payload (  )  )  ;  event fired tracker = true ;   }    test ev"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\servlet\boot\event\EventServiceImplTest.java,should squelch events for listeners,"@ test public void   (  )  throws  exception  {  final  event listener <  test event  string >  my listener = e  -  >  event fired tracker = true ;  manager . listen ( my listener  test event . class )  ;  manager . new event (  test event . one """" )  ;  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\servlet\boot\event\EventServiceImplTest.java,should squelch individual events on listener,"@ test public void   (  )  throws  exception  {  final  string expected one = ""expected one""  expected two = ""expected two"" ;  final  event listener <  test event  string >  listener = e  -  >   {  switch  ( e . type (  )  )   {  case one: if  ( event fir"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\servlet\boot\event\EventServiceImplTest.java,should update listener,"@ test public void   (  )  throws  exception  {  final  string expected = ""expected"" ;  final  event listener <  test event  string >  listener = e  -  >   {  if  ( e . type (  )   =  =   test event . one )   {  assert true ( "" event must be fired"" event "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\servlet\boot\event\EventServiceImplTest.java,stand up,@ before public void   (  )  {  manager = new  event service impl (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\rms\ResponseMessageServiceImplTest.java, escape the message for json,"@ test public void   (  )  throws  exception  {  when ( mocked request . get headers ( "" accept"" )  )  . then return (  collections . enumeration (  collections . singleton list ( media   type   application   json )  )  )  ;  response message service impl"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\rms\ResponseMessageServiceImplTest.java, escape the message for plain,"@ test public void   (  )  throws  exception  {  when ( mocked request . get headers ( "" accept"" )  )  . then return (  collections . enumeration (  collections . singleton list ( media   type   text   plain )  )  )  ;  response message service impl . han"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\rms\ResponseMessageServiceImplTest.java, escape the message for xml,"@ test public void   (  )  throws  exception  {  when ( mocked request . get headers ( "" accept"" )  )  . then return (  collections . enumeration (  collections . singleton list ( media   type   application   xml )  )  )  ;  response message service impl "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\rms\ResponseMessageServiceImplTest.java,create matcher,"private  status code matcher   (  overwrite type overwrite type )  {   status code matcher matcher = new  status code matcher (  )  ;  matcher . set id ( ""413"" )  ;  matcher . set code regex ( ""413"" )  ;  matcher . set overwrite ( overwrite type )  ;   message message = new  message (  )  ;  message . set media type ( ""* / *"" )  ;  message . set value ( message )  ;  matcher . get message (  )  . add ( message )  ;  return matcher ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\rms\ResponseMessageServiceImplTest.java,create message,"private static  message   (  string media type )  {   message message = new  message (  )  ;  message . set media type ( media type )  ;  message . set content type ( media type )  ;  message . set value ( ""%m"" )  ;  return message ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\rms\ResponseMessageServiceImplTest.java,setup,@ before public void   (  )  {   status code matcher matcher = new  status code matcher (  )  ;  matcher . set id ( i   am   a   teapot   value   string )  ;  matcher . set code regex ( i   am   a   teapot   value   string )  ;  matcher . set overwrite ( 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\rms\ResponseMessageServiceImplTest.java,should preserve if empty and body,"@ test public void   (  )  throws io exception  {  final  byte buffer internal buffer = new  cyclic byte buffer (  )  ;  internal buffer . put ( ""hello there"" . get bytes (  )  )  ;  final  servlet output stream output stream = new  byte buffer servlet ou"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\rms\ResponseMessageServiceImplTest.java,should write if empty and no body,@ test public void   (  )  throws io exception  {  final  byte buffer internal buffer = new  cyclic byte buffer (  )  ;  final  servlet output stream output stream = new  byte buffer servlet output stream ( internal buffer )  ;  final  print writer print 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\nodeservice\httpcomponent\HttpComponentInputStreamTest.java,set up,@ before public void   (  )  throws io exception  {  entity = mock (  http entity . class )  ;  stream = mock (  input stream . class )  ;  when ( entity . get content (  )  )  . then return ( stream )  ;  input = new  http component input stream ( entity
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\nodeservice\httpcomponent\HttpComponentInputStreamTest.java,should,"@ test public void   (  )  throws io exception  {  final int expected =  - 1 ;  assert equals ( "" should return  - 1 when reading a null input stream"" expected input . read (  )  )  ;  assert equals ( "" should return  - 1 when reading a null input stream"""
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\nodeservice\httpcomponent\HttpComponentInputStreamTest.java,should call underlying stream,@ test public void   (  )  throws io exception  {  input . read (  )  ;  verify ( stream )  . read (  )  ;  byte[] bytes = new byte[10] ;  input . read ( bytes )  ;  verify ( stream )  . read ( bytes )  ;  input . read ( bytes 0 5 )  ;  verify ( stream ) 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\spring\ReposeJmxNamingStrategyTest.java,get object name   should return the annotated object name,@ test public void   (  )  throws  exception  {  org . springframework . jmx . export . metadata .  managed resource managed resource = mock ( org . springframework . jmx . export . metadata .  managed resource . class )  ;  when ( managed resource . get 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\spring\ReposeJmxNamingStrategyTest.java,get object name   should return the bean key object name,@ test public void   (  )  throws  exception  {   object bean object = new  object (  )  ;   object name object name = repose jmx naming strategy . get object name ( bean object managed   resource   bean   key )  ;  assert equals ( managed   resource   be
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\spring\ReposeJmxNamingStrategyTest.java,get object name   should return thefqcn object name,@ test public void   (  )  throws  exception  {   object bean object = new  object (  )  ;   object name expected object name =  jmx object name factory . get name (  net utilities . best guess hostname (  )  bean object . get class (  )  . get canonical 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\spring\ReposeJmxNamingStrategyTest.java,set up,@ before public void   (  )  throws  exception  {  annotation jmx attribute source = mock (  annotation jmx attribute source . class )  ;  repose jmx naming strategy = new  repose jmx naming strategy ( annotation jmx attribute source )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\nodeservice\httpcomponent\HttpComponentResponseProcessorTest.java,mock headers,"private static  list <  header >    (  map <  string  string >  header values )  {  final  list <  header >  headers = new  array list <  >  (  )  ;  for  (   string header : header values . key set (  )  )   {   string values = header values . get ( header )  ;  for  (   string value : values . split ( "" "" )  )   {   header header1 = mock (  header . class )  ;  when ( header1 . get name (  )  )  . then return ( header )  ;  when ( header1 . get value (  )  )  . then return ( value )  ;  headers . add ( header1 )  ;   }   }  return headers ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\nodeservice\httpcomponent\HttpComponentResponseProcessorTest.java,set up,"@ before public void   (  )  throws io exception  {  header values = new  hash map <  >  (  )  ;  header values . put ( "" header1"" "" value1"" )  ;  header values . put ( "" header2"" "" value21  value22"" )  ;  header values . put ( "" header3"" "" value3 ; q = 3"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\nodeservice\httpcomponent\HttpComponentResponseProcessorTest.java,should not write excluded,"@ test public void   (  )  throws io exception  {  header values . put ( "" connection"" "" should be excluded . "" )  ;  header values . put ( "" transfer -  encoding"" "" should be excluded . "" )  ;  header values . put ( "" server"" "" should be excluded . "" )  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\nodeservice\httpcomponent\HttpComponentResponseProcessorTest.java,should set headers,@ test public void   (  )  throws io exception  {  processor . process (  )  ;  verify ( servlet response )  . set status ( eq ( 200 )  )  ;  for  (   header header : headers )   {  verify ( servlet response )  . add header ( header . get name (  )  heade
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\nodeservice\httpcomponent\HttpComponentResponseProcessorTest.java,should set status,@ test public void   (  )  throws io exception  {  processor . process (  )  ;  verify ( servlet response )  . set status ( eq ( 200 )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\nodeservice\httpcomponent\HttpComponentResponseProcessorTest.java,should write response,@ test public void   (  )  throws io exception  {  processor . process (  )  ;  verify ( servlet response )  . set status ( eq ( 200 )  )  ;  for  (   header header : headers )   {  verify ( servlet response )  . add header ( header . get name (  )  heade
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\nodeservice\request\RequestHeaderServiceContextTest.java,cleanup class,@ after class public static void   (  )  {   system . clear property (  configuration factory . configuration   file   property )  ;  ctx . reconfigure (  )  ;   status logger . get logger (  )  . reset (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\nodeservice\request\RequestHeaderServiceContextTest.java,contains,"private  matcher <  list <  log event >  >    ( final  string msg )  {  return new  type safe matcher <  list <  log event >  >  (  )  {  @ override protected boolean matches safely (  final  list <  log event >  events )  {  boolean rtn = false ;   log event event ;  for  (  iterator <  log event >  iterator = events . iterator (  )  ;   ! rtn && iterator . has next (  )  ;   )   {  event = iterator . next (  )  ;  rtn = event . get message (  )  . get formatted message (  )  . contains ( msg )  ;   }  return rtn ;   }  @ override public void describe to (   description description )  {  description . append text ( "" the  list of  log  events contained a  formatted  message of: \""""  +  msg  +  ""\"""" )  ;   }   }   ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\nodeservice\request\RequestHeaderServiceContextTest.java,describe to,"@ override public void   (  description description )  {  description . append text ( "" the  list of  log  events contained a  formatted  message of: \""""  +  msg  +  ""\"""" )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\nodeservice\request\RequestHeaderServiceContextTest.java,get valid system model,"private static  system model   (  )  {   node node = new  node (  )  ;   destination endpoint dest = new  destination endpoint (  )  ;   repose cluster cluster = new  repose cluster (  )  ;   system model sys model = new  system model (  )  ;  node . set id ( ""node1"" )  ;  node . set hostname ( ""localhost"" )  ;  node . set http port ( 8080 )  ;  dest . set hostname ( ""localhost"" )  ;  dest . set port ( 9090 )  ;  dest . set default ( true )  ;  dest . set id ( ""dest1"" )  ;  dest . set protocol ( ""http"" )  ;  cluster . set id ( ""cluster1"" )  ;  cluster . set nodes ( new  node list (  )  )  ;  cluster . get nodes (  )  . get node (  )  . add ( node )  ;  cluster . set destinations ( new  destination list (  )  )  ;  cluster . get destinations (  )  . get endpoint (  )  . add ( dest )  ;  sys model . get repose cluster (  )  . add ( cluster )  ;  return sys model ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\nodeservice\request\RequestHeaderServiceContextTest.java,matches safely,@ override protected boolean   ( final  list <  log event >  events )  {  boolean rtn = false ;   log event event ;  for  (  iterator <  log event >  iterator = events . iterator (  )  ;   ! rtn && iterator . has next (  )  ;   )   {  event = iterator . n
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\nodeservice\request\RequestHeaderServiceContextTest.java,set up,"@ before public void   (  )  throws  exception  {  app =  (  (  list appender )  ( ctx . get configuration (  )  . get appender ( "" list0"" )  )  )  . clear (  )  ;  health check service = mock (  health check service . class )  ;  health check service pro"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\nodeservice\request\RequestHeaderServiceContextTest.java,setup spec,@ before class public static void   (  )  {   system . set property (  configuration factory . configuration   file   property config )  ;  ctx =  (  logger context )  log manager . get context ( false )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\nodeservice\request\RequestHeaderServiceContextTest.java,system model listener   configuration updated   localhost found,"@ test public void   (  )  throws  exception  {   request header service impl request header service = new  request header service impl ( configuration service container configuration service health check service ""cluster1"" ""node1"" ""1 . 0"" )  ;   update l"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\nodeservice\request\RequestHeaderServiceContextTest.java,system model listener   configuration updated   localhost not found,"@ test public void   (  )  throws  exception  {   request header service impl request header service context = new  request header service impl ( configuration service container configuration service health check service ""cluster id"" ""node id"" ""1 . 0"" )  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\nodeservice\httpcomponent\HttpComponentRequestProcessorTest.java,set up,"@ before public void   (  )  throws uri syntax exception  io exception  {  request = mock (  http servlet request . class )  ;  uri = new uri ( ""http: /  / www . openrepose . org"" )  ;  host = new  http host ( ""somename"" )  ;  method = mock (  http entity"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\nodeservice\httpcomponent\HttpComponentRequestProcessorTest.java,should set actual content length if chunked is,"@ test public void   (  )  throws  exception  {   string body = ""test"" ;  when ( request . get input stream (  )  )  . then return ( new  servlet input stream wrapper ( new  byte array input stream ( body . get bytes (  )  )  )  )  ;   argument captor <  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\nodeservice\httpcomponent\HttpComponentRequestProcessorTest.java,should set actual content length if chunked is auto and original request was not chunked,"@ test public void   (  )  throws  exception  {   string body = ""test"" ;  when ( request . get input stream (  )  )  . then return ( new  servlet input stream wrapper ( new  byte array input stream ( body . get bytes (  )  )  )  )  ;   argument captor <  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\nodeservice\httpcomponent\HttpComponentRequestProcessorTest.java,should set actual content length if chunked is false,"@ test public void   (  )  throws  exception  {   string body = ""test"" ;  when ( request . get input stream (  )  )  . then return ( new  servlet input stream wrapper ( new  byte array input stream ( body . get bytes (  )  )  )  )  ;   argument captor <  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\nodeservice\httpcomponent\HttpComponentRequestProcessorTest.java,should set headers,@ test public void   (  )  throws io exception  {  when ( request . get input stream (  )  )  . then return ( new  servlet input stream wrapper ( new  byte array input stream ( new byte[] {  }  )  )  )  ;  processor . process ( method )  ;  verify ( reque
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\nodeservice\httpcomponent\HttpComponentRequestProcessorTest.java,should set input stream,@ test public void   (  )  throws io exception  {  when ( request . get input stream (  )  )  . then return ( new  servlet input stream wrapper ( new  byte array input stream ( new byte[] {  }  )  )  )  ;  processor . process ( method )  ;  verify ( metho
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\nodeservice\httpcomponent\HttpComponentRequestProcessorTest.java,should set params,"@ test public void   (  )  throws  exception  {  when ( request . get input stream (  )  )  . then return ( new  servlet input stream wrapper ( new  byte array input stream ( new byte[] {  }  )  )  )  ;  uri uri = processor . get uri ( ""http: /  / foo . c"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\nodeservice\httpcomponent\HttpComponentRequestProcessorTest.java,should set unknown content length if chunked is,@ test public void   (  )  throws  exception  {  when ( request . get input stream (  )  )  . then return ( new  servlet input stream wrapper ( new  byte array input stream ( new byte[] {  }  )  )  )  ;   argument captor <  input stream entity >  request 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\nodeservice\httpcomponent\HttpComponentRequestProcessorTest.java,should set unknown content length if chunked is auto and original request was chunked,"@ test public void   (  )  throws  exception  {  when ( request . get input stream (  )  )  . then return ( new  servlet input stream wrapper ( new  byte array input stream ( new byte[] {  }  )  )  )  ;  when ( request . get header ( eq ( ""transfer - enco"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\nodeservice\httpcomponent\HttpComponentRequestProcessorTest.java,should set unknown content length if chunked is invalid,@ test public void   (  )  throws  exception  {  when ( request . get input stream (  )  )  . then return ( new  servlet input stream wrapper ( new  byte array input stream ( new byte[] {  }  )  )  )  ;   argument captor <  input stream entity >  request 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\nodeservice\httpcomponent\HttpComponentRequestProcessorTest.java,should set unknown content length if chunked is true,@ test public void   (  )  throws  exception  {  when ( request . get input stream (  )  )  . then return ( new  servlet input stream wrapper ( new  byte array input stream ( new byte[] {  }  )  )  )  ;   argument captor <  input stream entity >  request 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\nodeservice\response\LocationHeaderBuilderTest.java,set up,"@ before public void   (  )  {  original request = mock (  http servlet request . class )  ;  response = mock (  http servlet response . class )  ;  when ( original request . get scheme (  )  )  . then return ( ""http"" )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\nodeservice\response\LocationHeaderBuilderTest.java,should keep query part,"@ test public void   (  )  throws  malformedurl exception  {  when ( original request . get server name (  )  )  . then return ( ""myhost . com"" )  ;  when ( original request . get server port (  )  )  . then return ( 80 )  ;  when ( original request . get"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\nodeservice\response\LocationHeaderBuilderTest.java,should remove root path,"@ test public void   (  )  throws  malformedurl exception  {  when ( original request . get server name (  )  )  . then return ( ""myhost . com"" )  ;  when ( original request . get server port (  )  )  . then return ( 8080 )  ;  when ( original request . g"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\nodeservice\response\LocationHeaderBuilderTest.java,should remove root path,"@ test public void   (  )  throws  malformedurl exception  {  when ( original request . get server name (  )  )  . then return ( ""myhost . com"" )  ;  when ( original request . get server port (  )  )  . then return ( 8080 )  ;  when ( original request . g"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\nodeservice\response\LocationHeaderBuilderTest.java,should remove root path and add version,"@ test public void   (  )  throws  malformedurl exception  {  when ( original request . get server name (  )  )  . then return ( ""myhost . com"" )  ;  when ( original request . get server port (  )  )  . then return ( 8080 )  ;  when ( original request . g"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\nodeservice\response\LocationHeaderBuilderTest.java,should remove root path without port,"@ test public void   (  )  throws  malformedurl exception  {  when ( original request . get server name (  )  )  . then return ( ""myhost . com"" )  ;  when ( original request . get server port (  )  )  . then return ( 80 )  ;  when ( original request . get"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\nodeservice\response\LocationHeaderBuilderTest.java,should remove root path without port   ,"@ test public void   (  )  throws  malformedurl exception  {  when ( original request . get server name (  )  )  . then return ( ""myhost . com"" )  ;  when ( original request . get server port (  )  )  . then return ( 80 )  ;  when ( original request . get"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core-api\src\main\java\org\openrepose\commons\config\manager\UpdateFailedException.java, update failed exception,public   (  string message  throwable cause )  {  super ( message cause )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\SchemaReadTest.java,should read from byte buffers,@ test public void   (  )  throws  exception  {  final  byte buffer buffer = new  cyclic byte buffer (  )  ;  final  byte buffer output stream bos = new  byte buffer output stream ( buffer )  ;  final  input stream xml input =  schema read test . class . 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core-api\src\main\java\org\openrepose\commons\config\resource\ResourceResolutionException.java, resource resolution exception,public   (  string message  throwable cause )  {  super ( message cause )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core-api\src\main\java\org\openrepose\core\filter\FilterConfigHelper.java, filter config helper,public   (  filter config filter config )  {  this . filter config = filter config ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core-api\src\main\java\org\openrepose\core\filter\FilterConfigHelper.java,get filter config,public  string   (  string default config )  {  return  string utils . default if empty ( filter config . get init parameter ( filter   config )  default config )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core-api\src\main\java\org\openrepose\core\services\reporting\metrics\MetricNameUtility.java,safe reporting name,public static  string   (  string name )  {   string builder safe name = new  string builder ( name . length (  )  )  ;  for  (  char c : name . to char array (  )  )   {  safe name . append ( replacement   character   map . get or default ( c  string . value of ( c )  )  )  ;   }  return safe name . to string (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core-api\src\main\java\org\openrepose\core\servlet\PowerApiContextException.java, power api context exception,public   (  string message )  {  super ( message )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core-api\src\main\java\org\openrepose\core\spring\ReposeSpringProperties.java,strip spring value stupidity,public static  string   (  string at value )  {  return at value . substring ( 2 at value . length (  )   -  1 )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressedHttpServletRequest.java, compressed http servlet request,  (  http servlet request http request  compressing stream factory compressing stream factory  compressing filter context context )  {  super ( http request )  ;  this . http request = http request ;  this . compressing stream factory = compressing stream factory ;  this . context = context ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressedHttpServletRequest.java,get compressing servlet input stream,private  compressing servlet input stream   (  )  throws io exception  {  if  ( compressedsis  =  =  null )   {  compressedsis = new  compressing servlet input stream ( http request . get input stream (  )  compressing stream factory context )  ;   }  return compressedsis ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressedHttpServletRequest.java,get date header,@ override public long   (  string header )  {  return is filtered header ( header )   ?   - 1l : super . get date header ( header )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressedHttpServletRequest.java,get header,@ override public  string   (  string header )  {  return is filtered header ( header )   ?  null : super . get header ( header )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressedHttpServletRequest.java,get input stream,"@ override public  servlet input stream   (  )  throws io exception  {  if  ( is get reader called )   {  throw new  illegal state exception ( ""get reader (  )  has already been called"" )  ;   }  is get input stream called = true ;  return get compressing"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressedHttpServletRequest.java,get int header,@ override public int   (  string header )  {  return is filtered header ( header )   ?   - 1 : super . get int header ( header )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressedHttpServletRequest.java,get reader,"@ override public  buffered reader   (  )  throws io exception  {  if  ( is get input stream called )   {  throw new  illegal state exception ( ""get input stream (  )  has already been called"" )  ;   }  is get reader called = true ;  if  ( buffered reader"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressedHttpServletRequest.java,is filtered header,private static boolean   (  string header name )  {  return  compressing http servlet response . content   encoding   header . equals ignore case ( header name )  ||  compressing http servlet response . accept   encoding   header . equals ignore case ( header name )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressedHttpServletRequest.java,to string,"@ override public  string   (  )  {  return "" compressed http servlet request"" ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingFilter.java,destroy,"@ override public void   (  )  {  logger . log ( "" compressing filter is being destroyed .  .  . "" )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingFilter.java,do filter,@ override public void   (  servlet request request  servlet response response  filter chain chain )  throws io exception   servlet exception  {   servlet request chain request = get request ( request )  ;   servlet response chain response = get response 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingFilter.java,get request,"private  servlet request   (  servlet request request )  {  if  (  !  ( request instanceof  http servlet request )  )   {  logger . log debug ( "" can't compress non - http request"" )  ;  return null ;   }   http servlet request http request =  (  http servlet request ) request ;   string content encoding = http request . get header (  compressing http servlet response . content   encoding   header )  ;  if  ( content encoding  =  =  null ||  string utils . equals ignore case ( content encoding  compressing stream factory . no   encoding )  )   {  logger . log debug ( "" request is not compressed  so not decompressing"" )  ;  return null ;   }  if  (  !  compressing stream factory . is supported request content encoding ( content encoding )  )   {  logger . log debug ( "" can't decompress request with encoding: ""  +  content encoding )  ;  return null ;   }  if  (  compressing stream factory . no   encoding . equals ignore case ( content encoding )  )   {  logger . log debug ( "" can't decompress request with encoding: ""  +  content encoding )  ;  return null ;   }  return new  compressed http servlet request ( http request  compressing stream factory . get factory for content encoding ( content encoding )  context )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingFilter.java,get response,"private  servlet response   (  servlet request request  servlet response response )  {  if  ( response . is committed (  )  || request . get attribute ( already   applied   key )   !  =  null )   {  logger . log debug ( "" response committed or filter has already been applied"" )  ;  return null ;   }  if  (  !  ( request instanceof  http servlet request )  ||  !  ( response instanceof  http servlet response )  )   {  logger . log debug ( "" can't compress non - http request  response"" )  ;  return null ;   }   http servlet request http request =  (  http servlet request ) request ;   http servlet response http response =  (  http servlet response ) response ;  if  ( logger . is debug (  )  )   {  logger . log debug ( "" request for: '""  +  http request . get requesturi (  )   +  '\'' )  ;   }   string requesturi = http request . get requesturi (  )  ;  if  (  ! is compressable path ( requesturi )  )   {  logger . log debug ( "" compression disabled for path: ""  +  requesturi )  ;  return null ;   }   string user agent = http request . get header ( "" user -  agent"" )  ;  if  (  ! is compressable user agent ( user agent )  )   {  logger . log debug ( "" compression disabled for  user -  agent: ""  +  user agent )  ;  return null ;   }  set vary header ( http response )  ;   string content encoding =  compressing stream factory . get best content encoding ( http request )  ;  assert content encoding  !  =  null ;  if  (  compressing stream factory . no   encoding . equals ( content encoding )  )   {  logger . log debug ( "" compression not supported or declined by request"" )  ;  return null ;   }  if  ( logger . is debug (  )  )   {  logger . log debug ( "" compression supported ;  using content encoding '""  +  content encoding  +  '\'' )  ;   }   compressing stream factory compressing stream factory =  compressing stream factory . get factory for content encoding ( content encoding )  ;  return new  compressing http servlet response ( http response compressing stream factory content encoding context )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingFilter.java,init,"@ override public void   (  filter config config )  throws  servlet exception  {  assert config  !  =  null ;  context = new  compressing filter context ( config )  ;  logger = context . get logger (  )  ;  logger . log ( "" compressing filter has initiali"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingFilter.java,is compressable path,private boolean   (  string path )  {  if  ( path  !  =  null )   {  for  (   pattern pattern : context . get path patterns (  )  )   {  if  ( pattern . matcher ( path )  . matches (  )  )   {  return context . is include path patterns (  )  ;   }   }   }  return  ! context . is include path patterns (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingFilter.java,is compressable user agent,private boolean   (  string user agent )  {  if  ( user agent  !  =  null )   {  for  (   pattern pattern : context . get user agent patterns (  )  )   {  if  ( pattern . matcher ( user agent )  . matches (  )  )   {  return context . is include user agent patterns (  )  ;   }   }   }  return  ! context . is include user agent patterns (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingFilter.java,set for repose,public void   (  )  {  is for repose = true ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingFilter.java,set vary header,"void   (  http servlet response http response )  {  if  ( logger . is debug (  )  )   {  logger . log debug ( "" setting  vary  header because the response *could be compressed* .  ""  +  vary   header  +  "" : "" +   compressing http servlet response . accept   encoding   header )  ;   }  http response . add header ( vary   header  compressing http servlet response . accept   encoding   header )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingFilter.java,to string,@ override public  string   (  )  {  return version   string ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core-api\src\test\java\org\openrepose\core\services\reporting\metrics\MetricNameUtilityTest.java,safe reporting name should not modifya safe name,"@ test public void   (  )  throws  exception  {   string name = ""my name"" ;   string safe name =  metric name utility . safe reporting name ( name )  ;  assert that ( safe name equal to ( name )  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core-api\src\test\java\org\openrepose\core\services\reporting\metrics\MetricNameUtilityTest.java,safe reporting name should replace unsafe characters,"@ test public void   (  )  throws  exception  {   string name = "" / a /  .  +  /  . *"" ;   string safe name =  metric name utility . safe reporting name ( name )  ;  assert that ( safe name equal to ( name . replace ( ' . ' '   ' )  )  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core-api\src\main\java\org\openrepose\core\filter\SystemModelInterrogator.java, system model interrogator,public   (  string cluster id  string node id )  {  this . cluster id = cluster id ;  this . node id = node id ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core-api\src\main\java\org\openrepose\core\filter\SystemModelInterrogator.java,all cluster nodes,public static  map <  string  list <  string >  >    (  system model system model )  {   hash map <  string  list <  string >  >  cluster nodes = new  hash map <  >  (  )  ;  for  (   repose cluster cluster : system model . get repose cluster (  )  )   {   linked list <  string >  nodes = new  linked list <  >  (  )  ;  cluster nodes . put ( cluster . get id (  )  nodes )  ;  for  (   node node : cluster . get nodes (  )  . get node (  )  )   {  nodes . add ( node . get id (  )  )  ;   }   }  return cluster nodes ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core-api\src\main\java\org\openrepose\core\filter\SystemModelInterrogator.java,get default destination,private  optional <  destination >    (  optional <  repose cluster >  cluster )  {   optional <  destination >  dest =  optional . empty (  )  ;  if  ( cluster . is present (  )  )   {   list <  destination >  destinations = new  array list <  >  (  )  ;  destinations . add all ( cluster . get (  )  . get destinations (  )  . get endpoint (  )  )  ;  destinations . add all ( cluster . get (  )  . get destinations (  )  . get target (  )  )  ;  for  (   destination destination : destinations )   {  if  ( destination . is default (  )  )   {  dest =  optional . of ( destination )  ;   }   }   }  return dest ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core-api\src\main\java\org\openrepose\core\filter\SystemModelInterrogator.java,get local cluster,public  optional <  repose cluster >    (  system model system model )  {  for  (   repose cluster cluster : system model . get repose cluster (  )  )   {  if  ( cluster . get id (  )  . equals ( cluster id )  && get local node ( cluster )  . is present (  )  )   {  return  optional . of ( cluster )  ;   }   }  return  optional . empty (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core-api\src\main\java\org\openrepose\core\filter\SystemModelInterrogator.java,get local node,public  optional <  node >    (  system model system model )  {   optional <  node >  local node =  optional . empty (  )  ;  for  (   cluster repose cluster : system model . get repose cluster (  )  )   {  if  ( repose cluster . get id (  )  . equals ( cluster id )  )   {  local node = get local node ( repose cluster )  ;   }   }  return local node ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core-api\src\main\java\org\openrepose\core\filter\SystemModelInterrogator.java,get service for cluster,public  optional <  service >    (  system model system model  string service name )  {   optional <  repose cluster >  cluster = get local cluster ( system model )  ;   optional <  service >  found =  optional . empty (  )  ;  if  ( cluster . is present (  )  && cluster . get (  )  . get services (  )   !  =  null )   {  for  (   service service : cluster . get (  )  . get services (  )  . get service (  )  )   {  if  ( service . get name (  )  . equals ignore case ( service name )  )   {  found =  optional . of ( service )  ;   }   }   }  return found ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingFilterLoggerImpl.java, compressing filter logger impl,"  (  servlet context ctx boolean debug  string delegate logger name boolean is java util logger )  throws  servlet exception  {  assert ctx  !  =  null ;  servlet context = ctx ;  this . debug = debug ;  if  ( delegate logger name  =  =  null )   {  delegate = null ;   }  else if  ( is java util logger )   {  delegate = new  java util logging impl ( delegate logger name )  ;   }  else  {  try  {   class <  ?  >  delegate class =  class . for name ( ""com . planetj . servlet . filter . compression .  jakarta commons logging impl"" )  ;   constructor <  ?  >  constructor = delegate class . get constructor (  string . class )  ;  delegate =  (  compressing filter logger ) constructor . new instance ( delegate logger name )  ;   }  catch  (   class not found exception cnfe )   {  throw new  servlet exception ( cnfe )  ;   }  catch  (   no such method exception nsme )   {  throw new  servlet exception ( nsme )  ;   }  catch  (   invocation target exception ite )   {  throw new  servlet exception ( ite )  ;   }  catch  (   illegal access exception iae )   {  throw new  servlet exception ( iae )  ;   }  catch  (   instantiation exception ie )   {  throw new  servlet exception ( ie )  ;   }   }   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingFilterLoggerImpl.java,is debug,@ override public boolean   (  )  {  return debug ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingFilterLoggerImpl.java,log,@ override public void   (  string message  throwable t )  {  servlet context . log ( message   prefix  +  message t )  ;  if  ( delegate  !  =  null )   {  delegate . log ( message t )  ;   }   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingFilterLoggerImpl.java,log debug,@ override public void   (  string message  throwable t )  {  if  ( debug )   {  servlet context . log ( message   prefix  +  message t )  ;  if  ( delegate  !  =  null )   {  delegate . log debug ( message t )  ;   }   }   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingFilterLoggerImpl.java,to string,"@ override public  string   (  )  {  return "" compressing filter logger impl"" ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingFilterStats.java, compressing filter stats,  (  )  {  response input stats callback = new  output stats callback (  stats field . response   input   bytes )  ;  response compressed stats callback = new  output stats callback (  stats field . response   compressed   bytes )  ;  request input stats callback = new  input stats callback (  stats field . request   input   bytes )  ;  request compressed stats callback = new  input stats callback (  stats field . request   compressed   bytes )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingFilterStats.java, input stats callback,private   (  stats field field )  {  this . field = field ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingFilterStats.java, output stats callback,private   (  stats field field )  {  this . field = field ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingFilterStats.java,bytes read,@ override public void   ( long num bytes )  {  assert num bytes  >  =  0 ;  switch  ( field )   {  case request   input   bytes: request input bytes +  = num bytes ;  break ;  case request   compressed   bytes: request compressed bytes +  = num bytes ;  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingFilterStats.java,bytes written,@ override public void   ( int num bytes )  {  assert num bytes  >  =  0 ;  switch  ( field )   {  case response   input   bytes: response input bytes +  =  ( long ) num bytes ;  break ;  case response   compressed   bytes: response compressed bytes +  = 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingFilterStats.java,get input stats callback, input stats callback   (  stats field field )  {  switch  ( field )   {  case request   input   bytes: return request input stats callback ;  case request   compressed   bytes: return request compressed stats callback ;  default : throw new  illegal argument exception (  )  ;   }   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingFilterStats.java,get num requests compressed,public int   (  )  {  return num requests compressed ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingFilterStats.java,get num responses compressed,public int   (  )  {  return num responses compressed ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingFilterStats.java,get output stats callback, output stats callback   (  stats field field )  {  switch  ( field )   {  case response   input   bytes: return response input stats callback ;  case response   compressed   bytes: return response compressed stats callback ;  default : throw new  illegal argument exception (  )  ;   }   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingFilterStats.java,get request average compression ratio,public double   (  )  {  return request compressed bytes  =  =  0l  ?  0 . 0 :  ( double ) request input bytes  /   ( double ) request compressed bytes ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingFilterStats.java,get request compressed bytes,public long   (  )  {  return request compressed bytes ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingFilterStats.java,get request input bytes,public long   (  )  {  return request input bytes ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingFilterStats.java,get response average compression ratio,public double   (  )  {  return response compressed bytes  =  =  0l  ?  0 . 0 :  ( double ) response input bytes  /   ( double ) response compressed bytes ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingFilterStats.java,get response compressed bytes,public long   (  )  {  return response compressed bytes ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingFilterStats.java,get response input bytes,public long   (  )  {  return response input bytes ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingFilterStats.java,get total requests not compressed,public int   (  )  {  return total requests not compressed ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingFilterStats.java,get total responses not compressed,public int   (  )  {  return total responses not compressed ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingFilterStats.java,increment num requests compressed,void   (  )  {  num requests compressed +  +  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingFilterStats.java,increment num responses compressed,void   (  )  {  num responses compressed +  +  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingFilterStats.java,increment total requests not compressed,void   (  )  {  total requests not compressed +  +  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingFilterStats.java,increment total responses not compressed,void   (  )  {  total responses not compressed +  +  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingFilterStats.java,to string,"@ override public  string   (  )  {  return "" input stats callback[field: ""  +  field  +  ']' ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingFilterContext.java, compressing filter context,"  (  filter config filter config )  throws  servlet exception  {  assert filter config  !  =  null ;  debug = read boolean value ( filter config ""debug"" )  ;   string java util delegate name = filter config . get init parameter ( ""java util logger"" )  ;  if  ( java util delegate name  !  =  null )   {  logger = new  compressing filter logger impl ( filter config . get servlet context (  )  debug java util delegate name true )  ;   }  else  {   string jakarta commons delegate name = filter config . get init parameter ( ""jakarta commons logger"" )  ;  logger = new  compressing filter logger impl ( filter config . get servlet context (  )  debug jakarta commons delegate name false )  ;   }  logger . log debug ( "" debug logging statements are enabled"" )  ;  compression threshold = read compression threshold value ( filter config )  ;  if  ( logger . is debug (  )  )   {  logger . log debug ( "" using compressing threshold: ""  +  compression threshold )  ;   }  servlet context = filter config . get servlet context (  )  ;  assert this . servlet context  !  =  null ;  if  ( read boolean value ( filter config ""stats enabled"" )  )   {  stats = new  compressing filter stats (  )  ;  ensure stats in context (  )  ;  logger . log debug ( "" stats are enabled"" )  ;   }  else  {  stats = null ;  logger . log debug ( "" stats are disabled"" )  ;   }   string include content types string = filter config . get init parameter ( ""include content types"" )  ;   string exclude content types string = filter config . get init parameter ( ""exclude content types"" )  ;  if  ( include content types string  !  =  null && exclude content types string  !  =  null )   {  throw new  illegal argument exception ( "" can't specify both include content types and exclude content types"" )  ;   }  if  ( include content types string  =  =  null )   {  include content types = false ;  content types = parse content types ( exclude content types string )  ;   }  else  {  include content types = true ;  content types = parse content types ( include content types string )  ;   }  if  (  ! content types . is empty (  )  )   {  logger . log debug ( "" filter will ""  +   ( include content types  ?  ""include"" : ""exclude"" )   +  "" only these content types: "" +  content types )  ;   }   string include path patterns string = filter config . get init parameter ( ""include path patterns"" )  ;   string exclude path patterns string = filter config . get init parameter ( ""exclude path patterns"" )  ;  if  ( include path patterns string  !  =  null && exclude path patterns string  !  =  null )   {  throw new  illegal argument exception ( "" can't specify both include path patterns and exclude path patterns"" )  ;   }  if  ( include path patterns string  =  =  null )   {  include path patterns = false ;  path patterns = parse patterns ( exclude path patterns string )  ;   }  else  {  include path patterns = true ;  path patterns = parse patterns ( include path patterns string )  ;   }  if  (  ! path patterns . is empty (  )  && logger . is debug (  )  )   {  logger . log debug ( "" filter will ""  +   ( include path patterns  ?  ""include"" : ""exclude"" )   +  "" only these file patterns: "" +  path patterns )  ;   }   string include user agent patterns string = filter config . get init parameter ( ""include user agent patterns"" )  ;   string exclude user agent patterns string = filter config . get init parameter ( ""exclude user agent patterns"" )  ;  if  ( include user agent patterns string  !  =  null && exclude user agent patterns string  !  =  null )   {  throw new  illegal argument exception ( "" can't specify both include user agent patterns and exclude user agent patterns"" )  ;   }  if  ( include user agent patterns string  =  =  null )   {  include user agent patterns = false ;  user agent patterns = parse patterns ( exclude user agent patterns string )  ;   }  else  {  include user agent patterns = true ;  user agent patterns = parse patterns ( include user agent patterns string )  ;   }  if  (  ! user agent patterns . is empty (  )  && logger . is debug (  )  )   {  logger . log debug ( "" filter will ""  +   ( include user agent patterns  ?  ""include"" : ""exclude"" )   +  "" only these  user -  agent patterns: "" +  user agent patterns )  ;   }   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingFilterContext.java,ensure stats in context,private void   (  )  {  assert servlet context  !  =  null ;  if  ( servlet context . get attribute (  compressing filter stats . stats   key )   =  =  null )   {  servlet context . set attribute (  compressing filter stats . stats   key stats )  ;   }   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingFilterContext.java,get compression threshold,int   (  )  {  return compression threshold ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingFilterContext.java,get content types, collection <  string >    (  )  {  return content types ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingFilterContext.java,get logger, compressing filter logger   (  )  {  assert logger  !  =  null ;  return logger ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingFilterContext.java,get path patterns, iterable <  pattern >    (  )  {  return path patterns ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingFilterContext.java,get stats," compressing filter stats   (  )  {  if  ( stats  =  =  null )   {  throw new  illegal state exception ( "" stats are not enabled"" )  ;   }  ensure stats in context (  )  ;  return stats ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingFilterContext.java,get user agent patterns, iterable <  pattern >    (  )  {  return user agent patterns ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingFilterContext.java,is debug,boolean   (  )  {  return debug ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingFilterContext.java,is include content types,boolean   (  )  {  return include content types ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingFilterContext.java,is include path patterns,boolean   (  )  {  return include path patterns ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingFilterContext.java,is include user agent patterns,boolean   (  )  {  return include user agent patterns ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingFilterContext.java,is stats enabled,boolean   (  )  {  return stats  !  =  null ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingFilterContext.java,parse content types,private static  collection <  string >    (  string content types string )  {  if  ( content types string  =  =  null )   {  return  collections . empty list (  )  ;   }   list <  string >  content types = new  array list <  >  ( 5 )  ;  for  (   string content type : comma . split ( content types string )  )   {  if  ( content type . length (  )   >  0 )   {  content types . add ( content type )  ;   }   }  return  collections . unmodifiable list ( content types )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingFilterContext.java,parse patterns,private static  collection <  pattern >    (  string patterns string )  {  if  ( patterns string  =  =  null )   {  return  collections . empty list (  )  ;   }   list <  pattern >  patterns = new  array list <  >  ( 5 )  ;  for  (   string pattern : comma . split ( patterns string )  )   {  if  ( pattern . length (  )   >  0 )   {  patterns . add (  pattern . compile ( pattern )  )  ;   }   }  return  collections . unmodifiable list ( patterns )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingFilterContext.java,read boolean value,private static boolean   (  filter config filter config  string parameter )  {  return  boolean . value of ( filter config . get init parameter ( parameter )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingFilterContext.java,read compression threshold value,"private static int   (  filter config filter config )  throws  servlet exception  {   string compression threshold string = filter config . get init parameter ( ""compression threshold"" )  ;  int value ;  if  ( compression threshold string  !  =  null )   {  try  {  value =  integer . parse int ( compression threshold string )  ;   }  catch  (   number format exception nfe )   {  throw new  servlet exception ( "" invalid compression threshold: ""  +  compression threshold string nfe )  ;   }  if  ( value  <  0 )   {  throw new  servlet exception ( "" compression threshold cannot be negative"" )  ;   }   }  else  {  value = default   compression   threshold ;   }  return value ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingFilterContext.java,to string,"@ override public  string   (  )  {  return "" compressing filter context"" ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingHttpServletResponse.java, compressing http servlet response,  (  http servlet response http response  compressing stream factory compressing stream factory  string content encoding  compressing filter context context )  {  super ( http response )  ;  this . http response = http response ;  this . compressed content encoding = content encoding ;  compressing = false ;  logger = context . get logger (  )  ;  this . compressing stream factory = compressing stream factory ;  this . context = context ;  content typeok = true ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingHttpServletResponse.java,add date header,@ override public void   (  string name long value )  {  if  ( is allowed header ( name )  )   {  http response . add date header ( name value )  ;   }   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingHttpServletResponse.java,add header,"@ override public void   (  string name  string value )  {  if  ( cache   control   header . equals ignore case ( name )  )   {  http response . add header ( cache   control   header value )  ;  if  ( value . contains ( ""no - transform"" )  )   {  logger ."
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingHttpServletResponse.java,add int header,@ override public void   (  string name int value )  {  if  ( content   length   header . equals ignore case ( name )  )   {  set content length ( value )  ;   }  else if  ( etag   header . equals ignore case ( name )  )   {  savede tag =  string . value 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingHttpServletResponse.java,close,void   (  )  throws io exception  {  if  ( compressingsos  !  =  null &&  ! compressingsos . is closed (  )  )   {  compressingsos . close (  )  ;   }   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingHttpServletResponse.java,do set content length,"private void   ( long content length )  {  if  ( compressing )   {  logger . log debug ( "" ignoring application - specified content length since response is compressed"" )  ;   }  else  {  saved content length = content length ;  saved content length set = true ;  logger . log debug ( "" saving application - specified content length for later: ""  +  content length )  ;  if  ( compressingsos  !  =  null && compressingsos . is aborted (  )  )   {  http response . set header ( content   length   header  string . value of ( content length )  )  ;   }   }   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingHttpServletResponse.java,equals ignore case any,private static boolean   (  string a  string .  .  .  others )  {  for  (   string other : others )   {  if  ( a . equals ignore case ( other )  )   {  return true ;   }   }  return false ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingHttpServletResponse.java,flush buffer,@ override public void   (  )  {  flush writer (  )  ;  if  ( compressingsos  !  =  null )   {  compressingsos . flush (  )  ;   }   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingHttpServletResponse.java,flush writer,private void   (  )  {  if  ( print writer  !  =  null )   {  print writer . flush (  )  ;   }   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingHttpServletResponse.java,get compressing servlet output stream,private  compressing servlet output stream   (  )  throws io exception  {  if  ( compressingsos  =  =  null )   {  compressingsos = new  compressing servlet output stream ( http response . get output stream (  )  compressing stream factory this context logger )  ;   }  if  (  ! compressingsos . is closed (  )  && must not compress (  )  )   {  compressingsos . abort compression (  )  ;   }  return compressingsos ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingHttpServletResponse.java,get output stream,"@ override public  servlet output stream   (  )  throws io exception  {  if  ( is get writer called )   {  throw new  illegal state exception ( ""get writer (  )  has already been called"" )  ;   }  is get output stream called = true ;  return get compressi"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingHttpServletResponse.java,get writer,"@ override public  print writer   (  )  throws io exception  {  if  ( is get output stream called )   {  throw new  illegal state exception ( ""get compressing output stream (  )  has already been called"" )  ;   }  is get writer called = true ;  if  ( prin"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingHttpServletResponse.java,is allowed header,"private boolean   (  string header )  {  boolean unallowed = header  !  =  null && equals ignore case any ( header unallowed   headers )  ;  if  ( unallowed && logger . is debug (  )  )   {  logger . log debug ( "" header '""  +  header  +  ""' cannot be set by application"" )  ;   }  return  ! unallowed ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingHttpServletResponse.java,is compressable content type,private boolean   (  string content type )  {   string content type only = content type ;  if  ( content type  !  =  null )   {  int semicolon index = content type . index of (  ( int ) ' ; ' )  ;  if  ( semicolon index  >  =  0 )   {  content type only = content type . substring ( 0 semicolon index )  ;   }   }  else  {  return true ;   }  for  (   string compression encoding :  compressing stream factory . all   compression   encodings )   {  if  ( content type only . contains ( compression encoding )  )   {  return false ;   }   }  boolean is contained = context . get content types (  )  . contains ( content type only )  ;  return context . is include content types (  )   ?  is contained :  ! is contained ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingHttpServletResponse.java,is compressable encoding,private static boolean   (  string encoding )  {  if  ( encoding  =  =  null )   {  return true ;   }  for  (   string compression encoding :  compressing stream factory . all   compression   encodings )   {  if  ( encoding . equals ( compression encoding )  )   {  return false ;   }   }  return true ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingHttpServletResponse.java,is compressing,boolean   (  )  {  return compressing ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingHttpServletResponse.java,maybe abort compression,"private void   (  )  {  if  ( compressingsos  !  =  null )   {  try  {  compressingsos . abort compression (  )  ;   }  catch  (  io exception ioe )   {  logger . log ( "" unexpected error while aborting compression"" ioe )  ;   }   }   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingHttpServletResponse.java,must not compress,"private boolean   (  )  {  content typeok = is compressable content type ( this . http response . get header ( ""content - type"" )  )  ;  if  (  ! content typeok )   {  logger . log debug ( "" will not compress since configuration excludes this content type"" )  ;  return true ;   }  if  ( saved content length set && saved content length  <   ( long ) context . get compression threshold (  )  )   {  logger . log debug ( "" will not compress since page has set a content length which is less than ""  +  ""the compression threshold: ""  +  saved content length )  ;  return true ;   }  if  ( no transform set )   {  logger . log debug ( "" will not compress since no - transform was specified"" )  ;  return true ;   }  return  ! is compressable encoding ( saved content encoding )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingHttpServletResponse.java,raw stream committed,"void   (  )  {  assert  ! compressing ;  logger . log debug ( "" committing response without compression"" )  ;  set non compression response headers (  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingHttpServletResponse.java,reset,@ override public void   (  )  {  flush writer (  )  ;  if  ( compressingsos  !  =  null )   {  compressingsos . reset (  )  ;   }  http response . reset (  )  ;  if  ( compressing )   {  set compression response headers (  )  ;   }  else  {  set non comp
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingHttpServletResponse.java,reset buffer,@ override public void   (  )  {  flush writer (  )  ;  if  ( compressingsos  !  =  null )   {  compressingsos . reset (  )  ;   }  http response . reset buffer (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingHttpServletResponse.java,set compression response headers,"private void   (  )  {  logger . log debug ( "" setting compression - related headers"" )  ;   string full content encoding header = saved content encoding  =  =  null  ?  compressed content encoding : saved content encoding  +  ' '  +  compressed content encoding ;  http response . set header ( content   encoding   header full content encoding header )  ;  sete tag header (  )  ;  if  ( context . is debug (  )  )   {  http response . set header ( x   compressed   by   header compressed   by   value )  ;   }   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingHttpServletResponse.java,set content length,@ override public void   ( int content length )  {  do set content length (  ( long ) content length )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingHttpServletResponse.java,set content type,@ override public void   (  string content type )  {  content typeok = is compressable content type ( content type )  ;  http response . set content type ( content type )  ;  if  (  ! content typeok && compressingsos  !  =  null )   {  logger . log debug 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingHttpServletResponse.java,set date header,@ override public void   (  string name long value )  {  if  ( is allowed header ( name )  )   {  http response . set date header ( name value )  ;   }   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingHttpServletResponse.java,sete tag header,private void   (  )  {  if  ( savede tag  !  =  null )   {  if  ( compressing )   {  http response . set header ( etag   header savede tag  +  ' - '  +  compressed content encoding )  ;   }  else  {  http response . set header ( etag   header savede tag )  ;   }   }   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingHttpServletResponse.java,set header,"@ override public void   (  string name  string value )  {  if  ( cache   control   header . equals ignore case ( name )  )   {  http response . set header ( cache   control   header value )  ;  if  ( value . contains ( ""no - transform"" )  )   {  logger ."
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingHttpServletResponse.java,set int header,@ override public void   (  string name int value )  {  if  ( content   length   header . equals ignore case ( name )  )   {  set content length ( value )  ;   }  else if  ( etag   header . equals ignore case ( name )  )   {  savede tag =  string . value 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingHttpServletResponse.java,set non compression response headers,private void   (  )  {  if  ( saved content length set )   {  http response . set header ( content   length   header  string . value of ( saved content length )  )  ;   }  if  ( saved content encoding  !  =  null )   {  http response . set header ( content   encoding   header saved content encoding )  ;   }   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingHttpServletResponse.java,switch to compression,"void   (  )  {  assert  ! compressing ;  logger . log debug ( "" switching to compression in the response"" )  ;  compressing = true ;  set compression response headers (  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingHttpServletResponse.java,to string,"@ override public  string   (  )  {  return "" compressing http servlet response[compressing: ""  +  compressing  +  ']' ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingServletInputStream.java, compressing servlet input stream,  (  input stream raw stream  compressing stream factory compressing stream factory  compressing filter context context )  throws io exception  {  this . compressing stream = compressing stream factory . get compressing stream ( raw stream context )  . get compressing input stream (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingServletInputStream.java,available,@ override public int   (  )  throws io exception  {  check closed (  )  ;  return compressing stream . available (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingServletInputStream.java,check closed,"private void   (  )  {  if  ( closed )   {  throw new  illegal state exception ( "" stream is already closed"" )  ;   }   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingServletInputStream.java,close,@ override public void   (  )  throws io exception  {  if  (  ! closed )   {  compressing stream . close (  )  ;  closed = true ;   }   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingServletInputStream.java,mark,@ override public synchronized void   ( int readlimit )  {  check closed (  )  ;  compressing stream . mark ( readlimit )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingServletInputStream.java,mark supported,@ override public boolean   (  )  {  check closed (  )  ;  return compressing stream . mark supported (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingServletInputStream.java,read,@ override public int   ( byte[] b int offset int length )  throws io exception  {  check closed (  )  ;  return compressing stream . read ( b offset length )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingServletInputStream.java,reset,@ override public synchronized void   (  )  throws io exception  {  check closed (  )  ;  compressing stream . reset (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingServletInputStream.java,skip,@ override public long   ( long n )  throws io exception  {  check closed (  )  ;  return compressing stream . skip ( n )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingServletInputStream.java,to string,"@ override public  string   (  )  {  return "" compressing servlet input stream"" ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingServletOutputStream.java, compressing servlet output stream,  (  output stream raw stream  compressing stream factory compressing stream factory  compressing http servlet response compressing response  compressing filter context context  compressing filter logger logger )  {  this . raw stream = raw stream ;  this . compressing stream factory = compressing stream factory ;  this . compressing response = compressing response ;  this . context = context ;  this . logger = logger ;  closed = false ;  aborted = false ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingServletOutputStream.java, response buffer commitment callback,private   (  compressing http servlet response response )  {  assert response  !  =  null ;  this . response = response ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingServletOutputStream.java,abort compression,void   (  )  throws io exception  {  assert threshold output stream  =  =  null ;  check write state (  )  ;  threshold output stream . force output stream1 (  )  ;  aborted = true ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingServletOutputStream.java,check closed,"private void   (  )  throws io exception  {  if  ( closed )   {  throw new io exception ( "" stream is already closed"" )  ;   }   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingServletOutputStream.java,check write state,private void   (  )  {  if  ( threshold output stream  =  =  null )   {  threshold output stream = new  threshold output stream ( raw stream compressing stream factory context new  response buffer commitment callback ( compressing response )  logger )  ;   }   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingServletOutputStream.java,close,@ override public void   (  )  throws io exception  {  if  (  ! closed )   {  compressing response . flush buffer (  )  ;  closed = true ;  if  ( threshold output stream  =  =  null )   {  compressing response . raw stream committed (  )  ;  raw stream . 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingServletOutputStream.java,compressing stream committed,@ override public void   (  )  {  response . switch to compression (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingServletOutputStream.java,engage compression,void   (  )  throws io exception  {  check write state (  )  ;  threshold output stream . switch to output stream2 (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingServletOutputStream.java,is aborted,boolean   (  )  {  return aborted ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingServletOutputStream.java,is closed,boolean   (  )  {  return closed ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingServletOutputStream.java,raw stream committed,@ override public void   (  )  {  response . raw stream committed (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingServletOutputStream.java,reset,void   (  )  {  if  ( threshold output stream  !  =  null )   {  threshold output stream . reset (  )  ;   }   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingServletOutputStream.java,to string,"@ override public  string   (  )  {  return "" response buffer commitment callback"" ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingServletOutputStream.java,write,@ override public void   ( int b )  throws io exception  {  check closed (  )  ;  check write state (  )  ;  assert threshold output stream  !  =  null ;  threshold output stream . write ( b )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingStreamFactory.java, content encodingq,"@ suppress warnings ( ""squid:s3346"" )  private   (  string content encoding double q )  {  assert content encoding  !  =  null && content encoding . length (  )   >  0 ;  this . content encoding = content encoding ;  this . q = q ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingStreamFactory.java,finish,@ override public void   (  )  throws io exception  {  deflater output stream . finish (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingStreamFactory.java,get best content encoding,static  string   (  http servlet request http request )  {   string forced encoding =  (  string ) http request . get attribute (  compressing filter . force   encoding   key )  ;   string best encoding ;  if  ( forced encoding  !  =  null )   {  best encoding = forced encoding ;   }  else  {   string accept encoding header = http request . get header (  compressing http servlet response . accept   encoding   header )  ;  if  ( accept encoding header  =  =  null )   {  best encoding = no   encoding ;   }  else  {  best encoding = best   encoding   cache . get ( accept encoding header )  ;  if  ( best encoding  =  =  null )   {  if  ( accept encoding header . index of (  ( int ) ' ' )   >  =  0 )   {  best encoding = select best encoding ( accept encoding header )  ;   }  else  {  best encoding = parse best encoding ( accept encoding header )  ;   }  best   encoding   cache . put ( accept encoding header best encoding )  ;   }   }   }  if  (  ! is supported response content encoding ( best encoding )  )   {  best encoding = no   encoding ;   }  return best encoding ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingStreamFactory.java,get compressing output stream,@ override public  output stream   (  )  {  return stats output stream ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingStreamFactory.java,get compressing stream,@ override  compressing input stream   ( final  input stream input stream final  compressing filter context context )  {  return  (  )   -  >   compressing stream factory . maybe wrap stats input stream ( new  inflater input stream (  compressing stream f
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\JavaUtilLoggingImpl.java, java util logging impl,public   (  string logger name )  {  logger =  logger . get logger ( logger name )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingStreamFactory.java,get content encoding, string   (  )  {  return content encoding ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\JavaUtilLoggingImpl.java,is debug,@ override public boolean   (  )  {  return logger . is loggable (  level . fine )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingStreamFactory.java,get factory for content encoding,"@ suppress warnings ( ""squid:s3346"" )  static  compressing stream factory   (  string content encoding )  {  assert factory   map . contains key ( content encoding )  ;  return factory   map . get ( content encoding )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\JavaUtilLoggingImpl.java,log,@ override public void   (  string message  throwable t )  {  logger . log (  level . info message t )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingStreamFactory.java,getq,double   (  )  {  return q ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\JavaUtilLoggingImpl.java,log debug,@ override public void   (  string message  throwable t )  {  logger . log (  level . fine message t )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingStreamFactory.java,is supported request content encoding,static boolean   (  string content encoding )  {  return no   encoding . equals ( content encoding )  || factory   map . contains key ( content encoding )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\JavaUtilLoggingImpl.java,to string,"@ override public  string   (  )  {  return "" java util logging impl[""  +  logger  +  ']' ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingStreamFactory.java,is supported response content encoding,private static boolean   (  string content encoding )  {  return no   encoding . equals ( content encoding )  || factory   map . contains key ( content encoding )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingStreamFactory.java,maybe wrap stats input stream,private static  input stream   (  input stream input stream  compressing filter context context  compressing filter stats .  stats field field )  {  assert input stream  !  =  null ;   input stream result ;  if  ( context . is stats enabled (  )  )   {   compressing filter stats stats = context . get stats (  )  ;   compressing filter stats .  input stats callback callback input = stats . get input stats callback ( field )  ;  result = new  stats input stream ( input stream callback input )  ;   }  else  {  result = input stream ;   }  return result ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingStreamFactory.java,maybe wrap stats output stream,private static  output stream   (  output stream output stream  compressing filter context context  compressing filter stats .  stats field field )  {  assert output stream  !  =  null ;   output stream result ;  if  ( context . is stats enabled (  )  )   {   compressing filter stats stats = context . get stats (  )  ;   compressing filter stats .  output stats callback callback output = stats . get output stats callback ( field )  ;  result = new  stats output stream ( output stream callback output )  ;   }  else  {  result = output stream ;   }  return result ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingStreamFactory.java,parse best encoding,private static  string   (  string accept encoding header )  {   content encodingq content encodingq = parse content encodingq ( accept encoding header )  ;   string content encoding = content encodingq . get content encoding (  )  ;  if  ( content encodingq . getq (  )   >  0 . 0 )   {  if  ( any   encoding . equals ( content encoding )  )   {  return supported   encodings . get ( 0 )  ;   }  else if  ( supported   encodings . contains ( content encoding )  )   {  return content encoding ;   }   }  return no   encoding ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingStreamFactory.java,parse content encodingq,"private static  content encodingq   (  string content encoding string )  {  double q = 1 . 0 ;  int qvalue start index = content encoding string . index of (  ( int ) ' ; ' )  ;   string content encoding ;  if  ( qvalue start index  >  =  0 )   {  content encoding = content encoding string . substring ( 0 qvalue start index )  . trim (  )  ;   string qvalue string = content encoding string . substring ( qvalue start index  +  1 )  . trim (  )  ;  if  ( qvalue string . starts with ( ""q = "" )  )   {  try  {  q =  double . parse double ( qvalue string . substring ( 2 )  )  ;   }  catch  (   number format exception ignored )   {  log . trace ( "" couldn't parse a  double from  {  }  . "" qvalue string . substring ( 2 )  ignored )  ;   }   }   }  else  {  content encoding = content encoding string . trim (  )  ;   }  return new  content encodingq ( content encoding q )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingStreamFactory.java,select best encoding,"@ suppress warnings ( ""squid:s1244"" )  private static  string   (  string accept encoding header )  {   collection <  string >  best encodings = new  hash set <  >  ( 3 )  ;  double bestq = 0 . 0 ;   collection <  string >  unacceptable encodings = new  h"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingStreamFactory.java,to string,"@ override public  string   (  )  {  return content encoding  +  "" ; q = ""  +  q ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\StatsOutputStream.java, stats output stream,  (  output stream output stream  stats callback stats callback )  {  assert output stream  !  =  null && stats callback  !  =  null ;  this . output stream = output stream ;  this . stats callback = stats callback ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\StatsInputStream.java, stats input stream,  (  input stream input stream  stats callback stats callback )  {  assert input stream  !  =  null && stats callback  !  =  null ;  this . input stream = input stream ;  this . stats callback = stats callback ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\StatsInputStream.java,available,@ override public int   (  )  throws io exception  {  return input stream . available (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\ThresholdOutputStream.java, threshold output stream,  (  output stream out1  compressing stream factory compressing stream factory  compressing filter context context  buffer commitment callback threshold reached callback  compressing filter logger logger )  {  assert out1  !  =  null && compressing stream factory  !  =  null && context  !  =  null && threshold reached callback  !  =  null ;  buffering = true ;  this . out1 = out1 ;  this . compressing stream factory = compressing stream factory ;  this . context = context ;  threshold = context . get compression threshold (  )  ;  buffer commitment callback = threshold reached callback ;  this . logger = logger ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\ThresholdOutputStream.java,check closed,"private void   (  )  {  if  ( closed )   {  throw new  illegal state exception ( "" stream is closed"" )  ;   }   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\ThresholdOutputStream.java,close,@ override public void   (  )  throws io exception  {  closed = true ;  if  ( force out1 )   {  out1 . flush (  )  ;  out1 . close (  )  ;   }  else if  ( buffering )   {  force output stream1 (  )  ;  out1 . flush (  )  ;  out1 . close (  )  ;   }  else 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\test\java\org\openrepose\external\pjlcompression\CompressingFilterRequestTest.java,do get,@ override public void   (  http servlet request request  http servlet response response )  throws io exception  {   input stream sis = request . get input stream (  )  ;  byte[] buffer = new byte[1024] ;  int bytes read ;  while  (  ( bytes read = sis . 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\test\java\org\openrepose\external\pjlcompression\CompressingFilterRequestTest.java,get compressed output,private static byte[]   ( byte[] output )  throws io exception  {   byte array output stream baos = new  byte array output stream (  )  ;   deflater output stream gzip out = new gzip output stream ( baos )  ;  gzip out . write ( output )  ;  gzip out . finish (  )  ;  gzip out . close (  )  ;  baos . close (  )  ;  return baos . to byte array (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\test\java\org\openrepose\external\pjlcompression\CompressingFilterRequestTest.java,set up,"@ before public void   (  )  throws  exception  {  filter config = new  mock filter config (  )  ;  filter config . add init parameter ( ""debug"" ""true"" )  ;  filter config . add init parameter ( ""stats enabled"" ""true"" )  ;  filter = new  compressing filte"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\test\java\org\openrepose\external\pjlcompression\CompressingFilterRequestTest.java,test big output,@ test public void   (  )  throws  exception  {  final  byte array output stream baos = new  byte array output stream ( 10000 )  ;  filter chain = new  mock filter chain ( new  http servlet (  )  {  @ override public void do get (   http servlet request r
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\test\java\org\openrepose\external\pjlcompression\CompressingFilterResponseTest.java,do get,"@ override public void   (  http servlet request request  http servlet response response )  throws io exception  {  response . set header ( ""e tag""  string . value of ( output . hash code (  )  )  )  ;  response . get writer (  )  . print ( output )  ;   "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\test\java\org\openrepose\external\pjlcompression\CompressingFilterResponseTest.java,do test no output,"private void   (  )  throws io exception   servlet exception  {  filter chain = new  mock filter chain ( new  http servlet (  )  {  @ override public void do get (   http servlet request request   http servlet response response )  throws io exception  {  response . get writer (  )  . close (  )  ;   }   }   )  ;  filter . do filter ( request response filter chain )  ;  assert equals (  http servlet response . sc   ok response . get status (  )  )  ;  assert null ( response . get redirected url (  )  )  ;  verify ( response never (  )  )  . send error ( any int (  )  )  ;  verify ( response never (  )  )  . send error ( any int (  )  any string (  )  )  ;  assert equals ( empty response . get content as string (  )  )  ;  assert null ( request . get attribute (  compressing filter . compressed   key )  )  ;  assert false ( response . contains header ( "" content -  encoding"" )  )  ;  assert false ( response . contains header ( ""x -  compressed -  by"" )  )  ;  assert true ( response . contains header (  compressing filter . vary   header )  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\test\java\org\openrepose\external\pjlcompression\CompressingFilterResponseTest.java,get compressed output,private static byte[]   ( byte[] output )  throws io exception  {   byte array output stream baos = new  byte array output stream (  )  ;   deflater output stream gzip out = new gzip output stream ( baos )  ;  gzip out . write ( output )  ;  gzip out . finish (  )  ;  gzip out . close (  )  ;  return baos . to byte array (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\test\java\org\openrepose\external\pjlcompression\CompressingFilterResponseTest.java,set up,"@ before public void   (  )  throws  exception  {  filter config = new  mock filter config (  )  ;  filter config . add init parameter ( ""debug"" ""true"" )  ;  filter config . add init parameter ( ""stats enabled"" ""true"" )  ;  filter config . add init parame"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\test\java\org\openrepose\external\pjlcompression\CompressingFilterResponseTest.java,test already applied,@ test public void   (  )  throws  exception  {  verify output ( big   document true )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\test\java\org\openrepose\external\pjlcompression\CompressingFilterResponseTest.java,test big output,@ test public void   (  )  throws  exception  {  verify output ( big   document true )  ;   compressing filter stats stats =  (  compressing filter stats ) filter config . get servlet context (  )  . get attribute (  compressing filter stats . stats   key
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\test\java\org\openrepose\external\pjlcompression\CompressingFilterResponseTest.java,test close,@ test public void   (  )  throws io exception   servlet exception  {  filter chain = new  mock filter chain ( new  http servlet (  )  {  @ override public void do get (   http servlet request request   http servlet response response )  throws io exceptio
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\test\java\org\openrepose\external\pjlcompression\CompressingFilterResponseTest.java,test exclude content types,@ test public void   (  )  throws  exception  {  filter chain = new  mock filter chain ( new  http servlet (  )  {  @ override public void do get (   http servlet request request   http servlet response response )  throws io exception  {  response . set c
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\test\java\org\openrepose\external\pjlcompression\CompressingFilterResponseTest.java,test exclude content types,@ test public void   (  )  throws  exception  {  filter chain = new  mock filter chain ( new  http servlet (  )  {  @ override public void do get (   http servlet request request   http servlet response response )  throws io exception  {  response . set c
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\test\java\org\openrepose\external\pjlcompression\CompressingFilterResponseTest.java,test exclude path patterns,"@ test public void   (  )  throws  exception  {  request . set requesturi ( "" / some / goodpath / index . html"" )  ;  verify output ( big   document true )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\test\java\org\openrepose\external\pjlcompression\CompressingFilterResponseTest.java,test exclude path patterns,"@ test public void   (  )  throws  exception  {  request . set requesturi ( "" / some / badpath / index . html"" )  ;  verify output ( big   document false )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\test\java\org\openrepose\external\pjlcompression\CompressingFilterResponseTest.java,test exclude user agent patterns,"@ test public void   (  )  throws  exception  {  request . add header ( "" user -  agent"" ""msie5"" )  ;  verify output ( big   document true )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\test\java\org\openrepose\external\pjlcompression\CompressingFilterResponseTest.java,test exclude user agent patterns,"@ test public void   (  )  throws  exception  {  request . add header ( "" user -  agent"" "" nokia6820"" )  ;  verify output ( big   document false )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\test\java\org\openrepose\external\pjlcompression\CompressingFilterResponseTest.java,test flush,@ test public void   (  )  throws io exception   servlet exception  {  filter chain = new  mock filter chain ( new  http servlet (  )  {  @ override public void do get (   http servlet request request   http servlet response response )  throws io exceptio
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\test\java\org\openrepose\external\pjlcompression\CompressingFilterResponseTest.java,test force encoding,"@ test public void   (  )  throws  exception  {  request . set attribute (  compressing filter . force   encoding   key ""identity"" )  ;  verify output ( big   document false )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\test\java\org\openrepose\external\pjlcompression\CompressingFilterResponseTest.java,test no gzip output,@ test public void   (  )  throws io exception   servlet exception  {  do test no output (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\test\java\org\openrepose\external\pjlcompression\CompressingFilterResponseTest.java,test no transform,@ test public void   (  )  throws  exception  {  filter chain = new  mock filter chain ( new  http servlet (  )  {  @ override public void do get (   http servlet request request   http servlet response response )  throws io exception  {  response . set h
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\test\java\org\openrepose\external\pjlcompression\CompressingFilterResponseTest.java,test no zip output,"@ test public void   (  )  throws io exception   servlet exception  {  request . add header ( "" content -  encoding"" ""compress"" )  ;  do test no output (  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\test\java\org\openrepose\external\pjlcompression\CompressingFilterResponseTest.java,test redirect,"@ test public void   (  )  throws  exception  {   string redirect location = ""http: /  / www . google . com / "" ;  filter chain = new  mock filter chain ( new  http servlet (  )  {  @ override public void do get (   http servlet request request   http ser"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\test\java\org\openrepose\external\pjlcompression\CompressingFilterResponseTest.java,test small output,@ test public void   (  )  throws  exception  {  verify output ( small   document false )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\test\java\org\openrepose\external\pjlcompression\CompressingFilterResponseTest.java,test spurious flush close,@ test public void   (  )  throws io exception   servlet exception  {  filter chain = new  mock filter chain ( new  http servlet (  )  {  @ override public void do get (   http servlet request request   http servlet response response )  throws io exceptio
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\test\java\org\openrepose\external\pjlcompression\CompressingFilterResponseTest.java,verify output,"private void   ( boolean init filter chain final  string output boolean should compress )  throws io exception   servlet exception  {  if  ( init filter chain )   {  filter chain = new  mock filter chain ( new  http servlet (  )  {  @ override public void do get (   http servlet request request   http servlet response response )  throws io exception  {  response . set header ( ""e tag""  string . value of ( output . hash code (  )  )  )  ;  response . get writer (  )  . print ( output )  ;   }   }   )  ;   }  request . add header ( "" accept -  encoding"" ""deflate gzip"" )  ;  filter . do filter ( request response filter chain )  ;  assert equals (  http servlet response . sc   ok response . get status (  )  )  ;  assert null ( response . get redirected url (  )  )  ;  verify ( response never (  )  )  . send error ( any int (  )  )  ;  verify ( response never (  )  )  . send error ( any int (  )  any string (  )  )  ;  if  ( should compress )   {  assert true ( response . contains header ( "" vary"" )  )  ;  byte[] output bytes = output . get bytes ( test   encoding )  ;  byte[] expected bytes = get compressed output ( output bytes )  ;  byte[] module output = response . get content as byte array (  )  ;  assert that ( output bytes not ( equal to ( module output )  )  )  ;  assert array equals ( expected bytes module output )  ;  assert equals (  boolean . true request . get attribute (  compressing filter . compressed   key )  )  ;  assert true ( response . contains header ( "" content -  encoding"" )  )  ;  assert true ( response . contains header ( ""x -  compressed -  by"" )  )  ;  assert that ( response . get header ( ""e tag"" )  any of ( org . hamcrest .  matchers . null value (  )  org . hamcrest .  matchers . ends with ( "" - gzip"" )  )  )  ;   }  else  {  assert equals ( output response . get content as string (  )  )  ;  assert null ( request . get attribute (  compressing filter . compressed   key )  )  ;   }   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\test\java\org\openrepose\external\pjlcompression\CompressingFilterTest.java,do filter   accept encoding should be removed from request,@ test public void   (  )  throws  exception  {   mock http servlet request mock request = new  mock http servlet request (  )  ;   mock http servlet response mock response = new  mock http servlet response (  )  ;   filter chain mock filter chain = mock 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\test\java\org\openrepose\external\pjlcompression\CompressingFilterTest.java,setup,@ before public void   (  )  throws  exception  {   mock filter config filter config = new  mock filter config (  )  ;  compressing filter = new  compressing filter (  )  ;  compressing filter . init ( filter config )  ;  compressing filter . set for repo
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\test\java\org\openrepose\external\pjlcompression\LogTest.java,test java uti impl,"@ test public void   (  )  throws  exception  {   class <  ?  >  delegate class =  class . for name ( ""org . openrepose . external . pjlcompression .  java util logging impl"" )  ;   constructor <  ?  >  constructor = delegate class . get constructor (  st"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\test\java\org\openrepose\external\pjlcompression\LoadRunner.java,do get,@ override public void   (  http servlet request request  http servlet response response )  throws io exception  {   print writer writer = response . get writer (  )  ;  for  (   string string : data )   {  writer . print ( string )  ;   }   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\test\java\org\openrepose\external\pjlcompression\LoadRunner.java,main,"public static void   (  string .  .  .  args )  throws io exception   servlet exception  {   mock filter config filter config = new  mock filter config (  )  ;  filter config . add init parameter ( ""debug"" ""true"" )  ;  filter config . add init parameter ( ""stats enabled"" ""true"" )  ;   compressing filter filter = new  compressing filter (  )  ;  filter . init ( filter config )  ;   mock http servlet request request = new  mock http servlet request (  )  ;  request . set method ( ""get"" )  ;  request . add header ( "" accept -  encoding"" ""gzip"" )  ;   mock http servlet response response = new  mock http servlet response (  )  ;   random r = new  random ( 0xdeadbeefl )  ;  final  string[] data = new  string[200] ;  for  ( int i = 0 ;  i  <  data . length ;  i +  +  )   {  byte[] bytes = new byte[50] ;  r . next bytes ( bytes )  ;  data[i] = new  string ( bytes )  ;   }   mock filter chain filter chain = new  mock filter chain ( new  http servlet (  )  {  @ override public void do get (   http servlet request request   http servlet response response )  throws io exception  {   print writer writer = response . get writer (  )  ;  for  (   string string : data )   {  writer . print ( string )  ;   }   }   }   )  ;  long start =  system . current time millis (  )  ;  int iterations = 1000 ;  for  ( int i = 0 ;  i  <  iterations ;  i +  +  )   {  filter . do filter ( request response filter chain )  ;   }  long end =  system . current time millis (  )  ;  long time = end  -  start ;   system . out . println ( "" completed in ""  +  time  +  ""ms  ( "" +   ( double ) time  /  iterations  +  "" per request ) "" )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\test\java\org\openrepose\external\pjlcompression\StatsOutputStreamTest.java,assert bytes written,private void   ( int num bytes )  {  assert equals ( num bytes callback . total bytes written )  ;  assert equals ( num bytes baos . size (  )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\test\java\org\openrepose\external\pjlcompression\StatsOutputStreamTest.java,bytes written,public void   ( int num bytes )  {  total bytes written +  = num bytes ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\test\java\org\openrepose\external\pjlcompression\StatsOutputStreamTest.java,set up,@ before public void   (  )  throws  exception  {  baos = new  byte array output stream (  )  ;  callback = new  mock stats callback (  )  ;  stats out = new  stats output stream ( baos callback )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\test\java\org\openrepose\external\pjlcompression\StatsOutputStreamTest.java,test stats,@ test public void   (  )  throws  exception  {  assert bytes written ( 0 )  ;  stats out . write ( 0 )  ;  assert bytes written ( 1 )  ;  stats out . write ( new byte[10] )  ;  assert bytes written ( 11 )  ;  stats out . write ( new byte[10] 0 5 )  ;  as
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\test\java\org\openrepose\external\pjlcompression\ThresholdOutputStreamTest.java,compressing stream committed,public void   (  )  {  compressing stream committed = true ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\test\java\org\openrepose\external\pjlcompression\ThresholdOutputStreamTest.java,raw stream committed,public void   (  )  {  raw stream committed = true ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\test\java\org\openrepose\external\pjlcompression\ThresholdOutputStreamTest.java,set up,@ before public void   (  )  throws  exception  {  baos = new  byte array output stream (  )  ;  callback = new  callback (  )  ;   filter config filter config = new  mock filter config (  )  ;   compressing filter context context = new  compressing filte
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\test\java\org\openrepose\external\pjlcompression\ThresholdOutputStreamTest.java,test compression,@ test public void   (  )  throws  exception  {  byte[] bytes =  compressing filter response test . big   document . get bytes (  )  ;  tos . write ( bytes )  ;  tos . close (  )  ;  assert that ( baos . size (  )  greater than ( 0 )  )  ;  assert that ( 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\test\java\org\openrepose\external\pjlcompression\ThresholdOutputStreamTest.java,test force compression,@ test public void   (  )  throws  exception  {  byte[] bytes =  compressing filter response test . small   document . get bytes (  )  ;  tos . switch to output stream2 (  )  ;  for  ( int i = 0 ;  i  <  10 ;  i +  +  )   {  tos . write ( bytes )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\test\java\org\openrepose\external\pjlcompression\ThresholdOutputStreamTest.java,test force no compression,@ test public void   (  )  throws  exception  {  byte[] bytes =  compressing filter response test . big   document . get bytes (  )  ;  tos . force output stream1 (  )  ;  tos . write ( bytes )  ;  tos . close (  )  ;  assert that ( bytes equal to ( baos 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\test\java\org\openrepose\external\pjlcompression\ThresholdOutputStreamTest.java,test no compression,@ test public void   (  )  throws  exception  {  byte[] bytes =  compressing filter response test . small   document . get bytes (  )  ;  tos . write ( bytes )  ;  tos . close (  )  ;  assert that ( bytes equal to ( baos . to byte array (  )  )  )  ;  ass
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\test\java\org\openrepose\external\pjlcompression\ThresholdOutputStreamTest.java,test reset,@ test public void   (  )  throws  exception  {  tos . write ( new byte[10] )  ;  assert equals ( 0 baos . size (  )  )  ;  tos . reset (  )  ;  assert equals ( 0 baos . size (  )  )  ;  tos . close (  )  ;  assert equals ( 0 baos . size (  )  )  ;  asser
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\test\java\org\openrepose\external\pjlcompression\ThresholdOutputStreamTest.java,test write flush,@ test public void   (  )  throws  exception  {  tos . write ( 0 )  ;  tos . write ( new byte[10] )  ;  tos . write ( new byte[10] 0 5 )  ;  assert equals ( 0 baos . size (  )  )  ;  tos . flush (  )  ;  assert equals ( 10 baos . size (  )  )  ;  tos . cl
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\test\java\org\openrepose\external\pjlcompression\StatsInputStreamTest.java,assert bytes read,private void   ( int num bytes )  {  assert equals ( num bytes callback . total bytes read )  ;  assert equals ( num bytes 100  -  bais . available (  )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\test\java\org\openrepose\external\pjlcompression\StatsInputStreamTest.java,bytes read,public void   ( long num bytes )  {  total bytes read +  = num bytes ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\test\java\org\openrepose\external\pjlcompression\StatsInputStreamTest.java,set up,@ before public void   (  )  throws  exception  {  bais = new  byte array input stream ( new byte[100] )  ;  callback = new  mock stats callback (  )  ;  stats in = new  stats input stream ( bais callback )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\test\java\org\openrepose\external\pjlcompression\StatsInputStreamTest.java,test mark skip reset,@ test public void   (  )  throws  exception  {  assert true ( stats in . mark supported (  )  )  ;  stats in . mark ( 40 )  ;  stats in . skip ( 50 )  ;  assert bytes read ( 50 )  ;  try  {  stats in . reset (  )  ;   }  catch  (  io exception expected e
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\test\java\org\openrepose\external\pjlcompression\StatsInputStreamTest.java,test stats,@ test public void   (  )  throws  exception  {  assert bytes read ( 0 )  ;  assert equals ( 0 stats in . read (  )  )  ;  assert bytes read ( 1 )  ;  assert equals ( 10 stats in . read ( new byte[10] )  )  ;  assert bytes read ( 11 )  ;  assert equals ( 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\tests\mocks-servlet\src\main\java\org\openrepose\commons\utils\test\mocks\providers\MockServiceProvider.java,get echo body,"public  string   (  http servlet request request  string body )  {   string builder resp = new  string builder ( """" )  ;  try  {  resp = resp . append (  request util . servlet request to xml ( request body )  )  ;   }  catch  (  io exception|jaxb exception e )   {  log . trace ( """" e )  ;   }  return resp . to string (  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\tests\mocks-servlet\src\main\java\org\openrepose\commons\utils\test\mocks\providers\MockServiceProvider.java,get end service,"public  response   (  string status code  http servlet request request  string body )  {  int status ;  try  {  status =  integer . parse int ( status code )  ;   }  catch  (   number format exception e )   {  status =  response .  status . not   found . get status code (  )  ;   }   string resp = get echo body ( request body )  ;   response builder response =  response . status ( status )  ;  return response . entity ( resp )  . header ( ""x - request - id"" ""somevalue"" )  . header ( "" content -  length"" resp . length (  )  )  . build (  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\tests\mocks-servlet\src\main\java\org\openrepose\commons\utils\test\mocks\MocksServletResource.java, mocks servlet resource,public   (  )  {  provider = new  mock service provider (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\tests\mocks-servlet\src\main\java\org\openrepose\commons\utils\test\mocks\MocksServletResource.java,get end service,"@get @ path ( "" { id :  . * } "" )  public  response   ( @ context  http servlet request request )  {  return provider . get end service ( request )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\tests\mocks-servlet\src\main\java\org\openrepose\commons\utils\test\mocks\MocksServletResource.java,get service,"@get @ path ( "" / "" )  public  response   ( @ context  http servlet request request )  {  return provider . get end service ( request )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\tests\mocks-servlet\src\main\java\org\openrepose\commons\utils\test\mocks\MocksServletResource.java,post end service,"@post @ path ( "" { id :  . * } "" )  public  response   (  string body @ context  http servlet request request )  {  return provider . get end service ( default   response   code request body )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\tests\mocks-servlet\src\main\java\org\openrepose\commons\utils\test\mocks\MocksServletResource.java,post service,"@post @ path ( "" / "" )  public  response   (  string body @ context  http servlet request request )  {  return provider . get end service ( default   response   code request body )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\tests\test-containers\test-container-api\src\main\java\org\openrepose\commons\utils\test\ReposeContainer.java, repose container,public   (  repose container props props )  {  this . listen port = props . get start port (  )  ;  this . war location = props . get war (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\tests\test-containers\test-container-api\src\main\java\org\openrepose\commons\utils\test\ReposeContainerProps.java, repose container props,public   (  string start port  string war  string config dir  string cluster id  string node id  string .  .  .  origin service wars )  {  this . start port = start port ;  this . war = war ;  this . config dir = config dir ;  this . cluster id = cluster id ;  this . node id = node id ;  this . origin service wars = origin service wars ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\tests\test-containers\test-container-api\src\main\java\org\openrepose\commons\utils\test\ReposeContainerProps.java,get cluster id,public  string   (  )  {  return cluster id ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\tests\test-containers\test-container-api\src\main\java\org\openrepose\commons\utils\test\ReposeContainerProps.java,get config directory,public  string   (  )  {  return config dir ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\tests\test-containers\test-container-api\src\main\java\org\openrepose\commons\utils\test\ReposeContainerProps.java,get node id,public  string   (  )  {  return node id ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\tests\test-containers\test-container-api\src\main\java\org\openrepose\commons\utils\test\ReposeContainerProps.java,get origin service wars,public  string[]   (  )  {  return origin service wars ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\tests\test-containers\test-container-api\src\main\java\org\openrepose\commons\utils\test\ReposeContainerProps.java,get start port,public  string   (  )  {  return start port ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\tests\test-containers\test-container-api\src\main\java\org\openrepose\commons\utils\test\ReposeContainerProps.java,get war,public  string   (  )  {  return war ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\tests\test-containers\test-container-api\src\main\java\org\openrepose\commons\utils\test\ReposeContainerUtil.java,parse args,"public static  repose container props   (  string[] args )  throws  parse exception  {   options options = new  options (  )  ;   command line parser parser = new  basic parser (  )  ;   option port opt = new  option ( ""p"" true "" repose port to listen on"" )  ;   option rootwar opt = new  option ( ""w"" true "" location of root . war"" )  ;   option config dir opt = new  option ( ""d"" true "" location of the configuration directory"" )  ;   option cluster id opt = new  option ( ""c"" true "" cluster id of the node being launched"" )  ;   option node id opt = new  option ( ""n"" true "" node id of the node being launched"" )  ;   option application wars opt = new  option ( ""war"" true """" )  ;  port opt . set required ( true )  ;  rootwar opt . set required ( true )  ;  cluster id opt . set required ( true )  ;  node id opt . set required ( true )  ;  options . add option ( port opt )  . add option ( rootwar opt )  . add option ( config dir opt )  . add option ( cluster id opt )  . add option ( node id opt )  . add option ( application wars opt )  ;  final  command line cmdline ;  cmdline = parser . parse ( options args )  ;  return new  repose container props ( cmdline . get option value ( ""p"" )  cmdline . get option value ( ""w"" )  cmdline . get option value ( ""d"" )  cmdline . get option value ( ""c"" )  cmdline . get option value ( ""n"" )  cmdline . get option values ( ""war"" )  )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\tests\test-containers\test-container-glassfish\src\main\java\org\openrepose\commons\utils\test\glassfish\ReposeGlassFishContainer.java, repose glass fish container,"public   (  repose container props props )  throws  glass fish exception  {  super ( props )  ;   glass fish properties properties = new  glass fish properties (  )  ;   glass fish runtime runtime =  glass fish runtime . bootstrap (  )  ;  properties . set port ( ""http - listener""  integer . parse int ( listen port )  )  ;  glassfish = runtime . new glass fish ( properties )  ;   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\tests\test-containers\test-container-glassfish\src\main\java\org\openrepose\commons\utils\test\glassfish\ReposeGlassFishContainer.java,run,@ override public void   (  )  {  stop repose (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\tests\test-containers\test-container-glassfish\src\main\java\org\openrepose\commons\utils\test\glassfish\ReposeGlassFishContainer.java,start repose,@ override protected void   (  )  {  try  {  glassfish . start (  )  ;   runtime . get runtime (  )  . add shutdown hook ( new  thread (  )  {  @ override public void run (  )  {  stop repose (  )  ;   }   }   )  ;   file war = new  file ( war location ) 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\tests\test-containers\test-container-glassfish\src\main\java\org\openrepose\commons\utils\test\glassfish\ReposeGlassFishContainer.java,stop repose,"@ override protected void   (  )  {  try  {  glassfish . stop (  )  ;   }  catch  (   glass fish exception e )   {  log . trace ( "" unable to stop glassfish container"" e )  ;   }   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\tests\test-containers\test-container-glassfish\src\main\java\org\openrepose\commons\utils\test\glassfish\ReposeGlassfishServer.java,main,public static void   (  string[] args )  throws  glass fish exception   parse exception  {   repose container props props =  repose container util . parse args ( args )  ;   repose glass fish container container = new  repose glass fish container ( props )  ;  container . start repose (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\tests\test-containers\test-container-tomcat\src\main\java\org\openrepose\commons\utils\test\tomcat\ReposeTomcatContainer.java, repose tomcat container,"public   (  repose container props props )  throws  servlet exception  {  super ( props )  ;  tomcat = new  tomcat (  )  ;  tomcat . set base dir ( base   directory )  ;  tomcat . set port (  integer . parse int ( listen port )  )  ;  tomcat . get host (  )  . set auto deploy ( true )  ;  tomcat . get host (  )  . set deploy on startup ( true )  ;   context repose context = tomcat . add webapp ( "" / "" war location )  ;  repose context . set cross context ( true )  ;  repose context . add parameter ( ""repose - cluster - id"" props . get cluster id (  )  )  ;  repose context . add parameter ( ""repose - node - id"" props . get node id (  )  )  ;   string config dir = props . get config directory (  )  ;  if  ( config dir  !  =  null )   {  repose context . add parameter ( ""repose - config - directory"" config dir )  ;   }  if  ( props . get origin service wars (  )   !  =  null && props . get origin service wars (  )  . length  !  =  0 )   {  for  (   string origin service : props . get origin service wars (  )  )   {  tomcat . add webapp ( "" / ""  +  get servlet path ( origin service )  origin service )  ;   }   }   }  "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\tests\test-containers\test-container-tomcat\src\main\java\org\openrepose\commons\utils\test\tomcat\ReposeTomcatContainer.java,get servlet path,private static  string   (  string file path )  {  return file path . substring ( file path . last index of ( ' / ' )   +  1 file path . last index of ( ' . ' )  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\tests\test-containers\test-container-tomcat\src\main\java\org\openrepose\commons\utils\test\tomcat\ReposeTomcatContainer.java,run,@ override public void   (  )  {  stop repose (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\tests\test-containers\test-container-tomcat\src\main\java\org\openrepose\commons\utils\test\tomcat\ReposeTomcatContainer.java,start repose,"@ override @ suppress warnings ( ""squid:s106"" )  protected void   (  )  {  try  {  tomcat . start (  )  ;   runtime . get runtime (  )  . add shutdown hook ( new  thread (  )  {  @ override public void run (  )  {  stop repose (  )  ;   }   }   )  ;   sys"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\tests\test-containers\test-container-tomcat\src\main\java\org\openrepose\commons\utils\test\tomcat\ReposeTomcatContainer.java,stop repose,"@ override @ suppress warnings ( ""squid:s106"" )  protected void   (  )  {  try  {   system . out . println ( "" stopping  tomcat  server"" )  ;  tomcat . stop (  )  ;  tomcat . get server (  )  . stop (  )  ;   }  catch  (   lifecycle exception e )   {  log"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\tests\mocks-servlet\src\main\java\org\openrepose\commons\utils\test\mocks\providers\RequestUtil.java,servlet request to xml,public static  string   (  http servlet request request  string body )  throws io exception  jaxb exception  {   request information req = new  request information (  )  ;  req . set uri ( request . get requesturl (  )  . to string (  )  )  ;  req . set path ( request . get requesturi (  )  )  ;  req . set method ( request . get method (  )  )  ;  req . set query string ( request . get query string (  )  )  ;  req . set body ( body )  ;  if  (  ! request . get parameter map (  )  . is empty (  )  )   {   query parameters q = new  query parameters (  )  ;   enumeration <  string >  query param names = request . get parameter names (  )  ;  while  ( query param names . has more elements (  )  )   {   string name = query param names . next element (  )  ;   string value =  arrays . to string ( request . get parameter map (  )  . get ( name )  )  ;   name value pair nvp = new  name value pair (  )  ;  nvp . set name ( name )  ;  nvp . set value ( value )  ;  q . get parameter (  )  . add ( nvp )  ;   }  req . set query params ( q )  ;   }   header list h = new  header list (  )  ;   enumeration <  string >  header names = request . get header names (  )  ;  while  ( header names . has more elements (  )  )   {   string header name = header names . next element (  )  ;   enumeration <  string >  header values = request . get headers ( header name )  ;  while  ( header values . has more elements (  )  )   {   string header value = header values . next element (  )  ;   name value pair nvp = new  name value pair (  )  ;  nvp . set name ( header name )  ;  nvp . set value ( header value )  ;  h . get header (  )  . add ( nvp )  ;   }   }  req . set headers ( h )  ;   object factory factory = new  object factory (  )  ;  jaxb context jaxb context = jaxb context . new instance ( context   path )  ;   marshaller marshaller = jaxb context . create marshaller (  )  ;   byte array output stream baos = new  byte array output stream (  )  ;  marshaller . marshal ( factory . create request info ( req )  baos )  ;  return baos . to string (  )  ;   }  
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\tests\test-containers\test-container-tomcat\src\main\java\org\openrepose\commons\utils\test\tomcat\ReposeTomcatServer.java,main,public static void   (  string[] args )  throws  parse exception   servlet exception  {   repose container props props =  repose container util . parse args ( args )  ;   repose tomcat container container = new  repose tomcat container ( props )  ;  container . start repose (  )  ;   }  
