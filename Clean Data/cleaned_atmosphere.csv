,ProjectName,methodName,methodBody
0,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\annotation\AsyncSupportServiceProcessor.java,handle,@ override public void   (  atmosphere framework framework  class <  async support >  annotated class )  {  try  {  framework . set async support ( new  default async support resolver ( framework . get atmosphere config (  )  )  . new comet support ( annotated class . get name (  )  )  )  ;   }  catch  (   throwable e )  
1,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\annotation\AsyncSupportListenerServiceProcessor.java,handle,"@ override public void   (  atmosphere framework framework  class <  async support listener >  annotated class )  {  try  {  framework . async support listener ( framework . new class instance (  async support listener . class annotated class )  )  ;   }  catch  (   throwable e )   {  logger . warn ( """" e )  ;   }   } "
2,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\annotation\AnnotationUtil.java,atmosphere config,"public static void   (  string[] m  atmosphere framework framework )  {  for  (   string s : m )   {   string[] nv = s . split ( "" = "" )  ;  framework . add init parameter ( nv[0] nv[1] )  ;  framework . reconfigure init params ( true )  ;   }   }  "
3,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\annotation\AnnotationUtil.java,broadcaster,public static  broadcaster   (  atmosphere framework framework  class <  ?  extends  broadcaster >  broadcaster  string path )  throws  exception  {  return framework . get broadcaster factory (  )  . lookup ( broadcaster class ( framework broadcaster )  path true )  ;   }  
4,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\annotation\AnnotationUtil.java,broadcaster class,public static  class <  ?  extends  broadcaster >    (  atmosphere framework framework  class <  ?  extends  broadcaster >  broadcaster )  throws  exception  {  if  ( framework . is broadcaster specified (  )  )   {  try  {  broadcaster =  (  class <  ?  extends  broadcaster >  ) framework . get class (  )  . get class loader (  )  . load class ( framework . get default broadcaster class name (  )  )  ;   }  catch  (   class not found exception ex )   {  broadcaster =  (  class <  ?  extends  broadcaster >  )  thread . current thread (  )  . get context class loader (  )  . load class ( framework . get default broadcaster class name (  )  )  ;   }   }  return broadcaster ;   }  
5,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\annotation\AnnotationUtil.java,check default,public static boolean   (  class <  ?  extends  atmosphere interceptor >  i )  {  return  ! managed   atmosphere   interceptors . contains ( i )  &&  !  atmosphere framework . default   atmosphere   interceptors . contains ( i )  ;   }  
6,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\annotation\AnnotationUtil.java,default managed service interceptors,public static void   (  atmosphere framework framework  list <  atmosphere interceptor >  l )  {  interceptors for managed service ( framework managed   atmosphere   interceptors l false )  ;   }  
7,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\annotation\AnnotationUtil.java,filters,public static void   (  class <  ?  extends  broadcast filter > [] bf  atmosphere framework framework )  throws  illegal access exception   instantiation exception  {  for  (   class <  ?  extends  broadcast filter >  b : bf )   {  framework . broadcaster filters ( framework . new class instance (  broadcast filter . class b )  )  ;   }   }  
8,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\annotation\AnnotationUtil.java,inspect,@ override public  action   (  atmosphere resource r )  {  if  (  ! r . is suspended (  )  )   {  for  (   class <  ?  extends  atmosphere resource event listener >  l : listeners )   {  try  {  r . add event listener ( framework . new class instance (  atmosphere resource event listener . class l )  )  ;   }  catch  (   throw
9,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\annotation\AnnotationUtil.java,interceptors,"public static void   (  class <  ?  extends  atmosphere interceptor > [] interceptors  atmosphere framework framework )  {  for  (   class <  ?  extends  atmosphere interceptor >  i : interceptors )   {  try  {  framework . interceptor ( framework . new class instance (  atmosphere interceptor . class i )  )  ;   }  catch  (   throwable e )   {  logger . warn ( """" e )  ;   }   }   }  "
10,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\annotation\AnnotationUtil.java,interceptors for handler,"public static void   (  atmosphere framework framework  list <  class <  ?  extends  atmosphere interceptor >  >  interceptors  list <  atmosphere interceptor >  l )  {  for  (   class <  ?  extends  atmosphere interceptor >  i : interceptors )   {  if  (  ! framework . excluded interceptors (  )  . contains ( i . get name (  )  )  &&  (  !  atmosphere framework . default   atmosphere   interceptors . contains ( i )  )  )   {  try  {  logger . info ( "" adding  {  } "" i )  ;  l . add ( framework . new class instance (  atmosphere interceptor . class i )  )  ;   }  catch  (   throwable e )   {  logger . warn ( """" e )  ;   }   }   }   }  "
11,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\annotation\AnnotationUtil.java,interceptors for managed service,"public static void   (  atmosphere framework framework  list <  class <  ?  extends  atmosphere interceptor >  >  interceptors  list <  atmosphere interceptor >  l boolean check duplicate )  {  for  (   class <  ?  extends  atmosphere interceptor >  i : interceptors )   {  if  (  ! framework . excluded interceptors (  )  . contains ( i . get name (  )  )  &&  (  ! check duplicate || check default ( i )  )  )   {  try  {  logger . info ( "" adding  {  } "" i )  ;  l . add ( framework . new class instance (  atmosphere interceptor . class i )  )  ;   }  catch  (   throwable e )   {  logger . warn ( """" e )  ;   }   }   }   }  "
12,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\annotation\AnnotationUtil.java,listeners,"public static  atmosphere interceptor   ( final  class <  ?  extends  atmosphere resource event listener > [] listeners final  atmosphere framework framework )  {  if  ( listeners . length  >  0 )   {  try  {  return new  atmosphere interceptor adapter (  )  {  @ override public  action inspect (   atmosphere resource r )  {  if  (  ! r . is suspended (  )  )   {  for  (   class <  ?  extends  atmosphere resource event listener >  l : listeners )   {  try  {  r . add event listener ( framework . new class instance (  atmosphere resource event listener . class l )  )  ;   }  catch  (   throwable e )   {  logger . warn ( """" e )  ;   }   }   }  return  action . continue ;   }  @ override public  string to string (  )  {  return ""@ service  event  listeners"" ;   }   }   ;   }  catch  (   throwable e )   {  logger . warn ( """" e )  ;   }   }  return null ;   }  "
13,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\annotation\AnnotationUtil.java,to string,"@ override public  string   (  )  {  return ""@ service  event  listeners"" ;   }  "
14,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\annotation\AtmosphereInterceptorServiceProcessor.java,handle,@ override public void   ( final  atmosphere framework framework  class <  atmosphere interceptor >  annotated class )  {  try  {  final  atmosphere interceptor a =  (  atmosphere interceptor ) framework . new class instance (  atmosphere interceptor . class annotated class )  ;  framework . get atmos
15,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\annotation\AtmosphereInterceptorServiceProcessor.java,started,@ override public void   (  atmosphere framework framework )  {  framework . interceptor ( a )  ;   }  
16,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\annotation\AtmosphereFrameworkServiceProcessor.java,handle,@ override public void   (  atmosphere framework framework  class <  atmosphere framework listener >  annotated class )  {  try  {  framework . framework listener ( framework . new class instance (  atmosphere framework listener . class annotated class )  )  ;   }  catch  (   exception e )   {  logger . erro
17,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\annotation\AtmosphereResourceFactoryServiceProcessor.java,handle,@ override public void   (  atmosphere framework framework  class <  atmosphere resource factory >  annotated class )  {  try  {  framework . set and configure atmosphere resource factory ( framework . new class instance (  atmosphere resource factory . class annotated class )  )  ;   }  catch  (   throwab
18,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\annotation\AtmosphereHandlerServiceProcessor.java,handle,@ override public void   (  atmosphere framework framework  class <  atmosphere handler >  annotated class )  {  try  {   atmosphere handler service a = annotated class . get annotation (  atmosphere handler service . class )  ;  atmosphere config ( a . atmosphere config (  )  framework )  ;  filters ( a . broa
19,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\annotation\BroadcasterCacheInspectorServiceProcessor.java,handle,@ override public void   (  atmosphere framework framework  class <  broadcaster cache inspector >  annotated class )  {  try  {  framework . add broadcaster cache injector ( framework . new class instance (  broadcaster cache inspector . class annotated class )  )  ;   }  catch  (   throwable e )   {  logge
20,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\annotation\AtmosphereServiceProcessor.java,destroy,@ override public void   (  )  {  r . destroy (  )  ;   }  
21,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\annotation\AtmosphereServiceProcessor.java,handle,@ override public void   (  atmosphere framework framework  class <  object >  annotated class )  {  try  {   class <  ?  >  a class = annotated class ;   atmosphere service a = a class . get annotation (  atmosphere service . class )  ;  framework . set broadcaster cache class name ( a . broadcaster cache (  )  . get na
22,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\annotation\AtmosphereServiceProcessor.java,init,@ override public void   (  atmosphere config config )  throws  servlet exception  {   string s = config . get init parameter ( atmosphereresource   interceptor   method )  ;  if  ( s  !  =  null )   {  method = s ;   }  r . init ( config )  ;   }  
23,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\annotation\AtmosphereServiceProcessor.java,on request,@ override public void   (  atmosphere resource resource )  throws io exception  {  if  (  ! resource . get request (  )  . get method (  )  . equals ignore case ( method )  )   {  r . on request ( resource )  ;   }   }  
24,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\annotation\AtmosphereServiceProcessor.java,on state change,@ override public void   (  atmosphere resource event event )  throws io exception  {  r . on state change ( event )  ;   }  
25,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\annotation\BroadcasterCacheServiceProcessor.java,handle,@ override public void   (  atmosphere framework framework  class <  broadcaster cache >  annotated class )  {  framework . set broadcaster cache class name ( annotated class . get name (  )  )  ;   }  
26,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\annotation\AtmosphereResourceListenerServiceProcessor.java,handle,@ override public void   (  atmosphere framework framework  class <  atmosphere resource listener >  annotated class )  {  try  {  framework . atmosphere resource listener ( framework . new class instance (  atmosphere resource listener . class annotated class )  )  ;   }  catch  (   throwable e )   {  logg
27,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\annotation\BroadcasterCacheListenererviceProcessor.java,handle,@ override public void   (  atmosphere framework framework  class <  broadcaster cache listener >  annotated class )  {  try  {  framework . add broadcaster cache listener ( framework . new class instance (  broadcaster cache listener . class annotated class )  )  ;   }  catch  (   exception e )   {  logger . 
28,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\annotation\BroadcasterServiceProcessor.java,handle,@ override public void   (  atmosphere framework framework  class <  broadcaster >  annotated class )  {  framework . set default broadcaster class name ( annotated class . get name (  )  )  ;   }  
29,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\annotation\BroadcasterFactoryServiceProcessor.java,handle,@ override public void   (  atmosphere framework framework  class <  broadcaster factory >  annotated class )  {  try  {  framework . set broadcaster factory ( framework . new class instance (  broadcaster factory . class annotated class )  )  ;  framework . configure broadcaster factory (  )  ;   }  catch  ( 
30,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\annotation\BroadcastFilterServiceProcessor.java,handle,"@ override public void   (  atmosphere framework framework  class <  broadcast filter >  annotated class )  {  try  {  framework . broadcaster filters (  (  broadcast filter ) framework . new class instance (  broadcast filter . class annotated class )  )  ;   }  catch  (   exception e )   {  logger . warn ( """" e ) "
31,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\annotation\EndpointMapperServiceProcessor.java,handle,"@ override public void   (  atmosphere framework framework  class <  endpoint mapper >  annotated class )  {  try  {  framework . end point mapper (  (  endpoint mapper <  ?  >  ) framework . new class instance (  endpoint mapper . class annotated class )  )  ;   }  catch  (   throwable e )   {  logger . warn ( """" e )  ;   }  "
32,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\annotation\BroadcasterListenerServiceProcessor.java,handle,@ override public void   (  atmosphere framework framework  class <  broadcaster listener >  annotated class )  {  try  {   broadcaster listener l = framework . new class instance (  broadcaster listener . class annotated class )  ;  framework . add broadcaster listener ( l )  ;   collection <  broadcaster
33,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\annotation\ManagedServiceProcessor.java,handle,@ override public void   (  atmosphere framework framework  class <  object >  annotated class )  {  try  {   class <  ?  >  a class = annotated class ;   managed service a = a class . get annotation (  managed service . class )  ;  framework . set broadcaster cache class name ( a . broadcaster cache (  )  . get name (  )  )  ; 
34,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\annotation\ManagedServiceProcessor.java,unwrap,@ override public  object   (  object o )  {  if  ( o  !  =  null &&  managed atmosphere handler .  managed . class . is assignable from ( o . get class (  )  )  )   {  o =  managed atmosphere handler .  managed . class . cast ( o )  . object (  )  ;   }  return o ;   }  
35,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\annotation\ManagedServiceProcessor.java,wrap,@ override public  broadcast filter .  broadcast action   (  broadcast filter .  broadcast action a boolean was wrapped )  {  if  ( was wrapped )   {  return new  broadcast filter .  broadcast action ( a . action (  )  new  managed atmosphere handler .  managed ( a . message (  )  )  )  ;   }  else  {  return a ;   }   }  
36,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\annotation\MeteorServiceProcessor.java,handle,@ override public void   (  atmosphere framework framework  class <  servlet >  annotated class )  {  try  {   reflector servlet processor r = framework . new class instance (  reflector servlet processor . class  reflector servlet processor . class )  ;  r . set servlet class name ( annotated class . get na
37,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\annotation\UUIDProviderServiceProcessor.java,handle,"@ override public void   (  atmosphere framework framework  class < uuid provider >  annotated class )  {  try  {  framework . uuid provider ( framework . new class instance ( uuid provider . class annotated class )  )  ;   }  catch  (   throwable e )   {  logger . warn ( """" e )  ;   }   }  "
38,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\annotation\WebSocketFactoryServiceProcessor.java,handle,"@ override public void   (  atmosphere framework framework  class <  web socket factory >  annotated class )  {  try  {  framework . web socket factory ( framework . new class instance (  web socket factory . class annotated class )  )  ;   }  catch  (   throwable e )   {  logger . warn ( """" e )  ;   }   }  "
39,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\annotation\WebSocketHandlerServiceProcessor.java,handle,@ override public void   (  atmosphere framework framework  class <  web socket handler >  annotated class )  {  try  {   web socket handler service m = annotated class . get annotation (  web socket handler service . class )  ;  atmosphere config ( m . atmosphere config (  )  framework )  ;  framework . add atmo
40,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\annotation\WebSocketProcessorServiceProcessor.java,handle,"@ override public void   (  atmosphere framework framework  class <  web socket processor >  annotated class )  {  try  {  if  (  ! has been set )   {  has been set = true ;  framework . set websocket processor class name ( annotated class . get name (  )  )  ;   }  else  {  logger . warn ( "" web socket processor already"
41,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\annotation\WebSocketProtocolServiceProcessor.java,handle,@ override public void   (  atmosphere framework framework  class <  web socket protocol >  annotated class )  {  framework . set web socket protocol class name ( annotated class . get name (  )  )  ;   }  
42,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\CacheMessage.java, cache message,public   (  string id  long now  object message  string uuid  string broadcaster id )  {  this . id = id ;  this . message = message ;  this . create time = now ;  this . uuid = uuid ;  this . broadcaster id = broadcaster id ;   }  
43,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\CacheMessage.java,get broadcaster id,public  string   (  )  {  return this . broadcaster id ;   }  
44,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\CacheMessage.java,get create time,public long   (  )  {  return create time ;   }  
45,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\CacheMessage.java,get id,public  string   (  )  {  return id ;   }  
46,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\CacheMessage.java,get message,public  object   (  )  {  return message ;   }  
47,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\CacheMessage.java,to string,public  string   (  )  {  return message . to string (  )  ;   }  
48,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\CacheMessage.java,uuid,public  string   (  )  {  return uuid ;   }  
49,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\BroadcastMessage.java, broadcast message,public   (  object message )  {  this ( uuid . randomuuid (  )  . to string (  )  message )  ;   }  
50,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\BroadcastMessage.java,id,public  string   (  )  {  return id ;   }  
51,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\BroadcastMessage.java,message,public  object   (  )  {  return message ;   }  
52,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\AbstractBroadcasterCache.java,add broadcaster cache listener,"@ override public  broadcaster cache   (  broadcaster cache listener l )  {  logger . warn ( "" not supported"" )  ;  return this ;   }  "
53,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\AbstractBroadcasterCache.java,cache candidate,"@ override public  broadcaster cache   (  string broadcaster id  string uuid )  {  logger . warn ( "" not supported"" )  ;  return this ;   }  "
54,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\AbstractBroadcasterCache.java,cleanup,@ override public void   (  )  {  if  ( scheduled future  !  =  null )   {  scheduled future . cancel ( false )  ;  scheduled future = null ;   }   }  
55,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\AbstractBroadcasterCache.java,clear cache,@ override public  broadcaster cache   (  string broadcaster id  string uuid  cache message cache )  {  if  ( cache  !  =  null )   {  messages . remove ( cache )  ;  messages ids . remove ( cache . get id (  )  )  ;   }  return this ;   }  
56,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\AbstractBroadcasterCache.java,configure,"@ override public void   (  atmosphere config config )  {   object o = config . properties (  )  . get ( ""shared"" )  ;  if  ( o  !  =  null )   {  is shared =  boolean . parse boolean ( o . to string (  )  )  ;   }  if  ( is shared )   {  reaper =  executors factory . get scheduler ( config )  ;   }  else  {  reaper =  executors . new single"
57,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\AbstractBroadcasterCache.java,exclude from cache,"@ override public  broadcaster cache   (  string broadcaster id  atmosphere resource r )  {  logger . warn ( "" not supported"" )  ;  return this ;   }  "
58,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\AbstractBroadcasterCache.java,get,"protected  list <  object >    ( long cache header time )  {   list <  object >  result = new  array list <  object >  (  )  ;  read write lock . read lock (  )  . lock (  )  ;  try  {  for  (   cache message cache message : messages )   {  if  ( cache message . get create time (  )   >  cache header time )   {  result . add ( cache message . get message (  )  )  ;   }   }   }  finally  {  read write lock . read lock (  )  . unlock (  )  ;   }  logger . trace ( "" retrieved messages  {  } "" result )  ;  return result ;   }  "
59,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\AbstractBroadcasterCache.java,inspect,protected boolean   (  broadcast message m )  {  for  (   broadcaster cache inspector b : inspectors )   {  if  (  ! b . inspect ( m )  )  return false ;   }  return true ;   }  
60,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\AbstractBroadcasterCache.java,inspector,@ override public  broadcaster cache   (  broadcaster cache inspector b )  {  inspectors . add ( b )  ;  return this ;   }  
61,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\AbstractBroadcasterCache.java,put,"protected  cache message   (  broadcast message message  long now  string uuid  string broadcaster id )  {  if  (  ! inspect ( message )  )  return null ;  logger . trace ( "" caching message  {  }  for  broadcaster  {  } "" message . message (  )  )  ;  read write lock . write lock (  )  . lock (  )  ;   cache message cache message = null ;  try  {  boolean has message with same id = messages ids . contains ( message . id (  )  )  ;  if  (  ! has message with same id )   {  cache message = new  cache message ( message . id (  )  now message . message (  )  uuid broadcaster id )  ;  messages . add ( cache message )  ;  messages ids . add ( message . id (  )  )  ;   }   }  finally  {  read write lock . write lock (  )  . unlock (  )  ;   }  return cache message ;   }  "
62,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\AbstractBroadcasterCache.java,remove broadcaster cache listener,"@ override public  broadcaster cache   (  broadcaster cache listener l )  {  logger . warn ( "" not supported"" )  ;  return this ;   }  "
63,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\AbstractBroadcasterCache.java,run,public void   (  )  {  read write lock . write lock (  )  . lock (  )  ;  try  {  long now =  system . nano time (  )  ;   list <  cache message >  expired messages = new  array list <  cache message >  (  )  ;  for  (   cache message message : messages )   {  if  (  time unit . nanoseconds . to millis ( now  -  message . get create time (  )  )   >  max cache time )   {  expired messages . add ( message )  ;   }   }  for  (   cache message expired message : expired messages )   {  messages . remove ( expired message )  ;  messages ids . remove ( expired message . get id (  )  )  ;   }   }  finally  {  read write lock . write lock (  )  . unlock (  )  ;   }   }  
64,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\AbstractBroadcasterCache.java,set invalidate cache interval,public  abstract broadcaster cache   ( long invalidate cache interval )  {  this . invalidate cache interval = invalidate cache interval ;  return this ;   }  
65,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\AbstractBroadcasterCache.java,set max cache time,public  abstract broadcaster cache   ( long max cache time )  {  this . max cache time = max cache time ;  return this ;   }  
66,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\AbstractBroadcasterCache.java,start,@ override public void   (  )  {  scheduled future = reaper . schedule at fixed rate ( new  runnable (  )  {  public void run (  )  {  read write lock . write lock (  )  . lock (  )  ;  try  {  long now =  system . nano time (  )  ;   list <  cache message >  expired messages = new  array list <  cache message >  (  )  ;  for  (   cache messa
67,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\AbstractBroadcasterCache.java,stop,@ override public void   (  )  {  cleanup (  )  ;  if  (  ! is shared )   {  reaper . shutdown (  )  ;   }   }  
68,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\DefaultBroadcasterCache.java,add broadcaster cache listener,@ override public  broadcaster cache   (  broadcaster cache listener l )  {  return null ;   }  
69,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\DefaultBroadcasterCache.java,add to cache,"@ override public  cache message   (  string broadcaster id  string uuid  broadcast message message )  {  logger . trace ( "" message  {  }  might be lost !   please install a proper  broadcaster cache"" message . message (  )  )  ;  return null ;   }  "
70,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\DefaultBroadcasterCache.java,cache candidate,@ override public  broadcaster cache   (  string broadcaster id  string uuid )  {  return this ;   }  
71,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\DefaultBroadcasterCache.java,clear cache,@ override public  broadcaster cache   (  string broadcaster id  string uuid  cache message cache )  {  return this ;   }  
72,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\DefaultBroadcasterCache.java,exclude from cache,@ override public  broadcaster cache   (  string broadcaster id  atmosphere resource r )  {  return this ;   }  
73,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\DefaultBroadcasterCache.java,inspector,@ override public  broadcaster cache   (  broadcaster cache inspector interceptor )  {  return this ;   }  
74,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\DefaultBroadcasterCache.java,remove broadcaster cache listener,@ override public  broadcaster cache   (  broadcaster cache listener l )  {  return null ;   }  
75,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\DefaultBroadcasterCache.java,retrieve from cache,@ override public  list <  object >    (  string id  string uuid )  {  return  collections .  <  object > empty list (  )  ;   }  
76,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\client\TrackMessageSizeFilter.java,filter,@ override public  broadcast action   (  string broadcaster id  object original message  object message )  {  return new  broadcast action ( message )  ;   }  
77,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\SessionBroadcasterCache.java,add to cache,@ override public  cache message   (  string broadcaster id  string uuid  broadcast message message )  {  long now =  system . nano time (  )  ;   cache message cache message = put ( message now uuid broadcaster id )  ;  if  ( uuid . equals ( null )  )  return cache message ;  try  {   http session session = co
78,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\SessionBroadcasterCache.java,retrieve from cache,"@ override public  list <  object >    (  string broadcaster id  string uuid )  {  if  ( uuid  =  =  null )   {  throw new  illegal argument exception ( "" atmosphere resource can't be null"" )  ;   }   list <  object >  result = new  array list <  >  (  )  ;  try  {   atmosphere resource r = config . resources factory (  )  . fi"
79,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\client\TrackMessageSizeInterceptor.java,configure,@ override public void   (  atmosphere config config )  {   string s = config . get init parameter ( message   delimiter )  ;  if  ( s  !  =  null )   {  message delimiter ( s )  ;   }  s = config . get init parameter ( excluded   content   types )  ;  if  ( s  !  =  null )   {  excluded content types . add all (  arrays . as list ( s . 
80,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\client\TrackMessageSizeInterceptor.java,excluded content type,public  track message size interceptor   (  string excluded content type )  {  excluded content types . add ( excluded content type . to lower case (  )  )  ;  return this ;   }  
81,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\client\TrackMessageSizeInterceptor.java,excluded content types,public  hash set <  string >    (  )  {  return excluded content types ;   }  
82,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\client\TrackMessageSizeInterceptor.java,inspect,@ override public  action   ( final  atmosphere resource r )  {  if  (  atmosphere resource . transport . undefined  =  =  r . transport (  )  ||  utils . web socket message ( r )  )  return  action . continue ;  final  atmosphere response response = r . get response (  )  ;  super . inspect ( r )  ;   asyncio writer wri
83,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\client\TrackMessageSizeInterceptor.java,message delimiter,public  track message size interceptor   (  string end string )  {  this . end string = end string ;  end = end string . get bytes (  )  ;  return this ;   }  
84,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\client\TrackMessageSizeInterceptor.java,priority,@ override public priority   (  )  {  return  invokation order . before   default ;   }  
85,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\client\TrackMessageSizeInterceptor.java,to string,"@ override public  string   (  )  {  return ""  track  message  size  interceptor using ""  +  end string ;   }  "
86,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\client\TrackMessageSizeInterceptor.java,transform payload,"@ override public byte[]   (  atmosphere response response byte[] response draft byte[] data )  throws io exception  {  boolean write as bytes = io utils . is body binary ( response . request (  )  )  ;  if  ( write as bytes )   {  logger . warn ( "" cannot use  track message size interceptor with binary"
87,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\UUIDBroadcasterCache.java,active clients,public  map <  string  long >    (  )  {  return active clients ;   }  
88,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\UUIDBroadcasterCache.java,add broadcaster cache listener,@ override public  broadcaster cache   (  broadcaster cache listener l )  {  listeners . add ( l )  ;  return this ;   }  
89,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\UUIDBroadcasterCache.java,add message,"private void   (  string broadcaster id  string client id  cache message message )  {   concurrent linked queue <  cache message >  client queue = messages . get ( client id )  ;  if  ( client queue  =  =  null )   {  if  ( active clients . get ( client id )   !  =  null )   {  client queue = new  concurrent linked queue <  >  (  )  ;  if  ( messages . put if absent ( client id client queue )   =  =  null )   {  logger . debug ( ""new queue created for message  {  }   broadcaster  {  }  for resource  {  }  "" message . get message (  )  broadcaster id client id )  ;   }   }  else  {  logger . debug ( "" client  {  }  is no longer active .   not caching message  {  }  for broadcaster  {  } "" client id message broadcaster id )  ;  return ;   }   }  notify add cache ( broadcaster id message )  ;  if  ( logger . is debug enabled (  )  )   {  logger . debug ( ""offering message  {  }   broadcaster  {  }  for resource  {  } "" message . get message (  )  broadcaster id client id )  ;   }  messages . get ( client id )  . offer ( message )  ;   }  "
90,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\UUIDBroadcasterCache.java,add to cache,"@ override public  cache message   (  string broadcaster id  string uuid  broadcast message message )  {  if  ( logger . is trace enabled (  )  )   {  logger . trace ( "" adding for  atmosphere resource  {  }  cached messages  {  } "" uuid message . message (  )  )  ;  logger . trace ( "" active clients  {  } "" activec"
91,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\UUIDBroadcasterCache.java,cache candidate,@ override public  broadcaster cache   (  string broadcaster id  string uuid )  {  long now =  system . current time millis (  )  ;  active clients . put ( uuid now )  ;  return this ;   }  
92,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\UUIDBroadcasterCache.java,cleanup,@ override public void   (  )  {  messages . clear (  )  ;  active clients . clear (  )  ;  inspectors . clear (  )  ;  if  ( scheduled future  !  =  null )   {  scheduled future . cancel ( false )  ;  scheduled future = null ;   }   }  
93,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\UUIDBroadcasterCache.java,clear cache,"@ override public  broadcaster cache   (  string broadcaster id  string uuid  cache message message )  {   concurrent linked queue <  cache message >  client queue = messages . get ( uuid )  ;  if  ( client queue  !  =  null )   {  logger . trace ( "" removing for broadcaster  {  }   atmosphere resource  {  }  cach"
94,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\UUIDBroadcasterCache.java,configure,"@ override public void   (  atmosphere config config )  {   object o = config . properties (  )  . get ( ""shared"" )  ;  if  ( o  !  =  null )   {  shared =  boolean . parse boolean ( o . to string (  )  )  ;   }  if  ( shared )   {  task scheduler =  executors factory . get scheduler ( config )  ;   }  else  {  task scheduler =  executors"
95,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\UUIDBroadcasterCache.java,exclude from cache,@ override public  broadcaster cache   (  string broadcaster id  atmosphere resource r )  {  active clients . remove ( r . uuid (  )  )  ;  return this ;   }  
96,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\UUIDBroadcasterCache.java,inspect,protected boolean   (  broadcast message m )  {  for  (   broadcaster cache inspector b : inspectors )   {  if  (  ! b . inspect ( m )  )  return false ;   }  return true ;   }  
97,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\UUIDBroadcasterCache.java,inspector,@ override public  broadcaster cache   (  broadcaster cache inspector b )  {  inspectors . add ( b )  ;  return this ;   }  
98,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\UUIDBroadcasterCache.java,inspectors,public  list <  broadcaster cache inspector >    (  )  {  return inspectors ;   }  
99,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\UUIDBroadcasterCache.java,invalidate expired entries,"protected void   (  )  {  long now =  system . current time millis (  )  ;   set <  string >  inactive clients = new  hash set <  >  (  )  ;  for  (   map .  entry <  string  long >  entry : active clients . entry set (  )  )   {  if  ( now  -  entry . get value (  )   >  client idle time )   {  logger . trace ( "" invalidate client  {  } "" entry . get key (  )  )  ;  inactive clients . add ( entry . get key (  )  )  ;   }   }  for  (   string client id : inactive clients )   {  active clients . remove ( client id )  ;   concurrent linked queue <  cache message >  queue = messages . remove ( client id )  ;  if  ( queue  !  =  null )   {  logger . debug ( ""removed client queue of size:  {  }  for client uuid  {  } "" queue . size (  )  client id )  ;  notify remove cache ( queue )  ;   }  else  {  logger . trace ( ""queue is already null for client:  {  } "" client id )  ;   }   }  for  (   string client id : messages (  )  . key set (  )  )   {  if  (  ! active clients (  )  . contains key ( client id )  )   {  messages (  )  . get ( client id )  . clear (  )  ;   }   }   }  "
100,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\UUIDBroadcasterCache.java,listeners,public  list <  broadcaster cache listener >    (  )  {  return listeners ;   }  
101,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\UUIDBroadcasterCache.java,messages,public  map <  string  concurrent linked queue <  cache message >  >    (  )  {  return messages ;   }  
102,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\UUIDBroadcasterCache.java,notify add cache,"private void   (  string broadcaster id  cache message message )  {  for  (   broadcaster cache listener l : listeners )   {  try  {  l . on add cache ( broadcaster id message )  ;   }  catch  (   exception ex )   {  logger . warn ( "" listener exception"" ex )  ;   }   }   }  "
103,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\UUIDBroadcasterCache.java,notify remove cache,private void   (  concurrent linked queue <  cache message >  message queue )  {  for  (   cache message message : message queue )   {  notify remove cache ( message . get broadcaster id (  )  message )  ;   }   }  
104,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\UUIDBroadcasterCache.java,remove broadcaster cache listener,@ override public  broadcaster cache   (  broadcaster cache listener l )  {  listeners . remove ( l )  ;  return this ;   }  
105,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\UUIDBroadcasterCache.java,retrieve from cache,@ override public  list <  object >    (  string broadcaster id  string uuid )  {  cache candidate ( broadcaster id uuid )  ;   concurrent linked queue <  cache message >  client queue = messages . get ( uuid )  ;   cache message message ;   list <  object >  result = new  array list <  >  (  )  ;  if  ( client queue  =  =  null
106,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\UUIDBroadcasterCache.java,run,@ override public void   (  )  {  invalidate expired entries (  )  ;   }  
107,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\UUIDBroadcasterCache.java,set client idle time,public void   ( long client idle time )  {  this . client idle time = client idle time ;   }  
108,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\UUIDBroadcasterCache.java,set invalidate cache interval,public void   ( long invalidate cache interval )  {  this . invalidate cache interval = invalidate cache interval ;  scheduled future . cancel ( true )  ;  start (  )  ;   }  
109,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\UUIDBroadcasterCache.java,start,@ override public void   (  )  {  scheduled future = task scheduler . schedule with fixed delay ( new  runnable (  )  {  @ override public void run (  )  {  invalidate expired entries (  )  ;   }   }   0 invalidate cache interval  time unit . milliseconds )  ;   }  
110,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\UUIDBroadcasterCache.java,stop,@ override public void   (  )  {  cleanup (  )  ;  if  ( task scheduler  !  =  null )   {  task scheduler . shutdown (  )  ;   }   }  
111,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\UUIDBroadcasterCache.java,to string,@ override public  string   (  )  {  return this . get class (  )  . get name (  )  ;   }  
112,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\UUIDBroadcasterCache.java,uuid,protected  string   (  atmosphere resource r )  {  return r . uuid (  )  ;   }  
113,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\AtmosphereHandlerProperty.java, atmosphere handler property,public   (  string name  string value )  {  this . name = name ;  this . value = value ;   }  
114,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\AtmosphereHandlerProperty.java,get name,public  string   (  )  {  return name ;   }  
115,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\AtmosphereHandlerProperty.java,get value,public  string   (  )  {  return value ;   }  
116,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\AtmosphereHandlerProperty.java,set name,public void   (  string name )  {  this . name = name ;   }  
117,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\AtmosphereHandlerProperty.java,set value,public void   (  string value )  {  this . value = value ;   }  
118,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\ApplicationConfiguration.java, application configuration,public   (  string param name  string param value )  {  this . param name = param name ;  this . param value = param value ;   }  
119,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\ApplicationConfiguration.java,get param name,public  string   (  )  {  return param name ;   }  
120,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\ApplicationConfiguration.java,get param value,public  string   (  )  {  return param value ;   }  
121,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\ApplicationConfiguration.java,set param name,public void   (  string param name )  {  this . param name = param name ;   }  
122,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\ApplicationConfiguration.java,set param value,public void   (  string param value )  {  this . param value = param value ;   }  
123,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\FrameworkConfiguration.java, framework configuration,public   (  string param name  string param value )  {  this . param name = param name ;  this . param value = param value ;   }  
124,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\FrameworkConfiguration.java,get param name,public  string   (  )  {  return param name ;   }  
125,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\FrameworkConfiguration.java,get param value,public  string   (  )  {  return param value ;   }  
126,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\FrameworkConfiguration.java,set param name,public void   (  string param name )  {  this . param name = param name ;   }  
127,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\FrameworkConfiguration.java,set param value,public void   (  string param value )  {  this . param value = param value ;   }  
128,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\managed\AtmosphereHandlerServiceInterceptor.java,map annotated service,"protected void   ( boolean re map  string path  atmosphere request request  atmosphere handler wrapper w )  {  synchronized  ( config . handlers (  )  )   {  if  ( config . handlers (  )  . get ( path )   =  =  null )   {   atmosphere handler service m = w . atmosphere handler . get class (  )  . get annotation (  atmosphere handler service . class )  ;  if  ( m  !  =  null )   {  try  {   string target path = m . path (  )  ;  if  ( target path . index of ( "" { "" )   !  =   - 1 && target path . index of ( "" } "" )   !  =   - 1 )   {  boolean singleton = w . atmosphere handler . get class (  )  . get annotation (  singleton . class )   !  =  null ;   atmosphere handler neww = w . atmosphere handler ;  if  (  ! singleton )   {  neww = config . framework (  )  . new class instance (  atmosphere handler . class w . atmosphere handler . get class (  )  )  ;   }  request . local attributes (  )  . put (  named . class . get name (  )  path . substring ( target path . index of ( "" { "" )  )  )  ;   atmosphere resource impl . class . cast ( request . resource (  )  )  . atmosphere handler ( neww )  ;  config . framework (  )  . add atmosphere handler ( path neww config . get broadcaster factory (  )  . lookup ( w . broadcaster . get class (  )  path true )  w . interceptors )  ;  request . set attribute (  framework config . new   mapping ""true"" )  ;   }   }  catch  (   throwable e )   {  logger . warn ( "" unable to create  atmosphere handler"" e )  ;   }   }   }   }   }  "
129,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\managed\AtmosphereHandlerServiceInterceptor.java,to string,"@ override public  string   (  )  {  return ""@ atmosphere handler service  interceptor"" ;   }  "
130,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\AtmosphereHandlerConfig.java,get application config,public  list <  application configuration >    (  )  {  return application config ;   }  
131,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\AtmosphereHandlerConfig.java,get atmosphere interceptor classes,public  list <  string >    (  )  {  return interceptors ;   }  
132,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\AtmosphereHandlerConfig.java,get broadcast filter classes,public  list <  string >    (  )  {  return broadcast filter classes ;   }  
133,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\AtmosphereHandlerConfig.java,get broadcaster,public  string   (  )  {  return broadcaster ;   }  
134,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\AtmosphereHandlerConfig.java,get broadcaster cache,public  string   (  )  {  return broadcaster cache ;   }  
135,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\AtmosphereHandlerConfig.java,get class name,public  string   (  )  {  return class name ;   }  
136,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\AtmosphereHandlerConfig.java,get comet support,public  string   (  )  {  return comet support ;   }  
137,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\AtmosphereHandlerConfig.java,get context root,public  string   (  )  {  return context root ;   }  
138,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\AtmosphereHandlerConfig.java,get framework config,public  list <  framework configuration >    (  )  {  return framework config ;   }  
139,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\AtmosphereHandlerConfig.java,get properties,public  list <  atmosphere handler property >    (  )  {  return properties ;   }  
140,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\AtmosphereHandlerConfig.java,get support session,public  string   (  )  {  return support session ;   }  
141,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\AtmosphereHandlerConfig.java,set application config,public void   (  list <  application configuration >  application config )  {  this . application config = application config ;   }  
142,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\AtmosphereHandlerConfig.java,set atmosphere interceptor classes,public void   (  list <  string >  interceptors )  {  this . interceptors = interceptors ;   }  
143,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\AtmosphereHandlerConfig.java,set broadcast filter classes,public void   (  list <  string >  broadcast filter classes )  {  this . broadcast filter classes = broadcast filter classes ;   }  
144,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\AtmosphereHandlerConfig.java,set broadcaster,public void   (  string broadcaster )  {  this . broadcaster = broadcaster ;   }  
145,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\AtmosphereHandlerConfig.java,set broadcaster cache,public void   (  string broadcaster cache )  {  this . broadcaster cache = broadcaster cache ;   }  
146,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\AtmosphereHandlerConfig.java,set class name,public void   (  string class name )  {  this . class name = class name ;   }  
147,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\AtmosphereHandlerConfig.java,set comet support,public void   (  string comet support )  {  this . comet support = comet support ;   }  
148,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\AtmosphereHandlerConfig.java,set context root,public void   (  string context root )  {  this . context root = context root ;   }  
149,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\AtmosphereHandlerConfig.java,set framework config,public void   (  list <  framework configuration >  framework config )  {  this . framework config = framework config ;   }  
150,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\AtmosphereHandlerConfig.java,set properties,public void   (  list <  atmosphere handler property >  properties )  {  this . properties = properties ;   }  
151,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\AtmosphereHandlerConfig.java,set support session,public void   (  string support session )  {  this . support session = support session ;   }  
152,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\managed\Invoker.java,all,"public static  object   (  list <  encoder <  ?   ?  >  >  encoders  list <  decoder <  ?   ?  >  >  decoders  object instance type  object object to invoke  method method )  {   object decoded object = decode ( decoders instance type )  ;  if  ( instance type  =  =  null )   {  logger . trace ( "" no  encoder matching  {  } "" instance type )  ;   }  decoded object = decoded object  =  =  null  ?  instance type : decoded object ;  logger . trace ( "" {  }   . on  {  } "" method . get name (  )  decoded object )  ;   object object to encode = invoke method ( method object to invoke decoded object )  ;   object encoded object = null ;  if  ( object to encode  !  =  null )   {  encoded object = encode ( encoders object to encode )  ;   }  return encoded object  =  =  null  ?  object to encode : encoded object ;   }  "
153,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\managed\Invoker.java,decode,"public static  object   (  list <  decoder <  ?   ?  >  >  decoders  object instance type )  {   object decoded object = match decoder ( instance type decoders )  ;  if  ( instance type  =  =  null )   {  logger . trace ( "" no  encoder matching  {  } "" instance type )  ;   }  return decoded object ;   }  "
154,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\managed\Invoker.java,encode,"public static  object   (  list <  encoder <  ?   ?  >  >  encoders  object object to encode )  {   object encoded object = match encoder ( object to encode encoders )  ;  if  ( encoded object  =  =  null )   {  logger . trace ( "" no  encoder matching  {  } "" object to encode )  ;   }  return encoded object ;   }  "
155,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\managed\Invoker.java,invoke method,"public static  object   (  method method  object object to invoke  object .  .  .  parameters )  {   object object to encode = null ;  boolean has match = false ;  try  {  object to encode = method . invoke ( object to invoke method . get parameter types (  )  . length  =  =  0  ?  new  object[] {  }  : parameters )  ;  has match = true ;   }  catch  (   illegal access exception e )   {  logger . trace ( """" e )  ;   }  catch  (   invocation target exception e )   {  logger . error ( """" e )  ;   }  catch  (  java . lang .  illegal argument exception e )   {  logger . trace ( """" e )  ;   }  catch  (   throwable e )   {  logger . error ( """" e )  ;   }  if  (  ! has match )   {  logger . trace ( "" no  method's  arguments  {  }  matching  {  } "" method . get name (  )  object to invoke )  ;   }  return object to encode ;   }  "
156,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\managed\Invoker.java,match decoder,"public static  object   (  object instance type  list <  decoder <  ?   ?  >  >  decoders )  {   object decoded object = decoders . is empty (  )   ?  instance type : null ;  for  (   decoder d : decoders )   {   class <  ?  > [] type arguments =  type resolver . resolve arguments ( d . get class (  )   decoder . class )  ;  if  ( instance type  !  =  null && type arguments . length  >  0 && type arguments[0] . is assignable from ( instance type . get class (  )  )  )   {  logger . trace ( "" {  }  is trying to decode  {  } "" d instance type )  ;  try  {  decoded object = d . decode ( instance type )  ;   }  catch  (   exception e )   {  logger . trace ( """" e )  ;   }   }   }  return decoded object ;   }  "
157,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\managed\Invoker.java,match encoder,"public static  object   (  object instance type  list <  encoder <  ?   ?  >  >  encoders )  {  if  ( instance type  =  =  null )  return null ;   object encoded object = encoders . is empty (  )   ?  instance type : null ;  for  (   encoder d : encoders )   {   class <  ?  > [] type arguments =  type resolver . resolve arguments ( d . get class (  )   encoder . class )  ;  if  ( instance type  !  =  null && type arguments . length  >  0 && type arguments[0] . is assignable from ( instance type . get class (  )  )  )   {  logger . trace ( "" {  }  is trying to encode  {  } "" d instance type )  ;  encoded object = d . encode ( instance type )  ;   }   }  return encoded object ;   }  "
158,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\managed\ManagedAtmosphereHandler.java, encoder object,public   ( final  map <  method  list <  encoder <  ?   ?  >  >  >  encoders final  object object to encode )  {  encoded object =  invoker . encode ( encoders . get ( method )  object to encode )  ;  method info =  method info . this ;   }  
159,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\managed\ManagedAtmosphereHandler.java, managed,public   (  object o )  {  this . o = o ;   }  
160,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\managed\ManagedAtmosphereHandler.java, method info,public   (  method method )  {  this . method = method ;  if  ( method . is annotation present (  deliver to . class )  )   {  this . deliver to = method . get annotation (  deliver to . class )  . value (  )  ;   }  else  {  this . deliver to =  deliver to . deliver   to . broadcaster ;   }   }  
161,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\managed\ManagedAtmosphereHandler.java,annotation type,@ override public  class <  ?  extends  annotation >    (  )  {  return null ;   }  
162,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\managed\ManagedAtmosphereHandler.java,configure,@ override public  annotated proxy   (  atmosphere config config  object c )  {  this . proxied instance = c ;  this . on runtime method = populate message ( c  message . class )  ;  this . on heartbeat method = populate ( c  heartbeat . class )  ;  this . on disconnect method = populate ( c  disconnect . class )  ;  t
163,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\managed\ManagedAtmosphereHandler.java,encode, encoder object   ( final  map <  method  list <  encoder <  ?   ?  >  >  >  encoders final  object object to encode )  {  return new  encoder object ( encoders object to encode )  ;   }  
164,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\managed\ManagedAtmosphereHandler.java,invoke,private  object   (  method m  object o )  {  return  utils . invoke ( proxied instance m o )  ;   }  
165,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\managed\ManagedAtmosphereHandler.java,message,private  object   (  method m  object o )  {  if  ( m  !  =  null )   {  return  invoker . all ( encoders . get ( m )  empty o proxied instance m )  ;   }  return null ;   }  
166,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\managed\ManagedAtmosphereHandler.java,object,public  object   (  )  {  return o ;   }  
167,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\managed\ManagedAtmosphereHandler.java,on close,@ override public void   (  atmosphere resource event event )  {  invoke ( on disconnect method event )  ;   }  
168,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\managed\ManagedAtmosphereHandler.java,on heartbeat,@ override public void   ( final  atmosphere resource event event )  {  if  ( on heartbeat method  !  =  null )   {  invoke ( on heartbeat method event )  ;   }   }  
169,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\managed\ManagedAtmosphereHandler.java,on request,@ override public void   ( final  atmosphere resource resource )  throws io exception  {   atmosphere request request = resource . get request (  )  ;   string method = request . get method (  )  ;  boolean polling =  utils . pollable transport ( resource . transport (  )  )  ;  boolean web socket message =  uti
170,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\managed\ManagedAtmosphereHandler.java,on resume,@ override public void   (  atmosphere resource event event )  {  invoke ( on resume method event )  ;  resource . remove event listener ( this )  ;   }  
171,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\managed\ManagedAtmosphereHandler.java,on state change,"@ override @ suppress warnings ( ""unchecked"" )  public void   (  atmosphere resource event event )  throws io exception  {   object msg = event . get message (  )  ;   atmosphere resource impl r =  atmosphere resource impl . class . cast ( event . get resource (  )  )  ;   boolean resume on broadcast = r . resume on"
172,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\managed\ManagedAtmosphereHandler.java,on suspend,@ override public void   (  atmosphere resource event event )  {  process ready ( event . get resource (  )  )  ;  resource . remove event listener ( this )  ;   }  
173,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\managed\ManagedAtmosphereHandler.java,path params,protected boolean   (  object o )  {  for  (   field field : o . get class (  )  . get declared fields (  )  )   {  if  ( field . is annotation present (  path param . class )  )   {  return true ;   }   }  return false ;   }  
174,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\managed\ManagedAtmosphereHandler.java,populate,protected  method   (  object c  class <  ?  extends  annotation >  annotation )  {  for  (   method m : c . get class (  )  . get methods (  )  )   {  if  ( m . is annotation present ( annotation )  )   {  return m ;   }   }  return null ;   }  
175,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\managed\ManagedAtmosphereHandler.java,populate decoders,"private void   (  )  {  for  (   method info m : on runtime method )   {   list <  decoder <  ?   ?  >  >  l = new  copy on write array list <  >  (  )  ;  for  (   class <  ?  extends  decoder >  s : m . method . get annotation (  message . class )  . decoders (  )  )   {  try  {  l . add ( config . framework (  )  . new class instance (  decoder . class s )  )  ;   }  catch  (   exception e )   {  logger . error ( "" unable to load encoder  {  } "" s )  ;   }   }  decoders . put ( m . method l )  ;   }   }  "
176,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\managed\ManagedAtmosphereHandler.java,populate encoders,"private void   (  )  {  for  (   method info m : on runtime method )   {   list <  encoder <  ?   ?  >  >  l = new  copy on write array list <  >  (  )  ;  for  (   class <  ?  extends  encoder >  s : m . method . get annotation (  message . class )  . encoders (  )  )   {  try  {  l . add ( config . framework (  )  . new class instance (  encoder . class s )  )  ;   }  catch  (   exception e )   {  logger . error ( "" unable to load encoder  {  } "" s )  ;   }   }  encoders . put ( m . method l )  ;   }  if  ( on ready method  !  =  null )   {   list <  encoder <  ?   ?  >  >  l = new  copy on write array list <  >  (  )  ;  for  (   class <  ?  extends  encoder >  s : on ready method . get annotation (  ready . class )  . encoders (  )  )   {  try  {  l . add ( config . framework (  )  . new class instance (  encoder . class s )  )  ;   }  catch  (   exception e )   {  logger . error ( "" unable to load encoder  {  } "" s )  ;   }   }  encoders . put ( on ready method l )  ;   }   }  "
177,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\managed\ManagedAtmosphereHandler.java,populate message,protected  list <  method info >    (  object c  class <  ?  extends  annotation >  annotation )  {   array list <  method info >  methods = new  array list <  >  (  )  ;  for  (   method m : c . get class (  )  . get methods (  )  )   {  if  ( m . is annotation present ( annotation )  )   {  methods . add ( new  method info ( m )  )  ;   }   }  return methods ;   }  
178,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\managed\ManagedAtmosphereHandler.java,process ready,"protected void   (  atmosphere resource r )  {  final  deliver to deliver to ;  final  ready ready = on ready method . get annotation (  ready . class )  ;  if  ( ready . value (  )   !  =   ready . deliver   to . resource )   {  if  ( iae  =  =  null )   {  iae = new  illegal argument exception (  )  ;   }  logger . warn ( "" since 2 . 2  delivery strategy must be specified with @ deliver to  not with a value in the @ ready annotation . "" iae )  ;  deliver to = new  deliver to (  )  {  @ override public deliver   to value (  )  {  switch  ( ready . value (  )  )   {  case all: return deliver   to . all ;  case broadcaster: return deliver   to . broadcaster ;   }  return null ;   }  @ override public  class <  ?  extends  annotation >  annotation type (  )  {  return null ;   }   }   ;   }  else  {  deliver to = on ready method . get annotation (  deliver to . class )  ;   }  io utils . deliver ( message ( on ready method r )  deliver to  deliver to . deliver   to . resource r )  ;   }  "
179,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\managed\ManagedAtmosphereHandler.java,scan for reader or input stream,private void   (  )  {  for  (   method info m : on runtime method )   {   class <  ?  > [] classes = m . method . get parameter types (  )  ;  for  (   class <  ?  >  c : classes )   {  if  (  input stream . class . is assignable from ( c )  )   {  m . use stream = true ;   }  else if  (  reader . class . is assignable from ( c )  )   {  m . use reader = true ;   }   }   }   }  
180,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\managed\ManagedAtmosphereHandler.java,target,@ override public  object   (  )  {  return proxied instance ;   }  
181,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\managed\ManagedAtmosphereHandler.java,to string,public  string   (  )  {  return o . to string (  )  ;   }  
182,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\managed\ManagedAtmosphereHandler.java,value,@ override public deliver   to   (  )  {  switch  ( ready . value (  )  )   {  case all: return deliver   to . all ;  case broadcaster: return deliver   to . broadcaster ;   }  return null ;   }  
183,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\managed\MeteorServiceInterceptor.java,map annotated service,"protected void   ( boolean re map  string path  atmosphere request request  atmosphere framework .  atmosphere handler wrapper w )  {  synchronized  ( config . handlers (  )  )   {  if  ( config . handlers (  )  . get ( path )   =  =  null )   {  if  (  reflector servlet processor . class . is assignable from ( w . atmosphere handler . get class (  )  )  )   {   reflector servlet processor r =  reflector servlet processor . class . cast ( w . atmosphere handler )  ;   servlet s = r . get servlet (  )  ;   meteor service m = s . get class (  )  . get annotation (  meteor service . class )  ;  if  ( m  !  =  null )   {   string target path = m . path (  )  ;  if  ( target path . index of ( "" { "" )   !  =   - 1 && target path . index of ( "" } "" )   !  =   - 1 )   {  try  {  boolean singleton = s . get class (  )  . get annotation (  singleton . class )   !  =  null ;  if  (  ! singleton )   {  r = config . framework (  )  . new class instance (  reflector servlet processor . class  reflector servlet processor . class )  ;  r . set servlet ( config . framework (  )  . new class instance (  servlet . class s . get class (  )  )  )  ;  r . init ( config )  ;   }  request . local attributes (  )  . put (  named . class . get name (  )  path . substring ( target path . index of ( "" { "" )  )  )  ;   atmosphere resource impl . class . cast ( request . resource (  )  )  . atmosphere handler ( r )  ;  config . framework (  )  . add atmosphere handler ( path r config . get broadcaster factory (  )  . lookup ( w . broadcaster . get class (  )  path true )  w . interceptors )  ;  request . set attribute (  framework config . new   mapping ""true"" )  ;   }  catch  (   throwable e )   {  logger . warn ( "" unable to create  atmosphere handler"" e )  ;   }   }   }   }   }  else if  ( re map )   {  request . set attribute (  framework config . new   mapping ""true"" )  ;   }   }   }  "
184,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\managed\MeteorServiceInterceptor.java,to string,"@ override public  string   (  )  {  return ""@ meteor service  interceptor"" ;   }  "
185,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\managed\ServiceInterceptor.java,configure,@ override public void   (  atmosphere config config )  {  this . config = config ;   }  
186,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\managed\ServiceInterceptor.java,inspect,@ override public  action   (  atmosphere resource r )  {   atmosphere framework .  atmosphere handler wrapper w = null ;  try  {  w =  (  atmosphere framework .  atmosphere handler wrapper ) r . get request (  )  . get attribute (  framework config . atmosphere   handler   wrapper )  ;  if  (  ! w . wildcard mapping (  )  )  
187,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\managed\TypeResolver.java,build type variable map,private static void   (  parameterized type type  map <  type variable <  ?  >   type >  type variable map )  {  if  ( type . get raw type (  )  instanceof  class )   {   type variable <  ?  > [] type variables =  (  (  class <  ?  >  ) type . get raw type (  )  )  . get type parameters (  )  ;   type[] type arguments = type . get actual type arguments (  )  ;  for  ( int i = 0 ;  i  <  type arguments . length ;  i +  +  )   {   type variable <  ?  >  variable = type variables[i] ;   type type argument = type arguments[i] ;  if  ( type argument instanceof  class )   {  type variable map . put ( variable type argument )  ;   }  else if  ( type argument instanceof  generic array type )   {  type variable map . put ( variable type argument )  ;   }  else if  ( type argument instanceof  parameterized type )   {  type variable map . put ( variable type argument )  ;   }  else if  ( type argument instanceof  type variable )   {   type variable <  ?  >  type variable argument =  (  type variable <  ?  >  ) type argument ;   type resolved type = type variable map . get ( type variable argument )  ;  if  ( resolved type  =  =  null )  resolved type = resolve bound ( type variable argument )  ;  type variable map . put ( variable resolved type )  ;   }   }   }   }  
188,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\managed\TypeResolver.java,disable cache,public static void   (  )  {  type variable cache . clear (  )  ;  cache enabled = false ;   }  
189,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\managed\TypeResolver.java,enable cache,public static void   (  )  {  cache enabled = true ;   }  
190,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\managed\TypeResolver.java,get type variable map,private static  map <  type variable <  ?  >   type >    ( final  class <  ?  >  target type )  {   reference <  map <  type variable <  ?  >   type >  >  ref = type variable cache . get ( target type )  ;   map <  type variable <  ?  >   type >  map = ref  !  =  null  ?  ref . get (  )  : null ;  if  ( map  =  =  null )   {  map = new  hash map <  type variable <  ?  >   type >  (  )  ;  build type variable map ( target type . get generic interfaces (  )  map )  ;   type generic type = target type . get generic superclass (  )  ;   class <  ?  >  type = target type . get superclass (  )  ;  while  ( type  !  =  null &&  !  object . class . equals ( type )  )   {  if  ( generic type instanceof  parameterized type )  build type variable map (  (  parameterized type ) generic type map )  ;  build type variable map ( type . get generic interfaces (  )  map )  ;  generic type = type . get generic superclass (  )  ;  type = type . get superclass (  )  ;   }  type = target type ;  while  ( type . is member class (  )  )   {  generic type = type . get generic superclass (  )  ;  if  ( generic type instanceof  parameterized type )  build type variable map (  (  parameterized type ) generic type map )  ;  type = type . get enclosing class (  )  ;   }  if  ( cache enabled )  type variable cache . put ( target type new  weak reference <  map <  type variable <  ?  >   type >  >  ( map )  )  ;   }  return map ;   }  
191,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\managed\TypeResolver.java,resolve argument,"public static  class <  ?  >    (  type generic type  class <  ?  >  target type )  {   class <  ?  > [] arguments = resolve arguments ( generic type target type )  ;  if  ( arguments  =  =  null )  return  unknown . class ;  if  ( arguments . length  !  =  1 )  throw new  illegal argument exception ( "" expected 1 type argument on generic type ""  +  target type . get name (  )   +  "" but found "" +  arguments . length )  ;  return arguments[0] ;   }  "
192,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\managed\TypeResolver.java,resolve arguments,public static  class <  ?  > []   (  type generic type  class <  ?  >  target type )  {   class <  ?  > [] result = null ;  if  ( generic type instanceof  parameterized type )   {   parameterized type param type =  (  parameterized type ) generic type ;   type[] arguments = param type . get actual type arguments (  )  ;  result = new  class[arguments . length] ;  for  ( int i = 0 ;  i  <  arguments . length ;  i +  +  )  result[i] = resolve class ( arguments[i] target type )  ;   }  else if  ( generic type instanceof  type variable )   {  result = new  class[1] ;  result[0] = resolve class ( generic type target type )  ;   }  return result ;   }  
193,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\managed\TypeResolver.java,resolve bound,public static  type   (  type variable <  ?  >  type variable )  {   type[] bounds = type variable . get bounds (  )  ;  if  ( bounds . length  =  =  0 )  return  unknown . class ;   type bound = bounds[0] ;  if  ( bound instanceof  type variable )  bound = resolve bound (  (  type variable <  ?  >  ) bound )  ;  return bound  =  =   object . class  ?   unknown . class : bound ;   }  
194,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\managed\TypeResolver.java,resolve class,public static  class <  ?  >    (  type generic type  class <  ?  >  target type )  {  if  ( generic type instanceof  class )   {  return  (  class <  ?  >  ) generic type ;   }  else if  ( generic type instanceof  parameterized type )   {  return resolve class (  (  (  parameterized type ) generic type )  . get raw type (  )  target type )  ;   }  else if  ( generic type instanceof  generic array type )   {   generic array type array type =  (  generic array type ) generic type ;   class <  ?  >  compoment = resolve class ( array type . get generic component type (  )  target type )  ;  return  array . new instance ( compoment 0 )  . get class (  )  ;   }  else if  ( generic type instanceof  type variable )   {   type variable <  ?  >  variable =  (  type variable <  ?  >  ) generic type ;  generic type = get type variable map ( target type )  . get ( variable )  ;  generic type = generic type  =  =  null  ?  resolve bound ( variable )  : resolve class ( generic type target type )  ;   }  return generic type instanceof  class  ?   (  class <  ?  >  ) generic type :  unknown . class ;   }  
195,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\managed\TypeResolver.java,resolve generic type,public static  type   (  type initial type  class <  ?  >  target type )  {   class <  ?  >  raw type ;  if  ( initial type instanceof  parameterized type )  raw type =  (  class <  ?  >  )  (  (  parameterized type ) initial type )  . get raw type (  )  ;  else raw type =  (  class <  ?  >  ) initial type ;  if  ( target type . equals ( raw type )  )  return initial type ;   type result ;  if  ( target type . is interface (  )  )   {  for  (   type super interface : raw type . get generic interfaces (  )  )  if  ( super interface  !  =  null &&  ! super interface . equals (  object . class )  )  if  (  ( result = resolve generic type ( super interface target type )  )   !  =  null )  return result ;   }   type super type = raw type . get generic superclass (  )  ;  if  ( super type  !  =  null &&  ! super type . equals (  object . class )  )  if  (  ( result = resolve generic type ( super type target type )  )   !  =  null )  return result ;  return null ;   }  
196,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\container\JSR356AsyncSupport.java, atmosphere configurator,public   (  atmosphere framework framework )  {  this . framework = framework ;   }  
197,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\container\JSR356AsyncSupport.java,jsr async support,"public   (  atmosphere config config  servlet context ctx )  {  super ( config )  ;   server container container =  (  server container ) ctx . get attribute (  server container . class . get name (  )  )  ;  if  ( container  =  =  null )   {  if  ( ctx . get server info (  )  . contains ( "" web logic"" )  )   {  logger . error ( "" {  }  must use jdk 1 . 8 +  with  web socket"" ctx . get server info (  )  )  ;   }  throw new  illegal state exception ( "" unable to configure jsr356 at that stage .   server container is null"" )  ;   }  int path length = 5 ;   string s = config . get init parameter (  application config . jsr356   path   mapping   length )  ;  if  ( s  !  =  null )   {  path length =  integer . value of ( s )  ;   }  logger . trace ( ""jsr356  path mapping  size  {  } "" path length )  ;   string servlet path = config . get init parameter (  application config . jsr356   mapping   path )  ;  if  ( servlet path  =  =  null )   {  servlet path = io utils . guest servlet path ( config )  ;  if  ( servlet path . equals ( "" / "" )  || servlet path . equals ( "" / *"" )  )   {  servlet path = """" ;   }   }  logger . info ( ""jsr 356  mapping path  {  } "" servlet path )  ;  configurator = new  atmosphere configurator ( config . framework (  )  )  ;   string builder b = new  string builder ( servlet path )  ;   list <  string >  endpoint paths = new  array list <  >  (  )  ;  endpoint paths . add ( servlet path )  ;  for  ( int i = 0 ;  i  <  path length ;  i +  +  )   {  b . append ( "" / "" )  ;  endpoint paths . add ( b . to string (  )  )  ;  b . append ( "" { path""  +  i  +  "" } "" )  ;  endpoint paths . add ( b . to string (  )  )  ;   }  for  (   string endpoint path : endpoint paths )   {  if  ( """" . equals ( endpoint path )  )   {  continue ;   }  try  {   server endpoint config endpoint config =  server endpoint config .  builder . create ( jsr356 endpoint . class endpoint path )  . configurator ( configurator )  . build (  )  ;  container . add endpoint ( endpoint config )  ;   }  catch  (   deployment exception e )   {  logger . warn ( "" duplicate  servlet  mapping  path  {  }  .   use  {  }  init - param to prevent this message"" servlet path  application config . jsr356   mapping   path )  ;  logger . trace ( """" e )  ;  servlet path = io utils . guest servlet path ( config )  ;  logger . warn ( "" duplicate guess  {  } "" servlet path e )  ;   }   }   }  "
198,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\container\JSR356AsyncSupport.java,get container name,"@ override public  string   (  )  {  return super . get container name (  )   +  "" and jsr356 /  web socket api"" ;   }  "
199,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\container\JSR356AsyncSupport.java,get endpoint instance,public  < t > t   ( java . lang .  class < t >  endpoint class )  throws java . lang .  instantiation exception  {  if  ( jsr356 endpoint . class . is assignable from ( endpoint class )  )   {  jsr356 endpoint e = new jsr356 endpoint ( framework  web socket processor factory . get default (  )  . get web socket processor ( framework )  )  ;  if  ( h request . get (  )   !  =  null )   {  e . handshake request ( h request . get (  )  )  ;  h request . set ( null )  ;   }  else  {  end point . set ( e )  ;   }  return  ( t ) e ;   }  else  {  return super . get endpoint instance ( endpoint class )  ;   }   }  
200,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\container\JSR356AsyncSupport.java,modify handshake,public void   (  server endpoint config sec  handshake request request  handshake response response )  {  if  ( end point . get (  )   =  =  null )   {  h request . set ( request )  ;   }  else  {  end point . get (  )  . handshake request ( request )  ;  end point . set ( null )  ;   }   }  
201,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\container\JSR356AsyncSupport.java,support web socket,public boolean   (  )  {  return true ;   }  
202,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\container\NettyCometSupport.java, netty comet support,public   (  atmosphere config config )  {  super ( config )  ;   }  
203,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\container\NettyCometSupport.java,action,@ override public void   (  atmosphere resource impl r )  {  super . action ( r )  ;  if  ( r . is resumed (  )  )   {  complete ( r )  ;   }   }  
204,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\container\NettyCometSupport.java,complete,"@ override public  async support   (  atmosphere resource impl r )  {  try  {   atmosphere response response = r . get response ( false )  ;   asyncio writer a = response . get asyncio writer (  )  ;  if  ( a  !  =  null )   {  a . close ( response )  ;   }   }  catch  (  io exception e )   {  logger . trace ( """" e )  ;   }  return t"
205,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\container\NettyCometSupport.java,service,@ override public  action   (  atmosphere request req  atmosphere response res )  throws io exception   servlet exception  {   action action ;  action = suspended ( req res )  ;  if  ( action . type (  )   =  =   action . type . suspend )   {  req . set attribute ( suspend action )  ;   }  else if  ( action . type (  ) 
206,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\container\NettyCometSupport.java,support web socket,@ override public boolean   (  )  {  return true ;   }  
207,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\container\BlockingIOCometSupport.java, blockingio comet support,public   (  atmosphere config config )  {  super ( config )  ;   }  
208,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\container\BlockingIOCometSupport.java,action,"@ override public void   (  atmosphere resource impl r )  {  try  {  super . action ( r )  ;  if  ( r . action (  )  . type (  )   =  =   action . type . resume )   {  complete ( r )  ;   }   }  catch  (   exception ex )   {  logger . error ( """" ex )  ;   }   }  "
209,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\container\BlockingIOCometSupport.java,cancelled,@ override public  action   (  atmosphere request req  atmosphere response res )  throws io exception   servlet exception  {   action a = super . cancelled ( req res )  ;  if  ( req . get attribute ( latch )   !  =  null )   {   count down latch latch =  (  count down latch ) req . get attribute ( latch )  ;  latch . co
210,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\container\BlockingIOCometSupport.java,complete,@ override public  async support   (  atmosphere resource impl r )  {   atmosphere request req = r . get request ( false )  ;   count down latch latch = null ;  if  ( req . get attribute ( latch )   !  =  null )   {  latch =  (  count down latch ) req . get attribute ( latch )  ;   }  if  ( latch  !  =  null )   {  latch . count down (  ) 
211,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\container\BlockingIOCometSupport.java,on resume,@ override public void   (  atmosphere resource event event )  {  latch . count down (  )  ;   }  
212,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\container\BlockingIOCometSupport.java,service,@ override public  action   (  atmosphere request req  atmosphere response res )  throws io exception   servlet exception  {   action action = null ;  action = suspended ( req res )  ;  if  ( action . type (  )   =  =   action . type . suspend )   {  suspend ( action req res )  ;   }  else if  ( action . type (  )   =  =  
213,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\container\BlockingIOCometSupport.java,suspend,"protected void   (  action action  atmosphere request req  atmosphere response res )  throws io exception   servlet exception  {  final  count down latch latch = new  count down latch ( 1 )  ;  req . set attribute ( latch latch )  ;  boolean ok = true ;   atmosphere resource resource = req . resource (  )  ;  if  ( resource  !  =  null )   {  try  {  resource . add event listener ( new  atmosphere resource event listener adapter .  on resume (  )  {  @ override public void on resume (   atmosphere resource event event )  {  latch . count down (  )  ;   }   }   )  ;  if  ( action . timeout (  )   !  =   - 1 )   {  ok = latch . await ( action . timeout (  )   time unit . milliseconds )  ;   }  else  {  latch . await (  )  ;   }   }  catch  (   interrupted exception ex )   {  logger . trace ( """" ex )  ;   }  finally  {  if  (  ! ok )   {  timedout ( req res )  ;   }  else  {   atmosphere resource impl . class . cast ( resource )  . cancel (  )  ;   }   }   }   }  "
214,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\container\JSR356Endpoint.java,jsr endpoint,"public   (  atmosphere framework framework  web socket processor web socket processor )  {  this . framework = framework ;  this . web socket processor = web socket processor ;  if  ( framework . is use native implementation (  )  )   {  throw new  illegal state exception ( "" you cannot use  web socket native implementation with jsr356 .   please set ""  +   application config . property   native   cometsupport  +  "" to false"" )  ;   }   string s = framework . get atmosphere config (  )  . get init parameter (  application config . websocket   idletime )  ;  if  ( s  !  =  null )   {  web socket write timeout =  integer . value of ( s )  ;   }  else  {  web socket write timeout =  - 1 ;   }  s = framework . get atmosphere config (  )  . get init parameter (  application config . websocket   maxbinarysize )  ;  if  ( s  !  =  null )   {  max binary buffer size =  integer . value of ( s )  ;   }  else  {  max binary buffer size =  - 1 ;   }  s = framework . get atmosphere config (  )  . get init parameter (  application config . websocket   maxtextsize )  ;  if  ( s  !  =  null )   {  max text buffer size =  integer . value of ( s )  ;   }  else  {  max text buffer size =  - 1 ;   }   }  "
215,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\container\JSR356Endpoint.java,call,@ override public  inet socket address   (  )  throws  exception  {  return  (  inet socket address ) endpoint config . get user properties (  )  . get ( javax   websocket   endpoint   local   address )  ;   }  
216,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\container\JSR356Endpoint.java,handshake request,public jsr356 endpoint   (  handshake request handshake request )  {  this . handshake request = handshake request ;  return this ;   }  
217,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\container\JSR356Endpoint.java,on close,"@ override public void   ( javax . websocket .  session session javax . websocket .  close reason close code )  {  logger . trace ( "" {  }  closed  {  } "" session close code )  ;  if  ( request  !  =  null )   {  request . destroy (  )  ;  web socket processor . close ( web socket close code . get close code (  )  . get code (  ) "
218,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\container\JSR356Endpoint.java,on error,"@ override public void   ( javax . websocket .  session session java . lang .  throwable t )  {  try  {  logger . debug ( "" problem in web socket session"" t )  ;  web socket processor . notify listener ( web socket new  web socket event listener .  web socket event <  throwable >  ( t  web socket event listene"
219,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\container\JSR356Endpoint.java,on message,@ override public void   (  byte buffer bb )  {  byte[] b = bb . has array (  )   ?  bb . array (  )  : new byte[bb . limit (  ) ] ;  bb . get ( b )  ;  web socket processor . invoke web socket protocol ( web socket b 0 b . length )  ;   }  
220,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\container\JSR356Endpoint.java,on open,"@ override public void   (  session session final  endpoint config endpoint config )  {  if  ( framework . is destroyed (  )  )  return ;  if  (  ! session . is open (  )  )   {  logger . trace ( "" session  closed  {  } "" session )  ;  return ;   }  if  ( max binary buffer size  !  =   - 1 )  session . set max binary message buff"
221,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\container\Servlet30CometSupport.java, comet listener,public   (  asynchronous processor processor  string uuid )  {  this . p = processor ;  this . uuid = uuid ;   }  
222,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\container\Servlet30CometSupport.java, servlet comet support,public   (  atmosphere config config )  {  super ( config )  ;   }  
223,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\container\Servlet30CometSupport.java,action,@ override public void   (  atmosphere resource impl r )  {  super . action ( r )  ;  if  ( r . action (  )  . type (  )   =  =   action . type . resume && r . is in scope (  )  )   {  end async context ( r . get request ( false )  )  ;   }   }  
224,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\container\Servlet30CometSupport.java,cancelled,@ override public  action   (  atmosphere request req  atmosphere response res )  throws io exception   servlet exception  {   action action = super . cancelled ( req res )  ;  if  ( req . get attribute ( max   inactive )   !  =  null &&  long . class . cast ( req . get attribute ( max   inactive )  )   =  =   - 1 )   {  e
225,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\container\Servlet30CometSupport.java,complete,@ override public  async support   (  atmosphere resource impl r )  {  end async context ( r . get request ( false )  )  ;  return null ;   }  
226,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\container\Servlet30CometSupport.java,end async context,"public void   (  atmosphere request request )  {  final  object attribute = request . get attribute (  framework config . async   context )  ;  if  ( attribute instanceof  async context )   {   async context async context =  (  async context ) attribute ;  if  ( async context  !  =  null )   {  try  {  async context . complete (  )  ;   }  catch  (   illegal state exception ex )   {  try  {  logger . trace ( "" already resumed ! "" ex )  ;   }  catch  (   exception ex2 )   {   }   ;   }  finally  {  request . remove attribute (  framework config . async   context )  ;   }   }   }   }  "
227,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\container\Servlet30CometSupport.java,get container name,"@ override public  string   (  )  {  return super . get container name (  )   +  "" using javax . servlet / 3 . 0"" ;   }  "
228,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\container\Servlet30CometSupport.java,on complete,"@ override public void   (  async event event )  throws io exception  {  logger . trace ( "" resumed  ( completed ) : event:  {  } "" uuid )  ;   }  "
229,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\container\Servlet30CometSupport.java,on error,"@ override public void   (  async event event )  {  logger . trace ( ""on error (  ) : event:  {  } "" event . get async context (  )  . get response (  )  )  ;  if  ( p  =  =  null )   {  logger . error ( "" invalid state  -   comet listener"" )  ;  return ;   }  try  {  p . cancelled (  (  atmosphere request ) event . get async context (  )  . g"
230,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\container\Servlet30CometSupport.java,on start async,"@ override public void   (  async event event )  {  logger . trace ( ""on start async (  ) : event:  {  } "" event . get async context (  )  . get response (  )  )  ;   }  "
231,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\container\Servlet30CometSupport.java,on timeout,"@ override public void   (  async event event )  throws io exception  {  logger . trace ( ""on timeout (  ) : event:  {  } "" event . get async context (  )  . get request (  )  )  ;  if  ( p  =  =  null )   {  logger . error ( "" invalid state  -   comet listener"" )  ;  return ;   }  final  async context async context = event . get"
232,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\container\Servlet30CometSupport.java,service,@ override public  action   (  atmosphere request request  atmosphere response response )  throws io exception   servlet exception  {   action action = suspended ( request response )  ;  if  ( action . type (  )   =  =   action . type . suspend )   {  suspend ( action request response )  ;   }  else if  ( act
233,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\container\Servlet30CometSupport.java,suspend,private void   (  action action  atmosphere request req  atmosphere response res )  throws io exception   servlet exception  {  if  (  ! req . is async started (  )  &&  !  utils . web socket enabled ( req )  )   {   async context async context = req . start async ( req res )  ;  async context . add listener ( new  comet listener ( this res . uuid (  )  )  )  ;  if  ( action . timeout (  )   !  =   - 1 )   {  async context . set timeout ( action . timeout (  )  )  ;   }  else  {  async context . set timeout (  integer . max   value )  ;   }  req . set attribute (  framework config . async   context async context )  ;   }   }  
234,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\handler\AtmosphereHandlerAdapter.java,on request,"@ override public void   (  atmosphere resource resource )  throws io exception  {  logger . trace ( ""on request  {  } "" resource . uuid (  )  )  ;   }  "
235,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\handler\AtmosphereHandlerAdapter.java,on state change,"@ override public void   (  atmosphere resource event event )  throws io exception  {  logger . trace ( ""on request  {  } "" event . get resource (  )  . uuid (  )  )  ;   }  "
236,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\container\version\JSR356WebSocket.java,jsr web socket,public   (  session session  atmosphere config config )  {  super ( config )  ;  this . session = session ;  this . write timeout = config . get init parameter (  application config . websocket   write   timeout 60 * 1000 )  ;  session . get async remote (  )  . set send timeout ( write timeout )  ;   }  
237,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\container\version\JSR356WebSocket.java, write result,private   (  atmosphere resource r  object message )  {  this . r = r ;  this . message = message ;   }  
238,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\container\version\JSR356WebSocket.java,close,"@ override public void   (  )  {  if  (  ! session . is open (  )  || closed . get and set ( true )  )  return ;  logger . trace ( "" web socket . close (  )  for  atmosphere resource  {  } "" resource (  )   !  =  null  ?  resource (  )  . uuid (  )  : ""null"" )  ;  try  {  session . close (  )  ;   }  catch  (   exception e )   {  logger . trace ( """
239,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\container\version\JSR356WebSocket.java,handle error,"private void   (  throwable e boolean acquired )  throws io exception  {  if  ( acquired )   {  semaphore . release (  )  ;   }  if  ( e instanceof  null pointer exception )   {  patch glass fish (  (  null pointer exception ) e )  ;  return ;   }  if  ( e instanceof  runtime exception )   {  throw  (  runtime exception ) e ;   }  throw new  runtime exception ( "" unexpected error while writing to socket"" e )  ;   }  "
240,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\container\version\JSR356WebSocket.java,is open,@ override public boolean   (  )  {  return session . is open (  )  &&  ! closed . get (  )  ;   }  
241,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\container\version\JSR356WebSocket.java,on result,"@ override public void   (  send result result )  {  semaphore . release (  )  ;  if  (  ! result . isok (  )  || result . get exception (  )   !  =  null )   {  logger . trace ( "" web socket  {  }  failed to write  {  } "" r message )  ;  if  ( r  !  =  null )   {   broadcaster b = r . get broadcaster (  )  ;  b . get broadcaster config (  )  . "
242,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\container\version\JSR356WebSocket.java,patch glass fish,"void   (  null pointer exception e )  {  logger . trace ( """" e )  ;   web socket processor factory . get default (  )  . get web socket processor ( config (  )  . framework (  )  )  . close ( this 1002 )  ;   }  "
243,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\container\version\JSR356WebSocket.java,write,"@ override public  web socket   ( byte[] data int offset int length )  throws io exception  {  if  (  ! is open (  )  )   {  throw new io exception ( "" socket closed  {  } "" )  ;   }  boolean acquired = false ;  try  {  acquired = semaphore . try acquire ( write timeout  time unit . milliseconds )  ;  if  ( acquire"
244,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\handler\AbstractReflectorAtmosphereHandler.java,init,@ override public void   (  atmosphere config config )  throws  servlet exception  {  two steps write = config . get init parameter (  application config . two   steps   write false )  ;   }  
245,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\handler\AbstractReflectorAtmosphereHandler.java,on state change,@ override public void   (  atmosphere resource event event )  throws io exception  {   object message = event . get message (  )  ;   atmosphere resource resource = event . get resource (  )  ;   atmosphere response r = resource . get response (  )  ;   atmosphere request request = resource . get request (  )  ;  b
246,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\handler\AbstractReflectorAtmosphereHandler.java,post state change,"protected final void   (  atmosphere resource event event )  {  if  ( event . is cancelled (  )  || event . is resuming (  )  )  return ;   atmosphere resource impl r =  atmosphere resource impl . class . cast ( event . get resource (  )  )  ;  if  ( r  =  =  null )   {  logger . trace ( "" event  {  }  returned a null  atmosphere resource"" event )  ;  return ;   }   boolean resume on broadcast = r . resume on broadcast (  )  ;  if  (  ! resume on broadcast )   {   object o = r . get request ( false )  . get attribute (  application config . resume   on   broadcast )  ;  if  ( o  !  =  null &&  boolean . class . is assignable from ( o . get class (  )  )  )   {  resume on broadcast =  boolean . class . cast ( o )  ;   }   }  if  ( resume on broadcast  !  =  null && resume on broadcast )   {  r . resume (  )  ;   }   }  "
247,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\handler\AbstractReflectorAtmosphereHandler.java,two step write,private void   (  servlet output stream o byte[] data )  throws io exception  {  o . write ( data 0 1 )  ;  o . flush (  )  ;  o . write ( data 1 data . length  -  1 )  ;  o . flush (  )  ;   }  
248,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\handler\AbstractReflectorAtmosphereHandler.java,use two step write,protected boolean   (  atmosphere resource event event )  {  return two steps write && event . get resource (  )  . transport (  )   =  =   atmosphere resource . transport . long   polling ;   }  
249,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\handler\AbstractReflectorAtmosphereHandler.java,write,protected void   (  atmosphere resource event event  servlet output stream o byte[] data )  throws io exception  {  if  ( use two step write ( event )  && data . length  >  1 )   {  two step write ( o data )  ;   }  else  {  o . write ( data )  ;  o . flush (  )  ;   }   }  
250,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\handler\ReflectorServletProcessor.java, reflector servlet processor,public   (  servlet servlet )  {  this . servlet = servlet ;   }  
251,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\handler\ReflectorServletProcessor.java,add filter,public void   (  filter filter )  {  filters . add ( filter )  ;   }  
252,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\handler\ReflectorServletProcessor.java,add filter class name,public void   (  string filter class  string filter name )  {  if  ( filter class  =  =  null || filter name  =  =  null )  return ;  filters class and names . put ( filter class filter name )  ;   }  
253,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\handler\ReflectorServletProcessor.java,destroy,@ override public void   (  )  {  filter chain . destroy (  )  ;   }  
254,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\handler\ReflectorServletProcessor.java,get init parameter,@ override public  string   (  string name )  {  return get servlet config (  )  . get init parameter ( name )  ;   }  
255,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\handler\ReflectorServletProcessor.java,get init parameter names,@ override public  enumeration <  string >    (  )  {  return get servlet config (  )  . get init parameter names (  )  ;   }  
256,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\handler\ReflectorServletProcessor.java,get servlet,public  servlet   (  )  {  return servlet ;   }  
257,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\handler\ReflectorServletProcessor.java,get servlet class,@ deprecated public  string   (  )  {  return servlet class name ;   }  
258,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\handler\ReflectorServletProcessor.java,get servlet class name,public  string   (  )  {  return servlet class name ;   }  
259,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\handler\ReflectorServletProcessor.java,get servlet config,@ override public  servlet config   (  )  {  return filter chain . get servlet config (  )  ;   }  
260,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\handler\ReflectorServletProcessor.java,get servlet context,@ override public  servlet context   (  )  {  return get servlet config (  )  . get servlet context (  )  ;   }  
261,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\handler\ReflectorServletProcessor.java,get servlet info,@ override public  string   (  )  {  return filter chain . get servlet (  )  . get servlet info (  )  ;   }  
262,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\handler\ReflectorServletProcessor.java,get servlet name,@ override public  string   (  )  {  return filter chain . get servlet config (  )  . get servlet name (  )  ;   }  
263,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\handler\ReflectorServletProcessor.java,load filter,private  filter   ( url class loader urlc  string f class )  throws  exception  {   filter f ;  try  {  f = config . framework (  )  . new class instance (  filter . class  (  class <  filter >  ) urlc . load class ( f class )  )  ;   }  catch  (   null pointer exception ex )   {  f = config . framework (  )  . new class instance (  filter . class  (  class <  filter >  ) io utils . load class ( get class (  )  f class )  )  ;   }  return f ;   }  
264,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\handler\ReflectorServletProcessor.java,load filter classes,"private void   (  servlet config sc url class loader urlc )  throws  exception  {  for  (   map .  entry <  string  string >  f class and name : filters class and names . entry set (  )  )   {   string f class = f class and name . get key (  )  ;   string filter name = f class and name . get value (  )  ;   filter f = load filter ( urlc f class )  ;  if  ( filter name  =  =  null )   {  if  ( sc . get init parameter ( application   name )   !  =  null )   {  filter name = sc . get init parameter ( application   name )  ;   }  else  {  filter name = f . get class (  )  . get simple name (  )  ;   }   }   filter config impl fc = new  filter config impl ( sc )  ;  fc . set filter ( f )  ;  fc . set filter name ( filter name )  ;  filter chain . add filter ( fc )  ;  logger . info ( "" installing  filter  {  } "" filter name )  ;   }   }  "
265,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\handler\ReflectorServletProcessor.java,load filter instances,"private void   (  servlet config sc )  {  for  (   filter f : filters )   {   filter config impl fc = new  filter config impl ( sc )  ;  fc . set filter ( f )  ;  fc . set filter name ( f . get class (  )  . get simple name (  )  )  ;  filter chain . add filter ( fc )  ;  logger . info ( "" installing  filter  {  } "" f . get class (  )  . get simple name (  )  )  ;   }   }  "
266,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\handler\ReflectorServletProcessor.java,load servlet,"private void   (  servlet config sc url class loader urlc )  throws  exception  {  if  ( servlet class name  !  =  null && servlet  =  =  null )   {  try  {  servlet = config . framework (  )  . new class instance (  servlet . class  (  class <  servlet >  ) urlc . load class ( servlet class name )  )  ;   }  catch  (   null pointer exception ex )   {  servlet = config . framework (  )  . new class instance (  servlet . class  (  class <  servlet >  ) io utils . load class ( get class (  )  servlet class name )  )  ;   }   }  if  ( servlet  !  =  null )   {  logger . info ( "" installing  servlet  {  } "" servlet class name  =  =  null  ?  servlet . get class (  )  . get name (  )  : servlet class name )  ;   }  else  {  logger . info ( "" no servlet installed .   neither servlet nor servlet class name is set"" )  ;   }   }  "
267,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\handler\ReflectorServletProcessor.java,load web application,"void   (  servlet config sc )  throws  exception  {  url url = sc . get servlet context (  )  . get resource ( "" / web - inf / lib / "" )  ;  url class loader urlc = new url class loader ( new url[] { url }   thread . current thread (  )  . get context class loader (  )  )  ;  load servlet ( sc urlc )  ;  if  (  ! filters . is empty (  )  )   {  load filter instances ( sc )  ;   }  else  {  load filter classes ( sc urlc )  ;   }   }  "
268,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\handler\ReflectorServletProcessor.java,log,"@ override public void   (  string message  throwable t )  {  get servlet context (  )  . log ( get servlet name (  )   +  "": ""  +  message t )  ;   }  "
269,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\handler\ReflectorServletProcessor.java,on request,"public void   (  atmosphere resource r )  throws io exception  {  final boolean completion aware =  boolean . parse boolean ( r . get atmosphere config (  )  . get init parameter (  application config . response   completion   aware )  )  ;  try  {  if  ( completion aware )   {  r . get request (  )  . set attribute (  application config . response   completion   aware  boolean . true )  ;  if  (  boolean . parse boolean ( r . get atmosphere config (  )  . get init parameter (  application config . response   completion   reset )  )  )   {  r . get request (  )  . set attribute (  application config . response   completion   reset  boolean . true )  ;   }   }  wrapper . service ( r . get request (  )  r . get response (  )  )  ;   }  catch  (   throwable ex )   {  logger . error ( ""on request (  ) "" ex )  ;  throw new  runtime exception ( ex )  ;   }  finally  {  if  ( completion aware && r . get response (  )  instanceof  completion aware &&  ! r . get request (  )  . is async started (  )  )   {   (  (  completion aware ) r . get response (  )  )  . on complete (  )  ;   }   }   }  "
270,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\handler\ReflectorServletProcessor.java,service,@ override public void   (  servlet request req  servlet response res )  throws  servlet exception  io exception  {  filter chain . invoke filter chain ( req res )  ;   }  
271,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\handler\ReflectorServletProcessor.java,set filter class name,public void   (  string filter class )  {  if  ( filter class  =  =  null )  return ;  filters class and names . put ( filter class filter class )  ;   }  
272,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\handler\ReflectorServletProcessor.java,set servlet,public void   (  servlet servlet )  {  this . servlet = servlet ;   }  
273,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\handler\ReflectorServletProcessor.java,set servlet class,@ deprecated public void   (  string servlet class )  {  this . servlet class name = servlet class ;   }  
274,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\handler\ReflectorServletProcessor.java,set servlet class name,public void   (  string servlet class )  {  this . servlet class name = servlet class ;   }  
275,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\handler\ReflectorServletProcessor.java,to string,@ override public  string   (  )  {  return get class (  )  . get simple name (  )  ;   }  
276,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\AtmosphereConfigInjectable.java,injectable,@ override public  atmosphere config   (  atmosphere config config )  {  return config ;   }  
277,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\AtmosphereConfigInjectable.java,supported type,@ override public boolean   (  type t )  {  return  ( t instanceof  class )  &&  atmosphere config . class . is assignable from (  (  class ) t )  ;   }  
278,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\AtmosphereFrameworkInjectable.java,injectable,@ override public  atmosphere framework   (  atmosphere config config )  {  return config . framework (  )  ;   }  
279,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\AtmosphereFrameworkInjectable.java,supported type,@ override public boolean   (  type t )  {  return  ( t instanceof  class )  &&  atmosphere framework . class . is assignable from (  (  class ) t )  ;   }  
280,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\AtmosphereRequestIntrospector.java,injectable,@ override public  atmosphere request   (  atmosphere resource r )  {  final  atmosphere request request = r . get request (  )  ;  return  (  atmosphere request )  proxy . new proxy instance ( this . get class (  )  . get class loader (  )  new  class[] {  atmosphere request . class }  new  thread local invoker (  )  {   {  
281,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\AtmosphereRequestIntrospector.java,invoke,@ override public  object   (  object proxy  method method  object[] args )  throws  throwable  {  return method . invoke ( request args )  ;   }  
282,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\AtmosphereRequestIntrospector.java,supported type,@ override public boolean   (  type t )  {  return  ( t instanceof  class )  &&  atmosphere request . class . is assignable from (  (  class ) t )  ;   }  
283,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\AtmosphereProducers.java,configure,public void   (  atmosphere config config )  {  this . config = config ;   }  
284,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\AtmosphereProducers.java,get atmosphere config,@ produces public  atmosphere config   (  )  {  return config ;   }  
285,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\AtmosphereProducers.java,get atmosphere framework,@ produces public  atmosphere framework   (  )  {  return config . framework (  )  ;   }  
286,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\AtmosphereProducers.java,get atmosphere resource factory,@ produces public  atmosphere resource factory   (  )  {  return config . resources factory (  )  ;   }  
287,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\AtmosphereProducers.java,get atmosphere resource session factory,@ produces public  atmosphere resource session factory   (  )  {  return config . session factory (  )  ;   }  
288,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\AtmosphereProducers.java,get broadcaster factory,@ produces public  broadcaster factory   (  )  {  return config . get broadcaster factory (  )  ;   }  
289,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\AtmosphereProducers.java,get meta broadcaster,@ produces public  meta broadcaster   (  )  {  return config . meta broadcaster (  )  ;   }  
290,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\AtmosphereProducers.java,get web socket factory,@ produces public  web socket factory   (  )  {  return config . websocket factory (  )  ;   }  
291,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\AtmosphereResourceFactoryInjectable.java,injectable,@ override public  atmosphere resource factory   (  atmosphere config config )  {  return config . resources factory (  )  ;   }  
292,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\AtmosphereResourceFactoryInjectable.java,supported type,@ override public boolean   (  type t )  {  return  ( t instanceof  class )  &&  atmosphere resource factory . class . is assignable from (  (  class ) t )  ;   }  
293,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\AtmosphereResourceEventIntrospector.java,injectable,@ override public  atmosphere resource event   (  atmosphere resource r )  {  final  atmosphere resource event e = r . get atmosphere resource event (  )  ;  return  (  atmosphere resource event )  proxy . new proxy instance ( this . get class (  )  . get class loader (  )  new  class[] {  atmosphere resource event . c
294,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\AtmosphereResourceEventIntrospector.java,invoke,@ override public  object   (  object proxy  method method  object[] args )  throws  throwable  {  return method . invoke ( e args )  ;   }  
295,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\AtmosphereResourceEventIntrospector.java,supported type,@ override public boolean   (  type t )  {  return  ( t instanceof  class )  &&  atmosphere resource event . class . is assignable from (  (  class ) t )  ;   }  
296,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\AtmosphereResourceSessionFactoryInjectable.java,injectable,@ override public  atmosphere resource session factory   (  atmosphere config config )  {  return config . session factory (  )  ;   }  
297,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\AtmosphereResourceSessionFactoryInjectable.java,supported type,@ override public boolean   (  type t )  {  return  ( t instanceof  class )  &&  atmosphere resource session factory . class . is assignable from (  (  class ) t )  ;   }  
298,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\AtmosphereResourceIntrospector.java,injectable,@ override public  atmosphere resource   ( final  atmosphere resource r )  {  return  (  atmosphere resource )  proxy . new proxy instance ( this . get class (  )  . get class loader (  )  new  class[] {  atmosphere resource . class }  new  thread local invoker (  )  {   {  set ( r )  ;   }  @ override public  object invok
299,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\AtmosphereResourceIntrospector.java,invoke,@ override public  object   (  object proxy  method method  object[] args )  throws  throwable  {  return method . invoke ( r args )  ;   }  
300,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\AtmosphereResourceIntrospector.java,supported type,@ override public boolean   (  type t )  {  return  ( t instanceof  class )  &&  atmosphere resource . class . is assignable from (  (  class ) t )  ;   }  
301,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\AtmosphereResponseIntrospector.java,injectable,@ override public  atmosphere response   (  atmosphere resource r )  {  final  atmosphere response response = r . get response (  )  ;  return  (  atmosphere response )  proxy . new proxy instance ( this . get class (  )  . get class loader (  )  new  class[] {  atmosphere response . class }  new  thread local invoker
302,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\AtmosphereResponseIntrospector.java,invoke,@ override public  object   (  object proxy  method method  object[] args )  throws  throwable  {  return method . invoke ( response args )  ;   }  
303,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\AtmosphereResponseIntrospector.java,supported type,@ override public boolean   (  type t )  {  return  ( t instanceof  class )  &&  atmosphere response . class . is assignable from (  (  class ) t )  ;   }  
304,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\BroadcasterFactoryInjectable.java,injectable,@ override public  broadcaster factory   (  atmosphere config config )  {  return config . get broadcaster factory (  )  ;   }  
305,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\BroadcasterFactoryInjectable.java,supported type,@ override public boolean   (  type t )  {  return  ( t instanceof  class )  &&  broadcaster factory . class . is assignable from (  (  class ) t )  ;   }  
306,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\BroadcasterIntrospector.java,injectable,"@ override public  broadcaster   (  atmosphere resource r )  {   string named = name local . get (  )  ;  if  ( named  =  =  null )   {  named =  broadcaster . root   master ;   }   string s =  (  string ) r . get request (  )  . get attribute (  named . class . get name (  )  )  ;  int indx = named . index of ( "" { "" )  ;  if  ( s  !  =  null && in"
307,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\BroadcasterIntrospector.java,introspect field,@ override public void   (  class clazz  field f )  {  if  ( f . is annotation present (  named . class )  )   {   string name = f . get annotation (  named . class )  . value (  )  ;  if  ( name . is empty (  )  )   {  name = f . get name (  )  ;   }  name local . set ( name )  ;   }   }  
308,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\BroadcasterIntrospector.java,invoke,@ override public  object   (  object proxy  method method  object[] args )  throws  throwable  {  return method . invoke ( broadcaster args )  ;   }  
309,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\BroadcasterIntrospector.java,supported type,@ override public boolean   (  type t )  {  return  ( t instanceof  class )  &&  broadcaster . class . is assignable from (  (  class ) t )  ;   }  
310,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\InjectableObjectFactory.java, injectable object factory,public   (  )  {  injectable service loader =  service loader . load (  injectable . class )  ;   }  
311,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\InjectableObjectFactory.java,allow injection of,public  atmosphere object factory   (  injectable <  ?  >  injectable boolean first )  {  if  ( first )   {  injectables . add first ( injectable )  ;   }  else  {  injectables . add ( injectable )  ;   }  return this ;   }  
312,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\InjectableObjectFactory.java,apply methods,public  < u > void   ( u instance  class < u >  default type )  throws  illegal access exception  {  if  (  ! push back injection . contains ( instance )  )   {   set <  method >  methods =  ( get inherited private method ( default type )  )  ;  inject methods ( methods instance )  ;   }   }  
313,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\InjectableObjectFactory.java,configure,"@ override public void   (  atmosphere config config )  {  this . config = config ;  this . max try = config . get init parameter (  application config . injection   try 5 )  ;   string s = config . get init parameter (  application config . injection   listeners """" )  ;  if  ( s  !  =  null &&  ! s . is empty (  )  )   {   stri"
314,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\InjectableObjectFactory.java,field injection exception,"protected  < t u extends t > void   (  field field u instance  class < t >  clazz  exception ex )  {  for  (   injection listener i : listeners )   {  try  {  i . field injection exception ( field instance clazz ex )  ;   }  catch  (   exception ex2 )   {  logger . error ( """" ex2 )  ;   }   }   }  "
315,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\InjectableObjectFactory.java,get injectable,public  < u > u   (  class < u >  u )  {  for  (   injectable c : injectables )   {  if  ( c . supported type ( u )  )   {  return  ( u ) c . injectable ( config )  ;   }   }  return null ;   }  
316,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\InjectableObjectFactory.java,inject,public  < t > t   ( t instance )  throws  instantiation exception   illegal access exception  {  inject injectable ( instance instance . get class (  )  config . framework (  )  )  ;  apply methods ( instance  (  class < t >  ) instance . get class (  )  )  ;  return instance ;   }  
317,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\InjectableObjectFactory.java,inject fields,public  < u > void   (  set <  field >  fields u instance  atmosphere framework framework  linked list <  injectable <  ?  >  >  injectable )  throws  illegal access exception  {  for  (   field field : fields )   {  if  ( field . is annotation present (  inject . class )  )   {  for  (   injectable c : injectable )   {  if  ( c . supported type ( field . get type (  )  )  )   {  if  (  inject introspector . class . is assignable from ( c . get class (  )  )  )   {   inject introspector . class . cast ( c )  . introspect field ( instance . get class (  )  field )  ;   }   class < u >  clazz =  (  class < u >  ) instance . get class (  )  ;  try  {  field . set accessible ( true )  ;  pre field injection ( field instance clazz )  ;   object o = c . injectable ( framework . get atmosphere config (  )  )  ;  if  ( o  =  =  null )   {  null field injection for ( field instance clazz )  ;  push back injection . add ( instance )  ;  continue ;   }  post field injection ( field instance clazz )  ;  if  ( field . get type (  )  . equals (  boolean . type )  )   {  field . set boolean ( instance  boolean . class . cast ( o )  . boolean value (  )  )  ;   }  else if  ( field . get type (  )  . equals (  integer . type )  )   {  field . set int ( instance  integer . class . cast ( o )  . int value (  )  )  ;   }  else if  ( field . get type (  )  . equals (  byte . type )  )   {  field . set byte ( instance  byte . class . cast ( o )  . byte value (  )  )  ;   }  else if  ( field . get type (  )  . equals (  double . type )  )   {  field . set double ( instance  double . class . cast ( o )  . double value (  )  )  ;   }  else if  ( field . get type (  )  . equals (  long . type )  )   {  field . set long ( instance  long . class . cast ( o )  . long value (  )  )  ;   }  else if  ( field . get type (  )  . equals (  float . type )  )   {  field . set float ( instance  float . class . cast ( o )  . float value (  )  )  ;   }  else  {  field . set ( instance o )  ;   }   }  catch  (   exception ex )   {  field injection exception ( field instance clazz ex )  ;  throw ex ;   }  finally  {  field . set accessible ( false )  ;   }  break ;   }   }   }   }   }  
318,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\InjectableObjectFactory.java,inject injectable,public  < u > void   ( u instance  class <  ?  extends u >  default type  atmosphere framework framework )  throws  illegal access exception  {   set <  field >  fields = get inherited private fields ( default type )  ;  inject fields ( fields instance framework injectables )  ;   }  
319,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\InjectableObjectFactory.java,inject methods,private  < u > void   (  set <  method >  methods u instance )  throws  illegal access exception  {  for  (   method m : methods )   {  for  (   injectable c : introspectors )   {  if  (  ! push back injection . contains ( instance )  )   {  try  {  pre method injection ( m instance  (  class < u >  ) instance . get class (  )  )  ;   inject introspector . class . cast ( c )  . introspect method ( m instance )  ;  post method injection ( m instance  (  class < u >  ) instance . get class (  )  )  ;   }  catch  (   exception ex )   {  method injection exception ( m instance  (  class < u >  ) instance . get class (  )  ex )  ;  throw ex ;   }   }   }   }   }  
320,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\InjectableObjectFactory.java,injection failed,"protected void   (  )  {  for  (   injection listener i : listeners )   {  try  {  i . injection failed ( push back injection )  ;   }  catch  (   exception ex )   {  logger . error ( """" ex )  ;   }   }   }  "
321,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\InjectableObjectFactory.java,listener,public  injectable object factory   (  injection listener i )  {  listeners . add ( i )  ;  return this ;   }  
322,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\InjectableObjectFactory.java,method injection exception,"protected  < t u extends t > void   (  method m u instance  class < t >  clazz  exception ex )  {  for  (   injection listener i : listeners )   {  try  {  i . method injection exception ( m instance clazz ex )  ;   }  catch  (   exception ex2 )   {  logger . error ( """" ex2 )  ;   }   }   }  "
323,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\InjectableObjectFactory.java,need request scoped,public boolean   (  class default type )  throws  illegal access exception  {   set <  field >  fields = new  hash set <  >  (  )  ;  fields . add all ( get inherited private fields ( default type )  )  ;  for  (   field field : fields )   {  for  (   inject introspector c : request scoped introspectors )   {  if  ( c . supported type ( field . get type (  )  )  )   {  return true ;   }   }   }  return false ;   }  
324,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\InjectableObjectFactory.java,new class instance,@ override public  < t u extends t > u   (  class < t >  class type  class < u >  default type )  throws  instantiation exception   illegal access exception  {  u instance = default type . new instance (  )  ;  inject injectable ( instance default type config . framework (  )  )  ;  apply methods ( instance def
325,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\InjectableObjectFactory.java,null field injection for,"protected  < t u extends t > void   (  field field u instance  class < t >  clazz )  {  for  (   injection listener i : listeners )   {  try  {  i . null field injection for ( field instance clazz )  ;   }  catch  (   exception ex2 )   {  logger . error ( """" ex2 )  ;   }   }   }  "
326,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\InjectableObjectFactory.java,post field injection,"protected  < t u extends t > void   (  field field u instance  class < t >  clazz )  {  for  (   injection listener i : listeners )   {  try  {  i . post field injection ( field instance clazz )  ;   }  catch  (   exception ex )   {  logger . error ( """" ex )  ;   }   }   }  "
327,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\InjectableObjectFactory.java,post method injection,"protected  < t u extends t > void   (  method method u instance  class < t >  clazz )  {  for  (   injection listener i : listeners )   {  try  {  i . post method injection ( method instance clazz )  ;   }  catch  (   exception ex )   {  logger . error ( """" ex )  ;   }   }   }  "
328,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\InjectableObjectFactory.java,pre field injection,"protected  < t u extends t > void   (  field field u instance  class < t >  clazz )  {  for  (   injection listener i : listeners )   {  try  {  i . pre field injection ( field instance clazz )  ;   }  catch  (   exception ex )   {  logger . error ( """" ex )  ;   }   }   }  "
329,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\InjectableObjectFactory.java,pre method injection,"protected  < t u extends t > void   (  method method u instance  class < t >  clazz )  {  for  (   injection listener i : listeners )   {  try  {  i . pre method injection ( method instance clazz )  ;   }  catch  (   exception ex )   {  logger . error ( """" ex )  ;   }   }   }  "
330,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\InjectIntrospectorAdapter.java,injectable,@ override public t   (  atmosphere config config )  {  return null ;   }  
331,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\InjectIntrospectorAdapter.java,supported type,@ override public boolean   (  type t )  {  return false ;   }  
332,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\InjectableObjectFactory.java,request scoped,public void   (  object instance  class default type )  throws  illegal access exception  {   set <  field >  fields = new  hash set <  >  (  )  ;  fields . add all ( get inherited private fields ( default type )  )  ;  for  (   field field : fields )   {  for  (   inject introspector c : request scoped introspectors )   {  for  (   class annotation : c . get class (  )  . get annotation (  request scoped . class )  . value (  )  )   {  if  ( field . is annotation present ( annotation )  )   {  c . introspect field ( instance . get class (  )  field )  ;  if  ( c . supported type ( field . get type (  )  )  )   {  try  {  field . set accessible ( true )  ;  field . set ( instance c . injectable ( config )  )  ;   }  finally  {  field . set accessible ( false )  ;   }  break ;   }   }   }   }   }   }  
333,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\InjectableObjectFactory.java,retry injection,"protected void   (  atmosphere framework framework )  {  int max try per cycle = max try ;   set <  field >  fields = new  hash set <  field >  (  )  ;   object instance = null ;  final  linked hash set <  object >  postponed method execution = new  linked hash set <  >  ( push back injection )  ;  while  (  ! push back injection . is empty (  )  & max try per cycle -  -   >  0 )   {   iterator <  object >  t = new  linked list ( push back injection )  . iterator (  )  ;  push back injection . clear (  )  ;  while  ( t . has next (  )  )   {  instance = t . next (  )  ;  fields . add all ( get inherited private fields ( instance . get class (  )  )  )  ;  try  {  inject fields ( fields instance framework injectables )  ;   }  catch  (   illegal access exception e )   {  logger . warn ( """" e )  ;   }  finally  {  fields . clear (  )  ;   }   }   }  if  (  ! push back injection . is empty (  )  )   {  injection failed (  )  ;   }  for  (   object o : postponed method execution )   {  try  {  apply methods ( o  (  class <  object >  ) o . get class (  )  )  ;   }  catch  (   illegal access exception e )   {  logger . warn ( """" e )  ;   }   }   }  "
334,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\InjectableObjectFactory.java,started,@ override public void   (  atmosphere framework framework )  {  retry injection ( framework )  ;   }  
335,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\InjectableObjectFactory.java,to string,@ override public  string   (  )  {  return  injectable object factory . class . get name (  )  ;   }  
336,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\MetaBroadcasterInjectable.java,injectable,@ override public  meta broadcaster   (  atmosphere config config )  {  return config . meta broadcaster (  )  ;   }  
337,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\MetaBroadcasterInjectable.java,supported type,@ override public boolean   (  type t )  {  return  ( t instanceof  class )  &&  meta broadcaster . class . is assignable from (  (  class ) t )  ;   }  
338,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\PathParamIntrospector.java,injectable,@ override public  string   (  atmosphere resource r )  {   string named = path local . get (  )  ;   string[] paths =  (  string[] ) r . get request (  )  . get attribute (  path param . class . get name (  )  )  ;  if  ( paths  =  =  null || paths . length  !  =  2 )   {   atmosphere framework .  atmosphere handler wrapper w =  (  atmos
339,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\PathParamIntrospector.java,introspect field,@ override public void   (  class clazz  field f )  {  if  ( f . is annotation present (  path param . class )  )   {   string name = f . get annotation (  path param . class )  . value (  )  ;  if  ( name . is empty (  )  )   {  name = f . get name (  )  ;   }  path local . set ( name )  ;   }   }  
340,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\PathParamIntrospector.java,supported type,@ override public boolean   (  type t )  {  return  ( t instanceof  class )  &&  string . class . is assignable from (  (  class ) t )  ;   }  
341,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\PostConstructIntrospector.java,introspect method,"@ override public void   (  method m  object instance )  {  if  (  ! m . is annotation present (  post construct . class )  )  return ;  try  {  m . set accessible ( true )  ;  m . invoke ( instance )  ;   }  catch  (   exception e )   {  logger . error ( """" e )  ;   }  finally  {  m . set accessible ( false )  ;   }   }  "
342,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\WebSocketFactoryInjectable.java,injectable,@ override public  web socket factory   (  atmosphere config config )  {  return config . websocket factory (  )  ;   }  
343,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\WebSocketFactoryInjectable.java,supported type,@ override public boolean   (  type t )  {  return  ( t instanceof  class )  &&  web socket factory . class . is assignable from (  (  class ) t )  ;   }  
344,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\BroadcastOnPostAtmosphereInterceptor.java,inspect,@ override public  action   (  atmosphere resource r )  {  return  action . continue ;   }  
345,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\BroadcastOnPostAtmosphereInterceptor.java,post inspect,"@ override public void   (  atmosphere resource r )  {  if  ( r . get request (  )  . get method (  )  . equals ignore case ( ""post"" )  )   {   atmosphere request request = r . get request (  )  ;   object o ;  try  {  o = read entirely ( r )  ;   }  catch  (  io exception e )   {  logger . warn ( """" e )  ;  return ;   }  if  ( is body empty ( "
346,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\AndroidAtmosphereInterceptor.java,inspect,@ override public  action   ( final  atmosphere resource r )  {  if  (  ! r . transport (  )  . equals ( transport . streaming )  )  return  action . continue ;  final  atmosphere response response =  atmosphere resource impl . class . cast ( r )  . get response ( false )  ;   string user agent =  atmosphere resource im
347,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\AndroidAtmosphereInterceptor.java,post payload,@ override public void   (  atmosphere response response byte[] data int offset int length )  {  response . write ( padding true )  ;   }  
348,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\AndroidAtmosphereInterceptor.java,pre payload,@ override public void   (  atmosphere response response byte[] data int offset int length )  {  response . write ( padding true )  ;   }  
349,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\AndroidAtmosphereInterceptor.java,to string,"@ override public  string   (  )  {  return "" android  interceptor  support"" ;   }  "
350,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\AtmosphereResourceStateRecovery.java, broadcaster tracker,public   (  )  {  this . broadcaster ids = new  concurrent linked queue <  string >  (  )  ;  tick =  system . current time millis (  )  ;   }  
351,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\AtmosphereResourceStateRecovery.java,add,"public  broadcaster tracker   (  broadcaster b )  {  logger . trace ( "" adding  {  } "" b . getid (  )  )  ;  if  (  ! broadcaster ids . contains ( b . getid (  )  )  )   {  broadcaster ids . add ( b . getid (  )  )  ;   }  return this ;   }  "
352,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\AtmosphereResourceStateRecovery.java,configure,@ override public void   (  atmosphere config config )  {  factory = config . get broadcaster factory (  )  ;  factory . add broadcaster listener ( new b (  )  )  ;  state tracker =  executors factory . get scheduler ( config )  ;   string s = config . get init parameter ( state   recovery   timeout )  ;  if  ( s  !  =  null ) 
353,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\AtmosphereResourceStateRecovery.java,destroy,@ override public void   (  )  {  tracker future . cancel ( true )  ;   }  
354,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\AtmosphereResourceStateRecovery.java,ids,public  concurrent linked queue <  string >    (  )  {  return broadcaster ids ;   }  
355,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\AtmosphereResourceStateRecovery.java,inspect,@ override public  action   ( final  atmosphere resource r )  {  if  (  !  utils . pollable transport ( r . transport (  )  )  &&  !  utils . web socket message ( r )  )   {  final  broadcaster tracker tracker = track ( r )  . tick (  )  ;   list <  object >  cached messages = retrieve cache ( r tracker false )  ;  if  (  ! cached me
356,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\AtmosphereResourceStateRecovery.java,last tick,public long   (  )  {  return tick ;   }  
357,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\AtmosphereResourceStateRecovery.java,on add atmosphere resource,"@ override public void   (  broadcaster b  atmosphere resource r )  {   broadcaster tracker t = states . get ( r . uuid (  )  )  ;  if  ( t  =  =  null )   {  t = track ( r )  ;   }  logger . trace ( "" starting tracking the state of  {  }  with broadcaster  {  } "" r . uuid (  )  b . getid (  )  )  ;  t . add ( b )  ;   }  "
358,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\AtmosphereResourceStateRecovery.java,on broadcast,"@ override public void   (  atmosphere resource event event )  {  r . remove event listener ( this )  ;  do not suspend . set ( true )  ;  logger . trace ( ""on broadcast"" )  ;   }  "
359,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\AtmosphereResourceStateRecovery.java,on remove atmosphere resource,"@ override public void   (  broadcaster b  atmosphere resource r )  {   broadcaster tracker t = states . get ( r . uuid (  )  )  ;   atmosphere resource event e = r . get atmosphere resource event (  )  ;  if  ( e . is closed by client (  )  ||  ! r . is resumed (  )  &&  ! e . is resumed on timeout (  )  )   {  logger . trace ( "" deleti"
360,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\AtmosphereResourceLifecycleInterceptor.java, atmosphere resource lifecycle interceptor,public   ( boolean force )  {  this . force = force ;   }  
361,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\AtmosphereResourceLifecycleInterceptor.java,configure,@ override public void   (  atmosphere config config )  {   string s = config . get init parameter ( atmosphereresource   interceptor   method )  ;  if  ( s  !  =  null )   {  method = s ;   }  s = config . get init parameter ( atmosphereresource   interceptor   timeout )  ;  if  ( s  !  =  null )   {  timeout in seconds =  in
362,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\AtmosphereResourceLifecycleInterceptor.java,inspect,@ override public  action   (  atmosphere resource r )  {  switch  ( r . transport (  )  )   {  case jsonp: case ajax: case long   polling: r . resume on broadcast ( true )  ;  break ;  default : break ;   }  return  action . continue ;   }  
363,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\AtmosphereResourceLifecycleInterceptor.java,method,public  atmosphere resource lifecycle interceptor   (  string method )  {  this . method = method ;  return this ;   }  
364,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\AtmosphereResourceLifecycleInterceptor.java,on broadcast,"@ override public void   (  atmosphere resource event event )  {  switch  ( r . transport (  )  )   {  case jsonp: case ajax: case long   polling: break ;  default : try  {  r . get response (  )  . flush buffer (  )  ;   }  catch  (  io exception e )   {  logger . trace ( """" e )  ;   }  break ;   }   }  "
365,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\AtmosphereResourceLifecycleInterceptor.java,post inspect,@ override public void   ( final  atmosphere resource r )  {  if  ( r . transport (  )  . equals ( undefined )  ||  utils . web socket message ( r )  || r . transport (  )  . equals ( polling )  )  return ;   atmosphere resource impl impl =  atmosphere resource impl . class . cast ( r )  ;  if  (  ( force || impl . get request
366,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\AtmosphereResourceLifecycleInterceptor.java,timeout in seconds,public  atmosphere resource lifecycle interceptor   ( int timeout in seconds )  {  this . timeout in seconds = timeout in seconds ;  timeout in milli =  time unit . milliseconds . convert ( timeout in seconds  time unit . seconds )  ;  return this ;   }  
367,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\AtmosphereResourceLifecycleInterceptor.java,to string,"public  string   (  )  {  return "" atmosphere  life cycle"" ;   }  "
368,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\HeartbeatInterceptor.java,call,"@ override public  object   (  )  throws  exception  {  synchronized  ( r )   {  if  (  atmosphere resource impl . class . cast ( r )  . is in scope (  )  && r . is suspended (  )  )   {  try  {  logger . trace ( "" heartbeat for  resource  {  } "" r )  ;  response . write ( padding bytes false )  ;  if  (  utils . resumable transpor"
369,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\HeartbeatInterceptor.java,cancelf,"void   (  atmosphere request request )  {  try  {   future <  ?  >  f =  (  future <  ?  >  ) request . get attribute ( heartbeat   future )  ;  if  ( f  !  =  null )  f . cancel ( false )  ;  request . remove attribute ( heartbeat   future )  ;   }  catch  (   exception ex )   {  logger . trace ( """" ex )  ;   }   }  "
370,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\HeartbeatInterceptor.java,client heartbeat frequency in seconds,public  heartbeat interceptor   ( int client heartbeat frequency in seconds )  {  this . client heartbeat frequency in seconds = client heartbeat frequency in seconds ;  return this ;   }  
371,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\HeartbeatInterceptor.java,clock,"public  heartbeat interceptor   ( final int interval final  atmosphere resource r final  atmosphere request request final  atmosphere response response )  {  try  {  request . set attribute ( heartbeat   future heart beat . schedule ( new  callable <  object >  (  )  {  @ override public  object call (  )  throws  exception  {  synchronized  ( r )   {  if  (  atmosphere resource impl . class . cast ( r )  . is in scope (  )  && r . is suspended (  )  )   {  try  {  logger . trace ( "" heartbeat for  resource  {  } "" r )  ;  response . write ( padding bytes false )  ;  if  (  utils . resumable transport ( r . transport (  )  )  && resume on heartbeat )   {  r . resume (  )  ;   }  else if  ( flush buffer )   {  response . flush buffer (  )  ;   }   }  catch  (   throwable t )   {  logger . trace ( "" {  } "" r . uuid (  )  t )  ;  cancelf ( request )  ;   }   }  else  {  cancelf ( request )  ;   }   }  return null ;   }   }   interval  time unit . seconds )  )  ;   }  catch  (   throwable t )   {  logger . warn ( """" t )  ;   }  return this ;   }  "
372,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\HeartbeatInterceptor.java,configure,@ override public void   ( final  atmosphere config config )  {   string s = config . get init parameter ( heartbeat   interval   in   seconds )  ;  if  ( s  !  =  null )   {  heartbeat frequency in seconds =  integer . value of ( s )  ;   }  s = config . get init parameter ( heartbeat   padding   char )  ;  if  ( s  !  =  null )   { 
373,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\HeartbeatInterceptor.java,destroy,@ override public void   (  )  {  if  ( destroyed . get and set ( true )  )  return ;  for  (   atmosphere resource r : config . resources factory (  )  . find all (  )  )   {  cancelf ( r . get request (  )  )  ;   }   }  
374,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\HeartbeatInterceptor.java,extract heartbeat interval,"protected int   ( final  atmosphere resource impl resource )  {  int interval = heartbeat frequency in seconds ;  final  string s = resource . get request ( false )  . get header (  header config . x   heartbeat   server )  ;  if  ( s  !  =  null )   {  try  {  interval =  integer . parse int ( s )  ;  if  ( interval  !  =  0 && interval  <  heartbeat frequency in seconds )   {  interval = heartbeat frequency in seconds ;   }   }  catch  (   number format exception nfe )   {  logger . warn ( "" {  }  header is not an integer""  header config . x   heartbeat   server nfe )  ;   }   }  return interval ;   }  "
375,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\HeartbeatInterceptor.java,get padding bytes,public byte[]   (  )  {  return this . padding bytes ;   }  
376,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\HeartbeatInterceptor.java,heartbeat frequency in seconds,public int   (  )  {  return heartbeat frequency in seconds ;   }  
377,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\HeartbeatInterceptor.java,inspect,@ override public  action   ( final  atmosphere resource r )  {  final  atmosphere resource impl impl =  atmosphere resource impl . class . cast ( r )  ;  final  atmosphere request request = impl . get request ( false )  ;  final  atmosphere response response = impl . get response ( false )  ;  if  ( client hea
378,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\HeartbeatInterceptor.java,on close,@ override public void   (  atmosphere resource event event )  {  cancelf ( request )  ;   }  
379,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\HeartbeatInterceptor.java,on disconnect,@ override public void   (  atmosphere resource event event )  {  cancelf ( request )  ;   }  
380,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\HeartbeatInterceptor.java,on heartbeat,@ override public void   (  atmosphere resource event event )  {   atmosphere resource heartbeat event listener . class . cast ( r . get atmosphere handler (  )  )  . on heartbeat ( event )  ;   }  
381,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\HeartbeatInterceptor.java,on resume,@ override public void   (  atmosphere resource event event )  {  cancelf ( request )  ;   }  
382,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\HeartbeatInterceptor.java,on suspend,@ override public void   (  atmosphere resource event event )  {  if  (  ! was suspended )   {  clock ( interval r request response )  ;   }   }  
383,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\HeartbeatInterceptor.java,padding text,public  heartbeat interceptor   ( byte[] padding bytes )  {  this . padding bytes = padding bytes ;  return this ;   }  
384,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\HeartbeatInterceptor.java,post payload,"@ override public void   ( final  atmosphere response response byte[] data int offset int length )  {  logger . trace ( "" scheduling heartbeat for  {  } "" r . uuid (  )  )  ;  clock ( interval r request response )  ;   }  "
385,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\HeartbeatInterceptor.java,resume on heartbeat,public  heartbeat interceptor   ( boolean resume on heartbeat )  {  this . resume on heartbeat = resume on heartbeat ;  return this ;   }  
386,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\HeartbeatInterceptor.java,to string,"@ override public  string   (  )  {  return "" heartbeat  interceptor  support"" ;   }  "
387,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\HeartbeatInterceptor.java,transform payload,@ override public byte[]   (  atmosphere response response byte[] response draft byte[] data )  throws io exception  {  cancelf ( request )  ;  return response draft ;   }  
388,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\CacheHeadersInterceptor.java,configure,@ override public void   (  atmosphere config config )  {   string nocache = config . get init parameter (  application config . no   cache   headers )  ;  inject cache headers = nocache  !  =  null  ?  false : true ;   string wh = config . get init parameter (  framework config . write   headers )  ;  write headers
389,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\CacheHeadersInterceptor.java,inject cache headers,public  cache headers interceptor   ( boolean inject cache headers )  {  this . inject cache headers = inject cache headers ;  return this ;   }  
390,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\CacheHeadersInterceptor.java,inspect,@ override public  action   (  atmosphere resource r )  {  if  (  utils . web socket message ( r )  )  return  action . continue ;  final  atmosphere response response = r . get response (  )  ;  final  atmosphere request request = r . get request (  )  ;  request . set attribute (  application config . no   cache   head
391,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\CacheHeadersInterceptor.java,to string,"@ override public  string   (  )  {  return "" default  response's  headers  interceptor"" ;   }  "
392,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\CacheHeadersInterceptor.java,write headers,public  cache headers interceptor   ( boolean write headers )  {  this . write headers = write headers ;  return this ;   }  
393,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\CorsInterceptor.java,configure,@ override public void   (  atmosphere config config )  {   string ac = config . get init parameter (  application config . drop   access   control   allow   origin   header )  ;  if  ( ac  !  =  null )   {  enable access control =  !  boolean . parse boolean ( ac )  ;   }   }  
394,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\CorsInterceptor.java,enable access control,public  cors interceptor   ( boolean enable access control )  {  this . enable access control = enable access control ;  return this ;   }  
395,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\CorsInterceptor.java,inspect,"@ override public  action   (  atmosphere resource r )  {  if  (  utils . web socket message ( r )  )  return  action . continue ;  if  (  ! enable access control )  return  action . continue ;   atmosphere request req = r . get request (  )  ;   atmosphere response res = r . get response (  )  ;  if  ( req . get header ( "" orig"
396,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\CorsInterceptor.java,priority,@ override public priority   (  )  {  return  invokation order . first   before   default ;   }  
397,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\CorsInterceptor.java,to string,"@ override public  string   (  )  {  return ""cors  interceptor  support"" ;   }  "
398,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\IdleResourceInterceptor.java,configure,public void   (  atmosphere config config )  {  this . config = config ;   string max inactive = config . get init parameter ( max   inactive )  ;  if  ( max inactive  !  =  null )   {  max inactive time =  long . parse long ( max inactive )  ;   }  start (  )  ;   }  
399,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\IdleResourceInterceptor.java,destroy,@ override public void   (  )  {  if  ( future  !  =  null )   {  future . cancel ( true )  ;   }   }  
400,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\IdleResourceInterceptor.java,idle resources,"protected void   (  )  {  if  ( logger . is trace enabled (  )  )   {  logger . trace ( "" {  }  monitoring  {  }   atmosphere resources"" get class (  )  . get simple name (  )  config . resources factory (  )  . find all (  )  . size (  )  )  ;   }  for  (   atmosphere resource r : config . resources factory (  )  . find all (  )  )   {  if  (  utils . pollable transport ( r . transport (  )  )  )   {  continue ;   }   atmosphere request req =  atmosphere resource impl . class . cast ( r )  . get request ( false )  ;  try  {  if  ( req . get attribute ( max   inactive )   =  =  null )   {  logger . warn ( "" invalid state  {  } "" r )  ;  r . remove from all broadcasters (  )  ;  config . resources factory (  )  . un register uuid for find candidate ( r )  ;  continue ;   }  long l =  (  long ) req . get attribute ( max   inactive )  ;  if  ( logger . is trace enabled (  )  && l  >  0 )   {  logger . trace ( "" expiring  {  }  in  {  } "" r . uuid (  )   system . current time millis (  )   -  l )  ;   }  if  ( l  >  0 &&  system . current time millis (  )   -  l  >  max inactive time )   {  try  {  req . set attribute ( max   inactive  ( long )  - 1 )  ;  logger . debug ( "" idle resource interceptor disconnecting  {  } "" r )  ;   future <  ?  >  f =  (  future <  ?  >  ) req . get attribute (  heartbeat interceptor . heartbeat   future )  ;  if  ( f  !  =  null )  f . cancel ( false )  ;  req . remove attribute (  heartbeat interceptor . heartbeat   future )  ;   web socket web socket =  atmosphere resource impl . class . cast ( r )  . web socket (  )  ;  if  ( web socket  !  =  null )   {  web socket . close (  )  ;   }  else  {   asynchronous processor . class . cast ( config . framework (  )  . get async support (  )  )  . end request (  atmosphere resource impl . class . cast ( r )  true )  ;   }   }  finally  {  r . remove from all broadcasters (  )  ;  config . resources factory (  )  . un register uuid for find candidate ( r )  ;   }   }   }  catch  (   throwable e )   {  logger . warn ( "" idle resource interceptor"" e )  ;   }   }   }  "
401,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\IdleResourceInterceptor.java,inspect,@ override public  action   (  atmosphere resource r )  {  if  ( max inactive time  >  0 &&  !  utils . pollable transport ( r . transport (  )  )  )   {   atmosphere resource impl . class . cast ( r )  . get request ( false )  . set attribute ( max   inactive  system . current time millis (  )  )  ;   }  return  action . continue ;  
402,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\IdleResourceInterceptor.java,max inactive time,public  idle resource interceptor   ( long max inactive time )  {  this . max inactive time = max inactive time ;  start (  )  ;  return this ;   }  
403,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\IdleResourceInterceptor.java,priority,@ override public priority   (  )  {  return  invokation order . before   default ;   }  
404,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\IdleResourceInterceptor.java,run,public void   (  )  {  idle resources (  )  ;   }  
405,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\IdleResourceInterceptor.java,start,"private void   (  )  {  if  ( future  !  =  null )   {  future . cancel ( false )  ;   }  if  ( max inactive time  >  0 )   {  logger . info ( "" {  }  started with idle timeout set to  {  } ""  idle resource interceptor . class . get simple name (  )  max inactive time )  ;  future =  executors factory . get scheduler ( config )  . schedule at fixed rate ( new  runnable (  )  {  public void run (  )  {  idle resources (  )  ;   }   }   0 2  time unit . seconds )  ;   }   }  "
406,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\JSONPAtmosphereInterceptor.java,callback name, string   (  )  {   string callback = request . get parameter (  header config . jsonp   callback   name )  ;  if  ( callback  =  =  null )   {   string jsonp =  (  string ) config . properties (  )  . get (  header config . jsonp   callback   name )  ;  if  ( jsonp  !  =  null )   {  callback = request . get parameter ( jsonp )  ;   }   }  return callback ;   }  
407,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\JSONPAtmosphereInterceptor.java,configure,@ override public void   (  atmosphere config config )  {  this . config = config ;   }  
408,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\JSONPAtmosphereInterceptor.java,escape for java script,"protected  string   (  string str )  {  try  {  str =  string escape utils . escape java script ( str )  ;   }  catch  (   exception e )   {  logger . error ( "" failed to escape"" e )  ;  str = null ;   }  return str ;   }  "
409,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\JSONPAtmosphereInterceptor.java,inspect,"@ override public  action   (  atmosphere resource r )  {  if  (  utils . web socket message ( r )  )  return  action . continue ;  final  atmosphere request request = r . get request (  )  ;  final  atmosphere response response = r . get response (  )  ;   string uri = request . get requesturi (  )   =  =  null  ?  """" : re"
410,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\JSONPAtmosphereInterceptor.java,post payload,@ override public void   (  atmosphere response response byte[] data int offset int length )  {  response . write ( end chunk true )  ;   }  
411,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\JSONPAtmosphereInterceptor.java,pre payload,@ override public void   (  atmosphere response response byte[] data int offset int length )  {   string callback name = callback name (  )  ;  response . write ( callback name  +  start chunk )  ;   }  
412,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\JSONPAtmosphereInterceptor.java,to string,"@ override public  string   (  )  {  return ""jsonp  interceptor  support"" ;   }  "
413,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\JSONPAtmosphereInterceptor.java,transform payload,"@ override public byte[]   (  atmosphere response response byte[] response draft byte[] data )  throws io exception  {   string char encoding = response . get character encoding (  )   =  =  null  ?  ""utf - 8"" : response . get character encoding (  )  ;  return escape for java script ( new  string ( res"
414,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\JavaScriptProtocol.java,configure,@ override public void   ( final  atmosphere config config )  {   string s = config . get init parameter (  application config . message   delimiter )  ;  if  ( s  !  =  null )   {  ws delimiter = s ;   }  enforce atmosphere version =  boolean . value of ( config . get init parameter (  application config . enforce   atm
415,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\JavaScriptProtocol.java,enforce atmosphere version,public  java script protocol   ( boolean enforce atmosphere version )  {  this . enforce atmosphere version = enforce atmosphere version ;  return this ;   }  
416,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\JavaScriptProtocol.java,inspect,@ override public  action   ( final  atmosphere resource ar )  {  if  (  utils . web socket message ( ar )  )  return  action . continue ;  final  atmosphere resource impl r =  atmosphere resource impl . class . cast ( ar )  ;  final  atmosphere request request = r . get request ( false )  ;  final  atmosphere resp
417,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\JavaScriptProtocol.java,on suspend,"@ override public void   (  atmosphere resource event event )  {  response . write ( protocol message . get (  )  )  ;  try  {  response . flush buffer (  )  ;   }  catch  (  io exception e )   {  logger . trace ( """" e )  ;   }  r . remove event listener ( this )  ;   }  "
418,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\JavaScriptProtocol.java,parse version,"private static int   (  string version )  {   string[] parts = version . split ( ""\\ . "" )  ;  return  integer . value of ( parts[0]  +  parts[1]  +  parts[2] )  ;   }  "
419,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\JavaScriptProtocol.java,to string,"@ override public  string   (  )  {  return "" atmosphere  java script  protocol"" ;   }  "
420,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\JavaScriptProtocol.java,ws delimiter,public  java script protocol   (  string ws delimiter )  {  this . ws delimiter = ws delimiter ;  return this ;   }  
421,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\NginxInterceptor.java,inspect,"@ override public  action   (  atmosphere resource r )  {  if  (  utils . web socket message ( r )  )  return  action . continue ;  try  {  r . get response (  )  . add header ( ""x -  accel -  buffering"" "" no"" )  ;   }  catch  (   throwable t )   {  logger . trace ( """" t )  ;   }  return  action . continue ;   }  "
422,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\OldBrowserPaddingInterceptor.java, old browser padding interceptor,public   (  )  {  super ( 8192 )  ;   }  
423,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\OnDisconnectInterceptor.java,configure,@ override public void   (  atmosphere config config )  {  if  (  asynchronous processor . class . is assignable from ( config . framework (  )  . get async support (  )  . get class (  )  )  )   {  p =  asynchronous processor . class . cast ( config . framework (  )  . get async support (  )  )  ;   }  this . config = config ;   }  
424,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\OnDisconnectInterceptor.java,inspect,@ override public  action   ( final  atmosphere resource r )  {  if  (  utils . web socket message ( r )  )  return  action . continue ;   atmosphere request request =  atmosphere resource impl . class . cast ( r )  . get request ( false )  ;   string uuid = r . uuid (  )  ;  if  ( close message ( request )  )   {   atmosphere re
425,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\OnDisconnectInterceptor.java,to string,"public  string   (  )  {  return "" browser disconnection detection"" ;   }  "
426,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\SessionCreationInterceptor.java,inspect,"@ override public  action   (  atmosphere resource r )  {  if  (  utils . web socket message ( r )  )  return  action . continue ;  if  ( r . session ( false )   =  =  null &&  ! ids . remove ( r . uuid (  )  )  && r . get request (  )  . get method (  )  . equals ignore case ( ""get"" )  )   {  r . session ( true )  ;  ids . offer ( r . uuid (  )  )  ;  re"
427,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\PaddingAtmosphereInterceptor.java, force pre suspend,public   (  atmosphere response response )  {  this . response = response ;   }  
428,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\PaddingAtmosphereInterceptor.java, padding atmosphere interceptor,public   ( int size )  {  padding text = conf padding ( size )  ;  padding = padding text . get bytes (  )  ;   }  
429,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\PaddingAtmosphereInterceptor.java,conf padding,"protected final static  string   ( int size )  {   string builder whitespace = new  string builder (  )  ;  for  ( int i = 0 ;  i  <  size ;  i +  +  )   {  whitespace . append ( "" "" )  ;   }  whitespace . append ( ""\n"" )  ;  return whitespace . to string (  )  ;   }  "
430,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\PaddingAtmosphereInterceptor.java,inspect,@ override public  action   ( final  atmosphere resource r )  {  if  (  utils . web socket message ( r )  )  return  action . continue ;  final  atmosphere response response = r . get response (  )  ;  final  atmosphere request request = r . get request (  )  ;   string uuid = request . get header (  header config . x   a
431,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\PaddingAtmosphereInterceptor.java,on pre suspend,@ override public void   (  atmosphere resource event event )  {  write padding ( response )  ;  event . get resource (  )  . remove event listener ( this )  ;   }  
432,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\PaddingAtmosphereInterceptor.java,padding,"private void   (  )  {  if  (  ! r . is suspended (  )  )   {  write padding ( response )  ;  request . set attribute ( ""padding written"" ""true"" )  ;   }   }  "
433,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\PaddingAtmosphereInterceptor.java,pre payload,@ override public void   (  atmosphere response response byte[] data int offset int length )  {  padding (  )  ;   }  
434,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\PaddingAtmosphereInterceptor.java,to string,"@ override public  string   (  )  {  return "" browser  padding  interceptor  support"" ;   }  "
435,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\PaddingAtmosphereInterceptor.java,write padding,"private void   (  atmosphere response response )  {   atmosphere request request = response . request (  )  ;  if  ( request  !  =  null && request . get attribute ( ""padding written"" )   !  =  null )  return ;  if  ( response . resource (  )   !  =  null && response . resource (  )  . transport (  )  . equals ( transport . streaming )  )   {  request . set attribute (  framework config . transport   in   use  header config . streaming   transport )  ;  response . set content type ( ""text / plain"" )  ;   }  response . write ( padding true )  ;  try  {  response . flush buffer (  )  ;   }  catch  (  io exception e )   {  logger . trace ( """" e )  ;   }   }  "
436,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\SimpleRestInterceptor.java,json envelope reader,public   (  reader reader )  throws io exception  {  this . reader = reader ;  this . headers = new  hash map <  string  string >  (  )  ;  prepare (  )  ;   }  
437,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\SimpleRestInterceptor.java,attach writer,private void   ( final  atmosphere resource r )  {   atmosphere response res = r . get response (  )  ;   asyncio writer writer = res . get asyncio writer (  )  ;  if  ( writer instanceof  atmosphere interceptor writer )   {   (  (  atmosphere interceptor writer ) writer )  . interceptor ( interceptor 0 )  ;   }   }  
438,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\SimpleRestInterceptor.java,close,@ override public void   (  )  throws io exception  {  reader . close (  )  ;   }  
439,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\SimpleRestInterceptor.java,configure,@ override public void   (  atmosphere config config )  {  super . configure ( config )  ;  detached =  boolean . parse boolean ( config . get init parameter ( protocol   detached   key )  )  ;  heartbeat = config . get broadcaster factory (  )  . lookup (  default broadcaster . class get heartbeat broadcaster name ( 
440,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\SimpleRestInterceptor.java,create atmosphere request,"protected  atmosphere request   (  atmosphere request request  string body )  throws io exception  {  json envelope reader jer = new json envelope reader ( new  string reader ( body )  )  ;  final  string id = jer . get header ( ""id"" )  ;  if  ( id  !  =  null )   {  request . local attributes (  )  . put ( request   id id )  ;   }  boolean skip = false ;  final boolean continued =  boolean . value of ( jer . get header ( ""continue"" )  )  ;   reader reader = reader pool . get reader ( id false )  ;  if  ( reader  !  =  null )   {  skip = true ;   }  else if  ( continued )   {  reader = reader pool . get reader ( id true )  ;   }  if  ( skip )   {  final  reader data = jer . get reader (  )  ;  if  ( data  !  =  null )   {  reader pool . add chunk ( id data continued )  ;   }  return null ;   }  else  {  final  string method = jer . get header ( ""method"" )  ;   string path = jer . get header ( ""path"" )  ;  final  string type = jer . get header ( ""type"" )  ;  final  string accept = jer . get header ( ""accept"" )  ;   atmosphere request .  builder b = new  atmosphere request impl .  builder (  )  ;  b . method ( method  !  =  null  ?  method : ""get"" )  . path info ( path  !  =  null  ?  path : "" / "" )  ;  if  ( accept  !  =  null )   {   map <  string  string >  headers = new  tree map <  string  string >  (  string . case   insensitive   order )  ;  headers . put ( "" accept"" accept )  ;  b . headers ( headers )  ;   }  b . content type ( type )  ;  final int qpos = path . index of ( ' ? ' )  ;  if  ( qpos  >  0 )   {  b . query string ( path . substring ( qpos  +  1 )  )  ;  path = path . substring ( 0 qpos )  ;   }  final  reader data = jer . get reader (  )  ;  if  ( data  !  =  null )   {  if  ( reader  !  =  null )   {  b . reader ( reader )  ;  reader pool . add chunk ( id data true )  ;   }  else  {  b . reader ( data )  ;   }   }   string requesturl = request . get requesturl (  )   +  path . substring ( request . get requesturi (  )  . length (  )  )  ;  b . requesturi ( path )  . requesturl ( requesturl )  . request ( request )  ;  return b . build (  )  ;   }   }  "
441,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\SimpleRestInterceptor.java,create response,"protected byte[]   (  atmosphere response response byte[] payload )  {  if  ( log . is debug enabled (  )  )   {  log . debug ( ""create response for payload  {  } "" new  string ( payload )  )  ;   }   atmosphere request request = response . request (  )  ;   string id =  (  string ) request . get attribute ( request   id )  ;  if  ( id  =  =  null )   {  return payload ;   }   byte array output stream baos = new  byte array output stream (  )  ;  if  ( id  !  =  null )   {  try  {  baos . write ( response   template   head )  ;  baos . write ( id . get bytes (  )  )  ;  if  ( is detached ( request )  )   {  if  ( is last response ( request response )  )   {  baos . write ( response   template   belly   detached )  ;   }  else  {  baos . write ( response   template   belly   continue   detached )  ;   }  baos . write ( response   template   tail )  ;  baos . write ( response   template   newline )  ;  baos . write ( payload )  ;   }  else  {  boolean isobj = isjson object ( payload )  ;  if  ( is last response ( request response )  )   {  baos . write ( response   template   belly )  ;   }  else  {  baos . write ( response   template   belly   continue )  ;   }  if  (  ! isobj )   {  baos . write ( quote ( payload )  )  ;   }  else  {  baos . write ( payload )  ;   }  baos . write ( response   template   tail )  ;   }   }  catch  (  io exception e )   {   }   }  return baos . to byte array (  )  ;   }  "
442,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\SimpleRestInterceptor.java,get header,public  string   (  string name )  {  return headers . get ( name )  ;   }  
443,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\SimpleRestInterceptor.java,get headers,public  map <  string  string >    (  )  {  return headers ;   }  
444,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\SimpleRestInterceptor.java,get heartbeat broadcaster name,protected  string   (  )  {  return heartbeat   broadcaster   name ;   }  
445,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\SimpleRestInterceptor.java,get heartbeat template,protected  string   (  )  {  return heartbeat   template ;   }  
446,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\SimpleRestInterceptor.java,get heartbeat template arguments,protected  object[]   (  )  {  return new  object[] { uuid . randomuuid (  )  . to string (  )   system . current time millis (  )  }  ;   }  
447,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\SimpleRestInterceptor.java,get reader,"public  reader   (  )  {  if  (  ! datap &&  ! detachedp )   {  return null ;   }  return new  reader (  )  {  private int b ;  @ override public int read (  char[] cbuf  int off  int len )  throws io exception  {  int n = reader . read ( cbuf off len )  ;  if  ( n  >  0 )   {  boolean escaping = false ;  char quot = 0 ;  for  ( int i = off ;  i  <  n ;  i +  +  )   {  char c = cbuf[i] ;  if  ( c  =  =  ' { ' &&  ! escaping )   {  b +  +  ;   }  else if  ( c  =  =  ' } ' &&  ! escaping )   {  b -  -  ;  if  ( b  <  0 )   {  n -  -  ;   }   }  else if  (  ( c  =  =  '""' || c  =  =  '\'' )  &&  ! escaping )   {  if  ( c  =  =  quot )   {  quot = 0 ;   }  else  {  quot = c ;   }   }  else if  ( c  =  =  '\\' && quot  !  =  0 &&  ! escaping )   {  escaping = true ;   }  else if  ( escaping )   {  escaping = false ;   }   }   }  return n ;   }  @ override public void close (  )  throws io exception  {  reader . close (  )  ;   }  @ override public boolean ready (  )  throws io exception  {  return reader . ready (  )  ;   }   }   ;   }  "
448,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\SimpleRestInterceptor.java,inspect,"@ override public  action   ( final  atmosphere resource r )  {  if  (  atmosphere resource . transport . websocket  !  =  r . transport (  )  &&  atmosphere resource . transport . sse  !  =  r . transport (  )  &&  atmosphere resource . transport . polling  !  =  r . transport (  )  )   {  log . debug ( "" skipping for non"
449,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\SimpleRestInterceptor.java,is detached,protected boolean   (  atmosphere request request )  {  final  string prop = request . get header ( x   atmosphere   simple   rest   protocol   detached )  ;  return  ( detached && prop  =  =  null )  ||  boolean . value of ( prop )  ;   }  
450,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\SimpleRestInterceptor.java,isjson object,protected static boolean   ( byte[] b )  {  return b . length  >  0 &&  ( b[0]  =  =   ( byte ) '[' || b[0]  =  =   ( byte ) ' { ' )  ;   }  
451,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\SimpleRestInterceptor.java,is last response,protected static boolean   (  atmosphere request request  atmosphere response response )  {  return  ( response instanceof  completion aware &&  (  (  completion aware ) response )  . completed (  )  )  ||  boolean . true  !  =  request . get attribute (  application config . response   completion   aware )  ;   }  
452,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\SimpleRestInterceptor.java,isws,private boolean   ( int c )  {  return c  =  =  0x20 || c  =  =  0x09 || c  =  =  0x0a || c  =  =  0x0d ;   }  
453,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\SimpleRestInterceptor.java,next,private int   ( boolean skipws )  throws io exception  {  int c ;  if  ( peek  !  =   - 1 )   {  c = peek ;  peek =  - 1 ;   }  else  {  while  (  ( c = reader . read (  )  )   !  =   - 1 && skipws && isws ( c )  )   ;   }  return c ;   }  
454,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\SimpleRestInterceptor.java,next name,"private  string   (  )  throws io exception  {  int c = next ( true )  ;  if  ( c  =  =  '""' || c  =  =  '\'' )   {  return next quoted ( c )  ;   }  throw new io exception ( ""invalid name: missing quote '\""'"" )  ;   }  "
455,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\SimpleRestInterceptor.java,next non quoted,"private  string   (  )  throws io exception  {   string builder sb = new  string builder (  )  ;  int c ;  while  (  ( c = next ( false )  )   !  =   - 1 )   {  if  ( c  =  =  ' } ' || c  =  =  ' ' || isws ( c )  )   {  unread ( c )  ;  break ;   }  else  {  sb . append (  ( char ) c )  ;   }   }  if  ( c  !  =   - 1 )   {  return sb . to string (  )  ;   }  throw new io exception ( ""invalid value: non - terminated"" )  ;   }  "
456,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\SimpleRestInterceptor.java,next quoted,"private  string   ( int quot )  throws io exception  {   string builder sb = new  string builder (  )  ;  boolean escaping = false ;  int c ;  while  (  ( c = next ( false )  )   !  =   - 1 )   {  if  ( c  =  =  '\\' &&  ! escaping )   {  escaping = true ;   }  else if  ( c  =  =  quot &&  ! escaping )   {  break ;   }  else  {  sb . append (  ( char ) c )  ;  if  ( escaping )   {  escaping = false ;   }   }   }  if  ( c  !  =   - 1 )   {  return sb . to string (  )  ;   }  throw new io exception ( ""invalid quoted string: missing quotation"" )  ;   }  "
457,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\SimpleRestInterceptor.java,next value,"private  string   (  )  throws io exception  {  int c = next ( true )  ;  if  ( c  =  =  '""' || c  =  =  '\'' )   {  return next quoted ( c )  ;   }  else if  ( c  =  =  't' || c  =  =  'f' ||  ( '0'  <  =  c && c  <  =  '9' )  )   {  unread ( c )  ;  return next non quoted (  )  ;   }  throw new io exception ( ""invalid value: unquoted non literals"" )  ;   }  "
458,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\SimpleRestInterceptor.java,on disconnect,"@ override public void   (  atmosphere resource event event )  {  super . on disconnect ( event )  ;  final  string srid =  (  string ) event . get resource (  )  . get request (  )  . get attribute (  application config . suspended   atmosphere   resource   uuid )  ;  log . debug ( "" unregistrering suspended resource:"
459,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\SimpleRestInterceptor.java,on suspend,"@ override public void   (  atmosphere resource event event )  {  final  string srid =  (  string ) event . get resource (  )  . get request (  )  . get attribute (  application config . suspended   atmosphere   resource   uuid )  ;  log . debug ( "" registrering suspended resource:  {  } "" srid )  ;  suspended response"
460,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\SimpleRestInterceptor.java,prepare,"private void   (  )  throws io exception  {  int c = next ( true )  ;  if  ( c  =  =  ' { ' )   {  for  (  ;   ;   )   {   string name = next name (  )  ;  c = next ( true )  ;  if  ( c  =  =  ':' )   {  if  ( ""data"" . equals ( name )  )   {  datap = true ;  break ;   }  else if  ( ""detached"" . equals ( name )  )   {  if  (  boolean . value of ( next value (  )  )  )   {  detachedp = true ;   }   }  else  {  headers . put ( name next value (  )  )  ;   }   }  else  {  throw new io exception ( ""invalid value: missing name - separator ':'"" )  ;   }  c = next ( true )  ;  if  ( c  !  =  ' ' )   {  if  ( c  =  =  ' } ' && detachedp )   {  while  ( c  !  =   - 1 )   {  c = next ( false )  ;  if  ( c  =  =  '\n' )   {  break ;   }   }   }  else  {  unread ( c )  ;   }  break ;   }   }   }  else  {  throw new io exception ( ""invalid object: missing being - object ' { '"" )  ;   }   }  "
461,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\SimpleRestInterceptor.java,quote,"protected static byte[]   ( byte[] b )  {   byte array output stream baos = new  byte array output stream (  )  ;  baos . write ( '""' )  ;  for  (  byte c : b )   {  if  ( c  =  =  '""' )   {  baos . write ( '\\' )  ;   }  baos . write ( c )  ;   }  baos . write ( '""' )  ;  return baos . to byte array (  )  ;   }  "
462,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\SimpleRestInterceptor.java,read,@ override public int   ( char[] cbuf int off int len )  throws io exception  {  int n = reader . read ( cbuf off len )  ;  if  ( n  >  0 )   {  boolean escaping = false ;  char quot = 0 ;  for  ( int i = off ;  i  <  n ;  i +  +  )   {  char c = cbuf[i] ;  if  ( c  =  =  ' { ' &&  ! escaping )   {  b +  +  ;   }  else if  ( c  =  =  ' } '
463,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\SimpleRestInterceptor.java,ready,@ override public boolean   (  )  throws io exception  {  return reader . ready (  )  ;   }  
464,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\SimpleRestInterceptor.java,schedule heartbeat,private void   (  atmosphere resource r )  {  heartbeat . add atmosphere resource ( r )  ;  if  (  ! heartbeat scheduled )   {  heartbeat . schedule fixed broadcast (  string . format ( get heartbeat template (  )  get heartbeat template arguments (  )  )  default   heartbeat   interval default   heartbeat   interval  time unit . seconds )  ;  heartbeat scheduled = true ;   }   }  
465,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\SimpleRestInterceptor.java,transform payload,@ override public byte[]   (  atmosphere response response byte[] response draft byte[] data )  throws io exception  {  return create response ( response response draft )  ;   }  
466,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\SimpleRestInterceptor.java,unread,private void   ( int c )  {  peek = c ;   }  
467,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\SimpleRestInterceptor.java,write,@ override public  asyncio writer   (  atmosphere response r byte[] data int offset int length )  throws io exception  {  suspended response . write ( data offset length )  ;  suspended response . flush buffer (  )  ;  return this ;   }  
468,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\SuspendTrackerInterceptor.java,inspect,@ override public  action   ( final  atmosphere resource r )  {  if  (  utils . web socket message ( r )  )  return  action . continue ;  final  atmosphere request request =  atmosphere resource impl . class . cast ( r )  . get request ( false )  ;  boolean connecting = request . get header (  header config . x   atmos
469,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\SuspendTrackerInterceptor.java,on close,@ override public void   (  atmosphere resource event event )  {  on disconnect ( event )  ;   }  
470,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\SuspendTrackerInterceptor.java,on disconnect,"@ override public void   (  atmosphere resource event event )  {  logger . trace ( "" untracking  {  } "" r . uuid (  )  )  ;  trackeduuid . remove ( r . uuid (  )  )  ;   }  "
471,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\SuspendTrackerInterceptor.java,priority,@ override public priority   (  )  {  return  invokation order . before   default ;   }  
472,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\SuspendTrackerInterceptor.java,to string,"@ override public  string   (  )  {  return ""uuid  tracking  interceptor"" ;   }  "
473,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\SuspendTrackerInterceptor.java,trackeduuid,public  set <  string >    (  )  {  return trackeduuid ;   }  
474,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\SSEAtmosphereInterceptor.java,p,private   (  atmosphere response response )  {  this . response = response ;   }  
475,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\SSEAtmosphereInterceptor.java,configure,@ override public void   (  atmosphere config config )  {   string s = config . get init parameter (  application config . sse   default   contenttype )  ;  if  ( s  !  =  null )   {  content type = s ;   }   }  
476,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\SSEAtmosphereInterceptor.java,encode multiline data,private static byte[]   ( byte[] data )  {   byte array output stream baos = new  byte array output stream (  )  ;  int bp = 0 ;  int ep = 0 ;  try  {  while  ( ep  <  data . length )   {  int c = data[ep] ;  if  ( c  =  =  '\r' )   {  if  ( baos . size (  )   >  0 )   {  baos . write ( newline )  ;  baos . write ( data )  ;   }  baos . write ( data bp ep  -  bp )  ;  if  ( ep  +  1  <  data . length && data[ep  +  1]  =  =  '\n' )   {  ep +  +  ;   }  bp = ep  +  1 ;   }  else if  ( c  =  =  '\n' )   {  if  ( baos . size (  )   >  0 )   {  baos . write ( newline )  ;  baos . write ( data )  ;   }  baos . write ( data bp ep  -  bp )  ;  bp = ep  +  1 ;   }  ep +  +  ;   }  if  ( baos . size (  )   >  0 )   {  baos . write ( newline )  ;  baos . write ( data )  ;   }  baos . write ( data bp ep  -  bp )  ;   }  catch  (  io exception e )   {   }  return baos . to byte array (  )  ;   }  
477,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\SSEAtmosphereInterceptor.java,inspect,"@ override public  action   ( final  atmosphere resource r )  {  if  (  utils . web socket message ( r )  )  return  action . continue ;  final  atmosphere response response = r . get response (  )  ;  final  atmosphere request request = r . get request (  )  ;   string accept = request . get header ( "" accept"" )   =  =  n"
478,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\SSEAtmosphereInterceptor.java,is multiline data,private static boolean   ( byte[] data )  {  for  (  byte b : data )   {  if  ( b  =  =  '\r' || b  =  =  '\n' )   {  return true ;   }   }  return false ;   }  
479,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\SSEAtmosphereInterceptor.java,on pre suspend,@ override public void   (  atmosphere resource event event )  {  write padding ( response )  ;   }  
480,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\SSEAtmosphereInterceptor.java,padding,private boolean   (  )  {  if  (  ! r . is suspended (  )  )   {  return write padding ( response )  ;   }  return false ;   }  
481,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\SSEAtmosphereInterceptor.java,post payload,@ override public void   (  atmosphere response response byte[] data int offset int length )  {  if  ( r . is suspended (  )  || r . get request (  )  . get attribute ( callback   javascript   protocol )   !  =  null || r . get request (  )  . get attribute ( container   response )   !  =  null )   {  response . write ( e
482,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\SSEAtmosphereInterceptor.java,pre payload,@ override public void   (  atmosphere response response byte[] data int offset int length )  {  boolean no padding = padding (  )  ;  if  (  ! no padding || r . get request (  )  . get attribute ( callback   javascript   protocol )   !  =  null )   {  response . write ( data true )  ;   }   }  
483,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\SSEAtmosphereInterceptor.java,to string,"@ override public  string   (  )  {  return ""sse  interceptor  support"" ;   }  "
484,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\SSEAtmosphereInterceptor.java,transform payload,@ override public byte[]   (  atmosphere response response byte[] response draft byte[] data )  throws io exception  {  boolean no padding = padding (  )  ;  if  (  ! no padding || r . get request (  )  . get attribute ( callback   javascript   protocol )   !  =  null )   {  if  ( is multiline data ( response dr
485,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\SSEAtmosphereInterceptor.java,write padding,"private boolean   (  atmosphere response response )  {  if  ( response . request (  )   !  =  null && response . request (  )  . get attribute ( ""padding written"" )   !  =  null )  return false ;  response . set content type ( content type )  ;  response . set character encoding ( ""utf - 8"" )  ;  boolean is using stream =  (  boolean ) response . request (  )  . get attribute ( property   use   stream )  ;  if  ( is using stream )   {  try  {   output stream stream = response . get response (  )  . get output stream (  )  ;  try  {  stream . write ( padding )  ;  stream . flush (  )  ;   }  catch  (  io exception ex )   {  logger . warn ( ""sse may not work"" ex )  ;   }   }  catch  (  io exception e )   {  logger . trace ( """" e )  ;   }   }  else  {  try  {   print writer w = response . get response (  )  . get writer (  )  ;  w . println ( padding text )  ;  w . flush (  )  ;   }  catch  (  io exception e )   {  logger . trace ( """" e )  ;   }   }  response . resource (  )  . get request (  )  . set attribute ( ""padding written"" ""true"" )  ;  return true ;   }  "
486,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\TrackMessageSizeB64Interceptor.java,configure,"@ override public void   (  atmosphere config config )  {   string s = config . get init parameter ( excluded   content   types )  ;  if  ( s  !  =  null )   {  excluded content types . add all (  arrays . as list ( s . split ( "" "" )  )  )  ;   }   }  "
487,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\TrackMessageSizeB64Interceptor.java,excluded content type,public  track message sizeb64 interceptor   (  string excluded content type )  {  excluded content types . add ( excluded content type . to lower case (  )  )  ;  return this ;   }  
488,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\TrackMessageSizeB64Interceptor.java,inspect,@ override public  action   ( final  atmosphere resource r )  {  if  (  utils . web socket message ( r )  )  return  action . continue ;  final  atmosphere response response = r . get response (  )  ;  super . inspect ( r )  ;   asyncio writer writer = response . get asyncio writer (  )  ;  if  (  atmosphere interceptorw
489,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\TrackMessageSizeB64Interceptor.java,to string,"@ override public  string   (  )  {  return ""  track  message  size  base64  interceptor using ""  +  delimiter ;   }  "
490,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\TrackMessageSizeB64Interceptor.java,transform payload,@ override public byte[]   (  atmosphere response response byte[] response draft byte[] data )  throws io exception  {  if  ( response . request (  )  . get attribute ( skip   interceptor )   =  =  null &&  boolean . value of ( response . request (  )  . get header (  header config . x   atmosphere   trackmessa
491,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\WebSocketMessageSuspendInterceptor.java,inspect,@ override public  action   (  atmosphere resource r )  {  if  (  utils . web socket message ( r )  )   {   atmosphere resource impl . class . cast ( r )  . action (  )  . type (  action . type . suspend   message )  ;   }  return  action . continue ;   }  
492,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\lifecycle\BroadcasterLifecyclePolicyHandler.java,on post create,@ override public void   (  broadcaster b )  {  if  (  default broadcaster . class . is assignable from ( b . get class (  )  )  )   {   default broadcaster broadcaster =  default broadcaster . class . cast ( b )  ;  broadcaster . lifecycle handler ( lifer cycle handler . on ( broadcaster )  )  ;   }   }  
493,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\lifecycle\BroadcasterLifecyclePolicyHandler.java,on pre destroy,@ override public void   (  broadcaster b )  {  if  (  default broadcaster . class . is assignable from ( b . get class (  )  )  )   {   default broadcaster broadcaster =  default broadcaster . class . cast ( b )  ;  if  ( broadcaster . lifecycle handler (  )   !  =  null )   {  broadcaster . lifecycle handler (  )  . off ( broadc
494,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\lifecycle\BroadcasterLifecyclePolicyHandler.java,on remove atmosphere resource,@ override public void   (  broadcaster b  atmosphere resource r )  {  if  (  default broadcaster . class . is assignable from ( b . get class (  )  )  )   {   default broadcaster broadcaster =  default broadcaster . class . cast ( b )  ;  if  ( broadcaster . lifecycle handler (  )   !  =  null )   {  broadcaster . lifecycl
495,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\pool\PoolableBroadcasterFactory.java, poolable broadcaster factory,@ deprecated public   (  class <  ?  extends  broadcaster >  clazz  string broadcaster life cycle policy  atmosphere config c )  {  super ( clazz broadcaster life cycle policy c )  ;   }  
496,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\pool\PoolableBroadcasterFactory.java,add,@ override public boolean   (  broadcaster b  object id )  {  if  ( track pooled broadcaster )   {  super . add ( b id )  ;   }  poolable provider . return broadcaster ( b )  ;  return true ;   }  
497,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\pool\PoolableBroadcasterFactory.java,configure,protected void   (  string broadcaster life cycle policy )  {  super . configure ( broadcaster life cycle policy )  ;   string poolable provider class = config . get init parameter ( pooleable   provider  unbounded apache poolable provider . class . get name (  )  )  ;  try  {  poolable provider = config . framework (  )  . new class instance (  poolable provider . class  (  class <  poolable provider >  ) io utils . load class (  poolable provider . class poolable provider class )  )  ;   }  catch  (   exception e )   {  throw new  runtime exception ( e )  ;   }  poolable provider . configure ( config )  ;  track pooled broadcaster = config . get init parameter ( support   tracked   broadcaster false )  ;   }  
498,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\pool\PoolableBroadcasterFactory.java,create broadcaster,"public  broadcaster   (  )  {  return create broadcaster ( clazz ""pooled"" )  ;   }  "
499,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\pool\PoolableBroadcasterFactory.java,get,@ override public  broadcaster   (  )  {  return get ( pooled   id )  ;   }  
500,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\pool\PoolableBroadcasterFactory.java,lookup,@ override public  < t extends  broadcaster > t   (  class < t >  c  object id boolean create if null boolean unique )  {   broadcaster broadcaster = null ;  if  ( track pooled broadcaster )   {  broadcaster = store . get ( id )  ;   }  if  ( broadcaster  =  =  null )   {  broadcaster = poolable provider . borrowb
501,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\pool\PoolableBroadcasterFactory.java,lookup all,@ override public  collection <  broadcaster >    (  )  {  if  ( track pooled broadcaster )   {  super . lookup all (  )  ;   }  return empty collection ;   }  
502,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\pool\PoolableBroadcasterFactory.java,poolable provider,public  poolable broadcaster factory   (  poolable provider <  ?  extends  broadcaster  ?  >  poolable provider )  {  this . poolable provider = poolable provider ;  this . poolable provider . configure ( config )  ;  return this ;   }  
503,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\pool\PoolableBroadcasterFactory.java,remove,"@ override public boolean   (  object id )  {  if  ( track pooled broadcaster )   {  super . remove ( id )  ;   }  else  {  logger . debug ( "" operation no supported"" )  ;   }  return false ;   }  "
504,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\pool\PoolableBroadcasterFactory.java,remove all atmosphere resource,"@ override public void   (  atmosphere resource r )  {  logger . debug ( "" operation no supported"" )  ;  if  ( track pooled broadcaster )   {  super . remove all atmosphere resource ( r )  ;   }   }  "
505,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\pool\PoolableBroadcasterFactory.java,track pooled broadcaster,public boolean   (  )  {  return track pooled broadcaster ;   }  
506,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\lifecycle\LifecycleHandler.java,destroy,"void   ( boolean resume )  {  if  ( resume )   {  logger . info ( "" all  atmosphere resource will now be resumed from  broadcaster  {  } "" broadcaster . getid (  )  )  ;  broadcaster . resume all (  )  ;   }  broadcaster . destroy (  )  ;  if  ( broadcaster . current lifecycle task (  )   !  =  null )   {  broadcaster . current lifecycle task (  )  . cancel ( true )  ;   }   }  "
507,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\lifecycle\LifecycleHandler.java,notify destroy listener,protected void   (  default broadcaster broadcaster )  {  for  (   broadcaster life cycle policy listener b : broadcaster . life cycle listeners (  )  )   {  b . on destroy (  )  ;   }   }  
508,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\lifecycle\LifecycleHandler.java,notify empty listener,protected void   (  default broadcaster broadcaster )  {  for  (   broadcaster life cycle policy listener b : broadcaster . life cycle listeners (  )  )   {  b . on empty (  )  ;   }   }  
509,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\lifecycle\LifecycleHandler.java,notify idle listener,protected void   (  default broadcaster broadcaster )  {  for  (   broadcaster life cycle policy listener b : broadcaster . life cycle listeners (  )  )   {  b . on idle (  )  ;   }   }  
510,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\lifecycle\LifecycleHandler.java,off,public  lifecycle handler   (  default broadcaster broadcaster )  {   future <  ?  >  current lifecycle task = broadcaster . current lifecycle task (  )  ;  if  ( current lifecycle task  !  =  null )   {  current lifecycle task . cancel ( true )  ;   }  notify destroy listener ( broadcaster )  ;  return this ;   }  
511,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\lifecycle\LifecycleHandler.java,off if empty,public  lifecycle handler   (  default broadcaster broadcaster )  {   broadcaster config bc = broadcaster . get broadcaster config (  )  ;   collection <  atmosphere resource >  resources = broadcaster . get atmosphere resources (  )  ;  final  broadcaster life cycle policy life cycle policy = broadcaster . get broadcaster life cycle policy (  )  ;  if  ( resources . is empty (  )  )   {  notify empty listener ( broadcaster )  ;  if  ( broadcaster . get scope (  )   !  =   broadcaster . scope . request && life cycle policy . get life cycle policy (  )   =  =  empty )   {  broadcaster . release external resources (  )  ;   }  else if  ( broadcaster . get scope (  )   =  =   broadcaster . scope . request || life cycle policy . get life cycle policy (  )   =  =  empty   destroy )   {  bc . get atmosphere config (  )  . get broadcaster factory (  )  . remove ( broadcaster broadcaster . getid (  )  )  ;  broadcaster . destroy (  )  ;   }   }  return this ;   }  
512,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\lifecycle\LifecycleHandler.java,on,"public  lifecycle handler   ( final  default broadcaster broadcaster )  {  final  broadcaster life cycle policy life cycle policy = broadcaster . get broadcaster life cycle policy (  )  ;  final  broadcaster config bc = broadcaster . get broadcaster config (  )  ;  final  collection <  atmosphere resource >  resources = broadcaster . get atmosphere resources (  )  ;  final  atomic boolean recent activity = broadcaster . recent activity (  )  ;  if  ( logger . is trace enabled (  )  )   {  logger . trace ( "" {  }  new lifecycle policy:  {  } "" broadcaster . getid (  )  life cycle policy . get life cycle policy (  )  . name (  )  )  ;   }  if  ( broadcaster . current lifecycle task (  )   !  =  null )   {  broadcaster . current lifecycle task (  )  . cancel ( false )  ;   }  if  ( bc  !  =  null && bc . get scheduled executor service (  )   =  =  null )   {  logger . error ( "" no  broadcaster's  scheduler executor service has been configured on  {  }  .   broadcaster life cycle policy won't work . "" broadcaster . getid (  )  )  ;  return this ;   }  if  ( life cycle policy . get life cycle policy (  )   =  =  idle || life cycle policy . get life cycle policy (  )   =  =  idle   resume || life cycle policy . get life cycle policy (  )   =  =  idle   destroy )   {  recent activity . set ( false )  ;  int time = life cycle policy . get timeout (  )  ;  if  ( time  =  =   - 1 )   {  throw new  illegal state exception ( "" broadcaster life cycle policy time is not set"" )  ;   }   future <  ?  >  current lifecycle task = bc . get scheduled executor service (  )  . schedule at fixed rate ( new  runnable (  )  {  @ override public void run (  )  {  try  {  if  ( recent activity . get and set ( false )  )   {  return ;   }  else if  ( resources . is empty (  )  )   {  if  ( life cycle policy . get life cycle policy (  )   =  =  idle )   {  notify empty listener ( broadcaster )  ;  notify idle listener ( broadcaster )  ;  broadcaster . release external resources (  )  ;  logger . debug ( "" applying  broadcaster life cycle policy idle policy to  broadcaster  {  } "" broadcaster . getid (  )  )  ;  if  ( broadcaster . current lifecycle task (  )   !  =  null )   {  broadcaster . current lifecycle task (  )  . cancel ( true )  ;   }   }  else if  ( life cycle policy . get life cycle policy (  )   =  =  idle   destroy )   {  notify empty listener ( broadcaster )  ;  notify idle listener ( broadcaster )  ;  destroy ( false )  ;  logger . debug ( "" applying  broadcaster life cycle policy idle   destroy policy to  broadcaster  {  } "" broadcaster . getid (  )  )  ;   }   }  else if  ( life cycle policy . get life cycle policy (  )   =  =  idle   resume )   {  notify idle listener ( broadcaster )  ;  destroy ( true )  ;  logger . debug ( "" applying  broadcaster life cycle policy idle   resume policy to  broadcaster  {  } "" broadcaster . getid (  )  )  ;   }   }  catch  (   throwable t )   {  if  ( broadcaster . is destroyed (  )  )   {  logger . trace ( "" scheduled  broadcaster life cycle policy exception"" t )  ;   }  else  {  logger . warn ( "" scheduled  broadcaster life cycle policy exception"" t )  ;   }   }   }  void destroy (  boolean resume )  {  if  ( resume )   {  logger . info ( "" all  atmosphere resource will now be resumed from  broadcaster  {  } "" broadcaster . getid (  )  )  ;  broadcaster . resume all (  )  ;   }  broadcaster . destroy (  )  ;  if  ( broadcaster . current lifecycle task (  )   !  =  null )   {  broadcaster . current lifecycle task (  )  . cancel ( true )  ;   }   }   }   time time life cycle policy . get time unit (  )  )  ;  broadcaster . current lifecycle task ( current lifecycle task )  ;   }  return this ;   }  "
513,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\lifecycle\LifecycleHandler.java,run,@ override public void   (  )  {  try  {  if  ( recent activity . get and set ( false )  )   {  return ;   }  else if  ( resources . is empty (  )  )   {  if  ( life cycle policy . get life cycle policy (  )   =  =  idle )   {  notify empty listener ( broadcaster )  ;  notify idle listener ( broadcaster )  ;  broadcaster . release ext
514,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\pool\BoundedApachePoolableProvider.java,borrow broadcaster,"@ override public  broadcaster   (  object id )  {  try  {  return  default broadcaster . class . cast ( generic object pool . borrow object ( wait for )  )  . rename ( id . to string (  )  )  ;   }  catch  (   exception e )   {  logger . error ( """" e )  ;  throw new  runtime exception ( e )  ;   }   }  "
515,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\pool\BoundedApachePoolableProvider.java,configure generic object pool config,@ override protected void   (  )  {  pool config . set max total ( config . get init parameter ( broadcaster   factory   pool   size 200 )  )  ;  wait for =  time unit . seconds . to millis ( config . get init parameter (  application config . broadcaster   factory   empty   wait   time   in   seconds 10000 )  )  ;   }  
516,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\pool\UnboundedApachePoolableProvider.java,active broadcaster,@ override public long   (  )  {  return generic object pool . get num active (  )  ;   }  
517,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\pool\UnboundedApachePoolableProvider.java,borrow broadcaster,"@ override public  broadcaster   (  object id )  {  try  {  return  default broadcaster . class . cast ( generic object pool . borrow object (  )  )  . rename ( id . to string (  )  )  ;   }  catch  (   exception e )   {  logger . error ( """" e )  ;  throw new  runtime exception ( e )  ;   }   }  "
518,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\pool\UnboundedApachePoolableProvider.java,configure,@ override public void   (  atmosphere config config )  {  this . config = config ;  configure generic object pool config (  )  ;  generic object pool = new  generic object pool <  broadcaster >  ( new  broadcaster factory (  )  pool config abandoned config )  ;   }  
519,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\pool\UnboundedApachePoolableProvider.java,configure generic object pool config,protected void   (  )  {  pool config . set max total (  integer . max   value )  ;   }  
520,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\pool\UnboundedApachePoolableProvider.java,create,"@ override public  broadcaster   (  )  {  logger . trace ( "" creating  broadcaster  {  } "" count . get and increment (  )  )  ;  return  poolable broadcaster factory . class . cast ( config . get broadcaster factory (  )  )  . create broadcaster (  )  ;   }  "
521,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\pool\UnboundedApachePoolableProvider.java,implementation,@ override public  generic object pool   (  )  {  return generic object pool ;   }  
522,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\pool\UnboundedApachePoolableProvider.java,pool size,@ override public long   (  )  {  return generic object pool . get created count (  )  ;   }  
523,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\pool\UnboundedApachePoolableProvider.java,return broadcaster,"@ override public  poolable provider   (  broadcaster b )  {  logger . trace ( "" return  {  }  now at size  {  } "" b . getid (  )  generic object pool . get num active (  )  )  ;  try  {  generic object pool . return object ( b )  ;   }  catch  (   illegal state exception ex )   {  logger . trace ( """" ex )  ;   }  return this ;   }  "
524,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\pool\UnboundedApachePoolableProvider.java,wrap,"@ override public  pooled object <  broadcaster >    (  broadcaster broadcaster )  {  logger . trace ( "" wapping  object  {  } "" broadcaster . getid (  )  )  ;  return new  default pooled object <  broadcaster >  ( broadcaster )  ;   }  "
525,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\Action.java, action,public   ( type type long timeout )  {  this . timeout = timeout ;  this . type = type ;   }  
526,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\Action.java,equals,@ override public boolean   (  object o )  {  if  ( this  =  =  o )  return true ;  if  ( o  =  =  null || get class (  )   !  =  o . get class (  )  )  return false ;   action action =  (  action ) o ;  if  ( timeout  !  =  action . timeout (  )  )  return false ;  if  ( type  !  =  action . type (  )  )  return false ;  return true ;   }  
527,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\Action.java,hash code,@ override public int   (  )  {  int result =  ( int )  ( timeout ^  ( timeout  >  >  >  32 )  )  ;  result = 31 * result  +   ( type  !  =  null  ?  type . hash code (  )  : 0 )  ;  return result ;   }  
528,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\Action.java,timeout,"public  action   ( long timeout )  {  if  ( immutable )   {  throw new  illegal state exception ( ""immutable"" )  ;   }  this . timeout = timeout ;  return this ;   }  "
529,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\Action.java,to string,"@ override public  string   (  )  {  return "" action { ""  +  ""timeout = ""  +  timeout  +  ""  type = "" +  type +  ' } ' ;   }  "
530,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\Action.java,type,"public  action   (  action . type type )  {  if  ( immutable )   {  throw new  illegal state exception ( ""immutable"" )  ;   }  this . type = type ;  return this ;   }  "
531,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AnnotationScanningServletContainerInitializer.java,on startup,@ override public void   ( final  set <  class <  ?  >  >  classes final  servlet context servlet context )  throws  servlet exception  {  final  map <  class <  ?  extends  annotation >   set <  class <  ?  >  >  >  classes by annotation = new  hash map <  class <  ?  extends  annotation >   set <  class <  ?  >  >  >  (  )  ;  if  ( class
532,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AnnotationHandler.java,destroy,public void   (  )  {  annotations . clear (  )  ;  processors . clear (  )  ;   }  
533,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AnnotationHandler.java,flush core annotations,"public  annotation handler   (  set <  class <  ?  >  >  classes )  {   list <  class <  ?  extends  annotation >  >  l = new  array list <  >  (  )  ;  for  (   map .  entry <  class <  ?  extends  annotation >   class <  ?  extends  processor >  >  e : annotations . entry set (  )  )   {  if  ( e . get value (  )  . get package (  )  . get name (  )  . equals ( ""org . atmosphere . annotation"" )  && classes . contains ( e . get value (  )  )  )   {  l . add ( e . get key (  )  )  ;   }   }  for  (   class <  ?  extends  annotation >  c : l )   {  annotations . remove ( c )  ;   }  return this ;   }  "
534,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AnnotationHandler.java,handle annotation,"public  annotation handler   ( final  atmosphere framework framework final  class <  ?  extends  annotation >  annotation final  class <  ?  >  discovered class )  {  logger . info ( "" found  annotation in  {  }  being scanned:  {  } "" discovered class annotation )  ;  framework . annotation scanned ( true )  ;   class <  ?  extends  processor >  a = annotations . get ( annotation )  ;  if  ( a  !  =  null )   {   processor p = processors . get ( a )  ;  if  ( p  =  =  null )   {  try  {  p = framework . new class instance (  processor . class a )  ;   }  catch  (   exception e )   {  logger . warn ( "" unable to create  processor  {  } "" p )  ;   }  processors . put ( a p )  ;   }  p . handle ( framework discovered class )  ;  logger . trace ( "" annotation  {  }  handled by  {  } "" annotation p . get class (  )  . get name (  )  )  ;   }  else  {  logger . trace ( "" annotation  {  }  unhandled"" annotation )  ;   }  return this ;   }  "
535,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AnnotationHandler.java,handle processor,"public  class <  ?  extends  processor >    (  class <  ?  >  clazz )  {  if  (  processor . class . is assignable from ( clazz )  )   {   class <  processor >  p =  (  class <  processor >  ) clazz ;  if  ( logger . is trace enabled (  )  )   {  logger . trace ( "" processor  {  }  associated with  {  } "" p p . get annotation (  atmosphere annotation . class )  . value (  )  )  ;   }  annotations . put ( p . get annotation (  atmosphere annotation . class )  . value (  )  p )  ;  return p ;   }  return null ;   }  "
536,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AnnotationHandler.java,handled class,public  class <  ?  extends  annotation > []   (  )  {   collection <  class <  ?  extends  annotation >  >  c = annotations . key set (  )  ;  return c . to array ( new  class[0] )  ;   }  
537,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AsynchronousProcessor.java, asynchronous processor,"public   (  atmosphere config config )  {  this . config = config ;  closing time =  long . value of ( config . get init parameter (  application config . closed   atmosphere   think   time ""0"" )  )  ;  is servlet30 =  servlet30 comet support . class . is assignable from ( this . get class (  )  )  ;  close on cancel = config . get init parameter (  application config . close   stream   on   cancel false )  ;  config . startup hook ( new  atmosphere config .  startup hook (  )  {  @ override public void started (   atmosphere framework framework )  {  mapper = framework . end point mapper (  )  ;   }   }   )  ;   }  "
538,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AsynchronousProcessor.java,allow session timeout removal,protected boolean   (  )  {  return config . is session timeout removal allowed (  )  ;   }  
539,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AsynchronousProcessor.java,call,@ override public  object   (  )  throws  exception  {  end request ( r true )  ;  return null ;   }  
540,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AsynchronousProcessor.java,cancelled,"public  action   ( final  atmosphere request req final  atmosphere response res )  throws io exception   servlet exception  {  logger . trace ( "" cancelling  {  } "" req )  ;  final  atmosphere resource impl r =  atmosphere resource impl . class . cast ( req . resource (  )  )  ;  if  ( closing time  >  0 )   {   executors factory . get scheduler ( config )  . schedule ( new  callable <  object >  (  )  {  @ override public  object call (  )  throws  exception  {  end request ( r true )  ;  return null ;   }   }   closing time  time unit . milliseconds )  ;   }  else  {  if  ( complete lifecycle ( req . resource (  )  true )  )   {  config . framework (  )  . notify (  action . type . cancelled req res )  ;   }   }  return cancelled action ;   }  "
541,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AsynchronousProcessor.java,complete,@ override public  async support   (  atmosphere resource impl r )  {  return this ;   }  
542,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AsynchronousProcessor.java,complete lifecycle,"public boolean   ( final  atmosphere resource r boolean cancelled )  {  if  ( r  !  =  null &&  ! r . is cancelled (  )  &&  !  atmosphere resource impl . class . cast ( r )  . get and set in closing phase (  )  )   {  logger . trace ( "" finishing lifecycle for  atmosphere resource  {  } "" r . uuid (  )  )  ;  final  atmosphere resource impl impl =  atmosphere resource impl . class . cast ( r )  ;  try  {  if  ( impl . is cancelled (  )  )   {  logger . debug ( "" {  }  is already cancelled"" impl . uuid (  )  )  ;  return false ;   }   atmosphere resource event impl e = impl . get atmosphere resource event (  )  ;  if  ( config . framework (  )  . is destroyed (  )  )   {  cancelled = true ;   }  if  (  ! e . is closed by client (  )  )   {  if  ( cancelled )   {  e . set cancelled ( cancelled )  ;   }  else  {  e . set is resumed on timeout ( true )  ;   broadcaster b = r . get broadcaster (  )  ;  if  ( b instanceof  default broadcaster )   {   (  (  default broadcaster ) b )  . broadcast on resume ( r )  ;   }   }   }  invoke atmosphere handler ( impl )  ;   }  catch  (   throwable ex )   {  logger . error ( "" failed to cancel resource:  {  } "" impl . uuid (  )  ex )  ;   }  finally  {  try  {  impl . notify listeners (  )  ;  if  ( close on cancel )   {  try  {  impl . get response ( false )  . get output stream (  )  . close (  )  ;   }  catch  (   throwable t )   {  try  {  impl . get response ( false )  . get writer (  )  . close (  )  ;   }  catch  (   throwable t2 )   {   }   }   }  impl . set is in scope ( false )  ;  impl . cancel (  )  ;   }  catch  (   throwable t )   {  logger . debug ( ""complete lifecycle"" t )  ;   }  finally  {  impl .    destroy (  )  ;   }   }  return true ;   }  else  {  logger . trace ( "" atmosphere resource  {  }  was already cancelled or gc"" r  !  =  null  ?  r . uuid (  )  : ""null"" )  ;  return false ;   }   }  "
543,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AsynchronousProcessor.java,configure workflow,"private  atmosphere resource impl   (  atmosphere resource impl resource  atmosphere handler wrapper handler wrapper  atmosphere request req  atmosphere response res )  {   broadcaster b = handler wrapper . broadcaster ;  if  ( b . is destroyed (  )  )   {   broadcaster factory f = config . get broadcaster factory (  )  ;  synchronized  ( f )   {  f . remove ( b b . getid (  )  )  ;  try  {  handler wrapper . broadcaster = f . get ( b . getid (  )  )  ;   }  catch  (   illegal state exception ex )   {  logger . trace ( """" ex )  ;  handler wrapper . broadcaster = f . lookup ( b . getid (  )  true )  ;   }   }   }  if  ( resource  =  =  null )   {  resource =  (  atmosphere resource impl ) req . get attribute (  framework config . injected   atmosphere   resource )  ;   }  if  ( resource  =  =  null )   {  resource =  (  atmosphere resource impl ) config . resources factory (  )  . create ( config handler wrapper . broadcaster res this handler wrapper . atmosphere handler )  ;   }  else  {  try  {  resource . get broadcaster (  )  ;   }  catch  (   illegal state exception ex )   {  resource . set broadcaster ( handler wrapper . broadcaster )  ;   }  resource . atmosphere handler ( handler wrapper . atmosphere handler )  ;   }  req . set attribute ( atmosphere   resource resource )  ;  req . set attribute ( atmosphere   handler   wrapper handler wrapper )  ;  req . set attribute ( skip   atmospherehandler . name (  )   boolean . false )  ;  return resource ;   }  "
544,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AsynchronousProcessor.java,end request,public void   (  atmosphere resource impl r boolean cancel )  {  if  ( complete lifecycle ( r cancel )  )   {  config . framework (  )  . notify (  action . type . cancelled r . get request ( false )  r . get response ( false )  )  ;   }   }  
545,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AsynchronousProcessor.java,get container name,public  string   (  )  {  return config . get servlet config (  )  . get servlet context (  )  . get server info (  )  ;   }  
546,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AsynchronousProcessor.java,invoke atmosphere handler,"protected void   (  atmosphere resource impl r )  throws io exception  {  if  ( r . is in scope (  )  )   {   string disable on event = r . get atmosphere config (  )  . get init parameter (  application config . disable   onstate   event )  ;  r . get atmosphere resource event (  )  . set message ( r . write on timeout (  )  )  ;  try  {  if  ( disable on event  =  =  null ||  ! disable on event . equals (  string . value of ( true )  )  )   {   atmosphere handler atmosphere handler = r . get atmosphere handler (  )  ;  if  ( atmosphere handler  !  =  null && r . is in scope (  )  )   {  try  {   utils . inject ( r )  ;   }  catch  (   illegal access exception e )   {  logger . warn ( """" e )  ;   }  atmosphere handler . on state change ( r . get atmosphere resource event (  )  )  ;   }   }   }  catch  (  io exception ex )   {  try  {  r . on throwable ( ex )  ;   }  catch  (   throwable t )   {  logger . warn ( ""failed calling on throwable (  ) "" ex )  ;   }   }   }  else  {  logger . trace ( "" atmosphere resource out of scope  {  } "" r . uuid (  )  )  ;  return ;   }   }  "
547,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AsynchronousProcessor.java,invoke interceptors,"public  action   (  list <  atmosphere interceptor >  c  atmosphere resource r int tracing )  {   action a =  action . continue ;  for  (   atmosphere interceptor arc : c )   {  if  (  !  atmosphere resource impl . class . cast ( r )  . is in scope (  )  )   {  logger . warn ( "" request closed during processing  {  }  and transport  {  } "" r . uuid (  )  r . transport (  )  )  ;  return  action . cancelled ;   }  try  {  a = arc . inspect ( r )  ;   }  catch  (   exception ex )   {  logger . error ( "" interceptor  {  }  crashed .   processing will continue with other interceptor . "" arc ex )  ;  continue ;   }  if  ( a  =  =  null )   {  logger . trace ( "" action was null for  {  } "" arc )  ;  a =  action . cancelled ;   }  boolean skip = a . type (  )   =  =  skip   atmospherehandler ;  if  ( skip )   {  logger . trace ( "" atmosphere interceptor  {  }  asked to skip the  atmosphere handler for  {  } "" arc r . uuid (  )  )  ;  r . get request (  )  . set attribute ( skip   atmospherehandler . name (  )   boolean . true )  ;   }  if  ( a . type (  )   !  =   action . type . continue )   {  logger . trace ( "" interceptor  {  }  interrupted the dispatch for  {  }  with ""  +  a arc r . uuid (  )  )  ;  return a ;   }  if  ( logger . is trace enabled (  )  )   {  logger . trace ( ""\t  {  } :  {  }  for  {  } "" new  string[] {  string . value of ( tracing +  +  )  arc . get class (  )  . get name (  )  r . uuid (  )  }  )  ;   }   }  return a ;   }  "
548,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AsynchronousProcessor.java,map,"protected  atmosphere handler wrapper   (  atmosphere request req )  throws  servlet exception  {   atmosphere handler wrapper atmosphere handler wrapper = mapper . map ( req config . handlers (  )  )  ;  if  ( atmosphere handler wrapper  =  =  null )   {  logger . debug ( "" no  atmosphere handler maps request for  {  }  with mapping  {  } "" req . get requesturi (  )  config . handlers (  )  )  ;  throw new  atmosphere mapping exception ( "" no  atmosphere handler maps request for ""  +  req . get requesturi (  )  )  ;   }  return atmosphere handler wrapper ;   }  "
549,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AsynchronousProcessor.java,path,"private  string   (  atmosphere request request )  {   string path ;   string path info = null ;  try  {  path info = request . get path info (  )  ;   }  catch  (   illegal state exception ex )   {   }  if  ( path info  !  =  null )   {  path = request . get servlet path (  )   +  path info ;   }  else  {  path = request . get servlet path (  )  ;   }  if  ( path  =  =  null || path . is empty (  )  )   {  path = "" / "" ;   }  return path ;   }  "
550,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AsynchronousProcessor.java,post interceptors,"public void   (  list <  atmosphere interceptor >  c  atmosphere resource r )  {   atmosphere interceptor arc = null ;  for  ( int i = c . size (  )   -  1 ;  i  >   - 1 ;  i -  -  )   {  try  {  arc = c . get ( i )  ;  arc . post inspect ( r )  ;   }  catch  (   exception ex )   {  logger . error ( "" interceptor  {  }  crashed .   processing will continue with other interceptor . "" arc ex )  ;  continue ;   }   }   }  "
551,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AsynchronousProcessor.java,resumed,public  action   (  atmosphere request request  atmosphere response response )  throws io exception   servlet exception  {   atmosphere resource impl r =  (  atmosphere resource impl ) request . get attribute ( atmosphere   resource )  ;  if  ( r  =  =  null )  return  action . cancelled ;   atmosphere handler atmosphere handler = r . get atmosphere handler (  )  ;   atmosphere resource event event = r . get atmosphere resource event (  )  ;  if  ( event  !  =  null && event . is resuming (  )  &&  ! event . is cancelled (  )  )   {  synchronized  ( r )   {  atmosphere handler . on state change ( event )  ;   }   }  return  action . resume ;   }  
552,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AsynchronousProcessor.java,shutdown,"protected void   (  )  {   collection <  atmosphere resource >  c = config . resources factory (  )  . find all (  )  ;  for  (   atmosphere resource r : c )   {  try  {  r . close (  )  ;   }  catch  (  io exception e )   {  logger . trace ( """" e )  ;   }   }   }  "
553,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AsynchronousProcessor.java,started,@ override public void   (  atmosphere framework framework )  {  mapper = framework . end point mapper (  )  ;   }  
554,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AsynchronousProcessor.java,support session,protected boolean   (  )  {  return config . is support session (  )  ;   }  
555,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AsynchronousProcessor.java,support web socket,@ override public boolean   (  )  {  return false ;   }  
556,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AsynchronousProcessor.java,suspended,public  action   (  atmosphere request request  atmosphere response response )  throws io exception   servlet exception  {  return action ( request response )  ;   }  
557,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AsynchronousProcessor.java,timedout,"public  action   (  atmosphere request req  atmosphere response res )  throws io exception   servlet exception  {  logger . trace ( "" timing out  {  } "" req )  ;  end request (  atmosphere resource impl . class . cast ( req . resource (  )  )  false )  ;  return timedout action ;   }  "
558,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AsyncIOInterceptorAdapter.java,error,"@ override public byte[]   (  atmosphere response response int status code  string reason phrase )  {  return  ( ""error: ""  +  status code  +  "":"" +  reason phrase )  . get bytes (  )  ;   }  "
559,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AsyncIOInterceptorAdapter.java,transform payload,@ override public byte[]   (  atmosphere response response byte[] response draft byte[] data )  throws io exception  {  return response draft ;   }  
560,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AsyncIOWriterAdapter.java,flush,@ override public  asyncio writer   (  atmosphere response r )  throws io exception  {  return this ;   }  
561,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AsyncIOWriterAdapter.java,redirect,@ override public  asyncio writer   (  atmosphere response r  string location )  throws io exception  {  return this ;   }  
562,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AsyncIOWriterAdapter.java,write,@ override public  asyncio writer   (  atmosphere response r byte[] data int offset int length )  throws io exception  {  return this ;   }  
563,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AsyncIOWriterAdapter.java,write error,@ override public  asyncio writer   (  atmosphere response r int error code  string message )  throws io exception  {  return this ;   }  
564,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AsyncSupportListenerAdapter.java,on close,"@ override public void   (  atmosphere request request  atmosphere response response )  {  logger . trace ( "" closing resource  {  }  for request  {  } "" request . resource (  )  request )  ;   }  "
565,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AsyncSupportListenerAdapter.java,on destroyed,"@ override public void   (  atmosphere request request  atmosphere response response )  {  logger . trace ( "" destroyed resource  {  }  for request  {  } "" request . resource (  )  request )  ;   }  "
566,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AsyncSupportListenerAdapter.java,on resume,"@ override public void   (  atmosphere request request  atmosphere response response )  {  logger . trace ( "" resume resource  {  }  for request  {  } "" request . resource (  )  request )  ;   }  "
567,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AsyncSupportListenerAdapter.java,on suspend,"@ override public void   (  atmosphere request request  atmosphere response response )  {  logger . trace ( "" suspended resource  {  }  for request  {  } "" request . resource (  )  request )  ;   }  "
568,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AsyncSupportListenerAdapter.java,on timeout,"@ override public void   (  atmosphere request request  atmosphere response response )  {  logger . trace ( "" timeout resource  {  }  for request  {  } "" request . resource (  )  request )  ;   }  "
569,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFilter.java, atmosphere filter,public   (  )  {  as = new  atmosphere servlet ( true )  ;   }  
570,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFilter.java,destroy,public void   (  )  {  as . destroy (  )  ;   }  
571,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFilter.java,do filter,public void   (  servlet request request  servlet response response  filter chain chain )  throws io exception   servlet exception  {   atmosphere request req =  atmosphere request impl . wrap (  (  http servlet request ) request )  ;   atmosphere response res =  atmosphere response impl . wrap (  (  http servlet response ) response )  ;   action a = null ;  if  ( req . get servlet path (  )   =  =  null ||  ( as . framework (  )  . get servlet context (  )  . get resource ( req . get servlet path (  )  )   =  =  null &&  ! req . get servlet path (  )  . matches ( excluded )  )  )   {  a = as . framework (  )  . do comet support ( req res )  ;   }  if  ( a  =  =  null || a . type (  )   !  =   action . type . suspend )   {  chain . do filter ( request response )  ;   }   }  
572,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFilter.java,get init parameter,@ override public  string   (  string name )  {  return filter config . get init parameter ( name )  ;   }  
573,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFilter.java,get init parameter names,@ override public  enumeration <  string >    (  )  {  return filter config . get init parameter names (  )  ;   }  
574,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFilter.java,get servlet context,@ override public  servlet context   (  )  {  return filter config . get servlet context (  )  ;   }  
575,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFilter.java,get servlet name,@ override public  string   (  )  {  return filter config . get filter name (  )  ;   }  
576,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFilter.java,init,"public void   ( final  filter config filter config )  throws  servlet exception  {  logger . info ( "" atmosphere servlet running as a  filter"" )  ;  as . init ( new  servlet config (  )  {  @ override public  string get servlet name (  )  {  return filter config . get filter name (  )  ;   }  @ override public  servlet context get servlet context (  )  {  return filter config . get servlet context (  )  ;   }  @ override public  string get init parameter (   string name )  {  return filter config . get init parameter ( name )  ;   }  @ override public  enumeration <  string >  get init parameter names (  )  {  return filter config . get init parameter names (  )  ;   }   }   )  ;   string s = filter config . get init parameter (  application config . atmosphere   excluded   file )  ;  if  ( s  !  =  null )   {  excluded = s ;   }   }  "
577,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereConfig.java, atmosphere config,protected   (  atmosphere framework framework )  {  this . framework = framework ;   }  
578,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereConfig.java,destroy,"protected void   (  )  {  for  (   shutdown hook h : shutdown hooks )   {  try  {  h . shutdown (  )  ;   }  catch  (   exception ex )   {  logger . warn ( """" ex )  ;   }   }  shutdown hooks . clear (  )  ;  start up hook . clear (  )  ;  atmosphere handler config . clear (  )  ;   }  "
579,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereConfig.java,framework,public  atmosphere framework   (  )  {  return framework ;   }  
580,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereConfig.java,get atmosphere handler config,public  list <  atmosphere handler config >    (  )  {  return atmosphere handler config ;   }  
581,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereConfig.java,get broadcaster factory,public  broadcaster factory   (  )  {  return framework . get broadcaster factory (  )  ;   }  
582,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereConfig.java,get init parameter,public int   (  string key int default value )  {   string s = get init parameter ( key )  ;  if  ( s  =  =  null )   {  return default value ;   }  return  integer . value of ( s )  ;   }  
583,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereConfig.java,get init parameter names,public  enumeration <  string >    (  )  {  return framework (  )  . get servlet config (  )  . get init parameter names (  )  ;   }  
584,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereConfig.java,get servlet config,public  servlet config   (  )  {  return framework . get servlet config (  )  ;   }  
585,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereConfig.java,get servlet context,public  servlet context   (  )  {  return framework . get servlet context (  )  ;   }  
586,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereConfig.java,get web server name,public  string   (  )  {  return framework . get async support (  )  . get container name (  )  ;   }  
587,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereConfig.java,handlers,public  map <  string  atmosphere framework .  atmosphere handler wrapper >    (  )  {  return framework . get atmosphere handlers (  )  ;   }  
588,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereConfig.java,init complete,"protected void   (  )  {  for  (   startup hook h : start up hook )   {  try  {  h . started ( framework )  ;   }  catch  (   exception ex )   {  logger . warn ( """" ex )  ;   }   }  start up hook . clear (  )  ;   }  "
589,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereConfig.java,is session timeout removal allowed,public boolean   (  )  {  return session timeout removal allowed ;   }  
590,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereConfig.java,is support session,public boolean   (  )  {  return support session ;   }  
591,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereConfig.java,is throw exception on cloned,public boolean   (  )  {  return this . throw exception on cloned ;   }  
592,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereConfig.java,meta broadcaster,public  meta broadcaster   (  )  {  return framework . meta broadcaster (  )  ;   }  
593,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereConfig.java,populate,public  atmosphere config   (  atmosphere config config )  {  atmosphere handler config = config . atmosphere handler config ;  support session = config . support session ;  session timeout removal allowed = config . session timeout removal allowed ;  throw exception on cloned = config . throw exception on cloned ;  framework = config . framework ;  properties . put all ( config . properties )  ;  shutdown hooks = config . shutdown hooks ;  start up hook = config . start up hook ;  return this ;   }  
594,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereConfig.java,properties,public  map <  string  object >    (  )  {  return properties ;   }  
595,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereConfig.java,resources factory,public  atmosphere resource factory   (  )  {  return framework . atmosphere factory (  )  ;   }  
596,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereConfig.java,session factory,public  atmosphere resource session factory   (  )  {  return framework . session factory (  )  ;   }  
597,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereConfig.java,set session timeout removal allowed,public void   ( boolean session timeout removal allowed )  {  this . session timeout removal allowed = session timeout removal allowed ;   }  
598,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereConfig.java,set support session,public void   ( boolean support session )  {  this . support session = support session ;   }  
599,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereConfig.java,set throw exception on cloned,public void   ( boolean throw exception on cloned )  {  this . throw exception on cloned = throw exception on cloned ;   }  
600,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFrameworkInitializer.java, atmosphere framework initializer,public   ( boolean is filter boolean auto detect handlers )  {  this . is filter = is filter ;  this . auto detect handlers = auto detect handlers ;   }  
601,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFrameworkInitializer.java,configure framework,"public  atmosphere framework initializer   (  servlet config sc boolean init boolean use native  class <  ?  extends  atmosphere framework >  framework class )  throws  servlet exception  {  if  ( framework  =  =  null )   {  if  ( sc . get servlet context (  )  . get major version (  )   >  2 )   {  try  {  framework =  (  atmosphere framework ) sc . get servlet context (  )  . get attribute ( sc . get servlet context (  )  . get servlet registration ( sc . get servlet name (  )  )  . get name (  )  )  ;   }  catch  (   exception ex )   {  if  (  unsupported operation exception . class . is assignable from ( ex . get class (  )  )  )   {  logger . warn ( "" web logic 12c unable to retrieve  servlet .   please make sure your servlet - name is ' atmosphere servlet' ""  +  ""or set org . atmosphere . servlet to the current value"" )  ;   string name = sc . get init parameter (  application config . servlet   name )  ;  if  ( name  =  =  null )   {  name =  atmosphere servlet . class . get simple name (  )  ;   }  framework =  (  atmosphere framework ) sc . get servlet context (  )  . get attribute ( name )  ;   }  else  {  logger . trace ( """" ex )  ;   }   }   }  if  ( framework  =  =  null )   {  framework = new atmosphere framework ( framework class is filter auto detect handlers )  ;   }   }  framework . set use native implementation ( use native )  ;  if  ( init )  framework . init ( sc )  ;  return this ;   }  "
602,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFrameworkInitializer.java,destroy,public void   (  )  {  if  ( framework  !  =  null )   {  framework . destroy (  )  ;  framework = null ;   }   }  
603,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFrameworkInitializer.java,framework,public  atmosphere framework   (  )  {  if  ( framework  =  =  null )   {  framework = new atmosphere framework (  atmosphere framework . class is filter auto detect handlers )  ;   }  return framework ;   }  
604,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFrameworkInitializer.java,get servlet context,@ override public  servlet context   (  )  {  return c ;   }  
605,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFrameworkInitializer.java,new atmosphere framework,"public static  atmosphere framework   (  servlet context sc boolean is filter boolean auto detect handlers )  {   string meta service path = sc . get init parameter ( meta   service   path )   =  =  null  ?  meta   service : sc . get init parameter ( meta   service   path )  ;  try  {  final  map <  string  atmosphere framework .  meta service action >  config = io utils . read service file ( meta service path  +   atmosphere framework . class . get name (  )  )  ;  sc . set attribute (  atmosphere framework .  meta service action . class . get name (  )  config )  ;  for  (  final  map .  entry <  string  atmosphere framework .  meta service action >  action : config . entry set (  )  )   {  final  class c = io utils . load class (  atmosphere framework . class action . get key (  )  )  ;  if  (  atmosphere framework . class . is assignable from ( c )  )   {  logger . info ( "" found a definition of  atmosphere framework  {  }  under  {  } "" c meta service path )  ;  return new atmosphere framework ( c is filter auto detect handlers )  ;   }   }   }  catch  (   exception ex )   {  logger . error ( """" ex )  ;   }  return new atmosphere framework (  atmosphere framework . class is filter auto detect handlers sc )  ;   }  "
606,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java, atmosphere framework,public   ( boolean is filter boolean auto detect handlers )  {  this . is filter = is filter ;  this . auto detect handlers = auto detect handlers ;  config = new atmosphere config (  )  ;   }  
607,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java, atmosphere handler wrapper,public   ( final  atmosphere handler atmosphere handler  broadcaster broadcaster final  atmosphere config config )  {  this . atmosphere handler = atmosphere handler ;  this . broadcaster = broadcaster ;  hook injection ( config )  ;  wilcard mapping = false ;   }  
608,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java, meta service action,private   ( final  meta service procedure p )  {  procedure = p ;   }  
609,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,accept,"@ override public boolean   (  file arg0  string arg1 )  {  return arg1 . ends with ( "" . jar"" )  ;   }  "
610,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,add annotation package,"public  atmosphere framework   (  class <  ?  >  clazz )  {  if  ( clazz . get package (  )   =  =  null )   {  logger . error ( "" class  {  }  must have a package defined"" clazz )  ;   }  else  {  packages . add ( clazz . get package (  )  . get name (  )  )  ;   }  return this ;   }  "
611,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,add atmosphere handler,public  atmosphere framework   (  string mapping  atmosphere handler h  broadcaster broadcaster )  {  add atmosphere handler ( mapping h broadcaster  collections .  <  atmosphere interceptor > empty list (  )  )  ;  return this ;   }  
612,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,add broadcaster cache injector,public  atmosphere framework   (  broadcaster cache inspector b )  {  inspectors . add ( b )  ;  return this ;   }  
613,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,add broadcaster cache listener,public  atmosphere framework   (  broadcaster cache listener b )  {  broadcaster cache listeners . add ( b )  ;  return this ;   }  
614,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,add broadcaster listener,public  atmosphere framework   (  broadcaster listener b )  {  broadcaster factory . add broadcaster listener ( b )  ;  broadcaster listeners . add ( b )  ;  return this ;   }  
615,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,add broadcaster type,public  atmosphere framework   (  string broadcaster type string )  {  broadcaster types . add ( broadcaster type string )  ;  return this ;   }  
616,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,add custom annotation package,public  atmosphere framework   (  class p )  {  annotation packages . add last ( p . get package (  )  . get name (  )  )  ;  return this ;   }  
617,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,add default or app interceptors,protected void   (  )  {  for  (   atmosphere interceptor c : interceptors )   {  add interceptor to all wrappers ( c )  ;   }   }  
618,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,add init parameter,public  atmosphere framework   (  string name  string value )  {  init params . put ( name value )  ;  return this ;   }  
619,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,add interceptor to all wrappers,"protected void   (  atmosphere interceptor c )  {  c . configure ( config )  ;   invokation order . priority p =  invokation order . class . is assignable from ( c . get class (  )  )   ?   invokation order . class . cast ( c )  . priority (  )  :  invokation order . after   default ;  logger . info ( "" installed  atmosphere interceptor  {  }  with priority  {  }  "" c p . name (  )  )  ;  for  (   atmosphere handler wrapper wrapper : atmosphere handlers . values (  )  )   {  add interceptor to wrapper ( wrapper c )  ;   }   }  "
620,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,add interceptor to wrapper,protected void   (  atmosphere handler wrapper wrapper  list <  atmosphere interceptor >  interceptors )  {  for  (   atmosphere interceptor c : this . interceptors )   {  add interceptor to wrapper ( wrapper c )  ;   }  for  (   atmosphere interceptor c : interceptors )   {  add interceptor to wrapper ( wrapper c )  ;  c . configure ( config )  ;   }   }  
621,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,add mapping,private  atmosphere framework   (  string path  atmosphere handler wrapper w )  {  atmosphere handlers . put ( normalize path ( path )  w )  ;  return this ;   }  
622,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,add web socket handler,public  atmosphere framework   (  string path  web socket handler handler  atmosphere handler h  list <  atmosphere interceptor >  l )  {   web socket processor factory . get default (  )  . get web socket processor ( this )  . register web socket handler ( path new  web socket processor .  web socket handler proxy ( broadcaster factory . lookup ( path true )  . get class (  )  handler )  )  ;  add atmosphere handler ( path h l )  ;  return this ;   }  
623,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,allow all classes scan,public  atmosphere framework   ( boolean allow all classes scan )  {  this . allow all classes scan = allow all classes scan ;  return this ;   }  
624,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,allow injection of,@ override public  atmosphere object factory   ( java . lang .  object o )  {  return this ;   }  
625,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,analytics,"protected void   (  )  {  if  (  ! config . get init parameter (  application config . analytics true )  )  return ;  final  string container = get servlet context (  )  . get server info (  )  ;   thread t = new  thread (  )  {  public void run (  )  {  try  {  logger . debug ( "" retrieving  atmosphere's latest version from http: /  / async - io . org / version . html"" )  ;   httpurl connection url connection =  (  httpurl connection ) uri . create ( ""http: /  / async - io . org / version . html"" )  . tourl (  )  . open connection (  )  ;  url connection . set request property ( "" user -  agent"" "" mozilla / 5 . 0"" )  ;  url connection . set request property ( "" connection"" ""keep - alive"" )  ;  url connection . set request property ( "" cache -  control"" ""max - age = 0"" )  ;  url connection . set request property ( "" accept"" ""text / html application / xhtml + xml application / xml ; q = 0 . 9 * / * ; q = 0 . 8"" )  ;  url connection . set request property ( "" accept -  language"" ""en - us en ; q = 0 . 8"" )  ;  url connection . set request property ( "" accept -  charset"" ""iso - 8859 - 1 utf - 8 ; q = 0 . 7 * ; q = 0 . 3"" )  ;  url connection . set request property ( "" if -  modified -  since"" ""iso - 8859 - 1 utf - 8 ; q = 0 . 7 * ; q = 0 . 3"" )  ;  url connection . set instance follow redirects ( true )  ;   buffered reader in = new  buffered reader ( new  input stream reader ( url connection . get input stream (  )  )  )  ;   string input line ;   string new version =  version . get raw version (  )  ;   string client version = null ;   string next major release = null ;  boolean next available = false ;  if  ( new version . index of ( ""snapshot"" )   =  =   - 1 )   {  try  {  while  (  ( input line = in . read line (  )  . trim (  )  )   !  =  null )   {  if  ( input line . starts with ( ""atmo23   version = "" )  )   {  new version = input line . substring ( ""atmo23   version = "" . length (  )  )  ;   }  else if  ( input line . starts with ( ""client3   version = "" )  )   {  client version = input line . substring ( ""client3   version = "" . length (  )  )  ;  break ;   }  else if  ( input line . starts with ( ""atmo   release   version = "" )  )   {  next major release = input line . substring ( ""atmo   release   version = "" . length (  )  )  ;  if  ( next major release . compare to (  version . get raw version (  )  )   >  0 && next major release . to lower case (  )  . index of ( ""rc"" )   =  =   - 1 && next major release . to lower case (  )  . index of ( ""beta"" )   =  =   - 1 )   {  next available = true ;   }   }   }   }  finally  {  if  ( client version  !  =  null )   {  logger . info ( "" latest version of  atmosphere's  java script  client  {  } "" client version )  ;   }  if  ( new version . compare to (  version . get raw version (  )  )   >  0 )   {  if  ( next available )   {  logger . info ( ""\n\n\t atmosphere  framework  updates\n\t minor available  ( bugs fixes ) :  {  } \n\t major available  ( new features ) :  {  } "" new version next major release )  ;   }  else  {  logger . info ( ""\n\n\t atmosphere  framework  updates:\n\t minor  update available  ( bugs fixes ) :  {  } "" new version )  ;   }   }  else if  ( next available )   {  logger . info ( ""\n\n\t atmosphere  framework  updates:\n\t major  update available  ( new features ) :  {  } "" next major release )  ;   }  try  {  in . close (  )  ;   }  catch  (  io exception ex )   {   }  url connection . disconnect (  )  ;   }   }  j google analytics tracker tracker = new j google analytics tracker (  module detection . detect (  )   version . get raw version (  )  ""ua - 31990725 - 1"" )  ;  tracker . track synchronously ( new  focus point ( container new  focus point ( "" atmosphere"" )  )  )  ;   }  catch  (   throwable e )   {   }   }   }   ;  t . set daemon ( true )  ;  t . start (  )  ;   }  "
626,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,annotation processor,public  annotation processor   (  )  {  return annotation processor ;   }  
627,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,annotation processor class name,public  atmosphere framework   (  string annotation processor class name )  {  this . annotation processor class name = annotation processor class name ;  return this ;   }  
628,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,annotation scanned,public  atmosphere framework   ( boolean b )  {  annotation found = b ;  return this ;   }  
629,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,apply,"@ override public void   ( final  atmosphere framework fwk final  class <  ?  >  c )  {  if  (  atmosphere interceptor . class . is assignable from ( c )  )   {  fwk . exclude interceptor ( c . get name (  )  )  ;   }  else  {  logger . warn ( "" {  }  is not a framework service that could be excluded  pull request i"
630,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,async support listener,public  atmosphere framework   (  async support listener async support listener )  {  async support listeners . add ( async support listener )  ;  return this ;   }  
631,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,async support listeners,public  list <  async support listener >    (  )  {  return async support listeners ;   }  
632,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,atmosphere factory,public  atmosphere resource factory   (  )  {  if  ( ar factory  =  =  null )   {  configure atmosphere resource factory (  )  ;   }  return ar factory ;   }  
633,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,atmosphere framework listeners,public  queue <  atmosphere framework listener >    (  )  {  return framework listeners ;   }  
634,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,atmosphere resource listener,public  atmosphere framework   (  atmosphere resource listener atmosphere resource listener )  {  atmosphere resource listeners . add ( atmosphere resource listener )  ;  return this ;   }  
635,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,atmosphere resource listeners,public  list <  atmosphere resource listener >    (  )  {  return atmosphere resource listeners ;   }  
636,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,auto configure service,"protected void   (  servlet context sc )  throws io exception  {   string path = handlers path  !  =  default   handler   path  ?  handlers path : real path ( sc handlers path )  ;  try  {  annotation processor = new class instance (  annotation processor . class  (  class <  annotation processor >  ) io utils . load class ( get class (  )  annotation processor class name )  )  ;  logger . info ( "" atmosphere is using  {  }  for processing annotation"" annotation processor class name )  ;  annotation processor . configure ( config )  ;  if  (  ! packages . is empty (  )  )   {  for  (   string s : packages )   {  annotation processor . scan ( s )  ;   }   }  if  (  ! annotation found )   {  if  ( path  !  =  null )   {  annotation processor . scan ( new  file ( path )  )  ;   }   string path libs = lib path  !  =  default   lib   path  ?  lib path : real path ( sc default   lib   path )  ;  if  ( path libs  !  =  null )   {   file lib folder = new  file ( path libs )  ;   file jars[] = lib folder . list files ( new  filename filter (  )  {  @ override public boolean accept (   file arg0   string arg1 )  {  return arg1 . ends with ( "" . jar"" )  ;   }   }   )  ;  if  ( jars  !  =  null )   {  for  (   file file : jars )   {  annotation processor . scan ( file )  ;   }   }   }   }  if  (  ! annotation found && allow all classes scan )   {  logger . debug ( "" scanning all classes on the classpath"" )  ;  annotation processor . scan all (  )  ;   }   }  catch  (   throwable e )   {  logger . error ( """" e )  ;  return ;   }  finally  {  if  ( annotation processor  !  =  null )   {  annotation processor . destroy (  )  ;   }   }   }  "
637,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,auto detect atmosphere handlers,"public void   (  servlet context servlet context url class loader classloader )  throws  malformedurl exception  uri syntax exception  {  if  (  ! atmosphere handlers . is empty (  )  )  return ;  logger . info ( "" auto detecting atmosphere handlers  {  } "" handlers path )  ;   string real path = servlet context . get real path ( handlers path )  ;  if  ( real path  =  =  null )   {  url u = servlet context . get resource ( handlers path )  ;  if  ( u  =  =  null )  return ;  real path = u . get path (  )  ;   }  load atmosphere handlers from path ( classloader real path )  ;   }  "
638,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,auto detect container,protected void   (  )  {  if  ( get async support (  )   =  =  null )   {  set async support ( create async support resolver (  )  . resolve ( use native implementation use blocking implementation use servlet30 )  )  ;   }   }  
639,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,auto detect web socket handler,"protected void   (  servlet context servlet context url class loader classloader )  throws  malformedurl exception  uri syntax exception  {  if  ( has new web socket protocol )  return ;  logger . info ( "" auto detecting  web socket handler in  {  } "" handlers path )  ;  load web socket from path ( classloader real path ( servlet context handlers path )  )  ;   }  "
640,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,broadcaster cache listeners,public  list <  broadcaster cache listener >    (  )  {  return broadcaster cache listeners ;   }  
641,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,broadcaster filters,public  atmosphere framework   (  broadcast filter f )  {  broadcaster filters . add ( f . get class (  )  . get name (  )  )  ;  for  (   broadcaster b : config . get broadcaster factory (  )  . lookup all (  )  )   {  b . get broadcaster config (  )  . add filter ( f )  ;   }  return this ;   }  
642,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,broadcaster life cycle policy,public  atmosphere framework   (  string broadcaster life cycle policy )  {  this . broadcaster life cycle policy = broadcaster life cycle policy ;  return this ;   }  
643,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,broadcaster listeners,public  list <  broadcaster listener >    (  )  {  return broadcaster listeners ;   }  
644,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,broadcaster types,public  concurrent linked queue <  string >    (  )  {  return broadcaster types ;   }  
645,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,check duplicate,private boolean   ( final  list <  atmosphere interceptor >  interceptor list  class <  ?  extends  atmosphere interceptor >  c )  {  for  (  final  atmosphere interceptor i : interceptor list )   {  if  ( i . get class (  )  . equals ( c )  )   {  return true ;   }   }  return false ;   }  
646,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,check web socket support state,"public void   (  )  {  if  ( atmosphere handlers . is empty (  )  &&  !  simple http protocol . class . is assignable from ( web socket protocol . get class (  )  )  )   {  logger . debug ( "" adding a void  atmosphere handler mapped to  / * to allow  web socket application only"" )  ;  add atmosphere handler (  broadcaster . root   master new  abstract reflector atmosphere handler (  )  {  @ override public void on request (   atmosphere resource r )  throws io exception  {  logger . debug ( "" no  atmosphere handler defined . "" )  ;  if  (  ! r . transport (  )  . equals (  atmosphere resource . transport . websocket )  )   {   web socket . not supported ( r . get request (  )  r . get response (  )  )  ;   }   }  @ override public void destroy (  )  {   }   }   )  ;   }   }  "
647,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,close atmosphere resource,"protected void   (  )  {  for  (   atmosphere resource r : config . resources factory (  )  . find all (  )  )   {  try  {  r . resume (  )  . close (  )  ;   }  catch  (   exception e )   {  logger . trace ( """" e )  ;   }   }   }  "
648,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,compare,@ override public int   (  atmosphere interceptor i1  atmosphere interceptor i2 )  {   invokation order . priority p1  p2 ;  if  ( i1 instanceof  invokation order )   {  p1 =  (  (  invokation order ) i1 )  . priority (  )  ;   }  else  {  p1 =  invokation order . priority . after   default ;   }  if  ( i2 instanceof i
649,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,configure annotation packages,"private void   (  )  {  annotation packages . add (  processor . class . get package (  )  . get name (  )  )  ;   string s = config . get init parameter (  application config . custom   annotation   package )  ;  if  ( s  !  =  null )   {   string[] l = s . split ( "" "" )  ;  for  (   string p : l )   {  annotation packages . add last ( p )  ;   }   }   }  "
650,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,configure atmosphere interceptor,"protected void   (  servlet config sc )  {   string s = sc . get init parameter (  application config . atmosphere   interceptors )  ;  if  ( s  !  =  null )   {   string[] list = s . split ( "" "" )  ;  for  (   string a : list )   {  try  {   atmosphere interceptor ai = new class instance (  atmosphere interceptor . class  (  class <  atmosphere interceptor >  ) io utils . load class ( get class (  )  a . trim (  )  )  )  ;  interceptor ( ai )  ;   }  catch  (   exception e )   {  logger . warn ( """" e )  ;   }   }   }  s = sc . get init parameter (  application config . disable   atmosphereinterceptor )  ;  if  ( s  =  =  null ||  ! ""true"" . equals ignore case ( s )  )   {  logger . info ( "" installing  default  atmosphere interceptors"" )  ;  for  (   class <  ?  extends  atmosphere interceptor >  a : default   atmosphere   interceptors )   {  if  (  ! excluded interceptors . contains ( a . get name (  )  )  )   {  interceptors . add ( newa interceptor ( a )  )  ;   }  else  {  logger . info ( "" dropping  interceptor  {  } "" a . get name (  )  )  ;   }   }  logger . info ( "" set  {  }  to disable them . ""  application config . disable   atmosphereinterceptor )  ;   }  add default or app interceptors (  )  ;   }  "
651,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,configure atmosphere resource factory,"private  atmosphere framework   (  )  {  if  ( ar factory  !  =  null )  return this ;  synchronized  ( this )   {  try  {  ar factory = new class instance (  atmosphere resource factory . class  default atmosphere resource factory . class )  ;   }  catch  (   instantiation exception e )   {  logger . error ( """" e )  ;   }  catch  (   illegal access exception e )   {  logger . error ( """" e )  ;   }  ar factory . configure ( config )  ;   }  return this ;   }  "
652,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,configure broadcaster,"protected void   (  )  {  try  {   iterator <  entry <  string  atmosphere handler wrapper >  >  i = atmosphere handlers . entry set (  )  . iterator (  )  ;   atmosphere handler wrapper w ;   entry <  string  atmosphere handler wrapper >  e ;  while  ( i . has next (  )  )   {  e = i . next (  )  ;  w = e . get value (  )  ;  if  ( w . broadcaster  =  =  null )   {  w . broadcaster = broadcaster factory . get ( w . mapping )  ;   }  else  {  if  ( broadcaster cache class name  !  =  null && w . broadcaster . get broadcaster config (  )  . get broadcaster cache (  )  . get class (  )  . get name (  )  . equals (  default broadcaster cache . class . get name (  )  )  )   {   broadcaster cache cache = new class instance (  broadcaster cache . class  (  class <  broadcaster cache >  ) io utils . load class ( get class (  )  broadcaster cache class name )  )  ;  cache . configure ( config )  ;  w . broadcaster . get broadcaster config (  )  . set broadcaster cache ( cache )  ;   }   }   }   }  catch  (   exception ex )   {  logger . error ( "" unable to configure  broadcaster /  factory /  cache"" ex )  ;   }   }  "
653,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,configure broadcaster factory,"public void   (  )  {  try  {  if  ( is broadcaster specified  =  =  false )   {  broadcaster class name = lookup default broadcaster type ( broadcaster class name )  ;   }  if  ( broadcaster factory class name  !  =  null && broadcaster factory  =  =  null )   {  broadcaster factory = new class instance (  broadcaster factory . class  (  class <  broadcaster factory >  ) io utils . load class ( get class (  )  broadcaster factory class name )  )  ;   class <  ?  extends  broadcaster >  bc =  (  class <  ?  extends  broadcaster >  ) io utils . load class ( get class (  )  broadcaster class name )  ;  broadcaster factory . configure ( bc broadcaster life cycle policy config )  ;   }  if  ( broadcaster factory  =  =  null )   {   class <  ?  extends  broadcaster >  bc =  (  class <  ?  extends  broadcaster >  ) io utils . load class ( get class (  )  broadcaster class name )  ;  broadcaster factory = new class instance (  broadcaster factory . class  default broadcaster factory . class )  ;  broadcaster factory . configure ( bc broadcaster life cycle policy config )  ;   }  for  (   broadcaster listener b : broadcaster listeners )   {  broadcaster factory . add broadcaster listener ( b )  ;   }   }  catch  (   exception ex )   {  logger . error ( "" unable to configure  broadcaster /  factory /  cache"" ex )  ;   }   }  "
654,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,configure detected framework,protected void   (  reflector servlet processor rsp boolean is jersey )  {  rsp . set servlet class name ( jersey   container )  ;   }  
655,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,configure meta broadcaster,"private  atmosphere framework   (  )  {  try  {  meta broadcaster = new class instance (  meta broadcaster . class  default meta broadcaster . class )  ;  meta broadcaster . configure ( config )  ;   }  catch  (   instantiation exception e )   {  logger . error ( """" e )  ;   }  catch  (   illegal access exception e )   {  logger . error ( """" e )  ;   }  return this ;   }  "
656,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,configure object factory,"protected void   (  )  {   string s = config . get init parameter (  application config . object   factory )  ;  if  ( s  !  =  null )   {  try  {   atmosphere object factory aci =  (  atmosphere object factory ) io utils . load class ( get class (  )  s )  . new instance (  )  ;  if  ( aci  !  =  null )   {  logger . debug ( "" found  object factory  {  } "" aci . get class (  )  . get name (  )  )  ;  object factory ( aci )  ;   }   }  catch  (   exception ex )   {  logger . warn ( "" unable to load  atmosphere class instantiator instance"" ex )  ;   }   }  if  (  !  default atmosphere object factory . class . is assignable from ( object factory . get class (  )  )  )   {  logger . trace ( "" object factory already set to  {  } "" object factory )  ;  return ;   }   }  "
657,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,configure query string as request,"protected  map <  string  string >    (  atmosphere request request )  {   map <  string  string >  headers = new  hash map <  string  string >  (  )  ;   string builder q = new  string builder (  )  ;  try  {   string qs = request . get query string (  )  ;  if  ( qs  !  =  null &&  ! qs . is empty (  )  )   {   string[] params = qs . split ( ""&"" )  ;   string[] s ;  for  (   string p : params )   {  s = p . split ( "" = "" 2 )  ;  final  string header = s[0] ;  final  string value = s . length  >  1  ?  s[1] : """" ;  if  ( header . equals ignore case ( "" content -  type"" )  )   {  if  ( request . get content type (  )   =  =  null ||  ! request . get content type (  )  . equals ignore case ( s . length  >  1  ?  value : """" )  )   {  request . content type ( s . length  >  1  ?  url decoder . decode ( value ""utf - 8"" )  : """" )  ;   }   }  if  (  ! header . is empty (  )  &&  ! header . to lower case (  )  . starts with ( ""x - atmo"" )  &&  ! header . equals ignore case (  header config . x   heartbeat   server ) &&  ! header . equals ignore case ( "" content -  type"" ) &&  ! header . equals ignore case ( ""   "" )  )   {  q . append ( header )  . append ( "" = "" )  . append ( s . length  >  1  ?  value : """" )  . append ( ""&"" )  ;   }  headers . put ( header s . length  >  1  ?  value : """" )  ;   }   }   }  catch  (   exception ex )   {  logger . error ( "" unable to parse query string"" ex )  ;   }   string disallow modify query string = config . get init parameter (  application config . disallow   modify   querystring )  ;  if  ( disallow modify query string  =  =  null || disallow modify query string . length (  )   =  =  0 || ""false"" . equals ignore case ( disallow modify query string )  )   {  if  ( q . length (  )   >  0 )   {  q . delete char at ( q . length (  )   -  1 )  ;   }  request . query string ( q . to string (  )  )  ;   }  logger . trace ( "" query  string translated to headers  {  } "" headers )  ;  return headers ;   }  "
658,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,configure request response,"public  atmosphere framework   (  atmosphere request req  atmosphere response res )  throws  unsupported encoding exception  {  req . set attribute ( property   use   stream use stream for flushing comments )  ;  req . set attribute ( broadcaster   class broadcaster class name )  ;  req . set attribute ( atmosphere   config config )  ;  req . set attribute ( throw   exception   on   cloned   request """"  +  config . is throw exception on cloned (  )  )  ;  boolean skip = true ;   string s = config . get init parameter ( allow   querystring   as   request )  ;  if  ( s  !  =  null )   {  skip =  boolean . value of ( s )  ;   }  if  (  ! skip || req . get attribute ( websocket   suspend )   =  =  null )   {   map <  string  string >  headers = configure query string as request ( req )  ;   string body = headers . remove ( atmosphere   post   body )  ;  if  ( body  !  =  null && body . is empty (  )  )   {  body = null ;   }  req . headers ( headers )  . method ( body  !  =  null && req . get method (  )  . equals ignore case ( ""get"" )   ?  ""post"" : req . get method (  )  )  ;  if  ( body  !  =  null )   {  req . body ( url decoder . decode ( body req . get character encoding (  )   =  =  null  ?  ""utf - 8"" : req . get character encoding (  )  )  )  ;   }   }  s = req . get header ( x   atmosphere   tracking   id )  ;  if  ( s  =  =  null || s . equals ( ""0"" )  )   {   string unique = config . get init parameter (  application config . unique   uuid   websocket )  ;  if  ( unique  !  =  null &&  boolean . value of ( unique )  )   {  s =  (  string ) req . get attribute ( suspended   atmosphere   resource   uuid )  ;   }   }  if  ( s  =  =  null || s . equals ( ""0"" )  )   {  s = config . uuid provider (  )  . generate uuid (  )  ;  res . set header (  header config . x   first   request ""true"" )  ;  res . set header ( x   atmosphere   tracking   id s )  ;  res . set header ( "" content -  type"" ""text / plain ;  charset = utf - 8"" )  ;   }  else  {  if  ( req . resource (  )   =  =  null )   {  res . set header ( x   atmosphere   tracking   id s )  ;   }  else if  ( req . get attribute (  web socket . websocket   initiated )   =  =  null )   {  res . set header ( x   atmosphere   tracking   id s )  ;   }   }  if  ( req . get attribute ( suspended   atmosphere   resource   uuid )   =  =  null )   {  req . set attribute ( suspended   atmosphere   resource   uuid s )  ;   }  return this ;   }  "
659,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,configure scanning package,"protected void   (  servlet config sc  string value )  {   string package name = sc . get init parameter ( value )  ;  if  ( package name  !  =  null )   {   string[] list = package name . split ( "" "" )  ;  for  (   string a : list )   {  packages . add ( a )  ;   }   }   }  "
660,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,configure web dot xml atmosphere handler,"protected void   (  servlet config sc )  {   string s = sc . get init parameter ( atmosphere   handler )  ;  if  ( s  !  =  null )   {  try  {   string mapping = sc . get init parameter ( atmosphere   handler   mapping )  ;  if  ( mapping  =  =  null )   {  mapping =  broadcaster . root   master ;   }  add atmosphere handler ( mapping new class instance (  atmosphere handler . class  (  class <  atmosphere handler >  ) io utils . load class ( get class (  )  s )  )  )  ;   }  catch  (   exception ex )   {  logger . warn ( "" unable to load  web socket handle instance"" ex )  ;   }   }   }  "
661,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,configure web socket factory,"private  atmosphere framework   (  )  {  if  ( web socket factory  !  =  null )  return this ;  synchronized  ( this )   {  try  {  web socket factory = new class instance (  web socket factory . class  default web socket factory . class )  ;   }  catch  (   instantiation exception e )   {  logger . error ( """" e )  ;   }  catch  (   illegal access exception e )   {  logger . error ( """" e )  ;   }   }  return this ;   }  "
662,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,create async support resolver,protected  async support resolver   (  )  {  return new  default async support resolver ( config )  ;   }  
663,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,create wrapper and configure handler,protected  atmosphere handler wrapper   (  atmosphere handler h  string mapping  list <  atmosphere interceptor >  l )  {   atmosphere handler wrapper w = new  atmosphere handler wrapper ( broadcaster factory h mapping config )  ;  add mapping ( mapping w )  ;  add interceptor to wrapper ( w l )  ;  init servlet processor ( h )  ;  return w ;   }  
664,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,custom annotation packages,public  list <  string >    (  )  {  return annotation packages ;   }  
665,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,default interceptors,public  class <  ?  extends  atmosphere interceptor > []   (  )  {  return default   atmosphere   interceptors . to array ( new  class[default   atmosphere   interceptors . size (  ) ] )  ;   }  
666,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,default packages to scan,"protected void   (  )  {  packages . add ( ""io . async . control"" )  ;  packages . add ( ""io . async . satellite"" )  ;  packages . add ( ""io . async . postman"" )  ;   }  "
667,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,destroy,"public  atmosphere framework   (  )  {  if  ( is destroyed . get and set ( true )  )  return this ;  on pre destroy (  )  ;  close atmosphere resource (  )  ;  destroy interceptors (  )  ;   broadcaster factory factory = broadcaster factory ;  if  ( factory  !  =  null )   {  factory . destroy (  )  ;   }  if  ( async support  !  =  null &&  asynchronous processor . class . is assignable from ( async support . get class (  )  )  )   {   (  (  asynchronous processor ) async support )  . shutdown (  )  ;   }  for  (   entry <  string  atmosphere handler wrapper >  entry : atmosphere handlers . entry set (  )  )   {   atmosphere handler wrapper handler wrapper = entry . get value (  )  ;  try  {  handler wrapper . atmosphere handler . destroy (  )  ;   }  catch  (   throwable t )   {  logger . warn ( """" t )  ;   }   }  if  ( meta broadcaster  !  =  null )  meta broadcaster . destroy (  )  ;  if  ( ar factory  !  =  null )  ar factory . destroy (  )  ;  if  ( session factory  !  =  null )  session factory . destroy (  )  ;   web socket processor factory . get default (  )  . destroy (  )  ;   executors factory . reset ( config )  ;  config . destroy (  )  ;  reset states (  )  ;  on post destroy (  )  ;  try  {  if  ( this . shutdown hook  !  =  null )   {   runtime . get runtime (  )  . remove shutdown hook ( this . shutdown hook )  ;  shutdown hook = null ;   }   }  catch  (   illegal state exception ex )   {  logger . trace ( """" ex )  ;   }  config . properties (  )  . clear (  )  ;  return this ;   }  "
668,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,destroy interceptors,"protected void   (  )  {  for  (   atmosphere handler wrapper w : atmosphere handlers . values (  )  )   {  if  ( w . interceptors  !  =  null )   {  for  (   atmosphere interceptor i : w . interceptors )   {  try  {  i . destroy (  )  ;   }  catch  (   throwable ex )   {  logger . warn ( """" ex )  ;   }   }   }   }   }  "
669,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,detect supported framework,"protected boolean   (  servlet config sc )  throws  exception  {   string broadcaster class name tmp = null ;  boolean is jersey = false ;  try  {  io utils . load class ( get class (  )  jersey   container )  ;  is jersey = true ;  if  (  ! is broadcaster specified )   {  broadcaster class name tmp = lookup default broadcaster type ( jersey   broadcaster )  ;  io utils . load class ( get class (  )  broadcaster class name tmp )  ;   }  use stream for flushing comments = true ;   string builder packages init = new  string builder (  )  ;  for  (   string s : packages )   {  packages init . append ( s )  . append ( "" "" )  ;   }  init params . put (  framework config . jersey   scanning   package packages init . to string (  )  )  ;   }  catch  (   throwable t )   {  logger . trace ( """" t )  ;  return false ;   }  logger . debug ( "" missing meta - inf / atmosphere . xml but found the  jersey runtime .   starting  jersey"" )  ;   reflector servlet processor rsp = new class instance (  reflector servlet processor . class  reflector servlet processor . class )  ;  if  ( broadcaster class name tmp  !  =  null )  broadcaster class name = broadcaster class name tmp ;  configure detected framework ( rsp is jersey )  ;  session support ( false )  ;  init params . put ( disable   onstate   event ""true"" )  ;   string mapping = sc . get init parameter ( atmosphere   handler   mapping )  ;  if  ( mapping  =  =  null )   {  mapping =  broadcaster . root   master ;   }   class <  ?  extends  broadcaster >  bc =  (  class <  ?  extends  broadcaster >  ) io utils . load class ( get class (  )  broadcaster class name )  ;  broadcaster factory . destroy (  )  ;  broadcaster factory = new class instance (  broadcaster factory . class  default broadcaster factory . class )  ;  broadcaster factory . configure ( bc broadcaster life cycle policy config )  ;  for  (   broadcaster listener b : broadcaster listeners )   {  broadcaster factory . add broadcaster listener ( b )  ;   }   broadcaster b ;  try  {  b = broadcaster factory . get ( bc mapping )  ;   }  catch  (   illegal state exception ex )   {  logger . warn ( "" two  broadcaster's named  {  }  .   renaming the second one to  {  } "" mapping sc . get servlet name (  )   +  mapping )  ;  b = broadcaster factory . get ( bc sc . get servlet name (  )   +  mapping )  ;   }  add atmosphere handler ( mapping rsp b )  ;  return true ;   }  "
670,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,do comet support,"public  action   (  atmosphere request req  atmosphere response res )  throws io exception   servlet exception  {  if  ( is destroyed . get (  )  )  return  action . cancelled ;   action a = null ;  try  {  configure request response ( req res )  ;  a = async support . service ( req res )  ;   }  catch  (   illegal state exception ex )   {  logger . error ( "" atmosphere framework exception"" ex )  ;  throw ex ;   }  finally  {  if  ( a  !  =  null )   {  notify ( a . type (  )  req res )  ;   }  if  (  ! externalize destroy )   {  if  ( req  !  =  null && a  !  =  null && a . type (  )   !  =   action . type . suspend )   {  req . destroy (  )  ;  res . destroy (  )  ;  notify (  action . type . destroyed req res )  ;   }   }   }  return a ;   }  "
671,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,do init params,"protected void   (  servlet config sc boolean reconfigure )  {   string s = sc . get init parameter ( property   native   cometsupport )  ;  if  ( s  !  =  null )   {  use native implementation =  boolean . parse boolean ( s )  ;  if  ( use native implementation )  is comet support specified = true ;   }  s = sc . get init parameter ( property   use   stream )  ;  if  ( s  !  =  null )   {  use stream for flushing comments =  boolean . parse boolean ( s )  ;   }  s = sc . get init parameter ( property   comet   support )  ;  if  ( async support  =  =  null && s  !  =  null &&  ! reconfigure )   {  async support = new  default async support resolver ( config )  . new comet support ( s )  ;  is comet support specified = true ;   }  s = sc . get init parameter ( broadcaster   class )  ;  if  ( s  !  =  null )   {  broadcaster class name = s ;  is broadcaster specified = true ;   }  s = sc . get init parameter ( broadcaster   cache )  ;  if  ( s  !  =  null )   {  broadcaster cache class name = s ;   }  s = sc . get init parameter ( property   session   support )  ;  if  ( s  =  =  null )   {  s = sc . get servlet context (  )  . get init parameter ( property   session   support )  ;   }  if  ( s  !  =  null ||  session support . initialization hint )   {  boolean session support =  boolean . value of ( s )  ||  session support . initialization hint ;  config . set support session ( session support )  ;  if  ( session support &&  ( sc . get servlet context (  )  . get major version (  )   <  3 ||  !  session support . initialization hint )  )   {  logger . warn ( "" session support error .   make sure you also define  {  }  as a listener in web . xml  see https: /  / github . com /  atmosphere / atmosphere / wiki /  enabling -  http session -  support""  session support . class . get name (  )  )  ;   }  is session support specified = true ;   }  s = sc . get init parameter ( property   allow   session   timeout   removal )  ;  if  ( s  !  =  null )   {  config . set session timeout removal allowed (  boolean . value of ( s )  )  ;   }  s = sc . get init parameter ( property   throw   exception   on   cloned   request )  ;  if  ( s  !  =  null )   {  config . set throw exception on cloned (  boolean . value of ( s )  )  ;  is throw exception on cloned request specified = true ;   }  s = sc . get init parameter ( disable   onstate   event )  ;  if  ( s  !  =  null )   {  init params . put ( disable   onstate   event s )  ;   }  else  {  init params . put ( disable   onstate   event ""false"" )  ;   }  s = sc . get init parameter ( broadcast   filter   classes )  ;  if  ( s  !  =  null )   {  broadcaster filters . add all (  arrays . as list ( s . split ( "" "" )  )  )  ;  logger . info ( "" installing  broadcast filter class ( es )   {  } "" s )  ;   }  s = sc . get init parameter ( broadcaster   lifecycle   policy )  ;  if  ( s  !  =  null )   {  broadcaster life cycle policy = s ;   }  s = sc . get init parameter ( broadcaster   factory )  ;  if  ( s  !  =  null )   {  broadcaster factory class name = s ;   }  s = sc . get init parameter ( atmosphere   handler   path )  ;  if  ( s  !  =  null )   {  handlers path = s ;   }  s = sc . get init parameter ( property   atmosphere   xml )  ;  if  ( s  !  =  null )   {  atmosphere dot xml path = s ;   }  s = sc . get init parameter ( meta   service   path )  ;  if  ( s  !  =  null )   {  meta service path = s ;   }  s = sc . get init parameter (  application config . handler   mapping   regex )  ;  if  ( s  !  =  null )   {  mapping regex = s ;   }  s = sc . get init parameter (  framework config . jersey   scanning   package )  ;  if  ( s  !  =  null )   {  packages . add ( s )  ;   }  s = sc . get init parameter (  application config . default   serializer )  ;  if  ( s  !  =  null )   {  default serializer class name = s ;   }  s = sc . get init parameter (  application config . disable   atmosphereinterceptors )  ;  if  ( s  !  =  null )   {  excluded interceptors . add all (  arrays . as list ( s . trim (  )  . replace ( "" "" """" )  . split ( "" "" )  )  )  ;   }   }  "
672,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,do init params for web socket,protected void   (  servlet config sc )  {   string s = sc . get init parameter ( websocket   support )  ;  if  ( s  !  =  null )   {  web socket enabled =  boolean . parse boolean ( s )  ;  session support ( false )  ;   }  s = sc . get init parameter ( websocket   protocol )  ;  if  ( s  !  =  null )   {  web socket protocol class name = s ;   }  s = sc . get init parameter ( websocket   processor )  ;  if  ( s  !  =  null )   {  web socket processor class name = s ;   }  s = config . get init parameter (  application config . websocket   support   servlet3 )  ;  if  ( s  !  =  null )   {  use servlet30 =  boolean . parse boolean ( s )  ;   }   }  
673,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,end point mapper,public  atmosphere framework   (  endpoint mapper endpoint mapper )  {  this . endpoint mapper = endpoint mapper ;  return this ;   }  
674,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,exclude interceptor,public  atmosphere framework   (  string interceptor )  {  excluded interceptors . add ( interceptor )  ;  return this ;   }  
675,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,excluded interceptors,public  list <  string >    (  )  {  return excluded interceptors ;   }  
676,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,externalize destroy,public boolean   (  )  {  return externalize destroy ;   }  
677,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,filter manipulator,public  atmosphere framework   (  broadcaster config .  filter manipulator m )  {  filter manipulators . add ( m )  ;  return this ;   }  
678,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,filter manipulators,public  list <  broadcaster config .  filter manipulator >    (  )  {  return filter manipulators ;   }  
679,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,framework listener,public  atmosphere framework   (  atmosphere framework listener l )  {  framework listeners . add ( l )  ;  return this ;   }  
680,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,framework listeners,@ deprecated public  list <  atmosphere framework listener >    (  )  {  return  arrays . as list ( framework listeners . to array ( new  atmosphere framework listener[framework listeners . size (  ) ] )  )  ;   }  
681,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,get async support,public  async support   (  )  {  return async support ;   }  
682,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,get atmosphere config,public  atmosphere config   (  )  {  return config ;   }  
683,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,get atmosphere dot xml path,public  string   (  )  {  return atmosphere dot xml path ;   }  
684,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,get atmosphere handlers,public  map <  string  atmosphere handler wrapper >    (  )  {  return atmosphere handlers ;   }  
685,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,get broadcaster cache class name,public  string   (  )  {  return broadcaster cache class name ;   }  
686,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,get broadcaster factory,public  broadcaster factory   (  )  {  if  ( broadcaster factory  =  =  null )   {  configure broadcaster factory (  )  ;   }  return broadcaster factory ;   }  
687,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,get comet support,public  async support   (  )  {  return async support ;   }  
688,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,get default broadcaster class name,public  string   (  )  {  return broadcaster class name ;   }  
689,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,get default serializer class,public  class <  serializer >    (  )  {  return default serializer class ;   }  
690,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,get default serializer class name,public  string   (  )  {  return default serializer class name ;   }  
691,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,get files,"private void   (  file f )  {  if  ( scan done )  return ;   file[] files = f . list files (  )  ;  for  (   file test : files )   {  if  ( test . is directory (  )  )   {  get files ( test )  ;   }  else  {   string clazz = test . get absolute path (  )  ;  if  ( clazz . ends with ( "" . class"" )  )   {  possible components candidate . add ( clazz )  ;   }   }   }   }  "
692,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,get handlers path,public  string   (  )  {  return handlers path ;   }  
693,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,get init parameter,public  string   (  string name )  {   string param = init params . get ( name )  ;  if  ( param  =  =  null )   {  param = sc . get init parameter ( name )  ;  if  ( param  =  =  null && use servlet context parameters )   {  param = sc . get servlet context (  )  . get init parameter ( name )  ;   }   }  return param ;   }  
694,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,get init parameter names,public  enumeration <  string >    (  )  {  if  (  ! done . get and set ( true )  )   {   enumeration en = sc . get init parameter names (  )  ;  if  ( en  !  =  null )   {  while  ( en . has more elements (  )  )   {   string name =  (  string ) en . next element (  )  ;  if  (  ! init params . contains key ( name )  )   {  init params . put ( name sc . get init parameter ( name )  )  ;   }   }   }   }  return  collections . enumeration ( init params . key set (  )  )  ;   }  
695,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,get lib path,public  string   (  )  {  return lib path ;   }  
696,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,get servlet config,public  servlet config   (  )  {  return servlet config ;   }  
697,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,get servlet context,public  servlet context   (  )  {  return servlet config . get servlet context (  )  ;   }  
698,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,get servlet name,public  string   (  )  {  return sc . get servlet name (  )  ;   }  
699,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,get web socket processor class name,public  string   (  )  {  return web socket processor class name ;   }  
700,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,get web socket protocol,public  web socket protocol   (  )  {  init web socket (  )  ;  return web socket protocol ;   }  
701,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,get web socket protocol class name,public  string   (  )  {  return web socket protocol class name ;   }  
702,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,hook injection,void   ( final  atmosphere config config )  {  config . startup hook ( new  atmosphere config .  startup hook (  )  {  @ override public void started (   atmosphere framework framework )  {  need request scoped injection =  utils . request scoped injection ( config atmosphere handler )  ;   }   }   )  ;   }  
703,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,info,"private void   (  )  {  if  ( logger . is trace enabled (  )  )   {   enumeration <  string >  e = servlet config . get init parameter names (  )  ;  logger . trace ( "" configured init - params"" )  ;   string n ;  while  ( e . has more elements (  )  )   {  n = e . next element (  )  ;  logger . trace ( ""\t {  }   =   {  } "" n servlet config . get init parameter ( n )  )  ;   }   }  logger . info ( "" using  endpoint mapper  {  } "" endpoint mapper . get class (  )  )  ;  for  (   string i : broadcaster filters )   {  logger . info ( "" using  broadcast filter:  {  } "" i )  ;   }  if  ( broadcaster cache class name  =  =  null ||  default broadcaster cache . class . get name (  )  . equals ( broadcaster cache class name )  )   {  logger . warn ( "" no  broadcaster cache configured .   broadcasted message between client reconnection will be lost .  ""  +  "" it is recommended to configure the  {  } "" uuid broadcaster cache . class . get name (  )  )  ;   }  else  {  logger . info ( "" using  broadcaster cache:  {  } "" broadcaster cache class name )  ;   }   string s = config . get init parameter ( broadcaster   wait   time )  ;  logger . info ( "" default  broadcaster  class:  {  } "" broadcaster class name )  ;  logger . info ( "" broadcaster  shared  list  resources:  {  } "" config . get init parameter ( broadcaster   shareable   listeners false )  )  ;  logger . info ( "" broadcaster  polling  wait  time  {  } "" s  =  =  null  ?   default broadcaster . polling   default : s )  ;  logger . info ( "" shared  executor service supported:  {  } "" shared thread pools )  ;   executor service executor service =  executors factory . get message dispatcher ( config  broadcaster . root   master )  ;  if  ( executor service  !  =  null )   {  if  (  thread pool executor . class . is assignable from ( executor service . get class (  )  )  )   {  long max =  thread pool executor . class . cast ( executor service )  . get maximum pool size (  )  ;  logger . info ( "" messaging  thread  pool  size:  {  } ""  thread pool executor . class . cast ( executor service )  . get maximum pool size (  )   =  =  2147483647  ?  "" unlimited"" : max )  ;   }  else  {  logger . info ( "" messaging  executor service  pool  size unavailable  -   not instance of  thread pool executor"" )  ;   }   }  executor service =  executors factory . get async operation executor ( config  broadcaster . root   master )  ;  if  ( executor service  !  =  null )   {  if  (  thread pool executor . class . is assignable from ( executor service . get class (  )  )  )   {  logger . info ( "" async i / o  thread  pool  size:  {  } ""  thread pool executor . class . cast ( executor service )  . get maximum pool size (  )  )  ;   }  else  {  logger . info ( "" async i / o  executor service  pool  size unavailable  -   not instance of  thread pool executor"" )  ;   }   }  logger . info ( "" using  broadcaster factory:  {  } "" broadcaster factory . get class (  )  . get name (  )  )  ;  logger . info ( "" using  atmosphere resurce factory:  {  } "" ar factory . get class (  )  . get name (  )  )  ;  logger . info ( "" using  web socket processor:  {  } "" web socket processor class name )  ;  if  ( default serializer class name  !  =  null &&  ! default serializer class name . is empty (  )  )   {  logger . info ( "" using  serializer:  {  } "" default serializer class name )  ;   }   web socket processor wp =  web socket processor factory . get default (  )  . get web socket processor ( this )  ;  boolean b = false ;  if  (  default web socket processor . class . is assignable from ( wp . get class (  )  )  )   {  b =  default web socket processor . class . cast ( wp )  . invoke interceptors (  )  ;   }  logger . info ( "" invoke  atmosphere interceptor on  web socket message  {  } "" b )  ;  logger . info ( "" http session supported:  {  } "" config . is support session (  )  )  ;  logger . info ( "" atmosphere is using  {  }  for dependency injection and object creation"" object factory )  ;  logger . info ( "" atmosphere is using async support:  {  }  running under container:  {  } "" get async support (  )  . get class (  )  . get name (  )  async support . get container name (  )  )  ;  logger . info ( "" atmosphere  framework  {  }  started . ""  version . get raw version (  )  )  ;  logger . info ( ""\n\n\t for  atmosphere  framework  commercial  support  visit \n\t {  }  ""  +  ""or send an email to  {  } \n"" ""http: /  / www . async - io . org / "" ""support@async - io . org"" )  ;  if  ( logger . is trace enabled (  )  )   {  for  (   entry <  string  atmosphere handler wrapper >  e : atmosphere handlers . entry set (  )  )   {  logger . trace ( ""\n configured  atmosphere handler  {  } \n"" e . get key (  )  )  ;  logger . trace ( "" {  } "" e . get value (  )  )  ;   }   }   }  "
704,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,init,"public  atmosphere framework   ( final  servlet config sc boolean wrap )  throws  servlet exception  {  if  ( is init )  return this ;  servlet config ( sc wrap )  ;  read system properties (  )  ;  populate broadcaster type (  )  ;  populate object factory type (  )  ;  load meta service (  )  ;  on pre init (  )  ;  try  {   servlet context factory . get default (  )  . init ( sc . get servlet context (  )  )  ;  preventoom (  )  ;  do init params ( servlet config )  ;  do init params for web socket ( servlet config )  ;  lookup default object factory type (  )  ;  if  ( logger . is trace enabled (  )  )   {  async support listener ( new class instance (  async support listener . class  async support listener adapter . class )  )  ;   }  configure object factory (  )  ;  configure annotation packages (  )  ;  configure broadcaster factory (  )  ;  configure meta broadcaster (  )  ;  configure atmosphere resource factory (  )  ;  if  ( is session support specified )   {  session factory (  )  ;   }  configure scanning package ( servlet config  application config . annotation   package )  ;  configure scanning package ( servlet config  framework config . jersey2   scanning   package )  ;  configure scanning package ( servlet config  framework config . jersey   scanning   package )  ;  default packages to scan (  )  ;  install annotation processor ( servlet config )  ;  auto configure service ( servlet config . get servlet context (  )  )  ;  configure broadcaster factory (  )  ;  patch container (  )  ;  configure broadcaster (  )  ;  load configuration ( servlet config )  ;  init web socket (  )  ;  init endpoint mapper (  )  ;  init default serializer (  )  ;  auto detect container (  )  ;  configure web dot xml atmosphere handler ( servlet config )  ;  async support . init ( servlet config )  ;  init atmosphere handler ( servlet config )  ;  configure atmosphere interceptor ( servlet config )  ;  analytics (  )  ;  if  ( sc . get servlet context (  )   !  =  null )   {  sc . get servlet context (  )  . set attribute (  broadcaster factory . class . get name (  )  broadcaster factory )  ;   }   string s = config . get init parameter (  application config . broadcaster   sharable   thread   pools )  ;  if  ( s  !  =  null )   {  shared thread pools =  boolean . parse boolean ( s )  ;   }  this . shutdown hook = new  thread (  )  {  public void run (  )  {   atmosphere framework . this . destroy (  )  ;   }   }   ;   runtime . get runtime (  )  . add shutdown hook ( this . shutdown hook )  ;  if  ( logger . is info enabled (  )  )   {  info (  )  ;   }  if  ( initialization error  !  =  null )   {  logger . trace ( "" container initalizer exception .   may not be an issue if  atmosphere started properly "" initialization error )  ;   }  universe (  )  ;   }  catch  (   throwable t )   {  logger . error ( "" failed to initialize  atmosphere  framework"" t )  ;  if  ( t instanceof  servlet exception )   {  throw  (  servlet exception ) t ;   }  throw new  servlet exception ( t )  ;   }  is init = true ;  config . init complete (  )  ;  on post init (  )  ;  return this ;   }  "
705,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,init atmosphere handler,public void   (  )  throws  servlet exception  {   atmosphere handler a ;   atmosphere handler wrapper w ;  for  (   entry <  string  atmosphere handler wrapper >  h : atmosphere handlers . entry set (  )  )   {  w = h . get value (  )  ;  a = w . atmosphere handler ;  if  ( a instanceof  atmosphere servlet processor )   {   (  (  atmosphere servlet processor ) a )  . init ( config )  ;   }   }  check web socket support state (  )  ;   }  
706,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,init default serializer,"private void   (  )  {  if  ( default serializer class name  !  =  null &&  ! default serializer class name . is empty (  )  )   {  try  {  @ suppress warnings ( ""unchecked"" )   class <  serializer >  clazz =  (  class <  serializer >  ) io utils . load class (  serializer . class default serializer class name )  ;  if  (  serializer . class . is assignable from ( clazz )  )   {  default serializer class = clazz ;   }  else  {  logger . error ( "" default  serializer class name does not implement  serializer interface"" )  ;  default serializer class name = null ;  default serializer class = null ;   }   }  catch  (   exception e )   {  logger . error ( "" unable to set default  serializer"" e )  ;  default serializer class name = null ;  default serializer class = null ;   }   }  else  {  default serializer class name = null ;  default serializer class = null ;   }   }  "
707,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,init endpoint mapper,"public void   (  )  {   string s = servlet config . get init parameter (  application config . endpoint   mapper )  ;  if  ( s  !  =  null )   {  try  {  endpoint mapper = new class instance (  endpoint mapper . class  (  class <  endpoint mapper >  ) io utils . load class ( this . get class (  )  s )  )  ;  logger . info ( "" installed  endpoint mapper  {  }  "" s )  ;   }  catch  (   exception ex )   {  logger . error ( "" cannot load the  endpoint mapper  {  } "" s ex )  ;   }   }  endpoint mapper . configure ( config )  ;   }  "
708,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,init servlet processor,private void   (  atmosphere handler h )  {  if  (  ! is init )  return ;  try  {  if  ( h instanceof  atmosphere servlet processor )   {   (  (  atmosphere servlet processor ) h )  . init ( config )  ;   }   }  catch  (   servlet exception e )   {  throw new  runtime exception ( e )  ;   }   }  
709,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,init web socket,"public void   (  )  {  if  ( web socket protocol initialized )  return ;  if  ( web socket protocol  =  =  null )   {  try  {  web socket protocol = new class instance (  web socket protocol . class  (  class <  web socket protocol >  ) io utils . load class ( this . get class (  )  web socket protocol class name )  )  ;  logger . info ( "" installed  web socket protocol  {  }  "" web socket protocol class name )  ;   }  catch  (   exception ex )   {  logger . error ( "" cannot load the  web socket protocol  {  } "" get web socket protocol class name (  )  ex )  ;  try  {  web socket protocol = new class instance (  web socket protocol . class  simple http protocol . class )  ;   }  catch  (   exception e )   {   }   }   }  web socket protocol initialized = true ;  web socket protocol . configure ( config )  ;   }  "
710,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,initialization error,public void   (  illegal state exception initialization error )  {  this . initialization error = initialization error ;   }  
711,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,initialized,public boolean   (  )  {  return is init ;   }  
712,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,inspectors,public  concurrent linked queue <  broadcaster cache inspector >    (  )  {  return inspectors ;   }  
713,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,install annotation processor,protected void   (  servlet config sc )  {   string s = sc . get init parameter (  application config . annotation   processor )  ;  if  ( s  !  =  null )   {  annotation processor class name = s ;   }   }  
714,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,interceptor,public  atmosphere framework   (  atmosphere interceptor c )  {  if  (  ! check duplicate ( c )  )   {  interceptors . add ( c )  ;  if  ( is init )   {  add interceptor to all wrappers ( c )  ;   }   }  return this ;   }  
715,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,interceptors,public  linked list <  atmosphere interceptor >    (  )  {  return interceptors ;   }  
716,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,isa servlet filter,public boolean   (  )  {  return is filter ;   }  
717,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,is broadcaster specified,public boolean   (  )  {  return is broadcaster specified ;   }  
718,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,is destroyed,public boolean   (  )  {  return is destroyed . get (  )  ;   }  
719,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,is share executor services,public boolean   (  )  {  return shared thread pools ;   }  
720,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,is use blocking implementation,public boolean   (  )  {  return use blocking implementation ;   }  
721,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,is use native implementation,public boolean   (  )  {  return use native implementation ;   }  
722,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,is use servlet,public boolean   (  )  {  return use servlet30 ;   }  
723,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,is use stream for flushing comments,public boolean   (  )  {  return use stream for flushing comments ;   }  
724,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,load atmosphere dot xml,"protected void   (  input stream stream url class loader c )  throws io exception   servlet exception  {  if  ( stream  =  =  null )   {  return ;   }  logger . info ( "" found  atmosphere  configuration under  {  } "" atmosphere dot xml path )  ;   atmosphere config reader . get instance (  )  . parse ( config stream )  ;   atmosphere handler handler = null ;  for  (   atmosphere handler config atmo handler : config . get atmosphere handler config (  )  )   {  try  {  if  (  ! atmo handler . get class name (  )  . starts with ( ""@"" )  )   {  if  (  !  reflector servlet processor . class . get name (  )  . equals ( atmo handler . get class name (  )  )  )   {  handler = new class instance (  atmosphere handler . class  (  class <  atmosphere handler >  ) io utils . load class ( this . get class (  )  atmo handler . get class name (  )  )  )  ;   }  else  {  handler = new class instance (  atmosphere handler . class  reflector servlet processor . class )  ;   }  logger . info ( "" installed  atmosphere handler  {  }  mapped to context - path:  {  } "" handler atmo handler . get context root (  )  )  ;   }  for  (   application configuration a : atmo handler . get application config (  )  )   {  init params . put ( a . get param name (  )  a . get param value (  )  )  ;   }  for  (   framework configuration a : atmo handler . get framework config (  )  )   {  init params . put ( a . get param name (  )  a . get param value (  )  )  ;   }  for  (   atmosphere handler property handler property : atmo handler . get properties (  )  )   {  if  ( handler property . get value (  )   !  =  null && handler property . get value (  )  . index of ( ""jersey"" )   !  =   - 1 )   {  init params . put ( disable   onstate   event ""true"" )  ;  use stream for flushing comments = true ;  broadcaster class name = lookup default broadcaster type ( jersey   broadcaster )  ;  broadcaster factory . destroy (  )  ;  broadcaster factory = null ;  configure broadcaster factory (  )  ;  configure broadcaster (  )  ;   }  if  ( handler  !  =  null )   {   introspection utils . set property ( handler handler property . get name (  )  handler property . get value (  )  )  ;   introspection utils . add property ( handler handler property . get name (  )  handler property . get value (  )  )  ;   }   }  session support (  boolean . value of ( atmo handler . get support session (  )  )  )  ;  if  ( handler  !  =  null )   {   string broadcaster class = atmo handler . get broadcaster (  )  ;   broadcaster b ;  if  ( broadcaster class  !  =  null )   {  broadcaster class name = broadcaster class ;   class loader cl =  thread . current thread (  )  . get context class loader (  )  ;   class <  ?  extends  broadcaster >  bc =  (  class <  ?  extends  broadcaster >  ) cl . load class ( broadcaster class name )  ;  broadcaster factory = new class instance (  broadcaster factory . class  default broadcaster factory . class )  ;  broadcaster factory . configure ( bc broadcaster life cycle policy config )  ;   }  b = broadcaster factory . lookup ( atmo handler . get context root (  )  true )  ;   atmosphere handler wrapper wrapper = new  atmosphere handler wrapper ( handler b config )  ;  add mapping ( atmo handler . get context root (  )  wrapper )  ;   string bc = atmo handler . get broadcaster cache (  )  ;  if  ( bc  !  =  null )   {  broadcaster cache class name = bc ;   }  if  ( atmo handler . get comet support (  )   !  =  null )   {  async support =  (  async support ) c . load class ( atmo handler . get comet support (  )  )  . get declared constructor ( new  class[] {  atmosphere config . class }  )  . new instance ( new  object[] { config }  )  ;   }  if  ( atmo handler . get broadcast filter classes (  )   !  =  null )   {  broadcaster filters . add all ( atmo handler . get broadcast filter classes (  )  )  ;   }   linked list <  atmosphere interceptor >  l = new  linked list <  atmosphere interceptor >  (  )  ;  if  ( atmo handler . get atmosphere interceptor classes (  )   !  =  null )   {  for  (   string a : atmo handler . get atmosphere interceptor classes (  )  )   {  try  {   atmosphere interceptor ai = new class instance (  atmosphere interceptor . class  (  class <  atmosphere interceptor >  ) io utils . load class ( get class (  )  a )  )  ;  l . add ( ai )  ;   }  catch  (   throwable e )   {  logger . warn ( """" e )  ;   }   }   }  add interceptor to wrapper ( wrapper l )  ;  if  (  ! l . is empty (  )  )   {  logger . info ( "" installed  atmosphere interceptor  {  }  mapped to  atmosphere handler  {  } "" l atmo handler . get class name (  )  )  ;   }   }   }  catch  (   throwable t )   {  logger . warn ( "" unable to load  atmosphere handler class: ""  +  atmo handler . get class name (  )  t )  ;  throw new  servlet exception ( t )  ;   }   }   }  "
725,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,load atmosphere handlers from path,"public void   ( url class loader classloader  string real path )  {   file file = new  file ( real path )  ;  if  ( file . exists (  )  && file . is directory (  )  )   {  get files ( file )  ;  scan done = true ;  for  (   string class name : possible components candidate )   {  try  {  class name = class name . replace ( '\\' ' / ' )  ;  class name = class name . replace first ( ""^ . * /  ( web - inf|target )  (  ? : / scala - [^ / ] +  )  ?  /  ( test -  )  ? classes /  (  . * ) \\ . class"" ""$3"" )  . replace ( "" / "" "" . "" )  ;   class <  ?  >  clazz = classloader . load class ( class name )  ;  if  (  atmosphere handler . class . is assignable from ( clazz )  )   {   atmosphere handler handler = new class instance (  atmosphere handler . class  (  class <  atmosphere handler >  ) clazz )  ;  add mapping ( "" / ""  +  handler . get class (  )  . get simple name (  )  new  atmosphere handler wrapper ( broadcaster factory handler "" / ""  +  handler . get class (  )  . get simple name (  )  config )  )  ;  logger . info ( "" installed  atmosphere handler  {  }  mapped to context - path:  {  } "" handler handler . get class (  )  . get name (  )  )  ;   }   }  catch  (   throwable t )   {  logger . trace ( ""failed to load class as an  atmosphere handler: ""  +  class name t )  ;   }   }   }   }  "
726,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,load configuration,public void   (  servlet config sc )  throws  servlet exception  {  if  (  ! auto detect handlers )  return ;  try  {  url url = sc . get servlet context (  )  . get resource ( handlers path )  ;  url class loader urlc = new url class loader ( new url[] { url }   thread . current thread (  )  . get context class loader (  )  )  ;  load atmosphere dot xml ( sc . get servlet context (  )  . get resource as stream ( atmosphere dot xml path )  urlc )  ;  if  ( atmosphere handlers . is empty (  )  )   {  auto detect atmosphere handlers ( sc . get servlet context (  )  urlc )  ;  if  ( atmosphere handlers . is empty (  )  )   {  detect supported framework ( sc )  ;   }   }  auto detect web socket handler ( sc . get servlet context (  )  urlc )  ;   }  catch  (   throwable t )   {  throw new  servlet exception ( t )  ;   }   }  
727,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,load meta service,"protected void   (  )  {  try  {   map <  string  meta service action >  config =  (  map <  string  meta service action >  ) servlet config . get servlet context (  )  . get attribute (  atmosphere framework .  meta service action . class . get name (  )  )  ;  if  ( config  =  =  null )   {  config = io utils . read service file ( meta service path  +   atmosphere framework . class . get name (  )  )  ;   }  for  (  final  map .  entry <  string  meta service action >  action : config . entry set (  )  )   {  final  class c = io utils . load class (  atmosphere framework . class action . get key (  )  )  ;  action . get value (  )  . apply ( this c )  ;   }   }  catch  (   exception ex )   {  logger . error ( """" ex )  ;   }   }  "
728,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,load web socket from path,"protected void   ( url class loader classloader  string real path )  {   file file = new  file ( real path )  ;  if  ( file . exists (  )  && file . is directory (  )  )   {  get files ( file )  ;  scan done = true ;  for  (   string class name : possible components candidate )   {  try  {  class name = class name . replace ( '\\' ' / ' )  ;  class name = class name . replace first ( ""^ . * /  ( web - inf|target )  (  ? : / scala - [^ / ] +  )  ?  /  ( test -  )  ? classes /  (  . * ) \\ . class"" ""$3"" )  . replace ( "" / "" "" . "" )  ;   class <  ?  >  clazz = classloader . load class ( class name )  ;  if  (  web socket protocol . class . is assignable from ( clazz )  )   {  web socket protocol =  (  web socket protocol ) new class instance (  web socket protocol . class  (  class <  web socket protocol >  ) clazz )  ;  logger . info ( "" installed  web socket protocol  {  } "" web socket protocol )  ;   }   }  catch  (   throwable t )   {  logger . trace ( ""failed to load class as an  web socket protocol: ""  +  class name t )  ;   }   }   }   }  "
729,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,lookup default broadcaster type,"protected  string   (  string defaultb )  {   string drop = servlet config  !  =  null  ?  servlet config . get init parameter (  application config . autodetect   broadcaster )  : null ;  if  ( drop  =  =  null ||  !  boolean . parse boolean ( drop )  )   {  for  (   string b : broadcaster types )   {  try  {   class . for name ( b )  ;  logger . info ( "" detected a  broadcaster  {  }  on the classpath .  ""  +  "" this broadcaster will be used by default and will override any annotated resources .  ""  +  "" set  {  }  to false to change the behavior"" b  application config . autodetect   broadcaster )  ;  is broadcaster specified = true ;  return b ;   }  catch  (   class not found exception e )   {   }   }   }  return defaultb ;   }  "
730,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,lookup default object factory type,"protected  atmosphere object factory   (  )  {  if  ( object factory  !  =  null &&  !  default atmosphere object factory . class . get name (  )  . equals ( object factory . get class (  )  . get name (  )  )  )  return object factory ;  for  (   string b : object factory type )   {  try  {   class <  ?  >  c =  class . for name ( b )  ;  object factory =  (  atmosphere object factory ) c . new instance (  )  ;  break ;   }  catch  (   class not found exception e )   {  logger . trace ( e . get message (  )   +  "" not found"" )  ;   }  catch  (   exception e )   {  logger . trace ( """" e )  ;   }   }  if  ( object factory  =  =  null ||  default atmosphere object factory . class . get name (  )  . equals ( object factory . get class (  )  . get name (  )  )  )   {  try  {  io utils . load class ( get class (  )  inject   libary )  ;  object factory = new  injectable object factory (  )  ;   }  catch  (   exception e )   {  logger . trace ( ""javax . inject .  inject nor installed .   using  default atmosphere object factory"" )  ;  object factory = new  default atmosphere object factory (  )  ;   }   }  object factory . configure ( config )  ;  return object factory ;   }  "
731,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,mapping regex,public  atmosphere framework   (  string mapping regex )  {  this . mapping regex = mapping regex ;  return this ;   }  
732,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,meta broadcaster,public  meta broadcaster   (  )  {  return meta broadcaster ;   }  
733,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,need request scoped injection,public boolean   (  )  {  return need request scoped injection ;   }  
734,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,newa interceptor,"protected  atmosphere interceptor   (  class <  ?  extends  atmosphere interceptor >  a )  {   atmosphere interceptor ai = null ;  try  {  ai = new class instance (  atmosphere interceptor . class  (  class <  atmosphere interceptor >  ) io utils . load class ( get class (  )  a . get name (  )  )  )  ;  logger . info ( ""\t {  }  :  {  } "" a . get name (  )  ai )  ;   }  catch  (   exception ex )   {  logger . warn ( """" ex )  ;   }  return ai ;   }  "
735,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,new atmosphere config,protected  atmosphere config   (  )  {  return new  atmosphere config ( this )  ;   }  
736,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,new class instance,public  < t u extends t > t   (  class < t >  class type  class < u >  default type )  throws  instantiation exception   illegal access exception  {  return object factory . new class instance ( class type default type )  ;   }  
737,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,normalize path,"public  string   (  string path )  {  if  ( path . contains ( ""*"" )  )   {  path = path . replace ( ""*"" mapping regex )  ;   }  if  ( path . ends with ( "" / "" )  )   {  path = path  +  mapping regex ;   }  return path ;   }  "
738,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,notify,"public  atmosphere framework   (  action . type type  atmosphere request request  atmosphere response response )  {  for  (   async support listener l : async support listeners (  )  )   {  try  {  switch  ( type )   {  case timeout: l . on timeout ( request response )  ;  break ;  case cancelled: l . on close ( request response )  ;  break ;  case suspend: l . on suspend ( request response )  ;  break ;  case resume: l . on resume ( request response )  ;  break ;  case destroyed: l . on destroyed ( request response )  ;  break ;   }   }  catch  (  throwable t )   {  logger . warn ( """" t )  ;   }   }  return this ;   }  "
739,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,notify destroyed,public  atmosphere framework   (  string uuid )  {  for  (   atmosphere resource listener l : atmosphere resource listeners (  )  )   {  l . on disconnect ( uuid )  ;   }  return this ;   }  
740,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,notify suspended,public  atmosphere framework   (  string uuid )  {  for  (   atmosphere resource listener l : atmosphere resource listeners (  )  )   {  l . on suspended ( uuid )  ;   }  return this ;   }  
741,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,object factory,public  atmosphere object factory   (  )  {  return object factory ;   }  
742,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,object factory type,public  concurrent linked queue <  string >    (  )  {  return object factory type ;   }  
743,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,on post destroy,"protected void   (  )  {  for  (   atmosphere framework listener l : framework listeners )   {  try  {  l . on post destroy ( this )  ;   }  catch  (   exception e )   {  logger . error ( """" e )  ;   }   }   }  "
744,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,on post init,"protected void   (  )  {  for  (   atmosphere framework listener l : framework listeners )   {  try  {  l . on post init ( this )  ;   }  catch  (   exception e )   {  logger . error ( """" e )  ;   }   }   }  "
745,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,on pre destroy,"protected void   (  )  {  for  (   atmosphere framework listener l : framework listeners )   {  try  {  l . on pre destroy ( this )  ;   }  catch  (   exception e )   {  logger . error ( """" e )  ;   }   }   }  "
746,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,on pre init,"protected void   (  )  {  for  (   atmosphere framework listener l : framework listeners )   {  try  {  l . on pre init ( this )  ;   }  catch  (   exception e )   {  logger . error ( """" e )  ;   }   }   }  "
747,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,on request,"@ override public void   (  atmosphere resource r )  throws io exception  {  logger . debug ( "" no  atmosphere handler defined . "" )  ;  if  (  ! r . transport (  )  . equals (  atmosphere resource . transport . websocket )  )   {   web socket . not supported ( r . get request (  )  r . get response (  )  )  ;   }   }  "
748,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,packages,public  list <  string >    (  )  {  return packages ;   }  
749,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,patch container,"public void   (  )  {   system . set property ( ""org . apache . catalina . strict   servlet   compliance"" ""false"" )  ;   }  "
750,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,populate broadcaster type,private void   (  )  {  broadcaster types . add ( kafka   broadcaster )  ;  broadcaster types . add ( hazelcast   broadcaster )  ;  broadcaster types . add ( xmpp   broadcaster )  ;  broadcaster types . add ( redis   broadcaster )  ;  broadcaster types . add ( jgroups   broadcaster )  ;  broadcaster types . add ( jms   broadcaster )  ;  broadcaster types . add ( rmi   broadcaster )  ;  broadcaster types . add ( rabbitmq   broadcaster )  ;   }  
751,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,populate object factory type,private void   (  )  {  object factory type . add ( cdi   injector )  ;  object factory type . add ( spring   injector )  ;  object factory type . add ( guice   injector )  ;   }  
752,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,preventoom,"protected void   (  )  {   string s = config . get init parameter (  application config . scan   classpath )  ;  if  ( s  !  =  null )   {  allow all classes scan =  boolean . parse boolean ( s )  ;   }  try  {   class . for name ( ""org . testng .  assert"" )  ;  allow all classes scan = false ;   }  catch  (   class not found exception e )   {   }   }  "
753,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,read system properties,protected void   (  )  {  if  (  system . get property ( property   native   cometsupport )   !  =  null )   {  use native implementation =  boolean . parse boolean (  system . get property ( property   native   cometsupport )  )  ;  is comet support specified = true ;   }  atmosphere dot xml path =  system . get property ( property   atmosphere   xml atmosphere dot xml path )  ;  if  (  system . get property ( disable   onstate   event )   !  =  null )   {  init params . put ( disable   onstate   event  system . get property ( disable   onstate   event )  )  ;   }   }  
754,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,reconfigure init params,public void   ( boolean reconfigure init params )  {  if  ( reconfigure init params )   {  do init params ( servlet config reconfigure init params )  ;  do init params for web socket ( servlet config )  ;   }   }  
755,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,remove all atmosphere handler,public  atmosphere framework   (  )  {  atmosphere handlers . clear (  )  ;  return this ;   }  
756,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,remove all init params,public  atmosphere framework   (  )  {  init params . clear (  )  ;  return this ;   }  
757,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,remove atmosphere handler,"public  atmosphere framework   (  string mapping )  {  if  ( mapping . ends with ( "" / "" )  )   {  mapping +  = mapping regex ;   }  atmosphere handlers . remove ( mapping )  ;  return this ;   }  "
758,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,reset states,public  atmosphere framework   (  )  {  is init = false ;  execute first set = false ;  broadcaster filters . clear (  )  ;  async support listeners . clear (  )  ;  possible components candidate . clear (  )  ;  init params . clear (  )  ;  atmosphere handlers . clear (  )  ;  broadcaster types . clear (  )  ;  object factory type . clear (  )  ;  inspectors . clear (  )  ;  broadcaster listeners . clear (  )  ;  packages . clear (  )  ;  annotation packages . clear (  )  ;  excluded interceptors . clear (  )  ;  broadcaster cache listeners . clear (  )  ;  filter manipulators . clear (  )  ;  interceptors . clear (  )  ;  broadcaster factory = null ;  ar factory = null ;  meta broadcaster = null ;  session factory = null ;  annotation found = false ;  return this ;   }  
759,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,run,"public void   (  )  {  try  {  logger . debug ( "" retrieving  atmosphere's latest version from http: /  / async - io . org / version . html"" )  ;   httpurl connection url connection =  (  httpurl connection ) uri . create ( ""http: /  / async - io . org / version . html"" )  . tourl (  )  . open connection (  )  ;  url connection . set request property ( "" user -  agent"" "" mozilla / 5 . 0"" )  ;  url connection . set request property ( "" connection"" ""keep - alive"" )  ;  url connection . set request property ( "" cache -  control"" ""max - age = 0"" )  ;  url connection . set request property ( "" accept"" ""text / html application / xhtml + xml application / xml ; q = 0 . 9 * / * ; q = 0 . 8"" )  ;  url connection . set request property ( "" accept -  language"" ""en - us en ; q = 0 . 8"" )  ;  url connection . set request property ( "" accept -  charset"" ""iso - 8859 - 1 utf - 8 ; q = 0 . 7 * ; q = 0 . 3"" )  ;  url connection . set request property ( "" if -  modified -  since"" ""iso - 8859 - 1 utf - 8 ; q = 0 . 7 * ; q = 0 . 3"" )  ;  url connection . set instance follow redirects ( true )  ;   buffered reader in = new  buffered reader ( new  input stream reader ( url connection . get input stream (  )  )  )  ;   string input line ;   string new version =  version . get raw version (  )  ;   string client version = null ;   string next major release = null ;  boolean next available = false ;  if  ( new version . index of ( ""snapshot"" )   =  =   - 1 )   {  try  {  while  (  ( input line = in . read line (  )  . trim (  )  )   !  =  null )   {  if  ( input line . starts with ( ""atmo23   version = "" )  )   {  new version = input line . substring ( ""atmo23   version = "" . length (  )  )  ;   }  else if  ( input line . starts with ( ""client3   version = "" )  )   {  client version = input line . substring ( ""client3   version = "" . length (  )  )  ;  break ;   }  else if  ( input line . starts with ( ""atmo   release   version = "" )  )   {  next major release = input line . substring ( ""atmo   release   version = "" . length (  )  )  ;  if  ( next major release . compare to (  version . get raw version (  )  )   >  0 && next major release . to lower case (  )  . index of ( ""rc"" )   =  =   - 1 && next major release . to lower case (  )  . index of ( ""beta"" )   =  =   - 1 )   {  next available = true ;   }   }   }   }  finally  {  if  ( client version  !  =  null )   {  logger . info ( "" latest version of  atmosphere's  java script  client  {  } "" client version )  ;   }  if  ( new version . compare to (  version . get raw version (  )  )   >  0 )   {  if  ( next available )   {  logger . info ( ""\n\n\t atmosphere  framework  updates\n\t minor available  ( bugs fixes ) :  {  } \n\t major available  ( new features ) :  {  } "" new version next major release )  ;   }  else  {  logger . info ( ""\n\n\t atmosphere  framework  updates:\n\t minor  update available  ( bugs fixes ) :  {  } "" new version )  ;   }   }  else if  ( next available )   {  logger . info ( ""\n\n\t atmosphere  framework  updates:\n\t major  update available  ( new features ) :  {  } "" next major release )  ;   }  try  {  in . close (  )  ;   }  catch  (  io exception ex )   {   }  url connection . disconnect (  )  ;   }   }  j google analytics tracker tracker = new j google analytics tracker (  module detection . detect (  )   version . get raw version (  )  ""ua - 31990725 - 1"" )  ;  tracker . track synchronously ( new  focus point ( container new  focus point ( "" atmosphere"" )  )  )  ;   }  catch  (   throwable e )   {   }   }  "
760,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,servlet config,protected void   ( final  servlet config sc boolean wrap )  {  if  ( wrap )   {   string value = sc . get servlet context (  )  . get init parameter ( use   servlet   context   parameters )  ;  final boolean use servlet context parameters = value  !  =  null &&  boolean . value of ( value )  ;  servlet config = new  servlet config (  )  {   atomic boolean done = new  atomic boolean (  )  ;  public  string get servlet name (  )  {  return sc . get servlet name (  )  ;   }  public  servlet context get servlet context (  )  {  return sc . get servlet context (  )  ;   }  public  string get init parameter (   string name )  {   string param = init params . get ( name )  ;  if  ( param  =  =  null )   {  param = sc . get init parameter ( name )  ;  if  ( param  =  =  null && use servlet context parameters )   {  param = sc . get servlet context (  )  . get init parameter ( name )  ;   }   }  return param ;   }  public  enumeration <  string >  get init parameter names (  )  {  if  (  ! done . get and set ( true )  )   {   enumeration en = sc . get init parameter names (  )  ;  if  ( en  !  =  null )   {  while  ( en . has more elements (  )  )   {   string name =  (  string ) en . next element (  )  ;  if  (  ! init params . contains key ( name )  )   {  init params . put ( name sc . get init parameter ( name )  )  ;   }   }   }   }  return  collections . enumeration ( init params . key set (  )  )  ;   }   }   ;   }  else  {  servlet config = sc ;   }   }  
761,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,session factory,"public synchronized  atmosphere resource session factory   (  )  {  if  ( session factory  =  =  null )   {  try  {  session factory = new class instance (  atmosphere resource session factory . class  default atmosphere resource session factory . class )  ;   }  catch  (   instantiation exception e )   {  logger . error ( """" e )  ;   }  catch  (   illegal access exception e )   {  logger . error ( """" e )  ;   }   }  return session factory ;   }  "
762,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,session support,public void   ( boolean session support )  {  if  (  ! is session support specified )   {  config . set support session ( session support )  ;   }  else if  (  ! config . is support session (  )  )   {  config . set support session ( session support )  ;   }   }  
763,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,set and configure atmosphere resource factory,public void   (  atmosphere resource factory ar factory )  {  this . ar factory = ar factory ;  this . ar factory . configure ( config )  ;   }  
764,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,set async support,public  atmosphere framework   (  async support async support )  {  this . async support = async support ;  return this ;   }  
765,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,set atmosphere dot xml path,public  atmosphere framework   (  string atmosphere dot xml path )  {  this . atmosphere dot xml path = atmosphere dot xml path ;  return this ;   }  
766,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,set broadcaster cache class name,public  atmosphere framework   (  string broadcaster cache class name )  {  this . broadcaster cache class name = broadcaster cache class name ;  return this ;   }  
767,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,set broadcaster factory,public  atmosphere framework   ( final  broadcaster factory broadcaster factory )  {  this . broadcaster factory = broadcaster factory ;  configure broadcaster (  )  ;  return this ;   }  
768,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,set comet support,public  atmosphere framework   (  async support async support )  {  return set async support ( async support )  ;   }  
769,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,set default broadcaster class name,"public  atmosphere framework   (  string bccn )  {  if  ( is broadcaster specified )   {  logger . trace ( "" broadcaster  {  }  already set in web . xml"" broadcaster class name )  ;  return this ;   }  is broadcaster specified = true ;  broadcaster class name = bccn ;  broadcaster factory = null ;  configure broadcaster factory (  )  ;  for  (   atmosphere handler wrapper w : atmosphere handlers . values (  )  )   {  if  ( w . broadcaster  !  =  null )   {  w . broadcaster = broadcaster factory . lookup ( w . broadcaster . getid (  )  true )  ;   }   }  return this ;   }  "
770,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,set default serializer class name,public  atmosphere framework   (  string default serializer class name )  {  this . default serializer class name = default serializer class name ;  init default serializer (  )  ;  return this ;   }  
771,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,set handlers path,public  atmosphere framework   (  string handlers path )  {  this . handlers path = handlers path ;  return this ;   }  
772,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,set lib path,public  atmosphere framework   (  string lib path )  {  this . lib path = lib path ;  return this ;   }  
773,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,set use blocking implementation,public  atmosphere framework   ( boolean use blocking implementation )  {  this . use blocking implementation = use blocking implementation ;  return this ;   }  
774,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,set use native implementation,public  atmosphere framework   ( boolean use native implementation )  {  this . use native implementation = use native implementation ;  return this ;   }  
775,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,set use servlet,public void   ( boolean use servlet30 )  {  this . use servlet30 = use servlet30 ;   }  
776,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,set use stream for flushing comments,public  atmosphere framework   ( boolean use stream for flushing comments )  {  this . use stream for flushing comments = use stream for flushing comments ;  return this ;   }  
777,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,set web socket protocol class name,public  atmosphere framework   (  string web socket protocol class name )  {  has new web socket protocol = true ;  this . web socket protocol class name = web socket protocol class name ;  return this ;   }  
778,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,set websocket processor class name,public  atmosphere framework   (  string web socket processor class name )  {  this . web socket processor class name = web socket processor class name ;  return this ;   }  
779,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,share executor services,public  atmosphere framework   ( boolean shared thread pools )  {  this . shared thread pools = shared thread pools ;  return this ;   }  
780,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,shared thread pools,public  atmosphere framework   ( boolean shared thread pools )  {  this . shared thread pools = shared thread pools ;  return this ;   }  
781,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,started,@ override public void   (  atmosphere framework framework )  {  need request scoped injection =  utils . request scoped injection ( config atmosphere handler )  ;   }  
782,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,to string,"public  string   (  )  {  return "" default atmosphere object factory"" ;   }  "
783,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,universe,protected void   (  )  {   universe . broadcaster factory ( broadcaster factory )  ;   universe . resource factory ( ar factory )  ;   universe . session resource factory ( session factory )  ;   universe . framework ( this )  ;   }  
784,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,uuid provider,public uuid provider   (  )  {  return uuid provider ;   }  
785,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,web socket enabled,public  atmosphere framework   ( boolean web socket enabled )  {  this . web socket enabled = web socket enabled ;  return this ;   }  
786,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,web socket factory,public  atmosphere framework   (  web socket factory web socket factory )  {  this . web socket factory = web socket factory ;  return this ;   }  
787,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,wildcard mapping,public boolean   (  )  {  return wilcard mapping ;   }  
788,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereInterceptorAdapter.java,inspect,@ override public  action   (  atmosphere resource r )  {   atmosphere response res = r . get response (  )  ;  if  ( res . get asyncio writer (  )   =  =  null )   {  res . asyncio writer ( new  atmosphere interceptor writer (  )  )  ;   }  return  action . continue ;   }  
789,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereInterceptorAdapter.java,priority,@ override public priority   (  )  {  return  invokation order . after   default ;   }  
790,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereInterceptorAdapter.java,to string,@ override public  string   (  )  {  return get class (  )  . get name (  )  ;   }  
791,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereInterceptorWriter.java,close,@ override public void   (  atmosphere response response )  throws io exception  {  response . close stream or writer (  )  ;   }  
792,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereInterceptorWriter.java,filters,public  linked list <  asyncio interceptor >    (  )  {  return filters ;   }  
793,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereInterceptorWriter.java,flush,@ override public  asyncio writer   (  atmosphere response response )  throws io exception  {  response . flush buffer (  )  ;  return this ;   }  
794,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereInterceptorWriter.java,interceptor,"public  atmosphere interceptor writer   (  asyncio interceptor filter int index )  {  if  (  ! filters . contains ( filter )  )   {  if  ( logger . is trace enabled (  )  )   {  logger . trace ( "" adding  asyncio interceptor  {  }  at index  {  } "" filter . get class (  )  . get name (  )  index )  ;   }  filters . add ( index filter )  ;  reversed filters . add ( reversed filters . size (  )   -  index filter )  ;   }  return this ;   }  "
795,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereInterceptorWriter.java,invoke interceptor,protected void   (  atmosphere response response byte[] data int offset int length )  throws io exception  {  for  (   asyncio interceptor i : filters )   {  i . pre payload ( response data offset length )  ;   }  byte[] response draft = new byte[length] ;   system . arraycopy ( data offset response draft 0 length )  ;  for  (   asyncio interceptor i : filters )   {  response draft = i . transform payload ( response response draft data )  ;   }  write ready ( response response draft )  ;  for  (   asyncio interceptor i : reversed filters )   {  i . post payload ( response data offset length )  ;   }   }  
796,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereInterceptorWriter.java,redirect,@ override public  asyncio writer   (  atmosphere response response  string location )  throws io exception  {  for  (   asyncio interceptor i : filters )   {  i . redirect ( response location )  ;   }  return this ;   }  
797,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereInterceptorWriter.java,write,@ override public  asyncio writer   (  atmosphere response response byte[] data int offset int length )  throws io exception  {  invoke interceptor ( response data offset length )  ;  return this ;   }  
798,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereInterceptorWriter.java,write error,@ override public  asyncio writer   (  atmosphere response response int error code  string message )  throws io exception  {  for  (   asyncio interceptor i : filters )   {  byte[] b = i . error ( response error code message )  ;  write ready ( response b )  ;   }  return this ;   }  
799,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereInterceptorWriter.java,write ready,protected void   (  atmosphere response response byte[] response draft )  throws io exception  {  response . write ( response draft )  ;   }  
800,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequest.java, local attributes,public   (  )  {  this . local attributes = new  concurrent hash map <  >  (  )  ;   }  
801,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereMappingException.java, atmosphere mapping exception,public   ( java . lang .  throwable throwable )  {  super ( throwable )  ;   }  
802,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceEventImpl.java, atmosphere resource event impl,public   (  atmosphere resource impl resource boolean is cancelled boolean is resumed on timeout boolean is closed by client  throwable throwable )  {  this . is cancelled . set ( is cancelled )  ;  this . is resumed on timeout . set ( is resumed on timeout )  ;  this . resource = resource ;  this . throwable = throwable ;  this . is closed by client . set ( is closed by client )  ;  uuid = resource . uuid (  )  ;   }  
803,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceEventImpl.java,broadcaster,@ override public  broadcaster   (  )  {  return resource . get broadcaster (  )  ;   }  
804,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceEventImpl.java,check,private boolean   (  )  {  return resource  =  =  null  ?  false : true ;   }  
805,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceEventImpl.java,destroy,public  atmosphere resource event   (  )  {  is cancelled . set ( true )  ;  resource = null ;  message = null ;  return this ;   }  
806,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceEventImpl.java,equals,@ override public boolean   (  object o )  {  if  ( this  =  =  o )  return true ;  if  ( o  =  =  null || get class (  )   !  =  o . get class (  )  )  return false ;   atmosphere resource event impl that =  (  atmosphere resource event impl ) o ;  if  ( is cancelled  !  =  null  ?   ! is cancelled . equals ( that . is cancelled )  :
807,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceEventImpl.java,get message,@ override public  object   (  )  {  return message ;   }  
808,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceEventImpl.java,get resource,@ override public  atmosphere resource   (  )  {  return resource ;   }  
809,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceEventImpl.java,hash code,@ override public int   (  )  {  int result = is cancelled  !  =  null  ?  is cancelled . hash code (  )  : 0 ;  result = 31 * result  +   ( is resumed on timeout  !  =  null  ?  is resumed on timeout . hash code (  )  : 0 )  ;  result = 31 * result  +   ( throwable  !  =  null  ?  throwable . hash code (  )  : 0 )  ;  result = 31 * 
810,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceEventImpl.java,is cancelled,@ override public boolean   (  )  {  return is cancelled . get (  )  ;   }  
811,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceEventImpl.java,is closed by application,@ override public boolean   (  )  {  return is closed by application . get (  )  ;   }  
812,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceEventImpl.java,is closed by client,public  atmosphere resource event impl   ( boolean is closed by client )  {  this . is closed by client . set ( is closed by client )  ;  return this ;   }  
813,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceEventImpl.java,is resumed on timeout,@ override public boolean   (  )  {  return is resumed on timeout . get (  )  ;   }  
814,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceEventImpl.java,is resuming,@ override public boolean   (  )  {  return resource  =  =  null  ?  true : resource . is resumed (  )  ;   }  
815,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceEventImpl.java,is suspended,@ override public boolean   (  )  {  return resource  =  =  null  ?  false : resource . is suspended (  )  ;   }  
816,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceEventImpl.java,set cancelled,public  atmosphere resource event impl   ( boolean is cancelled )  {  if  ( check (  )  )   {  resource . action (  )  . type (  action . type . cancelled )  ;  this . is cancelled . set ( is cancelled )  ;   }  return this ;   }  
817,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceEventImpl.java,set close by application,public  atmosphere resource event impl   ( boolean b )  {  is closed by application . set ( b )  ;  return this ;   }  
818,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceEventImpl.java,set is resumed on timeout,protected  atmosphere resource event impl   ( boolean is resumed on timeout )  {  if  ( check (  )  )   {  resource . action (  )  . type (  action . type . timeout )  ;  this . is resumed on timeout . set ( is resumed on timeout )  ;   }  return this ;   }  
819,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceEventImpl.java,set message,@ override public  atmosphere resource event impl   (  object message )  {  this . message = message ;  return this ;   }  
820,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceEventImpl.java,set throwable,public  atmosphere resource event   (  throwable t )  {  this . throwable = t ;  return this ;   }  
821,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceEventImpl.java,throwable,@ override public  throwable   (  )  {  return throwable ;   }  
822,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceEventImpl.java,to string,"@ override public  string   (  )  {  return "" atmosphere resource event impl { ""  +  "" is cancelled = ""  +  is cancelled  +  "" is closed by client = "" +  is closed by client +  "" is closed by application = "" +  is closed by application +  "" is resumed on timeout = "" +  is resumed on timeout +  "" throwable = "" +  throw"
823,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java, atmosphere request impl,"private   (  builder b )  {  super ( b . request  =  =  null  ?  new  no ops request (  )  : b . request )  ;  if  ( b . request  =  =  null )  b . request ( new  no ops request (  )  )  ;  this . b = b ;  this . uuid = resource (  )   !  =  null  ?  resource (  )  . uuid (  )  : ""0"" ;   }  "
824,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java, body,public   (  string data byte[] data bytes int offset int length )  {  this . data = data ;  this . data bytes = data bytes ;  this . offset = offset ;  this . length = length ;  is empty = data  =  =  null && data bytes  =  =  null ;   }  
825,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java, byte input stream,public   ( byte[] data int offset int length )  {  this . bis = new  byte array input stream ( data offset length )  ;   }  
826,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java, completion aware async context,public   (  async context context  completion aware callback )  {  this . context = context ;  this . callback = callback ;   }  
827,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,is,public   (  input stream inner stream )  {  super (  )  ;  this . inner stream = inner stream ;   }  
828,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java, lazy computation,public   (  callable <  inet socket address >  callable )  {  this . callable = callable ;   }  
829,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java, no ops async context,public   (  servlet request request  servlet response response )  {  this . request = request ;  this . response = response ;  this . timeout =  - 1 ;   }  
830,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java, no ops request,public   ( boolean throw exception on cloned )  {  this . throw exception on cloned = throw exception on cloned ;   }  
831,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,address,"public  inet socket address   (  )  {  if  ( address  =  =  null )   {  try  {  address = callable . call (  )  ;   }  catch  (   exception e )   {  logger . warn ( """" e )  ;   }  if  ( address  =  =  null )   {  address = new  inet socket address ( 8080 )  ;   }   }  return address ;   }  "
832,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,as bytes,public byte[]   (  )  {  return data bytes ;   }  
833,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,as string,public  string   (  )  {  return data ;   }  
834,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,attribute without exception,"private static  object   (  http servlet request request  string attribute )  {  try  {  return request . get attribute ( attribute )  ;   }  catch  (   null pointer exception ex )   {  logger . trace ( "" unexpected npe"" ex )  ;  return """" ;   }   }  "
835,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,attributes,@ override public  builder   (  map <  string  object >  attributes )  {  local attributes = new  local attributes ( attributes )  ;  return this ;   }  
836,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,auth type,@ override public  builder   (  string auth type )  {  this . auth type = auth type ;  return this ;   }  
837,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,authenticate,@ override public boolean   (  http servlet response response )  throws io exception   servlet exception  {  return false ;   }  
838,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,available,public int   (  )  throws java . io . io exception  {  return inner stream . available (  )  ;   }  
839,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,body,@ override public  builder   (  string data )  {  this . body = new  body ( data null 0 0 )  ;  return this ;   }  
840,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,build,@ override public  atmosphere request   (  )  {  if  ( body  =  =  null )   {  body = null   body ;   }  return new  atmosphere request impl ( this )  ;   }  
841,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,byte length,public int   (  )  {  return length ;   }  
842,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,byte offset,public int   (  )  {  return offset ;   }  
843,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,change session id,"@ override public  string   (  )  {  return """" ;   }  "
844,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,clone request,"public final static  atmosphere request   (  http servlet request request boolean load in memory boolean copy session boolean is destroyable boolean create session )  {   builder b ;   http servlet request r ;   cookie[] cs = request . get cookies (  )  ;   set <  cookie >  hs =  collections . synchronized set ( new  hash set (  )  )  ;  if  ( cs  !  =  null )   {  for  (   cookie c : cs )   {  hs . add ( c )  ;   }   }  boolean is wrapped = false ;  if  (  atmosphere request impl . class . is assignable from ( request . get class (  )  )  )   {  b =  atmosphere request impl . class . cast ( request )  . b ;  is wrapped = true ;   }  else  {  b = new  builder (  )  ;  b . request ( request )  ;   }   http session session = request . get session ( false )  ;  if  ( copy session )   {  session = request . get session ( create session )  ;  if  ( session  !  =  null )   {  session = new  fake http session ( session )  ;   }  else  {  session = new  fake http session ( """" null  system . current time millis (  )   - 1 )  ;   }   }  b . servlet path ( request . get servlet path (  )  )  . path info ( request . get path info (  )  )  . context path ( request . get context path (  )  )  . requesturi ( request . get requesturi (  )  )  . requesturl ( request . get requesturl (  )  . to string (  )  )  . method ( request . get method (  )  )  . server name ( request . get server name (  )  )  . server port ( request . get server port (  )  )  . remote addr ( request . get remote addr (  )  )  . remote host ( request . get remote host (  )  )  . remote port ( request . get remote port (  )  )  . destroyable ( is destroyable )  . cookies ( hs )  . session ( session )  . principal ( request . get user principal (  )  )  . auth type ( request . get auth type (  )  )  . iss secure ( request . is secure (  )  )  ;  if  ( load in memory )   {   string s =  (  string ) attribute without exception ( request  framework config . throw   exception   on   cloned   request )  ;  boolean throw exception = s  !  =  null &&  boolean . parse boolean ( s )  ;  r = new  no ops request ( throw exception )  ;  if  ( is wrapped )   {  load ( b . request b )  ;   }  else  {  load ( request b )  ;   }  b . request ( r )  ;   }  return is wrapped  ?   atmosphere request impl . class . cast ( request )  : b . build (  )  ;   }  "
845,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,close,public void   (  )  throws java . io . io exception  {  inner stream . close (  )  ;   }  
846,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,configure reader,private  buffered reader   (  )  {  if  ( br  =  =  null &&  ! reader set . get and set ( false )  )   {  if  ( b . reader  !  =  null )   {  br = new  buffered reader ( b . reader )  ;   }  else if  ( b . input stream  =  =  null )   {  try  {  if  ( b . body . data bytes  !  =  null )   {  br = new  buffered reader ( new  string reader ( new  string ( b . body . data bytes b . body . offset b . body . length b . encoding )  )  )  ;   }  else if  ( b . body . data  !  =  null )   {  br = new  buffered reader ( new  string reader ( b . body . data )  )  ;   }   }  catch  (   unsupported encoding exception e )   {  throw new  runtime exception ( e )  ;   }   }  else  {  br = new  buffered reader ( new  input stream reader ( b . input stream )  )  ;   }   }  return br ;   }  
847,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,configure stream,"private  servlet input stream   (  )  {  if  ( bis  =  =  null &&  ! stream set . get and set ( true )  )   {  if  ( b . input stream  !  =  null )   {  bis = new is ( b . input stream )  ;   }  else if  ( b . reader  =  =  null )   {  if  ( b . body . data bytes  !  =  null )   {  bis = new  byte input stream ( b . body . data bytes b . body . offset b . body . length )  ;   }  else if  ( b . body . data  !  =  null )   {  try  {  byte[] bytes = b . body . data . get bytes ( ""utf - 8"" )  ;  bis = new  byte input stream ( bytes 0 bytes . length )  ;   }  catch  (   unsupported encoding exception e )   {  logger . trace ( """" e )  ;   }   }   }  else  {  bis = new is ( new  reader input stream ( b . reader )  )  ;   }   }  return bis ;   }  "
848,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,content length,@ override public  builder   (  long content length )  {  this . content length = content length ;  return this ;   }  
849,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,content type,@ override public  builder   (  string content type )  {  this . content type = content type ;  if  ( content type  =  =  null )   {  no content type = true ;   }  return this ;   }  
850,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,context path,"@ override public  builder   (  string context path )  {  this . context path = context path  =  =  null  ?  """" : context path ;  return this ;   }  "
851,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,cookies,@ override public  builder   (  set <  cookie >  cookies )  {  this . cookies = cookies ;  return this ;   }  
852,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,create listener,"@ override public  < t extends  async listener > t   (  class < t >  clazz )  throws  servlet exception  {  throw new  servlet exception ( "" not supported"" )  ;   }  "
853,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,destroy,@ override public void   ( boolean force )  {  if  (  ! force )  return ;  b . local attributes . clear (  )  ;  if  ( bis  !  =  null )   {  try  {  bis . close (  )  ;   }  catch  (  io exception e )   {   }   }  if  ( br  !  =  null )   {  try  {  br . close (  )  ;   }  catch  (  io exception e )   {   }   }  b . headers . clear (  )  ;  b . query string
854,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,destroyable,@ override public  builder   ( boolean destroyable )  {  this . destroyable = destroyable ;  return this ;   }  
855,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,destroyed,@ override public boolean   (  )  {  return destroyed . get (  )  ;   }  
856,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,dispatch request asynchronously,@ override public  builder   ( boolean dispatch request asynchronously )  {  this . dispatch request asynchronously = dispatch request asynchronously ;  return this ;   }  
857,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,encoding,@ override public  builder   (  string encoding )  {  this . encoding = encoding ;  return this ;   }  
858,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,get async context,@ override public  async context   (  )  {  return null ;   }  
859,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,get attribute,@ override public  object   (  string name )  {  return null ;   }  
860,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,get attribute names,@ override public  enumeration <  string >    (  )  {  return empty   enum   string ;   }  
861,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,get auth type,@ override public  string   (  )  {  return null ;   }  
862,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,get character encoding,@ override public  string   (  )  {  return null ;   }  
863,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,get content length,@ override public int   (  )  {  return 0 ;   }  
864,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,get content length long,@ override public long   (  )  {  return 0 ;   }  
865,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,get content type,"@ override public  string   (  )  {  return ""text / plain"" ;   }  "
866,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,get context path,"@ override public  string   (  )  {  return """" ;   }  "
867,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,get cookies,@ override public  cookie[]   (  )  {  return empty   cookie ;   }  
868,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,get date header,@ override public long   (  string name )  {  return 0 ;   }  
869,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,get dispatcher type,@ override public  dispatcher type   (  )  {  return null ;   }  
870,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,get header,@ override public  string   (  string name )  {  return null ;   }  
871,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,get header names,@ override public  enumeration <  string >    (  )  {  return empty   enum   string ;   }  
872,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,get headers,@ override public  enumeration <  string >    (  string name )  {  return empty   enum   string ;   }  
873,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,get host address,public  string   (  )  {  return address (  )  . get address (  )  . get host address (  )  ;   }  
874,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,get host name,public  string   (  )  {  return address (  )  . get host name (  )  ;   }  
875,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,get input stream,@ override public  servlet input stream   (  )  throws io exception  {  return void stream ;   }  
876,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,get int header,@ override public int   (  string name )  {  return 0 ;   }  
877,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,get local addr,"@ override public  string   (  )  {  return """" ;   }  "
878,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,get local name,@ override public  string   (  )  {  return null ;   }  
879,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,get local port,@ override public int   (  )  {  return 0 ;   }  
880,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,get locale,@ override public  locale   (  )  {  return null ;   }  
881,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,get locales,@ override public  enumeration <  locale >    (  )  {  return empty   enum   locale ;   }  
882,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,get method,"@ override public  string   (  )  {  return ""get"" ;   }  "
883,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,get parameter,"@ override public  string   (  string name )  {  return """" ;   }  "
884,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,get parameter map,@ override public  map <  string  string[] >    (  )  {  return empty   map   string ;   }  
885,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,get parameter names,@ override public  enumeration <  string >    (  )  {  return empty   enum   string ;   }  
886,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,get parameter values,@ override public  string[]   (  string name )  {  return empty   array ;   }  
887,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,get part,@ override public  part   (  string name )  throws io exception   servlet exception  {  return null ;   }  
888,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,get parts,@ override public  collection <  part >    (  )  throws io exception   servlet exception  {  return empty   enum   part ;   }  
889,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,get path info,"@ override public  string   (  )  {  return """" ;   }  "
890,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,get path translated,"@ override public  string   (  )  {  return """" ;   }  "
891,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,get port,public int   (  )  {  return address (  )  . get port (  )  ;   }  
892,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,get protocol,"@ override public  string   (  )  {  return ""http / 1 . 1"" ;   }  "
893,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,get query string,"@ override public  string   (  )  {  return """" ;   }  "
894,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,get reader,@ override public  buffered reader   (  )  throws io exception  {  return get void reader (  )  ;   }  
895,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,get real path,@ override public  string   (  string path )  {  return path ;   }  
896,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,get remote addr,"@ override public  string   (  )  {  return """" ;   }  "
897,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,get remote host,"@ override public  string   (  )  {  return """" ;   }  "
898,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,get remote port,@ override public int   (  )  {  return 0 ;   }  
899,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,get remote user,"@ override public  string   (  )  {  return """" ;   }  "
900,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,get request,@ override public  servlet request   (  )  {  return request ;   }  
901,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,get request dispatcher,@ override public  request dispatcher   (  string path )  {  return null ;   }  
902,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,get requesturi,"@ override public  string   (  )  {  return "" / "" ;   }  "
903,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,get requesturl,@ override public  string buffer   (  )  {  return empty   string   buffer ;   }  
904,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,get requested session id,"@ override public  string   (  )  {  return """" ;   }  "
905,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,get response,@ override public  servlet response   (  )  {  return response ;   }  
906,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,get scheme,"@ override public  string   (  )  {  return ""ws"" ;   }  "
907,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,get server name,"@ override public  string   (  )  {  return """" ;   }  "
908,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,get server port,@ override public int   (  )  {  return 0 ;   }  
909,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,get servlet context,@ override public  servlet context   (  )  {  return null ;   }  
910,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,get servlet path,"@ override public  string   (  )  {  return """" ;   }  "
911,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,get session,"@ override public  http session   ( boolean create )  {  if  ( create && fake  =  =  null )   {  fake = new  fake http session ( """" null  system . current time millis (  )   - 1 )  {  @ override public void invalidate (  )  {  fake = null ;  super . invalidate (  )  ;   }   }   ;   }  return fake ;   }  "
912,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,get timeout,@ override public long   (  )  {  return timeout ;   }  
913,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,get user principal,@ override public  principal   (  )  {  return null ;   }  
914,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,get void reader,"private  buffered reader   (  )  {  if  ( void reader  =  =  null )   {  void reader = new  buffered reader ( new  string reader ( """" )  )  ;   }  return void reader ;   }  "
915,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,has bytes,public boolean   (  )  {  return data bytes  !  =  null ;   }  
916,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,has original request and response,@ override public boolean   (  )  {  return false ;   }  
917,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,has string,public boolean   (  )  {  return data  !  =  null ;   }  
918,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,header,@ override public  atmosphere request   (  string name  string value )  {  b . headers . put ( name value )  ;  return this ;   }  
919,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,headers,@ override public  builder   (  map <  string  string >  headers )  {  this . headers =  collections . synchronized map ( headers )  ;  return this ;   }  
920,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,headers map,@ override public  map <  string  string >    (  )  {  return b . headers ;   }  
921,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,input stream,@ override public  builder   (  input stream input stream )  {  this . input stream = input stream ;  return this ;   }  
922,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,invalidate,@ override public void   (  )  {  fake = null ;  super . invalidate (  )  ;   }  
923,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,is async started,@ override public boolean   (  )  {  return false ;   }  
924,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,is async supported,@ override public boolean   (  )  {  return true ;   }  
925,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,is completion aware,private boolean   (  )  {  return  boolean . parse boolean ( resource (  )  . get atmosphere config (  )  . get init parameter (  application config . response   completion   aware )  )  ;   }  
926,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,is destroyable,@ override public boolean   (  )  {  return b . destroyable ;   }  
927,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,is empty,public boolean   (  )  {  return is empty ;   }  
928,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,is finished,@ override public boolean   (  )  {  try  {  return inner stream . available (  )   =  =  0 ;   }  catch  (  io exception e )   {  throw new  runtime exception ( e )  ;   }   }  
929,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,is not no ops,private boolean   (  )  {  return  !  no ops request . class . is assignable from ( b . request . get class (  )  )  ;   }  
930,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,is ready,@ override public boolean   (  )  {  return true ;   }  
931,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,is requested session id from cookie,@ override public boolean   (  )  {  return false ;   }  
932,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,is requested session id fromurl,@ override public boolean   (  )  {  return false ;   }  
933,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,is requested session id from url,@ override public boolean   (  )  {  return false ;   }  
934,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,is requested session id valid,@ override public boolean   (  )  {  return false ;   }  
935,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,iss secure,@ override public  builder   ( boolean is secure )  {  this . is secure = is secure ;  return this ;   }  
936,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,is secure,@ override public boolean   (  )  {  return false ;   }  
937,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,is user in role,@ override public boolean   (  string role )  {  if  ( this . throw exception on cloned  =  =  true )   {  throw new  unsupported operation exception (  )  ;   }  return false ;   }  
938,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,load,private static void   (  http servlet request request  builder b )  {   enumeration <  string >  e = request . get header names (  )  ;   string s ;  while  ( e . has more elements (  )  )   {  s = e . next element (  )  ;  b . headers . put ( s request . get header ( s )  )  ;   }  synchronized  ( b . request )   {  e = request . get attribute names (  )  ;   }  while  ( e . has more elements (  )  )   {  s = e . next element (  )  ;  b . local attributes . put ( s attribute without exception ( request s )  )  ;   }  e = request . get parameter names (  )  ;  while  ( e . has more elements (  )  )   {  s = e . next element (  )  ;  b . query strings . put ( s request . get parameter values ( s )  )  ;   }  b . query string = request . get query string (  )  ;   enumeration <  locale >  l = request . get locales (  )  ;  while  ( l . has more elements (  )  )   {  b . locale ( l . next element (  )  )  ;   }   }  
939,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,local addr,@ override public  builder   (  string local addr )  {  this . local addr = local addr ;  return this ;   }  
940,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,local attributes,@ override public  local attributes   (  )  {  return b . local attributes ;   }  
941,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,local inet socket address,@ override public  builder   (  callable local addr )  {  this . lazy local = new  lazy computation ( local addr )  ;  return this ;   }  
942,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,local name,@ override public  builder   (  string local name )  {  this . local name = local name ;  return this ;   }  
943,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,local port,@ override public  builder   ( int local port )  {  this . local port = local port ;  return this ;   }  
944,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,locale,@ override public  builder   (  locale locale )  {  locales . add ( locale )  ;  return this ;   }  
945,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,login,@ override public void   (  string username  string password )  throws  servlet exception  {  if  ( this . throw exception on cloned  =  =  true )   {  throw new  servlet exception (  )  ;   }   }  
946,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,logout,@ override public void   (  )  throws  servlet exception  {  if  ( this . throw exception on cloned  =  =  true )   {  throw new  servlet exception (  )  ;   }   }  
947,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,mark,public synchronized void   ( int i )  {  inner stream . mark ( i )  ;   }  
948,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,mark supported,public boolean   (  )  {  return inner stream . mark supported (  )  ;   }  
949,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,method,@ override public  builder   (  string method type )  {  this . method type = method type ;  return this ;   }  
950,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,new instance,public final static  atmosphere request   (  )  {  return new  builder (  )  . build (  )  ;   }  
951,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,path info,@ override public  builder   (  string path info )  {  this . path info = path info ;  return this ;   }  
952,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,principal,@ override public  builder   (  principal principal )  {  this . principal = principal ;  return this ;   }  
953,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,query string,@ override public  builder   (  string query string )  {  this . query string = query string ;  return this ;   }  
954,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,query strings,@ override public  builder   (  map <  string  string[] >  query strings )  {  this . query strings =  collections . synchronized map ( query strings )  ;  return this ;   }  
955,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,query strings map,@ override public  map <  string  string[] >    (  )  {  return b . query strings ;   }  
956,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,read,public int   ( byte[] bytes int i int i1 )  throws java . io . io exception  {  return inner stream . read ( bytes i i1 )  ;   }  
957,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,reader,@ override public  builder   (  reader reader )  {  this . reader = reader ;  return this ;   }  
958,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,remote addr,@ override public  builder   (  string remote addr )  {  this . remote addr = remote addr ;  return this ;   }  
959,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,remote host,@ override public  builder   (  string remote host )  {  this . remote host = remote host ;  return this ;   }  
960,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,remote inet socket address,@ override public  builder   (  callable remote addr )  {  this . lazy remote = new  lazy computation ( remote addr )  ;  return this ;   }  
961,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,remote port,@ override public  builder   ( int remote port )  {  this . remote port = remote port ;  return this ;   }  
962,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,request,@ override public  builder   (  http servlet request request )  {  this . request = request ;  return this ;   }  
963,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,requesturi,@ override public  builder   (  string requesturi )  {  this . requesturi = requesturi ;  return this ;   }  
964,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,requesturl,@ override public  string   (  )  {  return b . requesturl ;   }  
965,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,reset,public synchronized void   (  )  throws java . io . io exception  {  inner stream . reset (  )  ;   }  
966,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,resource,@ override public  atmosphere resource   (  )  {  return  (  atmosphere resource ) get attribute (  framework config . atmosphere   resource )  ;   }  
967,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,server name,@ override public  builder   (  string server name )  {  this . server name = server name ;  return this ;   }  
968,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,server port,@ override public  builder   ( int server port )  {  this . server port = server port ;  return this ;   }  
969,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,servlet path,@ override public  builder   (  string servlet path )  {  this . servlet path = servlet path ;  return this ;   }  
970,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,session,@ override public  builder   (  http session session )  {  if  ( request  =  =  null )   {  request = new  no ops request (  )  ;   }  if  (  no ops request . class . is assignable from ( request . get class (  )  )  )   {   no ops request . class . cast ( request )  . fake = session ;   }  else  {  web socket fake session = session ;   }  re
971,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,set request,@ override public void   (  servlet request request )  {  super . set request ( request )  ;  if  (  http servlet request . class . is assignable from ( request . get class (  )  )  )   {  b . request =  http servlet request . class . cast ( request )  ;   }   }  
972,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,set timeout,@ override public void   ( long timeout )  throws  illegal state exception  {  this . timeout = timeout ;   }  
973,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,skip,public long   ( long l )  throws java . io . io exception  {  return inner stream . skip ( l )  ;   }  
974,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,start,"@ override public void   (  runnable run )  {  throw new  runtime exception ( "" not supported"" )  ;   }  "
975,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,start async,@ override public  async context   (  servlet request request  servlet response response )  {  return null ;   }  
976,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,to qs,"private  string   (  )  {   string builder q = new  string builder (  )  ;  for  (   map .  entry <  string  string[] >  e : b . query strings . entry set (  )  )   {  for  (   string k : e . get value (  )  )   {  q . append ( e . get key (  )  )  . append ( "" = "" )  . append ( k )  . append ( ""&"" )  ;   }   }  if  ( q . length (  )   >  0 )  q . delete char at ( q . length (  )   -  1 )  ;  return q . to string (  )  ;   }  "
977,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,to string,"@ override public  string   (  )  {  try  {  return "" atmosphere request { ""  +  "" method = ""  +  get method (  )   +  "" context path = "" +  get context path (  )  +  "" servlet path = "" +  get servlet path (  )  +  "" path info = "" +  get path info (  )  +  "" requesturi = "" +  get requesturi (  )  +  "" requesturl = "" +  get requesturl (  ) "
978,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,upgrade,@ override public  < t extends  http upgrade handler > t   (  class < t >  a class )  throws io exception   servlet exception  {  return null ;   }  
979,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,user principal,@ override public  builder   (  principal user principal )  {  this . principal = user principal ;  return this ;   }  
980,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,uuid,"@ override public  string   (  )  {  if  ( uuid  =  =  ""0"" )   {  this . uuid = resource (  )   !  =  null  ?  resource (  )  . uuid (  )  : ""0"" ;   }  return uuid ;   }  "
981,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,wrap,public final static  atmosphere request   (  http servlet request request )  {  if  (  atmosphere request impl . class . is assignable from ( request . get class (  )  )  )   {  return  atmosphere request impl . class . cast ( request )  ;   }   builder b = new  builder (  )  ;   enumeration <  string >  e = request . get attribute names (  )  ;   string s ;  while  ( e . has more elements (  )  )   {  s = e . next element (  )  ;  b . local attributes . put ( s attribute without exception ( request s )  )  ;   }  return b . request ( request )  . build (  )  ;   }  
982,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,wrapped request,@ override public  http servlet request   (  )  {  return b . request ;   }  
983,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceListenerAdapter.java,on disconnect,"@ override public void   (  string uuid )  {  logger . trace ( "" disconnected  {  } "" uuid )  ;   }  "
984,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceListenerAdapter.java,on suspended,"@ override public void   (  string uuid )  {  logger . trace ( "" suspended  {  } "" uuid )  ;   }  "
985,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java, atmosphere resource impl,@ deprecated public   (  atmosphere config config  broadcaster broadcaster  atmosphere request req  atmosphere response response  async support async support  atmosphere handler atmosphere handler )  {  initialize ( config broadcaster req response async support atmosphere handle
986,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,   destroy,"public void   (  )  {  try  {  if  (  ! is cancelled . get (  )  )   {  remove from all broadcasters (  )  ;   }  broadcasters . clear (  )  ;  unregister (  )  ;  remove event listeners (  )  ;   }  catch  (   throwable t )   {  logger . trace ( ""destroy resource"" t )  ;   }  finally  {  unregister (  )  ;  web socket = null ;   }   }  "
987,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,action,public  action   (  )  {  return action ;   }  
988,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,add broadcaster,@ override public  atmosphere resource   (  broadcaster broadcaster )  {  return unique broadcaster ( broadcaster )  ;   }  
989,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,add event listener,@ override public  atmosphere resource   (  atmosphere resource event listener e )  {  if  ( listeners . contains ( e )  )  return this ;  listeners . add ( e )  ;  return this ;   }  
990,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,atmosphere handler,public  atmosphere resource impl   (  atmosphere handler atmosphere handler )  {  this . atmosphere handler = atmosphere handler ;  return this ;   }  
991,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,atmosphere resource event listener,public  concurrent linked queue <  atmosphere resource event listener >    (  )  {  return listeners ;   }  
992,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,broadcasters,@ override public  list <  broadcaster >    (  )  {  return  collections . unmodifiable list ( broadcasters )  ;   }  
993,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,cancel,"public void   (  )  throws io exception  {  try  {  if  (  ! is cancelled . get and set ( true )  )   {  suspended . set ( false )  ;  logger . trace ( "" cancelling  {  } "" uuid )  ;  if  ( config . get broadcaster factory (  )   !  =  null )   {  remove from all broadcasters (  )  ;  if  ( transport . equals ( transport . websocket )  )   {   string parentuuid =  (  string ) req . get attribute ( suspended   atmosphere   resource   uuid )  ;   atmosphere resource p = config . resources factory (  )  . find ( parentuuid )  ;  if  ( p  !  =  null )   {  p . remove from all broadcasters (  )  ;   }   }   }  async support . complete ( this )  ;   session timeout support . restore timeout ( req )  ;  action . type (  action . type . cancelled )  ;  if  ( async support  !  =  null )  async support . action ( this )  ;  if  (  atmosphere response impl . class . is assignable from ( response . get class (  )  )  )   {  if  ( close on cancel )   {   atmosphere response impl . class . cast ( response )  . close (  )  ;   }   atmosphere response impl . class . cast ( response )  . destroy (  )  ;   }  if  (  atmosphere request impl . class . is assignable from ( req . get class (  )  )  )   {  if  ( close on cancel )   {   atmosphere request impl . class . cast ( req )  . destroy (  )  ;   }   }  event . destroy (  )  ;   }   }  finally  {  unregister (  )  ;   }   }  "
994,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,clone state,public  atmosphere resource impl   (  atmosphere resource r )  {  for  (   atmosphere resource event listener l :  atmosphere resource impl . class . cast ( r )  . atmosphere resource event listener (  )  )   {  add event listener ( l )  ;   }   atmosphere resource impl . class . cast ( r )  . session ( r . session (  )  )  ;  boolean is first = true ;  for  (   broadcaster b : broadcasters )   {  if  ( is first )   {  is first = false ;  set broadcaster ( b )  ;   }  else  {  add broadcaster ( b )  ;   }   }  atmosphere handler ( r . get atmosphere handler (  )  )  ;  return this ;   }  
995,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,close,@ override public void   (  )  throws io exception  {  event . set close by application ( true )  ;  notify listeners (  )  ;  cancel (  )  ;  if  ( web socket  !  =  null && web socket . is open (  )  )   {  web socket . close (  )  ;   }   }  
996,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,configure transport,"private transport   (  )  {  if  ( req  =  =  null )  return undefined ;   string s = req . get header (  header config . x   atmosphere   transport )  ;  if  ( s  =  =  null )  return undefined ;  if  ( s . equals ( undefined . name (  )  )  &&  utils . raw web socket ( req )  )   {  return transport . websocket ;   }  s = s . replace ( "" - "" ""   "" )  . to upper case (  )  ;  if  ( transport . polling . name (  )  . equals ( s )  )   {  return transport . polling ;   }  else if  ( transport . long   polling . name (  )  . equals ( s )  )   {  return transport . long   polling ;   }  else if  ( transport . streaming . name (  )  . equals ( s )  )   {  return transport . streaming ;   }  else if  ( transport . jsonp . name (  )  . equals ( s )  )   {  return transport . jsonp ;   }  else if  ( transport . websocket . name (  )  . equals ( s )  )   {  return transport . websocket ;   }  else if  ( transport . sse . name (  )  . equals ( s )  )   {  return transport . sse ;   }  else if  ( transport . ajax . name (  )  . equals ( s )  )   {  return transport . ajax ;   }  else if  ( transport . close . name (  )  . equals ( s )  )   {  return transport . close ;   }  else  {  return undefined ;   }   }  "
997,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,dirty close,"public void   (  )  {  try  {  event . set cancelled ( true )  ;  notify listeners (  )  ;  cancel (  )  ;  if  ( web socket  !  =  null )   {  web socket . close (  )  ;   }   }  catch  (  io exception ex )   {  logger . trace ( """" ex )  ;   }   }  "
998,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,disable suspend,public  atmosphere resource impl   ( boolean disable suspend )  {  this . disable suspend = disable suspend ;  return this ;   }  
999,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,disable suspend event,public boolean   (  )  {  return disable suspend event ;   }  
1000,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,equals,@ override public boolean   (  object o )  {  if  ( this  =  =  o )  return true ;  if  ( o  =  =  null || get class (  )   !  =  o . get class (  )  )  return false ;   atmosphere resource impl that =  (  atmosphere resource impl ) o ;  if  ( uuid  !  =  null  ?   ! uuid . equals ( that . uuid )  : that . uuid  !  =  null )  return fals
1001,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,force binary write,@ override public boolean   (  )  {  return force binary write ;   }  
1002,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,get and set in closing phase,public boolean   (  )  {  return in closing phase . get and set ( true )  ;   }  
1003,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,get and set pending close,public boolean   (  )  {  return is pending close . get and set ( true )  ;   }  
1004,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,get atmosphere config,@ override public  atmosphere config   (  )  {  return config ;   }  
1005,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,get atmosphere handler,@ override public  atmosphere handler   (  )  {  return atmosphere handler ;   }  
1006,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,get atmosphere resource event,@ override public  atmosphere resource event impl   (  )  {  return event ;   }  
1007,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,get broadcaster,"protected  broadcaster   ( boolean auto create )  {  if  ( broadcaster  =  =  null )   {  throw new  illegal state exception ( "" no  broadcaster associated with this  atmosphere resource . "" )  ;   }   string s = config . get init parameter (  application config . recover   dead   broadcaster )  ;  if  ( s  !  =  null )   {  auto create =  boolean . parse boolean ( s )  ;   }  if  ( auto create && broadcaster . is destroyed (  )  && config . get broadcaster factory (  )   !  =  null )   {  logger . debug ( "" broadcaster  {  }  has been destroyed and cannot be re - used .   recreating a new one with the same name .   you can turn off this""  +  "" mechanism by adding  in web . xml   {  }  set to false"" broadcaster . getid (  )   application config . recover   dead   broadcaster )  ;   broadcaster . scope scope = broadcaster . get scope (  )  ;  synchronized  ( this )   {   string id = scope  !  =   broadcaster . scope . request  ?  broadcaster . getid (  )  : broadcaster . getid (  )   +  "" . recovered""  +  config . uuid provider (  )  . generate uuid (  )  ;  broadcaster = config . get broadcaster factory (  )  . lookup ( id true )  ;  broadcaster . set scope ( scope )  ;  broadcaster . add atmosphere resource ( this )  ;   }   }  return broadcaster ;   }  "
1008,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,get request,@ override public  atmosphere request   (  )  {  return get request ( true )  ;   }  
1009,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,get response,@ override public  atmosphere response   (  )  {  return get response ( true )  ;   }  
1010,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,get serializer,@ override public  serializer   (  )  {  return serializer ;   }  
1011,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,hash code,@ override public int   (  )  {  return uuid  !  =  null  ?  uuid . hash code (  )  : 0 ;   }  
1012,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,initialize,@ override public  atmosphere resource   (  atmosphere config config  broadcaster broadcaster  atmosphere request req  atmosphere response response  async support async support  atmosphere handler atmosphere handler )  {  this . req = req ;  this . response = response ;  this . config = confi
1013,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,is cancelled,@ override public boolean   (  )  {  return is cancelled . get (  )  ;   }  
1014,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,is in scope,public boolean   (  )  {  return is in scope . get (  )  ;   }  
1015,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,is pending close,public boolean   (  )  {  return is pending close . get (  )  ;   }  
1016,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,is resumed,@ override public boolean   (  )  {  return is resumed . get (  )  ;   }  
1017,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,is suspended,@ override public boolean   (  )  {  return suspended . get (  )  ;   }  
1018,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,listeners,public  concurrent linked queue <  atmosphere resource event listener >    (  )  {  return listeners ;   }  
1019,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,notify listeners,"@ override public  atmosphere resource   (  atmosphere resource event event )  {  if  ( listeners . is empty (  )  && config . framework (  )  . atmosphere resource listeners (  )  . is empty (  )  )   {  logger . trace ( "" no listener with  {  } "" uuid )  ;  return this ;   }  logger . trace ( "" invoking listener  {  }  for "
1020,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,on broadcast,void   (  atmosphere resource event e )  {  for  (   atmosphere resource event listener r : listeners )   {  r . on broadcast ( e )  ;   }   }  
1021,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,on close,void   (  atmosphere resource event e )  {  for  (   atmosphere resource event listener r : listeners )   {  r . on close ( e )  ;  if  ( transport . equals ( transport . websocket )  &&  web socket event listener . class . is assignable from ( r . get class (  )  )  )   {   web socket event listener . class . cast ( r )  . on close ( new  web socket event listener .  web socket event ( 1005 close web socket )  )  ;   }   }   }  
1022,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,on disconnect,void   (  atmosphere resource event e )  {  for  (   atmosphere resource event listener r : listeners )   {  r . on disconnect ( e )  ;  if  ( transport . equals ( transport . websocket )  &&  web socket event listener . class . is assignable from ( r . get class (  )  )  )   {   web socket event listener . class . cast ( r )  . on disconnect ( new  web socket event listener .  web socket event ( 1005 close web socket )  )  ;   }   }  if  ( e . get resource (  )   !  =  null )   {  config . framework (  )  . notify destroyed ( e . get resource (  )  . uuid (  )  )  ;   }   }  
1023,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,on heartbeat,void   (  atmosphere resource event e )  {  for  (   atmosphere resource event listener r : listeners )   {  r . on heartbeat ( e )  ;   }   }  
1024,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,on pre suspend,void   (  atmosphere resource event e )  {  for  (   atmosphere resource event listener r : listeners )   {  if  ( disable suspend event )   {  if  (  !  allow interceptor . class . is assignable from ( r . get class (  )  )  )   {  continue ;   }   }  r . on pre suspend ( e )  ;   }   }  
1025,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,on resume,void   (  atmosphere resource event e )  {  for  (   atmosphere resource event listener r : listeners )   {  r . on resume ( e )  ;   }   }  
1026,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,on suspend,void   (  atmosphere resource event e )  {  for  (   atmosphere resource event listener r : listeners )   {  if  ( disable suspend event )   {  if  (  !  allow interceptor . class . is assignable from ( r . get class (  )  )  )   {  continue ;   }   }  r . on suspend ( e )  ;   }  if  ( e . get resource (  )   !  =  null )   {  config . framework (  )  . notify suspended ( e . get resource (  )  . uuid (  )  )  ;   }   }  
1027,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,on throwable,void   (  atmosphere resource event e )  {  for  (   atmosphere resource event listener r : listeners )   {  r . on throwable ( e )  ;   }   }  
1028,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,register,protected void   (  )  {  if  (  !  utils . pollable transport ( transport (  )  )  &&  !  utils . web socket message ( this )  )   {  config . resources factory (  )  . register uuid for find candidate ( this )  ;   }   }  
1029,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,remove broadcaster,@ override public  atmosphere resource   (  broadcaster broadcaster )  {  broadcasters . remove ( broadcaster )  ;  return this ;   }  
1030,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,remove event listener,@ override public  atmosphere resource   (  atmosphere resource event listener e )  {  listeners . remove ( e )  ;  return this ;   }  
1031,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,remove event listeners,@ override public  atmosphere resource   (  )  {  listeners . clear (  )  ;  return this ;   }  
1032,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,remove from all broadcasters,"@ override public  atmosphere resource   (  )  {  for  (   broadcaster b : broadcasters )   {  try  {  b . remove atmosphere resource ( this )  ;   }  catch  (   exception ex )   {  logger . trace ( """" ex )  ;   }   }  return this ;   }  "
1033,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,reset,public void   (  )  {  is resumed . set ( false )  ;  is cancelled . set ( false )  ;  is pending close . set ( false )  ;  is in scope . set ( true )  ;  is suspend event . set ( false )  ;  listeners . clear (  )  ;  action . type (  action . type . created )  ;   }  
1034,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,resume,"@ override public  atmosphere resource   (  )  {  if  (  ! is suspended (  )  )   {  logger . trace ( "" atmosphere resource  {  }  not suspended  {  }   cannot resume it . "" uuid (  )  action )  ;  return this ;   }  try  {  if  (  ! is resumed . get and set ( true )  && is in scope . get (  )  )   {  suspended . set ( false )  ;  logger . "
1035,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,resume on broadcast,@ override public boolean   (  )  {  boolean rob = resume on broadcast . get (  )  ;  if  (  ! rob )   {  try  {   boolean b =  (  boolean ) req . get attribute (  application config . resume   on   broadcast )  ;  return b  =  =  null  ?  false : b ;   }  catch  (   class cast exception ex )   {  return false ;   }   }  return rob ; 
1036,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,session,public  atmosphere resource impl   (  http session session )  {  this . session = session ;  return this ;   }  
1037,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,set broadcaster,@ override public  atmosphere resource   (  broadcaster broadcaster )  {  this . broadcaster = broadcaster ;  return unique broadcaster ( broadcaster )  ;   }  
1038,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,set is in scope,public void   ( boolean is in scope )  {  this . is in scope . set ( is in scope )  ;   }  
1039,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,set serializer,@ override public  atmosphere resource   (  serializer s )  {  serializer = s ;  return this ;   }  
1040,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,suspend,@ override public  atmosphere resource   ( long timeout )  {  if  ( event . is suspended (  )  || disable suspend )  return this ;  if  ( config . is support session (  )  && req . get session ( false )   !  =  null && req . get session (  )  . get max inactive interval (  )   >  =  0 && req . get session (  )  . get max inactiv
1041,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,to string,"@ override public  string   (  )  {  try  {  return "" atmosphere resource { ""  +  ""\n\t uuid = ""  +  uuid  +  "" \n\t transport = "" +  transport (  )  +  "" \n\t is in scope = "" +  is in scope +  "" \n\t is resumed = "" +  is resumed (  )  +  "" \n\t is cancelled = "" +  is cancelled (  )  +  "" \n\t is suspended = "" +  is suspended"
1042,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,transport,public  atmosphere resource impl   ( transport transport )  {  this . transport = transport ;  return this ;   }  
1043,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,unique broadcaster,"protected  atmosphere resource   (  broadcaster newb )  {  if  ( newb  =  =  null )   {  return this ;   }  for  (   broadcaster b : broadcasters )   {  if  ( b . getid (  )   !  =  null && b . getid (  )  . equals ignore case ( newb . getid (  )  )  )   {  logger . trace ( "" duplicate  broadcaster  {  } "" newb )  ;  return this ;   }   }  broadcasters . add ( newb )  ;  return this ;   }  "
1044,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,unregister,private void   (  )  {  config . resources factory (  )  . remove ( uuid )  ;   }  
1045,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,uuid,@ override public  string   (  )  {  return uuid ;   }  
1046,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,web socket,public  atmosphere resource impl   (  web socket web socket )  {  this . web socket = web socket ;  return this ;   }  
1047,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,write,@ override public  atmosphere resource   ( byte[] o )  {  response . write ( o )  ;  if  ( resume on broadcast (  )  )   {  resume (  )  ;   }  return this ;   }  
1048,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,write on timeout,@ override public  object   (  )  {  return write on timeout ;   }  
1049,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereSession.java, atmosphere session,public   (  atmosphere resource resource )  {  this ( resource resource . get atmosphere config (  )  . get broadcaster factory (  )  . lookup all (  )  . to array ( new  broadcaster[] {  }  )  )  ;   }  
1050,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereSession.java,acquire,public  atmosphere resource   (  )  {  enter lock (  )  ;  try  {  return resource ;   }  finally  {  release lock (  )  ;   }   }  
1051,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereSession.java,await nanos for resource to be present,private boolean   ( long nanos boolean signal before waiting )  throws  interrupted exception  {  if  ( signal before waiting )   {  signal waiter (  )  ;   }  do  {  if  ( nanos  <  0l )   {  return false ;   }  nanos = resource present . await nanos ( nanos )  ;   }  while  ( resource  =  =  null )  ;  return true ;   }  
1052,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereSession.java,close,public void   (  )  {  for  (   broadcaster br : related broadcasters )   {  br . remove broadcaster listener ( broadcaster listener )  ;   }   }  
1053,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereSession.java,enter lock,private void   (  )  {  lock . lock (  )  ;   }  
1054,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereSession.java,enter lock when resource present,private boolean   ( int time in second )  throws  interrupted exception  {  long timeout nanos =  time unit . seconds . to nanos ( time in second )  ;  final boolean reentrant = lock . is held by current thread (  )  ;  if  (  ! lock . try lock (  )  )   {  final long deadline =  system . nano time (  )   +  timeout nanos ;  if  (  ! lock . try lock ( time in second  time unit . seconds )  )   {  return false ;   }  timeout nanos = deadline  -   system . nano time (  )  ;   }  boolean satisfied = false ;  boolean threw = true ;  try  {  satisfied =  ( resource  !  =  null )  || await nanos for resource to be present ( timeout nanos reentrant )  ;  threw = false ;  return satisfied ;   }  finally  {  if  (  ! satisfied )   {  try  {  if  ( threw &&  ! reentrant )   {  signal waiter (  )  ;   }   }  finally  {  lock . unlock (  )  ;   }   }   }   }  
1055,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereSession.java,on add atmosphere resource,"@ override public void   (  broadcaster b  atmosphere resource r )  {  if  ( r . uuid (  )  . equals ignore case ( uuid )  )   {  logger . trace ( "" atmosphere session tracking :  atmosphere resource  {  }  added"" uuid )  ;  set resource ( r )  ;   }   }  "
1056,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereSession.java,on remove atmosphere resource,"@ override public void   (  broadcaster b  atmosphere resource r )  {  if  ( r . uuid (  )  . equals ignore case ( uuid )  )   {  logger . trace ( "" atmosphere session tracking :  atmosphere resource  {  }  removed"" uuid )  ;  set resource ( null )  ;   }   }  "
1057,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereSession.java,release lock,private void   (  )  {  try  {  if  ( lock . get hold count (  )   =  =  1 )   {  signal waiter (  )  ;   }   }  finally  {  lock . unlock (  )  ;   }   }  
1058,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereSession.java,set resource,private void   ( final  atmosphere resource res )  {  enter lock (  )  ;  try  {  resource = res ;   }  finally  {  release lock (  )  ;   }   }  
1059,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereSession.java,signal waiter,private void   (  )  {  if  ( resource  !  =  null )   {  resource present . signal (  )  ;   }   }  
1060,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereSession.java,try acquire,"public  atmosphere resource   ( int time in second )  throws  interrupted exception  {  if  (  ! enter lock when resource present ( time in second )  )   {  throw new  illegal state exception ( "" there is no resource for session ""  +  uuid )  ;   }  try  {  return resource ;   }  finally  {  release lock (  )  ;   }   }  "
1061,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereSession.java,uuid,public  string   (  )  {  return uuid ;   }  
1062,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereServlet.java, atmosphere servlet,public   ( boolean is filter boolean auto detect handlers )  {  initializer = new  atmosphere framework initializer ( is filter auto detect handlers )  ;   }  
1063,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereServlet.java,configure framework,protected  atmosphere servlet   (  servlet config sc boolean init )  throws  servlet exception  {  initializer . configure framework ( sc init false  atmosphere framework . class )  ;  return this ;   }  
1064,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereServlet.java,destroy,@ override public void   (  )  {  initializer . destroy (  )  ;   }  
1065,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereServlet.java,do delete,@ override public void   (  http servlet request req  http servlet response res )  throws io exception   servlet exception  {  do post ( req res )  ;   }  
1066,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereServlet.java,do get,@ override public void   (  http servlet request req  http servlet response res )  throws io exception   servlet exception  {  do post ( req res )  ;   }  
1067,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereServlet.java,do head,@ override public void   (  http servlet request req  http servlet response res )  throws io exception   servlet exception  {  do post ( req res )  ;   }  
1068,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereServlet.java,do options,@ override public void   (  http servlet request req  http servlet response res )  throws io exception   servlet exception  {  do post ( req res )  ;   }  
1069,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereServlet.java,do post,@ override public void   (  http servlet request req  http servlet response res )  throws io exception   servlet exception  {  framework (  )  . do comet support (  atmosphere request impl . wrap ( req )   atmosphere response impl . wrap ( res )  )  ;   }  
1070,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereServlet.java,do put,@ override public void   (  http servlet request req  http servlet response res )  throws io exception   servlet exception  {  do post ( req res )  ;   }  
1071,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereServlet.java,do trace,@ override public void   (  http servlet request req  http servlet response res )  throws io exception   servlet exception  {  do post ( req res )  ;   }  
1072,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereServlet.java,framework,public  atmosphere framework   (  )  {  return initializer . framework (  )  ;   }  
1073,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereServlet.java,init,@ override public void   ( final  servlet config sc )  throws  servlet exception  {  configure framework ( sc )  ;  super . init ( sc )  ;   }  
1074,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereServlet.java,new atmosphere framework,protected  atmosphere framework   (  )  {  return initializer . new atmosphere framework (  atmosphere framework . class )  ;   }  
1075,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java, atmosphere response impl,private   (  builder b )  {  super ( b . atmosphere response )  ;  response = b . atmosphere response ;  this . asyncio writer = b . asyncio writer ;  this . atmosphere request = b . atmosphere request ;  this . status = b . status ;  this . status message = b . status message ;  this . write status and header . set ( b . write status and header . get (  )  )  ;  this . headers = b . headers ;  this . delegate to native response = asyncio writer  =  =  null ;  this . destroyable = b . destroyable ;   }  
1076,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java, stream,  ( boolean buffering )  {  this . buffering = buffering ;   }  
1077,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java, writer,public   (  output stream out )  {  super ( out )  ;   }  
1078,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,   r,private  http servlet response   (  )  {  return  http servlet response . class . cast ( response )  ;   }  
1079,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,add cookie,@ override public void   (  cookie cookie )  {  if  ( delegate to native response )   {     r (  )  . add cookie ( cookie )  ;   }  else  {  cookies . add ( cookie )  ;   }   }  
1080,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,add date header,@ override public void   (  string name long date )  {  if  (  ! delegate to native response )   {  headers . put ( name  string . value of ( date )  )  ;   }  else  {     r (  )  . set date header ( name date )  ;   }   }  
1081,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,add header,"@ override public void   (  string name  string value )  {  if  ( value  =  =  null )  value = """" ;  headers . put ( name value )  ;  if  ( delegate to native response )   {     r (  )  . add header ( name value )  ;   }   }  "
1082,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,add int header,@ override public void   (  string name int value )  {  set header ( name  string . value of ( value )  )  ;   }  
1083,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,asyncio writer,@ override public  atmosphere response   (  asyncio writer asyncio writer )  {  this . asyncio writer = asyncio writer ;  force asyncio writer = true ;  return this ;   }  
1084,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,build,@ override public  atmosphere response   (  )  {  return new  atmosphere response impl ( this )  ;   }  
1085,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,close,@ override public void   (  )  {  if  (  ! valid flush or close (  )  || asyncio writer instanceof  keep open stream aware )  return ;  boolean b = force asyncio writer ;  force asyncio writer = false ;  try  {  asyncio writer . close (  atmosphere response impl . this )  ;   }  catch  (  io exception e )   {  handlee
1086,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,close stream or writer,"@ override public void   (  )  {  if  ( resource (  )   !  =  null )   {  try  {  if  ( is using stream (  )  )   {  get output stream (  )  . close (  )  ;   }  else  {  get writer (  )  . close (  )  ;   }   }  catch  (   exception e )   {  logger . trace ( "" unexpected exception"" e )  ;   }   }   }  "
1087,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,completed,@ override public boolean   (  )  {  return completed ;   }  
1088,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,construct status and headers,"private  string   (  )  {   string builder b = new  string builder ( ""http / 1 . 1"" )  . append ( "" "" )  . append ( status )  . append ( "" "" )  . append ( status message )  . append ( ""\r\n"" )  ;   string content type header = headers . get ( "" content -  type"" )  ;  b . append ( "" content -  type:"" )  . append ( content type header  =  =  null  ?  content type : content type header )  . append ( ""\r\n"" )  ;  if  ( content length  !  =   - 1 )   {  b . append ( "" content -  length:"" )  . append ( content length )  . append ( ""\r\n"" )  ;   }  for  (   string s : headers (  )  . key set (  )  )   {  if  (  ! s . equals ignore case ( "" content -  type"" )  )   {  b . append ( s )  . append ( "":"" )  . append ( headers . get ( s )  )  . append ( ""\r\n"" )  ;   }   }  b . delete char at ( b . length (  )   -  2 )  ;  b . append ( ""\r\n\r\n"" )  ;  return b . to string (  )  ;   }  "
1089,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,contains header,@ override public boolean   (  string name )  {  return  ! delegate to native response  ?   ( headers . get ( name )   =  =  null  ?  false : true )  :    r (  )  . contains header ( name )  ;   }  
1090,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,delegate to native response,@ override public  atmosphere response   ( boolean delegate to native response )  {  this . delegate to native response = delegate to native response ;  return this ;   }  
1091,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,destroy,"@ override public void   ( boolean force )  {  if  (  ! force )  return ;  logger . trace ( "" {  }  destroyed"" uuid )  ;  cookies . clear (  )  ;  headers . clear (  )  ;  atmosphere request = null ;  asyncio writer = null ;  destroyed . set ( true )  ;   }  "
1092,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,destroyable,@ override public  atmosphere response   ( boolean destroyable )  {  this . destroyable = destroyable ;  return this ;   }  
1093,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,destroyed,@ override public boolean   (  )  {  return destroyed . get (  )  ;   }  
1094,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,encode redirecturl,@ override public  string   (  string url )  {  return response . encode redirecturl ( url )  ;   }  
1095,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,encode redirect url,@ override public  string   (  string url )  {  return response . encode redirecturl ( url )  ;   }  
1096,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,encodeurl,@ override public  string   (  string url )  {  return response . encodeurl ( url )  ;   }  
1097,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,encode url,@ override public  string   (  string url )  {  return response . encodeurl ( url )  ;   }  
1098,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,flush,@ override public void   (  )  {  if  (  ! valid flush or close (  )  )  return ;  boolean b = force asyncio writer ;  try  {  write status and headers (  )  ;  force asyncio writer = false ;  asyncio writer . flush (  atmosphere response impl . this )  ;   }  catch  (  io exception e )   {  handle exception ( e )  ;   }  finally 
1099,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,flush buffer,@ override public void   (  )  throws io exception  {  try  {  response . flush buffer (  )  ;   }  catch  (   null pointer exception ex )   {  handle exception ( ex )  ;   }  catch  (  io exception ex )   {  handle exception ( ex )  ;  throw ex ;   }   }  
1100,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,get asyncio writer,@ override public  asyncio writer   (  )  {  return asyncio writer ;   }  
1101,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,get buffer size,@ override public int   (  )  {  return response . get buffer size (  )  ;   }  
1102,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,get character encoding,@ override public  string   (  )  {  if  (  ! delegate to native response )   {  return char set ;   }  else  {  return    r (  )  . get character encoding (  )   =  =  null  ?  char set :    r (  )  . get character encoding (  )  ;   }   }  
1103,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,get content type,"@ override public  string   (  )  {  return get header ( "" content - type"" )  ;   }  "
1104,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,get header,"@ override public  string   (  string name )  {   string s ;  if  ( name . equals ignore case ( ""content - type"" )  )   {  s = headers . get ( "" content -  type"" )  ;  if  ( s  =  =  null && servlet30 )   {  s =    r (  )  . get header ( name )  ;   }  return s  =  =  null  ?  content type : s ;   }  s = headers . get ( name )  ;  if  ( s  =  =  null "
1105,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,get header names,@ override public  collection <  string >    (  )  {   collection <  string >  r = null ;  if  ( servlet30 )   {  r =    r (  )  . get header names (  )  ;   }   set <  string >  s = headers . key set (  )  ;  if  ( r  !  =  null &&  ! r . is empty (  )  )   {  s = new  hash set <  string >  ( s )  ;  s . add all ( r )  ;   }  return  collections . unmodifiable set ( s ) 
1106,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,get headers,"@ override public  collection <  string >    (  string name )  {   array list <  string >  s = new  array list <  string >  (  )  ;   string h ;  if  ( name . equals ignore case ( ""content - type"" )  )   {  h = headers . get ( "" content -  type"" )  ;   }  else  {  h = headers . get ( name )  ;   }  s . add ( h )  ;  if  ( servlet30 )   {   collection <  st"
1107,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,get locale,@ override public  locale   (  )  {  if  (  ! delegate to native response )   {  return locale ;   }  else  {  return    r (  )  . get locale (  )  ;   }   }  
1108,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,get output stream,@ override public  servlet output stream   (  )  throws io exception  {  if  ( force asyncio writer ||  ! delegate to native response )   {  return new  stream ( is buffering (  )  )  ;   }  else  {  return  (    r (  )  . get output stream (  )   !  =  null )   ?     r (  )  . get output stream (  )  : new  servlet output stream (  )  {  @
1109,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,get response,@ override public  servlet response   (  )  {  if  (  proxy . class . is assignable from ( response . get class (  )  )  )   {  return this ;   }  else  {  return super . get response (  )  ;   }   }  
1110,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,get status,@ override public int   (  )  {  return status ;   }  
1111,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,get status message,@ override public  string   (  )  {  return status message ;   }  
1112,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,get writer,@ override public  print writer   (  )  throws io exception  {  if  ( force asyncio writer ||  ! delegate to native response )   {  return new  writer ( new  stream ( is buffering (  )  )  )  ;   }  else  {  return    r (  )  . get writer (  )   !  =  null  ?     r (  )  . get writer (  )  : new  print writer ( new  string writer (  )  )  ;   } 
1113,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,handle exception,"private void   (  exception ex )  {   atmosphere resource r = resource (  )  ;  if  ( r  !  =  null )   {   atmosphere resource impl . class . cast ( r )  . notify listeners ( new  atmosphere resource event impl (  atmosphere resource impl . class . cast ( r )  true false )  )  ;  r . get atmosphere config (  )  . resources factory (  )  . remove ( uuid )  ;   }  logger . trace ( "" {  }  unexpected i / o exception  {  } "" uuid ex )  ;   }  "
1114,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,header,@ override public  builder   (  string name  string value )  {  headers . put ( name value )  ;  return this ;   }  
1115,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,headers,"@ override public  map <  string  string >    (  )  {  if  (  ! header handled )   {  for  (   cookie c : cookies )   {  headers . put ( "" set -  cookie""  cookie util . to string ( c )  )  ;   }  header handled = true ;   }  return headers ;   }  "
1116,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,invoke,@ override public  object   (  object proxy  method method  object[] args )  throws  throwable  {  return  servlet proxy factory . get default (  )  . proxy ( proxy method args )  ;   }  
1117,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,is buffering,private boolean   (  )  {  return atmosphere request  !  =  null &&  boolean . true  =  =  atmosphere request . get attribute (  application config . response   completion   aware )  ;   }  
1118,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,is committed,@ override public boolean   (  )  {  if  (  ! delegate to native response )   {  return is commited ;   }  else  {  return    r (  )  . is committed (  )  ;   }   }  
1119,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,is completion reset,private boolean   (  )  {  return atmosphere request  !  =  null &&  boolean . true  =  =  atmosphere request . get attribute (  application config . response   completion   reset )  ;   }  
1120,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,is destroyable,@ override public boolean   (  )  {  return destroyable ;   }  
1121,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,is ready,@ override public boolean   (  )  {  return true ;   }  
1122,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,is using stream,private boolean   (  )  {  if  ( atmosphere request  !  =  null )   {   object s = atmosphere request . get attribute ( property   use   stream )  ;  if  ( s  !  =  null )   {  using stream . set (  (  boolean ) s )  ;   }   }  if  ( resource (  )   !  =  null )   {  boolean force = resource (  )  . force binary write (  )  ;  if  (  ! using stream . get (  )  && force )   {  using stream . set ( force )  ;   }   }  return using stream . get (  )  ;   }  
1123,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,new instance,public final static  atmosphere response   (  atmosphere config config  atmosphere request request  web socket web socket )  {  boolean destroyable ;   string s = config . get init parameter ( recycle   atmosphere   request   response )  ;  if  ( s  !  =  null &&  boolean . value of ( s )  )   {  destroyable = true ;   }  else  {  destroyable = false ;   }  return new  atmosphere response impl ( web socket request destroyable )  ;   }  
1124,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,on complete,@ override public void   (  )  {  if  (  ! completed )   {  completed = true ;  try  {  write with buffering ( null )  ;   }  catch  (  io exception e )   {   }  finally  {  if  ( is completion reset (  )  )   {  completed = false ;   }   }   }   }  
1125,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,request,@ override public  atmosphere response   (  atmosphere request atmosphere request )  {  this . atmosphere request = atmosphere request ;  return this ;   }  
1126,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,reset,@ override public void   (  )  {  response . reset (  )  ;   }  
1127,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,reset buffer,@ override public void   (  )  {  response . reset buffer (  )  ;   }  
1128,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,resource,@ override public  atmosphere resource   (  )  {  if  ( atmosphere request  !  =  null )   {  return  (  atmosphere resource ) atmosphere request . get attribute (  framework config . atmosphere   resource )  ;   }  else  {  return null ;   }   }  
1129,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,response,@ override public  builder   (  http servlet response res )  {  this . atmosphere response = res ;  return this ;   }  
1130,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,send error,"@ override public void   ( int sc )  throws io exception  {  if  ( force asyncio writer ||  ! delegate to native response )   {  set status ( sc )  ;  boolean b = force asyncio writer ;  force asyncio writer = false ;  asyncio writer . write error ( this sc """" )  ;  force asyncio writer = b ;   }  else  {  if  (  !    r"
1131,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,send redirect,@ override public void   (  string location )  throws io exception  {  if  ( force asyncio writer ||  ! delegate to native response )   {  boolean b = force asyncio writer ;  force asyncio writer = false ;  asyncio writer . redirect ( this location )  ;  force asyncio writer = b ;   }  else  {     r (  )  . send red
1132,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,set buffer size,@ override public void   ( int size )  {  response . set buffer size ( size )  ;   }  
1133,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,set character encoding,@ override public void   (  string char set )  {  if  (  ! delegate to native response )   {  this . char set = char set ;   }  else  {     r (  )  . set character encoding ( char set )  ;   }   }  
1134,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,set content length,"@ override public void   ( int len )  {  headers . put ( "" content -  length""  string . value of ( len )  )  ;  if  (  ! delegate to native response )   {  content length = len ;   }  else  {     r (  )  . set content length ( len )  ;   }   }  "
1135,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,set content type,"@ override public void   (  string content type )  {  headers . put ( "" content -  type""  string . value of ( content type )  )  ;  if  (  ! delegate to native response )   {  this . content type = content type ;   }  else  {     r (  )  . set content type ( content type )  ;   }   }  "
1136,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,set date header,@ override public void   (  string name long date )  {  if  (  ! delegate to native response )   {  headers . put ( name  string . value of ( date )  )  ;   }  else  {     r (  )  . set date header ( name date )  ;   }   }  
1137,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,set header,"@ override public void   (  string name  string value )  {  if  ( value  =  =  null )  value = """" ;  headers . put ( name value )  ;  if  ( delegate to native response )   {     r (  )  . set header ( name value )  ;   }  if  ( name . equals ignore case (  header config . x   atmosphere   tracking   id )  )   {  uuid = value ;   }   }  "
1138,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,set int header,@ override public void   (  string name int value )  {  set header ( name  string . value of ( value )  )  ;   }  
1139,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,set locale,@ override public void   (  locale locale )  {  if  (  ! delegate to native response )   {  this . locale = locale ;   }  else  {     r (  )  . set locale ( locale )  ;   }   }  
1140,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,set response,@ override public void   (  servlet response response )  {  super . set response ( response )  ;  if  (  http servlet response . class . is assignable from ( response . get class (  )  )  )   {  this . response =  http servlet response . class . cast ( response )  ;   }   }  
1141,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,set status,@ override public void   ( int status  string status message )  {  if  (  ! delegate to native response )   {  this . status message = status message ;  this . status = status ;   }  else  {     r (  )  . set status ( status status message )  ;   }   }  
1142,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,status,@ override public  builder   ( int status )  {  this . status = status ;  return this ;   }  
1143,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,status message,@ override public  builder   (  string status message )  {  this . status message = status message ;  return this ;   }  
1144,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,to string,"@ override public  string   (  )  {  return "" atmosphere response { ""  +  ""  uuid = ""  +  uuid  +  ""  headers = "" +  headers +  ""  asyncio writer = "" +  asyncio writer +  ""  status = "" +  status +  ""  status message = '"" +  status message +  '\'' +  ""  atmosphere request = "" +  atmosphere request +  ""  write stat"
1145,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,uuid,@ override public  string   (  )  {  return uuid ;   }  
1146,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,valid asyncio writer,"private void   (  )  throws io exception  {  if  ( asyncio writer  =  =  null )   {  logger . trace ( "" {  }  invalid state"" this . hash code (  )  )  ;  throw new io exception ( "" atmosphere resource  cancelled: ""  +  uuid )  ;   }   }  "
1147,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,valid flush or close,"private boolean   (  )  {  if  ( asyncio writer  =  =  null )   {  logger . warn ( "" atmosphere response for  {  }  has been closed"" uuid )  ;  return false ;   }  return true ;   }  "
1148,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,wrap,public final static  atmosphere response   (  http servlet response response )  {  return new  builder (  )  . response ( response )  . build (  )  ;   }  
1149,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,write,@ override public void   (  string s )  {  boolean b = force asyncio writer ;  try  {  valid asyncio writer (  )  ;  write status and headers (  )  ;  force asyncio writer = false ;  asyncio writer . write (  atmosphere response impl . this s )  ;   }  catch  (  io exception e )   {  handle exception ( e )  ;  throw new  ru
1150,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,write header,@ override public  builder   ( boolean write status and header )  {  this . write status and header . set ( write status and header )  ;  return this ;   }  
1151,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,write status and headers,private void   (  )  throws java . io . io exception  {  if  ( write status and header . get and set ( false )  &&  ! force asyncio writer )   {  asyncio writer . write ( this construct status and headers (  )  )  ;   }   }  
1152,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,write with buffering,private void   (  object data )  throws java . io . io exception  {  if  ( no   buffering . get (  )   !  =  null )   {  boolean b = force asyncio writer ;  try  {  if  ( data instanceof  string )   {  asyncio writer . write (  atmosphere response impl . this  (  string ) data )  ;   }  else if  ( data instanceof byte[] )   {  asyncio writer . write (  atmosphere response impl . this  ( byte[] ) data )  ;   }   }  catch  (  io exception e )   {  handle exception ( e )  ;  throw e ;   }  finally  {  force asyncio writer = b ;   }   }  else  {  try  {  no   buffering . set (  boolean . true )  ;   object previous = buffered . get and set ( data )  ;  if  ( previous  !  =  null )   {  boolean b = force asyncio writer ;  try  {  if  ( previous instanceof  string )   {  asyncio writer . write (  atmosphere response impl . this  (  string ) previous )  ;   }  else if  ( previous instanceof byte[] )   {  asyncio writer . write (  atmosphere response impl . this  ( byte[] ) previous )  ;   }   }  catch  (  io exception e )   {  handle exception ( e )  ;  throw e ;   }  finally  {  force asyncio writer = b ;   }   }   }  finally  {  no   buffering . remove (  )  ;   }   }   }  
1153,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcasterFactory.java, broadcaster creation exception,public   (  throwable t )  {  super ( t )  ;   }  
1154,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcasterConfig.java, broadcaster config,public   (  executor service executor service  executor service async write service  scheduled executor service scheduler  atmosphere config config  string broadcaster id )  {  this . executor service = executor service ;  this . scheduler = scheduler ;  this . async write service = async write service ;  this . config = config ;  this . broadcaster id = broadcaster id ;  this . handle executors = true ;  this . shared = config . framework (  )  . is share executor services (  )  ;   }  
1155,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcasterConfig.java,add filter,protected boolean   (  broadcast filter e boolean init )  {  log duplicate filter ( e )  ;  if  ( filters . contains ( e )  )  return false ;  if  ( e instanceof  broadcast filter lifecycle )   {   (  (  broadcast filter lifecycle ) e )  . init ( config )  ;   }  if  ( init &&  cluster broadcast filter . class . is assignable from ( e . get class (  )  )  )   {   broadcaster b = config . get broadcaster factory (  )  . lookup ( broadcaster id false )  ;  if  ( b  !  =  null )   {  synchronized  ( e )   {   cluster broadcast filter . class . cast ( e )  . set broadcaster ( b )  ;   }   }   }  if  ( e instanceof  per request broadcast filter )   {  per request filters . add (  (  per request broadcast filter ) e )  ;   }  return filters . offer ( e )  ;   }  
1156,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcasterConfig.java,apply filters,public  list <  object >    (  atmosphere resource r  list <  object >  cache messages )  {   linked list <  object >  filtered message = new  linked list <  object >  (  )  ;   broadcast filter .  broadcast action a ;  for  (   object o : cache messages )   {  a = filter ( o )  ;  if  ( a . action (  )   =  =   broadcast filter .  broadcast action . action . abort )  return  collections .  <  object > empty list (  )  ;  if  ( a . action (  )   =  =   broadcast action . action . skip )   {  filtered message . add ( a . message (  )  )  ;  return filtered message ;   }  a = filter ( r a . message (  )  a . original message (  )  )  ;  if  ( a . action (  )   =  =   broadcast filter .  broadcast action . action . abort )  return  collections .  <  object > empty list (  )  ;  if  ( a . action (  )   =  =   broadcast action . action . skip )   {  filtered message . add ( a . message (  )  )  ;  return filtered message ;   }  filtered message . add ( a . message (  )  )  ;   }  return filtered message ;   }  
1157,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcasterConfig.java,broadcasterid,protected  broadcaster config   (  string broadcaster id )  {  this . broadcaster id = broadcaster id ;  init cluster extension (  )  ;  return this ;   }  
1158,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcasterConfig.java,config executors,protected synchronized void   (  )  {  if  ( shared )   {  handle executors = false ;  is executor shared = true ;  is async executor shared = true ;   }  executor service =  executors factory . get message dispatcher ( config broadcaster id )  ;  async write service =  executors factory . get async operation executor ( config broadcaster id )  ;  scheduler =  executors factory . get scheduler ( config )  ;   }  
1159,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcasterFuture.java, broadcaster future,public   (  future <  ?  >  inner future e msg int latch count )  {  this . msg = msg ;  this . inner future = inner future ;  if  ( inner future  =  =  null )   {  latch = new  count down latch ( latch count )  ;   }  else  {  latch = null ;   }   }  
1160,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcasterFuture.java,cancel,@ override public boolean   ( boolean b )  {  if  ( inner future  !  =  null )   {  return inner future . cancel ( b )  ;   }  is cancelled = true ;  while  ( latch . get count (  )   >  0 )   {  latch . count down (  )  ;   }  return is cancelled ;   }  
1161,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcasterFuture.java,done,public  broadcaster future < e >    (  )  {  if  ( latch  !  =  null )   {  latch . count down (  )  ;   }  is done = latch  =  =  null || latch . get count (  )   =  =  0 ;  return this ;   }  
1162,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcasterFuture.java,get,@ override public e   ( long l  time unit tu )  throws  interrupted exception   execution exception   timeout exception  {  if  ( inner future  !  =  null )   {  return  ( e ) inner future . get ( l tu )  ;   }  boolean is successful = latch . await ( l tu )  ;  if  (  ! is successful )   {  throw new  timeout except
1163,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcasterFuture.java,is cancelled,@ override public boolean   (  )  {  if  ( inner future  !  =  null )   {  return inner future . is cancelled (  )  ;   }  return is cancelled ;   }  
1164,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcasterFuture.java,is done,@ override public boolean   (  )  {  if  ( inner future  !  =  null )   {  return inner future . is done (  )  ;   }  return is done ;   }  
1165,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcasterConfig.java,configure broadcaster cache,private void   (  )  {  try  {   string class name = config . framework (  )  . get broadcaster cache class name (  )  ;  if  ( class name  !  =  null )   {  broadcaster cache = config . framework (  )  . new class instance (  broadcaster cache . class  (  class <  broadcaster cache >  ) io utils . load class ( get class (  )  class name )  )  ;  configure shared cache executor (  )  ;  broadcaster cache . configure ( config )  ;   }  for  (   broadcaster cache inspector b : config . framework (  )  . inspectors (  )  )   {  broadcaster cache . inspector ( b )  ;   }  for  (   broadcaster cache listener l : config . framework (  )  . broadcaster cache listeners (  )  )   {  broadcaster cache . add broadcaster cache listener ( l )  ;   }   }  catch  (   exception e )   {  throw new  runtime exception ( e )  ;   }   }  
1166,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcasterConfig.java,configure broadcaster filter,"void   (  list <  string >  list )  {  for  (   string broadcast filter : list )   {   broadcast filter bf = null ;  try  {  bf = config . framework (  )  . new class instance (  broadcast filter . class  (  class <  broadcast filter >  ) io utils . load class ( get class (  )  broadcast filter )  )  ;   }  catch  (   exception e )   {  logger . warn ( "" error trying to instantiate  broadcast filter:  {  } "" broadcast filter e )  ;   }  if  ( bf  !  =  null )   {  add filter ( bf )  ;   }   }   }  "
1167,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcasterConfig.java,configure shared cache executor,"protected void   (  )  {  if  (  ! shared )  return ;  config . properties (  )  . put ( ""shared"" ""true"" )  ;   }  "
1168,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcasterConfig.java,destroy,protected void   ( boolean force )  {  broadcaster cache . cleanup (  )  ;  if  (  ( force ||  ! shared )  && broadcaster cache  !  =  null )   {  broadcaster cache . stop (  )  ;   }  remove all filters (  )  ;  if  (  ! force &&  ! handle executors )  return ;  if  (  ( force ||  ! is executor shared )  && executor service  !  =  null )   {  executor service . shutdown now (  )  ;   }  if  (  ( force ||  ! is async executor shared )  && async write service  !  =  null )   {  async write service . shutdown now (  )  ;   }  if  (  ( force ||  ! shared )  && scheduler  !  =  null )   {  scheduler . shutdown now (  )  ;   }   }  
1169,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcasterConfig.java,filter,protected  broadcast action   (  atmosphere resource r  object message  object original message )  {   object newo = unwrap ( message )  ;  boolean is manipulated = false ;  if  (  ! newo . equals ( message )  )   {  is manipulated = true ;  message = newo ;   }   broadcast action transformed = new  broadcast action ( message )  ;  for  (   per request broadcast filter mf : per request filters )   {  synchronized  ( mf )   {  transformed = mf . filter ( broadcaster id r original message transformed . message (  )  )  ;  if  ( transformed  =  =  null || transformed . action (  )   =  =   broadcast action . action . abort || transformed . action (  )   =  =   broadcast action . action . skip )   {  return transformed ;   }   }   }  return wrap ( transformed is manipulated )  ;   }  
1170,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcasterConfig.java,filters,public  collection <  broadcast filter >    (  )  {  return filters ;   }  
1171,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcasterConfig.java,force destroy,public void   (  )  {  destroy ( true )  ;   }  
1172,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcasterConfig.java,get async write service,public  executor service   (  )  {  return async write service ;   }  
1173,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcasterConfig.java,get atmosphere config,public  atmosphere config   (  )  {  return config ;   }  
1174,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcasterConfig.java,get broadcaster cache,public  broadcaster cache   (  )  {  return broadcaster cache ;   }  
1175,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcasterConfig.java,get executor service,public  executor service   (  )  {  return executor service ;   }  
1176,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcasterConfig.java,get scheduled executor service,public  scheduled executor service   (  )  {  return scheduler ;   }  
1177,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcasterConfig.java,handle executors,public boolean   (  )  {  return handle executors ;   }  
1178,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcasterConfig.java,has filters,public boolean   (  )  {  return  ! filters . is empty (  )  ;   }  
1179,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcasterConfig.java,has per request filters,public boolean   (  )  {  if  ( filters . is empty (  )  )   {  return false ;   }  else  {  for  (   broadcast filter b : filters )   {  if  (  per request broadcast filter . class . is assignable from ( b . get class (  )  )  )   {  return true ;   }   }   }  return false ;   }  
1180,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcasterConfig.java,init,public  broadcaster config   (  )  {  if  ( handle executors )   {  config executors (  )  ;   }  if  ( filter list  !  =  null )   {  configure broadcaster filter ( filter list )  ;   }  configure broadcaster cache (  )  ;  return this ;   }  
1181,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcasterConfig.java,init cluster extension,"protected void   (  )  {  for  (   broadcast filter mf : filters )   {  if  (  cluster broadcast filter . class . is assignable from ( mf . get class (  )  )  )   {  try  {   broadcaster b = config . get broadcaster factory (  )  . lookup ( broadcaster id false )  ;  if  ( b  !  =  null )   {  synchronized  ( mf )   {   cluster broadcast filter . class . cast ( mf )  . set broadcaster ( b )  ;   }   }   }  catch  (   throwable t )   {  logger . error ( """" t )  ;   }   }   }   }  "
1182,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcasterConfig.java,log duplicate filter,"private void   (  broadcast filter e )  {  for  (   broadcast filter f : filters )   {  if  ( f . get class (  )  . is assignable from ( e . get class (  )  )  )   {  logger . trace ( "" duplicate  filter instance  {  } "" f . get class (  )  )  ;   }   }   }  "
1183,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcasterConfig.java,remove all filters,public void   (  )  {  for  (   broadcast filter filter : filters )   {  remove filter ( filter )  ;   }   }  
1184,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcasterConfig.java,remove filter,public boolean   (  broadcast filter filter )  {  if  ( filter instanceof  broadcast filter lifecycle )   {   (  (  broadcast filter lifecycle ) filter )  . destroy (  )  ;   }  if  ( filter instanceof  per request broadcast filter )   {  per request filters . remove ( filter )  ;   }  return filters . remove ( filter )  ;   }  
1185,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcasterConfig.java,set async write service,public  broadcaster config   (  executor service async write service boolean is async executor shared )  {  if  (  ! this . is async executor shared && this . async write service  !  =  null )   {  this . async write service . shutdown (  )  ;   }  this . async write service = async write service ;  this . is async executor shared = is async executor shared ;  return this ;   }  
1186,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcasterConfig.java,set broadcaster cache,public  broadcaster config   (  broadcaster cache broadcaster cache )  {  this . broadcaster cache = broadcaster cache ;  return this ;   }  
1187,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcasterConfig.java,set executor service,public  broadcaster config   (  executor service executor service boolean is executor shared )  {  if  (  ! this . is executor shared && this . executor service  !  =  null )   {  this . executor service . shutdown (  )  ;   }  this . executor service = executor service ;  this . is executor shared = is executor shared ;  return this ;   }  
1188,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcasterConfig.java,set scheduled executor service,public  broadcaster config   (  scheduled executor service scheduler )  {  if  ( this . scheduler  !  =  null )   {  this . scheduler . shutdown (  )  ;   }  this . scheduler = scheduler ;  return this ;   }  
1189,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcasterLifeCyclePolicy.java, broadcaster life cycle policy,private   ( atmosphere   resource   policy policy )  {  this . policy = policy ;  this . time =  - 1 ;  this . time unit = null ;   }  
1190,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcasterLifeCyclePolicy.java,build,public  broadcaster life cycle policy   (  )  {  return new  broadcaster life cycle policy ( policy time time unit )  ;   }  
1191,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcasterLifeCyclePolicy.java,get life cycle policy,public atmosphere   resource   policy   (  )  {  return policy ;   }  
1192,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcasterLifeCyclePolicy.java,get time unit,public  time unit   (  )  {  return time unit ;   }  
1193,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcasterLifeCyclePolicy.java,get timeout,public int   (  )  {  return time ;   }  
1194,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcasterLifeCyclePolicy.java,idle time,public  builder   ( int time  time unit time unit )  {  this . time unit = time unit ;  this . time = time ;  return this ;   }  
1195,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcasterLifeCyclePolicy.java,idle time inms,public  builder   ( int time )  {  time unit =  time unit . milliseconds ;  this . time = time ;  return this ;   }  
1196,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcasterLifeCyclePolicy.java,policy,public  builder   ( atmosphere   resource   policy policy )  {  this . policy = policy ;  return this ;   }  
1197,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcasterLifeCyclePolicyListenerAdapter.java,on destroy,"@ override public void   (  )  {  logger . trace ( ""on destroy"" )  ;   }  "
1198,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcasterLifeCyclePolicyListenerAdapter.java,on empty,"@ override public void   (  )  {  logger . trace ( ""on empty"" )  ;   }  "
1199,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcasterLifeCyclePolicyListenerAdapter.java,on idle,"@ override public void   (  )  {  logger . trace ( ""on idle"" )  ;   }  "
1200,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcasterListenerAdapter.java,on add atmosphere resource,"@ override public void   (  broadcaster b  atmosphere resource r )  {  logger . trace ( ""on add atmosphere resource  {  } "" b . getid (  )  )  ;   }  "
1201,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcasterListenerAdapter.java,on complete,"@ override public void   (  broadcaster b )  {  logger . trace ( ""on complete  {  } "" b . getid (  )  )  ;   }  "
1202,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcasterListenerAdapter.java,on message,"@ override public void   (  broadcaster b  deliver deliver )  {  logger . trace ( ""on message for broadcaster  {  }  for  {  } "" b . getid (  )  deliver )  ;   }  "
1203,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcasterListenerAdapter.java,on post create,"@ override public void   (  broadcaster b )  {  logger . trace ( ""on post create  {  } "" b . getid (  )  )  ;   }  "
1204,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcasterListenerAdapter.java,on pre destroy,"@ override public void   (  broadcaster b )  {  logger . trace ( ""on pre destroy  {  } "" b . getid (  )  )  ;   }  "
1205,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcasterListenerAdapter.java,on remove atmosphere resource,"@ override public void   (  broadcaster b  atmosphere resource r )  {  logger . trace ( ""on remove atmosphere resource  {  } "" b . getid (  )  )  ;   }  "
1206,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcastFilter.java, broadcast action,public   (  object o )  {  this . a = action . continue ;  this . o = o ;   }  
1207,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcastFilter.java,action,public action   (  )  {  return a ;   }  
1208,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcastFilterAdapter.java,filter,@ override public  broadcast action   (  string broadcaster id  object original message  object message )  {  return new  broadcast action ( message )  ;   }  
1209,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\ContainerInitializer.java,on startup,"@ override public void   (  set <  class <  ?  >  >  classes final  servlet context c )  throws  servlet exception  {  c . log ( "" initializing  atmosphere framework"" )  ;  for  (   map .  entry <  string  ?  extends  servlet registration >  reg : c . get servlet registrations (  )  . entry set (  )  )   {   string disable"
1210,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\ContainerInitializer.java,request initialized,@ override public void   (  servlet request event sre )  {   http servlet request r =  http servlet request . class . cast ( sre . get servlet request (  )  )  ;   atmosphere config config = framework . get atmosphere config (  )  ;  if  ( config . is support session (  )  &&  utils . web socket enabled ( r )  )   {  r . get sess
1211,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultAnnotationProcessor.java, bytecode based annotation processor,public   (  annotation handler handler )  {  this . handler = handler ;   }  
1212,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultAnnotationProcessor.java, default annotation processor,public   (  )  {  this . handler = new  annotation handler (  )  ;   }  
1213,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultAnnotationProcessor.java, servlet container initializer annotation processor,private   (  annotation handler handler final  map <  class <  ?  extends  annotation >   set <  class <  ?  >  >  >  annotations final  atmosphere framework framework )  {  this . annotations = annotations ;  this . framework = framework ;  this . handler = handler ;   }  
1214,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultAnnotationProcessor.java,accept,"@ override public boolean   (  file arg0  string arg1 )  {  return arg1 . ends with ( "" . jar"" )  ;   }  "
1215,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultAnnotationProcessor.java,annotations,"@ suppress warnings ( ""unchecked"" )  @ override public  class <  ?  extends  annotation > []   (  )  {  return handler . handled class (  )  ;   }  "
1216,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultAnnotationProcessor.java,configure,"@ override public void   ( final  atmosphere config config )  {  final  annotation detector .  type reporter reporter = new  annotation detector .  type reporter (  )  {  @ suppress warnings ( ""unchecked"" )  @ override public  class <  ?  extends  annotation > [] annotations (  )  {  return handler . handl"
1217,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultAnnotationProcessor.java,destroy,@ override public void   (  )  {  if  ( detector  !  =  null )  detector . destroy (  )  ;   }  
1218,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultAnnotationProcessor.java,fallback to manual annotated classes,"private static void   (  class <  ?  >  main class  atmosphere framework f  annotation handler handler )  {  logger . warn ( "" unable to detect annotations .   application may fail to deploy . "" )  ;  f . annotation scanned ( true )  ;  for  (   class a : core annotations )   {  try  {  handler . handle processor ( load class ( main class a . get name (  )  )  )  ;   }  catch  (   exception e )   {  logger . trace ( """" e )  ;   }   }   }  "
1219,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultAnnotationProcessor.java,handle atmosphere annotation,private boolean   (  set <  class <  ?  >  >  atmosphere annotated classes )  {  boolean scan for customized annotation = false ;  if  ( atmosphere annotated classes  !  =  null )   {  for  (   class <  ?  >  clazz : atmosphere annotated classes )   {  handler . handle processor ( clazz )  ;   }   }  else  {  fallback to manual annotated classes ( get class (  )  framework handler )  ;   }  if  ( atmosphere annotated classes  !  =  null && atmosphere annotated classes . size (  )   >  =   annotation scanning servlet container initializer . class . get annotation (  handles types . class )  . value (  )  . length )   {  scan for customized annotation = true ;   }  return scan for customized annotation ;   }  
1220,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultAnnotationProcessor.java,report type annotation,@ override public void   (  class <  ?  extends  annotation >  annotation  string class name )  {  try  {  final  class <  ?  >  discovered class = load class ( get class (  )  class name )  ;  handler . handle annotation ( config . framework (  )  annotation discovered class )  ;   }  catch  (   exception e )   {  logge
1221,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultAnnotationProcessor.java,scan,"@ override public  annotation processor   (  string package name )  throws io exception  {  logger . trace ( "" scanning @ service annotations in  {  } "" package name )  ;  detector . detect ( package name )  ;  return this ;   }  "
1222,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultAnnotationProcessor.java,scan all,@ override public  annotation processor   (  )  throws io exception  {  detector . detect (  )  ;  return this ;   }  
1223,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultAnnotationProcessor.java,scan for annotation,"private void   (  atmosphere framework f )  {   list <  string >  packages = f . custom annotation packages (  )  ;   annotation detector detector = new  annotation detector ( atmosphere reporter )  ;  try  {  if  (  ! packages . is empty (  )  )   {  for  (   string p : packages )   {  logger . trace ( "" package  {  }  scanned for @ atmosphere annotation"" p )  ;  detector . detect ( p )  ;   }   }   string path = io utils . real path ( f . get servlet context (  )  f . get handlers path (  )  )  ;  if  ( path  !  =  null )   {  detector . detect ( new  file ( path )  )  ;   }   string path libs = io utils . real path ( f . get servlet context (  )  f . get lib path (  )  )  ;  if  ( path libs  !  =  null )   {   file lib folder = new  file ( path libs )  ;   file jars[] = lib folder . list files ( new  filename filter (  )  {  @ override public boolean accept (   file arg0   string arg1 )  {  return arg1 . ends with ( "" . jar"" )  ;   }   }   )  ;  if  ( jars  !  =  null )   {  for  (   file file : jars )   {  detector . detect ( file )  ;   }   }   }  if  (  ! core annotations found . get (  )  )   {  fallback to manual annotated classes ( get class (  )  f handler )  ;   }   }  catch  (  io exception e )   {  logger . warn ( "" unable to scan annotation"" e )  ;   }  finally  {  detector . destroy (  )  ;   }   }  "
1224,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultAnnotationProcessor.java,scan for custom annotation,"private void   (  set <  class <  ?  >  >  atmosphere annotated classes )  throws io exception  {  handler . flush core annotations ( atmosphere annotated classes )  ;   bytecode based annotation processor b = new  bytecode based annotation processor ( handler )  ;  b . configure ( framework . get atmosphere config (  )  )  ;   string path = framework . get servlet context (  )  . get real path ( framework . get handlers path (  )  )  ;  if  ( path  !  =  null )   {  b . scan ( new  file ( path )  )  . destroy (  )  ;   }  else  {  logger . warn ( "" unable to scan using  file .   scanning classpath"" )  ;  b . scan all (  )  ;   }   }  "
1225,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultAsyncSupportResolver.java, default async support resolver,public   ( final  atmosphere config config )  {  this . config = config ;   }  
1226,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultAsyncSupportResolver.java,detect containers present,public  list <  class <  ?  extends  async support >  >    (  )  {  return new  linked list <  class <  ?  extends  async support >  >  (  )  {   {  if  ( test class exists ( netty )  )  add (  netty comet support . class )  ;   }   }   ;   }  
1227,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultAsyncSupportResolver.java,detect web socket present,public  list <  class <  ?  extends  async support >  >    ( final boolean use native if possible final boolean use servlet30 async )  {  return new  linked list <  class <  ?  extends  async support >  >  (  )  {   {  add ( jsr356 async support . class )  ;   }   }   ;   }  
1228,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultAsyncSupportResolver.java,new comet support,"public  async support   ( final  string target classfqn )  {  try  {   class loader cl =  thread . current thread (  )  . get context class loader (  )  ;  return  (  async support ) cl . load class ( target classfqn )  . get declared constructor ( new  class[] {  atmosphere config . class }  )  . new instance ( config )  ;   }  catch  (  final  exception e )   {  logger . error ( "" failed to create  async support class:  {  }   error:  {  } "" target classfqn e )  ;   throwable cause = e . get cause (  )  ;  if  ( cause  !  =  null )   {  logger . error ( "" real error:  {  } "" cause . get message (  )  cause )  ;   }  throw new  illegal argument exception ( "" unable to create ""  +  target classfqn e )  ;   }   }  "
1229,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultAsyncSupportResolver.java,resolve,@ override public  async support   ( boolean use native if possible boolean default to blocking boolean use servlet30 async )  {   async support cs = null ;  use servlet30 async = test class exists ( servlet   30 )  ;  if  (  ! default to blocking )   {   list <  class <  ?  extends  async support >  >  l = detect we
1230,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultAsyncSupportResolver.java,resolve multiple native support conflict,"protected  async support   ( final  list <  class <  ?  extends  async support >  >  available )  {  final  string builder b = new  string builder ( "" found multiple containers  please specify which one to use: "" )  ;  for  (   class <  ?  extends  async support >  cs : available )   {  b . append (  ( cs  !  =  null )   ?  cs . get canonical name (  )  : ""null"" )  . append ( ""  "" )  ;   }  b . append ( "" until you do   atmosphere will use:""  +  available . get ( 0 )  )  ;  logger . warn ( "" {  } "" b . to string (  )  )  ;  return new comet support ( available . get ( 0 )  )  ;   }  "
1231,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultAsyncSupportResolver.java,resolve native comet support,protected  async support   ( final java . util .  list <  class <  ?  extends  async support >  >  available )  {  if  ( available  =  =  null || available . is empty (  )  )  return null ;  else if  ( available . size (  )   =  =  1 )  return new comet support ( available . get ( 0 )  )  ;  else return resolve multiple native support conflict ( available )  ;   }  
1232,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultAsyncSupportResolver.java,resolve web socket,public  async support   ( final java . util .  list <  class <  ?  extends  async support >  >  available )  {  if  ( available  =  =  null || available . is empty (  )  )  return null ;  else return new comet support ( available . get ( 0 )  )  ;   }  
1233,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultAsyncSupportResolver.java,test class exists,"protected boolean   ( final  string test class )  {  try  {  final boolean exists = test class  !  =  null && test class . length (  )   >  0 && io utils . load class ( null test class )   !  =  null ;  logger . debug ( exists  ?  "" found  {  } "" : "" not found  {  } "" test class )  ;  return exists ;   }  catch  (   exception ex )   {  return false ;   }   }  "
1234,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultAtmosphereResourceFactory.java,broadcasters,@ override @ deprecated public  set <  broadcaster >    (  string uuid )  {   atmosphere resource r = find ( uuid )  ;  return new  hash set <  broadcaster >  ( r . broadcasters (  )  )  ;   }  
1235,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultAtmosphereResourceFactory.java,create,@ override public  atmosphere resource   (  atmosphere config config  string uuid  atmosphere request request )  {   atmosphere response response =  atmosphere response impl . new instance (  )  ;  response . set header (  header config . x   atmosphere   tracking   id uuid )  ;  return create ( config no
1236,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultAtmosphereResourceFactory.java,destroy,@ override public void   (  )  {  resources . clear (  )  ;   }  
1237,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultAtmosphereResourceFactory.java,find,@ override public  atmosphere resource   (  string uuid )  {  if  ( uuid  =  =  null )  return null ;  return resources . get ( uuid )  ;   }  
1238,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultAtmosphereResourceFactory.java,find all,@ override public  collection <  atmosphere resource >    (  )  {  return resources . values (  )  ;   }  
1239,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultAtmosphereResourceFactory.java,invoke,@ override public  object   (  object proxy  method method  object[] args )  throws  throwable  {  return null ;   }  
1240,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultAtmosphereResourceFactory.java,locate,@ override public void   (  string uuid  async async )  {   atmosphere resource r = find ( uuid )  ;  if  ( r  !  =  null )   {  async . available ( r )  ;   }   }  
1241,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultAtmosphereResourceFactory.java,register uuid for find candidate,"@ override public void   (  atmosphere resource r )  {  logger . trace ( "" adding:  {  } "" r )  ;  resources . put ( r . uuid (  )  r )  ;   }  "
1242,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultAtmosphereResourceFactory.java,remove,"@ override public  atmosphere resource   (  string uuid )  {  logger . trace ( "" removing:  {  } "" uuid )  ;   atmosphere resource r = resources . remove ( uuid )  ;  if  ( r  !  =  null )   {  r . remove from all broadcasters (  )  ;   }  return r ;   }  "
1243,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultAtmosphereResourceFactory.java,resources,@ override public  concurrent map <  string  atmosphere resource >    (  )  {  return resources ;   }  
1244,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultAtmosphereResourceFactory.java,set default serializer,private void   (  atmosphere config config  atmosphere resource r )  throws  exception  {   class <  serializer >  serializer class = config . framework (  )  . get default serializer class (  )  ;  if  ( serializer class  !  =  null )   {   serializer serializer = config . framework (  )  . new class instance (  serializer . class serializer class )  ;  r . set serializer ( serializer )  ;   }   }  
1245,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultAtmosphereResourceFactory.java,un register uuid for find candidate,"@ override public void   (  atmosphere resource r )  {   object o = resources . remove ( r . uuid (  )  )  ;  if  ( o  !  =  null )   {  logger . trace ( "" removing:  {  } "" r )  ;   }   }  "
1246,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultAtmosphereResourceSession.java,check valid,"protected void   (  )  {  if  (  ! valid )   {  throw new  illegal state exception ( "" session is invalid"" )  ;   }   }  "
1247,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultAtmosphereResourceSession.java,get attribute,@ override public  < t > t   (  string name  class < t >  type )  {  return type . cast ( get attribute ( name )  )  ;   }  
1248,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultAtmosphereResourceSession.java,get attribute names,@ override public  collection <  string >    (  )  {  check valid (  )  ;  return  collections . unmodifiable set ( attributes . key set (  )  )  ;   }  
1249,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultAtmosphereResourceSession.java,invalidate,@ override public void   (  )  {  check valid (  )  ;  valid = false ;  attributes . clear (  )  ;   }  
1250,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultAtmosphereResourceSession.java,set attribute,@ override public  object   (  string name  object value )  {  check valid (  )  ;  return attributes . put ( name value )  ;   }  
1251,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultAtmosphereResourceSessionFactory.java,destroy,@ override public void   (  )  {  sessions . clear (  )  ;   }  
1252,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultAtmosphereResourceSessionFactory.java,get disconnect listener,protected  atmosphere resource event listener   (  )  {  return disconnect listener ;   }  
1253,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultAtmosphereResourceSessionFactory.java,get session,@ override public  atmosphere resource session   (  atmosphere resource resource )  {  return get session ( resource true )  ;   }  
1254,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultAtmosphereResourceSessionFactory.java,on disconnect,public void   (  atmosphere resource event event )  {   string uuid = event . get resource (  )  . uuid (  )  ;   atmosphere resource session session = sessions . remove ( uuid )  ;  if  ( session  !  =  null )   {  session . invalidate (  )  ;   }   }  
1255,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultAtmosphereResourceSessionFactory.java,to string,"public  string   (  )  {  return "" default atmosphere resource session factory . disconnect listener"" ;   }  "
1256,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcasterFactory.java, default broadcaster factory,@ deprecated public   (  class <  ?  extends  broadcaster >  clazz  string broadcaster life cycle policy  atmosphere config c )  {  this . clazz = clazz ;  config = c ;  configure ( broadcaster life cycle policy )  ;   }  
1257,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcasterFactory.java,add,@ override public boolean   (  broadcaster b  object id )  {  return  ( store . put ( id b )   =  =  null )  ;   }  
1258,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcasterFactory.java,add broadcaster listener,@ override public  broadcaster factory   (  broadcaster listener l )  {  if  (  ! broadcaster listeners . contains ( l )  )   {  broadcaster listeners . add ( l )  ;   }  for  (   broadcaster b : store . values (  )  )   {  b . add broadcaster listener ( l )  ;   }  return this ;   }  
1259,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcasterFactory.java,broadcaster listeners,@ override public  collection <  broadcaster listener >    (  )  {  return broadcaster listeners ;   }  
1260,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcasterFactory.java,configure,"protected void   (  string broadcaster life cycle policy )  {  int max idle time = 5 * 60 * 1000 ;   string s = config . get init parameter (  application config . broadcaster   lifecycle   policy   idletime )  ;  if  ( s  !  =  null )   {  max idle time =  integer . parse int ( s )  ;   }  s = config . get init parameter ( broadcaster   policy )  ;  if  ( s  !  =  null )   {  default policy = s . equals ignore case (  broadcaster . policy . reject . name (  )  )   ?   broadcaster . policy . reject :  broadcaster . policy . fifo ;   }  s = config . get init parameter ( broadcaster   policy   timeout )  ;  if  ( s  !  =  null )   {  default policy integer =  integer . value of ( s )  ;   }  if  ( empty . name (  )  . equals ignore case ( broadcaster life cycle policy )  )   {  policy = new  broadcaster life cycle policy .  builder (  )  . policy ( empty )  . build (  )  ;   }  else if  ( empty   destroy . name (  )  . equals ignore case ( broadcaster life cycle policy )  )   {  policy = new  broadcaster life cycle policy .  builder (  )  . policy ( empty   destroy )  . build (  )  ;   }  else if  ( idle . name (  )  . equals ignore case ( broadcaster life cycle policy )  )   {  policy = new  broadcaster life cycle policy .  builder (  )  . policy ( idle )  . idle time inms ( max idle time )  . build (  )  ;   }  else if  ( idle   destroy . name (  )  . equals ignore case ( broadcaster life cycle policy )  )   {  policy = new  broadcaster life cycle policy .  builder (  )  . policy ( idle   destroy )  . idle time inms ( max idle time )  . build (  )  ;   }  else if  ( idle   resume . name (  )  . equals ignore case ( broadcaster life cycle policy )  )   {  policy = new  broadcaster life cycle policy .  builder (  )  . policy ( idle   resume )  . idle time inms ( max idle time )  . build (  )  ;   }  else if  ( never . name (  )  . equals ignore case ( broadcaster life cycle policy )  )   {  policy = new  broadcaster life cycle policy .  builder (  )  . policy ( never )  . build (  )  ;   }  else  {  logger . warn ( "" unsupported  broadcaster life cycle policy policy  {  } "" broadcaster life cycle policy )  ;   }  broadcaster listeners . add ( life cycle listener )  ;   }  "
1261,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcasterFactory.java,create broadcaster,"protected  < t extends  broadcaster > t   (  class < t >  c  object id )  throws  broadcaster creation exception  {  try  {  t b = config . framework (  )  . new class instance ( c c )  ;  b . initialize ( id . to string (  )  legacy broadcasteruri config )  ;  b . set suspend policy ( default policy integer default policy )  ;  if  ( b . get broadcaster config (  )   =  =  null )   {  b . set broadcaster config ( new  broadcaster config ( config . framework (  )  . broadcaster filters config id . to string (  )  )  . init (  )  )  ;   }  b . set broadcaster life cycle policy ( policy )  ;  if  (  default broadcaster . class . is assignable from ( clazz )  )   {   default broadcaster . class . cast ( b )  . start (  )  ;   }  for  (   broadcaster listener l : broadcaster listeners )   {  b . add broadcaster listener ( l )  ;   }  logger . trace ( "" broadcaster  {  }  was created  {  } "" id b )  ;  notify on post create ( b )  ;  return b ;   }  catch  (   throwable t )   {  throw new  broadcaster creation exception ( t )  ;   }   }  "
1262,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcasterFactory.java,destroy,"@ override public synchronized void   (  )  {  if  ( config  =  =  null )  return ;   string s = config . get init parameter (  application config . shared )  ;  if  ( s  !  =  null && s . equals ignore case ( ""true"" )  )   {  logger . warn ( "" factory shared  will not be destroyed .   this can possibly cause memo"
1263,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcasterFactory.java,get,"@ override public  < t extends  broadcaster > t   (  class < t >  c  object id )  {  if  ( id  =  =  null )   {  throw new  null pointer exception ( ""id is null"" )  ;   }  if  ( c  =  =  null )   {  throw new  null pointer exception ( "" class is null"" )  ;   }  return lookup ( c id true true )  ;   }  "
1264,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcasterFactory.java,lookup,"public  < t extends  broadcaster > t   (  class < t >  c  object id boolean create if null boolean unique )  {  synchronized  ( c )   {  logger . trace ( "" about to create  {  } "" id )  ;  if  ( unique && store . get ( id )   !  =  null )   {  throw new  illegal state exception ( "" broadcaster already exists ""  +  id  +  "" .   use  broadcaster factory . lookup instead"" )  ;   }  t b =  ( t ) store . get ( id )  ;  logger . trace ( "" looking in the store using  {  }  returned  {  } "" id b )  ;  if  ( b  !  =  null &&  ! c . is assignable from ( b . get class (  )  )  )   {   string msg = "" invalid lookup class ""  +  c . get name (  )   +  "" .   cached class is: "" +  b . get class (  )  . get name (  )  ;  logger . debug ( msg )  ;  throw new  illegal state exception ( msg )  ;   }  if  (  ( b  =  =  null && create if null )  ||  ( b  !  =  null && b . is destroyed (  )  )  )   {  if  ( b  !  =  null )   {  logger . trace ( "" removing destroyed  broadcaster  {  } "" b . getid (  )  )  ;  store . remove ( b . getid (  )  b )  ;   }   broadcaster nb = store . get ( id )  ;  if  ( nb  =  =  null )   {  nb = create broadcaster ( c id )  ;  store . put ( id nb )  ;   }  if  ( nb  =  =  null && logger . is trace enabled (  )  )   {  logger . trace ( "" added  broadcaster  {  }   .   factory size:  {  } "" id store . size (  )  )  ;   }  b =  ( t ) nb ;   }  return b ;   }   }  "
1265,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcasterFactory.java,lookup all,@ override public  collection <  broadcaster >    (  )  {  return  collections . unmodifiable collection ( store . values (  )  )  ;   }  
1266,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcasterFactory.java,notify on post create,"public void   (  broadcaster b )  {  for  (   broadcaster listener l : broadcaster listeners )   {  try  {  l . on post create ( b )  ;   }  catch  (   exception ex )   {  logger . warn ( ""on post create"" ex )  ;   }   }   }  "
1267,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcasterFactory.java,remove,@ override public boolean   (  object id )  {  return store . remove ( id )   !  =  null ;   }  
1268,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcasterFactory.java,remove all atmosphere resource,@ deprecated @ override public void   (  atmosphere resource r )  {  try  {  if  (  ! store . is empty (  )  )   {  for  (   broadcaster b : lookup all (  )  )   {  try  {  b . remove atmosphere resource ( r )  ;   }  catch  (   illegal state exception ex )   {  logger . trace ( ex . get message (  )  ex )  ;   }   }   }   }  catch  (   exce
1269,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcasterFactory.java,remove broadcaster listener,@ override public  broadcaster factory   (  broadcaster listener l )  {  broadcaster listeners . remove ( l )  ;  for  (   broadcaster b : store . values (  )  )   {  b . remove broadcaster listener ( l )  ;   }  return this ;   }  
1270,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\Deliver.java, deliver,public   (  object message  broadcaster future <  ?  >  future boolean write locally )  {  this ( type . all message message null future null write locally null true )  ;   }  
1271,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\Deliver.java,get cache,public  cache message   (  )  {  return cache ;   }  
1272,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\Deliver.java,get future,public  broadcaster future <  ?  >    (  )  {  return future ;   }  
1273,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\Deliver.java,get message,public  object   (  )  {  return message ;   }  
1274,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\Deliver.java,get original message,public  object   (  )  {  return original message ;   }  
1275,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\Deliver.java,get resource,public  atmosphere resource   (  )  {  return resource ;   }  
1276,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\Deliver.java,get resources,public  set <  atmosphere resource >    (  )  {  return resources ;   }  
1277,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\Deliver.java,get type,public type   (  )  {  return type ;   }  
1278,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\Deliver.java,is async,public boolean   (  )  {  return async ;   }  
1279,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\Deliver.java,is write locally,public boolean   (  )  {  return write locally ;   }  
1280,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\Deliver.java,set async,public void   ( boolean async )  {  this . async = async ;   }  
1281,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\Deliver.java,set cache,public void   (  cache message cache )  {  this . cache = cache ;   }  
1282,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\Deliver.java,set future,public void   (  broadcaster future <  ?  >  future )  {  this . future = future ;   }  
1283,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\Deliver.java,set message,public void   (  object message )  {  this . message = message ;   }  
1284,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\Deliver.java,set original message,public void   (  object original message )  {  this . original message = original message ;   }  
1285,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\Deliver.java,set write locally,public void   ( boolean write locally )  {  this . write locally = write locally ;   }  
1286,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\Deliver.java,to string,"@ override public  string   (  )  {  return "" entry { ""  +  ""message = ""  +  message  +  ""  type = "" +  type +  ""  future = "" +  future +  ' } ' ;   }  "
1287,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultMetaBroadcaster.java, complete listener,private   (  meta broadcaster future f )  {  this . f = f ;   }  
1288,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultMetaBroadcaster.java, meta broadcaster future,private   (  list <  broadcaster >  l )  {  this . latch = new  count down latch ( l . size (  )  )  ;  this . l = l ;   }  
1289,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultMetaBroadcaster.java,add broadcaster listener,@ override public  meta broadcaster   (  broadcaster listener b )  {  broadcaster listeners . add ( b )  ;  return this ;   }  
1290,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultMetaBroadcaster.java,broadcast,"protected  meta broadcaster future   ( final  string path  object message int time  time unit unit boolean delay boolean cache message )  {  if  ( config  !  =  null )   {   collection <  broadcaster >  c = config . get broadcaster factory (  )  . lookup all (  )  ;  final  map <  string  string >  m = new  hash map <  string  string >  (  )  ;   list <  broadcaster >  l = new  array list <  broadcaster >  (  )  ;  logger . trace ( "" map  {  } "" path )  ;   uri template t = null ;  try  {  t = new  uri template ( path )  ;  for  (   broadcaster b : c )   {  logger . trace ( "" trying to map  {  }  to  {  } "" t b . getid (  )  )  ;  if  ( t . match ( b . getid (  )  m )  )   {  l . add ( b )  ;   }  m . clear (  )  ;   }   }  finally  {  if  ( t  !  =  null )  t . destroy (  )  ;   }  if  ( l . is empty (  )  && cache message )   {  if  (  no cache . class . is assignable from ( cache . get class (  )  )  )   {  logger . warn ( "" no  broadcaster matches  {  }  .   message  {  }  will be lost .  ""  +  "" make sure you cache it or make sure the  broadcaster exists before . "" path message )  ;   }  else  {  cache . cache ( path message )  ;   }  return e ;   }   meta broadcaster future f = new  meta broadcaster future ( l )  ;   complete listener cl = new  complete listener ( f )  ;  for  (   broadcaster b : l )   {  if  ( time  <  =  0 )   {  f . outer future ( b . add broadcaster listener ( cl )  . broadcast ( message )  )  ;   }  else if  (  ! delay )   {  f . outer future ( b . schedule fixed broadcast ( message time unit )  )  ;   }  else  {  f . outer future ( b . delay broadcast ( message time unit )  )  ;   }   }  return f ;   }  else  {  return e ;   }   }  "
1291,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultMetaBroadcaster.java,broadcast to,@ override public  future <  list <  broadcaster >  >    (  string broadcasterid  object message boolean cache message )  {  return map ( broadcasterid message  - 1 null false cache message )  ;   }  
1292,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultMetaBroadcaster.java,cache,@ override public  meta broadcaster   (  meta broadcaster cache cache )  {  this . cache = cache ;  return this ;   }  
1293,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultMetaBroadcaster.java,cancel,@ override public boolean   ( boolean b )  {  for  (   future <  ?  >  f : outer future )   {  f . cancel ( b )  ;   }  while  ( latch . get count (  )   >  0 )   {  latch . count down (  )  ;   }  is cancelled = true ;  return is cancelled ;   }  
1294,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultMetaBroadcaster.java,configure,@ override public void   (  atmosphere config config )  {  this . config = config ;   }  
1295,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultMetaBroadcaster.java,count down,public void   (  )  {  latch . count down (  )  ;   }  
1296,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultMetaBroadcaster.java,delay to,@ override public  future <  list <  broadcaster >  >    (  string broadcasterid  object message int time  time unit unit )  {  return map ( broadcasterid message time unit true true )  ;   }  
1297,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultMetaBroadcaster.java,destroy,public void   (  )  {  broadcaster listeners . clear (  )  ;  flush cache (  )  ;   }  
1298,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultMetaBroadcaster.java,flush cache,protected  meta broadcaster   (  )  {  if  ( cache  !  =  null )  cache . flush cache (  )  ;  return this ;   }  
1299,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultMetaBroadcaster.java,get,@ override public  list <  broadcaster >    ( long t  time unit time unit )  throws  interrupted exception   execution exception   timeout exception  {  latch . await ( t time unit )  ;  return l ;   }  
1300,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultMetaBroadcaster.java,is cancelled,@ override public boolean   (  )  {  return is cancelled ;   }  
1301,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultMetaBroadcaster.java,is done,@ override public boolean   (  )  {  return latch . get count (  )   =  =  0 ;   }  
1302,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultMetaBroadcaster.java,map,"protected  meta broadcaster future   (  string path  object message int time  time unit unit boolean delay boolean cache message )  {  if  ( path  =  =  null || path . is empty (  )  )   {  throw new  null pointer exception (  )  ;   }  if  ( path . contains ( ""*"" )  )   {  path = path . replace ( ""*"" mapping   regex )  ;   }  if  ( path . equals ( "" / "" )  )   {  path +  = mapping   regex ;   }  return broadcast ( path message time unit delay cache message )  ;   }  "
1303,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultMetaBroadcaster.java,on complete,"@ override public void   (  broadcaster b )  {  b . remove broadcaster listener ( this )  ;  f . count down (  )  ;  if  ( f . is done (  )  )   {  for  (   broadcaster listener l : broadcaster listeners )   {  try  {  l . on complete ( b )  ;   }  catch  (   exception ex )   {  logger . warn ( """" ex )  ;   }   }   }   }  "
1304,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultMetaBroadcaster.java,outer future, meta broadcaster future   (  future <  ?  >  f )  {  outer future . add ( f )  ;  return this ;   }  
1305,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultMetaBroadcaster.java,remove broadcaster listener,@ override public  meta broadcaster   (  broadcaster listener b )  {  broadcaster listeners . remove ( b )  ;  return this ;   }  
1306,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultMetaBroadcaster.java,schedule to,@ override public  future <  list <  broadcaster >  >    (  string broadcasterid  object message int time  time unit unit )  {  return map ( broadcasterid message time unit false true )  ;   }  
1307,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java, async write token,public   (  atmosphere resource resource  object msg  broadcaster future future  object original message  cache message cache  atomic integer count )  {  this . resource = resource ;  this . msg = msg ;  this . future = future ;  this . original message = original message ;  this . cache = cache ;  this . count = count ;   }  
1308,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java, write operation,private   (  atmosphere resource r  atmosphere resource event e  thread io thread )  {  this . r = r ;  this . e = e ;  this . io thread = io thread ;   }  
1309,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java, write queue,private   (  string uuid )  {  this . uuid = uuid ;   }  
1310,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,add atmosphere resource,"@ override public  broadcaster   (  atmosphere resource r )  {  try  {  if  ( destroyed . get (  )  )   {  logger . debug ( destroyed getid (  )  ""add atmosphere resource (  atmosphere resource r"" )  ;  return this ;   }  start (  )  ;  if  ( scope  =  =  scope . request && request scoped . get and set ( true )  )   {  throw n"
1311,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,add broadcaster life cycle policy listener,@ override public void   (  broadcaster life cycle policy listener b )  {  life cycle listeners . add ( b )  ;   }  
1312,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,add broadcaster listener,@ override public  broadcaster   (  broadcaster listener b )  {  if  (  ! shared listeners &&  ! broadcaster listeners . contains ( b )  )   {  broadcaster listeners . add ( b )  ;   }  return this ;   }  
1313,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,as string,public  list <  string >    (  )  {   list <  string >  l = new  array list <  string >  (  )  ;  for  (   async write token w : queue )   {  l . add ( w . to string (  )  )  ;   }  return l ;   }  
1314,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,await and broadcast,"@ override public  future <  object >    (  object t long time  time unit time unit )  {  if  ( resources . is empty (  )  )   {  synchronized  ( await barrier )   {  try  {  logger . trace ( "" awaiting for  atmosphere resource for  {  }   {  } "" time time unit )  ;  await barrier . wait ( translate time unit ( time timeu"
1315,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,broadcast,"@ override public  future <  object >    (  object msg  set <  atmosphere resource >  subset )  {  if  ( destroyed . get (  )  )   {  logger . debug ( destroyed getid (  )  ""broadcast ( t msg   set <  atmosphere resource >  subset ) "" )  ;  return future done ( msg )  ;   }  start (  )  ;   object new msg = filter ( msg )  ;  if  ( newm"
1316,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,broadcast on resume,protected void   (  atmosphere resource r )  {  for  (   deliver e : broadcast on resume )   {  e . async = false ;  push ( new  deliver ( r e )  )  ;   }  if  ( resources . is empty (  )  )   {  broadcast on resume . clear (  )  ;   }   }  
1317,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,broadcaster listeners,public  collection <  broadcaster listener >    (  )  {  return broadcaster listeners ;   }  
1318,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,cache and suspend,"protected void   (  atmosphere resource r )  {  if  (  ! is atmosphere resource valid ( r )  )   {  logger . debug ( "" unable to add  atmosphere resource  {  } "" r . uuid (  )  )  ;  return ;   }  boolean was resumed = check cached and push ( r r . get atmosphere resource event (  )  )  ;  if  (  ! was resumed && is atmosphere resource valid ( r )  )   {  logger . trace ( "" associating  atmosphere resource  {  }  with  broadcaster  {  } "" r . uuid (  )  getid (  )  )  ;   string parentuuid = r . transport (  )  . equals (  atmosphere resource . transport . websocket )   ?   (  string )  atmosphere resource impl . class . cast ( r )  . get request ( false )  . get attribute ( suspended   atmosphere   resource   uuid )  : null ;  if  (  ! backward compatible && parentuuid  !  =  null )   {   atmosphere resource p = config . resources factory (  )  . find ( parentuuid )  ;  if  ( p  !  =  null &&  ! resources . contains ( p )  )   {  notify and add ( p )  ;   }  else if  ( p  =  =  null )   {  notify and add ( r )  ;   }  else  {  logger . trace ( "" atmosphere resource  {  }  was already mapped to  {  } "" r . uuid (  )  parentuuid )  ;   }   }  else  {  notify and add ( r )  ;   }   }  else if  (  ! was resumed )   {  logger . debug ( "" unable to add  atmosphere resource  {  }  to  {  } "" r . uuid (  )  name )  ;   }   }  "
1319,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,cache lost message,"public void   (  atmosphere resource r  async write token token boolean force )  {  if  (  ! force )   {  return ;   }  try  {  if  ( token  !  =  null && token . original message  !  =  null )   {  bc . get broadcaster cache (  )  . add to cache ( getid (  )  r  !  =  null  ?  r . uuid (  )  :  broadcaster cache . null new  broadcast message (  string . value of ( token . future . hash code (  )  )  token . original message )  )  ;  logger . trace ( "" lost message cached  {  } "" token . original message )  ;   }   }  catch  (   throwable t2 )   {  logger . error ( "" unable to cache message  {  }  for  atmosphere resource  {  } "" token . original message r  !  =  null  ?  r . uuid (  )  : """" )  ;  logger . error ( "" unable to cache message"" t2 )  ;   }   }  "
1320,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,cache message onio exception,"protected boolean   (  throwable cause )  {  for  (   stack trace element element : cause . get stack trace (  )  )   {  if  ( element . get method name (  )  . equals ( ""flush"" )  || element . get method name (  )  . equals ( ""flush buffer"" )  )   {  return false ;   }   }  return true ;   }  "
1321,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,call,"public  object   (  )  throws  exception  {  delayed broadcast . remove ( e )  ;  if  (  callable . class . is assignable from ( o . get class (  )  )  )   {  try  {   object r =  callable . class . cast ( o )  . call (  )  ;  final  object msg = filter ( r )  ;  if  ( msg  !  =  null )   {   deliver deliver = new  deliver ( msg future r )  ;  push ( deliver )  ;   }  return msg ;   }  catch  (   exception e1 )   {  logger . error ( """" e )  ;   }   }  final  object msg = filter ( o )  ;  final  deliver e = new  deliver ( msg future o )  ;  push ( e )  ;  return msg ;   }  "
1322,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,callable,"private  object   (  object msg )  {  if  (  callable . class . is assignable from ( msg . get class (  )  )  )   {  try  {  return  callable . class . cast ( msg )  . call (  )  ;   }  catch  (   exception e )   {  logger . warn ( "" callable exception"" e )  ;  return null ;   }   }  return msg ;   }  "
1323,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,check cached and push,"protected boolean   ( final  atmosphere resource r final  atmosphere resource event e )  {  boolean cache = retrieve tracked broadcast ( r e )  ;  if  (  ! cache )  return false ;  if  (  !  (  (  list ) e . get message (  )  )  . is empty (  )  )   {  logger . debug ( "" sending cached message  {  }  to  {  } "" e . get message (  )  r . uuid (  )  )  ;   list <  object >  cache messages =  (  list ) e . get message (  )  ;   broadcaster future <  object >  f = new  broadcaster future <  object >  ( e . get message (  )  1 )  ;   linked list <  object >  filtered message = new  linked list <  object >  (  )  ;   linked list <  object >  filtered message clone = null ;   deliver deliver ;   object new message ;  for  (   object o : cache messages )   {  new message = filter ( o )  ;  if  ( new message  =  =  null )   {  continue ;   }  deliver = new  deliver ( new message r f o )  ;  if  (  ! per request filter ( r deliver )  )   {  continue ;   }  if  ( deliver . message  !  =  null )   {  filtered message . add last ( deliver . message )  ;   }   }  if  ( filtered message . is empty (  )  )   {  return false ;   }  e . set message ( filtered message )  ;  final boolean will be resumed =  utils . resumable transport ( r . transport (  )  )  ;  if  ( will be resumed )   {  filtered message clone =  (  linked list <  object >  ) filtered message . clone (  )  ;   }   list <  atmosphere resource event listener >  listeners = will be resumed  ?  new  array list (  )  : empty   listeners ;   atmosphere resource impl r impl =  atmosphere resource impl . class . cast ( r )  ;  if  ( will be resumed &&  ! r impl . atmosphere resource event listener (  )  . is empty (  )  )   {  listeners . add all ( r impl . atmosphere resource event listener (  )  )  ;   }  synchronized  ( r impl )   {  try  {  r impl . get request (  )  . set attribute ( cached ""true"" )  ;  prepare invoke on state change ( r e )  ;   }  catch  (   throwable t )   {  logger . error ( "" unable to write cached message  {  }  for  {  } "" e . get message (  )  r . uuid (  )  )  ;  logger . error ( """" t )  ;  for  (   object o : cache messages )   {  bc . get broadcaster cache (  )  . add to cache ( getid (  )  r  !  =  null  ?  r . uuid (  )  :  broadcaster cache . null new  broadcast message ( o )  )  ;   }  return true ;   }  if  ( will be resumed )   {  e . set message ( filtered message clone )  ;   }  for  (   atmosphere resource event listener l : will be resumed  ?  listeners : r impl . atmosphere resource event listener (  )  )   {  l . on broadcast ( e )  ;   }  switch  ( r . transport (  )  )   {  case undefined: case jsonp: case ajax: case long   polling: return true ;  case sse: break ;  default : try  {  r . get response (  )  . flush buffer (  )  ;   }  catch  (  io exception ioe )   {  logger . trace ( """" ioe )  ;   atmosphere resource impl . class . cast ( r )  .    destroy (  )  ;   }  break ;   }   }   }  return false ;   }  "
1324,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,create broadcaster config,protected  broadcaster config   (  atmosphere config config )  {  return new  broadcaster config ( config . framework (  )  . broadcaster filters config getid (  )  )  . init (  )  ;   }  
1325,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,current lifecycle task,public  default broadcaster   (  future <  ?  >  current lifecycle task )  {  this . current lifecycle task = current lifecycle task ;  return this ;   }  
1326,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,delay broadcast,"@ override public  future <  object >    ( final  object o long delay  time unit t )  {  if  ( destroyed . get (  )  )   {  logger . debug ( destroyed getid (  )  ""delay broadcast ( final t o  long delay   time unit t ) "" )  ;  return null ;   }  start (  )  ;  final  object msg = filter ( o )  ;  if  ( msg  =  =  null )  retur"
1327,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,deliver push,"protected void   (  deliver deliver boolean rec )  {  recent activity . set ( true )  ;   string prev message = deliver . message . to string (  )  ;  if  ( rec &&  ! delayed broadcast . is empty (  )  )   {   iterator <  deliver >  i = delayed broadcast . iterator (  )  ;   string builder b = new  string builder (  )  ;  while  ( i . has next (  )  )   {   deliver e = i . next (  )  ;  e . future . cancel ( true )  ;  try  {  if  ( e . message instanceof  string && deliver . message instanceof  string )   {  b . append ( e . message )  ;   }  else  {  deliver push ( e false )  ;   }   }  finally  {  i . remove (  )  ;   }   }  if  ( b . length (  )   >  0 )   {  deliver . message = b . append ( deliver . message )  . to string (  )  ;   }   }   object final msg = callable ( deliver . message )  ;  if  ( final msg  =  =  null )   {  logger . error ( "" callable exception .   please catch all exceptions from your callable .   message  {  }  will be lost and all  atmosphere resource ""  +  ""associated with this  broadcaster resumed . "" deliver . message )  ;  entry done ( deliver . future )  ;  switch  ( deliver . type )   {  case all: synchronized  ( resources )   {  for  (   atmosphere resource r : resources )   {  if  (  utils . resumable transport ( r . transport (  )  )  )  try  {  r . resume (  )  ;   }  catch  (   throwable t )   {  logger . trace ( ""resume all"" t )  ;   }   }   }  break ;  case resource: deliver . resource . resume (  )  ;  break ;  case set: for  (  atmosphere resource r : deliver . resources )   {  r . resume (  )  ;   }  break ;   }  return ;   }  notify on message ( deliver )  ;   object prevm = deliver . original message ;  deliver . original message =  ( deliver . original message  !  =  deliver . message  ?  callable ( deliver . original message )  : final msg )  ;  if  ( deliver . original message  =  =  null )   {  logger . trace ( "" broadcasted message was null  {  } "" prevm )  ;  entry done ( deliver . future )  ;  return ;   }  deliver . message = final msg ;   map <  string  cache message >  cache for set = deliver . type  =  =   deliver . type . set  ?  new  hash map <  string  cache message >  (  )  : null ;  switch  ( deliver . type )   {  case all: deliver . cache = bc . get broadcaster cache (  )  . add to cache ( getid (  )   broadcaster cache . null new  broadcast message ( deliver . original message )  )  ;  break ;  case resource: deliver . cache = bc . get broadcaster cache (  )  . add to cache ( getid (  )  deliver . resource . uuid (  )  new  broadcast message ( deliver . original message )  )  ;  break ;  case set: for  (  atmosphere resource r : deliver . resources )   {  cache for set . put ( r . uuid (  )  bc . get broadcaster cache (  )  . add to cache ( getid (  )  r . uuid (  )  new  broadcast message ( deliver . original message )  )  )  ;   }  break ;   }  if  ( resources . is empty (  )  )   {  logger . trace ( "" no resource available for  {  }  and message  {  } "" getid (  )  final msg )  ;  entry done ( deliver . future )  ;  if  ( cache for set  !  =  null )   {  cache for set . clear (  )  ;   }  return ;   }  try  {  if  ( logger . is trace enabled (  )  )   {  for  (  atmosphere resource r : resources )   {  logger . trace ( "" atmosphere resource  {  }  available for  {  } "" r . uuid (  )  deliver . message )  ;   }   }  boolean has filters = bc . has per request filters (  )  ;   object before processing message = deliver . message ;  switch  ( deliver . type )   {  case all:  atomic integer count = new  atomic integer ( resources . size (  )  )  ;  for  (  atmosphere resource r : resources )   {  deliver . message = before processing message ;  boolean deliver message = per request filter ( r deliver )  ;  if  ( end broadcast ( deliver r deliver . cache deliver message )  )  continue ;  if  ( deliver . write locally )   {  queue writeio ( r has filters  ?  new  deliver ( r deliver )  : deliver count )  ;   }   }  break ;  case resource: boolean deliver message = per request filter ( deliver . resource deliver )  ;  if  ( end broadcast ( deliver deliver . resource deliver . cache deliver message )  )  return ;  if  ( deliver . write locally )   {  queue writeio ( deliver . resource deliver new  atomic integer ( 1 )  )  ;   }  break ;  case set: count = new  atomic integer ( deliver . resources . size (  )  )  ;  for  (  atmosphere resource r : deliver . resources )   {  deliver . message = before processing message ;  deliver message = per request filter ( r deliver )  ;   cache message cache msg = cache for set . remove ( r . uuid (  )  )  ;  if  ( end broadcast ( deliver r cache msg deliver message )  )  continue ;  if  ( deliver . write locally )   {  queue writeio ( r new  deliver ( r deliver cache msg )  count )  ;   }   }  break ;   }  deliver . message = prev message ;   }  catch  (  interrupted exception ex )   {  logger . debug ( ex . get message (  )  ex )  ;  if  ( cache for set  !  =  null )   {  cache for set . clear (  )  ;   }   }   }  "
1328,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,destroy,public void   (  )  {  this . resource = null ;  this . msg = null ;  this . future = null ;  this . original message = null ;   }  
1329,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,dispatch messages,protected void   (  deliver e )  {  messages . offer ( e )  ;  if  ( dispatch thread . get (  )   =  =  0 )   {  dispatch thread . increment and get (  )  ;  get broadcaster config (  )  . get executor service (  )  . submit ( get broadcast handler (  )  )  ;   }   }  
1330,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,end broadcast,"protected boolean   (  deliver deliver  atmosphere resource r  cache message cache msg boolean deliver message )  {  if  (  ! deliver message || deliver . message  =  =  null )   {  logger . debug ( "" skipping broadcast delivery  {  }  for resource  {  }  "" deliver . message deliver . resource  !  =  null  ?  deliver . resource . uuid (  )  : ""null"" )  ;  bc . get broadcaster cache (  )  . clear cache ( getid (  )  r . uuid (  )  cache msg )  ;  entry done ( deliver . future )  ;  return true ;   }  return false ;   }  "
1331,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,entry done,protected void   ( final  broadcaster future <  ?  >  f )  {  notify broadcast listener (  )  ;  if  ( f  !  =  null )  f . done (  )  ;   }  
1332,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,execute async write,"protected void   ( final  async write token token )  {  boolean notify listeners = true ;  boolean lost candidate = false ;  if  ( token . resource  =  =  null )  throw new  null pointer exception (  )  ;  final  atmosphere resource event impl event =  (  atmosphere resource event impl ) token . resource . get atmosphere resource event (  )  ;  final  atmosphere resource impl r =  atmosphere resource impl . class . cast ( token . resource )  ;  final boolean will be resumed =  utils . resumable transport ( r . transport (  )  )  ;   list <  atmosphere resource event listener >  listeners = will be resumed  ?  new  array list (  )  : empty   listeners ;  final  atmosphere request request = r . get request ( false )  ;  try  {  event . set message ( token . msg )  ;  if  (  ! is atmosphere resource valid ( r )  )   {  logger . trace ( "" atmosphere resource  {  }  state is invalid for  broadcaster  {  }  .   message will be cached"" r . uuid (  )  name )  ;  remove atmosphere resource ( r false )  ;  return ;   }  bc . get broadcaster cache (  )  . clear cache ( getid (  )  r . uuid (  )  token . cache )  ;  try  {  request . set attribute ( getid (  )  token . future )  ;  request . set attribute ( max   inactive  system . current time millis (  )  )  ;  request . set attribute ( using token id for attribute token )  ;  if  ( will be resumed &&  ! r . atmosphere resource event listener (  )  . is empty (  )  )   {  listeners . add all ( r . atmosphere resource event listener (  )  )  ;   }  prepare invoke on state change ( r event )  ;   }  catch  (   throwable t )   {  logger . debug ( "" invalid  atmosphere resource state  {  }  .   the connection has been remotely""  +  "" closed and message  {  }  will be added to the configured  broadcaster cache for later retrieval"" r . uuid (  )  event . get message (  )  )  ;  logger . trace ( "" if you are using  tomcat 7 . 0 . 22 and lower  you're most probably hitting http: /  / is . gd /  nqicft"" )  ;  logger . trace ( "" application config . cache   message   on   io   flush   exception  {  } "" cache onio flush exception t )  ;  lost candidate = cache onio flush exception  ?  cache onio flush exception : cache message onio exception ( t )  ;  remove atmosphere resource ( r false )  ;  r . remove from all broadcasters (  )  ;  event . set cancelled ( true )  ;  event . set throwable ( t )  ;  r . set is in scope ( false )  ;  return ;   }  try  {  request . set attribute (  framework config . message   written ""true"" )  ;   }  catch  (   null pointer exception ex )   {  logger . trace ( ""npe after the message has been written for  {  } "" r . uuid (  )  )  ;   }   }  finally  {  if  ( notify listeners )   {  if  ( will be resumed )   {  event . set message ( token . msg )  ;  for  (   atmosphere resource event listener e : listeners )   {  e . on broadcast ( event )  ;   }   }  else if  (  ! event . is resumed on timeout (  )  )   {  r . notify listeners (  )  ;   }   }  if  ( token . last broadcasted (  )  )   {  notify broadcast listener (  )  ;   }  if  ( token . future  !  =  null )  token . future . done (  )  ;  if  ( lost candidate )   {  cache lost message ( r token true )  ;   }  try  {  request . remove attribute ( getid (  )  )  ;  request . remove attribute ( using token id for attribute )  ;   }  catch  (   null pointer exception ex )   {  logger . trace ( ""npe after the message has been written for  {  } "" r . uuid (  )  )  ;   }  token . destroy (  )  ;   }   }  "
1333,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,execute blocking write,protected void   (  atmosphere resource r  deliver deliver  atomic integer count )  throws  interrupted exception  {  synchronized  ( r )   {  execute async write ( new  async write token ( r deliver . message deliver . future deliver . original message deliver . cache count )  )  ;   }   }  
1334,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,filter,protected  object   (  object msg )  {   broadcast action a = bc . filter ( msg )  ;  if  ( a . action (  )   =  =   broadcast action . action . abort || msg  =  =  null )  return null ;  else return a . message (  )  ;   }  
1335,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,future done,protected  broadcaster future <  object >    (  object msg )  {  notify broadcast listener (  )  ;  return  ( new  broadcaster future <  object >  ( msg )  )  . done (  )  ;   }  
1336,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,get async write handler,"protected  runnable   ( final  write queue write queue )  {  return new  runnable (  )  {  public void run (  )  {  while  (  ! is destroyed (  )  )   {   async write token token = null ;  try  {  token = write queue . queue . poll ( wait time  time unit . milliseconds )  ;  if  ( token  =  =  null &&  ! out of order broadcast supported . get (  )  )   {  synchronized  ( write queue )   {  if  ( write queue . queue . is empty (  )  )   {  write queue . monitored . set ( false )  ;  write queues . remove ( write queue . uuid )  ;  return ;   }   }   }  else if  ( token  =  =  null )   {  return ;   }   }  catch  (   interrupted exception ex )   {  logger . trace ( "" {  }  got interrupted for  broadcaster  {  } ""  thread . current thread (  )  . get name (  )  getid (  )  )  ;  logger . trace ( """" ex )  ;  return ;   }  finally  {  if  (  ! bc . get async write service (  )  . is shutdown (  )  && out of order broadcast supported . get (  )  )   {  bc . get async write service (  )  . submit ( this )  ;   }   }  if  ( token  !  =  null )   {  synchronized  ( token . resource )   {  try  {  logger . trace ( "" about to write to  {  } "" token . resource )  ;  execute async write ( token )  ;   }  catch  (   throwable ex )   {  if  (  ! started . get (  )  || destroyed . get (  )  )   {  logger . trace ( "" failed to execute a write operation .   broadcaster is destroyed or not yet started for  broadcaster  {  } "" getid (  )  ex )  ;  return ;   }  else  {  try  {  if  ( token  !  =  null )   {  logger . warn ( "" this message  {  }  will be lost for  atmosphere resource  {  }   adding it to the  broadcaster cache"" token . original message token . resource  !  =  null  ?  token . resource . uuid (  )  : ""null"" )  ;  cache lost message ( token . resource token true )  ;   }   }  finally  {  if  ( token  !  =  null )   {  remove atmosphere resource ( token . resource false )  ;   }  logger . warn ( "" failed to execute a write operation for  broadcaster ""  +  getid (  )  ex )  ;   }   }   }  finally  {  if  (  ! bc . get async write service (  )  . is shutdown (  )  && out of order broadcast supported . get (  )  )   {  return ;   }   }   }   }   }   }   }   ;   }  "
1337,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,get atmosphere resources,@ override public  collection <  atmosphere resource >    (  )  {  return  collections . unmodifiable collection ( resources )  ;   }  
1338,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,get broadcast handler,"protected  runnable   (  )  {  return new  runnable (  )  {  public void run (  )  {  while  (  ! is destroyed (  )  )   {   deliver msg = null ;  try  {  msg = messages . poll ( wait time  time unit . milliseconds )  ;  if  ( msg  =  =  null )   {  dispatch thread . decrement and get (  )  ;  return ;   }   }  catch  (   interrupted exception ex )   {  logger . trace ( "" {  }  got interrupted for  broadcaster  {  } ""  thread . current thread (  )  . get name (  )  getid (  )  )  ;  logger . trace ( """" ex )  ;  return ;   }  finally  {  if  ( out of order broadcast supported . get (  )  )   {  bc . get executor service (  )  . submit ( this )  ;   }   }  try  {  logger . trace ( "" {  }  is about to broadcast  {  } "" getid (  )  msg )  ;  push ( msg )  ;   }  catch  (   throwable ex )   {  if  (  ! started . get (  )  || destroyed . get (  )  )   {  logger . trace ( "" failed to submit broadcast handler runnable on shutdown for  broadcaster  {  } "" getid (  )  ex )  ;  return ;   }  else  {  logger . warn ( "" this message  {  }  will be lost"" msg )  ;  logger . warn ( "" failed to submit broadcast handler runnable to for  broadcaster""  +  getid (  )  ex )  ;   }   }  finally  {  if  ( out of order broadcast supported . get (  )  )   {  return ;   }   }   }   }   }   ;   }  "
1339,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,get broadcaster config,@ override public  broadcaster config   (  )  {  return bc ;   }  
1340,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,get broadcaster life cycle policy,@ override public  broadcaster life cycle policy   (  )  {  return life cycle policy ;   }  
1341,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,getid,@ override public  string   (  )  {  return name ;   }  
1342,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,get scope,@ override public scope   (  )  {  return scope ;   }  
1343,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,initialize,"public  broadcaster   (  string name  atmosphere config config )  {  return initialize ( name uri . create ( ""http: /  / localhost"" )  config )  ;   }  "
1344,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,invoke on state change,"protected void   ( final  atmosphere resource r final  atmosphere resource event e )  {  try  {  logger . trace ( "" {  }  is broadcasting to  {  } "" name r . uuid (  )  )  ;  r . get atmosphere handler (  )  . on state change ( e )  ;   }  catch  (   throwable t )   {  if  (  !  interrupted exception . class . is assignable from ( t . get class (  )  )  )   {  on exception ( t r )  ;   }   }   }  "
1345,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,is atmosphere resource valid,private boolean   (  atmosphere resource r )  {  return  ! r . is resumed (  )  &&  ! r . is cancelled (  )  &&  atmosphere resource impl . class . cast ( r )  . is in scope (  )  ;   }  
1346,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,is destroyed,@ override public boolean   (  )  {  return destroyed . get (  )  ;   }  
1347,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,kill reactive threads,protected void   (  )  {  if  ( notifier future  !  =  null )   {  for  (   future <  ?  >  f : notifier future )   {  if  ( f  !  =  null )  f . cancel ( false )  ;   }   }  if  ( async write future  !  =  null )   {  for  (   future <  ?  >  f : async write future )   {  if  ( f  !  =  null )  f . cancel ( false )  ;   }   }   }  
1348,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,last broadcasted,public boolean   (  )  {  return count . decrement and get (  )   =  =  0 ;   }  
1349,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,life cycle listeners,public  concurrent linked queue <  broadcaster life cycle policy listener >    (  )  {  return life cycle listeners ;   }  
1350,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,life cycle policy,public  broadcaster life cycle policy   (  )  {  return life cycle policy ;   }  
1351,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,lifecycle handler,public  default broadcaster   (  lifecycle handler lifecycle handler )  {  this . lifecycle handler = lifecycle handler ;  return this ;   }  
1352,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,messages,public  blocking queue <  deliver >    (  )  {  return messages ;   }  
1353,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,notify and add,protected void   (  atmosphere resource r )  {  resources . add ( r )  ;  r . add broadcaster ( this )  ;  notify on add atmosphere resource listener ( r )  ;   }  
1354,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,notify broadcast listener,"protected void   (  )  {  for  (   broadcaster listener b : broadcaster listeners )   {  try  {  b . on complete ( this )  ;   }  catch  (   exception ex )   {  logger . warn ( """" ex )  ;   }   }   }  "
1355,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,notify on add atmosphere resource listener,"protected void   (  atmosphere resource r )  {  for  (   broadcaster listener b : broadcaster listeners )   {  try  {  b . on add atmosphere resource ( this r )  ;   }  catch  (   exception ex )   {  logger . warn ( """" ex )  ;   }   }   }  "
1356,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,notify on message,"protected void   (  deliver deliver )  {  for  (   broadcaster listener b : broadcaster listeners )   {  try  {  b . on message ( this deliver )  ;   }  catch  (   exception ex )   {  logger . warn ( """" ex )  ;   }   }   }  "
1357,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,notify on pre destroy,"boolean   (  )  {  for  (   broadcaster listener b : broadcaster listeners )   {  try  {  b . on pre destroy ( this )  ;   }  catch  (   runtime exception ex )   {  if  (  broadcaster listener .  broadcast listener exception . class . is assignable from ( ex . get class (  )  )  )   {  logger . trace ( ""on pre destroy"" ex )  ;  return true ;   }  logger . warn ( ""on pre destroy"" ex )  ;   }   }  return false ;   }  "
1358,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,notify on remove atmosphere resource listener,"protected void   (  atmosphere resource r )  {  for  (   broadcaster listener b : broadcaster listeners )   {  try  {  b . on remove atmosphere resource ( this r )  ;   }  catch  (   exception ex )   {  logger . warn ( """" ex )  ;   }   }   }  "
1359,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,on exception,"public void   (  throwable t final  atmosphere resource ar boolean notify and cache )  {  final  atmosphere resource impl r =  atmosphere resource impl . class . cast ( ar )  ;  logger . trace ( ""i / o  exception  ( or related )  during execution of the write operation for ""  +  "" atmosphere resource  {  }  and  broadcaster  {  }  .   message will be cached  {  } "" new  string[] { ar . uuid (  )  getid (  )   string . value of ( notify and cache )  }  )  ;  logger . trace ( "" {  } "" t )  ;  remove atmosphere resource ( r )  ;  if  ( notify and cache )   {  final  atmosphere resource event impl event = r . get atmosphere resource event (  )  ;  event . set throwable ( t )  ;  r . notify listeners ( event )  ;  r . remove event listeners (  )  ;   }  if  ( notify and cache )   {  cache lost message ( r  (  async write token ) r . get request ( false )  . get attribute ( using token id for attribute )  notify and cache )  ;   }  if  ( bc  !  =  null && bc . get async write service (  )   !  =  null )   {  bc . get async write service (  )  . execute ( new  runnable (  )  {  @ override public void run (  )  {  try  {  logger . trace ( "" forcing connection close  {  } "" ar . uuid (  )  )  ;  r . resume (  )  ;  r . close (  )  ;   }  catch  (   throwable t )   {  logger . trace ( "" was unable to resume a corrupted  atmosphere resource  {  } "" r )  ;  logger . trace ( "" cause"" t )  ;   }   }   }   )  ;   }  else  {  r . resume (  )  ;   }   }  "
1360,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,out of order broadcast supported,public boolean   (  )  {  return out of order broadcast supported . get (  )  ;   }  
1361,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,per request filter,"protected boolean   (  atmosphere resource r  deliver msg )  {  if  ( r  =  =  null )   {  logger . trace ( "" null  atmosphere resource passed inside a  set"" )  ;  return false ;   }  if  ( bc . has per request filters (  )  )   {   broadcast action a = bc . filter ( r msg . message msg . original message )  ;  if  ( a . action (  )   =  =   broadcast action . action . abort )   {  return false ;   }  msg . message = a . message (  )  ;   }  return true ;   }  "
1362,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,policy,public policy   (  )  {  return policy ;   }  
1363,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,prepare invoke on state change,"protected void   ( final  atmosphere resource r final  atmosphere resource event e )  {  if  ( write timeout in second  !  =   - 1 )   {  logger . trace ( "" registering  write timeout  {  }  for  {  } "" write timeout in second r . uuid (  )  )  ;   write operation w = new  write operation ( r e  thread . current thread (  )  )  ;  bc . get scheduled executor service (  )  . schedule ( w write timeout in second  time unit . milliseconds )  ;  try  {  w . call (  )  ;   }  catch  (   exception ex )   {  logger . warn ( """" ex )  ;   }   }  else  {  invoke on state change ( r e )  ;   }   }  "
1364,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,push,protected void   (  deliver deliver )  {  if  ( destroyed . get (  )  )   {  return ;   }  deliver push ( deliver true )  ;   }  
1365,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,queue writeio,"protected void   (  atmosphere resource r  deliver deliver  atomic integer count )  throws  interrupted exception  {  if  ( deliver . async )   {  if  (  ! bc . get broadcaster cache (  )  . get class (  )  . equals (  broadcaster cache . default . get class (  )  )  )   {  if  ( r . is resumed (  )  || r . is cancelled (  )  )   {  logger . trace ( "" atmosphere resource  {  }  has been resumed or cancelled  unable to  broadcast message  {  } "" r . uuid (  )  deliver . message )  ;   atmosphere resource r2 = config . resources factory (  )  . find ( r . uuid (  )  )  ;  logger . trace ( "" found an  atmosphere resource  {  }  in state  {  } "" r2 r . is suspended (  )  )  ;  if  ( r2  !  =  null && r2 . is suspended (  )  && r . hash code (  )   !  =  r2 . hash code (  )  )   {  remove atmosphere resource ( r2 )  ;  check cached and push ( r2 r2 . get atmosphere resource event (  )  )  ;   }  return ;   }   }   async write token w = new  async write token ( r deliver . message deliver . future deliver . original message deliver . cache count )  ;  if  (  ! out of order broadcast supported . get (  )  )   {   write queue write queue = write queues . get ( r . uuid (  )  )  ;  if  ( write queue  =  =  null )   {  write queue = new  write queue ( r . uuid (  )  )  ;  write queues . put ( r . uuid (  )  write queue )  ;   }  write queue . queue . put ( w )  ;  synchronized  ( write queue )   {  if  (  ! write queue . monitored . get and set ( true )  )   {  logger . trace ( "" broadcaster  {  }  is about to queue writeio for  atmosphere resource  {  } "" name r . uuid (  )  )  ;  bc . get async write service (  )  . submit ( get async write handler ( write queue )  )  ;   }   }   }  else  {  unique write queue . queue . offer ( w )  ;   }   }  else  {  execute blocking write ( r deliver count )  ;   }   }  "
1366,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,reactive threads count,protected int   (  )  {  return  runtime . get runtime (  )  . available processors (  )  * 2 ;   }  
1367,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,recent activity,public  atomic boolean   (  )  {  return recent activity ;   }  
1368,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,remove atmosphere resource,"protected  broadcaster   (  atmosphere resource r boolean execute done )  {  if  ( destroyed . get (  )  )   {  logger . debug ( destroyed getid (  )  ""remove atmosphere resource (  atmosphere resource r ) "" )  ;  return this ;   }  boolean removed = resources . remove ( r )  ;  if  ( removed )   {  if  ( r . is suspended (  )  )   {  logger . trace ( "" excluded from  {  }  :  {  } "" getid (  )  r . uuid (  )  )  ;  bc . get broadcaster cache (  )  . exclude from cache ( getid (  )  r )  ;   }  notify on remove atmosphere resource listener ( r )  ;   }  else  {  logger . trace ( "" unable to remove  {  }  from  {  } "" r . uuid (  )  getid (  )  )  ;   }  r . remove broadcaster ( this )  ;  if  (  ! removed )  return this ;  logger . trace ( "" removing  atmosphere resource  {  }  for  broadcaster  {  } "" r . uuid (  )  name )  ;  write queues . remove ( r . uuid (  )  )  ;  if  ( execute done )   {   atmosphere resource impl a impl =  atmosphere resource impl . class . cast ( r )  ;   broadcaster future f =  (  broadcaster future ) a impl . get request ( false )  . get attribute ( getid (  )  )  ;  if  ( f  !  =  null &&  ! f . is done (  )  &&  ! f . is cancelled (  )  )   {  a impl . get request ( false )  . remove attribute ( getid (  )  )  ;  entry done ( f )  ;   }   }  return this ;   }  "
1369,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,remove broadcaster life cycle policy listener,@ override public void   (  broadcaster life cycle policy listener b )  {  life cycle listeners . remove ( b )  ;   }  
1370,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,remove broadcaster listener,@ override public  broadcaster   (  broadcaster listener b )  {  if  (  ! shared listeners )  broadcaster listeners . remove ( b )  ;  return this ;   }  
1371,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,rename,public  broadcaster   (  string id )  {  this . name = id ;  return this ;   }  
1372,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,resume all,"@ override public void   (  )  {  synchronized  ( resources )   {  for  (   atmosphere resource r : resources )   {  try  {  r . resume (  )  ;   }  catch  (   throwable t )   {  logger . trace ( ""resume all"" t )  ;   }  finally  {  remove atmosphere resource ( r )  ;   }   }   }   }  "
1373,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,retrieve tracked broadcast,"protected boolean   ( final  atmosphere resource r final  atmosphere resource event e )  {  logger . trace ( "" checking cached message for  {  } "" r . uuid (  )  )  ;   list <  ?  >  missed msg = bc . get broadcaster cache (  )  . retrieve from cache ( getid (  )  r . uuid (  )  )  ;  if  ( missed msg  !  =  null &&  ! missed msg . is empty (  )  )   {  e . set message ( missed msg )  ;  return true ;   }  return false ;   }  "
1374,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,run,"public void   (  )  {  if  (  callable . class . is assignable from ( o . get class (  )  )  )   {  try  {   object r =  callable . class . cast ( o )  . call (  )  ;  final  object msg = filter ( r )  ;  if  ( msg  !  =  null )   {   deliver deliver = new  deliver ( msg f r )  ;  push ( deliver )  ;   }  return ;   }  catch  (   exception e )   {  logger . error ( """" e )  ;   }   }  final  object msg = filter ( o )  ;  final  deliver e = new  deliver ( msg f o )  ;  push ( e )  ;   }  "
1375,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,schedule fixed broadcast,"@ override public  future <  object >    ( final  object o long wait for long period  time unit t )  {  if  ( destroyed . get (  )  )   {  logger . debug ( destroyed getid (  )  ""schedule fixed broadcast ( final  object o  long wait for  long period   time unit t ) "" )  ;  return null ;   }  start (  )  ;  if  ( peri"
1376,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,set broadcaster config,@ override public void   (  broadcaster config bc )  {  this . bc = bc ;   }  
1377,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,set broadcaster life cycle policy,@ override public void   ( final  broadcaster life cycle policy life cycle policy )  {  this . life cycle policy = life cycle policy ;  if  ( lifecycle handler  !  =  null )  lifecycle handler . on ( this )  ;   }  
1378,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,setid,"@ override public synchronized void   (  string id )  {  if  ( id  =  =  null )   {  id = get class (  )  . get simple name (  )   +  "" / ""  +  config . uuid provider (  )  . generate uuid (  )  ;   }  if  ( config . get broadcaster factory (  )   =  =  null )  return ;   broadcaster b = config . get broadcaster factory (  )  . lookup ( this . g"
1379,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,set scope,"@ override public void   ( scope scope )  {  if  ( destroyed . get (  )  )   {  logger . debug ( destroyed getid (  )  ""set scope"" )  ;  return ;   }  this . scope = scope ;  if  ( scope  !  =  scope . request )   {  return ;   }  logger . debug ( "" changing broadcaster scope for  {  }  .   this broadcaster will be destroye"
1380,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,set suspend policy,@ override public void   ( long max suspend resource policy policy )  {  this . max suspend resource . set ( max suspend resource )  ;  this . policy = policy ;   }  
1381,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,spawn reactor,protected void   (  )  {  kill reactive threads (  )  ;  int threads = out of order broadcast supported . get (  )   ?  reactive threads count (  )  : 1 ;  notifier future = new  future <  ?  > [threads] ;  if  ( out of order broadcast supported . get (  )  )   {  async write future = new  future <  ?  > [threads] ;  for  ( int i = 0 ;  i  <  threads ;  i +  +  )   {  notifier future[i] = bc . get executor service (  )  . submit ( get broadcast handler (  )  )  ;  async write future[i] = bc . get async write service (  )  . submit ( get async write handler ( unique write queue )  )  ;   }   }  else  {  notifier future[0] = bc . get executor service (  )  . submit ( get broadcast handler (  )  )  ;   }  dispatch thread . set ( threads )  ;   }  
1382,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,start,"protected void   (  )  {  if  (  ! initialized . get (  )  )   {  logger . warn ( "" broadcaster  {  }  not initialized"" getid (  )  )  ;   }  if  (  ! started . get and set ( true )  )   {  bc . get broadcaster cache (  )  . start (  )  ;  if  ( notifier future  =  =  null && async write future  =  =  null )   {  spawn reactor (  )  ;   }   }   }  "
1383,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,to string,"@ override public  string   (  )  {  return "" async write token { ""  +  ""resource = ""  +  resource  +  ""  msg = "" +  msg +  ""  future = "" +  future +  ' } ' ;   }  "
1384,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,translate time unit,private long   ( long period  time unit tu )  {  if  ( period  =  =   - 1 )  return period ;  switch  ( tu )   {  case seconds: return  time unit . milliseconds . convert ( period  time unit . seconds )  ;  case minutes: return  time unit . milliseconds . convert ( period  time unit . minutes )  ;  case hours: return  time unit . milliseconds . convert ( period  time unit . hours )  ;  case days: return  time unit . milliseconds . convert ( period  time unit . days )  ;  case milliseconds: return period ;  case microseconds: return  time unit . milliseconds . convert ( period  time unit . microseconds )  ;  case nanoseconds: return  time unit . milliseconds . convert ( period  time unit . nanoseconds )  ;   }  return period ;   }  
1385,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,write queues,public  concurrent hash map <  string  write queue >    (  )  {  return write queues ;   }  
1386,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\HeartbeatAtmosphereResourceEvent.java, heartbeat atmosphere resource event,public   ( final  atmosphere resource impl resource )  {  super ( resource )  ;   }  
1387,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\MetaBroadcaster.java, thirty seconds cache,public   (  meta broadcaster meta broadcaster  atmosphere config config )  {  this . meta broadcaster = meta broadcaster ;   executors factory . get scheduler ( config )  . schedule at fixed rate ( this 0 30  time unit . seconds )  ;   }  
1388,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\SessionSupport.java, session support,public   (  )  {  initialization hint = true ;   }  
1389,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\SessionSupport.java,session created,"@ override public void   (  http session event se )  {  logger . trace ( "" session created"" )  ;   }  "
1390,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\SessionSupport.java,session destroyed,"@ override public void   (  http session event se )  {  logger . trace ( "" session destroyed"" )  ;  try  {   http session s = se . get session (  )  ;   broadcaster factory f =  (  broadcaster factory ) s . get attribute (  framework config . broadcaster   factory )  ;  if  ( f  !  =  null )   {  s . set attribute (  framework co"
1391,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\SessionTimeoutRestorer.java, session timeout restorer,public   (  atmosphere config config int timeout )  {  this . timeout = timeout ;   string s = config . get init parameter (  application config . session   max   inactive   interval )  ;  if  ( s  !  =  null )   {  internal session timeout =  integer . value of ( s )  ;   }  else  {  internal session timeout =  - 1 ;   }   }  
1392,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\SessionTimeoutRestorer.java,refresh timeout,private synchronized void   (  http session session )  {  if  ( request count . get (  )   >  0 )  session . set max inactive interval ( internal session timeout )  ;  else session . set max inactive interval ( timeout )  ;   }  
1393,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\SessionTimeoutRestorer.java,restore,"public void   (  http session session )  {  int count = request count . decrement and get (  )  ;  logger . trace ( ""request count  <  =   {  } "" request count )  ;  if  ( count  =  =  0 )  refresh timeout ( session )  ;   }  "
1394,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\SessionTimeoutRestorer.java,session will passivate,@ override public void   (  http session event hse )  {  request count . set ( 0 )  ;  refresh timeout ( hse . get session (  )  )  ;   }  
1395,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\SessionTimeoutRestorer.java,setup,"public void   (  http session session )  {  int old count = request count . get and increment (  )  ;  logger . trace ( ""request count  =  >   {  } "" request count )  ;  if  ( old count  =  =  0 )  refresh timeout ( session )  ;   }  "
1396,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\SessionTimeoutRestorer.java,to string,"@ override public  string   (  )  {   string builder sb = new  string builder (  )  ;  sb . append ( "" session timeout restorer[timeout = "" )  ;  sb . append ( timeout )  ;  sb . append ( ""  request count = "" )  ;  sb . append ( request count . get (  )  )  ;  sb . append ( ']' )  ;  return sb . to string (  )  ;   }  "
1397,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\SessionTimeoutSupport.java,get,private static  session timeout restorer   (  http session s )  {  return  (  session timeout restorer ) s . get attribute ( key )  ;   }  
1398,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\SessionTimeoutSupport.java,get or create,private static  session timeout restorer   (  atmosphere config config  http session s )  {   session timeout restorer restorer =  (  session timeout restorer ) s . get attribute ( key )  ;  if  ( restorer  =  =  null )   {  restorer = new  session timeout restorer ( config s . get max inactive interval (  )  )  ;  s . set attribute ( key restorer )  ;   }  return restorer ;   }  
1399,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\SessionTimeoutSupport.java,restore timeout,public static void   (  http servlet request request )  {  restore timeout ( request . get session ( false )  )  ;   }  
1400,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\SessionTimeoutSupport.java,setup timeout,"public static void   (  atmosphere config config  http session session )  {  if  ( session  =  =  null )  return ;  try  {   session timeout restorer restorer = get or create ( config session )  ;  restorer . setup ( session )  ;   }  catch  (   exception e )   {  logger . trace ( """" e )  ;   }   }  "
1401,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\Universe.java,broadcaster factory,"public static  broadcaster factory   (  )  {  if  ( factory duplicate )   {  throw new  illegal state exception ( "" more than one instance has been stored .   universe cannot be used . "" )  ;   }  return factory ;   }  "
1402,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\Universe.java,framework,"public static  atmosphere framework   (  )  {  if  ( framework duplicate )   {  throw new  illegal state exception ( "" more than one instance has been stored .   universe cannot be used . "" )  ;   }  return framework ;   }  "
1403,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\Universe.java,meta broadcaster,"public static  default meta broadcaster   (  )  {  if  ( meta broadcaster duplicate )   {  throw new  illegal state exception ( "" more than one instance has been stored .   universe cannot be used . "" )  ;   }  return meta broadcaster ;   }  "
1404,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\Universe.java,resource factory,"public static  atmosphere resource factory   (  )  {  if  ( resource factory duplicate )   {  throw new  illegal state exception ( "" more than one instance has been stored .   universe cannot be used . "" )  ;   }  return resource factory ;   }  "
1405,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\Universe.java,session factory,"public static  atmosphere resource session factory   (  )  {  if  ( session factory duplicate )   {  throw new  illegal state exception ( "" more than one instance has been stored .   universe cannot be used . "" )  ;   }  return session factory ;   }  "
1406,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\Universe.java,session resource factory,public static void   (  atmosphere resource session factory a )  {  if  ( session factory  !  =  null )   {  session factory duplicate = true ;   }  session factory = a ;   }  
1407,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\WebSocketProcessorFactory.java,create processor,"private  web socket processor   (  atmosphere framework framework )  {   web socket processor processor = null ;   string web socket processor name = framework . get web socket processor class name (  )  ;  if  (  ! web socket processor name . equals ignore case (  default web socket processor . class . get name (  )  )  )   {  try  {  processor = framework . new class instance (  web socket processor . class  (  class <  web socket processor >  ) io utils . load class ( get class (  )  web socket processor name )  )  ;   }  catch  (   exception ex )   {  logger . error ( "" unable to create  {  } "" web socket processor name )  ;  processor = new  default web socket processor (  )  ;   }   }  if  ( processor  =  =  null )   {  processor = new  default web socket processor (  )  ;   }  processor . configure ( framework . get atmosphere config (  )  )  ;  return processor ;   }  "
1408,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\WebSocketProcessorFactory.java,destroy,public synchronized void   (  )  {  for  (   web socket processor processor : processors . values (  )  )   {  processor . destroy (  )  ;   }  processors . clear (  )  ;   }  
1409,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\WebSocketProcessorFactory.java,get default,public final static synchronized  web socket processor factory   (  )  {  if  ( factory  =  =  null )   {  factory = new  web socket processor factory (  )  ;   }  return factory ;   }  
1410,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\WebSocketProcessorFactory.java,get web socket processor,public  web socket processor   (  atmosphere framework framework )  {   web socket processor processor = processors . get ( framework )  ;  if  ( processor  =  =  null )   {  synchronized  ( framework )   {  processor = create processor ( framework )  ;  processors . put ( framework processor )  ;   }   }  return processor ;   }  
1411,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\WebSocketProcessorFactory.java,processors,public  map <  atmosphere framework  web socket processor >    (  )  {  return processors ;   }  
1412,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\AbstractBroadcasterProxy.java, abstract broadcaster proxy,"public   (  )  {  try  {   class jersey broadcaster util =  class . for name ( ""org . atmosphere . jersey . util .  jersey broadcaster util"" )  ;  jersey broadcast = jersey broadcaster util . get method ( ""broadcast"" new  class[] {  atmosphere resource . class  atmosphere resource event . class  broadcaster . class }  )  ;   }  catch  (   exception e )   {  logger . trace ( """" e )  ;   }   }  "
1413,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\AbstractBroadcasterProxy.java,b,"protected  future < o ject >  b (  object msg )  {  if  ( destroyed . get (  )  )   {  logger . warn ( "" this  broadcaster has been destroyed and cannot be used  {  } "" getid (  )  )  ;  return null ;   }  start (  )  ;   broadcaster future <  object >  f = new  broadcaster future <  object >  ( msg )  ;  try  {  outgoing broadcast ( msg )  ;   }  finally  {  future done ( f )  ;   }  return f ;   }  "
1414,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\AbstractBroadcasterProxy.java,broadcast,"@ override public  future <  object >    (  object msg  set <  atmosphere resource >  subset )  {  logger . warn ( "" this feature is not supported with  {  } "" subset . iterator (  )  . next (  )  . get broadcaster (  )  . get class (  )  . get name (  )  )  ;  return b ( msg )  ;   }  "
1415,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\AbstractBroadcasterProxy.java,broadcast received message,"protected void   (  object message )  {  try  {   object new msg = filter ( message )  ;  if  ( new msg  !  =  null )   {  push ( new  deliver ( new msg new  broadcaster future <  object >  ( new msg )  message )  )  ;   }   }  catch  (   throwable t )   {  logger . error ( ""failed to push message: ""  +  message t )  ;   }   }  "
1416,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\AbstractBroadcasterProxy.java,get broadcast handler,"@ override protected  runnable   (  )  {  return new  runnable (  )  {  public void run (  )  {  try  {  incoming broadcast (  )  ;   }  catch  (   throwable t )   {  logger . warn ( ""incoming broadcast  exception .   broadcaster will be broken unless reconfigured"" t )  ;  destroy (  )  ;  return ;   }   }   }   ;   }  "
1417,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\analytics\FocusPoint.java, focus point,public   (  string name  focus point parent focus point )  {  this ( name )  ;  this . parent focus point = parent focus point ;   }  
1418,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\analytics\FocusPoint.java,encode,"private  string   (  string name )  {  if  ( name  =  =  null )  name = """" ;  try  {  return url encoder . encode ( name ""utf - 8"" )  ;   }  catch  (   unsupported encoding exception e )   {  return name ;   }   }  "
1419,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\analytics\FocusPoint.java,get content title,private void   (  string buffer title buffer  focus point focus point )  {   focus point parent focus point = focus point . get parent focus point (  )  ;  if  ( parent focus point  !  =  null )   {  get content title ( title buffer parent focus point )  ;  title buffer . append ( title   separator )  ;   }  title buffer . append ( encode ( focus point . get name (  )  )  )  ;   }  
1420,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\analytics\FocusPoint.java,get contenturi,private void   (  string buffer contenturi buffer  focus point focus point )  {   focus point parent focu point = focus point . get parent focus point (  )  ;  if  ( parent focu point  !  =  null )   {  get contenturi ( contenturi buffer parent focu point )  ;   }  contenturi buffer . append ( uri   separator )  ;  contenturi buffer . append ( encode ( focus point . get name (  )  )  )  ;   }  
1421,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\analytics\FocusPoint.java,get name,public  string   (  )  {  return name ;   }  
1422,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\analytics\FocusPoint.java,get parent focus point,public  focus point   (  )  {  return parent focus point ;   }  
1423,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\analytics\FocusPoint.java,set parent track point,public void   (  focus point parent focus point )  {  this . parent focus point = parent focus point ;   }  
1424,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\analytics\HTTPGetMethod.java,http get method,"  (  )  {  if  ( ua name  =  =  null )   {  ua name = "" java / ""  +   system . get property ( ""java . version"" )  ;  os string =  system . get property ( ""os . arch"" )  ;  if  ( os string  =  =  null || os string . length (  )   <  1 )   {  os string = """" ;   }  else  {  os string +  = "" ;  "" ;  os string +  =  system . get property ( ""os . name"" )   +  "" ""  +   system . get property ( ""os . version"" )  ;   }   }   }  "
1425,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\analytics\HTTPGetMethod.java,get response code,protected int   (  httpurl connection url connection )  throws io exception  {  return url connection . get response code (  )  ;   }  
1426,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\analytics\HTTPGetMethod.java,log error,"private void   (  string error messsage )  {  logger . trace ( "" {  } "" error messsage )  ;   }  "
1427,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\analytics\HTTPGetMethod.java,log message,"private void   (  string message )  {  logger . trace ( "" {  } "" message )  ;   }  "
1428,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\analytics\HTTPGetMethod.java,openurl connection,private  httpurl connection   ( url url )  throws io exception  {  return  (  httpurl connection ) url . open connection (  )  ;   }  
1429,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\analytics\HTTPGetMethod.java,request,"public void   (  string url string )  {   httpurl connection url connection = null ;  try  {  url url = new url ( url string )  ;  url connection = openurl connection ( url )  ;  url connection . set instance follow redirects ( true )  ;  url connection . set request method ( get   method   name )  ;  url connection . set request property ( "" user - agent"" ua name  +  ""  ( ""  +  os string +  "" ) "" )  ;  logger . debug ( "" sending  server's information to  atmosphere's  google  analytics  {  }   {  } "" url string ua name  +  ""  ( ""  +  os string +  "" ) "" )  ;  url connection . connect (  )  ;  int response code = get response code ( url connection )  ;  if  ( response code  !  =   httpurl connection . http   ok )   {  log error ( ""j google analytics:  error tracking  url = ""  +  url string )  ;   }  else  {  log message ( success   message )  ;   }   }  catch  (   exception e )   {  log error ( e . get message (  )  )  ;   }  finally  {  if  ( url connection  !  =  null )   {  url connection . disconnect (  )  ;   }   }   }  "
1430,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\analytics\JGoogleAnalyticsTracker.java,j google analytics tracker,public   (  string app name  string app version  string google analytics tracking code )  {  this . url building strategy = new  google analytics   v1   url building strategy ( app name app version google analytics tracking code )  ;   }  
1431,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\analytics\JGoogleAnalyticsTracker.java,set url building strategy,public void   ( url building strategy url building strategy )  {  this . url building strategy = url building strategy ;   }  
1432,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\analytics\JGoogleAnalyticsTracker.java,track synchronously,public void   (  focus point focus point )  {  http request . request ( url building strategy . buildurl ( focus point )  )  ;   }  
1433,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\analytics\ModuleDetection.java,check,static boolean   (  string clazz )  {  try  {   class . for name ( clazz )  ;  return true ;   }  catch  (   class not found exception e )   {  return false ;   }   }  
1434,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\analytics\ModuleDetection.java,detect,"public final static  string   (  )  {  for  (   map .  entry <  string  string >  e : modules . entry set (  )  )   {  if  ( check ( e . get value (  )  )  )   {  return e . get key (  )  ;   }   }  return ""runtime"" ;   }  "
1435,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\annotation\ClassFileBuffer.java, class file buffer,"  ( final int initial capacity )  {  if  ( initial capacity  <  1 )   {  throw new  illegal argument exception ( ""initial capacity  <  1: ""  +  initial capacity )  ;   }  this . buffer = new byte[initial capacity] ;   }  "
1436,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\annotation\ClassFileBuffer.java,destroy,public void   (  )  {  buffer = null ;   }  
1437,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\annotation\ClassFileBuffer.java,read,private int   (  )  {  return buffer[pointer +  + ] & 0xff ;   }  
1438,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\annotation\ClassFileBuffer.java,read boolean,@ override public boolean   (  )  throws io exception  {  return read byte (  )   !  =  0 ;   }  
1439,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\annotation\ClassFileBuffer.java,read byte,@ override public byte   (  )  throws io exception  {  if  ( pointer  >  =  size )   {  throw new eof exception (  )  ;   }  return buffer[pointer +  + ] ;   }  
1440,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\annotation\ClassFileBuffer.java,read char,@ override public char   (  )  throws io exception  {  return  ( char ) read unsigned short (  )  ;   }  
1441,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\annotation\ClassFileBuffer.java,read double,@ override public double   (  )  throws io exception  {  return  double . long bits to double ( read long (  )  )  ;   }  
1442,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\annotation\ClassFileBuffer.java,read float,@ override public float   (  )  throws io exception  {  return  float . int bits to float ( read int (  )  )  ;   }  
1443,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\annotation\ClassFileBuffer.java,read from,public void   ( final  input stream in )  throws io exception  {  pointer = 0 ;  size = 0 ;  int n ;  do  {  n = in . read ( buffer size buffer . length  -  size )  ;  if  ( n  >  0 )   {  size +  = n ;   }  resize if needed (  )  ;   }  while  ( n  >  =  0 )  ;   }  
1444,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\annotation\ClassFileBuffer.java,read fully,@ override public void   ( final byte bytes[] final int offset final int length )  throws io exception  {  if  ( length  <  0 || offset  <  0 || offset  +  length  >  bytes . length )   {  throw new  index out of bounds exception (  )  ;   }  if  ( pointer  +  length  >  size )   {  throw new eof excep
1445,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\annotation\ClassFileBuffer.java,read int,@ override public int   (  )  throws io exception  {  if  ( pointer  +  4  >  size )   {  throw new eof exception (  )  ;   }  return  ( read (  )   <  <  24 )   +   ( read (  )   <  <  16 )   +   ( read (  )   <  <  8 )  +  read (  )  ;   }  
1446,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\annotation\ClassFileBuffer.java,read line,"@ override @ deprecated public  string   (  )  throws io exception  {  throw new  unsupported operation exception ( ""read line (  )  is deprecated and not supported"" )  ;   }  "
1447,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\annotation\ClassFileBuffer.java,read long,@ override public long   (  )  throws io exception  {  if  ( pointer  +  8  >  size )   {  throw new eof exception (  )  ;   }  return  ( read (  )   <  <  56 )   +   ( read (  )   <  <  48 )   +   ( read (  )   <  <  40 )  +   ( read (  )   <  <  32 )  +   ( read (  )   <  <  24 )  +   ( read (  )   <  <  16 )  +   ( read (  )   <  <  8 )  +  read (  )  ;   }  
1448,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\annotation\ClassFileBuffer.java,read short,@ override public short   (  )  throws io exception  {  return  ( short ) read unsigned short (  )  ;   }  
1449,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\annotation\ClassFileBuffer.java,readutf,@ override public  string   (  )  throws io exception  {  return  data input stream . readutf ( this )  ;   }  
1450,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\annotation\ClassFileBuffer.java,read unsigned byte,@ override public int   (  )  throws io exception  {  if  ( pointer  >  =  size )   {  throw new eof exception (  )  ;   }  return read (  )  ;   }  
1451,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\annotation\ClassFileBuffer.java,read unsigned short,@ override public int   (  )  throws io exception  {  if  ( pointer  +  2  >  size )   {  throw new eof exception (  )  ;   }  return  ( read (  )   <  <  8 )   +  read (  )  ;   }  
1452,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\annotation\ClassFileBuffer.java,resize if needed,private void   (  )  {  if  ( size  >  =  buffer . length )   {  final byte[] new buffer = new byte[buffer . length * 2] ;   system . arraycopy ( buffer 0 new buffer 0 buffer . length )  ;  buffer = new buffer ;   }   }  
1453,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\annotation\ClassFileBuffer.java,seek,"public void   ( final int position )  throws io exception  {  if  ( position  <  0 )   {  throw new  illegal argument exception ( ""position  <  0: ""  +  position )  ;   }  if  ( position  >  size )   {  throw new eof exception (  )  ;   }  this . pointer = position ;   }  "
1454,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\annotation\ClassFileBuffer.java,size,public int   (  )  {  return size ;   }  
1455,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\annotation\ClassFileBuffer.java,skip bytes,@ override public int   ( final int n )  throws io exception  {  seek ( pointer  +  n )  ;  return n ;   }  
1456,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\annotation\ClassFileIterator.java, class file iterator,  ( final  input stream[] files or directories final  string[] pkg name filter )  throws io exception  {  this . file iterator = null ;  this . pkg name filter = pkg name filter ;  this . input stream iterator = new  input stream iterator ( files or directories )  ;   }  
1457,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\annotation\ClassFileIterator.java,class path,"private static  file[]   (  )  {  final  string[] file names =  system . get property ( ""java . class . path"" )  . split (  file . path separator )  ;  final  file[] files = new  file[file names . length] ;  for  ( int i = 0 ;  i  <  files . length ;   +  + i )   {  files[i] = new  file ( file names[i] )  ;   }  return files ;   }  "
1458,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\annotation\ClassFileIterator.java,ends with ignore case,private static boolean   ( final  string value final  string suffix )  {  final int n = suffix . length (  )  ;  return value . region matches ( true value . length (  )   -  n suffix 0 n )  ;   }  
1459,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\annotation\ClassFileIterator.java,get name,public  string   (  )  {  return zip iterator  =  =  null  ?  file iterator . get file (  )  . get path (  )  : zip iterator . get entry (  )  . get name (  )  ;   }  
1460,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\annotation\ClassFileIterator.java,is file,public boolean   (  )  {  return is file ;   }  
1461,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\annotation\ClassFileIterator.java,is zip file,private boolean   (  file file )  throws io exception  {   data input stream in = null ;  try  {  in = new  data input stream ( new  file input stream ( file )  )  ;  int n = in . read int (  )  ;  in . close (  )  ;  return n  =  =  0x504b0304 ;   }  catch  (   exception ex )   {  if  ( in  !  =  null )  in . close (  )  ;  return false ;   }  finally  {  if  ( in  !  =  null )   {  try  {  in . close (  )  ;   }  catch  (  io exception ex )   {   }   }   }   }  
1462,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\annotation\ClassFileIterator.java,next,"public  input stream   (  )  throws io exception  {  try  {  while  ( true )   {  if  ( file iterator  !  =  null )   {  if  ( zip iterator  =  =  null )   {  final  file file = file iterator . next (  )  ;  if  ( file  =  =  null )   {  return null ;   }  else  {  final  string name = file . get name (  )  ;  if  ( name . ends with ( "" . class"" )  )   {  is file = true ;  return new  file input stream ( file )  ;   }  else if  ( file iterator . is root file (  )  &&  ( ends with ignore case ( name "" . jar"" )  || is zip file ( file )  )  && file . exists (  )  )   {  try  {  zip iterator = new  zip file iterator ( new  zip file ( file )  pkg name filter )  ;   }  catch  (   exception ex )   {  logger . debug ( "" unable to construct file  {  } "" file )  ;  return null ;   }   }   }   }  else  {  final  input stream is = zip iterator . next (  )  ;  if  ( is  =  =  null )   {  zip iterator = null ;   }  else  {  is file = false ;  return is ;   }   }   }  else  {  return input stream iterator . next (  )  ;   }   }   }  catch  (   exception ex )   {  logger . error ( "" unable to scan classes"" ex )  ;  return null ;   }   }  "
1463,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\annotation\AnnotationDetector.java, annotation detector,"public   ( final  reporter reporter )  {  final  class <  ?  extends  annotation > [] a = reporter . annotations (  )  ;  annotations = new  hash map <  string  class <  ?  extends  annotation >  >  ( a . length )  ;  for  ( int i = 0 ;  i  <  a . length ;   +  + i )   {  annotations . put ( ""l""  +  a[i] . get name (  )  . replace ( ' . ' ' / ' )   +  "" ; "" a[i] )  ;   }  if  ( reporter instanceof  type reporter )   {  type reporter =  (  type reporter ) reporter ;   }  if  ( reporter instanceof  field reporter )   {  field reporter =  (  field reporter ) reporter ;   }  if  ( reporter instanceof  method reporter )   {  method reporter =  (  method reporter ) reporter ;   }  if  ( type reporter  =  =  null && field reporter  =  =  null && method reporter  =  =  null )   {  throw new  assertion error ( "" no reporter defined"" )  ;   }   }  "
1464,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\annotation\InputStreamIterator.java, input stream iterator,public   ( final  input stream .  .  .  files or directories )  {  add reverse ( files or directories )  ;  root count = stack . size (  )  ;   }  
1465,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\annotation\InputStreamIterator.java,add reverse,private void   ( final  input stream[] files )  {  for  ( int i = files . length  -  1 ;  i  >  =  0 ;   -  - i )   {  stack . add ( files[i] )  ;   }   }  
1466,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\annotation\InputStreamIterator.java,next,public  input stream   (  )  throws io exception  {  if  ( stack . is empty (  )  )   {  current = null ;  return null ;   }  else  {  current = stack . remove last (  )  ;  return current ;   }   }  
1467,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\analytics\GoogleAnalytics_v1_URLBuildingStrategy.java, google analytics   v   url building strategy,public   (  string app name  string app version  string google analytics tracking code )  {  this . google analytics tracking code = google analytics tracking code ;  this . app focus point = new  focus point ( app version new  focus point ( app name )  )  ;   }  
1468,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\analytics\GoogleAnalytics_v1_URLBuildingStrategy.java,buildurl,"public  string   (  focus point focus point )  {  int cookie = random . next int (  )  ;  int random value = random . next int ( 2147483647 )   -  1 ;  long now = new  date (  )  . get time (  )  ;  focus point . set parent track point ( app focus point )  ;   string builder url = new  string builder ( tracking   url    prefix )  ;  url . append ( "" ? utmwv = 1"" )  ;  url . append ( ""&utmn = ""  +  random . next int (  )  )  ;  url . append ( ""&utmcs = utf - 8"" )  ;  url . append ( ""&utmsr = 1440x900"" )  ;  url . append ( ""&utmsc = 32 - bit"" )  ;  url . append ( ""&utmul = en - us"" )  ;  url . append ( ""&utmje = 1"" )  ;  url . append ( ""&utmfl = 9 . 0%20%20r28"" )  ;  url . append ( ""&utmcr = 1"" )  ;  url . append ( ""&utmdt = ""  +  focus point . get content title (  )  )  ;  url . append ( ""&utmhn = ""  +  host name )  ;  url . append ( ""&utmr = ""  +  refererurl )  ;  url . append ( ""&utmp = ""  +  focus point . get contenturi (  )  )  ;  url . append ( ""&utmac = ""  +  google analytics tracking code )  ;  url . append ( ""&utmcc =       utma%3d'""  +  cookie  +  "" . "" +  random value +  "" . "" +  now +  "" . "" +  now +  "" . "" +  now +  "" . 2%3b%2b      utmb%3d"" +  cookie +  ""%3b%2b      utmc%3d"" +  cookie +  ""%3b%2b      utmz%3d"" +  cookie +  "" . "" +  now +  "" . 2 . 2 . utmccn%3d ( direct ) %7 cutmcsr%3d ( direct ) %7 cutmcmd%3d ( none ) %3b%2b      utmv%3d"" +  cookie )  ;  return url . to string (  )  ;   }  "
1469,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\analytics\GoogleAnalytics_v1_URLBuildingStrategy.java,set refererurl,public void   (  string refererurl )  {  this . refererurl = refererurl ;   }  
1470,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\annotation\FileIterator.java, file iterator,public   ( final  file .  .  .  files or directories )  {  add reverse ( files or directories )  ;  root count = stack . size (  )  ;   }  
1471,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\annotation\FileIterator.java,add reverse,private void   ( final  file[] files )  {  if  ( files  =  =  null )  return ;  for  ( int i = files . length  -  1 ;  i  >  =  0 ;   -  - i )   {  stack . add ( files[i] )  ;   }   }  
1472,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\annotation\FileIterator.java,get file,public  file   (  )  {  return current ;   }  
1473,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\annotation\FileIterator.java,is root file,public boolean   (  )  {  if  ( current  =  =  null )   {  throw new  no such element exception (  )  ;   }  return stack . size (  )   <  root count ;   }  
1474,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\annotation\FileIterator.java,next,public  file   (  )  throws io exception  {  if  ( stack . is empty (  )  )   {  current = null ;  return null ;   }  else  {  current = stack . remove last (  )  ;  if  ( current . is directory (  )  )   {  if  ( stack . size (  )   <  root count )   {  root count = stack . size (  )  ;   }  add reverse ( current . list files (  )  )  ;  return next (  )  ;   }  else  {  return current ;   }   }   }  
1475,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\AtmosphereFilterChain.java,add filter,"public void   (  filter config impl filter config )  {  if  ( filter config . get filter (  )   =  =  null )   {  throw new  null pointer exception ( "" filter is null"" )  ;   }  if  ( n  =  =  filters . length )   {   filter config impl[] new filters = new  filter config impl[n  +  increment] ;   system . arraycopy ( filters 0 new filters 0 n )  ;  filters = new filters ;   }  filters[n +  + ] = filter config ;   }  "
1476,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\AtmosphereFilterChain.java,destroy,public void   (  )  {  if  ( n  >  0 && filters  !  =  null )   {  for  ( int i = 0 ;  i  <  filters . length ;  i +  +  )   {  if  ( filters[i]  !  =  null )   {  filters[i] . recycle (  )  ;   }   }  filters = null ;   }  if  ( servlet  !  =  null )   {  servlet . destroy (  )  ;   }   }  
1477,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\AtmosphereFilterChain.java,do filter,"public void   (  servlet request request  servlet response response )  throws io exception   servlet exception  {   atomic integer pos =  (  (  atomic integer ) request . get attribute ( ""pos"" )  )  ;  if  ( pos . get (  )   <  n )   {   filter config impl filter config = filters[pos . get and increment (  ) ] ;   filter filter = null ;  try  {  filter = filter config . get filter (  )  ;  filter . do filter ( request response this )  ;   }  catch  (  io exception e )   {  throw e ;   }  catch  (   servlet exception e )   {  throw e ;   }  catch  (   runtime exception e )   {  throw e ;   }  catch  (   throwable e )   {  throw new  servlet exception ( "" throwable"" e )  ;   }  return ;   }  try  {  if  ( servlet  !  =  null )   {  servlet . service ( request response )  ;   }  else  {   request dispatcher rd = config impl . get servlet context (  )  . get named dispatcher ( ""default"" )  ;  if  ( rd  =  =  null )   {  throw new  servlet exception ( "" no  servlet  found"" )  ;   }  rd . forward ( request response )  ;   }   }  catch  (  io exception e )   {  throw e ;   }  catch  (   servlet exception e )   {  throw e ;   }  catch  (   runtime exception e )   {  throw e ;   }  catch  (   throwable e )   {  throw new  servlet exception ( "" throwable"" e )  ;   }   }  "
1478,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\AtmosphereFilterChain.java,get filter,public  filter config impl   ( int i )  {  return filters[i] ;   }  
1479,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\AtmosphereFilterChain.java,get servlet,public  servlet   (  )  {  return servlet ;   }  
1480,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\AtmosphereFilterChain.java,get servlet config,public  servlet config   (  )  {  return config impl ;   }  
1481,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\AtmosphereFilterChain.java,init,public void   (  )  throws  servlet exception  {  for  (   filter config impl f : filters )   {  if  ( f  !  =  null )   {  f . get filter (  )  . init ( f )  ;   }   }  if  ( servlet  !  =  null )   {  servlet . init ( config impl )  ;   }   }  
1482,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\AtmosphereFilterChain.java,invoke filter chain,"public void   (  servlet request request  servlet response response )  throws io exception   servlet exception  {  request . set attribute ( ""pos"" new  atomic integer ( 0 )  )  ;  do filter ( request response )  ;   }  "
1483,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\AtmosphereFilterChain.java,set servlet,public void   (  servlet config config impl  servlet servlet )  {  this . config impl = config impl ;  this . servlet = servlet ;   }  
1484,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\annotation\ZipFileIterator.java, zip file iterator,  ( final  zip file zip file final  string[] entry name filter )  throws io exception  {  this . zip file = zip file ;  this . entry name filter = entry name filter ;  this . entries = zip file . entries (  )  ;   }  
1485,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\annotation\ZipFileIterator.java,accept,private boolean   ( final  zip entry entry )  {  if  ( entry . is directory (  )  )   {  return false ;   }  if  ( entry name filter  =  =  null )   {  return true ;   }  for  (  final  string filter : entry name filter )   {  if  ( entry . get name (  )  . starts with ( filter )  )   {  return true ;   }   }  return false ;   }  
1486,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\annotation\ZipFileIterator.java,get entry,public  zip entry   (  )  {  return current ;   }  
1487,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\annotation\ZipFileIterator.java,next,public  input stream   (  )  throws io exception  {  while  ( entries . has more elements (  )  )   {  current = entries . next element (  )  ;  if  ( accept ( current )  )   {  return zip file . get input stream ( current )  ;   }   }  try  {  zip file . close (  )  ;   }  catch  (  io exception ex )   {   }  return null ;   }  
1488,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\AtmosphereConfigReader.java,get instance,public static  atmosphere config reader   (  )  {  return instance ;   }  
1489,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\AtmosphereConfigReader.java,parse,"private  atmosphere config   (  atmosphere config config  document document )  {   element element = document . get document element (  )  ;   node list atmosphere handlers = element . get elements by tag name ( ""atmosphere - handler"" )  ;  for  ( int i = 0 ;  i  <  atmosphere handlers . get length (  )  ;  i +  +  )   {   atmosphere handler config atmo handler = new  atmosphere handler config (  )  ;   node root = atmosphere handlers . item ( i )  ;  for  ( int j = 0 ;  j  <  root . get attributes (  )  . get length (  )  ;  j +  +  )   {   node attribute = root . get attributes (  )  . item ( j )  ;  if  ( attribute . get node name (  )  . equals ( ""support - session"" )  )   {  atmo handler . set support session ( attribute . get node value (  )  )  ;   }  else if  ( attribute . get node name (  )  . equals ( ""context - root"" )  )   {  atmo handler . set context root ( attribute . get node value (  )  )  ;   }  else if  ( attribute . get node name (  )  . equals ( ""class - name"" )  )   {  atmo handler . set class name ( attribute . get node value (  )  )  ;   }  else if  ( attribute . get node name (  )  . equals ( ""broadcaster"" )  )   {  atmo handler . set broadcaster ( attribute . get node value (  )  )  ;   }  else if  ( attribute . get node name (  )  . equals ( ""broadcaster cache"" )  )   {  atmo handler . set broadcaster cache ( attribute . get node value (  )  )  ;   }  else if  ( attribute . get node name (  )  . equals ( ""broadcast filter classes"" )  )   {   string[] values = attribute . get node value (  )  . split ( "" "" )  ;  for  (   string value : values )   {  atmo handler . get broadcast filter classes (  )  . add ( value )  ;   }   }  else if  ( attribute . get node name (  )  . equals ( ""comet - support"" )  )   {  atmo handler . set comet support ( attribute . get node value (  )  )  ;   }  else if  ( attribute . get node name (  )  . equals ( ""interceptor classes"" )  )   {   string[] values = attribute . get node value (  )  . split ( "" "" )  ;  for  (   string value : values )   {  atmo handler . get atmosphere interceptor classes (  )  . add ( value )  ;   }   }   }   node list list = root . get child nodes (  )  ;  for  ( int j = 0 ;  j  <  list . get length (  )  ;  j +  +  )   {   node n = list . item ( j )  ;  if  ( n . get node name (  )  . equals ( ""property"" )  )   {   string param = n . get attributes (  )  . get named item ( ""name"" )  . get node value (  )  ;   string value = n . get attributes (  )  . get named item ( ""value"" )  . get node value (  )  ;  atmo handler . get properties (  )  . add ( new  atmosphere handler property ( param value )  )  ;   }  else if  ( n . get node name (  )  . equals ( ""application config"" )  )   {   string param = null ;   string value = null ;  for  ( int k = 0 ;  k  <  n . get child nodes (  )  . get length (  )  ;  k +  +  )   {   node n2 = n . get child nodes (  )  . item ( k )  ;  if  ( n2 . get node name (  )  . equals ( ""param - name"" )  )   {  param = n2 . get first child (  )  . get node value (  )  ;   }  else if  ( n2 . get node name (  )  . equals ( ""param - value"" )  )   {  if  ( n2  !  =  null )   {  value = n2 . get first child (  )  . get node value (  )  ;   }   }   }  if  ( param  !  =  null )   {  atmo handler . get application config (  )  . add ( new  application configuration ( param value )  )  ;   }   }  else if  ( n . get node name (  )  . equals ( ""framework config"" )  )   {   string param = null ;   string value = null ;  for  ( int k = 0 ;  k  <  n . get child nodes (  )  . get length (  )  ;  k +  +  )   {   node n2 = n . get child nodes (  )  . item ( k )  ;  if  ( n2 . get node name (  )  . equals ( ""param - name"" )  )   {  param = n2 . get first child (  )  . get node value (  )  ;   }  else if  ( n2 . get node name (  )  . equals ( ""param - value"" )  )   {  if  ( n2  !  =  null )   {  value = n2 . get first child (  )  . get node value (  )  ;   }   }   }  if  ( param  !  =  null )   {  atmo handler . get framework config (  )  . add ( new  framework configuration ( param value )  )  ;   }   }   }  config . get atmosphere handler config (  )  . add ( atmo handler )  ;   }  return config ;   }  "
1490,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\ByteArrayAsyncWriter.java,close,@ override public void   (  atmosphere response r )  {  o . reset (  )  ;   }  
1491,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\ByteArrayAsyncWriter.java,stream,public  byte array output stream   (  )  {  return o ;   }  
1492,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\ByteArrayAsyncWriter.java,write,@ override public  asyncio writer   (  atmosphere response r byte[] data int offset int length )  throws io exception  {  o . write ( data offset length )  ;  return this ;   }  
1493,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\ChunkConcatReaderPool.java, chunk concat reader,public   (  string key )  {  this . key = key ;   }  
1494,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\ChunkConcatReaderPool.java,add chunk,void   (  reader chunk boolean continued )  {  synchronized  ( readers )   {  readers . add last ( chunk )  ;  readers . notify all (  )  ;  this . continued = continued ;   }   }  
1495,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\ChunkConcatReaderPool.java,close,@ override public void   (  )  throws io exception  {  if  ( closed )   {  return ;   }  for  (   reader r : readers )   {  try  {  r . close (  )  ;   }  catch  (  io exception e )   {   }   }  release reader ( key )  ;  closed = true ;  synchronized  ( readers )   {  readers . notify all (  )  ;   }   }  
1496,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\ChunkConcatReaderPool.java,get reader,public  reader   (  string key boolean create )  {   chunk concat reader reader = readers pool . get ( key )  ;  if  ( create && reader  =  =  null )   {  reader = new  chunk concat reader ( key )  ;  readers pool . put ( key reader )  ;   }  return reader ;   }  
1497,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\ChunkConcatReaderPool.java,get readers pool, map <  string  chunk concat reader >    (  )  {  return readers pool ;   }  
1498,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\ChunkConcatReaderPool.java,get timeout,public long   (  )  {  return timeout ;   }  
1499,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\ChunkConcatReaderPool.java,read,@ override public int   ( char[] cbuf int off int len )  throws io exception  {  int count = 0 ;  while  (  ! closed && count  <  len )   {  if  ( readers . is empty (  )  )   {  if  ( continued )   {  if  ( count  >  0 )   {  break ;   }  synchronized  ( readers )   {  if  (  ! readers . is empty (  )  )   {  continue ;   }  try  { 
1500,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\ChunkConcatReaderPool.java,ready,@ override public boolean   (  )  throws io exception  {  if  ( readers . is empty (  )  )   {  return false ;   }  return readers . get first (  )  . ready (  )  ;   }  
1501,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\ChunkConcatReaderPool.java,release reader,void   (  string key )  {  readers pool . remove ( key )  ;   }  
1502,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\ChunkConcatReaderPool.java,set timeout,public void   ( long timeout )  {  this . timeout = timeout ;   }  
1503,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\DefaultEndpointMapper.java,compute path,public  string   (  atmosphere request req )  {  return  utils . path info ( req )  ;   }  
1504,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\DefaultEndpointMapper.java,map,"@ override public u   (  string path  map <  string u >  handlers )  {  if  ( path  =  =  null || path . is empty (  )  )   {  path = "" / "" ;   }  u handler = match ( path handlers )  ;  if  ( handler  =  =  null )   {  handler = match ( path  +   ( path . ends with ( "" / "" )   ?  ""all"" : "" / all"" )  handlers )  ;  if  ( handler  =  =  null )   { "
1505,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\DefaultEndpointMapper.java,match,"protected u   (  string path  map <  string u >  handlers )  {  u handler = handlers . get ( path )  ;  if  ( handler  =  =  null )   {  final  map <  string  string >  m = new  hash map <  string  string >  (  )  ;  for  (   map .  entry <  string u >  e : handlers . entry set (  )  )   {   uri template t = null ;  try  {  t = new  uri template ( e . get key (  )  )  ;  logger . trace ( "" trying to map  {  }  to  {  } "" t path )  ;  if  ( t . match ( path m )  )   {  handler = e . get value (  )  ;  logger . trace ( "" mapped  {  }  to  {  } "" t e . get value (  )  )  ;  break ;   }   }  finally  {  if  ( t  !  =  null )  t . destroy (  )  ;   }   }   }  return handler ;   }  "
1506,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\CookieUtil.java, cookie decoder,protected   ( boolean strict )  {  this . strict = strict ;   }  
1507,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\CookieUtil.java, server cookie decoder,private   ( boolean strict )  {  super ( strict )  ;   }  
1508,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\CookieUtil.java,already quoted,"public static boolean   (  string value )  {  if  ( value  =  =  null || value . length (  )   <  2 )   {  return false ;   }  return  ( value . char at ( 0 )   =  =  '\""' && value . char at ( value . length (  )   -  1 )   =  =  '\""' )  ;   }  "
1509,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\CookieUtil.java,decode,public void   (  string header  set <  cookie >  cookies )  {  final int header len = header . length (  )  ;  if  ( header len  =  =  0 )   {  return ;   }  int i = 0 ;  boolean rfc2965 style = false ;  if  ( header . region matches ( true 0 rfc2965   version 0 rfc2965   version . length (  )  )  )   {  i = header . index of ( ' ; ' )   +  1 ;  rfc2965 style = true ;   }  loop: for  (  ;   ;   )   {  for  (  ;   ;   )   {  if  ( i  =  =  header len )   {  break loop ;   }  char c = header . char at ( i )  ;  if  ( c  =  =  '\t' || c  =  =  '\n' || c  =  =  0x0b || c  =  =  '\f' || c  =  =  '\r' || c  =  =  ' ' || c  =  =  ' ' || c  =  =  ' ; ' )   {  i +  +  ;  continue ;   }  break ;   }  int name begin = i ;  int name end = i ;  int value begin =  - 1 ;  int value end =  - 1 ;  if  ( i  !  =  header len )   {  key val loop: for  (  ;   ;   )   {  char cur char = header . char at ( i )  ;  if  ( cur char  =  =  ' ; ' )   {  name end = i ;  value begin = value end =  - 1 ;  break key val loop ;   }  else if  ( cur char  =  =  ' = ' )   {  name end = i ;  i +  +  ;  if  ( i  =  =  header len )   {  value begin = value end = 0 ;  break key val loop ;   }  value begin = i ;  int semi pos = header . index of ( ' ; ' i )  ;  value end = i = semi pos  >  0  ?  semi pos : header len ;  break key val loop ;   }  else  {  i +  +  ;   }  if  ( i  =  =  header len )   {  name end = header len ;  value begin = value end =  - 1 ;  break ;   }   }   }  if  ( rfc2965 style &&  ( header . region matches ( name begin rfc2965   path 0 rfc2965   path . length (  )  )  || header . region matches ( name begin rfc2965   domain 0 rfc2965   domain . length (  )  )  || header . region matches ( name begin rfc2965   port 0 rfc2965   port . length (  )  )  )  )   {  continue ;   }   cookie cookie = init cookie ( header name begin name end value begin value end )  ;  if  ( cookie  !  =  null )   {  cookies . add ( cookie )  ;   }   }   }  
1510,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\CookieUtil.java,escape double quotes,"private static  string   (  string s int begin index int end index )  {  if  ( s  =  =  null || s . length (  )   =  =  0 || s . index of ( '""' )   =  =   - 1 )   {  return s ;   }   string builder b = new  string builder (  )  ;  for  ( int i = begin index ;  i  <  end index ;  i +  +  )   {  char c = s . char at ( i )  ;  if  ( c  =  =  '\\' )   {  b . append ( c )  ;  if  (  +  + i  >  =  end index )   {  throw new  illegal argument exception ( "" invalid escape character in cookie value . "" )  ;   }  b . append ( s . char at ( i )  )  ;   }  else if  ( c  =  =  '""' )   {  b . append ( '\\' )  . append ( '""' )  ;   }  else  {  b . append ( c )  ;   }   }  return b . to string (  )  ;   }  "
1511,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\CookieUtil.java,first invalid cookie name octet,static int   (  char sequence cs )  {  return first invalid octet ( cs valid   cookie   name   octets )  ;   }  
1512,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\CookieUtil.java,first invalid cookie value octet,static int   (  char sequence cs )  {  return first invalid octet ( cs valid   cookie   value   octets )  ;   }  
1513,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\CookieUtil.java,first invalid octet,static int   (  char sequence cs  bit set bits )  {  for  ( int i = 0 ;  i  <  cs . length (  )  ;  i +  +  )   {  char c = cs . char at ( i )  ;  if  (  ! bits . get ( c )  )   {  return i ;   }   }  return  - 1 ;   }  
1514,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\CookieUtil.java,init cookie,protected  cookie   (  string header int name begin int name end int value begin int value end )  {  if  ( name begin  =  =   - 1 || name begin  =  =  name end )   {  return null ;   }  if  ( value begin  =  =   - 1 )   {  return null ;   }   char sequence wrapped value =  char buffer . wrap ( header value begin value end )  ;   char sequence unwrapped value = unwrap value ( wrapped value )  ;  if  ( unwrapped value  =  =  null )   {  return null ;   }  final  string name = header . substring ( name begin name end )  ;  if  ( strict && first invalid cookie name octet ( name )   >  =  0 )   {  return null ;   }  if  ( strict && first invalid cookie value octet ( unwrapped value )   >  =  0 )   {  return null ;   }   cookie cookie = new  cookie ( name unwrapped value . to string (  )  )  ;  return cookie ;   }  
1515,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\CookieUtil.java,is token,public static boolean   (  string value )  {  if  ( value  =  =  null )  return true ;  int len = value . length (  )  ;  for  ( int i = 0 ;  i  <  len ;  i +  +  )   {  char c = value . char at ( i )  ;  if  ( c  <  0x20 || c  >  =  0x7f || tspecials . index of ( c )   !  =   - 1 )  return false ;   }  return true ;   }  
1516,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\CookieUtil.java,maybe quote,"private static void   (  string buffer buf  string value )  {  if  ( value  =  =  null || value . length (  )   =  =  0 )   {  buf . append ( ""\""\"""" )  ;   }  else if  ( already quoted ( value )  )   {  buf . append ( '""' )  ;  buf . append ( escape double quotes ( value 1 value . length (  )   -  1 )  )  ;  buf . append ( '""' )  ;   }  else  {  buf . append ( value )  ;   }   }  "
1517,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\CookieUtil.java,to string,"public static  string   (  cookie c )  {   string buffer buf = new  string buffer (  )  ;  buf . append ( c . get name (  )  )  ;  buf . append ( "" = "" )  ;  int new version = c . get version (  )  ;  maybe quote ( buf c . get value (  )  )  ;  if  ( new version  =  =  1 )   {  buf . append ( "" ;   version = 1"" )  ;  if  ( c . get comment (  )   !  =  null )   {  buf . append ( "" ;   comment = "" )  ;  maybe quote ( buf c . get comment (  )  )  ;   }   }  if  ( c . get domain (  )   !  =  null )   {  buf . append ( "" ;   domain = "" )  ;  maybe quote ( buf c . get domain (  )  )  ;   }  if  ( c . get max age (  )   >  =  0 )   {  if  ( new version  >  0 )   {  buf . append ( "" ;   max -  age = "" )  ;  buf . append ( c . get max age (  )  )  ;   }  if  ( new version  =  =  0 )   {  buf . append ( "" ;   expires = "" )  ;  if  ( c . get max age (  )   =  =  0 )   {  buf . append ( ancient date )  ;   }  else  {   date format df = new  simple date format ( old   cookie   pattern  locale . us )  ;  df . set time zone (  time zone . get time zone ( ""gmt"" )  )  ;  df . format ( new  date (  system . current time millis (  )   +  c . get max age (  )  * 1000l )  buf new  field position ( 0 )  )  ;   }   }   }  if  ( c . get path (  )   !  =  null )   {  buf . append ( "" ;   path = "" )  ;  maybe quote ( buf c . get path (  )  )  ;   }  if  ( c . get secure (  )  )   {  buf . append ( "" ;   secure"" )  ;   }  if  ( c . is http only (  )  )   {  buf . append ( "" ;   http only"" )  ;   }  return buf . to string (  )  ;   }  "
1518,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\CookieUtil.java,unwrap value,"static  char sequence   (  char sequence cs )  {  final int len = cs . length (  )  ;  if  ( len  >  0 && cs . char at ( 0 )   =  =  '""' )   {  if  ( len  >  =  2 && cs . char at ( len  -  1 )   =  =  '""' )   {  return len  =  =  2  ?  """" : cs . sub sequence ( 1 len  -  1 )  ;   }  else  {  return null ;   }   }  return cs ;   }  "
1519,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\CookieUtil.java,valid cookie attribute value octets,private static  bit set   (  )  {   bit set bits = new  bit set (  )  ;  for  ( int i = 32 ;  i  <  127 ;  i +  +  )   {  bits . set ( i )  ;   }  bits . set ( ' ; ' false )  ;  return bits ;   }  
1520,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\CookieUtil.java,valid cookie name octets,"private static  bit set   (  )  {   bit set bits = new  bit set (  )  ;  for  ( int i = 32 ;  i  <  127 ;  i +  +  )   {  bits . set ( i )  ;   }  int[] separators = new int[] { ' ( ' ' ) ' ' < ' ' > ' '@' ' ' ' ; ' ':' '\\' '""' ' / ' '[' ']' ' ? ' ' = ' ' { ' ' } ' ' ' '\t' }  ;  for  (  int separator : separators )   {  bits . set ( separator false )  ;   }  return bits ;   }  "
1521,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\CookieUtil.java,valid cookie value octets,private static  bit set   (  )  {   bit set bits = new  bit set (  )  ;  bits . set ( 0x21 )  ;  for  ( int i = 0x23 ;  i  <  =  0x2b ;  i +  +  )   {  bits . set ( i )  ;   }  for  ( int i = 0x2d ;  i  <  =  0x3a ;  i +  +  )   {  bits . set ( i )  ;   }  for  ( int i = 0x3c ;  i  <  =  0x5b ;  i +  +  )   {  bits . set ( i )  ;   }  for  ( int i = 0x5d ;  i  <  =  0x7e ;  i +  +  )   {  bits . set ( i )  ;   }  return bits ;   }  
1522,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\CookieUtil.java,validate attribute value,"static  string   (  string name  string value )  {  if  ( value  =  =  null )   {  return null ;   }  value = value . trim (  )  ;  if  ( value . is empty (  )  )   {  return null ;   }  int i = first invalid octet ( value valid   cookie   attribute   value   octets )  ;  if  ( i  !  =   - 1 )   {  throw new  illegal argument exception ( name  +  "" contains the prohibited characters: ""  +  value . char at ( i )  )  ;   }  return value ;   }  "
1523,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\ExcludeSessionBroadcaster.java,broadcast,public  future <  object >    (  object msg  http session s )  {  if  ( destroyed . get (  )  )   {  return future done ( msg )  ;   }   set <  atmosphere resource >  subset = new  hash set <  atmosphere resource >  (  )  ;  subset . add all ( resources )  ;  for  (   atmosphere resource r : resources )   {  if  (  ! r . get atmosphere resource event (  )  . is cancelled (  )  && s . equals ( r . get request (  )  . get session (  )  )  )   {  subset . remove ( r )  ;   }   }  start (  )  ;   object new msg = filter ( msg )  ;  if  ( new msg  =  =  null )   {  return future done ( msg )  ;   }   broadcaster future <  object >  f = new  broadcaster future <  object >  ( new msg subset . size (  )  )  ;  dispatch messages ( new  deliver ( new msg subset f msg )  )  ;  return f ;   }  
1524,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\ExcludeSessionBroadcaster.java,initialize,public  broadcaster   (  string id  atmosphere config config )  {  return super . initialize ( id config )  ;   }  
1525,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\DefaultUUIDProvider.java,generate uuid,@ override public  string   (  )  {  return uuid . randomuuid (  )  . to string (  )  ;   }  
1526,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\FakeHttpSession.java, fake http session,public   (  http session session )  {  this ( session . get id (  )  session . get servlet context (  )  session . get last accessed time (  )  session . get max inactive interval (  )  )  ;  copy attributes ( session )  ;   }  
1527,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\FakeHttpSession.java,copy attributes,public  fake http session   (  http session http session )  {   enumeration <  string >  e = http session . get attribute names (  )  ;   string k ;  while  ( e . has more elements (  )  )   {  k = e . next element (  )  ;  if  ( k  =  =  null )  continue ;   object o = http session . get attribute ( k )  ;  if  ( o  =  =  null )  continue ;  attributes . put ( k o )  ;   }  return this ;   }  
1528,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\FakeHttpSession.java,destroy,public void   (  )  {  attributes . clear (  )  ;   }  
1529,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\FakeHttpSession.java,get attribute,@ override public  object   (  string name )  {  if  (  ! valid . get (  )  )  throw new  illegal state exception (  )  ;  return attributes . get ( name )  ;   }  
1530,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\FakeHttpSession.java,get attribute names,@ override public  enumeration <  string >    (  )  {  if  (  ! valid . get (  )  )  throw new  illegal state exception (  )  ;  return attributes . keys (  )  ;   }  
1531,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\FakeHttpSession.java,get creation time,@ override public long   (  )  {  if  (  ! valid . get (  )  )  throw new  illegal state exception (  )  ;  return creation time ;   }  
1532,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\FakeHttpSession.java,get id,@ override public  string   (  )  {  if  (  ! valid . get (  )  )  throw new  illegal state exception (  )  ;  return session id ;   }  
1533,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\FakeHttpSession.java,get last accessed time,@ override public long   (  )  {  if  (  ! valid . get (  )  )  throw new  illegal state exception (  )  ;  return 0 ;   }  
1534,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\FakeHttpSession.java,get max inactive interval,@ override public int   (  )  {  return max inactive interval ;   }  
1535,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\FakeHttpSession.java,get servlet context,@ override public  servlet context   (  )  {  return servlet context ;   }  
1536,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\FakeHttpSession.java,get session context,@ override public  http session context   (  )  {  return null ;   }  
1537,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\FakeHttpSession.java,get value,@ override public  object   (  string name )  {  if  (  ! valid . get (  )  )  throw new  illegal state exception (  )  ;  return attributes . get ( name )  ;   }  
1538,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\FakeHttpSession.java,get value names,@ override public  string[]   (  )  {  if  (  ! valid . get (  )  )  throw new  illegal state exception (  )  ;  return  (  string[] )  collections . list ( attributes . keys (  )  )  . to array (  )  ;   }  
1539,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\FakeHttpSession.java,invalidate,@ override public void   (  )  {  if  (  ! valid . get (  )  )  throw new  illegal state exception (  )  ;  valid . set ( false )  ;   }  
1540,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\FakeHttpSession.java,is new,@ override public boolean   (  )  {  if  (  ! valid . get (  )  )  throw new  illegal state exception (  )  ;  return false ;   }  
1541,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\FakeHttpSession.java,put value,@ override public void   (  string name  object value )  {  if  (  ! valid . get (  )  )  throw new  illegal state exception (  )  ;  attributes . put ( name value )  ;   }  
1542,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\FakeHttpSession.java,remove attribute,@ override public void   (  string name )  {  if  (  ! valid . get (  )  )  throw new  illegal state exception (  )  ;  attributes . remove ( name )  ;   }  
1543,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\FakeHttpSession.java,remove value,@ override public void   (  string name )  {  if  (  ! valid . get (  )  )  throw new  illegal state exception (  )  ;  attributes . remove ( name )  ;   }  
1544,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\FakeHttpSession.java,set attribute,@ override public void   (  string name  object value )  {  if  (  ! valid . get (  )  )  throw new  illegal state exception (  )  ;  attributes . put ( name value )  ;   }  
1545,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\FakeHttpSession.java,set max inactive interval,@ override public void   ( int interval )  {  this . max inactive interval = interval ;   }  
1546,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\ExecutorsFactory.java, atmosphere thread factory,public   ( boolean shared  string name )  {  this . shared = shared ;  this . name = name ;   }  
1547,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\ExecutorsFactory.java,get async operation executor,"public static  executor service   ( final  atmosphere config config final  string name )  {  final boolean shared = config . framework (  )  . is share executor services (  )  ;  if  (  ! shared || config . properties (  )  . get ( async   write   thread   pool )   =  =  null )   {  int number of async thread = default   async   thread ;   string s = config . get init parameter (  application config . broadcaster   async   write   threadpool   maxsize )  ;  if  ( s  !  =  null )   {  number of async thread =  integer . parse int ( s )  ;   }  if  ( shared && number of async thread  =  =  1 )   {  logger . warn ( "" not enough number of async thread for a shareable thread pool  {  }   ""  +  "" setting it to a new cached thread pool"" number of async thread )  ;  number of async thread =  - 1 ;   }   abstract executor service async write service ;  boolean use fork join pool = config . get init parameter ( use   forjoinpool true )  ;  logger . trace ( "" max number of  async op  {  } "" number of async thread  =  =   - 1  ?  "" unlimited"" : number of async thread )  ;   string thread name = name  +  "" -  async op - "" ;  if  ( number of async thread  =  =   - 1 )   {  async write service =  ! use fork join pool  ?   (  thread pool executor )  executors . new cached thread pool ( new  atmosphere thread factory ( shared thread name )  )  : new  fork join pool ( shared thread name )  ;   }  else  {  async write service =  (  thread pool executor )  executors . new fixed thread pool ( number of async thread new  atmosphere thread factory ( shared thread name )  )  ;   }  keep alive threads ( async write service config )  ;  if  ( shared )   {  config . properties (  )  . put ( async   write   thread   pool async write service )  ;   }  return async write service ;   }  else  {  return  (  executor service ) config . properties (  )  . get ( async   write   thread   pool )  ;   }   }  "
1548,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\ExecutorsFactory.java,get message dispatcher,"public static  executor service   ( final  atmosphere config config final  string name )  {  final boolean shared = config . framework (  )  . is share executor services (  )  ;  boolean use fork join pool = config . get init parameter ( use   forjoinpool true )  ;  if  (  ! shared || config . properties (  )  . get ( broadcaster   thread   pool )   =  =  null )   {  int number of message processing thread = default   message   thread ;   string s = config . get init parameter (  application config . broadcaster   message   processing   threadpool   maxsize )  ;  if  ( s  !  =  null )   {  number of message processing thread =  integer . parse int ( s )  ;   }  if  ( shared && number of message processing thread  =  =  1 )   {  logger . warn ( "" not enough number of message processing thread for a shareable thread pool  {  }   ""  +  "" setting it to a new cached thread pool"" number of message processing thread )  ;  number of message processing thread =  - 1 ;   }   abstract executor service message service ;  logger . trace ( "" max number of  dispatch op  {  } "" number of message processing thread  =  =   - 1  ?  "" unlimited"" : number of message processing thread )  ;   string thread name = name  +  "" -  dispatch op - "" ;  if  ( number of message processing thread  =  =   - 1 )   {  message service =  ! use fork join pool  ?   (  thread pool executor )  executors . new cached thread pool ( new  atmosphere thread factory ( shared thread name )  )  : new  fork join pool ( shared thread name )  ;   }  else  {  message service =  (  thread pool executor )  executors . new fixed thread pool ( number of message processing thread new  atmosphere thread factory ( shared thread name )  )  ;   }  keep alive threads ( message service config )  ;  if  ( shared )   {  config . properties (  )  . put ( broadcaster   thread   pool message service )  ;   }  return message service ;   }  else  {  return  (  executor service ) config . properties (  )  . get ( broadcaster   thread   pool )  ;   }   }  "
1549,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\ExecutorsFactory.java,get scheduler,"public static  scheduled executor service   ( final  atmosphere config config )  {  final boolean shared = config . framework (  )  . is share executor services (  )  ;  if  (  ! shared || config . properties (  )  . get ( scheduler   thread   pool )   =  =  null )   {  int threads = config . get init parameter (  application config . scheduler   threadpool   maxsize  runtime . get runtime (  )  . available processors (  )  )  ;  logger . trace ( "" max number of  atmosphere -  scheduler  {  } "" threads )  ;   scheduled executor service scheduler =  executors . new scheduled thread pool ( threads new  thread factory (  )  {  private final  atomic integer count = new  atomic integer (  )  ;  @ override public  thread new thread (  final  runnable runnable )  {   thread t = new  thread ( runnable "" atmosphere -  scheduler - ""  +  count . get and increment (  )  )  ;  t . set daemon ( true )  ;  return t ;   }   }   )  ;  if  ( shared )   {  config . properties (  )  . put ( scheduler   thread   pool scheduler )  ;   }  keep alive threads (  (  thread pool executor ) scheduler config )  ;  return scheduler ;   }  else  {  return  (  scheduled executor service ) config . properties (  )  . get ( scheduler   thread   pool )  ;   }   }  "
1550,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\ExecutorsFactory.java,keep alive threads,private static void   (  abstract executor service t  atmosphere config config )  {  if  (  !  thread pool executor . class . is assignable from ( t . get class (  )  )  )   {  return ;   }   thread pool executor e =  thread pool executor . class . cast ( t )  ;  int keep alive = default   keep   alive ;   string s = config . get init parameter (  application config . executorfactory   keep   alive )  ;  if  ( s  !  =  null )   {  keep alive =  integer . parse int ( s )  ;   }  e . set keep alive time ( keep alive  time unit . seconds )  ;  e . allow core thread time out ( config . get init parameter (  application config . allow   core   thread   timeout true )  )  ;   }  
1551,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\ExecutorsFactory.java,new thread,"@ override public  thread   ( final  runnable runnable )  {   thread t = new  thread ( runnable "" atmosphere -  scheduler - ""  +  count . get and increment (  )  )  ;  t . set daemon ( true )  ;  return t ;   }  "
1552,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\ExecutorsFactory.java,reset,public final static void   (  atmosphere config config )  {   executor service e =  (  executor service ) config . properties (  )  . get ( async   write   thread   pool )  ;  if  ( e  !  =  null )   {  e . shutdown (  )  ;   }  config . properties (  )  . remove ( async   write   thread   pool )  ;  e =  (  executor service ) config . properties (  )  . get ( scheduler   thread   pool )  ;  if  ( e  !  =  null )   {  e . shutdown (  )  ;   }  config . properties (  )  . remove ( scheduler   thread   pool )  ;  e =  (  executor service ) config . properties (  )  . get ( broadcaster   thread   pool )  ;  if  ( e  !  =  null )   {  e . shutdown (  )  ;   }  config . properties (  )  . remove ( broadcaster   thread   pool )  ;   }  
1553,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\ForkJoinPool.java, fork join pool,"public   ( boolean shared final  string thread name )  {  this . shared = shared ;  fork join pool = new java . util . concurrent .  fork join pool (  runtime . get runtime (  )  . available processors (  )  new java . util . concurrent .  fork join pool .  fork join worker thread factory (  )  {  @ override public java . util . concurrent .  fork join worker thread new thread (  java . util . concurrent .  fork join pool pool )  {  return new jdk7 fork join worker thread ( pool  fork join pool . this . shared thread name )  ;   }   }   null false )  ;  logger . info ( "" using  fork join pool  {  }  .   set the  {  }  to  - 1 to fully use its power . "" fork join pool . get class (  )  . get name (  )   application config . broadcaster   async   write   threadpool   maxsize )  ;   }  "
1554,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\ForkJoinPool.java,jdk fork join worker thread,"protected   ( java . util . concurrent .  fork join pool pool boolean shared  string thread name )  {  super ( pool )  ;  set name (  ( shared  ?  "" atmosphere -  shared - "" : thread name )   +  count . get and increment (  )  )  ;   }  "
1555,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\ForkJoinPool.java,await termination,@ override public boolean   ( long timeout  time unit unit )  throws  interrupted exception  {  return fork join pool . await termination ( timeout unit )  ;   }  
1556,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\ForkJoinPool.java,execute,@ override public void   (  runnable command )  {  fork join pool . execute ( command )  ;   }  
1557,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\ForkJoinPool.java,is shutdown,@ override public boolean   (  )  {  return fork join pool . is shutdown (  )  ;   }  
1558,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\ForkJoinPool.java,is terminated,@ override public boolean   (  )  {  return fork join pool . is terminated (  )  ;   }  
1559,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\ForkJoinPool.java,new thread,@ override public java . util . concurrent .  fork join worker thread   ( java . util . concurrent .  fork join pool pool )  {  return new jdk7 fork join worker thread ( pool  fork join pool . this . shared thread name )  ;   }  
1560,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\ForkJoinPool.java,pool,public  abstract executor service   (  )  {  return fork join pool ;   }  
1561,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\ForkJoinPool.java,shutdown,@ override public void   (  )  {  fork join pool . shutdown (  )  ;   }  
1562,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\ForkJoinPool.java,shutdown now,@ override public  list <  runnable >    (  )  {  return fork join pool . shutdown now (  )  ;   }  
1563,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\FilterConfigImpl.java, filter config impl,public   (  servlet config sc )  {  this . sc = sc ;   }  
1564,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\FilterConfigImpl.java,get filter,public  filter   (  )  {  return filter ;   }  
1565,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\FilterConfigImpl.java,get filter name,@ override public  string   (  )  {  return filter name ;   }  
1566,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\FilterConfigImpl.java,get init parameter,@ override public  string   (  string name )  {  return sc . get init parameter ( name )  ;   }  
1567,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\FilterConfigImpl.java,get init parameter names,@ override public  enumeration   (  )  {  return sc . get init parameter names (  )  ;   }  
1568,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\FilterConfigImpl.java,get servlet context,@ override public  servlet context   (  )  {  return sc . get servlet context (  )  ;   }  
1569,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\FilterConfigImpl.java,recycle,public void   (  )  {  if  ( this . filter  !  =  null )   {  filter . destroy (  )  ;   }  this . filter = null ;   }  
1570,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\FilterConfigImpl.java,set filter,public void   (  filter filter )  {  this . filter = filter ;   }  
1571,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\FilterConfigImpl.java,set filter name,public void   (  string filter name )  {  this . filter name = filter name ;   }  
1572,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\QueryStringDecoder.java, query string decoder,@ deprecated public   ( uri uri  string charset )  {  this ( uri  charset . for name ( charset )  )  ;   }  
1573,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\QueryStringDecoder.java,add param,private boolean   (  map <  string  list <  string >  >  params  string name  string value )  {  if  ( n params  >  =  max params )   {  return false ;   }   list <  string >  values = params . get ( name )  ;  if  ( values  =  =  null )   {  values = new  array list <  string >  ( 1 )  ;  params . put ( name values )  ;   }  values . add ( value )  ;  n params +  +  ;  return true ;   }  
1574,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\QueryStringDecoder.java,decode component,"@ suppress warnings ( ""fallthrough"" )  public static  string   ( final  string s final  charset charset )  {  if  ( s  =  =  null )   {  return """" ;   }  final int size = s . length (  )  ;  boolean modified = false ;  for  ( int i = 0 ;  i  <  size ;  i +  +  )   {  final char c = s . char at ( i )  ;  switch  ( c )   {  case '%':"
1575,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\QueryStringDecoder.java,decode hex nibble,private static char   ( final char c )  {  if  ( '0'  <  =  c && c  <  =  '9' )   {  return  ( char )  ( c  -  '0' )  ;   }  else if  ( 'a'  <  =  c && c  <  =  'f' )   {  return  ( char )  ( c  -  'a'  +  10 )  ;   }  else if  ( 'a'  <  =  c && c  <  =  'f' )   {  return  ( char )  ( c  -  'a'  +  10 )  ;   }  else  {  return  character . max   value ;   }   }  
1576,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\QueryStringDecoder.java,decode params,"private void   (  string s )  {   map <  string  list <  string >  >  params = this . params = new  linked hash map <  string  list <  string >  >  (  )  ;  n params = 0 ;   string name = null ;  int pos = 0 ;  int i ;  char c = 0 ;  for  ( i = 0 ;  i  <  s . length (  )  ;  i +  +  )   {  c = s . char at ( i )  ;  if  ( c  =  =  ' = ' && name  =  =  null )   {  if  ( pos  !  =  i )   {  name = decode component ( s . substring ( pos i )  charset )  ;   }  pos = i  +  1 ;   }  else if  ( c  =  =  '&' )   {  if  ( name  =  =  null && pos  !  =  i )   {  if  (  ! add param ( params decode component ( s . substring ( pos i )  charset )  """" )  )   {  return ;   }   }  else if  ( name  !  =  null )   {  if  (  ! add param ( params name decode component ( s . substring ( pos i )  charset )  )  )   {  return ;   }  name = null ;   }  pos = i  +  1 ;   }   }  if  ( pos  !  =  i )   {  if  ( name  =  =  null )   {  if  (  ! add param ( params decode component ( s . substring ( pos i )  charset )  """" )  )   {  return ;   }   }  else  {  if  (  ! add param ( params name decode component ( s . substring ( pos i )  charset )  )  )   {  return ;   }   }   }  else if  ( name  !  =  null )   {  if  (  ! add param ( params name """" )  )   {  return ;   }   }   }  "
1577,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\QueryStringDecoder.java,get parameters,public  map <  string  list <  string >  >    (  )  {  if  ( params  =  =  null )   {  if  ( has path )   {  int path length = get path (  )  . length (  )  ;  if  ( uri . length (  )   =  =  path length )   {  return  collections . empty map (  )  ;   }  decode params ( uri . substring ( path length  +  1 )  )  ;   }  else  {  if  ( uri . length (  )   =  =  0 )   {  return  collections . empty map (  )  ;   }  decode params ( uri )  ;   }   }  return params ;   }  
1578,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\QueryStringDecoder.java,get path,"public  string   (  )  {  if  ( path  =  =  null )   {  if  (  ! has path )   {  return path = """" ;   }  int path end pos = uri . index of ( ' ? ' )  ;  if  ( path end pos  <  0 )   {  path = uri ;   }  else  {  return path = uri . substring ( 0 path end pos )  ;   }   }  return path ;   }  "
1579,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\ReaderInputStream.java, reader input stream,public   (  reader reader )  {  this ( reader  charset . default charset (  )  )  ;   }  
1580,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\ReaderInputStream.java,close,@ override public void   (  )  throws io exception  {  reader . close (  )  ;   }  
1581,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\ReaderInputStream.java,fill buffer,private void   (  )  throws io exception  {  if  (  ! end of input &&  ( last coder result  =  =  null || last coder result . is underflow (  )  )  )   {  encoder in . compact (  )  ;  int position = encoder in . position (  )  ;  int c = reader . read ( encoder in . array (  )  position encoder in . remaining (  )  )  ;  if  ( c  =  =   - 1 )   {  end of input = true ;   }  else  {  encoder in . position ( position  +  c )  ;   }  encoder in . flip (  )  ;   }  encoder out . compact (  )  ;  last coder result = encoder . encode ( encoder in encoder out end of input )  ;  encoder out . flip (  )  ;   }  
1582,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\ReaderInputStream.java,read,@ override public int   (  )  throws io exception  {  for  (  ;   ;   )   {  if  ( encoder out . has remaining (  )  )   {  return encoder out . get (  )  & 0xff ;   }  else  {  fill buffer (  )  ;  if  ( end of input &&  ! encoder out . has remaining (  )  )   {  return  - 1 ;   }   }   }   }  
1583,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\IntrospectionUtils.java,accept,public boolean   (  file d  string name )  {  if  ( name . ends with ( lext )  )   {  return true ;   }  return false ;   }  
1584,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\IntrospectionUtils.java,add jars from class path,"@ suppress warnings ( ""unchecked"" )  public static void   (  vector < url >  jars  string cp )  throws io exception   malformedurl exception  {   string sep =  system . get property ( ""path . separator"" )  ;   string token ;   string tokenizer st ;  if  ( cp  !  =  null )   {  st = new  string tokenizer ( cp sep ) "
1585,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\IntrospectionUtils.java,add property,"final public static boolean   (  object o  string name  string value )  {   string setter = ""add""  +  capitalize ( name )  ;  return invoke property ( o setter name value )  ;   }  "
1586,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\IntrospectionUtils.java,add to class path,"@ suppress warnings ( ""unchecked"" )  public static void   (  vector < url >  cpv  string dir )  {  try  {   string cp comp[] = get files by ext ( dir "" . jar"" )  ;  if  ( cp comp  !  =  null )   {  int jar count = cp comp . length ;  for  ( int i = 0 ;  i  <  jar count ;  i +  +  )   {  url url = geturl ( dir cp comp[i] )  ;  if  ( url  ! "
1587,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\IntrospectionUtils.java,add tools jar,"@ suppress warnings ( ""unchecked"" )  public static void   (  vector < url >  v )  {  try  {   file f = new  file (  system . get property ( ""java . home"" )   +  "" /  .  .  / lib / tools . jar"" )  ;  if  (  ! f . exists (  )  )   {  f = new  file (  system . get property ( ""java . home"" )   +  "" / lib / tools . jar"" )  ;  if  ( f . exists (  )  )   {  logger . d"
1588,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\IntrospectionUtils.java,call main,"public static void   (  class <  ?  >  c  string args[] )  throws  exception  {   class <  ?  >  p[] = new  class[1] ;  p[0] = args . get class (  )  ;  @ suppress warnings ( ""unchecked"" )   method m = c . get method ( ""main"" p )  ;  m . invoke ( c new  object[] { args }  )  ;   }  "
1589,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\IntrospectionUtils.java,call method,"public static  object   (  object target  string methodn )  throws  exception  {  if  ( target  =  =  null )   {  debug ( "" assert:  illegal params ""  +  target )  ;  return null ;   }  if  ( dbg  >  0 )   {  debug ( ""call method0 ""  +  target . get class (  )  . get name (  )   +  "" . "" +  methodn )  ;   }   class params[] = new  class[0] ;   method m = find method ( target . get class (  )  methodn params )  ;  if  ( m  =  =  null )   {  throw new  no such method exception ( target . get class (  )  . get name (  )   +  "" ""  +  methodn )  ;   }  return m . invoke ( target empty array )  ;   }  "
1590,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\IntrospectionUtils.java,call method,"public static  object   (  object target  string methodn  object param1  string type param1  class loader cl )  throws  exception  {  if  ( target  =  =  null || param1  =  =  null )   {  debug ( "" assert:  illegal params ""  +  target  +  "" "" +  param1 )  ;   }  if  ( dbg  >  0 )  debug ( ""call method1 ""  +  target . get class (  )  . get name (  )   +  "" "" +  param1 . get class (  )  . get name (  )  +  "" "" +  type param1 )  ;   class <  ?  >  params[] = new  class[1] ;  if  ( type param1  =  =  null )   {  params[0] = param1 . get class (  )  ;   }  else  {  params[0] = cl . load class ( type param1 )  ;   }   method m = find method ( target . get class (  )  methodn params )  ;  if  ( m  =  =  null )   {  throw new  no such method exception ( target . get class (  )  . get name (  )   +  "" ""  +  methodn )  ;   }  return m . invoke ( target new  object[] { param1 }  )  ;   }  "
1591,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\IntrospectionUtils.java,call methodn,"public static  object   (  object target  string methodn  object params[]  class <  ?  >  type params[] )  throws  exception  {   method m = null ;  m = find method ( target . get class (  )  methodn type params )  ;  if  ( m  =  =  null )   {  debug ( "" can't find method ""  +  methodn  +  "" in "" +  target +  "" class "" +  target . get class (  )  )  ;  return null ;   }   object o = m . invoke ( target params )  ;  if  ( dbg  >  0 )   {   string builder sb = new  string builder (  )  ;  sb . append ( """"  +  target . get class (  )  . get name (  )   +  "" . "" +  methodn +  "" (  "" )  ;  for  ( int i = 0 ;  i  <  params . length ;  i +  +  )   {  if  ( i  >  0 )  sb . append ( ""  "" )  ;  sb . append ( params[i] )  ;   }  sb . append ( "" ) "" )  ;  debug ( sb . to string (  )  )  ;   }  return o ;   }  "
1592,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\IntrospectionUtils.java,capitalize,public static  string   (  string name )  {  if  ( name  =  =  null || name . length (  )   =  =  0 )   {  return name ;   }  char chars[] = name . to char array (  )  ;  chars[0] =  character . to upper case ( chars[0] )  ;  return new  string ( chars )  ;   }  
1593,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\IntrospectionUtils.java,clear,public static void   (  )  {  object methods . clear (  )  ;   }  
1594,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\IntrospectionUtils.java,convert,"public static  object   (  string object  class <  ?  >  param type )  {   object result = null ;  if  ( ""java . lang .  string"" . equals ( param type . get name (  )  )  )   {  result = object ;   }  else if  ( ""java . lang .  integer"" . equals ( param type . get name (  )  )  || ""int"" . equals ( param type . get name (  )  )  )   {  try  {  result = new  integer ( object )  ;   }  catch  (   number format exception ex )   {   }   }  else if  ( ""java . lang .  boolean"" . equals ( param type . get name (  )  )  || ""boolean"" . equals ( param type . get name (  )  )  )   {  result = new  boolean ( object )  ;   }  else if  ( ""java . net .  inet address"" . equals ( param type . get name (  )  )  )   {  try  {  result =  inet address . get by name ( object )  ;   }  catch  (   unknown host exception exc )   {  debug ( "" unable to resolve host name:""  +  object )  ;   }   }  else  {  debug ( "" unknown type ""  +  param type . get name (  )  )  ;   }  if  ( result  =  =  null )   {  throw new  illegal argument exception ( "" can't convert argument: ""  +  object )  ;   }  return result ;   }  "
1595,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\IntrospectionUtils.java,debug,"static void   (  string s )  {  logger . debug ( "" introspection utils:  {  } "" s )  ;   }  "
1596,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\IntrospectionUtils.java,execute,"public static void   (  object proxy  string method )  throws  exception  {   method executem = null ;   class <  ?  >  c = proxy . get class (  )  ;   class <  ?  >  params[] = new  class[0] ;  executem = find method ( c method params )  ;  if  ( executem  =  =  null )   {  throw new  runtime exception ( "" no execute in ""  +  proxy . get class (  )  )  ;   }  executem . invoke ( proxy  (  object[] ) null )  ;   }  "
1597,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\IntrospectionUtils.java,find boolean setters,"@ suppress warnings ( ""unchecked"" )  public static  string[]   (  class <  ?  >  c )  {   method m[] = find methods ( c )  ;  if  ( m  =  =  null )  return null ;   vector <  string >  v = new  vector <  string >  (  )  ;  for  ( int i = 0 ;  i  <  m . length ;  i +  +  )   {  if  ( m[i] . get name (  )  . starts with ( ""set"" )  && m[i] . get parameter"
1598,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\IntrospectionUtils.java,find method,public static  method   (  class <  ?  >  c  string name  class <  ?  >  params[] )  {   method methods[] = find methods ( c )  ;  if  ( methods  =  =  null )  return null ;  for  ( int i = 0 ;  i  <  methods . length ;  i +  +  )   {  if  ( methods[i] . get name (  )  . equals ( name )  )   {   class <  ?  >  method params[] = methods[i] . get parameter types (  )  ;  if  ( method params  =  =  null )  if  ( params  =  =  null || params . length  =  =  0 )  return methods[i] ;  if  ( params  =  =  null )  if  ( method params  =  =  null || method params . length  =  =  0 )  return methods[i] ;  if  ( params . length  !  =  method params . length )  continue ;  boolean found = true ;  for  ( int j = 0 ;  j  <  params . length ;  j +  +  )   {  if  ( params[j]  !  =  method params[j] )   {  found = false ;  break ;   }   }  if  ( found )  return methods[i] ;   }   }  return null ;   }  
1599,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\IntrospectionUtils.java,find methods,"@ suppress warnings ( ""unchecked"" )  public static  method[]   (  class <  ?  >  c )  {   method methods[] =  (  method[] ) object methods . get ( c )  ;  if  ( methods  !  =  null )  return methods ;  methods = c . get methods (  )  ;  object methods . put ( c methods )  ;  return methods ;   }  "
1600,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\IntrospectionUtils.java,find void setters,"@ suppress warnings ( ""unchecked"" )  public static  string[]   (  class <  ?  >  c )  {   method m[] = find methods ( c )  ;  if  ( m  =  =  null )  return null ;   vector <  string >  v = new  vector <  string >  (  )  ;  for  ( int i = 0 ;  i  <  m . length ;  i +  +  )   {  if  ( m[i] . get name (  )  . starts with ( ""set"" )  && m[i] . get parameter"
1601,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\IntrospectionUtils.java,get attribute,"public static  object   (  object proxy  string name )  throws  exception  {   class <  ?  >  c = proxy . get class (  )  ;   class <  ?  >  params[] = new  class[1] ;  params[0] =  string . class ;   method executem = find method ( c ""get attribute"" params )  ;  if  ( executem  =  =  null )   {  logger . debug ( "" no get attribute in  {  } "" proxy . get class (  )  )  ;  return null ;   }  return executem . invoke ( proxy new  object[] { name }  )  ;   }  "
1602,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\IntrospectionUtils.java,get class path,"@ suppress warnings ( ""unchecked"" )  public static url[]   (  string dir  string cpath  string cpath prop boolean add tools )  throws io exception   malformedurl exception  {   vector < url >  jarsv = new  vector < url >  (  )  ;  if  ( dir  !  =  null )   {  url url = geturl ( dir ""classes"" )  ;  if  ( url  !  =  n"
1603,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\IntrospectionUtils.java,get files by ext,public static  string[]   (  string ld  string ext )  {   file dir = new  file ( ld )  ;   string[] names = null ;  final  string lext = ext ;  if  ( dir . is directory (  )  )   {  names = dir . list ( new  filename filter (  )  {  public boolean accept (   file d   string name )  {  if  ( name . ends with ( lext )  )   {  return true ;   }  return false ;   }   }   )  ;   }  return names ;   }  
1604,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\IOUtils.java,close,"public static void   ( final  closeable .  .  .  closeable array )  {  for  (   closeable closeable : closeable array )   {  try  {  if  ( closeable  !  =  null )   {  closeable . close (  )  ;   }   }  catch  (  io exception ioe )   {  logger . info ( "" can't close the object"" ioe )  ;   }   }   }  "
1605,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\IOUtils.java,deliver,public static void   ( final  object o final  deliver to deliver config final  deliver to . deliver   to default deliver final  atmosphere resource r )  {  final  deliver to . deliver   to deliver to = deliver config  =  =  null  ?  default deliver : deliver config . value (  )  ;  switch  ( deliver to )   {  case resource: r . get broadcaster (  )  . broadcast ( o r )  ;  break ;  case broadcaster: r . get broadcaster (  )  . broadcast ( o )  ;  break ;  case all: for  (  broadcaster b : r . get atmosphere config (  )  . get broadcaster factory (  )  . lookup all (  )  )   {  b . broadcast ( o )  ;   }  break ;   }   }  
1606,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\IOUtils.java,get cleaned servlet path,"public static  string   (  string full servlet path )  {  if  ( full servlet path . equals ignore case ( "" / *"" )  )  return """" ;   matcher matcher = servlet   path   pattern . matcher ( full servlet path )  ;  if  (  ! matcher . find (  )  )  return full servlet path ;   string servlet path = matcher . group ( 0 )  ;  if  (  ! servlet path . starts with ( "" / "" )  )   {  servlet path = "" / ""  +  servlet path ;   }  return servlet path ;   }  "
1607,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\IOUtils.java,guest raw servlet path,"public static  string   (  atmosphere config config )  {   string servlet path = """" ;  try  {  if  ( config . get servlet config (  )   !  =  null )   {   servlet registration s = config . get servlet context (  )  . get servlet registration ( config . get servlet config (  )  . get servlet name (  )  )  ;  if  ( s  =  =  null )   {  s = config . get servlet context (  )  . get servlet registration (  void servlet config . atmosphere   servlet )  ;   }  if  ( s  =  =  null )   {  for  (   map .  entry <  string  ?  extends  servlet registration >  servlet : config . get servlet context (  )  . get servlet registrations (  )  . entry set (  )  )   {  if  ( known classes . contains ( servlet . get value (  )  . get class name (  )  )  )   {  s = servlet . get value (  )  ;  break ;   }   }  if  ( s  =  =  null )   {  throw new  illegal state exception ( "" unable to configure jsr356 at that stage .   no  servlet associated with ""  +  config . get servlet config (  )  . get servlet name (  )  )  ;   }   }  if  ( s . get mappings (  )  . size (  )   >  1 )   {  logger . warn ( "" more than one  servlet  mapping defined .   web socket may not work  {  } "" s )  ;   }  for  (   string m : s . get mappings (  )  )   {  servlet path = m ;   }   }  else  {  throw new  illegal state exception ( "" unable to configure jsr356 at that stage"" )  ;   }  return servlet path ;   }  catch  (   exception ex )   {  logger . error ( """" ex )  ;  throw new  illegal state exception ( "" unable to configure jsr356 at that stage"" )  ;   }   }  "
1608,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\IOUtils.java,guest servlet path,"public static  string   (  atmosphere config config )  {   string servlet path = """" ;  if  ( config . get servlet config (  )   !  =  null )   {  servlet path = get cleaned servlet path ( guest raw servlet path ( config )  )  ;   }  else  {  throw new  illegal state exception ( "" unable to configure jsr356 at that stage"" )  ;   }  return servlet path ;   }  "
1609,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\IOUtils.java,is atmosphere,public static boolean   (  string class name )  {   class <  ?  extends  atmosphere servlet >  clazz ;  try  {  clazz =  (  class <  ?  extends  atmosphere servlet >  )  thread . current thread (  )  . get context class loader (  )  . load class ( class name )  ;   }  catch  (   throwable t )   {  try  {  clazz =  (  class <  ?  extends  atmosphere servlet >  ) io utils . class . get class loader (  )  . load class ( class name )  ;   }  catch  (   exception ex )   {  return false ;   }   }  return  atmosphere servlet . class . is assignable from ( clazz )  ;   }  
1610,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\IOUtils.java,is body binary,public final static boolean   (  atmosphere request request )  {  if  ( request . get content type (  )   !  =  null && request . get content type (  )  . equals ignore case ( force   binary )  || request . get header ( x   atmo   binary )   !  =  null )  return true ;  return false ;   }  
1611,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\IOUtils.java,is body empty,public final static boolean   (  object o )  {  if  ( o  !  =  null &&  (  string . class . is assignable from ( o . get class (  )  )  &&  string . class . cast ( o )  . is empty (  )  )  ||  (  byte[] . class . is assignable from ( o . get class (  )  )  &&  byte[] . class . cast ( o )  . length  =  =  0 )  )   {  return true ;   }  else  {  return false ;   }   }  
1612,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\IOUtils.java,load class,public static  class <  ?  >    (  class <  ?  >  this class  string class name )  throws  exception  {  try  {  return  thread . current thread (  )  . get context class loader (  )  . load class ( class name )  ;   }  catch  (   throwable t )   {  try  {  return  class . for name ( class name )  ;   }  catch  (   exception t2 )   {  if  ( this class  !  =  null )   {  return this class . get class loader (  )  . load class ( class name )  ;   }  throw t2 ;   }   }   }  
1613,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\IOUtils.java,read entirely,public static  object   (  atmosphere resource r )  throws io exception  {   atmosphere request request = r . get request (  )  ;  return is body binary ( request )   ?  read entirely as byte ( r )  : read entirely as string ( r )  . to string (  )  ;   }  
1614,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\IOUtils.java,read entirely as byte,"public static byte[]   (  atmosphere resource r )  throws io exception  {   atmosphere request request = r . get request (  )  ;  boolean read get body = r . get atmosphere config (  )  . get init parameter (  application config . read   get   body false )  ;  if  (  ! read get body &&  atmosphere resource impl . class . cast ( r )  . get request ( false )  . get method (  )  . equals ignore case ( ""get"" )  )   {  logger . debug ( "" blocking an i / o read operation from a get request .   to enable get  +  body  set  {  }  to true""  application config . read   get   body )  ;  return new byte[0] ;   }   atmosphere request impl .  body body = request . body (  )  ;  if  ( request . body (  )  . is empty (  )  )   {   buffered input stream buffered stream = null ;   byte array output stream bbis = new  byte array output stream (  )  ;  try  {  try  {   input stream input stream = request . get input stream (  )  ;  if  ( input stream  !  =  null )   {  buffered stream = new  buffered input stream ( input stream )  ;   }   }  catch  (   illegal state exception ex )   {  logger . trace ( """" ex )  ;   reader reader = request . get reader (  )  ;  if  ( reader  !  =  null )   {  buffered stream = new  buffered input stream ( new  reader input stream ( reader )  )  ;   }   }  if  ( buffered stream  !  =  null )   {  byte[] bytes = new byte[8192] ;  int bytes read = 0 ;  while  ( bytes read  !  =   - 1 )   {  bytes read = buffered stream . read ( bytes )  ;  if  ( bytes read  >  0 )  bbis . write ( bytes 0 bytes read )  ;   }   }  else  {  bbis . write ( """" . get bytes (  )  )  ;   }   }  finally  {  if  ( buffered stream  !  =  null )   {  try  {  buffered stream . close (  )  ;   }  catch  (  io exception ex )   {  logger . warn ( """" ex )  ;   }   }   }  return bbis . to byte array (  )  ;   }  else if  ( body . has string (  )  )   {  try  {  return read entirely as string ( r )  . to string (  )  . get bytes ( request . get character encoding (  )  )  ;   }  catch  (   unsupported encoding exception e )   {  logger . error ( """" e )  ;   }   }  else if  ( body . has bytes (  )  )   {  return  arrays . copy of range ( body . as bytes (  )  body . byte offset (  )  body . byte offset (  )   +  body . byte length (  )  )  ;   }  throw new  illegal state exception ( "" no body ""  +  r )  ;   }  "
1615,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\IOUtils.java,read entirely as string,"public static  string builder   (  atmosphere resource r )  throws io exception  {  final  string builder string builder = new  string builder (  )  ;  boolean read get body = r . get atmosphere config (  )  . get init parameter (  application config . read   get   body false )  ;  if  (  ! read get body &&  atmosphere resource impl . class . cast ( r )  . get request ( false )  . get method (  )  . equals ignore case ( ""get"" )  )   {  logger . debug ( "" blocking an i / o read operation from a get request .   to enable get  +  body  set  {  }  to true""  application config . read   get   body )  ;  return string builder ;   }   atmosphere request request = r . get request (  )  ;  if  ( request . body (  )  . is empty (  )  )   {   buffered reader buffered reader = null ;  try  {  try  {   input stream input stream = request . get input stream (  )  ;  if  ( input stream  !  =  null )   {  buffered reader = new  buffered reader ( new  input stream reader ( input stream request . get character encoding (  )  )  )  ;   }   }  catch  (   illegal state exception ex )   {  logger . trace ( """" ex )  ;   reader reader = request . get reader (  )  ;  if  ( reader  !  =  null )   {  buffered reader = new  buffered reader ( reader )  ;   }   }  if  ( buffered reader  !  =  null )   {  char[] char buffer = new char[8192] ;  int bytes read =  - 1 ;  try  {  while  (  ( bytes read = buffered reader . read ( char buffer )  )   >  0 )   {  string builder . append ( char buffer 0 bytes read )  ;   }   }  catch  (   null pointer exception ex )   {   }   }  else  {  string builder . append ( """" )  ;   }   }  finally  {  if  ( buffered reader  !  =  null )   {  try  {  buffered reader . close (  )  ;   }  catch  (  io exception ex )   {  logger . warn ( """" ex )  ;   }   }   }   }  else  {   atmosphere request impl .  body body = request . body (  )  ;  try  {  string builder . append ( body . has string (  )   ?  body . as string (  )  : new  string ( body . as bytes (  )  body . byte offset (  )  body . byte length (  )  request . get character encoding (  )  )  )  ;   }  catch  (   unsupported encoding exception e )   {  logger . error ( """" e )  ;   }   }  return string builder ;   }  "
1616,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\IOUtils.java,read service file,"public static  map <  string  atmosphere framework .  meta service action >    ( final  string path )  {  final  map <  string  atmosphere framework .  meta service action >  b = new  linked hash map <  string  atmosphere framework .  meta service action >  (  )  ;   string line ;   input stream is = null ;   buffered reader reader = null ;   atmosphere framework .  meta service action action =  atmosphere framework .  meta service action . install ;  try  {  is =  atmosphere framework . class . get class loader (  )  . get resource as stream ( path )  ;  if  ( is  =  =  null )   {  logger . trace ( ""meta - inf / services /  {  }  not found in class loader"" path )  ;  return b ;   }  reader = new  buffered reader ( new  input stream reader ( is )  )  ;  while  ( true )   {  line = reader . read line (  )  ;  if  ( line  =  =  null )   {  break ;   }  else if  ( line . is empty (  )  )   {  continue ;   }  else if  ( line . index of ( ' . ' )   =  =   - 1 )   {  action =  atmosphere framework .  meta service action . value of ( line )  ;   }  else  {  b . put ( line action )  ;   }   }  logger . info ( "" successfully loaded and installed  {  } "" path )  ;   }  catch  (  io exception e )   {  logger . trace ( "" unable to read meta - inf / services /  {  }  from class loader"" path e )  ;   }  finally  {  close ( is reader )  ;   }  return b ;   }  "
1617,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\IOUtils.java,real path,"public static  string   (  servlet context servlet context  string target path )  throws  malformedurl exception  {   string real path = servlet context . get real path ( target path )  ;  if  ( real path  =  =  null )   {  url u = servlet context . get resource ( target path )  ;  if  ( u  !  =  null )   {  real path = u . get path (  )  ;   }  else  {  return """" ;   }   }  return real path ;   }  "
1618,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\IOUtils.java,scan for atmosphere framework,"private static boolean   (  class <  ?  >  class to scan )  {  if  ( class to scan  =  =  null )  return false ;  logger . trace ( "" scanning  {  } "" class to scan . get name (  )  )  ;  if  ( known classes . contains ( class to scan . get name (  )  )  )   {  return true ;   }  try  {   field[] fields = class to scan . get declared fields (  )  ;  for  (   field f : fields )   {  f . set accessible ( true )  ;  if  (  atmosphere framework . class . is assignable from ( f . get type (  )  )  )   {  return true ;   }   }   }  catch  (   exception ex )   {  logger . trace ( """" ex )  ;   }  if  ( scan for atmosphere framework ( class to scan . get superclass (  )  )  )  return true ;  return false ;   }  "
1619,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\ServletContextFactory.java,get default,public final static  servlet context factory   (  )  {  if  ( servlet context factory  =  =  null )  servlet context factory = new  servlet context factory (  )  ;  return servlet context factory ;   }  
1620,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\ServletContextFactory.java,get servlet context,public  servlet context   (  )  {  if  ( servlet context  !  =  null )   {  return servlet context ;   }  return null ;   }  
1621,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\ServletContextFactory.java,init,public void   (  servlet context servlet context )  {  this . servlet context = servlet context ;   }  
1622,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\ServletProxyFactory.java, servlet proxy factory,"private   (  )  {  add method handler ( ""encodeurl"" void method handler )  . add method handler ( ""encode redirecturl"" void method handler )  . add method handler ( ""get character encoding"" new utf8 handler (  )  )  . add method handler ( ""get server info"" new  method handler (  )  {  @ override public  object handle (   object clazz   method method   object[] method objects )  {  return "" undefined / 0 . 0"" ;   }   }   )  . add method handler ( ""get major version"" new  method handler (  )  {  @ override public  object handle (   object clazz   method method   object[] method objects )  {  return new  integer ( 3 )  ;   }   }   )  ;   }  "
1623,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\ServletProxyFactory.java,add method handler,public  servlet proxy factory   (  string method  method handler m )  {  methods . put ( method m )  ;  return this ;   }  
1624,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\ServletProxyFactory.java,get default,public static  servlet proxy factory   (  )  {  if  ( factory  =  =  null )   {  factory = new  servlet proxy factory (  )  ;   }  return factory ;   }  
1625,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\ServletProxyFactory.java,handle,"@ override public  object   (  object clazz  method method  object[] method objects )  {  return ""utf - 8"" ;   }  "
1626,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\ServletProxyFactory.java,proxy,"public final  object   (  object clazz  method method  object[] method objects )  {   method handler m = methods . get ( method . get name (  )  )  ;  if  ( m  !  =  null )   {  logger . trace ( "" method  {  }  handled by  method handler  {  } "" method . get name (  )  m )  ;  return m . handle ( clazz method method objects )  ;   }  logger . trace ( "" method  {  }  not supported"" method . get name (  )  )  ;  return null ;   }  "
1627,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\StringFilterAggregator.java, string filter aggregator,public   ( int max buffered string )  {  this . max buffered string = max buffered string ;   }  
1628,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\StringFilterAggregator.java,filter,public  broadcast action   (  string broadcaster id  object original message  object message )  {  if  ( message instanceof  string )   {  buffered message . get (  )  . append ( message )  ;  if  ( buffered message . get (  )  . length (  )   <  max buffered string )   {  return new  broadcast action ( action . abort message )  ;   }  else  {  message = buffered message . to string (  )  ;  buffered message . get (  )  . delete ( 0 buffered message . get (  )  . length (  )  )  ;  return new  broadcast action ( action . continue message )  ;   }   }  else  {  return new  broadcast action ( message )  ;   }   }  
1629,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\SimpleBroadcaster.java,broadcast,"@ override public  future <  object >    (  object msg  set <  atmosphere resource >  subset )  {  if  ( destroyed . get (  )  )   {  logger . warn ( "" this  broadcaster has been destroyed and cannot be used"" )  ;  return future done ( msg )  ;   }  start (  )  ;   object new msg = filter ( msg )  ;  if  ( new msg  =  =  null )  r"
1630,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\SimpleBroadcaster.java,create broadcaster config,@ override protected  broadcaster config   (  atmosphere config config )  {   broadcaster config bc =  (  broadcaster config ) config . properties (  )  . get (  broadcaster config . class . get name (  )  )  ;  if  ( bc  =  =  null )   {  bc = new  broadcaster config ( config . framework (  )  . broadcaster filters (  )  config
1631,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\SimpleBroadcaster.java,initialize,public  broadcaster   (  string id  atmosphere config config )  {  return super . initialize ( id config )  ;   }  
1632,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\SimpleBroadcaster.java,prepare invoke on state change,"@ override protected void   ( final  atmosphere resource r final  atmosphere resource event e )  {  if  ( write timeout in second  !  =   - 1 )   {  logger . warn ( "" {  }  not supported with this broadcaster . ""  application config . write   timeout )  ;   }  invoke on state change ( r e )  ;   }  "
1633,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\SimpleBroadcaster.java,queue writeio,@ override protected void   (  atmosphere resource r  deliver deliver  atomic integer count )  throws  interrupted exception  {  execute blocking write ( r deliver count )  ;   }  
1634,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\SimpleBroadcaster.java,set broadcaster config,@ override public void   (  broadcaster config bc )  {  this . bc = bc ;  bc . set executor service ( null false )  . set async write service ( null false )  . set scheduled executor service (  executors factory . get scheduler ( config )  )  ;   }  
1635,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\StringEscapeUtils.java, string escape utils,public   (  )  {  super (  )  ;   }  
1636,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\StringEscapeUtils.java,escape java,public static void   (  writer out  string str )  throws io exception  {  escape java style string ( out str false false )  ;   }  
1637,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\StringEscapeUtils.java,escape java script,public static void   (  writer out  string str )  throws  exception  {  escape java style string ( out str true true )  ;   }  
1638,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\StringEscapeUtils.java,escape java style string,"private static void   (  writer out  string str boolean escape single quote boolean escape forward slash )  throws io exception  {  if  ( out  =  =  null )   {  throw new  illegal argument exception ( "" the  writer must not be null"" )  ;   }  if  ( str  =  =  null )   {  return ;   }  int sz ;  sz = str . length (  )  ;  for  ( int i = 0 ;  i  <  sz ;  i +  +  )   {  char ch = str . char at ( i )  ;  if  ( ch  >  0xfff )   {  out . write ( ""\\u""  +  hex ( ch )  )  ;   }  else if  ( ch  >  0xff )   {  out . write ( ""\\u0""  +  hex ( ch )  )  ;   }  else if  ( ch  >  0x7f )   {  out . write ( ""\\u00""  +  hex ( ch )  )  ;   }  else if  ( ch  <  32 )   {  switch  ( ch )   {  case '\b': out . write ( '\\' )  ;  out . write ( 'b' )  ;  break ;  case '\n': out . write ( '\\' )  ;  out . write ( 'n' )  ;  break ;  case '\t': out . write ( '\\' )  ;  out . write ( 't' )  ;  break ;  case '\f': out . write ( '\\' )  ;  out . write ( 'f' )  ;  break ;  case '\r': out . write ( '\\' )  ;  out . write ( 'r' )  ;  break ;  default : if  ( ch  >  0xf )   {  out . write ( ""\\u00""  +  hex ( ch )  )  ;   }  else  {  out . write ( ""\\u000""  +  hex ( ch )  )  ;   }  break ;   }   }  else  {  switch  ( ch )   {  case '\'': if  ( escape single quote )   {  out . write ( '\\' )  ;   }  out . write ( '\'' )  ;  break ;  case '""': out . write ( '\\' )  ;  out . write ( '""' )  ;  break ;  case '\\': out . write ( '\\' )  ;  out . write ( '\\' )  ;  break ;  case ' / ': if  ( escape forward slash )   {  out . write ( '\\' )  ;   }  out . write ( ' / ' )  ;  break ;  default : out . write ( ch )  ;  break ;   }   }   }   }  "
1639,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\StringEscapeUtils.java,hex,private static  string   ( char ch )  {  return  integer . to hex string ( ch )  . to upper case (  locale . english )  ;   }  
1640,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\StringEscapeUtils.java,unescape java,"public static void   (  writer out  string str )  throws  exception  {  if  ( out  =  =  null )   {  throw new  illegal argument exception ( "" the  writer must not be null"" )  ;   }  if  ( str  =  =  null )   {  return ;   }  int sz = str . length (  )  ;   string builder unicode = new  string builder (  )  ;  boolean had slash = false ;  boolean in unicode = false ;  for  ( int i = 0 ;  i  <  sz ;  i +  +  )   {  char ch = str . char at ( i )  ;  if  ( in unicode )   {  unicode . append ( ch )  ;  if  ( unicode . length (  )   =  =  4 )   {  int value =  integer . parse int ( unicode . to string (  )  16 )  ;  out . write (  ( char ) value )  ;  unicode . set length ( 0 )  ;  in unicode = false ;  had slash = false ;   }  continue ;   }  if  ( had slash )   {  had slash = false ;  switch  ( ch )   {  case '\\': out . write ( '\\' )  ;  break ;  case '\'': out . write ( '\'' )  ;  break ;  case '\""': out . write ( '""' )  ;  break ;  case 'r': out . write ( '\r' )  ;  break ;  case 'f': out . write ( '\f' )  ;  break ;  case 't': out . write ( '\t' )  ;  break ;  case 'n': out . write ( '\n' )  ;  break ;  case 'b': out . write ( '\b' )  ;  break ;  case 'u':  {  in unicode = true ;  break ;   }  default : out . write ( ch )  ;  break ;   }  continue ;   }  else if  ( ch  =  =  '\\' )   {  had slash = true ;  continue ;   }  out . write ( ch )  ;   }  if  ( had slash )   {  out . write ( '\\' )  ;   }   }  "
1641,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\StringEscapeUtils.java,unescape java script,public static void   (  writer out  string str )  throws  exception  {  unescape java ( out str )  ;   }  
1642,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\SimpleBroadcaster.java,start,@ override protected void   (  )  {  if  (  ! started . get and set ( true )  )   {  bc . get broadcaster cache (  )  . start (  )  ;   }   }  
1643,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriPattern.java, group index match result,  (  match result r )  {  this . r = r ;   }  
1644,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriPattern.java, uri pattern,public   (  pattern regex pattern int[] group indexes )  {  if  ( regex pattern  =  =  null )  throw new  illegal argument exception (  )  ;  this . regex = regex pattern . to string (  )  ;  this . regex pattern = regex pattern ;  this . group indexes = group indexes ;   }  
1645,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriPattern.java,compile,private static  pattern   (  string regex )  {  return  ( regex  =  =  null || regex . length (  )   =  =  0 )   ?  null :  pattern . compile ( regex )  ;   }  
1646,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriPattern.java,end,public int   ( int group )  {  if  ( group  >  group count (  )  )  throw new  index out of bounds exception (  )  ;  return  ( group  >  0 )   ?  r . end ( group indexes[group  -  1] )  : r . end (  )  ;   }  
1647,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriPattern.java,equals,@ override public final boolean   (  object obj )  {  if  ( obj  =  =  null )   {  return false ;   }  if  ( get class (  )   !  =  obj . get class (  )  )   {  return false ;   }  final  uri pattern that =  (  uri pattern ) obj ;  if  ( this . regex  !  =  that . regex &&  ( this . regex  =  =  null ||  ! this . regex . equals ( that . rege
1648,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriPattern.java,get group indexes,public final int[]   (  )  {  return group indexes ;   }  
1649,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriPattern.java,get regex,public final  string   (  )  {  return regex ;   }  
1650,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriPattern.java,group,public  string   ( int group )  {  if  ( group  >  group count (  )  )  throw new  index out of bounds exception (  )  ;  return  ( group  >  0 )   ?  r . group ( group indexes[group  -  1] )  : r . group (  )  ;   }  
1651,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriPattern.java,group count,public int   (  )  {  return group indexes . length  -  1 ;   }  
1652,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriPattern.java,hash code,@ override public final int   (  )  {  return regex . hash code (  )  ;   }  
1653,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriPattern.java,match,public final boolean   (  char sequence uri  list <  string >  group names  map <  string  string >  group values )  {  if  ( group values  =  =  null )  throw new  illegal argument exception (  )  ;  if  ( uri  =  =  null || uri . length (  )   =  =  0 )  return  ( regex pattern  =  =  null )   ?  true : false ;  else if  ( regex pattern  =  =  null )  return false ;   matcher m = regex pattern . matcher ( uri )  ;  if  (  ! m . matches (  )  )  return false ;  group values . clear (  )  ;  for  ( int i = 0 ;  i  <  group names . size (  )  ;  i +  +  )   {   string name = group names . get ( i )  ;   string current value = m . group (  ( group indexes . length  >  0 )   ?  group indexes[i] : i  +  1 )  ;   string previous value = group values . get ( name )  ;  if  ( previous value  !  =  null &&  ! previous value . equals ( current value )  )  return false ;  group values . put ( name current value )  ;   }  return true ;   }  
1654,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriPattern.java,start,public int   ( int group )  {  if  ( group  >  group count (  )  )  throw new  index out of bounds exception (  )  ;  return  ( group  >  0 )   ?  r . start ( group indexes[group  -  1] )  : r . start (  )  ;   }  
1655,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriPattern.java,to string,@ override public final  string   (  )  {  return regex ;   }  
1656,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriTemplate.java, uri template,protected   (  uri template parser template parser )  throws  pattern syntax exception   illegal argument exception  {  this . template = template parser . get template (  )  ;  this . normalized template = template parser . get normalized template (  )  ;  this . pattern = create uri pattern ( template parser )  ;  this . num of explicit regexes = template parser . get number of explicit regexes (  )  ;  this . num of characters = template parser . get number of literal characters (  )  ;  this . ends with slash = template . char at ( template . length (  )   -  1 )   =  =  ' / ' ;  this . template variables = template parser . get names (  )  ;  template parser . destroy (  )  ;   }  
1657,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriTemplate.java,compare,public int   (  uri template o1  uri template o2 )  {  if  ( o1  =  =  null && o2  =  =  null )  return 0 ;  if  ( o1  =  =  null )  return 1 ;  if  ( o2  =  =  null )  return  - 1 ;  if  ( o1  =  =  empty && o2  =  =  empty )  return 0 ;  if  ( o1  =  =  empty )  return 1 ;  if  ( o2  =  =  empty )  return  - 1 ;  int i = o2 . get number of explicit characters (  )   -  o1 . get number of explicit characters (  )  ;  if  ( i  !  =  0 )  return i ;  i = o2 . get number of template variables (  )   -  o1 . get number of template variables (  )  ;  if  ( i  !  =  0 )  return i ;  i = o2 . get number of explicit regexes (  )   -  o1 . get number of explicit regexes (  )  ;  if  ( i  !  =  0 )  return i ;  return o2 . pattern . get regex (  )  . compare to ( o1 . pattern . get regex (  )  )  ;   }  
1658,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriTemplate.java,createuri,public final static  string   ( final  string scheme  string authority final  string user info final  string host final  string port final  string path final  string query final  string fragment final  object[] values final boolean encode )  {   string[] string values = new  string[values . length] ;  for  ( int i = 0 ;  i  <  values . length ;  i +  +  )   {  if  ( values[i]  !  =  null )  string values[i] = values[i] . to string (  )  ;   }  return createuri with string values ( scheme authority user info host port path query fragment string values encode )  ;   }  
1659,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriTemplate.java,createuri component,private static int   ( final  uri component .  type t  string template final  string[] values final int offset final boolean encode final  map <  string  string >  map values final  string builder b )  {  if  ( template . index of ( ' { ' )   =  =   - 1 )   {  b . append ( template )  ;  return offset ;   }  template = new  uri template parser ( template )  . get normalized template (  )  ;  final  matcher m = template   names   pattern . matcher ( template )  ;  int v = offset ;  int i = 0 ;  while  ( m . find (  )  )   {  b . append ( template i m . start (  )  )  ;  final  string t variable = m . group ( 1 )  ;   string t value = map values . get ( t variable )  ;  if  ( t value  !  =  null )   {  b . append ( t value )  ;   }  else if  ( v  <  values . length )   {  t value = values[v +  + ] ;  if  ( t value  !  =  null )   {  if  ( encode )  t value =  uri component . encode ( t value t )  ;  else t value =  uri component . contextual encode ( t value t )  ;  map values . put ( t variable t value )  ;  b . append ( t value )  ;   }  else  {  throw template variable has no value ( t variable )  ;   }   }  else  {  throw template variable has no value ( t variable )  ;   }  i = m . end (  )  ;   }  b . append ( template i template . length (  )  )  ;  return v ;   }  
1660,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriTemplate.java,createuri with string values,"public final static  string   ( final  string scheme final  string authority final  string user info final  string host final  string port final  string path final  string query final  string fragment final  string[] values final boolean encode )  {  final  map <  string  string >  map values = new  hash map <  string  string >  (  )  ;  final  string builder sb = new  string builder (  )  ;  int offset = 0 ;  if  ( scheme  !  =  null )   {  offset = createuri component (  uri component .  type . scheme scheme values offset false map values sb )  ;  sb . append ( ':' )  ;   }  if  ( user info  !  =  null || host  !  =  null || port  !  =  null )   {  sb . append ( "" /  / "" )  ;  if  ( user info  !  =  null && user info . length (  )   >  0 )   {  offset = createuri component (  uri component .  type . user   info user info values offset encode map values sb )  ;  sb . append ( '@' )  ;   }  if  ( host  !  =  null )   {  offset = createuri component (  uri component .  type . host host values offset encode map values sb )  ;   }  if  ( port  !  =  null && port . length (  )   >  0 )   {  sb . append ( ':' )  ;  offset = createuri component (  uri component .  type . port port values offset false map values sb )  ;   }   }  else if  ( authority  !  =  null )   {  sb . append ( "" /  / "" )  ;  offset = createuri component (  uri component .  type . authority authority values offset encode map values sb )  ;   }  if  ( path  !  =  null )  offset = createuri component (  uri component .  type . path path values offset encode map values sb )  ;  if  ( query  !  =  null && query . length (  )   >  0 )   {  sb . append ( ' ? ' )  ;  offset = createuri component (  uri component .  type . query   param query values offset encode map values sb )  ;   }  if  ( fragment  !  =  null && fragment . length (  )   >  0 )   {  sb . append ( '#' )  ;  offset = createuri component (  uri component .  type . fragment fragment values offset encode map values sb )  ;   }  return sb . to string (  )  ;   }  "
1661,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriTemplate.java,create uri pattern,protected  uri pattern   (  uri template parser template parser )  {  return new  uri pattern ( template parser . get pattern (  )  template parser . get group indexes (  )  )  ;   }  
1662,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriTemplate.java,destroy,public  uri template   (  )  {  template variables . clear (  )  ;  return this ;   }  
1663,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriTemplate.java,ends with slash,public final boolean   (  )  {  return ends with slash ;   }  
1664,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriTemplate.java,equals,@ override public final boolean   (  object o )  {  if  ( o instanceof  uri template )   {   uri template that =  (  uri template ) o ;  return this . pattern . equals ( that . pattern )  ;   }  else  {  return false ;   }   }  
1665,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriTemplate.java,get number of explicit characters,public final int   (  )  {  return num of characters ;   }  
1666,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriTemplate.java,get number of explicit regexes,public final int   (  )  {  return num of explicit regexes ;   }  
1667,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriTemplate.java,get number of template variables,public final int   (  )  {  return template variables . size (  )  ;   }  
1668,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriTemplate.java,get pattern,public final  uri pattern   (  )  {  return pattern ;   }  
1669,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriTemplate.java,get template,public final  string   (  )  {  return template ;   }  
1670,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriTemplate.java,get template variables,public final  list <  string >    (  )  {  return template variables ;   }  
1671,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriTemplate.java,hash code,@ override public final int   (  )  {  return pattern . hash code (  )  ;   }  
1672,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriTemplate.java,is template variable present,public final boolean   (  string name )  {  for  (   string s : template variables )   {  if  ( s . equals ( name )  )  return true ;   }  return false ;   }  
1673,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriTemplate.java,match,public final boolean   (  char sequence uri  list <  string >  group values )  throws  illegal argument exception  {  if  ( group values  =  =  null )  throw new  illegal argument exception (  )  ;  return pattern . match ( uri group values )  ;   }  
1674,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriTemplate.java,template variable has no value,"private static  illegal argument exception   (  string t variable )  {  return new  illegal argument exception ( "" the template variable  ""  +  t variable  +  ""  has no value"" )  ;   }  "
1675,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriTemplate.java,to string,@ override public final  string   (  )  {  return pattern . to string (  )  ;   }  
1676,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriComponent.java, path segment impl,  (  string path boolean decode  map <  string  string >  matrix parameters )  {  this . path =  ( decode )   ?   uri component . decode ( path  uri component .  type . path   segment )  : path ;  this . matrix parameters = matrix parameters ;   }  
1677,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriComponent.java,   encode,private static  string   (  string s  type t boolean template boolean contextual encode )  {  final boolean[] table = encoding   tables[t . ordinal (  ) ] ;   string builder sb = null ;  for  ( int i = 0 ;  i  <  s . length (  )  ;  i +  +  )   {  final char c = s . char at ( i )  ;  if  ( c  <  0x80 && table[c] )   {  if  ( sb  !  =  null )  sb . append ( c )  ;   }  else  {  if  ( template &&  ( c  =  =  ' { ' || c  =  =  ' } ' )  )   {  if  ( sb  !  =  null )  sb . append ( c )  ;  continue ;   }  else if  ( contextual encode )   {  if  ( c  =  =  '%' && i  +  2  <  s . length (  )  )   {  if  ( is hex character ( s . char at ( i  +  1 )  )  && is hex character ( s . char at ( i  +  2 )  )  )   {  if  ( sb  !  =  null )  sb . append ( '%' )  . append ( s . char at ( i  +  1 )  )  . append ( s . char at ( i  +  2 )  )  ;  i +  = 2 ;  continue ;   }   }   }  if  ( sb  =  =  null )   {  sb = new  string builder (  )  ;  sb . append ( s . substring ( 0 i )  )  ;   }  if  ( c  <  0x80 )   {  if  ( c  =  =  ' ' &&  ( t  =  =   type . query   param )  )   {  sb . append ( ' + ' )  ;   }  else  {  append percent encoded octet ( sb c )  ;   }   }  else  {  appendutf8 encoded character ( sb c )  ;   }   }   }  return  ( sb  =  =  null )   ?  s : sb . to string (  )  ;   }  
1678,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriComponent.java,   valid,private static int   (  string s  type t boolean template )  {  boolean[] table = encoding   tables[t . ordinal (  ) ] ;  for  ( int i = 0 ;  i  <  s . length (  )  ;  i +  +  )   {  final char c = s . char at ( i )  ;  if  (  ( c  <  0x80 && c  !  =  '%' &&  ! table[c] )  || c  >  =  0x80 )   {  if  (  ! template ||  ( c  !  =  ' { ' && c  !  =  ' } ' )  )   {  return i ;   }   }   }  return  - 1 ;   }  
1679,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriComponent.java,append percent encoded octet,private static void   (  string builder sb int b )  {  sb . append ( '%' )  ;  sb . append ( hex   digits[b  >  >  4] )  ;  sb . append ( hex   digits[b & 0x0f] )  ;   }  
1680,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriComponent.java,appendutf encoded character,"private static void   (  string builder sb char c )  {  final  byte buffer bb = utf   8   charset . encode ( """"  +  c )  ;  while  ( bb . has remaining (  )  )   {  append percent encoded octet ( sb bb . get (  )  & 0xff )  ;   }   }  "
1681,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriComponent.java,contextual encode,public static  string   (  string s  type t boolean template )  {  return    encode ( s t template true )  ;   }  
1682,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriComponent.java,create hex table,private static int[]   (  )  {  int[] table = new int[0x80] ;   arrays . fill ( table  - 1 )  ;  for  ( char c = '0' ;  c  <  =  '9' ;  c +  +  )   {  table[c] = c  -  '0' ;   }  for  ( char c = 'a' ;  c  <  =  'f' ;  c +  +  )   {  table[c] = c  -  'a'  +  10 ;   }  for  ( char c = 'a' ;  c  <  =  'f' ;  c +  +  )   {  table[c] = c  -  'a'  +  10 ;   }  return table ;   }  
1683,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriComponent.java,creating encoding table,private static boolean[]   (  list <  string >  allowed )  {  boolean[] table = new boolean[0x80] ;  for  (   string range : allowed )   {  if  ( range . length (  )   =  =  1 )   {  table[range . char at ( 0 ) ] = true ;   }  else if  ( range . length (  )   =  =  3 && range . char at ( 1 )   =  =  ' - ' )   {  for  ( int i = range . char at ( 0 )  ;  i  <  =  range . char at ( 2 )  ;  i +  +  )   {  table[i] = true ;   }   }   }  return table ;   }  
1684,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriComponent.java,creating encoding tables,"private static boolean[][]   (  )  {  boolean[][] tables = new boolean[ type . values (  )  . length][] ;   list <  string >  l = new  array list <  string >  (  )  ;  l . add all (  arrays . as list ( scheme )  )  ;  tables[ type . scheme . ordinal (  ) ] = creating encoding table ( l )  ;  l . clear (  )  ;  l . add all (  arrays . as list ( unreserved )  )  ;  tables[ type . unreserved . ordinal (  ) ] = creating encoding table ( l )  ;  l . add all (  arrays . as list ( sub   delims )  )  ;  tables[ type . host . ordinal (  ) ] = creating encoding table ( l )  ;  tables[ type . port . ordinal (  ) ] = creating encoding table (  arrays . as list ( ""0 - 9"" )  )  ;  l . add ( "":"" )  ;  tables[ type . user   info . ordinal (  ) ] = creating encoding table ( l )  ;  l . add ( ""@"" )  ;  tables[ type . authority . ordinal (  ) ] = creating encoding table ( l )  ;  tables[ type . path   segment . ordinal (  ) ] = creating encoding table ( l )  ;  tables[ type . path   segment . ordinal (  ) ][' ; '] = false ;  tables[ type . matrix   param . ordinal (  ) ] = tables[ type . path   segment . ordinal (  ) ] . clone (  )  ;  tables[ type . matrix   param . ordinal (  ) ][' = '] = false ;  l . add ( "" / "" )  ;  tables[ type . path . ordinal (  ) ] = creating encoding table ( l )  ;  l . add ( "" ? "" )  ;  tables[ type . query . ordinal (  ) ] = creating encoding table ( l )  ;  tables[ type . fragment . ordinal (  ) ] = tables[ type . query . ordinal (  ) ] ;  tables[ type . query   param . ordinal (  ) ] = creating encoding table ( l )  ;  tables[ type . query   param . ordinal (  ) ][' = '] = false ;  tables[ type . query   param . ordinal (  ) ][' + '] = false ;  tables[ type . query   param . ordinal (  ) ]['&'] = false ;  return tables ;   }  "
1685,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriComponent.java,decode,private static  string   (  string s int n )  {  final  string builder sb = new  string builder ( n )  ;   byte buffer bb = null ;  for  ( int i = 0 ;  i  <  n ;   )   {  final char c = s . char at ( i +  +  )  ;  if  ( c  !  =  '%' )   {  sb . append ( c )  ;   }  else  {  bb = decode percent encoded octets ( s i bb )  ;  i = decode octets ( i bb sb )  ;   }   }  return sb . to string (  )  ;   }  
1686,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriComponent.java,decode hex,private static int   ( char c )  {  return  ( c  <  128 )   ?  hex   table[c] :  - 1 ;   }  
1687,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriComponent.java,decode host,private static  string   (  string s int n )  {  final  string builder sb = new  string builder ( n )  ;   byte buffer bb = null ;  boolean between brackets = false ;  for  ( int i = 0 ;  i  <  n ;   )   {  final char c = s . char at ( i +  +  )  ;  if  ( c  =  =  '[' )   {  between brackets = true ;   }  else if  ( between brackets && c  =  =  ']' )   {  between brackets = false ;   }  if  ( c  !  =  '%' || between brackets )   {  sb . append ( c )  ;   }  else  {  bb = decode percent encoded octets ( s i bb )  ;  i = decode octets ( i bb sb )  ;   }   }  return sb . to string (  )  ;   }  
1688,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriComponent.java,decode matrix,public static  map <  string  string >    (  string path segment boolean decode )  {   map <  string  string >  matrix map = new  hash map <  string  string >  (  )  ;  int s = path segment . index of ( ' ; ' )   +  1 ;  if  ( s  =  =  0 || s  =  =  path segment . length (  )  )   {  return matrix map ;   }  int e = 0 ;  do  {  e = path segment . index of ( ' ; ' s )  ;  if  ( e  =  =   - 1 )   {  decode matrix param ( matrix map path segment . substring ( s )  decode )  ;   }  else if  ( e  >  s )   {  decode matrix param ( matrix map path segment . substring ( s e )  decode )  ;   }  s = e  +  1 ;   }  while  ( s  >  0 && s  <  path segment . length (  )  )  ;  return matrix map ;   }  
1689,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriComponent.java,decode matrix param,"private static void   (  map <  string  string >  params  string param boolean decode )  {  int equals = param . index of ( ' = ' )  ;  if  ( equals  >  0 )   {  params . put (  uri component . decode ( param . substring ( 0 equals )   uri component .  type . matrix   param )   ( decode )   ?   uri component . decode ( param . substring ( equals  +  1 )   uri component .  type . matrix   param )  : param . substring ( equals  +  1 )  )  ;   }  else if  ( equals  =  =  0 )   {   }  else if  ( param . length (  )   >  0 )   {  params . put (  uri component . decode ( param  uri component .  type . matrix   param )  """" )  ;   }   }  "
1690,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriComponent.java,decode octets,private static int   ( int i  byte buffer bb  string builder sb )  {  if  ( bb . limit (  )   =  =  1 &&  ( bb . get ( 0 )  & 0xff )   <  0x80 )   {  sb . append (  ( char ) bb . get ( 0 )  )  ;  return i  +  2 ;   }  else  {   char buffer cb = utf   8   charset . decode ( bb )  ;  sb . append ( cb . to string (  )  )  ;  return i  +  bb . limit (  )  * 3  -  1 ;   }   }  
1691,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriComponent.java,decode path,public static  list <  path segment impl >    (  string path boolean decode )  {   list <  path segment impl >  segments = new  linked list <  path segment impl >  (  )  ;  if  ( path  =  =  null )   {  return segments ;   }  int s = 0 ;  int e =  - 1 ;  do  {  s = e  +  1 ;  e = path . index of ( ' / ' s )  ;  if  ( e  >  s )   {  decode path segment ( segments path . substring ( s e )  decode )  ;   }  else if  ( e  =  =  s )   {  segments . add (  path segment impl . empty   path   segment )  ;   }   }  while  ( e  !  =   - 1 )  ;  if  ( s  <  path . length (  )  )   {  decode path segment ( segments path . substring ( s )  decode )  ;   }  else  {  segments . add (  path segment impl . empty   path   segment )  ;   }  return segments ;   }  
1692,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriComponent.java,decode path segment,"public static void   (  list <  path segment impl >  segments  string segment boolean decode )  {  int colon = segment . index of ( ' ; ' )  ;  if  ( colon  !  =   - 1 )   {  segments . add ( new  path segment impl (  ( colon  =  =  0 )   ?  """" : segment . substring ( 0 colon )  decode decode matrix ( segment decode )  )  )  ;   }  else  {  segments . add ( new  path segment impl ( segment decode )  )  ;   }   }  "
1693,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriComponent.java,decode percent encoded octets,private static  byte buffer   (  string s int i  byte buffer bb )  {  if  ( bb  =  =  null )  bb =  byte buffer . allocate ( 1 )  ;  else bb . clear (  )  ;  while  ( true )   {  bb . put (  ( byte )  ( decode hex ( s i +  +  )   <  <  4 | decode hex ( s i +  +  )  )  )  ;  if  ( i  =  =  s . length (  )  )   {  break ;   }  if  ( s . char at ( i +  +  )   !  =  '%' )   {  break ;   }  if  ( bb . position (  )   =  =  bb . capacity (  )  )   {  bb . flip (  )  ;   byte buffer bb   new =  byte buffer . allocate ( s . length (  )   /  3 )  ;  bb   new . put ( bb )  ;  bb = bb   new ;   }   }  bb . flip (  )  ;  return bb ;   }  
1694,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriComponent.java,decode query,public static  map <  string  string >    (  string q boolean decode )  {   map <  string  string >  query parameters = new  hash map <  string  string >  (  )  ;  if  ( q  =  =  null || q . length (  )   =  =  0 )   {  return query parameters ;   }  int s = 0  e = 0 ;  do  {  e = q . index of ( '&' s )  ;  if  ( e  =  =   - 1 )   {  decode query param ( query parameters q . substring ( s )  decode )  ;   }  else if  ( e  >  s )   {  decode query param ( query parameters q . substring ( s e )  decode )  ;   }  s = e  +  1 ;   }  while  ( s  >  0 && s  <  q . length (  )  )  ;  return query parameters ;   }  
1695,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriComponent.java,decode query param,private static  string   (  string s int n )  {  final  string builder sb = new  string builder ( n )  ;   byte buffer bb = null ;  for  ( int i = 0 ;  i  <  n ;   )   {  final char c = s . char at ( i +  +  )  ;  if  ( c  !  =  '%' )   {  if  ( c  !  =  ' + ' )  sb . append ( c )  ;  else sb . append ( ' ' )  ;   }  else  {  bb = decode percent encoded octets ( s i bb )  ;  i = decode octets ( i bb sb )  ;   }   }  return sb . to string (  )  ;   }  
1696,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriComponent.java,encode,public static  string   (  string s  type t boolean template )  {  return    encode ( s t template false )  ;   }  
1697,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriComponent.java,encode template names,"public static  string   (  string s )  {  int i = s . index of ( ' { ' )  ;  if  ( i  !  =   - 1 )  s = s . replace ( "" { "" ""%7b"" )  ;  i = s . index of ( ' } ' )  ;  if  ( i  !  =   - 1 )  s = s . replace ( "" } "" ""%7d"" )  ;  return s ;   }  "
1698,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriComponent.java,get matrix parameters,public  map <  string  string >    (  )  {  return matrix parameters ;   }  
1699,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriComponent.java,get path,public  string   (  )  {  return path ;   }  
1700,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriComponent.java,is hex character,private static boolean   ( char c )  {  return c  <  128 && hex   table[c]  !  =   - 1 ;   }  
1701,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriComponent.java,valid,public static boolean   (  string s  type t boolean template )  {  return    valid ( s t template )   =  =   - 1 ;   }  
1702,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriComponent.java,validate,"public static void   (  string s  type t boolean template )  {  int i =    valid ( s t template )  ;  if  ( i  >   - 1 )   {  throw new  illegal argument exception ( "" the string '""  +  s  +  ""' for the uri component "" +  t +  "" contains an invalid character  '"" +  s . char at ( i )  +  ""'  at index "" +  i )  ;   }   }  "
1703,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriTemplateParser.java, string character iterator,public   (  string s )  {  this . s = s ;   }  
1704,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriTemplateParser.java, uri template parser,"public   (  string template )  {  if  ( template  =  =  null || template . length (  )   =  =  0 )  throw new  illegal argument exception (  )  ;  this . template = template ;  parse ( new  string character iterator ( template )  )  ;  try  {  pattern =  pattern . compile ( regex . to string (  )  )  ;   }  catch  (   pattern syntax exception ex )   {  throw new  illegal argument exception ( "" invalid syntax for the template expression '""  +  regex  +  ""'"" ex )  ;   }   }  "
1705,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriTemplateParser.java,consume white space,private char   (  character iterator ci )  {  char c = ci . next (  )  ;  while  ( c  =  =  ' ' )  c = ci . next (  )  ;  return c ;   }  
1706,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriTemplateParser.java,create reserved,private static  set <  character >    (  )  {  char[] reserved =  { ' . ' ' ? ' ' ( ' ' ) ' }  ;   set <  character >  s = new  hash set <  character >  ( reserved . length )  ;  for  (  char c : reserved )  s . add ( c )  ;  return s ;   }  
1707,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriTemplateParser.java,destroy,public  uri template parser   (  )  {  names . clear (  )  ;  group counts . clear (  )  ;  name to pattern . clear (  )  ;  regex . set length ( 0 )  ;  normalized template . set length ( 0 )  ;  literal characters buffer . set length ( 0 )  ;  return this ;   }  
1708,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriTemplateParser.java,encode literal characters,protected  string   (  string literal characters )  {  return literal characters ;   }  
1709,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriTemplateParser.java,get group counts,public final  list <  integer >    (  )  {  return group counts ;   }  
1710,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriTemplateParser.java,get group indexes,public final int[]   (  )  {  if  ( names . is empty (  )  )  return empty   int   array ;  int[] indexes = new int[names . size (  )   +  1] ;  indexes[0] = 1 ;  for  ( int i = 1 ;  i  <  indexes . length ;  i +  +  )   {  indexes[i] = indexes[i  -  1]  +  group counts . get ( i  -  1 )  ;   }  for  ( int i = 0 ;  i  <  indexes . length ;  i +  +  )   {  if  ( indexes[i]  !  =  i  +  1 )  return indexes ;   }  return empty   int   array ;   }  
1711,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriTemplateParser.java,get name to pattern,public final  map <  string  pattern >    (  )  {  return name to pattern ;   }  
1712,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriTemplateParser.java,get names,public final  list <  string >    (  )  {  return names ;   }  
1713,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriTemplateParser.java,get normalized template,public final  string   (  )  {  return normalized template . to string (  )  ;   }  
1714,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriTemplateParser.java,get number of explicit regexes,public final int   (  )  {  return num of explicit regexes ;   }  
1715,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriTemplateParser.java,get number of literal characters,public final int   (  )  {  return literal characters ;   }  
1716,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriTemplateParser.java,get pattern,public final  pattern   (  )  {  return pattern ;   }  
1717,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriTemplateParser.java,get template,public final  string   (  )  {  return template ;   }  
1718,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriTemplateParser.java,has next,public boolean   (  )  {  return pos  <  s . length (  )  ;   }  
1719,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriTemplateParser.java,next,public char   (  )  {  if  (  ! has next (  )  )  throw new  no such element exception (  )  ;  return s . char at ( pos +  +  )  ;   }  
1720,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriTemplateParser.java,parse,"private void   (  character iterator ci )  {  try  {  while  ( ci . has next (  )  )   {  char c = ci . next (  )  ;  if  ( c  =  =  ' { ' )   {  process literal characters (  )  ;  parse name ( ci )  ;   }  else  {  literal characters buffer . append ( c )  ;   }   }  process literal characters (  )  ;   }  catch  (   no such element exception ex )   {  throw new  illegal argument exception ( "" invalid syntax for the template  \""""  +  template  +  ""\"" .   check if a path parameter is terminated with a ' } ' . "" ex )  ;   }   }  "
1721,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriTemplateParser.java,parse name,"private void   (  character iterator ci )  {  char c = consume white space ( ci )  ;   string builder name buffer = new  string builder (  )  ;  if  (  character . is letter or digit ( c )  || c  =  =  '   ' )   {  name buffer . append ( c )  ;   }  else  {  throw new  illegal argument exception ( "" illegal character '""  +  c  +  ""' at position "" +  ci . pos (  )  +  "" is not as the start of a name"" )  ;   }   string name regex string = """" ;  while  ( true )   {  c = ci . next (  )  ;  if  (  character . is letter or digit ( c )  || c  =  =  '   ' || c  =  =  ' - ' || c  =  =  ' . ' )   {  name buffer . append ( c )  ;   }  else if  ( c  =  =  ':' )   {  name regex string = parse regex ( ci )  ;  break ;   }  else if  ( c  =  =  ' } ' )   {  break ;   }  else if  ( c  =  =  ' ' )   {  c = consume white space ( ci )  ;  if  ( c  =  =  ':' )   {  name regex string = parse regex ( ci )  ;  break ;   }  else if  ( c  =  =  ' } ' )   {  break ;   }  else  {  throw new  illegal argument exception ( "" illegal character '""  +  c  +  ""' at position "" +  ci . pos (  )  +  "" is not allowed after a name"" )  ;   }   }  else  {  throw new  illegal argument exception ( "" illegal character '""  +  c  +  ""' at position "" +  ci . pos (  )  +  "" is not allowed as part of a name"" )  ;   }   }   string name = name buffer . to string (  )  ;  names . add ( name )  ;  try  {  if  ( name regex string . length (  )   >  0 )  num of explicit regexes +  +  ;   pattern name pattern =  ( name regex string . length (  )   =  =  0 )   ?  template   value   pattern :  pattern . compile ( name regex string )  ;  if  ( name to pattern . contains key ( name )  )   {  if  (  ! name to pattern . get ( name )  . equals ( name pattern )  )   {  throw new  illegal argument exception ( "" the name '""  +  name  +  ""' is declared "" +  ""more than once with different regular expressions"" )  ;   }   }  else  {  name to pattern . put ( name name pattern )  ;   }   matcher m = name pattern . matcher ( """" )  ;  int g = m . group count (  )  ;  group counts . add ( g  +  1 )  ;  regex . append ( ' ( ' )  . append ( name pattern )  . append ( ' ) ' )  ;  normalized template . append ( ' { ' )  . append ( name )  . append ( ' } ' )  ;   }  catch  (   pattern syntax exception ex )   {  throw new  illegal argument exception ( "" invalid syntax for the expression '""  +  name regex string  +  ""' associated with the name '"" +  name +  ""'"" ex )  ;   }   }  "
1722,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriTemplateParser.java,parse regex,private  string   (  character iterator ci )  {   string builder regex buffer = new  string builder (  )  ;  int brace count = 1 ;  while  ( true )   {  char c = ci . next (  )  ;  if  ( c  =  =  ' { ' )   {  brace count +  +  ;   }  else if  ( c  =  =  ' } ' )   {  brace count -  -  ;  if  ( brace count  =  =  0 )  break ;   }  regex buffer . append ( c )  ;   }  return regex buffer . to string (  )  . trim (  )  ;   }  
1723,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriTemplateParser.java,peek,public char   (  )  {  if  (  ! has next (  )  )  throw new  no such element exception (  )  ;  return s . char at ( pos +  +  )  ;   }  
1724,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriTemplateParser.java,pos,public int   (  )  {  if  ( pos  =  =  0 )  return 0 ;  return pos  -  1 ;   }  
1725,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriTemplateParser.java,process literal characters,"private void   (  )  {  if  ( literal characters buffer . length (  )   >  0 )   {  literal characters +  = literal characters buffer . length (  )  ;   string s = encode literal characters ( literal characters buffer . to string (  )  )  ;  normalized template . append ( s )  ;  for  ( int i = 0 ;  i  <  s . length (  )  ;  i +  +  )   {  char c = s . char at ( i )  ;  if  ( reserved   regex   characters . contains ( c )  )  regex . append ( ""\\"" )  ;  regex . append ( c )  ;   }  literal characters buffer . set length ( 0 )  ;   }   }  "
1726,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\Utils.java,atmosphere protocol,public final static boolean   (  atmosphere request r )  {   string p = r . get header (  header config . x   atmo   protocol )  ;  return  ( p  !  =  null &&  boolean . value of ( p )  )  ;   }  
1727,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\Utils.java,close message,public static final boolean   (  http servlet request request )  {   string s = request . get header (  header config . x   atmosphere   transport )  ;  return s  !  =  null && s . equals ignore case (  header config . disconnect   transport   message )  ;   }  
1728,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\Utils.java,firefox web socket enabled,"public final static boolean   (  http servlet request request )  {  return web socket enabled ( request )  && request . get header (  header config . x   atmo   protocol )   !  =  null && request . get header (  header config . x   atmo   protocol )  . equals ( ""true"" )  && request . get header ( "" user -  agent"" )   !  =  null && request . get header ( "" user -  agent"" )  . to lower case (  )  . index of ( ""firefox"" )   !  =   - 1 ;   }  "
1729,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\Utils.java,get inherited private fields,public final static  set <  field >    (  class <  ?  >  type )  {   set <  field >  result = new  hash set <  field >  (  )  ;   class <  ?  >  i = type ;  while  ( i  !  =  null && i  !  =   object . class )   {  for  (   field field : i . get declared fields (  )  )   {  if  (  ! field . is synthetic (  )  )   {  result . add ( field )  ;   }   }  i = i . get superclass (  )  ;   }  return result ;   }  
1730,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\Utils.java,get inherited private method,public final static  set <  method >    (  class <  ?  >  type )  {   set <  method >  result = new  hash set <  >  (  )  ;   class <  ?  >  i = type ;  while  ( i  !  =  null && i  !  =   object . class )   {  for  (   method m : i . get declared methods (  )  )   {  if  (  ! m . is synthetic (  )  )   {  result . add ( m )  ;   }   }  i = i . get superclass (  )  ;   }  return result ;   }  
1731,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\Utils.java,inject,public static final void   (  object object  class clazz  atmosphere config config )  throws  illegal access exception  {   injectable object factory . class . cast ( config . framework (  )  . object factory (  )  )  . request scoped ( object clazz )  ;   }  
1732,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\Utils.java,inject with,private static  object   (  atmosphere handler h )  {  if  (  annotated proxy . class . is assignable from ( h . get class (  )  )  )   {  return  annotated proxy . class . cast ( h )  . target (  )  ;   }  else if  (  reflector servlet processor . class . is assignable from ( h . get class (  )  )  )   {  return  reflector servlet processor . class . cast ( h )  . get servlet (  )  ;   }  else  {  return h ;   }   }  
1733,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\Utils.java,invoke,"public static  object   ( final  object proxied instance  method m  object o )  {  if  ( m  !  =  null )   {  try  {  return m . invoke ( proxied instance  ( o  =  =  null || m . get parameter types (  )  . length  =  =  0 )   ?  new  object[] {  }  : new  object[] { o }  )  ;   }  catch  (   illegal access exception e )   {  logger . debug ( """" e )  ;   }  catch  (   invocation target exception e )   {  logger . debug ( """" e )  ;   }   }  logger . trace ( "" no  method  mapped for  {  } "" o )  ;  return null ;   }  "
1734,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\Utils.java,path info,"public static  string   (  atmosphere request request )  {   string path info = null ;   string path = null ;  try  {  path info = request . get path info (  )  ;   }  catch  (   illegal state exception ex )   {   }  if  ( path info  !  =  null )   {  path = request . get servlet path (  )   +  path info ;   }  else  {  path = request . get servlet path (  )  ;   }  if  ( path  =  =  null || path . is empty (  )  )   {  path = "" / "" ;   }  return path ;   }  "
1735,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\Utils.java,pollable transport,public final static boolean   (  atmosphere resource . transport t )  {  switch  ( t )   {  case polling: case close: case ajax: return true ;  default : return false ;   }   }  
1736,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\Utils.java,proper protocol,"public static boolean   (  http servlet request request )  {   enumeration <  string >  connection = request . get headers ( "" connection"" )  ;  if  ( connection  =  =  null ||  ! connection . has more elements (  )  )   {  connection = request . get headers ( ""connection"" )  ;   }  boolean isok = false ;  boolean is web socket =  ( request . get header ( websocket   version )   !  =  null || request . get header ( "" sec -  web socket -  draft"" )   !  =  null )  ;  if  ( connection  !  =  null && connection . has more elements (  )  )   {   string[] e = connection . next element (  )  . to string (  )  . split ( "" "" )  ;  for  (   string upgrade : e )   {  if  ( upgrade . trim (  )  . equals ignore case ( ""upgrade"" )  )   {  isok = true ;   }   }   }  return is web socket  ?  isok : true ;   }  "
1737,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\Utils.java,push message,public final static boolean   (  atmosphere resource . transport t )  {  switch  ( t )   {  case polling: case undefined: case ajax: return true ;  default : return false ;   }   }  
1738,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\Utils.java,raw web socket,"public final static boolean   (  http servlet request request )  {   enumeration <  string >  connection = request . get headers ( "" connection"" )  ;  if  ( connection  =  =  null ||  ! connection . has more elements (  )  )   {  connection = request . get headers ( ""connection"" )  ;   }  if  ( connection  !  =  null && connection . has more elements (  )  )   {   string[] e = connection . next element (  )  . to string (  )  . split ( "" "" )  ;  for  (   string upgrade : e )   {  if  ( upgrade . trim (  )  . equals ignore case ( websocket   upgrade )  )   {  return true ;   }   }   }  return false ;   }  "
1739,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\Utils.java,request scoped injection,"public static final boolean   (  atmosphere config config  object o )  {   atmosphere object factory injectable factory = config . framework (  )  . object factory (  )  ;  if  (  !  injectable object factory . class . is assignable from ( injectable factory . get class (  )  )  )   {  return false ;   }  try  {  return  injectable object factory . class . cast ( config . framework (  )  . object factory (  )  )  . need request scoped ( o . get class (  )  )  ;   }  catch  (   exception var4 )   {  logger . error ( """" var4 )  ;  return false ;   }   }  "
1740,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\Utils.java,resumable transport,public final static boolean   (  atmosphere resource . transport t )  {  switch  ( t )   {  case jsonp: case long   polling: return true ;  default : return false ;   }   }  
1741,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\Utils.java,two connections transport,public final static boolean   (  atmosphere resource . transport t )  {  switch  ( t )   {  case jsonp: case long   polling: case streaming: case sse: case polling: case htmlfile: return true ;  default : return false ;   }   }  
1742,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\Utils.java,web socket enabled,public final static boolean   (  http servlet request request )  {  if  ( close message ( request )  ||  ! web socket query string present or null ( request )  )  return false ;  boolean allow web socket without headers = request . get header (  header config . x   atmo   websocket   proxy )   !  =  null  ?  true : false ;  if  ( allow web socket without headers )  return true ;  boolean web socket enabled = raw web socket ( request )  ;  return web socket enabled ;   }  
1743,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\Utils.java,web socket message,public final static boolean   (  atmosphere resource r )  {   atmosphere request request =  atmosphere resource impl . class . cast ( r )  . get request ( false )  ;  return request . get attribute (  framework config . websocket   message )   !  =  null ;   }  
1744,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\Utils.java,web socket query string present or null,public final static boolean   (  http servlet request request )  {   string transport = request . get header (  header config . x   atmosphere   transport )  ;  if  ( transport  =  =  null )   {  return true ;   }  else  {  return transport . equals ignore case (  header config . websocket   transport )  ;   }   }  
1745,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\Utils.java,websocket resource,public static final  atmosphere resource   (  atmosphere resource r )  {   string parentuuid =  (  string )  atmosphere resource impl . class . cast ( r )  . get request ( false )  . get attribute ( suspended   atmosphere   resource   uuid )  ;  if  ( parentuuid  !  =  null )   {   atmosphere resource resource = r . get atmosphere config (  )  . resources factory (  )  . find ( parentuuid )  ;  if  ( resource  !  =  null )   {  r = resource ;   }   }  return r ;   }  
1746,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\ThreadLocalInvoker.java,get,public t   (  )  {  return this . thread local instance . get (  )  ;   }  
1747,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\ThreadLocalInvoker.java,invoke,"public  object   (  object proxy  method method  object[] args )  throws  throwable  {  if  ( thread local instance . get (  )   =  =  null )   {  throw new  illegal state exception ( "" no thread local""  +  proxy . get class (  )  )  ;   }  try  {  return method . invoke ( thread local instance . get (  )  args )  ;   }  catch  (   illegal access exception ex )   {  throw new  illegal state exception ( ex )  ;   }  catch  (   invocation target exception ex )   {  throw ex . get target exception (  )  ;   }   }  "
1748,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\ThreadLocalInvoker.java,set,public void   ( t thread local instance )  {  this . thread local instance . set ( thread local instance )  ;   }  
1749,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\Version.java,equal version,public static boolean   ( int major int minor )  {  return minor  =  =   version . minor && major  =  =   version . major ;   }  
1750,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\Version.java,get doted version,public static  string   (  )  {  return doted version ;   }  
1751,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\Version.java,get major version,public static int   (  )  {  return major ;   }  
1752,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\Version.java,get micro version,public static int   (  )  {  return micro ;   }  
1753,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\Version.java,get minor version,public static int   (  )  {  return minor ;   }  
1754,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\Version.java,get raw version,public static  string   (  )  {  return version ;   }  
1755,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\Version.java,main,public static void   (  string[] args )  {   system . out . println (  version . get doted version (  )  )  ;   }  
1756,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\VoidAnnotationProcessor.java,scan,@ override public  annotation processor   (  string package name )  throws io exception  {  return this ;   }  
1757,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\VoidAnnotationProcessor.java,scan all,@ override public  annotation processor   (  )  throws io exception  {  return this ;   }  
1758,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\VoidServletConfig.java, void servlet config,public   (  map <  string  string >  init params )  {  this . init params = init params ;   }  
1759,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\VoidServletConfig.java,get init parameter,@ override public  string   (  string name )  {  return init params . get ( name )  ;   }  
1760,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\VoidServletConfig.java,get init parameter names,@ override public  enumeration <  string >    (  )  {  return  collections . enumeration ( init params . values (  )  )  ;   }  
1761,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\VoidServletConfig.java,get servlet context,@ override public  servlet context   (  )  {  return  (  servlet context )  proxy . new proxy instance ( get class (  )  . get class loader (  )  new  class[] {  servlet context . class }  new  invocation handler (  )  {  @ override public  object invoke (   object proxy   method method   object[] args )  throws  th
1762,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\VoidServletConfig.java,get servlet name,@ override public  string   (  )  {  return atmosphere   servlet ;   }  
1763,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\VoidServletConfig.java,invoke,@ override public  object   (  object proxy  method method  object[] args )  throws  throwable  {  return  servlet proxy factory . get default (  )  . proxy ( proxy method args )  ;   }  
1764,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\WebDotXmlReader.java, web dot xml reader,public   (  input stream stream )  {   document builder factory factory =  document builder factory . new instance (  )  ;  try  {  parse ( factory . new document builder (  )  . parse ( stream )  )  ;   }  catch  (  sax exception e )   {  logger . error ( e . get message (  )  e )  ;  throw new  runtime exception ( e )  ;   }  catch  (  io exception e )   {  logger . error ( e . get message (  )  e )  ;  throw new  runtime exception ( e )  ;   }  catch  (   parser configuration exception e )   {  logger . error ( e . get message (  )  e )  ;  throw new  runtime exception ( e )  ;   }   }  
1765,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\WebDotXmlReader.java,get mappings,public  array list <  string >    (  )  {  return mappings ;   }  
1766,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\WebDotXmlReader.java,parse,"private void   (  document document )  {   element element = document . get document element (  )  ;   node list servlets = element . get elements by tag name ( ""servlet"" )  ;   string atmosphere servlet name = null ;  for  ( int i = 0 ;  i  <  servlets . get length (  )  ;  i +  +  )   {   node m = servlets . item ( i )  ;   node list list = m . get child nodes (  )  ;  for  ( int j = 0 ;  j  <  list . get length (  )  ;  j +  +  )   {   node n = list . item ( j )  ;  if  ( n . get node name (  )  . equals ( ""servlet - name"" )  )   {  atmosphere servlet name = n . get first child (  )  . get node value (  )  ;   }  if  ( n . get node name (  )  . equals ( ""servlet - class"" )  )   {  if  ( n . get first child (  )  . get node value (  )  . equals (  framework config . atmosphere   servlet )  )   {  break ;   }   }   }   }   node list servlet mappings = element . get elements by tag name ( ""servlet - mapping"" )  ;  for  ( int i = 0 ;  i  <  servlet mappings . get length (  )  ;  i +  +  )   {   node m = servlet mappings . item ( i )  ;   node list list = m . get child nodes (  )  ;   string url mapping = null ;   string servlet name = null ;  for  ( int j = 0 ;  j  <  list . get length (  )  ;  j +  +  )   {   node n = list . item ( j )  ;  if  ( n . get node name (  )  . equals ( ""servlet - name"" )  )   {  servlet name = n . get first child (  )  . get node value (  )  ;  if  (  ! servlet name . equals ( atmosphere servlet name )  )   {  servlet name = null ;   }   }  if  ( n . get node name (  )  . equals ( ""url - pattern"" )  )   {  url mapping = n . get first child (  )  . get node value (  )  ;   }  if  ( servlet name  !  =  null && url mapping  !  =  null )   {  mappings . add ( url mapping )  ;  servlet name = null ;  url mapping = null ;   }   }   }   }  "
1767,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\DefaultWebSocketFactory.java,find,@ override public  web socket   (  string uuid )  {   atmosphere resource r = factory . find ( uuid )  ;  if  ( r  !  =  null )   {  return  atmosphere resource impl . class . cast ( r )  . web socket (  )  ;   }  return null ;   }  
1768,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\VoidExecutorService.java,await termination,@ override public boolean   ( long l  time unit time unit )  throws  interrupted exception  {  return false ;   }  
1769,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\VoidExecutorService.java,execute,@ override public void   (  runnable runnable )  {  runnable . run (  )  ;   }  
1770,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\VoidExecutorService.java,invoke all,@ override public  < t >  list <  future < t >  >    (  collection <  ?  extends  callable < t >  >  callables long l  time unit time unit )  throws  interrupted exception  {  throw new  unsupported operation exception (  )  ;   }  
1771,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\VoidExecutorService.java,invoke any,@ override public  < t > t   (  collection <  ?  extends  callable < t >  >  callables long l  time unit time unit )  throws  interrupted exception   execution exception   timeout exception  {  throw new  unsupported operation exception (  )  ;   }  
1772,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\VoidExecutorService.java,is shutdown,@ override public boolean   (  )  {  return false ;   }  
1773,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\VoidExecutorService.java,is terminated,@ override public boolean   (  )  {  return false ;   }  
1774,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\VoidExecutorService.java,shutdown now,@ override public  list <  runnable >    (  )  {  return null ;   }  
1775,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\VoidExecutorService.java,submit,@ override public  future <  ?  >    (  runnable runnable )  {  runnable . run (  )  ;  return null ;   }  
1776,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\XSSHtmlFilter.java,filter,"public  broadcast action   (  string broadcaster id  object original message  object o )  {  if  ( o instanceof  string )   {   string message =  (  string ) o ;   string buffer buffer = new  string buffer ( message . length (  )  )  ;  for  ( int i = 0 ;  i  <  message . length (  )  ;  i +  +  )   {  char c = message . char at ( i )  ;  switch  ( c )   {  case '\b': buffer . append ( ""\\b"" )  ;  break ;  case '\f': buffer . append ( ""\\f"" )  ;  break ;  case '\n': buffer . append ( "" < br  /  > "" )  ;  break ;  case '\r': break ;  case '\t': buffer . append ( ""\\t"" )  ;  break ;  case '\'': buffer . append ( ""\\'"" )  ;  break ;  case '\""': buffer . append ( ""\\\"""" )  ;  break ;  case '\\': buffer . append ( ""\\\\"" )  ;  break ;  case ' < ': buffer . append ( ""&lt ; "" )  ;  break ;  case ' > ': buffer . append ( ""&gt ; "" )  ;  break ;  case '&': buffer . append ( ""&amp ; "" )  ;  break ;  default : buffer . append ( c )  ;   }   }  return new  broadcast action ( buffer . to string (  )  )  ;   }  else  {  return new  broadcast action ( o )  ;   }   }  "
1777,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\protocol\ProtocolUtil.java,attributes,private static  map <  string  object >    (  web socket web socket  atmosphere request request )  {   map <  string  object >  m = new  concurrent hash map <  string  object >  (  )  ;  m . put all ( web socket . attributes (  )  )  ;  return m ;   }  
1778,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\protocol\ProtocolUtil.java,construct request,protected static  atmosphere request impl .  builder   (  web socket web socket  string path info  string requesturi  string method type  string content type boolean destroyable )  {   atmosphere resource resource = web socket . resource (  )  ;   atmosphere request request =  atmosphere resource impl . class . cast ( resource )  . get request ( false )  ;   map <  string  object >  m = attributes ( web socket request )  ;   atmosphere request impl .  builder b =  ( new  atmosphere request impl .  builder (  )  . request ( request )  . method ( method type )  . content type ( content type  =  =  null  ?  request . get content type (  )  : content type )  . attributes ( m )  . path info ( path info )  . context path ( request . get context path (  )  )  . servlet path ( request . get servlet path (  )  )  . requesturi ( requesturi )  . requesturl ( request . requesturl (  )  )  . destroyable ( destroyable )  . headers ( request . headers map (  )  )  . session ( resource . session (  )  )  )  ;  return b ;   }  
1779,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\DefaultWebSocketProcessor.java,allowed close code,private boolean   ( int close code )  {  return close code  <  =  1001 || close code  >  1004  ?  true : false ;   }  
1780,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\DefaultWebSocketProcessor.java,byte buffer max size,public  default web socket processor   ( int byte buffer max size )  {  this . byte buffer max size = byte buffer max size ;  return this ;   }  
1781,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\DefaultWebSocketProcessor.java,call,@ override public  object   (  )  throws  exception  {   atmosphere resource current resource = framework . atmosphere factory (  )  . find ( resource . uuid (  )  )  ;  if  ( current resource  !  =  null && current resource . is suspended (  )  )   {  execute close ( web socket 1005 )  ;  finish ( web socket current re
1782,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\DefaultWebSocketProcessor.java,char buffer max size,public  default web socket processor   ( int char buffer max size )  {  this . char buffer max size = char buffer max size ;  return this ;   }  
1783,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\DefaultWebSocketProcessor.java,close,"@ override public void   ( final  web socket web socket int close code )  {   web socket handler web socket handler = web socket . web socket handler (  )  ;  final  atmosphere resource impl resource =  (  atmosphere resource impl ) web socket . resource (  )  ;  if  ( resource  =  =  null )   {  logger . trace ( "" alr"
1784,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\DefaultWebSocketProcessor.java,closing time,public long   (  )  {  return closing time ;   }  
1785,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\DefaultWebSocketProcessor.java,configure,"public  web socket processor   (  atmosphere config config )  {  this . framework = config . framework (  )  ;  this . web socket protocol = framework . get web socket protocol (  )  ;   string s = framework . get atmosphere config (  )  . get init parameter ( recycle   atmosphere   request   response )  ;  if  ( s  !  =  null &&  boolean . value of ( s )  )   {  destroyable = true ;   }  else  {  destroyable = false ;   }  s = framework . get atmosphere config (  )  . get init parameter ( websocket   protocol   execution )  ;  if  ( s  !  =  null &&  boolean . value of ( s )  )   {  execute async = true ;   }  else  {  execute async = false ;   }  s = framework . get atmosphere config (  )  . get init parameter ( in   memory   streaming   buffer   size )  ;  if  ( s  !  =  null )   {  byte buffer max size =  integer . value of ( s )  ;  char buffer max size = byte buffer max size ;   }  if  ( execute async )   {  async executor =  executors factory . get async operation executor ( config "" web socket"" )  ;   }  else  {  async executor =  void executor service . void ;   }  scheduler =  executors factory . get scheduler ( config )  ;  optimize mapping (  )  ;  closing time =  long . value of ( config . get init parameter (  application config . closed   atmosphere   think   time ""0"" )  )  ;  invoke interceptors =  boolean . value of ( config . get init parameter ( invoke   atmosphere   interceptor   on   websocket   message ""true"" )  )  ;  config . startup hook ( new  atmosphere config .  startup hook (  )  {  @ override public void started (  final  atmosphere framework framework )  {  if  (  asynchronous processor . class . is assignable from ( framework . get async support (  )  . get class (  )  )  )   {  asynchronous processor =  asynchronous processor . class . cast ( framework . get async support (  )  )  ;   }  else  {  asynchronous processor = new  asynchronous processor ( framework . get atmosphere config (  )  )  {  @ override public  action service (   atmosphere request req   atmosphere response res )  throws io exception   servlet exception  {  return framework . get async support (  )  . service ( req res )  ;   }   }   ;   }   }   }   )  ;  return this ;   }  "
1786,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\DefaultWebSocketProcessor.java,configure header,public static final  map <  string  string >    (  atmosphere request request )  {   map <  string  string >  headers = new  hash map <  string  string >  (  )  ;   enumeration <  string >  e = request . get parameter names (  )  ;   string s ;  while  ( e . has more elements (  )  )   {  s = e . next element (  )  ;  headers . put ( s request . get parameter ( s )  )  ;   }  headers . put (  header config . x   atmosphere   transport  header config . websocket   transport )  ;  return headers ;   }  
1787,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\DefaultWebSocketProcessor.java,destroy,@ override public void   (  )  {  boolean shared = framework . is share executor services (  )  ;  if  ( async executor  !  =  null &&  ! shared )   {  async executor . shutdown (  )  ;   }  if  ( scheduler  !  =  null &&  ! shared )   {  scheduler . shutdown (  )  ;   }   }  
1788,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\DefaultWebSocketProcessor.java,destroyable,public boolean   (  )  {  return destroyable ;   }  
1789,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\DefaultWebSocketProcessor.java,dispatch,"public final void   (  web socket web socket final  atmosphere request request final  atmosphere response r )  {  if  ( request  =  =  null )  return ;  try  {  framework . do comet support ( request r )  ;   }  catch  (   throwable e )   {  logger . warn ( "" failed invoking  atmosphere framework . do comet support (  ) "" e )  ;  web socket protocol . on error ( web socket new  web socket exception ( e new  atmosphere response impl .  builder (  )  . request ( request )  . status ( 500 )  . status message ( "" server  error"" )  . build (  )  )  )  ;  return ;   }  if  ( r . get status (  )   >  =  400 )   {  web socket protocol . on error ( web socket new  web socket exception ( "" status code higher or equal than 400"" r )  )  ;   }   }  "
1790,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\DefaultWebSocketProcessor.java,dispatch reader,protected void   (  web socket web socket  reader r )  throws io exception  {  int read = 0 ;   char buffer cb = web socket . cb ;  try  {  while  ( read  >   - 1 )   {  cb . position ( cb . position (  )   +  read )  ;  if  ( cb . remaining (  )   =  =  0 )   {  cb = resize char buffer ( web socket )  ;   }  read = r . read ( cb . array (  )  cb . position (  )  cb . remaining (  )  )  ;   }  cb . flip (  )  ;  invoke web socket protocol ( web socket cb . to string (  )  )  ;   }  finally  {  cb . clear (  )  ;   }   }  
1791,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\DefaultWebSocketProcessor.java,dispatch stream,protected void   (  web socket web socket  input stream is )  throws io exception  {  int read = 0 ;   byte buffer bb = web socket . bb ;  try  {  while  ( read  >   - 1 )   {  bb . position ( bb . position (  )   +  read )  ;  if  ( bb . remaining (  )   =  =  0 )   {  bb = resize byte buffer ( web socket )  ;   }  read = is . read ( bb . array (  )  bb . position (  )  bb . remaining (  )  )  ;   }  bb . flip (  )  ;  invoke web socket protocol ( web socket bb . array (  )  0 bb . limit (  )  )  ;   }  finally  {  bb . clear (  )  ;   }   }  
1792,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\DefaultWebSocketProcessor.java,execute async,public boolean   (  )  {  return execute async ;   }  
1793,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\DefaultWebSocketProcessor.java,execute close,public void   (  web socket web socket int close code )  {   atmosphere resource r = web socket . resource (  )  ;  boolean is closed by client = r  =  =  null  ?  true : r . get atmosphere resource event (  )  . is closed by client (  )  ;  try  {  if  ( r  !  =  null )   {  asynchronous processor . end request (  atmosphere resource impl . class . cast ( r )  true )  ;   }   }  finally  {  if  (  ! is closed by client )   {  notify listener ( web socket new  web socket event listener .  web socket event ( close code close web socket )  )  ;   }   }   }  
1794,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\DefaultWebSocketProcessor.java,finish,"private void   (  web socket web socket  atmosphere resource resource  atmosphere request r  atmosphere response s boolean close web socket )  {  framework . atmosphere factory (  )  . remove ( resource . uuid (  )  )  ;  if  ( web socket  !  =  null )   {  try  {  r . set attribute (  web socket . clean   close  boolean . true )  ;  web socket . resource ( null )  ;  if  ( close web socket )  web socket . close ( s )  ;   }  catch  (  io exception e )   {  logger . trace ( """" e )  ;   }   }  if  ( r  !  =  null )   {  r . destroy ( true )  ;   }  if  ( s  !  =  null )   {  s . destroy ( true )  ;   }   }  "
1795,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\DefaultWebSocketProcessor.java,handle exception,"private void   (  exception ex  web socket web socket  web socket handler web socket handler )  {  logger . error ( """" ex )  ;   atmosphere resource r = web socket . resource (  )  ;  if  ( r  !  =  null )   {  web socket handler . on error ( web socket new  web socket exception ( ex new  atmosphere response impl .  builder (  )  . request ( r  !  =  null  ?   atmosphere resource impl . class . cast ( r )  . get request ( false )  : null )  . status ( 500 )  . status message ( "" server  error"" )  . build (  )  )  )  ;   }   }  "
1796,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\DefaultWebSocketProcessor.java,handlers,public  map <  string  web socket handler proxy >    (  )  {  return handlers ;   }  
1797,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\DefaultWebSocketProcessor.java,handshake,"@ override public boolean   (  http servlet request request )  {  if  ( request  !  =  null )   {  logger . trace ( "" processing request  {  } "" request )  ;   }  return true ;   }  "
1798,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\DefaultWebSocketProcessor.java,invoke interceptors,public boolean   (  )  {  return invoke interceptors ;   }  
1799,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\DefaultWebSocketProcessor.java,invoke web socket protocol,@ override public void   (  web socket web socket  reader reader )  {   web socket handler proxy web socket handler = web socket handler for message ( web socket )  ;  try  {  if  ( web socket handler  =  =  null )   {  if  (  web socket protocol stream . class . is assignable from ( web socket protocol . get class (  ) 
1800,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\DefaultWebSocketProcessor.java,mapper,public  endpoint mapper <  web socket handler proxy >    (  )  {  return mapper ;   }  
1801,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\DefaultWebSocketProcessor.java,notify listener,@ override public void   (  web socket web socket  web socket event listener .  web socket event event )  {   atmosphere resource resource = web socket . resource (  )  ;  if  ( resource  =  =  null )  return ;   atmosphere resource impl r =  atmosphere resource impl . class . cast ( resource )  ;  for  (   atmospher
1802,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\DefaultWebSocketProcessor.java,on disconnect,private void   (  web socket event event  atmosphere resource event listener l )  {  if  ( event . web socket (  )   !  =  null && event . web socket (  )  . resource (  )   !  =  null )   {  framework . notify destroyed ( event . web socket (  )  . resource (  )  . uuid (  )  )  ;   }   web socket event listener . class . cast ( l )  . on disconnect ( event )  ;   }  
1803,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\DefaultWebSocketProcessor.java,on ping,@ override public void   (  web socket web socket byte[] payload int offset int length )  {   web socket handler proxy web socket handler = web socket handler for message ( web socket )  ;  if  ( web socket handler  !  =  null &&  web socket ping pong listener . class . is assignable from ( web socket hand
1804,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\DefaultWebSocketProcessor.java,on pong,@ override public void   (  web socket web socket byte[] payload int offset int length )  {   web socket handler proxy web socket handler = web socket handler for message ( web socket )  ;  if  ( web socket handler  !  =  null &&  web socket ping pong listener . class . is assignable from ( web socket hand
1805,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\DefaultWebSocketProcessor.java,open,@ override public final void   ( final  web socket web socket final  atmosphere request request final  atmosphere response response )  throws io exception  {  if  ( framework . is destroyed (  )  )  return ;  if  ( framework . get atmosphere config (  )  . handlers (  )  . is empty (  )  )   {  synchronized  ( 
1806,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\DefaultWebSocketProcessor.java,optimize mapping,"protected void   (  )  {  for  (   string w : framework . get atmosphere config (  )  . handlers (  )  . key set (  )  )   {  if  ( w . contains ( "" { "" )  && w . contains ( "" } "" )  )   {  wildcard mapping = true ;   }   }   }  "
1807,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\DefaultWebSocketProcessor.java,post process mapping,"protected  web socket handler   (  web socket web socket  atmosphere request request  web socket handler proxy w )  {   web socket handler proxy p = null ;   string path = w . path (  )  ;  if  ( wildcard mapping (  )  )   {   string path info = null ;  try  {  path info = request . get path info (  )  ;   }  catch  (   illegal state exception ex )   {   }  if  ( path info  !  =  null )   {  path = request . get servlet path (  )   +  path info ;   }  else  {  path = request . get servlet path (  )  ;   }  if  ( path  =  =  null || path . is empty (  )  )   {  path = "" / "" ;   }  synchronized  ( handlers )   {  p = handlers . get ( path )  ;  if  ( p  =  =  null )   {   web socket handler service a = w . proxied . get class (  )  . get annotation (  web socket handler service . class )  ;  if  ( a  !  =  null )   {   string target path = a . path (  )  ;  if  ( target path . index of ( "" { "" )   !  =   - 1 && target path . index of ( "" } "" )   !  =   - 1 )   {  try  {  boolean singleton = w . proxied . get class (  )  . get annotation (  singleton . class )   !  =  null ;  if  (  ! singleton )   {  w = new  web socket handler proxy ( a . broadcaster (  )  framework . new class instance (  web socket handler . class w . proxied . get class (  )  )  )  ;   }  register web socket handler ( path new  web socket handler proxy ( a . broadcaster (  )  w )  )  ;  request . local attributes (  )  . put (  named . class . get name (  )  path . substring ( target path . index of ( "" { "" )  )  )  ;  p = handlers . get ( path )  ;   }  catch  (   throwable e )   {  logger . warn ( "" unable to create  web socket handler"" e )  ;   }   }   }   }   }   }  try  {  web socket . resource (  )  . set broadcaster (  annotation util . broadcaster ( framework p  !  =  null  ?  p . broadcaster clazz : w . broadcaster clazz path )  )  ;   }  catch  (   exception e )   {  logger . error ( """" e )  ;   }  return p  !  =  null  ?  p : w ;   }  "
1808,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\DefaultWebSocketProcessor.java,register web socket handler,@ override public  web socket processor   (  string path  web socket handler proxy web sockethandler )  {  handlers . put ( path web sockethandler . path ( path )  )  ;  return this ;   }  
1809,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\DefaultWebSocketProcessor.java,resize byte buffer,"private  byte buffer   (  web socket web socket )  throws io exception  {  int max size = byte buffer max size ;   byte buffer bb = web socket . bb ;  if  ( bb . limit (  )   >  =  max size )   {  throw new io exception ( "" message  buffer too small .   use ""  +   streaming http protocol . class . get name (  )   +  "" when streaming over websocket . "" )  ;   }  long new size = bb . limit (  )  * 2 ;  if  ( new size  >  max size )   {  new size = max size ;   }   byte buffer new buffer =  byte buffer . allocate (  ( int ) new size )  ;  bb . rewind (  )  ;  new buffer . put ( bb )  ;  web socket . bb = new buffer ;  return new buffer ;   }  "
1810,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\DefaultWebSocketProcessor.java,resize char buffer,"private  char buffer   (  web socket web socket )  throws io exception  {  int max size = char buffer max size ;   char buffer cb = web socket . cb ;  if  ( cb . limit (  )   >  =  max size )   {  throw new io exception ( "" message  buffer too small .   use ""  +   streaming http protocol . class . get name (  )   +  "" when streaming over websocket . "" )  ;   }  long new size = cb . limit (  )  * 2 ;  if  ( new size  >  max size )   {  new size = max size ;   }   char buffer new buffer =  char buffer . allocate (  ( int ) new size )  ;  cb . rewind (  )  ;  new buffer . put ( cb )  ;  web socket . cb = new buffer ;  return new buffer ;   }  "
1811,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\DefaultWebSocketProcessor.java,run,@ override public void   (  )  {   atmosphere response w = new  atmosphere response impl ( web socket r destroyable )  ;  try  {  dispatch ( web socket r w )  ;   }  finally  {  r . destroy (  )  ;  w . destroy (  )  ;   }   }  
1812,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\DefaultWebSocketProcessor.java,service,@ override public  action   (  atmosphere request req  atmosphere response res )  throws io exception   servlet exception  {  return framework . get async support (  )  . service ( req res )  ;   }  
1813,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\DefaultWebSocketProcessor.java,started,@ override public void   ( final  atmosphere framework framework )  {  if  (  asynchronous processor . class . is assignable from ( framework . get async support (  )  . get class (  )  )  )   {  asynchronous processor =  asynchronous processor . class . cast ( framework . get async support (  )  )  ;   }  else  {  asynchr
1814,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\DefaultWebSocketProcessor.java,web socket handler for message,"private  web socket handler proxy   (  web socket web socket )  {   atmosphere resource impl impl =  atmosphere resource impl . class . cast ( web socket . resource (  )  )  ;  if  ( impl  !  =  null )   {  impl . get request ( false )  . set attribute (  framework config . websocket   message ""true"" )  ;  try  {   utils . inject ( impl )  ;   }  catch  (   illegal access exception e )   {  logger . warn ( """" e )  ;   }   }  return  web socket handler proxy . class . cast ( web socket . web socket handler (  )  )  ;   }  "
1815,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\DefaultWebSocketProcessor.java,wildcard mapping,public  default web socket processor   ( boolean wildcard mapping )  {  this . wildcard mapping = wildcard mapping ;  return this ;   }  
1816,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\protocol\SimpleHttpProtocol.java,configure,"@ override public void   (  atmosphere config config )  {   string content type = config . get init parameter (  application config . websocket   content   type )  ;  if  ( content type  =  =  null )   {  content type = ""text / plain"" ;   }  this . content type = content type ;   string method type = config . get init pa"
1817,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\protocol\SimpleHttpProtocol.java,on error,"@ override public void   (  web socket web socket  web socket processor .  web socket exception t )  {  logger . warn ( t . get message (  )   +  "" .   unable to deliver the websocket messages to installed component . ""  +  ""  status  {  }   message  {  } "" t . response (  )  . get status (  )  t . response (  )  . get stat"
1818,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\protocol\SimpleHttpProtocol.java,on message,"@ override public  list <  atmosphere request >    (  web socket web socket byte[] d final int offset final int length )  {   atmosphere resource impl resource =  (  atmosphere resource impl ) web socket . resource (  )  ;  if  ( resource  =  =  null )   {  logger . trace ( "" the  web socket has been closed b"
1819,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\protocol\EchoProtocol.java,on error,"@ override public void   (  web socket web socket  web socket processor .  web socket exception t )  {  logger . error ( t . get message (  )   +  ""  status  {  }   message  {  } "" t . response (  )  . get status (  )  t . response (  )  . get status message (  )  )  ;   }  "
1820,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\protocol\EchoProtocol.java,on message,"@ override public  list <  atmosphere request >    (  web socket web socket byte[] data int offset int length )  {  logger . trace ( ""broadcast byte"" )  ;  byte[] b = new byte[length] ;   system . arraycopy ( data offset b 0 length )  ;  web socket . resource (  )  . get broadcaster (  )  . broadcast ( b )  ;  ret"
1821,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\protocol\StreamingHttpProtocol.java, streaming http protocol,public   (  )  {  delegate = new  simple http protocol (  )  ;   }  
1822,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\protocol\StreamingHttpProtocol.java,configure,"@ override public void   (  atmosphere config config )  {   string content type = config . get init parameter (  application config . websocket   content   type )  ;  if  ( content type  =  =  null )   {  content type = ""text / plain"" ;   }  this . content type = content type ;   string method type = config . get init pa"
1823,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\protocol\StreamingHttpProtocol.java,on binary stream,"@ override public  list <  atmosphere request >    (  web socket web socket  input stream stream )  {   atmosphere resource impl resource =  (  atmosphere resource impl ) web socket . resource (  )  ;  if  ( resource  =  =  null )   {  logger . trace ( "" the  web socket has been closed before the message was pr"
1824,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\protocol\StreamingHttpProtocol.java,on error,"@ override public void   (  web socket web socket  web socket processor .  web socket exception t )  {  logger . warn ( t . get message (  )   +  ""  status  {  }   message  {  } "" t . response (  )  . get status (  )  t . response (  )  . get status message (  )  )  ;   }  "
1825,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\protocol\StreamingHttpProtocol.java,on message,@ override public  list <  atmosphere request >    (  web socket web socket byte[] data int offset int length )  {  return delegate . on message ( web socket data offset length )  ;   }  
1826,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\protocol\StreamingHttpProtocol.java,on text stream,"@ override public  list <  atmosphere request >    (  web socket web socket  reader r )  {   atmosphere resource impl resource =  (  atmosphere resource impl ) web socket . resource (  )  ;  if  ( resource  =  =  null )   {  logger . trace ( "" the  web socket has been closed before the message was processed . "" ) "
1827,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\WebSocket.java, web socket,public   (  atmosphere config config )  {   string s = config . get init parameter (  application config . websocket   binary   write )  ;  if  ( s  !  =  null &&  boolean . parse boolean ( s )  )   {  binary write = true ;   }  else  {  binary write = false ;   }  this . config = config ;   }  
1828,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\WebSocket.java,attachment,public  object   (  )  {  return attachment ;   }  
1829,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\WebSocket.java,attributes,public  map <  string  object >    (  )  {  return attributes at web socket open ;   }  
1830,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\WebSocket.java,binary write,public  web socket   ( boolean binary write )  {  this . binary write = binary write ;  return this ;   }  
1831,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\WebSocket.java,broadcast,"public  web socket   (  object o )  {  if  ( r  !  =  null )   {  r . get broadcaster (  )  . broadcast ( o )  ;   }  else  {  logger . debug ( "" no  atmosphere resource  associated with this  web socket . "" )  ;   }  return this ;   }  "
1832,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\WebSocketEventListener.java, web socket event,public   ( t message type type  web socket web socket )  {  this . message = message ;  this . type = type ;  this . web socket = web socket ;   }  
1833,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\WebSocketEventListener.java,message,public t   (  )  {  return message ;   }  
1834,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\WebSocketEventListenerAdapter.java,on broadcast,"@ override public void   (  atmosphere resource event event )  {  logger . trace ( "" {  } "" event )  ;   }  "
1835,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\WebSocketEventListenerAdapter.java,on close,"@ override public void   (  atmosphere resource event event )  {  logger . trace ( "" {  } "" event )  ;   }  "
1836,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\WebSocketEventListenerAdapter.java,on connect,"@ override public void   (  web socket event event )  {  logger . trace ( "" {  } "" event )  ;   }  "
1837,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\WebSocketEventListenerAdapter.java,on control,"@ override public void   (  web socket event event )  {  logger . trace ( "" {  } "" event )  ;   }  "
1838,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\WebSocketEventListenerAdapter.java,on disconnect,"@ override public void   (  atmosphere resource event event )  {  logger . trace ( "" {  } "" event )  ;   }  "
1839,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\WebSocketEventListenerAdapter.java,on handshake,"@ override public void   (  web socket event event )  {  logger . trace ( "" {  } "" event )  ;   }  "
1840,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\WebSocketEventListenerAdapter.java,on heartbeat,"@ override public void   (  atmosphere resource event event )  {  logger . trace ( "" {  } "" event )  ;   }  "
1841,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\WebSocketEventListenerAdapter.java,on message,"@ override public void   (  web socket event event )  {  logger . trace ( "" {  } "" event )  ;   }  "
1842,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\WebSocketEventListenerAdapter.java,on pre suspend,"@ override public void   (  atmosphere resource event event )  {  logger . trace ( "" {  } "" event )  ;   }  "
1843,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\WebSocketEventListenerAdapter.java,on resume,"@ override public void   (  atmosphere resource event event )  {  logger . trace ( "" {  } "" event )  ;   }  "
1844,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\WebSocketEventListenerAdapter.java,on suspend,"@ override public void   (  atmosphere resource event event )  {  logger . trace ( "" {  } "" event )  ;   }  "
1845,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\WebSocketEventListenerAdapter.java,on throwable,"@ override public void   (  atmosphere resource event event )  {  logger . trace ( "" {  } "" event )  ;   }  "
1846,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\WebSocketHandshakeFilter.java,do filter,@ override public void   (  servlet request request  servlet response response  filter chain chain )  throws io exception   servlet exception  {   http servlet request r =  http servlet request . class . cast ( request )  ;  if  (  utils . web socket enabled ( r )  )   {  int draft = r . get int header ( websoc
1847,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\WebSocketHandshakeFilter.java,init,"@ override public void   (  filter config filter config )  throws  servlet exception  {   string draft = filter config . get init parameter (  application config . web   socket   banned   version )  ;  if  ( draft  !  =  null )   {  banned version = draft . split ( "" "" )  ;  logger . debug ( "" blocked  web socket  draf"
1848,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\WebSocketProcessor.java, web socket exception,public   (  throwable throwable  atmosphere response r )  {  super ( throwable )  ;  this . r = r ;   }  
1849,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\WebSocketProcessor.java, web socket handler proxy,public   (  web socket handler proxied )  {  this . broadcaster clazz =  simple broadcaster . class ;  this . proxied = proxied ;   }  
1850,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\WebSocketProcessorAdapter.java,configure,@ override public  web socket processor   (  atmosphere config config )  {  return this ;   }  
1851,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\WebSocketProcessorAdapter.java,handshake,@ override public boolean   (  http servlet request request )  {  return true ;   }  
1852,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\WebSocketProcessorAdapter.java,register web socket handler,@ override public  web socket processor   (  string path  web socket handler proxy web sockethandler )  {  return this ;   }  
1853,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\WebSocketStreamingHandlerAdapter.java,on binary stream,"@ override public void   (  web socket web socket  input stream input stream )  throws io exception  {  logger . trace ( ""on binary stream  {  } "" web socket )  ;   }  "
1854,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\WebSocketStreamingHandlerAdapter.java,on byte message,"@ override public void   (  web socket web socket byte[] data int offset int length )  throws io exception  {  logger . trace ( ""on byte message  {  } "" web socket )  ;   }  "
1855,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\WebSocketStreamingHandlerAdapter.java,on close,"@ override public void   (  web socket web socket )  {  logger . trace ( ""on close  {  } "" web socket )  ;   }  "
1856,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\WebSocketStreamingHandlerAdapter.java,on error,"@ override public void   (  web socket web socket  web socket processor .  web socket exception t )  {  logger . trace ( ""on error  {  } "" web socket t )  ;   }  "
1857,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\WebSocketStreamingHandlerAdapter.java,on open,"@ override public void   (  web socket web socket )  throws io exception  {  logger . trace ( ""on open  {  } "" web socket )  ;   }  "
1858,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\WebSocketStreamingHandlerAdapter.java,on text message,"@ override public void   (  web socket web socket  string data )  throws io exception  {  logger . trace ( ""on text message  {  } "" web socket )  ;   }  "
1859,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\WebSocketStreamingHandlerAdapter.java,on text stream,"@ override public void   (  web socket web socket  reader reader )  throws io exception  {  logger . trace ( ""on text stream  {  } "" web socket )  ;   }  "
1860,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\cache\ManagedAtmosphereHandlerTest.java,action,public void   (  atmosphere resource impl r )  {  try  {  resumed ( r . get request (  )  r . get response (  )  )  ;   }  catch  (  io exception e )   {  e . print stack trace (  )  ;   }  catch  (   servlet exception e )   {  e . print stack trace (  )  ;   }   }  
1861,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\cache\ManagedAtmosphereHandlerTest.java,after,@ after method public void   (  )  {  r . set ( null )  ;  framework . destroy (  )  ;   }  
1862,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\cache\ManagedAtmosphereHandlerTest.java,create,@ before method public void   (  )  throws  throwable  {  framework = new  atmosphere framework (  )  ;  framework . set default broadcaster class name (  simple broadcaster . class . get name (  )  )  ;  framework . add annotation package (  broadcaster cache test . class )  ;  framework . set async support ( new  as
1863,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\cache\ManagedAtmosphereHandlerTest.java,get init parameter,@ override public  string   (  string name )  {  return null ;   }  
1864,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\cache\ManagedAtmosphereHandlerTest.java,get init parameter names,@ override public  enumeration <  string >    (  )  {  return null ;   }  
1865,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\cache\ManagedAtmosphereHandlerTest.java,get servlet context,@ override public  servlet context   (  )  {  return mock (  servlet context . class )  ;   }  
1866,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\cache\ManagedAtmosphereHandlerTest.java,get servlet name,"@ override public  string   (  )  {  return ""void"" ;   }  "
1867,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\cache\ManagedAtmosphereHandlerTest.java,service,@ override public  action   (  atmosphere request req  atmosphere response res )  throws io exception   servlet exception  {  return suspended ( req res )  ;   }  
1868,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\cache\ManagedAtmosphereHandlerTest.java,test broadcaster cache,"@ test public void   (  )  throws io exception   servlet exception  {   atmosphere request request = new  atmosphere request impl .  builder (  )  . path info ( "" / cache"" )  . method ( ""get"" )  . build (  )  ;  framework . do comet support ( request  atmosphere response impl . new instance (  )  )  ;  assert equals ( frame"
1869,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\custom\CustomAnnotationTest.java,action,public void   (  atmosphere resource impl r )  {  try  {  resumed ( r . get request (  )  r . get response (  )  )  ;   }  catch  (  io exception e )   {  e . print stack trace (  )  ;   }  catch  (   servlet exception e )   {  e . print stack trace (  )  ;   }   }  
1870,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\custom\CustomAnnotationTest.java,after,@ after method public void   (  )  {  r . set ( null )  ;  framework . destroy (  )  ;   }  
1871,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\custom\CustomAnnotationTest.java,create,@ before method public void   (  )  throws  throwable  {  framework = new  atmosphere framework (  )  ;  framework . set default broadcaster class name (  simple broadcaster . class . get name (  )  )  ;  framework . add annotation package (  my annotation . class )  ;  framework . set async support ( new  asynchrono
1872,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\custom\CustomAnnotationTest.java,get init parameter,@ override public  string   (  string name )  {  return null ;   }  
1873,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\custom\CustomAnnotationTest.java,get init parameter names,@ override public  enumeration <  string >    (  )  {  return null ;   }  
1874,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\custom\CustomAnnotationTest.java,get servlet context,@ override public  servlet context   (  )  {  return mock (  servlet context . class )  ;   }  
1875,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\custom\CustomAnnotationTest.java,get servlet name,"@ override public  string   (  )  {  return ""void"" ;   }  "
1876,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\custom\CustomAnnotationTest.java,handle,@ override public void   (  atmosphere framework framework  class <  object >  annotated class )  {   my annotation a = annotated class . get annotation (  my annotation . class )  ;  try  {  framework . add atmosphere handler ( a . value (  )   (  atmosphere handler ) framework . new class instance (  object . class
1877,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\custom\CustomAnnotationTest.java,on request,@ override public void   (  atmosphere resource resource )  throws io exception  {  resource . suspend (  )  ;  r . set ( resource )  ;   }  
1878,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\custom\CustomAnnotationTest.java,service,@ override public  action   (  atmosphere request req  atmosphere response res )  throws io exception   servlet exception  {  return suspended ( req res )  ;   }  
1879,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\custom\CustomAnnotationTest.java,test get,"@ test public void   (  )  throws io exception   servlet exception  {   atmosphere request request = new  atmosphere request impl .  builder (  )  . path info ( "" / z"" )  . method ( ""get"" )  . build (  )  ;  framework . do comet support ( request  atmosphere response impl . new instance (  )  )  ;  r . get (  )  . resume (  )  ;  asse"
1880,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\EncoderDecoderTest.java,action,public void   (  atmosphere resource impl r )  {  try  {  resumed ( r . get request (  )  r . get response (  )  )  ;   }  catch  (  io exception e )   {  e . print stack trace (  )  ;   }  catch  (   servlet exception e )   {  e . print stack trace (  )  ;   }   }  
1881,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\EncoderDecoderTest.java,after,@ after method public void   (  )  {  r . set ( null )  ;  framework . destroy (  )  ;   }  
1882,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\EncoderDecoderTest.java,create,@ before method public void   (  )  throws  throwable  {  framework = new  atmosphere framework (  )  ;  framework . set default broadcaster class name (  simple broadcaster . class . get name (  )  )  ;  framework . add annotation package (  managed message . class )  ;  framework . set async support ( new  asynchro
1883,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\EncoderDecoderTest.java,decode,@ override public  string buffer   (  string s )  {  return new  string buffer ( s )  ;   }  
1884,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\EncoderDecoderTest.java,encode,"@ override public  string   (  string buffer s )  {  return s . to string (  )   +  "" - yo ! "" ;   }  "
1885,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\EncoderDecoderTest.java,get,"@ get public void   (  atmosphere resource resource )  {  r . set ( resource )  ;  resource . add event listener ( new  on suspend (  )  {  @ override public void on suspend (   atmosphere resource event event )  {   atmosphere request request = new  atmosphere request impl .  builder (  )  . path info ( "" / h"" )  . meth"
1886,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\EncoderDecoderTest.java,get init parameter,@ override public  string   (  string name )  {  return null ;   }  
1887,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\EncoderDecoderTest.java,get init parameter names,@ override public  enumeration <  string >    (  )  {  return null ;   }  
1888,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\EncoderDecoderTest.java,get servlet context,@ override public  servlet context   (  )  {  return mock (  servlet context . class )  ;   }  
1889,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\EncoderDecoderTest.java,get servlet name,"@ override public  string   (  )  {  return ""void"" ;   }  "
1890,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\EncoderDecoderTest.java,message,@ message ( encoders =  {  string buffer encoder . class }  decoders =  {  string buffer decoder . class }  )  public void   (  string buffer m )  {  message . set ( m . to string (  )  )  ;   }  
1891,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\EncoderDecoderTest.java,on broadcast,@ override public void   (  atmosphere resource event event )  {  latch . get (  )  . count down (  )  ;   }  
1892,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\EncoderDecoderTest.java,on suspend,"@ override public void   (  atmosphere resource event event )  {   atmosphere request request = new  atmosphere request impl .  builder (  )  . path info ( "" / h"" )  . method ( ""post"" )  . body ( ""message"" )  . build (  )  ;  try  {  event . get resource (  )  . add event listener ( new  on broadcast (  )  {  @ override public voi"
1893,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\EncoderDecoderTest.java,service,@ override public  action   (  atmosphere request req  atmosphere response res )  throws io exception   servlet exception  {  return suspended ( req res )  ;   }  
1894,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\EncoderDecoderTest.java,test decoder,"@ test public void   (  )  throws io exception   servlet exception   interrupted exception  {   atmosphere request request = new  atmosphere request impl .  builder (  )  . path info ( "" / g"" )  . method ( ""get"" )  . build (  )  ;  framework . do comet support ( request  atmosphere response impl . new instance (  )  )  ;  "
1895,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\EncoderDecoderTest.java,test encoder,"@ test public void   (  )  throws io exception   servlet exception   interrupted exception  {   atmosphere request request = new  atmosphere request impl .  builder (  )  . path info ( "" / h"" )  . method ( ""get"" )  . build (  )  ;   atmosphere response response =  atmosphere response impl . new instance (  )  ;  final "
1896,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\EncoderDecoderTest.java,test message,"@ test public void   (  )  throws io exception   servlet exception   interrupted exception  {   atmosphere request request = new  atmosphere request impl .  builder (  )  . path info ( "" / f"" )  . method ( ""get"" )  . build (  )  ;  framework . do comet support ( request  atmosphere response impl . new instance (  )  )  ;  "
1897,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\EncoderDecoderTest.java,write,@ override public  asyncio writer   (  atmosphere response r byte[] data )  throws io exception  {  ref . set ( new  string ( data )  )  ;  return this ;   }  
1898,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\ManagedAtmosphereHandlerTest.java, array base web socket,public   (  output stream output stream )  {  super ( framework . get atmosphere config (  )  )  ;  this . output stream = output stream ;   }  
1899,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\ManagedAtmosphereHandlerTest.java,action,public void   (  atmosphere resource impl r )  {  try  {  resumed ( r . get request (  )  r . get response (  )  )  ;   }  catch  (  io exception e )   {  e . print stack trace (  )  ;   }  catch  (   servlet exception e )   {  e . print stack trace (  )  ;   }   }  
1900,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\ManagedAtmosphereHandlerTest.java,after,@ after method public void   (  )  {  r . set ( null )  ;  framework . destroy (  )  ;   }  
1901,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\ManagedAtmosphereHandlerTest.java,create,@ before method public void   (  )  throws  throwable  {  framework = new  atmosphere framework (  )  ;  framework . set default broadcaster class name (  simple broadcaster . class . get name (  )  )  ;  framework . add annotation package (  managed get . class )  ;  framework . set async support ( new  asynchronous
1902,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\ManagedAtmosphereHandlerTest.java,delete,@ delete public void   (  atmosphere resource resource )  {  resource . suspend (  )  ;  r . set ( resource )  ;   }  
1903,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\ManagedAtmosphereHandlerTest.java,get,@ get public void   (  atmosphere resource resource )  {  resource . set broadcaster ( broadcaster )  ;  r . set ( resource )  ;   }  
1904,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\ManagedAtmosphereHandlerTest.java,get init parameter,"@ override public  string   (  string name )  {  return  application config . client   heartbeat   interval   in   seconds . equals ( name )   ?  ""10"" : null ;   }  "
1905,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\ManagedAtmosphereHandlerTest.java,get init parameter names,@ override public  enumeration <  string >    (  )  {  return null ;   }  
1906,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\ManagedAtmosphereHandlerTest.java,get servlet context,@ override public  servlet context   (  )  {  return mock (  servlet context . class )  ;   }  
1907,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\ManagedAtmosphereHandlerTest.java,get servlet name,"@ override public  string   (  )  {  return ""void"" ;   }  "
1908,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\ManagedAtmosphereHandlerTest.java,heartbeat,@org . atmosphere . config . service .  heartbeat public void   (  atmosphere resource event resource )  {  message . set ( padding data )  ;   }  
1909,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\ManagedAtmosphereHandlerTest.java,inspect,@ override public  action   (  atmosphere resource r )  {  invoked = true ;  return  action . continue ;   }  
1910,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\ManagedAtmosphereHandlerTest.java,is open,@ override public boolean   (  )  {  return true ;   }  
1911,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\ManagedAtmosphereHandlerTest.java,message,@ message public void   (  string s )  {  message . set ( message . get (  )   +  s )  ;   }  
1912,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\ManagedAtmosphereHandlerTest.java,on open,@ override public void   (  web socket web socket )  throws io exception  {   web socket w = factory . find ( web socket . resource (  )  . uuid (  )  )  ;  r . set ( w  =  =  null  ?  null : web socket . resource (  )  )  ;   }  
1913,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\ManagedAtmosphereHandlerTest.java,on suspend,"@ override public void   (  atmosphere resource event event )  {   atmosphere request request = new  atmosphere request impl .  builder (  )  . path info ( "" / post construct"" )  . method ( ""post"" )  . body ( ""message"" )  . build (  )  ;  try  {  framework . do comet support ( request  atmosphere response impl . new insta"
1914,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\ManagedAtmosphereHandlerTest.java,post,@ post public void   (  atmosphere resource resource )  {  resource . suspend (  )  ;  r . set ( resource )  ;   }  
1915,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\ManagedAtmosphereHandlerTest.java,post construct,"@ post construct private void   (  )  {  if  ( message . get (  )   =  =  ""post construct"" )  message . set ( ""error"" )  ;  message . set ( ""post construct"" )  ;   }  "
1916,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\ManagedAtmosphereHandlerTest.java,priority,@ override public priority   (  )  {  return  invokation order . first   before   default ;   }  
1917,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\ManagedAtmosphereHandlerTest.java,put,@ put public void   (  atmosphere resource resource )  {  resource . suspend (  )  ;  r . set ( resource )  ;   }  
1918,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\ManagedAtmosphereHandlerTest.java,service,@ override public  action   (  atmosphere request req  atmosphere response res )  throws io exception   servlet exception  {  return suspended ( req res )  ;   }  
1919,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\ManagedAtmosphereHandlerTest.java,suspend,@ ready public void   (  atmosphere resource resource )  {  r . set ( resource )  ;   }  
1920,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\ManagedAtmosphereHandlerTest.java,test binary post,"@ test public void   (  )  throws io exception   servlet exception  {   atmosphere request request = new  atmosphere request impl .  builder (  )  . path info ( "" / b"" )  . method ( ""post"" )  . body ( ""test"" . get bytes (  )  )  . build (  )  ;  framework . do comet support ( request  atmosphere response impl . new instance (  ) "
1921,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\ManagedAtmosphereHandlerTest.java,test delete,"@ test public void   (  )  throws io exception   servlet exception  {   atmosphere request request = new  atmosphere request impl .  builder (  )  . path info ( "" / c"" )  . method ( ""delete"" )  . build (  )  ;  framework . do comet support ( request  atmosphere response impl . new instance (  )  )  ;  assert not null ( r . get"
1922,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\ManagedAtmosphereHandlerTest.java,test get,"@ test public void   (  )  throws io exception   servlet exception  {   atmosphere request request = new  atmosphere request impl .  builder (  )  . path info ( "" / a"" )  . method ( ""get"" )  . build (  )  ;  framework . do comet support ( request  atmosphere response impl . new instance (  )  )  ;  r . get (  )  . resume (  )  ;  asse"
1923,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\ManagedAtmosphereHandlerTest.java,test heartbeat,"@ test public void   (  )  throws io exception   servlet exception  {   atmosphere request request = new  atmosphere request impl .  builder (  )  . path info ( "" / heartbeat"" )  . method ( ""get"" )  . build (  )  ;  request . header ( x   atmosphere   transport websocket   transport )  ;  framework . do comet support ( r"
1924,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\ManagedAtmosphereHandlerTest.java,test inject annotation,"@ test public void   (  )  throws io exception   servlet exception  {   atmosphere request request = new  atmosphere request impl .  builder (  )  . path info ( "" / inject annotation"" )  . method ( ""get"" )  . build (  )  ;  framework . do comet support ( request  atmosphere response impl . new instance (  )  )  ;  assertn"
1925,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\ManagedAtmosphereHandlerTest.java,test input stream message,"@ test public void   (  )  throws io exception   servlet exception  {   atmosphere request request = new  atmosphere request impl .  builder (  )  . path info ( "" / input stream injection"" )  . method ( ""get"" )  . build (  )  ;  framework . do comet support ( request  atmosphere response impl . new instance (  )  )  ;  ass"
1926,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\ManagedAtmosphereHandlerTest.java,test message,"@ test public void   (  )  throws io exception   servlet exception  {   atmosphere request request = new  atmosphere request impl .  builder (  )  . path info ( "" / e"" )  . method ( ""get"" )  . build (  )  ;  framework . do comet support ( request  atmosphere response impl . new instance (  )  )  ;  assert not null ( r . get (  )  ) "
1927,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\ManagedAtmosphereHandlerTest.java,test message with resource,"@ test public void   (  )  throws io exception   servlet exception  {   atmosphere request request = new  atmosphere request impl .  builder (  )  . path info ( "" / k"" )  . method ( ""get"" )  . build (  )  ;  framework . do comet support ( request  atmosphere response impl . new instance (  )  )  ;  assert not null ( r . get (  )  ) "
1928,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\ManagedAtmosphereHandlerTest.java,test named,"@ test public void   (  )  throws io exception   servlet exception  {   atmosphere request request = new  atmosphere request impl .  builder (  )  . path info ( "" / named"" )  . method ( ""get"" )  . build (  )  ;  framework . do comet support ( request  atmosphere response impl . new instance (  )  )  ;  assert not null ( r . ge"
1929,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\ManagedAtmosphereHandlerTest.java,test override broadcaster,"@ test public void   (  )  throws io exception   servlet exception  {  framework . set default broadcaster class name (  simple broadcaster . class . get name (  )  )  ;   atmosphere request request = new  atmosphere request impl .  builder (  )  . path info ( "" / override"" )  . method ( ""get"" )  . build (  )  ;  request . he"
1930,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\ManagedAtmosphereHandlerTest.java,test post,"@ test public void   (  )  throws io exception   servlet exception  {   atmosphere request request = new  atmosphere request impl .  builder (  )  . path info ( "" / b"" )  . method ( ""post"" )  . body ( ""test"" )  . build (  )  ;  framework . do comet support ( request  atmosphere response impl . new instance (  )  )  ;  assert no"
1931,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\ManagedAtmosphereHandlerTest.java,test post construct,"@ test public void   (  )  throws io exception   servlet exception  {   atmosphere request request = new  atmosphere request impl .  builder (  )  . path info ( "" / post construct"" )  . method ( ""get"" )  . build (  )  ;  framework . do comet support ( request  atmosphere response impl . new instance (  )  )  ;  assert notn"
1932,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\ManagedAtmosphereHandlerTest.java,test priority,"@ test public void   (  )  throws io exception   servlet exception  {   atmosphere request request = new  atmosphere request impl .  builder (  )  . path info ( "" / priority"" )  . method ( ""get"" )  . build (  )  ;  request . header ( x   atmosphere   transport long   polling   transport )  ;  framework . do comet support"
1933,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\ManagedAtmosphereHandlerTest.java,test put,"@ test public void   (  )  throws io exception   servlet exception  {   atmosphere request request = new  atmosphere request impl .  builder (  )  . path info ( "" / d"" )  . method ( ""put"" )  . build (  )  ;  framework . do comet support ( request  atmosphere response impl . new instance (  )  )  ;  assert not null ( r . get (  )  ) "
1934,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\ManagedAtmosphereHandlerTest.java,test reader message,"@ test public void   (  )  throws io exception   servlet exception  {   atmosphere request request = new  atmosphere request impl .  builder (  )  . path info ( "" / reader injection"" )  . method ( ""get"" )  . build (  )  ;  framework . do comet support ( request  atmosphere response impl . new instance (  )  )  ;  assert no"
1935,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\ManagedAtmosphereHandlerTest.java,test suspend,"@ test public void   (  )  throws io exception   servlet exception  {   atmosphere request request = new  atmosphere request impl .  builder (  )  . path info ( "" / j"" )  . method ( ""get"" )  . build (  )  ;  request . header ( x   atmosphere   transport long   polling   transport )  ;  framework . do comet support ( reques"
1936,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\ManagedAtmosphereHandlerTest.java,test web socket factory,@ test public void   (  )  throws io exception   servlet exception  {   byte array output stream b = new  byte array output stream (  )  ;  final  web socket w = new  array base web socket ( b )  ;  final  web socket processor processor =  web socket processor factory . get default (  )  . get web socket processor ( 
1937,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\ManagedAtmosphereHandlerTest.java,to string,"@ override public  string   (  )  {  return ""xxx"" ;   }  "
1938,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\ManagedAtmosphereHandlerTest.java,write,@ override public  web socket   ( byte[] b int offset int length )  throws io exception  {  output stream . write ( b offset length )  ;  return this ;   }  
1939,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\scanning\AnnotationScanningTest.java,action,public void   (  atmosphere resource impl r )  {  try  {  resumed ( r . get request (  )  r . get response (  )  )  ;   }  catch  (  io exception e )   {  e . print stack trace (  )  ;   }  catch  (   servlet exception e )   {  e . print stack trace (  )  ;   }   }  
1940,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\scanning\AnnotationScanningTest.java,create,@ before method public void   (  )  throws  throwable  {  framework = new  atmosphere framework (  )  ;  framework . set default broadcaster class name (  simple broadcaster . class . get name (  )  )  ;  framework . add annotation package (  annotation scanning test . class )  ;  framework . set async support ( new 
1941,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\scanning\AnnotationScanningTest.java,on disconnect,@ override public void   (  string uuid )  {  disconnected . set ( true )  ;   }  
1942,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\scanning\AnnotationScanningTest.java,on request,@ override public void   (  atmosphere resource resource )  throws io exception  {  resource . suspend (  )  ;   }  
1943,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\scanning\AnnotationScanningTest.java,on suspended,@ override public void   (  string uuid )  {  suspended . set ( true )  ;   }  
1944,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\scanning\AnnotationScanningTest.java,service,@ override public  action   (  atmosphere request req  atmosphere response res )  throws io exception   servlet exception  {  return suspended ( req res )  ;   }  
1945,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\scanning\AnnotationScanningTest.java,test annotation,"@ test public void   (  )  throws io exception   servlet exception  {   atmosphere request request = new  atmosphere request impl .  builder (  )  . path info ( "" / a"" )  . method ( ""get"" )  . build (  )  ;  framework . do comet support ( request  atmosphere response impl . new instance (  )  )  ;   asynchronous processor . "
1946,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\path\PathTest.java, array base web socket,public   (  output stream output stream )  {  super ( framework . get atmosphere config (  )  )  ;  this . output stream = output stream ;   }  
1947,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\path\PathTest.java, atmosphere handler path,public   (  )  {   +  + instance count ;   }  
1948,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\path\PathTest.java, inject atmosphere request,public   (  )  {   +  + instance count ;   }  
1949,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\path\PathTest.java, inject atmosphere resource,public   (  )  {   +  + instance count ;   }  
1950,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\path\PathTest.java, inject atmosphere resource event,public   (  )  {   +  + instance count ;   }  
1951,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\path\PathTest.java, inject atmosphere response,public   (  )  {   +  + instance count ;   }  
1952,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\path\PathTest.java, inject runtime,public   (  )  {   +  + instance count ;   }  
1953,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\path\PathTest.java, managed double path,public   (  )  {   +  + instance count ;   }  
1954,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\path\PathTest.java, managed path,public   (  )  {   +  + instance count ;   }  
1955,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\path\PathTest.java, meteor path,public   (  )  {   +  + instance count ;   }  
1956,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\path\PathTest.java, path var,public   (  )  {   +  + instance count ;   }  
1957,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\path\PathTest.java, singleton atmosphere handler path,public   (  )  {   +  + instance count ;   }  
1958,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\path\PathTest.java, singleton managed path,public   (  )  {   +  + instance count ;   }  
1959,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\path\PathTest.java, singleton meteor path,public   (  )  {   +  + instance count ;   }  
1960,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\path\PathTest.java, singleton web socket handler path,public   (  )  {   +  + instance count ;   }  
1961,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\path\PathTest.java, web socket handler path,public   (  )  {   +  + instance count ;   }  
1962,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\path\PathTest.java,action,@ override public void   (  atmosphere resource impl r )  {  try  {  resumed ( r . get request (  )  r . get response (  )  )  ;   }  catch  (  io exception e )   {  e . print stack trace (  )  ;   }  catch  (   servlet exception e )   {  e . print stack trace (  )  ;   }   }  
1963,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\path\PathTest.java,after,@ after method public void   (  )  {  r . set ( null )  ;  framework . destroy (  )  ;   }  
1964,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\path\PathTest.java,create,@ before method public void   (  )  throws  throwable  {  framework = new  atmosphere framework (  )  ;  framework . add annotation package (  atmosphere handler path . class )  ;  framework . set async support ( new  asynchronous processor ( framework . get atmosphere config (  )  )  {  @ override public  actio
1965,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\path\PathTest.java,do get,@ override public void   (  http servlet request req  http servlet response res )  throws io exception  {  r . set ( req . get path info (  )  )  ;   }  
1966,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\path\PathTest.java,get,@ get public void   (  )  {  r . set ( event . get resource (  )  . get request (  )  . get path info (  )  )  ;   }  
1967,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\path\PathTest.java,inspect,@ override public  action   (  atmosphere resource r )  {  invokation count +  +  ;  return  action . continue ;   }  
1968,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\path\PathTest.java,is open,@ override public boolean   (  )  {  return true ;   }  
1969,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\path\PathTest.java,on open,public void   (  web socket web socket )  throws io exception  {  r . set ( web socket . resource (  )  . get request (  )  . get path info (  )  )  ;   }  
1970,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\path\PathTest.java,on request,@ override public void   (  atmosphere resource resource )  throws io exception  {  r . set ( resource . get request (  )  . get path info (  )  )  ;   }  
1971,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\path\PathTest.java,service,@ override public  action   (  atmosphere request req  atmosphere response res )  throws io exception   servlet exception  {  return suspended ( req res )  ;   }  
1972,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\path\PathTest.java,test atmosphere handler path,"@ test public void   (  )  throws io exception   servlet exception  {  instance count = 0 ;   atmosphere request request = new  atmosphere request impl .  builder (  )  . path info ( "" / ah / test2"" )  . method ( ""get"" )  . build (  )  ;  framework . do comet support ( request  atmosphere response impl . new instance (  )  ) "
1973,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\path\PathTest.java,test atmosphere request injection,"@ test ( enabled = true )  public void   (  )  throws io exception   servlet exception  {  instance count = 0 ;   atmosphere request request = new  atmosphere request impl .  builder (  )  . path info ( "" / request / b123"" )  . method ( ""get"" )  . build (  )  ;  framework . do comet support ( request  atmosphere responsei"
1974,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\path\PathTest.java,test atmosphere resource event injection,"@ test ( enabled = true )  public void   (  )  throws io exception   servlet exception  {  instance count = 0 ;   atmosphere request request = new  atmosphere request impl .  builder (  )  . path info ( "" / resource event / b123"" )  . method ( ""get"" )  . build (  )  ;  framework . do comet support ( request  atmosphere res"
1975,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\path\PathTest.java,test atmosphere resource injection,"@ test public void   (  )  throws io exception   servlet exception  {  instance count = 0 ;   atmosphere request request = new  atmosphere request impl .  builder (  )  . path info ( "" / resource / b123"" )  . method ( ""get"" )  . build (  )  ;  framework . do comet support ( request  atmosphere response impl . new instan"
1976,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\path\PathTest.java,test atmosphere responset injection,"@ test ( enabled = true )  public void   (  )  throws io exception   servlet exception  {  instance count = 0 ;   atmosphere request request = new  atmosphere request impl .  builder (  )  . path info ( "" / response / b123"" )  . method ( ""get"" )  . build (  )  ;  framework . do comet support ( request  atmosphere response"
1977,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\path\PathTest.java,test managed managed double path message,"@ test public void   (  )  throws io exception   servlet exception  {  instance count = 0 ;   atmosphere request request = new  atmosphere request impl .  builder (  )  . path info ( "" / foo / bar / yo"" )  . method ( ""get"" )  . build (  )  ;  framework . do comet support ( request  atmosphere response impl . new instance ( "
1978,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\path\PathTest.java,test managed path message,"@ test public void   (  )  throws io exception   servlet exception  {  instance count = 0 ;   atmosphere request request = new  atmosphere request impl .  builder (  )  . path info ( "" / test"" )  . method ( ""get"" )  . build (  )  ;  framework . do comet support ( request  atmosphere response impl . new instance (  )  )  ;  as"
1979,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\path\PathTest.java,test managed web socket path message,@ test public void   (  )  throws io exception   servlet exception  {  instance count = 0 ;   byte array output stream b = new  byte array output stream (  )  ;  final  web socket w = new  array base web socket ( b )  ;  final  web socket processor processor =  web socket processor factory . get default (  )  . get we
1980,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\path\PathTest.java,test meteor path,"@ test public void   (  )  throws io exception   servlet exception  {  instance count = 0 ;   atmosphere request request = new  atmosphere request impl .  builder (  )  . path info ( "" / a / b / test2"" )  . method ( ""get"" )  . build (  )  ;  framework . do comet support ( request  atmosphere response impl . new instance (  ) "
1981,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\path\PathTest.java,test named injection,"@ test public void   (  )  throws io exception   servlet exception  {  instance count = 0 ;   atmosphere request request = new  atmosphere request impl .  builder (  )  . path info ( "" / inject / b123"" )  . method ( ""get"" )  . build (  )  ;  framework . do comet support ( request  atmosphere response impl . new instance"
1982,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\path\PathTest.java,test path var,"@ test public void   (  )  throws io exception   servlet exception  {  instance count = 0 ;   atmosphere request request = new  atmosphere request impl .  builder (  )  . path info ( "" / path var / aaa / path test / b123"" )  . method ( ""get"" )  . build (  )  ;  framework . do comet support ( request  atmosphere response im"
1983,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\path\PathTest.java,test singleton atmosphere handler,"@ test public void   (  )  throws io exception   servlet exception  {  instance count = 0 ;   atmosphere request request = new  atmosphere request impl .  builder (  )  . path info ( "" / singleton / atmospherehandler / yes"" )  . method ( ""get"" )  . build (  )  ;  framework . do comet support ( request  atmosphere resp"
1984,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\path\PathTest.java,test singleton managed,"@ test public void   (  )  throws io exception   servlet exception  {  instance count = 0 ;   atmosphere request request = new  atmosphere request impl .  builder (  )  . path info ( "" / singleton / managed / yes"" )  . method ( ""get"" )  . build (  )  ;  framework . do comet support ( request  atmosphere response impl . n"
1985,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\path\PathTest.java,test singleton managed web socket path message,@ test public void   (  )  throws io exception   servlet exception  {  instance count = 0 ;   byte array output stream b = new  byte array output stream (  )  ;  final  web socket w = new  array base web socket ( b )  ;  final  web socket processor processor =  web socket processor factory . get default (  )  . get we
1986,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\path\PathTest.java,test singleton meteor path,"@ test public void   (  )  throws io exception   servlet exception  {  instance count = 0 ;   atmosphere request request = new  atmosphere request impl .  builder (  )  . path info ( "" / singleton / meteor / test2"" )  . method ( ""get"" )  . build (  )  ;  framework . do comet support ( request  atmosphere response impl . "
1987,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\path\PathTest.java,write,@ override public  web socket   ( byte[] b int offset int length )  throws io exception  {  output stream . write ( b offset length )  ;  return this ;   }  
1988,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\interceptor\SimpleRestInterceptorTest.java,create atmosphere resource,"private  atmosphere resource   (  string method  string path  string data )  {   atmosphere request .  builder b = new  atmosphere request impl .  builder (  )  ;   atmosphere request request = b . method ( ""post"" )  . path info ( "" / "" )  . body ( data )  . build (  )  ;   atmosphere response response =  atmosphere response impl . new instance ( request )  ;  response . request ( request )  ;   atmosphere resource impl resource = new  atmosphere resource impl (  )  ;  resource . initialize ( framework . get atmosphere config (  )  framework . get broadcaster factory (  )  . get (  )  request response  mockito . mock (  async support . class )  null )  ;  return resource ;   }  "
1989,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\interceptor\SimpleRestInterceptorTest.java,extract content,private  string   (  reader reader )  {  char[] cbuf = new char[512] ;   string builder sb = new  string builder (  )  ;  int n ;  try  {  while  (  ( n = reader . read ( cbuf 0 cbuf . length )  )   !  =   - 1 )   {  sb . append ( cbuf 0 n )  ;   }   }  catch  (  io exception e )   {   }  return sb . to string (  )  ;   }  
1990,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\interceptor\SimpleRestInterceptorTest.java,get init parameter,@ override public  string   (  string name )  {  return null ;   }  
1991,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\interceptor\SimpleRestInterceptorTest.java,get init parameter names,@ override public  enumeration <  string >    (  )  {  return null ;   }  
1992,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\interceptor\SimpleRestInterceptorTest.java,get servlet context,@ override public  servlet context   (  )  {  return  mockito . mock (  servlet context . class )  ;   }  
1993,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\interceptor\SimpleRestInterceptorTest.java,get servlet name,"@ override public  string   (  )  {  return ""void"" ;   }  "
1994,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\interceptor\SimpleRestInterceptorTest.java,setup atmosphere,"private void   (  )  throws  exception  {  framework = new  atmosphere framework (  )  ;  framework . set async support (  mockito . mock (  async support . class )  )  ;  framework . init ( new  servlet config (  )  {  @ override public  string get servlet name (  )  {  return ""void"" ;   }  @ override public  servlet context get servlet context (  )  {  return  mockito . mock (  servlet context . class )  ;   }  @ override public  string get init parameter (   string name )  {  return null ;   }  @ override public  enumeration <  string >  get init parameter names (  )  {  return null ;   }   }   )  ;  config = framework . get atmosphere config (  )  ;   }  "
1995,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\interceptor\SimpleRestInterceptorTest.java,test create request continued,"@ test public void   (  )  throws  exception  {  setup atmosphere (  )  ;  final  string data1 = "" { \""id\"": \""123\""  \""method\"": \""post\""  \""path\"": \"" / topics / test\""  ""  +  ""\""type\"": \""application / json\""  \""detached\"": true  \""continue\"": true } \n { \""records\"": ["" ;  final  strin"
1996,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\interceptor\SimpleRestInterceptorTest.java,test create request detached,"@ test public void   (  )  throws  exception  {  setup atmosphere (  )  ;  final  string data = "" { \""id\"": \""123\""  \""method\"": \""post\""  \""path\"": \"" / topics / test\""  ""  +  ""\""type\"": \""application / json\""  \""detached\"": true } \n { \""records\"": [ { \""value\"": \""s2 fma2e = \"" } ] } "" ;   atmos"
1997,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\interceptor\SimpleRestInterceptorTest.java,test create request normal,"@ test public void   (  )  throws  exception  {  setup atmosphere (  )  ;  final  string data = "" { \""id\"": \""123\""  \""method\"": \""post\""  \""path\"": \"" / topics / test\""  ""  +  ""\""type\"": \""application / json\""  \""data\"": { \""records\"": [ { \""value\"": \""s2 fma2e = \"" } ] }  } "" ;   atmosphere resour"
1998,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\interceptor\SimpleRestInterceptorTest.java,test parsing no data,"@ test public void   (  )  throws  exception  {  final  string data = "" { \""id\"": \""123\""  \""accept\"" : \""text / plain\""  } "" ;   reader r = new  string reader ( data )  ;   simple rest interceptor . json envelope reader jer = new  simple rest interceptor . json envelope reader ( r )  ;   map <  string  string > "
1999,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\interceptor\SimpleRestInterceptorTest.java,test parsing no data apos,"@ test public void   (  )  throws  exception  {  final  string data = "" { 'id': \""123\""  'accept' : 'text / plain'  } "" ;   reader r = new  string reader ( data )  ;   simple rest interceptor . json envelope reader jer = new  simple rest interceptor . json envelope reader ( r )  ;   map <  string  string >  expec"
2000,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\interceptor\SimpleRestInterceptorTest.java,test parsing no data apos mixed space,"@ test public void   (  )  throws  exception  {  final  string data = "" { \n 'id':\""123\"" 'accept'\n: 'text / plain'\r  } "" ;   reader r = new  string reader ( data )  ;   simple rest interceptor . json envelope reader jer = new  simple rest interceptor . json envelope reader ( r )  ;   map <  string  string >  e"
2001,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\interceptor\SimpleRestInterceptorTest.java,test parsing no data number,"@ test public void   (  )  throws  exception  {  final  string data = "" { 'id': \""123\""  \""size\"" : 69124  'ack' : true  } "" ;   reader r = new  string reader ( data )  ;   simple rest interceptor . json envelope reader jer = new  simple rest interceptor . json envelope reader ( r )  ;   map <  string  string"
2002,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\interceptor\SimpleRestInterceptorTest.java,test parsing no data number mixed space,"@ test public void   (  )  throws  exception  {  final  string data = "" { 'id': \""123\""  \""size\"":69124  \r\n'ack' :true  } "" ;   reader r = new  string reader ( data )  ;   simple rest interceptor . json envelope reader jer = new  simple rest interceptor . json envelope reader ( r )  ;   map <  string  strin"
2003,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\interceptor\SimpleRestInterceptorTest.java,test parsing with data,"@ test public void   (  )  throws  exception  {  final  string data = "" { \""id\"": \""123\""  \""type\"" : \""application / json\""  \""data\"": { \""records\"": [ { \""value\"": \""s2 fma2e = \"" } ] }  } "" ;   reader r = new  string reader ( data )  ;   simple rest interceptor . json envelope reader jer = new  simpler"
2004,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\interceptor\SimpleRestInterceptorTest.java,test parsing with detached data withcrlf,"@ test public void   (  )  throws  exception  {  final  string data = "" { \""id\"": \""123\""  \""type\"" : \""application / json\""  \""detached\"": true } \r\n""  +  "" { \""records\"": [ { \""value\"": \""s2 fma2e = \"" }    { \""value\"": \""s2 fma2e = \"" }   { \""value\"": \""s2 fma2e = \"" } ] } "" ;   reader r = new  strin"
2005,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\interceptor\SimpleRestInterceptorTest.java,test parsing with detached data withlf,"@ test public void   (  )  throws  exception  {  final  string data = "" { \""id\"": \""123\""  \""type\"" : \""application / json\""  \""detached\"": true } \n""  +  "" { \""records\"": [ { \""value\"": \""s2 fma2e = \"" }    { \""value\"": \""s2 fma2e = \"" }   { \""value\"": \""s2 fma2e = \"" } ] } "" ;   reader r = new  stringr"
2006,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\interceptor\SimpleRestInterceptorTest.java,test parsing with detached text data,"@ test public void   (  )  throws  exception  {  final  string data = "" { \""id\"": \""123\""  \""type\"" : \""text / plain\""  \""detached\"": true } \n""  +  "" this is just a plain text"" ;   reader r = new  string reader ( data )  ;   simple rest interceptor . json envelope reader jer = new  simple rest inte"
2007,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\interceptor\SimpleRestInterceptorTest.java,test parsing with more data,"@ test public void   (  )  throws  exception  {  final  string data = "" { \""id\"": \""123\""  \""type\"" : \""application / json\""  ""  +  ""\""data\"": { \""records\"": [ { \""value\"": \""s2 fma2e = \"" }    { \""value\"": \""s2 fma2e = \"" }   { \""value\"": \""s2 fma2e = \"" } ] }  } "" ;   reader r = new  string reader ( data ) "
2008,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\interceptor\SimpleRestInterceptorTest.java,verify,"private void   (  simple rest interceptor . json envelope reader jer  map <  string  string >  expected headers  string expected body )  {   map <  string  string >  headers = jer . get headers (  )  ;  assert equals ( expected headers . size (  )  headers . size (  )  )  ;  for  (   string key : expected headers . key set (  )  )   {  assert equals ( headers . get ( key )  expected headers . get ( key )  ""value of key ""  +  key  +  "" differs"" )  ;   }  if  ( expected body  =  =  null )   {  assert null ( jer . get reader (  )  )  ;   }  else  {  assert equals ( extract content ( jer . get reader (  )  )  expected body )  ;   }   }  "
2009,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\container\version\JSR356WebSocketTest.java,answer,@ override public  void   ( final  invocation on mock invocation on mock )  throws  throwable  {  new  thread (  )  {  @ override public void run (  )  {   (  (  send handler ) invocation on mock . get arguments (  ) [1] )  . on result ( send result )  ;   }   }   . start (  )  ;  return null ;   }  
2010,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\container\version\JSR356WebSocketTest.java,is open,@ override public boolean   (  )  {  return true ;   }  
2011,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\container\version\JSR356WebSocketTest.java,mock write result,private void   ( final  send result send result )  {  do answer ( new  answer <  void >  (  )  {  @ override public  void answer (  final  invocation on mock invocation on mock )  throws  throwable  {  new  thread (  )  {  @ override public void run (  )  {   (  (  send handler ) invocation on mock . get arguments (  ) [1] )  . on result ( send result )  ;   }   }   . start (  )  ;  return null ;   }   }   )  . when ( async remote endpoint )  . send text ( any string (  )  any (  send handler . class )  )  ;   }  
2012,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\container\version\JSR356WebSocketTest.java,run,@ override public void   (  )  {   (  (  send handler ) invocation on mock . get arguments (  ) [1] )  . on result ( send result )  ;   }  
2013,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\container\version\JSR356WebSocketTest.java,set up,@ before method public void   (  )  throws  exception  {  session = mock (  session . class )  ;  async remote endpoint = mock (  remote endpoint .  async . class )  ;  when ( session . get async remote (  )  )  . then return ( async remote endpoint )  ;  web socket = new jsr356 web socket ( session new  atmosphere framewo
2014,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\container\version\JSR356WebSocketTest.java,test   semaphore   is   released   in   case   of   error   in   get async remote,"@ test ( time out = 1000 expected exceptions =  runtime exception . class )  public void   (  )  throws  exception  {  when ( session . get async remote (  )  )  . then throw ( new  error ( "" unexpected error"" )  )  . then return ( async remote endpoint )  ;  web socket . write ( "" hello1"" )  ;  web socket . write ( "" hello2"" )  ; "
2015,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\container\version\JSR356WebSocketTest.java,test   semaphore   is   released   in   case   of   npe   in   get async remote,"@ test ( time out = 1000 )  public void   (  )  throws  exception  {  when ( session . get async remote (  )  )  . then throw ( new  null pointer exception (  )  )  . then return ( async remote endpoint )  ;  web socket . write ( "" hello1"" )  ;  web socket . write ( "" hello2"" )  ;  verify ( async remote endpoint )  . send text ( eq ( "" hel"
2016,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\container\version\JSR356WebSocketTest.java,test   semaphore   is   released   in   case   of    runtime exception   in   get async remote,"@ test ( time out = 1000 expected exceptions =  runtime exception . class )  public void   (  )  throws  exception  {  when ( session . get async remote (  )  )  . then throw ( new  illegal argument exception ( "" invalid argument"" )  )  . then return ( async remote endpoint )  ;  web socket . write ( "" hello1"" )  ;  web sock"
2017,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\container\version\JSR356WebSocketTest.java,test   semaphore   is   released   in   case   of   failing   write,"@ test ( time out = 1000 )  public void   (  )  throws  exception  {  mock write result ( new  send result ( new  runtime exception ( "" fails"" )  )  )  ;  web socket . write ( "" hello"" )  ;  web socket . write ( "" hello"" )  ;  verify ( async remote endpoint times ( 2 )  )  . send text ( eq ( "" hello"" )  any (  send handler . class )  )  ;   } "
2018,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\container\version\JSR356WebSocketTest.java,test   semaphore   is   released   in   case   of   successful   write,"@ test ( time out = 1000 )  public void   (  )  throws  exception  {  mock write result ( new  send result (  )  )  ;  web socket . write ( "" hello"" )  ;  web socket . write ( "" hello"" )  ;  verify ( async remote endpoint times ( 2 )  )  . send text ( eq ( "" hello"" )  any (  send handler . class )  )  ;   }  "
2019,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereFrameworkTest.java,add,@ override public boolean   (  broadcaster b  object id )  {  return false ;   }  
2020,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereFrameworkTest.java,add broadcaster listener,@ override public  broadcaster factory   (  broadcaster listener b )  {  return this ;   }  
2021,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereFrameworkTest.java,broadcaster listeners,@ override public  collection <  broadcaster listener >    (  )  {  return null ;   }  
2022,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereFrameworkTest.java,get,@ override public  < t extends  broadcaster > t   (  class < t >  c  object id )  {  return null ;   }  
2023,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereFrameworkTest.java,get init parameter,@ override public  string   (  string name )  {  return null ;   }  
2024,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereFrameworkTest.java,get init parameter names,@ override public  enumeration <  string >    (  )  {  return null ;   }  
2025,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereFrameworkTest.java,get servlet context,@ override public  servlet context   (  )  {  return mock (  servlet context . class )  ;   }  
2026,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereFrameworkTest.java,get servlet name,"@ override public  string   (  )  {  return ""void"" ;   }  "
2027,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereFrameworkTest.java,init,@ override public void   (  servlet config config )  throws  servlet exception  {  super . init ( config )  ;  framework (  )  . set broadcaster factory ( new  my broadcaster factory (  )  )  ;   }  
2028,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereFrameworkTest.java,inspect,@ override public  action   ( final  atmosphere resource r )  {  r . get request (  )  . set attribute (  my interceptor . class . get name (  )   +  + call )  ;  return  action . continue ;   }  
2029,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereFrameworkTest.java,lookup,@ override public  < t extends  broadcaster > t   (  object id boolean create if null )  {  return null ;   }  
2030,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereFrameworkTest.java,lookup all,@ override public  collection <  broadcaster >    (  )  {  return null ;   }  
2031,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereFrameworkTest.java,on post destroy,@ override public void   (  atmosphere framework f )  {  count . increment and get (  )  ;   }  
2032,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereFrameworkTest.java,on post init,@ override public void   (  atmosphere framework f )  {  count . increment and get (  )  ;   }  
2033,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereFrameworkTest.java,on pre destroy,@ override public void   (  atmosphere framework f )  {  count . increment and get (  )  ;   }  
2034,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereFrameworkTest.java,on pre init,@ override public void   (  atmosphere framework f )  {  count . increment and get (  )  ;   }  
2035,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereFrameworkTest.java,remove,@ override public boolean   (  object id )  {  return false ;   }  
2036,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereFrameworkTest.java,remove broadcaster listener,@ override public  broadcaster factory   (  broadcaster listener b )  {  return this ;   }  
2037,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereFrameworkTest.java,started,@ override public void   (  atmosphere framework framework )  {  b . set ( true )  ;   }  
2038,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereFrameworkTest.java,test atmosphere framework listener,@ test public void   (  )  throws  servlet exception  {   atmosphere servlet s = new  my atmosphere servlet (  )  ;  final  atomic integer count = new  atomic integer (  )  ;  s . framework (  )  . framework listener ( new  atmosphere framework listener (  )  {  @ override public void on pre init (   atmosphere fra
2039,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereFrameworkTest.java,test atmosphere servlet,"@ test public void   (  )  throws  servlet exception  {   atmosphere servlet s = new  my atmosphere servlet (  )  ;  s . init ( new  servlet config (  )  {  @ override public  string get servlet name (  )  {  return ""void"" ;   }  @ override public  servlet context get servlet context (  )  {  return mock (  servletc"
2040,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereFrameworkTest.java,test broadcaster factory,"@ test public void   (  )  throws  exception  {   atmosphere framework f = new  atmosphere framework (  )  ;  f . set broadcaster factory ( new  default broadcaster factory (  default broadcaster . class ""never"" f . get atmosphere config (  )  )  )  ;  assert not null ( f . get broadcaster factory (  )  )  ;   }  "
2041,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereFrameworkTest.java,test is init,@ test public void   (  )  throws  servlet exception  {   atmosphere framework f = new  atmosphere framework (  )  ;   ;  f . init (  )  ;  final  atomic boolean b = new  atomic boolean (  )  ;  f . get atmosphere config (  )  . startup hook ( new  atmosphere config .  startup hook (  )  {  @ override public void started (  
2042,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereFrameworkTest.java,test reload,@ test public void   (  )  throws  servlet exception  {   atmosphere framework f = new  atmosphere framework (  )  ;   ;  f . init (  )  ;  f . destroy (  )  ;  f . init (  )  ;  assert not null ( f . get broadcaster factory (  )  )  ;   }  
2043,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereFrameworkTest.java,test servlet context factory,@ test public void   (  )  throws  servlet exception  {   atmosphere framework f = new  atmosphere framework (  )  ;   ;  f . init (  )  ;  assert not null (  servlet context factory . get default (  )  . get servlet context (  )  )  ;   }  
2044,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\interceptor\SSEAtmosphereInterceptorTest.java,get init parameter,@ override public  string   (  string name )  {  return null ;   }  
2045,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\interceptor\SSEAtmosphereInterceptorTest.java,get init parameter names,@ override public  enumeration <  string >    (  )  {  return null ;   }  
2046,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\interceptor\SSEAtmosphereInterceptorTest.java,get servlet context,@ override public  servlet context   (  )  {  return  mockito . mock (  servlet context . class )  ;   }  
2047,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\interceptor\SSEAtmosphereInterceptorTest.java,get servlet name,"@ override public  string   (  )  {  return ""void"" ;   }  "
2048,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\interceptor\SSEAtmosphereInterceptorTest.java,is ready,@ override public boolean   (  )  {  return true ;   }  
2049,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\interceptor\SSEAtmosphereInterceptorTest.java,setup,"@ before method public void   (  )  throws  exception  {  framework = new  atmosphere framework (  )  ;  framework . set async support (  mockito . mock (  async support . class )  )  ;  framework . init ( new  servlet config (  )  {  @ override public  string get servlet name (  )  {  return ""void"" ;   }  @ override pub"
2050,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\interceptor\SSEAtmosphereInterceptorTest.java,test data writer,@ test public void   (  )  throws  exception  {  final  byte array output stream baos = new  byte array output stream (  )  ;   servlet response resp =  mockito . mock (  http servlet response . class )  ;   mockito . when ( resp . get output stream (  )  )  . then return ( new  servlet output stream (  )  {  @ override publi
2051,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\interceptor\SSEAtmosphereInterceptorTest.java,write,@ override public void   ( byte[] b int off int len )  throws io exception  {  baos . write ( b off len )  ;   }  
2052,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AsyncIOInterceptorTest.java,chaining,@ test public void   (  )  throws  servlet exception  io exception  {  final  atomic reference <  string buffer >  s = new  atomic reference <  >  ( new  string buffer (  )  )  ;   atmosphere response res =  atmosphere response impl . new instance (  )  . request (  atmosphere request impl . new instance (  )  )  ;  res . req
2053,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AsyncIOInterceptorTest.java,error,@ override public byte[]   (  atmosphere response response int status code  string reason phrase )  {  return new byte[0] ;   }  
2054,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AsyncIOInterceptorTest.java,single test,@ test public void   (  )  throws  servlet exception  io exception  {  final  atomic reference <  string >  s = new  atomic reference <  >  (  )  ;   atmosphere response res =  atmosphere response impl . new instance (  )  . request (  atmosphere request impl . new instance (  )  )  ;  res . request (  )  . set attribute ( prop
2055,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AsyncIOInterceptorTest.java,transform payload,"@ override public byte[]   (  atmosphere response response byte[] response draft byte[] data )  throws io exception  {  s . get (  )  . append ( new  string ( response draft )   +  "" - yoyo"" )  ;  return response draft ;   }  "
2056,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereHandlerTest.java,action,public void   (  atmosphere resource impl r )  {  try  {  resumed ( r . get request (  )  r . get response (  )  )  ;   }  catch  (  io exception e )   {  e . print stack trace (  )  ;   }  catch  (   servlet exception e )   {  e . print stack trace (  )  ;   }   }  
2057,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereHandlerTest.java,create,@ before method public void   (  )  throws  throwable  {  framework = new  atmosphere framework (  )  ;  framework . set async support ( new  asynchronous processor ( framework . get atmosphere config (  )  )  {  @ override public  action service (   atmosphere request req   atmosphere response res )  thr
2058,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereHandlerTest.java,get init parameter,@ override public  string   (  string name )  {  return null ;   }  
2059,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereHandlerTest.java,get init parameter names,@ override public  enumeration <  string >    (  )  {  return null ;   }  
2060,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereHandlerTest.java,get servlet context,@ override public  servlet context   (  )  {  return mock (  servlet context . class )  ;   }  
2061,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereHandlerTest.java,get servlet name,"@ override public  string   (  )  {  return ""void"" ;   }  "
2062,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereHandlerTest.java,on state change,@ override public void   (  atmosphere resource event event )  throws io exception  {  e . set ( event )  ;   }  
2063,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereHandlerTest.java,service,@ override public  action   (  atmosphere request req  atmosphere response res )  throws io exception   servlet exception  {  return suspended ( req res )  ;   }  
2064,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereHandlerTest.java,tes on state change,@ test public void   (  )  throws io exception   servlet exception  {  final  atomic reference <  atmosphere resource >  r = new  atomic reference <  atmosphere resource >  (  )  ;  final  atomic reference <  atmosphere resource event >  e = new  atomic reference <  atmosphere resource event >  (  )  ;  framework . 
2065,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereHandlerTest.java,test byte cached list,"@ test public void   (  )  throws  exception  {   atmosphere framework f = new  atmosphere framework (  )  ;  f . set broadcaster factory ( new  default broadcaster factory (  default broadcaster . class ""never"" f . get atmosphere config (  )  )  )  ;  assert not null ( f . get broadcaster factory (  )  )  ;  broadcast"
2066,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereHandlerTest.java,write,@ override public  asyncio writer   (  atmosphere response r byte[] data )  throws io exception  {  ref . set ( data )  ;  return this ;   }  
2067,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereInterceptorWriterTest.java,add interceptors,@ test public void   (  )  {   atmosphere interceptor writer writer = new  atmosphere interceptor writer (  )  ;   test filter[] filters = new  test filter[4] ;  for  ( int i = 0 ;  i  <  4 ;  i +  +  )   {  filters[i] = new  test filter (  )  ;   }  writer . interceptor ( filters[0] )  ;  writer . interceptor ( filters[1] )  ; 
2068,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereInterceptorWriterTest.java,error,@ override public byte[]   (  atmosphere response response int status code  string reason phrase )  {  return null ;   }  
2069,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereInterceptorWriterTest.java,transform payload,@ override public byte[]   (  atmosphere response response byte[] response draft byte[] data )  throws io exception  {  return null ;   }  
2070,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereInterceptorWriterTest.java,verify interceptors,"private void   (  atmosphere interceptor writer writer  asyncio interceptor[] filters )  {  int p = 0 ;  for  (   asyncio interceptor f : writer . filters )   {  if  (  ! filters[p] . equals ( f )  )   {  fail ( ""filter at index ""  +  p  +  "" does not match"" )  ;   }  p +  +  ;   }  assert equals ( filters . length p ""the wrong size of the list"" )  ;  p = filters . length ;  for  (   asyncio interceptor f : writer . reversed filters )   {   -  - p ;  if  (  ! filters[p] . equals ( f )  )   {  fail ( ""reversed filter index at ""  +  p  +  "" does not match"" )  ;   }   }  assert equals ( filters . length filters . length  -  p ""the wrong size of the list"" )  ;   }  "
2071,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereRequestTest.java,create,@ before method public void   (  )  throws  throwable  {  framework = new  atmosphere framework (  )  ;  framework . set async support ( new  blockingio comet support ( framework . get atmosphere config (  )  )  )  ;  framework . init ( new  servlet config (  )  {  @ override public  string get servlet name (  )  {  ret
2072,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereRequestTest.java,get init parameter,@ override public  string   (  string name )  {  return null ;   }  
2073,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereRequestTest.java,get init parameter names,@ override public  enumeration <  string >    (  )  {  return null ;   }  
2074,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereRequestTest.java,get servlet context,@ override public  servlet context   (  )  {  return mock (  servlet context . class )  ;   }  
2075,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereRequestTest.java,get servlet name,"@ override public  string   (  )  {  return ""void"" ;   }  "
2076,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereRequestTest.java,inspect,@ override public  action   (  atmosphere resource r )  {  e . set ( r . get request (  )  . get query string (  )  )  ;  return  action . cancelled ;   }  
2077,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereRequestTest.java,on pre suspend,"@ override public void   (  atmosphere resource event event )  {   atmosphere response response = event . get resource (  )  . get response (  )  ;  response . set character encoding ( ""utf - 8"" )  ;  e . set ( response )  ;   }  "
2078,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereRequestTest.java,on request,@ override public void   (  atmosphere resource resource )  throws io exception  {  e . set ( resource . get request (  )  . body (  )  )  ;   }  
2079,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereRequestTest.java,stop,@ after method public void   (  )  {  framework . destroy (  )  ;   }  
2080,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereRequestTest.java,test encoding on pre suspend,"@ test public void   (  )  throws io exception   servlet exception  {  final  atomic reference <  atmosphere response >  e = new  atomic reference <  atmosphere response >  (  )  ;  framework . add atmosphere handler ( "" / a"" new  abstract reflector atmosphere handler (  )  {  @ override public void on reque"
2081,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereRequestTest.java,test force content type,"@ test public void   (  )  throws  exception  {   atmosphere request request = new  atmosphere request impl .  builder (  )  . path info ( "" / a"" )  . body ( ""test"" . get bytes (  )  )  . build (  )  ;  assert equals ( request . get content type (  )  ""text / plain"" )  ;  request = new  atmosphere request impl .  builder (  )  . path inf"
2082,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereRequestTest.java,test normal query string builder,"@ test public void   (  )  throws io exception   servlet exception  {  framework . add atmosphere handler ( "" / a"" new  abstract reflector atmosphere handler (  )  {  @ override public void on request (   atmosphere resource resource )  throws io exception  {   }  @ override public void destroy (  ) "
2083,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereRequestTest.java,test query string as request,"@ test public void   (  )  throws io exception   servlet exception  {  framework . add atmosphere handler ( "" / a"" new  abstract reflector atmosphere handler (  )  {  @ override public void on request (   atmosphere resource resource )  throws io exception  {   }  @ override public void destroy (  ) "
2084,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereRequestTest.java,test query string builder,"@ test public void   (  )  throws io exception   servlet exception  {  framework . add atmosphere handler ( "" / a"" new  abstract reflector atmosphere handler (  )  {  @ override public void on request (   atmosphere resource resource )  throws io exception  {   }  @ override public void destroy (  ) "
2085,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereRequestTest.java,test request body bytes,"@ test public void   (  )  throws io exception   servlet exception  {  final  atomic reference <  atmosphere request impl .  body >  e = new  atomic reference <  atmosphere request impl .  body >  (  )  ;  framework . add atmosphere handler ( "" / a"" new  abstract reflector atmosphere handler (  )  {  @ override pub"
2086,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereRequestTest.java,test request body string,"@ test public void   (  )  throws io exception   servlet exception  {  final  atomic reference <  atmosphere request impl .  body >  e = new  atomic reference <  atmosphere request impl .  body >  (  )  ;  framework . add atmosphere handler ( "" / a"" new  abstract reflector atmosphere handler (  )  {  @ override pub"
2087,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereRequestTest.java,test strinp query string builder,"@ test public void   (  )  throws io exception   servlet exception  {  framework . add atmosphere handler ( "" / a"" new  abstract reflector atmosphere handler (  )  {  @ override public void on request (   atmosphere resource resource )  throws io exception  {   }  @ override public void destroy (  ) "
2088,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereInterceptorTest.java,action cancelled test,"@ test public void   (  )  throws  servlet exception  io exception  {  framework . add atmosphere handler ( "" / *"" handler )  ;  framework . interceptor ( new  atmosphere interceptor (  )  {  @ override public void configure (   atmosphere config config )  {   }  @ override public void destroy (  )  {   }  @"
2089,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereInterceptorTest.java,action continue created test,"@ test public void   (  )  throws  servlet exception  io exception  {  framework . add atmosphere handler ( "" / *"" handler )  ;  framework . interceptor ( new  atmosphere interceptor (  )  {  @ override public void configure (   atmosphere config config )  {   }  @ override public void destroy (  )  {   }  @"
2090,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereInterceptorTest.java,action continue test,"@ test public void   (  )  throws  servlet exception  io exception  {  framework . add atmosphere handler ( "" / *"" handler )  ;  framework . interceptor ( new  atmosphere interceptor (  )  {  @ override public void configure (   atmosphere config config )  {   }  @ override public  action inspect (   atm"
2091,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereInterceptorTest.java,action created test,"@ test public void   (  )  throws  servlet exception  io exception  {  framework . add atmosphere handler ( "" / *"" handler )  ;  framework . interceptor ( new  atmosphere interceptor (  )  {  @ override public void configure (   atmosphere config config )  {   }  @ override public void destroy (  )  {   }  @"
2092,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereInterceptorTest.java,configure test,@ test public void   (  )  throws  servlet exception  io exception  {  final  atomic integer count = new  atomic integer (  )  ;  framework = new  atmosphere framework (  )  ;  framework . set async support ( mock (  async support . class )  )  ;  framework . interceptor ( new  atmosphere interceptor (  )  {  @ overr
2093,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereInterceptorTest.java,create,"@ before method public void   (  )  throws  throwable  {  framework = new  atmosphere framework (  )  ;  framework . set async support ( mock (  async support . class )  )  ;  framework . init ( new  servlet config (  )  {  @ override public  string get servlet name (  )  {  return ""void"" ;   }  @ override public  serv"
2094,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereInterceptorTest.java,get init parameter,@ override public  string   (  string name )  {  return null ;   }  
2095,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereInterceptorTest.java,get init parameter names,@ override public  enumeration <  string >    (  )  {  return null ;   }  
2096,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereInterceptorTest.java,get servlet context,@ override public  servlet context   (  )  {  return mock (  servlet context . class )  ;   }  
2097,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereInterceptorTest.java,get servlet name,"@ override public  string   (  )  {  return ""void"" ;   }  "
2098,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereInterceptorTest.java,inspect,@ override public  action   (  atmosphere resource r )  {  return  action . continue ;   }  
2099,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereInterceptorTest.java,post inspect,@ override public void   (  atmosphere resource r )  {  post inspected . set ( true )  ;   }  
2100,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereInterceptorTest.java,post inspect on thrown,"@ test public void   (  )  throws  exception  {   atmosphere handler handler = mock (  atmosphere handler . class )  ;   mockito . do throw ( new  runtime exception (  )  )  . when ( handler )  . on request (  mockito . any (  atmosphere resource . class )  )  ;  framework . add atmosphere handler ( "" / *"" handler )  ;  final a"
2101,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereInterceptorTest.java,priority,@ override public priority   (  )  {  return  invokation order . first   before   default ;   }  
2102,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereInterceptorTest.java,priority illegal test,"@ test public void   (  )  throws  servlet exception  io exception  {  framework . add atmosphere handler ( "" / *"" handler )  ;  framework . interceptor ( new  atmosphere interceptor adapter (  )  {  @ override public  action inspect (   atmosphere resource r )  {  return  action . created ;   }  @ override"
2103,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereInterceptorTest.java,priority test,"@ test public void   (  )  throws  servlet exception  io exception  {  framework . add atmosphere handler ( "" / *"" handler )  ;  framework . interceptor ( new  atmosphere interceptor adapter (  )  {  @ override public  action inspect (   atmosphere resource r )  {  return  action . created ;   }  @ override"
2104,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereInterceptorTest.java,service,@ override public  action   (  atmosphere request req  atmosphere response res )  throws io exception   servlet exception  {  return action ( req res )  ;   }  
2105,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereInterceptorTest.java,to string,"@ override public  string   (  )  {  return ""xxx"" ;   }  "
2106,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceFactoryTest.java,broadcasters test,"@ test public void   (  )  {   broadcaster b1 = framework . get broadcaster factory (  )  . get ( ""b1"" )  ;   broadcaster b2 = framework . get broadcaster factory (  )  . get ( ""b2"" )  ;   atmosphere resource r = framework . get atmosphere config (  )  . resources factory (  )  . create ( framework . get atmosphere config (  )  b"
2107,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceFactoryTest.java,create,"@ before method public void   (  )  throws  throwable  {  framework = new  atmosphere framework (  )  ;  framework . set async support ( mock (  async support . class )  )  ;  framework . init ( new  servlet config (  )  {  @ override public  string get servlet name (  )  {  return ""void"" ;   }  @ override public  serv"
2108,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceFactoryTest.java,create test,@ test public void   (  )  {   atmosphere resource r = framework . get atmosphere config (  )  . resources factory (  )  . create ( framework . get atmosphere config (  )  mock (  broadcaster . class )   atmosphere response impl . new instance (  )  . request (  atmosphere request impl . new instance (  )  )  mock (  async suppo
2109,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceFactoryTest.java,delete test,"@ test public void   (  )  {  for  ( int i = 0 ;  i  <  10 ;  i +  +  )   {  framework . get broadcaster factory (  )  . get (  string . value of ( i )  )  ;   }   broadcaster b2 = framework . get broadcaster factory (  )  . get ( ""b2"" )  ;   atmosphere resource r = framework . get atmosphere config (  )  . resources factory (  )  . create ( fram"
2110,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceFactoryTest.java,find test,"@ test public void   (  )  {   broadcaster b1 = framework . get broadcaster factory (  )  . get ( ""b1"" )  ;   broadcaster b2 = framework . get broadcaster factory (  )  . get ( ""b2"" )  ;   atmosphere resource r = framework . get atmosphere config (  )  . resources factory (  )  . create ( framework . get atmosphere config (  )  b"
2111,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceFactoryTest.java,get init parameter,@ override public  string   (  string name )  {  return null ;   }  
2112,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceFactoryTest.java,get init parameter names,@ override public  enumeration <  string >    (  )  {  return null ;   }  
2113,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceFactoryTest.java,get servlet context,@ override public  servlet context   (  )  {  return mock (  servlet context . class )  ;   }  
2114,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceFactoryTest.java,get servlet name,"@ override public  string   (  )  {  return ""void"" ;   }  "
2115,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceFactoryTest.java,not found test,@ test public void   (  )  {  for  ( int i = 0 ;  i  <  10 ;  i +  +  )   {  framework . get broadcaster factory (  )  . get (  string . value of ( i )  )  ;   }   atmosphere resource r = framework . get atmosphere config (  )  . resources factory (  )  . create ( framework . get atmosphere config (  )  framework . get broadcaster factory ( 
2116,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceListenerTest.java,create,@ before method public void   (  )  throws  throwable  {  framework = new  atmosphere framework (  )  ;  framework . set async support ( new  blockingio comet support ( framework . get atmosphere config (  )  )  )  ;  framework . init ( new  servlet config (  )  {  @ override public  string get servlet name (  )  {  ret
2117,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceListenerTest.java,get init parameter,@ override public  string   (  string name )  {  return null ;   }  
2118,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceListenerTest.java,get init parameter names,@ override public  enumeration <  string >    (  )  {  return null ;   }  
2119,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceListenerTest.java,get servlet context,@ override public  servlet context   (  )  {  return mock (  servlet context . class )  ;   }  
2120,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceListenerTest.java,get servlet name,"@ override public  string   (  )  {  return ""void"" ;   }  "
2121,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceListenerTest.java,inspect,"@ override public  action   (  atmosphere resource r )  {  r . add event listener ( listener )  . suspend (  )  ;  try  {  r . get broadcaster (  )  . broadcast ( ""void"" )  . get (  )  ;   }  catch  (   interrupted exception e )   {   }  catch  (   execution exception e )   {   }  return  action . continue ;   }  "
2122,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceListenerTest.java,on broadcast,@ override public void   (  atmosphere resource event event )  {  broadcasted . set ( true )  ;   }  
2123,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceListenerTest.java,on close,@ override public void   (  atmosphere resource event event )  {  closed . set ( true )  ;   }  
2124,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceListenerTest.java,on disconnect,@ override public void   (  atmosphere resource event event )  {  disconnected . set ( true )  ;   }  
2125,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceListenerTest.java,on pre suspend,@ override public void   (  atmosphere resource event event )  {  pre suspended . set ( true )  ;   }  
2126,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceListenerTest.java,on resume,@ override public void   (  atmosphere resource event event )  {  resumed . set ( true )  ;   }  
2127,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceListenerTest.java,on suspend,@ override public void   (  atmosphere resource event event )  {  suspended . set ( true )  ;   }  
2128,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceListenerTest.java,post inspect,@ override public void   (  atmosphere resource r )  {  try  {  r . close (  )  ;   }  catch  (  io exception e )   {  e . print stack trace (  )  ;   }   }  
2129,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceListenerTest.java,test listeners callback,"@ test public void   (  )  throws io exception   servlet exception  {  framework . add atmosphere handler ( "" / a"" new  abstract reflector atmosphere handler (  )  {  @ override public void on request (   atmosphere resource resource )  throws io exception  {   }  @ override public void destroy (  ) "
2130,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceListenerTest.java,test on close,"@ test public void   (  )  throws io exception   servlet exception  {  framework . add atmosphere handler ( "" / a"" new  abstract reflector atmosphere handler (  )  {  @ override public void on request (   atmosphere resource resource )  throws io exception  {   }  @ override public void destroy (  ) "
2131,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceStateRecoveryTest.java,basic tracking test,@ test public void   (  )  throws  servlet exception  io exception  {  recovery . configure ( config )  ;  recovery . inspect ( r )  ;  r . suspend (  )  ;  assert equals ( recovery . states (  )  . size (  )  1 )  ;   }  
2132,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceStateRecoveryTest.java,cancel atmosphere resource test,@ test public void   (  )  throws  servlet exception  io exception  {  recovery . configure ( config )  ;  recovery . inspect ( r )  ;  r . suspend (  )  ;  r . get broadcaster (  )  . remove atmosphere resource ( r )  ;  r . close (  )  ;  assert equals ( recovery . states (  )  . size (  )  1 )  ;   }  
2133,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceStateRecoveryTest.java,create,"@ before method public void   (  )  throws  throwable  {  framework = new  atmosphere framework (  )  ;  framework . set async support ( mock (  async support . class )  )  ;  framework . init (  )  ;  config = framework . get atmosphere config (  )  ;  r = config . resources factory (  )  . create ( config ""1234567"" )  ;  r . se"
2134,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceStateRecoveryTest.java,destroy,@ after method public void   (  )  {  recovery . states (  )  . clear (  )  ;  framework . destroy (  )  ;   }  
2135,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceStateRecoveryTest.java,long polling aggregated test,@ test ( enabled = false )  public void   (  )  throws  servlet exception  io exception   execution exception   interrupted exception  {  final  atomic reference <  object >  ref = new  atomic reference <  >  (  )  ;   atmosphere resource impl r =  (  atmosphere resource impl ) config . resources factory (  )  . cre
2136,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceStateRecoveryTest.java,on resume,@ override public void   (  atmosphere resource event event )  {  resumed . set ( true )  ;   }  
2137,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceStateRecoveryTest.java,on state change,@ override public void   (  atmosphere resource event event )  throws io exception  {  ref . set ( event . get message (  )  )  ;   }  
2138,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceStateRecoveryTest.java,remove atmosphere resource test,@ test public void   (  )  throws  servlet exception  io exception  {  recovery . states (  )  . clear (  )  ;  recovery . configure ( config )  ;  recovery . inspect ( r )  ;  r . suspend (  )  ;  r . get broadcaster (  )  . remove atmosphere resource ( r )  ;  assert equals ( recovery . states (  )  . get ( r . uuid (  )  )  . ids (  )  . size (  ) 
2139,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceStateRecoveryTest.java,restore partial state test,"@ test public void   (  )  throws  servlet exception  io exception  {  recovery . configure ( config )  ;  recovery . inspect ( r )  ;  config . get broadcaster factory (  )  . lookup ( "" / 1"" true )  . add atmosphere resource ( r )  ;  config . get broadcaster factory (  )  . lookup ( "" / 2"" true )  . add atmosphere resource"
2140,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceStateRecoveryTest.java,restore state test,"@ test ( enabled = false )  public void   (  )  throws  servlet exception  io exception  {  recovery . configure ( config )  ;  recovery . inspect ( r )  ;  config . get broadcaster factory (  )  . lookup ( "" / 1"" true )  . add atmosphere resource ( r )  ;  config . get broadcaster factory (  )  . lookup ( "" / 2"" true )  . add atm"
2141,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceStateRecoveryTest.java,timeout test,@ test public void   (  )  throws  servlet exception  io exception   interrupted exception  {  recovery . configure ( config )  ;  recovery . inspect ( r )  ;  final  atomic boolean resumed = new  atomic boolean (  )  ;  final  count down latch latch = new  count down latch ( 1 )  ;  r . add event listener ( new a
2142,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceTest.java, test asyncio writer,public   (  output stream out )  {  this . out = out ;   }  
2143,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceTest.java,create,@ before method public void   (  )  throws  throwable  {  framework = new  atmosphere framework (  )  ;  framework . set async support ( new  blockingio comet support ( framework . get atmosphere config (  )  )  )  ;  framework . init ( new  servlet config (  )  {  @ override public  string get servlet name (  )  {  ret
2144,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceTest.java,flush,@ override public  asyncio writer   (  atmosphere response r )  throws io exception  {  return this ;   }  
2145,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceTest.java,get init parameter,@ override public  string   (  string name )  {  return null ;   }  
2146,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceTest.java,get init parameter names,@ override public  enumeration <  string >    (  )  {  return null ;   }  
2147,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceTest.java,get servlet context,@ override public  servlet context   (  )  {  return mock (  servlet context . class )  ;   }  
2148,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceTest.java,get servlet name,"@ override public  string   (  )  {  return ""void"" ;   }  "
2149,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceTest.java,inspect,@ override public  action   (  atmosphere resource r )  {  try  {  r . get broadcaster (  )  . add atmosphere resource ( r )  ;  if  ( suspended . get count (  )   =  =  1 )   {  r . suspend (  )  ;  return  action . suspend ;   }  else  {  return  action . continue ;   }   }  finally  {  suspended . count down (  )  ;   }   }  
2150,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceTest.java,redirect,@ override public  asyncio writer   (  atmosphere response r  string location )  throws io exception  {  return this ;   }  
2151,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceTest.java,run,public void   (  )  {  try  {  framework . do comet support ( parent request  atmosphere response impl . new instance (  )  . request ( parent request )  )  ;   }  catch  (  io exception e )   {  e . print stack trace (  )  ;   }  catch  (   servlet exception e )   {  e . print stack trace (  )  ;   }   }  
2152,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceTest.java,test cancel parentuuid,"@ test public void   (  )  throws io exception   servlet exception   interrupted exception  {  framework . add atmosphere handler ( "" / a"" new  abstract reflector atmosphere handler (  )  {  @ override public void on request (   atmosphere resource resource )  throws io exception  {   }  @ override"
2153,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceTest.java,test close response output stream,@ test public void   (  )  throws io exception  {   atmosphere response response =  atmosphere response impl . new instance (  )  ;   asyncio writer writer = mock (  asyncio writer . class )  ;   asyncio writer wswriter = mock (  web socket . class )  ;  response . asyncio writer ( writer )  ;   servlet output stream 
2154,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceTest.java,test close response writer,@ test public void   (  )  throws io exception  {   atmosphere response response =  atmosphere response impl . new instance (  )  ;   asyncio writer writer = mock (  asyncio writer . class )  ;   asyncio writer wswriter = mock (  web socket . class )  ;  response . asyncio writer ( writer )  ;   print writer pw = respo
2155,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceTest.java,test completion aware for get async,@ test public void   (  )  throws io exception  {  verify test completion aware for get async ( true )  ;   }  
2156,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceTest.java,test completion aware for start async,@ test public void   (  )  throws io exception  {  verify test completion aware for start async ( true )  ;   }  
2157,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceTest.java,test completion aware for sync,@ test public void   (  )  throws io exception   servlet exception  {  verify test completion aware for sync ( true )  ;   }  
2158,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceTest.java,test completion aware for sync but start async,"@ test public void   (  )  throws io exception   servlet exception  {   servlet s = mock (  servlet . class )  ;  framework . add init parameter (  application config . response   completion   aware ""true"" )  ;   reflector servlet processor handler = new  reflector servlet processor ( s )  ;  handler . init ( fr"
2159,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceTest.java,test completion not aware for get async,@ test public void   (  )  throws io exception  {  verify test completion aware for get async ( false )  ;   }  
2160,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceTest.java,test completion not aware for start async,@ test public void   (  )  throws io exception  {  verify test completion aware for start async ( false )  ;   }  
2161,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceTest.java,test completion not aware for sync,@ test public void   (  )  throws io exception   servlet exception  {  verify test completion aware for sync ( false )  ;   }  
2162,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceTest.java,test hash code,@ test public void   (  )  {   string uuid = uuid . randomuuid (  )  . to string (  )  ;   atmosphere request request =  atmosphere request impl . new instance (  )  ;  request . set attribute (  application config . suspended   atmosphere   resource   uuid uuid )  ;   atmosphere response response =  atmosphere response
2163,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceTest.java,test response writing buffered,@ test public void   (  )  throws io exception  {  final  byte array output stream baos = new  byte array output stream (  )  ;   atmosphere request request = mock (  atmosphere request impl . class )  ;  when ( request . get attribute (  application config . response   completion   aware )  )  . then return (  boolea
2164,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceTest.java,test response writing buffered reset,@ test public void   (  )  throws io exception  {  final  byte array output stream baos = new  byte array output stream (  )  ;   atmosphere request request = mock (  atmosphere request impl . class )  ;  when ( request . get attribute (  application config . response   completion   aware )  )  . then return (  boolea
2165,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceTest.java,test response writing unbuffered,@ test public void   (  )  throws io exception  {  final  byte array output stream baos = new  byte array output stream (  )  ;   atmosphere response response = new  atmosphere response impl .  builder (  )  . asyncio writer ( new  test asyncio writer ( baos )  )  . build (  )  ;  response . get output stream (  )  ;  respo
2166,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceTest.java,testuuid,"@ test public void   (  )  throws io exception   servlet exception  {  framework . add atmosphere handler ( "" / a"" new  abstract reflector atmosphere handler (  )  {  @ override public void on request (   atmosphere resource resource )  throws io exception  {   }  @ override public void destroy (  ) "
2167,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceTest.java,verify test completion aware for get async,"private void   ( boolean aware )  throws io exception  {  if  ( aware )   {  framework . add init parameter (  application config . response   completion   aware ""true"" )  ;   }   atmosphere request request =  atmosphere request impl . new instance (  )  ;   atmosphere response impl response = mock (  atmosphere response impl . class )  ;   atmosphere resource impl res = new  atmosphere resource impl (  )  ;  res . initialize ( framework . get atmosphere config (  )  framework . get broadcaster factory (  )  . get (  )  request response null null )  ;  res . transport (  atmosphere resource . transport . websocket )  ;  request . set attribute (  framework config . atmosphere   resource res )  ;   async context ac = request . get async context (  )  ;  verify ( response times ( 0 )  )  . on complete (  )  ;  ac . complete (  )  ;  verify ( response times ( aware  ?  1 : 0 )  )  . on complete (  )  ;   }  "
2168,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceTest.java,verify test completion aware for start async,"private void   ( boolean aware )  throws io exception  {  if  ( aware )   {  framework . add init parameter (  application config . response   completion   aware ""true"" )  ;   }   atmosphere request request =  atmosphere request impl . new instance (  )  ;   atmosphere response impl response = mock (  atmosphere response impl . class )  ;   atmosphere resource impl res = new  atmosphere resource impl (  )  ;  res . initialize ( framework . get atmosphere config (  )  framework . get broadcaster factory (  )  . get (  )  request response null null )  ;  res . transport (  atmosphere resource . transport . websocket )  ;  request . set attribute (  framework config . atmosphere   resource res )  ;   async context ac = request . start async (  )  ;  verify ( response times ( 0 )  )  . on complete (  )  ;  ac . complete (  )  ;  verify ( response times ( aware  ?  1 : 0 )  )  . on complete (  )  ;   }  "
2169,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceTest.java,verify test completion aware for sync,"private void   ( boolean aware )  throws io exception   servlet exception  {   servlet s = mock (  servlet . class )  ;  if  ( aware )   {  framework . add init parameter (  application config . response   completion   aware ""true"" )  ;   }   reflector servlet processor handler = new  reflector servlet processor ( s )  ;  handler . init ( framework . get atmosphere config (  )  )  ;   atmosphere request request = new  atmosphere request impl .  builder (  )  . path info ( "" / a"" )  . build (  )  ;   atmosphere response impl response = mock (  atmosphere response impl . class )  ;   atmosphere resource impl res = new  atmosphere resource impl (  )  ;  res . initialize ( framework . get atmosphere config (  )  framework . get broadcaster factory (  )  . get (  )  request response null null )  ;  res . transport (  atmosphere resource . transport . websocket )  ;  request . set attribute (  framework config . atmosphere   resource res )  ;  request . set attribute (  framework config . injected   atmosphere   resource res )  ;  handler . on request ( res )  ;  verify ( response times ( aware  ?  1 : 0 )  )  . on complete (  )  ;   }  "
2170,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceTest.java,write,@ override public  asyncio writer   (  atmosphere response r byte[] data int offset int length )  throws io exception  {  out . write ( data offset length )  ;  return this ;   }  
2171,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceTest.java,write error,@ override public  asyncio writer   (  atmosphere response r int error code  string message )  throws io exception  {  return this ;   }  
2172,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereSessionTest.java,create,@ before method public void   (  )  throws  throwable  {  framework = new  atmosphere framework (  )  ;  framework . set async support ( new  blockingio comet support ( framework . get atmosphere config (  )  )  )  ;  framework . init ( new  servlet config (  )  {  @ override public  string get servlet name (  )  {  ret
2173,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereSessionTest.java,get init parameter,@ override public  string   (  string name )  {  return null ;   }  
2174,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereSessionTest.java,get init parameter names,@ override public  enumeration <  string >    (  )  {  return null ;   }  
2175,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereSessionTest.java,get servlet context,@ override public  servlet context   (  )  {  return mock (  servlet context . class )  ;   }  
2176,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereSessionTest.java,get servlet name,"@ override public  string   (  )  {  return ""void"" ;   }  "
2177,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereSessionTest.java,on request,@ override public void   ( final  atmosphere resource resource )  throws io exception  {  resource . suspend ( 2  time unit . seconds )  ;   }  
2178,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereSessionTest.java,on state change,@ override public void   (  atmosphere resource event event )  throws io exception  {  try  {  rrr . set ( session . get (  )  . try acquire (  )  )  ;     latch . count down (  )  ;   }  catch  (   interrupted exception e )   {  e . print stack trace (  )  ;   }   }  
2179,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereSessionTest.java,run,"public void   (  )  {  try  {   thread . sleep ( 1000 )  ;   atmosphere request request = new  atmosphere request impl .  builder (  )  . query string ( qs )  . path info ( "" / acquire"" )  . build (  )  ;  framework . do comet support ( request  atmosphere response impl . new instance ( request )  )  ;   }  catch  (   exception e )   {  e . print stack trace (  )  ;   }   }  "
2180,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereSessionTest.java,test track and try acquire,@ test public void   (  )  throws io exception   servlet exception   interrupted exception  {  final  count down latch latch = new  count down latch ( 1 )  ;  final  atomic reference <  atmosphere session >  session = new  atomic reference <  atmosphere session >  (  )  ;  framework . add atmosphere handler ( 
2181,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterCacheTest.java,add to cache,@ override public  cache message   (  string id  string uuid  broadcast message e )  {   cache message c = put ( e  system . nano time (  )  uuid broadcaster . getid (  )  )  ;  cached message . set ( messages )  ;  latch . count down (  )  ;  return c ;   }  
2182,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterCacheTest.java,inspect,@ override public boolean   (  broadcast message message )  {  return true ;   }  
2183,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterCacheTest.java,retrieve from cache,@ override public  list <  object >    (  string id  string uuid )  {  return  collections .  <  object > empty list (  )  ;   }  
2184,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterCacheTest.java,set up,"@ before method public void   (  )  throws  exception  {  config = new  atmosphere framework (  )  . get atmosphere config (  )  ;   default broadcaster factory factory = new  default broadcaster factory (  default broadcaster . class ""never"" config )  ;  broadcaster = factory . get (  default broadcaster . c"
2185,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterCacheTest.java,test basic exclude cache,@ test public void   (  )  throws  execution exception   interrupted exception   servlet exception  {   broadcaster cache cache = new uuid broadcaster cache (  )  ;  cache . configure ( config )  ;   atmosphere resource r = config . resources factory (  )  . create ( broadcaster . get broadcaster config (  )  . 
2186,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterCacheTest.java,test cache,@ test public void   (  )  throws  execution exception   interrupted exception   servlet exception  {  broadcaster . get broadcaster config (  )  . set broadcaster cache ( new  abstract broadcaster cache (  )  {  @ override public  cache message add to cache (   string id   string uuid   broadcast mes
2187,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterCacheTest.java,test close exclude cache,"@ test public void   (  )  throws  execution exception   interrupted exception   servlet exception  io exception  {  uuid broadcaster cache cache = new uuid broadcaster cache (  )  ;   simple broadcaster b = config . get broadcaster factory (  )  . lookup (  simple broadcaster . class ""uuid test"" true"
2188,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterCacheTest.java,test empty cache,@ test public void   (  )  throws  execution exception   interrupted exception   servlet exception  {  final  count down latch latch = new  count down latch ( 1 )  ;  broadcaster . get broadcaster config (  )  . set broadcaster cache ( new  abstract broadcaster cache (  )  {  @ override public  cache messag
2189,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterCacheTest.java,test empty rejected cache,@ test public void   (  )  throws  execution exception   interrupted exception   servlet exception  {  final  count down latch latch = new  count down latch ( 1 )  ;  broadcaster . get broadcaster config (  )  . set broadcaster cache ( new  abstract broadcaster cache (  )  {  @ override public  cache messag
2190,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterCacheTest.java,test exclude cache,@ test public void   (  )  throws  execution exception   interrupted exception   servlet exception  {   broadcaster cache cache = new uuid broadcaster cache (  )  ;  cache . configure ( config )  ;   atmosphere resource r = config . resources factory (  )  . create ( broadcaster . get broadcaster config (  )  . 
2191,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterCacheTest.java,test rejected cache,@ test public void   (  )  throws  execution exception   interrupted exception   servlet exception  {  broadcaster . get broadcaster config (  )  . set broadcaster cache ( new  abstract broadcaster cache (  )  {  @ override public  cache message add to cache (   string id   string uuid   broadcast mes
2192,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterCacheTest.java,test suspend exclude cache,"@ test public void   (  )  throws  execution exception   interrupted exception   servlet exception  io exception  {  uuid broadcaster cache cache = new uuid broadcaster cache (  )  ;   simple broadcaster b = config . get broadcaster factory (  )  . lookup (  simple broadcaster . class ""uuid test"" true"
2193,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterCacheTest.java,un set up,@ after method public void   (  )  throws  exception  {  broadcaster . remove atmosphere resource ( ar )  ;  config . get broadcaster factory (  )  . destroy (  )  ;   executors factory . reset ( config )  ;   }  
2194,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterLifecyclePolicyTest.java,action,public void   (  atmosphere resource impl r )  {  try  {  resumed ( r . get request (  )  r . get response (  )  )  ;   }  catch  (  io exception e )   {  e . print stack trace (  )  ;   }  catch  (   servlet exception e )   {  e . print stack trace (  )  ;   }   }  
2195,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterLifecyclePolicyTest.java,after,@ after method public void   (  )  {  framework . destroy (  )  ;   }  
2196,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterLifecyclePolicyTest.java,create,@ before method public void   (  )  throws  throwable  {  framework = new  atmosphere framework (  )  ;  framework . set default broadcaster class name (  simple broadcaster . class . get name (  )  )  ;  framework . set async support ( new  asynchronous processor ( framework . get atmosphere config (  )  )  {  @ overr
2197,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterLifecyclePolicyTest.java,destroy,@ override public void   (  )  {  destroy . set ( true )  ;  latch . count down (  )  ;   }  
2198,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterLifecyclePolicyTest.java,on request,@ override public void   (  atmosphere resource e )  throws io exception  {  e . suspend (  )  ;  resource = e ;   }  
2199,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterLifecyclePolicyTest.java,release external resources,@ override public void   (  )  {  release external resources . set ( true )  ;  latch . count down (  )  ;   }  
2200,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterLifecyclePolicyTest.java,service,@ override public  action   (  atmosphere request req  atmosphere response res )  throws io exception   servlet exception  {  return suspended ( req res )  ;   }  
2201,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterLifecyclePolicyTest.java,test empty,"@ test public void   (  )  throws io exception   servlet exception  {   broadcaster b = framework . get broadcaster factory (  )  . lookup ( b . class "" / test"" true )  ;  b . set broadcaster life cycle policy (  broadcaster life cycle policy . empty )  ;  ar ah = new ar (  )  ;  framework . add atmosphere handler ( "" / "
2202,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterLifecyclePolicyTest.java,test empty destroy,"@ test public void   (  )  throws io exception   servlet exception  {   broadcaster b = framework . get broadcaster factory (  )  . lookup ( b . class "" / test"" true )  ;  b . set broadcaster life cycle policy (  broadcaster life cycle policy . empty   destroy )  ;  ar ah = new ar (  )  ;  framework . add atmosphere ha"
2203,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterLifecyclePolicyTest.java,test idle,"@ test public void   (  )  throws io exception   servlet exception   interrupted exception  {  b b = framework . get broadcaster factory (  )  . lookup ( b . class "" / test"" true )  ;  b . set broadcaster life cycle policy ( new  broadcaster life cycle policy .  builder (  )  . policy (  broadcaster life cycle poli"
2204,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterLifecyclePolicyTest.java,test idle destroy,"@ test public void   (  )  throws io exception   servlet exception   interrupted exception  {  b b = framework . get broadcaster factory (  )  . lookup ( b . class "" / test"" true )  ;  b . set broadcaster life cycle policy ( new  broadcaster life cycle policy .  builder (  )  . policy (  broadcaster life cycle poli"
2205,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterLifecyclePolicyTest.java,test idle resume,"@ test public void   (  )  throws io exception   servlet exception   interrupted exception  {  b b = framework . get broadcaster factory (  )  . lookup ( b . class "" / test"" true )  ;  b . set broadcaster life cycle policy ( new  broadcaster life cycle policy .  builder (  )  . policy (  broadcaster life cycle poli"
2206,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterLifecyclePolicyTest.java,test never,"@ test public void   (  )  throws io exception   servlet exception  {   broadcaster b = framework . get broadcaster factory (  )  . lookup ( b . class "" / test"" true )  ;  b . set broadcaster life cycle policy (  broadcaster life cycle policy . never )  ;  ar ah = new ar (  )  ;  framework . add atmosphere handler ( "" / "
2207,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterListenerTest.java,action,public void   (  atmosphere resource impl r )  {  try  {  resumed ( r . get request (  )  r . get response (  )  )  ;   }  catch  (  io exception e )   {  e . print stack trace (  )  ;   }  catch  (   servlet exception e )   {  e . print stack trace (  )  ;   }   }  
2208,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterListenerTest.java,after,@ after method public void   (  )  {  bar . count . set ( 0 )  ;  framework . destroy (  )  ;   }  
2209,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterListenerTest.java,create,@ before method public void   (  )  throws  throwable  {  framework = new  atmosphere framework (  )  ;  framework . set default broadcaster class name (  simple broadcaster . class . get name (  )  )  ;  framework . set async support ( new  asynchronous processor ( framework . get atmosphere config (  )  )  {  @ overr
2210,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterListenerTest.java,on broadcast,@ override public void   (  atmosphere resource event event )  {  count . increment and get (  )  ;   }  
2211,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterListenerTest.java,on complete,@ override public void   (  broadcaster b )  {  completed . set ( true )  ;   }  
2212,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterListenerTest.java,on message,@ override public void   (  broadcaster b  deliver d )  {  on message . set ( true )  ;   }  
2213,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterListenerTest.java,on post create,@ override public void   (  broadcaster b )  {  post created . set ( true )  ;   }  
2214,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterListenerTest.java,on pre destroy,@ override public void   (  broadcaster b )  {  pre destroyed . set ( true )  ;   }  
2215,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterListenerTest.java,on request,"@ override public void   (  atmosphere resource e )  throws io exception  {  try  {  e . get broadcaster (  )  . broadcast ( ""test"" )  . get (  )  ;  e . get broadcaster (  )  . destroy (  )  ;   }  catch  (   interrupted exception e1 )   {  e1 . print stack trace (  )  ;   }  catch  (   execution exception e1 )   {  e1 . print stackt"
2216,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterListenerTest.java,service,@ override public  action   (  atmosphere request req  atmosphere response res )  throws io exception   servlet exception  {  return suspended ( req res )  ;   }  
2217,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterListenerTest.java,test cached on broadcast,"@ test public void   (  )  throws io exception   servlet exception  {  framework . set broadcaster cache class name ( uuid broadcaster cache . class . get name (  )  )  . add atmosphere handler ( "" / *"" new  cachedar (  )  )  . init (  )  ;   map <  string  string >  m = new  hash map <  >  (  )  ;  m . put (  header config . x   atmosphe"
2218,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterListenerTest.java,test get,"@ test public void   (  )  throws io exception   servlet exception  {  framework . add atmosphere handler ( "" / *"" new ar (  )  )  . init (  )  ;   atmosphere request request = new  atmosphere request impl .  builder (  )  . path info ( "" / a"" )  . method ( ""get"" )  . build (  )  ;  framework . do comet support ( request  atmosph"
2219,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterListenerTest.java,test long polling on broadcast,"@ test public void   (  )  throws io exception   servlet exception  {  framework . add atmosphere handler ( "" / *"" new bar (  )  )  . init (  )  ;   map <  string  string >  m = new  hash map <  >  (  )  ;  m . put (  header config . x   atmosphere   transport  header config . long   polling   transport )  ;   atmosphere request req"
2220,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterListenerTest.java,test on broadcast,"@ test public void   (  )  throws io exception   servlet exception  {  framework . add atmosphere handler ( "" / *"" new bar (  )  )  . init (  )  ;   atmosphere request request = new  atmosphere request impl .  builder (  )  . path info ( "" / a"" )  . method ( ""get"" )  . build (  )  ;  framework . do comet support ( request  atmosp"
2221,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterListenerTest.java,test on remove,"@ test public void   (  )  throws io exception   servlet exception  {  framework . add atmosphere handler ( "" / *"" new bar (  )  )  . init (  )  ;   atmosphere request request = new  atmosphere request impl .  builder (  )  . path info ( "" / a"" )  . method ( ""get"" )  . build (  )  ;  framework . do comet support ( request  atmosp"
2222,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterTest.java,get init parameter,@ override public  string   (  string name )  {  return null ;   }  
2223,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterTest.java,get init parameter names,@ override public  enumeration <  string >    (  )  {  return null ;   }  
2224,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterTest.java,get servlet context,@ override public  servlet context   (  )  {  return mock (  servlet context . class )  ;   }  
2225,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterTest.java,get servlet name,"@ override public  string   (  )  {  return ""void"" ;   }  "
2226,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterTest.java,on complete,@ override public void   (  broadcaster b )  {  complete . set (  boolean . true )  ;   }  
2227,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterTest.java,on state change,@ override public void   (  atmosphere resource event e )  throws io exception  {  value . get (  )  . add ( e . get resource (  )  )  ;   }  
2228,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterTest.java,service,@ override public  action   (  atmosphere request req  atmosphere response res )  throws io exception   servlet exception  {  return  action . continue ;   }  
2229,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterTest.java,set up,"@ before method public void   (  )  throws  exception  {  config = new  atmosphere framework (  )  . get atmosphere config (  )  ;   default broadcaster factory factory = new  default broadcaster factory (  default broadcaster . class ""never"" config )  ;  config . framework (  )  . set broadcaster factory ( fac"
2230,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterTest.java,should clean up broadcaster upon destory,"@ test public void   (  )  {   broadcaster b1 = config . get broadcaster factory (  )  . lookup ( "" / leak / exists"" true )  ;  b1 . destroy (  )  ;   assert . assert null ( config . get broadcaster factory (  )  . lookup ( "" / leak / exists"" )  )  ;   }  "
2231,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterTest.java,test atmosphere resource cancel,"@ test public void   (  )  throws  execution exception   interrupted exception   servlet exception  io exception  {   broadcaster two = ar . get atmosphere config (  )  . get broadcaster factory (  )  . get (  default broadcaster . class ""two"" )  ;  two . add atmosphere resource ( ar )  ;   atmosphere resourcei"
2232,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterTest.java,test broadcaster listener on post create,@ test public void   (  )  {  final  atomic reference <  boolean >  create = new  atomic reference <  boolean >  (  )  ;   broadcaster listener l = new  broadcaster listener adapter (  )  {  @ override public void on post create (   broadcaster b )  {  create . set (  boolean . true )  ;   }  @ override public void on co
2233,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterTest.java,test broadcaster listener on pre destroy,@ test public void   (  )  {  final  atomic reference <  boolean >  deleted = new  atomic reference <  boolean >  (  )  ;   broadcaster listener l = new  broadcaster listener adapter (  )  {  @ override public void on post create (   broadcaster b )  {   }  @ override public void on complete (   broadcaster b )  {   } 
2234,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterTest.java,test broadcaster on complete,@ test public void   (  )  throws  execution exception   interrupted exception  {  final  atomic reference <  boolean >  complete = new  atomic reference <  boolean >  ( false )  ;   broadcaster listener l = new  broadcaster listener adapter (  )  {  @ override public void on post create (   broadcaster b ) 
2235,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterTest.java,test cancel atmosphere resource,"@ test public void   (  )  throws  execution exception   interrupted exception   servlet exception  io exception  {   broadcaster two = ar . get atmosphere config (  )  . get broadcaster factory (  )  . get (  default broadcaster . class ""two"" )  ;  two . add atmosphere resource ( ar )  ;  ar . get request (  )  . set"
2236,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterTest.java,test direct broadcast method,"@ test public void   (  )  throws  execution exception   interrupted exception   servlet exception  {  broadcaster . broadcast ( ""foo"" ar )  . get (  )  ;  assert equals ( atmosphere handler . value . get (  )  . to array (  ) [0] ar )  ;   }  "
2237,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterTest.java,test empty broadcast method,"@ test public void   (  )  throws  execution exception   interrupted exception   servlet exception  {  broadcaster . resume all (  )  ;  broadcaster . broadcast ( ""foo"" )  . get (  )  ;  assert equals ( atmosphere handler . value . get (  )  new  hash set (  )  )  ;   }  "
2238,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterTest.java,test set broadcast method,@ test public void   (  )  throws  execution exception   interrupted exception   servlet exception  {   atmosphere config config = new  atmosphere framework (  )  . set async support ( mock (  servlet30 comet support . class )  )  . init ( new  servlet config (  )  {  @ override public  string get servlet name
2239,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterTest.java,test timeout atmosphere resource,"@ test public void   (  )  throws  execution exception   interrupted exception   servlet exception  io exception  {   broadcaster two = ar . get atmosphere config (  )  . get broadcaster factory (  )  . get (  default broadcaster . class ""two"" )  ;  two . add atmosphere resource ( ar )  ;  ar . get request (  )  . set"
2240,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterTest.java,un set up,@ after method public void   (  )  throws  exception  {  broadcaster . destroy (  )  ;  atmosphere handler . value . set ( new  hash set (  )  )  ;  config . get broadcaster factory (  )  . destroy (  )  ;   executors factory . reset ( config )  ;   }  
2241,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcastFilterTest.java, abort filter,public   ( boolean per request )  {  this . per request = per request ;   }  
2242,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcastFilterTest.java, do nohing filter,public   (  string msg )  {  this . msg = msg ;   }  
2243,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcastFilterTest.java, filter,public   (  string msg )  {  this . msg = msg ;   }  
2244,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcastFilterTest.java, per request filter,public   (  string msg )  {  this . msg = msg ;   }  
2245,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcastFilterTest.java, slip filter,public   ( boolean per request )  {  this . per request = per request ;   }  
2246,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcastFilterTest.java, void atmosphere resource,public   (  string msg )  {  this . msg = msg ;   }  
2247,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcastFilterTest.java,filter,@ override public  broadcast action   (  string broadcaster id  object original message  object message )  {  return new  broadcast action (  broadcast action . action . continue message  +  msg )  ;   }  
2248,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcastFilterTest.java,get init parameter,@ override public  string   (  string name )  {  return null ;   }  
2249,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcastFilterTest.java,get init parameter names,@ override public  enumeration <  string >    (  )  {  return null ;   }  
2250,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcastFilterTest.java,get servlet context,@ override public  servlet context   (  )  {  return mock (  servlet context . class )  ;   }  
2251,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcastFilterTest.java,get servlet name,"@ override public  string   (  )  {  return ""void"" ;   }  "
2252,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcastFilterTest.java,on state change,@ override public void   (  atmosphere resource event e )  throws io exception  {  value . get (  )  . append ( e . get message (  )  )  ;   }  
2253,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcastFilterTest.java,set up,"@ before method public void   (  )  throws  exception  {   atmosphere config config = new  atmosphere framework (  )  . get atmosphere config (  )  ;   default broadcaster factory factory = new  default broadcaster factory (  default broadcaster . class ""never"" config )  ;  config . framework (  )  . set broad"
2254,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcastFilterTest.java,test abort filter,"@ test public void   (  )  throws  execution exception   interrupted exception  {  broadcaster . get broadcaster config (  )  . add filter ( new  abort filter ( true )  )  ;  broadcaster . broadcast ( ""0"" )  . get (  )  ;  assert equals ( atmosphere handler . value . get (  )  . to string (  )  """" )  ;   }  "
2255,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcastFilterTest.java,test abort per filter,"@ test public void   (  )  throws  execution exception   interrupted exception  {  broadcaster . get broadcaster config (  )  . add filter ( new  abort filter ( false )  )  ;  broadcaster . get broadcaster config (  )  . add filter ( new  abort filter ( true )  )  ;  broadcaster . broadcast ( ""0"" )  . get (  )  ;  assert equa"
2256,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcastFilterTest.java,test abort per filter future,"@ test public void   (  )  throws  execution exception   interrupted exception  {  broadcaster . get broadcaster config (  )  . add filter ( new  abort filter2 (  )  )  ;  broadcaster . broadcast ( ""0"" )  . get (  )  ;  assert equals ( atmosphere handler . value . get (  )  . to string (  )  """" )  ;   }  "
2257,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcastFilterTest.java,test init broadcast filter,@ test public void   (  )  throws  execution exception   interrupted exception   servlet exception  {   atmosphere config config = new  atmosphere framework (  )  . add init parameter (  application config . broadcast   filter   classes  filter . class . get name (  )  )  . set async support ( mock (  servlet30c
2258,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcastFilterTest.java,test message length filter,"@ test public void   (  )  throws  execution exception   interrupted exception  {  broadcaster . get broadcaster config (  )  . add filter ( new  track message size filter (  )  )  ;  broadcaster . broadcast ( ""0"" )  . get (  )  ;  assert equals ( atmosphere handler . value . get (  )  . to string (  )  ""1|0"" )  ;   }  "
2259,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcastFilterTest.java,test mixed per request filter,"@ test public void   (  )  throws  execution exception   interrupted exception  {  broadcaster . get broadcaster config (  )  . add filter ( new  filter ( ""1"" )  )  ;  broadcaster . get broadcaster config (  )  . add filter ( new  do nohing filter ( ""a"" )  )  ;  broadcaster . get broadcaster config (  )  . add filter ( new "
2260,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcastFilterTest.java,test multiple filter,"@ test public void   (  )  throws  execution exception   interrupted exception  {  broadcaster . get broadcaster config (  )  . add filter ( new  filter ( ""1"" )  )  ;  broadcaster . get broadcaster config (  )  . add filter ( new  filter ( ""2"" )  )  ;  broadcaster . get broadcaster config (  )  . add filter ( new  filter ( """
2261,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcastFilterTest.java,test multiple message length filter,"@ test public void   (  )  throws  execution exception   interrupted exception  {   hash map <  string  string >  m = new  hash map <  string  string >  (  )  ;  m . put (  header config . x   atmosphere   trackmessagesize ""true"" )  ;   atmosphere request req = new  atmosphere request impl .  builder (  )  . headers ( m )  . b"
2262,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcastFilterTest.java,test multiple mixed filter,"@ test public void   (  )  throws  execution exception   interrupted exception  {  broadcaster . get broadcaster config (  )  . add filter ( new  filter ( ""1"" )  )  ;  broadcaster . get broadcaster config (  )  . add filter ( new  filter ( ""2"" )  )  ;  broadcaster . get broadcaster config (  )  . add filter ( new  filter ( """
2263,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcastFilterTest.java,test multiple mixed per request filter,"@ test public void   (  )  throws  execution exception   interrupted exception  {  broadcaster . get broadcaster config (  )  . add filter ( new  filter ( ""1"" )  )  ;  broadcaster . get broadcaster config (  )  . add filter ( new  per request filter ( ""a"" )  )  ;  broadcaster . get broadcaster config (  )  . add filter ( ne"
2264,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcastFilterTest.java,test multiple per request filter,"@ test public void   (  )  throws  execution exception   interrupted exception  {  broadcaster . get broadcaster config (  )  . add filter ( new  per request filter ( ""1"" )  )  ;  broadcaster . get broadcaster config (  )  . add filter ( new  per request filter ( ""2"" )  )  ;  broadcaster . get broadcaster config (  )  . ad"
2265,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcastFilterTest.java,test programmatic broadcast filter,"@ test public void   (  )  throws  execution exception   interrupted exception   servlet exception  {  broadcaster . get broadcaster config (  )  . add filter ( new  filter (  )  )  ;  broadcaster . broadcast ( ""0"" )  . get (  )  ;  assert equals ( atmosphere handler . value . get (  )  . to string (  )  ""0foo"" )  ;   }  "
2266,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcastFilterTest.java,test set multiple message length filter,"@ test public void   (  )  throws  execution exception   interrupted exception  {   hash map <  string  string >  m = new  hash map <  string  string >  (  )  ;  m . put (  header config . x   atmosphere   trackmessagesize ""true"" )  ;   atmosphere request req = new  atmosphere request impl .  builder (  )  . headers ( m )  . b"
2267,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcastFilterTest.java,test skip filter,"@ test public void   (  )  throws  execution exception   interrupted exception  {  broadcaster . get broadcaster config (  )  . add filter ( new  slip filter ( true )  )  ;  broadcaster . broadcast ( ""0"" )  . get (  )  ;  assert equals ( atmosphere handler . value . get (  )  . to string (  )  ""0 - filter - per filter"" )  ;   }  "
2268,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcastFilterTest.java,test skip per filter,"@ test public void   (  )  throws  execution exception   interrupted exception  {  broadcaster . get broadcaster config (  )  . add filter ( new  slip filter ( true )  )  ;  broadcaster . get broadcaster config (  )  . add filter ( new  filter ( ""1"" )  )  ;  broadcaster . get broadcaster config (  )  . add filter ( new  sli"
2269,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcastFilterTest.java,test void atmosphere resouce,"@ test public void   (  )  throws  execution exception   interrupted exception  {  broadcaster . remove atmosphere resource ( ar )  ;  broadcaster . get broadcaster config (  )  . add filter ( new  void atmosphere resource ( ""1"" )  )  ;   string s =  (  string ) broadcaster . broadcast ( ""0"" )  . get (  )  ;  assert equal"
2270,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\CookieTest.java,basic handler test,@ test public void   (  )  throws io exception   servlet exception   execution exception   interrupted exception  {  final  atomic reference <  cookie >  c value = new  atomic reference <  cookie >  (  )  ;  final  atomic reference <  atmosphere resource >  r = new  atomic reference <  atmosphere resource >  ( 
2271,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\CookieTest.java,create,@ before method public void   (  )  throws  throwable  {  framework = new  atmosphere framework (  )  ;  framework . set async support ( new  blockingio comet support ( framework . get atmosphere config (  )  )  )  ;  framework . init ( new  servlet config (  )  {  @ override public  string get servlet name (  )  {  ret
2272,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\CookieTest.java,get init parameter,@ override public  string   (  string name )  {  return null ;   }  
2273,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\CookieTest.java,get init parameter names,@ override public  enumeration <  string >    (  )  {  return null ;   }  
2274,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\CookieTest.java,get servlet context,@ override public  servlet context   (  )  {  return mock (  servlet context . class )  ;   }  
2275,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\CookieTest.java,get servlet name,"@ override public  string   (  )  {  return ""void"" ;   }  "
2276,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\CookieTest.java,on request,@ override public void   (  atmosphere resource resource )  throws io exception  {  resource . get response (  )  . add cookie ( resource . get request (  )  . get cookies (  ) [0] )  ;  r . set ( resource )  ;  resource . get broadcaster (  )  . add atmosphere resource ( resource )  ;   }  
2277,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\CookieTest.java,on state change,@ override public void   (  atmosphere resource event event )  throws io exception  {   cookie[] c = event . get resource (  )  . get request (  )  . get cookies (  )  ;  c value . set ( c[0] )  ;   }  
2278,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\CookieTest.java,set cookie test,@ test public void   (  )  throws io exception   servlet exception   execution exception   interrupted exception  {  final  atomic reference <  cookie >  c value = new  atomic reference <  cookie >  (  )  ;  final  atomic reference <  atmosphere resource >  r = new  atomic reference <  atmosphere resource >  ( 
2279,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\CookieTest.java,un set,@ after method public void   (  )  throws  exception  {  framework . destroy (  )  ;   }  
2280,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\ConcurrentBroadcasterTest.java,newar, atmosphere resource   (  atmosphere handler a )  {  return new  atmosphere resource impl ( broadcaster . get broadcaster config (  )  . get atmosphere config (  )  broadcaster mock (  atmosphere request impl . class )   atmosphere response impl . new instance (  )  mock (  servlet30 comet support . class )  a )  ;   }  
2281,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\ConcurrentBroadcasterTest.java,on complete,@ override public void   (  broadcaster b )  {  latch . count down (  )  ;   }  
2282,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\ConcurrentBroadcasterTest.java,on state change,@ override public void   (  atmosphere resource event e )  throws io exception  {  count . increment and get (  )  ;   }  
2283,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\ConcurrentBroadcasterTest.java,set up,"@ before method public void   (  )  throws  exception  {  config = new  atmosphere framework (  )  . add init parameter (  application config . broadcaster   sharable   thread   pools ""true"" )  . get atmosphere config (  )  ;   default broadcaster factory factory = new  default broadcaster factory (  default br"
2284,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\ConcurrentBroadcasterTest.java,test multiple concurrent broadcast,@ test public void   (  )  throws  interrupted exception  {  long t1 =  system . current time millis (  )  ;  ar2 a = new ar2 (  )  ;  int count = 50 ;  int client = 100 ;  for  ( int i = 0 ;  i  <  client ;  i +  +  )   {  broadcaster . add atmosphere resource ( newar ( a )  )  ;   }  final  count down latch latch = new  count down
2285,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\ConcurrentBroadcasterTest.java,test multiple non ordered concurrent broadcast,"@ test public void   (  )  throws  interrupted exception  {   atmosphere config config = new  atmosphere framework (  )  . add init parameter (  application config . broadcaster   sharable   thread   pools ""true"" )  . add init parameter (  application config . out   of   order   broadcast ""true"" )  . get atmosph"
2286,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\ConcurrentBroadcasterTest.java,test multiple non ordered simple broadcast,"@ test public void   (  )  throws  interrupted exception  {   atmosphere config config = new  atmosphere framework (  )  . add init parameter (  application config . broadcaster   sharable   thread   pools ""true"" )  . add init parameter (  application config . out   of   order   broadcast ""true"" )  . get atmosph"
2287,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\ConcurrentBroadcasterTest.java,test multiple ordered simple broadcast,"@ test public void   (  )  throws  interrupted exception  {   atmosphere config config = new  atmosphere framework (  )  . get atmosphere config (  )  ;   default broadcaster factory factory = new  default broadcaster factory (  simple broadcaster . class ""never"" config )  ;  config . framework (  )  . set bro"
2288,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\ConcurrentBroadcasterTest.java,test ordered concurrent broadcast,@ test public void   (  )  throws  interrupted exception  {  long t1 =  system . current time millis (  )  ;  atmosphere handler = new ar (  )  ;  ar = new  atmosphere resource impl ( broadcaster . get broadcaster config (  )  . get atmosphere config (  )  broadcaster mock (  atmosphere request impl . class )   atmosp
2289,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\ConcurrentBroadcasterTest.java,test ordered simple broadcast,"@ test public void   (  )  throws  interrupted exception  {   atmosphere config config = new  atmosphere framework (  )  . get atmosphere config (  )  ;   default broadcaster factory factory = new  default broadcaster factory (  simple broadcaster . class ""never"" config )  ;  config . framework (  )  . set bro"
2290,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\ConcurrentBroadcasterTest.java,un set up,@ after method public void   (  )  throws  exception  {  broadcaster . destroy (  )  ;  config . get broadcaster factory (  )  . destroy (  )  ;   executors factory . reset ( config )  ;   }  
2291,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\DefaultAsyncSupportResolverTest.java, invalid async support class,"public   (  atmosphere config config )  throws  invocation target exception  {  throw new  invocation target exception ( new  exception (  )  "" this is an invalid  async support class for testing purposes"" )  ;   }  "
2292,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\DefaultAsyncSupportResolverTest.java,complete,@ override public  async support   (  atmosphere resource r )  {  return null ;   }  
2293,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\DefaultAsyncSupportResolverTest.java,get container name,@ override public  string   (  )  {  return null ;   }  
2294,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\DefaultAsyncSupportResolverTest.java,service,@ override public  action   (  atmosphere request req  atmosphere response res )  throws io exception   servlet exception  {  return null ;   }  
2295,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\DefaultAsyncSupportResolverTest.java,set up,@ before method public void   (  )  throws  exception  {  config = new  atmosphere framework (  )  . init (  )  . get atmosphere config (  )  ;  default async support resolver = new  default async support resolver ( config )  ;   }  
2296,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\DefaultAsyncSupportResolverTest.java,support web socket,@ override public boolean   (  )  {  return false ;   }  
2297,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\DefaultAsyncSupportResolverTest.java,test async support class not found defaults to blockingio if servlet is not available,@ test public void   (  )  {  boolean use native if possible = false ;  boolean default to blocking = false ;  boolean use servlet30 async = true ;  default async support resolver = spy ( default async support resolver )  ;   list <  class <  ?  extends  async support >  >  async support list = new  array list (  )  {  
2298,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\DefaultAsyncSupportResolverTest.java,test async support class not found defaults to servlet if available,public void   (  )  {  boolean use native if possible = false ;  boolean default to blocking = false ;  boolean use servlet30 async = true ;  default async support resolver = spy ( default async support resolver )  ;   list <  class <  ?  extends  async support >  >  async support list = new  array list (  )  {   {  add (  invalid async support class . class )  ;   }   }   ;  do return ( async support list )  . when ( default async support resolver )  . detect web socket present ( use native if possible use servlet30 async )  ;  do return ( null )  . when ( default async support resolver )  . resolve native comet support ( any list (  )  )  ;   assert . assert equals ( default async support resolver . resolve ( use native if possible default to blocking use servlet30 async )  . get class (  )   servlet30 comet support . class )  ;   }  
2299,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\DefaultAsyncSupportResolverTest.java,test null if non instantiable web socket class,public void   (  )  {   assert . assert null ( default async support resolver . new comet support (  invalid async support class . class )  )  ;   }  
2300,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\DefaultAsyncSupportResolverTest.java,un set,@ after method public void   (  )  throws  exception  {  config . destroy (  )  ;   }  
2301,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\DefaultAtmosphereResourceSessionFactoryTest.java,test session lifecycle,@ test public void   (  )  {   default atmosphere resource session factory factory = new  default atmosphere resource session factory (  )  ;   atmosphere resource event listener disconnect listener = factory . get disconnect listener (  )  ;   atmosphere resource r1 =  mockito . mock (  atmosphere resource
2302,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\DefaultBroadcasterTest.java,add to cache,@ override public  cache message   (  string id  string uuid  broadcast message e )  {   cache message c = put ( e  system . nano time (  )  uuid broadcaster . getid (  )  )  ;  cache . put ( id e )  ;  return c ;   }  
2303,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\DefaultBroadcasterTest.java,cache and suspend,protected void   (  atmosphere resource r )  {  try  {   thread . sleep ( 100 )  ;   }  catch  (   interrupted exception e )   {  e . print stack trace (  )  ;   }  super . cache and suspend ( r )  ;   }  
2304,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\DefaultBroadcasterTest.java,retrieve from cache,@ override public  list <  object >    (  string id  string uuid )  {   array list <  object >  cache contents = new  array list <  object >  (  )  ;  if  (  ! cache . is empty (  )  )   {  cache contents . add ( cache . get ( id )  . message (  )  )  ;  cache . clear (  )  ;   }  return cache contents ;   }  
2305,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\DefaultBroadcasterTest.java,run,@ override public void   (  )  {  broadcaster . add atmosphere resource ( ar )  ;   }  
2306,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\DefaultBroadcasterTest.java,set up,"@ before method public void   (  )  throws  exception  {   atmosphere framework framework = new  atmosphere framework (  )  ;  framework . add init parameter (  application config . broadcaster   cache   strategy ""before filter"" )  ;   atmosphere config config = framework . get atmosphere config (  )  ;   def"
2307,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\DefaultBroadcasterTest.java,test simultaneous add resource and push,@ test public void   (  )  throws  execution exception   interrupted exception   servlet exception  {  final  map <  string  broadcast message >  cache = new  hash map <  string  broadcast message >  (  )  ;  broadcaster . get broadcaster config (  )  . set broadcaster cache ( new  abstract broadcaster cache ( 
2308,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\DefaultBroadcasterFactoryTest.java, test broadcaster,public   (  )  {  instance . increment and get (  )  ;   }  
2309,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\DefaultBroadcasterFactoryTest.java,concurrent access lookup test,"@ test public void   (  )  throws  interrupted exception  {  final  default broadcaster factory f = new  default broadcaster factory (  default broadcaster . class ""never"" config )  ;  final  count down latch latch = new  count down latch ( 1000 )  ;  final  atomic integer created = new  atomic intege"
2310,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\DefaultBroadcasterFactoryTest.java,concurrent lookup test,"@ test public void   (  )  throws  interrupted exception  {   string id = ""id"" ;  final  default broadcaster factory f = new  default broadcaster factory (  default broadcaster . class ""never"" config )  ;  final  count down latch latch = new  count down latch ( 100 )  ;  final  atomic integer created = n"
2311,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\DefaultBroadcasterFactoryTest.java,on post create,@ override public void   (  broadcaster b )  {  created . increment and get (  )  ;   }  
2312,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\DefaultBroadcasterFactoryTest.java,run,@ override public void   (  )  {  try  {  f . get (  test broadcaster . class me )  ;   }  finally  {  latch . count down (  )  ;   }   }  
2313,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\DefaultBroadcasterFactoryTest.java,set up,"@ before method public void   (  )  throws  exception  {  config = new  atmosphere framework (  )  . get atmosphere config (  )  ;  factory = new  default broadcaster factory (  default broadcaster . class ""never"" config )  ;   }  "
2314,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\DefaultBroadcasterFactoryTest.java,test add,"@ test public void   (  )  {   string id = ""id"" ;   string id2 = ""foo"" ;   broadcaster b = factory . get ( id )  ;  assert factory . add ( b id )   =  =  false ;  assert factory . lookup ( id )   !  =  null ;  assert factory . add ( b id2 )   =  =  true ;  assert factory . lookup ( id2 )   !  =  null ;   }  "
2315,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\DefaultBroadcasterFactoryTest.java,test email factory,"@ test public void   (  )  {  factory . lookup ( "" / atmosphere@atmosphere . com"" true )  ;  factory . lookup ( "" / atmosphere@atmosphere . com"" true )  ;  factory . lookup ( "" / atmosphere"" true )  ;  assert equals ( factory . lookup all (  )  . size (  )  2 )  ;   }  "
2316,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\DefaultBroadcasterFactoryTest.java,test get   args,@ test public void   (  )  {   broadcaster result = factory . get (  )  ;  assert result  !  =  null ;  assert result instanceof  default broadcaster ;   }  
2317,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\DefaultBroadcasterFactoryTest.java,test get    object,"@ test public void   (  )  {   string id = ""id"" ;   broadcaster result = factory . get ( id )  ;  assert result  !  =  null ;  assert result instanceof  default broadcaster ;  assert id . equals ( result . getid (  )  )  ;   }  "
2318,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\DefaultBroadcasterFactoryTest.java,test get    object    twice,"@ test ( expected exceptions =  illegal state exception . class )  public void   (  )  {   string id = ""id"" ;  factory . get ( id )  ;  factory . get ( id )  ;   }  "
2319,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\DefaultBroadcasterFactoryTest.java,test lookup    class    object,"@ test public void   (  )  {   string id = ""id"" ;   string id2 = ""foo"" ;  assert factory . lookup (  default broadcaster . class id true )   !  =  null ;  assert factory . lookup (  default broadcaster . class id2 )   =  =  null ;   }  "
2320,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\DefaultBroadcasterFactoryTest.java,test lookup    class    object    bad class,"@ test ( expected exceptions =  illegal state exception . class )  public void   (  )  {   string id = ""id"" ;  factory . get ( id )  ;  factory . lookup (  simple broadcaster . class id )  ;   }  "
2321,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\DefaultBroadcasterFactoryTest.java,test lookup    class    object   boolean,"@ test public void   (  )  {   string id = ""id"" ;  assert factory . lookup (  default broadcaster . class id false )   =  =  null ;   broadcaster b = factory . lookup (  default broadcaster . class id true )  ;  assert b  !  =  null ;  assert b instanceof  default broadcaster ;  assert id . equals ( b . getid (  )  )  ; "
2322,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\DefaultBroadcasterFactoryTest.java,test lookup    object,"@ test public void   (  )  {   string id = ""id"" ;   string id2 = ""foo"" ;  factory . get ( id )  ;  assert factory . lookup ( id )   !  =  null ;  assert factory . lookup ( id2 )   =  =  null ;   }  "
2323,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\DefaultBroadcasterFactoryTest.java,test lookup    object   boolean,"@ test public void   (  )  {   string id = ""id"" ;  assert factory . lookup ( id false )   =  =  null ;   broadcaster b = factory . lookup ( id true )  ;  assert b  !  =  null ;  assert id . equals ( b . getid (  )  )  ;   }  "
2324,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\DefaultBroadcasterFactoryTest.java,test remove,"@ test public void   (  )  {   string id = ""id"" ;   string id2 = ""foo"" ;   broadcaster b = factory . get ( id )  ;   broadcaster b2 = factory . get ( id2 )  ;  assert factory . remove ( b id2 )   =  =  false ;  assert factory . remove ( b2 id )   =  =  false ;  assert factory . remove ( b id )   =  =  true ;  assert factory . look"
2325,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\DefaultBroadcasterFactoryTest.java,test slash email factory,"@ test public void   (  )  {  factory . lookup ( "" / atmosphere@atmosphere . com"" true )  ;  factory . lookup ( "" / atmosphere@atmosphere . com"" true )  ;  assert equals ( factory . lookup all (  )  . size (  )  1 )  ;   }  "
2326,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\DefaultBroadcasterFactoryTest.java,test slash factory,"@ test public void   (  )  {  factory . lookup ( "" / atmosphere"" true )  ;  factory . lookup ( "" / atmosphere"" true )  ;  assert equals ( factory . lookup all (  )  . size (  )  1 )  ;   }  "
2327,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\DefaultBroadcasterFactoryTest.java,un set,@ after method public void   (  )  throws  exception  {  config . destroy (  )  ;   executors factory . reset ( config )  ;  factory . destroy (  )  ;   }  
2328,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\MetaBroadcasterTest.java,chat test,"@ test public void   (  )  throws  execution exception   interrupted exception  {  factory . get ( "" / a / chat1"" )  ;  factory . get ( "" / a / chat2"" )  ;  factory . get ( "" / a / chat3"" )  ;  assert equals ( meta broadcaster . broadcast to ( "" / a / *"" ""yo"" )  . get (  )  . size (  )  3 )  ;   }  "
2329,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\MetaBroadcasterTest.java,complex broadcast test,"@ test public void   (  )  throws  execution exception   interrupted exception  {  factory . get ( "" / a / b / c / d"" )  ;  factory . get ( "" / b"" )  ;  factory . get ( "" / c"" )  ;  assert equals ( meta broadcaster . broadcast to ( "" / *"" ""yo"" )  . get (  )  . size (  )  3 )  ;  assert equals ( meta broadcaster . broadcast to ( "" / a / b / c / d"""
2330,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\MetaBroadcasterTest.java,exact broadcast test,"@ test public void   (  )  throws  execution exception   interrupted exception  {  factory . get ( "" / a"" )  ;  factory . get ( "" / a / b"" )  ;  factory . get ( "" / c"" )  ;  assert equals ( meta broadcaster . broadcast to ( "" / a"" ""yo"" )  . get (  )  . get ( 0 )  . getid (  )  "" / a"" )  ;   }  "
2331,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\MetaBroadcasterTest.java,issue test,"@ test public void   (  )  throws  execution exception   interrupted exception  {  factory . get ( "" / a / @b"" )  ;  factory . get ( "" / b"" )  ;  factory . get ( "" / c"" )  ;  assert equals ( meta broadcaster . broadcast to ( "" / a / @b"" ""yo"" )  . get (  )  . size (  )  1 )  ;   }  "
2332,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\MetaBroadcasterTest.java,set up,@ before method public void   (  )  throws  exception  {   atmosphere framework f = new  atmosphere framework (  )  ;  config = f . init (  )  . get atmosphere config (  )  ;  factory = config . get broadcaster factory (  )  ;  factory . remove (  broadcaster . root   master )  ;  meta broadcaster = config . meta broadcaste
2333,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\ExcludeSessionBroadcasterTest.java,on state change,@ override public void   (  atmosphere resource event e )  throws io exception  {  value . get (  )  . add ( e . get resource (  )  )  ;   }  
2334,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\MetaBroadcasterTest.java,trailling broadcast test,"@ test public void   (  )  throws  execution exception   interrupted exception  {  factory . get ( "" / a / b"" )  ;  factory . get ( "" / b"" )  ;  factory . get ( "" / c"" )  ;  assert equals ( meta broadcaster . broadcast to ( "" / a / b"" ""yo"" )  . get (  )  . size (  )  1 )  ;   }  "
2335,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\MetaBroadcasterTest.java,un set,@ after method public void   (  )  throws  exception  {  config . destroy (  )  ;   executors factory . reset ( config )  ;  factory . destroy (  )  ;   }  
2336,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\MetaBroadcasterTest.java,underscore matching,"@ test public void   (  )  throws  execution exception   interrupted exception  {  factory . get ( "" / a /    b"" )  ;  factory . get ( "" / b"" )  ;  factory . get ( "" / c"" )  ;  assert equals ( meta broadcaster . broadcast to ( "" / a /    b"" ""yo"" )  . get (  )  . size (  )  1 )  ;   }  "
2337,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\ExcludeSessionBroadcasterTest.java,set up,"@ before method public void   (  )  throws  exception  {  config = new  atmosphere framework (  )  . get atmosphere config (  )  ;   default broadcaster factory factory = new  default broadcaster factory (  exclude session broadcaster . class ""never"" config )  ;  config . framework (  )  . set broadcaster fact"
2338,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\ExcludeSessionBroadcasterTest.java,test direct broadcast method,"@ test public void   (  )  throws  execution exception   interrupted exception   servlet exception  {  broadcaster . broadcast ( ""foo"" ar )  . get (  )  ;  assert equals ( atmosphere handler . value . get (  )  new  hash set (  )  )  ;   }  "
2339,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\MetaBroadcasterTest.java,wildcard broadcast test,"@ test public void   (  )  throws  execution exception   interrupted exception  {  factory . get ( "" / a"" )  ;  factory . get ( "" / b"" )  ;  factory . get ( "" / c"" )  ;  assert equals ( meta broadcaster . broadcast to ( "" / *"" ""yo"" )  . get (  )  . size (  )  3 )  ;  assert equals ( meta broadcaster . broadcast to ( "" / a / b"" ""yo"" )  . get"
2340,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\ExcludeSessionBroadcasterTest.java,un set up,@ after method public void   (  )  throws  exception  {  broadcaster . remove atmosphere resource ( ar )  ;  atmosphere handler . value . set ( new  hash set (  )  )  ;  config . get broadcaster factory (  )  . destroy (  )  ;   }  
2341,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\ServiceTest.java,action,public void   (  atmosphere resource impl r )  {  try  {  resumed ( r . get request (  )  r . get response (  )  )  ;   }  catch  (  io exception e )   {  e . print stack trace (  )  ;   }  catch  (   servlet exception e )   {  e . print stack trace (  )  ;   }   }  
2342,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\ServiceTest.java,after,@ after method public void   (  )  {  framework . destroy (  )  ;   }  
2343,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\ServiceTest.java,create,@ before method public void   (  )  throws  throwable  {  framework = new  atmosphere framework (  )  ;  framework . add annotation package ( b . class )  ;  framework . set async support ( new  asynchronous processor ( framework . get atmosphere config (  )  )  {  @ override public  action service (   atmospher
2344,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\ServiceTest.java,service,@ override public  action   (  atmosphere request req  atmosphere response res )  throws io exception   servlet exception  {  return suspended ( req res )  ;   }  
2345,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\ServiceTest.java,test broadcaster service,"@ test public void   (  )  throws io exception   servlet exception  {  assert equals ( framework . get broadcaster factory (  )  . get ( ""test"" )  . get class (  )  . get name (  )  b . class . get name (  )  )  ;   }  "
2346,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\ServiceTest.java,test framework listener service,@ test public void   (  )  throws io exception   servlet exception  {  assert equals ( framework . framework listeners (  )  . get ( 0 )  . get class (  )  . get name (  )  c . class . get name (  )  )  ;   }  
2347,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\QueryStringTest.java,basic query string test,@ test public void   (  )  throws io exception   servlet exception   execution exception   interrupted exception  {  final  atomic reference <  atmosphere resource >  r = new  atomic reference <  atmosphere resource >  (  )  ;  final  atomic reference <  string >  q = new  atomic reference <  string >  (  )  ;  fr
2348,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\QueryStringTest.java,create,@ before method public void   (  )  throws  throwable  {  framework = new  atmosphere framework (  )  ;  framework . set async support ( new  blockingio comet support ( framework . get atmosphere config (  )  )  )  ;  framework . init ( new  servlet config (  )  {  @ override public  string get servlet name (  )  {  ret
2349,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\QueryStringTest.java,get init parameter,@ override public  string   (  string name )  {  return null ;   }  
2350,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\QueryStringTest.java,get init parameter names,@ override public  enumeration <  string >    (  )  {  return null ;   }  
2351,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\QueryStringTest.java,get servlet context,@ override public  servlet context   (  )  {  return mock (  servlet context . class )  ;   }  
2352,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\QueryStringTest.java,get servlet name,"@ override public  string   (  )  {  return ""void"" ;   }  "
2353,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\PoolableBroadcasterFactoryTest.java,concurrent access lookup test,@ test public void   (  )  throws  interrupted exception  {  final  count down latch latch = new  count down latch ( 1000 )  ;  final  atomic integer created = new  atomic integer (  )  ;  factory . poolable provider ( new  unbounded apache poolable provider (  )  )  ;  factory . add broadcaster listener ( new b
2354,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\PoolableBroadcasterFactoryTest.java,concurrent lookup test,"@ test public void   (  )  throws  interrupted exception  {   string id = ""id"" ;  final  count down latch latch = new  count down latch ( 100 )  ;  final  atomic integer created = new  atomic integer (  )  ;  factory . add broadcaster listener ( new  broadcaster listener adapter (  )  {  @ override public void"
2355,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\PoolableBroadcasterFactoryTest.java,on post create,@ override public void   (  broadcaster b )  {  created . increment and get (  )  ;   }  
2356,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\PoolableBroadcasterFactoryTest.java,run,@ override public void   (  )  {  c . add ( factory . get ( me )  )  ;  latch . count down (  )  ;   }  
2357,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\PoolableBroadcasterFactoryTest.java,set up,"@ before method public void   (  )  throws  exception  {   atmosphere framework f = new  atmosphere framework (  )  ;  config = f . get atmosphere config (  )  ;  factory = new  poolable broadcaster factory (  default broadcaster . class ""never"" config )  ;  factory . poolable provider ( new  bounded apache po"
2358,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\PoolableBroadcasterFactoryTest.java,test add remove,@ test public void   (  )  {   broadcaster result = factory . get (  )  ;  assert result  !  =  null ;  assert result instanceof  default broadcaster ;  result . destroy (  )  ;   broadcaster result2 = factory . get (  )  ;  assert result2  !  =  null ;  assert result2 instanceof  default broadcaster ;  asserte
2359,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\PoolableBroadcasterFactoryTest.java,test get   args,@ test public void   (  )  {   broadcaster result = factory . get (  )  ;  assert result  !  =  null ;  assert result instanceof  default broadcaster ;   }  
2360,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\PoolableBroadcasterFactoryTest.java,test get    object,"@ test public void   (  )  {   string id = ""id"" ;   broadcaster result = factory . get ( id )  ;  assert result  !  =  null ;  assert result instanceof  default broadcaster ;  assert id . equals ( result . getid (  )  )  ;   }  "
2361,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\PoolableBroadcasterFactoryTest.java,test implementation,@ test public void   (  )  {  assert not null ( factory . poolable provider (  )  )  ;  assert not null ( factory . poolable provider (  )  . implementation (  )  )  ;  assert equals ( factory . poolable provider (  )  . implementation (  )  . get class (  )   generic object pool . class )  ;   generic object pool native pool =  (  gener
2362,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\PoolableBroadcasterFactoryTest.java,un set,@ after method public void   (  )  throws  exception  {  config . destroy (  )  ;   executors factory . reset ( config )  ;  factory . destroy (  )  ;   }  
2363,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\QueryStringTest.java,issue,@ test public void   (  )  throws io exception   servlet exception   execution exception   interrupted exception  {  final  atomic reference <  atmosphere resource >  r = new  atomic reference <  atmosphere resource >  (  )  ;  final  atomic reference <  string >  q = new  atomic reference <  string >  (  )  ;  fr
2364,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\TrackMessageSizeInterceptorTest.java, array base web socket,public   (  output stream output stream )  {  super ( framework . get atmosphere config (  )  )  ;  this . output stream = output stream ;   }  
2365,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\TrackMessageSizeInterceptorTest.java,create,@ before method public void   (  )  throws  throwable  {  framework = new  atmosphere framework (  )  ;  framework . set async support ( new  asynchronous processor ( framework . get atmosphere config (  )  )  {  @ override public  action service (   atmosphere request req   atmosphere response res )  thr
2366,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\TrackMessageSizeInterceptorTest.java,get init parameter,@ override public  string   (  string name )  {  return null ;   }  
2367,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\TrackMessageSizeInterceptorTest.java,get init parameter names,@ override public  enumeration <  string >    (  )  {  return null ;   }  
2368,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\TrackMessageSizeInterceptorTest.java,get servlet context,@ override public  servlet context   (  )  {  return mock (  servlet context . class )  ;   }  
2369,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\TrackMessageSizeInterceptorTest.java,get servlet name,"@ override public  string   (  )  {  return ""void"" ;   }  "
2370,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\TrackMessageSizeInterceptorTest.java,is open,@ override public boolean   (  )  {  return true ;   }  
2371,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\TrackMessageSizeInterceptorTest.java,on request,@ override public void   (  atmosphere resource resource )  throws io exception  {  resource . get response (  )  . write ( resource . get request (  )  . get reader (  )  . read line (  )  )  ;   }  
2372,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\TrackMessageSizeInterceptorTest.java,on state change,@ override public void   (  atmosphere resource event event )  throws io exception  {  event . get resource (  )  . write ( event . get message (  )  . to string (  )  . get bytes (  )  )  ;   }  
2373,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\TrackMessageSizeInterceptorTest.java,service,@ override public  action   (  atmosphere request req  atmosphere response res )  throws io exception   servlet exception  {  return action ( req res )  ;   }  
2374,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\TrackMessageSizeInterceptorTest.java,test track message size,"private void   ( boolean enabled  atmosphere interceptor icp  string expected )  throws  exception  {   byte array output stream b = new  byte array output stream (  )  ;  final  web socket w = new  array base web socket ( b )  ;  final  web socket processor processor =  web socket processor factory . get default (  )  . get web socket processor ( framework )  ;  framework . interceptor ( icp )  ;  framework . add atmosphere handler ( "" / *"" new  atmosphere handler (  )  {  @ override public void on request (   atmosphere resource resource )  throws io exception  {  resource . get response (  )  . write ( resource . get request (  )  . get reader (  )  . read line (  )  )  ;   }  @ override public void on state change (   atmosphere resource event event )  throws io exception  {  event . get resource (  )  . write ( event . get message (  )  . to string (  )  . get bytes (  )  )  ;   }  @ override public void destroy (  )  {   }   }   )  ;   map <  string  string >  reqheaders = new  hash map <  >  (  )  ;  if  ( enabled )   {  reqheaders . put (  header config . x   atmosphere   trackmessagesize ""true"" )  ;   }   atmosphere request request = new  atmosphere request impl .  builder (  )  . destroyable ( false )  . headers ( reqheaders )  . body ( ""yo comet"" )  . path info ( "" / a"" )  . build (  )  ;  processor . open ( w request  atmosphere response impl . new instance ( framework . get atmosphere config (  )  request w )  )  ;  processor . invoke web socket protocol ( w ""yo web socket"" )  ;  assert equals ( b . to string (  )  expected )  ;   }  "
2375,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\TrackMessageSizeInterceptorTest.java,test track message sizeb disabled,"@ test public void   (  )  throws  exception  {  test track message size ( false new  track message sizeb64 interceptor (  )  ""yo cometyo web socket"" )  ;   }  "
2376,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\TrackMessageSizeInterceptorTest.java,test track message sizeb enabled,"@ test public void   (  )  throws  exception  {  test track message size ( true new  track message sizeb64 interceptor (  )  ""12|ew9 db21lda =  = 16|ew9xzwj tb2 nrzxq = "" )  ;   }  "
2377,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\TrackMessageSizeInterceptorTest.java,test track message size disabled,"@ test public void   (  )  throws  exception  {  test track message size ( false new  track message size interceptor (  )  ""yo cometyo web socket"" )  ;   }  "
2378,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\TrackMessageSizeInterceptorTest.java,test track message size enabled,"@ test public void   (  )  throws  exception  {  test track message size ( true new  track message size interceptor (  )  ""7|yo comet11|yo web socket"" )  ;   }  "
2379,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\TrackMessageSizeInterceptorTest.java,write,@ override public  web socket   ( byte[] b int offset int length )  throws io exception  {  output stream . write ( b offset length )  ;  return this ;   }  
2380,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\QueryStringTest.java,issue,@ test public void   (  )  throws io exception   servlet exception   execution exception   interrupted exception  {  final  atomic reference <  atmosphere resource >  r = new  atomic reference <  atmosphere resource >  (  )  ;  final  atomic reference <  string >  q = new  atomic reference <  string >  (  )  ;  fr
2381,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\QueryStringTest.java,on request,@ override public void   (  atmosphere resource resource )  throws io exception  {  r . set ( resource )  ;  q . set ( resource . get request (  )  . get content type (  )  )  ;  resource . get broadcaster (  )  . add atmosphere resource ( resource )  ;   }  
2382,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\SessionTest.java,basic atmosphere resource session test,@ test public void   (  )  throws io exception   servlet exception   execution exception   interrupted exception  {   atmosphere request request = new  atmosphere request impl .  builder (  )  . build (  )  ;   atmosphere response response = new  atmosphere response impl .  builder (  )  . build (  )  ;   atmosph
2383,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\SessionTest.java,basic session test,@ test public void   (  )  throws io exception   servlet exception   execution exception   interrupted exception  {   atmosphere request request = new  atmosphere request impl .  builder (  )  . build (  )  ;  assert null ( request . get session ( false )  )  ;  assert not null ( request . get session (  )  )  ;  asser
2384,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\SessionTest.java,session replacement test,@ test public void   (  )  {   atmosphere config config = new  atmosphere framework (  )  . get atmosphere config (  )  ;  config . set support session ( true )  ;   http servlet request http request = new  no ops request (  )  ;   atmosphere request request = new  atmosphere request impl .  builder (  )  . request ( http re
2385,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\UUIDBroadcasterCacheTest.java,addar,@ after method public void   (  )  {  broadcaster . remove atmosphere resource ( ar )  ;  config . get broadcaster factory (  )  . destroy (  )  ;   executors factory . reset ( config )  ;   }  
2386,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\UUIDBroadcasterCacheTest.java,add remove add test,"@ test public void   (  )  throws  execution exception   interrupted exception   servlet exception  {  broadcaster . broadcast ( ""e1"" )  . get (  )  ;  broadcaster . remove atmosphere resource ( ar )  ;  broadcaster . broadcast ( ""e2"" )  . get (  )  ;  assert equals ( 1 broadcaster cache . messages (  )  . size (  )  )  ;  b"
2387,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\UUIDBroadcasterCacheTest.java,concurrent cache,@ test public void   (  )  throws  execution exception   interrupted exception   servlet exception  {  final  count down latch latch = new  count down latch ( 101 )  ;  broadcaster . add broadcaster listener ( new  broadcaster listener adapter (  )  {  @ override public void on post create (   broadcas
2388,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\UUIDBroadcasterCacheTest.java,everything cached test,"@ test public void   (  )  throws  execution exception   interrupted exception   servlet exception  {  broadcaster . remove atmosphere resource ( ar )  ;  broadcaster . broadcast ( ""e1"" )  . get (  )  ;  broadcaster . broadcast ( ""e2"" )  . get (  )  ;  assert equals ( 1 broadcaster cache . messages (  )  . size (  )  )  ;   } "
2389,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\UUIDBroadcasterCacheTest.java,on complete,@ override public void   (  broadcaster b )  {  latch . count down (  )  ;   }  
2390,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\UUIDBroadcasterCacheTest.java,on state change,@ override public void   (  atmosphere resource event e )  throws io exception  {  value . get (  )  . append ( e . get message (  )  )  ;   }  
2391,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\UUIDBroadcasterCacheTest.java,run,"@ override public void   (  )  {  broadcaster . broadcast ( ""e""  +  y . get and increment (  )  )  ;   }  "
2392,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\UUIDBroadcasterCacheTest.java,set up,"@ before method public void   (  )  throws  exception  {  config = new  atmosphere framework (  )  . get atmosphere config (  )  ;   default broadcaster factory factory = new  default broadcaster factory (  default broadcaster . class ""never"" config )  ;  broadcaster = factory . get (  default broadcaster . c"
2393,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\UUIDBroadcasterCacheTest.java,test basic cache,"@ test public void   (  )  throws  execution exception   interrupted exception   servlet exception  {  broadcaster . broadcast ( ""e1"" )  . get (  )  ;  broadcaster . remove atmosphere resource ( ar )  ;  broadcaster . broadcast ( ""e2"" )  . get (  )  ;  broadcaster . broadcast ( ""e3"" )  . get (  )  ;  assert equals ( broad"
2394,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\UrlMappingTest.java,ah,public   (  string name )  {  this . name = name ;   }  
2395,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\UrlMappingTest.java,batch mapping test,"@ test public void   (  )  throws  servlet exception  {  framework . add atmosphere handler ( "" / "" new ah ( "" / "" )  )  ;  framework . add atmosphere handler ( "" / red"" new ah ( ""red"" )  )  ;  framework . add atmosphere handler ( "" / red / *"" new ah ( ""red"" )  )  ;  framework . add atmosphere handler ( "" / red / red / *"" new "
2396,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\UrlMappingTest.java,create,"@ before method public void   (  )  throws  throwable  {  framework = new  atmosphere framework (  )  ;  framework . set async support ( mock (  async support . class )  )  ;  framework . init ( new  servlet config (  )  {  @ override public  string get servlet name (  )  {  return ""void"" ;   }  @ override public  serv"
2397,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\UrlMappingTest.java,get init parameter,@ override public  string   (  string name )  {  return null ;   }  
2398,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\UrlMappingTest.java,get init parameter names,@ override public  enumeration <  string >    (  )  {  return null ;   }  
2399,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\UrlMappingTest.java,get servlet context,@ override public  servlet context   (  )  {  return mock (  servlet context . class )  ;   }  
2400,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\UrlMappingTest.java,get servlet name,"@ override public  string   (  )  {  return ""void"" ;   }  "
2401,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\UrlMappingTest.java,mapping dot wildcard,"@ test public void   (  )  throws  servlet exception  {  framework . add atmosphere handler ( "" / *"" handler )  ;   atmosphere request r = new  atmosphere request impl .  builder (  )  . path info ( "" / a . b / b"" )  . build (  )  ;  assert not null ( processor . map ( r )  )  ;  r = new  atmosphere request impl .  builder (  )  . path in"
2402,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\UrlMappingTest.java,mapping exact url,"@ test public void   (  )  throws  servlet exception  {  framework . add atmosphere handler ( "" / foo / a / "" handler )  ;   atmosphere request r = new  atmosphere request impl .  builder (  )  . servlet path ( "" / foo"" )  . path info ( "" / a"" )  . build (  )  ;  assert not null ( processor . map ( r )  )  ;   }  "
2403,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\UrlMappingTest.java,mapping sub wildcard path,"@ test public void   (  )  throws  servlet exception  {  framework . add atmosphere handler ( "" / foo / *"" handler )  ;   atmosphere request r = new  atmosphere request impl .  builder (  )  . servlet path ( "" / foo"" )  . path info ( "" / a"" )  . build (  )  ;  assert not null ( processor . map ( r )  )  ;  r = new  atmosphere requesti"
2404,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\UrlMappingTest.java,mapping test,"@ test public void   (  )  throws  servlet exception  {  framework . add atmosphere handler ( "" / a / "" handler )  ;  framework . add atmosphere handler ( "" / a"" handler )  ;  framework . add atmosphere handler ( "" / ab / "" handler )  ;  framework . add atmosphere handler ( "" / abc / "" handler )  ;  framework . add atmo"
2405,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\UrlMappingTest.java,mapping test servlet path,"@ test public void   (  )  throws  servlet exception  {  framework . add atmosphere handler ( "" / com . zyxabc . abc .  abc / gwt comet event*"" handler )  ;   atmosphere request r = new  atmosphere request impl .  builder (  )  . servlet path ( "" / com . zyxabc . abc .  abc / gwt comet event"" )  . build (  )  ;  assert not null ( p"
2406,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\UrlMappingTest.java,mapping test trailling handler,"@ test public void   (  )  throws  servlet exception  {  framework . add atmosphere handler ( "" / a"" handler )  ;   atmosphere request r = new  atmosphere request impl .  builder (  )  . path info ( "" / a / "" )  . build (  )  ;  assert not null ( processor . map ( r )  )  ;  r = new  atmosphere request impl .  builder (  )  . path info ( "
2407,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\UrlMappingTest.java,mapping wildcard path,"@ test public void   (  )  throws  servlet exception  {  framework . add atmosphere handler ( "" / *"" handler )  ;   atmosphere request r = new  atmosphere request impl .  builder (  )  . servlet path ( "" / foo"" )  . path info ( "" / a"" )  . build (  )  ;  assert not null ( processor . map ( r )  )  ;  r = new  atmosphere request impl . "
2408,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\UrlMappingTest.java,math test,"@ test public void   (  )  throws  servlet exception  {   endpoint mapper <  string >  mapper = new  default endpoint mapper <  string >  (  )  ;   map <  string  string >  mapping points = new  hash map <  string  string >  (  )  ;  mapping points . put ( "" / c"" "" / c"" )  ;  mapping points . put ( "" /  { a }  /  { b } "" "" /  { a }  /  { b } "" )  ;   asser"
2409,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\UrlMappingTest.java,service,@ override public  action   (  atmosphere request req  atmosphere response res )  throws io exception   servlet exception  {  return new  action (  action . type . created )  ;   }  
2410,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\UrlMappingTest.java,to string,public  string   (  )  {  return name ;   }  
2411,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\UrlMappingTest.java,un set,@ after method public void   (  )  throws  exception  {  framework . destroy (  )  ;   }  
2412,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketFactoryTest.java,create,@ before method public void   (  )  throws  throwable  {  framework = new  atmosphere framework (  )  ;  framework . set async support ( mock (  async support . class )  )  ;  framework . add annotation package (  web socket factory test . class )  ;  framework . init ( new  servlet config (  )  {  @ override public  str
2413,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketFactoryTest.java,destroy,@ after method public void   (  )  {  framework . destroy (  )  ;   }  
2414,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketFactoryTest.java,find,@ override public  web socket   (  string uuid )  {  return null ;   }  
2415,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketFactoryTest.java,get init parameter,@ override public  string   (  string name )  {  return null ;   }  
2416,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketFactoryTest.java,get init parameter names,@ override public  enumeration <  string >    (  )  {  return null ;   }  
2417,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketFactoryTest.java,get servlet context,@ override public  servlet context   (  )  {  return mock (  servlet context . class )  ;   }  
2418,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketFactoryTest.java,get servlet name,"@ override public  string   (  )  {  return ""void"" ;   }  "
2419,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketFactoryTest.java,test annotation,@ test public void   (  )  throws io exception   servlet exception  {  assert not null ( framework . web socket factory (  )  )  ;  assert equals (  custom factory . class framework . web socket factory (  )  . get class (  )  )  ;   }  
2420,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketHandlerTest.java, array base web socket,public   (  output stream output stream )  {  super ( framework . get atmosphere config (  )  )  ;  this . output stream = output stream ;   }  
2421,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketHandlerTest.java,basic workflow,@ test public void   (  )  throws io exception   servlet exception   execution exception   interrupted exception  {   byte array output stream b = new  byte array output stream (  )  ;  final  web socket w = new  array base web socket ( b )  ;  final  web socket processor processor =  web socket processorf
2422,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketHandlerTest.java,create,"@ before method public void   (  )  throws  throwable  {  framework = new  atmosphere framework (  )  ;  framework . set async support ( new  blockingio comet support ( framework . get atmosphere config (  )  )  )  ;  framework . add init parameter ( recycle   atmosphere   request   response ""false"" )  ;  framewor"
2423,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketHandlerTest.java,destroy,@ after method public void   (  )  throws  throwable  {  framework . destroy (  )  ;   }  
2424,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketHandlerTest.java,get init parameter,@ override public  string   (  string name )  {  return null ;   }  
2425,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketHandlerTest.java,get init parameter names,@ override public  enumeration <  string >    (  )  {  return null ;   }  
2426,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketHandlerTest.java,get servlet context,@ override public  servlet context   (  )  {  return mock (  servlet context . class )  ;   }  
2427,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketHandlerTest.java,get servlet name,"@ override public  string   (  )  {  return ""void"" ;   }  "
2428,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketHandlerTest.java,invalid path handler,@ test public void   (  )  throws io exception   servlet exception   execution exception   interrupted exception  {   byte array output stream b = new  byte array output stream (  )  ;  final  web socket w = new  array base web socket ( b )  ;  final  web socket processor processor =  web socket processorf
2429,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketHandlerTest.java,is open,@ override public boolean   (  )  {  return true ;   }  
2430,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketHandlerTest.java,multiple web socket and handler,@ test public void   (  )  throws io exception   servlet exception   execution exception   interrupted exception  {   byte array output stream b = new  byte array output stream (  )  ;  final  web socket w = new  array base web socket ( b )  ;  final  web socket processor processor =  web socket processorf
2431,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketHandlerTest.java,multiple web socket handler,@ test public void   (  )  throws io exception   servlet exception   execution exception   interrupted exception  {   byte array output stream b = new  byte array output stream (  )  ;  final  web socket w = new  array base web socket ( b )  ;  final  web socket processor processor =  web socket processorf
2432,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketHandlerTest.java,on byte message,@ override public void   (  web socket web socket byte[] data int offset int length )  throws io exception  {  web socket . write ( data offset length )  ;   }  
2433,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketHandlerTest.java,on text message,@ override public void   (  web socket web socket  string data )  throws io exception  {  web socket . write ( data )  ;   }  
2434,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketHandlerTest.java,register web socket handler,private void   (  string path  web socket processor .  web socket handler proxy w )  {   web socket processor factory . get default (  )  . get web socket processor ( framework )  . register web socket handler ( path w )  ;   }  
2435,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketHandlerTest.java,test injection,@ test public void   (  )  throws io exception   servlet exception   execution exception   interrupted exception  {   echo handler e = new  echo handler (  )  ;   byte array output stream b = new  byte array output stream (  )  ;  final  web socket w = new  array base web socket ( b )  ;  final  web socket proces
2436,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketHandlerTest.java,write,@ override public  web socket   ( byte[] b int offset int length )  throws io exception  {  output stream . write ( b offset length )  ;  return this ;   }  
2437,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketStreamingHandlerTest.java, array base web socket,public   (  output stream output stream )  {  super ( framework . get atmosphere config (  )  )  ;  this . output stream = output stream ;   }  
2438,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketStreamingHandlerTest.java,basic workflow,@ test public void   (  )  throws io exception   servlet exception   execution exception   interrupted exception  {   byte array output stream b = new  byte array output stream (  )  ;  final  web socket w = new  array base web socket ( b )  ;  final  web socket processor processor =  web socket processorf
2439,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketStreamingHandlerTest.java,create,"@ before method public void   (  )  throws  throwable  {  framework = new  atmosphere framework (  )  ;  framework . set async support ( new  blockingio comet support ( framework . get atmosphere config (  )  )  )  ;  framework . add init parameter ( recycle   atmosphere   request   response ""false"" )  ;  framewor"
2440,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketStreamingHandlerTest.java,destroy,@ after method public void   (  )  throws  throwable  {  framework . destroy (  )  ;   }  
2441,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketStreamingHandlerTest.java,drain reader,protected static  string   (  reader r )  throws io exception  {   char buffer cb =  char buffer . allocate ( 8192 )  ;  int read = 0 ;  while  ( read  >   - 1 )   {  cb . position ( cb . position (  )   +  read )  ;  read = r . read ( cb . array (  )  cb . position (  )  cb . remaining (  )  )  ;   }  cb . flip (  )  ;  return cb . to string (  )  ;   }  
2442,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketStreamingHandlerTest.java,get init parameter,@ override public  string   (  string name )  {  return null ;   }  
2443,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketStreamingHandlerTest.java,get init parameter names,@ override public  enumeration <  string >    (  )  {  return null ;   }  
2444,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketStreamingHandlerTest.java,get servlet context,@ override public  servlet context   (  )  {  return mock (  servlet context . class )  ;   }  
2445,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketStreamingHandlerTest.java,get servlet name,"@ override public  string   (  )  {  return ""void"" ;   }  "
2446,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketStreamingHandlerTest.java,invalid path handler,@ test public void   (  )  throws io exception   servlet exception   execution exception   interrupted exception  {   byte array output stream b = new  byte array output stream (  )  ;  final  web socket w = new  array base web socket ( b )  ;  final  web socket processor processor =  web socket processorf
2447,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketStreamingHandlerTest.java,is open,@ override public boolean   (  )  {  return true ;   }  
2448,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketStreamingHandlerTest.java,multiple web socket and handler,@ test public void   (  )  throws io exception   servlet exception   execution exception   interrupted exception  {   byte array output stream b = new  byte array output stream (  )  ;  final  web socket w = new  array base web socket ( b )  ;  final  web socket processor processor =  web socket processorf
2449,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketStreamingHandlerTest.java,multiple web socket handler,@ test public void   (  )  throws io exception   servlet exception   execution exception   interrupted exception  {   byte array output stream b = new  byte array output stream (  )  ;  final  web socket w = new  array base web socket ( b )  ;  final  web socket processor processor =  web socket processorf
2450,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketStreamingHandlerTest.java,on text stream,@ override public void   (  web socket web socket  reader reader )  throws io exception  {  web socket . write ( drain reader ( reader )  )  ;   }  
2451,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketStreamingHandlerTest.java,register web socket handler,private void   (  string path  web socket streaming handler w )  {   web socket processor factory . get default (  )  . get web socket processor ( framework )  . register web socket handler ( path new  web socket processor .  web socket handler proxy ( framework . get broadcaster factory (  )  . lookup ( path true )  . get class (  )  w )  )  ;   }  
2452,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketStreamingHandlerTest.java,write,@ override public  web socket   ( byte[] b int offset int length )  throws io exception  {  output stream . write ( b offset length )  ;  return this ;   }  
2453,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketProcessorTest.java, array base web socket,public   (  output stream output stream )  {  super ( framework . get atmosphere config (  )  )  ;  this . output stream = output stream ;   }  
2454,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketProcessorTest.java,basic backward compatbile workflow,@ test public void   (  )  throws  throwable  {   byte array output stream b = new  byte array output stream (  )  ;  final  web socket w = new  array base web socket ( b )  ;  final  web socket processor processor =  web socket processor factory . get default (  )  . get web socket processor ( framework )  ;  framewor
2455,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketProcessorTest.java,basic programmaticapi workflow,@ test public void   (  )  throws io exception   servlet exception   execution exception   interrupted exception  {   byte array output stream b = new  byte array output stream (  )  ;  final  web socket w = new  array base web socket ( b )  ;  final  web socket processor processor =  web socket processorf
2456,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketProcessorTest.java,basic web socket cookie test,@ test public void   (  )  throws io exception   servlet exception   execution exception   interrupted exception  {  final  atomic reference <  cookie >  c value = new  atomic reference <  cookie >  (  )  ;  final  atomic reference <  atmosphere resource >  r = new  atomic reference <  atmosphere resource >  ( 
2457,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketProcessorTest.java,basic workflow,@ test public void   (  )  throws io exception   servlet exception   execution exception   interrupted exception  {   byte array output stream b = new  byte array output stream (  )  ;  final  web socket w = new  array base web socket ( b )  ;  final  web socket processor processor =  web socket processorf
2458,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketProcessorTest.java,create,@ before method public void   (  )  throws  throwable  {  framework = new  atmosphere framework (  )  ;  framework . set async support ( new  asynchronous processor ( framework . get atmosphere config (  )  )  {  @ override public  action service (   atmosphere request req   atmosphere response res )  thr
2459,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WriteTimeoutTest.java,ar,public   (  count down latch latch )  {  this . latch = latch ;   }  
2460,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketProcessorTest.java,encodeurl proxy test,@ test public void   (  )  throws io exception   servlet exception   execution exception   interrupted exception  {   byte array output stream b = new  byte array output stream (  )  ;  final  web socket w = new  array base web socket ( b )  ;  final  web socket processor processor =  web socket processorf
2461,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketProcessorTest.java,get init parameter,@ override public  string   (  string name )  {  return null ;   }  
2462,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketProcessorTest.java,get init parameter names,@ override public  enumeration <  string >    (  )  {  return null ;   }  
2463,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketProcessorTest.java,get servlet context,@ override public  servlet context   (  )  {  return mock (  servlet context . class )  ;   }  
2464,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketProcessorTest.java,get servlet name,"@ override public  string   (  )  {  return ""void"" ;   }  "
2465,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WriteTimeoutTest.java,on state change,@ override public void   (  atmosphere resource event e )  throws io exception  {  try  {  if  ( latch  !  =  null )  latch . await ( 10  time unit . seconds )  ;   }  catch  (   interrupted exception e1 )   {  e1 . print stack trace (  )  ;   }   }  
2466,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WriteTimeoutTest.java,on throwable,@ override public void   (  atmosphere resource event event )  {  t . set ( event . throwable (  )  )  ;   }  
2467,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WriteTimeoutTest.java,set up,"@ before method public void   (  )  throws  exception  {  config = new  atmosphere framework (  )  . add init parameter ( ""org . atmosphere . runtime .  broadcaster . write timeout"" ""2000"" )  . init (  )  . get atmosphere config (  )  ;   default broadcaster factory factory = new  default broadcaster factory (  defa"
2468,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketProcessorTest.java,in close phase test,@ test public void   (  )  throws io exception   servlet exception   execution exception   interrupted exception  {   byte array output stream b = new  byte array output stream (  )  ;  final  web socket w = new  array base web socket ( b )  ;  final  web socket processor processor =  web socket processorf
2469,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketProcessorTest.java,is open,@ override public boolean   (  )  {  return true ;   }  
2470,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketProcessorTest.java,on close,@ override public void   (  web socket event event )  {  uuid . set (  (  string ) event . web socket (  )  . resource (  )  . get request (  )  . get attribute ( suspended   atmosphere   resource   uuid )  )  ;   }  
2471,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WriteTimeoutTest.java,test no write timeout,@ test public void   (  )  throws  execution exception   interrupted exception   servlet exception  {  atmosphere handler = new ar ( null )  ;  ar = new  atmosphere resource impl ( config broadcaster mock (  atmosphere request impl . class )   atmosphere response impl . new instance (  )  mock (  servlet3
2472,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WriteTimeoutTest.java,test write timeout,@ test public void   (  )  throws  execution exception   interrupted exception   servlet exception  {  final  count down latch latch = new  count down latch ( 1 )  ;  final  count down latch guard = new  count down latch ( 1 )  ;  atmosphere handler = new ar ( latch )  ;  ar = new  atmosphere resource impl ( co
2473,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WriteTimeoutTest.java,un set up,@ after method public void   (  )  throws  exception  {  broadcaster . destroy (  )  ;  config . get broadcaster factory (  )  . destroy (  )  ;   }  
2474,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketProcessorTest.java,on close atmosphere request attribute,@ test public void   (  )  throws io exception   servlet exception   execution exception   interrupted exception  {   byte array output stream b = new  byte array output stream (  )  ;  final  web socket w = new  array base web socket ( b )  ;  final  web socket processor processor =  web socket processorf
2475,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketProcessorTest.java,on disconnect,@ override public void   (  atmosphere resource event event )  {  if  ( event . is cancelled (  )  )  dirty disconnect . set ( true )  ;   }  
2476,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketProcessorTest.java,on disconnect atmosphere request attribute,@ test public void   (  )  throws io exception   servlet exception   execution exception   interrupted exception  {   byte array output stream b = new  byte array output stream (  )  ;  final  web socket w = new  array base web socket ( b )  ;  final  web socket processor processor =  web socket processorf
2477,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketProcessorTest.java,on open,@ override public void   (  web socket web socket )  throws io exception  {  web socket . write ( web socket . resource (  )  . get request (  )  . get reader (  )  . read line (  )  )  ;   }  
2478,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketProcessorTest.java,on request,@ override public void   (  atmosphere resource resource )  throws io exception  {  r . set ( resource )  ;  resource . get broadcaster (  )  . add atmosphere resource ( resource )  ;   }  
2479,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketProcessorTest.java,on state change,@ override public void   (  atmosphere resource event event )  throws io exception  {   cookie[] c = event . get resource (  )  . get request (  )  . get cookies (  )  ;  c value . set ( c[0] )  ;   }  
2480,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketProcessorTest.java,on text message,@ override public void   (  web socket web socket  string data )  throws io exception  {  web socket . write ( data )  ;   }  
2481,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketProcessorTest.java,service,@ override public  action   (  atmosphere request req  atmosphere response res )  throws io exception   servlet exception  {  return action ( req res )  ;   }  
2482,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketProcessorTest.java,undetected close web socket test,@ test public void   (  )  throws io exception   servlet exception   execution exception   interrupted exception  {  final  atomic reference <  cookie >  c value = new  atomic reference <  cookie >  (  )  ;  final  atomic reference <  atmosphere resource >  r = new  atomic reference <  atmosphere resource >  ( 
2483,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketProcessorTest.java,write,@ override public  web socket   ( byte[] b int offset int length )  throws io exception  {  output stream . write ( b offset length )  ;  return this ;   }  
2484,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\util\ChunkConcatReaderPoolTest.java,perform reaasmble chunked messges,"private void   ( int limit )  throws  exception  {  final  chunk concat reader pool pool = new  chunk concat reader pool (  )  ;   reader reader = pool . get reader ( ""123"" true )  ;  pool . add chunk ( ""123"" new  string reader ( test   messages[0] )  true )  ;  assert not null ( reader )  ;  for  ( int i = 1 ;  i  <  test   messages . length ;  i +  +  )   {  pool . add chunk ( ""123"" new  string reader ( test   messages[i] )  i  <  test   messages . length  -  1 )  ;   }   string data = read all ( reader limit test   messages   concatenated . length (  )   <  limit )  ;  assert equals ( data test   messages   concatenated )  ;   }  "
2485,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\util\ChunkConcatReaderPoolTest.java,performtest reassemble delayed chunked messages,"private void   ( int limit )  throws  exception  {  final  chunk concat reader pool pool = new  chunk concat reader pool (  )  ;   reader reader = pool . get reader ( ""123"" true )  ;  pool . add chunk ( ""123"" new  string reader ( test   messages[0] )  true )  ;  assert not null ( reader )  ;  new  thread ( new  runnable (  )  {  public void run (  )  {  try  {   thread . sleep ( 1000 )  ;   }  catch  (   interrupted exception e )   {   }  for  ( int i = 1 ;  i  <  test   messages . length ;  i +  +  )   {  pool . add chunk ( ""123"" new  string reader ( test   messages[i] )  i  <  test   messages . length  -  1 )  ;   }   }   }   )  . start (  )  ;   string data = read all ( reader 5 false )  ;  assert equals ( test   messages   concatenated data )  ;   }  "
2486,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\util\ChunkConcatReaderPoolTest.java,read all,private static  string   (  reader reader int limit boolean once )  throws io exception  {   string builder sb = new  string builder (  )  ;  char[] buf = new char[limit] ;  for  (  ;   ;   )   {  int c = reader . read ( buf 0 buf . length )  ;  if  ( c  =  =   - 1 )   {  break ;   }  sb . append ( buf 0 c )  ;  if  ( once )   {  break ;   }   }  return sb . to string (  )  ;   }  
2487,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\util\ChunkConcatReaderPoolTest.java,read only available,private static  string   (  reader reader )  throws io exception  {   string builder sb = new  string builder (  )  ;  char[] buf = new char[512] ;  while  ( reader . ready (  )  )   {  try  {  int c = reader . read ( buf 0 buf . length )  ;  assert not equals ( c  - 1 )  ;  sb . append ( buf 0 c )  ;   }  catch  (  io exception e )   {  e . print stack trace (  )  ;   }   }  return sb . to string (  )  ;   }  
2488,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\util\ChunkConcatReaderPoolTest.java,run,"public void   (  )  {  try  {   thread . sleep ( 1000 )  ;   }  catch  (   interrupted exception e )   {   }  for  ( int i = 1 ;  i  <  test   messages . length ;  i +  +  )   {  pool . add chunk ( ""123"" new  string reader ( test   messages[i] )  i  <  test   messages . length  -  1 )  ;   }   }  "
2489,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\util\ChunkConcatReaderPoolTest.java,test incoremental non blocking read,"@ test public void   (  )  throws  exception  {  final  chunk concat reader pool pool = new  chunk concat reader pool (  )  ;   reader reader = pool . get reader ( ""123"" true )  ;  assert not null ( reader )  ;  pool . add chunk ( ""123"" new  string reader ( test   messages[0] )  true )  ;  assert true ( reader . ready (  ) "
2490,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\util\ChunkConcatReaderPoolTest.java,test interrupt read with timeout,"@ test public void   (  )  throws  exception  {  final  chunk concat reader pool pool = new  chunk concat reader pool (  )  ;  pool . set timeout ( 100 )  ;   reader reader = pool . get reader ( ""123"" true )  ;  pool . add chunk ( ""123"" new  string reader ( test   messages[0] )  true )  ;  assert not null ( reader )  ;  try"
2491,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\util\ChunkConcatReaderPoolTest.java,test reassemble chunked messages using big buffer,@ test public void   (  )  throws  exception  {  perform reaasmble chunked messges ( 512 )  ;   }  
2492,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\util\ChunkConcatReaderPoolTest.java,test reassemble chunked messages using small buffer,@ test public void   (  )  throws  exception  {  perform reaasmble chunked messges ( 5 )  ;   }  
2493,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\util\ChunkConcatReaderPoolTest.java,test reassemble delayed chunked messages using large buffer,@ test public void   (  )  throws  exception  {  performtest reassemble delayed chunked messages ( 512 )  ;   }  
2494,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\util\ChunkConcatReaderPoolTest.java,test reassemble delayed chunked messages using small buffer,@ test public void   (  )  throws  exception  {  performtest reassemble delayed chunked messages ( 5 )  ;   }  
2495,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\util\CookieUtilTest.java,test decode server cookies,@ test public void   (  )  throws  exception  {   set <  cookie >  cookies = new  hash set <  cookie >  (  )  ;  for  (   string cookie header : cookies1 )   {   cookie util .  server cookie decoder . strict . decode ( cookie header cookies )  ;   }  assert equals ( cookies . size (  )  3 )  ;  for  (   cookie cookie : cookies
2496,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\util\IOUtilsTest.java,test get cleaned servlet path,"@ test public void   (  )  {   string test full path ;   string test cleaned path ;  test full path = "" / foo / bar / *"" ;  test cleaned path = io utils . get cleaned servlet path ( test full path )  ;  assert equals ( test cleaned path "" / foo / bar"" )  ;  test full path = ""foo / bar / ** / *"" ;  test cleaned path = io utils . getc"
2497,C:\Users\User\Desktop\Thesis\atmosphere\modules\shiro\src\main\java\org\atmosphere\interceptor\ShiroInterceptor.java,inspect,@ override public  action   (  atmosphere resource r )  {  if  (  utils . web socket message ( r )  )  return  action . continue ;  if  ( r . get request (  )  . local attributes (  )  . contains key (  framework config . security   subject )   =  =  false )   {  try  {   subject current user = null ;  if  ( r . transport (  )  . equals
2498,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\websocket\WebSocketTest.java, dummy interceptor,public   ( long time )  {  this . time = time ;   }  
2499,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\websocket\WebSocketTest.java, worker,public   (  web socket ws  atmosphere response response )  {  this . ws = ws ;  this . response = response ;   }  
2500,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\websocket\WebSocketTest.java,create,@ before method public void   (  )  throws  throwable  {  framework = new  atmosphere framework (  )  ;  framework . set async support ( new  blockingio comet support ( framework . get atmosphere config (  )  )  )  ;  framework . init ( new  servlet config (  )  {  @ override public  string get servlet name (  )  {  ret
2501,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\websocket\WebSocketTest.java,error,@ override public byte[]   (  atmosphere response response int status code  string reason phrase )  {  return null ;   }  
2502,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\websocket\WebSocketTest.java,get init parameter,@ override public  string   (  string name )  {  return null ;   }  
2503,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\websocket\WebSocketTest.java,get init parameter names,@ override public  enumeration <  string >    (  )  {  return null ;   }  
2504,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\websocket\WebSocketTest.java,get servlet context,@ override public  servlet context   (  )  {  return mock (  servlet context . class )  ;   }  
2505,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\websocket\WebSocketTest.java,get servlet name,"@ override public  string   (  )  {  return ""void"" ;   }  "
2506,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\websocket\WebSocketTest.java,is corrupted,public boolean   (  )  {  return corrupted ;   }  
2507,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\websocket\WebSocketTest.java,is open,@ override public boolean   (  )  {  return false ;   }  
2508,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\websocket\WebSocketTest.java,run,@ override public void   (  )  {  try  {  byte[] b = ws . transform ( response test   data 0 test   data . length )  ;  corrupted| =  !  arrays . equals ( test   data b )  ;  b = ws . transform ( response test   data 0 test   data . length )  ;  corrupted| =  !  arrays . equals ( test   data b )  ;   }  catch  (  io exception e )  
2509,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\websocket\WebSocketTest.java,test transform with concurrency,@ test public void   (  )  throws  exception  {   web socket ws = new  web socket ( framework . get atmosphere config (  )  )  {  @ override public boolean is open (  )  {  return false ;   }  @ override public  web socket write (   string s )  throws io exception  {  return null ;   }  @ override public  web so
2510,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\websocket\WebSocketTest.java,transform payload,@ override public byte[]   (  atmosphere response response byte[] response draft byte[] data )  throws io exception  {  try  {   thread . sleep ( time )  ;   }  catch  (   interrupted exception e )   {   }  return response draft ;   }  
2511,C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\websocket\WebSocketTest.java,write,@ override public  web socket   ( byte[] b int offset int length )  throws io exception  {  return null ;   }  
