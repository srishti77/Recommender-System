,ProjectName,methodName,methodBody,methodBodyLength,TotalMN,Prefix,Rank,AllOccurrance
0,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AbstractInstanceConfig.java, abstract instance config,protected   (  data center info info )  {  this . info = info ;   }  ,69,3,abstract,1,[]
1,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AbstractInstanceConfig.java, abstract instance config,protected   (  data center info info )  {  this . info = info ;   }  ,69,3,instance,2,[]
2,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AbstractInstanceConfig.java, abstract instance config,protected   (  data center info info )  {  this . info = info ;   }  ,69,3,config,3,[]
3,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AbstractInstanceConfig.java,getasg name,@ override public  string   (  )  {  return null ;   }  ,56,2,getasg,1,[]
4,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AbstractInstanceConfig.java,getasg name,@ override public  string   (  )  {  return null ;   }  ,56,2,name,2,[]
5,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AbstractInstanceConfig.java,get data center info,@ override public  data center info   (  )  {  return info ;   }  ,66,4,get,1,[]
6,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AbstractInstanceConfig.java,get data center info,@ override public  data center info   (  )  {  return info ;   }  ,66,4,data,2,[19]
7,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AbstractInstanceConfig.java,get data center info,@ override public  data center info   (  )  {  return info ;   }  ,66,4,center,3,[24]
8,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AbstractInstanceConfig.java,get data center info,@ override public  data center info   (  )  {  return info ;   }  ,66,4,info,4,"[31, 54]"
9,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AbstractInstanceConfig.java,get host info,"private static  pair <  string  string >    (  )  {   pair <  string  string >  pair ;  try  {   inet address local host =  inet address . get local host (  )  ;  pair = new  pair <  string  string >  ( local host . get host address (  )  local host . get host name (  )  )  ;   }  catch  (   unknown host exception e )   {  logger . error ( "" cannot get host info"" e )  ;  pair = new  pair <  string  string >  ( """" """" )  ;   }  return pair ;   }  ",449,3,get,1,"[139, 216, 252, 351]"
10,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AbstractInstanceConfig.java,get host info,"private static  pair <  string  string >    (  )  {   pair <  string  string >  pair ;  try  {   inet address local host =  inet address . get local host (  )  ;  pair = new  pair <  string  string >  ( local host . get host address (  )  local host . get host name (  )  )  ;   }  catch  (   unknown host exception e )   {  logger . error ( "" cannot get host info"" e )  ;  pair = new  pair <  string  string >  ( """" """" )  ;   }  return pair ;   }  ",449,3,host,2,"[116, 149, 209, 220, 245, 256, 301, 355]"
11,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AbstractInstanceConfig.java,get host info,"private static  pair <  string  string >    (  )  {   pair <  string  string >  pair ;  try  {   inet address local host =  inet address . get local host (  )  ;  pair = new  pair <  string  string >  ( local host . get host address (  )  local host . get host name (  )  )  ;   }  catch  (   unknown host exception e )   {  logger . error ( "" cannot get host info"" e )  ;  pair = new  pair <  string  string >  ( """" """" )  ;   }  return pair ;   }  ",449,3,info,3,[360]
12,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AbstractInstanceConfig.java,get host name,@ override public  string   ( boolean refresh )  {  return host info . second (  )  ;   }  ,91,3,get,1,[]
13,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AbstractInstanceConfig.java,get host name,@ override public  string   ( boolean refresh )  {  return host info . second (  )  ;   }  ,91,3,host,2,[59]
14,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AbstractInstanceConfig.java,get host name,@ override public  string   ( boolean refresh )  {  return host info . second (  )  ;   }  ,91,3,name,3,[]
15,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AbstractInstanceConfig.java,get ip address,@ override public  string   (  )  {  return host info . first (  )  ;   }  ,75,3,get,1,[]
16,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AbstractInstanceConfig.java,get ip address,@ override public  string   (  )  {  return host info . first (  )  ;   }  ,75,3,ip,2,[]
17,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AbstractInstanceConfig.java,get ip address,@ override public  string   (  )  {  return host info . first (  )  ;   }  ,75,3,address,3,[]
18,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AbstractInstanceConfig.java,get lease expiration duration in seconds,@ override public int   (  )  {  return lease   expiration   duration   seconds ;   }  ,87,6,get,1,[]
19,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AbstractInstanceConfig.java,get lease expiration duration in seconds,@ override public int   (  )  {  return lease   expiration   duration   seconds ;   }  ,87,6,lease,2,[40]
20,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AbstractInstanceConfig.java,get lease expiration duration in seconds,@ override public int   (  )  {  return lease   expiration   duration   seconds ;   }  ,87,6,expiration,3,[48]
21,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AbstractInstanceConfig.java,get lease expiration duration in seconds,@ override public int   (  )  {  return lease   expiration   duration   seconds ;   }  ,87,6,duration,4,[61]
22,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AbstractInstanceConfig.java,get lease expiration duration in seconds,@ override public int   (  )  {  return lease   expiration   duration   seconds ;   }  ,87,6,in,5,[18]
23,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AbstractInstanceConfig.java,get lease expiration duration in seconds,@ override public int   (  )  {  return lease   expiration   duration   seconds ;   }  ,87,6,seconds,6,[72]
24,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AbstractInstanceConfig.java,get lease renewal interval in seconds,@ override public int   (  )  {  return lease   renewal   interval   seconds ;   }  ,84,6,get,1,[]
25,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AbstractInstanceConfig.java,get lease renewal interval in seconds,@ override public int   (  )  {  return lease   renewal   interval   seconds ;   }  ,84,6,lease,2,[40]
26,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AbstractInstanceConfig.java,get lease renewal interval in seconds,@ override public int   (  )  {  return lease   renewal   interval   seconds ;   }  ,84,6,renewal,3,[48]
27,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AbstractInstanceConfig.java,get lease renewal interval in seconds,@ override public int   (  )  {  return lease   renewal   interval   seconds ;   }  ,84,6,interval,4,[58]
28,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AbstractInstanceConfig.java,get lease renewal interval in seconds,@ override public int   (  )  {  return lease   renewal   interval   seconds ;   }  ,84,6,in,5,"[18, 58]"
29,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AbstractInstanceConfig.java,get lease renewal interval in seconds,@ override public int   (  )  {  return lease   renewal   interval   seconds ;   }  ,84,6,seconds,6,[69]
30,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AbstractInstanceConfig.java,get metadata map,@ override public  map <  string  string >    (  )  {  return null ;   }  ,74,3,get,1,[]
31,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AbstractInstanceConfig.java,get metadata map,@ override public  map <  string  string >    (  )  {  return null ;   }  ,74,3,metadata,2,[]
32,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AbstractInstanceConfig.java,get metadata map,@ override public  map <  string  string >    (  )  {  return null ;   }  ,74,3,map,3,[19]
33,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AbstractInstanceConfig.java,get name,@ override public  name   (  )  {  return  name .  my own ;   }  ,65,2,get,1,[]
34,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AbstractInstanceConfig.java,get name,@ override public  name   (  )  {  return  name .  my own ;   }  ,65,2,name,2,"[19, 43]"
35,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AbstractInstanceConfig.java,get non secure port,@ override public int   (  )  {  return non   secure   port ;   }  ,67,4,get,1,[]
36,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AbstractInstanceConfig.java,get non secure port,@ override public int   (  )  {  return non   secure   port ;   }  ,67,4,non,2,[40]
37,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AbstractInstanceConfig.java,get non secure port,@ override public int   (  )  {  return non   secure   port ;   }  ,67,4,secure,3,[46]
38,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AbstractInstanceConfig.java,get non secure port,@ override public int   (  )  {  return non   secure   port ;   }  ,67,4,port,4,[55]
39,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AbstractInstanceConfig.java,get secure port,@ override public int   (  )  {  return secure   port ;   }  ,61,3,get,1,[]
40,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AbstractInstanceConfig.java,get secure port,@ override public int   (  )  {  return secure   port ;   }  ,61,3,secure,2,[40]
41,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AbstractInstanceConfig.java,get secure port,@ override public int   (  )  {  return secure   port ;   }  ,61,3,port,3,[49]
42,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AbstractInstanceConfig.java,get secure port enabled,@ override public boolean   (  )  {  return secure   port   enabled ;   }  ,75,4,get,1,[]
43,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AbstractInstanceConfig.java,get secure port enabled,@ override public boolean   (  )  {  return secure   port   enabled ;   }  ,75,4,secure,2,[44]
44,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AbstractInstanceConfig.java,get secure port enabled,@ override public boolean   (  )  {  return secure   port   enabled ;   }  ,75,4,port,3,[53]
45,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AbstractInstanceConfig.java,get secure port enabled,@ override public boolean   (  )  {  return secure   port   enabled ;   }  ,75,4,enabled,4,[60]
46,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AbstractInstanceConfig.java,get secure virtual host name,"@ override public  string   (  )  {  return  ( get host name ( false )   +  "":""  +  get secure port (  )  )  ;   }  ",116,5,get,1,"[47, 84]"
47,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AbstractInstanceConfig.java,get secure virtual host name,"@ override public  string   (  )  {  return  ( get host name ( false )   +  "":""  +  get secure port (  )  )  ;   }  ",116,5,secure,2,[88]
48,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AbstractInstanceConfig.java,get secure virtual host name,"@ override public  string   (  )  {  return  ( get host name ( false )   +  "":""  +  get secure port (  )  )  ;   }  ",116,5,virtual,3,[]
49,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AbstractInstanceConfig.java,get secure virtual host name,"@ override public  string   (  )  {  return  ( get host name ( false )   +  "":""  +  get secure port (  )  )  ;   }  ",116,5,host,4,[51]
50,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AbstractInstanceConfig.java,get secure virtual host name,"@ override public  string   (  )  {  return  ( get host name ( false )   +  "":""  +  get secure port (  )  )  ;   }  ",116,5,name,5,[56]
51,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AbstractInstanceConfig.java,get virtual host name,"@ override public  string   (  )  {  return  ( get host name ( false )   +  "":""  +  get non secure port (  )  )  ;   }  ",120,4,get,1,"[47, 84]"
52,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AbstractInstanceConfig.java,get virtual host name,"@ override public  string   (  )  {  return  ( get host name ( false )   +  "":""  +  get non secure port (  )  )  ;   }  ",120,4,virtual,2,[]
53,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AbstractInstanceConfig.java,get virtual host name,"@ override public  string   (  )  {  return  ( get host name ( false )   +  "":""  +  get non secure port (  )  )  ;   }  ",120,4,host,3,[51]
54,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AbstractInstanceConfig.java,get virtual host name,"@ override public  string   (  )  {  return  ( get host name ( false )   +  "":""  +  get non secure port (  )  )  ;   }  ",120,4,name,4,[56]
55,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AbstractInstanceConfig.java,is instance enabled onit,@ override public boolean   (  )  {  return instance   enabled   on   init ;   }  ,82,4,is,1,[]
56,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AbstractInstanceConfig.java,is instance enabled onit,@ override public boolean   (  )  {  return instance   enabled   on   init ;   }  ,82,4,instance,2,[44]
57,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AbstractInstanceConfig.java,is instance enabled onit,@ override public boolean   (  )  {  return instance   enabled   on   init ;   }  ,82,4,enabled,3,[55]
58,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AbstractInstanceConfig.java,is instance enabled onit,@ override public boolean   (  )  {  return instance   enabled   on   init ;   }  ,82,4,onit,4,[]
59,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AbstractInstanceConfig.java,is non secure port enabled,@ override public boolean   (  )  {  return non   secure   port   enabled ;   }  ,81,5,is,1,[]
60,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AbstractInstanceConfig.java,is non secure port enabled,@ override public boolean   (  )  {  return non   secure   port   enabled ;   }  ,81,5,non,2,[44]
61,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AbstractInstanceConfig.java,is non secure port enabled,@ override public boolean   (  )  {  return non   secure   port   enabled ;   }  ,81,5,secure,3,[50]
62,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AbstractInstanceConfig.java,is non secure port enabled,@ override public boolean   (  )  {  return non   secure   port   enabled ;   }  ,81,5,port,4,[59]
63,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AbstractInstanceConfig.java,is non secure port enabled,@ override public boolean   (  )  {  return non   secure   port   enabled ;   }  ,81,5,enabled,5,[66]
64,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AmazonInfo.java, amazon info,"public   ( @ json property ( ""name"" )   string name @ json property ( ""metadata"" )   map <  string  string >  metadata )  {  this . metadata = metadata ;   }  ",159,2,amazon,1,[]
65,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AmazonInfo.java, amazon info,"public   ( @ json property ( ""name"" )   string name @ json property ( ""metadata"" )   map <  string  string >  metadata )  {  this . metadata = metadata ;   }  ",159,2,info,2,[]
66,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AmazonInfo.java, builder,private   (  )  {  result = new  amazon info (  )  ;   }  ,58,1,builder,1,[]
67,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AmazonInfo.java, meta data key,  (  string name  string path )  {  this . name = name ;  this . path = path ;   }  ,84,3,meta,1,[]
68,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AmazonInfo.java, meta data key,  (  string name  string path )  {  this . name = name ;  this . path = path ;   }  ,84,3,data,2,[]
69,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AmazonInfo.java, meta data key,  (  string name  string path )  {  this . name = name ;  this . path = path ;   }  ,84,3,key,3,[]
70,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AmazonInfo.java,add metadata,public  builder   (  meta data key key  string value )  {  result . metadata . put ( key . get name (  )  value )  ;  return this ;   }  ,137,2,add,1,[]
71,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AmazonInfo.java,add metadata,public  builder   (  meta data key key  string value )  {  result . metadata . put ( key . get name (  )  value )  ;  return this ;   }  ,137,2,metadata,2,[68]
72,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AmazonInfo.java,auto build,"public  amazon info   (  string namespace )  {  if  ( config  =  =  null )   {  config = new  archaius1 amazon info config ( namespace )  ;   }  for  (   meta data key key :  meta data key . values (  )  )   {  int num of retries = config . get num retries (  )  ;  while  ( num of retries -  -   >  0 )   {  try  {   string mac = null ;  if  ( key  =  =   meta data key . vpc id )   {  mac = result . metadata . get (  meta data key . mac . get name (  )  )  ;   }  url url = key . geturl ( null mac )  ;   string value =  amazon info utils . read ec2 metadata url ( key url config . get connect timeout (  )  config . get read timeout (  )  )  ;  if  ( value  !  =  null )   {  result . metadata . put ( key . get name (  )  value )  ;   }  break ;   }  catch  (   throwable e )   {  if  ( config . should log amazon metadata errors (  )  )   {  logger . warn ( "" cannot get the value for the metadata key:  {  }   reason :"" key e )  ;   }  if  ( num of retries  >  =  0 )   {  try  {   thread . sleep ( sleep   time   ms )  ;   }  catch  (   interrupted exception e1 )   {   }  continue ;   }   }   }  if  ( key  =  =   meta data key . instance id && config . should fail fast on first load (  )  &&  ! result . metadata . contains key (  meta data key . instance id . get name (  )  )  )   {  logger . warn ( "" skipping the rest of  amazon info init as we were not able to load instance id after ""  +  ""the configured number of retries:  {  }   per fail fast configuration:  {  } "" config . get num retries (  )  config . should fail fast on first load (  )  )  ;  break ;   }   }  return result ;   }  ",1607,2,auto,1,[]
73,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AmazonInfo.java,auto build,"public  amazon info   (  string namespace )  {  if  ( config  =  =  null )   {  config = new  archaius1 amazon info config ( namespace )  ;   }  for  (   meta data key key :  meta data key . values (  )  )   {  int num of retries = config . get num retries (  )  ;  while  ( num of retries -  -   >  0 )   {  try  {   string mac = null ;  if  ( key  =  =   meta data key . vpc id )   {  mac = result . metadata . get (  meta data key . mac . get name (  )  )  ;   }  url url = key . geturl ( null mac )  ;   string value =  amazon info utils . read ec2 metadata url ( key url config . get connect timeout (  )  config . get read timeout (  )  )  ;  if  ( value  !  =  null )   {  result . metadata . put ( key . get name (  )  value )  ;   }  break ;   }  catch  (   throwable e )   {  if  ( config . should log amazon metadata errors (  )  )   {  logger . warn ( "" cannot get the value for the metadata key:  {  }   reason :"" key e )  ;   }  if  ( num of retries  >  =  0 )   {  try  {   thread . sleep ( sleep   time   ms )  ;   }  catch  (   interrupted exception e1 )   {   }  continue ;   }   }   }  if  ( key  =  =   meta data key . instance id && config . should fail fast on first load (  )  &&  ! result . metadata . contains key (  meta data key . instance id . get name (  )  )  )   {  logger . warn ( "" skipping the rest of  amazon info init as we were not able to load instance id after ""  +  ""the configured number of retries:  {  }   per fail fast configuration:  {  } "" config . get num retries (  )  config . should fail fast on first load (  )  )  ;  break ;   }   }  return result ;   }  ",1607,2,build,2,[]
74,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AmazonInfo.java,build,public  amazon info   (  )  {  return result ;   }  ,52,1,build,1,[]
75,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AmazonInfo.java,equals,@ override public boolean   (  object o )  {  if  ( this  =  =  o )  return true ;  if  (  !  ( o instanceof  amazon info )  )  return false ;   amazon info that =  (  amazon info ) o ;  if  ( metadata  !  =  null  ?   ! metadata . equals ( that . metadat,255,1,equals,1,[232]
76,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AmazonInfo.java,get,public  string   (  meta data key key )  {  return metadata . get ( key . get name (  )  )  ;   }  ,99,1,get,1,"[62, 74]"
77,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AmazonInfo.java,get id,@ override @ json ignore public  string   (  )  {  return get (  meta data key . instance id )  ;   }  ,103,2,get,1,[58]
78,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AmazonInfo.java,get id,@ override @ json ignore public  string   (  )  {  return get (  meta data key . instance id )  ;   }  ,103,2,id,2,"[7, 90]"
79,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AmazonInfo.java,get metadata,"@ json property ( ""metadata"" )  public  map <  string  string >    (  )  {  return metadata ;   }  ",99,2,get,1,[]
80,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AmazonInfo.java,get metadata,"@ json property ( ""metadata"" )  public  map <  string  string >    (  )  {  return metadata ;   }  ",99,2,metadata,2,"[19, 83]"
81,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AmazonInfo.java,get name,@ override public  name   (  )  {  return  name .  amazon ;   }  ,65,2,get,1,[]
82,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AmazonInfo.java,get name,@ override public  name   (  )  {  return  name .  amazon ;   }  ,65,2,name,2,"[19, 43]"
83,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AmazonInfo.java,geturl,public url   (  string prepend  string append )  throws  malformedurl exception  {  return new url ( aws   metadata   url  +  path  +  name )  ;   }  ,150,1,geturl,1,[]
84,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AmazonInfo.java,hash code,@ override public int   (  )  {  return metadata  !  =  null  ?  metadata . hash code (  )  : 0 ;   }  ,103,2,hash,1,[76]
85,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AmazonInfo.java,hash code,@ override public int   (  )  {  return metadata  !  =  null  ?  metadata . hash code (  )  : 0 ;   }  ,103,2,code,2,[81]
86,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AmazonInfo.java,new builder,public static  builder   (  )  {  return new  builder (  )  ;   }  ,67,2,new,1,[41]
87,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AmazonInfo.java,new builder,public static  builder   (  )  {  return new  builder (  )  ;   }  ,67,2,builder,2,"[15, 46]"
88,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AmazonInfo.java,read,public  string   (  input stream input stream )  throws io exception  {   buffered reader br = new  buffered reader ( new  input stream reader ( input stream )  )  ;   string to return ;  try  {   string line = br . read line (  )  ;  to return = line ;  while  ( line  !  =  null )   {  line = br . read line (  )  ;   }  return to return ;   }  finally  {  br . close (  )  ;   }   }  ,387,1,read,1,"[83, 109, 136, 216, 300]"
89,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AmazonInfo.java,set metadata,public void   (  map <  string  string >  metadata map )  {  this . metadata = metadata map ;   }  ,99,2,set,1,[]
90,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AmazonInfo.java,set metadata,public void   (  map <  string  string >  metadata map )  {  this . metadata = metadata map ;   }  ,99,2,metadata,2,"[42, 68, 79]"
91,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AmazonInfo.java,to string,"@ override public  string   (  )  {  return "" amazon info { ""  +  ""metadata = ""  +  metadata  +  ' } ' ;   }  ",110,2,to,1,[]
92,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AmazonInfo.java,to string,"@ override public  string   (  )  {  return "" amazon info { ""  +  ""metadata = ""  +  metadata  +  ' } ' ;   }  ",110,2,string,2,[19]
93,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AmazonInfo.java,with amazon info config,public  builder   (  amazon info config config )  {  this . config = config ;  return this ;   }  ,98,4,with,1,[]
94,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AmazonInfo.java,with amazon info config,public  builder   (  amazon info config config )  {  this . config = config ;  return this ;   }  ,98,4,amazon,2,[21]
95,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AmazonInfo.java,with amazon info config,public  builder   (  amazon info config config )  {  this . config = config ;  return this ;   }  ,98,4,info,3,[28]
96,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AmazonInfo.java,with amazon info config,public  builder   (  amazon info config config )  {  this . config = config ;  return this ;   }  ,98,4,config,4,"[33, 40, 60, 69]"
97,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\Archaius1AmazonInfoConfig.java, archaius amazon info config,"public   (  string namespace )  {  this . namespace = namespace . ends with ( "" . "" )   ?  namespace : namespace  +  "" . "" ;  this . config instance =  archaius1 utils . init config (  common constants . config   file   name )  ;   }  ",235,4,archaius,1,[152]
98,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\Archaius1AmazonInfoConfig.java, archaius amazon info config,"public   (  string namespace )  {  this . namespace = namespace . ends with ( "" . "" )   ?  namespace : namespace  +  "" . "" ;  this . config instance =  archaius1 utils . init config (  common constants . config   file   name )  ;   }  ",235,4,amazon,2,[]
99,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\Archaius1AmazonInfoConfig.java, archaius amazon info config,"public   (  string namespace )  {  this . namespace = namespace . ends with ( "" . "" )   ?  namespace : namespace  +  "" . "" ;  this . config instance =  archaius1 utils . init config (  common constants . config   file   name )  ;   }  ",235,4,info,3,[]
100,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\Archaius1AmazonInfoConfig.java, archaius amazon info config,"public   (  string namespace )  {  this . namespace = namespace . ends with ( "" . "" )   ?  namespace : namespace  +  "" . "" ;  this . config instance =  archaius1 utils . init config (  common constants . config   file   name )  ;   }  ",235,4,config,4,"[133, 175, 204]"
101,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\Archaius1AmazonInfoConfig.java,get connect timeout,@ override public int   (  )  {  return config instance . get int property ( namespace  +  connect   timeout   key  values . default   connect   timeout )  . get (  )  ;   }  ,175,3,get,1,"[58, 158]"
102,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\Archaius1AmazonInfoConfig.java,get connect timeout,@ override public int   (  )  {  return config instance . get int property ( namespace  +  connect   timeout   key  values . default   connect   timeout )  . get (  )  ;   }  ,175,3,connect,2,"[91, 135]"
103,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\Archaius1AmazonInfoConfig.java,get connect timeout,@ override public int   (  )  {  return config instance . get int property ( namespace  +  connect   timeout   key  values . default   connect   timeout )  . get (  )  ;   }  ,175,3,timeout,3,"[101, 145]"
104,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\Archaius1AmazonInfoConfig.java,get namespace,@ override public  string   (  )  {  return namespace ;   }  ,61,2,get,1,[]
105,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\Archaius1AmazonInfoConfig.java,get namespace,@ override public  string   (  )  {  return namespace ;   }  ,61,2,namespace,2,[44]
106,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\Archaius1AmazonInfoConfig.java,get num retries,@ override public int   (  )  {  return config instance . get int property ( namespace  +  num   retries   key  values . default   num   retries )  . get (  )  ;   }  ,167,3,get,1,"[58, 150]"
107,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\Archaius1AmazonInfoConfig.java,get num retries,@ override public int   (  )  {  return config instance . get int property ( namespace  +  num   retries   key  values . default   num   retries )  . get (  )  ;   }  ,167,3,num,2,"[91, 131]"
108,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\Archaius1AmazonInfoConfig.java,get num retries,@ override public int   (  )  {  return config instance . get int property ( namespace  +  num   retries   key  values . default   num   retries )  . get (  )  ;   }  ,167,3,retries,3,"[97, 137]"
109,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\Archaius1AmazonInfoConfig.java,get read timeout,@ override public int   (  )  {  return config instance . get int property ( namespace  +  read   timeout   key  values . default   read   timeout )  . get (  )  ;   }  ,169,3,get,1,"[58, 152]"
110,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\Archaius1AmazonInfoConfig.java,get read timeout,@ override public int   (  )  {  return config instance . get int property ( namespace  +  read   timeout   key  values . default   read   timeout )  . get (  )  ;   }  ,169,3,read,2,"[91, 132]"
111,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\Archaius1AmazonInfoConfig.java,get read timeout,@ override public int   (  )  {  return config instance . get int property ( namespace  +  read   timeout   key  values . default   read   timeout )  . get (  )  ;   }  ,169,3,timeout,3,"[98, 139]"
112,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\Archaius1AmazonInfoConfig.java,should fail fast on first load,@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  fail   fast   on   first   load   key true )  . get (  )  ;   }  ,164,6,should,1,[]
113,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\Archaius1AmazonInfoConfig.java,should fail fast on first load,@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  fail   fast   on   first   load   key true )  . get (  )  ;   }  ,164,6,fail,2,[99]
114,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\Archaius1AmazonInfoConfig.java,should fail fast on first load,@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  fail   fast   on   first   load   key true )  . get (  )  ;   }  ,164,6,fast,3,[106]
115,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\Archaius1AmazonInfoConfig.java,should fail fast on first load,@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  fail   fast   on   first   load   key true )  . get (  )  ;   }  ,164,6,on,4,"[45, 113]"
116,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\Archaius1AmazonInfoConfig.java,should fail fast on first load,@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  fail   fast   on   first   load   key true )  . get (  )  ;   }  ,164,6,first,5,[118]
117,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\Archaius1AmazonInfoConfig.java,should fail fast on first load,@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  fail   fast   on   first   load   key true )  . get (  )  ;   }  ,164,6,load,6,[126]
118,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\Archaius1AmazonInfoConfig.java,should log amazon metadata errors,@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  log   metadata   error   key false )  . get (  )  ;   }  ,156,5,should,1,[]
119,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\Archaius1AmazonInfoConfig.java,should log amazon metadata errors,@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  log   metadata   error   key false )  . get (  )  ;   }  ,156,5,log,2,[99]
120,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\Archaius1AmazonInfoConfig.java,should log amazon metadata errors,@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  log   metadata   error   key false )  . get (  )  ;   }  ,156,5,amazon,3,[]
121,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\Archaius1AmazonInfoConfig.java,should log amazon metadata errors,@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  log   metadata   error   key false )  . get (  )  ;   }  ,156,5,metadata,4,[105]
122,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\Archaius1AmazonInfoConfig.java,should log amazon metadata errors,@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  log   metadata   error   key false )  . get (  )  ;   }  ,156,5,errors,5,[]
123,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\Archaius1AmazonInfoConfig.java,should validate instance id,@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  should   validate   instance   id   key true )  . get (  )  ;   }  ,166,4,should,1,[99]
124,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\Archaius1AmazonInfoConfig.java,should validate instance id,@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  should   validate   instance   id   key true )  . get (  )  ;   }  ,166,4,validate,2,[108]
125,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\Archaius1AmazonInfoConfig.java,should validate instance id,@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  should   validate   instance   id   key true )  . get (  )  ;   }  ,166,4,instance,3,"[51, 119]"
126,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\Archaius1AmazonInfoConfig.java,should validate instance id,@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  should   validate   instance   id   key true )  . get (  )  ;   }  ,166,4,id,4,"[7, 111, 130]"
127,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\CloudInstanceConfig.java, cloud instance config,  (  string namespace  amazon info config amazon info config  amazon info initial info boolean eager init )  {  super ( namespace )  ;  this . amazon info config = amazon info config ;  if  ( eager init )   {   refreshable amazon info provider .  fallback address provider fallback address provider = new  refreshable amazon info provider .  fallback address provider (  )  {  @ override public  string get fallback ip (  )  {  return  cloud instance config . super . get ip address (  )  ;   }  @ override public  string get fallback hostname (  )  {  return  cloud instance config . super . get host name ( false )  ;   }   }   ;  this . amazon info holder = new  refreshable amazon info provider ( amazon info config fallback address provider )  ;   }  else  {  this . amazon info holder = new  refreshable amazon info provider ( initial info amazon info config )  ;   }   }  ,879,3,cloud,1,"[436, 561]"
128,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\CloudInstanceConfig.java, cloud instance config,  (  string namespace  amazon info config amazon info config  amazon info initial info boolean eager init )  {  super ( namespace )  ;  this . amazon info config = amazon info config ;  if  ( eager init )   {   refreshable amazon info provider .  fallback address provider fallback address provider = new  refreshable amazon info provider .  fallback address provider (  )  {  @ override public  string get fallback ip (  )  {  return  cloud instance config . super . get ip address (  )  ;   }  @ override public  string get fallback hostname (  )  {  return  cloud instance config . super . get host name ( false )  ;   }   }   ;  this . amazon info holder = new  refreshable amazon info provider ( amazon info config fallback address provider )  ;   }  else  {  this . amazon info holder = new  refreshable amazon info provider ( initial info amazon info config )  ;   }   }  ,879,3,instance,2,"[442, 567]"
129,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\CloudInstanceConfig.java, cloud instance config,  (  string namespace  amazon info config amazon info config  amazon info initial info boolean eager init )  {  super ( namespace )  ;  this . amazon info config = amazon info config ;  if  ( eager init )   {   refreshable amazon info provider .  fallback address provider fallback address provider = new  refreshable amazon info provider .  fallback address provider (  )  {  @ override public  string get fallback ip (  )  {  return  cloud instance config . super . get ip address (  )  ;   }  @ override public  string get fallback hostname (  )  {  return  cloud instance config . super . get host name ( false )  ;   }   }   ;  this . amazon info holder = new  refreshable amazon info provider ( amazon info config fallback address provider )  ;   }  else  {  this . amazon info holder = new  refreshable amazon info provider ( initial info amazon info config )  ;   }   }  ,879,3,config,3,"[35, 54, 155, 176, 451, 576, 713, 858]"
130,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\CloudInstanceConfig.java,get data center info,@ override public  data center info   (  )  {  return amazon info holder . get (  )  ;   }  ,92,4,get,1,[75]
131,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\CloudInstanceConfig.java,get data center info,@ override public  data center info   (  )  {  return amazon info holder . get (  )  ;   }  ,92,4,data,2,[19]
132,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\CloudInstanceConfig.java,get data center info,@ override public  data center info   (  )  {  return amazon info holder . get (  )  ;   }  ,92,4,center,3,[24]
133,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\CloudInstanceConfig.java,get data center info,@ override public  data center info   (  )  {  return amazon info holder . get (  )  ;   }  ,92,4,info,4,"[31, 61]"
134,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\CloudInstanceConfig.java,get default address resolution order,@ override public  string[]   (  )  {   string[] order = super . get default address resolution order (  )  ;  return  ( order . length  =  =  0 )   ?  default   aws   address   resolution   order : order ;   }  ,212,5,get,1,[65]
135,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\CloudInstanceConfig.java,get default address resolution order,@ override public  string[]   (  )  {   string[] order = super . get default address resolution order (  )  ;  return  ( order . length  =  =  0 )   ?  default   aws   address   resolution   order : order ;   }  ,212,5,default,2,"[69, 152]"
136,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\CloudInstanceConfig.java,get default address resolution order,@ override public  string[]   (  )  {   string[] order = super . get default address resolution order (  )  ;  return  ( order . length  =  =  0 )   ?  default   aws   address   resolution   order : order ;   }  ,212,5,address,3,"[77, 168]"
137,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\CloudInstanceConfig.java,get default address resolution order,@ override public  string[]   (  )  {   string[] order = super . get default address resolution order (  )  ;  return  ( order . length  =  =  0 )   ?  default   aws   address   resolution   order : order ;   }  ,212,5,resolution,4,"[85, 178]"
138,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\CloudInstanceConfig.java,get default address resolution order,@ override public  string[]   (  )  {   string[] order = super . get default address resolution order (  )  ;  return  ( order . length  =  =  0 )   ?  default   aws   address   resolution   order : order ;   }  ,212,5,order,5,"[49, 96, 121, 191, 199]"
139,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\CloudInstanceConfig.java,get fallback hostname,@ override public  string   (  )  {  return  cloud instance config . super . get host name ( false )  ;   }  ,109,3,get,1,[77]
140,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\CloudInstanceConfig.java,get fallback hostname,@ override public  string   (  )  {  return  cloud instance config . super . get host name ( false )  ;   }  ,109,3,fallback,2,[]
141,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\CloudInstanceConfig.java,get fallback hostname,@ override public  string   (  )  {  return  cloud instance config . super . get host name ( false )  ;   }  ,109,3,hostname,3,[]
142,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\CloudInstanceConfig.java,get fallback ip,@ override public  string   (  )  {  return  cloud instance config . super . get ip address (  )  ;   }  ,105,3,get,1,[77]
143,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\CloudInstanceConfig.java,get fallback ip,@ override public  string   (  )  {  return  cloud instance config . super . get ip address (  )  ;   }  ,105,3,fallback,2,[]
144,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\CloudInstanceConfig.java,get fallback ip,@ override public  string   (  )  {  return  cloud instance config . super . get ip address (  )  ;   }  ,105,3,ip,3,[81]
145,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\CloudInstanceConfig.java,get host name,@ override public  string   ( boolean refresh )  {  if  ( refresh )   {  amazon info holder . refresh (  )  ;   }  return amazon info holder . get (  )  . get (  meta data key . public hostname )  ;   }  ,204,3,get,1,"[143, 155]"
146,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\CloudInstanceConfig.java,get host name,@ override public  string   ( boolean refresh )  {  if  ( refresh )   {  amazon info holder . refresh (  )  ;   }  return amazon info holder . get (  )  . get (  meta data key . public hostname )  ;   }  ,204,3,host,2,[185]
147,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\CloudInstanceConfig.java,get host name,@ override public  string   ( boolean refresh )  {  if  ( refresh )   {  amazon info holder . refresh (  )  ;   }  return amazon info holder . get (  )  . get (  meta data key . public hostname )  ;   }  ,204,3,name,3,[189]
148,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\CloudInstanceConfig.java,get ip address,@ override public  string   (  )  {   string ip addr = amazon info holder . get (  )  . get (  meta data key . local ipv4 )  ;  return ip addr  =  =  null  ?  super . get ip address (  )  : ip addr ;   }  ,205,3,get,1,"[76, 88, 167]"
149,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\CloudInstanceConfig.java,get ip address,@ override public  string   (  )  {   string ip addr = amazon info holder . get (  )  . get (  meta data key . local ipv4 )  ;  return ip addr  =  =  null  ?  super . get ip address (  )  : ip addr ;   }  ,205,3,ip,2,"[45, 117, 135, 171, 190]"
150,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\CloudInstanceConfig.java,get ip address,@ override public  string   (  )  {   string ip addr = amazon info holder . get (  )  . get (  meta data key . local ipv4 )  ;  return ip addr  =  =  null  ?  super . get ip address (  )  : ip addr ;   }  ,205,3,address,3,[174]
151,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\CloudInstanceConfig.java,refresh amazon info,@ deprecated public synchronized void   (  )  {  amazon info holder . refresh (  )  ;   }  ,91,3,refresh,1,[70]
152,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\CloudInstanceConfig.java,refresh amazon info,@ deprecated public synchronized void   (  )  {  amazon info holder . refresh (  )  ;   }  ,91,3,amazon,2,[49]
153,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\CloudInstanceConfig.java,refresh amazon info,@ deprecated public synchronized void   (  )  {  amazon info holder . refresh (  )  ;   }  ,91,3,info,3,[56]
154,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\CloudInstanceConfig.java,resolve default address,@ override public  string   ( boolean refresh )  {   string result = get host name ( refresh )  ;  for  (   string name : get default address resolution order (  )  )   {  try  {   amazon info .  meta data key key =  amazon info .  meta data key . value o,255,3,resolve,1,[]
155,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\CloudInstanceConfig.java,resolve default address,@ override public  string   ( boolean refresh )  {   string result = get host name ( refresh )  ;  for  (   string name : get default address resolution order (  )  )   {  try  {   amazon info .  meta data key key =  amazon info .  meta data key . value o,255,3,default,2,[126]
156,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\CloudInstanceConfig.java,resolve default address,@ override public  string   ( boolean refresh )  {   string result = get host name ( refresh )  ;  for  (   string name : get default address resolution order (  )  )   {  try  {   amazon info .  meta data key key =  amazon info .  meta data key . value o,255,3,address,3,[134]
157,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\CloudInstanceConfig.java,should update,@ deprecated static boolean   (  amazon info new info  amazon info old info )  {  return  refreshable amazon info provider . should update ( new info old info )  ;   }  ,169,2,should,1,[125]
158,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\CloudInstanceConfig.java,should update,@ deprecated static boolean   (  amazon info new info  amazon info old info )  {  return  refreshable amazon info provider . should update ( new info old info )  ;   }  ,169,2,update,2,[132]
159,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\ApplicationInfoManager.java, application info manager,@ deprecated public   (  eureka instance config config )  {  this ( config  (  optional args ) null )  ;   }  ,110,3,application,1,[]
160,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\ApplicationInfoManager.java, application info manager,@ deprecated public   (  eureka instance config config )  {  this ( config  (  optional args ) null )  ;   }  ,110,3,info,2,[]
161,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\ApplicationInfoManager.java, application info manager,@ deprecated public   (  eureka instance config config )  {  this ( config  (  optional args ) null )  ;   }  ,110,3,manager,3,[]
162,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\ApplicationInfoManager.java,get eureka instance config,public  eureka instance config   (  )  {  return config ;   }  ,63,4,get,1,[]
163,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\ApplicationInfoManager.java,get eureka instance config,public  eureka instance config   (  )  {  return config ;   }  ,63,4,eureka,2,[8]
164,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\ApplicationInfoManager.java,get eureka instance config,public  eureka instance config   (  )  {  return config ;   }  ,63,4,instance,3,[15]
165,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\ApplicationInfoManager.java,get eureka instance config,public  eureka instance config   (  )  {  return config ;   }  ,63,4,config,4,"[24, 49]"
166,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\EurekaAccept.java,from string,public static  eureka accept   (  string name )  {  if  ( name  =  =  null || name . is empty (  )  )   {  return full ;   }  try  {  return  eureka accept . value of ( name . to lower case (  )  )  ;   }  catch  (   exception e )   {  return full ;   }   }  ,259,2,from,1,[]
167,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\EurekaAccept.java,from string,public static  eureka accept   (  string name )  {  if  ( name  =  =  null || name . is empty (  )  )   {  return full ;   }  try  {  return  eureka accept . value of ( name . to lower case (  )  )  ;   }  catch  (   exception e )   {  return full ;   }   }  ,259,2,string,2,[34]
168,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\EurekaAccept.java,get client accept,public static  eureka accept   (  decoder wrapper decoder wrapper )  {  return decoder name to accept map . get ( decoder wrapper . codec name (  )  )  ;   }  ,159,3,get,1,[108]
169,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\EurekaAccept.java,get client accept,public static  eureka accept   (  decoder wrapper decoder wrapper )  {  return decoder name to accept map . get ( decoder wrapper . codec name (  )  )  ;   }  ,159,3,client,2,[]
170,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\EurekaAccept.java,get client accept,public static  eureka accept   (  decoder wrapper decoder wrapper )  {  return decoder name to accept map . get ( decoder wrapper . codec name (  )  )  ;   }  ,159,3,accept,3,"[22, 95]"
171,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\EurekaClientIdentity.java, eureka client identity,public   (  string id  string client name )  {  this . id = id ;  this . client name = client name ;   }  ,106,3,eureka,1,[]
172,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\EurekaClientIdentity.java, eureka client identity,public   (  string id  string client name )  {  this . id = id ;  this . client name = client name ;   }  ,106,3,client,2,"[30, 73, 87]"
173,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\EurekaClientIdentity.java, eureka client identity,public   (  string id  string client name )  {  this . id = id ;  this . client name = client name ;   }  ,106,3,identity,3,[]
174,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\EurekaClientIdentity.java,get id,@ override public  string   (  )  {  return id ;   }  ,54,2,get,1,[]
175,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\EurekaClientIdentity.java,get id,@ override public  string   (  )  {  return id ;   }  ,54,2,id,2,"[7, 44]"
176,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\EurekaClientIdentity.java,get name,@ override public  string   (  )  {  return client name ;   }  ,63,2,get,1,[]
177,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\EurekaClientIdentity.java,get name,@ override public  string   (  )  {  return client name ;   }  ,63,2,name,2,[51]
178,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\EurekaClientIdentity.java,get version,@ override public  string   (  )  {  return client version ;   }  ,66,2,get,1,[]
179,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\EurekaClientIdentity.java,get version,@ override public  string   (  )  {  return client version ;   }  ,66,2,version,2,[51]
180,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\HealthCheckCallbackToHandlerBridge.java, health check callback to handler bridge,public   (  health check callback callback )  {  this . callback = callback ;   }  ,83,6,health,1,[12]
181,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\HealthCheckCallbackToHandlerBridge.java, health check callback to handler bridge,public   (  health check callback callback )  {  this . callback = callback ;   }  ,83,6,check,2,[19]
182,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\HealthCheckCallbackToHandlerBridge.java, health check callback to handler bridge,public   (  health check callback callback )  {  this . callback = callback ;   }  ,83,6,callback,3,"[25, 34, 56, 67]"
183,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\HealthCheckCallbackToHandlerBridge.java, health check callback to handler bridge,public   (  health check callback callback )  {  this . callback = callback ;   }  ,83,6,to,4,[]
184,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\HealthCheckCallbackToHandlerBridge.java, health check callback to handler bridge,public   (  health check callback callback )  {  this . callback = callback ;   }  ,83,6,handler,5,[]
185,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\HealthCheckCallbackToHandlerBridge.java, health check callback to handler bridge,public   (  health check callback callback )  {  this . callback = callback ;   }  ,83,6,bridge,6,[]
186,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\HealthCheckCallbackToHandlerBridge.java,get status,@ override public  instance info .  instance status   (  instance info .  instance status current status )  {  if  ( null  =  =  callback ||  instance info .  instance status . starting  =  =  current status ||  instance info .  instance status . out   of,255,2,get,1,[]
187,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\HealthCheckCallbackToHandlerBridge.java,get status,@ override public  instance info .  instance status   (  instance info .  instance status current status )  {  if  ( null  =  =  callback ||  instance info .  instance status . starting  =  =  current status ||  instance info .  instance status . out   of,255,2,status,2,"[45, 83, 98, 168, 201, 238]"
188,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\HealthCheckResource.java,do health check,@get public  response   (  )  {  try  {   instance info my info =  application info manager . get instance (  )  . get info (  )  ;  switch  ( my info . get status (  )  )   {  case up: return  response . status (  status . ok )  . build (  )  ;  case sta,255,3,do,1,[]
189,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\HealthCheckResource.java,do health check,@get public  response   (  )  {  try  {   instance info my info =  application info manager . get instance (  )  . get info (  )  ;  switch  ( my info . get status (  )  )   {  case up: return  response . status (  status . ok )  . build (  )  ;  case sta,255,3,health,2,[]
190,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\HealthCheckResource.java,do health check,@get public  response   (  )  {  try  {   instance info my info =  application info manager . get instance (  )  . get info (  )  ;  switch  ( my info . get status (  )  )   {  case up: return  response . status (  status . ok )  . build (  )  ;  case sta,255,3,check,3,[]
191,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\LeaseInfo.java, builder,private   (  )  {  result = new  lease info (  )  ;   }  ,57,1,builder,1,[]
192,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\LeaseInfo.java, lease info,"@ json creator public   ( @ json property ( ""renewal interval in secs"" )  int renewal interval in secs @ json property ( ""duration in secs"" )  int duration in secs @ json property ( ""registration timestamp"" )  long registration timestamp @ json property (",255,2,lease,1,[]
193,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\LeaseInfo.java, lease info,"@ json creator public   ( @ json property ( ""renewal interval in secs"" )  int renewal interval in secs @ json property ( ""duration in secs"" )  int duration in secs @ json property ( ""registration timestamp"" )  long registration timestamp @ json property (",255,2,info,2,[]
194,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\LeaseInfo.java,build,public  lease info   (  )  {  return result ;   }  ,51,1,build,1,[]
195,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\LeaseInfo.java,get duration in secs,public int   (  )  {  return duration in secs ;   }  ,53,4,get,1,[]
196,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\LeaseInfo.java,get duration in secs,public int   (  )  {  return duration in secs ;   }  ,53,4,duration,2,[29]
197,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\LeaseInfo.java,get duration in secs,public int   (  )  {  return duration in secs ;   }  ,53,4,in,3,"[7, 38]"
198,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\LeaseInfo.java,get duration in secs,public int   (  )  {  return duration in secs ;   }  ,53,4,secs,4,[41]
199,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\LeaseInfo.java,get eviction timestamp,public long   (  )  {  return eviction timestamp ;   }  ,56,3,get,1,[]
200,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\LeaseInfo.java,get eviction timestamp,public long   (  )  {  return eviction timestamp ;   }  ,56,3,eviction,2,[30]
201,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\LeaseInfo.java,get eviction timestamp,public long   (  )  {  return eviction timestamp ;   }  ,56,3,timestamp,3,[39]
202,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\LeaseInfo.java,get registration timestamp,public long   (  )  {  return registration timestamp ;   }  ,60,3,get,1,[]
203,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\LeaseInfo.java,get registration timestamp,public long   (  )  {  return registration timestamp ;   }  ,60,3,registration,2,[30]
204,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\LeaseInfo.java,get registration timestamp,public long   (  )  {  return registration timestamp ;   }  ,60,3,timestamp,3,[43]
205,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\LeaseInfo.java,get renewal interval in secs,public int   (  )  {  return renewal interval in secs ;   }  ,61,5,get,1,[]
206,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\LeaseInfo.java,get renewal interval in secs,public int   (  )  {  return renewal interval in secs ;   }  ,61,5,renewal,2,[29]
207,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\LeaseInfo.java,get renewal interval in secs,public int   (  )  {  return renewal interval in secs ;   }  ,61,5,interval,3,[37]
208,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\LeaseInfo.java,get renewal interval in secs,public int   (  )  {  return renewal interval in secs ;   }  ,61,5,in,4,"[7, 37, 46]"
209,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\LeaseInfo.java,get renewal interval in secs,public int   (  )  {  return renewal interval in secs ;   }  ,61,5,secs,5,[49]
210,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\LeaseInfo.java,get renewal timestamp,"@ json property ( ""last renewal timestamp"" )  public long   (  )  {  return last renewal timestamp ;   }  ",106,3,get,1,[]
211,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\LeaseInfo.java,get renewal timestamp,"@ json property ( ""last renewal timestamp"" )  public long   (  )  {  return last renewal timestamp ;   }  ",106,3,renewal,2,"[24, 81]"
212,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\LeaseInfo.java,get renewal timestamp,"@ json property ( ""last renewal timestamp"" )  public long   (  )  {  return last renewal timestamp ;   }  ",106,3,timestamp,3,"[32, 89]"
213,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\LeaseInfo.java,get service up timestamp,public long   (  )  {  return service up timestamp ;   }  ,58,4,get,1,[]
214,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\LeaseInfo.java,get service up timestamp,public long   (  )  {  return service up timestamp ;   }  ,58,4,service,2,[30]
215,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\LeaseInfo.java,get service up timestamp,public long   (  )  {  return service up timestamp ;   }  ,58,4,up,3,[38]
216,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\LeaseInfo.java,get service up timestamp,public long   (  )  {  return service up timestamp ;   }  ,58,4,timestamp,4,[41]
217,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\LeaseInfo.java,new builder,public static  builder   (  )  {  return new  builder (  )  ;   }  ,67,2,new,1,[41]
218,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\LeaseInfo.java,new builder,public static  builder   (  )  {  return new  builder (  )  ;   }  ,67,2,builder,2,"[15, 46]"
219,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\LeaseInfo.java,set duration in secs,public  builder   ( int d )  {  if  ( d  <  =  0 )   {  result . duration in secs = default   lease   duration ;   }  else  {  result . duration in secs = d ;   }  return this ;   }  ,183,4,set,1,[]
220,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\LeaseInfo.java,set duration in secs,public  builder   ( int d )  {  if  ( d  <  =  0 )   {  result . duration in secs = default   lease   duration ;   }  else  {  result . duration in secs = d ;   }  return this ;   }  ,183,4,duration,2,"[65, 102, 136]"
221,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\LeaseInfo.java,set duration in secs,public  builder   ( int d )  {  if  ( d  <  =  0 )   {  result . duration in secs = default   lease   duration ;   }  else  {  result . duration in secs = d ;   }  return this ;   }  ,183,4,in,3,"[20, 74, 145]"
222,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\LeaseInfo.java,set duration in secs,public  builder   ( int d )  {  if  ( d  <  =  0 )   {  result . duration in secs = default   lease   duration ;   }  else  {  result . duration in secs = d ;   }  return this ;   }  ,183,4,secs,4,"[77, 148]"
223,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\LeaseInfo.java,set eviction timestamp,public  builder   ( long ts )  {  result . eviction timestamp = ts ;  return this ;   }  ,89,3,set,1,[]
224,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\LeaseInfo.java,set eviction timestamp,public  builder   ( long ts )  {  result . eviction timestamp = ts ;  return this ;   }  ,89,3,eviction,2,[43]
225,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\LeaseInfo.java,set eviction timestamp,public  builder   ( long ts )  {  result . eviction timestamp = ts ;  return this ;   }  ,89,3,timestamp,3,[52]
226,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\LeaseInfo.java,set registration timestamp,public  builder   ( long ts )  {  result . registration timestamp = ts ;  return this ;   }  ,93,3,set,1,[]
227,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\LeaseInfo.java,set registration timestamp,public  builder   ( long ts )  {  result . registration timestamp = ts ;  return this ;   }  ,93,3,registration,2,[43]
228,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\LeaseInfo.java,set registration timestamp,public  builder   ( long ts )  {  result . registration timestamp = ts ;  return this ;   }  ,93,3,timestamp,3,[56]
229,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\LeaseInfo.java,set renewal interval in secs,public  builder   ( int i )  {  if  ( i  <  =  0 )   {  result . renewal interval in secs = default   lease   renewal   interval ;   }  else  {  result . renewal interval in secs = i ;   }  return this ;   }  ,209,5,set,1,[]
230,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\LeaseInfo.java,set renewal interval in secs,public  builder   ( int i )  {  if  ( i  <  =  0 )   {  result . renewal interval in secs = default   lease   renewal   interval ;   }  else  {  result . renewal interval in secs = i ;   }  return this ;   }  ,209,5,renewal,2,"[65, 110, 154]"
231,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\LeaseInfo.java,set renewal interval in secs,public  builder   ( int i )  {  if  ( i  <  =  0 )   {  result . renewal interval in secs = default   lease   renewal   interval ;   }  else  {  result . renewal interval in secs = i ;   }  return this ;   }  ,209,5,interval,3,"[73, 120, 162]"
232,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\LeaseInfo.java,set renewal interval in secs,public  builder   ( int i )  {  if  ( i  <  =  0 )   {  result . renewal interval in secs = default   lease   renewal   interval ;   }  else  {  result . renewal interval in secs = i ;   }  return this ;   }  ,209,5,in,4,"[20, 73, 82, 120, 162, 171]"
233,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\LeaseInfo.java,set renewal interval in secs,public  builder   ( int i )  {  if  ( i  <  =  0 )   {  result . renewal interval in secs = default   lease   renewal   interval ;   }  else  {  result . renewal interval in secs = i ;   }  return this ;   }  ,209,5,secs,5,"[85, 174]"
234,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\LeaseInfo.java,set renewal timestamp,public  builder   ( long ts )  {  result . last renewal timestamp = ts ;  return this ;   }  ,93,3,set,1,[]
235,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\LeaseInfo.java,set renewal timestamp,public  builder   ( long ts )  {  result . last renewal timestamp = ts ;  return this ;   }  ,93,3,renewal,2,[48]
236,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\LeaseInfo.java,set renewal timestamp,public  builder   ( long ts )  {  result . last renewal timestamp = ts ;  return this ;   }  ,93,3,timestamp,3,[56]
237,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\LeaseInfo.java,set service up timestamp,public  builder   ( long ts )  {  result . service up timestamp = ts ;  return this ;   }  ,91,4,set,1,[]
238,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\LeaseInfo.java,set service up timestamp,public  builder   ( long ts )  {  result . service up timestamp = ts ;  return this ;   }  ,91,4,service,2,[43]
239,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\LeaseInfo.java,set service up timestamp,public  builder   ( long ts )  {  result . service up timestamp = ts ;  return this ;   }  ,91,4,up,3,[51]
240,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\LeaseInfo.java,set service up timestamp,public  builder   ( long ts )  {  result . service up timestamp = ts ;  return this ;   }  ,91,4,timestamp,4,[54]
241,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\MyDataCenterInstanceConfig.java, my data center instance config,public   (  string namespace  data center info data center info )  {  super ( namespace data center info )  ;   }  ,115,5,my,1,[]
242,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\MyDataCenterInstanceConfig.java, my data center instance config,public   (  string namespace  data center info data center info )  {  super ( namespace data center info )  ;   }  ,115,5,data,2,"[30, 47, 88]"
243,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\MyDataCenterInstanceConfig.java, my data center instance config,public   (  string namespace  data center info data center info )  {  super ( namespace data center info )  ;   }  ,115,5,center,3,"[35, 52, 93]"
244,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\MyDataCenterInstanceConfig.java, my data center instance config,public   (  string namespace  data center info data center info )  {  super ( namespace data center info )  ;   }  ,115,5,instance,4,[]
245,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\MyDataCenterInstanceConfig.java, my data center instance config,public   (  string namespace  data center info data center info )  {  super ( namespace data center info )  ;   }  ,115,5,config,5,[]
246,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\MyDataCenterInfo.java, my data center info,"@ json creator public   ( @ json property ( ""name"" )   name name )  {  this . name = name ;   }  ",97,4,my,1,[]
247,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\MyDataCenterInfo.java, my data center info,"@ json creator public   ( @ json property ( ""name"" )   name name )  {  this . name = name ;   }  ",97,4,data,2,[]
248,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\MyDataCenterInfo.java, my data center info,"@ json creator public   ( @ json property ( ""name"" )   name name )  {  this . name = name ;   }  ",97,4,center,3,[]
249,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\MyDataCenterInfo.java, my data center info,"@ json creator public   ( @ json property ( ""name"" )   name name )  {  this . name = name ;   }  ",97,4,info,4,[]
250,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\MyDataCenterInfo.java,get name,@ override public  name   (  )  {  return name ;   }  ,54,2,get,1,[]
251,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\MyDataCenterInfo.java,get name,@ override public  name   (  )  {  return name ;   }  ,54,2,name,2,"[19, 42]"
252,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java, builder,public   (  instance info instance info )  {  this ( instance info  lazy holder . default   vip   address   resolver null )  ;   }  ,132,1,builder,1,[]
253,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java, instance info,public   (  instance info ii )  {  this . instance id = ii . instance id ;  this . app name = ii . app name ;  this . app group name = ii . app group name ;  this . ip addr = ii . ip addr ;  this . sid = ii . sid ;  this . port = ii . port ;  this . secure port = ii . secure port ;  this . home page url = ii . home page url ;  this . status page url = ii . status page url ;  this . health check url = ii . health check url ;  this . secure health check url = ii . secure health check url ;  this . vip address = ii . vip address ;  this . secure vip address = ii . secure vip address ;  this . status page relative url = ii . status page relative url ;  this . status page explicit url = ii . status page explicit url ;  this . health check relative url = ii . health check relative url ;  this . health check secure explicit url = ii . health check secure explicit url ;  this . vip address unresolved = ii . vip address unresolved ;  this . secure vip address unresolved = ii . secure vip address unresolved ;  this . health check explicit url = ii . health check explicit url ;  this . country id = ii . country id ;  this . is secure port enabled = ii . is secure port enabled ;  this . is unsecure port enabled = ii . is unsecure port enabled ;  this . data center info = ii . data center info ;  this . host name = ii . host name ;  this . status = ii . status ;  this . overriddenstatus = ii . overriddenstatus ;  this . is instance info dirty = ii . is instance info dirty ;  this . lease info = ii . lease info ;  this . is coordinating discovery server = ii . is coordinating discovery server ;  this . metadata = ii . metadata ;  this . last updated timestamp = ii . last updated timestamp ;  this . last dirty timestamp = ii . last dirty timestamp ;  this . action type = ii . action type ;  this . asg name = ii . asg name ;  this . version = ii . version ;   }  ,1879,2,instance,1,"[12, 42, 61, 1434, 1464]"
254,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java, instance info,public   (  instance info ii )  {  this . instance id = ii . instance id ;  this . app name = ii . app name ;  this . app group name = ii . app group name ;  this . ip addr = ii . ip addr ;  this . sid = ii . sid ;  this . port = ii . port ;  this . secure port = ii . secure port ;  this . home page url = ii . home page url ;  this . status page url = ii . status page url ;  this . health check url = ii . health check url ;  this . secure health check url = ii . secure health check url ;  this . vip address = ii . vip address ;  this . secure vip address = ii . secure vip address ;  this . status page relative url = ii . status page relative url ;  this . status page explicit url = ii . status page explicit url ;  this . health check relative url = ii . health check relative url ;  this . health check secure explicit url = ii . health check secure explicit url ;  this . vip address unresolved = ii . vip address unresolved ;  this . secure vip address unresolved = ii . secure vip address unresolved ;  this . health check explicit url = ii . health check explicit url ;  this . country id = ii . country id ;  this . is secure port enabled = ii . is secure port enabled ;  this . is unsecure port enabled = ii . is unsecure port enabled ;  this . data center info = ii . data center info ;  this . host name = ii . host name ;  this . status = ii . status ;  this . overriddenstatus = ii . overriddenstatus ;  this . is instance info dirty = ii . is instance info dirty ;  this . lease info = ii . lease info ;  this . is coordinating discovery server = ii . is coordinating discovery server ;  this . metadata = ii . metadata ;  this . last updated timestamp = ii . last updated timestamp ;  this . last dirty timestamp = ii . last dirty timestamp ;  this . action type = ii . action type ;  this . asg name = ii . asg name ;  this . version = ii . version ;   }  ,1879,2,info,2,"[21, 1273, 1297, 1443, 1473, 1500, 1518]"
255,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java, port wrapper,"@ json creator public   ( @ json property ( ""@enabled"" )  boolean enabled @ json property ( ""$"" )  int port )  {  this . enabled = enabled ;  this . port = port ;   }  ",168,2,port,1,"[103, 149, 156]"
256,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java, port wrapper,"@ json creator public   ( @ json property ( ""@enabled"" )  boolean enabled @ json property ( ""$"" )  int port )  {  this . enabled = enabled ;  this . port = port ;   }  ",168,2,wrapper,2,[]
257,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,add,public  builder   (  string key  string val )  {  result . metadata . put ( key val )  ;  return this ;   }  ,109,1,add,1,[]
258,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,build,"public  instance info   (  )  {  if  (  ! is initialized (  )  )   {  throw new  illegal state exception ( ""name is required ! "" )  ;   }  return result ;   }  ",160,1,build,1,[]
259,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,enable port,public  builder   (  port type type boolean is enabled )  {  if  ( type  =  =   port type . secure )   {  result . is secure port enabled = is enabled ;   }  else  {  result . is unsecure port enabled = is enabled ;   }  return this ;   }  ,240,2,enable,1,"[47, 130, 143, 193, 206]"
260,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,enable port,public  builder   (  port type type boolean is enabled )  {  if  ( type  =  =   port type . secure )   {  result . is secure port enabled = is enabled ;   }  else  {  result . is unsecure port enabled = is enabled ;   }  return this ;   }  ,240,2,port,2,"[21, 80, 125, 188]"
261,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,equals,@ override public boolean   (  object obj )  {  if  ( this  =  =  obj )   {  return true ;   }  if  ( obj  =  =  null )   {  return false ;   }  if  ( get class (  )   !  =  obj . get class (  )  )   {  return false ;   }   instance info other =  (  insta,255,1,equals,1,[]
262,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,getasg name,"@ json property ( ""asg name"" )  public  string   (  )  {  return this . asg name ;   }  ",88,2,getasg,1,[]
263,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,getasg name,"@ json property ( ""asg name"" )  public  string   (  )  {  return this . asg name ;   }  ",88,2,name,2,"[23, 76]"
264,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,get action type,public  action type   (  )  {  return action type ;   }  ,57,3,get,1,[]
265,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,get action type,public  action type   (  )  {  return action type ;   }  ,57,3,action,2,"[8, 38]"
266,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,get action type,public  action type   (  )  {  return action type ;   }  ,57,3,type,3,"[15, 45]"
267,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,get app group name,public  string   (  )  {  return app group name ;   }  ,55,4,get,1,[]
268,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,get app group name,public  string   (  )  {  return app group name ;   }  ,55,4,app,2,[33]
269,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,get app group name,public  string   (  )  {  return app group name ;   }  ,55,4,group,3,[37]
270,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,get app group name,public  string   (  )  {  return app group name ;   }  ,55,4,name,4,[43]
271,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,get app name,"@ json property ( ""app"" )  public  string   (  )  {  return app name ;   }  ",76,3,get,1,[]
272,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,get app name,"@ json property ( ""app"" )  public  string   (  )  {  return app name ;   }  ",76,3,app,2,"[19, 60]"
273,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,get app name,"@ json property ( ""app"" )  public  string   (  )  {  return app name ;   }  ",76,3,name,3,[64]
274,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,get country id,@ deprecated public int   (  )  {  return country id ;   }  ,60,3,get,1,[]
275,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,get country id,@ deprecated public int   (  )  {  return country id ;   }  ,60,3,country,2,[42]
276,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,get country id,@ deprecated public int   (  )  {  return country id ;   }  ,60,3,id,3,[50]
277,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,get data center info,public  data center info   (  )  {  return data center info ;   }  ,67,4,get,1,[]
278,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,get data center info,public  data center info   (  )  {  return data center info ;   }  ,67,4,data,2,"[8, 43]"
279,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,get data center info,public  data center info   (  )  {  return data center info ;   }  ,67,4,center,3,"[13, 48]"
280,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,get data center info,public  data center info   (  )  {  return data center info ;   }  ,67,4,info,4,"[20, 55]"
281,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,get health check url,public  string   (  )  {  return health check url ;   }  ,57,4,get,1,[]
282,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,get health check url,public  string   (  )  {  return health check url ;   }  ,57,4,health,2,[33]
283,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,get health check url,public  string   (  )  {  return health check url ;   }  ,57,4,check,3,[40]
284,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,get health check url,public  string   (  )  {  return health check url ;   }  ,57,4,url,4,[46]
285,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,get health check urls,@ json ignore public  set <  string >    (  )  {   set <  string >  health check url set = new  linked hash set <  string >  (  )  ;  if  ( this . is unsecure port enabled && health check url  !  =  null &&  ! health check url . is empty (  )  )   {  heal,255,4,get,1,[]
286,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,get health check urls,@ json ignore public  set <  string >    (  )  {   set <  string >  health check url set = new  linked hash set <  string >  (  )  ;  if  ( this . is unsecure port enabled && health check url  !  =  null &&  ! health check url . is empty (  )  )   {  heal,255,4,health,2,"[68, 175, 210]"
287,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,get health check urls,@ json ignore public  set <  string >    (  )  {   set <  string >  health check url set = new  linked hash set <  string >  (  )  ;  if  ( this . is unsecure port enabled && health check url  !  =  null &&  ! health check url . is empty (  )  )   {  heal,255,4,check,3,"[75, 182, 217]"
288,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,get health check urls,@ json ignore public  set <  string >    (  )  {   set <  string >  health check url set = new  linked hash set <  string >  (  )  ;  if  ( this . is unsecure port enabled && health check url  !  =  null &&  ! health check url . is empty (  )  )   {  heal,255,4,urls,4,[]
289,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,get home page url,public  string   (  )  {  return home page url ;   }  ,54,4,get,1,[]
290,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,get home page url,public  string   (  )  {  return home page url ;   }  ,54,4,home,2,[33]
291,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,get home page url,public  string   (  )  {  return home page url ;   }  ,54,4,page,3,[38]
292,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,get home page url,public  string   (  )  {  return home page url ;   }  ,54,4,url,4,[43]
293,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,get host name,public  string   (  )  {  return host name ;   }  ,50,3,get,1,[]
294,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,get host name,public  string   (  )  {  return host name ;   }  ,50,3,host,2,[33]
295,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,get host name,public  string   (  )  {  return host name ;   }  ,50,3,name,3,[38]
296,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,getip addr,"@ json property ( ""ip addr"" )  public  string   (  )  {  return ip addr ;   }  ",79,2,getip,1,[]
297,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,getip addr,"@ json property ( ""ip addr"" )  public  string   (  )  {  return ip addr ;   }  ",79,2,addr,2,"[22, 67]"
298,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,get id,@ json ignore public  string   (  )  {  if  ( instance id  !  =  null &&  ! instance id . is empty (  )  )   {  return instance id ;   }  else if  ( data center info instanceof  unique identifier )   {   string unique id =  (  (  unique identifier ) data ,255,2,get,1,[]
299,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,get id,@ json ignore public  string   (  )  {  if  ( instance id  !  =  null &&  ! instance id . is empty (  )  )   {  return instance id ;   }  else if  ( data center info instanceof  unique identifier )   {   string unique id =  (  (  unique identifier ) data ,255,2,id,2,"[55, 85, 128, 185, 218, 237]"
300,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,get instance id,public  string   (  )  {  return instance id ;   }  ,52,3,get,1,[]
301,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,get instance id,public  string   (  )  {  return instance id ;   }  ,52,3,instance,2,[33]
302,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,get instance id,public  string   (  )  {  return instance id ;   }  ,52,3,id,3,[42]
303,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,get last dirty timestamp,public  long   (  )  {  return last dirty timestamp ;   }  ,59,4,get,1,[]
304,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,get last dirty timestamp,public  long   (  )  {  return last dirty timestamp ;   }  ,59,4,last,2,[31]
305,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,get last dirty timestamp,public  long   (  )  {  return last dirty timestamp ;   }  ,59,4,dirty,3,[36]
306,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,get last dirty timestamp,public  long   (  )  {  return last dirty timestamp ;   }  ,59,4,timestamp,4,[42]
307,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,get last updated timestamp,public long   (  )  {  return last updated timestamp ;   }  ,60,4,get,1,[]
308,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,get last updated timestamp,public long   (  )  {  return last updated timestamp ;   }  ,60,4,last,2,[30]
309,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,get last updated timestamp,public long   (  )  {  return last updated timestamp ;   }  ,60,4,updated,3,[35]
310,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,get last updated timestamp,public long   (  )  {  return last updated timestamp ;   }  ,60,4,timestamp,4,[43]
311,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,get lease info,public  lease info   (  )  {  return lease info ;   }  ,55,3,get,1,[]
312,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,get lease info,public  lease info   (  )  {  return lease info ;   }  ,55,3,lease,2,"[8, 37]"
313,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,get lease info,public  lease info   (  )  {  return lease info ;   }  ,55,3,info,3,"[14, 43]"
314,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,get metadata,public  map <  string  string >    (  )  {  return metadata ;   }  ,67,2,get,1,[]
315,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,get metadata,public  map <  string  string >    (  )  {  return metadata ;   }  ,67,2,metadata,2,[51]
316,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,get overridden status,public  instance status   (  )  {  return overriddenstatus ;   }  ,66,3,get,1,[]
317,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,get overridden status,public  instance status   (  )  {  return overriddenstatus ;   }  ,66,3,overridden,2,[42]
318,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,get overridden status,public  instance status   (  )  {  return overriddenstatus ;   }  ,66,3,status,3,"[17, 52]"
319,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,get port,@ json ignore public int   (  )  {  return port ;   }  ,55,2,get,1,[]
320,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,get port,@ json ignore public int   (  )  {  return port ;   }  ,55,2,port,2,[43]
321,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,get raw instance,public  instance info   (  )  {  return result ;   }  ,54,3,get,1,[]
322,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,get raw instance,public  instance info   (  )  {  return result ;   }  ,54,3,raw,2,[]
323,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,get raw instance,public  instance info   (  )  {  return result ;   }  ,54,3,instance,3,[8]
324,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,getsid,"@ json property ( ""sid"" )  @ deprecated public  string   (  )  {  return sid ;   }  ",84,1,getsid,1,[]
325,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,get secure health check url,public  string   (  )  {  return secure health check url ;   }  ,64,5,get,1,[]
326,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,get secure health check url,public  string   (  )  {  return secure health check url ;   }  ,64,5,secure,2,[33]
327,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,get secure health check url,public  string   (  )  {  return secure health check url ;   }  ,64,5,health,3,[40]
328,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,get secure health check url,public  string   (  )  {  return secure health check url ;   }  ,64,5,check,4,[47]
329,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,get secure health check url,public  string   (  )  {  return secure health check url ;   }  ,64,5,url,5,[53]
330,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,get secure port,@ json ignore public int   (  )  {  return secure port ;   }  ,62,3,get,1,[]
331,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,get secure port,@ json ignore public int   (  )  {  return secure port ;   }  ,62,3,secure,2,[43]
332,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,get secure port,@ json ignore public int   (  )  {  return secure port ;   }  ,62,3,port,3,[50]
333,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,get secure vip address,public  string   (  )  {  return secure vip address ;   }  ,59,4,get,1,[]
334,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,get secure vip address,public  string   (  )  {  return secure vip address ;   }  ,59,4,secure,2,[33]
335,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,get secure vip address,public  string   (  )  {  return secure vip address ;   }  ,59,4,vip,3,[40]
336,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,get secure vip address,public  string   (  )  {  return secure vip address ;   }  ,59,4,address,4,[44]
337,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,get status,public  instance status   (  )  {  return status ;   }  ,56,2,get,1,[]
338,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,get status,public  instance status   (  )  {  return status ;   }  ,56,2,status,2,"[17, 42]"
339,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,get status page url,public  string   (  )  {  return status page url ;   }  ,56,4,get,1,[]
340,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,get status page url,public  string   (  )  {  return status page url ;   }  ,56,4,status,2,[33]
341,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,get status page url,public  string   (  )  {  return status page url ;   }  ,56,4,page,3,[40]
342,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,get status page url,public  string   (  )  {  return status page url ;   }  ,56,4,url,4,[45]
343,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,getvip address,"@ json property ( ""vip address"" )  public  string   (  )  {  return vip address ;   }  ",87,2,getvip,1,[]
344,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,getvip address,"@ json property ( ""vip address"" )  public  string   (  )  {  return vip address ;   }  ",87,2,address,2,"[23, 72]"
345,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,get version,@ deprecated @ json ignore public  string   (  )  {  return version ;   }  ,75,2,get,1,[]
346,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,get version,@ deprecated @ json ignore public  string   (  )  {  return version ;   }  ,75,2,version,2,[60]
347,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,get zone,"public static  string   (  string[] avail zones  instance info my info )  {   string instance zone =  (  ( avail zones  =  =  null || avail zones . length  =  =  0 )   ?  ""default"" : avail zones[0] )  ;  if  ( my info  !  =  null && my info . get data center info (  )  . get name (  )   =  =   data center info .  name .  amazon )   {   string aws instance zone =  (  (  amazon info ) my info . get data center info (  )  )  . get (  amazon info .  meta data key . availability zone )  ;  if  ( aws instance zone  !  =  null )   {  instance zone = aws instance zone ;   }   }  return instance zone ;   }  ",606,2,get,1,"[243, 272, 396, 428]"
348,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,get zone,"public static  string   (  string[] avail zones  instance info my info )  {   string instance zone =  (  ( avail zones  =  =  null || avail zones . length  =  =  0 )   ?  ""default"" : avail zones[0] )  ;  if  ( my info  !  =  null && my info . get data center info (  )  . get name (  )   =  =   data center info .  name .  amazon )   {   string aws instance zone =  (  (  amazon info ) my info . get data center info (  )  )  . get (  amazon info .  meta data key . availability zone )  ;  if  ( aws instance zone  !  =  null )   {  instance zone = aws instance zone ;   }   }  return instance zone ;   }  ",606,2,zone,2,"[42, 94, 113, 140, 189, 358, 479, 509, 542, 562, 594]"
349,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,hash code,@ override public int   (  )  {   string id = get id (  )  ;  return  ( id  =  =  null )   ?  31 :  ( id . hash code (  )   +  31 )  ;   }  ,140,2,hash,1,[107]
350,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,hash code,@ override public int   (  )  {   string id = get id (  )  ;  return  ( id  =  =  null )   ?  31 :  ( id . hash code (  )   +  31 )  ;   }  ,140,2,code,2,[112]
351,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,is coordinating discovery server,"@ json property ( "" "" )  public  boolean is coordinating discovery server (  )  {  return is coordinating discovery server ;   }  ",130,4,is,1,"[41, 58, 90, 107]"
352,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,is coordinating discovery server,"@ json property ( "" "" )  public  boolean is coordinating discovery server (  )  {  return is coordinating discovery server ;   }  ",130,4,coordinating,2,"[44, 93]"
353,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,is coordinating discovery server,"@ json property ( "" "" )  public  boolean is coordinating discovery server (  )  {  return is coordinating discovery server ;   }  ",130,4,discovery,3,"[57, 106]"
354,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,is coordinating discovery server,"@ json property ( "" "" )  public  boolean is coordinating discovery server (  )  {  return is coordinating discovery server ;   }  ",130,4,server,4,"[67, 116]"
355,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,is dirty,@ json ignore public boolean   (  )  {  return is instance info dirty ;   }  ,77,2,is,1,[47]
356,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,is dirty,@ json ignore public boolean   (  )  {  return is instance info dirty ;   }  ,77,2,dirty,2,[64]
357,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,is dirty with time,public synchronized  long   (  )  {  if  ( is instance info dirty )   {  return last dirty timestamp ;   }  else  {  return null ;   }   }  ,140,4,is,1,[43]
358,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,is dirty with time,public synchronized  long   (  )  {  if  ( is instance info dirty )   {  return last dirty timestamp ;   }  else  {  return null ;   }   }  ,140,4,dirty,2,"[60, 85]"
359,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,is dirty with time,public synchronized  long   (  )  {  if  ( is instance info dirty )   {  return last dirty timestamp ;   }  else  {  return null ;   }   }  ,140,4,with,3,[]
360,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,is dirty with time,public synchronized  long   (  )  {  if  ( is instance info dirty )   {  return last dirty timestamp ;   }  else  {  return null ;   }   }  ,140,4,time,4,[91]
361,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,is enabled,public boolean   (  )  {  return enabled ;   }  ,48,2,is,1,[]
362,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,is enabled,public boolean   (  )  {  return enabled ;   }  ,48,2,enabled,2,[33]
363,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,is initialized,public boolean   (  )  {  return  ( result . app name  !  =  null )  ;   }  ,76,2,is,1,[]
364,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,is initialized,public boolean   (  )  {  return  ( result . app name  !  =  null )  ;   }  ,76,2,initialized,2,[]
365,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,is port enabled,@ json ignore public boolean   (  port type type )  {  if  ( type  =  =   port type . secure )   {  return is secure port enabled ;   }  else  {  return is unsecure port enabled ;   }   }  ,189,3,is,1,"[107, 153]"
366,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,is port enabled,@ json ignore public boolean   (  port type type )  {  if  ( type  =  =   port type . secure )   {  return is secure port enabled ;   }  else  {  return is unsecure port enabled ;   }   }  ,189,3,port,2,"[34, 74, 117, 165]"
367,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,is port enabled,@ json ignore public boolean   (  port type type )  {  if  ( type  =  =   port type . secure )   {  return is secure port enabled ;   }  else  {  return is unsecure port enabled ;   }   }  ,189,3,enabled,3,"[122, 170]"
368,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,new builder,public static  builder   (  vip address resolver vip address resolver )  {  return new  builder ( new  instance info (  )  vip address resolver null )  ;   }  ,159,2,new,1,"[83, 98]"
369,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,new builder,public static  builder   (  vip address resolver vip address resolver )  {  return new  builder ( new  instance info (  )  vip address resolver null )  ;   }  ,159,2,builder,2,"[15, 88]"
370,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,refresh health check url,private  builder   (  )  {  set health check urls ( result . health check relative url result . health check explicit url result . health check secure explicit url )  ;  return this ;   }  ,189,4,refresh,1,[]
371,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,refresh health check url,private  builder   (  )  {  set health check urls ( result . health check relative url result . health check explicit url result . health check secure explicit url )  ;  return this ;   }  ,189,4,health,2,"[32, 61, 96, 131]"
372,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,refresh health check url,private  builder   (  )  {  set health check urls ( result . health check relative url result . health check explicit url result . health check secure explicit url )  ;  return this ;   }  ,189,4,check,3,"[39, 68, 103, 138]"
373,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,refresh health check url,private  builder   (  )  {  set health check urls ( result . health check relative url result . health check explicit url result . health check secure explicit url )  ;  return this ;   }  ,189,4,url,4,"[45, 83, 118, 160]"
374,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,refresh securevip address,private  builder   (  )  {  set securevip address ( result . secure vip address unresolved )  ;  return this ;   }  ,116,3,refresh,1,[]
375,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,refresh securevip address,private  builder   (  )  {  set securevip address ( result . secure vip address unresolved )  ;  return this ;   }  ,116,3,securevip,2,[32]
376,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,refresh securevip address,private  builder   (  )  {  set securevip address ( result . secure vip address unresolved )  ;  return this ;   }  ,116,3,address,3,"[42, 72]"
377,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,refresh status page url,private  builder   (  )  {  set status page url ( result . status page relative url result . status page explicit url )  ;  return this ;   }  ,143,4,refresh,1,[]
378,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,refresh status page url,private  builder   (  )  {  set status page url ( result . status page relative url result . status page explicit url )  ;  return this ;   }  ,143,4,status,2,"[32, 59, 93]"
379,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,refresh status page url,private  builder   (  )  {  set status page url ( result . status page relative url result . status page explicit url )  ;  return this ;   }  ,143,4,page,3,"[39, 66, 100]"
380,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,refresh status page url,private  builder   (  )  {  set status page url ( result . status page relative url result . status page explicit url )  ;  return this ;   }  ,143,4,url,4,"[44, 80, 114]"
381,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,refreshvip address,private  builder   (  )  {  setvip address ( result . vip address unresolved )  ;  return this ;   }  ,102,2,refreshvip,1,[]
382,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,refreshvip address,private  builder   (  )  {  setvip address ( result . vip address unresolved )  ;  return this ;   }  ,102,2,address,2,"[35, 58]"
383,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,register runtime metadata,synchronized void   (  map <  string  string >  runtime metadata )  {  metadata . put all ( runtime metadata )  ;  set is dirty (  )  ;   }  ,141,3,register,1,[]
384,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,register runtime metadata,synchronized void   (  map <  string  string >  runtime metadata )  {  metadata . put all ( runtime metadata )  ;  set is dirty (  )  ;   }  ,141,3,runtime,2,"[48, 92]"
385,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,register runtime metadata,synchronized void   (  map <  string  string >  runtime metadata )  {  metadata . put all ( runtime metadata )  ;  set is dirty (  )  ;   }  ,141,3,metadata,3,"[56, 71, 100]"
386,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,remove metadata map legacy values,"private  map <  string  string >    (  map <  string  string >  metadata )  {  if  (  instance info serializer . metadata   compatibility   value . equals ( metadata . get (  instance info serializer . metadata   compatibility   key )  )  )   {  metadata . remove (  instance info serializer . metadata   compatibility   key )  ;   }  else if  (  instance info serializer . metadata   compatibility   value . equals ( metadata . get ( ""class"" )  )  )   {  metadata . remove ( ""class"" )  ;   }  return metadata ;   }  ",517,5,remove,1,"[257, 467]"
387,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,remove metadata map legacy values,"private  map <  string  string >    (  map <  string  string >  metadata )  {  if  (  instance info serializer . metadata   compatibility   value . equals ( metadata . get (  instance info serializer . metadata   compatibility   key )  )  )   {  metadata . remove (  instance info serializer . metadata   compatibility   key )  ;   }  else if  (  instance info serializer . metadata   compatibility   value . equals ( metadata . get ( ""class"" )  )  )   {  metadata . remove ( ""class"" )  ;   }  return metadata ;   }  ",517,5,metadata,2,"[64, 113, 157, 202, 246, 294, 374, 418, 456, 501]"
388,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,remove metadata map legacy values,"private  map <  string  string >    (  map <  string  string >  metadata )  {  if  (  instance info serializer . metadata   compatibility   value . equals ( metadata . get (  instance info serializer . metadata   compatibility   key )  )  )   {  metadata . remove (  instance info serializer . metadata   compatibility   key )  ;   }  else if  (  instance info serializer . metadata   compatibility   value . equals ( metadata . get ( ""class"" )  )  )   {  metadata . remove ( ""class"" )  ;   }  return metadata ;   }  ",517,5,map,3,"[9, 39]"
389,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,remove metadata map legacy values,"private  map <  string  string >    (  map <  string  string >  metadata )  {  if  (  instance info serializer . metadata   compatibility   value . equals ( metadata . get (  instance info serializer . metadata   compatibility   key )  )  )   {  metadata . remove (  instance info serializer . metadata   compatibility   key )  ;   }  else if  (  instance info serializer . metadata   compatibility   value . equals ( metadata . get ( ""class"" )  )  )   {  metadata . remove ( ""class"" )  ;   }  return metadata ;   }  ",517,5,legacy,4,[]
390,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,remove metadata map legacy values,"private  map <  string  string >    (  map <  string  string >  metadata )  {  if  (  instance info serializer . metadata   compatibility   value . equals ( metadata . get (  instance info serializer . metadata   compatibility   key )  )  )   {  metadata . remove (  instance info serializer . metadata   compatibility   key )  ;   }  else if  (  instance info serializer . metadata   compatibility   value . equals ( metadata . get ( ""class"" )  )  )   {  metadata . remove ( ""class"" )  ;   }  return metadata ;   }  ",517,5,values,5,[]
391,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,setasg name,public  builder   (  string asg name )  {  result . asg name = intern . apply ( asg name )  ;  return this ;   }  ,114,2,setasg,1,[]
392,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,setasg name,public  builder   (  string asg name )  {  result . asg name = intern . apply ( asg name )  ;  return this ;   }  ,114,2,name,2,"[32, 56, 84]"
393,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set action type,public void   (  action type action type )  {  this . action type = action type ;   }  ,87,3,set,1,[]
394,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set action type,public void   (  action type action type )  {  this . action type = action type ;   }  ,87,3,action,2,"[17, 29, 54, 68]"
395,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set action type,public void   (  action type action type )  {  this . action type = action type ;   }  ,87,3,type,3,"[24, 36, 61, 75]"
396,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set app group name,public  builder   (  string app group name )  {  if  ( app group name  !  =  null )   {  result . app group name = intern . apply ( app group name . to upper case (  locale . root )  )  ;   }  else  {  result . app group name = null ;   }  return this ;   }  ,259,4,set,1,[]
397,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set app group name,public  builder   (  string app group name )  {  if  ( app group name  !  =  null )   {  result . app group name = intern . apply ( app group name . to upper case (  locale . root )  )  ;   }  else  {  result . app group name = null ;   }  return this ;   }  ,259,4,app,2,"[28, 55, 98, 124, 132, 211]"
398,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set app group name,public  builder   (  string app group name )  {  if  ( app group name  !  =  null )   {  result . app group name = intern . apply ( app group name . to upper case (  locale . root )  )  ;   }  else  {  result . app group name = null ;   }  return this ;   }  ,259,4,group,3,"[32, 59, 102, 136, 215]"
399,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set app group name,public  builder   (  string app group name )  {  if  ( app group name  !  =  null )   {  result . app group name = intern . apply ( app group name . to upper case (  locale . root )  )  ;   }  else  {  result . app group name = null ;   }  return this ;   }  ,259,4,name,4,"[38, 65, 108, 142, 221]"
400,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set app group name for deser,public  builder   (  string app group name )  {  result . app group name = app group name ;  return this ;   }  ,112,6,set,1,[]
401,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set app group name for deser,public  builder   (  string app group name )  {  result . app group name = app group name ;  return this ;   }  ,112,6,app,2,"[28, 58, 75]"
402,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set app group name for deser,public  builder   (  string app group name )  {  result . app group name = app group name ;  return this ;   }  ,112,6,group,3,"[32, 62, 79]"
403,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set app group name for deser,public  builder   (  string app group name )  {  result . app group name = app group name ;  return this ;   }  ,112,6,name,4,"[38, 68, 85]"
404,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set app group name for deser,public  builder   (  string app group name )  {  result . app group name = app group name ;  return this ;   }  ,112,6,for,5,[]
405,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set app group name for deser,public  builder   (  string app group name )  {  result . app group name = app group name ;  return this ;   }  ,112,6,deser,6,[]
406,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set app name,public  builder   (  string app name )  {  result . app name = intern . apply ( app name . to upper case (  locale . root )  )  ;  return this ;   }  ,150,3,set,1,[]
407,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set app name,public  builder   (  string app name )  {  result . app name = intern . apply ( app name . to upper case (  locale . root )  )  ;  return this ;   }  ,150,3,app,2,"[28, 52, 72, 80]"
408,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set app name,public  builder   (  string app name )  {  result . app name = intern . apply ( app name . to upper case (  locale . root )  )  ;  return this ;   }  ,150,3,name,3,"[32, 56, 84]"
409,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set app name for deser,public  builder   (  string app name )  {  result . app name = app name ;  return this ;   }  ,94,5,set,1,[]
410,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set app name for deser,public  builder   (  string app name )  {  result . app name = app name ;  return this ;   }  ,94,5,app,2,"[28, 52, 63]"
411,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set app name for deser,public  builder   (  string app name )  {  result . app name = app name ;  return this ;   }  ,94,5,name,3,"[32, 56, 67]"
412,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set app name for deser,public  builder   (  string app name )  {  result . app name = app name ;  return this ;   }  ,94,5,for,4,[]
413,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set app name for deser,public  builder   (  string app name )  {  result . app name = app name ;  return this ;   }  ,94,5,deser,5,[]
414,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set country id,@ deprecated public  builder   ( int id )  {  result . country id = id ;  return this ;   }  ,93,3,set,1,[]
415,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set country id,@ deprecated public  builder   ( int id )  {  result . country id = id ;  return this ;   }  ,93,3,country,2,[55]
416,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set country id,@ deprecated public  builder   ( int id )  {  result . country id = id ;  return this ;   }  ,93,3,id,3,"[37, 63, 68]"
417,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set data center info,public  builder   (  data center info datacenter )  {  result . data center info = datacenter ;  return this ;   }  ,116,4,set,1,[]
418,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set data center info,public  builder   (  data center info datacenter )  {  result . data center info = datacenter ;  return this ;   }  ,116,4,data,2,"[21, 38, 64, 83]"
419,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set data center info,public  builder   (  data center info datacenter )  {  result . data center info = datacenter ;  return this ;   }  ,116,4,center,3,"[26, 42, 69, 87]"
420,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set data center info,public  builder   (  data center info datacenter )  {  result . data center info = datacenter ;  return this ;   }  ,116,4,info,4,"[33, 76]"
421,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set health check urls,"public  builder   (  string relative url  string explicit url  string secure explicit url )  {   string host name interpolation expression = ""$ { ""  +  namespace  +  ""hostname } "" ;  result . health check relative url = relative url ;  result . health check explicit url = explicit url ;  result . health check secure explicit url = secure explicit url ;  if  ( explicit url  !  =  null )   {  result . health check url = explicit url . replace ( host name interpolation expression result . host name )  ;   }  else if  ( result . is unsecure port enabled )   {  result . health check url = http   protocol  +  result . host name  +  colon +  result . port +  relative url ;   }  if  ( secure explicit url  !  =  null )   {  result . secure health check url = secure explicit url . replace ( host name interpolation expression result . host name )  ;   }  else if  ( result . is secure port enabled )   {  result . secure health check url = https   protocol  +  result . host name  +  colon +  result . secure port +  relative url ;   }  return this ;   }  ",1057,4,set,1,[]
422,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set health check urls,"public  builder   (  string relative url  string explicit url  string secure explicit url )  {   string host name interpolation expression = ""$ { ""  +  namespace  +  ""hostname } "" ;  result . health check relative url = relative url ;  result . health check explicit url = explicit url ;  result . health check secure explicit url = secure explicit url ;  if  ( explicit url  !  =  null )   {  result . health check url = explicit url . replace ( host name interpolation expression result . host name )  ;   }  else if  ( result . is unsecure port enabled )   {  result . health check url = http   protocol  +  result . host name  +  colon +  result . port +  relative url ;   }  if  ( secure explicit url  !  =  null )   {  result . secure health check url = secure explicit url . replace ( host name interpolation expression result . host name )  ;   }  else if  ( result . is secure port enabled )   {  result . secure health check url = https   protocol  +  result . host name  +  colon +  result . secure port +  relative url ;   }  return this ;   }  ",1057,4,health,2,"[192, 245, 298, 403, 572, 741, 922]"
423,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set health check urls,"public  builder   (  string relative url  string explicit url  string secure explicit url )  {   string host name interpolation expression = ""$ { ""  +  namespace  +  ""hostname } "" ;  result . health check relative url = relative url ;  result . health check explicit url = explicit url ;  result . health check secure explicit url = secure explicit url ;  if  ( explicit url  !  =  null )   {  result . health check url = explicit url . replace ( host name interpolation expression result . host name )  ;   }  else if  ( result . is unsecure port enabled )   {  result . health check url = http   protocol  +  result . host name  +  colon +  result . port +  relative url ;   }  if  ( secure explicit url  !  =  null )   {  result . secure health check url = secure explicit url . replace ( host name interpolation expression result . host name )  ;   }  else if  ( result . is secure port enabled )   {  result . secure health check url = https   protocol  +  result . host name  +  colon +  result . secure port +  relative url ;   }  return this ;   }  ",1057,4,check,3,"[199, 252, 305, 410, 579, 748, 929]"
424,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set health check urls,"public  builder   (  string relative url  string explicit url  string secure explicit url )  {   string host name interpolation expression = ""$ { ""  +  namespace  +  ""hostname } "" ;  result . health check relative url = relative url ;  result . health check explicit url = explicit url ;  result . health check secure explicit url = secure explicit url ;  if  ( explicit url  !  =  null )   {  result . health check url = explicit url . replace ( host name interpolation expression result . host name )  ;   }  else if  ( result . is unsecure port enabled )   {  result . health check url = http   protocol  +  result . host name  +  colon +  result . port +  relative url ;   }  if  ( secure explicit url  !  =  null )   {  result . secure health check url = secure explicit url . replace ( host name interpolation expression result . host name )  ;   }  else if  ( result . is secure port enabled )   {  result . secure health check url = https   protocol  +  result . host name  +  colon +  result . secure port +  relative url ;   }  return this ;   }  ",1057,4,urls,4,[]
425,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set health check urls for deser,public  builder   (  string health check url  string secure health check url )  {  if  ( health check url  !  =  null )   {  result . health check url = health check url ;   }  if  ( secure health check url  !  =  null )   {  result . secure health check url = secure health check url ;   }  return this ;   }  ,311,6,set,1,[]
426,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set health check urls for deser,public  builder   (  string health check url  string secure health check url )  {  if  ( health check url  !  =  null )   {  result . health check url = health check url ;   }  if  ( secure health check url  !  =  null )   {  result . secure health check url = secure health check url ;   }  return this ;   }  ,311,6,health,2,"[28, 60, 89, 134, 153, 190, 242, 268]"
427,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set health check urls for deser,public  builder   (  string health check url  string secure health check url )  {  if  ( health check url  !  =  null )   {  result . health check url = health check url ;   }  if  ( secure health check url  !  =  null )   {  result . secure health check url = secure health check url ;   }  return this ;   }  ,311,6,check,3,"[35, 67, 96, 141, 160, 197, 249, 275]"
428,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set health check urls for deser,public  builder   (  string health check url  string secure health check url )  {  if  ( health check url  !  =  null )   {  result . health check url = health check url ;   }  if  ( secure health check url  !  =  null )   {  result . secure health check url = secure health check url ;   }  return this ;   }  ,311,6,urls,4,[]
429,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set health check urls for deser,public  builder   (  string health check url  string secure health check url )  {  if  ( health check url  !  =  null )   {  result . health check url = health check url ;   }  if  ( secure health check url  !  =  null )   {  result . secure health check url = secure health check url ;   }  return this ;   }  ,311,6,for,5,[]
430,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set health check urls for deser,public  builder   (  string health check url  string secure health check url )  {  if  ( health check url  !  =  null )   {  result . health check url = health check url ;   }  if  ( secure health check url  !  =  null )   {  result . secure health check url = secure health check url ;   }  return this ;   }  ,311,6,deser,6,[]
431,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set home page url,"public  builder   (  string relative url  string explicit url )  {   string host name interpolation expression = ""$ { ""  +  namespace  +  ""hostname } "" ;  if  ( explicit url  !  =  null )   {  result . home page url = explicit url . replace ( host name interpolation expression result . host name )  ;   }  else if  ( relative url  !  =  null )   {  result . home page url = http   protocol  +  result . host name  +  colon +  result . port +  relative url ;   }  return this ;   }  ",483,4,set,1,[]
432,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set home page url,"public  builder   (  string relative url  string explicit url )  {   string host name interpolation expression = ""$ { ""  +  namespace  +  ""hostname } "" ;  if  ( explicit url  !  =  null )   {  result . home page url = explicit url . replace ( host name interpolation expression result . host name )  ;   }  else if  ( relative url  !  =  null )   {  result . home page url = http   protocol  +  result . host name  +  colon +  result . port +  relative url ;   }  return this ;   }  ",483,4,home,2,"[202, 359]"
433,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set home page url,"public  builder   (  string relative url  string explicit url )  {   string host name interpolation expression = ""$ { ""  +  namespace  +  ""hostname } "" ;  if  ( explicit url  !  =  null )   {  result . home page url = explicit url . replace ( host name interpolation expression result . host name )  ;   }  else if  ( relative url  !  =  null )   {  result . home page url = http   protocol  +  result . host name  +  colon +  result . port +  relative url ;   }  return this ;   }  ",483,4,page,3,"[207, 364]"
434,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set home page url,"public  builder   (  string relative url  string explicit url )  {   string host name interpolation expression = ""$ { ""  +  namespace  +  ""hostname } "" ;  if  ( explicit url  !  =  null )   {  result . home page url = explicit url . replace ( host name interpolation expression result . host name )  ;   }  else if  ( relative url  !  =  null )   {  result . home page url = http   protocol  +  result . host name  +  colon +  result . port +  relative url ;   }  return this ;   }  ",483,4,url,4,"[37, 58, 170, 212, 227, 327, 369, 453]"
435,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set home page url for deser,public  builder   (  string home page url )  {  result . home page url = home page url ;  return this ;   }  ,109,6,set,1,[]
436,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set home page url for deser,public  builder   (  string home page url )  {  result . home page url = home page url ;  return this ;   }  ,109,6,home,2,"[28, 57, 73]"
437,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set home page url for deser,public  builder   (  string home page url )  {  result . home page url = home page url ;  return this ;   }  ,109,6,page,3,"[33, 62, 78]"
438,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set home page url for deser,public  builder   (  string home page url )  {  result . home page url = home page url ;  return this ;   }  ,109,6,url,4,"[38, 67, 83]"
439,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set home page url for deser,public  builder   (  string home page url )  {  result . home page url = home page url ;  return this ;   }  ,109,6,for,5,[]
440,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set home page url for deser,public  builder   (  string home page url )  {  result . home page url = home page url ;  return this ;   }  ,109,6,deser,6,[]
441,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set host name,"public  builder   (  string host name )  {  if  ( host name  =  =  null || host name . is empty (  )  )   {  logger . warn ( "" passed in hostname is blank  not setting it"" )  ;  return this ;   }   string existing host name = result . host name ;  result . host name = host name ;  if  (  ( existing host name  !  =  null )  &&  !  ( host name . equals ( existing host name )  )  )   {  refresh status page url (  )  . refresh health check url (  )  . refreshvip address (  )  . refresh securevip address (  )  ;   }  return this ;   }  ",537,3,set,1,[160]
442,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set host name,"public  builder   (  string host name )  {  if  ( host name  =  =  null || host name . is empty (  )  )   {  logger . warn ( "" passed in hostname is blank  not setting it"" )  ;  return this ;   }   string existing host name = result . host name ;  result . host name = host name ;  if  (  ( existing host name  !  =  null )  &&  !  ( host name . equals ( existing host name )  )  )   {  refresh status page url (  )  . refresh health check url (  )  . refreshvip address (  )  . refresh securevip address (  )  ;   }  return this ;   }  ",537,3,host,2,"[28, 50, 75, 137, 214, 235, 257, 269, 300, 334, 364]"
443,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set host name,"public  builder   (  string host name )  {  if  ( host name  =  =  null || host name . is empty (  )  )   {  logger . warn ( "" passed in hostname is blank  not setting it"" )  ;  return this ;   }   string existing host name = result . host name ;  result . host name = host name ;  if  (  ( existing host name  !  =  null )  &&  !  ( host name . equals ( existing host name )  )  )   {  refresh status page url (  )  . refresh health check url (  )  . refreshvip address (  )  . refresh securevip address (  )  ;   }  return this ;   }  ",537,3,name,3,"[33, 55, 80, 141, 219, 240, 262, 274, 305, 339, 369]"
444,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,setip addr,public  builder   (  string ip )  {  result . ip addr = ip ;  return this ;   }  ,81,2,setip,1,[]
445,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,setip addr,public  builder   (  string ip )  {  result . ip addr = ip ;  return this ;   }  ,81,2,addr,2,[49]
446,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set instance id,public  builder   (  string instance id )  {  result . instance id = instance id ;  return this ;   }  ,103,3,set,1,[]
447,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set instance id,public  builder   (  string instance id )  {  result . instance id = instance id ;  return this ;   }  ,103,3,instance,2,"[28, 55, 69]"
448,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set instance id,public  builder   (  string instance id )  {  result . instance id = instance id ;  return this ;   }  ,103,3,id,3,"[37, 64, 78]"
449,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set is coordinating discovery server,public void   (  )  {   string instance id = get id (  )  ;  if  (  ( instance id  !  =  null )  &&  ( instance id . equals (  application info manager . get instance (  )  . get info (  )  . get id (  )  )  )  )   {  is coordinating discovery server =  boolean . true ;   }  else  {  is coordinating discovery server =  boolean . false ;   }   }  ,348,5,set,1,[]
450,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set is coordinating discovery server,public void   (  )  {   string instance id = get id (  )  ;  if  (  ( instance id  !  =  null )  &&  ( instance id . equals (  application info manager . get instance (  )  . get info (  )  . get id (  )  )  )  )   {  is coordinating discovery server =  boolean . true ;   }  else  {  is coordinating discovery server =  boolean . false ;   }   }  ,348,5,is,2,"[218, 235, 285, 302]"
451,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set is coordinating discovery server,public void   (  )  {   string instance id = get id (  )  ;  if  (  ( instance id  !  =  null )  &&  ( instance id . equals (  application info manager . get instance (  )  . get info (  )  . get id (  )  )  )  )   {  is coordinating discovery server =  boolean . true ;   }  else  {  is coordinating discovery server =  boolean . false ;   }   }  ,348,5,coordinating,3,"[221, 288]"
452,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set is coordinating discovery server,public void   (  )  {   string instance id = get id (  )  ;  if  (  ( instance id  !  =  null )  &&  ( instance id . equals (  application info manager . get instance (  )  . get info (  )  . get id (  )  )  )  )   {  is coordinating discovery server =  boolean . true ;   }  else  {  is coordinating discovery server =  boolean . false ;   }   }  ,348,5,discovery,4,"[234, 301]"
453,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set is coordinating discovery server,public void   (  )  {   string instance id = get id (  )  ;  if  (  ( instance id  !  =  null )  &&  ( instance id . equals (  application info manager . get instance (  )  . get info (  )  . get id (  )  )  )  )   {  is coordinating discovery server =  boolean . true ;   }  else  {  is coordinating discovery server =  boolean . false ;   }   }  ,348,5,server,5,"[244, 311]"
454,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set is dirty,public synchronized void   (  )  {  is instance info dirty = true ;  last dirty timestamp =  system . current time millis (  )  ;   }  ,135,3,set,1,[]
455,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set is dirty,public synchronized void   (  )  {  is instance info dirty = true ;  last dirty timestamp =  system . current time millis (  )  ;   }  ,135,3,is,2,"[36, 119]"
456,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set is dirty,public synchronized void   (  )  {  is instance info dirty = true ;  last dirty timestamp =  system . current time millis (  )  ;   }  ,135,3,dirty,3,"[53, 74]"
457,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set is dirty with time,public synchronized long   (  )  {  set is dirty (  )  ;  return last dirty timestamp ;   }  ,93,5,set,1,[36]
458,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set is dirty with time,public synchronized long   (  )  {  set is dirty (  )  ;  return last dirty timestamp ;   }  ,93,5,is,2,[40]
459,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set is dirty with time,public synchronized long   (  )  {  set is dirty (  )  ;  return last dirty timestamp ;   }  ,93,5,dirty,3,"[43, 70]"
460,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set is dirty with time,public synchronized long   (  )  {  set is dirty (  )  ;  return last dirty timestamp ;   }  ,93,5,with,4,[]
461,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set is dirty with time,public synchronized long   (  )  {  set is dirty (  )  ;  return last dirty timestamp ;   }  ,93,5,time,5,[76]
462,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set last dirty timestamp,public void   (  long last dirty timestamp )  {  this . last dirty timestamp = last dirty timestamp ;   }  ,107,4,set,1,[]
463,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set last dirty timestamp,public void   (  long last dirty timestamp )  {  this . last dirty timestamp = last dirty timestamp ;   }  ,107,4,last,2,"[22, 56, 79]"
464,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set last dirty timestamp,public void   (  long last dirty timestamp )  {  this . last dirty timestamp = last dirty timestamp ;   }  ,107,4,dirty,3,"[27, 61, 84]"
465,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set last dirty timestamp,public void   (  long last dirty timestamp )  {  this . last dirty timestamp = last dirty timestamp ;   }  ,107,4,timestamp,4,"[33, 67, 90]"
466,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set last updated timestamp,public void   (  )  {  this . last updated timestamp =  system . current time millis (  )  ;   }  ,98,4,set,1,[]
467,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set last updated timestamp,public void   (  )  {  this . last updated timestamp =  system . current time millis (  )  ;   }  ,98,4,last,2,[30]
468,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set last updated timestamp,public void   (  )  {  this . last updated timestamp =  system . current time millis (  )  ;   }  ,98,4,updated,3,[35]
469,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set last updated timestamp,public void   (  )  {  this . last updated timestamp =  system . current time millis (  )  ;   }  ,98,4,timestamp,4,[43]
470,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set lease info,public void   (  lease info info )  {  lease info = info ;   }  ,64,3,set,1,[]
471,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set lease info,public void   (  lease info info )  {  lease info = info ;   }  ,64,3,lease,2,"[17, 39]"
472,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set lease info,public void   (  lease info info )  {  lease info = info ;   }  ,64,3,info,3,"[23, 28, 45, 52]"
473,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set metadata,public  builder   (  map <  string  string >  mt )  {  result . metadata = mt ;  return this ;   }  ,100,2,set,1,[]
474,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set metadata,public  builder   (  map <  string  string >  mt )  {  result . metadata = mt ;  return this ;   }  ,100,2,metadata,2,[64]
475,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set namespace,"public  builder   (  string namespace )  {  this . namespace = namespace . ends with ( "" . "" )   ?  namespace : namespace  +  "" . "" ;  return this ;   }  ",154,2,set,1,[]
476,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set namespace,"public  builder   (  string namespace )  {  this . namespace = namespace . ends with ( "" . "" )   ?  namespace : namespace  +  "" . "" ;  return this ;   }  ",154,2,namespace,2,"[28, 51, 63, 100, 112]"
477,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set overridden status,public synchronized void   (  instance status status )  {  if  ( this . overriddenstatus  !  =  status )   {  this . overriddenstatus = status ;   }   }  ,154,3,set,1,[]
478,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set overridden status,public synchronized void   (  instance status status )  {  if  ( this . overriddenstatus  !  =  status )   {  this . overriddenstatus = status ;   }   }  ,154,3,overridden,2,"[72, 117]"
479,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set overridden status,public synchronized void   (  instance status status )  {  if  ( this . overriddenstatus  !  =  status )   {  this . overriddenstatus = status ;   }   }  ,154,3,status,3,"[39, 46, 82, 96, 127, 136]"
480,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set port,public  builder   ( int port )  {  result . port = port ;  return this ;   }  ,78,2,set,1,[]
481,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set port,public  builder   ( int port )  {  result . port = port ;  return this ;   }  ,78,2,port,2,"[24, 44, 51]"
482,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,setsid,@ deprecated public void   (  string sid )  {  this . sid = sid ;  set is dirty (  )  ;   }  ,93,1,setsid,1,[]
483,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set secure port,public  builder   ( int port )  {  result . secure port = port ;  return this ;   }  ,85,3,set,1,[]
484,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set secure port,public  builder   ( int port )  {  result . secure port = port ;  return this ;   }  ,85,3,secure,2,[44]
485,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set secure port,public  builder   ( int port )  {  result . secure port = port ;  return this ;   }  ,85,3,port,3,"[24, 51, 58]"
486,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set securevip address,public  builder   ( final  string securevip address )  {  result . secure vip address unresolved = intern . apply ( securevip address )  ;  result . secure vip address = intern . apply ( vip address resolver . resolve deployment context based vip addresses ( securevip address )  )  ;  return this ;   }  ,305,3,set,1,[]
487,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set securevip address,public  builder   ( final  string securevip address )  {  result . secure vip address unresolved = intern . apply ( securevip address )  ;  result . secure vip address = intern . apply ( vip address resolver . resolve deployment context based vip addresses ( securevip address )  )  ;  return this ;   }  ,305,3,securevip,2,"[34, 116, 259]"
488,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set securevip address,public  builder   ( final  string securevip address )  {  result . secure vip address unresolved = intern . apply ( securevip address )  ;  result . secure vip address = intern . apply ( vip address resolver . resolve deployment context based vip addresses ( securevip address )  )  ;  return this ;   }  ,305,3,address,3,"[44, 78, 126, 160, 191, 247, 269]"
489,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set securevip address deser,public  builder   (  string securevip address )  {  result . secure vip address = intern . apply ( securevip address )  ;  return this ;   }  ,142,4,set,1,[]
490,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set securevip address deser,public  builder   (  string securevip address )  {  result . secure vip address = intern . apply ( securevip address )  ;  return this ;   }  ,142,4,securevip,2,"[28, 99]"
491,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set securevip address deser,public  builder   (  string securevip address )  {  result . secure vip address = intern . apply ( securevip address )  ;  return this ;   }  ,142,4,address,3,"[38, 72, 109]"
492,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set securevip address deser,public  builder   (  string securevip address )  {  result . secure vip address = intern . apply ( securevip address )  ;  return this ;   }  ,142,4,deser,4,[]
493,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set status,public synchronized  instance status   (  instance status status )  {  if  ( this . status  !  =  status )   {   instance status prev = this . status ;  this . status = status ;  set is dirty (  )  ;  return prev ;   }  return null ;   }  ,239,2,set,1,[179]
494,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set status,public synchronized  instance status   (  instance status status )  {  if  ( this . status  !  =  status )   {   instance status prev = this . status ;  this . status = status ;  set is dirty (  )  ;  return prev ;   }  return null ;   }  ,239,2,status,2,"[30, 51, 58, 84, 98, 122, 143, 160, 169]"
495,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set status page url,"public  builder   (  string relative url  string explicit url )  {   string host name interpolation expression = ""$ { ""  +  namespace  +  ""hostname } "" ;  result . status page relative url = relative url ;  result . status page explicit url = explicit url ;  if  ( explicit url  !  =  null )   {  result . status page url = explicit url . replace ( host name interpolation expression result . host name )  ;   }  else if  ( relative url  !  =  null )   {  result . status page url = http   protocol  +  result . host name  +  colon +  result . port +  relative url ;   }  return this ;   }  ",591,4,set,1,[]
496,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set status page url,"public  builder   (  string relative url  string explicit url )  {   string host name interpolation expression = ""$ { ""  +  namespace  +  ""hostname } "" ;  result . status page relative url = relative url ;  result . status page explicit url = explicit url ;  if  ( explicit url  !  =  null )   {  result . status page url = explicit url . replace ( host name interpolation expression result . host name )  ;   }  else if  ( relative url  !  =  null )   {  result . status page url = http   protocol  +  result . host name  +  colon +  result . port +  relative url ;   }  return this ;   }  ",591,4,status,2,"[164, 216, 306, 465]"
497,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set status page url,"public  builder   (  string relative url  string explicit url )  {   string host name interpolation expression = ""$ { ""  +  namespace  +  ""hostname } "" ;  result . status page relative url = relative url ;  result . status page explicit url = explicit url ;  if  ( explicit url  !  =  null )   {  result . status page url = explicit url . replace ( host name interpolation expression result . host name )  ;   }  else if  ( relative url  !  =  null )   {  result . status page url = http   protocol  +  result . host name  +  colon +  result . port +  relative url ;   }  return this ;   }  ",591,4,page,3,"[171, 223, 313, 472]"
498,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set status page url,"public  builder   (  string relative url  string explicit url )  {   string host name interpolation expression = ""$ { ""  +  namespace  +  ""hostname } "" ;  result . status page relative url = relative url ;  result . status page explicit url = explicit url ;  if  ( explicit url  !  =  null )   {  result . status page url = explicit url . replace ( host name interpolation expression result . host name )  ;   }  else if  ( relative url  !  =  null )   {  result . status page url = http   protocol  +  result . host name  +  colon +  result . port +  relative url ;   }  return this ;   }  ",591,4,url,4,"[37, 58, 185, 200, 237, 252, 274, 318, 333, 433, 477, 561]"
499,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set status page url for deser,public  builder   (  string status page url )  {  result . status page url = status page url ;  return this ;   }  ,115,6,set,1,[]
500,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set status page url for deser,public  builder   (  string status page url )  {  result . status page url = status page url ;  return this ;   }  ,115,6,status,2,"[28, 59, 77]"
501,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set status page url for deser,public  builder   (  string status page url )  {  result . status page url = status page url ;  return this ;   }  ,115,6,page,3,"[35, 66, 84]"
502,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set status page url for deser,public  builder   (  string status page url )  {  result . status page url = status page url ;  return this ;   }  ,115,6,url,4,"[40, 71, 89]"
503,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set status page url for deser,public  builder   (  string status page url )  {  result . status page url = status page url ;  return this ;   }  ,115,6,for,5,[]
504,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set status page url for deser,public  builder   (  string status page url )  {  result . status page url = status page url ;  return this ;   }  ,115,6,deser,6,[]
505,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set status without dirty,public synchronized void   (  instance status status )  {  if  ( this . status  !  =  status )   {  this . status = status ;   }   }  ,134,4,set,1,[]
506,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set status without dirty,public synchronized void   (  instance status status )  {  if  ( this . status  !  =  status )   {  this . status = status ;   }   }  ,134,4,status,2,"[39, 46, 72, 86, 107, 116]"
507,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set status without dirty,public synchronized void   (  instance status status )  {  if  ( this . status  !  =  status )   {  this . status = status ;   }   }  ,134,4,without,3,[]
508,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,set status without dirty,public synchronized void   (  instance status status )  {  if  ( this . status  !  =  status )   {  this . status = status ;   }   }  ,134,4,dirty,4,[]
509,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,setvip address,public  builder   ( final  string vip address )  {  result . vip address unresolved = intern . apply ( vip address )  ;  result . vip address = intern . apply ( vip address resolver . resolve deployment context based vip addresses ( vip address )  )  ;  return this ;   }  ,273,2,setvip,1,[]
510,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,setvip address,public  builder   ( final  string vip address )  {  result . vip address unresolved = intern . apply ( vip address )  ;  result . vip address = intern . apply ( vip address resolver . resolve deployment context based vip addresses ( vip address )  )  ;  return this ;   }  ,273,2,address,2,"[38, 65, 107, 134, 165, 221, 237]"
511,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,setvip address deser,public  builder   (  string vip address )  {  result . vip address = intern . apply ( vip address )  ;  return this ;   }  ,123,3,setvip,1,[]
512,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,setvip address deser,public  builder   (  string vip address )  {  result . vip address = intern . apply ( vip address )  ;  return this ;   }  ,123,3,address,2,"[32, 59, 90]"
513,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,setvip address deser,public  builder   (  string vip address )  {  result . vip address = intern . apply ( vip address )  ;  return this ;   }  ,123,3,deser,3,[]
514,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,to enum,"public static  instance status   (  string s )  {  if  ( s  !  =  null )   {  try  {  return  instance status . value of ( s . to upper case (  )  )  ;   }  catch  (   illegal argument exception e )   {  logger . debug ( ""illegal argument supplied to  instance status . value of:  {  }   defaulting to  {  } "" s unknown )  ;   }   }  return unknown ;   }  ",356,2,to,1,"[127, 248, 299]"
515,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,to enum,"public static  instance status   (  string s )  {  if  ( s  !  =  null )   {  try  {  return  instance status . value of ( s . to upper case (  )  )  ;   }  catch  (   illegal argument exception e )   {  logger . debug ( ""illegal argument supplied to  instance status . value of:  {  }   defaulting to  {  } "" s unknown )  ;   }   }  return unknown ;   }  ",356,2,enum,2,[]
516,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,unset is dirty,public synchronized void   ( long unset dirty timestamp )  {  if  ( last dirty timestamp  <  =  unset dirty timestamp )   {  is instance info dirty = false ;   }  else  {   }   }  ,180,3,unset,1,"[34, 96]"
517,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,unset is dirty,public synchronized void   ( long unset dirty timestamp )  {  if  ( last dirty timestamp  <  =  unset dirty timestamp )   {  is instance info dirty = false ;   }  else  {   }   }  ,180,3,is,2,[125]
518,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,unset is dirty,public synchronized void   ( long unset dirty timestamp )  {  if  ( last dirty timestamp  <  =  unset dirty timestamp )   {  is instance info dirty = false ;   }  else  {   }   }  ,180,3,dirty,3,"[40, 73, 102, 142]"
519,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\providers\Archaius1VipAddressResolver.java,resolve deployment context based vip addresses,@ override public  string   (  string vip address macro )  {  if  ( vip address macro  =  =  null )   {  return null ;   }   string result = vip address macro ;   matcher matcher = vip   attributes   pattern . matcher ( result )  ;  while  ( matcher . fin,255,6,resolve,1,[]
520,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\providers\Archaius1VipAddressResolver.java,resolve deployment context based vip addresses,@ override public  string   (  string vip address macro )  {  if  ( vip address macro  =  =  null )   {  return null ;   }   string result = vip address macro ;   matcher matcher = vip   attributes   pattern . matcher ( result )  ;  while  ( matcher . fin,255,6,deployment,2,[]
521,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\providers\Archaius1VipAddressResolver.java,resolve deployment context based vip addresses,@ override public  string   (  string vip address macro )  {  if  ( vip address macro  =  =  null )   {  return null ;   }   string result = vip address macro ;   matcher matcher = vip   attributes   pattern . matcher ( result )  ;  while  ( matcher . fin,255,6,context,3,[]
522,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\providers\Archaius1VipAddressResolver.java,resolve deployment context based vip addresses,@ override public  string   (  string vip address macro )  {  if  ( vip address macro  =  =  null )   {  return null ;   }   string result = vip address macro ;   matcher matcher = vip   attributes   pattern . matcher ( result )  ;  while  ( matcher . fin,255,6,based,4,[]
523,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\providers\Archaius1VipAddressResolver.java,resolve deployment context based vip addresses,@ override public  string   (  string vip address macro )  {  if  ( vip address macro  =  =  null )   {  return null ;   }   string result = vip address macro ;   matcher matcher = vip   attributes   pattern . matcher ( result )  ;  while  ( matcher . fin,255,6,vip,5,"[38, 68, 141, 181]"
524,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\providers\Archaius1VipAddressResolver.java,resolve deployment context based vip addresses,@ override public  string   (  string vip address macro )  {  if  ( vip address macro  =  =  null )   {  return null ;   }   string result = vip address macro ;   matcher matcher = vip   attributes   pattern . matcher ( result )  ;  while  ( matcher . fin,255,6,addresses,6,[]
525,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java, properties instance config,"public   (  string namespace  data center info info )  {  super ( info )  ;  this . namespace = namespace . ends with ( "" . "" )   ?  namespace : namespace  +  "" . "" ;  app grp name from env =  configuration manager . get config instance (  )  . get string ( fallback   app   group   key  values . unknown   application )  ;  this . config instance =  archaius1 utils . init config (  common constants . config   file   name )  ;   }  ",434,3,properties,1,[]
526,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java, properties instance config,"public   (  string namespace  data center info info )  {  super ( info )  ;  this . namespace = namespace . ends with ( "" . "" )   ?  namespace : namespace  +  "" . "" ;  app grp name from env =  configuration manager . get config instance (  )  . get string ( fallback   app   group   key  values . unknown   application )  ;  this . config instance =  archaius1 utils . init config (  common constants . config   file   name )  ;   }  ",434,3,instance,2,"[228, 339]"
527,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java, properties instance config,"public   (  string namespace  data center info info )  {  super ( info )  ;  this . namespace = namespace . ends with ( "" . "" )   ?  namespace : namespace  +  "" . "" ;  app grp name from env =  configuration manager . get config instance (  )  . get string ( fallback   app   group   key  values . unknown   application )  ;  this . config instance =  archaius1 utils . init config (  common constants . config   file   name )  ;   }  ",434,3,config,3,"[193, 221, 332, 374, 403]"
528,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,getasg name,@ override public  string   (  )  {  return config instance . get string property ( namespace  +  asg   name   key super . getasg name (  )  )  . get (  )  ;   }  ,163,2,getasg,1,[123]
529,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,getasg name,@ override public  string   (  )  {  return config instance . get string property ( namespace  +  asg   name   key super . getasg name (  )  )  . get (  )  ;   }  ,163,2,name,2,"[84, 104, 130]"
530,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,get app group name,@ override public  string   (  )  {  return config instance . get string property ( namespace  +  app   group   key app grp name from env )  . get (  )  . trim (  )  ;   }  ,173,4,get,1,"[62, 143]"
531,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,get app group name,@ override public  string   (  )  {  return config instance . get string property ( namespace  +  app   group   key app grp name from env )  . get (  )  . trim (  )  ;   }  ,173,4,app,2,"[98, 116]"
532,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,get app group name,@ override public  string   (  )  {  return config instance . get string property ( namespace  +  app   group   key app grp name from env )  . get (  )  . trim (  )  ;   }  ,173,4,group,3,[104]
533,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,get app group name,@ override public  string   (  )  {  return config instance . get string property ( namespace  +  app   group   key app grp name from env )  . get (  )  . trim (  )  ;   }  ,173,4,name,4,"[84, 124]"
534,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,get appname,@ override public  string   (  )  {  return config instance . get string property ( namespace  +  app   name   key  values . unknown   application )  . get (  )  . trim (  )  ;   }  ,182,2,get,1,"[62, 152]"
535,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,get appname,@ override public  string   (  )  {  return config instance . get string property ( namespace  +  app   name   key  values . unknown   application )  . get (  )  . trim (  )  ;   }  ,182,2,appname,2,[]
536,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,get default address resolution order,"@ override public  string[]   (  )  {   string result = config instance . get string property ( namespace  +  default   address   resolution   order   key null )  . get (  )  ;  return result  =  =  null  ?  new  string[0] : result . split ( "" "" )  ;   } ",255,5,get,1,"[74, 165]"
537,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,get default address resolution order,"@ override public  string[]   (  )  {   string result = config instance . get string property ( namespace  +  default   address   resolution   order   key null )  . get (  )  ;  return result  =  =  null  ?  new  string[0] : result . split ( "" "" )  ;   } ",255,5,default,2,[110]
538,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,get default address resolution order,"@ override public  string[]   (  )  {   string result = config instance . get string property ( namespace  +  default   address   resolution   order   key null )  . get (  )  ;  return result  =  =  null  ?  new  string[0] : result . split ( "" "" )  ;   } ",255,5,address,3,[120]
539,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,get default address resolution order,"@ override public  string[]   (  )  {   string result = config instance . get string property ( namespace  +  default   address   resolution   order   key null )  . get (  )  ;  return result  =  =  null  ?  new  string[0] : result . split ( "" "" )  ;   } ",255,5,resolution,4,[130]
540,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,get default address resolution order,"@ override public  string[]   (  )  {   string result = config instance . get string property ( namespace  +  default   address   resolution   order   key null )  . get (  )  ;  return result  =  =  null  ?  new  string[0] : result . split ( "" "" )  ;   } ",255,5,order,5,[143]
541,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,get health check url,@ override public  string   (  )  {  return config instance . get string property ( namespace  +  healthcheck   url   key null )  . get (  )  ;   }  ,149,4,get,1,"[62, 132]"
542,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,get health check url,@ override public  string   (  )  {  return config instance . get string property ( namespace  +  healthcheck   url   key null )  . get (  )  ;   }  ,149,4,health,2,[98]
543,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,get health check url,@ override public  string   (  )  {  return config instance . get string property ( namespace  +  healthcheck   url   key null )  . get (  )  ;   }  ,149,4,check,3,[104]
544,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,get health check url,@ override public  string   (  )  {  return config instance . get string property ( namespace  +  healthcheck   url   key null )  . get (  )  ;   }  ,149,4,url,4,[112]
545,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,get health check url path,@ override public  string   (  )  {  return config instance . get string property ( namespace  +  healthcheck   url   path   key  values . default   healthcheck   urlpath )  . get (  )  ;   }  ,193,5,get,1,"[62, 176]"
546,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,get health check url path,@ override public  string   (  )  {  return config instance . get string property ( namespace  +  healthcheck   url   path   key  values . default   healthcheck   urlpath )  . get (  )  ;   }  ,193,5,health,2,"[98, 149]"
547,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,get health check url path,@ override public  string   (  )  {  return config instance . get string property ( namespace  +  healthcheck   url   path   key  values . default   healthcheck   urlpath )  . get (  )  ;   }  ,193,5,check,3,"[104, 155]"
548,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,get health check url path,@ override public  string   (  )  {  return config instance . get string property ( namespace  +  healthcheck   url   path   key  values . default   healthcheck   urlpath )  . get (  )  ;   }  ,193,5,url,4,"[112, 163]"
549,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,get health check url path,@ override public  string   (  )  {  return config instance . get string property ( namespace  +  healthcheck   url   path   key  values . default   healthcheck   urlpath )  . get (  )  ;   }  ,193,5,path,5,"[118, 166]"
550,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,get home page url,@ override public  string   (  )  {  return config instance . get string property ( namespace  +  home   page   url   key null )  . get (  )  ;   }  ,149,4,get,1,"[62, 132]"
551,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,get home page url,@ override public  string   (  )  {  return config instance . get string property ( namespace  +  home   page   url   key null )  . get (  )  ;   }  ,149,4,home,2,[98]
552,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,get home page url,@ override public  string   (  )  {  return config instance . get string property ( namespace  +  home   page   url   key null )  . get (  )  ;   }  ,149,4,page,3,[105]
553,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,get home page url,@ override public  string   (  )  {  return config instance . get string property ( namespace  +  home   page   url   key null )  . get (  )  ;   }  ,149,4,url,4,[112]
554,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,get home page url path,@ override public  string   (  )  {  return config instance . get string property ( namespace  +  home   page   url   path   key  values . default   homepage   urlpath )  . get (  )  ;   }  ,190,5,get,1,"[62, 173]"
555,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,get home page url path,@ override public  string   (  )  {  return config instance . get string property ( namespace  +  home   page   url   path   key  values . default   homepage   urlpath )  . get (  )  ;   }  ,190,5,home,2,"[98, 149]"
556,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,get home page url path,@ override public  string   (  )  {  return config instance . get string property ( namespace  +  home   page   url   path   key  values . default   homepage   urlpath )  . get (  )  ;   }  ,190,5,page,3,"[105, 153]"
557,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,get home page url path,@ override public  string   (  )  {  return config instance . get string property ( namespace  +  home   page   url   path   key  values . default   homepage   urlpath )  . get (  )  ;   }  ,190,5,url,4,"[112, 160]"
558,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,get home page url path,@ override public  string   (  )  {  return config instance . get string property ( namespace  +  home   page   url   path   key  values . default   homepage   urlpath )  . get (  )  ;   }  ,190,5,path,5,"[118, 163]"
559,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,get instance id,@ override public  string   (  )  {   string result = config instance . get string property ( namespace  +  instance   id   key null )  . get (  )  ;  return result  =  =  null  ?  null : result . trim (  )  ;   }  ,215,3,get,1,"[72, 138]"
560,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,get instance id,@ override public  string   (  )  {   string result = config instance . get string property ( namespace  +  instance   id   key null )  . get (  )  ;  return result  =  =  null  ?  null : result . trim (  )  ;   }  ,215,3,instance,2,"[61, 108]"
561,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,get instance id,@ override public  string   (  )  {   string result = config instance . get string property ( namespace  +  instance   id   key null )  . get (  )  ;  return result  =  =  null  ?  null : result . trim (  )  ;   }  ,215,3,id,3,"[7, 119]"
562,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,get ip address,public  string   (  )  {  return super . get ip address (  )  ;   }  ,69,3,get,1,[41]
563,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,get ip address,public  string   (  )  {  return super . get ip address (  )  ;   }  ,69,3,ip,2,[45]
564,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,get ip address,public  string   (  )  {  return super . get ip address (  )  ;   }  ,69,3,address,3,[48]
565,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,get lease expiration duration in seconds,@ override public int   (  )  {  return config instance . get int property ( namespace  +  lease   expiration   duration   key super . get lease expiration duration in seconds (  )  )  . get (  )  ;   }  ,204,6,get,1,"[58, 135, 187]"
566,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,get lease expiration duration in seconds,@ override public int   (  )  {  return config instance . get int property ( namespace  +  lease   expiration   duration   key super . get lease expiration duration in seconds (  )  )  . get (  )  ;   }  ,204,6,lease,2,"[91, 139]"
567,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,get lease expiration duration in seconds,@ override public int   (  )  {  return config instance . get int property ( namespace  +  lease   expiration   duration   key super . get lease expiration duration in seconds (  )  )  . get (  )  ;   }  ,204,6,expiration,3,"[99, 145]"
568,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,get lease expiration duration in seconds,@ override public int   (  )  {  return config instance . get int property ( namespace  +  lease   expiration   duration   key super . get lease expiration duration in seconds (  )  )  . get (  )  ;   }  ,204,6,duration,4,"[112, 156]"
569,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,get lease expiration duration in seconds,@ override public int   (  )  {  return config instance . get int property ( namespace  +  lease   expiration   duration   key super . get lease expiration duration in seconds (  )  )  . get (  )  ;   }  ,204,6,in,5,"[18, 47, 62, 165]"
570,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,get lease expiration duration in seconds,@ override public int   (  )  {  return config instance . get int property ( namespace  +  lease   expiration   duration   key super . get lease expiration duration in seconds (  )  )  . get (  )  ;   }  ,204,6,seconds,6,[168]
571,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,get lease renewal interval in seconds,@ override public int   (  )  {  return config instance . get int property ( namespace  +  lease   renewal   interval   key super . get lease renewal interval in seconds (  )  )  . get (  )  ;   }  ,198,6,get,1,"[58, 132, 181]"
572,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,get lease renewal interval in seconds,@ override public int   (  )  {  return config instance . get int property ( namespace  +  lease   renewal   interval   key super . get lease renewal interval in seconds (  )  )  . get (  )  ;   }  ,198,6,lease,2,"[91, 136]"
573,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,get lease renewal interval in seconds,@ override public int   (  )  {  return config instance . get int property ( namespace  +  lease   renewal   interval   key super . get lease renewal interval in seconds (  )  )  . get (  )  ;   }  ,198,6,renewal,3,"[99, 142]"
574,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,get lease renewal interval in seconds,@ override public int   (  )  {  return config instance . get int property ( namespace  +  lease   renewal   interval   key super . get lease renewal interval in seconds (  )  )  . get (  )  ;   }  ,198,6,interval,4,"[109, 150]"
575,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,get lease renewal interval in seconds,@ override public int   (  )  {  return config instance . get int property ( namespace  +  lease   renewal   interval   key super . get lease renewal interval in seconds (  )  )  . get (  )  ;   }  ,198,6,in,5,"[18, 47, 62, 109, 150, 159]"
576,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,get lease renewal interval in seconds,@ override public int   (  )  {  return config instance . get int property ( namespace  +  lease   renewal   interval   key super . get lease renewal interval in seconds (  )  )  . get (  )  ;   }  ,198,6,seconds,6,[162]
577,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,get metadata map,"@ override public  map <  string  string >    (  )  {   string metadata namespace = namespace  +  instance   metadata   prefix  +  "" . "" ;   map <  string  string >  metadata map = new  linked hash map <  string  string >  (  )  ;   configuration config =",255,3,get,1,[]
578,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,get metadata map,"@ override public  map <  string  string >    (  )  {   string metadata namespace = namespace  +  instance   metadata   prefix  +  "" . "" ;   map <  string  string >  metadata map = new  linked hash map <  string  string >  (  )  ;   configuration config =",255,3,metadata,2,"[63, 109, 166]"
579,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,get metadata map,"@ override public  map <  string  string >    (  )  {   string metadata namespace = namespace  +  instance   metadata   prefix  +  "" . "" ;   map <  string  string >  metadata map = new  linked hash map <  string  string >  (  )  ;   configuration config =",255,3,map,3,"[19, 141, 175, 198]"
580,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,get name,@ override public  name   (  )  {  return  name .  my own ;   }  ,65,2,get,1,[]
581,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,get name,@ override public  name   (  )  {  return  name .  my own ;   }  ,65,2,name,2,"[19, 43]"
582,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,get namespace,@ override public  string   (  )  {  return this . namespace ;   }  ,68,2,get,1,[]
583,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,get namespace,@ override public  string   (  )  {  return this . namespace ;   }  ,68,2,namespace,2,[51]
584,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,get non secure port,@ override public int   (  )  {  return config instance . get int property ( namespace  +  port   key super . get non secure port (  )  )  . get (  )  ;   }  ,158,4,get,1,"[58, 110, 141]"
585,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,get non secure port,@ override public int   (  )  {  return config instance . get int property ( namespace  +  port   key super . get non secure port (  )  )  . get (  )  ;   }  ,158,4,non,2,[114]
586,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,get non secure port,@ override public int   (  )  {  return config instance . get int property ( namespace  +  port   key super . get non secure port (  )  )  . get (  )  ;   }  ,158,4,secure,3,[118]
587,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,get non secure port,@ override public int   (  )  {  return config instance . get int property ( namespace  +  port   key super . get non secure port (  )  )  . get (  )  ;   }  ,158,4,port,4,"[91, 125]"
588,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,get secure health check url,@ override public  string   (  )  {  return config instance . get string property ( namespace  +  secure   healthcheck   url   key null )  . get (  )  ;   }  ,158,5,get,1,"[62, 141]"
589,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,get secure health check url,@ override public  string   (  )  {  return config instance . get string property ( namespace  +  secure   healthcheck   url   key null )  . get (  )  ;   }  ,158,5,secure,2,[98]
590,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,get secure health check url,@ override public  string   (  )  {  return config instance . get string property ( namespace  +  secure   healthcheck   url   key null )  . get (  )  ;   }  ,158,5,health,3,[107]
591,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,get secure health check url,@ override public  string   (  )  {  return config instance . get string property ( namespace  +  secure   healthcheck   url   key null )  . get (  )  ;   }  ,158,5,check,4,[113]
592,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,get secure health check url,@ override public  string   (  )  {  return config instance . get string property ( namespace  +  secure   healthcheck   url   key null )  . get (  )  ;   }  ,158,5,url,5,[121]
593,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,get secure port,@ override public int   (  )  {  return config instance . get int property ( namespace  +  secure   port   key super . get secure port (  )  )  . get (  )  ;   }  ,163,3,get,1,"[58, 119, 146]"
594,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,get secure port,@ override public int   (  )  {  return config instance . get int property ( namespace  +  secure   port   key super . get secure port (  )  )  . get (  )  ;   }  ,163,3,secure,2,"[91, 123]"
595,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,get secure port,@ override public int   (  )  {  return config instance . get int property ( namespace  +  secure   port   key super . get secure port (  )  )  . get (  )  ;   }  ,163,3,port,3,"[100, 130]"
596,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,get secure port enabled,@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  secure   port   enabled   key super . get secure port enabled (  )  )  . get (  )  ;   }  ,189,4,get,1,"[62, 137, 172]"
597,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,get secure port enabled,@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  secure   port   enabled   key super . get secure port enabled (  )  )  . get (  )  ;   }  ,189,4,secure,2,"[99, 141]"
598,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,get secure port enabled,@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  secure   port   enabled   key super . get secure port enabled (  )  )  . get (  )  ;   }  ,189,4,port,3,"[108, 148]"
599,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,get secure port enabled,@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  secure   port   enabled   key super . get secure port enabled (  )  )  . get (  )  ;   }  ,189,4,enabled,4,"[115, 153]"
600,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,get secure virtual host name,@ override public  string   (  )  {  if  ( this . get secure port enabled (  )  )   {  return config instance . get string property ( namespace  +  secure   virtual   hostname   key super . get secure virtual host name (  )  )  . get (  )  ;   }  else  { ,255,5,get,1,"[50, 112, 190, 230]"
601,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,get secure virtual host name,@ override public  string   (  )  {  if  ( this . get secure port enabled (  )  )   {  return config instance . get string property ( namespace  +  secure   virtual   hostname   key super . get secure virtual host name (  )  )  . get (  )  ;   }  else  { ,255,5,secure,2,"[54, 148, 194]"
602,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,get secure virtual host name,@ override public  string   (  )  {  if  ( this . get secure port enabled (  )  )   {  return config instance . get string property ( namespace  +  secure   virtual   hostname   key super . get secure virtual host name (  )  )  . get (  )  ;   }  else  { ,255,5,virtual,3,"[157, 201]"
603,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,get secure virtual host name,@ override public  string   (  )  {  if  ( this . get secure port enabled (  )  )   {  return config instance . get string property ( namespace  +  secure   virtual   hostname   key super . get secure virtual host name (  )  )  . get (  )  ;   }  else  { ,255,5,host,4,"[167, 209]"
604,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,get secure virtual host name,@ override public  string   (  )  {  if  ( this . get secure port enabled (  )  )   {  return config instance . get string property ( namespace  +  secure   virtual   hostname   key super . get secure virtual host name (  )  )  . get (  )  ;   }  else  { ,255,5,name,5,"[134, 171, 214]"
605,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,get status page url,@ override public  string   (  )  {  return config instance . get string property ( namespace  +  status   page   url   key null )  . get (  )  ;   }  ,151,4,get,1,"[62, 134]"
606,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,get status page url,@ override public  string   (  )  {  return config instance . get string property ( namespace  +  status   page   url   key null )  . get (  )  ;   }  ,151,4,status,2,[98]
607,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,get status page url,@ override public  string   (  )  {  return config instance . get string property ( namespace  +  status   page   url   key null )  . get (  )  ;   }  ,151,4,page,3,[107]
608,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,get status page url,@ override public  string   (  )  {  return config instance . get string property ( namespace  +  status   page   url   key null )  . get (  )  ;   }  ,151,4,url,4,[114]
609,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,get status page url path,@ override public  string   (  )  {  return config instance . get string property ( namespace  +  status   page   url   path   key  values . default   statuspage   urlpath )  . get (  )  ;   }  ,194,5,get,1,"[62, 177]"
610,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,get status page url path,@ override public  string   (  )  {  return config instance . get string property ( namespace  +  status   page   url   path   key  values . default   statuspage   urlpath )  . get (  )  ;   }  ,194,5,status,2,"[98, 151]"
611,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,get status page url path,@ override public  string   (  )  {  return config instance . get string property ( namespace  +  status   page   url   path   key  values . default   statuspage   urlpath )  . get (  )  ;   }  ,194,5,page,3,"[107, 157]"
612,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,get status page url path,@ override public  string   (  )  {  return config instance . get string property ( namespace  +  status   page   url   path   key  values . default   statuspage   urlpath )  . get (  )  ;   }  ,194,5,url,4,"[114, 164]"
613,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,get status page url path,@ override public  string   (  )  {  return config instance . get string property ( namespace  +  status   page   url   path   key  values . default   statuspage   urlpath )  . get (  )  ;   }  ,194,5,path,5,"[120, 167]"
614,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,get virtual host name,@ override public  string   (  )  {  if  ( this . is non secure port enabled (  )  )   {  return config instance . get string property ( namespace  +  virtual   hostname   key super . get virtual host name (  )  )  . get (  )  ;   }  else  {  return null ,255,4,get,1,"[115, 184, 217]"
615,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,get virtual host name,@ override public  string   (  )  {  if  ( this . is non secure port enabled (  )  )   {  return config instance . get string property ( namespace  +  virtual   hostname   key super . get virtual host name (  )  )  . get (  )  ;   }  else  {  return null ,255,4,virtual,2,"[151, 188]"
616,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,get virtual host name,@ override public  string   (  )  {  if  ( this . is non secure port enabled (  )  )   {  return config instance . get string property ( namespace  +  virtual   hostname   key super . get virtual host name (  )  )  . get (  )  ;   }  else  {  return null ,255,4,host,3,"[161, 196]"
617,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,get virtual host name,@ override public  string   (  )  {  if  ( this . is non secure port enabled (  )  )   {  return config instance . get string property ( namespace  +  virtual   hostname   key super . get virtual host name (  )  )  . get (  )  ;   }  else  {  return null ,255,4,name,4,"[137, 165, 201]"
618,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,is instance enabled onit,@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  traffic   enabled   on   init   key super . is instance enabled onit (  )  )  . get (  )  ;   }  ,196,4,is,1,[143]
619,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,is instance enabled onit,@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  traffic   enabled   on   init   key super . is instance enabled onit (  )  )  . get (  )  ;   }  ,196,4,instance,2,"[51, 146]"
620,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,is instance enabled onit,@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  traffic   enabled   on   init   key super . is instance enabled onit (  )  )  . get (  )  ;   }  ,196,4,enabled,3,"[109, 155]"
621,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,is instance enabled onit,@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  traffic   enabled   on   init   key super . is instance enabled onit (  )  )  . get (  )  ;   }  ,196,4,onit,4,[163]
622,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,is non secure port enabled,@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  port   enabled   key super . is non secure port enabled (  )  )  . get (  )  ;   }  ,183,5,is,1,[128]
623,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,is non secure port enabled,@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  port   enabled   key super . is non secure port enabled (  )  )  . get (  )  ;   }  ,183,5,non,2,[131]
624,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,is non secure port enabled,@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  port   enabled   key super . is non secure port enabled (  )  )  . get (  )  ;   }  ,183,5,secure,3,[135]
625,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,is non secure port enabled,@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  port   enabled   key super . is non secure port enabled (  )  )  . get (  )  ;   }  ,183,5,port,4,"[99, 142]"
626,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,is non secure port enabled,@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  port   enabled   key super . is non secure port enabled (  )  )  . get (  )  ;   }  ,183,5,enabled,5,"[106, 147]"
627,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\providers\CloudInstanceConfigProvider.java,get,@ override public synchronized  cloud instance config   (  )  {  if  ( config  =  =  null )   {  if  ( namespace  =  =  null )   {  config = new  cloud instance config (  )  ;   }  else  {  config = new  cloud instance config ( namespace )  ;   }   discov,255,1,get,1,[]
628,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\providers\EurekaConfigBasedInstanceInfoProvider.java, eureka config based instance info provider,@ inject public   (  eureka instance config config )  {  this . config = config ;   }  ,87,6,eureka,1,[21]
629,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\providers\EurekaConfigBasedInstanceInfoProvider.java, eureka config based instance info provider,@ inject public   (  eureka instance config config )  {  this . config = config ;   }  ,87,6,config,2,"[37, 44, 64, 73]"
630,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\providers\EurekaConfigBasedInstanceInfoProvider.java, eureka config based instance info provider,@ inject public   (  eureka instance config config )  {  this . config = config ;   }  ,87,6,based,3,[]
631,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\providers\EurekaConfigBasedInstanceInfoProvider.java, eureka config based instance info provider,@ inject public   (  eureka instance config config )  {  this . config = config ;   }  ,87,6,instance,4,[28]
632,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\providers\EurekaConfigBasedInstanceInfoProvider.java, eureka config based instance info provider,@ inject public   (  eureka instance config config )  {  this . config = config ;   }  ,87,6,info,5,[]
633,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\providers\EurekaConfigBasedInstanceInfoProvider.java, eureka config based instance info provider,@ inject public   (  eureka instance config config )  {  this . config = config ;   }  ,87,6,provider,6,[]
634,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\providers\EurekaConfigBasedInstanceInfoProvider.java,get,@ override public synchronized  instance info   (  )  {  if  ( instance info  =  =  null )   {   lease info .  builder lease info builder =  lease info .  builder . new builder (  )  . set renewal interval in secs ( config . get lease renewal interval in ,255,1,get,1,[225]
635,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\providers\MyDataCenterInstanceConfigProvider.java,get,@ override public synchronized  my data center instance config   (  )  {  if  ( config  =  =  null )   {  if  ( namespace  =  =  null )   {  config = new  my data center instance config (  )  ;   }  else  {  config = new  my data center instance config ( ,255,1,get,1,[]
636,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\RefreshableAmazonInfoProvider.java, refreshable amazon info provider,  (  amazon info initial info  amazon info config amazon info config )  {  this . amazon info config = amazon info config ;  this . info = initial info ;   }  ,159,4,refreshable,1,[]
637,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\RefreshableAmazonInfoProvider.java, refreshable amazon info provider,  (  amazon info initial info  amazon info config amazon info config )  {  this . amazon info config = amazon info config ;  this . info = initial info ;   }  ,159,4,amazon,2,"[5, 31, 50, 82, 103]"
638,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\RefreshableAmazonInfoProvider.java, refreshable amazon info provider,  (  amazon info initial info  amazon info config amazon info config )  {  this . amazon info config = amazon info config ;  this . info = initial info ;   }  ,159,4,info,3,"[12, 25, 38, 57, 89, 110, 132, 147]"
639,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\RefreshableAmazonInfoProvider.java, refreshable amazon info provider,  (  amazon info initial info  amazon info config amazon info config )  {  this . amazon info config = amazon info config ;  this . info = initial info ;   }  ,159,4,provider,4,[]
640,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\RefreshableAmazonInfoProvider.java,get,@ override public  amazon info   (  )  {  return info ;   }  ,61,1,get,1,[]
641,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\AbstractDiscoveryClientOptionalArgs.java,get event listeners, set <  eureka event listener >    (  )  {  return event listeners  =  =  null  ?   collections .  <  eureka event listener > empty set (  )  : event listeners ;   }  ,167,3,get,1,[]
642,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\AbstractDiscoveryClientOptionalArgs.java,get event listeners, set <  eureka event listener >    (  )  {  return event listeners  =  =  null  ?   collections .  <  eureka event listener > empty set (  )  : event listeners ;   }  ,167,3,event,2,"[15, 51, 109, 144]"
643,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\AbstractDiscoveryClientOptionalArgs.java,get event listeners, set <  eureka event listener >    (  )  {  return event listeners  =  =  null  ?   collections .  <  eureka event listener > empty set (  )  : event listeners ;   }  ,167,3,listeners,3,"[57, 150]"
644,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\AbstractDiscoveryClientOptionalArgs.java,get hostname verifier,public  optional <  hostname verifier >    (  )  {  return hostname verifier ;   }  ,84,3,get,1,[]
645,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\AbstractDiscoveryClientOptionalArgs.java,get hostname verifier,public  optional <  hostname verifier >    (  )  {  return hostname verifier ;   }  ,84,3,hostname,2,"[20, 59]"
646,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\AbstractDiscoveryClientOptionalArgs.java,get hostname verifier,public  optional <  hostname verifier >    (  )  {  return hostname verifier ;   }  ,84,3,verifier,3,"[29, 68]"
647,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\AbstractDiscoveryClientOptionalArgs.java,getssl context,public  optional < ssl context >    (  )  {  return ssl context ;   }  ,71,2,getssl,1,[]
648,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\AbstractDiscoveryClientOptionalArgs.java,getssl context,public  optional < ssl context >    (  )  {  return ssl context ;   }  ,71,2,context,2,"[23, 56]"
649,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\AbstractDiscoveryClientOptionalArgs.java,get transport client factories,public  transport client factories   (  )  {  return transport client factories ;   }  ,87,4,get,1,[]
650,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\AbstractDiscoveryClientOptionalArgs.java,get transport client factories,public  transport client factories   (  )  {  return transport client factories ;   }  ,87,4,transport,2,"[8, 53]"
651,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\AbstractDiscoveryClientOptionalArgs.java,get transport client factories,public  transport client factories   (  )  {  return transport client factories ;   }  ,87,4,client,3,"[18, 63]"
652,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\AbstractDiscoveryClientOptionalArgs.java,get transport client factories,public  transport client factories   (  )  {  return transport client factories ;   }  ,87,4,factories,4,"[25, 70]"
653,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\AbstractDiscoveryClientOptionalArgs.java,on event,@ override public void   (  eureka event event )  {  event bus . publish ( event )  ;   }  ,91,2,on,1,[]
654,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\AbstractDiscoveryClientOptionalArgs.java,on event,@ override public void   (  eureka event event )  {  event bus . publish ( event )  ;   }  ,91,2,event,2,"[35, 41, 53, 75]"
655,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\AbstractDiscoveryClientOptionalArgs.java,set additional filters,@ inject ( optional = true )  public void   (  collection < t >  additional filters )  {  this . additional filters = additional filters ;   }  ,144,3,set,1,[]
656,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\AbstractDiscoveryClientOptionalArgs.java,set additional filters,@ inject ( optional = true )  public void   (  collection < t >  additional filters )  {  this . additional filters = additional filters ;   }  ,144,3,additional,2,"[65, 97, 118]"
657,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\AbstractDiscoveryClientOptionalArgs.java,set additional filters,@ inject ( optional = true )  public void   (  collection < t >  additional filters )  {  this . additional filters = additional filters ;   }  ,144,3,filters,3,"[76, 108, 129]"
658,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\AbstractDiscoveryClientOptionalArgs.java,set eureka jersey client,@ inject ( optional = true )  public void   (  eureka jersey client eureka jersey client )  {  this . eureka jersey client = eureka jersey client ;   }  ,153,4,set,1,[]
659,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\AbstractDiscoveryClientOptionalArgs.java,set eureka jersey client,@ inject ( optional = true )  public void   (  eureka jersey client eureka jersey client )  {  this . eureka jersey client = eureka jersey client ;   }  ,153,4,eureka,2,"[47, 68, 102, 125]"
660,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\AbstractDiscoveryClientOptionalArgs.java,set eureka jersey client,@ inject ( optional = true )  public void   (  eureka jersey client eureka jersey client )  {  this . eureka jersey client = eureka jersey client ;   }  ,153,4,jersey,3,"[54, 75, 109, 132]"
661,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\AbstractDiscoveryClientOptionalArgs.java,set eureka jersey client,@ inject ( optional = true )  public void   (  eureka jersey client eureka jersey client )  {  this . eureka jersey client = eureka jersey client ;   }  ,153,4,client,4,"[61, 82, 116, 139]"
662,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\AbstractDiscoveryClientOptionalArgs.java,set event bus,@ inject ( optional = true )  public void   ( final  event bus event bus )  {  if  ( event listeners  =  =  null )   {  event listeners = new  hash set <  >  (  )  ;   }  event listeners . add ( new  eureka event listener (  )  {  @ override public void o,255,3,set,1,[148]
663,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\AbstractDiscoveryClientOptionalArgs.java,set event bus,@ inject ( optional = true )  public void   ( final  event bus event bus )  {  if  ( event listeners  =  =  null )   {  event listeners = new  hash set <  >  (  )  ;   }  event listeners . add ( new  eureka event listener (  )  {  @ override public void o,255,3,event,2,"[53, 63, 85, 120, 171, 207]"
664,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\AbstractDiscoveryClientOptionalArgs.java,set event bus,@ inject ( optional = true )  public void   ( final  event bus event bus )  {  if  ( event listeners  =  =  null )   {  event listeners = new  hash set <  >  (  )  ;   }  event listeners . add ( new  eureka event listener (  )  {  @ override public void o,255,3,bus,3,"[59, 69]"
665,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\AbstractDiscoveryClientOptionalArgs.java,set event listeners,@ inject ( optional = true )  public void   (  set <  eureka event listener >  listeners )  {  if  ( event listeners  =  =  null )   {  event listeners = new  hash set <  >  (  )  ;   }  event listeners . add all ( listeners )  ;   }  ,235,3,set,1,"[47, 164]"
666,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\AbstractDiscoveryClientOptionalArgs.java,set event listeners,@ inject ( optional = true )  public void   (  set <  eureka event listener >  listeners )  {  if  ( event listeners  =  =  null )   {  event listeners = new  hash set <  >  (  )  ;   }  event listeners . add all ( listeners )  ;   }  ,235,3,event,2,"[61, 101, 136, 187]"
667,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\AbstractDiscoveryClientOptionalArgs.java,set event listeners,@ inject ( optional = true )  public void   (  set <  eureka event listener >  listeners )  {  if  ( event listeners  =  =  null )   {  event listeners = new  hash set <  >  (  )  ;   }  event listeners . add all ( listeners )  ;   }  ,235,3,listeners,3,"[79, 107, 142, 193, 215]"
668,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\AbstractDiscoveryClientOptionalArgs.java,set health check callback provider,@ inject ( optional = true )  public void   (  provider <  health check callback >  health check callback provider )  {  this . health check callback provider = health check callback provider ;   }  ,199,5,set,1,[]
669,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\AbstractDiscoveryClientOptionalArgs.java,set health check callback provider,@ inject ( optional = true )  public void   (  provider <  health check callback >  health check callback provider )  {  this . health check callback provider = health check callback provider ;   }  ,199,5,health,2,"[59, 84, 128, 161]"
670,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\AbstractDiscoveryClientOptionalArgs.java,set health check callback provider,@ inject ( optional = true )  public void   (  provider <  health check callback >  health check callback provider )  {  this . health check callback provider = health check callback provider ;   }  ,199,5,check,3,"[66, 91, 135, 168]"
671,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\AbstractDiscoveryClientOptionalArgs.java,set health check callback provider,@ inject ( optional = true )  public void   (  provider <  health check callback >  health check callback provider )  {  this . health check callback provider = health check callback provider ;   }  ,199,5,callback,4,"[72, 97, 141, 174]"
672,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\AbstractDiscoveryClientOptionalArgs.java,set health check callback provider,@ inject ( optional = true )  public void   (  provider <  health check callback >  health check callback provider )  {  this . health check callback provider = health check callback provider ;   }  ,199,5,provider,5,"[47, 106, 150, 183]"
673,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\AbstractDiscoveryClientOptionalArgs.java,set health check handler provider,@ inject ( optional = true )  public void   (  provider <  health check handler >  health check handler provider )  {  this . health check handler provider = health check handler provider ;   }  ,195,5,set,1,[]
674,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\AbstractDiscoveryClientOptionalArgs.java,set health check handler provider,@ inject ( optional = true )  public void   (  provider <  health check handler >  health check handler provider )  {  this . health check handler provider = health check handler provider ;   }  ,195,5,health,2,"[59, 83, 126, 158]"
675,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\AbstractDiscoveryClientOptionalArgs.java,set health check handler provider,@ inject ( optional = true )  public void   (  provider <  health check handler >  health check handler provider )  {  this . health check handler provider = health check handler provider ;   }  ,195,5,check,3,"[66, 90, 133, 165]"
676,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\AbstractDiscoveryClientOptionalArgs.java,set health check handler provider,@ inject ( optional = true )  public void   (  provider <  health check handler >  health check handler provider )  {  this . health check handler provider = health check handler provider ;   }  ,195,5,handler,4,"[72, 96, 139, 171]"
677,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\AbstractDiscoveryClientOptionalArgs.java,set health check handler provider,@ inject ( optional = true )  public void   (  provider <  health check handler >  health check handler provider )  {  this . health check handler provider = health check handler provider ;   }  ,195,5,provider,5,"[47, 104, 147, 179]"
678,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\AbstractDiscoveryClientOptionalArgs.java,set hostname verifier,@ inject ( optional = true )  public void   (  hostname verifier hostname verifier )  {  this . hostname verifier =  optional . of ( hostname verifier )  ;   }  ,161,3,set,1,[]
679,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\AbstractDiscoveryClientOptionalArgs.java,set hostname verifier,@ inject ( optional = true )  public void   (  hostname verifier hostname verifier )  {  this . hostname verifier =  optional . of ( hostname verifier )  ;   }  ,161,3,hostname,2,"[47, 65, 96, 133]"
680,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\AbstractDiscoveryClientOptionalArgs.java,set hostname verifier,@ inject ( optional = true )  public void   (  hostname verifier hostname verifier )  {  this . hostname verifier =  optional . of ( hostname verifier )  ;   }  ,161,3,verifier,3,"[56, 74, 105, 142]"
681,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\AbstractDiscoveryClientOptionalArgs.java,set pre registration handler,@ inject ( optional = true )  public void   (  pre registration handler pre registration handler )  {  this . pre registration handler = pre registration handler ;   }  ,169,4,set,1,[]
682,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\AbstractDiscoveryClientOptionalArgs.java,set pre registration handler,@ inject ( optional = true )  public void   (  pre registration handler pre registration handler )  {  this . pre registration handler = pre registration handler ;   }  ,169,4,pre,2,"[47, 72, 110, 137]"
683,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\AbstractDiscoveryClientOptionalArgs.java,set pre registration handler,@ inject ( optional = true )  public void   (  pre registration handler pre registration handler )  {  this . pre registration handler = pre registration handler ;   }  ,169,4,registration,3,"[51, 76, 114, 141]"
684,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\AbstractDiscoveryClientOptionalArgs.java,set pre registration handler,@ inject ( optional = true )  public void   (  pre registration handler pre registration handler )  {  this . pre registration handler = pre registration handler ;   }  ,169,4,handler,4,"[64, 89, 127, 154]"
685,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\AbstractDiscoveryClientOptionalArgs.java,setssl context,@ inject ( optional = true )  public void   ( ssl context ssl context )  {  this . ssl context =  optional . of ( ssl context )  ;   }  ,136,2,setssl,1,[]
686,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\AbstractDiscoveryClientOptionalArgs.java,setssl context,@ inject ( optional = true )  public void   ( ssl context ssl context )  {  this . ssl context =  optional . of ( ssl context )  ;   }  ,136,2,context,2,"[50, 62, 87, 118]"
687,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\AbstractDiscoveryClientOptionalArgs.java,set transport client factories,@ inject ( optional = true )  public void   (  transport client factories transport client factories )  {  this . transport client factories = transport client factories ;   }  ,177,4,set,1,[]
688,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\AbstractDiscoveryClientOptionalArgs.java,set transport client factories,@ inject ( optional = true )  public void   (  transport client factories transport client factories )  {  this . transport client factories = transport client factories ;   }  ,177,4,transport,2,"[47, 74, 114, 143]"
689,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\AbstractDiscoveryClientOptionalArgs.java,set transport client factories,@ inject ( optional = true )  public void   (  transport client factories transport client factories )  {  this . transport client factories = transport client factories ;   }  ,177,4,client,3,"[57, 84, 124, 153]"
690,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\AbstractDiscoveryClientOptionalArgs.java,set transport client factories,@ inject ( optional = true )  public void   (  transport client factories transport client factories )  {  this . transport client factories = transport client factories ;   }  ,177,4,factories,4,"[64, 91, 131, 160]"
691,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\AbstractAzToRegionMapper.java, abstract az to region mapper,protected   (  eureka client config client config )  {  this . client config = client config ;  populate defaultaz to region map (  )  ;   }  ,142,5,abstract,1,[]
692,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\AbstractAzToRegionMapper.java, abstract az to region mapper,protected   (  eureka client config client config )  {  this . client config = client config ;  populate defaultaz to region map (  )  ;   }  ,142,5,az,2,[112]
693,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\AbstractAzToRegionMapper.java, abstract az to region mapper,protected   (  eureka client config client config )  {  this . client config = client config ;  populate defaultaz to region map (  )  ;   }  ,142,5,to,3,[115]
694,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\AbstractAzToRegionMapper.java, abstract az to region mapper,protected   (  eureka client config client config )  {  this . client config = client config ;  populate defaultaz to region map (  )  ;   }  ,142,5,region,4,[118]
695,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\AbstractAzToRegionMapper.java, abstract az to region mapper,protected   (  eureka client config client config )  {  this . client config = client config ;  populate defaultaz to region map (  )  ;   }  ,142,5,mapper,5,[]
696,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\AbstractAzToRegionMapper.java,get,@ override public  list <  string >    (  )  {  return new  array list <  string >  (  )  ;   }  ,97,1,get,1,[]
697,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\AbstractAzToRegionMapper.java,get region for availability zone,@ override public  string   (  string availability zone )  {   string region = availability zone vs region . get ( availability zone )  ;  if  ( null  =  =  region )   {  return parse az to get region ( availability zone )  ;   }  return region ;   }  ,252,5,get,1,"[109, 190]"
698,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\AbstractAzToRegionMapper.java,get region for availability zone,@ override public  string   (  string availability zone )  {   string region = availability zone vs region . get ( availability zone )  ;  if  ( null  =  =  region )   {  return parse az to get region ( availability zone )  ;   }  return region ;   }  ,252,5,region,2,"[70, 100, 157, 194, 238]"
699,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\AbstractAzToRegionMapper.java,get region for availability zone,@ override public  string   (  string availability zone )  {   string region = availability zone vs region . get ( availability zone )  ;  if  ( null  =  =  region )   {  return parse az to get region ( availability zone )  ;   }  return region ;   }  ,252,5,for,3,[]
700,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\AbstractAzToRegionMapper.java,get region for availability zone,@ override public  string   (  string availability zone )  {   string region = availability zone vs region . get ( availability zone )  ;  if  ( null  =  =  region )   {  return parse az to get region ( availability zone )  ;   }  return region ;   }  ,252,5,availability,4,"[38, 79, 115, 203]"
701,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\AbstractAzToRegionMapper.java,get region for availability zone,@ override public  string   (  string availability zone )  {   string region = availability zone vs region . get ( availability zone )  ;  if  ( null  =  =  region )   {  return parse az to get region ( availability zone )  ;   }  return region ;   }  ,252,5,zone,5,"[51, 92, 128, 216]"
702,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\CacheRefreshedEvent.java,to string,"@ override public  string   (  )  {  return "" cache refreshed event[timestamp = ""  +  get timestamp (  )   +  ""]"" ;   }  ",121,2,to,1,[]
703,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\CacheRefreshedEvent.java,to string,"@ override public  string   (  )  {  return "" cache refreshed event[timestamp = ""  +  get timestamp (  )   +  ""]"" ;   }  ",121,2,string,2,[19]
704,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EntityBodyConverter.java,getx stream instance,private x stream   (  media type media type )  {  x stream xstream = null ;  if  ( json . equals ignore case ( media type . get subtype (  )  )  )   {  xstream =  jsonx stream . get instance (  )  ;   }  else if  ( xml . equals ignore case ( media type . get subtype (  )  )  )   {  xstream =  xmlx stream . get instance (  )  ;   }  return xstream ;   }  ,356,3,getx,1,[]
705,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EntityBodyConverter.java,getx stream instance,private x stream   (  media type media type )  {  x stream xstream = null ;  if  ( json . equals ignore case ( media type . get subtype (  )  )  )   {  xstream =  jsonx stream . get instance (  )  ;   }  else if  ( xml . equals ignore case ( media type . get subtype (  )  )  )   {  xstream =  xmlx stream . get instance (  )  ;   }  return xstream ;   }  ,356,3,stream,2,"[10, 52, 60, 153, 169, 284, 299, 342]"
706,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EntityBodyConverter.java,getx stream instance,private x stream   (  media type media type )  {  x stream xstream = null ;  if  ( json . equals ignore case ( media type . get subtype (  )  )  )   {  xstream =  jsonx stream . get instance (  )  ;   }  else if  ( xml . equals ignore case ( media type . get subtype (  )  )  )   {  xstream =  xmlx stream . get instance (  )  ;   }  return xstream ;   }  ,356,3,instance,3,"[182, 312]"
707,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EntityBodyConverter.java,read,"public  object   (  input stream is  class type  media type media type )  throws io exception  {  x stream xstream = getx stream instance ( media type )  ;  if  ( xstream  !  =  null )   {  return xstream . fromxml ( is )  ;   }  else  {  throw new  illegal argument exception ( "" content - type: ""  +  media type . get type (  )   +  "" is currently not supported for "" +  type . get name (  )  )  ;   }   }  ",409,1,read,1,[]
708,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EntityBodyConverter.java,write,"public void   (  object object  output stream os  media type media type )  throws io exception  {  x stream xstream = getx stream instance ( media type )  ;  if  ( xstream  !  =  null )   {  xstream . toxml ( object os )  ;   }  else  {  throw new  illegal argument exception ( "" content - type: ""  +  media type . get type (  )   +  "" is currently not supported for "" +  object . get class (  )  . get name (  )  )  ;   }   }  ",428,1,write,1,[]
709,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EnumLookup.java, enum lookup,"@ suppress warnings ( ""unchecked"" )    (  class < t >  enum type  function < t char[] >  namer )  {  this . sorted values =  ( t[] )  array . new instance ( enum type enum type . get enum constants (  )  . length )  ;   system . arraycopy ( enum type . ge",255,2,enum,1,"[55, 157, 167, 183, 241]"
710,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EnumLookup.java, enum lookup,"@ suppress warnings ( ""unchecked"" )    (  class < t >  enum type  function < t char[] >  namer )  {  this . sorted values =  ( t[] )  array . new instance ( enum type enum type . get enum constants (  )  . length )  ;   system . arraycopy ( enum type . ge",255,2,lookup,2,[]
711,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EnumLookup.java,equals,public static boolean   ( char[] a1 char[] a2 int a2 offset int a2 length )  {  if  ( a1 . length  !  =  a2 length )  return false ;  for  ( int i = 0 ;  i  <  a2 length ;  i +  +  )   {  if  ( a1[i]  !  =  a2[i  +  a2 offset] )  return false ;   }  return true ;   }  ,269,1,equals,1,[]
712,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EnumLookup.java,find,public t   ( char[] a int offset int length t default value )  {  if  ( length  <  this . min length || length  >  this . max length )  return default value ;  int hash = hash code ( a offset length )  ;  int index =  arrays . binary search ( sorted hashes hash )  ;  if  ( index  >  =  0 )   {  for  ( int i = index ;  i  <  sorted values . length && sorted hashes[index]  =  =  hash ;  i +  +  )   {  if  ( equals ( sorted names[i] a offset length )  )   {  return sorted values[i] ;   }   }   }  return default value ;   }  ,527,1,find,1,[]
713,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EnumLookup.java,hash code,public static int   ( char[] a int offset int length )  {  if  ( a  =  =  null )  return 0 ;  int result = 1 ;  for  ( int i = 0 ;  i  <  length ;  i +  +  )   {  result = 31 * result  +  a[i  +  offset] ;   }  return result ;   }  ,232,2,hash,1,[]
714,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EnumLookup.java,hash code,public static int   ( char[] a int offset int length )  {  if  ( a  =  =  null )  return 0 ;  int result = 1 ;  for  ( int i = 0 ;  i  <  length ;  i +  +  )   {  result = 31 * result  +  a[i  +  offset] ;   }  return result ;   }  ,232,2,code,2,[]
715,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\AbstractEurekaJacksonCodec.java,add mini config,protected void   (  object mapper mapper )  {  mapper . add mix in (  instance info . class  mini instance info mix in . class )  ;  bind amazon info filter ( mapper )  ;   }  ,176,3,add,1,[56]
716,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\AbstractEurekaJacksonCodec.java,add mini config,protected void   (  object mapper mapper )  {  mapper . add mix in (  instance info . class  mini instance info mix in . class )  ;  bind amazon info filter ( mapper )  ;   }  ,176,3,mini,2,[93]
717,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\AbstractEurekaJacksonCodec.java,add mini config,protected void   (  object mapper mapper )  {  mapper . add mix in (  instance info . class  mini instance info mix in . class )  ;  bind amazon info filter ( mapper )  ;   }  ,176,3,config,3,[]
718,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\AbstractEurekaJacksonCodec.java,bind amazon info filter,"private void   (  object mapper mapper )  {   simple filter provider filters = new  simple filter provider (  )  ;  final  string filter name = ""exclude - amazon - info - entries"" ;  mapper . set annotation introspector ( new  jackson annotation introspector (  )  {  @ override public  object find filter id (   annotated a )  {  if  (  map . class . is assignable from ( a . get raw type (  )  )  )   {  return filter name ;   }  return super . find filter id ( a )  ;   }   }   )  ;  filters . add filter ( filter name new  simple bean property filter (  )  {  @ override protected boolean include (   bean property writer writer )  {  return true ;   }  @ override protected boolean include (   property writer writer )  {  return mini   amazon   info   include   keys . contains ( writer . get name (  )  )  ;   }   }   )  ;  mapper . set filters ( filters )  ;   }  ",872,4,bind,1,[]
719,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\AbstractEurekaJacksonCodec.java,bind amazon info filter,"private void   (  object mapper mapper )  {   simple filter provider filters = new  simple filter provider (  )  ;  final  string filter name = ""exclude - amazon - info - entries"" ;  mapper . set annotation introspector ( new  jackson annotation introspector (  )  {  @ override public  object find filter id (   annotated a )  {  if  (  map . class . is assignable from ( a . get raw type (  )  )  )   {  return filter name ;   }  return super . find filter id ( a )  ;   }   }   )  ;  filters . add filter ( filter name new  simple bean property filter (  )  {  @ override protected boolean include (   bean property writer writer )  {  return true ;   }  @ override protected boolean include (   property writer writer )  {  return mini   amazon   info   include   keys . contains ( writer . get name (  )  )  ;   }   }   )  ;  mapper . set filters ( filters )  ;   }  ",872,4,amazon,2,"[155, 742]"
720,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\AbstractEurekaJacksonCodec.java,bind amazon info filter,"private void   (  object mapper mapper )  {   simple filter provider filters = new  simple filter provider (  )  ;  final  string filter name = ""exclude - amazon - info - entries"" ;  mapper . set annotation introspector ( new  jackson annotation introspector (  )  {  @ override public  object find filter id (   annotated a )  {  if  (  map . class . is assignable from ( a . get raw type (  )  )  )   {  return filter name ;   }  return super . find filter id ( a )  ;   }   }   )  ;  filters . add filter ( filter name new  simple bean property filter (  )  {  @ override protected boolean include (   bean property writer writer )  {  return true ;   }  @ override protected boolean include (   property writer writer )  {  return mini   amazon   info   include   keys . contains ( writer . get name (  )  )  ;   }   }   )  ;  mapper . set filters ( filters )  ;   }  ",872,4,info,3,"[164, 751]"
721,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\AbstractEurekaJacksonCodec.java,bind amazon info filter,"private void   (  object mapper mapper )  {   simple filter provider filters = new  simple filter provider (  )  ;  final  string filter name = ""exclude - amazon - info - entries"" ;  mapper . set annotation introspector ( new  jackson annotation introspector (  )  {  @ override public  object find filter id (   annotated a )  {  if  (  map . class . is assignable from ( a . get raw type (  )  )  )   {  return filter name ;   }  return super . find filter id ( a )  ;   }   }   )  ;  filters . add filter ( filter name new  simple bean property filter (  )  {  @ override protected boolean include (   bean property writer writer )  {  return true ;   }  @ override protected boolean include (   property writer writer )  {  return mini   amazon   info   include   keys . contains ( writer . get name (  )  )  ;   }   }   )  ;  mapper . set filters ( filters )  ;   }  ",872,4,filter,4,"[53, 69, 91, 130, 299, 413, 452, 487, 501, 510, 548, 844, 854]"
722,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\AbstractEurekaJacksonCodec.java,find filter id,@ override public  object   (  annotated a )  {  if  (  map . class . is assignable from ( a . get raw type (  )  )  )   {  return filter name ;   }  return super . find filter id ( a )  ;   }  ,194,3,find,1,[165]
723,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\AbstractEurekaJacksonCodec.java,find filter id,@ override public  object   (  annotated a )  {  if  (  map . class . is assignable from ( a . get raw type (  )  )  )   {  return filter name ;   }  return super . find filter id ( a )  ;   }  ,194,3,filter,2,"[131, 170]"
724,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\AbstractEurekaJacksonCodec.java,find filter id,@ override public  object   (  annotated a )  {  if  (  map . class . is assignable from ( a . get raw type (  )  )  )   {  return filter name ;   }  return super . find filter id ( a )  ;   }  ,194,3,id,3,"[7, 177]"
725,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\Converters.java,auto marshal eligible,"private static void   (  object o  hierarchical stream writer writer )  {  try  {   class c = o . get class (  )  ;   field[] fields = c . get declared fields (  )  ;   annotation annotation = null ;  for  (   field f : fields )   {  annotation = f . get annotation (  auto . class )  ;  if  ( annotation  !  =  null )   {  f . set accessible ( true )  ;  if  ( f . get ( o )   !  =  null )   {  writer . start node ( f . get name (  )  )  ;  writer . set value (  string . value of ( f . get ( o )  )  )  ;  writer . end node (  )  ;   }   }   }   }  catch  (   throwable th )   {  logger . error ( "" error in marshalling the object"" th )  ;   }   }  ",652,3,auto,1,[269]
726,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\Converters.java,auto marshal eligible,"private static void   (  object o  hierarchical stream writer writer )  {  try  {   class c = o . get class (  )  ;   field[] fields = c . get declared fields (  )  ;   annotation annotation = null ;  for  (   field f : fields )   {  annotation = f . get annotation (  auto . class )  ;  if  ( annotation  !  =  null )   {  f . set accessible ( true )  ;  if  ( f . get ( o )   !  =  null )   {  writer . start node ( f . get name (  )  )  ;  writer . set value (  string . value of ( f . get ( o )  )  )  ;  writer . end node (  )  ;   }   }   }   }  catch  (   throwable th )   {  logger . error ( "" error in marshalling the object"" th )  ;   }   }  ",652,3,marshal,2,[611]
727,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\Converters.java,auto marshal eligible,"private static void   (  object o  hierarchical stream writer writer )  {  try  {   class c = o . get class (  )  ;   field[] fields = c . get declared fields (  )  ;   annotation annotation = null ;  for  (   field f : fields )   {  annotation = f . get annotation (  auto . class )  ;  if  ( annotation  !  =  null )   {  f . set accessible ( true )  ;  if  ( f . get ( o )   !  =  null )   {  writer . start node ( f . get name (  )  )  ;  writer . set value (  string . value of ( f . get ( o )  )  )  ;  writer . end node (  )  ;   }   }   }   }  catch  (   throwable th )   {  logger . error ( "" error in marshalling the object"" th )  ;   }   }  ",652,3,eligible,3,[]
728,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\Converters.java,auto unmarshal eligible,"private static void   (  hierarchical stream reader reader  object o )  {  try  {   string node name = reader . get node name (  )  ;   class c = o . get class (  )  ;   field f = null ;  try  {  f = c . get declared field ( node name )  ;   }  catch  (   no such field exception e )   {  unmarshall   error   counter . increment (  )  ;   }  if  ( f  =  =  null )   {  return ;   }   annotation annotation = f . get annotation (  auto . class )  ;  if  ( annotation  =  =  null )   {  return ;   }  f . set accessible ( true )  ;   string value = reader . get value (  )  ;   class return class = f . get type (  )  ;  if  ( value  !  =  null )   {  if  (  !  string . class . equals ( return class )  )   {   method method = return class . get declared method ( ""value of"" java . lang .  string . class )  ;   object value object = method . invoke ( return class value )  ;  f . set ( o value object )  ;   }  else  {  f . set ( o value )  ;   }   }   }  catch  (   throwable th )   {  logger . error ( "" error in unmarshalling the object:"" th )  ;   }   }  ",1060,3,auto,1,[431]
729,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\Converters.java,auto unmarshal eligible,"private static void   (  hierarchical stream reader reader  object o )  {  try  {   string node name = reader . get node name (  )  ;   class c = o . get class (  )  ;   field f = null ;  try  {  f = c . get declared field ( node name )  ;   }  catch  (   no such field exception e )   {  unmarshall   error   counter . increment (  )  ;   }  if  ( f  =  =  null )   {  return ;   }   annotation annotation = f . get annotation (  auto . class )  ;  if  ( annotation  =  =  null )   {  return ;   }  f . set accessible ( true )  ;   string value = reader . get value (  )  ;   class return class = f . get type (  )  ;  if  ( value  !  =  null )   {  if  (  !  string . class . equals ( return class )  )   {   method method = return class . get declared method ( ""value of"" java . lang .  string . class )  ;   object value object = method . invoke ( return class value )  ;  f . set ( o value object )  ;   }  else  {  f . set ( o value )  ;   }   }   }  catch  (   throwable th )   {  logger . error ( "" error in unmarshalling the object:"" th )  ;   }   }  ",1060,3,unmarshal,2,"[289, 1016]"
730,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\Converters.java,auto unmarshal eligible,"private static void   (  hierarchical stream reader reader  object o )  {  try  {   string node name = reader . get node name (  )  ;   class c = o . get class (  )  ;   field f = null ;  try  {  f = c . get declared field ( node name )  ;   }  catch  (   no such field exception e )   {  unmarshall   error   counter . increment (  )  ;   }  if  ( f  =  =  null )   {  return ;   }   annotation annotation = f . get annotation (  auto . class )  ;  if  ( annotation  =  =  null )   {  return ;   }  f . set accessible ( true )  ;   string value = reader . get value (  )  ;   class return class = f . get type (  )  ;  if  ( value  !  =  null )   {  if  (  !  string . class . equals ( return class )  )   {   method method = return class . get declared method ( ""value of"" java . lang .  string . class )  ;   object value object = method . invoke ( return class value )  ;  f . set ( o value object )  ;   }  else  {  f . set ( o value )  ;   }   }   }  catch  (   throwable th )   {  logger . error ( "" error in unmarshalling the object:"" th )  ;   }   }  ",1060,3,eligible,3,[]
731,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\Converters.java,can convert,"@ override public boolean   ( @ suppress warnings ( ""rawtypes"" )   class type )  {  return  map . class . is assignable from ( type )  ;   }  ",142,2,can,1,[]
732,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\Converters.java,can convert,"@ override public boolean   ( @ suppress warnings ( ""rawtypes"" )   class type )  {  return  map . class . is assignable from ( type )  ;   }  ",142,2,convert,2,[]
733,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\Converters.java,get name,@ override public  name   (  )  {  return name ;   }  ,54,2,get,1,[]
734,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\Converters.java,get name,@ override public  name   (  )  {  return name ;   }  ,54,2,name,2,"[19, 42]"
735,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\Converters.java,get status,public  string   (  instance info info )  {  return info . get status (  )  . name (  )  ;   }  ,96,2,get,1,[59]
736,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\Converters.java,get status,public  string   (  instance info info )  {  return info . get status (  )  . name (  )  ;   }  ,96,2,status,2,[63]
737,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\Converters.java,marshal,"@ override @ suppress warnings ( ""unchecked"" )  public void   (  object source  hierarchical stream writer writer  marshalling context context )  {   map <  string  string >  map =  (  map <  string  string >  ) source ;  for  (  iterator <  entry <  stri",255,1,marshal,1,[115]
738,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\Converters.java,unmarshal,@ override public  object   (  hierarchical stream reader reader  unmarshalling context context )  {  return unmarshal map ( reader context )  ;   }  ,150,1,unmarshal,1,"[66, 109]"
739,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\Converters.java,unmarshal map,private  map <  string  string >    (  hierarchical stream reader reader  unmarshalling context context )  {   map <  string  string >  map =  collections . empty map (  )  ;  while  ( reader . has more children (  )  )   {  if  ( map  =  =   collections . empty   map )   {  map = new  hash map <  string  string >  (  )  ;   }  reader . move down (  )  ;   string key = reader . get node name (  )  ;   string value = reader . get value (  )  ;  reader . move up (  )  ;  map . put (  string cache . intern ( key )  value )  ;   }  return map ;   }  ,552,2,unmarshal,1,[74]
740,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\Converters.java,unmarshal map,private  map <  string  string >    (  hierarchical stream reader reader  unmarshalling context context )  {   map <  string  string >  map =  collections . empty map (  )  ;  while  ( reader . has more children (  )  )   {  if  ( map  =  =   collections . empty   map )   {  map = new  hash map <  string  string >  (  )  ;   }  reader . move down (  )  ;   string key = reader . get node name (  )  ;   string value = reader . get value (  )  ;  reader . move up (  )  ;  map . put (  string cache . intern ( key )  value )  ;   }  return map ;   }  ,552,2,map,2,"[9, 111, 136, 163, 231, 265, 276, 292, 474, 541]"
741,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EurekaJacksonCodec.java, application deserializer,public   (  object mapper mapper )  {  this . mapper = mapper ;   }  ,69,2,application,1,[]
742,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EurekaJacksonCodec.java, application deserializer,public   (  object mapper mapper )  {  this . mapper = mapper ;   }  ,69,2,deserializer,2,[]
743,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EurekaJacksonCodec.java, application field,private   (  string name )  {  this . field name = name . to char array (  )  ;   }  ,85,2,application,1,[]
744,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EurekaJacksonCodec.java, application field,private   (  string name )  {  this . field name = name . to char array (  )  ;   }  ,85,2,field,2,[38]
745,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EurekaJacksonCodec.java, applications deserializer,public   (  object mapper mapper  string version delta key  string app hash code key )  {  this . mapper = mapper ;  this . version delta key = version delta key ;  this . app hash code key = app hash code key ;   }  ,217,2,applications,1,[]
746,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EurekaJacksonCodec.java, applications deserializer,public   (  object mapper mapper  string version delta key  string app hash code key )  {  this . mapper = mapper ;  this . version delta key = version delta key ;  this . app hash code key = app hash code key ;   }  ,217,2,deserializer,2,[]
747,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EurekaJacksonCodec.java, applications serializer,public   (  string version delta key  string app hash code key )  {  this . version delta key = version delta key ;  this . app hash code key = app hash code key ;   }  ,169,2,applications,1,[]
748,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EurekaJacksonCodec.java, applications serializer,public   (  string version delta key  string app hash code key )  {  this . version delta key = version delta key ;  this . app hash code key = app hash code key ;   }  ,169,2,serializer,2,[]
749,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EurekaJacksonCodec.java, eureka jackson codec,"public   (  string version delta key  string apps hash code key )  {  this . version delta key = version delta key ;  this . app hash code key = apps hash code key ;  this . mapper = new  object mapper (  )  ;  this . mapper . set serialization inclusion (  include . non   null )  ;   simple module module = new  simple module ( ""eureka1 . x"" version )  ;  module . add serializer (  data center info . class new  data center info serializer (  )  )  ;  module . add serializer (  instance info . class new  instance info serializer (  )  )  ;  module . add serializer (  application . class new  application serializer (  )  )  ;  module . add serializer (  applications . class new  applications serializer ( this . version delta key this . app hash code key )  )  ;  module . add deserializer (  lease info . class new  lease info deserializer (  )  )  ;  module . add deserializer (  instance info . class new  instance info deserializer ( this . mapper )  )  ;  module . add deserializer (  application . class new  application deserializer ( this . mapper )  )  ;  module . add deserializer (  applications . class new  applications deserializer ( this . mapper this . version delta key this . app hash code key )  )  ;  this . mapper . register module ( module )  ;   map <  class <  ?  >   supplier <  object reader >  >  readers = new  hash map <  >  (  )  ;  readers . put (  instance info . class  (  )   -  >  mapper . reader (  )  . for type (  instance info . class )  . with root name ( ""instance"" )  )  ;  readers . put (  application . class  (  )   -  >  mapper . reader (  )  . for type (  application . class )  . with root name ( ""application"" )  )  ;  readers . put (  applications . class  (  )   -  >  mapper . reader (  )  . for type (  applications . class )  . with root name ( ""applications"" )  )  ;  this . object reader by class = readers ;   map <  class <  ?  >   object writer >  writers = new  hash map <  >  (  )  ;  writers . put (  instance info . class mapper . writer (  )  . for type (  instance info . class )  . with root name ( ""instance"" )  )  ;  writers . put (  application . class mapper . writer (  )  . for type (  application . class )  . with root name ( ""application"" )  )  ;  writers . put (  applications . class mapper . writer (  )  . for type (  applications . class )  . with root name ( ""applications"" )  )  ;  this . object writer by class = writers ;   }  ",2418,3,eureka,1,[331]
750,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EurekaJacksonCodec.java, eureka jackson codec,"public   (  string version delta key  string apps hash code key )  {  this . version delta key = version delta key ;  this . app hash code key = apps hash code key ;  this . mapper = new  object mapper (  )  ;  this . mapper . set serialization inclusion (  include . non   null )  ;   simple module module = new  simple module ( ""eureka1 . x"" version )  ;  module . add serializer (  data center info . class new  data center info serializer (  )  )  ;  module . add serializer (  instance info . class new  instance info serializer (  )  )  ;  module . add serializer (  application . class new  application serializer (  )  )  ;  module . add serializer (  applications . class new  applications serializer ( this . version delta key this . app hash code key )  )  ;  module . add deserializer (  lease info . class new  lease info deserializer (  )  )  ;  module . add deserializer (  instance info . class new  instance info deserializer ( this . mapper )  )  ;  module . add deserializer (  application . class new  application deserializer ( this . mapper )  )  ;  module . add deserializer (  applications . class new  applications deserializer ( this . mapper this . version delta key this . app hash code key )  )  ;  this . mapper . register module ( module )  ;   map <  class <  ?  >   supplier <  object reader >  >  readers = new  hash map <  >  (  )  ;  readers . put (  instance info . class  (  )   -  >  mapper . reader (  )  . for type (  instance info . class )  . with root name ( ""instance"" )  )  ;  readers . put (  application . class  (  )   -  >  mapper . reader (  )  . for type (  application . class )  . with root name ( ""application"" )  )  ;  readers . put (  applications . class  (  )   -  >  mapper . reader (  )  . for type (  applications . class )  . with root name ( ""applications"" )  )  ;  this . object reader by class = readers ;   map <  class <  ?  >   object writer >  writers = new  hash map <  >  (  )  ;  writers . put (  instance info . class mapper . writer (  )  . for type (  instance info . class )  . with root name ( ""instance"" )  )  ;  writers . put (  application . class mapper . writer (  )  . for type (  application . class )  . with root name ( ""application"" )  )  ;  writers . put (  applications . class mapper . writer (  )  . for type (  applications . class )  . with root name ( ""applications"" )  )  ;  this . object writer by class = writers ;   }  ",2418,3,jackson,2,[]
751,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EurekaJacksonCodec.java, eureka jackson codec,"public   (  string version delta key  string apps hash code key )  {  this . version delta key = version delta key ;  this . app hash code key = apps hash code key ;  this . mapper = new  object mapper (  )  ;  this . mapper . set serialization inclusion (  include . non   null )  ;   simple module module = new  simple module ( ""eureka1 . x"" version )  ;  module . add serializer (  data center info . class new  data center info serializer (  )  )  ;  module . add serializer (  instance info . class new  instance info serializer (  )  )  ;  module . add serializer (  application . class new  application serializer (  )  )  ;  module . add serializer (  applications . class new  applications serializer ( this . version delta key this . app hash code key )  )  ;  module . add deserializer (  lease info . class new  lease info deserializer (  )  )  ;  module . add deserializer (  instance info . class new  instance info deserializer ( this . mapper )  )  ;  module . add deserializer (  application . class new  application deserializer ( this . mapper )  )  ;  module . add deserializer (  applications . class new  applications deserializer ( this . mapper this . version delta key this . app hash code key )  )  ;  this . mapper . register module ( module )  ;   map <  class <  ?  >   supplier <  object reader >  >  readers = new  hash map <  >  (  )  ;  readers . put (  instance info . class  (  )   -  >  mapper . reader (  )  . for type (  instance info . class )  . with root name ( ""instance"" )  )  ;  readers . put (  application . class  (  )   -  >  mapper . reader (  )  . for type (  application . class )  . with root name ( ""application"" )  )  ;  readers . put (  applications . class  (  )   -  >  mapper . reader (  )  . for type (  applications . class )  . with root name ( ""applications"" )  )  ;  this . object reader by class = readers ;   map <  class <  ?  >   object writer >  writers = new  hash map <  >  (  )  ;  writers . put (  instance info . class mapper . writer (  )  . for type (  instance info . class )  . with root name ( ""instance"" )  )  ;  writers . put (  application . class mapper . writer (  )  . for type (  application . class )  . with root name ( ""application"" )  )  ;  writers . put (  applications . class mapper . writer (  )  . for type (  applications . class )  . with root name ( ""applications"" )  )  ;  this . object writer by class = writers ;   }  ",2418,3,codec,3,[]
752,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EurekaJacksonCodec.java, instance info deserializer,protected   (  object mapper mapper )  {  this . mapper = mapper ;   }  ,72,3,instance,1,[]
753,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EurekaJacksonCodec.java, instance info deserializer,protected   (  object mapper mapper )  {  this . mapper = mapper ;   }  ,72,3,info,2,[]
754,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EurekaJacksonCodec.java, instance info deserializer,protected   (  object mapper mapper )  {  this . mapper = mapper ;   }  ,72,3,deserializer,3,[]
755,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EurekaJacksonCodec.java, instance info field,private   (  string element name )  {  this . element name = element name . to char array (  )  ;   }  ,103,3,instance,1,[]
756,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EurekaJacksonCodec.java, instance info field,private   (  string element name )  {  this . element name = element name . to char array (  )  ;   }  ,103,3,info,2,[]
757,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EurekaJacksonCodec.java, instance info field,private   (  string element name )  {  this . element name = element name . to char array (  )  ;   }  ,103,3,field,3,[]
758,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EurekaJacksonCodec.java, lease info field,private   (  string field name )  {  this . field name = field name . to char array (  )  ;   }  ,97,3,lease,1,[]
759,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EurekaJacksonCodec.java, lease info field,private   (  string field name )  {  this . field name = field name . to char array (  )  ;   }  ,97,3,info,2,[]
760,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EurekaJacksonCodec.java, lease info field,private   (  string field name )  {  this . field name = field name . to char array (  )  ;   }  ,97,3,field,3,"[20, 44, 57]"
761,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EurekaJacksonCodec.java, port field,private   (  string name )  {  this . field name = name . to char array (  )  ;   }  ,85,2,port,1,[]
762,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EurekaJacksonCodec.java, port field,private   (  string name )  {  this . field name = name . to char array (  )  ;   }  ,85,2,field,2,[38]
763,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EurekaJacksonCodec.java,auto marshal eligible,"protected void   (  object o  json generator jgen )  {  try  {   class <  ?  >  c = o . get class (  )  ;   field[] fields = c . get declared fields (  )  ;   annotation annotation ;  for  (   field f : fields )   {  annotation = f . get annotation (  auto . class )  ;  if  ( annotation  !  =  null )   {  f . set accessible ( true )  ;  if  ( f . get ( o )   !  =  null )   {  jgen . write string field ( f . get name (  )   string . value of ( f . get ( o )  )  )  ;   }   }   }   }  catch  (   throwable th )   {  logger . error ( "" error in marshalling the object"" th )  ;   }   }  ",587,3,auto,1,[252]
764,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EurekaJacksonCodec.java,auto marshal eligible,"protected void   (  object o  json generator jgen )  {  try  {   class <  ?  >  c = o . get class (  )  ;   field[] fields = c . get declared fields (  )  ;   annotation annotation ;  for  (   field f : fields )   {  annotation = f . get annotation (  auto . class )  ;  if  ( annotation  !  =  null )   {  f . set accessible ( true )  ;  if  ( f . get ( o )   !  =  null )   {  jgen . write string field ( f . get name (  )   string . value of ( f . get ( o )  )  )  ;   }   }   }   }  catch  (   throwable th )   {  logger . error ( "" error in marshalling the object"" th )  ;   }   }  ",587,3,marshal,2,[546]
765,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EurekaJacksonCodec.java,auto marshal eligible,"protected void   (  object o  json generator jgen )  {  try  {   class <  ?  >  c = o . get class (  )  ;   field[] fields = c . get declared fields (  )  ;   annotation annotation ;  for  (   field f : fields )   {  annotation = f . get annotation (  auto . class )  ;  if  ( annotation  !  =  null )   {  f . set accessible ( true )  ;  if  ( f . get ( o )   !  =  null )   {  jgen . write string field ( f . get name (  )   string . value of ( f . get ( o )  )  )  ;   }   }   }   }  catch  (   throwable th )   {  logger . error ( "" error in marshalling the object"" th )  ;   }   }  ",587,3,eligible,3,[]
766,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EurekaJacksonCodec.java,auto unmarshal eligible,"void   (  string field name  string value  object o )  {  if  ( value  =  =  null || o  =  =  null )  return ;   class <  ?  >  c = o . get class (  )  ;   string cache key = c . get name (  )   +  "":""  +  field name ;   bi consumer <  object  string >  action = auto unmarshal actions . compute if absent ( cache key k  -  >   {  try  {   field f = null ;  try  {  f = c . get declared field ( field name )  ;   }  catch  (   no such field exception e )   {   }  if  ( f  =  =  null )   {  return  ( t v )   -  >   {   }   ;   }   annotation annotation = f . get annotation (  auto . class )  ;  if  ( annotation  =  =  null )   {  return  ( t v )   -  >   {   }   ;   }  f . set accessible ( true )  ;  final  field setter field = f ;   class <  ?  >  return class = setter field . get type (  )  ;  if  (  !  string . class . equals ( return class )  )   {   method method = return class . get declared method ( ""value of"" java . lang .  string . class )  ;  return  ( t v )   -  >  try catch log (  (  )   -  >   {  setter field . set ( t method . invoke ( return class v )  )  ;  return null ;   }   )  ;   }  else  {  return  ( t v )   -  >  try catch log (  (  )   -  >   {  setter field . set ( t v )  ;  return null ;   }   )  ;   }   }  catch  (   exception ex )   {  logger . error ( "" error in unmarshalling the object:"" ex )  ;  return null ;   }   }   )  ;  action . accept ( o value )  ;   }  ",1408,3,auto,1,"[263, 578]"
767,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EurekaJacksonCodec.java,auto unmarshal eligible,"void   (  string field name  string value  object o )  {  if  ( value  =  =  null || o  =  =  null )  return ;   class <  ?  >  c = o . get class (  )  ;   string cache key = c . get name (  )   +  "":""  +  field name ;   bi consumer <  object  string >  action = auto unmarshal actions . compute if absent ( cache key k  -  >   {  try  {   field f = null ;  try  {  f = c . get declared field ( field name )  ;   }  catch  (   no such field exception e )   {   }  if  ( f  =  =  null )   {  return  ( t v )   -  >   {   }   ;   }   annotation annotation = f . get annotation (  auto . class )  ;  if  ( annotation  =  =  null )   {  return  ( t v )   -  >   {   }   ;   }  f . set accessible ( true )  ;  final  field setter field = f ;   class <  ?  >  return class = setter field . get type (  )  ;  if  (  !  string . class . equals ( return class )  )   {   method method = return class . get declared method ( ""value of"" java . lang .  string . class )  ;  return  ( t v )   -  >  try catch log (  (  )   -  >   {  setter field . set ( t method . invoke ( return class v )  )  ;  return null ;   }   )  ;   }  else  {  return  ( t v )   -  >  try catch log (  (  )   -  >   {  setter field . set ( t v )  ;  return null ;   }   )  ;   }   }  catch  (   exception ex )   {  logger . error ( "" error in unmarshalling the object:"" ex )  ;  return null ;   }   }   )  ;  action . accept ( o value )  ;   }  ",1408,3,unmarshal,2,"[268, 1306]"
768,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EurekaJacksonCodec.java,auto unmarshal eligible,"void   (  string field name  string value  object o )  {  if  ( value  =  =  null || o  =  =  null )  return ;   class <  ?  >  c = o . get class (  )  ;   string cache key = c . get name (  )   +  "":""  +  field name ;   bi consumer <  object  string >  action = auto unmarshal actions . compute if absent ( cache key k  -  >   {  try  {   field f = null ;  try  {  f = c . get declared field ( field name )  ;   }  catch  (   no such field exception e )   {   }  if  ( f  =  =  null )   {  return  ( t v )   -  >   {   }   ;   }   annotation annotation = f . get annotation (  auto . class )  ;  if  ( annotation  =  =  null )   {  return  ( t v )   -  >   {   }   ;   }  f . set accessible ( true )  ;  final  field setter field = f ;   class <  ?  >  return class = setter field . get type (  )  ;  if  (  !  string . class . equals ( return class )  )   {   method method = return class . get declared method ( ""value of"" java . lang .  string . class )  ;  return  ( t v )   -  >  try catch log (  (  )   -  >   {  setter field . set ( t method . invoke ( return class v )  )  ;  return null ;   }   )  ;   }  else  {  return  ( t v )   -  >  try catch log (  (  )   -  >   {  setter field . set ( t v )  ;  return null ;   }   )  ;   }   }  catch  (   exception ex )   {  logger . error ( "" error in unmarshalling the object:"" ex )  ;  return null ;   }   }   )  ;  action . accept ( o value )  ;   }  ",1408,3,eligible,3,[]
769,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EurekaJacksonCodec.java,deserialize,"@ override public  applications   (  json parser jp  deserialization context context )  throws io exception  {  if  (  thread . current thread (  )  . is interrupted (  )  )   {  throw new  json parse exception ( jp ""processing aborted"" )  ;   }   applica",255,1,deserialize,1,[]
770,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EurekaJacksonCodec.java,format key,"protected static  string   (  eureka client config client config  string key template )  {   string replacement ;  if  ( client config  =  =  null )   {  replacement = ""      "" ;   }  else  {  replacement = client config . get escape char replacement (  )  ;   }   string builder sb = new  string builder ( key template . length (  )   +  1 )  ;  for  (  char c : key template . to char array (  )  )   {  if  ( c  =  =  '   ' )   {  sb . append ( replacement )  ;   }  else  {  sb . append ( c )  ;   }   }  return sb . to string (  )  ;   }  ",544,2,format,1,[]
771,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EurekaJacksonCodec.java,format key,"protected static  string   (  eureka client config client config  string key template )  {   string replacement ;  if  ( client config  =  =  null )   {  replacement = ""      "" ;   }  else  {  replacement = client config . get escape char replacement (  )  ;   }   string builder sb = new  string builder ( key template . length (  )   +  1 )  ;  for  (  char c : key template . to char array (  )  )   {  if  ( c  =  =  '   ' )   {  sb . append ( replacement )  ;   }  else  {  sb . append ( c )  ;   }   }  return sb . to string (  )  ;   }  ",544,2,key,2,"[73, 307, 364]"
772,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EurekaJacksonCodec.java,get app hash code key,protected  string   (  )  {  return app hash code key ;   }  ,61,5,get,1,[]
773,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EurekaJacksonCodec.java,get app hash code key,protected  string   (  )  {  return app hash code key ;   }  ,61,5,app,2,[36]
774,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EurekaJacksonCodec.java,get app hash code key,protected  string   (  )  {  return app hash code key ;   }  ,61,5,hash,3,[40]
775,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EurekaJacksonCodec.java,get app hash code key,protected  string   (  )  {  return app hash code key ;   }  ,61,5,code,4,[45]
776,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EurekaJacksonCodec.java,get app hash code key,protected  string   (  )  {  return app hash code key ;   }  ,61,5,key,5,[50]
777,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EurekaJacksonCodec.java,get element name,public char[]   (  )  {  return element name ;   }  ,52,3,get,1,[]
778,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EurekaJacksonCodec.java,get element name,public char[]   (  )  {  return element name ;   }  ,52,3,element,2,[32]
779,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EurekaJacksonCodec.java,get element name,public char[]   (  )  {  return element name ;   }  ,52,3,name,3,[40]
780,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EurekaJacksonCodec.java,get field name,public char[]   (  )  {  return field name ;   }  ,50,3,get,1,[]
781,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EurekaJacksonCodec.java,get field name,public char[]   (  )  {  return field name ;   }  ,50,3,field,2,[32]
782,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EurekaJacksonCodec.java,get field name,public char[]   (  )  {  return field name ;   }  ,50,3,name,3,[38]
783,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EurekaJacksonCodec.java,get instance,public static  eureka jackson codec   (  )  {  return instance ;   }  ,70,2,get,1,[]
784,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EurekaJacksonCodec.java,get instance,public static  eureka jackson codec   (  )  {  return instance ;   }  ,70,2,instance,2,[54]
785,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EurekaJacksonCodec.java,get mapper,protected  object mapper   (  )  {  return mapper ;   }  ,57,2,get,1,[]
786,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EurekaJacksonCodec.java,get mapper,protected  object mapper   (  )  {  return mapper ;   }  ,57,2,mapper,2,"[18, 43]"
787,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EurekaJacksonCodec.java,get version delta key,protected  string   (  )  {  return version delta key ;   }  ,61,4,get,1,[]
788,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EurekaJacksonCodec.java,get version delta key,protected  string   (  )  {  return version delta key ;   }  ,61,4,version,2,[36]
789,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EurekaJacksonCodec.java,get version delta key,protected  string   (  )  {  return version delta key ;   }  ,61,4,delta,3,[44]
790,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EurekaJacksonCodec.java,get version delta key,protected  string   (  )  {  return version delta key ;   }  ,61,4,key,4,[50]
791,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EurekaJacksonCodec.java,load config,static  eureka client config   (  )  {  return com . netflix . discovery .  discovery manager . get instance (  )  . get eureka client config (  )  ;   }  ,155,2,load,1,[]
792,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EurekaJacksonCodec.java,load config,static  eureka client config   (  )  {  return com . netflix . discovery .  discovery manager . get instance (  )  . get eureka client config (  )  ;   }  ,155,2,config,2,"[22, 135]"
793,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EurekaJacksonCodec.java,read value,public  < t > t   (  class < t >  type  string text )  throws io exception  {   object reader reader =  deserializer string cache . init (  optional . of nullable ( object reader by class . get ( type )  )  . map (  supplier::get )  . or else get (  (  )   -  >  mapper . reader for ( type )  )  )  ;  try  {  return reader . read value ( text )  ;   }  finally  {   deserializer string cache . clear ( reader  cache scope . global   scope )  ;   }   }  ,454,2,read,1,"[87, 94, 172, 272, 317, 326, 403]"
794,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EurekaJacksonCodec.java,read value,public  < t > t   (  class < t >  type  string text )  throws io exception  {   object reader reader =  deserializer string cache . init (  optional . of nullable ( object reader by class . get ( type )  )  . map (  supplier::get )  . or else get (  (  )   -  >  mapper . reader for ( type )  )  )  ;  try  {  return reader . read value ( text )  ;   }  finally  {   deserializer string cache . clear ( reader  cache scope . global   scope )  ;   }   }  ,454,2,value,2,[331]
795,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EurekaJacksonCodec.java,serialize,@ override public void   (  applications applications  json generator jgen  serializer provider provider )  throws io exception  {  jgen . write start object (  )  ;  jgen . write string field ( version delta key applications . get version (  )  . to stri,255,1,serialize,1,[76]
796,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EurekaJacksonCodec.java,serialize with type,@ override public void   (  data center info data center info  json generator jgen  serializer provider provider  type serializer type ser )  throws io exception   json processing exception  {  jgen . write start object (  )  ;  if  ( data center info . g,255,3,serialize,1,"[84, 119]"
797,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EurekaJacksonCodec.java,serialize with type,@ override public void   (  data center info data center info  json generator jgen  serializer provider provider  type serializer type ser )  throws io exception   json processing exception  {  jgen . write start object (  )  ;  if  ( data center info . g,255,3,with,2,[]
798,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EurekaJacksonCodec.java,serialize with type,@ override public void   (  data center info data center info  json generator jgen  serializer provider provider  type serializer type ser )  throws io exception   json processing exception  {  jgen . write start object (  )  ;  if  ( data center info . g,255,3,type,3,"[114, 130]"
799,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EurekaJacksonCodec.java,set instance,public static void   (  eureka jackson codec instance )  {  instance = instance ;   }  ,87,2,set,1,[]
800,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EurekaJacksonCodec.java,set instance,public static void   (  eureka jackson codec instance )  {  instance = instance ;   }  ,87,2,instance,2,"[45, 60, 71]"
801,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EurekaJacksonCodec.java,try catch log,"private static void   (  callable <  void >  callable )  {  try  {  callable . call (  )  ;   }  catch  (   exception ex )   {  logger . error ( "" error in unmarshalling the object:"" ex )  ;   }   }  ",200,3,try,1,[60]
802,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EurekaJacksonCodec.java,try catch log,"private static void   (  callable <  void >  callable )  {  try  {  callable . call (  )  ;   }  catch  (   exception ex )   {  logger . error ( "" error in unmarshalling the object:"" ex )  ;   }   }  ",200,3,catch,2,[97]
803,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EurekaJacksonCodec.java,try catch log,"private static void   (  callable <  void >  callable )  {  try  {  callable . call (  )  ;   }  catch  (   exception ex )   {  logger . error ( "" error in unmarshalling the object:"" ex )  ;   }   }  ",200,3,log,3,[128]
804,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EurekaJacksonCodec.java,write to,public  < t > void   ( t object  output stream entity stream )  throws io exception  {   object writer writer = object writer by class . get ( object . get class (  )  )  ;  if  ( writer  =  =  null )   {  mapper . write value ( entity stream object )  ;   }  else  {  writer . write value ( entity stream object )  ;   }   }  ,327,2,write,1,"[96, 103, 119, 180, 215, 269, 278]"
805,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EurekaJacksonCodec.java,write to,public  < t > void   ( t object  output stream entity stream )  throws io exception  {   object writer writer = object writer by class . get ( object . get class (  )  )  ;  if  ( writer  =  =  null )   {  mapper . write value ( entity stream object )  ;   }  else  {  writer . write value ( entity stream object )  ;   }   }  ,327,2,to,2,[]
806,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EurekaJacksonCodec.java,write to string,"public  < t >  string   ( t object )  {  try  {   object writer writer = object writer by class . get ( object . get class (  )  )  ;  if  ( writer  =  =  null )   {  return mapper . write value as string ( object )  ;   }  return writer . write value as string ( object )  ;   }  catch  (  io exception e )   {  throw new  illegal argument exception ( "" cannot encode provided object"" e )  ;   }   }  ",402,3,write,1,"[57, 64, 80, 141, 183, 231, 240]"
807,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EurekaJacksonCodec.java,write to string,"public  < t >  string   ( t object )  {  try  {   object writer writer = object writer by class . get ( object . get class (  )  )  ;  if  ( writer  =  =  null )   {  return mapper . write value as string ( object )  ;   }  return writer . write value as string ( object )  ;   }  catch  (  io exception e )   {  throw new  illegal argument exception ( "" cannot encode provided object"" e )  ;   }   }  ",402,3,to,2,[]
808,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EurekaJacksonCodec.java,write to string,"public  < t >  string   ( t object )  {  try  {   object writer writer = object writer by class . get ( object . get class (  )  )  ;  if  ( writer  =  =  null )   {  return mapper . write value as string ( object )  ;   }  return writer . write value as string ( object )  ;   }  catch  (  io exception e )   {  throw new  illegal argument exception ( "" cannot encode provided object"" e )  ;   }   }  ",402,3,string,3,"[15, 198, 255]"
809,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\builder\ApplicationsJacksonBuilder.java,build,public  applications   (  )  {  return new  applications ( apps hash code version applications )  ;   }  ,105,1,build,1,[]
810,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\builder\ApplicationsJacksonBuilder.java,with,"@ json any setter public void   (  string field name  object value )  {  if  ( field name  =  =  null || value  =  =  null )   {  return ;   }  if  ( field name . starts with ( ""version"" )  )   {  try  {  version = value instanceof  number  ?   (  (  numb",255,1,with,1,[170]
811,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\builder\ApplicationsJacksonBuilder.java,with application,"@ json property ( ""application"" )  public void   (  list <  application >  applications )  {  this . applications = applications ;   }  ",136,2,with,1,[]
812,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\builder\ApplicationsJacksonBuilder.java,with application,"@ json property ( ""application"" )  public void   (  list <  application >  applications )  {  this . applications = applications ;   }  ",136,2,application,2,"[19, 60, 75, 101, 116]"
813,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\builder\ApplicationsXmlJacksonBuilder.java,with application,@ override @ jackson xml element wrapper ( use wrapping = false )  public void   (  list <  application >  applications )  {  super . with application ( applications )  ;   }  ,176,2,with,1,[134]
814,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\builder\ApplicationsXmlJacksonBuilder.java,with application,@ override @ jackson xml element wrapper ( use wrapping = false )  public void   (  list <  application >  applications )  {  super . with application ( applications )  ;   }  ,176,2,application,2,"[92, 107, 139, 153]"
815,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\builder\StringInterningAmazonInfoBuilder.java,build,public  amazon info   (  )  {  return new  amazon info (  name .  amazon . name (  )  metadata )  ;   }  ,105,1,build,1,[]
816,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\builder\StringInterningAmazonInfoBuilder.java,deserialize,@ override public  amazon info   (  json parser jp  deserialization context context )  throws io exception  {   map <  string  string >  metadata = new  compact hash map <  >  (  )  ;   deserializer string cache intern =  deserializer string cache . from ,255,1,deserialize,1,"[186, 222]"
817,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\builder\StringInterningAmazonInfoBuilder.java,with metadata,public  string interning amazon info builder   (  hash map <  string  string >  metadata )  {  this . metadata = metadata ;  if  ( metadata . is empty (  )  )   {  return this ;   }  for  (   map .  entry <  string  string >  entry : metadata . entry set (  )  )   {   string key = entry . get key (  )  . intern (  )  ;  if  ( value   intern   keys . contains key ( key )  )   {  entry . set value (  string cache . intern ( entry . get value (  )  )  )  ;   }   }  return this ;   }  ,486,2,with,1,[]
818,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\builder\StringInterningAmazonInfoBuilder.java,with metadata,public  string interning amazon info builder   (  hash map <  string  string >  metadata )  {  this . metadata = metadata ;  if  ( metadata . is empty (  )  )   {  return this ;   }  for  (   map .  entry <  string  string >  entry : metadata . entry set (  )  )   {   string key = entry . get key (  )  . intern (  )  ;  if  ( value   intern   keys . contains key ( key )  )   {  entry . set value (  string cache . intern ( entry . get value (  )  )  )  ;   }   }  return this ;   }  ,486,2,metadata,2,"[80, 102, 113, 131, 234]"
819,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\builder\StringInterningAmazonInfoBuilder.java,with name,public  string interning amazon info builder   (  string name )  {  return this ;   }  ,87,2,with,1,[]
820,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\builder\StringInterningAmazonInfoBuilder.java,with name,public  string interning amazon info builder   (  string name )  {  return this ;   }  ,87,2,name,2,[57]
821,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\EurekaJacksonJsonModifiers.java,create json serializer modifier,public static  bean serializer modifier   ( final  key formatter key formatter final boolean compact mode )  {  return new  bean serializer modifier (  )  {  @ override public  json serializer <  ?  >  modify serializer (   serialization config config   bean description bean desc   json serializer <  ?  >  serializer )  {  if  ( bean desc . get bean class (  )  . is assignable from (  applications . class )  )   {  return new  applications json bean serializer (  (  bean serializer base ) serializer key formatter )  ;   }  if  ( bean desc . get bean class (  )  . is assignable from (  instance info . class )  )   {  return new  instance info json bean serializer (  (  bean serializer base ) serializer compact mode )  ;   }  return serializer ;   }   }   ;   }  ,771,4,create,1,[]
822,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\EurekaJacksonJsonModifiers.java,create json serializer modifier,public static  bean serializer modifier   ( final  key formatter key formatter final boolean compact mode )  {  return new  bean serializer modifier (  )  {  @ override public  json serializer <  ?  >  modify serializer (   serialization config config   bean description bean desc   json serializer <  ?  >  serializer )  {  if  ( bean desc . get bean class (  )  . is assignable from (  applications . class )  )   {  return new  applications json bean serializer (  (  bean serializer base ) serializer key formatter )  ;   }  if  ( bean desc . get bean class (  )  . is assignable from (  instance info . class )  )   {  return new  instance info json bean serializer (  (  bean serializer base ) serializer compact mode )  ;   }  return serializer ;   }   }   ;   }  ,771,4,json,2,"[177, 283, 444, 650]"
823,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\EurekaJacksonJsonModifiers.java,create json serializer modifier,public static  bean serializer modifier   ( final  key formatter key formatter final boolean compact mode )  {  return new  bean serializer modifier (  )  {  @ override public  json serializer <  ?  >  modify serializer (   serialization config config   bean description bean desc   json serializer <  ?  >  serializer )  {  if  ( bean desc . get bean class (  )  . is assignable from (  applications . class )  )   {  return new  applications json bean serializer (  (  bean serializer base ) serializer key formatter )  ;   }  if  ( bean desc . get bean class (  )  . is assignable from (  instance info . class )  )   {  return new  instance info json bean serializer (  (  bean serializer base ) serializer compact mode )  ;   }  return serializer ;   }   }   ;   }  ,771,4,serializer,3,"[20, 129, 182, 209, 288, 308, 454, 476, 494, 660, 682, 700, 741]"
824,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\EurekaJacksonJsonModifiers.java,create json serializer modifier,public static  bean serializer modifier   ( final  key formatter key formatter final boolean compact mode )  {  return new  bean serializer modifier (  )  {  @ override public  json serializer <  ?  >  modify serializer (   serialization config config   bean description bean desc   json serializer <  ?  >  serializer )  {  if  ( bean desc . get bean class (  )  . is assignable from (  applications . class )  )   {  return new  applications json bean serializer (  (  bean serializer base ) serializer key formatter )  ;   }  if  ( bean desc . get bean class (  )  . is assignable from (  instance info . class )  )   {  return new  instance info json bean serializer (  (  bean serializer base ) serializer compact mode )  ;   }  return serializer ;   }   }   ;   }  ,771,4,modifier,4,"[31, 140]"
825,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\EurekaJacksonJsonModifiers.java,modify serializer,@ override public  json serializer <  ?  >    (  serialization config config  bean description bean desc  json serializer <  ?  >  serializer )  {  if  ( bean desc . get bean class (  )  . is assignable from (  applications . class )  )   {  return new  a,255,2,modify,1,[]
826,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\EurekaJacksonJsonModifiers.java,modify serializer,@ override public  json serializer <  ?  >    (  serialization config config  bean description bean desc  json serializer <  ?  >  serializer )  {  if  ( bean desc . get bean class (  )  . is assignable from (  applications . class )  )   {  return new  a,255,2,serializer,2,"[24, 111, 131]"
827,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\DataCenterTypeInfoResolver.java, data center type info resolver,public   (  )  {  super (  type factory . default instance (  )  . construct type (  data center info . class )   type factory . default instance (  )  )  ;   }  ,162,5,data,1,[85]
828,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\DataCenterTypeInfoResolver.java, data center type info resolver,public   (  )  {  super (  type factory . default instance (  )  . construct type (  data center info . class )   type factory . default instance (  )  )  ;   }  ,162,5,center,2,[90]
829,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\DataCenterTypeInfoResolver.java, data center type info resolver,public   (  )  {  super (  type factory . default instance (  )  . construct type (  data center info . class )   type factory . default instance (  )  )  ;   }  ,162,5,type,3,"[27, 77, 114]"
830,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\DataCenterTypeInfoResolver.java, data center type info resolver,public   (  )  {  super (  type factory . default instance (  )  . construct type (  data center info . class )   type factory . default instance (  )  )  ;   }  ,162,5,info,4,[97]
831,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\DataCenterTypeInfoResolver.java, data center type info resolver,public   (  )  {  super (  type factory . default instance (  )  . construct type (  data center info . class )   type factory . default instance (  )  )  ;   }  ,162,5,resolver,5,[]
832,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\DataCenterTypeInfoResolver.java,id from value,@ override public  string   (  object value )  {  if  ( value . get class (  )  . equals (  amazon info . class )  )   {  return  amazon info . class . get name (  )  ;   }  return my   data   center   info   type   marker ;   }  ,230,3,id,1,[7]
833,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\DataCenterTypeInfoResolver.java,id from value,@ override public  string   (  object value )  {  if  ( value . get class (  )  . equals (  amazon info . class )  )   {  return  amazon info . class . get name (  )  ;   }  return my   data   center   info   type   marker ;   }  ,230,3,from,2,[]
834,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\DataCenterTypeInfoResolver.java,id from value,@ override public  string   (  object value )  {  if  ( value . get class (  )  . equals (  amazon info . class )  )   {  return  amazon info . class . get name (  )  ;   }  return my   data   center   info   type   marker ;   }  ,230,3,value,3,"[38, 56]"
835,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\DataCenterTypeInfoResolver.java,type from id,@ override public  java type   (  databind context context  string id )  throws io exception  {  if  ( my   data   center   info   type   marker . equals ( id )  )   {  return context . get type factory (  )  . construct type (  my data center info . clas,255,3,type,1,"[24, 131, 190, 221]"
836,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\DataCenterTypeInfoResolver.java,type from id,@ override public  java type   (  databind context context  string id )  throws io exception  {  if  ( my   data   center   info   type   marker . equals ( id )  )   {  return context . get type factory (  )  . construct type (  my data center info . clas,255,3,from,2,[]
837,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\DataCenterTypeInfoResolver.java,type from id,@ override public  java type   (  databind context context  string id )  throws io exception  {  if  ( my   data   center   info   type   marker . equals ( id )  )   {  return context . get type factory (  )  . construct type (  my data center info . clas,255,3,id,3,"[7, 67, 156]"
838,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\EurekaJacksonXmlModifiers.java,create xml serializer modifier,public static  bean serializer modifier   ( final  key formatter key formatter )  {  return new  bean serializer modifier (  )  {  @ override public  json serializer <  ?  >  modify serializer (   serialization config config   bean description bean desc   json serializer <  ?  >  serializer )  {  if  ( bean desc . get bean class (  )  . is assignable from (  applications . class )  )   {  return new  applications xml bean serializer (  (  bean serializer base ) serializer key formatter )  ;   }  if  ( bean desc . get bean class (  )  . is assignable from (  instance info . class )  )   {  return new  instance info xml bean serializer (  (  bean serializer base ) serializer )  ;   }  return serializer ;   }   }   ;   }  ,729,4,create,1,[]
839,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\EurekaJacksonXmlModifiers.java,create xml serializer modifier,public static  bean serializer modifier   ( final  key formatter key formatter )  {  return new  bean serializer modifier (  )  {  @ override public  json serializer <  ?  >  modify serializer (   serialization config config   bean description bean desc   json serializer <  ?  >  serializer )  {  if  ( bean desc . get bean class (  )  . is assignable from (  applications . class )  )   {  return new  applications xml bean serializer (  (  bean serializer base ) serializer key formatter )  ;   }  if  ( bean desc . get bean class (  )  . is assignable from (  instance info . class )  )   {  return new  instance info xml bean serializer (  (  bean serializer base ) serializer )  ;   }  return serializer ;   }   }   ;   }  ,729,4,xml,2,"[417, 622]"
840,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\EurekaJacksonXmlModifiers.java,create xml serializer modifier,public static  bean serializer modifier   ( final  key formatter key formatter )  {  return new  bean serializer modifier (  )  {  @ override public  json serializer <  ?  >  modify serializer (   serialization config config   bean description bean desc   json serializer <  ?  >  serializer )  {  if  ( bean desc . get bean class (  )  . is assignable from (  applications . class )  )   {  return new  applications xml bean serializer (  (  bean serializer base ) serializer key formatter )  ;   }  if  ( bean desc . get bean class (  )  . is assignable from (  instance info . class )  )   {  return new  instance info xml bean serializer (  (  bean serializer base ) serializer )  ;   }  return serializer ;   }   }   ;   }  ,729,4,serializer,3,"[20, 102, 155, 182, 261, 281, 426, 448, 466, 631, 653, 671, 699]"
841,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\EurekaJacksonXmlModifiers.java,create xml serializer modifier,public static  bean serializer modifier   ( final  key formatter key formatter )  {  return new  bean serializer modifier (  )  {  @ override public  json serializer <  ?  >  modify serializer (   serialization config config   bean description bean desc   json serializer <  ?  >  serializer )  {  if  ( bean desc . get bean class (  )  . is assignable from (  applications . class )  )   {  return new  applications xml bean serializer (  (  bean serializer base ) serializer key formatter )  ;   }  if  ( bean desc . get bean class (  )  . is assignable from (  instance info . class )  )   {  return new  instance info xml bean serializer (  (  bean serializer base ) serializer )  ;   }  return serializer ;   }   }   ;   }  ,729,4,modifier,4,"[31, 113]"
842,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\EurekaJacksonXmlModifiers.java,modify serializer,@ override public  json serializer <  ?  >    (  serialization config config  bean description bean desc  json serializer <  ?  >  serializer )  {  if  ( bean desc . get bean class (  )  . is assignable from (  applications . class )  )   {  return new  a,255,2,modify,1,[]
843,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\EurekaJacksonXmlModifiers.java,modify serializer,@ override public  json serializer <  ?  >    (  serialization config config  bean description bean desc  json serializer <  ?  >  serializer )  {  if  ( bean desc . get bean class (  )  . is assignable from (  applications . class )  )   {  return new  a,255,2,serializer,2,"[24, 111, 131]"
844,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\EurekaXmlJacksonCodec.java, eureka xml jackson codec,public   ( final  key formatter key formatter boolean compact )  {  xml mapper = new  xml mapper (  )  {  public  object mapper register module (   module module )  {  set serializer factory ( get serializer factory (  )  . with serializer modifier (  eureka jackson xml modifiers . create xml serializer modifier ( key formatter )  )  )  ;  return super . register module ( module )  ;   }   }   ;  xml mapper . set serialization inclusion (  include . non   null )  ;  xml mapper . add mix in (  data center info . class  data center info xml mix in . class )  ;  xml mapper . add mix in (  instance info .  port wrapper . class  port wrapper xml mix in . class )  ;  xml mapper . add mix in (  application . class  application xml mix in . class )  ;  xml mapper . add mix in (  applications . class  applications xml mix in . class )  ;   simple module xml module = new  simple module (  )  ;  xml mapper . register module ( xml module )  ;  if  ( compact )   {  add mini config ( xml mapper )  ;   }   }  ,1010,4,eureka,1,[252]
845,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\EurekaXmlJacksonCodec.java, eureka xml jackson codec,public   ( final  key formatter key formatter boolean compact )  {  xml mapper = new  xml mapper (  )  {  public  object mapper register module (   module module )  {  set serializer factory ( get serializer factory (  )  . with serializer modifier (  eureka jackson xml modifiers . create xml serializer modifier ( key formatter )  )  )  ;  return super . register module ( module )  ;   }   }   ;  xml mapper . set serialization inclusion (  include . non   null )  ;  xml mapper . add mix in (  data center info . class  data center info xml mix in . class )  ;  xml mapper . add mix in (  instance info .  port wrapper . class  port wrapper xml mix in . class )  ;  xml mapper . add mix in (  application . class  application xml mix in . class )  ;  xml mapper . add mix in (  applications . class  applications xml mix in . class )  ;   simple module xml module = new  simple module (  )  ;  xml mapper . register module ( xml module )  ;  if  ( compact )   {  add mini config ( xml mapper )  ;   }   }  ,1010,4,xml,2,"[68, 86, 267, 290, 400, 471, 541, 566, 645, 670, 730, 755, 817, 857, 898, 929, 985]"
846,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\EurekaXmlJacksonCodec.java, eureka xml jackson codec,public   ( final  key formatter key formatter boolean compact )  {  xml mapper = new  xml mapper (  )  {  public  object mapper register module (   module module )  {  set serializer factory ( get serializer factory (  )  . with serializer modifier (  eureka jackson xml modifiers . create xml serializer modifier ( key formatter )  )  )  ;  return super . register module ( module )  ;   }   }   ;  xml mapper . set serialization inclusion (  include . non   null )  ;  xml mapper . add mix in (  data center info . class  data center info xml mix in . class )  ;  xml mapper . add mix in (  instance info .  port wrapper . class  port wrapper xml mix in . class )  ;  xml mapper . add mix in (  application . class  application xml mix in . class )  ;  xml mapper . add mix in (  applications . class  applications xml mix in . class )  ;   simple module xml module = new  simple module (  )  ;  xml mapper . register module ( xml module )  ;  if  ( compact )   {  add mini config ( xml mapper )  ;   }   }  ,1010,4,jackson,3,[259]
847,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\EurekaXmlJacksonCodec.java, eureka xml jackson codec,public   ( final  key formatter key formatter boolean compact )  {  xml mapper = new  xml mapper (  )  {  public  object mapper register module (   module module )  {  set serializer factory ( get serializer factory (  )  . with serializer modifier (  eureka jackson xml modifiers . create xml serializer modifier ( key formatter )  )  )  ;  return super . register module ( module )  ;   }   }   ;  xml mapper . set serialization inclusion (  include . non   null )  ;  xml mapper . add mix in (  data center info . class  data center info xml mix in . class )  ;  xml mapper . add mix in (  instance info .  port wrapper . class  port wrapper xml mix in . class )  ;  xml mapper . add mix in (  application . class  application xml mix in . class )  ;  xml mapper . add mix in (  applications . class  applications xml mix in . class )  ;   simple module xml module = new  simple module (  )  ;  xml mapper . register module ( xml module )  ;  if  ( compact )   {  add mini config ( xml mapper )  ;   }   }  ,1010,4,codec,4,[]
848,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\EurekaXmlJacksonCodec.java,get object mapper,@ override public  < t >  object mapper   (  class < t >  type )  {  return xml mapper ;   }  ,94,3,get,1,[]
849,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\EurekaXmlJacksonCodec.java,get object mapper,@ override public  < t >  object mapper   (  class < t >  type )  {  return xml mapper ;   }  ,94,3,object,2,[26]
850,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\EurekaXmlJacksonCodec.java,get object mapper,@ override public  < t >  object mapper   (  class < t >  type )  {  return xml mapper ;   }  ,94,3,mapper,3,"[33, 80]"
851,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\EurekaXmlJacksonCodec.java,register module,public  object mapper   (  module module )  {  set serializer factory ( get serializer factory (  )  . with serializer modifier (  eureka jackson xml modifiers . create xml serializer modifier ( key formatter )  )  )  ;  return super . register module ( module )  ;   }  ,271,2,register,1,[236]
852,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\EurekaXmlJacksonCodec.java,register module,public  object mapper   (  module module )  {  set serializer factory ( get serializer factory (  )  . with serializer modifier (  eureka jackson xml modifiers . create xml serializer modifier ( key formatter )  )  )  ;  return super . register module ( module )  ;   }  ,271,2,module,2,"[27, 34, 245, 254]"
853,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\EurekaJsonJacksonCodec.java, eureka json jackson codec,public   ( final  key formatter key formatter boolean compact )  {  this . unwrapped json mapper = create object mapper ( key formatter compact false )  ;  this . wrapped json mapper = create object mapper ( key formatter compact true )  ;   }  ,245,4,eureka,1,[]
854,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\EurekaJsonJacksonCodec.java, eureka json jackson codec,public   ( final  key formatter key formatter boolean compact )  {  this . unwrapped json mapper = create object mapper ( key formatter compact false )  ;  this . wrapped json mapper = create object mapper ( key formatter compact true )  ;   }  ,245,4,json,2,"[85, 171]"
855,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\EurekaJsonJacksonCodec.java, eureka json jackson codec,public   ( final  key formatter key formatter boolean compact )  {  this . unwrapped json mapper = create object mapper ( key formatter compact false )  ;  this . wrapped json mapper = create object mapper ( key formatter compact true )  ;   }  ,245,4,jackson,3,[]
856,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\EurekaJsonJacksonCodec.java, eureka json jackson codec,public   ( final  key formatter key formatter boolean compact )  {  this . unwrapped json mapper = create object mapper ( key formatter compact false )  ;  this . wrapped json mapper = create object mapper ( key formatter compact true )  ;   }  ,245,4,codec,4,[]
857,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\EurekaJsonJacksonCodec.java,create object mapper,private  object mapper   (  key formatter key formatter boolean compact boolean wrapped )  {   object mapper new mapper = new  object mapper (  )  ;   simple module json module = new  simple module (  )  ;  json module . set serializer modifier (  eureka jackson json modifiers . create json serializer modifier ( key formatter compact )  )  ;  new mapper . register module ( json module )  ;  new mapper . set serialization inclusion (  include . non   null )  ;  new mapper . configure (  serialization feature . wrap   root   value wrapped )  ;  new mapper . configure (  serialization feature . write   single   elem   arrays   unwrapped false )  ;  new mapper . configure (  deserialization feature . unwrap   root   value wrapped )  ;  new mapper . configure (  deserialization feature . accept   single   value   as   array true )  ;  new mapper . add mix in (  applications . class  applications json mix in . class )  ;  if  ( compact )   {  add mini config ( new mapper )  ;   }  else  {  new mapper . add mix in (  instance info . class  instance info json mix in . class )  ;   }  return new mapper ;   }  ,1118,3,create,1,[280]
858,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\EurekaJsonJacksonCodec.java,create object mapper,private  object mapper   (  key formatter key formatter boolean compact boolean wrapped )  {   object mapper new mapper = new  object mapper (  )  ;   simple module json module = new  simple module (  )  ;  json module . set serializer modifier (  eureka jackson json modifiers . create json serializer modifier ( key formatter compact )  )  ;  new mapper . register module ( json module )  ;  new mapper . set serialization inclusion (  include . non   null )  ;  new mapper . configure (  serialization feature . wrap   root   value wrapped )  ;  new mapper . configure (  serialization feature . write   single   elem   arrays   unwrapped false )  ;  new mapper . configure (  deserialization feature . unwrap   root   value wrapped )  ;  new mapper . configure (  deserialization feature . accept   single   value   as   array true )  ;  new mapper . add mix in (  applications . class  applications json mix in . class )  ;  if  ( compact )   {  add mini config ( new mapper )  ;   }  else  {  new mapper . add mix in (  instance info . class  instance info json mix in . class )  ;   }  return new mapper ;   }  ,1118,3,object,2,"[9, 95, 127]"
859,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\EurekaJsonJacksonCodec.java,create object mapper,private  object mapper   (  key formatter key formatter boolean compact boolean wrapped )  {   object mapper new mapper = new  object mapper (  )  ;   simple module json module = new  simple module (  )  ;  json module . set serializer modifier (  eureka jackson json modifiers . create json serializer modifier ( key formatter compact )  )  ;  new mapper . register module ( json module )  ;  new mapper . set serialization inclusion (  include . non   null )  ;  new mapper . configure (  serialization feature . wrap   root   value wrapped )  ;  new mapper . configure (  serialization feature . write   single   elem   arrays   unwrapped false )  ;  new mapper . configure (  deserialization feature . unwrap   root   value wrapped )  ;  new mapper . configure (  deserialization feature . accept   single   value   as   array true )  ;  new mapper . add mix in (  applications . class  applications json mix in . class )  ;  if  ( compact )   {  add mini config ( new mapper )  ;   }  else  {  new mapper . add mix in (  instance info . class  instance info json mix in . class )  ;   }  return new mapper ;   }  ,1118,3,mapper,3,"[16, 102, 113, 134, 349, 398, 469, 553, 658, 746, 846, 973, 1003, 1104]"
860,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\EurekaJsonJacksonCodec.java,get object mapper,@ override public  < t >  object mapper   (  class < t >  type )  {   object mapper mapper = mappers . get ( type )  ;  if  ( mapper  =  =  null )   {  mapper = has json root name ( type )   ?  wrapped json mapper : unwrapped json mapper ;  mappers . put ,255,3,get,1,[103]
861,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\EurekaJsonJacksonCodec.java,get object mapper,@ override public  < t >  object mapper   (  class < t >  type )  {   object mapper mapper = mappers . get ( type )  ;  if  ( mapper  =  =  null )   {  mapper = has json root name ( type )   ?  wrapped json mapper : unwrapped json mapper ;  mappers . put ,255,3,object,2,"[26, 70]"
862,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\EurekaJsonJacksonCodec.java,get object mapper,@ override public  < t >  object mapper   (  class < t >  type )  {   object mapper mapper = mappers . get ( type )  ;  if  ( mapper  =  =  null )   {  mapper = has json root name ( type )   ?  wrapped json mapper : unwrapped json mapper ;  mappers . put ,255,3,mapper,3,"[33, 77, 84, 93, 126, 152, 207, 231, 241]"
863,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\serializer\ApplicationsJsonBeanSerializer.java, applications json bean serializer,"public   (  bean serializer base src  key formatter key formatter )  {  super ( src )  ;  version key = key formatter . format key ( ""versions   delta"" )  ;  apps hash code key = key formatter . format key ( ""apps   hashcode"" )  ;   }  ",236,4,applications,1,[]
864,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\serializer\ApplicationsJsonBeanSerializer.java, applications json bean serializer,"public   (  bean serializer base src  key formatter key formatter )  {  super ( src )  ;  version key = key formatter . format key ( ""versions   delta"" )  ;  apps hash code key = key formatter . format key ( ""apps   hashcode"" )  ;   }  ",236,4,json,2,[]
865,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\serializer\ApplicationsJsonBeanSerializer.java, applications json bean serializer,"public   (  bean serializer base src  key formatter key formatter )  {  super ( src )  ;  version key = key formatter . format key ( ""versions   delta"" )  ;  apps hash code key = key formatter . format key ( ""apps   hashcode"" )  ;   }  ",236,4,bean,3,[12]
866,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\serializer\ApplicationsJsonBeanSerializer.java, applications json bean serializer,"public   (  bean serializer base src  key formatter key formatter )  {  super ( src )  ;  version key = key formatter . format key ( ""versions   delta"" )  ;  apps hash code key = key formatter . format key ( ""apps   hashcode"" )  ;   }  ",236,4,serializer,4,[17]
867,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\serializer\ApplicationsJsonBeanSerializer.java,serialize fields,@ override protected void   (  object bean  json generator jgen0  serializer provider provider )  throws io exception  {  super . serialize fields ( bean jgen0 provider )  ;   applications applications =  (  applications ) bean ;  if  ( applications . get,255,2,serialize,1,"[66, 130]"
868,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\serializer\ApplicationsJsonBeanSerializer.java,serialize fields,@ override protected void   (  object bean  json generator jgen0  serializer provider provider )  throws io exception  {  super . serialize fields ( bean jgen0 provider )  ;   applications applications =  (  applications ) bean ;  if  ( applications . get,255,2,fields,2,[140]
869,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\serializer\ApplicationsXmlBeanSerializer.java, applications xml bean serializer,"public   (  bean serializer base src  key formatter key formatter )  {  super ( src )  ;  version key = key formatter . format key ( ""versions   delta"" )  ;  apps hash code key = key formatter . format key ( ""apps   hashcode"" )  ;   }  ",236,4,applications,1,[]
870,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\serializer\ApplicationsXmlBeanSerializer.java, applications xml bean serializer,"public   (  bean serializer base src  key formatter key formatter )  {  super ( src )  ;  version key = key formatter . format key ( ""versions   delta"" )  ;  apps hash code key = key formatter . format key ( ""apps   hashcode"" )  ;   }  ",236,4,xml,2,[]
871,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\serializer\ApplicationsXmlBeanSerializer.java, applications xml bean serializer,"public   (  bean serializer base src  key formatter key formatter )  {  super ( src )  ;  version key = key formatter . format key ( ""versions   delta"" )  ;  apps hash code key = key formatter . format key ( ""apps   hashcode"" )  ;   }  ",236,4,bean,3,[12]
872,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\serializer\ApplicationsXmlBeanSerializer.java, applications xml bean serializer,"public   (  bean serializer base src  key formatter key formatter )  {  super ( src )  ;  version key = key formatter . format key ( ""versions   delta"" )  ;  apps hash code key = key formatter . format key ( ""apps   hashcode"" )  ;   }  ",236,4,serializer,4,[17]
873,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\serializer\ApplicationsXmlBeanSerializer.java,serialize fields,@ override protected void   (  object bean  json generator jgen0  serializer provider provider )  throws io exception  {  super . serialize fields ( bean jgen0 provider )  ;   applications applications =  (  applications ) bean ;  if  ( applications . get,255,2,serialize,1,"[66, 130]"
874,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\serializer\ApplicationsXmlBeanSerializer.java,serialize fields,@ override protected void   (  object bean  json generator jgen0  serializer provider provider )  throws io exception  {  super . serialize fields ( bean jgen0 provider )  ;   applications applications =  (  applications ) bean ;  if  ( applications . get,255,2,fields,2,[140]
875,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\serializer\InstanceInfoXmlBeanSerializer.java, instance info xml bean serializer,public   (  bean serializer base src )  {  super ( src )  ;   }  ,65,5,instance,1,[]
876,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\serializer\InstanceInfoXmlBeanSerializer.java, instance info xml bean serializer,public   (  bean serializer base src )  {  super ( src )  ;   }  ,65,5,info,2,[]
877,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\serializer\InstanceInfoXmlBeanSerializer.java, instance info xml bean serializer,public   (  bean serializer base src )  {  super ( src )  ;   }  ,65,5,xml,3,[]
878,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\serializer\InstanceInfoXmlBeanSerializer.java, instance info xml bean serializer,public   (  bean serializer base src )  {  super ( src )  ;   }  ,65,5,bean,4,[12]
879,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\serializer\InstanceInfoXmlBeanSerializer.java, instance info xml bean serializer,public   (  bean serializer base src )  {  super ( src )  ;   }  ,65,5,serializer,5,[17]
880,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\serializer\InstanceInfoXmlBeanSerializer.java,serialize fields,@ override protected void   (  object bean  json generator jgen0  serializer provider provider )  throws io exception  {  super . serialize fields ( bean jgen0 provider )  ;   instance info instance info =  (  instance info ) bean ;   to xml generator xge,255,2,serialize,1,"[66, 130]"
881,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\serializer\InstanceInfoXmlBeanSerializer.java,serialize fields,@ override protected void   (  object bean  json generator jgen0  serializer provider provider )  throws io exception  {  super . serialize fields ( bean jgen0 provider )  ;   instance info instance info =  (  instance info ) bean ;   to xml generator xge,255,2,fields,2,[140]
882,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\serializer\PortWrapperXmlDeserializer.java, port wrapper xml deserializer,public   (  )  {  super (  instance info .  port wrapper . class )  ;   }  ,75,4,port,1,[44]
883,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\serializer\PortWrapperXmlDeserializer.java, port wrapper xml deserializer,public   (  )  {  super (  instance info .  port wrapper . class )  ;   }  ,75,4,wrapper,2,[49]
884,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\serializer\PortWrapperXmlDeserializer.java, port wrapper xml deserializer,public   (  )  {  super (  instance info .  port wrapper . class )  ;   }  ,75,4,xml,3,[]
885,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\serializer\PortWrapperXmlDeserializer.java, port wrapper xml deserializer,public   (  )  {  super (  instance info .  port wrapper . class )  ;   }  ,75,4,deserializer,4,[]
886,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\serializer\PortWrapperXmlDeserializer.java,deserialize,@ override public  instance info .  port wrapper   (  json parser jp  deserialization context ctxt )  throws io exception  {  boolean enabled = false ;  int port = 0 ;  while  ( jp . next token (  )   =  =   json token . field   name )   {   string field ,255,1,deserialize,1,[]
887,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\serializer\InstanceInfoJsonBeanSerializer.java, instance info json bean serializer,public   (  bean serializer base src boolean compact mode )  {  super ( src )  ;  this . compact mode = compact mode ;   }  ,124,5,instance,1,[]
888,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\serializer\InstanceInfoJsonBeanSerializer.java, instance info json bean serializer,public   (  bean serializer base src boolean compact mode )  {  super ( src )  ;  this . compact mode = compact mode ;   }  ,124,5,info,2,[]
889,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\serializer\InstanceInfoJsonBeanSerializer.java, instance info json bean serializer,public   (  bean serializer base src boolean compact mode )  {  super ( src )  ;  this . compact mode = compact mode ;   }  ,124,5,json,3,[]
890,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\serializer\InstanceInfoJsonBeanSerializer.java, instance info json bean serializer,public   (  bean serializer base src boolean compact mode )  {  super ( src )  ;  this . compact mode = compact mode ;   }  ,124,5,bean,4,[12]
891,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\serializer\InstanceInfoJsonBeanSerializer.java, instance info json bean serializer,public   (  bean serializer base src boolean compact mode )  {  super ( src )  ;  this . compact mode = compact mode ;   }  ,124,5,serializer,5,[17]
892,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\serializer\InstanceInfoJsonBeanSerializer.java,serialize fields,@ override protected void   (  object bean  json generator jgen0  serializer provider provider )  throws io exception  {  super . serialize fields ( bean jgen0 provider )  ;   instance info instance info =  (  instance info ) bean ;  jgen0 . write field n,255,2,serialize,1,"[66, 130]"
893,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\serializer\InstanceInfoJsonBeanSerializer.java,serialize fields,@ override protected void   (  object bean  json generator jgen0  serializer provider provider )  throws io exception  {  super . serialize fields ( bean jgen0 provider )  ;   instance info instance info =  (  instance info ) bean ;  jgen0 . write field n,255,2,fields,2,[140]
894,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\serializer\ApplicationXmlDeserializer.java, application xml deserializer,public   (  )  {  super (  application . class )  ;   }  ,57,3,application,1,[27]
895,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\serializer\ApplicationXmlDeserializer.java, application xml deserializer,public   (  )  {  super (  application . class )  ;   }  ,57,3,xml,2,[]
896,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\serializer\ApplicationXmlDeserializer.java, application xml deserializer,public   (  )  {  super (  application . class )  ;   }  ,57,3,deserializer,3,[]
897,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\serializer\ApplicationXmlDeserializer.java,deserialize,@ override public  application   (  json parser jp  deserialization context ctxt )  throws io exception   json processing exception  {   string name = null ;   list <  instance info >  instances = new  array list <  >  (  )  ;  while  ( jp . next token ( ,255,1,deserialize,1,[]
898,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\KeyFormatter.java, key formatter,@ inject public   (  eureka client config eureka client config )  {  if  ( eureka client config  =  =  null )   {  this . replacement = default   replacement ;   }  else  {  this . replacement = eureka client config . get escape char replacement (  )  ;  ,255,2,key,1,[]
899,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\KeyFormatter.java, key formatter,@ inject public   (  eureka client config eureka client config )  {  if  ( eureka client config  =  =  null )   {  this . replacement = default   replacement ;   }  else  {  this . replacement = eureka client config . get escape char replacement (  )  ;  ,255,2,formatter,2,[]
900,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\KeyFormatter.java,default key formatter,public static  key formatter   (  )  {  return default   key   formatter ;   }  ,80,3,default,1,[47]
901,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\KeyFormatter.java,default key formatter,public static  key formatter   (  )  {  return default   key   formatter ;   }  ,80,3,key,2,"[15, 57]"
902,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\KeyFormatter.java,default key formatter,public static  key formatter   (  )  {  return default   key   formatter ;   }  ,80,3,formatter,3,"[19, 63]"
903,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\KeyFormatter.java,format key,public  string   (  string key template )  {   string builder sb = new  string builder ( key template . length (  )   +  1 )  ;  for  (  char c : key template . to char array (  )  )   {  if  ( c  =  =  '   ' )   {  sb . append ( replacement )  ;   }  else  {  sb . append ( c )  ;   }   }  return sb . to string (  )  ;   }  ,326,2,format,1,[]
904,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\KeyFormatter.java,format key,public  string   (  string key template )  {   string builder sb = new  string builder ( key template . length (  )   +  1 )  ;  for  (  char c : key template . to char array (  )  )   {  if  ( c  =  =  '   ' )   {  sb . append ( replacement )  ;   }  else  {  sb . append ( c )  ;   }   }  return sb . to string (  )  ;   }  ,326,2,key,2,"[27, 89, 146]"
905,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\JsonXStream.java, jsonx stream,public   (  )  {  super ( new  jettison mapped xml driver (  )  {  private final  name coder coder = initialize name coder (  )  ;  protected  name coder get name coder (  )  {  return this . coder ;   }   }   )  ;  register converter ( new  converters .  application converter (  )  )  ;  register converter ( new  converters .  applications converter (  )  )  ;  register converter ( new  converters .  data center info converter (  )  )  ;  register converter ( new  converters .  instance info converter (  )  )  ;  register converter ( new  converters .  lease info converter (  )  )  ;  register converter ( new  converters .  metadata converter (  )  )  ;  set mode ( x stream . no   references )  ;  process annotations ( new  class[] {  instance info . class  application . class  applications . class }  )  ;   }  ,824,2,jsonx,1,[]
906,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\JsonXStream.java, jsonx stream,public   (  )  {  super ( new  jettison mapped xml driver (  )  {  private final  name coder coder = initialize name coder (  )  ;  protected  name coder get name coder (  )  {  return this . coder ;   }   }   )  ;  register converter ( new  converters .  application converter (  )  )  ;  register converter ( new  converters .  applications converter (  )  )  ;  register converter ( new  converters .  data center info converter (  )  )  ;  register converter ( new  converters .  instance info converter (  )  )  ;  register converter ( new  converters .  lease info converter (  )  )  ;  register converter ( new  converters .  metadata converter (  )  )  ;  set mode ( x stream . no   references )  ;  process annotations ( new  class[] {  instance info . class  application . class  applications . class }  )  ;   }  ,824,2,stream,2,[677]
907,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\JsonXStream.java,get instance,public static  jsonx stream   (  )  {  return s   instance ;   }  ,66,2,get,1,[]
908,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\JsonXStream.java,get instance,public static  jsonx stream   (  )  {  return s   instance ;   }  ,66,2,instance,2,[50]
909,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\JsonXStream.java,get name coder,protected  name coder   (  )  {  return this . coder ;   }  ,60,3,get,1,[]
910,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\JsonXStream.java,get name coder,protected  name coder   (  )  {  return this . coder ;   }  ,60,3,name,2,[11]
911,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\JsonXStream.java,get name coder,protected  name coder   (  )  {  return this . coder ;   }  ,60,3,coder,3,"[16, 47]"
912,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\JsonXStream.java,initialize name coder,private static  xml friendly name coder   (  )  {   eureka client config client config =  discovery manager . get instance (  )  . get eureka client config (  )  ;  if  ( client config  =  =  null )   {  return new  xml friendly name coder (  )  ;   }  return new  xml friendly name coder ( client config . get dollar replacement (  )  client config . get escape char replacement (  )  )  ;   }  ,396,3,initialize,1,[]
913,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\JsonXStream.java,initialize name coder,private static  xml friendly name coder   (  )  {   eureka client config client config =  discovery manager . get instance (  )  . get eureka client config (  )  ;  if  ( client config  =  =  null )   {  return new  xml friendly name coder (  )  ;   }  return new  xml friendly name coder ( client config . get dollar replacement (  )  client config . get escape char replacement (  )  )  ;   }  ,396,3,name,2,"[29, 229, 278]"
914,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\JsonXStream.java,initialize name coder,private static  xml friendly name coder   (  )  {   eureka client config client config =  discovery manager . get instance (  )  . get eureka client config (  )  ;  if  ( client config  =  =  null )   {  return new  xml friendly name coder (  )  ;   }  return new  xml friendly name coder ( client config . get dollar replacement (  )  client config . get escape char replacement (  )  )  ;   }  ,396,3,coder,3,"[34, 234, 283]"
915,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\wrappers\CodecWrappers.java,codec name,@ override public  string   (  )  {  return  codec wrappers . get codec name ( this . get class (  )  )  ;   }  ,112,2,codec,1,"[45, 66]"
916,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\wrappers\CodecWrappers.java,codec name,@ override public  string   (  )  {  return  codec wrappers . get codec name ( this . get class (  )  )  ;   }  ,112,2,name,2,[72]
917,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\wrappers\CodecWrappers.java,create,private static  codec wrapper   (  string name )  {  if  ( get codec name (  jackson json . class )  . equals ( name )  )   {  return new  jackson json (  )  ;   }  else if  ( get codec name (  jackson json mini . class )  . equals ( name )  )   {  return new  jackson json mini (  )  ;   }  else if  ( get codec name (  legacy jackson json . class )  . equals ( name )  )   {  return new  legacy jackson json (  )  ;   }  else if  ( get codec name ( x stream json . class )  . equals ( name )  )   {  return new x stream json (  )  ;   }  else if  ( get codec name (  jackson xml . class )  . equals ( name )  )   {  return new  jackson xml (  )  ;   }  else if  ( get codec name (  jackson xml mini . class )  . equals ( name )  )   {  return new  jackson xml mini (  )  ;   }  else if  ( get codec name ( x stream xml . class )  . equals ( name )  )   {  return new x stream xml (  )  ;   }  else  {  return null ;   }   }  ,927,1,create,1,[]
918,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\wrappers\CodecWrappers.java,decode,@ override public  < t > t   (  input stream input stream  class < t >  type )  throws io exception  {  return  ( t ) codec . fromxml ( input stream type )  ;   }  ,164,1,decode,1,[]
919,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\wrappers\CodecWrappers.java,encode,@ override public  < t > void   ( t object  output stream output stream )  throws io exception  {  codec . toxml ( object output stream )  ;   }  ,146,1,encode,1,[]
920,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\wrappers\CodecWrappers.java,get codec,public static synchronized  codec wrapper   (  string name )  {  if  ( name  =  =  null )   {  return null ;   }  if  (  ! codecs . contains key ( name )  )   {   codec wrapper wrapper = create ( name )  ;  if  ( wrapper  !  =  null )   {  codecs . put ( wrapper . codec name (  )  wrapper )  ;   }   }  return codecs . get ( name )  ;   }  ,341,2,get,1,[320]
921,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\wrappers\CodecWrappers.java,get codec,public static synchronized  codec wrapper   (  string name )  {  if  ( name  =  =  null )   {  return null ;   }  if  (  ! codecs . contains key ( name )  )   {   codec wrapper wrapper = create ( name )  ;  if  ( wrapper  !  =  null )   {  codecs . put ( wrapper . codec name (  )  wrapper )  ;   }   }  return codecs . get ( name )  ;   }  ,341,2,codec,2,"[28, 123, 163, 240, 265, 311]"
922,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\wrappers\CodecWrappers.java,get codec name,public static  < t extends  codec wrapper base >  string   (  class < t >  clazz )  {  return clazz . get simple name (  )  ;   }  ,131,3,get,1,[102]
923,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\wrappers\CodecWrappers.java,get codec name,public static  < t extends  codec wrapper base >  string   (  class < t >  clazz )  {  return clazz . get simple name (  )  ;   }  ,131,3,codec,2,[28]
924,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\wrappers\CodecWrappers.java,get codec name,public static  < t extends  codec wrapper base >  string   (  class < t >  clazz )  {  return clazz . get simple name (  )  ;   }  ,131,3,name,3,[113]
925,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\wrappers\CodecWrappers.java,get decoder,public static synchronized  decoder wrapper   (  string name )  {  if  ( name  =  =  null )   {  return null ;   }  if  (  ! codecs . contains key ( name )  )   {   codec wrapper wrapper = create ( name )  ;  if  ( wrapper  !  =  null )   {  codecs . put ( wrapper . codec name (  )  wrapper )  ;   }   }  return codecs . get ( name )  ;   }  ,343,2,get,1,[322]
926,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\wrappers\CodecWrappers.java,get decoder,public static synchronized  decoder wrapper   (  string name )  {  if  ( name  =  =  null )   {  return null ;   }  if  (  ! codecs . contains key ( name )  )   {   codec wrapper wrapper = create ( name )  ;  if  ( wrapper  !  =  null )   {  codecs . put ( wrapper . codec name (  )  wrapper )  ;   }   }  return codecs . get ( name )  ;   }  ,343,2,decoder,2,[28]
927,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\wrappers\CodecWrappers.java,get encoder,public static synchronized  encoder wrapper   (  string name )  {  if  ( name  =  =  null )   {  return null ;   }  if  (  ! codecs . contains key ( name )  )   {   codec wrapper wrapper = create ( name )  ;  if  ( wrapper  !  =  null )   {  codecs . put ( wrapper . codec name (  )  wrapper )  ;   }   }  return codecs . get ( name )  ;   }  ,343,2,get,1,[322]
928,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\wrappers\CodecWrappers.java,get encoder,public static synchronized  encoder wrapper   (  string name )  {  if  ( name  =  =  null )   {  return null ;   }  if  (  ! codecs . contains key ( name )  )   {   codec wrapper wrapper = create ( name )  ;  if  ( wrapper  !  =  null )   {  codecs . put ( wrapper . codec name (  )  wrapper )  ;   }   }  return codecs . get ( name )  ;   }  ,343,2,encoder,2,[28]
929,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\wrappers\CodecWrappers.java,register wrapper,public static void   (  codec wrapper wrapper )  {  codecs . put ( wrapper . codec name (  )  wrapper )  ;   }  ,112,2,register,1,[]
930,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\wrappers\CodecWrappers.java,register wrapper,public static void   (  codec wrapper wrapper )  {  codecs . put ( wrapper . codec name (  )  wrapper )  ;   }  ,112,2,wrapper,2,"[30, 38, 67, 94]"
931,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\wrappers\CodecWrappers.java,resolve decoder,public static synchronized  decoder wrapper   (  string name  string eureka accept )  {   eureka accept accept =  eureka accept . from string ( eureka accept )  ;  switch  ( accept )   {  case compact: return get decoder (  jackson json mini . class )  ;  case full: default : return get decoder ( name )  ;   }   }  ,317,2,resolve,1,[]
932,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\wrappers\CodecWrappers.java,resolve decoder,public static synchronized  decoder wrapper   (  string name  string eureka accept )  {   eureka accept accept =  eureka accept . from string ( eureka accept )  ;  switch  ( accept )   {  case compact: return get decoder (  jackson json mini . class )  ;  case full: default : return get decoder ( name )  ;   }   }  ,317,2,decoder,2,"[28, 213, 288]"
933,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\wrappers\CodecWrappers.java,support,@ override public boolean   (  media type media type )  {  return media type . equals (  media type . application   xml   type )  ;   }  ,137,1,support,1,[]
934,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\XmlXStream.java, xmlx stream,public   (  )  {  super ( new  dom driver ( null initialize name coder (  )  )  )  ;  register converter ( new  converters .  application converter (  )  )  ;  register converter ( new  converters .  applications converter (  )  )  ;  register converter ( new  converters .  data center info converter (  )  )  ;  register converter ( new  converters .  instance info converter (  )  )  ;  register converter ( new  converters .  lease info converter (  )  )  ;  register converter ( new  converters .  metadata converter (  )  )  ;  set mode ( x stream . no   references )  ;  process annotations ( new  class[] {  instance info . class  application . class  applications . class }  )  ;   }  ,694,2,xmlx,1,[]
935,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\XmlXStream.java, xmlx stream,public   (  )  {  super ( new  dom driver ( null initialize name coder (  )  )  )  ;  register converter ( new  converters .  application converter (  )  )  ;  register converter ( new  converters .  applications converter (  )  )  ;  register converter ( new  converters .  data center info converter (  )  )  ;  register converter ( new  converters .  instance info converter (  )  )  ;  register converter ( new  converters .  lease info converter (  )  )  ;  register converter ( new  converters .  metadata converter (  )  )  ;  set mode ( x stream . no   references )  ;  process annotations ( new  class[] {  instance info . class  application . class  applications . class }  )  ;   }  ,694,2,stream,2,[547]
936,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\XmlXStream.java,get instance,public static  xmlx stream   (  )  {  return s   instance ;   }  ,65,2,get,1,[]
937,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\XmlXStream.java,get instance,public static  xmlx stream   (  )  {  return s   instance ;   }  ,65,2,instance,2,[49]
938,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\XmlXStream.java,initialize name coder,private static  xml friendly name coder   (  )  {   eureka client config client config =  discovery manager . get instance (  )  . get eureka client config (  )  ;  if  ( client config  =  =  null )   {  return new  xml friendly name coder (  )  ;   }  return new  xml friendly name coder ( client config . get dollar replacement (  )  client config . get escape char replacement (  )  )  ;   }  ,396,3,initialize,1,[]
939,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\XmlXStream.java,initialize name coder,private static  xml friendly name coder   (  )  {   eureka client config client config =  discovery manager . get instance (  )  . get eureka client config (  )  ;  if  ( client config  =  =  null )   {  return new  xml friendly name coder (  )  ;   }  return new  xml friendly name coder ( client config . get dollar replacement (  )  client config . get escape char replacement (  )  )  ;   }  ,396,3,name,2,"[29, 229, 278]"
940,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\XmlXStream.java,initialize name coder,private static  xml friendly name coder   (  )  {   eureka client config client config =  discovery manager . get instance (  )  . get eureka client config (  )  ;  if  ( client config  =  =  null )   {  return new  xml friendly name coder (  )  ;   }  return new  xml friendly name coder ( client config . get dollar replacement (  )  client config . get escape char replacement (  )  )  ;   }  ,396,3,coder,3,"[34, 234, 283]"
941,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryEvent.java, discovery event,protected   (  )  {  this . timestamp =  system . current time millis (  )  ;   }  ,83,2,discovery,1,[]
942,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryEvent.java, discovery event,protected   (  )  {  this . timestamp =  system . current time millis (  )  ;   }  ,83,2,event,2,[]
943,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryEvent.java,get timestamp,public final long   (  )  {  return this . timestamp ;   }  ,60,2,get,1,[]
944,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryEvent.java,get timestamp,public final long   (  )  {  return this . timestamp ;   }  ,60,2,timestamp,2,[43]
945,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryManager.java,get discovery client,@ deprecated public  discovery client   (  )  {  return discovery client ;   }  ,80,3,get,1,[]
946,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryManager.java,get discovery client,@ deprecated public  discovery client   (  )  {  return discovery client ;   }  ,80,3,discovery,2,"[21, 56]"
947,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryManager.java,get discovery client,@ deprecated public  discovery client   (  )  {  return discovery client ;   }  ,80,3,client,3,"[31, 66]"
948,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryManager.java,get eureka client,public  eureka client   (  )  {  return discovery client ;   }  ,64,3,get,1,[]
949,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryManager.java,get eureka client,public  eureka client   (  )  {  return discovery client ;   }  ,64,3,eureka,2,[8]
950,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryManager.java,get eureka client,public  eureka client   (  )  {  return discovery client ;   }  ,64,3,client,3,"[15, 50]"
951,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryManager.java,get eureka client config,public  eureka client config   (  )  {  return eureka client config ;   }  ,75,4,get,1,[]
952,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryManager.java,get eureka client config,public  eureka client config   (  )  {  return eureka client config ;   }  ,75,4,eureka,2,"[8, 47]"
953,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryManager.java,get eureka client config,public  eureka client config   (  )  {  return eureka client config ;   }  ,75,4,client,3,"[15, 54]"
954,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryManager.java,get eureka client config,public  eureka client config   (  )  {  return eureka client config ;   }  ,75,4,config,4,"[22, 61]"
955,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryManager.java,get eureka instance config,public  eureka instance config   (  )  {  return eureka instance config ;   }  ,79,4,get,1,[]
956,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryManager.java,get eureka instance config,public  eureka instance config   (  )  {  return eureka instance config ;   }  ,79,4,eureka,2,"[8, 49]"
957,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryManager.java,get eureka instance config,public  eureka instance config   (  )  {  return eureka instance config ;   }  ,79,4,instance,3,"[15, 56]"
958,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryManager.java,get eureka instance config,public  eureka instance config   (  )  {  return eureka instance config ;   }  ,79,4,config,4,"[24, 65]"
959,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryManager.java,get instance,public static  discovery manager   (  )  {  return s   instance ;   }  ,71,2,get,1,[]
960,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryManager.java,get instance,public static  discovery manager   (  )  {  return s   instance ;   }  ,71,2,instance,2,[55]
961,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryManager.java,get lookup service,public  lookup service   (  )  {  return discovery client ;   }  ,65,3,get,1,[]
962,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryManager.java,get lookup service,public  lookup service   (  )  {  return discovery client ;   }  ,65,3,lookup,2,[8]
963,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryManager.java,get lookup service,public  lookup service   (  )  {  return discovery client ;   }  ,65,3,service,3,[15]
964,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryManager.java,init component,public void   (  eureka instance config config  eureka client config eureka config )  {  init component ( config eureka config null )  ;   }  ,142,2,init,1,[89]
965,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryManager.java,init component,public void   (  eureka instance config config  eureka client config eureka config )  {  init component ( config eureka config null )  ;   }  ,142,2,component,2,[94]
966,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryManager.java,set discovery client,public void   (  discovery client discovery client )  {  this . discovery client = discovery client ;   }  ,107,3,set,1,[]
967,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryManager.java,set discovery client,public void   (  discovery client discovery client )  {  this . discovery client = discovery client ;   }  ,107,3,discovery,2,"[17, 34, 64, 83]"
968,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryManager.java,set discovery client,public void   (  discovery client discovery client )  {  this . discovery client = discovery client ;   }  ,107,3,client,3,"[27, 44, 74, 93]"
969,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryManager.java,set eureka client config,public void   (  eureka client config eureka client config )  {  this . eureka client config = eureka client config ;   }  ,123,4,set,1,[]
970,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryManager.java,set eureka client config,public void   (  eureka client config eureka client config )  {  this . eureka client config = eureka client config ;   }  ,123,4,eureka,2,"[17, 38, 72, 95]"
971,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryManager.java,set eureka client config,public void   (  eureka client config eureka client config )  {  this . eureka client config = eureka client config ;   }  ,123,4,client,3,"[24, 45, 79, 102]"
972,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryManager.java,set eureka client config,public void   (  eureka client config eureka client config )  {  this . eureka client config = eureka client config ;   }  ,123,4,config,4,"[31, 52, 86, 109]"
973,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryManager.java,set eureka instance config,public void   (  eureka instance config eureka instance config )  {  this . eureka instance config = eureka instance config ;   }  ,131,4,set,1,[]
974,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryManager.java,set eureka instance config,public void   (  eureka instance config eureka instance config )  {  this . eureka instance config = eureka instance config ;   }  ,131,4,eureka,2,"[17, 40, 76, 101]"
975,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryManager.java,set eureka instance config,public void   (  eureka instance config eureka instance config )  {  this . eureka instance config = eureka instance config ;   }  ,131,4,instance,3,"[24, 47, 83, 108]"
976,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryManager.java,set eureka instance config,public void   (  eureka instance config eureka instance config )  {  this . eureka instance config = eureka instance config ;   }  ,131,4,config,4,"[33, 56, 92, 117]"
977,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryManager.java,shutdown component,"public void   (  )  {  if  ( discovery client  !  =  null )   {  try  {  discovery client . shutdown (  )  ;  discovery client = null ;   }  catch  (   throwable th )   {  logger . error ( "" error in shutting down client"" th )  ;   }   }   }  ",243,2,shutdown,1,[92]
978,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryManager.java,shutdown component,"public void   (  )  {  if  ( discovery client  !  =  null )   {  try  {  discovery client . shutdown (  )  ;  discovery client = null ;   }  catch  (   throwable th )   {  logger . error ( "" error in shutting down client"" th )  ;   }   }   }  ",243,2,component,2,[]
979,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java, discovery client,@ inject   (  application info manager application info manager  eureka client config config  abstract discovery client optional args args  provider <  backup registry >  backup registry provider )  {  if  ( args  !  =  null )   {  this . health check han,255,2,discovery,1,[103]
980,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java, discovery client,@ inject   (  application info manager application info manager  eureka client config config  abstract discovery client optional args args  provider <  backup registry >  backup registry provider )  {  if  ( args  !  =  null )   {  this . health check han,255,2,client,2,"[72, 113]"
981,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,cancel scheduled tasks,private void   (  )  {  if  ( instance info replicator  !  =  null )   {  instance info replicator . stop (  )  ;   }  if  ( heartbeat executor  !  =  null )   {  heartbeat executor . shutdown now (  )  ;   }  if  ( cache refresh executor  !  =  null )   {  cache refresh executor . shutdown now (  )  ;   }  if  ( scheduler  !  =  null )   {  scheduler . shutdown now (  )  ;   }   }  ,386,3,cancel,1,[]
982,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,cancel scheduled tasks,private void   (  )  {  if  ( instance info replicator  !  =  null )   {  instance info replicator . stop (  )  ;   }  if  ( heartbeat executor  !  =  null )   {  heartbeat executor . shutdown now (  )  ;   }  if  ( cache refresh executor  !  =  null )   {  cache refresh executor . shutdown now (  )  ;   }  if  ( scheduler  !  =  null )   {  scheduler . shutdown now (  )  ;   }   }  ,386,3,scheduled,2,[]
983,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,cancel scheduled tasks,private void   (  )  {  if  ( instance info replicator  !  =  null )   {  instance info replicator . stop (  )  ;   }  if  ( heartbeat executor  !  =  null )   {  heartbeat executor . shutdown now (  )  ;   }  if  ( cache refresh executor  !  =  null )   {  cache refresh executor . shutdown now (  )  ;   }  if  ( scheduler  !  =  null )   {  scheduler . shutdown now (  )  ;   }   }  ,386,3,tasks,3,[]
984,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,compute staleness monitor delay,private long   ( long delay )  {  if  ( delay  <  0 )   {  return  system . current time millis (  )   -  init timestamp ms ;   }  else  {  return delay ;   }   }  ,164,4,compute,1,[]
985,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,compute staleness monitor delay,private long   ( long delay )  {  if  ( delay  <  0 )   {  return  system . current time millis (  )   -  init timestamp ms ;   }  else  {  return delay ;   }   }  ,164,4,staleness,2,[]
986,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,compute staleness monitor delay,private long   ( long delay )  {  if  ( delay  <  0 )   {  return  system . current time millis (  )   -  init timestamp ms ;   }  else  {  return delay ;   }   }  ,164,4,monitor,3,[]
987,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,compute staleness monitor delay,private long   ( long delay )  {  if  ( delay  <  0 )   {  return  system . current time millis (  )   -  init timestamp ms ;   }  else  {  return delay ;   }   }  ,164,4,delay,4,"[22, 40, 147]"
988,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,fetch registry,"private boolean   ( boolean force full registry fetch )  {   stopwatch tracer = fetch   registry   timer . start (  )  ;  try  {   applications applications = get applications (  )  ;  if  ( client config . should disable delta (  )  ||  (  !  strings . is null or empty ( client config . get registry refresh single vip address (  )  )  )  || force full registry fetch||  ( applications  =  =  null ) ||  ( applications . get registered applications (  )  . size (  )   =  =  0 ) ||  ( applications . get version (  )   =  =   - 1 )  )   {  logger . info ( "" disable delta property :  {  } "" client config . should disable delta (  )  )  ;  logger . info ( "" single vip registry refresh property :  {  } "" client config . get registry refresh single vip address (  )  )  ;  logger . info ( "" force full registry fetch :  {  } "" force full registry fetch )  ;  logger . info ( "" application is null :  {  } ""  ( applications  =  =  null )  )  ;  logger . info ( "" registered  applications size is zero :  {  } ""  ( applications . get registered applications (  )  . size (  )   =  =  0 )  )  ;  logger . info ( "" application version is  - 1:  {  } ""  ( applications . get version (  )   =  =   - 1 )  )  ;  get and store full registry (  )  ;   }  else  {  get and update delta ( applications )  ;   }  applications . set apps hash code ( applications . get reconcile hash code (  )  )  ;  log total instances (  )  ;   }  catch  (   throwable e )   {  logger . error ( prefix  +  "" {  }   -  was unable to refresh its cache !  status  =   {  } "" app path identifier e . get message (  )  e )  ;  return false ;   }  finally  {  if  ( tracer  !  =  null )   {  tracer . stop (  )  ;   }   }  on cache refreshed (  )  ;  update instance remote status (  )  ;  return true ;   }  ",1778,2,fetch,1,"[48, 80, 364, 813, 849]"
989,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,fetch registry,"private boolean   ( boolean force full registry fetch )  {   stopwatch tracer = fetch   registry   timer . start (  )  ;  try  {   applications applications = get applications (  )  ;  if  ( client config . should disable delta (  )  ||  (  !  strings . is null or empty ( client config . get registry refresh single vip address (  )  )  )  || force full registry fetch||  ( applications  =  =  null ) ||  ( applications . get registered applications (  )  . size (  )   =  =  0 ) ||  ( applications . get version (  )   =  =   - 1 )  )   {  logger . info ( "" disable delta property :  {  } "" client config . should disable delta (  )  )  ;  logger . info ( "" single vip registry refresh property :  {  } "" client config . get registry refresh single vip address (  )  )  ;  logger . info ( "" force full registry fetch :  {  } "" force full registry fetch )  ;  logger . info ( "" application is null :  {  } ""  ( applications  =  =  null )  )  ;  logger . info ( "" registered  applications size is zero :  {  } ""  ( applications . get registered applications (  )  . size (  )   =  =  0 )  )  ;  logger . info ( "" application version is  - 1:  {  } ""  ( applications . get version (  )   =  =   - 1 )  )  ;  get and store full registry (  )  ;   }  else  {  get and update delta ( applications )  ;   }  applications . set apps hash code ( applications . get reconcile hash code (  )  )  ;  log total instances (  )  ;   }  catch  (   throwable e )   {  logger . error ( prefix  +  "" {  }   -  was unable to refresh its cache !  status  =   {  } "" app path identifier e . get message (  )  e )  ;  return false ;   }  finally  {  if  ( tracer  !  =  null )   {  tracer . stop (  )  ;   }   }  on cache refreshed (  )  ;  update instance remote status (  )  ;  return true ;   }  ",1778,2,registry,2,"[39, 88, 293, 355, 671, 727, 804, 840, 1226]"
990,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,fetch registry from backup,"private void   (  )  {  try  {  @ suppress warnings ( ""deprecation"" )   backup registry backup registry instance = new backup registry instance (  )  ;  if  ( null  =  =  backup registry instance )   {  backup registry instance = backup registry provider . get (  )  ;   }  if  ( null  !  =  backup registry instance )   {   applications apps = null ;  if  ( is fetching remote region registries (  )  )   {   string remote regions str = remote regions to fetch . get (  )  ;  if  ( null  !  =  remote regions str )   {  apps = backup registry instance . fetch registry ( remote regions str . split ( "" "" )  )  ;   }   }  else  {  apps = backup registry instance . fetch registry (  )  ;   }  if  ( apps  !  =  null )   {  final  applications applications = this . filter and shuffle ( apps )  ;  applications . set apps hash code ( applications . get reconcile hash code (  )  )  ;  local region apps . set ( applications )  ;  log total instances (  )  ;  logger . info ( "" fetched registry successfully from the backup"" )  ;   }   }  else  {  logger . warn ( "" no backup registry instance defined & unable to find any discovery servers . "" )  ;   }   }  catch  (   throwable e )   {  logger . warn ( "" cannot fetch applications from apps although backup registry was specified"" e )  ;   }   }  ",1297,4,fetch,1,"[362, 456, 555, 665, 976, 1212]"
991,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,fetch registry from backup,"private void   (  )  {  try  {  @ suppress warnings ( ""deprecation"" )   backup registry backup registry instance = new backup registry instance (  )  ;  if  ( null  =  =  backup registry instance )   {  backup registry instance = backup registry provider . get (  )  ;   }  if  ( null  !  =  backup registry instance )   {   applications apps = null ;  if  ( is fetching remote region registries (  )  )   {   string remote regions str = remote regions to fetch . get (  )  ;  if  ( null  !  =  remote regions str )   {  apps = backup registry instance . fetch registry ( remote regions str . split ( "" "" )  )  ;   }   }  else  {  apps = backup registry instance . fetch registry (  )  ;   }  if  ( apps  !  =  null )   {  final  applications applications = this . filter and shuffle ( apps )  ;  applications . set apps hash code ( applications . get reconcile hash code (  )  )  ;  local region apps . set ( applications )  ;  log total instances (  )  ;  logger . info ( "" fetched registry successfully from the backup"" )  ;   }   }  else  {  logger . warn ( "" no backup registry instance defined & unable to find any discovery servers . "" )  ;   }   }  catch  (   throwable e )   {  logger . warn ( "" cannot fetch applications from apps although backup registry was specified"" e )  ;   }   }  ",1297,4,registry,2,"[79, 95, 126, 178, 210, 237, 299, 535, 561, 645, 671, 984, 1074, 1257]"
992,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,fetch registry from backup,"private void   (  )  {  try  {  @ suppress warnings ( ""deprecation"" )   backup registry backup registry instance = new backup registry instance (  )  ;  if  ( null  =  =  backup registry instance )   {  backup registry instance = backup registry provider . get (  )  ;   }  if  ( null  !  =  backup registry instance )   {   applications apps = null ;  if  ( is fetching remote region registries (  )  )   {   string remote regions str = remote regions to fetch . get (  )  ;  if  ( null  !  =  remote regions str )   {  apps = backup registry instance . fetch registry ( remote regions str . split ( "" "" )  )  ;   }   }  else  {  apps = backup registry instance . fetch registry (  )  ;   }  if  ( apps  !  =  null )   {  final  applications applications = this . filter and shuffle ( apps )  ;  applications . set apps hash code ( applications . get reconcile hash code (  )  )  ;  local region apps . set ( applications )  ;  log total instances (  )  ;  logger . info ( "" fetched registry successfully from the backup"" )  ;   }   }  else  {  logger . warn ( "" no backup registry instance defined & unable to find any discovery servers . "" )  ;   }   }  catch  (   throwable e )   {  logger . warn ( "" cannot fetch applications from apps although backup registry was specified"" e )  ;   }   }  ",1297,4,from,3,"[1006, 1231]"
993,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,fetch registry from backup,"private void   (  )  {  try  {  @ suppress warnings ( ""deprecation"" )   backup registry backup registry instance = new backup registry instance (  )  ;  if  ( null  =  =  backup registry instance )   {  backup registry instance = backup registry provider . get (  )  ;   }  if  ( null  !  =  backup registry instance )   {   applications apps = null ;  if  ( is fetching remote region registries (  )  )   {   string remote regions str = remote regions to fetch . get (  )  ;  if  ( null  !  =  remote regions str )   {  apps = backup registry instance . fetch registry ( remote regions str . split ( "" "" )  )  ;   }   }  else  {  apps = backup registry instance . fetch registry (  )  ;   }  if  ( apps  !  =  null )   {  final  applications applications = this . filter and shuffle ( apps )  ;  applications . set apps hash code ( applications . get reconcile hash code (  )  )  ;  local region apps . set ( applications )  ;  log total instances (  )  ;  logger . info ( "" fetched registry successfully from the backup"" )  ;   }   }  else  {  logger . warn ( "" no backup registry instance defined & unable to find any discovery servers . "" )  ;   }   }  catch  (   throwable e )   {  logger . warn ( "" cannot fetch applications from apps although backup registry was specified"" e )  ;   }   }  ",1297,4,backup,4,"[72, 88, 119, 171, 203, 230, 292, 528, 638, 1015, 1067, 1250]"
994,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,filter and shuffle,private  applications   (  applications apps )  {  if  ( apps  !  =  null )   {  if  ( is fetching remote region registries (  )  )   {   map <  string  applications >  remote region vs apps = new  concurrent hash map <  string  applications >  (  )  ;  apps . shuffle and index instances ( remote region vs apps client config instance region checker )  ;  for  (   applications applications : remote region vs apps . values (  )  )   {  applications . shuffle instances ( client config . should filter only up instances (  )  )  ;   }  this . remote region vs apps = remote region vs apps ;   }  else  {  apps . shuffle instances ( client config . should filter only up instances (  )  )  ;   }   }  return apps ;   }  ,720,3,filter,1,"[496, 656]"
995,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,filter and shuffle,private  applications   (  applications apps )  {  if  ( apps  !  =  null )   {  if  ( is fetching remote region registries (  )  )   {   map <  string  applications >  remote region vs apps = new  concurrent hash map <  string  applications >  (  )  ;  apps . shuffle and index instances ( remote region vs apps client config instance region checker )  ;  for  (   applications applications : remote region vs apps . values (  )  )   {  applications . shuffle instances ( client config . should filter only up instances (  )  )  ;   }  this . remote region vs apps = remote region vs apps ;   }  else  {  apps . shuffle instances ( client config . should filter only up instances (  )  )  ;   }   }  return apps ;   }  ,720,3,and,2,[269]
996,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,filter and shuffle,private  applications   (  applications apps )  {  if  ( apps  !  =  null )   {  if  ( is fetching remote region registries (  )  )   {   map <  string  applications >  remote region vs apps = new  concurrent hash map <  string  applications >  (  )  ;  apps . shuffle and index instances ( remote region vs apps client config instance region checker )  ;  for  (   applications applications : remote region vs apps . values (  )  )   {  applications . shuffle instances ( client config . should filter only up instances (  )  )  ;   }  this . remote region vs apps = remote region vs apps ;   }  else  {  apps . shuffle instances ( client config . should filter only up instances (  )  )  ;   }   }  return apps ;   }  ,720,3,shuffle,3,"[261, 453, 613]"
997,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,fire event,"protected void   ( final  eureka event event )  {  for  (   eureka event listener listener : event listeners )   {  try  {  listener . on event ( event )  ;   }  catch  (   exception e )   {  logger . info ( "" event  {  }  throw an exception for listener  {  } "" event listener e . get message (  )  )  ;   }   }   }  ",318,2,fire,1,[]
998,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,fire event,"protected void   ( final  eureka event event )  {  for  (   eureka event listener listener : event listeners )   {  try  {  listener . on event ( event )  ;   }  catch  (   exception e )   {  logger . info ( "" event  {  }  throw an exception for listener  {  } "" event listener e . get message (  )  )  ;   }   }   }  ",318,2,event,2,"[33, 39, 67, 93, 138, 146, 210, 263]"
999,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get,@ override public synchronized  backup registry   (  )  {  if  ( backup registry instance  =  =  null )   {   string backup registry class name = config . get backup registry impl (  )  ;  if  ( null  !  =  backup registry class name )   {  try  {  backup,255,1,get,1,[155]
1000,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get all known regions,public  set <  string >    (  )  {   string local region = instance region checker . get local region (  )  ;  if  (  ! remote region vs apps . is empty (  )  )   {   set <  string >  regions = remote region vs apps . key set (  )  ;   set <  string >  to return = new  hash set <  string >  ( regions )  ;  to return . add ( local region )  ;  return to return ;   }  else  {  return  collections . singleton ( local region )  ;   }   }  ,439,4,get,1,[85]
1001,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get all known regions,public  set <  string >    (  )  {   string local region = instance region checker . get local region (  )  ;  if  (  ! remote region vs apps . is empty (  )  )   {   set <  string >  regions = remote region vs apps . key set (  )  ;   set <  string >  to return = new  hash set <  string >  ( regions )  ;  to return . add ( local region )  ;  return to return ;   }  else  {  return  collections . singleton ( local region )  ;   }   }  ,439,4,all,2,[]
1002,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get all known regions,public  set <  string >    (  )  {   string local region = instance region checker . get local region (  )  ;  if  (  ! remote region vs apps . is empty (  )  )   {   set <  string >  regions = remote region vs apps . key set (  )  ;   set <  string >  to return = new  hash set <  string >  ( regions )  ;  to return . add ( local region )  ;  return to return ;   }  else  {  return  collections . singleton ( local region )  ;   }   }  ,439,4,known,3,[]
1003,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get all known regions,public  set <  string >    (  )  {   string local region = instance region checker . get local region (  )  ;  if  (  ! remote region vs apps . is empty (  )  )   {   set <  string >  regions = remote region vs apps . key set (  )  ;   set <  string >  to return = new  hash set <  string >  ( regions )  ;  to return . add ( local region )  ;  return to return ;   }  else  {  return  collections . singleton ( local region )  ;   }   }  ,439,4,regions,4,"[184, 294]"
1004,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get and store full registry,"private void   (  )  throws  throwable  {  long current update generation = fetch registry generation . get (  )  ;  logger . info ( "" getting all instance registry info from the eureka server"" )  ;   applications apps = null ;   eureka http response <  applications >  http response = client config . get registry refresh single vip address (  )   =  =  null  ?  eureka transport . query client . get applications ( remote regions ref . get (  )  )  : eureka transport . query client . get vip ( client config . get registry refresh single vip address (  )  remote regions ref . get (  )  )  ;  if  ( http response . get status code (  )   =  =   status . ok . get status code (  )  )   {  apps = http response . get entity (  )  ;   }  logger . info ( "" the response status is  {  } "" http response . get status code (  )  )  ;  if  ( apps  =  =  null )   {  logger . error ( "" the application is null for some reason .   not storing this information"" )  ;   }  else if  ( fetch registry generation . compare and set ( current update generation current update generation  +  1 )  )   {  local region apps . set ( this . filter and shuffle ( apps )  )  ;  logger . debug ( "" got full registry with apps hashcode  {  } "" apps . get apps hash code (  )  )  ;   }  else  {  logger . warn ( "" not updating applications as another thread is updating it already"" )  ;   }   }  ",1372,5,get,1,"[104, 135, 302, 398, 438, 487, 513, 580, 618, 662, 714, 803, 1228]"
1005,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get and store full registry,"private void   (  )  throws  throwable  {  long current update generation = fetch registry generation . get (  )  ;  logger . info ( "" getting all instance registry info from the eureka server"" )  ;   applications apps = null ;   eureka http response <  applications >  http response = client config . get registry refresh single vip address (  )   =  =  null  ?  eureka transport . query client . get applications ( remote regions ref . get (  )  )  : eureka transport . query client . get vip ( client config . get registry refresh single vip address (  )  remote regions ref . get (  )  )  ;  if  ( http response . get status code (  )   =  =   status . ok . get status code (  )  )   {  apps = http response . get entity (  )  ;   }  logger . info ( "" the response status is  {  } "" http response . get status code (  )  )  ;  if  ( apps  =  =  null )   {  logger . error ( "" the application is null for some reason .   not storing this information"" )  ;   }  else if  ( fetch registry generation . compare and set ( current update generation current update generation  +  1 )  )   {  local region apps . set ( this . filter and shuffle ( apps )  )  ;  logger . debug ( "" got full registry with apps hashcode  {  } "" apps . get apps hash code (  )  )  ;   }  else  {  logger . warn ( "" not updating applications as another thread is updating it already"" )  ;   }   }  ",1372,5,and,2,"[1011, 1129]"
1006,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get and store full registry,"private void   (  )  throws  throwable  {  long current update generation = fetch registry generation . get (  )  ;  logger . info ( "" getting all instance registry info from the eureka server"" )  ;   applications apps = null ;   eureka http response <  applications >  http response = client config . get registry refresh single vip address (  )   =  =  null  ?  eureka transport . query client . get applications ( remote regions ref . get (  )  )  : eureka transport . query client . get vip ( client config . get registry refresh single vip address (  )  remote regions ref . get (  )  )  ;  if  ( http response . get status code (  )   =  =   status . ok . get status code (  )  )   {  apps = http response . get entity (  )  ;   }  logger . info ( "" the response status is  {  } "" http response . get status code (  )  )  ;  if  ( apps  =  =  null )   {  logger . error ( "" the application is null for some reason .   not storing this information"" )  ;   }  else if  ( fetch registry generation . compare and set ( current update generation current update generation  +  1 )  )   {  local region apps . set ( this . filter and shuffle ( apps )  )  ;  logger . debug ( "" got full registry with apps hashcode  {  } "" apps . get apps hash code (  )  )  ;   }  else  {  logger . warn ( "" not updating applications as another thread is updating it already"" )  ;   }   }  ",1372,5,store,3,[]
1007,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get and store full registry,"private void   (  )  throws  throwable  {  long current update generation = fetch registry generation . get (  )  ;  logger . info ( "" getting all instance registry info from the eureka server"" )  ;   applications apps = null ;   eureka http response <  applications >  http response = client config . get registry refresh single vip address (  )   =  =  null  ?  eureka transport . query client . get applications ( remote regions ref . get (  )  )  : eureka transport . query client . get vip ( client config . get registry refresh single vip address (  )  remote regions ref . get (  )  )  ;  if  ( http response . get status code (  )   =  =   status . ok . get status code (  )  )   {  apps = http response . get entity (  )  ;   }  logger . info ( "" the response status is  {  } "" http response . get status code (  )  )  ;  if  ( apps  =  =  null )   {  logger . error ( "" the application is null for some reason .   not storing this information"" )  ;   }  else if  ( fetch registry generation . compare and set ( current update generation current update generation  +  1 )  )   {  local region apps . set ( this . filter and shuffle ( apps )  )  ;  logger . debug ( "" got full registry with apps hashcode  {  } "" apps . get apps hash code (  )  )  ;   }  else  {  logger . warn ( "" not updating applications as another thread is updating it already"" )  ;   }   }  ",1372,5,full,4,[1180]
1008,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get and store full registry,"private void   (  )  throws  throwable  {  long current update generation = fetch registry generation . get (  )  ;  logger . info ( "" getting all instance registry info from the eureka server"" )  ;   applications apps = null ;   eureka http response <  applications >  http response = client config . get registry refresh single vip address (  )   =  =  null  ?  eureka transport . query client . get applications ( remote regions ref . get (  )  )  : eureka transport . query client . get vip ( client config . get registry refresh single vip address (  )  remote regions ref . get (  )  )  ;  if  ( http response . get status code (  )   =  =   status . ok . get status code (  )  )   {  apps = http response . get entity (  )  ;   }  logger . info ( "" the response status is  {  } "" http response . get status code (  )  )  ;  if  ( apps  =  =  null )   {  logger . error ( "" the application is null for some reason .   not storing this information"" )  ;   }  else if  ( fetch registry generation . compare and set ( current update generation current update generation  +  1 )  )   {  local region apps . set ( this . filter and shuffle ( apps )  )  ;  logger . debug ( "" got full registry with apps hashcode  {  } "" apps . get apps hash code (  )  )  ;   }  else  {  logger . warn ( "" not updating applications as another thread is updating it already"" )  ;   }   }  ",1372,5,registry,5,"[82, 156, 306, 517, 981, 1185]"
1009,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get and update delta,"private void   (  applications applications )  throws  throwable  {  long current update generation = fetch registry generation . get (  )  ;   applications delta = null ;   eureka http response <  applications >  http response = eureka transport . query client . get delta ( remote regions ref . get (  )  )  ;  if  ( http response . get status code (  )   =  =   status . ok . get status code (  )  )   {  delta = http response . get entity (  )  ;   }  if  ( delta  =  =  null )   {  logger . warn ( "" the server does not allow the delta revision to be applied because it is not safe .  ""  +  "" hence got the full registry . "" )  ;  get and store full registry (  )  ;   }  else if  ( fetch registry generation . compare and set ( current update generation current update generation  +  1 )  )   {  logger . debug ( "" got delta update with apps hashcode  {  } "" delta . get apps hash code (  )  )  ;   string reconcile hash code = """" ;  if  ( fetch registry update lock . try lock (  )  )   {  try  {  update delta ( delta )  ;  reconcile hash code = get reconcile hash code ( applications )  ;   }  finally  {  fetch registry update lock . unlock (  )  ;   }   }  else  {  logger . warn ( "" cannot acquire update lock  aborting get and update delta"" )  ;   }  if  (  ! reconcile hash code . equals ( delta . get apps hash code (  )  )  || client config . should log delta diff (  )  )   {  reconcile and log difference ( delta reconcile hash code )  ;   }   }  else  {  logger . warn ( "" not updating application delta as another thread is updating it already"" )  ;  logger . debug ( "" ignoring delta update with apps hashcode  {  }   as another thread is updating it already"" delta . get apps hash code (  )  )  ;   }   }  ",1728,4,get,1,"[130, 264, 297, 335, 379, 432, 636, 873, 1054, 1232, 1312, 1689]"
1010,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get and update delta,"private void   (  applications applications )  throws  throwable  {  long current update generation = fetch registry generation . get (  )  ;   applications delta = null ;   eureka http response <  applications >  http response = eureka transport . query client . get delta ( remote regions ref . get (  )  )  ;  if  ( http response . get status code (  )   =  =   status . ok . get status code (  )  )   {  delta = http response . get entity (  )  ;   }  if  ( delta  =  =  null )   {  logger . warn ( "" the server does not allow the delta revision to be applied because it is not safe .  ""  +  "" hence got the full registry . "" )  ;  get and store full registry (  )  ;   }  else if  ( fetch registry generation . compare and set ( current update generation current update generation  +  1 )  )   {  logger . debug ( "" got delta update with apps hashcode  {  } "" delta . get apps hash code (  )  )  ;   string reconcile hash code = """" ;  if  ( fetch registry update lock . try lock (  )  )   {  try  {  update delta ( delta )  ;  reconcile hash code = get reconcile hash code ( applications )  ;   }  finally  {  fetch registry update lock . unlock (  )  ;   }   }  else  {  logger . warn ( "" cannot acquire update lock  aborting get and update delta"" )  ;   }  if  (  ! reconcile hash code . equals ( delta . get apps hash code (  )  )  || client config . should log delta diff (  )  )   {  reconcile and log difference ( delta reconcile hash code )  ;   }   }  else  {  logger . warn ( "" not updating application delta as another thread is updating it already"" )  ;  logger . debug ( "" ignoring delta update with apps hashcode  {  }   as another thread is updating it already"" delta . get apps hash code (  )  )  ;   }   }  ",1728,4,and,2,"[640, 724, 1236, 1404]"
1011,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get and update delta,"private void   (  applications applications )  throws  throwable  {  long current update generation = fetch registry generation . get (  )  ;   applications delta = null ;   eureka http response <  applications >  http response = eureka transport . query client . get delta ( remote regions ref . get (  )  )  ;  if  ( http response . get status code (  )   =  =   status . ok . get status code (  )  )   {  delta = http response . get entity (  )  ;   }  if  ( delta  =  =  null )   {  logger . warn ( "" the server does not allow the delta revision to be applied because it is not safe .  ""  +  "" hence got the full registry . "" )  ;  get and store full registry (  )  ;   }  else if  ( fetch registry generation . compare and set ( current update generation current update generation  +  1 )  )   {  logger . debug ( "" got delta update with apps hashcode  {  } "" delta . get apps hash code (  )  )  ;   string reconcile hash code = """" ;  if  ( fetch registry update lock . try lock (  )  )   {  try  {  update delta ( delta )  ;  reconcile hash code = get reconcile hash code ( applications )  ;   }  finally  {  fetch registry update lock . unlock (  )  ;   }   }  else  {  logger . warn ( "" cannot acquire update lock  aborting get and update delta"" )  ;   }  if  (  ! reconcile hash code . equals ( delta . get apps hash code (  )  )  || client config . should log delta diff (  )  )   {  reconcile and log difference ( delta reconcile hash code )  ;   }   }  else  {  logger . warn ( "" not updating application delta as another thread is updating it already"" )  ;  logger . debug ( "" ignoring delta update with apps hashcode  {  }   as another thread is updating it already"" delta . get apps hash code (  )  )  ;   }   }  ",1728,4,update,3,"[82, 742, 768, 831, 961, 1005, 1130, 1210, 1240, 1605]"
1012,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get and update delta,"private void   (  applications applications )  throws  throwable  {  long current update generation = fetch registry generation . get (  )  ;   applications delta = null ;   eureka http response <  applications >  http response = eureka transport . query client . get delta ( remote regions ref . get (  )  )  ;  if  ( http response . get status code (  )   =  =   status . ok . get status code (  )  )   {  delta = http response . get entity (  )  ;   }  if  ( delta  =  =  null )   {  logger . warn ( "" the server does not allow the delta revision to be applied because it is not safe .  ""  +  "" hence got the full registry . "" )  ;  get and store full registry (  )  ;   }  else if  ( fetch registry generation . compare and set ( current update generation current update generation  +  1 )  )   {  logger . debug ( "" got delta update with apps hashcode  {  } "" delta . get apps hash code (  )  )  ;   string reconcile hash code = """" ;  if  ( fetch registry update lock . try lock (  )  )   {  try  {  update delta ( delta )  ;  reconcile hash code = get reconcile hash code ( applications )  ;   }  finally  {  fetch registry update lock . unlock (  )  ;   }   }  else  {  logger . warn ( "" cannot acquire update lock  aborting get and update delta"" )  ;   }  if  (  ! reconcile hash code . equals ( delta . get apps hash code (  )  )  || client config . should log delta diff (  )  )   {  reconcile and log difference ( delta reconcile hash code )  ;   }   }  else  {  logger . warn ( "" not updating application delta as another thread is updating it already"" )  ;  logger . debug ( "" ignoring delta update with apps hashcode  {  }   as another thread is updating it already"" delta . get apps hash code (  )  )  ;   }   }  ",1728,4,delta,4,"[157, 268, 408, 462, 535, 825, 865, 1012, 1020, 1247, 1304, 1370, 1425, 1517, 1599, 1681]"
1013,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get application,@ override public  application   (  string app name )  {  return get applications (  )  . get registered applications ( app name )  ;   }  ,139,2,get,1,"[65, 90]"
1014,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get application,@ override public  application   (  string app name )  {  return get applications (  )  . get registered applications ( app name )  ;   }  ,139,2,application,2,"[19, 69, 105]"
1015,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get application info manager,@ override public  application info manager   (  )  {  return application info manager ;   }  ,94,4,get,1,[]
1016,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get application info manager,@ override public  application info manager   (  )  {  return application info manager ;   }  ,94,4,application,2,"[19, 62]"
1017,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get application info manager,@ override public  application info manager   (  )  {  return application info manager ;   }  ,94,4,info,3,"[31, 74]"
1018,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get application info manager,@ override public  application info manager   (  )  {  return application info manager ;   }  ,94,4,manager,4,"[36, 79]"
1019,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get applications,@ override public  applications   (  string service url )  {  try  {   eureka http response <  applications >  response = client config . get registry refresh single vip address (  )   =  =  null  ?  eureka transport . query client . get applications (  ),255,2,get,1,"[138, 234]"
1020,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get applications,@ override public  applications   (  string service url )  {  try  {   eureka http response <  applications >  response = client config . get registry refresh single vip address (  )   =  =  null  ?  eureka transport . query client . get applications (  ),255,2,applications,2,"[19, 95, 238]"
1021,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get applications fora region,@ override public  applications   ( @ nullable  string region )  {  if  ( instance region checker . is local region ( region )  )   {  return local region apps . get (  )  ;   }  else  {  return remote region vs apps . get ( region )  ;   }   }  ,246,4,get,1,"[162, 219]"
1022,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get applications fora region,@ override public  applications   ( @ nullable  string region )  {  if  ( instance region checker . is local region ( region )  )   {  return local region apps . get (  )  ;   }  else  {  return remote region vs apps . get ( region )  ;   }   }  ,246,4,applications,2,[19]
1023,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get applications fora region,@ override public  applications   ( @ nullable  string region )  {  if  ( instance region checker . is local region ( region )  )   {  return local region apps . get (  )  ;   }  else  {  return remote region vs apps . get ( region )  ;   }   }  ,246,4,fora,3,[]
1024,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get applications fora region,@ override public  applications   ( @ nullable  string region )  {  if  ( instance region checker . is local region ( region )  )   {  return local region apps . get (  )  ;   }  else  {  return remote region vs apps . get ( region )  ;   }   }  ,246,4,region,4,"[55, 83, 109, 118, 148, 202, 225]"
1025,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get discovery service urls,@ deprecated @ override public  list <  string >    (  string zone )  {  return  endpoint utils . get discovery service urls ( client config zone url randomizer )  ;   }  ,171,4,get,1,[98]
1026,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get discovery service urls,@ deprecated @ override public  list <  string >    (  string zone )  {  return  endpoint utils . get discovery service urls ( client config zone url randomizer )  ;   }  ,171,4,discovery,2,[102]
1027,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get discovery service urls,@ deprecated @ override public  list <  string >    (  string zone )  {  return  endpoint utils . get discovery service urls ( client config zone url randomizer )  ;   }  ,171,4,service,3,[112]
1028,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get discovery service urls,@ deprecated @ override public  list <  string >    (  string zone )  {  return  endpoint utils . get discovery service urls ( client config zone url randomizer )  ;   }  ,171,4,urls,4,[120]
1029,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,getec discovery urls from zone,@ deprecated public static  set <  string >    (  string dns name  endpoint utils .  discovery url type type )  {  return  endpoint utils . getec2 discovery urls from zone ( dns name type )  ;   }  ,198,5,getec,1,[140]
1030,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,getec discovery urls from zone,@ deprecated public static  set <  string >    (  string dns name  endpoint utils .  discovery url type type )  {  return  endpoint utils . getec2 discovery urls from zone ( dns name type )  ;   }  ,198,5,discovery,2,"[85, 147]"
1031,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,getec discovery urls from zone,@ deprecated public static  set <  string >    (  string dns name  endpoint utils .  discovery url type type )  {  return  endpoint utils . getec2 discovery urls from zone ( dns name type )  ;   }  ,198,5,urls,3,[157]
1032,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,getec discovery urls from zone,@ deprecated public static  set <  string >    (  string dns name  endpoint utils .  discovery url type type )  {  return  endpoint utils . getec2 discovery urls from zone ( dns name type )  ;   }  ,198,5,from,4,[162]
1033,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,getec discovery urls from zone,@ deprecated public static  set <  string >    (  string dns name  endpoint utils .  discovery url type type )  {  return  endpoint utils . getec2 discovery urls from zone ( dns name type )  ;   }  ,198,5,zone,5,[167]
1034,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get eureka client config,@ override public  eureka client config   (  )  {  return client config ;   }  ,79,4,get,1,[]
1035,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get eureka client config,@ override public  eureka client config   (  )  {  return client config ;   }  ,79,4,eureka,2,[19]
1036,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get eureka client config,@ override public  eureka client config   (  )  {  return client config ;   }  ,79,4,client,3,"[26, 58]"
1037,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get eureka client config,@ override public  eureka client config   (  )  {  return client config ;   }  ,79,4,config,4,"[33, 65]"
1038,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get eureka service urls from config,@ deprecated public static  list <  string >    (  string instance zone boolean prefer same zone )  {  return  endpoint utils . get service urls from config ( static client config instance zone prefer same zone )  ;   }  ,221,6,get,1,[128]
1039,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get eureka service urls from config,@ deprecated public static  list <  string >    (  string instance zone boolean prefer same zone )  {  return  endpoint utils . get service urls from config ( static client config instance zone prefer same zone )  ;   }  ,221,6,eureka,2,[]
1040,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get eureka service urls from config,@ deprecated public static  list <  string >    (  string instance zone boolean prefer same zone )  {  return  endpoint utils . get service urls from config ( static client config instance zone prefer same zone )  ;   }  ,221,6,service,3,[132]
1041,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get eureka service urls from config,@ deprecated public static  list <  string >    (  string instance zone boolean prefer same zone )  {  return  endpoint utils . get service urls from config ( static client config instance zone prefer same zone )  ;   }  ,221,6,urls,4,[140]
1042,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get eureka service urls from config,@ deprecated public static  list <  string >    (  string instance zone boolean prefer same zone )  {  return  endpoint utils . get service urls from config ( static client config instance zone prefer same zone )  ;   }  ,221,6,from,5,[145]
1043,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get eureka service urls from config,@ deprecated public static  list <  string >    (  string instance zone boolean prefer same zone )  {  return  endpoint utils . get service urls from config ( static client config instance zone prefer same zone )  ;   }  ,221,6,config,6,"[150, 173]"
1044,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get health check handler,@ override public  health check handler   (  )  {  if  ( health check handler  =  =  null )   {  if  ( null  !  =  health check handler provider )   {  health check handler = health check handler provider . get (  )  ;   }  else if  ( null  !  =  health c,255,4,get,1,[207]
1045,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get health check handler,@ override public  health check handler   (  )  {  if  ( health check handler  =  =  null )   {  if  ( null  !  =  health check handler provider )   {  health check handler = health check handler provider . get (  )  ;   }  else if  ( null  !  =  health c,255,4,health,2,"[19, 57, 115, 152, 175, 247]"
1046,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get health check handler,@ override public  health check handler   (  )  {  if  ( health check handler  =  =  null )   {  if  ( null  !  =  health check handler provider )   {  health check handler = health check handler provider . get (  )  ;   }  else if  ( null  !  =  health c,255,4,check,3,"[26, 64, 122, 159, 182]"
1047,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get health check handler,@ override public  health check handler   (  )  {  if  ( health check handler  =  =  null )   {  if  ( null  !  =  health check handler provider )   {  health check handler = health check handler provider . get (  )  ;   }  else if  ( null  !  =  health c,255,4,handler,4,"[32, 70, 128, 165, 188]"
1048,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get id,"@ override public  string   (  )  {  return ""status change listener"" ;   }  ",76,2,get,1,[]
1049,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get id,"@ override public  string   (  )  {  return ""status change listener"" ;   }  ",76,2,id,2,[7]
1050,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get instance info,@ visible for testing  instance info   (  )  {  return instance info ;   }  ,76,3,get,1,[]
1051,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get instance info,@ visible for testing  instance info   (  )  {  return instance info ;   }  ,76,3,instance,2,"[23, 55]"
1052,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get instance info,@ visible for testing  instance info   (  )  {  return instance info ;   }  ,76,3,info,3,"[32, 64]"
1053,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get instance info replicator,@ visible for testing  instance info replicator   (  )  {  return instance info replicator ;   }  ,98,4,get,1,[]
1054,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get instance info replicator,@ visible for testing  instance info replicator   (  )  {  return instance info replicator ;   }  ,98,4,instance,2,"[23, 66]"
1055,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get instance info replicator,@ visible for testing  instance info replicator   (  )  {  return instance info replicator ;   }  ,98,4,info,3,"[32, 75]"
1056,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get instance info replicator,@ visible for testing  instance info replicator   (  )  {  return instance info replicator ;   }  ,98,4,replicator,4,"[37, 80]"
1057,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get instance remote status,@ override public  instance info .  instance status   (  )  {  return last remote instance status ;   }  ,105,4,get,1,[]
1058,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get instance remote status,@ override public  instance info .  instance status   (  )  {  return last remote instance status ;   }  ,105,4,instance,2,"[19, 36, 82]"
1059,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get instance remote status,@ override public  instance info .  instance status   (  )  {  return last remote instance status ;   }  ,105,4,remote,3,[75]
1060,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get instance remote status,@ override public  instance info .  instance status   (  )  {  return last remote instance status ;   }  ,105,4,status,4,"[45, 91]"
1061,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get instances by id,@ override public  list <  instance info >    (  string id )  {   list <  instance info >  instances list = new  array list <  instance info >  (  )  ;  for  (   application app : this . get applications (  )  . get registered applications (  )  )   {   i,255,4,get,1,"[187, 212]"
1062,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get instances by id,@ override public  list <  instance info >    (  string id )  {   list <  instance info >  instances list = new  array list <  instance info >  (  )  ;  for  (   application app : this . get applications (  )  . get registered applications (  )  )   {   i,255,4,instances,2,[91]
1063,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get instances by id,@ override public  list <  instance info >    (  string id )  {   list <  instance info >  instances list = new  array list <  instance info >  (  )  ;  for  (   application app : this . get applications (  )  . get registered applications (  )  )   {   i,255,4,by,3,[]
1064,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get instances by id,@ override public  list <  instance info >    (  string id )  {   list <  instance info >  instances list = new  array list <  instance info >  (  )  ;  for  (   application app : this . get applications (  )  . get registered applications (  )  )   {   i,255,4,id,4,"[7, 56]"
1065,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get instances by vip address,"@ override public  list <  instance info >    (  string vip address boolean secure @ nullable  string region )  {  if  ( vip address  =  =  null )   {  throw new  illegal argument exception ( "" supplied vip  address cannot be null"" )  ;   }   applications",255,5,get,1,[]
1066,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get instances by vip address,"@ override public  list <  instance info >    (  string vip address boolean secure @ nullable  string region )  {  if  ( vip address  =  =  null )   {  throw new  illegal argument exception ( "" supplied vip  address cannot be null"" )  ;   }   applications",255,5,instances,2,[]
1067,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get instances by vip address,"@ override public  list <  instance info >    (  string vip address boolean secure @ nullable  string region )  {  if  ( vip address  =  =  null )   {  throw new  illegal argument exception ( "" supplied vip  address cannot be null"" )  ;   }   applications",255,5,by,3,[]
1068,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get instances by vip address,"@ override public  list <  instance info >    (  string vip address boolean secure @ nullable  string region )  {  if  ( vip address  =  =  null )   {  throw new  illegal argument exception ( "" supplied vip  address cannot be null"" )  ;   }   applications",255,5,vip,4,"[56, 121, 203]"
1069,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get instances by vip address,"@ override public  list <  instance info >    (  string vip address boolean secure @ nullable  string region )  {  if  ( vip address  =  =  null )   {  throw new  illegal argument exception ( "" supplied vip  address cannot be null"" )  ;   }   applications",255,5,address,5,"[60, 125, 208]"
1070,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java, default eureka client config,"public   (  string namespace )  {  this . namespace = namespace . ends with ( "" . "" )   ?  namespace : namespace  +  "" . "" ;  this . config instance =  archaius1 utils . init config (  common constants . config   file   name )  ;  this . transport config = new  default eureka transport config ( namespace config instance )  ;   }  ",332,4,default,1,[262]
1071,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java, default eureka client config,"public   (  string namespace )  {  this . namespace = namespace . ends with ( "" . "" )   ?  namespace : namespace  +  "" . "" ;  this . config instance =  archaius1 utils . init config (  common constants . config   file   name )  ;  this . transport config = new  default eureka transport config ( namespace config instance )  ;   }  ",332,4,eureka,2,[270]
1072,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java, default eureka client config,"public   (  string namespace )  {  this . namespace = namespace . ends with ( "" . "" )   ?  namespace : namespace  +  "" . "" ;  this . config instance =  archaius1 utils . init config (  common constants . config   file   name )  ;  this . transport config = new  default eureka transport config ( namespace config instance )  ;   }  ",332,4,client,3,[]
1073,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java, default eureka client config,"public   (  string namespace )  {  this . namespace = namespace . ends with ( "" . "" )   ?  namespace : namespace  +  "" . "" ;  this . config instance =  archaius1 utils . init config (  common constants . config   file   name )  ;  this . transport config = new  default eureka transport config ( namespace config instance )  ;   }  ",332,4,config,4,"[133, 175, 204, 248, 287, 306]"
1074,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,allow redirects,@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  should   allow   redirects   key false )  . get (  )  ;   }  ,160,2,allow,1,[108]
1075,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,allow redirects,@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  should   allow   redirects   key false )  . get (  )  ;   }  ,160,2,redirects,2,[116]
1076,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,fetch registry for remote regions,@ nullable @ override public  string   (  )  {  return config instance . get string property ( namespace  +  should   fetch   remote   region   key null )  . get (  )  ;   }  ,175,5,fetch,1,[118]
1077,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,fetch registry for remote regions,@ nullable @ override public  string   (  )  {  return config instance . get string property ( namespace  +  should   fetch   remote   region   key null )  . get (  )  ;   }  ,175,5,registry,2,[]
1078,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,fetch registry for remote regions,@ nullable @ override public  string   (  )  {  return config instance . get string property ( namespace  +  should   fetch   remote   region   key null )  . get (  )  ;   }  ,175,5,for,3,[]
1079,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,fetch registry for remote regions,@ nullable @ override public  string   (  )  {  return config instance . get string property ( namespace  +  should   fetch   remote   region   key null )  . get (  )  ;   }  ,175,5,remote,4,[126]
1080,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,fetch registry for remote regions,@ nullable @ override public  string   (  )  {  return config instance . get string property ( namespace  +  should   fetch   remote   region   key null )  . get (  )  ;   }  ,175,5,regions,5,[]
1081,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get availability zones,"@ override public  string[]   (  string region )  {  return config instance . get string property ( namespace  +  region  +  "" . "" +  config   availability   zone   prefix default   zone )  . get (  )  . split ( "" "" )  ;   }  ",226,3,get,1,"[78, 192]"
1082,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get availability zones,"@ override public  string[]   (  string region )  {  return config instance . get string property ( namespace  +  region  +  "" . "" +  config   availability   zone   prefix default   zone )  . get (  )  . split ( "" "" )  ;   }  ",226,3,availability,2,[143]
1083,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get availability zones,"@ override public  string[]   (  string region )  {  return config instance . get string property ( namespace  +  region  +  "" . "" +  config   availability   zone   prefix default   zone )  . get (  )  . split ( "" "" )  ;   }  ",226,3,zones,3,[]
1084,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get backup registry impl,@ override public  string   (  )  {  return config instance . get string property ( namespace  +  backup   registry   classname   key null )  . get (  )  ;   }  ,161,4,get,1,"[62, 144]"
1085,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get backup registry impl,@ override public  string   (  )  {  return config instance . get string property ( namespace  +  backup   registry   classname   key null )  . get (  )  ;   }  ,161,4,backup,2,[98]
1086,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get backup registry impl,@ override public  string   (  )  {  return config instance . get string property ( namespace  +  backup   registry   classname   key null )  . get (  )  ;   }  ,161,4,registry,3,[107]
1087,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get backup registry impl,@ override public  string   (  )  {  return config instance . get string property ( namespace  +  backup   registry   classname   key null )  . get (  )  ;   }  ,161,4,impl,4,[]
1088,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get cache refresh executor exponential back off bound,@ override public int   (  )  {  return config instance . get int property ( namespace  +  cacherefresh   backoff   bound   key  values . default   executor   thread   pool   backoff   bound )  . get (  )  ;   }  ,213,8,get,1,"[58, 196]"
1089,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get cache refresh executor exponential back off bound,@ override public int   (  )  {  return config instance . get int property ( namespace  +  cacherefresh   backoff   bound   key  values . default   executor   thread   pool   backoff   bound )  . get (  )  ;   }  ,213,8,cache,2,[91]
1090,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get cache refresh executor exponential back off bound,@ override public int   (  )  {  return config instance . get int property ( namespace  +  cacherefresh   backoff   bound   key  values . default   executor   thread   pool   backoff   bound )  . get (  )  ;   }  ,213,8,refresh,3,[96]
1091,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get cache refresh executor exponential back off bound,@ override public int   (  )  {  return config instance . get int property ( namespace  +  cacherefresh   backoff   bound   key  values . default   executor   thread   pool   backoff   bound )  . get (  )  ;   }  ,213,8,executor,4,[148]
1092,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get cache refresh executor exponential back off bound,@ override public int   (  )  {  return config instance . get int property ( namespace  +  cacherefresh   backoff   bound   key  values . default   executor   thread   pool   backoff   bound )  . get (  )  ;   }  ,213,8,exponential,5,[]
1093,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get cache refresh executor exponential back off bound,@ override public int   (  )  {  return config instance . get int property ( namespace  +  cacherefresh   backoff   bound   key  values . default   executor   thread   pool   backoff   bound )  . get (  )  ;   }  ,213,8,back,6,"[106, 175]"
1094,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get cache refresh executor exponential back off bound,@ override public int   (  )  {  return config instance . get int property ( namespace  +  cacherefresh   backoff   bound   key  values . default   executor   thread   pool   backoff   bound )  . get (  )  ;   }  ,213,8,off,7,"[110, 179]"
1095,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get cache refresh executor exponential back off bound,@ override public int   (  )  {  return config instance . get int property ( namespace  +  cacherefresh   backoff   bound   key  values . default   executor   thread   pool   backoff   bound )  . get (  )  ;   }  ,213,8,bound,8,"[116, 185]"
1096,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get cache refresh executor thread pool size,@ override public int   (  )  {  return config instance . get int property ( namespace  +  cacherefresh   threadpool   size   key  values . default   executor   thread   pool   size )  . get (  )  ;   }  ,204,7,get,1,"[58, 187]"
1097,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get cache refresh executor thread pool size,@ override public int   (  )  {  return config instance . get int property ( namespace  +  cacherefresh   threadpool   size   key  values . default   executor   thread   pool   size )  . get (  )  ;   }  ,204,7,cache,2,[91]
1098,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get cache refresh executor thread pool size,@ override public int   (  )  {  return config instance . get int property ( namespace  +  cacherefresh   threadpool   size   key  values . default   executor   thread   pool   size )  . get (  )  ;   }  ,204,7,refresh,3,[96]
1099,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get cache refresh executor thread pool size,@ override public int   (  )  {  return config instance . get int property ( namespace  +  cacherefresh   threadpool   size   key  values . default   executor   thread   pool   size )  . get (  )  ;   }  ,204,7,executor,4,[150]
1100,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get cache refresh executor thread pool size,@ override public int   (  )  {  return config instance . get int property ( namespace  +  cacherefresh   threadpool   size   key  values . default   executor   thread   pool   size )  . get (  )  ;   }  ,204,7,thread,5,"[106, 161]"
1101,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get cache refresh executor thread pool size,@ override public int   (  )  {  return config instance . get int property ( namespace  +  cacherefresh   threadpool   size   key  values . default   executor   thread   pool   size )  . get (  )  ;   }  ,204,7,pool,6,"[112, 170]"
1102,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get cache refresh executor thread pool size,@ override public int   (  )  {  return config instance . get int property ( namespace  +  cacherefresh   threadpool   size   key  values . default   executor   thread   pool   size )  . get (  )  ;   }  ,204,7,size,7,"[119, 177]"
1103,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get client data accept,@ override public  string   (  )  {  return config instance . get string property ( namespace  +  client   data   accept   key  eureka accept . full . name (  )  )  . get (  )  ;   }  ,184,4,get,1,"[62, 167]"
1104,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get client data accept,@ override public  string   (  )  {  return config instance . get string property ( namespace  +  client   data   accept   key  eureka accept . full . name (  )  )  . get (  )  ;   }  ,184,4,client,2,[98]
1105,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get client data accept,@ override public  string   (  )  {  return config instance . get string property ( namespace  +  client   data   accept   key  eureka accept . full . name (  )  )  . get (  )  ;   }  ,184,4,data,3,[107]
1106,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get client data accept,@ override public  string   (  )  {  return config instance . get string property ( namespace  +  client   data   accept   key  eureka accept . full . name (  )  )  . get (  )  ;   }  ,184,4,accept,4,"[114, 135]"
1107,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get decoder name,@ override public  string   (  )  {  return config instance . get string property ( namespace  +  client   decoder   name   key null )  . get (  )  ;   }  ,155,3,get,1,"[62, 138]"
1108,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get decoder name,@ override public  string   (  )  {  return config instance . get string property ( namespace  +  client   decoder   name   key null )  . get (  )  ;   }  ,155,3,decoder,2,[107]
1109,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get decoder name,@ override public  string   (  )  {  return config instance . get string property ( namespace  +  client   decoder   name   key null )  . get (  )  ;   }  ,155,3,name,3,"[84, 117]"
1110,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get dollar replacement,@ override public  string   (  )  {  return config instance . get string property ( namespace  +  config   dollar   replacement   key  values . config   dollar   replacement )  . get (  )  ;   }  ,196,3,get,1,"[62, 179]"
1111,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get dollar replacement,@ override public  string   (  )  {  return config instance . get string property ( namespace  +  config   dollar   replacement   key  values . config   dollar   replacement )  . get (  )  ;   }  ,196,3,dollar,2,"[107, 153]"
1112,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get dollar replacement,@ override public  string   (  )  {  return config instance . get string property ( namespace  +  config   dollar   replacement   key  values . config   dollar   replacement )  . get (  )  ;   }  ,196,3,replacement,3,"[116, 162]"
1113,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get encoder name,@ override public  string   (  )  {  return config instance . get string property ( namespace  +  client   encoder   name   key null )  . get (  )  ;   }  ,155,3,get,1,"[62, 138]"
1114,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get encoder name,@ override public  string   (  )  {  return config instance . get string property ( namespace  +  client   encoder   name   key null )  . get (  )  ;   }  ,155,3,encoder,2,[107]
1115,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get encoder name,@ override public  string   (  )  {  return config instance . get string property ( namespace  +  client   encoder   name   key null )  . get (  )  ;   }  ,155,3,name,3,"[84, 117]"
1116,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get escape char replacement,@ override public  string   (  )  {  return config instance . get string property ( namespace  +  config   escape   char   replacement   key  values . config   escape   char   replacement )  . get (  )  ;   }  ,210,4,get,1,"[62, 193]"
1117,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get escape char replacement,@ override public  string   (  )  {  return config instance . get string property ( namespace  +  config   escape   char   replacement   key  values . config   escape   char   replacement )  . get (  )  ;   }  ,210,4,escape,2,"[107, 160]"
1118,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get escape char replacement,@ override public  string   (  )  {  return config instance . get string property ( namespace  +  config   escape   char   replacement   key  values . config   escape   char   replacement )  . get (  )  ;   }  ,210,4,char,3,"[116, 169]"
1119,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get escape char replacement,@ override public  string   (  )  {  return config instance . get string property ( namespace  +  config   escape   char   replacement   key  values . config   escape   char   replacement )  . get (  )  ;   }  ,210,4,replacement,4,"[123, 176]"
1120,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get eureka connection idle timeout seconds,@ override public int   (  )  {  return config instance . get int property ( namespace  +  eureka   server   connection   idle   timeout   key 30 )  . get (  )  ;   }  ,168,6,get,1,"[58, 151]"
1121,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get eureka connection idle timeout seconds,@ override public int   (  )  {  return config instance . get int property ( namespace  +  eureka   server   connection   idle   timeout   key 30 )  . get (  )  ;   }  ,168,6,eureka,2,[91]
1122,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get eureka connection idle timeout seconds,@ override public int   (  )  {  return config instance . get int property ( namespace  +  eureka   server   connection   idle   timeout   key 30 )  . get (  )  ;   }  ,168,6,connection,3,[109]
1123,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get eureka connection idle timeout seconds,@ override public int   (  )  {  return config instance . get int property ( namespace  +  eureka   server   connection   idle   timeout   key 30 )  . get (  )  ;   }  ,168,6,idle,4,[122]
1124,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get eureka connection idle timeout seconds,@ override public int   (  )  {  return config instance . get int property ( namespace  +  eureka   server   connection   idle   timeout   key 30 )  . get (  )  ;   }  ,168,6,timeout,5,[129]
1125,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get eureka connection idle timeout seconds,@ override public int   (  )  {  return config instance . get int property ( namespace  +  eureka   server   connection   idle   timeout   key 30 )  . get (  )  ;   }  ,168,6,seconds,6,[]
1126,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get eureka server connect timeout seconds,@ override public int   (  )  {  return config instance . get int property ( namespace  +  eureka   server   connect   timeout   key 5 )  . get (  )  ;   }  ,157,6,get,1,"[58, 140]"
1127,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get eureka server connect timeout seconds,@ override public int   (  )  {  return config instance . get int property ( namespace  +  eureka   server   connect   timeout   key 5 )  . get (  )  ;   }  ,157,6,eureka,2,[91]
1128,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get eureka server connect timeout seconds,@ override public int   (  )  {  return config instance . get int property ( namespace  +  eureka   server   connect   timeout   key 5 )  . get (  )  ;   }  ,157,6,server,3,[100]
1129,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get eureka server connect timeout seconds,@ override public int   (  )  {  return config instance . get int property ( namespace  +  eureka   server   connect   timeout   key 5 )  . get (  )  ;   }  ,157,6,connect,4,[109]
1130,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get eureka server connect timeout seconds,@ override public int   (  )  {  return config instance . get int property ( namespace  +  eureka   server   connect   timeout   key 5 )  . get (  )  ;   }  ,157,6,timeout,5,[119]
1131,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get eureka server connect timeout seconds,@ override public int   (  )  {  return config instance . get int property ( namespace  +  eureka   server   connect   timeout   key 5 )  . get (  )  ;   }  ,157,6,seconds,6,[]
1132,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get eureka serverdns name,@ override public  string   (  )  {  return config instance . get string property ( namespace  +  eureka   server   dns   name   key config instance . get string property ( namespace  +  eureka   server   fallback   dns   name   key null )  . get (  )  ) ,255,4,get,1,"[62, 151, 243]"
1133,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get eureka serverdns name,@ override public  string   (  )  {  return config instance . get string property ( namespace  +  eureka   server   dns   name   key config instance . get string property ( namespace  +  eureka   server   fallback   dns   name   key null )  . get (  )  ) ,255,4,eureka,2,"[98, 187]"
1134,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get eureka serverdns name,@ override public  string   (  )  {  return config instance . get string property ( namespace  +  eureka   server   dns   name   key config instance . get string property ( namespace  +  eureka   server   fallback   dns   name   key null )  . get (  )  ) ,255,4,serverdns,3,[]
1135,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get eureka serverdns name,@ override public  string   (  )  {  return config instance . get string property ( namespace  +  eureka   server   dns   name   key config instance . get string property ( namespace  +  eureka   server   fallback   dns   name   key null )  . get (  )  ) ,255,4,name,4,"[84, 122, 173, 222]"
1136,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get eureka server port,@ override public  string   (  )  {  return config instance . get string property ( namespace  +  eureka   server   port   key config instance . get string property ( namespace  +  eureka   server   fallback   port   key null )  . get (  )  )  . get (  ) ,255,4,get,1,"[62, 145, 231, 246]"
1137,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get eureka server port,@ override public  string   (  )  {  return config instance . get string property ( namespace  +  eureka   server   port   key config instance . get string property ( namespace  +  eureka   server   fallback   port   key null )  . get (  )  )  . get (  ) ,255,4,eureka,2,"[98, 181]"
1138,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get eureka server port,@ override public  string   (  )  {  return config instance . get string property ( namespace  +  eureka   server   port   key config instance . get string property ( namespace  +  eureka   server   fallback   port   key null )  . get (  )  )  . get (  ) ,255,4,server,3,"[107, 190]"
1139,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get eureka server port,@ override public  string   (  )  {  return config instance . get string property ( namespace  +  eureka   server   port   key config instance . get string property ( namespace  +  eureka   server   fallback   port   key null )  . get (  )  )  . get (  ) ,255,4,port,4,"[116, 210]"
1140,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get eureka server read timeout seconds,@ override public int   (  )  {  return config instance . get int property ( namespace  +  eureka   server   read   timeout   key 8 )  . get (  )  ;   }  ,154,6,get,1,"[58, 137]"
1141,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get eureka server read timeout seconds,@ override public int   (  )  {  return config instance . get int property ( namespace  +  eureka   server   read   timeout   key 8 )  . get (  )  ;   }  ,154,6,eureka,2,[91]
1142,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get eureka server read timeout seconds,@ override public int   (  )  {  return config instance . get int property ( namespace  +  eureka   server   read   timeout   key 8 )  . get (  )  ;   }  ,154,6,server,3,[100]
1143,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get eureka server read timeout seconds,@ override public int   (  )  {  return config instance . get int property ( namespace  +  eureka   server   read   timeout   key 8 )  . get (  )  ;   }  ,154,6,read,4,[109]
1144,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get eureka server read timeout seconds,@ override public int   (  )  {  return config instance . get int property ( namespace  +  eureka   server   read   timeout   key 8 )  . get (  )  ;   }  ,154,6,timeout,5,[116]
1145,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get eureka server read timeout seconds,@ override public int   (  )  {  return config instance . get int property ( namespace  +  eureka   server   read   timeout   key 8 )  . get (  )  ;   }  ,154,6,seconds,6,[]
1146,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get eureka server service urls,"@ override public  list <  string >    (  string my zone )  {   string service urls = config instance . get string property ( namespace  +  config   eureka   server   service   url   prefix  +  "" . "" +  my zone null )  . get (  )  ;  if  ( service urls  =",255,5,get,1,"[104, 221]"
1147,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get eureka server service urls,"@ override public  list <  string >    (  string my zone )  {   string service urls = config instance . get string property ( namespace  +  config   eureka   server   service   url   prefix  +  "" . "" +  my zone null )  . get (  )  ;  if  ( service urls  =",255,5,eureka,2,[149]
1148,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get eureka server service urls,"@ override public  list <  string >    (  string my zone )  {   string service urls = config instance . get string property ( namespace  +  config   eureka   server   service   url   prefix  +  "" . "" +  my zone null )  . get (  )  ;  if  ( service urls  =",255,5,server,3,[158]
1149,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get eureka server service urls,"@ override public  list <  string >    (  string my zone )  {   string service urls = config instance . get string property ( namespace  +  config   eureka   server   service   url   prefix  +  "" . "" +  my zone null )  . get (  )  ;  if  ( service urls  =",255,5,service,4,"[71, 167, 240]"
1150,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get eureka server service urls,"@ override public  list <  string >    (  string my zone )  {   string service urls = config instance . get string property ( namespace  +  config   eureka   server   service   url   prefix  +  "" . "" +  my zone null )  . get (  )  ;  if  ( service urls  =",255,5,urls,5,"[79, 248]"
1151,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get eureka server total connections,@ override public int   (  )  {  return config instance . get int property ( namespace  +  eureka   server   max   connections   key 200 )  . get (  )  ;   }  ,159,5,get,1,"[58, 142]"
1152,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get eureka server total connections,@ override public int   (  )  {  return config instance . get int property ( namespace  +  eureka   server   max   connections   key 200 )  . get (  )  ;   }  ,159,5,eureka,2,[91]
1153,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get eureka server total connections,@ override public int   (  )  {  return config instance . get int property ( namespace  +  eureka   server   max   connections   key 200 )  . get (  )  ;   }  ,159,5,server,3,[100]
1154,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get eureka server total connections,@ override public int   (  )  {  return config instance . get int property ( namespace  +  eureka   server   max   connections   key 200 )  . get (  )  ;   }  ,159,5,total,4,[]
1155,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get eureka server total connections,@ override public int   (  )  {  return config instance . get int property ( namespace  +  eureka   server   max   connections   key 200 )  . get (  )  ;   }  ,159,5,connections,5,[115]
1156,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get eureka server total connections per host,@ override public int   (  )  {  return config instance . get int property ( namespace  +  eureka   server   max   connections   per   host   key 50 )  . get (  )  ;   }  ,171,7,get,1,"[58, 154]"
1157,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get eureka server total connections per host,@ override public int   (  )  {  return config instance . get int property ( namespace  +  eureka   server   max   connections   per   host   key 50 )  . get (  )  ;   }  ,171,7,eureka,2,[91]
1158,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get eureka server total connections per host,@ override public int   (  )  {  return config instance . get int property ( namespace  +  eureka   server   max   connections   per   host   key 50 )  . get (  )  ;   }  ,171,7,server,3,[100]
1159,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get eureka server total connections per host,@ override public int   (  )  {  return config instance . get int property ( namespace  +  eureka   server   max   connections   per   host   key 50 )  . get (  )  ;   }  ,171,7,total,4,[]
1160,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get eureka server total connections per host,@ override public int   (  )  {  return config instance . get int property ( namespace  +  eureka   server   max   connections   per   host   key 50 )  . get (  )  ;   }  ,171,7,connections,5,[115]
1161,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get eureka server total connections per host,@ override public int   (  )  {  return config instance . get int property ( namespace  +  eureka   server   max   connections   per   host   key 50 )  . get (  )  ;   }  ,171,7,per,6,"[69, 129]"
1162,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get eureka server total connections per host,@ override public int   (  )  {  return config instance . get int property ( namespace  +  eureka   server   max   connections   per   host   key 50 )  . get (  )  ;   }  ,171,7,host,7,[135]
1163,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get eureka serverurl context,@ override public  string   (  )  {  return config instance . get string property ( namespace  +  eureka   server   url   context   key config instance . get string property ( namespace  +  eureka   server   fallback   url   context   key null )  . get ( ,255,4,get,1,"[62, 154, 249]"
1164,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get eureka serverurl context,@ override public  string   (  )  {  return config instance . get string property ( namespace  +  eureka   server   url   context   key config instance . get string property ( namespace  +  eureka   server   fallback   url   context   key null )  . get ( ,255,4,eureka,2,"[98, 190]"
1165,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get eureka serverurl context,@ override public  string   (  )  {  return config instance . get string property ( namespace  +  eureka   server   url   context   key config instance . get string property ( namespace  +  eureka   server   fallback   url   context   key null )  . get ( ,255,4,serverurl,3,[]
1166,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get eureka serverurl context,@ override public  string   (  )  {  return config instance . get string property ( namespace  +  eureka   server   url   context   key config instance . get string property ( namespace  +  eureka   server   fallback   url   context   key null )  . get ( ,255,4,context,4,"[122, 225]"
1167,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get eureka service url poll interval seconds,@ override public int   (  )  {  return config instance . get int property ( namespace  +  eureka   server   url   poll   interval   key 5 * 60 * 1000 )  . get (  )   /  1000 ;   }  ,182,7,get,1,"[58, 156]"
1168,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get eureka service url poll interval seconds,@ override public int   (  )  {  return config instance . get int property ( namespace  +  eureka   server   url   poll   interval   key 5 * 60 * 1000 )  . get (  )   /  1000 ;   }  ,182,7,eureka,2,[91]
1169,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get eureka service url poll interval seconds,@ override public int   (  )  {  return config instance . get int property ( namespace  +  eureka   server   url   poll   interval   key 5 * 60 * 1000 )  . get (  )   /  1000 ;   }  ,182,7,service,3,[]
1170,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get eureka service url poll interval seconds,@ override public int   (  )  {  return config instance . get int property ( namespace  +  eureka   server   url   poll   interval   key 5 * 60 * 1000 )  . get (  )   /  1000 ;   }  ,182,7,url,4,[109]
1171,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get eureka service url poll interval seconds,@ override public int   (  )  {  return config instance . get int property ( namespace  +  eureka   server   url   poll   interval   key 5 * 60 * 1000 )  . get (  )   /  1000 ;   }  ,182,7,poll,5,[115]
1172,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get eureka service url poll interval seconds,@ override public int   (  )  {  return config instance . get int property ( namespace  +  eureka   server   url   poll   interval   key 5 * 60 * 1000 )  . get (  )   /  1000 ;   }  ,182,7,interval,6,[122]
1173,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get eureka service url poll interval seconds,@ override public int   (  )  {  return config instance . get int property ( namespace  +  eureka   server   url   poll   interval   key 5 * 60 * 1000 )  . get (  )   /  1000 ;   }  ,182,7,seconds,7,[]
1174,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get experimental,"@ override public  string   (  string name )  {  return config instance . get string property ( namespace  +  config   experimental   prefix  +  "" . "" +  name null )  . get (  )  ;   }  ",186,2,get,1,"[74, 169]"
1175,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get experimental,"@ override public  string   (  string name )  {  return config instance . get string property ( namespace  +  config   experimental   prefix  +  "" . "" +  name null )  . get (  )  ;   }  ",186,2,experimental,2,[119]
1176,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get heartbeat executor exponential back off bound,@ override public int   (  )  {  return config instance . get int property ( namespace  +  heartbeat   backoff   bound   key  values . default   executor   thread   pool   backoff   bound )  . get (  )  ;   }  ,210,7,get,1,"[58, 193]"
1177,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get heartbeat executor exponential back off bound,@ override public int   (  )  {  return config instance . get int property ( namespace  +  heartbeat   backoff   bound   key  values . default   executor   thread   pool   backoff   bound )  . get (  )  ;   }  ,210,7,heartbeat,2,[91]
1178,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get heartbeat executor exponential back off bound,@ override public int   (  )  {  return config instance . get int property ( namespace  +  heartbeat   backoff   bound   key  values . default   executor   thread   pool   backoff   bound )  . get (  )  ;   }  ,210,7,executor,3,[145]
1179,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get heartbeat executor exponential back off bound,@ override public int   (  )  {  return config instance . get int property ( namespace  +  heartbeat   backoff   bound   key  values . default   executor   thread   pool   backoff   bound )  . get (  )  ;   }  ,210,7,exponential,4,[]
1180,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get heartbeat executor exponential back off bound,@ override public int   (  )  {  return config instance . get int property ( namespace  +  heartbeat   backoff   bound   key  values . default   executor   thread   pool   backoff   bound )  . get (  )  ;   }  ,210,7,back,5,"[103, 172]"
1181,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get heartbeat executor exponential back off bound,@ override public int   (  )  {  return config instance . get int property ( namespace  +  heartbeat   backoff   bound   key  values . default   executor   thread   pool   backoff   bound )  . get (  )  ;   }  ,210,7,off,6,"[107, 176]"
1182,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get heartbeat executor exponential back off bound,@ override public int   (  )  {  return config instance . get int property ( namespace  +  heartbeat   backoff   bound   key  values . default   executor   thread   pool   backoff   bound )  . get (  )  ;   }  ,210,7,bound,7,"[113, 182]"
1183,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get heartbeat executor thread pool size,@ override public int   (  )  {  return config instance . get int property ( namespace  +  heartbeat   threadpool   size   key  values . default   executor   thread   pool   size )  . get (  )  ;   }  ,201,6,get,1,"[58, 184]"
1184,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get heartbeat executor thread pool size,@ override public int   (  )  {  return config instance . get int property ( namespace  +  heartbeat   threadpool   size   key  values . default   executor   thread   pool   size )  . get (  )  ;   }  ,201,6,heartbeat,2,[91]
1185,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get heartbeat executor thread pool size,@ override public int   (  )  {  return config instance . get int property ( namespace  +  heartbeat   threadpool   size   key  values . default   executor   thread   pool   size )  . get (  )  ;   }  ,201,6,executor,3,[147]
1186,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get heartbeat executor thread pool size,@ override public int   (  )  {  return config instance . get int property ( namespace  +  heartbeat   threadpool   size   key  values . default   executor   thread   pool   size )  . get (  )  ;   }  ,201,6,thread,4,"[103, 158]"
1187,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get heartbeat executor thread pool size,@ override public int   (  )  {  return config instance . get int property ( namespace  +  heartbeat   threadpool   size   key  values . default   executor   thread   pool   size )  . get (  )  ;   }  ,201,6,pool,5,"[109, 167]"
1188,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get heartbeat executor thread pool size,@ override public int   (  )  {  return config instance . get int property ( namespace  +  heartbeat   threadpool   size   key  values . default   executor   thread   pool   size )  . get (  )  ;   }  ,201,6,size,6,"[116, 174]"
1189,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get initial instance info replication interval seconds,@ override public int   (  )  {  return config instance . get int property ( namespace  +  initial   registration   replication   delay   key 40 )  . get (  )  ;   }  ,167,7,get,1,"[58, 150]"
1190,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get initial instance info replication interval seconds,@ override public int   (  )  {  return config instance . get int property ( namespace  +  initial   registration   replication   delay   key 40 )  . get (  )  ;   }  ,167,7,initial,2,[91]
1191,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get initial instance info replication interval seconds,@ override public int   (  )  {  return config instance . get int property ( namespace  +  initial   registration   replication   delay   key 40 )  . get (  )  ;   }  ,167,7,instance,3,[47]
1192,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get initial instance info replication interval seconds,@ override public int   (  )  {  return config instance . get int property ( namespace  +  initial   registration   replication   delay   key 40 )  . get (  )  ;   }  ,167,7,info,4,[]
1193,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get initial instance info replication interval seconds,@ override public int   (  )  {  return config instance . get int property ( namespace  +  initial   registration   replication   delay   key 40 )  . get (  )  ;   }  ,167,7,replication,5,[116]
1194,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get initial instance info replication interval seconds,@ override public int   (  )  {  return config instance . get int property ( namespace  +  initial   registration   replication   delay   key 40 )  . get (  )  ;   }  ,167,7,interval,6,[]
1195,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get initial instance info replication interval seconds,@ override public int   (  )  {  return config instance . get int property ( namespace  +  initial   registration   replication   delay   key 40 )  . get (  )  ;   }  ,167,7,seconds,7,[]
1196,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get instance info replication interval seconds,@ override public int   (  )  {  return config instance . get int property ( namespace  +  registration   replication   interval   key 30 )  . get (  )  ;   }  ,160,6,get,1,"[58, 143]"
1197,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get instance info replication interval seconds,@ override public int   (  )  {  return config instance . get int property ( namespace  +  registration   replication   interval   key 30 )  . get (  )  ;   }  ,160,6,instance,2,[47]
1198,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get instance info replication interval seconds,@ override public int   (  )  {  return config instance . get int property ( namespace  +  registration   replication   interval   key 30 )  . get (  )  ;   }  ,160,6,info,3,[]
1199,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get instance info replication interval seconds,@ override public int   (  )  {  return config instance . get int property ( namespace  +  registration   replication   interval   key 30 )  . get (  )  ;   }  ,160,6,replication,4,[106]
1200,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get instance info replication interval seconds,@ override public int   (  )  {  return config instance . get int property ( namespace  +  registration   replication   interval   key 30 )  . get (  )  ;   }  ,160,6,interval,5,[120]
1201,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get instance info replication interval seconds,@ override public int   (  )  {  return config instance . get int property ( namespace  +  registration   replication   interval   key 30 )  . get (  )  ;   }  ,160,6,seconds,6,[]
1202,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get proxy host,@ override public  string   (  )  {  return config instance . get string property ( namespace  +  eureka   server   proxy   host   key null )  . get (  )  ;   }  ,162,3,get,1,"[62, 145]"
1203,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get proxy host,@ override public  string   (  )  {  return config instance . get string property ( namespace  +  eureka   server   proxy   host   key null )  . get (  )  ;   }  ,162,3,proxy,2,[116]
1204,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get proxy host,@ override public  string   (  )  {  return config instance . get string property ( namespace  +  eureka   server   proxy   host   key null )  . get (  )  ;   }  ,162,3,host,3,[124]
1205,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get proxy password,@ override public  string   (  )  {  return config instance . get string property ( namespace  +  eureka   server   proxy   password   key null )  . get (  )  ;   }  ,166,3,get,1,"[62, 149]"
1206,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get proxy password,@ override public  string   (  )  {  return config instance . get string property ( namespace  +  eureka   server   proxy   password   key null )  . get (  )  ;   }  ,166,3,proxy,2,[116]
1207,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get proxy password,@ override public  string   (  )  {  return config instance . get string property ( namespace  +  eureka   server   proxy   password   key null )  . get (  )  ;   }  ,166,3,password,3,[124]
1208,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get proxy port,@ override public  string   (  )  {  return config instance . get string property ( namespace  +  eureka   server   proxy   port   key null )  . get (  )  ;   }  ,162,3,get,1,"[62, 145]"
1209,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get proxy port,@ override public  string   (  )  {  return config instance . get string property ( namespace  +  eureka   server   proxy   port   key null )  . get (  )  ;   }  ,162,3,proxy,2,[116]
1210,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get proxy port,@ override public  string   (  )  {  return config instance . get string property ( namespace  +  eureka   server   proxy   port   key null )  . get (  )  ;   }  ,162,3,port,3,[124]
1211,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get proxy user name,@ override public  string   (  )  {  return config instance . get string property ( namespace  +  eureka   server   proxy   username   key null )  . get (  )  ;   }  ,166,4,get,1,"[62, 149]"
1212,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get proxy user name,@ override public  string   (  )  {  return config instance . get string property ( namespace  +  eureka   server   proxy   username   key null )  . get (  )  ;   }  ,166,4,proxy,2,[116]
1213,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get proxy user name,@ override public  string   (  )  {  return config instance . get string property ( namespace  +  eureka   server   proxy   username   key null )  . get (  )  ;   }  ,166,4,user,3,[124]
1214,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get proxy user name,@ override public  string   (  )  {  return config instance . get string property ( namespace  +  eureka   server   proxy   username   key null )  . get (  )  ;   }  ,166,4,name,4,"[84, 128]"
1215,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get region,@ override public  string   (  )  {   dynamic string property default eureka region = config instance . get string property ( client   region   fallback   key  values . default   client   region )  ;  return config instance . get string property ( namespa,255,2,get,1,"[104, 226]"
1216,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get region,@ override public  string   (  )  {   dynamic string property default eureka region = config instance . get string property ( client   region   fallback   key  values . default   client   region )  ;  return config instance . get string property ( namespa,255,2,region,2,"[77, 135, 188]"
1217,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get registry fetch interval seconds,@ override public int   (  )  {  return config instance . get int property ( namespace  +  registry   refresh   interval   key 30 )  . get (  )  ;   }  ,152,5,get,1,"[58, 135]"
1218,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get registry fetch interval seconds,@ override public int   (  )  {  return config instance . get int property ( namespace  +  registry   refresh   interval   key 30 )  . get (  )  ;   }  ,152,5,registry,2,[91]
1219,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get registry fetch interval seconds,@ override public int   (  )  {  return config instance . get int property ( namespace  +  registry   refresh   interval   key 30 )  . get (  )  ;   }  ,152,5,fetch,3,[]
1220,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get registry fetch interval seconds,@ override public int   (  )  {  return config instance . get int property ( namespace  +  registry   refresh   interval   key 30 )  . get (  )  ;   }  ,152,5,interval,4,[112]
1221,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get registry fetch interval seconds,@ override public int   (  )  {  return config instance . get int property ( namespace  +  registry   refresh   interval   key 30 )  . get (  )  ;   }  ,152,5,seconds,5,[]
1222,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get registry refresh single vip address,@ override public  string   (  )  {  return config instance . get string property ( namespace  +  fetch   single   vip   only   key null )  . get (  )  ;   }  ,159,6,get,1,"[62, 142]"
1223,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get registry refresh single vip address,@ override public  string   (  )  {  return config instance . get string property ( namespace  +  fetch   single   vip   only   key null )  . get (  )  ;   }  ,159,6,registry,2,[]
1224,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get registry refresh single vip address,@ override public  string   (  )  {  return config instance . get string property ( namespace  +  fetch   single   vip   only   key null )  . get (  )  ;   }  ,159,6,refresh,3,[]
1225,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get registry refresh single vip address,@ override public  string   (  )  {  return config instance . get string property ( namespace  +  fetch   single   vip   only   key null )  . get (  )  ;   }  ,159,6,single,4,[106]
1226,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get registry refresh single vip address,@ override public  string   (  )  {  return config instance . get string property ( namespace  +  fetch   single   vip   only   key null )  . get (  )  ;   }  ,159,6,vip,5,[115]
1227,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get registry refresh single vip address,@ override public  string   (  )  {  return config instance . get string property ( namespace  +  fetch   single   vip   only   key null )  . get (  )  ;   }  ,159,6,address,6,[]
1228,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get transport config,@ override public  eureka transport config   (  )  {  return transport config ;   }  ,85,3,get,1,[]
1229,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get transport config,@ override public  eureka transport config   (  )  {  return transport config ;   }  ,85,3,transport,2,"[26, 61]"
1230,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,get transport config,@ override public  eureka transport config   (  )  {  return transport config ;   }  ,85,3,config,3,"[36, 71]"
1231,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,should disable delta,@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  should   disable   delta   key false )  . get (  )  ;   }  ,158,3,should,1,[99]
1232,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,should disable delta,@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  should   disable   delta   key false )  . get (  )  ;   }  ,158,3,disable,2,[108]
1233,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,should disable delta,@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  should   disable   delta   key false )  . get (  )  ;   }  ,158,3,delta,3,[118]
1234,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,should enforce registration at init,@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  should   enforce   registration   at   init false )  . get (  )  ;   }  ,171,5,should,1,[99]
1235,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,should enforce registration at init,@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  should   enforce   registration   at   init false )  . get (  )  ;   }  ,171,5,enforce,2,[108]
1236,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,should enforce registration at init,@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  should   enforce   registration   at   init false )  . get (  )  ;   }  ,171,5,registration,3,[118]
1237,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,should enforce registration at init,@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  should   enforce   registration   at   init false )  . get (  )  ;   }  ,171,5,at,4,"[125, 133]"
1238,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,should enforce registration at init,@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  should   enforce   registration   at   init false )  . get (  )  ;   }  ,171,5,init,5,[138]
1239,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,should fetch registry,@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  fetch   registry   enabled   key true )  . get (  )  ;   }  ,159,3,should,1,[]
1240,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,should fetch registry,@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  fetch   registry   enabled   key true )  . get (  )  ;   }  ,159,3,fetch,2,[99]
1241,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,should fetch registry,@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  fetch   registry   enabled   key true )  . get (  )  ;   }  ,159,3,registry,3,[107]
1242,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,should filter only up instances,@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  should   filter   only   up   instances   key true )  . get (  )  ;   }  ,172,5,should,1,[99]
1243,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,should filter only up instances,@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  should   filter   only   up   instances   key true )  . get (  )  ;   }  ,172,5,filter,2,[108]
1244,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,should filter only up instances,@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  should   filter   only   up   instances   key true )  . get (  )  ;   }  ,172,5,only,3,[117]
1245,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,should filter only up instances,@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  should   filter   only   up   instances   key true )  . get (  )  ;   }  ,172,5,up,4,[124]
1246,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,should filter only up instances,@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  should   filter   only   up   instances   key true )  . get (  )  ;   }  ,172,5,instances,5,[129]
1247,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,shouldg zip content,@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  eureka   server   gzip   content   key true )  . get (  )  ;   }  ,165,3,shouldg,1,[]
1248,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,shouldg zip content,@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  eureka   server   gzip   content   key true )  . get (  )  ;   }  ,165,3,zip,2,[118]
1249,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,shouldg zip content,@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  eureka   server   gzip   content   key true )  . get (  )  ;   }  ,165,3,content,3,[124]
1250,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,should log delta diff,@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  should   log   delta   diff   key false )  . get (  )  ;   }  ,161,4,should,1,[99]
1251,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,should log delta diff,@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  should   log   delta   diff   key false )  . get (  )  ;   }  ,161,4,log,2,[108]
1252,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,should log delta diff,@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  should   log   delta   diff   key false )  . get (  )  ;   }  ,161,4,delta,3,[114]
1253,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,should log delta diff,@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  should   log   delta   diff   key false )  . get (  )  ;   }  ,161,4,diff,4,[122]
1254,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,should on demand update status change,@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  should   ondemand   update   status   key true )  . get (  )  ;   }  ,168,6,should,1,[99]
1255,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,should on demand update status change,@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  should   ondemand   update   status   key true )  . get (  )  ;   }  ,168,6,on,2,"[45, 108]"
1256,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,should on demand update status change,@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  should   ondemand   update   status   key true )  . get (  )  ;   }  ,168,6,demand,3,[110]
1257,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,should on demand update status change,@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  should   ondemand   update   status   key true )  . get (  )  ;   }  ,168,6,update,4,[119]
1258,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,should on demand update status change,@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  should   ondemand   update   status   key true )  . get (  )  ;   }  ,168,6,status,5,[128]
1259,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,should on demand update status change,@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  should   ondemand   update   status   key true )  . get (  )  ;   }  ,168,6,change,6,[]
1260,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,should prefer same zone eureka,@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  should   prefer   same   zone   server   key true )  . get (  )  ;   }  ,171,5,should,1,[99]
1261,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,should prefer same zone eureka,@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  should   prefer   same   zone   server   key true )  . get (  )  ;   }  ,171,5,prefer,2,[108]
1262,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,should prefer same zone eureka,@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  should   prefer   same   zone   server   key true )  . get (  )  ;   }  ,171,5,same,3,[117]
1263,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,should prefer same zone eureka,@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  should   prefer   same   zone   server   key true )  . get (  )  ;   }  ,171,5,zone,4,[124]
1264,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,should prefer same zone eureka,@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  should   prefer   same   zone   server   key true )  . get (  )  ;   }  ,171,5,eureka,5,[]
1265,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,should register with eureka,@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  registration   enabled   key true )  . get (  )  ;   }  ,155,4,should,1,[]
1266,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,should register with eureka,@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  registration   enabled   key true )  . get (  )  ;   }  ,155,4,register,2,[]
1267,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,should register with eureka,@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  registration   enabled   key true )  . get (  )  ;   }  ,155,4,with,3,[]
1268,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,should register with eureka,@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  registration   enabled   key true )  . get (  )  ;   }  ,155,4,eureka,4,[]
1269,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,should unregister on shutdown,@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  should   unregister   on   shutdown   key true )  . get (  )  ;   }  ,168,4,should,1,[99]
1270,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,should unregister on shutdown,@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  should   unregister   on   shutdown   key true )  . get (  )  ;   }  ,168,4,unregister,2,[108]
1271,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,should unregister on shutdown,@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  should   unregister   on   shutdown   key true )  . get (  )  ;   }  ,168,4,on,3,"[45, 121]"
1272,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,should unregister on shutdown,@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  should   unregister   on   shutdown   key true )  . get (  )  ;   }  ,168,4,shutdown,4,[126]
1273,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,should use dns for fetching service urls,@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  should   use   dns   key false )  . get (  )  ;   }  ,152,7,should,1,[99]
1274,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,should use dns for fetching service urls,@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  should   use   dns   key false )  . get (  )  ;   }  ,152,7,use,2,[108]
1275,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,should use dns for fetching service urls,@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  should   use   dns   key false )  . get (  )  ;   }  ,152,7,dns,3,[114]
1276,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,should use dns for fetching service urls,@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  should   use   dns   key false )  . get (  )  ;   }  ,152,7,for,4,[]
1277,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,should use dns for fetching service urls,@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  should   use   dns   key false )  . get (  )  ;   }  ,152,7,fetching,5,[]
1278,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,should use dns for fetching service urls,@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  should   use   dns   key false )  . get (  )  ;   }  ,152,7,service,6,[]
1279,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,should use dns for fetching service urls,@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  should   use   dns   key false )  . get (  )  ;   }  ,152,7,urls,7,[]
1280,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get instances by vip address and app name,@ override public  list <  instance info >    (  string vip address  string app name boolean secure )  {   list <  instance info >  result = new  array list <  instance info >  (  )  ;  if  ( vip address  =  =  null && app name  =  =  null )   {  throw ne,255,8,get,1,[]
1281,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get instances by vip address and app name,@ override public  list <  instance info >    (  string vip address  string app name boolean secure )  {   list <  instance info >  result = new  array list <  instance info >  (  )  ;  if  ( vip address  =  =  null && app name  =  =  null )   {  throw ne,255,8,instances,2,[]
1282,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get instances by vip address and app name,@ override public  list <  instance info >    (  string vip address  string app name boolean secure )  {   list <  instance info >  result = new  array list <  instance info >  (  )  ;  if  ( vip address  =  =  null && app name  =  =  null )   {  throw ne,255,8,by,3,[]
1283,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get instances by vip address and app name,@ override public  list <  instance info >    (  string vip address  string app name boolean secure )  {   list <  instance info >  result = new  array list <  instance info >  (  )  ;  if  ( vip address  =  =  null && app name  =  =  null )   {  throw ne,255,8,vip,4,"[56, 192]"
1284,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get instances by vip address and app name,@ override public  list <  instance info >    (  string vip address  string app name boolean secure )  {   list <  instance info >  result = new  array list <  instance info >  (  )  ;  if  ( vip address  =  =  null && app name  =  =  null )   {  throw ne,255,8,address,5,"[60, 196]"
1285,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get instances by vip address and app name,@ override public  list <  instance info >    (  string vip address  string app name boolean secure )  {   list <  instance info >  result = new  array list <  instance info >  (  )  ;  if  ( vip address  =  =  null && app name  =  =  null )   {  throw ne,255,8,and,6,[]
1286,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get instances by vip address and app name,@ override public  list <  instance info >    (  string vip address  string app name boolean secure )  {   list <  instance info >  result = new  array list <  instance info >  (  )  ;  if  ( vip address  =  =  null && app name  =  =  null )   {  throw ne,255,8,app,7,"[76, 219]"
1287,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get instances by vip address and app name,@ override public  list <  instance info >    (  string vip address  string app name boolean secure )  {   list <  instance info >  result = new  array list <  instance info >  (  )  ;  if  ( vip address  =  =  null && app name  =  =  null )   {  throw ne,255,8,name,8,"[80, 223]"
1288,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get last successful heartbeat time period,public long   (  )  {  return last successful heartbeat timestamp  <  0  ?  last successful heartbeat timestamp :  system . current time millis (  )   -  last successful heartbeat timestamp ;   }  ,197,6,get,1,[]
1289,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get last successful heartbeat time period,public long   (  )  {  return last successful heartbeat timestamp  <  0  ?  last successful heartbeat timestamp :  system . current time millis (  )   -  last successful heartbeat timestamp ;   }  ,197,6,last,2,"[30, 76, 154]"
1290,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get last successful heartbeat time period,public long   (  )  {  return last successful heartbeat timestamp  <  0  ?  last successful heartbeat timestamp :  system . current time millis (  )   -  last successful heartbeat timestamp ;   }  ,197,6,successful,3,"[35, 81, 159]"
1291,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get last successful heartbeat time period,public long   (  )  {  return last successful heartbeat timestamp  <  0  ?  last successful heartbeat timestamp :  system . current time millis (  )   -  last successful heartbeat timestamp ;   }  ,197,6,heartbeat,4,"[46, 92, 170]"
1292,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get last successful heartbeat time period,public long   (  )  {  return last successful heartbeat timestamp  <  0  ?  last successful heartbeat timestamp :  system . current time millis (  )   -  last successful heartbeat timestamp ;   }  ,197,6,time,5,"[56, 102, 132, 180]"
1293,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get last successful heartbeat time period,public long   (  )  {  return last successful heartbeat timestamp  <  0  ?  last successful heartbeat timestamp :  system . current time millis (  )   -  last successful heartbeat timestamp ;   }  ,197,6,period,6,[]
1294,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get last successful heartbeat time period internal,"@com . netflix . servo . annotations .  monitor ( name = metric   registration   prefix  +  ""last successful heartbeat time period"" description = "" how much time has passed from last successful heartbeat"" type =  data source type . gauge )  private long  ",255,7,get,1,[]
1295,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get last successful heartbeat time period internal,"@com . netflix . servo . annotations .  monitor ( name = metric   registration   prefix  +  ""last successful heartbeat time period"" description = "" how much time has passed from last successful heartbeat"" type =  data source type . gauge )  private long  ",255,7,last,2,"[93, 178]"
1296,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get last successful heartbeat time period internal,"@com . netflix . servo . annotations .  monitor ( name = metric   registration   prefix  +  ""last successful heartbeat time period"" description = "" how much time has passed from last successful heartbeat"" type =  data source type . gauge )  private long  ",255,7,successful,3,"[98, 183]"
1297,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get last successful heartbeat time period internal,"@com . netflix . servo . annotations .  monitor ( name = metric   registration   prefix  +  ""last successful heartbeat time period"" description = "" how much time has passed from last successful heartbeat"" type =  data source type . gauge )  private long  ",255,7,heartbeat,4,"[109, 194]"
1298,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get last successful heartbeat time period internal,"@com . netflix . servo . annotations .  monitor ( name = metric   registration   prefix  +  ""last successful heartbeat time period"" description = "" how much time has passed from last successful heartbeat"" type =  data source type . gauge )  private long  ",255,7,time,5,"[119, 157]"
1299,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get last successful heartbeat time period internal,"@com . netflix . servo . annotations .  monitor ( name = metric   registration   prefix  +  ""last successful heartbeat time period"" description = "" how much time has passed from last successful heartbeat"" type =  data source type . gauge )  private long  ",255,7,period,6,[124]
1300,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get last successful heartbeat time period internal,"@com . netflix . servo . annotations .  monitor ( name = metric   registration   prefix  +  ""last successful heartbeat time period"" description = "" how much time has passed from last successful heartbeat"" type =  data source type . gauge )  private long  ",255,7,internal,7,[]
1301,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get last successful registry fetch time period,public long   (  )  {  return last successful registry fetch timestamp  <  0  ?  last successful registry fetch timestamp :  system . current time millis (  )   -  last successful registry fetch timestamp ;   }  ,212,7,get,1,[]
1302,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get last successful registry fetch time period,public long   (  )  {  return last successful registry fetch timestamp  <  0  ?  last successful registry fetch timestamp :  system . current time millis (  )   -  last successful registry fetch timestamp ;   }  ,212,7,last,2,"[30, 81, 164]"
1303,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get last successful registry fetch time period,public long   (  )  {  return last successful registry fetch timestamp  <  0  ?  last successful registry fetch timestamp :  system . current time millis (  )   -  last successful registry fetch timestamp ;   }  ,212,7,successful,3,"[35, 86, 169]"
1304,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get last successful registry fetch time period,public long   (  )  {  return last successful registry fetch timestamp  <  0  ?  last successful registry fetch timestamp :  system . current time millis (  )   -  last successful registry fetch timestamp ;   }  ,212,7,registry,4,"[46, 97, 180]"
1305,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get last successful registry fetch time period,public long   (  )  {  return last successful registry fetch timestamp  <  0  ?  last successful registry fetch timestamp :  system . current time millis (  )   -  last successful registry fetch timestamp ;   }  ,212,7,fetch,5,"[55, 106, 189]"
1306,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get last successful registry fetch time period,public long   (  )  {  return last successful registry fetch timestamp  <  0  ?  last successful registry fetch timestamp :  system . current time millis (  )   -  last successful registry fetch timestamp ;   }  ,212,7,time,6,"[61, 112, 142, 195]"
1307,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get last successful registry fetch time period,public long   (  )  {  return last successful registry fetch timestamp  <  0  ?  last successful registry fetch timestamp :  system . current time millis (  )   -  last successful registry fetch timestamp ;   }  ,212,7,period,7,[]
1308,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get last successful registry fetch time period internal,"@com . netflix . servo . annotations .  monitor ( name = metric   registry   prefix  +  ""last successful registry fetch time period"" description = "" how much time has passed from last successful local registry update"" type =  data source type . gauge )  p",255,8,get,1,[]
1309,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get last successful registry fetch time period internal,"@com . netflix . servo . annotations .  monitor ( name = metric   registry   prefix  +  ""last successful registry fetch time period"" description = "" how much time has passed from last successful local registry update"" type =  data source type . gauge )  p",255,8,last,2,"[89, 179]"
1310,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get last successful registry fetch time period internal,"@com . netflix . servo . annotations .  monitor ( name = metric   registry   prefix  +  ""last successful registry fetch time period"" description = "" how much time has passed from last successful local registry update"" type =  data source type . gauge )  p",255,8,successful,3,"[94, 184]"
1311,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get last successful registry fetch time period internal,"@com . netflix . servo . annotations .  monitor ( name = metric   registry   prefix  +  ""last successful registry fetch time period"" description = "" how much time has passed from last successful local registry update"" type =  data source type . gauge )  p",255,8,registry,4,"[66, 105, 201]"
1312,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get last successful registry fetch time period internal,"@com . netflix . servo . annotations .  monitor ( name = metric   registry   prefix  +  ""last successful registry fetch time period"" description = "" how much time has passed from last successful local registry update"" type =  data source type . gauge )  p",255,8,fetch,5,[114]
1313,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get last successful registry fetch time period internal,"@com . netflix . servo . annotations .  monitor ( name = metric   registry   prefix  +  ""last successful registry fetch time period"" description = "" how much time has passed from last successful local registry update"" type =  data source type . gauge )  p",255,8,time,6,"[120, 158]"
1314,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get last successful registry fetch time period internal,"@com . netflix . servo . annotations .  monitor ( name = metric   registry   prefix  +  ""last successful registry fetch time period"" description = "" how much time has passed from last successful local registry update"" type =  data source type . gauge )  p",255,8,period,7,[125]
1315,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get last successful registry fetch time period internal,"@com . netflix . servo . annotations .  monitor ( name = metric   registry   prefix  +  ""last successful registry fetch time period"" description = "" how much time has passed from last successful local registry update"" type =  data source type . gauge )  p",255,8,internal,8,[]
1316,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get next server from eureka,@ override public  instance info   (  string virtual hostname boolean secure )  {   list <  instance info >  instance info list = this . get instances by vip address ( virtual hostname secure )  ;  if  ( instance info list  =  =  null || instance info lis,255,5,get,1,[137]
1317,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get next server from eureka,@ override public  instance info   (  string virtual hostname boolean secure )  {   list <  instance info >  instance info list = this . get instances by vip address ( virtual hostname secure )  ;  if  ( instance info list  =  =  null || instance info lis,255,5,next,2,[]
1318,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get next server from eureka,@ override public  instance info   (  string virtual hostname boolean secure )  {   list <  instance info >  instance info list = this . get instances by vip address ( virtual hostname secure )  ;  if  ( instance info list  =  =  null || instance info lis,255,5,server,3,[]
1319,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get next server from eureka,@ override public  instance info   (  string virtual hostname boolean secure )  {   list <  instance info >  instance info list = this . get instances by vip address ( virtual hostname secure )  ;  if  ( instance info list  =  =  null || instance info lis,255,5,from,4,[]
1320,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get next server from eureka,@ override public  instance info   (  string virtual hostname boolean secure )  {   list <  instance info >  instance info list = this . get instances by vip address ( virtual hostname secure )  ;  if  ( instance info list  =  =  null || instance info lis,255,5,eureka,5,[]
1321,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get reconcile hash code,private  string   (  applications applications )  {   tree map <  string  atomic integer >  instance count map = new  tree map <  string  atomic integer >  (  )  ;  if  ( is fetching remote region registries (  )  )   {  for  (   applications remote app : remote region vs apps . values (  )  )   {  remote app . populate instance count map ( instance count map )  ;   }   }  applications . populate instance count map ( instance count map )  ;  return  applications . get reconcile hash code ( instance count map )  ;   }  ,524,4,get,1,[469]
1322,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get reconcile hash code,private  string   (  applications applications )  {   tree map <  string  atomic integer >  instance count map = new  tree map <  string  atomic integer >  (  )  ;  if  ( is fetching remote region registries (  )  )   {  for  (   applications remote app : remote region vs apps . values (  )  )   {  remote app . populate instance count map ( instance count map )  ;   }   }  applications . populate instance count map ( instance count map )  ;  return  applications . get reconcile hash code ( instance count map )  ;   }  ,524,4,reconcile,2,[473]
1323,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get reconcile hash code,private  string   (  applications applications )  {   tree map <  string  atomic integer >  instance count map = new  tree map <  string  atomic integer >  (  )  ;  if  ( is fetching remote region registries (  )  )   {  for  (   applications remote app : remote region vs apps . values (  )  )   {  remote app . populate instance count map ( instance count map )  ;   }   }  applications . populate instance count map ( instance count map )  ;  return  applications . get reconcile hash code ( instance count map )  ;   }  ,524,4,hash,3,[483]
1324,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get reconcile hash code,private  string   (  applications applications )  {   tree map <  string  atomic integer >  instance count map = new  tree map <  string  atomic integer >  (  )  ;  if  ( is fetching remote region registries (  )  )   {  for  (   applications remote app : remote region vs apps . values (  )  )   {  remote app . populate instance count map ( instance count map )  ;   }   }  applications . populate instance count map ( instance count map )  ;  return  applications . get reconcile hash code ( instance count map )  ;   }  ,524,4,code,4,[488]
1325,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get region,"@ deprecated public static  string   (  )  {   string region = static client config . get region (  )  ;  if  ( region  =  =  null )   {  region = ""default"" ;   }  region = region . trim (  )  . to lower case (  )  ;  return region ;   }  ",239,2,get,1,[86]
1326,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get region,"@ deprecated public static  string   (  )  {   string region = static client config . get region (  )  ;  if  ( region  =  =  null )   {  region = ""default"" ;   }  region = region . trim (  )  . to lower case (  )  ;  return region ;   }  ",239,2,region,2,"[54, 90, 112, 138, 164, 173, 225]"
1327,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get service urls from config,@ deprecated @ override public  list <  string >    (  string instance zone boolean prefer same zone )  {  return  endpoint utils . get service urls from config ( client config instance zone prefer same zone )  ;   }  ,218,5,get,1,[132]
1328,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get service urls from config,@ deprecated @ override public  list <  string >    (  string instance zone boolean prefer same zone )  {  return  endpoint utils . get service urls from config ( client config instance zone prefer same zone )  ;   }  ,218,5,service,2,[136]
1329,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get service urls from config,@ deprecated @ override public  list <  string >    (  string instance zone boolean prefer same zone )  {  return  endpoint utils . get service urls from config ( client config instance zone prefer same zone )  ;   }  ,218,5,urls,3,[144]
1330,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get service urls from config,@ deprecated @ override public  list <  string >    (  string instance zone boolean prefer same zone )  {  return  endpoint utils . get service urls from config ( client config instance zone prefer same zone )  ;   }  ,218,5,from,4,[149]
1331,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get service urls from config,@ deprecated @ override public  list <  string >    (  string instance zone boolean prefer same zone )  {  return  endpoint utils . get service urls from config ( client config instance zone prefer same zone )  ;   }  ,218,5,config,5,"[154, 170]"
1332,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get service urls fromdns,@ deprecated @ override public  list <  string >    (  string instance zone boolean prefer same zone )  {  return  endpoint utils . get service urls fromdns ( client config instance zone prefer same zone url randomizer )  ;   }  ,229,4,get,1,[132]
1333,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get service urls fromdns,@ deprecated @ override public  list <  string >    (  string instance zone boolean prefer same zone )  {  return  endpoint utils . get service urls fromdns ( client config instance zone prefer same zone url randomizer )  ;   }  ,229,4,service,2,[136]
1334,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get service urls fromdns,@ deprecated @ override public  list <  string >    (  string instance zone boolean prefer same zone )  {  return  endpoint utils . get service urls fromdns ( client config instance zone prefer same zone url randomizer )  ;   }  ,229,4,urls,3,[144]
1335,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get service urls fromdns,@ deprecated @ override public  list <  string >    (  string instance zone boolean prefer same zone )  {  return  endpoint utils . get service urls fromdns ( client config instance zone prefer same zone url randomizer )  ;   }  ,229,4,fromdns,4,[149]
1336,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get zone,@ deprecated public static  string   (  instance info my info )  {   string[] avail zones = static client config . get availability zones ( static client config . get region (  )  )  ;  return  instance info . get zone ( avail zones my info )  ;   }  ,251,2,get,1,"[115, 163, 210]"
1337,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get zone,@ deprecated public static  string   (  instance info my info )  {   string[] avail zones = static client config . get availability zones ( static client config . get region (  )  )  ;  return  instance info . get zone ( avail zones my info )  ;   }  ,251,2,zone,2,"[84, 132, 214, 227]"
1338,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,init scheduled tasks,"private void   (  )  {  if  ( client config . should fetch registry (  )  )   {  int registry fetch interval seconds = client config . get registry fetch interval seconds (  )  ;  int exp back off bound = client config . get cache refresh executor exponential back off bound (  )  ;  scheduler . schedule ( new  timed supervisor task ( ""cache refresh"" scheduler cache refresh executor registry fetch interval seconds  time unit . seconds exp back off bound new  cache refresh thread (  )  )  registry fetch interval seconds  time unit . seconds )  ;   }  if  ( client config . should register with eureka (  )  )   {  int renewal interval in secs = instance info . get lease info (  )  . get renewal interval in secs (  )  ;  int exp back off bound = client config . get heartbeat executor exponential back off bound (  )  ;  logger . info ( "" starting heartbeat executor: ""  +  ""renew interval is:  {  } "" renewal interval in secs )  ;  scheduler . schedule ( new  timed supervisor task ( ""heartbeat"" scheduler heartbeat executor renewal interval in secs  time unit . seconds exp back off bound new  heartbeat thread (  )  )  renewal interval in secs  time unit . seconds )  ;  instance info replicator = new  instance info replicator ( this instance info client config . get instance info replication interval seconds (  )  2 )  ;  status change listener = new  application info manager .  status change listener (  )  {  @ override public  string get id (  )  {  return ""status change listener"" ;   }  @ override public void notify (   status change event status change event )  {  if  (  instance status . down  =  =  status change event . get status (  )  ||  instance status . down  =  =  status change event . get previous status (  )  )   {  logger . warn ( "" saw local status change event  {  } "" status change event )  ;   }  else  {  logger . info ( "" saw local status change event  {  } "" status change event )  ;   }  instance info replicator . on demand update (  )  ;   }   }   ;  if  ( client config . should on demand update status change (  )  )   {  application info manager . register status change listener ( status change listener )  ;   }  instance info replicator . start ( client config . get initial instance info replication interval seconds (  )  )  ;   }  else  {  logger . info ( "" not registering with  eureka server per configuration"" )  ;   }   }  ",2381,3,init,1,[2218]
1339,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,init scheduled tasks,"private void   (  )  {  if  ( client config . should fetch registry (  )  )   {  int registry fetch interval seconds = client config . get registry fetch interval seconds (  )  ;  int exp back off bound = client config . get cache refresh executor exponential back off bound (  )  ;  scheduler . schedule ( new  timed supervisor task ( ""cache refresh"" scheduler cache refresh executor registry fetch interval seconds  time unit . seconds exp back off bound new  cache refresh thread (  )  )  registry fetch interval seconds  time unit . seconds )  ;   }  if  ( client config . should register with eureka (  )  )   {  int renewal interval in secs = instance info . get lease info (  )  . get renewal interval in secs (  )  ;  int exp back off bound = client config . get heartbeat executor exponential back off bound (  )  ;  logger . info ( "" starting heartbeat executor: ""  +  ""renew interval is:  {  } "" renewal interval in secs )  ;  scheduler . schedule ( new  timed supervisor task ( ""heartbeat"" scheduler heartbeat executor renewal interval in secs  time unit . seconds exp back off bound new  heartbeat thread (  )  )  renewal interval in secs  time unit . seconds )  ;  instance info replicator = new  instance info replicator ( this instance info client config . get instance info replication interval seconds (  )  2 )  ;  status change listener = new  application info manager .  status change listener (  )  {  @ override public  string get id (  )  {  return ""status change listener"" ;   }  @ override public void notify (   status change event status change event )  {  if  (  instance status . down  =  =  status change event . get status (  )  ||  instance status . down  =  =  status change event . get previous status (  )  )   {  logger . warn ( "" saw local status change event  {  } "" status change event )  ;   }  else  {  logger . info ( "" saw local status change event  {  } "" status change event )  ;   }  instance info replicator . on demand update (  )  ;   }   }   ;  if  ( client config . should on demand update status change (  )  )   {  application info manager . register status change listener ( status change listener )  ;   }  instance info replicator . start ( client config . get initial instance info replication interval seconds (  )  )  ;   }  else  {  logger . info ( "" not registering with  eureka server per configuration"" )  ;   }   }  ",2381,3,scheduled,2,[]
1340,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,init scheduled tasks,"private void   (  )  {  if  ( client config . should fetch registry (  )  )   {  int registry fetch interval seconds = client config . get registry fetch interval seconds (  )  ;  int exp back off bound = client config . get cache refresh executor exponential back off bound (  )  ;  scheduler . schedule ( new  timed supervisor task ( ""cache refresh"" scheduler cache refresh executor registry fetch interval seconds  time unit . seconds exp back off bound new  cache refresh thread (  )  )  registry fetch interval seconds  time unit . seconds )  ;   }  if  ( client config . should register with eureka (  )  )   {  int renewal interval in secs = instance info . get lease info (  )  . get renewal interval in secs (  )  ;  int exp back off bound = client config . get heartbeat executor exponential back off bound (  )  ;  logger . info ( "" starting heartbeat executor: ""  +  ""renew interval is:  {  } "" renewal interval in secs )  ;  scheduler . schedule ( new  timed supervisor task ( ""heartbeat"" scheduler heartbeat executor renewal interval in secs  time unit . seconds exp back off bound new  heartbeat thread (  )  )  renewal interval in secs  time unit . seconds )  ;  instance info replicator = new  instance info replicator ( this instance info client config . get instance info replication interval seconds (  )  2 )  ;  status change listener = new  application info manager .  status change listener (  )  {  @ override public  string get id (  )  {  return ""status change listener"" ;   }  @ override public void notify (   status change event status change event )  {  if  (  instance status . down  =  =  status change event . get status (  )  ||  instance status . down  =  =  status change event . get previous status (  )  )   {  logger . warn ( "" saw local status change event  {  } "" status change event )  ;   }  else  {  logger . info ( "" saw local status change event  {  } "" status change event )  ;   }  instance info replicator . on demand update (  )  ;   }   }   ;  if  ( client config . should on demand update status change (  )  )   {  application info manager . register status change listener ( status change listener )  ;   }  instance info replicator . start ( client config . get initial instance info replication interval seconds (  )  )  ;   }  else  {  logger . info ( "" not registering with  eureka server per configuration"" )  ;   }   }  ",2381,3,tasks,3,[]
1341,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,is fetching remote region registries,private boolean   (  )  {  return null  !  =  remote regions to fetch . get (  )  ;   }  ,89,5,is,1,[]
1342,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,is fetching remote region registries,private boolean   (  )  {  return null  !  =  remote regions to fetch . get (  )  ;   }  ,89,5,fetching,2,[]
1343,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,is fetching remote region registries,private boolean   (  )  {  return null  !  =  remote regions to fetch . get (  )  ;   }  ,89,5,remote,3,[46]
1344,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,is fetching remote region registries,private boolean   (  )  {  return null  !  =  remote regions to fetch . get (  )  ;   }  ,89,5,region,4,[53]
1345,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,is fetching remote region registries,private boolean   (  )  {  return null  !  =  remote regions to fetch . get (  )  ;   }  ,89,5,registries,5,[]
1346,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,local registry size,"@com . netflix . servo . annotations .  monitor ( name = metric   registry   prefix  +  "" "" description = "" count of instances in the local registry"" type =  data source type . gauge )  public int local registry size (  )  {  return registry size ;   }  ",254,3,local,1,"[134, 197]"
1347,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,local registry size,"@com . netflix . servo . annotations .  monitor ( name = metric   registry   prefix  +  "" "" description = "" count of instances in the local registry"" type =  data source type . gauge )  public int local registry size (  )  {  return registry size ;   }  ",254,3,registry,2,"[66, 140, 203, 233]"
1348,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,local registry size,"@com . netflix . servo . annotations .  monitor ( name = metric   registry   prefix  +  "" "" description = "" count of instances in the local registry"" type =  data source type . gauge )  public int local registry size (  )  {  return registry size ;   }  ",254,3,size,3,"[212, 242]"
1349,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,log total instances,"private void   (  )  {  if  ( logger . is debug enabled (  )  )   {  int tot instances = 0 ;  for  (   application application : get applications (  )  . get registered applications (  )  )   {  tot instances +  = application . get instances as is from eureka (  )  . size (  )  ;   }  logger . debug ( "" the total number of all instances in the client now is  {  } "" tot instances )  ;   }   }  ",396,3,log,1,"[30, 286]"
1350,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,log total instances,"private void   (  )  {  if  ( logger . is debug enabled (  )  )   {  int tot instances = 0 ;  for  (   application application : get applications (  )  . get registered applications (  )  )   {  tot instances +  = application . get instances as is from eureka (  )  . size (  )  ;   }  logger . debug ( "" the total number of all instances in the client now is  {  } "" tot instances )  ;   }   }  ",396,3,total,2,[309]
1351,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,log total instances,"private void   (  )  {  if  ( logger . is debug enabled (  )  )   {  int tot instances = 0 ;  for  (   application application : get applications (  )  . get registered applications (  )  )   {  tot instances +  = application . get instances as is from eureka (  )  . size (  )  ;   }  logger . debug ( "" the total number of all instances in the client now is  {  } "" tot instances )  ;   }   }  ",396,3,instances,3,"[77, 199, 232, 329, 372]"
1352,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,new backup registry instance,@ deprecated @ nullable protected  backup registry   (  )  throws  class not found exception   illegal access exception   instantiation exception  {  return null ;   }  ,169,4,new,1,[]
1353,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,new backup registry instance,@ deprecated @ nullable protected  backup registry   (  )  throws  class not found exception   illegal access exception   instantiation exception  {  return null ;   }  ,169,4,backup,2,[35]
1354,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,new backup registry instance,@ deprecated @ nullable protected  backup registry   (  )  throws  class not found exception   illegal access exception   instantiation exception  {  return null ;   }  ,169,4,registry,3,[42]
1355,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,new backup registry instance,@ deprecated @ nullable protected  backup registry   (  )  throws  class not found exception   illegal access exception   instantiation exception  {  return null ;   }  ,169,4,instance,4,[]
1356,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,notify,@ override public void   (  status change event status change event )  {  if  (  instance status . down  =  =  status change event . get status (  )  ||  instance status . down  =  =  status change event . get previous status (  )  )   {  logger . warn ( ,255,1,notify,1,[]
1357,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,on cache refreshed,protected void   (  )  {  fire event ( new  cache refreshed event (  )  )  ;   }  ,82,3,on,1,[]
1358,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,on cache refreshed,protected void   (  )  {  fire event ( new  cache refreshed event (  )  )  ;   }  ,82,3,cache,2,[44]
1359,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,on cache refreshed,protected void   (  )  {  fire event ( new  cache refreshed event (  )  )  ;   }  ,82,3,refreshed,3,[50]
1360,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,on remote status changed,protected void   (  instance info .  instance status old status  instance info .  instance status new status )  {  fire event ( new  status change event ( old status new status )  )  ;   }  ,190,4,on,1,[]
1361,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,on remote status changed,protected void   (  instance info .  instance status old status  instance info .  instance status new status )  {  fire event ( new  status change event ( old status new status )  )  ;   }  ,190,4,remote,2,[]
1362,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,on remote status changed,protected void   (  instance info .  instance status old status  instance info .  instance status new status )  {  fire event ( new  status change event ( old status new status )  )  ;   }  ,190,4,status,3,"[46, 57, 91, 102, 133, 159, 170]"
1363,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,on remote status changed,protected void   (  instance info .  instance status old status  instance info .  instance status new status )  {  fire event ( new  status change event ( old status new status )  )  ;   }  ,190,4,changed,4,[]
1364,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,reconcile and log difference,"private void   (  applications delta  string reconcile hash code )  throws  throwable  {  logger . debug ( "" the  reconcile hashcodes do not match  client :  {  }   server :  {  }  .   getting the full registry"" reconcile hash code delta . get apps hash code (  )  )  ;  reconcile   hash   codes   mismatch . increment (  )  ;  long current update generation = fetch registry generation . get (  )  ;   eureka http response <  applications >  http response = client config . get registry refresh single vip address (  )   =  =  null  ?  eureka transport . query client . get applications ( remote regions ref . get (  )  )  : eureka transport . query client . get vip ( client config . get registry refresh single vip address (  )  remote regions ref . get (  )  )  ;   applications server apps = http response . get entity (  )  ;  if  ( server apps  =  =  null )   {  logger . warn ( "" cannot fetch full registry from the server ;  reconciliation failure"" )  ;  return ;   }  if  ( fetch registry generation . compare and set ( current update generation current update generation  +  1 )  )   {  local region apps . set ( this . filter and shuffle ( server apps )  )  ;  get applications (  )  . set version ( delta . get version (  )  )  ;  logger . debug ( "" the  reconcile hashcodes after complete sync up  client :  {  }   server :  {  }  . "" get applications (  )  . get reconcile hash code (  )  delta . get apps hash code (  )  )  ;   }  else  {  logger . warn ( "" not setting the applications map as another thread has advanced the update generation"" )  ;   }   }  ",1575,4,reconcile,1,"[45, 114, 212, 271, 1268, 1378]"
1365,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,reconcile and log difference,"private void   (  applications delta  string reconcile hash code )  throws  throwable  {  logger . debug ( "" the  reconcile hashcodes do not match  client :  {  }   server :  {  }  .   getting the full registry"" reconcile hash code delta . get apps hash code (  )  )  ;  reconcile   hash   codes   mismatch . increment (  )  ;  long current update generation = fetch registry generation . get (  )  ;   eureka http response <  applications >  http response = client config . get registry refresh single vip address (  )   =  =  null  ?  eureka transport . query client . get applications ( remote regions ref . get (  )  )  : eureka transport . query client . get vip ( client config . get registry refresh single vip address (  )  remote regions ref . get (  )  )  ;   applications server apps = http response . get entity (  )  ;  if  ( server apps  =  =  null )   {  logger . warn ( "" cannot fetch full registry from the server ;  reconciliation failure"" )  ;  return ;   }  if  ( fetch registry generation . compare and set ( current update generation current update generation  +  1 )  )   {  local region apps . set ( this . filter and shuffle ( server apps )  )  ;  get applications (  )  . set version ( delta . get version (  )  )  ;  logger . debug ( "" the  reconcile hashcodes after complete sync up  client :  {  }   server :  {  }  . "" get applications (  )  . get reconcile hash code (  )  delta . get apps hash code (  )  )  ;   }  else  {  logger . warn ( "" not setting the applications map as another thread has advanced the update generation"" )  ;   }   }  ",1575,4,and,2,"[1020, 1138]"
1366,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,reconcile and log difference,"private void   (  applications delta  string reconcile hash code )  throws  throwable  {  logger . debug ( "" the  reconcile hashcodes do not match  client :  {  }   server :  {  }  .   getting the full registry"" reconcile hash code delta . get apps hash code (  )  )  ;  reconcile   hash   codes   mismatch . increment (  )  ;  long current update generation = fetch registry generation . get (  )  ;   eureka http response <  applications >  http response = client config . get registry refresh single vip address (  )   =  =  null  ?  eureka transport . query client . get applications ( remote regions ref . get (  )  )  : eureka transport . query client . get vip ( client config . get registry refresh single vip address (  )  remote regions ref . get (  )  )  ;   applications server apps = http response . get entity (  )  ;  if  ( server apps  =  =  null )   {  logger . warn ( "" cannot fetch full registry from the server ;  reconciliation failure"" )  ;  return ;   }  if  ( fetch registry generation . compare and set ( current update generation current update generation  +  1 )  )   {  local region apps . set ( this . filter and shuffle ( server apps )  )  ;  get applications (  )  . set version ( delta . get version (  )  )  ;  logger . debug ( "" the  reconcile hashcodes after complete sync up  client :  {  }   server :  {  }  . "" get applications (  )  . get reconcile hash code (  )  delta . get apps hash code (  )  )  ;   }  else  {  logger . warn ( "" not setting the applications map as another thread has advanced the update generation"" )  ;   }   }  ",1575,4,log,3,"[90, 870, 1244, 1456]"
1367,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,reconcile and log difference,"private void   (  applications delta  string reconcile hash code )  throws  throwable  {  logger . debug ( "" the  reconcile hashcodes do not match  client :  {  }   server :  {  }  .   getting the full registry"" reconcile hash code delta . get apps hash code (  )  )  ;  reconcile   hash   codes   mismatch . increment (  )  ;  long current update generation = fetch registry generation . get (  )  ;   eureka http response <  applications >  http response = client config . get registry refresh single vip address (  )   =  =  null  ?  eureka transport . query client . get applications ( remote regions ref . get (  )  )  : eureka transport . query client . get vip ( client config . get registry refresh single vip address (  )  remote regions ref . get (  )  )  ;   applications server apps = http response . get entity (  )  ;  if  ( server apps  =  =  null )   {  logger . warn ( "" cannot fetch full registry from the server ;  reconciliation failure"" )  ;  return ;   }  if  ( fetch registry generation . compare and set ( current update generation current update generation  +  1 )  )   {  local region apps . set ( this . filter and shuffle ( server apps )  )  ;  get applications (  )  . set version ( delta . get version (  )  )  ;  logger . debug ( "" the  reconcile hashcodes after complete sync up  client :  {  }   server :  {  }  . "" get applications (  )  . get reconcile hash code (  )  delta . get apps hash code (  )  )  ;   }  else  {  logger . warn ( "" not setting the applications map as another thread has advanced the update generation"" )  ;   }   }  ",1575,4,difference,4,[]
1368,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,refresh instance info,"void   (  )  {  application info manager . refresh data center info if required (  )  ;  application info manager . refresh lease info if required (  )  ;   instance status status ;  try  {  status = get health check handler (  )  . get status ( instance info . get status (  )  )  ;   }  catch  (   exception e )   {  logger . warn ( "" exception from healthcheck handler . get status  setting status to down"" e )  ;  status =  instance status . down ;   }  if  ( null  !  =  status )   {  application info manager . set instance status ( status )  ;   }   }  ",560,3,refresh,1,"[43, 116]"
1369,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,refresh instance info,"void   (  )  {  application info manager . refresh data center info if required (  )  ;  application info manager . refresh lease info if required (  )  ;   instance status status ;  try  {  status = get health check handler (  )  . get status ( instance info . get status (  )  )  ;   }  catch  (   exception e )   {  logger . warn ( "" exception from healthcheck handler . get status  setting status to down"" e )  ;  status =  instance status . down ;   }  if  ( null  !  =  status )   {  application info manager . set instance status ( status )  ;   }   }  ",560,3,instance,2,"[157, 246, 428, 521]"
1370,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,refresh instance info,"void   (  )  {  application info manager . refresh data center info if required (  )  ;  application info manager . refresh lease info if required (  )  ;   instance status status ;  try  {  status = get health check handler (  )  . get status ( instance info . get status (  )  )  ;   }  catch  (   exception e )   {  logger . warn ( "" exception from healthcheck handler . get status  setting status to down"" e )  ;  status =  instance status . down ;   }  if  ( null  !  =  status )   {  application info manager . set instance status ( status )  ;   }   }  ",560,3,info,3,"[28, 63, 101, 130, 255, 502]"
1371,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DNSBasedAzToRegionMapper.java,dns based az to region mapper,public   (  eureka client config client config )  {  super ( client config )  ;   }  ,85,6,dns,1,[]
1372,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DNSBasedAzToRegionMapper.java,dns based az to region mapper,public   (  eureka client config client config )  {  super ( client config )  ;   }  ,85,6,based,2,[]
1373,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DNSBasedAzToRegionMapper.java,dns based az to region mapper,public   (  eureka client config client config )  {  super ( client config )  ;   }  ,85,6,az,3,[]
1374,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DNSBasedAzToRegionMapper.java,dns based az to region mapper,public   (  eureka client config client config )  {  super ( client config )  ;   }  ,85,6,to,4,[]
1375,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DNSBasedAzToRegionMapper.java,dns based az to region mapper,public   (  eureka client config client config )  {  super ( client config )  ;   }  ,85,6,region,5,[]
1376,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DNSBasedAzToRegionMapper.java,dns based az to region mapper,public   (  eureka client config client config )  {  super ( client config )  ;   }  ,85,6,mapper,6,[]
1377,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DNSBasedAzToRegionMapper.java,get zones fora region,@ override protected  set <  string >    (  string region )  {   map <  string  list <  string >  >  zone based discovery urls from region =  endpoint utils . get zone based discovery urls from region ( client config region )  ;  if  ( null  !  =  zone ba,255,4,get,1,[159]
1378,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DNSBasedAzToRegionMapper.java,get zones fora region,@ override protected  set <  string >    (  string region )  {   map <  string  list <  string >  >  zone based discovery urls from region =  endpoint utils . get zone based discovery urls from region ( client config region )  ;  if  ( null  !  =  zone ba,255,4,zones,2,[]
1379,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DNSBasedAzToRegionMapper.java,get zones fora region,@ override protected  set <  string >    (  string region )  {   map <  string  list <  string >  >  zone based discovery urls from region =  endpoint utils . get zone based discovery urls from region ( client config region )  ;  if  ( null  !  =  zone ba,255,4,fora,3,[]
1380,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DNSBasedAzToRegionMapper.java,get zones fora region,@ override protected  set <  string >    (  string region )  {   map <  string  list <  string >  >  zone based discovery urls from region =  endpoint utils . get zone based discovery urls from region ( client config region )  ;  if  ( null  !  =  zone ba,255,4,region,4,"[51, 132, 194, 217]"
1381,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,refresh registry,@ visible for testing void   (  )  {  try  {  boolean is fetching remote region registries = is fetching remote region registries (  )  ;  boolean remote regions modified = false ;   string latest remote regions = client config . fetch registry for remote,255,2,refresh,1,[]
1382,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,refresh registry,@ visible for testing void   (  )  {  try  {  boolean is fetching remote region registries = is fetching remote region registries (  )  ;  boolean remote regions modified = false ;   string latest remote regions = client config . fetch registry for remote,255,2,registry,2,[236]
1383,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,register,"boolean   (  )  throws  throwable  {  logger . info ( prefix  +  "" {  } : registering service .  .  . "" app path identifier )  ;   eureka http response <  void >  http response ;  try  {  http response = eureka transport . registration client . register ( instance info )  ;   }  catch  (   exception e )   {  logger . warn ( prefix  +  "" {  }   -  registration failed  {  } "" app path identifier e . get message (  )  e )  ;  throw e ;   }  if  ( logger . is info enabled (  )  )   {  logger . info ( prefix  +  "" {  }   -  registration status:  {  } "" app path identifier http response . get status code (  )  )  ;   }  return http response . get status code (  )   =  =  204 ;   }  ",685,1,register,1,"[74, 245]"
1384,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,register event listener,@ override public void   (  eureka event listener event listener )  {  this . event listeners . add ( event listener )  ;   }  ,127,3,register,1,[]
1385,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,register event listener,@ override public void   (  eureka event listener event listener )  {  this . event listeners . add ( event listener )  ;   }  ,127,3,event,2,"[35, 50, 78, 102]"
1386,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,register event listener,@ override public void   (  eureka event listener event listener )  {  this . event listeners . add ( event listener )  ;   }  ,127,3,listener,3,"[41, 56, 84, 108]"
1387,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,register health check,"@ override public void   (  health check handler health check handler )  {  if  ( instance info  =  =  null )   {  logger . error ( "" cannot register a healthcheck handler when instance info is null ! "" )  ;   }  if  ( health check handler  !  =  null )  ",255,3,register,1,[141]
1388,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,register health check,"@ override public void   (  health check handler health check handler )  {  if  ( instance info  =  =  null )   {  logger . error ( "" cannot register a healthcheck handler when instance info is null ! "" )  ;   }  if  ( health check handler  !  =  null )  ",255,3,health,2,"[28, 49, 152, 219]"
1389,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,register health check,"@ override public void   (  health check handler health check handler )  {  if  ( instance info  =  =  null )   {  logger . error ( "" cannot register a healthcheck handler when instance info is null ! "" )  ;   }  if  ( health check handler  !  =  null )  ",255,3,check,3,"[35, 56, 158, 226]"
1390,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,register health check callback,"@ deprecated @ override public void   (  health check callback callback )  {  if  ( instance info  =  =  null )   {  logger . error ( "" cannot register a listener for instance info since it is null ! "" )  ;   }  if  ( callback  !  =  null )   {  health ch",255,4,register,1,[143]
1391,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,register health check callback,"@ deprecated @ override public void   (  health check callback callback )  {  if  ( instance info  =  =  null )   {  logger . error ( "" cannot register a listener for instance info since it is null ! "" )  ;   }  if  ( callback  !  =  null )   {  health ch",255,4,health,2,"[41, 246]"
1392,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,register health check callback,"@ deprecated @ override public void   (  health check callback callback )  {  if  ( instance info  =  =  null )   {  logger . error ( "" cannot register a listener for instance info since it is null ! "" )  ;   }  if  ( callback  !  =  null )   {  health ch",255,4,check,3,[48]
1393,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,register health check callback,"@ deprecated @ override public void   (  health check callback callback )  {  if  ( instance info  =  =  null )   {  logger . error ( "" cannot register a listener for instance info since it is null ! "" )  ;   }  if  ( callback  !  =  null )   {  health ch",255,4,callback,4,"[54, 63, 218]"
1394,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,renew,"boolean   (  )  {   eureka http response <  instance info >  http response ;  try  {  http response = eureka transport . registration client . send heart beat ( instance info . get app name (  )  instance info . get id (  )  instance info null )  ;  logger . debug ( prefix  +  "" {  }   -   heartbeat status:  {  } "" app path identifier http response . get status code (  )  )  ;  if  ( http response . get status code (  )   =  =  404 )   {  reregister   counter . increment (  )  ;  logger . info ( prefix  +  "" {  }   -   re - registering apps /  {  } "" app path identifier instance info . get app name (  )  )  ;  long timestamp = instance info . set is dirty with time (  )  ;  boolean success = register (  )  ;  if  ( success )   {  instance info . unset is dirty ( timestamp )  ;   }  return success ;   }  return http response . get status code (  )   =  =  200 ;   }  catch  (   throwable e )   {  logger . error ( prefix  +  "" {  }   -  was unable to send heartbeat ! "" app path identifier e )  ;  return false ;   }   }  ",1033,1,renew,1,[]
1395,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,run,public void   (  )  {  refresh registry (  )  ;   }  ,53,1,run,1,[]
1396,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,schedule server endpoint task,"private void   (  eureka transport eureka transport  abstract discovery client optional args args )  {   collection <  ?  >  additional filters = args  =  =  null  ?   collections . empty list (  )  : args . additional filters ;   eureka jersey client provided jersey client = args  =  =  null  ?  null : args . eureka jersey client ;   transport client factories args transport client factories = null ;  if  ( args  !  =  null && args . get transport client factories (  )   !  =  null )   {  args transport client factories = args . get transport client factories (  )  ;   }  @ suppress warnings ( ""rawtypes"" )   transport client factories transport client factories = args transport client factories  =  =  null  ?  new  jersey1 transport client factories (  )  : args transport client factories ;   optional < ssl context >  ssl context = args  =  =  null  ?   optional . empty (  )  : args . getssl context (  )  ;   optional <  hostname verifier >  hostname verifier = args  =  =  null  ?   optional . empty (  )  : args . get hostname verifier (  )  ;  eureka transport . transport client factory = provided jersey client  =  =  null  ?  transport client factories . new transport client factory ( client config additional filters application info manager . get info (  )  ssl context hostname verifier )  : transport client factories . new transport client factory ( additional filters provided jersey client )  ;   applications resolver .  applications source applications source = new  applications resolver .  applications source (  )  {  @ override public  applications get applications (  int staleness threshold   time unit time unit )  {  long threshold in ms =  time unit . milliseconds . convert ( staleness threshold time unit )  ;  long delay = get last successful registry fetch time period (  )  ;  if  ( delay  >  threshold in ms )   {  logger . info ( "" local registry is too stale for local lookup .   threshold: {  }   actual: {  } "" threshold in ms delay )  ;  return null ;   }  else  {  return local region apps . get (  )  ;   }   }   }   ;  eureka transport . bootstrap resolver =  eureka http clients . new bootstrap resolver ( client config transport config eureka transport . transport client factory application info manager . get info (  )  applications source )  ;  if  ( client config . should register with eureka (  )  )   {   eureka http client factory new registration client factory = null ;   eureka http client new registration client = null ;  try  {  new registration client factory =  eureka http clients . registration client factory ( eureka transport . bootstrap resolver eureka transport . transport client factory transport config )  ;  new registration client = new registration client factory . new client (  )  ;   }  catch  (   exception e )   {  logger . warn ( "" transport initialization failure"" e )  ;   }  eureka transport . registration client factory = new registration client factory ;  eureka transport . registration client = new registration client ;   }  if  ( client config . should fetch registry (  )  )   {   eureka http client factory new query client factory = null ;   eureka http client new query client = null ;  try  {  new query client factory =  eureka http clients . query client factory ( eureka transport . bootstrap resolver eureka transport . transport client factory client config transport config application info manager . get info (  )  applications source )  ;  new query client = new query client factory . new client (  )  ;   }  catch  (   exception e )   {  logger . warn ( "" transport initialization failure"" e )  ;   }  eureka transport . query client factory = new query client factory ;  eureka transport . query client = new query client ;   }   }  ",3750,4,schedule,1,[]
1397,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,schedule server endpoint task,"private void   (  eureka transport eureka transport  abstract discovery client optional args args )  {   collection <  ?  >  additional filters = args  =  =  null  ?   collections . empty list (  )  : args . additional filters ;   eureka jersey client provided jersey client = args  =  =  null  ?  null : args . eureka jersey client ;   transport client factories args transport client factories = null ;  if  ( args  !  =  null && args . get transport client factories (  )   !  =  null )   {  args transport client factories = args . get transport client factories (  )  ;   }  @ suppress warnings ( ""rawtypes"" )   transport client factories transport client factories = args transport client factories  =  =  null  ?  new  jersey1 transport client factories (  )  : args transport client factories ;   optional < ssl context >  ssl context = args  =  =  null  ?   optional . empty (  )  : args . getssl context (  )  ;   optional <  hostname verifier >  hostname verifier = args  =  =  null  ?   optional . empty (  )  : args . get hostname verifier (  )  ;  eureka transport . transport client factory = provided jersey client  =  =  null  ?  transport client factories . new transport client factory ( client config additional filters application info manager . get info (  )  ssl context hostname verifier )  : transport client factories . new transport client factory ( additional filters provided jersey client )  ;   applications resolver .  applications source applications source = new  applications resolver .  applications source (  )  {  @ override public  applications get applications (  int staleness threshold   time unit time unit )  {  long threshold in ms =  time unit . milliseconds . convert ( staleness threshold time unit )  ;  long delay = get last successful registry fetch time period (  )  ;  if  ( delay  >  threshold in ms )   {  logger . info ( "" local registry is too stale for local lookup .   threshold: {  }   actual: {  } "" threshold in ms delay )  ;  return null ;   }  else  {  return local region apps . get (  )  ;   }   }   }   ;  eureka transport . bootstrap resolver =  eureka http clients . new bootstrap resolver ( client config transport config eureka transport . transport client factory application info manager . get info (  )  applications source )  ;  if  ( client config . should register with eureka (  )  )   {   eureka http client factory new registration client factory = null ;   eureka http client new registration client = null ;  try  {  new registration client factory =  eureka http clients . registration client factory ( eureka transport . bootstrap resolver eureka transport . transport client factory transport config )  ;  new registration client = new registration client factory . new client (  )  ;   }  catch  (   exception e )   {  logger . warn ( "" transport initialization failure"" e )  ;   }  eureka transport . registration client factory = new registration client factory ;  eureka transport . registration client = new registration client ;   }  if  ( client config . should fetch registry (  )  )   {   eureka http client factory new query client factory = null ;   eureka http client new query client = null ;  try  {  new query client factory =  eureka http clients . query client factory ( eureka transport . bootstrap resolver eureka transport . transport client factory client config transport config application info manager . get info (  )  applications source )  ;  new query client = new query client factory . new client (  )  ;   }  catch  (   exception e )   {  logger . warn ( "" transport initialization failure"" e )  ;   }  eureka transport . query client factory = new query client factory ;  eureka transport . query client = new query client ;   }   }  ",3750,4,server,2,[]
1398,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,schedule server endpoint task,"private void   (  eureka transport eureka transport  abstract discovery client optional args args )  {   collection <  ?  >  additional filters = args  =  =  null  ?   collections . empty list (  )  : args . additional filters ;   eureka jersey client provided jersey client = args  =  =  null  ?  null : args . eureka jersey client ;   transport client factories args transport client factories = null ;  if  ( args  !  =  null && args . get transport client factories (  )   !  =  null )   {  args transport client factories = args . get transport client factories (  )  ;   }  @ suppress warnings ( ""rawtypes"" )   transport client factories transport client factories = args transport client factories  =  =  null  ?  new  jersey1 transport client factories (  )  : args transport client factories ;   optional < ssl context >  ssl context = args  =  =  null  ?   optional . empty (  )  : args . getssl context (  )  ;   optional <  hostname verifier >  hostname verifier = args  =  =  null  ?   optional . empty (  )  : args . get hostname verifier (  )  ;  eureka transport . transport client factory = provided jersey client  =  =  null  ?  transport client factories . new transport client factory ( client config additional filters application info manager . get info (  )  ssl context hostname verifier )  : transport client factories . new transport client factory ( additional filters provided jersey client )  ;   applications resolver .  applications source applications source = new  applications resolver .  applications source (  )  {  @ override public  applications get applications (  int staleness threshold   time unit time unit )  {  long threshold in ms =  time unit . milliseconds . convert ( staleness threshold time unit )  ;  long delay = get last successful registry fetch time period (  )  ;  if  ( delay  >  threshold in ms )   {  logger . info ( "" local registry is too stale for local lookup .   threshold: {  }   actual: {  } "" threshold in ms delay )  ;  return null ;   }  else  {  return local region apps . get (  )  ;   }   }   }   ;  eureka transport . bootstrap resolver =  eureka http clients . new bootstrap resolver ( client config transport config eureka transport . transport client factory application info manager . get info (  )  applications source )  ;  if  ( client config . should register with eureka (  )  )   {   eureka http client factory new registration client factory = null ;   eureka http client new registration client = null ;  try  {  new registration client factory =  eureka http clients . registration client factory ( eureka transport . bootstrap resolver eureka transport . transport client factory transport config )  ;  new registration client = new registration client factory . new client (  )  ;   }  catch  (   exception e )   {  logger . warn ( "" transport initialization failure"" e )  ;   }  eureka transport . registration client factory = new registration client factory ;  eureka transport . registration client = new registration client ;   }  if  ( client config . should fetch registry (  )  )   {   eureka http client factory new query client factory = null ;   eureka http client new query client = null ;  try  {  new query client factory =  eureka http clients . query client factory ( eureka transport . bootstrap resolver eureka transport . transport client factory client config transport config application info manager . get info (  )  applications source )  ;  new query client = new query client factory . new client (  )  ;   }  catch  (   exception e )   {  logger . warn ( "" transport initialization failure"" e )  ;   }  eureka transport . query client factory = new query client factory ;  eureka transport . query client = new query client ;   }   }  ",3750,4,endpoint,3,[]
1399,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,schedule server endpoint task,"private void   (  eureka transport eureka transport  abstract discovery client optional args args )  {   collection <  ?  >  additional filters = args  =  =  null  ?   collections . empty list (  )  : args . additional filters ;   eureka jersey client provided jersey client = args  =  =  null  ?  null : args . eureka jersey client ;   transport client factories args transport client factories = null ;  if  ( args  !  =  null && args . get transport client factories (  )   !  =  null )   {  args transport client factories = args . get transport client factories (  )  ;   }  @ suppress warnings ( ""rawtypes"" )   transport client factories transport client factories = args transport client factories  =  =  null  ?  new  jersey1 transport client factories (  )  : args transport client factories ;   optional < ssl context >  ssl context = args  =  =  null  ?   optional . empty (  )  : args . getssl context (  )  ;   optional <  hostname verifier >  hostname verifier = args  =  =  null  ?   optional . empty (  )  : args . get hostname verifier (  )  ;  eureka transport . transport client factory = provided jersey client  =  =  null  ?  transport client factories . new transport client factory ( client config additional filters application info manager . get info (  )  ssl context hostname verifier )  : transport client factories . new transport client factory ( additional filters provided jersey client )  ;   applications resolver .  applications source applications source = new  applications resolver .  applications source (  )  {  @ override public  applications get applications (  int staleness threshold   time unit time unit )  {  long threshold in ms =  time unit . milliseconds . convert ( staleness threshold time unit )  ;  long delay = get last successful registry fetch time period (  )  ;  if  ( delay  >  threshold in ms )   {  logger . info ( "" local registry is too stale for local lookup .   threshold: {  }   actual: {  } "" threshold in ms delay )  ;  return null ;   }  else  {  return local region apps . get (  )  ;   }   }   }   ;  eureka transport . bootstrap resolver =  eureka http clients . new bootstrap resolver ( client config transport config eureka transport . transport client factory application info manager . get info (  )  applications source )  ;  if  ( client config . should register with eureka (  )  )   {   eureka http client factory new registration client factory = null ;   eureka http client new registration client = null ;  try  {  new registration client factory =  eureka http clients . registration client factory ( eureka transport . bootstrap resolver eureka transport . transport client factory transport config )  ;  new registration client = new registration client factory . new client (  )  ;   }  catch  (   exception e )   {  logger . warn ( "" transport initialization failure"" e )  ;   }  eureka transport . registration client factory = new registration client factory ;  eureka transport . registration client = new registration client ;   }  if  ( client config . should fetch registry (  )  )   {   eureka http client factory new query client factory = null ;   eureka http client new query client = null ;  try  {  new query client factory =  eureka http clients . query client factory ( eureka transport . bootstrap resolver eureka transport . transport client factory client config transport config application info manager . get info (  )  applications source )  ;  new query client = new query client factory . new client (  )  ;   }  catch  (   exception e )   {  logger . warn ( "" transport initialization failure"" e )  ;   }  eureka transport . query client factory = new query client factory ;  eureka transport . query client = new query client ;   }   }  ",3750,4,task,4,[]
1400,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,shutdown,"@ pre destroy @ override public synchronized void   (  )  {  if  ( is shutdown . compare and set ( false true )  )   {  logger . info ( "" shutting down  discovery client  .  .  . "" )  ;  if  ( status change listener  !  =  null && application info manager",255,1,shutdown,1,[70]
1401,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,unregister,"void   (  )  {  if  ( eureka transport  !  =  null && eureka transport . registration client  !  =  null )   {  try  {  logger . info ( "" unregistering  .  .  . "" )  ;   eureka http response <  void >  http response = eureka transport . registration client . cancel ( instance info . get app name (  )  instance info . get id (  )  )  ;  logger . info ( prefix  +  "" {  }   -  deregister status:  {  } "" app path identifier http response . get status code (  )  )  ;   }  catch  (   exception e )   {  logger . error ( prefix  +  "" {  }   -  de - registration failed {  } "" app path identifier e . get message (  )  e )  ;   }   }   }  ",636,1,unregister,1,[138]
1402,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,unregister event listener,@ override public boolean   (  eureka event listener event listener )  {  return this . event listeners . remove ( event listener )  ;   }  ,140,3,unregister,1,[]
1403,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,unregister event listener,@ override public boolean   (  eureka event listener event listener )  {  return this . event listeners . remove ( event listener )  ;   }  ,140,3,event,2,"[38, 53, 88, 115]"
1404,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,unregister event listener,@ override public boolean   (  eureka event listener event listener )  {  return this . event listeners . remove ( event listener )  ;   }  ,140,3,listener,3,"[44, 59, 94, 121]"
1405,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,update delta,"private void   (  applications delta )  {  int delta count = 0 ;  for  (   application app : delta . get registered applications (  )  )   {  for  (   instance info instance : app . get instances (  )  )   {   applications applications = get applications (  )  ;   string instance region = instance region checker . get instance region ( instance )  ;  if  (  ! instance region checker . is local region ( instance region )  )   {   applications remote apps = remote region vs apps . get ( instance region )  ;  if  ( null  =  =  remote apps )   {  remote apps = new  applications (  )  ;  remote region vs apps . put ( instance region remote apps )  ;   }  applications = remote apps ;   }   +  + delta count ;  if  (  action type . added . equals ( instance . get action type (  )  )  )   {   application existing app = applications . get registered applications ( instance . get app name (  )  )  ;  if  ( existing app  =  =  null )   {  applications . add application ( app )  ;   }  logger . debug ( "" added instance  {  }  to the existing apps in region  {  } "" instance . get id (  )  instance region )  ;  applications . get registered applications ( instance . get app name (  )  )  . add instance ( instance )  ;   }  else if  (  action type . modified . equals ( instance . get action type (  )  )  )   {   application existing app = applications . get registered applications ( instance . get app name (  )  )  ;  if  ( existing app  =  =  null )   {  applications . add application ( app )  ;   }  logger . debug ( "" modified instance  {  }  to the existing apps "" instance . get id (  )  )  ;  applications . get registered applications ( instance . get app name (  )  )  . add instance ( instance )  ;   }  else if  (  action type . deleted . equals ( instance . get action type (  )  )  )   {   application existing app = applications . get registered applications ( instance . get app name (  )  )  ;  if  ( existing app  =  =  null )   {  applications . add application ( app )  ;   }  logger . debug ( "" deleted instance  {  }  to the existing apps "" instance . get id (  )  )  ;  applications . get registered applications ( instance . get app name (  )  )  . remove instance ( instance )  ;   }   }   }  logger . debug ( "" the total number of instances fetched by the delta processor :  {  } "" delta count )  ;  get applications (  )  . set version ( delta . get version (  )  )  ;  get applications (  )  . shuffle instances ( client config . should filter only up instances (  )  )  ;  for  (   applications applications : remote region vs apps . values (  )  )   {  applications . set version ( delta . get version (  )  )  ;  applications . shuffle instances ( client config . should filter only up instances (  )  )  ;   }   }  ",2754,2,update,1,[]
1406,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,update delta,"private void   (  applications delta )  {  int delta count = 0 ;  for  (   application app : delta . get registered applications (  )  )   {  for  (   instance info instance : app . get instances (  )  )   {   applications applications = get applications (  )  ;   string instance region = instance region checker . get instance region ( instance )  ;  if  (  ! instance region checker . is local region ( instance region )  )   {   applications remote apps = remote region vs apps . get ( instance region )  ;  if  ( null  =  =  remote apps )   {  remote apps = new  applications (  )  ;  remote region vs apps . put ( instance region remote apps )  ;   }  applications = remote apps ;   }   +  + delta count ;  if  (  action type . added . equals ( instance . get action type (  )  )  )   {   application existing app = applications . get registered applications ( instance . get app name (  )  )  ;  if  ( existing app  =  =  null )   {  applications . add application ( app )  ;   }  logger . debug ( "" added instance  {  }  to the existing apps in region  {  } "" instance . get id (  )  instance region )  ;  applications . get registered applications ( instance . get app name (  )  )  . add instance ( instance )  ;   }  else if  (  action type . modified . equals ( instance . get action type (  )  )  )   {   application existing app = applications . get registered applications ( instance . get app name (  )  )  ;  if  ( existing app  =  =  null )   {  applications . add application ( app )  ;   }  logger . debug ( "" modified instance  {  }  to the existing apps "" instance . get id (  )  )  ;  applications . get registered applications ( instance . get app name (  )  )  . add instance ( instance )  ;   }  else if  (  action type . deleted . equals ( instance . get action type (  )  )  )   {   application existing app = applications . get registered applications ( instance . get app name (  )  )  ;  if  ( existing app  =  =  null )   {  applications . add application ( app )  ;   }  logger . debug ( "" deleted instance  {  }  to the existing apps "" instance . get id (  )  )  ;  applications . get registered applications ( instance . get app name (  )  )  . remove instance ( instance )  ;   }   }   }  logger . debug ( "" the total number of instances fetched by the delta processor :  {  } "" delta count )  ;  get applications (  )  . set version ( delta . get version (  )  )  ;  get applications (  )  . shuffle instances ( client config . should filter only up instances (  )  )  ;  for  (   applications applications : remote region vs apps . values (  )  )   {  applications . set version ( delta . get version (  )  )  ;  applications . shuffle instances ( client config . should filter only up instances (  )  )  ;   }   }  ",2754,2,delta,2,"[31, 47, 93, 698, 2289, 2315, 2372, 2619]"
1407,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,update instance remote status,private synchronized void   (  )  {   instance info .  instance status current remote instance status = null ;  if  ( instance info . get app name (  )   !  =  null )   {   application app = get application ( instance info . get app name (  )  )  ;  if  ( app  !  =  null )   {   instance info remote instance info = app . get by instance id ( instance info . get id (  )  )  ;  if  ( remote instance info  !  =  null )   {  current remote instance status = remote instance info . get status (  )  ;   }   }   }  if  ( current remote instance status  =  =  null )   {  current remote instance status =  instance info .  instance status . unknown ;   }  if  ( last remote instance status  !  =  current remote instance status )   {  on remote status changed ( last remote instance status current remote instance status )  ;  last remote instance status = current remote instance status ;   }   }  ,896,4,update,1,[]
1408,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,update instance remote status,private synchronized void   (  )  {   instance info .  instance status current remote instance status = null ;  if  ( instance info . get app name (  )   !  =  null )   {   application app = get application ( instance info . get app name (  )  )  ;  if  ( app  !  =  null )   {   instance info remote instance info = app . get by instance id ( instance info . get id (  )  )  ;  if  ( remote instance info  !  =  null )   {  current remote instance status = remote instance info . get status (  )  ;   }   }   }  if  ( current remote instance status  =  =  null )   {  current remote instance status =  instance info .  instance status . unknown ;   }  if  ( last remote instance status  !  =  current remote instance status )   {  on remote status changed ( last remote instance status current remote instance status )  ;  last remote instance status = current remote instance status ;   }   }  ,896,4,instance,2,"[38, 55, 86, 118, 209, 280, 301, 330, 344, 392, 440, 465, 534, 584, 603, 620, 671, 709, 771, 802, 836, 869]"
1409,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,update instance remote status,private synchronized void   (  )  {   instance info .  instance status current remote instance status = null ;  if  ( instance info . get app name (  )   !  =  null )   {   application app = get application ( instance info . get app name (  )  )  ;  if  ( app  !  =  null )   {   instance info remote instance info = app . get by instance id ( instance info . get id (  )  )  ;  if  ( remote instance info  !  =  null )   {  current remote instance status = remote instance info . get status (  )  ;   }   }   }  if  ( current remote instance status  =  =  null )   {  current remote instance status =  instance info .  instance status . unknown ;   }  if  ( last remote instance status  !  =  current remote instance status )   {  on remote status changed ( last remote instance status current remote instance status )  ;  last remote instance status = current remote instance status ;   }   }  ,896,4,remote,3,"[79, 294, 385, 433, 458, 527, 577, 664, 702, 735, 764, 795, 829, 862]"
1410,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,update instance remote status,private synchronized void   (  )  {   instance info .  instance status current remote instance status = null ;  if  ( instance info . get app name (  )   !  =  null )   {   application app = get application ( instance info . get app name (  )  )  ;  if  ( app  !  =  null )   {   instance info remote instance info = app . get by instance id ( instance info . get id (  )  )  ;  if  ( remote instance info  !  =  null )   {  current remote instance status = remote instance info . get status (  )  ;   }   }   }  if  ( current remote instance status  =  =  null )   {  current remote instance status =  instance info .  instance status . unknown ;   }  if  ( last remote instance status  !  =  current remote instance status )   {  on remote status changed ( last remote instance status current remote instance status )  ;  last remote instance status = current remote instance status ;   }   }  ,896,4,status,4,"[64, 95, 449, 485, 543, 593, 629, 680, 718, 742, 780, 811, 845, 878]"
1411,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\endpoint\DnsResolver.java,getc names from txt record,"public static  set <  string >    (  string discovery dns name )  throws  naming exception  {   attributes attrs = dir context . get attributes ( discovery dns name new  string[] { txt   record   type }  )  ;   attribute attr = attrs . get ( txt   record   type )  ;   string txt record = null ;  if  ( attr  !  =  null )   {  txt record = attr . get (  )  . to string (  )  ;   }   set <  string >  cnames set = new  tree set <  string >  (  )  ;  if  ( txt record  =  =  null || txt record . trim (  )  . is empty (  )  )   {  return cnames set ;   }   string[] cnames = txt record . split ( "" "" )  ;   collections . add all ( cnames set cnames )  ;  return cnames set ;   }  ",678,5,getc,1,[]
1412,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\endpoint\DnsResolver.java,getc names from txt record,"public static  set <  string >    (  string discovery dns name )  throws  naming exception  {   attributes attrs = dir context . get attributes ( discovery dns name new  string[] { txt   record   type }  )  ;   attribute attr = attrs . get ( txt   record   type )  ;   string txt record = null ;  if  ( attr  !  =  null )   {  txt record = attr . get (  )  . to string (  )  ;   }   set <  string >  cnames set = new  tree set <  string >  (  )  ;  if  ( txt record  =  =  null || txt record . trim (  )  . is empty (  )  )   {  return cnames set ;   }   string[] cnames = txt record . split ( "" "" )  ;   collections . add all ( cnames set cnames )  ;  return cnames set ;   }  ",678,5,names,2,"[401, 537, 565, 630, 641, 661]"
1413,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\endpoint\DnsResolver.java,getc names from txt record,"public static  set <  string >    (  string discovery dns name )  throws  naming exception  {   attributes attrs = dir context . get attributes ( discovery dns name new  string[] { txt   record   type }  )  ;   attribute attr = attrs . get ( txt   record   type )  ;   string txt record = null ;  if  ( attr  !  =  null )   {  txt record = attr . get (  )  . to string (  )  ;   }   set <  string >  cnames set = new  tree set <  string >  (  )  ;  if  ( txt record  =  =  null || txt record . trim (  )  . is empty (  )  )   {  return cnames set ;   }   string[] cnames = txt record . split ( "" "" )  ;   collections . add all ( cnames set cnames )  ;  return cnames set ;   }  ",678,5,from,3,[]
1414,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\endpoint\DnsResolver.java,getc names from txt record,"public static  set <  string >    (  string discovery dns name )  throws  naming exception  {   attributes attrs = dir context . get attributes ( discovery dns name new  string[] { txt   record   type }  )  ;   attribute attr = attrs . get ( txt   record   type )  ;   string txt record = null ;  if  ( attr  !  =  null )   {  txt record = attr . get (  )  . to string (  )  ;   }   set <  string >  cnames set = new  tree set <  string >  (  )  ;  if  ( txt record  =  =  null || txt record . trim (  )  . is empty (  )  )   {  return cnames set ;   }   string[] cnames = txt record . split ( "" "" )  ;   collections . add all ( cnames set cnames )  ;  return cnames set ;   }  ",678,5,txt,4,"[181, 242, 276, 327, 455, 481, 573]"
1415,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\endpoint\DnsResolver.java,getc names from txt record,"public static  set <  string >    (  string discovery dns name )  throws  naming exception  {   attributes attrs = dir context . get attributes ( discovery dns name new  string[] { txt   record   type }  )  ;   attribute attr = attrs . get ( txt   record   type )  ;   string txt record = null ;  if  ( attr  !  =  null )   {  txt record = attr . get (  )  . to string (  )  ;   }   set <  string >  cnames set = new  tree set <  string >  (  )  ;  if  ( txt record  =  =  null || txt record . trim (  )  . is empty (  )  )   {  return cnames set ;   }   string[] cnames = txt record . split ( "" "" )  ;   collections . add all ( cnames set cnames )  ;  return cnames set ;   }  ",678,5,record,5,"[187, 248, 280, 331, 459, 485, 577]"
1416,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\endpoint\DnsResolver.java,get dir context,"public static  dir context   (  )  {   hashtable <  string  string >  env = new  hashtable <  string  string >  (  )  ;  env . put ( java   naming   factory   initial dns   naming   factory )  ;  env . put ( java   naming   provider   url dns   provider   url )  ;  try  {  return new  initial dir context ( env )  ;   }  catch  (   throwable e )   {  throw new  runtime exception ( "" cannot get dir context for some reason"" e )  ;   }   }  ",441,3,get,1,[392]
1417,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\endpoint\DnsResolver.java,get dir context,"public static  dir context   (  )  {   hashtable <  string  string >  env = new  hashtable <  string  string >  (  )  ;  env . put ( java   naming   factory   initial dns   naming   factory )  ;  env . put ( java   naming   provider   url dns   provider   url )  ;  try  {  return new  initial dir context ( env )  ;   }  catch  (   throwable e )   {  throw new  runtime exception ( "" cannot get dir context for some reason"" e )  ;   }   }  ",441,3,dir,2,"[15, 294, 396]"
1418,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\endpoint\DnsResolver.java,get dir context,"public static  dir context   (  )  {   hashtable <  string  string >  env = new  hashtable <  string  string >  (  )  ;  env . put ( java   naming   factory   initial dns   naming   factory )  ;  env . put ( java   naming   provider   url dns   provider   url )  ;  try  {  return new  initial dir context ( env )  ;   }  catch  (   throwable e )   {  throw new  runtime exception ( "" cannot get dir context for some reason"" e )  ;   }   }  ",441,3,context,3,"[19, 298, 400]"
1419,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\endpoint\DnsResolver.java,is local or ip,"private static boolean   (  string current host )  {  if  ( ""localhost"" . equals ( current host )  )   {  return true ;   }  if  ( ""127 . 0 . 0 . 1"" . equals ( current host )  )   {  return true ;   }  return false ;   }  ",222,4,is,1,[]
1420,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\endpoint\DnsResolver.java,is local or ip,"private static boolean   (  string current host )  {  if  ( ""localhost"" . equals ( current host )  )   {  return true ;   }  if  ( ""127 . 0 . 0 . 1"" . equals ( current host )  )   {  return true ;   }  return false ;   }  ",222,4,local,2,[61]
1421,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\endpoint\DnsResolver.java,is local or ip,"private static boolean   (  string current host )  {  if  ( ""localhost"" . equals ( current host )  )   {  return true ;   }  if  ( ""127 . 0 . 0 . 1"" . equals ( current host )  )   {  return true ;   }  return false ;   }  ",222,4,or,3,[]
1422,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\endpoint\DnsResolver.java,is local or ip,"private static boolean   (  string current host )  {  if  ( ""localhost"" . equals ( current host )  )   {  return true ;   }  if  ( ""127 . 0 . 0 . 1"" . equals ( current host )  )   {  return true ;   }  return false ;   }  ",222,4,ip,4,[]
1423,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\endpoint\DnsResolver.java,resolve,"public static  string   (  string original host )  {   string current host = original host ;  if  ( is local or ip ( current host )  )   {  return original host ;   }  try  {   string target host = null ;  do  {   attributes attrs = dir context . get attributes ( current host new  string[] { a   record   type cname   record   type }  )  ;   attribute attr = attrs . get ( a   record   type )  ;  if  ( attr  !  =  null )   {  target host = attr . get (  )  . to string (  )  ;   }  attr = attrs . get ( cname   record   type )  ;  if  ( attr  !  =  null )   {  current host = attr . get (  )  . to string (  )  ;   }  else  {  target host = current host ;   }   }  while  ( target host  =  =  null )  ;  return target host ;   }  catch  (   naming exception e )   {  logger . warn ( "" cannot resolve eureka server address  {  }  ;  returning original value  {  } "" current host original host e )  ;  return original host ;   }   }  ",934,1,resolve,1,[794]
1424,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\endpoint\DnsResolver.java,resolvea record,@ nullable public static  list <  string >    (  string root domain name )  {  if  ( is local or ip ( root domain name )  )   {  return null ;   }  try  {   attributes attrs = dir context . get attributes ( root domain name new  string[] { a   record   ty,255,2,resolvea,1,[]
1425,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\endpoint\DnsResolver.java,resolvea record,@ nullable public static  list <  string >    (  string root domain name )  {  if  ( is local or ip ( root domain name )  )   {  return null ;   }  try  {   attributes attrs = dir context . get attributes ( root domain name new  string[] { a   record   ty,255,2,record,2,[244]
1426,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\endpoint\EndpointUtils.java, instance info based url randomizer,public   (  instance info instance info )  {  this . instance info = instance info ;   }  ,90,5,instance,1,"[12, 26, 53, 69]"
1427,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\endpoint\EndpointUtils.java, instance info based url randomizer,public   (  instance info instance info )  {  this . instance info = instance info ;   }  ,90,5,info,2,"[21, 35, 62, 78]"
1428,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\endpoint\EndpointUtils.java, instance info based url randomizer,public   (  instance info instance info )  {  this . instance info = instance info ;   }  ,90,5,based,3,[]
1429,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\endpoint\EndpointUtils.java, instance info based url randomizer,public   (  instance info instance info )  {  this . instance info = instance info ;   }  ,90,5,url,4,[]
1430,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\endpoint\EndpointUtils.java, instance info based url randomizer,public   (  instance info instance info )  {  this . instance info = instance info ;   }  ,90,5,randomizer,5,[]
1431,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\endpoint\EndpointUtils.java,get discovery service urls,public static  list <  string >    (  eureka client config client config  string zone  service url randomizer randomizer )  {  boolean should use dns = client config . should use dns for fetching service urls (  )  ;  if  ( should use dns )   {  return get service urls fromdns ( client config zone client config . should prefer same zone eureka (  )  randomizer )  ;   }  return get service urls from config ( client config zone client config . should prefer same zone eureka (  )  )  ;   }  ,493,4,get,1,"[253, 380]"
1432,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\endpoint\EndpointUtils.java,get discovery service urls,public static  list <  string >    (  eureka client config client config  string zone  service url randomizer randomizer )  {  boolean should use dns = client config . should use dns for fetching service urls (  )  ;  if  ( should use dns )   {  return get service urls fromdns ( client config zone client config . should prefer same zone eureka (  )  randomizer )  ;   }  return get service urls from config ( client config zone client config . should prefer same zone eureka (  )  )  ;   }  ,493,4,discovery,2,[]
1433,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\endpoint\EndpointUtils.java,get discovery service urls,public static  list <  string >    (  eureka client config client config  string zone  service url randomizer randomizer )  {  boolean should use dns = client config . should use dns for fetching service urls (  )  ;  if  ( should use dns )   {  return get service urls fromdns ( client config zone client config . should prefer same zone eureka (  )  randomizer )  ;   }  return get service urls from config ( client config zone client config . should prefer same zone eureka (  )  )  ;   }  ,493,4,service,3,"[87, 196, 257, 384]"
1434,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\endpoint\EndpointUtils.java,get discovery service urls,public static  list <  string >    (  eureka client config client config  string zone  service url randomizer randomizer )  {  boolean should use dns = client config . should use dns for fetching service urls (  )  ;  if  ( should use dns )   {  return get service urls fromdns ( client config zone client config . should prefer same zone eureka (  )  randomizer )  ;   }  return get service urls from config ( client config zone client config . should prefer same zone eureka (  )  )  ;   }  ,493,4,urls,4,"[204, 265, 392]"
1435,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\endpoint\EndpointUtils.java,getec discovery urls from zone,"public static  set <  string >    (  string dns name  discovery url type type )  {   set <  string >  eips for zone = null ;  try  {  dns name = ""txt . ""  +  dns name ;  logger . debug ( "" the zone url to be looked up is  {  }  :"" dns name )  ;   set <  string >  ec2 urls for zone =  dns resolver . getc names from txt record ( dns name )  ;  for  (   string ec2 url : ec2 urls for zone )   {  logger . debug ( "" the eureka url for the dns name  {  }  is  {  } "" dns name ec2 url )  ;  ec2 urls for zone . add ( ec2 url )  ;   }  if  (  discovery url type . cname . equals ( type )  )   {  return ec2 urls for zone ;   }  eips for zone = new  tree set <  string >  (  )  ;  for  (   string cname : ec2 urls for zone )   {   string[] tokens = cname . split ( ""\\ . "" )  ;   string ec2 host name = tokens[0] ;   string[] ips = ec2 host name . split ( "" - "" )  ;   string builder eip buffer = new  string builder (  )  ;  for  ( int ip ctr = 1 ;  ip ctr  <  5 ;  ip ctr +  +  )   {  eip buffer . append ( ips[ip ctr] )  ;  if  ( ip ctr  <  4 )   {  eip buffer . append ( "" . "" )  ;   }   }  eips for zone . add ( eip buffer . to string (  )  )  ;   }  logger . debug ( "" the eips for  {  }  is  {  }  :"" dns name eips for zone )  ;   }  catch  (   throwable e )   {  throw new  runtime exception ( "" cannot get cnames bound to the region:""  +  dns name e )  ;   }  return eips for zone ;   }  ",1391,5,getec,1,[]
1436,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\endpoint\EndpointUtils.java,getec discovery urls from zone,"public static  set <  string >    (  string dns name  discovery url type type )  {   set <  string >  eips for zone = null ;  try  {  dns name = ""txt . ""  +  dns name ;  logger . debug ( "" the zone url to be looked up is  {  }  :"" dns name )  ;   set <  string >  ec2 urls for zone =  dns resolver . getc names from txt record ( dns name )  ;  for  (   string ec2 url : ec2 urls for zone )   {  logger . debug ( "" the eureka url for the dns name  {  }  is  {  } "" dns name ec2 url )  ;  ec2 urls for zone . add ( ec2 url )  ;   }  if  (  discovery url type . cname . equals ( type )  )   {  return ec2 urls for zone ;   }  eips for zone = new  tree set <  string >  (  )  ;  for  (   string cname : ec2 urls for zone )   {   string[] tokens = cname . split ( ""\\ . "" )  ;   string ec2 host name = tokens[0] ;   string[] ips = ec2 host name . split ( "" - "" )  ;   string builder eip buffer = new  string builder (  )  ;  for  ( int ip ctr = 1 ;  ip ctr  <  5 ;  ip ctr +  +  )   {  eip buffer . append ( ips[ip ctr] )  ;  if  ( ip ctr  <  4 )   {  eip buffer . append ( "" . "" )  ;   }   }  eips for zone . add ( eip buffer . to string (  )  )  ;   }  logger . debug ( "" the eips for  {  }  is  {  }  :"" dns name eips for zone )  ;   }  catch  (   throwable e )   {  throw new  runtime exception ( "" cannot get cnames bound to the region:""  +  dns name e )  ;   }  return eips for zone ;   }  ",1391,5,discovery,2,"[54, 538]"
1437,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\endpoint\EndpointUtils.java,getec discovery urls from zone,"public static  set <  string >    (  string dns name  discovery url type type )  {   set <  string >  eips for zone = null ;  try  {  dns name = ""txt . ""  +  dns name ;  logger . debug ( "" the zone url to be looked up is  {  }  :"" dns name )  ;   set <  string >  ec2 urls for zone =  dns resolver . getc names from txt record ( dns name )  ;  for  (   string ec2 url : ec2 urls for zone )   {  logger . debug ( "" the eureka url for the dns name  {  }  is  {  } "" dns name ec2 url )  ;  ec2 urls for zone . add ( ec2 url )  ;   }  if  (  discovery url type . cname . equals ( type )  )   {  return ec2 urls for zone ;   }  eips for zone = new  tree set <  string >  (  )  ;  for  (   string cname : ec2 urls for zone )   {   string[] tokens = cname . split ( ""\\ . "" )  ;   string ec2 host name = tokens[0] ;   string[] ips = ec2 host name . split ( "" - "" )  ;   string builder eip buffer = new  string builder (  )  ;  for  ( int ip ctr = 1 ;  ip ctr  <  5 ;  ip ctr +  +  )   {  eip buffer . append ( ips[ip ctr] )  ;  if  ( ip ctr  <  4 )   {  eip buffer . append ( "" . "" )  ;   }   }  eips for zone . add ( eip buffer . to string (  )  )  ;   }  logger . debug ( "" the eips for  {  }  is  {  }  :"" dns name eips for zone )  ;   }  catch  (   throwable e )   {  throw new  runtime exception ( "" cannot get cnames bound to the region:""  +  dns name e )  ;   }  return eips for zone ;   }  ",1391,5,urls,3,"[268, 374, 491, 602, 703]"
1438,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\endpoint\EndpointUtils.java,getec discovery urls from zone,"public static  set <  string >    (  string dns name  discovery url type type )  {   set <  string >  eips for zone = null ;  try  {  dns name = ""txt . ""  +  dns name ;  logger . debug ( "" the zone url to be looked up is  {  }  :"" dns name )  ;   set <  string >  ec2 urls for zone =  dns resolver . getc names from txt record ( dns name )  ;  for  (   string ec2 url : ec2 urls for zone )   {  logger . debug ( "" the eureka url for the dns name  {  }  is  {  } "" dns name ec2 url )  ;  ec2 urls for zone . add ( ec2 url )  ;   }  if  (  discovery url type . cname . equals ( type )  )   {  return ec2 urls for zone ;   }  eips for zone = new  tree set <  string >  (  )  ;  for  (   string cname : ec2 urls for zone )   {   string[] tokens = cname . split ( ""\\ . "" )  ;   string ec2 host name = tokens[0] ;   string[] ips = ec2 host name . split ( "" - "" )  ;   string builder eip buffer = new  string builder (  )  ;  for  ( int ip ctr = 1 ;  ip ctr  <  5 ;  ip ctr +  +  )   {  eip buffer . append ( ips[ip ctr] )  ;  if  ( ip ctr  <  4 )   {  eip buffer . append ( "" . "" )  ;   }   }  eips for zone . add ( eip buffer . to string (  )  )  ;   }  logger . debug ( "" the eips for  {  }  is  {  }  :"" dns name eips for zone )  ;   }  catch  (   throwable e )   {  throw new  runtime exception ( "" cannot get cnames bound to the region:""  +  dns name e )  ;   }  return eips for zone ;   }  ",1391,5,from,4,[311]
1439,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\endpoint\EndpointUtils.java,getec discovery urls from zone,"public static  set <  string >    (  string dns name  discovery url type type )  {   set <  string >  eips for zone = null ;  try  {  dns name = ""txt . ""  +  dns name ;  logger . debug ( "" the zone url to be looked up is  {  }  :"" dns name )  ;   set <  string >  ec2 urls for zone =  dns resolver . getc names from txt record ( dns name )  ;  for  (   string ec2 url : ec2 urls for zone )   {  logger . debug ( "" the eureka url for the dns name  {  }  is  {  } "" dns name ec2 url )  ;  ec2 urls for zone . add ( ec2 url )  ;   }  if  (  discovery url type . cname . equals ( type )  )   {  return ec2 urls for zone ;   }  eips for zone = new  tree set <  string >  (  )  ;  for  (   string cname : ec2 urls for zone )   {   string[] tokens = cname . split ( ""\\ . "" )  ;   string ec2 host name = tokens[0] ;   string[] ips = ec2 host name . split ( "" - "" )  ;   string builder eip buffer = new  string builder (  )  ;  for  ( int ip ctr = 1 ;  ip ctr  <  5 ;  ip ctr +  +  )   {  eip buffer . append ( ips[ip ctr] )  ;  if  ( ip ctr  <  4 )   {  eip buffer . append ( "" . "" )  ;   }   }  eips for zone . add ( eip buffer . to string (  )  )  ;   }  logger . debug ( "" the eips for  {  }  is  {  }  :"" dns name eips for zone )  ;   }  catch  (   throwable e )   {  throw new  runtime exception ( "" cannot get cnames bound to the region:""  +  dns name e )  ;   }  return eips for zone ;   }  ",1391,5,zone,5,"[111, 193, 277, 383, 500, 611, 632, 712, 1098, 1220, 1379]"
1440,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\endpoint\EndpointUtils.java,get region,public static  string   (  eureka client config client config )  {   string region = client config . get region (  )  ;  if  ( region  =  =  null )   {  region = default   region ;   }  region = region . trim (  )  . to lower case (  )  ;  return region ;   }  ,261,2,get,1,[101]
1441,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\endpoint\EndpointUtils.java,get region,public static  string   (  eureka client config client config )  {   string region = client config . get region (  )  ;  if  ( region  =  =  null )   {  region = default   region ;   }  region = region . trim (  )  . to lower case (  )  ;  return region ;   }  ,261,2,region,2,"[76, 105, 127, 153, 172, 186, 195, 247]"
1442,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\endpoint\EndpointUtils.java,get service urls from config,"public static  list <  string >    (  eureka client config client config  string instance zone boolean prefer same zone )  {   list <  string >  ordered urls = new  array list <  string >  (  )  ;   string region = get region ( client config )  ;   string[] avail zones = client config . get availability zones ( client config . get region (  )  )  ;  if  ( avail zones  =  =  null || avail zones . length  =  =  0 )   {  avail zones = new  string[1] ;  avail zones[0] = default   zone ;   }  logger . debug ( "" the availability zone for the given region  {  }  are  {  } "" region avail zones )  ;  int my zone offset = get zone offset ( instance zone prefer same zone avail zones )  ;   list <  string >  service urls = client config . get eureka server service urls ( avail zones[my zone offset] )  ;  if  ( service urls  !  =  null )   {  ordered urls . add all ( service urls )  ;   }  int current offset = my zone offset  =  =   ( avail zones . length  -  1 )   ?  0 :  ( my zone offset  +  1 )  ;  while  ( current offset  !  =  my zone offset )   {  service urls = client config . get eureka server service urls ( avail zones[current offset] )  ;  if  ( service urls  !  =  null )   {  ordered urls . add all ( service urls )  ;   }  if  ( current offset  =  =   ( avail zones . length  -  1 )  )   {  current offset = 0 ;   }  else  {  current offset +  +  ;   }   }  if  ( ordered urls . size (  )   <  1 )   {  throw new  illegal argument exception ( "" discovery client: invalid service url specified ! "" )  ;   }  return ordered urls ;   }  ",1552,5,get,1,"[215, 288, 329, 620, 737, 1088]"
1443,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\endpoint\EndpointUtils.java,get service urls from config,"public static  list <  string >    (  eureka client config client config  string instance zone boolean prefer same zone )  {   list <  string >  ordered urls = new  array list <  string >  (  )  ;   string region = get region ( client config )  ;   string[] avail zones = client config . get availability zones ( client config . get region (  )  )  ;  if  ( avail zones  =  =  null || avail zones . length  =  =  0 )   {  avail zones = new  string[1] ;  avail zones[0] = default   zone ;   }  logger . debug ( "" the availability zone for the given region  {  }  are  {  } "" region avail zones )  ;  int my zone offset = get zone offset ( instance zone prefer same zone avail zones )  ;   list <  string >  service urls = client config . get eureka server service urls ( avail zones[my zone offset] )  ;  if  ( service urls  !  =  null )   {  ordered urls . add all ( service urls )  ;   }  int current offset = my zone offset  =  =   ( avail zones . length  -  1 )   ?  0 :  ( my zone offset  +  1 )  ;  while  ( current offset  !  =  my zone offset )   {  service urls = client config . get eureka server service urls ( avail zones[current offset] )  ;  if  ( service urls  !  =  null )   {  ordered urls . add all ( service urls )  ;   }  if  ( current offset  =  =   ( avail zones . length  -  1 )  )   {  current offset = 0 ;   }  else  {  current offset +  +  ;   }   }  if  ( ordered urls . size (  )   <  1 )   {  throw new  illegal argument exception ( "" discovery client: invalid service url specified ! "" )  ;   }  return ordered urls ;   }  ",1552,5,service,2,"[706, 755, 810, 867, 1057, 1106, 1161, 1218, 1489]"
1444,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\endpoint\EndpointUtils.java,get service urls from config,"public static  list <  string >    (  eureka client config client config  string instance zone boolean prefer same zone )  {   list <  string >  ordered urls = new  array list <  string >  (  )  ;   string region = get region ( client config )  ;   string[] avail zones = client config . get availability zones ( client config . get region (  )  )  ;  if  ( avail zones  =  =  null || avail zones . length  =  =  0 )   {  avail zones = new  string[1] ;  avail zones[0] = default   zone ;   }  logger . debug ( "" the availability zone for the given region  {  }  are  {  } "" region avail zones )  ;  int my zone offset = get zone offset ( instance zone prefer same zone avail zones )  ;   list <  string >  service urls = client config . get eureka server service urls ( avail zones[my zone offset] )  ;  if  ( service urls  !  =  null )   {  ordered urls . add all ( service urls )  ;   }  int current offset = my zone offset  =  =   ( avail zones . length  -  1 )   ?  0 :  ( my zone offset  +  1 )  ;  while  ( current offset  !  =  my zone offset )   {  service urls = client config . get eureka server service urls ( avail zones[current offset] )  ;  if  ( service urls  !  =  null )   {  ordered urls . add all ( service urls )  ;   }  if  ( current offset  =  =   ( avail zones . length  -  1 )  )   {  current offset = 0 ;   }  else  {  current offset +  +  ;   }   }  if  ( ordered urls . size (  )   <  1 )   {  throw new  illegal argument exception ( "" discovery client: invalid service url specified ! "" )  ;   }  return ordered urls ;   }  ",1552,5,urls,3,"[153, 714, 763, 818, 850, 875, 1065, 1114, 1169, 1201, 1226, 1390, 1540]"
1445,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\endpoint\EndpointUtils.java,get service urls from config,"public static  list <  string >    (  eureka client config client config  string instance zone boolean prefer same zone )  {   list <  string >  ordered urls = new  array list <  string >  (  )  ;   string region = get region ( client config )  ;   string[] avail zones = client config . get availability zones ( client config . get region (  )  )  ;  if  ( avail zones  =  =  null || avail zones . length  =  =  0 )   {  avail zones = new  string[1] ;  avail zones[0] = default   zone ;   }  logger . debug ( "" the availability zone for the given region  {  }  are  {  } "" region avail zones )  ;  int my zone offset = get zone offset ( instance zone prefer same zone avail zones )  ;   list <  string >  service urls = client config . get eureka server service urls ( avail zones[my zone offset] )  ;  if  ( service urls  !  =  null )   {  ordered urls . add all ( service urls )  ;   }  int current offset = my zone offset  =  =   ( avail zones . length  -  1 )   ?  0 :  ( my zone offset  +  1 )  ;  while  ( current offset  !  =  my zone offset )   {  service urls = client config . get eureka server service urls ( avail zones[current offset] )  ;  if  ( service urls  !  =  null )   {  ordered urls . add all ( service urls )  ;   }  if  ( current offset  =  =   ( avail zones . length  -  1 )  )   {  current offset = 0 ;   }  else  {  current offset +  +  ;   }   }  if  ( ordered urls . size (  )   <  1 )   {  throw new  illegal argument exception ( "" discovery client: invalid service url specified ! "" )  ;   }  return ordered urls ;   }  ",1552,5,from,4,[]
1446,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\endpoint\EndpointUtils.java,get service urls from config,"public static  list <  string >    (  eureka client config client config  string instance zone boolean prefer same zone )  {   list <  string >  ordered urls = new  array list <  string >  (  )  ;   string region = get region ( client config )  ;   string[] avail zones = client config . get availability zones ( client config . get region (  )  )  ;  if  ( avail zones  =  =  null || avail zones . length  =  =  0 )   {  avail zones = new  string[1] ;  avail zones[0] = default   zone ;   }  logger . debug ( "" the availability zone for the given region  {  }  are  {  } "" region avail zones )  ;  int my zone offset = get zone offset ( instance zone prefer same zone avail zones )  ;   list <  string >  service urls = client config . get eureka server service urls ( avail zones[my zone offset] )  ;  if  ( service urls  !  =  null )   {  ordered urls . add all ( service urls )  ;   }  int current offset = my zone offset  =  =   ( avail zones . length  -  1 )   ?  0 :  ( my zone offset  +  1 )  ;  while  ( current offset  !  =  my zone offset )   {  service urls = client config . get eureka server service urls ( avail zones[current offset] )  ;  if  ( service urls  !  =  null )   {  ordered urls . add all ( service urls )  ;   }  if  ( current offset  =  =   ( avail zones . length  -  1 )  )   {  current offset = 0 ;   }  else  {  current offset +  +  ;   }   }  if  ( ordered urls . size (  )   <  1 )   {  throw new  illegal argument exception ( "" discovery client: invalid service url specified ! "" )  ;   }  return ordered urls ;   }  ",1552,5,config,5,"[52, 66, 235, 279, 320, 728, 1079]"
1447,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\endpoint\EndpointUtils.java,get service urls fromdns,"public static  list <  string >    (  eureka client config client config  string instance zone boolean prefer same zone  service url randomizer randomizer )  {   string region = get region ( client config )  ;   map <  string  list <  string >  >  zone dns names map = get zone based discovery urls from region ( client config region )  ;   set <  string >  available zones = zone dns names map . key set (  )  ;   list <  string >  zones = new  array list <  string >  ( available zones )  ;  if  ( zones . is empty (  )  )   {  throw new  runtime exception ( "" no available zones configured for the instance zone ""  +  instance zone )  ;   }  int zone index = 0 ;  boolean zone found = false ;  for  (   string zone : zones )   {  logger . debug ( "" checking if the instance zone  {  }  is the same as the zone from dns  {  } "" instance zone zone )  ;  if  ( prefer same zone )   {  if  ( instance zone . equals ignore case ( zone )  )   {  zone found = true ;   }   }  else  {  if  (  ! instance zone . equals ignore case ( zone )  )   {  zone found = true ;   }   }  if  ( zone found )   {  logger . debug ( "" the zone index from the list  {  }  that matches the instance zone  {  }  is  {  } "" zones instance zone zone index )  ;  break ;   }  zone index +  +  ;   }  if  ( zone index  >  =  zones . size (  )  )   {  if  ( logger . is warn enabled (  )  )   {  logger . warn ( "" no match for the zone  {  }  in the list of available zones  {  } "" instance zone zones . to array (  )  )  ;   }   }  else  {  for  ( int i = 0 ;  i  <  zone index ;  i +  +  )   {   string zone = zones . remove ( 0 )  ;  zones . add ( zone )  ;   }   }   list <  string >  service urls = new  array list <  string >  (  )  ;  for  (   string zone : zones )   {  for  (   string zone cname : zone dns names map . get ( zone )  )   {   list <  string >  ec2 urls = new  array list <  string >  ( getec2 discovery urls from zone ( zone cname  discovery url type . cname )  )  ;  if  ( ec2 urls . size (  )   >  1 )   {  randomizer . randomize ( ec2 urls )  ;   }  for  (   string ec2 url : ec2 urls )   {   string service url = ""http: /  / ""  +  ec2 url  +  "":"" +  client config . get eureka server port (  )  +  "" / "" +  client config . get eureka serverurl context (  )  +  "" / "" ;  logger . debug ( "" the ec2 url is  {  } "" service url )  ;  service urls . add ( service url )  ;   }   }   }   string primary service url = service urls . remove ( 0 )  ;  randomizer . randomize ( service urls )  ;  service urls . add ( 0 primary service url )  ;  if  ( logger . is debug enabled (  )  )   {  logger . debug ( "" this client will talk to the following service urls in order :  {  }  ""  (  object ) service urls . to array (  )  )  ;   }  return service urls ;   }  ",2751,4,get,1,"[178, 269, 1799, 1881, 2165, 2222]"
1448,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\endpoint\EndpointUtils.java,get service urls fromdns,"public static  list <  string >    (  eureka client config client config  string instance zone boolean prefer same zone  service url randomizer randomizer )  {   string region = get region ( client config )  ;   map <  string  list <  string >  >  zone dns names map = get zone based discovery urls from region ( client config region )  ;   set <  string >  available zones = zone dns names map . key set (  )  ;   list <  string >  zones = new  array list <  string >  ( available zones )  ;  if  ( zones . is empty (  )  )   {  throw new  runtime exception ( "" no available zones configured for the instance zone ""  +  instance zone )  ;   }  int zone index = 0 ;  boolean zone found = false ;  for  (   string zone : zones )   {  logger . debug ( "" checking if the instance zone  {  }  is the same as the zone from dns  {  } "" instance zone zone )  ;  if  ( prefer same zone )   {  if  ( instance zone . equals ignore case ( zone )  )   {  zone found = true ;   }   }  else  {  if  (  ! instance zone . equals ignore case ( zone )  )   {  zone found = true ;   }   }  if  ( zone found )   {  logger . debug ( "" the zone index from the list  {  }  that matches the instance zone  {  }  is  {  } "" zones instance zone zone index )  ;  break ;   }  zone index +  +  ;   }  if  ( zone index  >  =  zones . size (  )  )   {  if  ( logger . is warn enabled (  )  )   {  logger . warn ( "" no match for the zone  {  }  in the list of available zones  {  } "" instance zone zones . to array (  )  )  ;   }   }  else  {  for  ( int i = 0 ;  i  <  zone index ;  i +  +  )   {   string zone = zones . remove ( 0 )  ;  zones . add ( zone )  ;   }   }   list <  string >  service urls = new  array list <  string >  (  )  ;  for  (   string zone : zones )   {  for  (   string zone cname : zone dns names map . get ( zone )  )   {   list <  string >  ec2 urls = new  array list <  string >  ( getec2 discovery urls from zone ( zone cname  discovery url type . cname )  )  ;  if  ( ec2 urls . size (  )   >  1 )   {  randomizer . randomize ( ec2 urls )  ;   }  for  (   string ec2 url : ec2 urls )   {   string service url = ""http: /  / ""  +  ec2 url  +  "":"" +  client config . get eureka server port (  )  +  "" / "" +  client config . get eureka serverurl context (  )  +  "" / "" ;  logger . debug ( "" the ec2 url is  {  } "" service url )  ;  service urls . add ( service url )  ;   }   }   }   string primary service url = service urls . remove ( 0 )  ;  randomizer . randomize ( service urls )  ;  service urls . add ( 0 primary service url )  ;  if  ( logger . is debug enabled (  )  )   {  logger . debug ( "" this client will talk to the following service urls in order :  {  }  ""  (  object ) service urls . to array (  )  )  ;   }  return service urls ;   }  ",2751,4,service,2,"[121, 1660, 2098, 2311, 2329, 2350, 2396, 2410, 2467, 2486, 2517, 2638, 2684, 2731]"
1449,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\endpoint\EndpointUtils.java,get service urls fromdns,"public static  list <  string >    (  eureka client config client config  string instance zone boolean prefer same zone  service url randomizer randomizer )  {   string region = get region ( client config )  ;   map <  string  list <  string >  >  zone dns names map = get zone based discovery urls from region ( client config region )  ;   set <  string >  available zones = zone dns names map . key set (  )  ;   list <  string >  zones = new  array list <  string >  ( available zones )  ;  if  ( zones . is empty (  )  )   {  throw new  runtime exception ( "" no available zones configured for the instance zone ""  +  instance zone )  ;   }  int zone index = 0 ;  boolean zone found = false ;  for  (   string zone : zones )   {  logger . debug ( "" checking if the instance zone  {  }  is the same as the zone from dns  {  } "" instance zone zone )  ;  if  ( prefer same zone )   {  if  ( instance zone . equals ignore case ( zone )  )   {  zone found = true ;   }   }  else  {  if  (  ! instance zone . equals ignore case ( zone )  )   {  zone found = true ;   }   }  if  ( zone found )   {  logger . debug ( "" the zone index from the list  {  }  that matches the instance zone  {  }  is  {  } "" zones instance zone zone index )  ;  break ;   }  zone index +  +  ;   }  if  ( zone index  >  =  zones . size (  )  )   {  if  ( logger . is warn enabled (  )  )   {  logger . warn ( "" no match for the zone  {  }  in the list of available zones  {  } "" instance zone zones . to array (  )  )  ;   }   }  else  {  for  ( int i = 0 ;  i  <  zone index ;  i +  +  )   {   string zone = zones . remove ( 0 )  ;  zones . add ( zone )  ;   }   }   list <  string >  service urls = new  array list <  string >  (  )  ;  for  (   string zone : zones )   {  for  (   string zone cname : zone dns names map . get ( zone )  )   {   list <  string >  ec2 urls = new  array list <  string >  ( getec2 discovery urls from zone ( zone cname  discovery url type . cname )  )  ;  if  ( ec2 urls . size (  )   >  1 )   {  randomizer . randomize ( ec2 urls )  ;   }  for  (   string ec2 url : ec2 urls )   {   string service url = ""http: /  / ""  +  ec2 url  +  "":"" +  client config . get eureka server port (  )  +  "" / "" +  client config . get eureka serverurl context (  )  +  "" / "" ;  logger . debug ( "" the ec2 url is  {  } "" service url )  ;  service urls . add ( service url )  ;   }   }   }   string primary service url = service urls . remove ( 0 )  ;  randomizer . randomize ( service urls )  ;  service urls . add ( 0 primary service url )  ;  if  ( logger . is debug enabled (  )  )   {  logger . debug ( "" this client will talk to the following service urls in order :  {  }  ""  (  object ) service urls . to array (  )  )  ;   }  return service urls ;   }  ",2751,4,urls,3,"[294, 1668, 1843, 1898, 1973, 2033, 2078, 2337, 2418, 2475, 2494, 2646, 2692, 2739]"
1450,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\endpoint\EndpointUtils.java,get service urls fromdns,"public static  list <  string >    (  eureka client config client config  string instance zone boolean prefer same zone  service url randomizer randomizer )  {   string region = get region ( client config )  ;   map <  string  list <  string >  >  zone dns names map = get zone based discovery urls from region ( client config region )  ;   set <  string >  available zones = zone dns names map . key set (  )  ;   list <  string >  zones = new  array list <  string >  ( available zones )  ;  if  ( zones . is empty (  )  )   {  throw new  runtime exception ( "" no available zones configured for the instance zone ""  +  instance zone )  ;   }  int zone index = 0 ;  boolean zone found = false ;  for  (   string zone : zones )   {  logger . debug ( "" checking if the instance zone  {  }  is the same as the zone from dns  {  } "" instance zone zone )  ;  if  ( prefer same zone )   {  if  ( instance zone . equals ignore case ( zone )  )   {  zone found = true ;   }   }  else  {  if  (  ! instance zone . equals ignore case ( zone )  )   {  zone found = true ;   }   }  if  ( zone found )   {  logger . debug ( "" the zone index from the list  {  }  that matches the instance zone  {  }  is  {  } "" zones instance zone zone index )  ;  break ;   }  zone index +  +  ;   }  if  ( zone index  >  =  zones . size (  )  )   {  if  ( logger . is warn enabled (  )  )   {  logger . warn ( "" no match for the zone  {  }  in the list of available zones  {  } "" instance zone zones . to array (  )  )  ;   }   }  else  {  for  ( int i = 0 ;  i  <  zone index ;  i +  +  )   {   string zone = zones . remove ( 0 )  ;  zones . add ( zone )  ;   }   }   list <  string >  service urls = new  array list <  string >  (  )  ;  for  (   string zone : zones )   {  for  (   string zone cname : zone dns names map . get ( zone )  )   {   list <  string >  ec2 urls = new  array list <  string >  ( getec2 discovery urls from zone ( zone cname  discovery url type . cname )  )  ;  if  ( ec2 urls . size (  )   >  1 )   {  randomizer . randomize ( ec2 urls )  ;   }  for  (   string ec2 url : ec2 urls )   {   string service url = ""http: /  / ""  +  ec2 url  +  "":"" +  client config . get eureka server port (  )  +  "" / "" +  client config . get eureka serverurl context (  )  +  "" / "" ;  logger . debug ( "" the ec2 url is  {  } "" service url )  ;  service urls . add ( service url )  ;   }   }   }   string primary service url = service urls . remove ( 0 )  ;  randomizer . randomize ( service urls )  ;  service urls . add ( 0 primary service url )  ;  if  ( logger . is debug enabled (  )  )   {  logger . debug ( "" this client will talk to the following service urls in order :  {  }  ""  (  object ) service urls . to array (  )  )  ;   }  return service urls ;   }  ",2751,4,fromdns,4,[]
1451,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\endpoint\EndpointUtils.java,get service urls map from config,"public static  map <  string  list <  string >  >    (  eureka client config client config  string instance zone boolean prefer same zone )  {   map <  string  list <  string >  >  ordered urls = new  linked hash map <  >  (  )  ;   string region = get region ( client config )  ;   string[] avail zones = client config . get availability zones ( client config . get region (  )  )  ;  if  ( avail zones  =  =  null || avail zones . length  =  =  0 )   {  avail zones = new  string[1] ;  avail zones[0] = default   zone ;   }  logger . debug ( "" the availability zone for the given region  {  }  are  {  } "" region avail zones )  ;  int my zone offset = get zone offset ( instance zone prefer same zone avail zones )  ;   string zone = avail zones[my zone offset] ;   list <  string >  service urls = client config . get eureka server service urls ( zone )  ;  if  ( service urls  !  =  null )   {  ordered urls . put ( zone service urls )  ;   }  int current offset = my zone offset  =  =   ( avail zones . length  -  1 )   ?  0 :  ( my zone offset  +  1 )  ;  while  ( current offset  !  =  my zone offset )   {  zone = avail zones[current offset] ;  service urls = client config . get eureka server service urls ( zone )  ;  if  ( service urls  !  =  null )   {  ordered urls . put ( zone service urls )  ;   }  if  ( current offset  =  =   ( avail zones . length  -  1 )  )   {  current offset = 0 ;   }  else  {  current offset +  +  ;   }   }  if  ( ordered urls . size (  )   <  1 )   {  throw new  illegal argument exception ( "" discovery client: invalid service url specified ! "" )  ;   }  return ordered urls ;   }  ",1626,6,get,1,"[249, 322, 363, 654, 817, 1184]"
1452,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\endpoint\EndpointUtils.java,get service urls map from config,"public static  map <  string  list <  string >  >    (  eureka client config client config  string instance zone boolean prefer same zone )  {   map <  string  list <  string >  >  ordered urls = new  linked hash map <  >  (  )  ;   string region = get region ( client config )  ;   string[] avail zones = client config . get availability zones ( client config . get region (  )  )  ;  if  ( avail zones  =  =  null || avail zones . length  =  =  0 )   {  avail zones = new  string[1] ;  avail zones[0] = default   zone ;   }  logger . debug ( "" the availability zone for the given region  {  }  are  {  } "" region avail zones )  ;  int my zone offset = get zone offset ( instance zone prefer same zone avail zones )  ;   string zone = avail zones[my zone offset] ;   list <  string >  service urls = client config . get eureka server service urls ( zone )  ;  if  ( service urls  !  =  null )   {  ordered urls . put ( zone service urls )  ;   }  int current offset = my zone offset  =  =   ( avail zones . length  -  1 )   ?  0 :  ( my zone offset  +  1 )  ;  while  ( current offset  !  =  my zone offset )   {  zone = avail zones[current offset] ;  service urls = client config . get eureka server service urls ( zone )  ;  if  ( service urls  !  =  null )   {  ordered urls . put ( zone service urls )  ;   }  if  ( current offset  =  =   ( avail zones . length  -  1 )  )   {  current offset = 0 ;   }  else  {  current offset +  +  ;   }   }  if  ( ordered urls . size (  )   <  1 )   {  throw new  illegal argument exception ( "" discovery client: invalid service url specified ! "" )  ;   }  return ordered urls ;   }  ",1626,6,service,2,"[786, 835, 867, 925, 1153, 1202, 1234, 1292, 1563]"
1453,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\endpoint\EndpointUtils.java,get service urls map from config,"public static  map <  string  list <  string >  >    (  eureka client config client config  string instance zone boolean prefer same zone )  {   map <  string  list <  string >  >  ordered urls = new  linked hash map <  >  (  )  ;   string region = get region ( client config )  ;   string[] avail zones = client config . get availability zones ( client config . get region (  )  )  ;  if  ( avail zones  =  =  null || avail zones . length  =  =  0 )   {  avail zones = new  string[1] ;  avail zones[0] = default   zone ;   }  logger . debug ( "" the availability zone for the given region  {  }  are  {  } "" region avail zones )  ;  int my zone offset = get zone offset ( instance zone prefer same zone avail zones )  ;   string zone = avail zones[my zone offset] ;   list <  string >  service urls = client config . get eureka server service urls ( zone )  ;  if  ( service urls  !  =  null )   {  ordered urls . put ( zone service urls )  ;   }  int current offset = my zone offset  =  =   ( avail zones . length  -  1 )   ?  0 :  ( my zone offset  +  1 )  ;  while  ( current offset  !  =  my zone offset )   {  zone = avail zones[current offset] ;  service urls = client config . get eureka server service urls ( zone )  ;  if  ( service urls  !  =  null )   {  ordered urls . put ( zone service urls )  ;   }  if  ( current offset  =  =   ( avail zones . length  -  1 )  )   {  current offset = 0 ;   }  else  {  current offset +  +  ;   }   }  if  ( ordered urls . size (  )   <  1 )   {  throw new  illegal argument exception ( "" discovery client: invalid service url specified ! "" )  ;   }  return ordered urls ;   }  ",1626,6,urls,3,"[189, 794, 843, 875, 907, 933, 1161, 1210, 1242, 1274, 1300, 1464, 1614]"
1454,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\endpoint\EndpointUtils.java,get service urls map from config,"public static  map <  string  list <  string >  >    (  eureka client config client config  string instance zone boolean prefer same zone )  {   map <  string  list <  string >  >  ordered urls = new  linked hash map <  >  (  )  ;   string region = get region ( client config )  ;   string[] avail zones = client config . get availability zones ( client config . get region (  )  )  ;  if  ( avail zones  =  =  null || avail zones . length  =  =  0 )   {  avail zones = new  string[1] ;  avail zones[0] = default   zone ;   }  logger . debug ( "" the availability zone for the given region  {  }  are  {  } "" region avail zones )  ;  int my zone offset = get zone offset ( instance zone prefer same zone avail zones )  ;   string zone = avail zones[my zone offset] ;   list <  string >  service urls = client config . get eureka server service urls ( zone )  ;  if  ( service urls  !  =  null )   {  ordered urls . put ( zone service urls )  ;   }  int current offset = my zone offset  =  =   ( avail zones . length  -  1 )   ?  0 :  ( my zone offset  +  1 )  ;  while  ( current offset  !  =  my zone offset )   {  zone = avail zones[current offset] ;  service urls = client config . get eureka server service urls ( zone )  ;  if  ( service urls  !  =  null )   {  ordered urls . put ( zone service urls )  ;   }  if  ( current offset  =  =   ( avail zones . length  -  1 )  )   {  current offset = 0 ;   }  else  {  current offset +  +  ;   }   }  if  ( ordered urls . size (  )   <  1 )   {  throw new  illegal argument exception ( "" discovery client: invalid service url specified ! "" )  ;   }  return ordered urls ;   }  ",1626,6,map,4,"[15, 145, 213]"
1455,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\endpoint\EndpointUtils.java,get service urls map from config,"public static  map <  string  list <  string >  >    (  eureka client config client config  string instance zone boolean prefer same zone )  {   map <  string  list <  string >  >  ordered urls = new  linked hash map <  >  (  )  ;   string region = get region ( client config )  ;   string[] avail zones = client config . get availability zones ( client config . get region (  )  )  ;  if  ( avail zones  =  =  null || avail zones . length  =  =  0 )   {  avail zones = new  string[1] ;  avail zones[0] = default   zone ;   }  logger . debug ( "" the availability zone for the given region  {  }  are  {  } "" region avail zones )  ;  int my zone offset = get zone offset ( instance zone prefer same zone avail zones )  ;   string zone = avail zones[my zone offset] ;   list <  string >  service urls = client config . get eureka server service urls ( zone )  ;  if  ( service urls  !  =  null )   {  ordered urls . put ( zone service urls )  ;   }  int current offset = my zone offset  =  =   ( avail zones . length  -  1 )   ?  0 :  ( my zone offset  +  1 )  ;  while  ( current offset  !  =  my zone offset )   {  zone = avail zones[current offset] ;  service urls = client config . get eureka server service urls ( zone )  ;  if  ( service urls  !  =  null )   {  ordered urls . put ( zone service urls )  ;   }  if  ( current offset  =  =   ( avail zones . length  -  1 )  )   {  current offset = 0 ;   }  else  {  current offset +  +  ;   }   }  if  ( ordered urls . size (  )   <  1 )   {  throw new  illegal argument exception ( "" discovery client: invalid service url specified ! "" )  ;   }  return ordered urls ;   }  ",1626,6,from,5,[]
1456,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\endpoint\EndpointUtils.java,get service urls map from config,"public static  map <  string  list <  string >  >    (  eureka client config client config  string instance zone boolean prefer same zone )  {   map <  string  list <  string >  >  ordered urls = new  linked hash map <  >  (  )  ;   string region = get region ( client config )  ;   string[] avail zones = client config . get availability zones ( client config . get region (  )  )  ;  if  ( avail zones  =  =  null || avail zones . length  =  =  0 )   {  avail zones = new  string[1] ;  avail zones[0] = default   zone ;   }  logger . debug ( "" the availability zone for the given region  {  }  are  {  } "" region avail zones )  ;  int my zone offset = get zone offset ( instance zone prefer same zone avail zones )  ;   string zone = avail zones[my zone offset] ;   list <  string >  service urls = client config . get eureka server service urls ( zone )  ;  if  ( service urls  !  =  null )   {  ordered urls . put ( zone service urls )  ;   }  int current offset = my zone offset  =  =   ( avail zones . length  -  1 )   ?  0 :  ( my zone offset  +  1 )  ;  while  ( current offset  !  =  my zone offset )   {  zone = avail zones[current offset] ;  service urls = client config . get eureka server service urls ( zone )  ;  if  ( service urls  !  =  null )   {  ordered urls . put ( zone service urls )  ;   }  if  ( current offset  =  =   ( avail zones . length  -  1 )  )   {  current offset = 0 ;   }  else  {  current offset +  +  ;   }   }  if  ( ordered urls . size (  )   <  1 )   {  throw new  illegal argument exception ( "" discovery client: invalid service url specified ! "" )  ;   }  return ordered urls ;   }  ",1626,6,config,6,"[70, 84, 269, 313, 354, 808, 1175]"
1457,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\endpoint\EndpointUtils.java,get zone based discovery urls from region,"public static  map <  string  list <  string >  >    (  eureka client config client config  string region )  {   string discovery dns name = null ;  try  {  discovery dns name = ""txt . ""  +  region  +  "" . "" +  client config . get eureka serverdns name (  )  ;  logger . debug ( "" the region url to be looked up is  {  }  :"" discovery dns name )  ;   set <  string >  zone cnames for region = new  tree set <  string >  (  dns resolver . getc names from txt record ( discovery dns name )  )  ;   map <  string  list <  string >  >  zone cname map for region = new  tree map <  string  list <  string >  >  (  )  ;  for  (   string zone cname : zone cnames for region )   {   string zone = null ;  if  ( isec2 url ( zone cname )  )   {  throw new  runtime exception ( "" cannot find the right dns entry for ""  +  discovery dns name  +  "" .  "" +  "" expected mapping of the format  < aws   zone >  .  < domain   name > "" )  ;   }  else  {   string[] cname tokens = zone cname . split ( ""\\ . "" )  ;  zone = cname tokens[0] ;  logger . debug ( "" the zone name mapped to region  {  }  is  {  } "" region zone )  ;   }   list <  string >  zone cnames set = zone cname map for region . get ( zone )  ;  if  ( zone cnames set  =  =  null )   {  zone cnames set = new  array list <  string >  (  )  ;  zone cname map for region . put ( zone zone cnames set )  ;   }  zone cnames set . add ( zone cname )  ;   }  return zone cname map for region ;   }  catch  (   throwable e )   {  throw new  runtime exception ( "" cannot get cnames bound to the region:""  +  discovery dns name e )  ;   }   }  ",1583,7,get,1,"[227, 438, 1177, 1511]"
1458,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\endpoint\EndpointUtils.java,get zone based discovery urls from region,"public static  map <  string  list <  string >  >    (  eureka client config client config  string region )  {   string discovery dns name = null ;  try  {  discovery dns name = ""txt . ""  +  region  +  "" . "" +  client config . get eureka serverdns name (  )  ;  logger . debug ( "" the region url to be looked up is  {  }  :"" discovery dns name )  ;   set <  string >  zone cnames for region = new  tree set <  string >  (  dns resolver . getc names from txt record ( discovery dns name )  )  ;   map <  string  list <  string >  >  zone cname map for region = new  tree map <  string  list <  string >  >  (  )  ;  for  (   string zone cname : zone cnames for region )   {   string zone = null ;  if  ( isec2 url ( zone cname )  )   {  throw new  runtime exception ( "" cannot find the right dns entry for ""  +  discovery dns name  +  "" .  "" +  "" expected mapping of the format  < aws   zone >  .  < domain   name > "" )  ;   }  else  {   string[] cname tokens = zone cname . split ( ""\\ . "" )  ;  zone = cname tokens[0] ;  logger . debug ( "" the zone name mapped to region  {  }  is  {  } "" region zone )  ;   }   list <  string >  zone cnames set = zone cname map for region . get ( zone )  ;  if  ( zone cnames set  =  =  null )   {  zone cnames set = new  array list <  string >  (  )  ;  zone cname map for region . put ( zone zone cnames set )  ;   }  zone cnames set . add ( zone cname )  ;   }  return zone cname map for region ;   }  catch  (   throwable e )   {  throw new  runtime exception ( "" cannot get cnames bound to the region:""  +  discovery dns name e )  ;   }   }  ",1583,7,zone,2,"[368, 532, 631, 644, 682, 715, 886, 961, 996, 1045, 1097, 1131, 1149, 1183, 1200, 1235, 1291, 1325, 1330, 1356, 1380, 1408]"
1459,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\endpoint\EndpointUtils.java,get zone based discovery urls from region,"public static  map <  string  list <  string >  >    (  eureka client config client config  string region )  {   string discovery dns name = null ;  try  {  discovery dns name = ""txt . ""  +  region  +  "" . "" +  client config . get eureka serverdns name (  )  ;  logger . debug ( "" the region url to be looked up is  {  }  :"" discovery dns name )  ;   set <  string >  zone cnames for region = new  tree set <  string >  (  dns resolver . getc names from txt record ( discovery dns name )  )  ;   map <  string  list <  string >  >  zone cname map for region = new  tree map <  string  list <  string >  >  (  )  ;  for  (   string zone cname : zone cnames for region )   {   string zone = null ;  if  ( isec2 url ( zone cname )  )   {  throw new  runtime exception ( "" cannot find the right dns entry for ""  +  discovery dns name  +  "" .  "" +  "" expected mapping of the format  < aws   zone >  .  < domain   name > "" )  ;   }  else  {   string[] cname tokens = zone cname . split ( ""\\ . "" )  ;  zone = cname tokens[0] ;  logger . debug ( "" the zone name mapped to region  {  }  is  {  } "" region zone )  ;   }   list <  string >  zone cnames set = zone cname map for region . get ( zone )  ;  if  ( zone cnames set  =  =  null )   {  zone cnames set = new  array list <  string >  (  )  ;  zone cname map for region . put ( zone zone cnames set )  ;   }  zone cnames set . add ( zone cname )  ;   }  return zone cname map for region ;   }  catch  (   throwable e )   {  throw new  runtime exception ( "" cannot get cnames bound to the region:""  +  discovery dns name e )  ;   }   }  ",1583,7,based,3,[]
1460,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\endpoint\EndpointUtils.java,get zone based discovery urls from region,"public static  map <  string  list <  string >  >    (  eureka client config client config  string region )  {   string discovery dns name = null ;  try  {  discovery dns name = ""txt . ""  +  region  +  "" . "" +  client config . get eureka serverdns name (  )  ;  logger . debug ( "" the region url to be looked up is  {  }  :"" discovery dns name )  ;   set <  string >  zone cnames for region = new  tree set <  string >  (  dns resolver . getc names from txt record ( discovery dns name )  )  ;   map <  string  list <  string >  >  zone cname map for region = new  tree map <  string  list <  string >  >  (  )  ;  for  (   string zone cname : zone cnames for region )   {   string zone = null ;  if  ( isec2 url ( zone cname )  )   {  throw new  runtime exception ( "" cannot find the right dns entry for ""  +  discovery dns name  +  "" .  "" +  "" expected mapping of the format  < aws   zone >  .  < domain   name > "" )  ;   }  else  {   string[] cname tokens = zone cname . split ( ""\\ . "" )  ;  zone = cname tokens[0] ;  logger . debug ( "" the zone name mapped to region  {  }  is  {  } "" region zone )  ;   }   list <  string >  zone cnames set = zone cname map for region . get ( zone )  ;  if  ( zone cnames set  =  =  null )   {  zone cnames set = new  array list <  string >  (  )  ;  zone cname map for region . put ( zone zone cnames set )  ;   }  zone cnames set . add ( zone cname )  ;   }  return zone cname map for region ;   }  catch  (   throwable e )   {  throw new  runtime exception ( "" cannot get cnames bound to the region:""  +  discovery dns name e )  ;   }   }  ",1583,7,discovery,4,"[120, 157, 325, 467, 811, 1548]"
1461,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\endpoint\EndpointUtils.java,get zone based discovery urls from region,"public static  map <  string  list <  string >  >    (  eureka client config client config  string region )  {   string discovery dns name = null ;  try  {  discovery dns name = ""txt . ""  +  region  +  "" . "" +  client config . get eureka serverdns name (  )  ;  logger . debug ( "" the region url to be looked up is  {  }  :"" discovery dns name )  ;   set <  string >  zone cnames for region = new  tree set <  string >  (  dns resolver . getc names from txt record ( discovery dns name )  )  ;   map <  string  list <  string >  >  zone cname map for region = new  tree map <  string  list <  string >  >  (  )  ;  for  (   string zone cname : zone cnames for region )   {   string zone = null ;  if  ( isec2 url ( zone cname )  )   {  throw new  runtime exception ( "" cannot find the right dns entry for ""  +  discovery dns name  +  "" .  "" +  "" expected mapping of the format  < aws   zone >  .  < domain   name > "" )  ;   }  else  {   string[] cname tokens = zone cname . split ( ""\\ . "" )  ;  zone = cname tokens[0] ;  logger . debug ( "" the zone name mapped to region  {  }  is  {  } "" region zone )  ;   }   list <  string >  zone cnames set = zone cname map for region . get ( zone )  ;  if  ( zone cnames set  =  =  null )   {  zone cnames set = new  array list <  string >  (  )  ;  zone cname map for region . put ( zone zone cnames set )  ;   }  zone cnames set . add ( zone cname )  ;   }  return zone cname map for region ;   }  catch  (   throwable e )   {  throw new  runtime exception ( "" cannot get cnames bound to the region:""  +  discovery dns name e )  ;   }   }  ",1583,7,urls,5,[]
1462,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\endpoint\EndpointUtils.java,get zone based discovery urls from region,"public static  map <  string  list <  string >  >    (  eureka client config client config  string region )  {   string discovery dns name = null ;  try  {  discovery dns name = ""txt . ""  +  region  +  "" . "" +  client config . get eureka serverdns name (  )  ;  logger . debug ( "" the region url to be looked up is  {  }  :"" discovery dns name )  ;   set <  string >  zone cnames for region = new  tree set <  string >  (  dns resolver . getc names from txt record ( discovery dns name )  )  ;   map <  string  list <  string >  >  zone cname map for region = new  tree map <  string  list <  string >  >  (  )  ;  for  (   string zone cname : zone cnames for region )   {   string zone = null ;  if  ( isec2 url ( zone cname )  )   {  throw new  runtime exception ( "" cannot find the right dns entry for ""  +  discovery dns name  +  "" .  "" +  "" expected mapping of the format  < aws   zone >  .  < domain   name > "" )  ;   }  else  {   string[] cname tokens = zone cname . split ( ""\\ . "" )  ;  zone = cname tokens[0] ;  logger . debug ( "" the zone name mapped to region  {  }  is  {  } "" region zone )  ;   }   list <  string >  zone cnames set = zone cname map for region . get ( zone )  ;  if  ( zone cnames set  =  =  null )   {  zone cnames set = new  array list <  string >  (  )  ;  zone cname map for region . put ( zone zone cnames set )  ;   }  zone cnames set . add ( zone cname )  ;   }  return zone cname map for region ;   }  catch  (   throwable e )   {  throw new  runtime exception ( "" cannot get cnames bound to the region:""  +  discovery dns name e )  ;   }   }  ",1583,7,from,6,[449]
1463,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\endpoint\EndpointUtils.java,get zone based discovery urls from region,"public static  map <  string  list <  string >  >    (  eureka client config client config  string region )  {   string discovery dns name = null ;  try  {  discovery dns name = ""txt . ""  +  region  +  "" . "" +  client config . get eureka serverdns name (  )  ;  logger . debug ( "" the region url to be looked up is  {  }  :"" discovery dns name )  ;   set <  string >  zone cnames for region = new  tree set <  string >  (  dns resolver . getc names from txt record ( discovery dns name )  )  ;   map <  string  list <  string >  >  zone cname map for region = new  tree map <  string  list <  string >  >  (  )  ;  for  (   string zone cname : zone cnames for region )   {   string zone = null ;  if  ( isec2 url ( zone cname )  )   {  throw new  runtime exception ( "" cannot find the right dns entry for ""  +  discovery dns name  +  "" .  "" +  "" expected mapping of the format  < aws   zone >  .  < domain   name > "" )  ;   }  else  {   string[] cname tokens = zone cname . split ( ""\\ . "" )  ;  zone = cname tokens[0] ;  logger . debug ( "" the zone name mapped to region  {  }  is  {  } "" region zone )  ;   }   list <  string >  zone cnames set = zone cname map for region . get ( zone )  ;  if  ( zone cnames set  =  =  null )   {  zone cnames set = new  array list <  string >  (  )  ;  zone cname map for region . put ( zone zone cnames set )  ;   }  zone cnames set . add ( zone cname )  ;   }  return zone cname map for region ;   }  catch  (   throwable e )   {  throw new  runtime exception ( "" cannot get cnames bound to the region:""  +  discovery dns name e )  ;   }   }  ",1583,7,region,7,"[99, 191, 285, 384, 551, 660, 1065, 1090, 1168, 1310, 1427, 1535]"
1464,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\endpoint\EndpointUtils.java,get zone offset,"private static int   (  string my zone boolean prefer same zone  string[] avail zones )  {  for  ( int i = 0 ;  i  <  avail zones . length ;  i +  +  )   {  if  ( my zone  !  =  null &&  ( avail zones[i] . equals ignore case ( my zone . trim (  )  )   =  =  prefer same zone )  )   {  return i ;   }   }  logger . warn ( ""discovery:  could not pick a zone based on preferred zone settings .   my zone  -   {  }  ""  +  "" prefer same zone  -   {  }  .   defaulting to  {  } "" my zone prefer same zone avail zones[0] )  ;  return 0 ;   }  ",536,3,get,1,[]
1465,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\endpoint\EndpointUtils.java,get zone offset,"private static int   (  string my zone boolean prefer same zone  string[] avail zones )  {  for  ( int i = 0 ;  i  <  avail zones . length ;  i +  +  )   {  if  ( my zone  !  =  null &&  ( avail zones[i] . equals ignore case ( my zone . trim (  )  )   =  =  prefer same zone )  )   {  return i ;   }   }  logger . warn ( ""discovery:  could not pick a zone based on preferred zone settings .   my zone  -   {  }  ""  +  "" prefer same zone  -   {  }  .   defaulting to  {  } "" my zone prefer same zone avail zones[0] )  ;  return 0 ;   }  ",536,3,zone,2,"[34, 59, 80, 124, 166, 195, 230, 270, 351, 375, 396, 432, 477, 494, 505]"
1466,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\endpoint\EndpointUtils.java,get zone offset,"private static int   (  string my zone boolean prefer same zone  string[] avail zones )  {  for  ( int i = 0 ;  i  <  avail zones . length ;  i +  +  )   {  if  ( my zone  !  =  null &&  ( avail zones[i] . equals ignore case ( my zone . trim (  )  )   =  =  prefer same zone )  )   {  return i ;   }   }  logger . warn ( ""discovery:  could not pick a zone based on preferred zone settings .   my zone  -   {  }  ""  +  "" prefer same zone  -   {  }  .   defaulting to  {  } "" my zone prefer same zone avail zones[0] )  ;  return 0 ;   }  ",536,3,offset,3,[]
1467,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\endpoint\EndpointUtils.java,isec url,"private static boolean   (  string zone cname )  {  return zone cname . starts with ( ""ec2"" )  ;   }  ",102,2,isec,1,[]
1468,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\endpoint\EndpointUtils.java,isec url,"private static boolean   (  string zone cname )  {  return zone cname . starts with ( ""ec2"" )  ;   }  ",102,2,url,2,[]
1469,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\endpoint\EndpointUtils.java,randomize,@ override public void   (  list <  string >  url list )  {  int list size = 0 ;  if  ( url list  !  =  null )   {  list size = url list . size (  )  ;   }  if  (  ( instance info  =  =  null )  ||  ( list size  =  =  0 )  )   {  return ;   }  int instanc,255,1,randomize,1,[]
1470,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\EurekaIdentityHeaderFilter.java, eureka identity header filter,public   (  abstract eureka identity auth info )  {  this . auth info = auth info ;   }  ,89,4,eureka,1,[21]
1471,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\EurekaIdentityHeaderFilter.java, eureka identity header filter,public   (  abstract eureka identity auth info )  {  this . auth info = auth info ;   }  ,89,4,identity,2,[28]
1472,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\EurekaIdentityHeaderFilter.java, eureka identity header filter,public   (  abstract eureka identity auth info )  {  this . auth info = auth info ;   }  ,89,4,header,3,[]
1473,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\EurekaIdentityHeaderFilter.java, eureka identity header filter,public   (  abstract eureka identity auth info )  {  this . auth info = auth info ;   }  ,89,4,filter,4,[]
1474,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\EurekaIdentityHeaderFilter.java,handle,@ override public  client response   (  client request cr )  throws  client handler exception  {  if  ( auth info  !  =  null )   {  cr . get headers (  )  . put single (  abstract eureka identity . auth   name   header   key auth info . get name (  )  ) ,255,1,handle,1,[76]
1475,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\EurekaUpStatusResolver.java, eureka up status resolver,@ inject public   (  eureka client client  event bus event bus )  {  this . event bus = event bus ;  this . client = client ;   }  ,131,4,eureka,1,[21]
1476,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\EurekaUpStatusResolver.java, eureka up status resolver,@ inject public   (  eureka client client  event bus event bus )  {  this . event bus = event bus ;  this . client = client ;   }  ,131,4,up,2,[]
1477,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\EurekaUpStatusResolver.java, eureka up status resolver,@ inject public   (  eureka client client  event bus event bus )  {  this . event bus = event bus ;  this . client = client ;   }  ,131,4,status,3,[]
1478,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\EurekaUpStatusResolver.java, eureka up status resolver,@ inject public   (  eureka client client  event bus event bus )  {  this . event bus = event bus ;  this . client = client ;   }  ,131,4,resolver,4,[]
1479,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\EurekaUpStatusResolver.java,get change count,public long   (  )  {  return counter . get (  )  ;   }  ,57,3,get,1,[40]
1480,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\EurekaUpStatusResolver.java,get change count,public long   (  )  {  return counter . get (  )  ;   }  ,57,3,change,2,[]
1481,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\EurekaUpStatusResolver.java,get change count,public long   (  )  {  return counter . get (  )  ;   }  ,57,3,count,3,[30]
1482,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\EurekaUpStatusResolver.java,get status,public  instance info .  instance status   (  )  {  return current status ;   }  ,81,2,get,1,[]
1483,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\EurekaUpStatusResolver.java,get status,public  instance info .  instance status   (  )  {  return current status ;   }  ,81,2,status,2,"[34, 67]"
1484,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\EurekaUpStatusResolver.java,init,"@ post construct public void   (  )  {  try  {  current status = client . get instance remote status (  )  ;  log . info ( "" initial status set to  {  } "" current status )  ;  event bus . register subscriber ( this )  ;   }  catch  (   invalid subscriber ",255,1,init,1,[125]
1485,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\EurekaUpStatusResolver.java,on status change,"@ subscribe public void   (  status change event event )  {  log . info ( "" eureka status changed from  {  }  to  {  } "" event . get previous status (  )  event . get status (  )  )  ;  current status = event . get status (  )  ;  counter . increment and ",255,3,on,1,[]
1486,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\EurekaUpStatusResolver.java,on status change,"@ subscribe public void   (  status change event event )  {  log . info ( "" eureka status changed from  {  }  to  {  } "" event . get previous status (  )  event . get status (  )  )  ;  current status = event . get status (  )  ;  counter . increment and ",255,3,status,2,"[29, 83, 142, 167, 194, 215]"
1487,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\EurekaUpStatusResolver.java,on status change,"@ subscribe public void   (  status change event event )  {  log . info ( "" eureka status changed from  {  }  to  {  } "" event . get previous status (  )  event . get status (  )  )  ;  current status = event . get status (  )  ;  counter . increment and ",255,3,change,3,"[36, 90]"
1488,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\EurekaUpStatusResolver.java,shutdown,@ pre destroy public void   (  )  {  event bus . unregister subscriber ( this )  ;   }  ,88,1,shutdown,1,[]
1489,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\guice\EurekaModule.java,configure,@ override protected void   (  )  {  bind (  application info manager . class )  . as eager singleton (  )  ;  bind (  eureka instance config . class )  . to provider (  cloud instance config provider . class )  . in (  scopes . singleton )  ;  bind (  eu,255,1,configure,1,[]
1490,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\guice\EurekaModule.java,equals,@ override public boolean   (  object obj )  {  return obj  !  =  null && get class (  )  . equals ( obj . get class (  )  )  ;   }  ,133,1,equals,1,[92]
1491,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\guice\EurekaModule.java,hash code,@ override public int   (  )  {  return get class (  )  . hash code (  )  ;   }  ,81,2,hash,1,[58]
1492,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\guice\EurekaModule.java,hash code,@ override public int   (  )  {  return get class (  )  . hash code (  )  ;   }  ,81,2,code,2,[63]
1493,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\InstanceInfoReplicator.java, instance info replicator,"  (  discovery client discovery client  instance info instance info int replication interval seconds int burst size )  {  this . discovery client = discovery client ;  this . instance info = instance info ;  this . scheduler =  executors . new scheduled thread pool ( 1 new  thread factory builder (  )  . set name format ( "" discovery client -  instance info replicator - %d"" )  . set daemon ( true )  . build (  )  )  ;  this . scheduled periodic ref = new  atomic reference <  future >  (  )  ;  this . started = new  atomic boolean ( false )  ;  this . rate limiter = new  rate limiter (  time unit . minutes )  ;  this . replication interval seconds = replication interval seconds ;  this . burst size = burst size ;  this . allowed rate per minute = 60 * this . burst size  /  this . replication interval seconds ;  logger . info ( "" instance info replicator on demand update allowed rate per min is  {  } "" allowed rate per minute )  ;   }  ",948,3,instance,1,"[40, 54, 175, 191, 346, 840]"
1494,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\InstanceInfoReplicator.java, instance info replicator,"  (  discovery client discovery client  instance info instance info int replication interval seconds int burst size )  {  this . discovery client = discovery client ;  this . instance info = instance info ;  this . scheduler =  executors . new scheduled thread pool ( 1 new  thread factory builder (  )  . set name format ( "" discovery client -  instance info replicator - %d"" )  . set daemon ( true )  . build (  )  )  ;  this . scheduled periodic ref = new  atomic reference <  future >  (  )  ;  this . started = new  atomic boolean ( false )  ;  this . rate limiter = new  rate limiter (  time unit . minutes )  ;  this . replication interval seconds = replication interval seconds ;  this . burst size = burst size ;  this . allowed rate per minute = 60 * this . burst size  /  this . replication interval seconds ;  logger . info ( "" instance info replicator on demand update allowed rate per min is  {  } "" allowed rate per minute )  ;   }  ",948,3,info,2,"[49, 63, 184, 200, 355, 831, 849]"
1495,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\InstanceInfoReplicator.java, instance info replicator,"  (  discovery client discovery client  instance info instance info int replication interval seconds int burst size )  {  this . discovery client = discovery client ;  this . instance info = instance info ;  this . scheduler =  executors . new scheduled thread pool ( 1 new  thread factory builder (  )  . set name format ( "" discovery client -  instance info replicator - %d"" )  . set daemon ( true )  . build (  )  )  ;  this . scheduled periodic ref = new  atomic reference <  future >  (  )  ;  this . started = new  atomic boolean ( false )  ;  this . rate limiter = new  rate limiter (  time unit . minutes )  ;  this . replication interval seconds = replication interval seconds ;  this . burst size = burst size ;  this . allowed rate per minute = 60 * this . burst size  /  this . replication interval seconds ;  logger . info ( "" instance info replicator on demand update allowed rate per min is  {  } "" allowed rate per minute )  ;   }  ",948,3,replicator,3,"[360, 854]"
1496,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\InstanceInfoReplicator.java,on demand update,"public boolean   (  )  {  if  ( rate limiter . acquire ( burst size allowed rate per minute )  )   {  if  (  ! scheduler . is shutdown (  )  )   {  scheduler . submit ( new  runnable (  )  {  @ override public void run (  )  {  logger . debug ( "" executing on - demand update of local  instance info"" )  ;   future latest periodic = scheduled periodic ref . get (  )  ;  if  ( latest periodic  !  =  null &&  ! latest periodic . is done (  )  )   {  logger . debug ( "" canceling the latest scheduled update  it will be rescheduled at the end of on demand update"" )  ;  latest periodic . cancel ( false )  ;   }   instance info replicator . this . run (  )  ;   }   }   )  ;  return true ;   }  else  {  logger . warn ( "" ignoring on demand update due to stopped scheduler"" )  ;  return false ;   }   }  else  {  logger . warn ( "" ignoring on demand update due to rate limiter"" )  ;  return false ;   }   }  ",907,3,on,1,"[257, 433, 545, 730, 839]"
1497,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\InstanceInfoReplicator.java,on demand update,"public boolean   (  )  {  if  ( rate limiter . acquire ( burst size allowed rate per minute )  )   {  if  (  ! scheduler . is shutdown (  )  )   {  scheduler . submit ( new  runnable (  )  {  @ override public void run (  )  {  logger . debug ( "" executing on - demand update of local  instance info"" )  ;   future latest periodic = scheduled periodic ref . get (  )  ;  if  ( latest periodic  !  =  null &&  ! latest periodic . is done (  )  )   {  logger . debug ( "" canceling the latest scheduled update  it will be rescheduled at the end of on demand update"" )  ;  latest periodic . cancel ( false )  ;   }   instance info replicator . this . run (  )  ;   }   }   )  ;  return true ;   }  else  {  logger . warn ( "" ignoring on demand update due to stopped scheduler"" )  ;  return false ;   }   }  else  {  logger . warn ( "" ignoring on demand update due to rate limiter"" )  ;  return false ;   }   }  ",907,3,demand,2,"[262, 548, 733, 842]"
1498,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\InstanceInfoReplicator.java,on demand update,"public boolean   (  )  {  if  ( rate limiter . acquire ( burst size allowed rate per minute )  )   {  if  (  ! scheduler . is shutdown (  )  )   {  scheduler . submit ( new  runnable (  )  {  @ override public void run (  )  {  logger . debug ( "" executing on - demand update of local  instance info"" )  ;   future latest periodic = scheduled periodic ref . get (  )  ;  if  ( latest periodic  !  =  null &&  ! latest periodic . is done (  )  )   {  logger . debug ( "" canceling the latest scheduled update  it will be rescheduled at the end of on demand update"" )  ;  latest periodic . cancel ( false )  ;   }   instance info replicator . this . run (  )  ;   }   }   )  ;  return true ;   }  else  {  logger . warn ( "" ignoring on demand update due to stopped scheduler"" )  ;  return false ;   }   }  else  {  logger . warn ( "" ignoring on demand update due to rate limiter"" )  ;  return false ;   }   }  ",907,3,update,3,"[269, 500, 555, 740, 849]"
1499,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\InstanceInfoReplicator.java,run,"public void   (  )  {  try  {  discovery client . refresh instance info (  )  ;   long dirty timestamp = instance info . is dirty with time (  )  ;  if  ( dirty timestamp  !  =  null )   {  discovery client . register (  )  ;  instance info . unset is dirty ( dirty timestamp )  ;   }   }  catch  (   throwable t )   {  logger . warn ( "" there was a problem with the instance info replicator"" t )  ;   }  finally  {   future next = scheduler . schedule ( this replication interval seconds  time unit . seconds )  ;  scheduled periodic ref . set ( next )  ;   }   }  ",566,1,run,1,[]
1500,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\InstanceInfoReplicator.java,shutdown and await termination,"private void   (  executor service pool )  {  pool . shutdown (  )  ;  try  {  if  (  ! pool . await termination ( 3  time unit . seconds )  )   {  pool . shutdown now (  )  ;   }   }  catch  (   interrupted exception e )   {  logger . warn ( "" instance info replicator stop interrupted"" )  ;   }   }  ",302,4,shutdown,1,"[53, 155]"
1501,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\InstanceInfoReplicator.java,shutdown and await termination,"private void   (  executor service pool )  {  pool . shutdown (  )  ;  try  {  if  (  ! pool . await termination ( 3  time unit . seconds )  )   {  pool . shutdown now (  )  ;   }   }  catch  (   interrupted exception e )   {  logger . warn ( "" instance info replicator stop interrupted"" )  ;   }   }  ",302,4,and,2,[]
1502,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\InstanceInfoReplicator.java,shutdown and await termination,"private void   (  executor service pool )  {  pool . shutdown (  )  ;  try  {  if  (  ! pool . await termination ( 3  time unit . seconds )  )   {  pool . shutdown now (  )  ;   }   }  catch  (   interrupted exception e )   {  logger . warn ( "" instance info replicator stop interrupted"" )  ;   }   }  ",302,4,await,3,[95]
1503,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\InstanceInfoReplicator.java,shutdown and await termination,"private void   (  executor service pool )  {  pool . shutdown (  )  ;  try  {  if  (  ! pool . await termination ( 3  time unit . seconds )  )   {  pool . shutdown now (  )  ;   }   }  catch  (   interrupted exception e )   {  logger . warn ( "" instance info replicator stop interrupted"" )  ;   }   }  ",302,4,termination,4,[101]
1504,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\InstanceInfoReplicator.java,start,public void   ( int initial delay ms )  {  if  ( started . compare and set ( false true )  )   {  instance info . set is dirty (  )  ;   future next = scheduler . schedule ( this initial delay ms  time unit . seconds )  ;  scheduled periodic ref . set ( next )  ;   }   }  ,273,1,start,1,[49]
1505,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\InstanceInfoReplicator.java,stop,public void   (  )  {  shutdown and await termination ( scheduler )  ;  started . set ( false )  ;   }  ,104,1,stop,1,[]
1506,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\internal\util\AmazonInfoUtils.java,read ec metadata url,public static  string   (  meta data key meta data key url url int connection timeout ms int read timeout ms )  throws io exception  {   httpurl connection uc =  (  httpurl connection ) url . open connection (  )  ;  uc . set connect timeout ( connection timeout ms )  ;  uc . set read timeout ( read timeout ms )  ;  if  ( uc . get response code (  )   !  =   httpurl connection . http   ok )   {   buffered reader br = new  buffered reader ( new  input stream reader ( uc . get error stream (  )  )  )  ;  try  {  while  ( br . read line (  )   !  =  null )   {   }   }  finally  {  br . close (  )  ;   }   }  else  {  return meta data key . read ( uc . get input stream (  )  )  ;   }  return null ;   }  ,709,4,read,1,"[93, 281, 296, 409, 435, 462, 530, 645]"
1507,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\internal\util\AmazonInfoUtils.java,read ec metadata url,public static  string   (  meta data key meta data key url url int connection timeout ms int read timeout ms )  throws io exception  {   httpurl connection uc =  (  httpurl connection ) url . open connection (  )  ;  uc . set connect timeout ( connection timeout ms )  ;  uc . set read timeout ( read timeout ms )  ;  if  ( uc . get response code (  )   !  =   httpurl connection . http   ok )   {   buffered reader br = new  buffered reader ( new  input stream reader ( uc . get error stream (  )  )  )  ;  try  {  while  ( br . read line (  )   !  =  null )   {   }   }  finally  {  br . close (  )  ;   }   }  else  {  return meta data key . read ( uc . get input stream (  )  )  ;   }  return null ;   }  ,709,4,ec,2,"[71, 149, 177, 201, 230, 248, 373]"
1508,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\internal\util\AmazonInfoUtils.java,read ec metadata url,public static  string   (  meta data key meta data key url url int connection timeout ms int read timeout ms )  throws io exception  {   httpurl connection uc =  (  httpurl connection ) url . open connection (  )  ;  uc . set connect timeout ( connection timeout ms )  ;  uc . set read timeout ( read timeout ms )  ;  if  ( uc . get response code (  )   !  =   httpurl connection . http   ok )   {   buffered reader br = new  buffered reader ( new  input stream reader ( uc . get error stream (  )  )  )  ;  try  {  while  ( br . read line (  )   !  =  null )   {   }   }  finally  {  br . close (  )  ;   }   }  else  {  return meta data key . read ( uc . get input stream (  )  )  ;   }  return null ;   }  ,709,4,metadata,3,[]
1509,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\internal\util\AmazonInfoUtils.java,read ec metadata url,public static  string   (  meta data key meta data key url url int connection timeout ms int read timeout ms )  throws io exception  {   httpurl connection uc =  (  httpurl connection ) url . open connection (  )  ;  uc . set connect timeout ( connection timeout ms )  ;  uc . set read timeout ( read timeout ms )  ;  if  ( uc . get response code (  )   !  =   httpurl connection . http   ok )   {   buffered reader br = new  buffered reader ( new  input stream reader ( uc . get error stream (  )  )  )  ;  try  {  while  ( br . read line (  )   !  =  null )   {   }   }  finally  {  br . close (  )  ;   }   }  else  {  return meta data key . read ( uc . get input stream (  )  )  ;   }  return null ;   }  ,709,4,url,4,"[55, 59, 141, 169, 186, 365]"
1510,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\InstanceRegionChecker.java, instance region checker,  (  az to region mapper az to region mapper  string local region )  {  this . az to region mapper = az to region mapper ;  this . local region = local region ;   }  ,166,3,instance,1,[]
1511,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\InstanceRegionChecker.java, instance region checker,  (  az to region mapper az to region mapper  string local region )  {  this . az to region mapper = az to region mapper ;  this . local region = local region ;   }  ,166,3,region,2,"[11, 31, 59, 85, 107, 137, 152]"
1512,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\InstanceRegionChecker.java, instance region checker,  (  az to region mapper az to region mapper  string local region )  {  this . az to region mapper = az to region mapper ;  this . local region = local region ;   }  ,166,3,checker,3,[]
1513,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\InstanceRegionChecker.java,get az to region mapper,public  az to region mapper   (  )  {  return az to region mapper ;   }  ,73,5,get,1,[]
1514,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\InstanceRegionChecker.java,get az to region mapper,public  az to region mapper   (  )  {  return az to region mapper ;   }  ,73,5,az,2,"[8, 46]"
1515,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\InstanceRegionChecker.java,get az to region mapper,public  az to region mapper   (  )  {  return az to region mapper ;   }  ,73,5,to,3,"[11, 49]"
1516,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\InstanceRegionChecker.java,get az to region mapper,public  az to region mapper   (  )  {  return az to region mapper ;   }  ,73,5,region,4,"[14, 52]"
1517,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\InstanceRegionChecker.java,get az to region mapper,public  az to region mapper   (  )  {  return az to region mapper ;   }  ,73,5,mapper,5,"[21, 59]"
1518,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\InstanceRegionChecker.java,get instance region,"@ nullable public  string   (  instance info instance info )  {  if  ( instance info . get data center info (  )   =  =  null || instance info . get data center info (  )  . get name (  )   =  =  null )   {  logger . warn ( "" cannot get region for instanc",255,3,get,1,"[87, 145, 174, 233]"
1519,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\InstanceRegionChecker.java,get instance region,"@ nullable public  string   (  instance info instance info )  {  if  ( instance info . get data center info (  )   =  =  null || instance info . get data center info (  )  . get name (  )   =  =  null )   {  logger . warn ( "" cannot get region for instanc",255,3,instance,2,"[31, 45, 71, 129]"
1520,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\InstanceRegionChecker.java,get instance region,"@ nullable public  string   (  instance info instance info )  {  if  ( instance info . get data center info (  )   =  =  null || instance info . get data center info (  )  . get name (  )   =  =  null )   {  logger . warn ( "" cannot get region for instanc",255,3,region,3,[237]
1521,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\InstanceRegionChecker.java,get local region,public  string   (  )  {  return local region ;   }  ,53,3,get,1,[]
1522,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\InstanceRegionChecker.java,get local region,public  string   (  )  {  return local region ;   }  ,53,3,local,2,[33]
1523,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\InstanceRegionChecker.java,get local region,public  string   (  )  {  return local region ;   }  ,53,3,region,3,[39]
1524,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\InstanceRegionChecker.java,is local region,public boolean   ( @ nullable  string instance region )  {  return null  =  =  instance region || instance region . equals ( local region )  ;   }  ,148,3,is,1,[]
1525,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\InstanceRegionChecker.java,is local region,public boolean   ( @ nullable  string instance region )  {  return null  =  =  instance region || instance region . equals ( local region )  ;   }  ,148,3,local,2,[125]
1526,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\InstanceRegionChecker.java,is local region,public boolean   ( @ nullable  string instance region )  {  return null  =  =  instance region || instance region . equals ( local region )  ;   }  ,148,3,region,3,"[47, 88, 107, 131]"
1527,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\internal\util\Archaius1Utils.java,init config,"public static  dynamic property factory   (  string config name )  {   dynamic property factory config instance =  dynamic property factory . get instance (  )  ;   dynamic string property eureka   props   file = config instance . get string property ( ""eureka . client . props"" config name )  ;   string env =  configuration manager . get config instance (  )  . get string ( eureka   environment ""test"" )  ;   configuration manager . get config instance (  )  . set property ( archaius   deployment   environment env )  ;   string eureka props file = eureka   props   file . get (  )  ;  try  {   configuration manager . load cascaded properties from resources ( eureka props file )  ;   }  catch  (  io exception e )   {  logger . warn ( "" cannot find the properties specified :  {  }  .   this may be okay if there are other environment ""  +  ""specific properties or the configuration is installed with a different mechanism . "" eureka props file )  ;   }  return config instance ;   }  ",991,2,init,1,[]
1528,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\internal\util\Archaius1Utils.java,init config,"public static  dynamic property factory   (  string config name )  {   dynamic property factory config instance =  dynamic property factory . get instance (  )  ;   dynamic string property eureka   props   file = config instance . get string property ( ""eureka . client . props"" config name )  ;   string env =  configuration manager . get config instance (  )  . get string ( eureka   environment ""test"" )  ;   configuration manager . get config instance (  )  . set property ( archaius   deployment   environment env )  ;   string eureka props file = eureka   props   file . get (  )  ;  try  {   configuration manager . load cascaded properties from resources ( eureka props file )  ;   }  catch  (  io exception e )   {  logger . warn ( "" cannot find the properties specified :  {  }  .   this may be okay if there are other environment ""  +  ""specific properties or the configuration is installed with a different mechanism . "" eureka props file )  ;   }  return config instance ;   }  ",991,2,config,2,"[52, 96, 213, 279, 312, 340, 412, 440, 599, 875, 968]"
1529,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\NotImplementedRegistryImpl.java,fetch registry,@ override public  applications   (  string[] include remote regions )  {  return null ;   }  ,94,2,fetch,1,[]
1530,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\NotImplementedRegistryImpl.java,fetch registry,@ override public  applications   (  string[] include remote regions )  {  return null ;   }  ,94,2,registry,2,[]
1531,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\PropertyBasedAzToRegionMapper.java, property based az to region mapper,public   (  eureka client config client config )  {  super ( client config )  ;   }  ,85,6,property,1,[]
1532,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\PropertyBasedAzToRegionMapper.java, property based az to region mapper,public   (  eureka client config client config )  {  super ( client config )  ;   }  ,85,6,based,2,[]
1533,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\PropertyBasedAzToRegionMapper.java, property based az to region mapper,public   (  eureka client config client config )  {  super ( client config )  ;   }  ,85,6,az,3,[]
1534,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\PropertyBasedAzToRegionMapper.java, property based az to region mapper,public   (  eureka client config client config )  {  super ( client config )  ;   }  ,85,6,to,4,[]
1535,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\PropertyBasedAzToRegionMapper.java, property based az to region mapper,public   (  eureka client config client config )  {  super ( client config )  ;   }  ,85,6,region,5,[]
1536,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\PropertyBasedAzToRegionMapper.java, property based az to region mapper,public   (  eureka client config client config )  {  super ( client config )  ;   }  ,85,6,mapper,6,[]
1537,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\PropertyBasedAzToRegionMapper.java,get zones fora region,@ override protected  set <  string >    (  string region )  {  return new  hash set <  string >  (  arrays . as list ( client config . get availability zones ( region )  )  )  ;   }  ,184,4,get,1,[136]
1538,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\PropertyBasedAzToRegionMapper.java,get zones fora region,@ override protected  set <  string >    (  string region )  {  return new  hash set <  string >  (  arrays . as list ( client config . get availability zones ( region )  )  )  ;   }  ,184,4,zones,2,[153]
1539,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\PropertyBasedAzToRegionMapper.java,get zones fora region,@ override protected  set <  string >    (  string region )  {  return new  hash set <  string >  (  arrays . as list ( client config . get availability zones ( region )  )  )  ;   }  ,184,4,fora,3,[]
1540,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\PropertyBasedAzToRegionMapper.java,get zones fora region,@ override protected  set <  string >    (  string region )  {  return new  hash set <  string >  (  arrays . as list ( client config . get availability zones ( region )  )  )  ;   }  ,184,4,region,4,"[51, 161]"
1541,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\InternalEurekaStatusModule.java,configure,@ override protected void   (  )  {  bind ( new  type literal <  supplier <  boolean >  >  (  )  {   }   )  . to provider (  up status provider . class )  ;  bind ( new  type literal <  supplier <  boolean >  >  (  )  {   }   )  . to provider (  down stat,255,1,configure,1,[]
1542,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\InternalEurekaStatusModule.java,get,@ override public  boolean   (  )  {  return  ! resolver . get status (  )  . equals (  instance info .  instance status . up )  ;   }  ,136,1,get,1,[59]
1543,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\providers\DefaultEurekaClientConfigProvider.java,get,@ override public synchronized  eureka client config   (  )  {  if  ( config  =  =  null )   {  config =  ( namespace  =  =  null )   ?  new  default eureka client config (  )  : new  default eureka client config ( namespace )  ;   discovery manager . get,255,1,get,1,[252]
1544,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Applications.java, applications,"@ json creator public   ( @ json property ( ""apps hash code"" )   string apps hash code @ json property ( ""version delta"" )   long version delta @ json property ( ""application"" )   list <  application >  registered applications )  {  this . applications = ",255,1,applications,1,"[214, 240]"
1545,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Applications.java,add application,public void   (  application app )  {  app name application map . put ( app . get name (  )  . to upper case (  locale . root )  app )  ;  add instances tovip maps ( app this . virtual host name app map this . secure virtual host name app map )  ;  applications . add ( app )  ;   }  ,284,2,add,1,"[139, 264]"
1546,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Applications.java,add application,public void   (  application app )  {  app name application map . put ( app . get name (  )  . to upper case (  locale . root )  app )  ;  add instances tovip maps ( app this . virtual host name app map this . secure virtual host name app map )  ;  applications . add ( app )  ;   }  ,284,2,application,2,"[17, 48, 249]"
1547,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Applications.java,add instance to map,"private void   (  instance info info  string vip addresses  map <  string  vip index support >  vip map )  {  if  ( vip addresses  !  =  null )   {   string[] vip address array = vip addresses . to upper case (  locale . root )  . split ( "" "" )  ;  for  (   string vip address : vip address array )   {   vip index support vis = vip map . compute if absent ( vip address k  -  >  new  vip index support (  )  )  ;  vis . instances . add ( info )  ;   }   }   }  ",462,4,add,1,"[49, 120, 163, 183, 269, 283, 363, 433]"
1548,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Applications.java,add instance to map,"private void   (  instance info info  string vip addresses  map <  string  vip index support >  vip map )  {  if  ( vip addresses  !  =  null )   {   string[] vip address array = vip addresses . to upper case (  locale . root )  . split ( "" "" )  ;  for  (   string vip address : vip address array )   {   vip index support vis = vip map . compute if absent ( vip address k  -  >  new  vip index support (  )  )  ;  vis . instances . add ( info )  ;   }   }   }  ",462,4,instance,2,"[18, 421]"
1549,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Applications.java,add instance to map,"private void   (  instance info info  string vip addresses  map <  string  vip index support >  vip map )  {  if  ( vip addresses  !  =  null )   {   string[] vip address array = vip addresses . to upper case (  locale . root )  . split ( "" "" )  ;  for  (   string vip address : vip address array )   {   vip index support vis = vip map . compute if absent ( vip address k  -  >  new  vip index support (  )  )  ;  vis . instances . add ( info )  ;   }   }   }  ",462,4,to,3,[195]
1550,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Applications.java,add instance to map,"private void   (  instance info info  string vip addresses  map <  string  vip index support >  vip map )  {  if  ( vip addresses  !  =  null )   {   string[] vip address array = vip addresses . to upper case (  locale . root )  . split ( "" "" )  ;  for  (   string vip address : vip address array )   {   vip index support vis = vip map . compute if absent ( vip address k  -  >  new  vip index support (  )  )  ;  vis . instances . add ( info )  ;   }   }   }  ",462,4,map,4,"[60, 100, 333]"
1551,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Applications.java,add instances tovip maps,private void   (  application app  map <  string  vip index support >  virtual host name app map  map <  string  vip index support >  secure virtual host name app map )  {  for  (   instance info info : app . get instances (  )  )   {   string vip addresses = info . getvip address (  )  ;  if  ( vip addresses  !  =  null )   {  add instance to map ( info vip addresses virtual host name app map )  ;   }   string secure vip addresses = info . get secure vip address (  )  ;  if  ( secure vip addresses  !  =  null )   {  add instance to map ( info secure vip addresses secure virtual host name app map )  ;   }   }   }  ,622,4,add,1,"[248, 274, 301, 330, 361, 426, 460, 494, 523, 561]"
1552,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Applications.java,add instances tovip maps,private void   (  application app  map <  string  vip index support >  virtual host name app map  map <  string  vip index support >  secure virtual host name app map )  {  for  (   instance info info : app . get instances (  )  )   {   string vip addresses = info . getvip address (  )  ;  if  ( vip addresses  !  =  null )   {  add instance to map ( info vip addresses virtual host name app map )  ;   }   string secure vip addresses = info . get secure vip address (  )  ;  if  ( secure vip addresses  !  =  null )   {  add instance to map ( info secure vip addresses secure virtual host name app map )  ;   }   }   }  ,622,4,instances,2,[213]
1553,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Applications.java,add instances tovip maps,private void   (  application app  map <  string  vip index support >  virtual host name app map  map <  string  vip index support >  secure virtual host name app map )  {  for  (   instance info info : app . get instances (  )  )   {   string vip addresses = info . getvip address (  )  ;  if  ( vip addresses  !  =  null )   {  add instance to map ( info vip addresses virtual host name app map )  ;   }   string secure vip addresses = info . get secure vip address (  )  ;  if  ( secure vip addresses  !  =  null )   {  add instance to map ( info secure vip addresses secure virtual host name app map )  ;   }   }   }  ,622,4,tovip,3,[]
1554,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Applications.java,add instances tovip maps,private void   (  application app  map <  string  vip index support >  virtual host name app map  map <  string  vip index support >  secure virtual host name app map )  {  for  (   instance info info : app . get instances (  )  )   {   string vip addresses = info . getvip address (  )  ;  if  ( vip addresses  !  =  null )   {  add instance to map ( info vip addresses virtual host name app map )  ;   }   string secure vip addresses = info . get secure vip address (  )  ;  if  ( secure vip addresses  !  =  null )   {  add instance to map ( info secure vip addresses secure virtual host name app map )  ;   }   }   }  ,622,4,maps,4,[]
1555,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Applications.java,get apps hash code,@ json ignore public  string   (  )  {  return this . apps hash code ;   }  ,76,4,get,1,[]
1556,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Applications.java,get apps hash code,@ json ignore public  string   (  )  {  return this . apps hash code ;   }  ,76,4,apps,2,[54]
1557,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Applications.java,get apps hash code,@ json ignore public  string   (  )  {  return this . apps hash code ;   }  ,76,4,hash,3,[59]
1558,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Applications.java,get apps hash code,@ json ignore public  string   (  )  {  return this . apps hash code ;   }  ,76,4,code,4,[64]
1559,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Applications.java,get instances by secure virtual host name,public  list <  instance info >    (  string secure virtual host name )  {  return  optional . of nullable ( this . secure virtual host name app map . get ( secure virtual host name . to upper case (  locale . root )  )  )  . map (  vip index support::get vip list )  . map (  atomic reference::get )  . or else get (  collections::empty list )  ;   }  ,353,7,get,1,"[151, 252, 295, 312]"
1560,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Applications.java,get instances by secure virtual host name,public  list <  instance info >    (  string secure virtual host name )  {  return  optional . of nullable ( this . secure virtual host name app map . get ( secure virtual host name . to upper case (  locale . root )  )  )  . map (  vip index support::get vip list )  . map (  atomic reference::get )  . or else get (  collections::empty list )  ;   }  ,353,7,instances,2,[]
1561,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Applications.java,get instances by secure virtual host name,public  list <  instance info >    (  string secure virtual host name )  {  return  optional . of nullable ( this . secure virtual host name app map . get ( secure virtual host name . to upper case (  locale . root )  )  )  . map (  vip index support::get vip list )  . map (  atomic reference::get )  . or else get (  collections::empty list )  ;   }  ,353,7,by,3,[]
1562,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Applications.java,get instances by secure virtual host name,public  list <  instance info >    (  string secure virtual host name )  {  return  optional . of nullable ( this . secure virtual host name app map . get ( secure virtual host name . to upper case (  locale . root )  )  )  . map (  vip index support::get vip list )  . map (  atomic reference::get )  . or else get (  collections::empty list )  ;   }  ,353,7,secure,4,"[45, 116, 157]"
1563,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Applications.java,get instances by secure virtual host name,public  list <  instance info >    (  string secure virtual host name )  {  return  optional . of nullable ( this . secure virtual host name app map . get ( secure virtual host name . to upper case (  locale . root )  )  )  . map (  vip index support::get vip list )  . map (  atomic reference::get )  . or else get (  collections::empty list )  ;   }  ,353,7,virtual,5,"[52, 123, 164]"
1564,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Applications.java,get instances by secure virtual host name,public  list <  instance info >    (  string secure virtual host name )  {  return  optional . of nullable ( this . secure virtual host name app map . get ( secure virtual host name . to upper case (  locale . root )  )  )  . map (  vip index support::get vip list )  . map (  atomic reference::get )  . or else get (  collections::empty list )  ;   }  ,353,7,host,6,"[60, 131, 172]"
1565,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Applications.java,get instances by secure virtual host name,public  list <  instance info >    (  string secure virtual host name )  {  return  optional . of nullable ( this . secure virtual host name app map . get ( secure virtual host name . to upper case (  locale . root )  )  )  . map (  vip index support::get vip list )  . map (  atomic reference::get )  . or else get (  collections::empty list )  ;   }  ,353,7,name,7,"[65, 136, 177]"
1566,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Applications.java,get instances by virtual host name,public  list <  instance info >    (  string virtual host name )  {  return  optional . of nullable ( this . virtual host name app map . get ( virtual host name . to upper case (  locale . root )  )  )  . map (  vip index support::get vip list )  . map (  atomic reference::get )  . or else get (  collections::empty list )  ;   }  ,332,6,get,1,"[137, 231, 274, 291]"
1567,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Applications.java,get instances by virtual host name,public  list <  instance info >    (  string virtual host name )  {  return  optional . of nullable ( this . virtual host name app map . get ( virtual host name . to upper case (  locale . root )  )  )  . map (  vip index support::get vip list )  . map (  atomic reference::get )  . or else get (  collections::empty list )  ;   }  ,332,6,instances,2,[]
1568,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Applications.java,get instances by virtual host name,public  list <  instance info >    (  string virtual host name )  {  return  optional . of nullable ( this . virtual host name app map . get ( virtual host name . to upper case (  locale . root )  )  )  . map (  vip index support::get vip list )  . map (  atomic reference::get )  . or else get (  collections::empty list )  ;   }  ,332,6,by,3,[]
1569,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Applications.java,get instances by virtual host name,public  list <  instance info >    (  string virtual host name )  {  return  optional . of nullable ( this . virtual host name app map . get ( virtual host name . to upper case (  locale . root )  )  )  . map (  vip index support::get vip list )  . map (  atomic reference::get )  . or else get (  collections::empty list )  ;   }  ,332,6,virtual,4,"[45, 109, 143]"
1570,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Applications.java,get instances by virtual host name,public  list <  instance info >    (  string virtual host name )  {  return  optional . of nullable ( this . virtual host name app map . get ( virtual host name . to upper case (  locale . root )  )  )  . map (  vip index support::get vip list )  . map (  atomic reference::get )  . or else get (  collections::empty list )  ;   }  ,332,6,host,5,"[53, 117, 151]"
1571,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Applications.java,get instances by virtual host name,public  list <  instance info >    (  string virtual host name )  {  return  optional . of nullable ( this . virtual host name app map . get ( virtual host name . to upper case (  locale . root )  )  )  . map (  vip index support::get vip list )  . map (  atomic reference::get )  . or else get (  collections::empty list )  ;   }  ,332,6,name,6,"[58, 122, 156]"
1572,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Applications.java,get next index,public  atomic long   (  string virtual hostname boolean secure )  {   map <  string  vip index support >  index =  ( secure )   ?  secure virtual host name app map : virtual host name app map ;  return  optional . of nullable ( index . get ( virtual hostname . to upper case (  locale . root )  )  )  . map (  vip index support::get round robin index )  . or else ( null )  ;   }  ,382,3,get,1,"[237, 330]"
1573,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Applications.java,get next index,public  atomic long   (  string virtual hostname boolean secure )  {   map <  string  vip index support >  index =  ( secure )   ?  secure virtual host name app map : virtual host name app map ;  return  optional . of nullable ( index . get ( virtual hostname . to upper case (  locale . root )  )  )  . map (  vip index support::get round robin index )  . or else ( null )  ;   }  ,382,3,next,2,[]
1574,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Applications.java,get next index,public  atomic long   (  string virtual hostname boolean secure )  {   map <  string  vip index support >  index =  ( secure )   ?  secure virtual host name app map : virtual host name app map ;  return  optional . of nullable ( index . get ( virtual hostname . to upper case (  locale . root )  )  )  . map (  vip index support::get round robin index )  . or else ( null )  ;   }  ,382,3,index,3,"[90, 107, 229, 315, 346]"
1575,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Applications.java,get reconcile hash code,public static  string   (  map <  string  atomic integer >  instance count map )  {   string builder reconcile hash code = new  string builder ( 75 )  ;  for  (   map .  entry <  string  atomic integer >  map entry : instance count map . entry set (  )  )   {  reconcile hash code . append ( map entry . get key (  )  )  . append ( status   delimiter )  . append ( map entry . get value (  )  . get (  )  )  . append ( status   delimiter )  ;   }  return reconcile hash code . to string (  )  ;   }  ,500,4,get,1,"[304, 377, 395]"
1576,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Applications.java,get reconcile hash code,public static  string   (  map <  string  atomic integer >  instance count map )  {   string builder reconcile hash code = new  string builder ( 75 )  ;  for  (   map .  entry <  string  atomic integer >  map entry : instance count map . entry set (  )  )   {  reconcile hash code . append ( map entry . get key (  )  )  . append ( status   delimiter )  . append ( map entry . get value (  )  . get (  )  )  . append ( status   delimiter )  ;   }  return reconcile hash code . to string (  )  ;   }  ,500,4,reconcile,2,"[101, 261, 455]"
1577,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Applications.java,get reconcile hash code,public static  string   (  map <  string  atomic integer >  instance count map )  {   string builder reconcile hash code = new  string builder ( 75 )  ;  for  (   map .  entry <  string  atomic integer >  map entry : instance count map . entry set (  )  )   {  reconcile hash code . append ( map entry . get key (  )  )  . append ( status   delimiter )  . append ( map entry . get value (  )  . get (  )  )  . append ( status   delimiter )  ;   }  return reconcile hash code . to string (  )  ;   }  ,500,4,hash,3,"[111, 271, 465]"
1578,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Applications.java,get reconcile hash code,public static  string   (  map <  string  atomic integer >  instance count map )  {   string builder reconcile hash code = new  string builder ( 75 )  ;  for  (   map .  entry <  string  atomic integer >  map entry : instance count map . entry set (  )  )   {  reconcile hash code . append ( map entry . get key (  )  )  . append ( status   delimiter )  . append ( map entry . get value (  )  . get (  )  )  . append ( status   delimiter )  ;   }  return reconcile hash code . to string (  )  ;   }  ,500,4,code,4,"[116, 276, 470]"
1579,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Applications.java,get registered applications,public  application   (  string app name )  {  return app name application map . get ( app name . to upper case (  locale . root )  )  ;   }  ,142,3,get,1,[81]
1580,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Applications.java,get registered applications,public  application   (  string app name )  {  return app name application map . get ( app name . to upper case (  locale . root )  )  ;   }  ,142,3,registered,2,[]
1581,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Applications.java,get registered applications,public  application   (  string app name )  {  return app name application map . get ( app name . to upper case (  locale . root )  )  ;   }  ,142,3,applications,3,[]
1582,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Applications.java,get round robin index,public  atomic long   (  )  {  return round robin index ;   }  ,63,4,get,1,[]
1583,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Applications.java,get round robin index,public  atomic long   (  )  {  return round robin index ;   }  ,63,4,round,2,[38]
1584,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Applications.java,get round robin index,public  atomic long   (  )  {  return round robin index ;   }  ,63,4,robin,3,[44]
1585,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Applications.java,get round robin index,public  atomic long   (  )  {  return round robin index ;   }  ,63,4,index,4,[50]
1586,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Applications.java,get version,@ deprecated @ json ignore public  long   (  )  {  return this . version delta ;   }  ,86,2,get,1,[]
1587,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Applications.java,get version,@ deprecated @ json ignore public  long   (  )  {  return this . version delta ;   }  ,86,2,version,2,[65]
1588,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Applications.java,get vip list,public  atomic reference <  list <  instance info >  >    (  )  {  return vip list ;   }  ,90,3,get,1,[]
1589,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Applications.java,get vip list,public  atomic reference <  list <  instance info >  >    (  )  {  return vip list ;   }  ,90,3,vip,2,[74]
1590,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Applications.java,get vip list,public  atomic reference <  list <  instance info >  >    (  )  {  return vip list ;   }  ,90,3,list,3,"[28, 78]"
1591,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Applications.java,populate instance count map,public void   (  map <  string  atomic integer >  instance count map )  {  for  (   application app : this . get registered applications (  )  )   {  for  (   instance info info : app . get instances as is from eureka (  )  )   {   atomic integer instance count = instance count map . compute if absent ( info . get status (  )  . name (  )  k  -  >  new  atomic integer ( 0 )  )  ;  instance count . increment and get (  )  ;   }   }   }  ,440,4,populate,1,[]
1592,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Applications.java,populate instance count map,public void   (  map <  string  atomic integer >  instance count map )  {  for  (   application app : this . get registered applications (  )  )   {  for  (   instance info info : app . get instances as is from eureka (  )  )   {   atomic integer instance count = instance count map . compute if absent ( info . get status (  )  . name (  )  k  -  >  new  atomic integer ( 0 )  )  ;  instance count . increment and get (  )  ;   }   }   }  ,440,4,instance,2,"[50, 159, 190, 247, 264, 384]"
1593,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Applications.java,populate instance count map,public void   (  map <  string  atomic integer >  instance count map )  {  for  (   application app : this . get registered applications (  )  )   {  for  (   instance info info : app . get instances as is from eureka (  )  )   {   atomic integer instance count = instance count map . compute if absent ( info . get status (  )  . name (  )  k  -  >  new  atomic integer ( 0 )  )  ;  instance count . increment and get (  )  ;   }   }   }  ,440,4,count,3,"[59, 256, 273, 393]"
1594,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Applications.java,populate instance count map,public void   (  map <  string  atomic integer >  instance count map )  {  for  (   application app : this . get registered applications (  )  )   {  for  (   instance info info : app . get instances as is from eureka (  )  )   {   atomic integer instance count = instance count map . compute if absent ( info . get status (  )  . name (  )  k  -  >  new  atomic integer ( 0 )  )  ;  instance count . increment and get (  )  ;   }   }   }  ,440,4,map,4,"[17, 65, 279]"
1595,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Applications.java,set apps hash code,public void   (  string hash code )  {  this . apps hash code = hash code ;   }  ,81,4,set,1,[]
1596,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Applications.java,set apps hash code,public void   (  string hash code )  {  this . apps hash code = hash code ;   }  ,81,4,apps,2,[47]
1597,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Applications.java,set apps hash code,public void   (  string hash code )  {  this . apps hash code = hash code ;   }  ,81,4,hash,3,"[24, 52, 64]"
1598,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Applications.java,set apps hash code,public void   (  string hash code )  {  this . apps hash code = hash code ;   }  ,81,4,code,4,"[29, 57, 69]"
1599,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Applications.java,set version,@ deprecated public void   (  long version )  {  this . version delta = version ;   }  ,87,2,set,1,[]
1600,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Applications.java,set version,@ deprecated public void   (  long version )  {  this . version delta = version ;   }  ,87,2,version,2,"[35, 56, 72]"
1601,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Applications.java,shuffle and filter instances,private void   (  map <  string  vip index support >  src map boolean filter up instances )  {   random shuffle random = new  random (  )  ;  for  (   map .  entry <  string  vip index support >  entries : src map . entry set (  )  )   {   vip index support vip index support = entries . get value (  )  ;   abstract queue <  instance info >  vip instances = vip index support . instances ;  final  list <  instance info >  filtered instances ;  if  ( filter up instances )   {  filtered instances = vip instances . stream (  )  . filter ( ii  -  >  ii . get status (  )   =  =   instance status . up )  . collect (  collectors . to collection (  (  )   -  >  new  array list <  >  ( vip instances . size (  )  )  )  )  ;   }  else  {  filtered instances = new  array list <  instance info >  ( vip instances )  ;   }   collections . shuffle ( filtered instances shuffle random )  ;  vip index support . vip list . set ( filtered instances )  ;  vip index support . round robin index . set ( 0 )  ;   }   }  ,1008,4,shuffle,1,"[104, 834, 863]"
1602,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Applications.java,shuffle and filter instances,private void   (  map <  string  vip index support >  src map boolean filter up instances )  {   random shuffle random = new  random (  )  ;  for  (   map .  entry <  string  vip index support >  entries : src map . entry set (  )  )   {   vip index support vip index support = entries . get value (  )  ;   abstract queue <  instance info >  vip instances = vip index support . instances ;  final  list <  instance info >  filtered instances ;  if  ( filter up instances )   {  filtered instances = vip instances . stream (  )  . filter ( ii  -  >  ii . get status (  )   =  =   instance status . up )  . collect (  collectors . to collection (  (  )   -  >  new  array list <  >  ( vip instances . size (  )  )  )  )  ;   }  else  {  filtered instances = new  array list <  instance info >  ( vip instances )  ;   }   collections . shuffle ( filtered instances shuffle random )  ;  vip index support . vip list . set ( filtered instances )  ;  vip index support . round robin index . set ( 0 )  ;   }   }  ,1008,4,and,2,"[98, 113, 127, 872]"
1603,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Applications.java,shuffle and filter instances,private void   (  map <  string  vip index support >  src map boolean filter up instances )  {   random shuffle random = new  random (  )  ;  for  (   map .  entry <  string  vip index support >  entries : src map . entry set (  )  )   {   vip index support vip index support = entries . get value (  )  ;   abstract queue <  instance info >  vip instances = vip index support . instances ;  final  list <  instance info >  filtered instances ;  if  ( filter up instances )   {  filtered instances = vip instances . stream (  )  . filter ( ii  -  >  ii . get status (  )   =  =   instance status . up )  . collect (  collectors . to collection (  (  )   -  >  new  array list <  >  ( vip instances . size (  )  )  )  )  ;   }  else  {  filtered instances = new  array list <  instance info >  ( vip instances )  ;   }   collections . shuffle ( filtered instances shuffle random )  ;  vip index support . vip list . set ( filtered instances )  ;  vip index support . round robin index . set ( 0 )  ;   }   }  ,1008,4,filter,3,"[70, 424, 452, 479, 531, 736, 844, 921]"
1604,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Applications.java,shuffle and filter instances,private void   (  map <  string  vip index support >  src map boolean filter up instances )  {   random shuffle random = new  random (  )  ;  for  (   map .  entry <  string  vip index support >  entries : src map . entry set (  )  )   {   vip index support vip index support = entries . get value (  )  ;   abstract queue <  instance info >  vip instances = vip index support . instances ;  final  list <  instance info >  filtered instances ;  if  ( filter up instances )   {  filtered instances = vip instances . stream (  )  . filter ( ii  -  >  ii . get status (  )   =  =   instance status . up )  . collect (  collectors . to collection (  (  )   -  >  new  array list <  >  ( vip instances . size (  )  )  )  )  ;   }  else  {  filtered instances = new  array list <  instance info >  ( vip instances )  ;   }   collections . shuffle ( filtered instances shuffle random )  ;  vip index support . vip list . set ( filtered instances )  ;  vip index support . round robin index . set ( 0 )  ;   }   }  ,1008,4,instances,4,"[80, 347, 379, 433, 462, 488, 504, 688, 745, 799, 853, 930]"
1605,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Applications.java,shuffle and index instances,public void   (  map <  string  applications >  remote regions registry  eureka client config client config  instance region checker instance region checker )  {  shuffle instances ( client config . should filter only up instances (  )  true remote regions registry client config instance region checker )  ;   }  ,314,4,shuffle,1,[163]
1606,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Applications.java,shuffle and index instances,public void   (  map <  string  applications >  remote regions registry  eureka client config client config  instance region checker instance region checker )  {  shuffle instances ( client config . should filter only up instances (  )  true remote regions registry client config instance region checker )  ;   }  ,314,4,and,2,[]
1607,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Applications.java,shuffle and index instances,public void   (  map <  string  applications >  remote regions registry  eureka client config client config  instance region checker instance region checker )  {  shuffle instances ( client config . should filter only up instances (  )  true remote regions registry client config instance region checker )  ;   }  ,314,4,index,3,[]
1608,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Applications.java,shuffle and index instances,public void   (  map <  string  applications >  remote regions registry  eureka client config client config  instance region checker instance region checker )  {  shuffle instances ( client config . should filter only up instances (  )  true remote regions registry client config instance region checker )  ;   }  ,314,4,instances,4,"[171, 221]"
1609,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Applications.java,shuffle instances,private void   ( boolean filter up instances boolean index by remote regions @ nullable  map <  string  applications >  remote regions registry @ nullable  eureka client config client config @ nullable  instance region checker instance region checker )  {   map <  string  vip index support >  secure virtual host name app map = new  hash map <  >  (  )  ;   map <  string  vip index support >  virtual host name app map = new  hash map <  >  (  )  ;  for  (   application application : app name application map . values (  )  )   {  if  ( index by remote regions )   {  application . shuffle and store instances ( remote regions registry client config instance region checker )  ;   }  else  {  application . shuffle and store instances ( filter up instances )  ;   }  this . add instances tovip maps ( application virtual host name app map secure virtual host name app map )  ;   }  shuffle and filter instances ( virtual host name app map filter up instances )  ;  shuffle and filter instances ( secure virtual host name app map filter up instances )  ;  this . virtual host name app map . put all ( virtual host name app map )  ;  this . virtual host name app map . key set (  )  . retain all ( virtual host name app map . key set (  )  )  ;  this . secure virtual host name app map . put all ( secure virtual host name app map )  ;  this . secure virtual host name app map . key set (  )  . retain all ( secure virtual host name app map . key set (  )  )  ;   }  ,1468,2,shuffle,1,"[585, 710, 885, 968]"
1610,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Applications.java,shuffle instances,private void   ( boolean filter up instances boolean index by remote regions @ nullable  map <  string  applications >  remote regions registry @ nullable  eureka client config client config @ nullable  instance region checker instance region checker )  {   map <  string  vip index support >  secure virtual host name app map = new  hash map <  >  (  )  ;   map <  string  vip index support >  virtual host name app map = new  hash map <  >  (  )  ;  for  (   application application : app name application map . values (  )  )   {  if  ( index by remote regions )   {  application . shuffle and store instances ( remote regions registry client config instance region checker )  ;   }  else  {  application . shuffle and store instances ( filter up instances )  ;   }  this . add instances tovip maps ( application virtual host name app map secure virtual host name app map )  ;   }  shuffle and filter instances ( virtual host name app map filter up instances )  ;  shuffle and filter instances ( secure virtual host name app map filter up instances )  ;  this . virtual host name app map . put all ( virtual host name app map )  ;  this . virtual host name app map . key set (  )  . retain all ( virtual host name app map . key set (  )  )  ;  this . secure virtual host name app map . put all ( secure virtual host name app map )  ;  this . secure virtual host name app map . key set (  )  . retain all ( secure virtual host name app map . key set (  )  )  ;   }  ,1468,2,instances,2,"[35, 603, 728, 750, 781, 904, 952, 987, 1042]"
1611,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Applications.java,size,public int   (  )  {  return applications . stream (  )  . map to int (  application::size )  . sum (  )  ;   }  ,113,1,size,1,[86]
1612,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\provider\DiscoveryJerseyProvider.java, discovery jersey provider,"public   (  encoder wrapper json encoder  decoder wrapper json decoder )  {  this . json encoder = json encoder  =  =  null  ?   codec wrappers . get encoder (  legacy jackson json . class )  : json encoder ;  this . json decoder = json decoder  =  =  null  ?   codec wrappers . get decoder (  legacy jackson json . class )  : json decoder ;  logger . info ( "" using json encoding codec  {  } "" this . json encoder . codec name (  )  )  ;  logger . info ( "" using json decoding codec  {  } "" this . json decoder . codec name (  )  )  ;  if  ( json encoder instanceof  codec wrappers .  jackson json mini )   {  throw new  unsupported operation exception ( "" encoder: ""  +  json encoder . codec name (  )   +  ""is not supported for the client"" )  ;   }  this . xml encoder =  codec wrappers . get encoder (  codec wrappers . x stream xml . class )  ;  this . xml decoder =  codec wrappers . get decoder (  codec wrappers . x stream xml . class )  ;  logger . info ( "" using xml encoding codec  {  } "" this . xml encoder . codec name (  )  )  ;  logger . info ( "" using xml decoding codec  {  } "" this . xml decoder . codec name (  )  )  ;   }  ",1143,3,discovery,1,[]
1613,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\provider\DiscoveryJerseyProvider.java, discovery jersey provider,"public   (  encoder wrapper json encoder  decoder wrapper json decoder )  {  this . json encoder = json encoder  =  =  null  ?   codec wrappers . get encoder (  legacy jackson json . class )  : json encoder ;  this . json decoder = json decoder  =  =  null  ?   codec wrappers . get decoder (  legacy jackson json . class )  : json decoder ;  logger . info ( "" using json encoding codec  {  } "" this . json encoder . codec name (  )  )  ;  logger . info ( "" using json decoding codec  {  } "" this . json decoder . codec name (  )  )  ;  if  ( json encoder instanceof  codec wrappers .  jackson json mini )   {  throw new  unsupported operation exception ( "" encoder: ""  +  json encoder . codec name (  )   +  ""is not supported for the client"" )  ;   }  this . xml encoder =  codec wrappers . get encoder (  codec wrappers . x stream xml . class )  ;  this . xml decoder =  codec wrappers . get decoder (  codec wrappers . x stream xml . class )  ;  logger . info ( "" using xml encoding codec  {  } "" this . xml encoder . codec name (  )  )  ;  logger . info ( "" using xml decoding codec  {  } "" this . xml decoder . codec name (  )  )  ;   }  ",1143,3,jersey,2,[]
1614,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\provider\DiscoveryJerseyProvider.java, discovery jersey provider,"public   (  encoder wrapper json encoder  decoder wrapper json decoder )  {  this . json encoder = json encoder  =  =  null  ?   codec wrappers . get encoder (  legacy jackson json . class )  : json encoder ;  this . json decoder = json decoder  =  =  null  ?   codec wrappers . get decoder (  legacy jackson json . class )  : json decoder ;  logger . info ( "" using json encoding codec  {  } "" this . json encoder . codec name (  )  )  ;  logger . info ( "" using json decoding codec  {  } "" this . json decoder . codec name (  )  )  ;  if  ( json encoder instanceof  codec wrappers .  jackson json mini )   {  throw new  unsupported operation exception ( "" encoder: ""  +  json encoder . codec name (  )   +  ""is not supported for the client"" )  ;   }  this . xml encoder =  codec wrappers . get encoder (  codec wrappers . x stream xml . class )  ;  this . xml decoder =  codec wrappers . get decoder (  codec wrappers . x stream xml . class )  ;  logger . info ( "" using xml encoding codec  {  } "" this . xml encoder . codec name (  )  )  ;  logger . info ( "" using xml decoding codec  {  } "" this . xml decoder . codec name (  )  )  ;   }  ",1143,3,provider,3,[]
1615,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\provider\DiscoveryJerseyProvider.java,close input on error,"private static void   (  input stream input stream )  {  if  ( input stream  !  =  null )   {  logger . error ( "" unexpected error occurred during de - serialization of discovery data  done connection cleanup"" )  ;  try  {  input stream . close (  )  ;   }  catch  (  io exception e )   {  logger . debug ( "" cannot close input"" e )  ;   }   }   }  ",349,4,close,1,"[239, 316]"
1616,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\provider\DiscoveryJerseyProvider.java,close input on error,"private static void   (  input stream input stream )  {  if  ( input stream  !  =  null )   {  logger . error ( "" unexpected error occurred during de - serialization of discovery data  done connection cleanup"" )  ;  try  {  input stream . close (  )  ;   }  catch  (  io exception e )   {  logger . debug ( "" cannot close input"" e )  ;   }   }   }  ",349,4,input,2,"[25, 38, 63, 224, 322]"
1617,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\provider\DiscoveryJerseyProvider.java,close input on error,"private static void   (  input stream input stream )  {  if  ( input stream  !  =  null )   {  logger . error ( "" unexpected error occurred during de - serialization of discovery data  done connection cleanup"" )  ;  try  {  input stream . close (  )  ;   }  catch  (  io exception e )   {  logger . debug ( "" cannot close input"" e )  ;   }   }   }  ",349,4,on,3,"[163, 186, 191, 198, 278]"
1618,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\provider\DiscoveryJerseyProvider.java,close input on error,"private static void   (  input stream input stream )  {  if  ( input stream  !  =  null )   {  logger . error ( "" unexpected error occurred during de - serialization of discovery data  done connection cleanup"" )  ;  try  {  input stream . close (  )  ;   }  catch  (  io exception e )   {  logger . debug ( "" cannot close input"" e )  ;   }   }   }  ",349,4,error,4,"[104, 125]"
1619,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\provider\DiscoveryJerseyProvider.java,create error reply,"private static  response   ( int status  string error message  media type media type )  {   string message ;  if  (  media type . application   json   type . equals ( media type )  )   {  message = "" { \""error\"": \""""  +  error message  +  ""\"" } "" ;   }  else  {  message = "" < error >  < message > ""  +  error message  +  "" <  / message >  <  / error > "" ;   }  return  response . status ( status )  . entity ( message )  . type ( media type )  . build (  )  ;   }  ",466,3,create,1,[]
1620,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\provider\DiscoveryJerseyProvider.java,create error reply,"private static  response   ( int status  string error message  media type media type )  {   string message ;  if  (  media type . application   json   type . equals ( media type )  )   {  message = "" { \""error\"": \""""  +  error message  +  ""\"" } "" ;   }  else  {  message = "" < error >  < message > ""  +  error message  +  "" <  / message >  <  / error > "" ;   }  return  response . status ( status )  . entity ( message )  . type ( media type )  . build (  )  ;   }  ",466,3,error,2,"[48, 204, 221, 277, 304, 345]"
1621,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\provider\DiscoveryJerseyProvider.java,create error reply,"private static  response   ( int status  string error message  media type media type )  {   string message ;  if  (  media type . application   json   type . equals ( media type )  )   {  message = "" { \""error\"": \""""  +  error message  +  ""\"" } "" ;   }  else  {  message = "" < error >  < message > ""  +  error message  +  "" <  / message >  <  / error > "" ;   }  return  response . status ( status )  . entity ( message )  . type ( media type )  . build (  )  ;   }  ",466,3,reply,3,[]
1622,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\provider\DiscoveryJerseyProvider.java,get size,@ override public long   (  object serializable object  class serializable class  type type  annotation[] annotations  media type media type )  {  return  - 1 ;   }  ,166,2,get,1,[]
1623,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\provider\DiscoveryJerseyProvider.java,get size,@ override public long   (  object serializable object  class serializable class  type type  annotation[] annotations  media type media type )  {  return  - 1 ;   }  ,166,2,size,2,[]
1624,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\provider\DiscoveryJerseyProvider.java,is readable,@ override public boolean   (  class serializable class  type type  annotation[] annotations  media type media type )  {  return is supported media type ( media type )  && is supported charset ( media type )  && is supported entity ( serializable class ) ,255,2,is,1,"[129, 172, 212]"
1625,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\provider\DiscoveryJerseyProvider.java,is readable,@ override public boolean   (  class serializable class  type type  annotation[] annotations  media type media type )  {  return is supported media type ( media type )  && is supported charset ( media type )  && is supported entity ( serializable class ) ,255,2,readable,2,[]
1626,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\provider\DiscoveryJerseyProvider.java,is supported charset,"private static boolean   (  media type media type )  {   map <  string  string >  parameters = media type . get parameters (  )  ;  if  ( parameters  =  =  null || parameters . is empty (  )  )   {  return true ;   }   string charset = parameters . get ( ""charset"" )  ;  return charset  =  =  null || ""utf - 8"" . equals ignore case ( charset )  || ""iso - 8859 - 1"" . equals ignore case ( charset )  ;   }  ",406,3,is,1,"[177, 349]"
1627,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\provider\DiscoveryJerseyProvider.java,is supported charset,"private static boolean   (  media type media type )  {   map <  string  string >  parameters = media type . get parameters (  )  ;  if  ( parameters  =  =  null || parameters . is empty (  )  )   {  return true ;   }   string charset = parameters . get ( ""charset"" )  ;  return charset  =  =  null || ""utf - 8"" . equals ignore case ( charset )  || ""iso - 8859 - 1"" . equals ignore case ( charset )  ;   }  ",406,3,supported,2,[]
1628,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\provider\DiscoveryJerseyProvider.java,is supported charset,"private static boolean   (  media type media type )  {   map <  string  string >  parameters = media type . get parameters (  )  ;  if  ( parameters  =  =  null || parameters . is empty (  )  )   {  return true ;   }   string charset = parameters . get ( ""charset"" )  ;  return charset  =  =  null || ""utf - 8"" . equals ignore case ( charset )  || ""iso - 8859 - 1"" . equals ignore case ( charset )  ;   }  ",406,3,charset,3,"[226, 256, 278, 334, 388]"
1629,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\provider\DiscoveryJerseyProvider.java,is supported entity,"private static boolean   (  class <  ?  >  entity type )  {  try  {   annotation annotation = entity type . get annotation (  serializer . class )  ;  if  ( annotation  !  =  null )   {  return true ;   }   }  catch  (   throwable th )   {  logger . warn ( "" exception in checking for annotations"" th )  ;   }  return false ;   }  ",331,3,is,1,[]
1630,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\provider\DiscoveryJerseyProvider.java,is supported entity,"private static boolean   (  class <  ?  >  entity type )  {  try  {   annotation annotation = entity type . get annotation (  serializer . class )  ;  if  ( annotation  !  =  null )   {  return true ;   }   }  catch  (   throwable th )   {  logger . warn ( "" exception in checking for annotations"" th )  ;   }  return false ;   }  ",331,3,supported,2,[]
1631,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\provider\DiscoveryJerseyProvider.java,is supported entity,"private static boolean   (  class <  ?  >  entity type )  {  try  {   annotation annotation = entity type . get annotation (  serializer . class )  ;  if  ( annotation  !  =  null )   {  return true ;   }   }  catch  (   throwable th )   {  logger . warn ( "" exception in checking for annotations"" th )  ;   }  return false ;   }  ",331,3,entity,3,"[43, 94]"
1632,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\provider\DiscoveryJerseyProvider.java,is supported media type,private boolean   (  media type media type )  {  if  (  media type . application   json   type . is compatible ( media type )  )   {  return true ;   }  if  (  media type . application   xml   type . is compatible ( media type )  )   {  return xml decoder  !  =  null ;   }  return false ;   }  ,295,4,is,1,"[97, 200]"
1633,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\provider\DiscoveryJerseyProvider.java,is supported media type,private boolean   (  media type media type )  {  if  (  media type . application   json   type . is compatible ( media type )  )   {  return true ;   }  if  (  media type . application   xml   type . is compatible ( media type )  )   {  return xml decoder  !  =  null ;   }  return false ;   }  ,295,4,supported,2,[]
1634,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\provider\DiscoveryJerseyProvider.java,is supported media type,private boolean   (  media type media type )  {  if  (  media type . application   json   type . is compatible ( media type )  )   {  return true ;   }  if  (  media type . application   xml   type . is compatible ( media type )  )   {  return xml decoder  !  =  null ;   }  return false ;   }  ,295,4,media,3,"[21, 32, 56, 113, 160, 216]"
1635,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\provider\DiscoveryJerseyProvider.java,is supported media type,private boolean   (  media type media type )  {  if  (  media type . application   json   type . is compatible ( media type )  )   {  return true ;   }  if  (  media type . application   xml   type . is compatible ( media type )  )   {  return xml decoder  !  =  null ;   }  return false ;   }  ,295,4,type,4,"[27, 38, 62, 90, 119, 166, 193, 222]"
1636,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\provider\DiscoveryJerseyProvider.java,is writeable,@ override public boolean   (  class serializable class  type type  annotation[] annotations  media type media type )  {  return is supported media type ( media type )  && is supported entity ( serializable class )  ;   }  ,223,2,is,1,"[129, 172]"
1637,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\provider\DiscoveryJerseyProvider.java,is writeable,@ override public boolean   (  class serializable class  type type  annotation[] annotations  media type media type )  {  return is supported media type ( media type )  && is supported entity ( serializable class )  ;   }  ,223,2,writeable,2,[]
1638,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\provider\DiscoveryJerseyProvider.java,read from,@ override public  object   (  class serializable class  type type  annotation[] annotations  media type media type  multivalued map headers  input stream input stream )  throws io exception  {   decoder wrapper decoder ;  if  (  media type . media   type,255,2,read,1,[]
1639,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\provider\DiscoveryJerseyProvider.java,read from,@ override public  object   (  class serializable class  type type  annotation[] annotations  media type media type  multivalued map headers  input stream input stream )  throws io exception  {   decoder wrapper decoder ;  if  (  media type . media   type,255,2,from,2,[]
1640,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\provider\DiscoveryJerseyProvider.java,write to,@ override public void   (  object serializable object  class serializable class  type type  annotation[] annotations  media type media type  multivalued map headers  output stream output stream )  throws io exception   web application exception  {   enco,255,2,write,1,[]
1641,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\provider\DiscoveryJerseyProvider.java,write to,@ override public void   (  object serializable object  class serializable class  type type  annotation[] annotations  media type media type  multivalued map headers  output stream output stream )  throws io exception   web application exception  {   enco,255,2,to,2,[]
1642,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Application.java, application,"@ json creator public   ( @ json property ( ""name"" )   string name @ json property ( ""instance"" )   list <  instance info >  instances )  {  this ( name )  ;  for  (   instance info instance info : instances )   {  add instance ( instance info )  ;   }   ",255,1,application,1,[]
1643,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Application.java,   shuffle and store instances,private void   ( boolean filter up instances boolean index by remote regions @ nullable  map <  string  applications >  remote regions registry @ nullable  eureka client config client config @ nullable  instance region checker instance region checker )  {   list <  instance info >  instance info list ;  synchronized  ( instances )   {  instance info list = new  array list <  instance info >  ( instances )  ;   }  boolean remote indexing active = index by remote regions && null  !  =  instance region checker && null  !  =  client config && null  !  =  remote regions registry ;  if  ( remote indexing active || filter up instances )   {   iterator <  instance info >  it = instance info list . iterator (  )  ;  while  ( it . has next (  )  )   {   instance info instance info = it . next (  )  ;  if  ( filter up instances &&  instance status . up  !  =  instance info . get status (  )  )   {  it . remove (  )  ;   }  else if  ( remote indexing active )   {   string instance region = instance region checker . get instance region ( instance info )  ;  if  (  ! instance region checker . is local region ( instance region )  )   {   applications apps for remote region = remote regions registry . get ( instance region )  ;  if  ( null  =  =  apps for remote region )   {  apps for remote region = new  applications (  )  ;  remote regions registry . put ( instance region apps for remote region )  ;   }   application remote app = apps for remote region . get registered applications ( instance info . get app name (  )  )  ;  if  ( null  =  =  remote app )   {  remote app = new  application ( instance info . get app name (  )  )  ;  apps for remote region . add application ( remote app )  ;   }  remote app . add instance ( instance info )  ;  this . remove instance ( instance info false )  ;  it . remove (  )  ;   }   }   }   }   collections . shuffle ( instance info list shuffle random )  ;  this . shuffled instances . set ( instance info list )  ;   }  ,1973,4,shuffle,1,"[1860, 1889, 1917]"
1644,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Application.java,   shuffle and store instances,private void   ( boolean filter up instances boolean index by remote regions @ nullable  map <  string  applications >  remote regions registry @ nullable  eureka client config client config @ nullable  instance region checker instance region checker )  {   list <  instance info >  instance info list ;  synchronized  ( instances )   {  instance info list = new  array list <  instance info >  ( instances )  ;   }  boolean remote indexing active = index by remote regions && null  !  =  instance region checker && null  !  =  client config && null  !  =  remote regions registry ;  if  ( remote indexing active || filter up instances )   {   iterator <  instance info >  it = instance info list . iterator (  )  ;  while  ( it . has next (  )  )   {   instance info instance info = it . next (  )  ;  if  ( filter up instances &&  instance status . up  !  =  instance info . get status (  )  )   {  it . remove (  )  ;   }  else if  ( remote indexing active )   {   string instance region = instance region checker . get instance region ( instance info )  ;  if  (  ! instance region checker . is local region ( instance region )  )   {   applications apps for remote region = remote regions registry . get ( instance region )  ;  if  ( null  =  =  apps for remote region )   {  apps for remote region = new  applications (  )  ;  remote regions registry . put ( instance region apps for remote region )  ;   }   application remote app = apps for remote region . get registered applications ( instance info . get app name (  )  )  ;  if  ( null  =  =  remote app )   {  remote app = new  application ( instance info . get app name (  )  )  ;  apps for remote region . add application ( remote app )  ;   }  remote app . add instance ( instance info )  ;  this . remove instance ( instance info false )  ;  it . remove (  )  ;   }   }   }   }   collections . shuffle ( instance info list shuffle random )  ;  this . shuffled instances . set ( instance info list )  ;   }  ,1973,4,and,2,[1898]
1645,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Application.java,   shuffle and store instances,private void   ( boolean filter up instances boolean index by remote regions @ nullable  map <  string  applications >  remote regions registry @ nullable  eureka client config client config @ nullable  instance region checker instance region checker )  {   list <  instance info >  instance info list ;  synchronized  ( instances )   {  instance info list = new  array list <  instance info >  ( instances )  ;   }  boolean remote indexing active = index by remote regions && null  !  =  instance region checker && null  !  =  client config && null  !  =  remote regions registry ;  if  ( remote indexing active || filter up instances )   {   iterator <  instance info >  it = instance info list . iterator (  )  ;  while  ( it . has next (  )  )   {   instance info instance info = it . next (  )  ;  if  ( filter up instances &&  instance status . up  !  =  instance info . get status (  )  )   {  it . remove (  )  ;   }  else if  ( remote indexing active )   {   string instance region = instance region checker . get instance region ( instance info )  ;  if  (  ! instance region checker . is local region ( instance region )  )   {   applications apps for remote region = remote regions registry . get ( instance region )  ;  if  ( null  =  =  apps for remote region )   {  apps for remote region = new  applications (  )  ;  remote regions registry . put ( instance region apps for remote region )  ;   }   application remote app = apps for remote region . get registered applications ( instance info . get app name (  )  )  ;  if  ( null  =  =  remote app )   {  remote app = new  application ( instance info . get app name (  )  )  ;  apps for remote region . add application ( remote app )  ;   }  remote app . add instance ( instance info )  ;  this . remove instance ( instance info false )  ;  it . remove (  )  ;   }   }   }   }   collections . shuffle ( instance info list shuffle random )  ;  this . shuffled instances . set ( instance info list )  ;   }  ,1973,4,store,3,[]
1646,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Application.java,   shuffle and store instances,private void   ( boolean filter up instances boolean index by remote regions @ nullable  map <  string  applications >  remote regions registry @ nullable  eureka client config client config @ nullable  instance region checker instance region checker )  {   list <  instance info >  instance info list ;  synchronized  ( instances )   {  instance info list = new  array list <  instance info >  ( instances )  ;   }  boolean remote indexing active = index by remote regions && null  !  =  instance region checker && null  !  =  client config && null  !  =  remote regions registry ;  if  ( remote indexing active || filter up instances )   {   iterator <  instance info >  it = instance info list . iterator (  )  ;  while  ( it . has next (  )  )   {   instance info instance info = it . next (  )  ;  if  ( filter up instances &&  instance status . up  !  =  instance info . get status (  )  )   {  it . remove (  )  ;   }  else if  ( remote indexing active )   {   string instance region = instance region checker . get instance region ( instance info )  ;  if  (  ! instance region checker . is local region ( instance region )  )   {   applications apps for remote region = remote regions registry . get ( instance region )  ;  if  ( null  =  =  apps for remote region )   {  apps for remote region = new  applications (  )  ;  remote regions registry . put ( instance region apps for remote region )  ;   }   application remote app = apps for remote region . get registered applications ( instance info . get app name (  )  )  ;  if  ( null  =  =  remote app )   {  remote app = new  application ( instance info . get app name (  )  )  ;  apps for remote region . add application ( remote app )  ;   }  remote app . add instance ( instance info )  ;  this . remove instance ( instance info false )  ;  it . remove (  )  ;   }   }   }   }   collections . shuffle ( instance info list shuffle random )  ;  this . shuffled instances . set ( instance info list )  ;   }  ,1973,4,instances,4,"[35, 321, 397, 626, 819, 1926]"
1647,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Application.java,add instance,public void   (  instance info i )  {  instances map . put ( i . get id (  )  i )  ;  synchronized  ( instances )   {  instances . remove ( i )  ;  instances . add ( i )  ;  is dirty = true ;   }   }  ,201,2,add,1,[160]
1648,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Application.java,add instance,public void   (  instance info i )  {  instances map . put ( i . get id (  )  i )  ;  synchronized  ( instances )   {  instances . remove ( i )  ;  instances . add ( i )  ;  is dirty = true ;   }   }  ,201,2,instance,2,"[17, 39, 102, 119, 148]"
1649,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Application.java,get by instance id,public  instance info   (  string id )  {  return instances map . get ( id )  ;   }  ,85,4,get,1,[66]
1650,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Application.java,get by instance id,public  instance info   (  string id )  {  return instances map . get ( id )  ;   }  ,85,4,by,2,[]
1651,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Application.java,get by instance id,public  instance info   (  string id )  {  return instances map . get ( id )  ;   }  ,85,4,instance,3,"[8, 50]"
1652,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Application.java,get by instance id,public  instance info   (  string id )  {  return instances map . get ( id )  ;   }  ,85,4,id,4,"[34, 72]"
1653,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Application.java,get instances,"@ json property ( ""instance"" )  public  list <  instance info >    (  )  {  return  optional . of nullable ( shuffled instances . get (  )  )  . or else get ( this::get instances as is from eureka )  ;   }  ",207,2,get,1,"[130, 153, 165]"
1654,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Application.java,get instances,"@ json property ( ""instance"" )  public  list <  instance info >    (  )  {  return  optional . of nullable ( shuffled instances . get (  )  )  . or else get ( this::get instances as is from eureka )  ;   }  ",207,2,instances,2,"[118, 169]"
1655,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Application.java,get instances as is from eureka,@ json ignore public  list <  instance info >    (  )  {  synchronized  ( instances )   {  return new  array list <  instance info >  ( this . instances )  ;   }   }  ,167,6,get,1,[]
1656,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Application.java,get instances as is from eureka,@ json ignore public  list <  instance info >    (  )  {  synchronized  ( instances )   {  return new  array list <  instance info >  ( this . instances )  ;   }   }  ,167,6,instances,2,"[74, 143]"
1657,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Application.java,get instances as is from eureka,@ json ignore public  list <  instance info >    (  )  {  synchronized  ( instances )   {  return new  array list <  instance info >  ( this . instances )  ;   }   }  ,167,6,as,3,[]
1658,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Application.java,get instances as is from eureka,@ json ignore public  list <  instance info >    (  )  {  synchronized  ( instances )   {  return new  array list <  instance info >  ( this . instances )  ;   }   }  ,167,6,is,4,"[23, 110, 138]"
1659,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Application.java,get instances as is from eureka,@ json ignore public  list <  instance info >    (  )  {  synchronized  ( instances )   {  return new  array list <  instance info >  ( this . instances )  ;   }   }  ,167,6,from,5,[]
1660,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Application.java,get instances as is from eureka,@ json ignore public  list <  instance info >    (  )  {  synchronized  ( instances )   {  return new  array list <  instance info >  ( this . instances )  ;   }   }  ,167,6,eureka,6,[]
1661,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Application.java,get name,public  string   (  )  {  return name ;   }  ,45,2,get,1,[]
1662,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Application.java,get name,public  string   (  )  {  return name ;   }  ,45,2,name,2,[33]
1663,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Application.java,remove instance,private void   (  instance info i boolean mark as dirty )  {  instances map . remove ( i . get id (  )  )  ;  synchronized  ( instances )   {  instances . remove ( i )  ;  if  ( mark as dirty )   {  is dirty = true ;   }   }   }  ,230,2,remove,1,"[78, 155]"
1664,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Application.java,remove instance,private void   (  instance info i boolean mark as dirty )  {  instances map . remove ( i . get id (  )  )  ;  synchronized  ( instances )   {  instances . remove ( i )  ;  if  ( mark as dirty )   {  is dirty = true ;   }   }   }  ,230,2,instance,2,"[18, 62, 126, 143]"
1665,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Application.java,set name,public void   (  string name )  {  this . name =  string cache . intern ( name )  ;   }  ,89,2,set,1,[]
1666,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Application.java,set name,public void   (  string name )  {  this . name =  string cache . intern ( name )  ;   }  ,89,2,name,2,"[24, 42, 74]"
1667,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Application.java,shuffle and store instances,public void   (  map <  string  applications >  remote regions registry  eureka client config client config  instance region checker instance region checker )  {     shuffle and store instances ( client config . should filter only up instances (  )  true remote regions registry client config instance region checker )  ;   }  ,327,4,shuffle,1,[166]
1668,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Application.java,shuffle and store instances,public void   (  map <  string  applications >  remote regions registry  eureka client config client config  instance region checker instance region checker )  {     shuffle and store instances ( client config . should filter only up instances (  )  true remote regions registry client config instance region checker )  ;   }  ,327,4,and,2,[174]
1669,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Application.java,shuffle and store instances,public void   (  map <  string  applications >  remote regions registry  eureka client config client config  instance region checker instance region checker )  {     shuffle and store instances ( client config . should filter only up instances (  )  true remote regions registry client config instance region checker )  ;   }  ,327,4,store,3,[178]
1670,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Application.java,shuffle and store instances,public void   (  map <  string  applications >  remote regions registry  eureka client config client config  instance region checker instance region checker )  {     shuffle and store instances ( client config . should filter only up instances (  )  true remote regions registry client config instance region checker )  ;   }  ,327,4,instances,4,"[184, 234]"
1671,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Application.java,size,public int   (  )  {  return instances . size (  )  ;   }  ,59,1,size,1,[41]
1672,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Application.java,to string,"@ override public  string   (  )  {  return "" application [name = ""  +  name  +  ""  is dirty = "" +  is dirty +  ""  instances = "" +  instances +  ""  shuffled instances = "" +  shuffled instances +  ""  instances map = "" +  instances map +  ""]"" ;   }  ",248,2,to,1,[]
1673,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Application.java,to string,"@ override public  string   (  )  {  return "" application [name = ""  +  name  +  ""  is dirty = "" +  is dirty +  ""  instances = "" +  instances +  ""  shuffled instances = "" +  shuffled instances +  ""  instances map = "" +  instances map +  ""]"" ;   }  ",248,2,string,2,[19]
1674,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\dns\DnsServiceImpl.java,resolvea record,@ nullable @ override public  list <  string >    (  string root domain name )  {  return  dns resolver . resolvea record ( root domain name )  ;   }  ,151,2,resolvea,1,[106]
1675,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\dns\DnsServiceImpl.java,resolvea record,@ nullable @ override public  list <  string >    (  string root domain name )  {  return  dns resolver . resolvea record ( root domain name )  ;   }  ,151,2,record,2,[115]
1676,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\dns\DnsServiceImpl.java,resolve ip,@ override public  string   (  string host name )  {  return  dns resolver . resolve ( host name )  ;   }  ,107,2,resolve,1,"[66, 77]"
1677,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\dns\DnsServiceImpl.java,resolve ip,@ override public  string   (  string host name )  {  return  dns resolver . resolve ( host name )  ;   }  ,107,2,ip,2,[]
1678,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\MonitoredConnectionManager.java, monitored connection manager,public   (  string name  scheme registry schreg )  {  super ( schreg )  ;  init monitors ( name )  ;   }  ,106,3,monitored,1,[]
1679,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\MonitoredConnectionManager.java, monitored connection manager,public   (  string name  scheme registry schreg )  {  super ( schreg )  ;  init monitors ( name )  ;   }  ,106,3,connection,2,[]
1680,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\MonitoredConnectionManager.java, monitored connection manager,public   (  string name  scheme registry schreg )  {  super ( schreg )  ;  init monitors ( name )  ;   }  ,106,3,manager,3,[]
1681,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\MonitoredConnectionManager.java,create connection pool,@ override protected  conn pool by route   ( long connttl  time unit connttl time unit )  {  return new  named connection pool ( conn operator conn per route 20 connttl connttl time unit )  ;   }  ,197,3,create,1,[]
1682,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\MonitoredConnectionManager.java,create connection pool,@ override protected  conn pool by route   ( long connttl  time unit connttl time unit )  {  return new  named connection pool ( conn operator conn per route 20 connttl connttl time unit )  ;   }  ,197,3,connection,2,[111]
1683,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\MonitoredConnectionManager.java,create connection pool,@ override protected  conn pool by route   ( long connttl  time unit connttl time unit )  {  return new  named connection pool ( conn operator conn per route 20 connttl connttl time unit )  ;   }  ,197,3,pool,3,"[27, 122]"
1684,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\MonitoredConnectionManager.java,get connection pool,@ visible for testing  conn pool by route   (  )  {  return this . pool ;   }  ,79,3,get,1,[]
1685,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\MonitoredConnectionManager.java,get connection pool,@ visible for testing  conn pool by route   (  )  {  return this . pool ;   }  ,79,3,connection,2,[]
1686,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\MonitoredConnectionManager.java,get connection pool,@ visible for testing  conn pool by route   (  )  {  return this . pool ;   }  ,79,3,pool,3,"[28, 67]"
1687,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\MonitoredConnectionManager.java,init monitors,void   (  string name )  {  if  ( this . pool instanceof  named connection pool )   {   (  (  named connection pool ) this . pool )  . init monitors ( name )  ;   }   }  ,170,2,init,1,[135]
1688,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\MonitoredConnectionManager.java,init monitors,void   (  string name )  {  if  ( this . pool instanceof  named connection pool )   {   (  (  named connection pool ) this . pool )  . init monitors ( name )  ;   }   }  ,170,2,monitors,2,[140]
1689,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\MonitoredConnectionManager.java,request connection,@ override public  client connection request   (  http route route  object state )  {  return super . request connection ( route state )  ;   }  ,145,2,request,1,"[37, 102]"
1690,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\MonitoredConnectionManager.java,request connection,@ override public  client connection request   (  http route route  object state )  {  return super . request connection ( route state )  ;   }  ,145,2,connection,2,"[26, 110]"
1691,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\aws\ApplicationsResolver.java, applications resolver,public   (  eureka client config client config  eureka transport config transport config  applications source applications source  string vip address )  {  this . client config = client config ;  this . transport config = transport config ;  this . applications source = applications source ;  this . vip address = vip address ;   }  ,334,2,applications,1,"[90, 110, 249, 271]"
1692,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\aws\ApplicationsResolver.java, applications resolver,public   (  eureka client config client config  eureka transport config transport config  applications source applications source  string vip address )  {  this . client config = client config ;  this . transport config = transport config ;  this . applications source = applications source ;  this . vip address = vip address ;   }  ,334,2,resolver,2,[]
1693,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Pair.java, pair,public   ( e1 first e2 second )  {  this . first = first ;  this . second = second ;   }  ,90,1,pair,1,[]
1694,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Pair.java,first,public e1   (  )  {  return first ;   }  ,41,1,first,1,[28]
1695,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Pair.java,second,public e2   (  )  {  return second ;   }  ,42,1,second,1,[28]
1696,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Pair.java,set first,public void   ( e1 first )  {  this . first = first ;   }  ,59,2,set,1,[]
1697,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Pair.java,set first,public void   ( e1 first )  {  this . first = first ;   }  ,59,2,first,2,"[19, 38, 46]"
1698,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Pair.java,set second,public void   ( e2 second )  {  this . second = second ;   }  ,62,2,set,1,[]
1699,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Pair.java,set second,public void   ( e2 second )  {  this . second = second ;   }  ,62,2,second,2,"[19, 39, 48]"
1700,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\AsyncResolver.java, async resolver,"  (  string name  cluster resolver < t >  delegate  list < t >  initial value int executor thread pool size int refresh interval ms int warm up timeout ms )  {  this . name = name ;  this . delegate = delegate ;  this . refresh interval ms = refresh interval ms ;  this . warm up timeout ms = warm up timeout ms ;  this . executor service =  executors . new scheduled thread pool ( 1 new  thread factory builder (  )  . set name format ( "" async resolver - ""  +  name  +  "" - %d"" )  . set daemon ( true )  . build (  )  )  ;  this . thread pool executor = new  thread pool executor ( 1 executor thread pool size 0  time unit . seconds new  synchronous queue <  runnable >  (  )  new  thread factory builder (  )  . set name format ( "" async resolver - ""  +  name  +  "" - executor - %d"" )  . set daemon ( true )  . build (  )  )  ;  this . background task = new  timed supervisor task ( this . get class (  )  . get simple name (  )  executor service thread pool executor refresh interval ms  time unit . milliseconds 5 update task )  ;  this . results ref = new  atomic reference <  >  ( initial value )  ;   monitors . register object ( name this )  ;   }  ",1158,2,async,1,"[440, 735]"
1701,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\AsyncResolver.java, async resolver,"  (  string name  cluster resolver < t >  delegate  list < t >  initial value int executor thread pool size int refresh interval ms int warm up timeout ms )  {  this . name = name ;  this . delegate = delegate ;  this . refresh interval ms = refresh interval ms ;  this . warm up timeout ms = warm up timeout ms ;  this . executor service =  executors . new scheduled thread pool ( 1 new  thread factory builder (  )  . set name format ( "" async resolver - ""  +  name  +  "" - %d"" )  . set daemon ( true )  . build (  )  )  ;  this . thread pool executor = new  thread pool executor ( 1 executor thread pool size 0  time unit . seconds new  synchronous queue <  runnable >  (  )  new  thread factory builder (  )  . set name format ( "" async resolver - ""  +  name  +  "" - executor - %d"" )  . set daemon ( true )  . build (  )  )  ;  this . background task = new  timed supervisor task ( this . get class (  )  . get simple name (  )  executor service thread pool executor refresh interval ms  time unit . milliseconds 5 update task )  ;  this . results ref = new  atomic reference <  >  ( initial value )  ;   monitors . register object ( name this )  ;   }  ",1158,2,resolver,2,"[26, 446, 741]"
1702,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\AsyncResolver.java,do warm up,"boolean   (  )  {   future future = null ;  try  {  future = thread pool executor . submit ( update task )  ;  future . get ( warm up timeout ms  time unit . milliseconds )  ;  return true ;   }  catch  (   exception e )   {  logger . warn ( "" best effort warm up failed"" e )  ;   }  finally  {  if  ( future  !  =  null )   {  future . cancel ( true )  ;   }   }  return false ;   }  ",385,3,do,1,[]
1703,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\AsyncResolver.java,do warm up,"boolean   (  )  {   future future = null ;  try  {  future = thread pool executor . submit ( update task )  ;  future . get ( warm up timeout ms  time unit . milliseconds )  ;  return true ;   }  catch  (   exception e )   {  logger . warn ( "" best effort warm up failed"" e )  ;   }  finally  {  if  ( future  !  =  null )   {  future . cancel ( true )  ;   }   }  return false ;   }  ",385,3,warm,2,"[126, 256]"
1704,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\AsyncResolver.java,do warm up,"boolean   (  )  {   future future = null ;  try  {  future = thread pool executor . submit ( update task )  ;  future . get ( warm up timeout ms  time unit . milliseconds )  ;  return true ;   }  catch  (   exception e )   {  logger . warn ( "" best effort warm up failed"" e )  ;   }  finally  {  if  ( future  !  =  null )   {  future . cancel ( true )  ;   }   }  return false ;   }  ",385,3,up,3,"[93, 131, 261]"
1705,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\AsyncResolver.java,get cluster endpoints,@ override public  list < t >    (  )  {  long delay = refresh interval ms ;  if  ( warmed up . compare and set ( false true )  )   {  if  (  ! do warm up (  )  )   {  delay = 0 ;   }   }  if  ( scheduled . compare and set ( false true )  )   {  schedule ,255,3,get,1,[]
1706,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\AsyncResolver.java,get cluster endpoints,@ override public  list < t >    (  )  {  long delay = refresh interval ms ;  if  ( warmed up . compare and set ( false true )  )   {  if  (  ! do warm up (  )  )   {  delay = 0 ;   }   }  if  ( scheduled . compare and set ( false true )  )   {  schedule ,255,3,cluster,2,[]
1707,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\AsyncResolver.java,get cluster endpoints,@ override public  list < t >    (  )  {  long delay = refresh interval ms ;  if  ( warmed up . compare and set ( false true )  )   {  if  (  ! do warm up (  )  )   {  delay = 0 ;   }   }  if  ( scheduled . compare and set ( false true )  )   {  schedule ,255,3,endpoints,3,[]
1708,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\AsyncResolver.java,get endpoints size,"@ monitor ( name = metric   resolver   prefix  +  ""endpoints size"" description = "" how many records are the in the endpoints ref"" type =  data source type . gauge )  public long   (  )  {  return results ref . get (  )  . size (  )  ;   }  ",240,3,get,1,[210]
1709,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\AsyncResolver.java,get endpoints size,"@ monitor ( name = metric   resolver   prefix  +  ""endpoints size"" description = "" how many records are the in the endpoints ref"" type =  data source type . gauge )  public long   (  )  {  return results ref . get (  )  . size (  )  ;   }  ",240,3,endpoints,2,"[51, 115]"
1710,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\AsyncResolver.java,get endpoints size,"@ monitor ( name = metric   resolver   prefix  +  ""endpoints size"" description = "" how many records are the in the endpoints ref"" type =  data source type . gauge )  public long   (  )  {  return results ref . get (  )  . size (  )  ;   }  ",240,3,size,3,"[61, 222]"
1711,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\AsyncResolver.java,get last load timestamp,"@ monitor ( name = metric   resolver   prefix  +  ""last load timestamp"" description = "" how much time has passed from last successful async load"" type =  data source type . gauge )  public long   (  )  {  return last load timestamp  <  0  ?  0 :  system .",255,4,get,1,[]
1712,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\AsyncResolver.java,get last load timestamp,"@ monitor ( name = metric   resolver   prefix  +  ""last load timestamp"" description = "" how much time has passed from last successful async load"" type =  data source type . gauge )  public long   (  )  {  return last load timestamp  <  0  ?  0 :  system .",255,4,last,2,"[51, 118, 212]"
1713,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\AsyncResolver.java,get last load timestamp,"@ monitor ( name = metric   resolver   prefix  +  ""last load timestamp"" description = "" how much time has passed from last successful async load"" type =  data source type . gauge )  public long   (  )  {  return last load timestamp  <  0  ?  0 :  system .",255,4,load,3,"[56, 140, 217]"
1714,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\AsyncResolver.java,get last load timestamp,"@ monitor ( name = metric   resolver   prefix  +  ""last load timestamp"" description = "" how much time has passed from last successful async load"" type =  data source type . gauge )  public long   (  )  {  return last load timestamp  <  0  ?  0 :  system .",255,4,timestamp,4,"[61, 222]"
1715,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\AsyncResolver.java,get region,@ override public  string   (  )  {  return delegate . get region (  )  ;   }  ,79,2,get,1,[55]
1716,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\AsyncResolver.java,get region,@ override public  string   (  )  {  return delegate . get region (  )  ;   }  ,79,2,region,2,[59]
1717,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\AsyncResolver.java,run,@ override public void   (  )  {  try  {   list < t >  new list = delegate . get cluster endpoints (  )  ;  if  ( new list  !  =  null )   {  results ref . get and set ( new list )  ;  last load timestamp =  system . current time millis (  )  ;   }  else ,255,1,run,1,[]
1718,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\AsyncResolver.java,schedule task,void   ( long delay )  {  executor service . schedule ( background task delay  time unit . milliseconds )  ;   }  ,114,2,schedule,1,[45]
1719,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\AsyncResolver.java,schedule task,void   ( long delay )  {  executor service . schedule ( background task delay  time unit . milliseconds )  ;   }  ,114,2,task,2,[67]
1720,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\AsyncResolver.java,shutdown,@ override public void   (  )  {  if  (  monitors . is object registered ( name this )  )   {   monitors . unregister object ( name this )  ;   }  executor service . shutdown now (  )  ;  thread pool executor . shutdown now (  )  ;  background task . canc,255,1,shutdown,1,"[166, 211]"
1721,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\NamedConnectionPool.java, named connection pool,  (  client connection operator operator  http params params )  {  super ( operator params )  ;   }  ,101,3,named,1,[]
1722,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\NamedConnectionPool.java, named connection pool,  (  client connection operator operator  http params params )  {  super ( operator params )  ;   }  ,101,3,connection,2,[12]
1723,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\NamedConnectionPool.java, named connection pool,  (  client connection operator operator  http params params )  {  super ( operator params )  ;   }  ,101,3,pool,3,[]
1724,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\NamedConnectionPool.java,create entry,@ override protected  basic pool entry   (  route specific pool rospl  client connection operator op )  {  create entry counter . increment (  )  ;   stopwatch stop watch = creation timer . start (  )  ;  try  {  return super . create entry ( rospl op )  ,255,2,create,1,"[107, 228]"
1725,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\NamedConnectionPool.java,create entry,@ override protected  basic pool entry   (  route specific pool rospl  client connection operator op )  {  create entry counter . increment (  )  ;   stopwatch stop watch = creation timer . start (  )  ;  try  {  return super . create entry ( rospl op )  ,255,2,entry,2,"[33, 114, 235]"
1726,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\NamedConnectionPool.java,delete entry,@ override protected void   (  basic pool entry entry )  {  delete counter . increment (  )  ;  super . delete entry ( entry )  ;   }  ,135,2,delete,1,"[60, 104]"
1727,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\NamedConnectionPool.java,delete entry,@ override protected void   (  basic pool entry entry )  {  delete counter . increment (  )  ;  super . delete entry ( entry )  ;   }  ,135,2,entry,2,"[42, 48, 111, 119]"
1728,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\NamedConnectionPool.java,free entry,@ override public void   (  basic pool entry entry boolean reusable long valid duration  time unit time unit )  {  release counter . increment (  )  ;  super . free entry ( entry reusable valid duration time unit )  ;   }  ,223,2,free,1,[160]
1729,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\NamedConnectionPool.java,free entry,@ override public void   (  basic pool entry entry boolean reusable long valid duration  time unit time unit )  {  release counter . increment (  )  ;  super . free entry ( entry reusable valid duration time unit )  ;   }  ,223,2,entry,2,"[39, 45, 165, 173]"
1730,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\NamedConnectionPool.java,get connection count,"@ monitor ( name = ""connection count"" type =  data source type . gauge )  public int   (  )  {  return this . get connections in pool (  )  ;   }  ",147,3,get,1,[110]
1731,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\NamedConnectionPool.java,get connection count,"@ monitor ( name = ""connection count"" type =  data source type . gauge )  public int   (  )  {  return this . get connections in pool (  )  ;   }  ",147,3,connection,2,"[20, 114]"
1732,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\NamedConnectionPool.java,get connection count,"@ monitor ( name = ""connection count"" type =  data source type . gauge )  public int   (  )  {  return this . get connections in pool (  )  ;   }  ",147,3,count,3,[31]
1733,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\NamedConnectionPool.java,get created entry count,public final long   (  )  {  return create entry counter . get value (  )  . long value (  )  ;   }  ,101,4,get,1,[59]
1734,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\NamedConnectionPool.java,get created entry count,public final long   (  )  {  return create entry counter . get value (  )  . long value (  )  ;   }  ,101,4,created,2,[]
1735,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\NamedConnectionPool.java,get created entry count,public final long   (  )  {  return create entry counter . get value (  )  . long value (  )  ;   }  ,101,4,entry,3,[43]
1736,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\NamedConnectionPool.java,get created entry count,public final long   (  )  {  return create entry counter . get value (  )  . long value (  )  ;   }  ,101,4,count,4,[49]
1737,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\NamedConnectionPool.java,get delete count,public final long   (  )  {  return delete counter . get value (  )  . long value (  )  ;   }  ,95,3,get,1,[53]
1738,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\NamedConnectionPool.java,get delete count,public final long   (  )  {  return delete counter . get value (  )  . long value (  )  ;   }  ,95,3,delete,2,[36]
1739,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\NamedConnectionPool.java,get delete count,public final long   (  )  {  return delete counter . get value (  )  . long value (  )  ;   }  ,95,3,count,3,[43]
1740,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\NamedConnectionPool.java,get entry blocking,@ override protected  basic pool entry   (  http route route  object state long timeout  time unit tunit  waiting thread aborter aborter )  throws  connection pool timeout exception   interrupted exception  {   stopwatch stop watch = request timer . start,255,3,get,1,[]
1741,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\NamedConnectionPool.java,get entry blocking,@ override protected  basic pool entry   (  http route route  object state long timeout  time unit tunit  waiting thread aborter aborter )  throws  connection pool timeout exception   interrupted exception  {   stopwatch stop watch = request timer . start,255,3,entry,2,[33]
1742,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\NamedConnectionPool.java,get entry blocking,@ override protected  basic pool entry   (  http route route  object state long timeout  time unit tunit  waiting thread aborter aborter )  throws  connection pool timeout exception   interrupted exception  {   stopwatch stop watch = request timer . start,255,3,blocking,3,[]
1743,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\NamedConnectionPool.java,get free entry,@ override protected  basic pool entry   (  route specific pool rospl  object state )  {   basic pool entry entry = super . get free entry ( rospl state )  ;  if  ( entry  !  =  null )   {  free entry counter . increment (  )  ;   }  return entry ;   }  ,254,3,get,1,[124]
1744,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\NamedConnectionPool.java,get free entry,@ override protected  basic pool entry   (  route specific pool rospl  object state )  {   basic pool entry entry = super . get free entry ( rospl state )  ;  if  ( entry  !  =  null )   {  free entry counter . increment (  )  ;   }  return entry ;   }  ,254,3,free,2,"[128, 190]"
1745,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\NamedConnectionPool.java,get free entry,@ override protected  basic pool entry   (  route specific pool rospl  object state )  {   basic pool entry entry = super . get free entry ( rospl state )  ;  if  ( entry  !  =  null )   {  free entry counter . increment (  )  ;   }  return entry ;   }  ,254,3,entry,3,"[33, 102, 108, 133, 165, 195, 241]"
1746,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\NamedConnectionPool.java,get free entry count,public final long   (  )  {  return free entry counter . get value (  )  . long value (  )  ;   }  ,99,4,get,1,[57]
1747,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\NamedConnectionPool.java,get free entry count,public final long   (  )  {  return free entry counter . get value (  )  . long value (  )  ;   }  ,99,4,free,2,[36]
1748,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\NamedConnectionPool.java,get free entry count,public final long   (  )  {  return free entry counter . get value (  )  . long value (  )  ;   }  ,99,4,entry,3,[41]
1749,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\NamedConnectionPool.java,get free entry count,public final long   (  )  {  return free entry counter . get value (  )  . long value (  )  ;   }  ,99,4,count,4,[47]
1750,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\NamedConnectionPool.java,get release count,public final long   (  )  {  return release counter . get value (  )  . long value (  )  ;   }  ,96,3,get,1,[54]
1751,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\NamedConnectionPool.java,get release count,public final long   (  )  {  return release counter . get value (  )  . long value (  )  ;   }  ,96,3,release,2,[36]
1752,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\NamedConnectionPool.java,get release count,public final long   (  )  {  return release counter . get value (  )  . long value (  )  ;   }  ,96,3,count,3,[44]
1753,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\NamedConnectionPool.java,get requests count,public final long   (  )  {  return request counter . get value (  )  . long value (  )  ;   }  ,96,3,get,1,[54]
1754,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\NamedConnectionPool.java,get requests count,public final long   (  )  {  return request counter . get value (  )  . long value (  )  ;   }  ,96,3,requests,2,[]
1755,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\NamedConnectionPool.java,get requests count,public final long   (  )  {  return request counter . get value (  )  . long value (  )  ;   }  ,96,3,count,3,[44]
1756,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\NamedConnectionPool.java,init monitors,"void   (  string name )  {   preconditions . check not null ( name )  ;  free entry counter =  monitors . new counter ( name  +  ""    reuse"" )  ;  create entry counter =  monitors . new counter ( name  +  ""    create new"" )  ;  request counter =  monitors . new counter ( name  +  ""    request"" )  ;  release counter =  monitors . new counter ( name  +  ""    release"" )  ;  delete counter =  monitors . new counter ( name  +  ""    delete"" )  ;  request timer =  monitors . new timer ( name  +  ""    request connection timer""  time unit . milliseconds )  ;  creation timer =  monitors . new timer ( name  +  ""    create connection timer""  time unit . milliseconds )  ;  this . name = name ;   monitors . register object ( name this )  ;   }  ",741,2,init,1,[]
1757,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\NamedConnectionPool.java,init monitors,"void   (  string name )  {   preconditions . check not null ( name )  ;  free entry counter =  monitors . new counter ( name  +  ""    reuse"" )  ;  create entry counter =  monitors . new counter ( name  +  ""    create new"" )  ;  request counter =  monitors . new counter ( name  +  ""    request"" )  ;  release counter =  monitors . new counter ( name  +  ""    release"" )  ;  delete counter =  monitors . new counter ( name  +  ""    delete"" )  ;  request timer =  monitors . new timer ( name  +  ""    request connection timer""  time unit . milliseconds )  ;  creation timer =  monitors . new timer ( name  +  ""    create connection timer""  time unit . milliseconds )  ;  this . name = name ;   monitors . register object ( name this )  ;   }  ",741,2,monitors,2,"[95, 171, 247, 320, 392, 462, 575, 692]"
1758,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\NamedConnectionPool.java,request pool entry,@ override public  pool entry request   (  http route route  object state )  {  request counter . increment (  )  ;  return super . request pool entry ( route state )  ;   }  ,175,3,request,1,"[30, 80, 132]"
1759,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\NamedConnectionPool.java,request pool entry,@ override public  pool entry request   (  http route route  object state )  {  request counter . increment (  )  ;  return super . request pool entry ( route state )  ;   }  ,175,3,pool,2,"[19, 140]"
1760,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\NamedConnectionPool.java,request pool entry,@ override public  pool entry request   (  http route route  object state )  {  request counter . increment (  )  ;  return super . request pool entry ( route state )  ;   }  ,175,3,entry,3,"[24, 145]"
1761,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\NamedConnectionPool.java,shutdown,@ override public void   (  )  {  super . shutdown (  )  ;  if  (  monitors . is object registered ( name this )  )   {   monitors . unregister object ( name this )  ;   }   }  ,177,1,shutdown,1,[42]
1762,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\aws\AwsEndpoint.java, aws endpoint,public   (  string host name int port boolean is secure  string relative uri  string region  string zone )  {  super ( host name port is secure relative uri )  ;  this . region = region ;  this . zone = zone ;   }  ,215,2,aws,1,[]
1763,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\aws\AwsEndpoint.java, aws endpoint,public   (  string host name int port boolean is secure  string relative uri  string region  string zone )  {  super ( host name port is secure relative uri )  ;  this . region = region ;  this . zone = zone ;   }  ,215,2,endpoint,2,[]
1764,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\aws\AwsEndpoint.java,create for server list,public static  list <  aws endpoint >    (  list <  string >  host names int port boolean is secure  string relative uri  string region  string zone )  {  if  ( host names . is empty (  )  )   {  return  collections . empty list (  )  ;   }   list <  aws endpoint >  aws endpoints = new  array list <  >  ( host names . size (  )  )  ;  for  (   string host name : host names )   {  aws endpoints . add ( new  aws endpoint ( host name port is secure relative uri region zone )  )  ;   }  return aws endpoints ;   }  ,516,4,create,1,[]
1765,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\aws\AwsEndpoint.java,create for server list,public static  list <  aws endpoint >    (  list <  string >  host names int port boolean is secure  string relative uri  string region  string zone )  {  if  ( host names . is empty (  )  )   {  return  collections . empty list (  )  ;   }   list <  aws endpoint >  aws endpoints = new  array list <  >  ( host names . size (  )  )  ;  for  (   string host name : host names )   {  aws endpoints . add ( new  aws endpoint ( host name port is secure relative uri region zone )  )  ;   }  return aws endpoints ;   }  ,516,4,for,2,[337]
1766,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\aws\AwsEndpoint.java,create for server list,public static  list <  aws endpoint >    (  list <  string >  host names int port boolean is secure  string relative uri  string region  string zone )  {  if  ( host names . is empty (  )  )   {  return  collections . empty list (  )  ;   }   list <  aws endpoint >  aws endpoints = new  array list <  >  ( host names . size (  )  )  ;  for  (   string host name : host names )   {  aws endpoints . add ( new  aws endpoint ( host name port is secure relative uri region zone )  )  ;   }  return aws endpoints ;   }  ,516,4,server,3,[]
1767,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\aws\AwsEndpoint.java,create for server list,public static  list <  aws endpoint >    (  list <  string >  host names int port boolean is secure  string relative uri  string region  string zone )  {  if  ( host names . is empty (  )  )   {  return  collections . empty list (  )  ;   }   list <  aws endpoint >  aws endpoints = new  array list <  >  ( host names . size (  )  )  ;  for  (   string host name : host names )   {  aws endpoints . add ( new  aws endpoint ( host name port is secure relative uri region zone )  )  ;   }  return aws endpoints ;   }  ,516,4,list,4,"[15, 44, 224, 243, 294]"
1768,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\aws\AwsEndpoint.java,equals,@ override public boolean   (  object o )  {  if  ( this  =  =  o )  return true ;  if  (  !  ( o instanceof  aws endpoint )  )  return false ;  if  (  ! super . equals ( o )  )  return false ;   aws endpoint that =  (  aws endpoint ) o ;  if  ( region  !,255,1,equals,1,[162]
1769,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\aws\AwsEndpoint.java,get region,public  string   (  )  {  return region ;   }  ,47,2,get,1,[]
1770,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\aws\AwsEndpoint.java,get region,public  string   (  )  {  return region ;   }  ,47,2,region,2,[33]
1771,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\aws\AwsEndpoint.java,get zone,public  string   (  )  {  return zone ;   }  ,45,2,get,1,[]
1772,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\aws\AwsEndpoint.java,get zone,public  string   (  )  {  return zone ;   }  ,45,2,zone,2,[33]
1773,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\aws\AwsEndpoint.java,hash code,@ override public int   (  )  {  int result = super . hash code (  )  ;  result = 31 * result  +   ( zone  !  =  null  ?  zone . hash code (  )  : 0 )  ;  result = 31 * result  +   ( region  !  =  null  ?  region . hash code (  )  : 0 )  ;  return result ,255,2,hash,1,"[54, 129, 215]"
1774,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\aws\AwsEndpoint.java,hash code,@ override public int   (  )  {  int result = super . hash code (  )  ;  result = 31 * result  +   ( zone  !  =  null  ?  zone . hash code (  )  : 0 )  ;  result = 31 * result  +   ( region  !  =  null  ?  region . hash code (  )  : 0 )  ;  return result ,255,2,code,2,"[59, 134, 220]"
1775,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\aws\AwsEndpoint.java,to string,"@ override public  string   (  )  {  return "" aws endpoint {  service url = '""  +  service url  +  '\'' +  ""  region = '"" +  region +  '\'' +  ""  zone = '"" +  zone +  '\'' +  ' } ' ;   }  ",188,2,to,1,[]
1776,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\aws\AwsEndpoint.java,to string,"@ override public  string   (  )  {  return "" aws endpoint {  service url = '""  +  service url  +  '\'' +  ""  region = '"" +  region +  '\'' +  ""  zone = '"" +  zone +  '\'' +  ' } ' ;   }  ",188,2,string,2,[19]
1777,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\aws\ConfigClusterResolver.java, config cluster resolver,public   (  eureka client config client config  instance info my instance info )  {  this . client config = client config ;  this . my instance info = my instance info ;   }  ,175,3,config,1,"[26, 40, 99, 115]"
1778,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\aws\ConfigClusterResolver.java, config cluster resolver,public   (  eureka client config client config  instance info my instance info )  {  this . client config = client config ;  this . my instance info = my instance info ;   }  ,175,3,cluster,2,[]
1779,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\aws\ConfigClusterResolver.java, config cluster resolver,public   (  eureka client config client config  instance info my instance info )  {  this . client config = client config ;  this . my instance info = my instance info ;   }  ,175,3,resolver,3,[]
1780,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\aws\ConfigClusterResolver.java,get cluster endpoints,"@ override public  list <  aws endpoint >    (  )  {  if  ( client config . should use dns for fetching service urls (  )  )   {  if  ( logger . is info enabled (  )  )   {  logger . info ( "" resolving eureka endpoints via dns:  {  } "" getdns name (  )  )",255,3,get,1,[236]
1781,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\aws\ConfigClusterResolver.java,get cluster endpoints,"@ override public  list <  aws endpoint >    (  )  {  if  ( client config . should use dns for fetching service urls (  )  )   {  if  ( logger . is info enabled (  )  )   {  logger . info ( "" resolving eureka endpoints via dns:  {  } "" getdns name (  )  )",255,3,cluster,2,[]
1782,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\aws\ConfigClusterResolver.java,get cluster endpoints,"@ override public  list <  aws endpoint >    (  )  {  if  ( client config . should use dns for fetching service urls (  )  )   {  if  ( logger . is info enabled (  )  )   {  logger . info ( "" resolving eureka endpoints via dns:  {  } "" getdns name (  )  )",255,3,endpoints,3,[209]
1783,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\aws\ConfigClusterResolver.java,get cluster endpoints from config,"private  list <  aws endpoint >    (  )  {   string[] avail zones = client config . get availability zones ( client config . get region (  )  )  ;   string my zone =  instance info . get zone ( avail zones my instance info )  ;   map <  string  list <  string >  >  service urls =  endpoint utils . get service urls map from config ( client config my zone client config . should prefer same zone eureka (  )  )  ;   list <  aws endpoint >  endpoints = new  array list <  >  (  )  ;  for  (   string zone : service urls . key set (  )  )   {  for  (   string url : service urls . get ( zone )  )   {  try  {  endpoints . add ( new  aws endpoint ( url get region (  )  zone )  )  ;   }  catch  (   exception ignore )   {  logger . warn ( "" invalid eureka server uri:  {  }  ;  removing from the server pool"" url )  ;   }   }   }  logger . debug ( "" config resolved to  {  } "" endpoints )  ;  if  ( endpoints . is empty (  )  )   {  logger . error ( "" cannot resolve to any endpoints from provided configuration:  {  } "" service urls )  ;   }  return endpoints ;   }  ",1065,5,get,1,"[84, 125, 183, 299, 579, 650]"
1784,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\aws\ConfigClusterResolver.java,get cluster endpoints from config,"private  list <  aws endpoint >    (  )  {   string[] avail zones = client config . get availability zones ( client config . get region (  )  )  ;   string my zone =  instance info . get zone ( avail zones my instance info )  ;   map <  string  list <  string >  >  service urls =  endpoint utils . get service urls map from config ( client config my zone client config . should prefer same zone eureka (  )  )  ;   list <  aws endpoint >  endpoints = new  array list <  >  (  )  ;  for  (   string zone : service urls . key set (  )  )   {  for  (   string url : service urls . get ( zone )  )   {  try  {  endpoints . add ( new  aws endpoint ( url get region (  )  zone )  )  ;   }  catch  (   exception ignore )   {  logger . warn ( "" invalid eureka server uri:  {  }  ;  removing from the server pool"" url )  ;   }   }   }  logger . debug ( "" config resolved to  {  } "" endpoints )  ;  if  ( endpoints . is empty (  )  )   {  logger . error ( "" cannot resolve to any endpoints from provided configuration:  {  } "" service urls )  ;   }  return endpoints ;   }  ",1065,5,cluster,2,[]
1785,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\aws\ConfigClusterResolver.java,get cluster endpoints from config,"private  list <  aws endpoint >    (  )  {   string[] avail zones = client config . get availability zones ( client config . get region (  )  )  ;   string my zone =  instance info . get zone ( avail zones my instance info )  ;   map <  string  list <  string >  >  service urls =  endpoint utils . get service urls map from config ( client config my zone client config . should prefer same zone eureka (  )  )  ;   list <  aws endpoint >  endpoints = new  array list <  >  (  )  ;  for  (   string zone : service urls . key set (  )  )   {  for  (   string url : service urls . get ( zone )  )   {  try  {  endpoints . add ( new  aws endpoint ( url get region (  )  zone )  )  ;   }  catch  (   exception ignore )   {  logger . warn ( "" invalid eureka server uri:  {  }  ;  removing from the server pool"" url )  ;   }   }   }  logger . debug ( "" config resolved to  {  } "" endpoints )  ;  if  ( endpoints . is empty (  )  )   {  logger . error ( "" cannot resolve to any endpoints from provided configuration:  {  } "" service urls )  ;   }  return endpoints ;   }  ",1065,5,endpoints,3,"[440, 608, 874, 896, 971, 1048]"
1786,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\aws\ConfigClusterResolver.java,get cluster endpoints from config,"private  list <  aws endpoint >    (  )  {   string[] avail zones = client config . get availability zones ( client config . get region (  )  )  ;   string my zone =  instance info . get zone ( avail zones my instance info )  ;   map <  string  list <  string >  >  service urls =  endpoint utils . get service urls map from config ( client config my zone client config . should prefer same zone eureka (  )  )  ;   list <  aws endpoint >  endpoints = new  array list <  >  (  )  ;  for  (   string zone : service urls . key set (  )  )   {  for  (   string url : service urls . get ( zone )  )   {  try  {  endpoints . add ( new  aws endpoint ( url get region (  )  zone )  )  ;   }  catch  (   exception ignore )   {  logger . warn ( "" invalid eureka server uri:  {  }  ;  removing from the server pool"" url )  ;   }   }   }  logger . debug ( "" config resolved to  {  } "" endpoints )  ;  if  ( endpoints . is empty (  )  )   {  logger . error ( "" cannot resolve to any endpoints from provided configuration:  {  } "" service urls )  ;   }  return endpoints ;   }  ",1065,5,from,4,"[320, 784, 981]"
1787,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\aws\ConfigClusterResolver.java,get cluster endpoints from config,"private  list <  aws endpoint >    (  )  {   string[] avail zones = client config . get availability zones ( client config . get region (  )  )  ;   string my zone =  instance info . get zone ( avail zones my instance info )  ;   map <  string  list <  string >  >  service urls =  endpoint utils . get service urls map from config ( client config my zone client config . should prefer same zone eureka (  )  )  ;   list <  aws endpoint >  endpoints = new  array list <  >  (  )  ;  for  (   string zone : service urls . key set (  )  )   {  for  (   string url : service urls . get ( zone )  )   {  try  {  endpoints . add ( new  aws endpoint ( url get region (  )  zone )  )  ;   }  catch  (   exception ignore )   {  logger . warn ( "" invalid eureka server uri:  {  }  ;  removing from the server pool"" url )  ;   }   }   }  logger . debug ( "" config resolved to  {  } "" endpoints )  ;  if  ( endpoints . is empty (  )  )   {  logger . error ( "" cannot resolve to any endpoints from provided configuration:  {  } "" service urls )  ;   }  return endpoints ;   }  ",1065,5,config,5,"[75, 116, 325, 341, 363, 847, 995]"
1788,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\aws\ConfigClusterResolver.java,get cluster endpoints from dns,"private  list <  aws endpoint >    (  )  {   string discovery dns name = getdns name (  )  ;  int port =  integer . parse int ( client config . get eureka server port (  )  )  ;   dns txt record cluster resolver dns resolver = new  dns txt record cluster resolver ( get region (  )  discovery dns name true port false client config . get eureka serverurl context (  )  )  ;   list <  aws endpoint >  endpoints = dns resolver . get cluster endpoints (  )  ;  if  ( endpoints . is empty (  )  )   {  logger . error ( "" cannot resolve to any endpoints for the given dns name:  {  } "" discovery dns name )  ;   }  return endpoints ;   }  ",634,5,get,1,"[73, 144, 266, 334, 427]"
1789,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\aws\ConfigClusterResolver.java,get cluster endpoints from dns,"private  list <  aws endpoint >    (  )  {   string discovery dns name = getdns name (  )  ;  int port =  integer . parse int ( client config . get eureka server port (  )  )  ;   dns txt record cluster resolver dns resolver = new  dns txt record cluster resolver ( get region (  )  discovery dns name true port false client config . get eureka serverurl context (  )  )  ;   list <  aws endpoint >  endpoints = dns resolver . get cluster endpoints (  )  ;  if  ( endpoints . is empty (  )  )   {  logger . error ( "" cannot resolve to any endpoints for the given dns name:  {  } "" discovery dns name )  ;   }  return endpoints ;   }  ",634,5,cluster,2,"[195, 247, 431]"
1790,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\aws\ConfigClusterResolver.java,get cluster endpoints from dns,"private  list <  aws endpoint >    (  )  {   string discovery dns name = getdns name (  )  ;  int port =  integer . parse int ( client config . get eureka server port (  )  )  ;   dns txt record cluster resolver dns resolver = new  dns txt record cluster resolver ( get region (  )  discovery dns name true port false client config . get eureka serverurl context (  )  )  ;   list <  aws endpoint >  endpoints = dns resolver . get cluster endpoints (  )  ;  if  ( endpoints . is empty (  )  )   {  logger . error ( "" cannot resolve to any endpoints for the given dns name:  {  } "" discovery dns name )  ;   }  return endpoints ;   }  ",634,5,endpoints,3,"[400, 439, 464, 539, 617]"
1791,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\aws\ConfigClusterResolver.java,get cluster endpoints from dns,"private  list <  aws endpoint >    (  )  {   string discovery dns name = getdns name (  )  ;  int port =  integer . parse int ( client config . get eureka server port (  )  )  ;   dns txt record cluster resolver dns resolver = new  dns txt record cluster resolver ( get region (  )  discovery dns name true port false client config . get eureka serverurl context (  )  )  ;   list <  aws endpoint >  endpoints = dns resolver . get cluster endpoints (  )  ;  if  ( endpoints . is empty (  )  )   {  logger . error ( "" cannot resolve to any endpoints for the given dns name:  {  } "" discovery dns name )  ;   }  return endpoints ;   }  ",634,5,from,4,[]
1792,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\aws\ConfigClusterResolver.java,get cluster endpoints from dns,"private  list <  aws endpoint >    (  )  {   string discovery dns name = getdns name (  )  ;  int port =  integer . parse int ( client config . get eureka server port (  )  )  ;   dns txt record cluster resolver dns resolver = new  dns txt record cluster resolver ( get region (  )  discovery dns name true port false client config . get eureka serverurl context (  )  )  ;   list <  aws endpoint >  endpoints = dns resolver . get cluster endpoints (  )  ;  if  ( endpoints . is empty (  )  )   {  logger . error ( "" cannot resolve to any endpoints for the given dns name:  {  } "" discovery dns name )  ;   }  return endpoints ;   }  ",634,5,dns,5,"[62, 76, 180, 212, 232, 293, 412, 563, 591]"
1793,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\aws\ConfigClusterResolver.java,getdns name,"private  string   (  )  {  return ""txt . ""  +  get region (  )   +  ' . ' +  client config . get eureka serverdns name (  )  ;   }  ",132,2,getdns,1,[]
1794,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\aws\ConfigClusterResolver.java,getdns name,"private  string   (  )  {  return ""txt . ""  +  get region (  )   +  ' . ' +  client config . get eureka serverdns name (  )  ;   }  ",132,2,name,2,[114]
1795,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\aws\ConfigClusterResolver.java,get region,@ override public  string   (  )  {  return client config . get region (  )  ;   }  ,84,2,get,1,[60]
1796,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\aws\ConfigClusterResolver.java,get region,@ override public  string   (  )  {  return client config . get region (  )  ;   }  ,84,2,region,2,[64]
1797,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\aws\DnsTxtRecordClusterResolver.java, dns txt record cluster resolver,public   (  string region  string root clusterdns boolean extract zone fromdns int port boolean is secure  string relative uri )  {  this . region = region ;  this . root clusterdns = root clusterdns ;  this . extract zone fromdns = extract zone fromdns ;  this . port = port ;  this . is secure = is secure ;  this . relative uri = relative uri ;   }  ,353,5,dns,1,"[46, 75, 178, 196, 227, 250]"
1798,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\aws\DnsTxtRecordClusterResolver.java, dns txt record cluster resolver,public   (  string region  string root clusterdns boolean extract zone fromdns int port boolean is secure  string relative uri )  {  this . region = region ;  this . root clusterdns = root clusterdns ;  this . extract zone fromdns = extract zone fromdns ;  this . port = port ;  this . is secure = is secure ;  this . relative uri = relative uri ;   }  ,353,5,txt,2,[]
1799,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\aws\DnsTxtRecordClusterResolver.java, dns txt record cluster resolver,public   (  string region  string root clusterdns boolean extract zone fromdns int port boolean is secure  string relative uri )  {  this . region = region ;  this . root clusterdns = root clusterdns ;  this . extract zone fromdns = extract zone fromdns ;  this . port = port ;  this . is secure = is secure ;  this . relative uri = relative uri ;   }  ,353,5,record,3,[]
1800,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\aws\DnsTxtRecordClusterResolver.java, dns txt record cluster resolver,public   (  string region  string root clusterdns boolean extract zone fromdns int port boolean is secure  string relative uri )  {  this . region = region ;  this . root clusterdns = root clusterdns ;  this . extract zone fromdns = extract zone fromdns ;  this . port = port ;  this . is secure = is secure ;  this . relative uri = relative uri ;   }  ,353,5,cluster,4,"[39, 171, 189]"
1801,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\aws\DnsTxtRecordClusterResolver.java, dns txt record cluster resolver,public   (  string region  string root clusterdns boolean extract zone fromdns int port boolean is secure  string relative uri )  {  this . region = region ;  this . root clusterdns = root clusterdns ;  this . extract zone fromdns = extract zone fromdns ;  this . port = port ;  this . is secure = is secure ;  this . relative uri = relative uri ;   }  ,353,5,resolver,5,[]
1802,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\aws\DnsTxtRecordClusterResolver.java,get cluster endpoints,"@ override public  list <  aws endpoint >    (  )  {   list <  aws endpoint >  eureka endpoints = resolve ( region root clusterdns extract zone fromdns port is secure relative uri )  ;  logger . debug ( "" resolved  {  }  to  {  } "" root clusterdns eureka ",255,3,get,1,[]
1803,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\aws\DnsTxtRecordClusterResolver.java,get cluster endpoints,"@ override public  list <  aws endpoint >    (  )  {   list <  aws endpoint >  eureka endpoints = resolve ( region root clusterdns extract zone fromdns port is secure relative uri )  ;  logger . debug ( "" resolved  {  }  to  {  } "" root clusterdns eureka ",255,3,cluster,2,"[120, 237]"
1804,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\aws\DnsTxtRecordClusterResolver.java,get cluster endpoints,"@ override public  list <  aws endpoint >    (  )  {   list <  aws endpoint >  eureka endpoints = resolve ( region root clusterdns extract zone fromdns port is secure relative uri )  ;  logger . debug ( "" resolved  {  }  to  {  } "" root clusterdns eureka ",255,3,endpoints,3,[86]
1805,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\aws\DnsTxtRecordClusterResolver.java,get region,@ override public  string   (  )  {  return region ;   }  ,58,2,get,1,[]
1806,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\aws\DnsTxtRecordClusterResolver.java,get region,@ override public  string   (  )  {  return region ;   }  ,58,2,region,2,[44]
1807,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\aws\DnsTxtRecordClusterResolver.java,resolve,"private static  set <  string >    (  string root clusterdns )  throws  naming exception  {   set <  string >  result ;  try  {  result =  dns resolver . getc names from txt record ( root clusterdns )  ;  if  (  ! root clusterdns . starts with ( ""txt . "" )  )   {  result =  dns resolver . getc names from txt record ( ""txt . ""  +  root clusterdns )  ;   }   }  catch  (   naming exception e )   {  if  (  ! root clusterdns . starts with ( ""txt . "" )  )   {  result =  dns resolver . getc names from txt record ( ""txt . ""  +  root clusterdns )  ;   }  else  {  throw e ;   }   }  return result ;   }  ",601,1,resolve,1,"[143, 279, 473]"
1808,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\aws\EurekaHttpResolver.java, eureka http resolver,  (  eureka client config client config  eureka transport config transport config  eureka http client factory client factory  string vip address )  {  this . client config = client config ;  this . transport config = transport config ;  this . client factory = client factory ;  this . vip address = vip address ;   }  ,319,3,eureka,1,"[5, 41, 83]"
1809,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\aws\EurekaHttpResolver.java, eureka http resolver,  (  eureka client config client config  eureka transport config transport config  eureka http client factory client factory  string vip address )  {  this . client config = client config ;  this . transport config = transport config ;  this . client factory = client factory ;  this . vip address = vip address ;   }  ,319,3,http,2,[90]
1810,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\aws\EurekaHttpResolver.java, eureka http resolver,  (  eureka client config client config  eureka transport config transport config  eureka http client factory client factory  string vip address )  {  this . client config = client config ;  this . transport config = transport config ;  this . client factory = client factory ;  this . vip address = vip address ;   }  ,319,3,resolver,3,[]
1811,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\aws\EurekaHttpResolver.java,get cluster endpoints,@ override public  list <  aws endpoint >    (  )  {   list <  aws endpoint >  result = new  array list <  >  (  )  ;   eureka http client client = null ;  try  {  client = client factory . new client (  )  ;   eureka http response <  applications >  resp,255,3,get,1,[]
1812,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\aws\EurekaHttpResolver.java,get cluster endpoints,@ override public  list <  aws endpoint >    (  )  {   list <  aws endpoint >  result = new  array list <  >  (  )  ;   eureka http client client = null ;  try  {  client = client factory . new client (  )  ;   eureka http response <  applications >  resp,255,3,cluster,2,[]
1813,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\aws\EurekaHttpResolver.java,get cluster endpoints,@ override public  list <  aws endpoint >    (  )  {   list <  aws endpoint >  result = new  array list <  >  (  )  ;   eureka http client client = null ;  try  {  client = client factory . new client (  )  ;   eureka http response <  applications >  resp,255,3,endpoints,3,[]
1814,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\aws\EurekaHttpResolver.java,get region,@ override public  string   (  )  {  return client config . get region (  )  ;   }  ,84,2,get,1,[60]
1815,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\aws\EurekaHttpResolver.java,get region,@ override public  string   (  )  {  return client config . get region (  )  ;   }  ,84,2,region,2,[64]
1816,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\aws\EurekaHttpResolver.java,valid response,private  < t > boolean   (  eureka http response < t >  response )  {  if  ( response  =  =  null )   {  return false ;   }  int response code = response . get status code (  )  ;  return response code  >  =  200 && response code  <  300 ;   }  ,245,2,valid,1,[]
1817,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\aws\EurekaHttpResolver.java,valid response,private  < t > boolean   (  eureka http response < t >  response )  {  if  ( response  =  =  null )   {  return false ;   }  int response code = response . get status code (  )  ;  return response code  >  =  200 && response code  <  300 ;   }  ,245,2,response,2,"[40, 56, 77, 129, 145, 188, 216]"
1818,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\aws\ZoneAffinityClusterResolver.java, zone affinity cluster resolver,public   (  cluster resolver <  aws endpoint >  delegate  string my zone boolean zone affinity )  {  this . delegate = delegate ;  this . my zone = my zone ;  this . zone affinity = zone affinity ;   }  ,203,4,zone,1,"[68, 81, 141, 151, 166, 182]"
1819,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\aws\ZoneAffinityClusterResolver.java, zone affinity cluster resolver,public   (  cluster resolver <  aws endpoint >  delegate  string my zone boolean zone affinity )  {  this . delegate = delegate ;  this . my zone = my zone ;  this . zone affinity = zone affinity ;   }  ,203,4,affinity,2,"[86, 171, 187]"
1820,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\aws\ZoneAffinityClusterResolver.java, zone affinity cluster resolver,public   (  cluster resolver <  aws endpoint >  delegate  string my zone boolean zone affinity )  {  this . delegate = delegate ;  this . my zone = my zone ;  this . zone affinity = zone affinity ;   }  ,203,4,cluster,3,[12]
1821,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\aws\ZoneAffinityClusterResolver.java, zone affinity cluster resolver,public   (  cluster resolver <  aws endpoint >  delegate  string my zone boolean zone affinity )  {  this . delegate = delegate ;  this . my zone = my zone ;  this . zone affinity = zone affinity ;   }  ,203,4,resolver,4,[20]
1822,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\aws\ZoneAffinityClusterResolver.java,get cluster endpoints,@ override public  list <  aws endpoint >    (  )  {   list <  aws endpoint > [] parts =  resolver utils . split by zone ( delegate . get cluster endpoints (  )  my zone )  ;   list <  aws endpoint >  my zone endpoints = parts[0] ;   list <  aws endpoint ,255,3,get,1,[134]
1823,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\aws\ZoneAffinityClusterResolver.java,get cluster endpoints,@ override public  list <  aws endpoint >    (  )  {   list <  aws endpoint > [] parts =  resolver utils . split by zone ( delegate . get cluster endpoints (  )  my zone )  ;   list <  aws endpoint >  my zone endpoints = parts[0] ;   list <  aws endpoint ,255,3,cluster,2,[138]
1824,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\aws\ZoneAffinityClusterResolver.java,get cluster endpoints,@ override public  list <  aws endpoint >    (  )  {   list <  aws endpoint > [] parts =  resolver utils . split by zone ( delegate . get cluster endpoints (  )  my zone )  ;   list <  aws endpoint >  my zone endpoints = parts[0] ;   list <  aws endpoint ,255,3,endpoints,3,"[146, 209]"
1825,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\aws\ZoneAffinityClusterResolver.java,get region,@ override public  string   (  )  {  return delegate . get region (  )  ;   }  ,79,2,get,1,[55]
1826,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\aws\ZoneAffinityClusterResolver.java,get region,@ override public  string   (  )  {  return delegate . get region (  )  ;   }  ,79,2,region,2,[59]
1827,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\aws\ZoneAffinityClusterResolver.java,randomize and merge,private static  list <  aws endpoint >    (  list <  aws endpoint >  my zone endpoints  list <  aws endpoint >  remaining endpoints )  {  if  ( my zone endpoints . is empty (  )  )   {  return  resolver utils . randomize ( remaining endpoints )  ;   }  if  ( remaining endpoints . is empty (  )  )   {  return  resolver utils . randomize ( my zone endpoints )  ;   }   list <  aws endpoint >  merged list =  resolver utils . randomize ( my zone endpoints )  ;  merged list . add all (  resolver utils . randomize ( remaining endpoints )  )  ;  return merged list ;   }  ,570,3,randomize,1,"[211, 328, 425, 503]"
1828,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\aws\ZoneAffinityClusterResolver.java,randomize and merge,private static  list <  aws endpoint >    (  list <  aws endpoint >  my zone endpoints  list <  aws endpoint >  remaining endpoints )  {  if  ( my zone endpoints . is empty (  )  )   {  return  resolver utils . randomize ( remaining endpoints )  ;   }  if  ( remaining endpoints . is empty (  )  )   {  return  resolver utils . randomize ( my zone endpoints )  ;   }   list <  aws endpoint >  merged list =  resolver utils . randomize ( my zone endpoints )  ;  merged list . add all (  resolver utils . randomize ( remaining endpoints )  )  ;  return merged list ;   }  ,570,3,and,2,"[212, 329, 426, 504]"
1829,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\aws\ZoneAffinityClusterResolver.java,randomize and merge,private static  list <  aws endpoint >    (  list <  aws endpoint >  my zone endpoints  list <  aws endpoint >  remaining endpoints )  {  if  ( my zone endpoints . is empty (  )  )   {  return  resolver utils . randomize ( remaining endpoints )  ;   }  if  ( remaining endpoints . is empty (  )  )   {  return  resolver utils . randomize ( my zone endpoints )  ;   }   list <  aws endpoint >  merged list =  resolver utils . randomize ( my zone endpoints )  ;  merged list . add all (  resolver utils . randomize ( remaining endpoints )  )  ;  return merged list ;   }  ,570,3,merge,3,"[393, 461, 551]"
1830,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\ClusterResolverException.java, cluster resolver exception,public   (  string message  throwable cause )  {  super ( message cause )  ;   }  ,82,3,cluster,1,[]
1831,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\ClusterResolverException.java, cluster resolver exception,public   (  string message  throwable cause )  {  super ( message cause )  ;   }  ,82,3,resolver,2,[]
1832,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\ClusterResolverException.java, cluster resolver exception,public   (  string message  throwable cause )  {  super ( message cause )  ;   }  ,82,3,exception,3,[]
1833,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\DefaultEndpoint.java, default endpoint,"public   (  string network address int port boolean is secure  string relative uri )  {  this . network address = network address ;  this . port = port ;  this . is secure = is secure ;  this . relative uri = relative uri ;   string builder sb = new  string builder (  )  . append ( is secure  ?  ""https"" : ""http"" )  . append ( "": /  / "" )  . append ( network address )  ;  if  ( port  >  =  0 )   {  sb . append ( ':' )  . append ( port )  ;   }  if  ( relative uri  !  =  null )   {  if  (  ! relative uri . starts with ( "" / "" )  )   {  sb . append ( ' / ' )  ;   }  sb . append ( relative uri )  ;   }  this . service url = sb . to string (  )  ;   }  ",656,2,default,1,[]
1834,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\DefaultEndpoint.java, default endpoint,"public   (  string network address int port boolean is secure  string relative uri )  {  this . network address = network address ;  this . port = port ;  this . is secure = is secure ;  this . relative uri = relative uri ;   string builder sb = new  string builder (  )  . append ( is secure  ?  ""https"" : ""http"" )  . append ( "": /  / "" )  . append ( network address )  ;  if  ( port  >  =  0 )   {  sb . append ( ':' )  . append ( port )  ;   }  if  ( relative uri  !  =  null )   {  if  (  ! relative uri . starts with ( "" / "" )  )   {  sb . append ( ' / ' )  ;   }  sb . append ( relative uri )  ;   }  this . service url = sb . to string (  )  ;   }  ",656,2,endpoint,2,[]
1835,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\DefaultEndpoint.java,compare to,@ override public int   (  object that )  {  return service url . compare to (  (  (  default endpoint ) that )  . get service url (  )  )  ;   }  ,147,2,compare,1,[66]
1836,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\DefaultEndpoint.java,compare to,@ override public int   (  object that )  {  return service url . compare to (  (  (  default endpoint ) that )  . get service url (  )  )  ;   }  ,147,2,to,2,[74]
1837,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\DefaultEndpoint.java,create for server list,public static  list <  eureka endpoint >    (  list <  string >  host names int port boolean is secure  string relative uri )  {  if  ( host names . is empty (  )  )   {  return  collections . empty list (  )  ;   }   list <  eureka endpoint >  eureka endpoints = new  array list <  >  ( host names . size (  )  )  ;  for  (   string host name : host names )   {  eureka endpoints . add ( new  default endpoint ( host name port is secure relative uri )  )  ;   }  return eureka endpoints ;   }  ,495,4,create,1,[]
1838,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\DefaultEndpoint.java,create for server list,public static  list <  eureka endpoint >    (  list <  string >  host names int port boolean is secure  string relative uri )  {  if  ( host names . is empty (  )  )   {  return  collections . empty list (  )  ;   }   list <  eureka endpoint >  eureka endpoints = new  array list <  >  ( host names . size (  )  )  ;  for  (   string host name : host names )   {  eureka endpoints . add ( new  default endpoint ( host name port is secure relative uri )  )  ;   }  return eureka endpoints ;   }  ,495,4,for,2,[318]
1839,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\DefaultEndpoint.java,create for server list,public static  list <  eureka endpoint >    (  list <  string >  host names int port boolean is secure  string relative uri )  {  if  ( host names . is empty (  )  )   {  return  collections . empty list (  )  ;   }   list <  eureka endpoint >  eureka endpoints = new  array list <  >  ( host names . size (  )  )  ;  for  (   string host name : host names )   {  eureka endpoints . add ( new  default endpoint ( host name port is secure relative uri )  )  ;   }  return eureka endpoints ;   }  ,495,4,server,3,[]
1840,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\DefaultEndpoint.java,create for server list,public static  list <  eureka endpoint >    (  list <  string >  host names int port boolean is secure  string relative uri )  {  if  ( host names . is empty (  )  )   {  return  collections . empty list (  )  ;   }   list <  eureka endpoint >  eureka endpoints = new  array list <  >  ( host names . size (  )  )  ;  for  (   string host name : host names )   {  eureka endpoints . add ( new  default endpoint ( host name port is secure relative uri )  )  ;   }  return eureka endpoints ;   }  ,495,4,list,4,"[15, 47, 199, 218, 275]"
1841,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\DefaultEndpoint.java,equals,@ override public boolean   (  object o )  {  if  ( this  =  =  o )  return true ;  if  (  !  ( o instanceof  default endpoint )  )  return false ;   default endpoint that =  (  default endpoint ) o ;  if  ( is secure  !  =  that . is secure )  return fal,255,1,equals,1,[]
1842,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\DefaultEndpoint.java,get host name,@ deprecated @ override public  string   (  )  {  return network address ;   }  ,80,3,get,1,[]
1843,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\DefaultEndpoint.java,get host name,@ deprecated @ override public  string   (  )  {  return network address ;   }  ,80,3,host,2,[]
1844,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\DefaultEndpoint.java,get host name,@ deprecated @ override public  string   (  )  {  return network address ;   }  ,80,3,name,3,[]
1845,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\DefaultEndpoint.java,get network address,@ override public  string   (  )  {  return network address ;   }  ,67,3,get,1,[]
1846,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\DefaultEndpoint.java,get network address,@ override public  string   (  )  {  return network address ;   }  ,67,3,network,2,[44]
1847,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\DefaultEndpoint.java,get network address,@ override public  string   (  )  {  return network address ;   }  ,67,3,address,3,[52]
1848,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\DefaultEndpoint.java,get port,@ override public int   (  )  {  return port ;   }  ,52,2,get,1,[]
1849,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\DefaultEndpoint.java,get port,@ override public int   (  )  {  return port ;   }  ,52,2,port,2,[40]
1850,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\DefaultEndpoint.java,get relative uri,@ override public  string   (  )  {  return relative uri ;   }  ,64,3,get,1,[]
1851,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\DefaultEndpoint.java,get relative uri,@ override public  string   (  )  {  return relative uri ;   }  ,64,3,relative,2,[44]
1852,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\DefaultEndpoint.java,get relative uri,@ override public  string   (  )  {  return relative uri ;   }  ,64,3,uri,3,[53]
1853,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\DefaultEndpoint.java,get service url,@ override public  string   (  )  {  return service url ;   }  ,63,3,get,1,[]
1854,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\DefaultEndpoint.java,get service url,@ override public  string   (  )  {  return service url ;   }  ,63,3,service,2,[44]
1855,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\DefaultEndpoint.java,get service url,@ override public  string   (  )  {  return service url ;   }  ,63,3,url,3,[52]
1856,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\DefaultEndpoint.java,hash code,@ override public int   (  )  {  int result = network address  !  =  null  ?  network address . hash code (  )  : 0 ;  result = 31 * result  +  port ;  result = 31 * result  +   ( is secure  ?  1 : 0 )  ;  result = 31 * result  +   ( relative uri  !  =  n,255,2,hash,1,[96]
1857,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\DefaultEndpoint.java,hash code,@ override public int   (  )  {  int result = network address  !  =  null  ?  network address . hash code (  )  : 0 ;  result = 31 * result  +  port ;  result = 31 * result  +   ( is secure  ?  1 : 0 )  ;  result = 31 * result  +   ( relative uri  !  =  n,255,2,code,2,[101]
1858,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\DefaultEndpoint.java,is secure,@ override public boolean   (  )  {  return is secure ;   }  ,61,2,is,1,[44]
1859,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\DefaultEndpoint.java,is secure,@ override public boolean   (  )  {  return is secure ;   }  ,61,2,secure,2,[47]
1860,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\DefaultEndpoint.java,to string,"@ override public  string   (  )  {  return "" default endpoint {  service url = '""  +  service url  +  ' } ' ;   }  ",116,2,to,1,[]
1861,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\DefaultEndpoint.java,to string,"@ override public  string   (  )  {  return "" default endpoint {  service url = '""  +  service url  +  ' } ' ;   }  ",116,2,string,2,[19]
1862,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\DnsClusterResolver.java, dns cluster resolver,"public   (  dns service dns service  string region  string root clusterdns int port boolean is secure  string relative uri )  {  this . region = region ;   list <  string >  addresses = dns service . resolvea record ( root clusterdns )  ;  if  ( addresses  =  =  null )   {  this . eureka endpoints =  collections .  <  eureka endpoint > singleton list ( new  default endpoint ( root clusterdns port is secure relative uri )  )  ;   }  else  {  this . eureka endpoints =  default endpoint . create for server list ( addresses port is secure relative uri )  ;   }  logger . debug ( "" resolved  {  }  to  {  } "" root clusterdns eureka endpoints )  ;   }  ",653,3,dns,1,"[12, 24, 71, 186, 230, 391, 622]"
1863,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\DnsClusterResolver.java, dns cluster resolver,"public   (  dns service dns service  string region  string root clusterdns int port boolean is secure  string relative uri )  {  this . region = region ;   list <  string >  addresses = dns service . resolvea record ( root clusterdns )  ;  if  ( addresses  =  =  null )   {  this . eureka endpoints =  collections .  <  eureka endpoint > singleton list ( new  default endpoint ( root clusterdns port is secure relative uri )  )  ;   }  else  {  this . eureka endpoints =  default endpoint . create for server list ( addresses port is secure relative uri )  ;   }  logger . debug ( "" resolved  {  }  to  {  } "" root clusterdns eureka endpoints )  ;   }  ",653,3,cluster,2,"[64, 223, 384, 615]"
1864,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\DnsClusterResolver.java, dns cluster resolver,"public   (  dns service dns service  string region  string root clusterdns int port boolean is secure  string relative uri )  {  this . region = region ;   list <  string >  addresses = dns service . resolvea record ( root clusterdns )  ;  if  ( addresses  =  =  null )   {  this . eureka endpoints =  collections .  <  eureka endpoint > singleton list ( new  default endpoint ( root clusterdns port is secure relative uri )  )  ;   }  else  {  this . eureka endpoints =  default endpoint . create for server list ( addresses port is secure relative uri )  ;   }  logger . debug ( "" resolved  {  }  to  {  } "" root clusterdns eureka endpoints )  ;   }  ",653,3,resolver,3,[]
1865,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\DnsClusterResolver.java,get cluster endpoints,@ override public  list <  eureka endpoint >    (  )  {  return eureka endpoints ;   }  ,88,3,get,1,[]
1866,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\DnsClusterResolver.java,get cluster endpoints,@ override public  list <  eureka endpoint >    (  )  {  return eureka endpoints ;   }  ,88,3,cluster,2,[]
1867,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\DnsClusterResolver.java,get cluster endpoints,@ override public  list <  eureka endpoint >    (  )  {  return eureka endpoints ;   }  ,88,3,endpoints,3,[71]
1868,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\DnsClusterResolver.java,get region,@ override public  string   (  )  {  return region ;   }  ,58,2,get,1,[]
1869,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\DnsClusterResolver.java,get region,@ override public  string   (  )  {  return region ;   }  ,58,2,region,2,[44]
1870,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\LegacyClusterResolver.java, legacy cluster resolver,public   (  eureka client config client config  string my zone )  {  this . delegate = new  reloading cluster resolver <  >  ( new  legacy cluster resolver factory ( client config my zone )  client config . get eureka service url poll interval seconds (  )  * 1000 )  ;   }  ,275,3,legacy,1,[132]
1871,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\LegacyClusterResolver.java, legacy cluster resolver,public   (  eureka client config client config  string my zone )  {  this . delegate = new  reloading cluster resolver <  >  ( new  legacy cluster resolver factory ( client config my zone )  client config . get eureka service url poll interval seconds (  )  * 1000 )  ;   }  ,275,3,cluster,2,"[102, 139]"
1872,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\LegacyClusterResolver.java, legacy cluster resolver,public   (  eureka client config client config  string my zone )  {  this . delegate = new  reloading cluster resolver <  >  ( new  legacy cluster resolver factory ( client config my zone )  client config . get eureka service url poll interval seconds (  )  * 1000 )  ;   }  ,275,3,resolver,3,"[110, 147]"
1873,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\LegacyClusterResolver.java, legacy cluster resolver factory,  (  eureka client config client config  string my zone )  {  this . client config = client config ;  this . my region = client config . get region (  )  ;  this . my zone = my zone ;   }  ,189,4,legacy,1,[]
1874,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\LegacyClusterResolver.java, legacy cluster resolver factory,  (  eureka client config client config  string my zone )  {  this . client config = client config ;  this . my region = client config . get region (  )  ;  this . my zone = my zone ;   }  ,189,4,cluster,2,[]
1875,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\LegacyClusterResolver.java, legacy cluster resolver factory,  (  eureka client config client config  string my zone )  {  this . client config = client config ;  this . my region = client config . get region (  )  ;  this . my zone = my zone ;   }  ,189,4,resolver,3,[]
1876,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\LegacyClusterResolver.java, legacy cluster resolver factory,  (  eureka client config client config  string my zone )  {  this . client config = client config ;  this . my region = client config . get region (  )  ;  this . my zone = my zone ;   }  ,189,4,factory,4,[]
1877,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\LegacyClusterResolver.java,create cluster resolver,"@ override public  cluster resolver <  aws endpoint >    (  )  {   cluster resolver <  aws endpoint >  new resolver ;  if  ( client config . should use dns for fetching service urls (  )  )   {   string discovery dns name = ""txt . ""  +  my region  +  ' . ",255,3,create,1,[]
1878,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\LegacyClusterResolver.java,create cluster resolver,"@ override public  cluster resolver <  aws endpoint >    (  )  {   cluster resolver <  aws endpoint >  new resolver ;  if  ( client config . should use dns for fetching service urls (  )  )   {   string discovery dns name = ""txt . ""  +  my region  +  ' . ",255,3,cluster,2,"[19, 67]"
1879,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\LegacyClusterResolver.java,create cluster resolver,"@ override public  cluster resolver <  aws endpoint >    (  )  {   cluster resolver <  aws endpoint >  new resolver ;  if  ( client config . should use dns for fetching service urls (  )  )   {   string discovery dns name = ""txt . ""  +  my region  +  ' . ",255,3,resolver,3,"[27, 75, 107]"
1880,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\LegacyClusterResolver.java,create eureka endpoints from config,"private  list <  aws endpoint >    (  )  {   list <  string >  service urls =  endpoint utils . get service urls from config ( client config my zone client config . should prefer same zone eureka (  )  )  ;   list <  aws endpoint >  endpoints = new  array list <  >  ( service urls . size (  )  )  ;  for  (   string service url : service urls )   {  try  {  uri serviceuri = new uri ( service url )  ;  endpoints . add ( new  aws endpoint ( serviceuri . get host (  )  serviceuri . get port (  )  ""https"" . equals ignore case ( serviceuri . get scheme specific part (  )  )  serviceuri . get path (  )  my region my zone )  )  ;   }  catch  (  uri syntax exception ignore )   {  logger . warn ( "" invalid eureka server uri:  {  }  ;  removing from the server pool"" service url )  ;   }   }  return endpoints ;   }  ",816,5,create,1,[]
1881,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\LegacyClusterResolver.java,create eureka endpoints from config,"private  list <  aws endpoint >    (  )  {   list <  string >  service urls =  endpoint utils . get service urls from config ( client config my zone client config . should prefer same zone eureka (  )  )  ;   list <  aws endpoint >  endpoints = new  array list <  >  ( service urls . size (  )  )  ;  for  (   string service url : service urls )   {  try  {  uri serviceuri = new uri ( service url )  ;  endpoints . add ( new  aws endpoint ( serviceuri . get host (  )  serviceuri . get port (  )  ""https"" . equals ignore case ( serviceuri . get scheme specific part (  )  )  serviceuri . get path (  )  my region my zone )  )  ;   }  catch  (  uri syntax exception ignore )   {  logger . warn ( "" invalid eureka server uri:  {  }  ;  removing from the server pool"" service url )  ;   }   }  return endpoints ;   }  ",816,5,eureka,2,"[189, 706]"
1882,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\LegacyClusterResolver.java,create eureka endpoints from config,"private  list <  aws endpoint >    (  )  {   list <  string >  service urls =  endpoint utils . get service urls from config ( client config my zone client config . should prefer same zone eureka (  )  )  ;   list <  aws endpoint >  endpoints = new  array list <  >  ( service urls . size (  )  )  ;  for  (   string service url : service urls )   {  try  {  uri serviceuri = new uri ( service url )  ;  endpoints . add ( new  aws endpoint ( serviceuri . get host (  )  serviceuri . get port (  )  ""https"" . equals ignore case ( serviceuri . get scheme specific part (  )  )  serviceuri . get path (  )  my region my zone )  )  ;   }  catch  (  uri syntax exception ignore )   {  logger . warn ( "" invalid eureka server uri:  {  }  ;  removing from the server pool"" service url )  ;   }   }  return endpoints ;   }  ",816,5,endpoints,3,"[233, 404, 799]"
1883,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\LegacyClusterResolver.java,create eureka endpoints from config,"private  list <  aws endpoint >    (  )  {   list <  string >  service urls =  endpoint utils . get service urls from config ( client config my zone client config . should prefer same zone eureka (  )  )  ;   list <  aws endpoint >  endpoints = new  array list <  >  ( service urls . size (  )  )  ;  for  (   string service url : service urls )   {  try  {  uri serviceuri = new uri ( service url )  ;  endpoints . add ( new  aws endpoint ( serviceuri . get host (  )  serviceuri . get port (  )  ""https"" . equals ignore case ( serviceuri . get scheme specific part (  )  )  serviceuri . get path (  )  my region my zone )  )  ;   }  catch  (  uri syntax exception ignore )   {  logger . warn ( "" invalid eureka server uri:  {  }  ;  removing from the server pool"" service url )  ;   }   }  return endpoints ;   }  ",816,5,from,4,"[113, 744]"
1884,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\LegacyClusterResolver.java,create eureka endpoints from config,"private  list <  aws endpoint >    (  )  {   list <  string >  service urls =  endpoint utils . get service urls from config ( client config my zone client config . should prefer same zone eureka (  )  )  ;   list <  aws endpoint >  endpoints = new  array list <  >  ( service urls . size (  )  )  ;  for  (   string service url : service urls )   {  try  {  uri serviceuri = new uri ( service url )  ;  endpoints . add ( new  aws endpoint ( serviceuri . get host (  )  serviceuri . get port (  )  ""https"" . equals ignore case ( serviceuri . get scheme specific part (  )  )  serviceuri . get path (  )  my region my zone )  )  ;   }  catch  (  uri syntax exception ignore )   {  logger . warn ( "" invalid eureka server uri:  {  }  ;  removing from the server pool"" service url )  ;   }   }  return endpoints ;   }  ",816,5,config,5,"[118, 134, 156]"
1885,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\LegacyClusterResolver.java,get cluster endpoints,@ override public  list <  aws endpoint >    (  )  {  return delegate . get cluster endpoints (  )  ;   }  ,107,3,get,1,[72]
1886,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\LegacyClusterResolver.java,get cluster endpoints,@ override public  list <  aws endpoint >    (  )  {  return delegate . get cluster endpoints (  )  ;   }  ,107,3,cluster,2,[76]
1887,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\LegacyClusterResolver.java,get cluster endpoints,@ override public  list <  aws endpoint >    (  )  {  return delegate . get cluster endpoints (  )  ;   }  ,107,3,endpoints,3,[84]
1888,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\LegacyClusterResolver.java,get region,@ override public  string   (  )  {  return delegate . get region (  )  ;   }  ,79,2,get,1,[55]
1889,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\LegacyClusterResolver.java,get region,@ override public  string   (  )  {  return delegate . get region (  )  ;   }  ,79,2,region,2,[59]
1890,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\ReloadingClusterResolver.java, reloading cluster resolver,"public   ( final  cluster resolver factory < t >  factory final long reload interval ms )  {  this . factory = factory ;  this . reload interval ms = reload interval ms ;  this . max reload interval ms = max   reload   interval   multiplier * reload interval ms ;  this . delegate ref = new  atomic reference <  >  ( factory . create cluster resolver (  )  )  ;  this . last update time =  system . current time millis (  )  ;  this . current reload interval ms = reload interval ms ;   list < t >  cluster endpoints = delegate ref . get (  )  . get cluster endpoints (  )  ;  if  ( cluster endpoints . is empty (  )  )   {  logger . error ( "" empty  eureka server endpoint list during initialization process"" )  ;  throw new  cluster resolver exception ( "" resolved to an empty endpoint list"" )  ;   }  if  ( logger . is info enabled (  )  )   {  logger . info ( "" initiated with delegate resolver of type  {  }  ;  next reload in  {  } [sec] .   loaded endpoints =  {  } "" delegate ref . get (  )  . get class (  )  current reload interval ms  /  1000 cluster endpoints )  ;   }  try  {   monitors . register object ( this )  ;   }  catch  (   throwable e )   {  logger . warn ( "" cannot register metrics"" e )  ;   }   }  ",1224,3,reloading,1,[]
1891,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\ReloadingClusterResolver.java, reloading cluster resolver,"public   ( final  cluster resolver factory < t >  factory final long reload interval ms )  {  this . factory = factory ;  this . reload interval ms = reload interval ms ;  this . max reload interval ms = max   reload   interval   multiplier * reload interval ms ;  this . delegate ref = new  atomic reference <  >  ( factory . create cluster resolver (  )  )  ;  this . last update time =  system . current time millis (  )  ;  this . current reload interval ms = reload interval ms ;   list < t >  cluster endpoints = delegate ref . get (  )  . get cluster endpoints (  )  ;  if  ( cluster endpoints . is empty (  )  )   {  logger . error ( "" empty  eureka server endpoint list during initialization process"" )  ;  throw new  cluster resolver exception ( "" resolved to an empty endpoint list"" )  ;   }  if  ( logger . is info enabled (  )  )   {  logger . info ( "" initiated with delegate resolver of type  {  }  ;  next reload in  {  } [sec] .   loaded endpoints =  {  } "" delegate ref . get (  )  . get class (  )  current reload interval ms  /  1000 cluster endpoints )  ;   }  try  {   monitors . register object ( this )  ;   }  catch  (   throwable e )   {  logger . warn ( "" cannot register metrics"" e )  ;   }   }  ",1224,3,cluster,2,"[18, 334, 499, 550, 583, 727, 1054]"
1892,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\ReloadingClusterResolver.java, reloading cluster resolver,"public   ( final  cluster resolver factory < t >  factory final long reload interval ms )  {  this . factory = factory ;  this . reload interval ms = reload interval ms ;  this . max reload interval ms = max   reload   interval   multiplier * reload interval ms ;  this . delegate ref = new  atomic reference <  >  ( factory . create cluster resolver (  )  )  ;  this . last update time =  system . current time millis (  )  ;  this . current reload interval ms = reload interval ms ;   list < t >  cluster endpoints = delegate ref . get (  )  . get cluster endpoints (  )  ;  if  ( cluster endpoints . is empty (  )  )   {  logger . error ( "" empty  eureka server endpoint list during initialization process"" )  ;  throw new  cluster resolver exception ( "" resolved to an empty endpoint list"" )  ;   }  if  ( logger . is info enabled (  )  )   {  logger . info ( "" initiated with delegate resolver of type  {  }  ;  next reload in  {  } [sec] .   loaded endpoints =  {  } "" delegate ref . get (  )  . get class (  )  current reload interval ms  /  1000 cluster endpoints )  ;   }  try  {   monitors . register object ( this )  ;   }  catch  (   throwable e )   {  logger . warn ( "" cannot register metrics"" e )  ;   }   }  ",1224,3,resolver,3,"[26, 342, 735, 890]"
1893,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\ReloadingClusterResolver.java,get cluster endpoints,@ override public  list < t >    (  )  {  long expiry time = last update time  +  current reload interval ms ;  if  ( expiry time  <  =   system . current time millis (  )  )   {  try  {   cluster resolver < t >  new delegate = reload (  )  ;  this . last,255,3,get,1,[]
1894,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\ReloadingClusterResolver.java,get cluster endpoints,@ override public  list < t >    (  )  {  long expiry time = last update time  +  current reload interval ms ;  if  ( expiry time  <  =   system . current time millis (  )  )   {  try  {   cluster resolver < t >  new delegate = reload (  )  ;  this . last,255,3,cluster,2,[189]
1895,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\ReloadingClusterResolver.java,get cluster endpoints,@ override public  list < t >    (  )  {  long expiry time = last update time  +  current reload interval ms ;  if  ( expiry time  <  =   system . current time millis (  )  )   {  try  {   cluster resolver < t >  new delegate = reload (  )  ;  this . last,255,3,endpoints,3,[]
1896,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\ReloadingClusterResolver.java,get last reload timestamp,"@ monitor ( name = metric   resolver   prefix  +  ""last reload timestamp"" description = "" how much time has passed from last successful cluster configuration resolve"" type =  data source type . gauge )  public long   (  )  {  return last reload timestamp ",255,4,get,1,[]
1897,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\ReloadingClusterResolver.java,get last reload timestamp,"@ monitor ( name = metric   resolver   prefix  +  ""last reload timestamp"" description = "" how much time has passed from last successful cluster configuration resolve"" type =  data source type . gauge )  public long   (  )  {  return last reload timestamp ",255,4,last,2,"[51, 120, 233]"
1898,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\ReloadingClusterResolver.java,get last reload timestamp,"@ monitor ( name = metric   resolver   prefix  +  ""last reload timestamp"" description = "" how much time has passed from last successful cluster configuration resolve"" type =  data source type . gauge )  public long   (  )  {  return last reload timestamp ",255,4,reload,3,"[56, 238]"
1899,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\ReloadingClusterResolver.java,get last reload timestamp,"@ monitor ( name = metric   resolver   prefix  +  ""last reload timestamp"" description = "" how much time has passed from last successful cluster configuration resolve"" type =  data source type . gauge )  public long   (  )  {  return last reload timestamp ",255,4,timestamp,4,"[63, 245]"
1900,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\ReloadingClusterResolver.java,get region,@ override public  string   (  )  {   cluster resolver delegate = delegate ref . get (  )  ;  return delegate  =  =  null  ?  null : delegate . get region (  )  ;   }  ,168,2,get,1,"[81, 144]"
1901,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\ReloadingClusterResolver.java,get region,@ override public  string   (  )  {   cluster resolver delegate = delegate ref . get (  )  ;  return delegate  =  =  null  ?  null : delegate . get region (  )  ;   }  ,168,2,region,2,[148]
1902,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\ReloadingClusterResolver.java,reload,"private  cluster resolver < t >    (  )  {   cluster resolver < t >  new delegate = factory . create cluster resolver (  )  ;   list < t >  new endpoints = new delegate . get cluster endpoints (  )  ;  if  ( new endpoints . is empty (  )  )   {  logger . info ( "" tried to reload but empty endpoint list returned ;  keeping the current endpoints"" )  ;  return null ;   }  if  (  resolver utils . identical ( delegate ref . get (  )  . get cluster endpoints (  )  new endpoints )  )   {  logger . debug ( "" loaded cluster server list identical to the current one ;  no update required"" )  ;  return null ;   }  return new delegate ;   }  ",637,1,reload,1,[273]
1903,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\ResolverUtils.java,extract zone from host name,public static  string   (  string host name )  {   matcher matcher = zone   re . matcher ( host name )  ;  if  ( matcher . matches (  )  )   {  return matcher . group ( 2 )  ;   }  return null ;   }  ,200,5,extract,1,[]
1904,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\ResolverUtils.java,extract zone from host name,public static  string   (  string host name )  {   matcher matcher = zone   re . matcher ( host name )  ;  if  ( matcher . matches (  )  )   {  return matcher . group ( 2 )  ;   }  return null ;   }  ,200,5,zone,2,[69]
1905,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\ResolverUtils.java,extract zone from host name,public static  string   (  string host name )  {   matcher matcher = zone   re . matcher ( host name )  ;  if  ( matcher . matches (  )  )   {  return matcher . group ( 2 )  ;   }  return null ;   }  ,200,5,from,3,[]
1906,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\ResolverUtils.java,extract zone from host name,public static  string   (  string host name )  {   matcher matcher = zone   re . matcher ( host name )  ;  if  ( matcher . matches (  )  )   {  return matcher . group ( 2 )  ;   }  return null ;   }  ,200,5,host,4,"[34, 91]"
1907,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\ResolverUtils.java,extract zone from host name,public static  string   (  string host name )  {   matcher matcher = zone   re . matcher ( host name )  ;  if  ( matcher . matches (  )  )   {  return matcher . group ( 2 )  ;   }  return null ;   }  ,200,5,name,5,"[39, 96]"
1908,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\ResolverUtils.java,identical,public static  < t extends  eureka endpoint > boolean   (  list < t >  first list  list < t >  second list )  {  if  ( first list . size (  )   !  =  second list . size (  )  )   {  return false ;   }   hash set < t >  compare set = new  hash set <  >  ( first list )  ;  compare set . remove all ( second list )  ;  return compare set . is empty (  )  ;   }  ,360,1,identical,1,[]
1909,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\ResolverUtils.java,instance info to endpoint,"public static  aws endpoint   (  eureka client config client config  eureka transport config transport config  instance info instance info )  {   string zone = null ;   data center info data center info = instance info . get data center info (  )  ;  if  ( data center info instanceof  amazon info )   {  zone =  (  (  amazon info ) data center info )  . get (  amazon info .  meta data key . availability zone )  ;   }   string network address ;  if  ( transport config . applications resolver use ip (  )  )   {  if  ( instance info . get data center info (  )  instanceof  amazon info )   {  network address =  (  (  amazon info ) instance info . get data center info (  )  )  . get (  amazon info .  meta data key . local ipv4 )  ;   }  else  {  network address = instance info . getip addr (  )  ;   }   }  else  {  network address = instance info . get host name (  )  ;   }  if  ( network address  =  =  null )   {  logger . error ( "" cannot resolve  instance info  {  }  to a proper resolver endpoint  skipping"" instance info )  ;  return null ;   }  return new  aws endpoint ( network address instance info . get port (  )  false client config . get eureka serverurl context (  )  client config . get region (  )  zone )  ;   }  ",1238,4,instance,1,"[111, 125, 205, 274, 521, 564, 634, 768, 839, 958, 1020, 1102]"
1910,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\ResolverUtils.java,instance info to endpoint,"public static  aws endpoint   (  eureka client config client config  eureka transport config transport config  instance info instance info )  {   string zone = null ;   data center info data center info = instance info . get data center info (  )  ;  if  ( data center info instanceof  amazon info )   {  zone =  (  (  amazon info ) data center info )  . get (  amazon info .  meta data key . availability zone )  ;   }   string network address ;  if  ( transport config . applications resolver use ip (  )  )   {  if  ( instance info . get data center info (  )  instanceof  amazon info )   {  network address =  (  (  amazon info ) instance info . get data center info (  )  )  . get (  amazon info .  meta data key . local ipv4 )  ;   }  else  {  network address = instance info . getip addr (  )  ;   }   }  else  {  network address = instance info . get host name (  )  ;   }  if  ( network address  =  =  null )   {  logger . error ( "" cannot resolve  instance info  {  }  to a proper resolver endpoint  skipping"" instance info )  ;  return null ;   }  return new  aws endpoint ( network address instance info . get port (  )  false client config . get eureka serverurl context (  )  client config . get region (  )  zone )  ;   }  ",1238,4,info,2,"[120, 134, 181, 198, 214, 237, 269, 293, 326, 345, 369, 530, 553, 583, 627, 643, 666, 696, 777, 848, 967, 1029, 1111]"
1911,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\ResolverUtils.java,instance info to endpoint,"public static  aws endpoint   (  eureka client config client config  eureka transport config transport config  instance info instance info )  {   string zone = null ;   data center info data center info = instance info . get data center info (  )  ;  if  ( data center info instanceof  amazon info )   {  zone =  (  (  amazon info ) data center info )  . get (  amazon info .  meta data key . availability zone )  ;   }   string network address ;  if  ( transport config . applications resolver use ip (  )  )   {  if  ( instance info . get data center info (  )  instanceof  amazon info )   {  network address =  (  (  amazon info ) instance info . get data center info (  )  )  . get (  amazon info .  meta data key . local ipv4 )  ;   }  else  {  network address = instance info . getip addr (  )  ;   }   }  else  {  network address = instance info . get host name (  )  ;   }  if  ( network address  =  =  null )   {  logger . error ( "" cannot resolve  instance info  {  }  to a proper resolver endpoint  skipping"" instance info )  ;  return null ;   }  return new  aws endpoint ( network address instance info . get port (  )  false client config . get eureka serverurl context (  )  client config . get region (  )  zone )  ;   }  ",1238,4,to,3,[979]
1912,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\ResolverUtils.java,instance info to endpoint,"public static  aws endpoint   (  eureka client config client config  eureka transport config transport config  instance info instance info )  {   string zone = null ;   data center info data center info = instance info . get data center info (  )  ;  if  ( data center info instanceof  amazon info )   {  zone =  (  (  amazon info ) data center info )  . get (  amazon info .  meta data key . availability zone )  ;   }   string network address ;  if  ( transport config . applications resolver use ip (  )  )   {  if  ( instance info . get data center info (  )  instanceof  amazon info )   {  network address =  (  (  amazon info ) instance info . get data center info (  )  )  . get (  amazon info .  meta data key . local ipv4 )  ;   }  else  {  network address = instance info . getip addr (  )  ;   }   }  else  {  network address = instance info . get host name (  )  ;   }  if  ( network address  =  =  null )   {  logger . error ( "" cannot resolve  instance info  {  }  to a proper resolver endpoint  skipping"" instance info )  ;  return null ;   }  return new  aws endpoint ( network address instance info . get port (  )  false client config . get eureka serverurl context (  )  client config . get region (  )  zone )  ;   }  ",1238,4,endpoint,4,"[19, 1000, 1075]"
1913,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\ResolverUtils.java,randomize,public static  < t extends  eureka endpoint >  list < t >    (  list < t >  list )  {   list < t >  random list = new  array list <  >  ( list )  ;  if  ( random list . size (  )   <  2 )   {  return random list ;   }   random random = new  random ( local   ipv4   address . hash code (  )  )  ;  int last = random list . size (  )   -  1 ;  for  ( int i = 0 ;  i  <  last ;  i +  +  )   {  int pos = random . next int ( random list . size (  )   -  i )  ;  if  ( pos  !  =  i )   {   collections . swap ( random list i pos )  ;   }   }  return random list ;   }  ,564,1,randomize,1,[]
1914,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\ResolverUtils.java,split by zone,public static  list <  aws endpoint > []   (  list <  aws endpoint >  eureka endpoints  string my zone )  {  if  ( eureka endpoints . is empty (  )  )   {  return new  list[] {  collections . empty list (  )   collections . empty list (  )  }  ;   }  if  ( my zone  =  =  null )   {  return new  list[] {  collections . empty list (  )  new  array list <  >  ( eureka endpoints )  }  ;   }   list <  aws endpoint >  my zone list = new  array list <  >  ( eureka endpoints . size (  )  )  ;   list <  aws endpoint >  remaining zones list = new  array list <  >  ( eureka endpoints . size (  )  )  ;  for  (   aws endpoint endpoint : eureka endpoints )   {  if  ( my zone . equals ignore case ( endpoint . get zone (  )  )  )   {  my zone list . add ( endpoint )  ;   }  else  {  remaining zones list . add ( endpoint )  ;   }   }  return new  list[] { my zone list remaining zones list }  ;   }  ,895,3,split,1,[]
1915,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\ResolverUtils.java,split by zone,public static  list <  aws endpoint > []   (  list <  aws endpoint >  eureka endpoints  string my zone )  {  if  ( eureka endpoints . is empty (  )  )   {  return new  list[] {  collections . empty list (  )   collections . empty list (  )  }  ;   }  if  ( my zone  =  =  null )   {  return new  list[] {  collections . empty list (  )  new  array list <  >  ( eureka endpoints )  }  ;   }   list <  aws endpoint >  my zone list = new  array list <  >  ( eureka endpoints . size (  )  )  ;   list <  aws endpoint >  remaining zones list = new  array list <  >  ( eureka endpoints . size (  )  )  ;  for  (   aws endpoint endpoint : eureka endpoints )   {  if  ( my zone . equals ignore case ( endpoint . get zone (  )  )  )   {  my zone list . add ( endpoint )  ;   }  else  {  remaining zones list . add ( endpoint )  ;   }   }  return new  list[] { my zone list remaining zones list }  ;   }  ,895,3,by,2,[]
1916,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\ResolverUtils.java,split by zone,public static  list <  aws endpoint > []   (  list <  aws endpoint >  eureka endpoints  string my zone )  {  if  ( eureka endpoints . is empty (  )  )   {  return new  list[] {  collections . empty list (  )   collections . empty list (  )  }  ;   }  if  ( my zone  =  =  null )   {  return new  list[] {  collections . empty list (  )  new  array list <  >  ( eureka endpoints )  }  ;   }   list <  aws endpoint >  my zone list = new  array list <  >  ( eureka endpoints . size (  )  )  ;   list <  aws endpoint >  remaining zones list = new  array list <  >  ( eureka endpoints . size (  )  )  ;  for  (   aws endpoint endpoint : eureka endpoints )   {  if  ( my zone . equals ignore case ( endpoint . get zone (  )  )  )   {  my zone list . add ( endpoint )  ;   }  else  {  remaining zones list . add ( endpoint )  ;   }   }  return new  list[] { my zone list remaining zones list }  ;   }  ,895,3,zone,3,"[98, 260, 419, 526, 665, 708, 732, 788, 854, 874]"
1917,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\StaticClusterResolver.java, static cluster resolver,"public   (  string region  list < t >  eureka endpoints )  {  this . eureka endpoints = eureka endpoints ;  this . region = region ;  logger . debug ( "" fixed resolver configuration:  {  } "" eureka endpoints )  ;   }  ",218,3,static,1,[]
1918,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\StaticClusterResolver.java, static cluster resolver,"public   (  string region  list < t >  eureka endpoints )  {  this . eureka endpoints = eureka endpoints ;  this . region = region ;  logger . debug ( "" fixed resolver configuration:  {  } "" eureka endpoints )  ;   }  ",218,3,cluster,2,[]
1919,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\StaticClusterResolver.java, static cluster resolver,"public   (  string region  list < t >  eureka endpoints )  {  this . eureka endpoints = eureka endpoints ;  this . region = region ;  logger . debug ( "" fixed resolver configuration:  {  } "" eureka endpoints )  ;   }  ",218,3,resolver,3,[159]
1920,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\StaticClusterResolver.java,fromurl,"public static  cluster resolver <  eureka endpoint >    (  string region name url service url )  {  boolean is secure = ""https"" . equals ignore case ( service url . get protocol (  )  )  ;  int default port = is secure  ?  443 : 80 ;  int port = service url . get port (  )   =  =   - 1  ?  default port : service url . get port (  )  ;  return new  static cluster resolver <  eureka endpoint >  ( region name new  default endpoint ( service url . get host (  )  port is secure service url . get path (  )  )  )  ;   }  ",520,1,fromurl,1,[]
1921,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\StaticClusterResolver.java,get cluster endpoints,@ override public  list < t >    (  )  {  return eureka endpoints ;   }  ,73,3,get,1,[]
1922,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\StaticClusterResolver.java,get cluster endpoints,@ override public  list < t >    (  )  {  return eureka endpoints ;   }  ,73,3,cluster,2,[]
1923,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\StaticClusterResolver.java,get cluster endpoints,@ override public  list < t >    (  )  {  return eureka endpoints ;   }  ,73,3,endpoints,3,[56]
1924,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\StaticClusterResolver.java,get region,@ override public  string   (  )  {  return region ;   }  ,58,2,get,1,[]
1925,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\StaticClusterResolver.java,get region,@ override public  string   (  )  {  return region ;   }  ,58,2,region,2,[44]
1926,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\EurekaHttpClientDecorator.java,cancel,@ override public  eureka http response <  void >    ( final  string app name final  string id )  {  return execute ( new  request executor <  void >  (  )  {  @ override public  eureka http response <  void >  execute (   eureka http client delegate )  {,255,1,cancel,1,[]
1927,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\EurekaHttpClientDecorator.java,delete status override,@ override public  eureka http response <  void >    ( final  string app name final  string id final  instance info info )  {  return execute ( new  request executor <  void >  (  )  {  @ override public  eureka http response <  void >  execute (   eureka,255,3,delete,1,[]
1928,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\EurekaHttpClientDecorator.java,delete status override,@ override public  eureka http response <  void >    ( final  string app name final  string id final  instance info info )  {  return execute ( new  request executor <  void >  (  )  {  @ override public  eureka http response <  void >  execute (   eureka,255,3,status,2,[]
1929,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\EurekaHttpClientDecorator.java,delete status override,@ override public  eureka http response <  void >    ( final  string app name final  string id final  instance info info )  {  return execute ( new  request executor <  void >  (  )  {  @ override public  eureka http response <  void >  execute (   eureka,255,3,override,3,"[2, 188]"
1930,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\EurekaHttpClientDecorator.java,execute,@ override public  eureka http response <  instance info >    (  eureka http client delegate )  {  return delegate . get instance ( app name id )  ;   }  ,154,1,execute,1,[]
1931,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\EurekaHttpClientDecorator.java,get application,@ override public  eureka http response <  application >    ( final  string app name )  {  return execute ( new  request executor <  application >  (  )  {  @ override public  eureka http response <  application >  execute (   eureka http client delegate ,255,2,get,1,[]
1932,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\EurekaHttpClientDecorator.java,get application,@ override public  eureka http response <  application >    ( final  string app name )  {  return execute ( new  request executor <  application >  (  )  {  @ override public  eureka http response <  application >  execute (   eureka http client delegate ,255,2,application,2,"[43, 133, 200]"
1933,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\EurekaHttpClientDecorator.java,get applications,@ override public  eureka http response <  applications >    ( final  string .  .  .  regions )  {  return execute ( new  request executor <  applications >  (  )  {  @ override public  eureka http response <  applications >  execute (   eureka http clien,255,2,get,1,[]
1934,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\EurekaHttpClientDecorator.java,get applications,@ override public  eureka http response <  applications >    ( final  string .  .  .  regions )  {  return execute ( new  request executor <  applications >  (  )  {  @ override public  eureka http response <  applications >  execute (   eureka http clien,255,2,applications,2,"[43, 142, 210]"
1935,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\EurekaHttpClientDecorator.java,get delta,@ override public  eureka http response <  applications >    ( final  string .  .  .  regions )  {  return execute ( new  request executor <  applications >  (  )  {  @ override public  eureka http response <  applications >  execute (   eureka http clien,255,2,get,1,[]
1936,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\EurekaHttpClientDecorator.java,get delta,@ override public  eureka http response <  applications >    ( final  string .  .  .  regions )  {  return execute ( new  request executor <  applications >  (  )  {  @ override public  eureka http response <  applications >  execute (   eureka http clien,255,2,delta,2,[]
1937,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\EurekaHttpClientDecorator.java,get instance,@ override public  eureka http response <  instance info >    ( final  string app name final  string id )  {  return execute ( new  request executor <  instance info >  (  )  {  @ override public  eureka http response <  instance info >  execute (   eurek,255,2,get,1,[]
1938,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\EurekaHttpClientDecorator.java,get instance,@ override public  eureka http response <  instance info >    ( final  string app name final  string id )  {  return execute ( new  request executor <  instance info >  (  )  {  @ override public  eureka http response <  instance info >  execute (   eurek,255,2,instance,2,"[43, 152, 221]"
1939,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\EurekaHttpClientDecorator.java,get request type,@ override public  request type   (  )  {  return  request type .  get application instance ;   }  ,99,3,get,1,[67]
1940,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\EurekaHttpClientDecorator.java,get request type,@ override public  request type   (  )  {  return  request type .  get application instance ;   }  ,99,3,request,2,"[19, 51]"
1941,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\EurekaHttpClientDecorator.java,get request type,@ override public  request type   (  )  {  return  request type .  get application instance ;   }  ,99,3,type,3,"[27, 59]"
1942,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\EurekaHttpClientDecorator.java,get secure vip,@ override public  eureka http response <  applications >    ( final  string secure vip address final  string .  .  .  regions )  {  return execute ( new  request executor <  applications >  (  )  {  @ override public  eureka http response <  applications,255,3,get,1,[]
1943,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\EurekaHttpClientDecorator.java,get secure vip,@ override public  eureka http response <  applications >    ( final  string secure vip address final  string .  .  .  regions )  {  return execute ( new  request executor <  applications >  (  )  {  @ override public  eureka http response <  applications,255,3,secure,2,[77]
1944,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\EurekaHttpClientDecorator.java,get secure vip,@ override public  eureka http response <  applications >    ( final  string secure vip address final  string .  .  .  regions )  {  return execute ( new  request executor <  applications >  (  )  {  @ override public  eureka http response <  applications,255,3,vip,3,[84]
1945,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\EurekaHttpClientDecorator.java,get vip,@ override public  eureka http response <  applications >    ( final  string vip address final  string .  .  .  regions )  {  return execute ( new  request executor <  applications >  (  )  {  @ override public  eureka http response <  applications >  exe,255,2,get,1,[]
1946,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\EurekaHttpClientDecorator.java,get vip,@ override public  eureka http response <  applications >    ( final  string vip address final  string .  .  .  regions )  {  return execute ( new  request executor <  applications >  (  )  {  @ override public  eureka http response <  applications >  exe,255,2,vip,2,[77]
1947,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\EurekaHttpClientDecorator.java,register,@ override public  eureka http response <  void >    ( final  instance info info )  {  return execute ( new  request executor <  void >  (  )  {  @ override public  eureka http response <  void >  execute (   eureka http client delegate )  {  return deleg,255,1,register,1,[]
1948,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\EurekaHttpClientDecorator.java,send heart beat,@ override public  eureka http response <  instance info >    ( final  string app name final  string id final  instance info info final  instance status overridden status )  {  return execute ( new  request executor <  instance info >  (  )  {  @ override,255,3,send,1,[]
1949,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\EurekaHttpClientDecorator.java,send heart beat,@ override public  eureka http response <  instance info >    ( final  string app name final  string id final  instance info info final  instance status overridden status )  {  return execute ( new  request executor <  instance info >  (  )  {  @ override,255,3,heart,2,[]
1950,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\EurekaHttpClientDecorator.java,send heart beat,@ override public  eureka http response <  instance info >    ( final  string app name final  string id final  instance info info final  instance status overridden status )  {  return execute ( new  request executor <  instance info >  (  )  {  @ override,255,3,beat,3,[]
1951,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\EurekaHttpClientDecorator.java,status update,@ override public  eureka http response <  void >    ( final  string app name final  string id final  instance status new status final  instance info info )  {  return execute ( new  request executor <  void >  (  )  {  @ override public  eureka http resp,255,2,status,1,"[111, 122]"
1952,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\EurekaHttpClientDecorator.java,status update,@ override public  eureka http response <  void >    ( final  string app name final  string id final  instance status new status final  instance info info )  {  return execute ( new  request executor <  void >  (  )  {  @ override public  eureka http resp,255,2,update,2,[]
1953,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClient.java, retryable eureka http client,public   (  string name  eureka transport config transport config  cluster resolver cluster resolver  transport client factory client factory  server status evaluator server status evaluator int number of retries )  {  this . name = name ;  this . transport config = transport config ;  this . cluster resolver = cluster resolver ;  this . client factory = client factory ;  this . server status evaluator = server status evaluator ;  this . number of retries = number of retries ;   monitors . register object ( name this )  ;   }  ,533,4,retryable,1,[]
1954,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClient.java, retryable eureka http client,public   (  string name  eureka transport config transport config  cluster resolver cluster resolver  transport client factory client factory  server status evaluator server status evaluator int number of retries )  {  this . name = name ;  this . transport config = transport config ;  this . cluster resolver = cluster resolver ;  this . client factory = client factory ;  this . server status evaluator = server status evaluator ;  this . number of retries = number of retries ;   monitors . register object ( name this )  ;   }  ,533,4,eureka,2,[25]
1955,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClient.java, retryable eureka http client,public   (  string name  eureka transport config transport config  cluster resolver cluster resolver  transport client factory client factory  server status evaluator server status evaluator int number of retries )  {  this . name = name ;  this . transport config = transport config ;  this . cluster resolver = cluster resolver ;  this . client factory = client factory ;  this . server status evaluator = server status evaluator ;  this . number of retries = number of retries ;   monitors . register object ( name this )  ;   }  ,533,4,http,3,[]
1956,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClient.java, retryable eureka http client,public   (  string name  eureka transport config transport config  cluster resolver cluster resolver  transport client factory client factory  server status evaluator server status evaluator int number of retries )  {  this . name = name ;  this . transport config = transport config ;  this . cluster resolver = cluster resolver ;  this . client factory = client factory ;  this . server status evaluator = server status evaluator ;  this . number of retries = number of retries ;   monitors . register object ( name this )  ;   }  ,533,4,client,4,"[112, 127, 340, 357]"
1957,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClient.java,create factory,public static  eureka http client factory   ( final  string name final  eureka transport config transport config final  cluster resolver <  eureka endpoint >  cluster resolver final  transport client factory delegate factory final  server status evaluator server status evaluator )  {  return new  eureka http client factory (  )  {  @ override public  eureka http client new client (  )  {  return new  retryable eureka http client ( name transport config cluster resolver delegate factory server status evaluator default   number   of   retries )  ;   }  @ override public void shutdown (  )  {  delegate factory . shutdown (  )  ;   }   }   ;   }  ,651,2,create,1,[]
1958,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClient.java,create factory,public static  eureka http client factory   ( final  string name final  eureka transport config transport config final  cluster resolver <  eureka endpoint >  cluster resolver final  transport client factory delegate factory final  server status evaluator server status evaluator )  {  return new  eureka http client factory (  )  {  @ override public  eureka http client new client (  )  {  return new  retryable eureka http client ( name transport config cluster resolver delegate factory server status evaluator default   number   of   retries )  ;   }  @ override public void shutdown (  )  {  delegate factory . shutdown (  )  ;   }   }   ;   }  ,651,2,factory,2,"[34, 200, 217, 317, 483, 607]"
1959,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClient.java,execute,@ override protected  < r >  eureka http response < r >    (  request executor < r >  request executor )  {   list <  eureka endpoint >  candidate hosts = null ;  int endpoint idx = 0 ;  for  ( int retry = 0 ;  retry  <  number of retries ;  retry +  +  ),255,1,execute,1,[]
1960,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClient.java,get host candidates,"private  list <  eureka endpoint >    (  )  {   list <  eureka endpoint >  candidate hosts = cluster resolver . get cluster endpoints (  )  ;  quarantine set . retain all ( candidate hosts )  ;  int threshold =  ( int )  ( candidate hosts . size (  )  * transport config . get retryable client quarantine refresh percentage (  )  )  ;  if  ( threshold  >  candidate hosts . size (  )  )   {  threshold = candidate hosts . size (  )  ;   }  if  ( quarantine set . is empty (  )  )   {   }  else if  ( quarantine set . size (  )   >  =  threshold )   {  logger . debug ( "" clearing quarantined list of size  {  } "" quarantine set . size (  )  )  ;  quarantine set . clear (  )  ;   }  else  {   list <  eureka endpoint >  remaining hosts = new  array list <  >  ( candidate hosts . size (  )  )  ;  for  (   eureka endpoint endpoint : candidate hosts )   {  if  (  ! quarantine set . contains ( endpoint )  )   {  remaining hosts . add ( endpoint )  ;   }   }  candidate hosts = remaining hosts ;   }  return candidate hosts ;   }  ",1030,3,get,1,"[112, 273]"
1961,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClient.java,get host candidates,"private  list <  eureka endpoint >    (  )  {   list <  eureka endpoint >  candidate hosts = cluster resolver . get cluster endpoints (  )  ;  quarantine set . retain all ( candidate hosts )  ;  int threshold =  ( int )  ( candidate hosts . size (  )  * transport config . get retryable client quarantine refresh percentage (  )  )  ;  if  ( threshold  >  candidate hosts . size (  )  )   {  threshold = candidate hosts . size (  )  ;   }  if  ( quarantine set . is empty (  )  )   {   }  else if  ( quarantine set . size (  )   >  =  threshold )   {  logger . debug ( "" clearing quarantined list of size  {  } "" quarantine set . size (  )  )  ;  quarantine set . clear (  )  ;   }  else  {   list <  eureka endpoint >  remaining hosts = new  array list <  >  ( candidate hosts . size (  )  )  ;  for  (   eureka endpoint endpoint : candidate hosts )   {  if  (  ! quarantine set . contains ( endpoint )  )   {  remaining hosts . add ( endpoint )  ;   }   }  candidate hosts = remaining hosts ;   }  return candidate hosts ;   }  ",1030,3,host,2,"[85, 183, 233, 366, 414, 730, 772, 843, 922, 969, 987, 1017]"
1962,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClient.java,get host candidates,"private  list <  eureka endpoint >    (  )  {   list <  eureka endpoint >  candidate hosts = cluster resolver . get cluster endpoints (  )  ;  quarantine set . retain all ( candidate hosts )  ;  int threshold =  ( int )  ( candidate hosts . size (  )  * transport config . get retryable client quarantine refresh percentage (  )  )  ;  if  ( threshold  >  candidate hosts . size (  )  )   {  threshold = candidate hosts . size (  )  ;   }  if  ( quarantine set . is empty (  )  )   {   }  else if  ( quarantine set . size (  )   >  =  threshold )   {  logger . debug ( "" clearing quarantined list of size  {  } "" quarantine set . size (  )  )  ;  quarantine set . clear (  )  ;   }  else  {   list <  eureka endpoint >  remaining hosts = new  array list <  >  ( candidate hosts . size (  )  )  ;  for  (   eureka endpoint endpoint : candidate hosts )   {  if  (  ! quarantine set . contains ( endpoint )  )   {  remaining hosts . add ( endpoint )  ;   }   }  candidate hosts = remaining hosts ;   }  return candidate hosts ;   }  ",1030,3,candidates,3,[]
1963,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClient.java,get quarantine set size,"@ monitor ( name = metric   transport   prefix  +  ""quarantine size"" description = ""number of servers quarantined"" type =  data source type . gauge )  public long   (  )  {  return quarantine set . size (  )  ;   }  ",216,4,get,1,[]
1964,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClient.java,get quarantine set size,"@ monitor ( name = metric   transport   prefix  +  ""quarantine size"" description = ""number of servers quarantined"" type =  data source type . gauge )  public long   (  )  {  return quarantine set . size (  )  ;   }  ",216,4,quarantine,2,"[52, 102, 181]"
1965,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClient.java,get quarantine set size,"@ monitor ( name = metric   transport   prefix  +  ""quarantine size"" description = ""number of servers quarantined"" type =  data source type . gauge )  public long   (  )  {  return quarantine set . size (  )  ;   }  ",216,4,set,3,[192]
1966,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClient.java,get quarantine set size,"@ monitor ( name = metric   transport   prefix  +  ""quarantine size"" description = ""number of servers quarantined"" type =  data source type . gauge )  public long   (  )  {  return quarantine set . size (  )  ;   }  ",216,4,size,4,"[63, 198]"
1967,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClient.java,new client,@ override public  eureka http client   (  )  {  return new  retryable eureka http client ( name transport config cluster resolver delegate factory server status evaluator default   number   of   retries )  ;   }  ,214,2,new,1,[56]
1968,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClient.java,new client,@ override public  eureka http client   (  )  {  return new  retryable eureka http client ( name transport config cluster resolver delegate factory server status evaluator default   number   of   retries )  ;   }  ,214,2,client,2,"[31, 83]"
1969,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClient.java,shutdown,@ override public void   (  )  {  delegate factory . shutdown (  )  ;   }  ,75,1,shutdown,1,[53]
1970,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\MetricsCollectingEurekaHttpClient.java, eureka http client request metrics,"  (  string resource name )  {  this . counters by status = create status counters ( resource name )  ;  latency timer = new  basic timer (  monitor config . builder (  eureka client names . metric   transport   prefix  +  ""latency"" )  . with tag ( ""id"" resource name )  . with tag ( ""class""  metrics collecting eureka http client . class . get simple name (  )  )  . build (  )   time unit . milliseconds )  ;   servo util . register ( latency timer )  ;  this . connection errors = new  basic counter (  monitor config . builder (  eureka client names . metric   transport   prefix  +  ""connection errors"" )  . with tag ( ""id"" resource name )  . with tag ( ""class""  metrics collecting eureka http client . class . get simple name (  )  )  . build (  )  )  ;   servo util . register ( connection errors )  ;   }  ",814,5,eureka,1,"[169, 312, 534, 687]"
1971,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\MetricsCollectingEurekaHttpClient.java, eureka http client request metrics,"  (  string resource name )  {  this . counters by status = create status counters ( resource name )  ;  latency timer = new  basic timer (  monitor config . builder (  eureka client names . metric   transport   prefix  +  ""latency"" )  . with tag ( ""id"" resource name )  . with tag ( ""class""  metrics collecting eureka http client . class . get simple name (  )  )  . build (  )   time unit . milliseconds )  ;   servo util . register ( latency timer )  ;  this . connection errors = new  basic counter (  monitor config . builder (  eureka client names . metric   transport   prefix  +  ""connection errors"" )  . with tag ( ""id"" resource name )  . with tag ( ""class""  metrics collecting eureka http client . class . get simple name (  )  )  . build (  )  )  ;   servo util . register ( connection errors )  ;   }  ",814,5,http,2,"[319, 694]"
1972,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\MetricsCollectingEurekaHttpClient.java, eureka http client request metrics,"  (  string resource name )  {  this . counters by status = create status counters ( resource name )  ;  latency timer = new  basic timer (  monitor config . builder (  eureka client names . metric   transport   prefix  +  ""latency"" )  . with tag ( ""id"" resource name )  . with tag ( ""class""  metrics collecting eureka http client . class . get simple name (  )  )  . build (  )   time unit . milliseconds )  ;   servo util . register ( latency timer )  ;  this . connection errors = new  basic counter (  monitor config . builder (  eureka client names . metric   transport   prefix  +  ""connection errors"" )  . with tag ( ""id"" resource name )  . with tag ( ""class""  metrics collecting eureka http client . class . get simple name (  )  )  . build (  )  )  ;   servo util . register ( connection errors )  ;   }  ",814,5,client,3,"[176, 324, 541, 699]"
1973,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\MetricsCollectingEurekaHttpClient.java, eureka http client request metrics,"  (  string resource name )  {  this . counters by status = create status counters ( resource name )  ;  latency timer = new  basic timer (  monitor config . builder (  eureka client names . metric   transport   prefix  +  ""latency"" )  . with tag ( ""id"" resource name )  . with tag ( ""class""  metrics collecting eureka http client . class . get simple name (  )  )  . build (  )   time unit . milliseconds )  ;   servo util . register ( latency timer )  ;  this . connection errors = new  basic counter (  monitor config . builder (  eureka client names . metric   transport   prefix  +  ""connection errors"" )  . with tag ( ""id"" resource name )  . with tag ( ""class""  metrics collecting eureka http client . class . get simple name (  )  )  . build (  )  )  ;   servo util . register ( connection errors )  ;   }  ",814,5,request,4,[]
1974,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\MetricsCollectingEurekaHttpClient.java, eureka http client request metrics,"  (  string resource name )  {  this . counters by status = create status counters ( resource name )  ;  latency timer = new  basic timer (  monitor config . builder (  eureka client names . metric   transport   prefix  +  ""latency"" )  . with tag ( ""id"" resource name )  . with tag ( ""class""  metrics collecting eureka http client . class . get simple name (  )  )  . build (  )   time unit . milliseconds )  ;   servo util . register ( latency timer )  ;  this . connection errors = new  basic counter (  monitor config . builder (  eureka client names . metric   transport   prefix  +  ""connection errors"" )  . with tag ( ""id"" resource name )  . with tag ( ""class""  metrics collecting eureka http client . class . get simple name (  )  )  . build (  )  )  ;   servo util . register ( connection errors )  ;   }  ",814,5,metrics,5,"[293, 668]"
1975,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\MetricsCollectingEurekaHttpClient.java, metrics collecting eureka http client,private   (  eureka http client delegate  map <  request type  eureka http client request metrics >  metrics by request type  exceptions metric exceptions metric boolean shutdown metrics )  {  this . delegate = delegate ;  this . metrics by request type = metrics by request type ;  this . exceptions metric = exceptions metric ;  this . shutdown metrics = shutdown metrics ;   }  ,381,5,metrics,1,"[90, 101, 179, 230, 256, 347, 366]"
1976,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\MetricsCollectingEurekaHttpClient.java, metrics collecting eureka http client,private   (  eureka http client delegate  map <  request type  eureka http client request metrics >  metrics by request type  exceptions metric exceptions metric boolean shutdown metrics )  {  this . delegate = delegate ;  this . metrics by request type = metrics by request type ;  this . exceptions metric = exceptions metric ;  this . shutdown metrics = shutdown metrics ;   }  ,381,5,collecting,2,[]
1977,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\MetricsCollectingEurekaHttpClient.java, metrics collecting eureka http client,private   (  eureka http client delegate  map <  request type  eureka http client request metrics >  metrics by request type  exceptions metric exceptions metric boolean shutdown metrics )  {  this . delegate = delegate ;  this . metrics by request type = metrics by request type ;  this . exceptions metric = exceptions metric ;  this . shutdown metrics = shutdown metrics ;   }  ,381,5,eureka,3,"[13, 63]"
1978,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\MetricsCollectingEurekaHttpClient.java, metrics collecting eureka http client,private   (  eureka http client delegate  map <  request type  eureka http client request metrics >  metrics by request type  exceptions metric exceptions metric boolean shutdown metrics )  {  this . delegate = delegate ;  this . metrics by request type = metrics by request type ;  this . exceptions metric = exceptions metric ;  this . shutdown metrics = shutdown metrics ;   }  ,381,5,http,4,"[20, 70]"
1979,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\MetricsCollectingEurekaHttpClient.java, metrics collecting eureka http client,private   (  eureka http client delegate  map <  request type  eureka http client request metrics >  metrics by request type  exceptions metric exceptions metric boolean shutdown metrics )  {  this . delegate = delegate ;  this . metrics by request type = metrics by request type ;  this . exceptions metric = exceptions metric ;  this . shutdown metrics = shutdown metrics ;   }  ,381,5,client,5,"[25, 75]"
1980,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\MetricsCollectingEurekaHttpClient.java,create factory,"public static  transport client factory   ( final  transport client factory delegate factory )  {  final  map <  request type  eureka http client request metrics >  metrics by request type = initialize metrics (  )  ;  final  exceptions metric exception metrics = new  exceptions metric (  eureka client names . metric   transport   prefix  +  ""exceptions"" )  ;  return new  transport client factory (  )  {  @ override public  eureka http client new client (   eureka endpoint endpoint )  {  return new  metrics collecting eureka http client ( delegate factory . new client ( endpoint )  metrics by request type exception metrics false )  ;   }  @ override public void shutdown (  )  {  shutdown metrics ( metrics by request type )  ;  exception metrics . shutdown (  )  ;   }   }   ;   }  ",791,2,create,1,[]
1981,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\MetricsCollectingEurekaHttpClient.java,create factory,"public static  transport client factory   ( final  transport client factory delegate factory )  {  final  map <  request type  eureka http client request metrics >  metrics by request type = initialize metrics (  )  ;  final  exceptions metric exception metrics = new  exceptions metric (  eureka client names . metric   transport   prefix  +  ""exceptions"" )  ;  return new  transport client factory (  )  {  @ override public  eureka http client new client (   eureka endpoint endpoint )  {  return new  metrics collecting eureka http client ( delegate factory . new client ( endpoint )  metrics by request type exception metrics false )  ;   }  @ override public void shutdown (  )  {  shutdown metrics ( metrics by request type )  ;  exception metrics . shutdown (  )  ;   }   }   ;   }  ",791,2,factory,2,"[32, 68, 85, 392, 554]"
1982,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\MetricsCollectingEurekaHttpClient.java,create status counters,"private static  map <  status  counter >    (  string resource name )  {   map <  status  counter >  result = new  enum map <  >  (  status . class )  ;  for  (   status status :  status . values (  )  )   {   basic counter counter = new  basic counter (  monitor config . builder (  eureka client names . metric   transport   prefix  +  ""request"" )  . with tag ( ""id"" resource name )  . with tag ( ""class""  metrics collecting eureka http client . class . get simple name (  )  )  . with tag ( ""status"" status . name (  )  )  . build (  )  )  ;   servo util . register ( counter )  ;  result . put ( status counter )  ;   }  return result ;   }  ",646,3,create,1,[]
1983,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\MetricsCollectingEurekaHttpClient.java,create status counters,"private static  map <  status  counter >    (  string resource name )  {   map <  status  counter >  result = new  enum map <  >  (  status . class )  ;  for  (   status status :  status . values (  )  )   {   basic counter counter = new  basic counter (  monitor config . builder (  eureka client names . metric   transport   prefix  +  ""request"" )  . with tag ( ""id"" resource name )  . with tag ( ""class""  metrics collecting eureka http client . class . get simple name (  )  )  . with tag ( ""status"" status . name (  )  )  . build (  )  )  ;   servo util . register ( counter )  ;  result . put ( status counter )  ;   }  return result ;   }  ",646,3,status,2,"[23, 82, 133, 163, 170, 180, 495, 503, 600]"
1984,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\MetricsCollectingEurekaHttpClient.java,create status counters,"private static  map <  status  counter >    (  string resource name )  {   map <  status  counter >  result = new  enum map <  >  (  status . class )  ;  for  (   status status :  status . values (  )  )   {   basic counter counter = new  basic counter (  monitor config . builder (  eureka client names . metric   transport   prefix  +  ""request"" )  . with tag ( ""id"" resource name )  . with tag ( ""class""  metrics collecting eureka http client . class . get simple name (  )  )  . with tag ( ""status"" status . name (  )  )  . build (  )  )  ;   servo util . register ( counter )  ;  result . put ( status counter )  ;   }  return result ;   }  ",646,3,counters,3,[]
1985,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\MetricsCollectingEurekaHttpClient.java,execute,@ override protected  < r >  eureka http response < r >    (  request executor < r >  request executor )  {   eureka http client request metrics request metrics = metrics by request type . get ( request executor . get request type (  )  )  ;   stopwatch s,255,1,execute,1,[]
1986,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\MetricsCollectingEurekaHttpClient.java,initialize metrics,"private static  map <  request type  eureka http client request metrics >    (  )  {   map <  request type  eureka http client request metrics >  result = new  enum map <  >  (  request type . class )  ;  try  {  for  (   request type request type :  request type . values (  )  )   {  result . put ( request type new  eureka http client request metrics ( request type . name (  )  )  )  ;   }   }  catch  (   exception e )   {  logger . warn ( "" metrics initialization failure"" e )  ;   }  return result ;   }  ",512,2,initialize,1,[]
1987,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\MetricsCollectingEurekaHttpClient.java,initialize metrics,"private static  map <  request type  eureka http client request metrics >    (  )  {   map <  request type  eureka http client request metrics >  result = new  enum map <  >  (  request type . class )  ;  try  {  for  (   request type request type :  request type . values (  )  )   {  result . put ( request type new  eureka http client request metrics ( request type . name (  )  )  )  ;   }   }  catch  (   exception e )   {  logger . warn ( "" metrics initialization failure"" e )  ;   }  return result ;   }  ",512,2,metrics,2,"[64, 135, 346, 447]"
1988,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\MetricsCollectingEurekaHttpClient.java,mapped status,private static  status   (  eureka http response <  ?  >  http response )  {  int category = http response . get status code (  )   /  100 ;  switch  ( category )   {  case 1: return  status . x100 ;  case 2: return  status . x200 ;  case 3: return  status . x300 ;  case 4: return  status . x400 ;  case 5: return  status . x500 ;   }  return  status .  unknown ;   }  ,370,2,mapped,1,[]
1989,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\MetricsCollectingEurekaHttpClient.java,mapped status,private static  status   (  eureka http response <  ?  >  http response )  {  int category = http response . get status code (  )   /  100 ;  switch  ( category )   {  case 1: return  status . x100 ;  case 2: return  status . x200 ;  case 3: return  status . x300 ;  case 4: return  status . x400 ;  case 5: return  status . x500 ;   }  return  status .  unknown ;   }  ,370,2,status,2,"[16, 113, 184, 217, 250, 283, 316, 345]"
1990,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\MetricsCollectingEurekaHttpClient.java,new client,@ override public  eureka http client   (  eureka endpoint endpoint )  {  return new  metrics collecting eureka http client ( delegate factory . new client ( endpoint )  metrics by request type exception metrics false )  ;   }  ,228,2,new,1,"[81, 145]"
1991,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\MetricsCollectingEurekaHttpClient.java,new client,@ override public  eureka http client   (  eureka endpoint endpoint )  {  return new  metrics collecting eureka http client ( delegate factory . new client ( endpoint )  metrics by request type exception metrics false )  ;   }  ,228,2,client,2,"[31, 117, 149]"
1992,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\MetricsCollectingEurekaHttpClient.java,shutdown,void   (  )  {   servo util . unregister ( latency timer connection errors )  ;   servo util . unregister ( counters by status . values (  )  )  ;   }  ,152,1,shutdown,1,[]
1993,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\MetricsCollectingEurekaHttpClient.java,shutdown metrics,private static void   (  map <  request type  eureka http client request metrics >  metrics by request type )  {  for  (   eureka http client request metrics metrics : metrics by request type . values (  )  )   {  metrics . shutdown (  )  ;   }   }  ,250,2,shutdown,1,[224]
1994,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\MetricsCollectingEurekaHttpClient.java,shutdown metrics,private static void   (  map <  request type  eureka http client request metrics >  metrics by request type )  {  for  (   eureka http client request metrics metrics : metrics by request type . values (  )  )   {  metrics . shutdown (  )  ;   }   }  ,250,2,metrics,2,"[73, 84, 150, 158, 168, 214]"
1995,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\RedirectingEurekaHttpClient.java, redirecting eureka http client,public   (  string service url  transport client factory factory  dns service dns service )  {  this . service endpoint = new  default endpoint ( service url )  ;  this . factory = factory ;  this . dns service = dns service ;   }  ,232,4,redirecting,1,[]
1996,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\RedirectingEurekaHttpClient.java, redirecting eureka http client,public   (  string service url  transport client factory factory  dns service dns service )  {  this . service endpoint = new  default endpoint ( service url )  ;  this . factory = factory ;  this . dns service = dns service ;   }  ,232,4,eureka,2,[]
1997,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\RedirectingEurekaHttpClient.java, redirecting eureka http client,public   (  string service url  transport client factory factory  dns service dns service )  {  this . service endpoint = new  default endpoint ( service url )  ;  this . factory = factory ;  this . dns service = dns service ;   }  ,232,4,http,3,[]
1998,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\RedirectingEurekaHttpClient.java, redirecting eureka http client,public   (  string service url  transport client factory factory  dns service dns service )  {  this . service endpoint = new  default endpoint ( service url )  ;  this . factory = factory ;  this . dns service = dns service ;   }  ,232,4,client,4,[42]
1999,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\RedirectingEurekaHttpClient.java,create factory,public static  transport client factory   ( final  transport client factory delegate factory )  {  final  dns service impl dns service = new  dns service impl (  )  ;  return new  transport client factory (  )  {  @ override public  eureka http client new client (   eureka endpoint endpoint )  {  return new  redirecting eureka http client ( endpoint . get service url (  )  delegate factory dns service )  ;   }  @ override public void shutdown (  )  {  delegate factory . shutdown (  )  ;   }   }   ;   }  ,509,2,create,1,[]
2000,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\RedirectingEurekaHttpClient.java,create factory,public static  transport client factory   ( final  transport client factory delegate factory )  {  final  dns service impl dns service = new  dns service impl (  )  ;  return new  transport client factory (  )  {  @ override public  eureka http client new client (   eureka endpoint endpoint )  {  return new  redirecting eureka http client ( endpoint . get service url (  )  delegate factory dns service )  ;   }  @ override public void shutdown (  )  {  delegate factory . shutdown (  )  ;   }   }   ;   }  ,509,2,factory,2,"[32, 68, 85, 197, 385, 465]"
2001,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\RedirectingEurekaHttpClient.java,execute,@ override protected  < r >  eureka http response < r >    (  request executor < r >  request executor )  {   eureka http client current eureka client = delegate ref . get (  )  ;  if  ( current eureka client  =  =  null )   {   atomic reference <  eureka,255,1,execute,1,[]
2002,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\RedirectingEurekaHttpClient.java,execute on new server,"private  < r >  eureka http response < r >    (  request executor < r >  request executor  atomic reference <  eureka http client >  current http client ref )  {  uri target url = null ;  for  ( int follow redirect count = 0 ;  follow redirect count  <  max   followed   redirects ;  follow redirect count +  +  )   {   eureka http response < r >  http response = request executor . execute ( current http client ref . get (  )  )  ;  if  ( http response . get status code (  )   !  =  302 )   {  if  ( follow redirect count  =  =  0 )   {  logger . debug ( "" pinning to endpoint  {  } "" target url )  ;   }  else  {  logger . info ( "" pinning to endpoint  {  }   after  {  }  redirect ( s ) "" target url follow redirect count )  ;   }  return http response ;   }  target url = get redirect base uri ( http response . get location (  )  )  ;  if  ( target url  =  =  null )   {  throw new  transport exception ( "" invalid redirect url ""  +  http response . get location (  )  )  ;   }  current http client ref . get and set ( null )  . shutdown (  )  ;  current http client ref . set ( factory . new client ( new  default endpoint ( target url . to string (  )  )  )  )  ;   }   string message = "" follow redirect limit crossed for uri ""  +  service endpoint . get service url (  )  ;  logger . warn ( message )  ;  throw new  transport exception ( message )  ;   }  ",1367,4,execute,1,[383]
2003,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\RedirectingEurekaHttpClient.java,execute on new server,"private  < r >  eureka http response < r >    (  request executor < r >  request executor  atomic reference <  eureka http client >  current http client ref )  {  uri target url = null ;  for  ( int follow redirect count = 0 ;  follow redirect count  <  max   followed   redirects ;  follow redirect count +  +  )   {   eureka http response < r >  http response = request executor . execute ( current http client ref . get (  )  )  ;  if  ( http response . get status code (  )   !  =  302 )   {  if  ( follow redirect count  =  =  0 )   {  logger . debug ( "" pinning to endpoint  {  } "" target url )  ;   }  else  {  logger . info ( "" pinning to endpoint  {  }   after  {  }  redirect ( s ) "" target url follow redirect count )  ;   }  return http response ;   }  target url = get redirect base uri ( http response . get location (  )  )  ;  if  ( target url  =  =  null )   {  throw new  transport exception ( "" invalid redirect url ""  +  http response . get location (  )  )  ;   }  current http client ref . get and set ( null )  . shutdown (  )  ;  current http client ref . set ( factory . new client ( new  default endpoint ( target url . to string (  )  )  )  )  ;   }   string message = "" follow redirect limit crossed for uri ""  +  service endpoint . get service url (  )  ;  logger . warn ( message )  ;  throw new  transport exception ( message )  ;   }  ",1367,4,on,2,"[32, 336, 357, 450, 753, 811, 828, 907, 950, 967, 1344]"
2004,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\RedirectingEurekaHttpClient.java,execute on new server,"private  < r >  eureka http response < r >    (  request executor < r >  request executor  atomic reference <  eureka http client >  current http client ref )  {  uri target url = null ;  for  ( int follow redirect count = 0 ;  follow redirect count  <  max   followed   redirects ;  follow redirect count +  +  )   {   eureka http response < r >  http response = request executor . execute ( current http client ref . get (  )  )  ;  if  ( http response . get status code (  )   !  =  302 )   {  if  ( follow redirect count  =  =  0 )   {  logger . debug ( "" pinning to endpoint  {  } "" target url )  ;   }  else  {  logger . info ( "" pinning to endpoint  {  }   after  {  }  redirect ( s ) "" target url follow redirect count )  ;   }  return http response ;   }  target url = get redirect base uri ( http response . get location (  )  )  ;  if  ( target url  =  =  null )   {  throw new  transport exception ( "" invalid redirect url ""  +  http response . get location (  )  )  ;   }  current http client ref . get and set ( null )  . shutdown (  )  ;  current http client ref . set ( factory . new client ( new  default endpoint ( target url . to string (  )  )  )  )  ;   }   string message = "" follow redirect limit crossed for uri ""  +  service endpoint . get service url (  )  ;  logger . warn ( message )  ;  throw new  transport exception ( message )  ;   }  ",1367,4,new,3,"[885, 1096, 1109, 1322]"
2005,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\RedirectingEurekaHttpClient.java,execute on new server,"private  < r >  eureka http response < r >    (  request executor < r >  request executor  atomic reference <  eureka http client >  current http client ref )  {  uri target url = null ;  for  ( int follow redirect count = 0 ;  follow redirect count  <  max   followed   redirects ;  follow redirect count +  +  )   {   eureka http response < r >  http response = request executor . execute ( current http client ref . get (  )  )  ;  if  ( http response . get status code (  )   !  =  302 )   {  if  ( follow redirect count  =  =  0 )   {  logger . debug ( "" pinning to endpoint  {  } "" target url )  ;   }  else  {  logger . info ( "" pinning to endpoint  {  }   after  {  }  redirect ( s ) "" target url follow redirect count )  ;   }  return http response ;   }  target url = get redirect base uri ( http response . get location (  )  )  ;  if  ( target url  =  =  null )   {  throw new  transport exception ( "" invalid redirect url ""  +  http response . get location (  )  )  ;   }  current http client ref . get and set ( null )  . shutdown (  )  ;  current http client ref . set ( factory . new client ( new  default endpoint ( target url . to string (  )  )  )  )  ;   }   string message = "" follow redirect limit crossed for uri ""  +  service endpoint . get service url (  )  ;  logger . warn ( message )  ;  throw new  transport exception ( message )  ;   }  ",1367,4,server,4,[]
2006,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\RedirectingEurekaHttpClient.java,get redirect base uri,"private uri   ( uri locationuri )  {  if  ( locationuri  =  =  null )   {  throw new  transport exception ( "" missing  location header in the redirect reply"" )  ;   }   matcher path matcher = redirect   path   regex . matcher ( locationuri . get path (  )  )  ;  if  ( path matcher . matches (  )  )   {  return  uri builder . from uri ( locationuri )  . host ( dns service . resolve ip ( locationuri . get host (  )  )  )  . replace path ( path matcher . group ( 1 )  )  . replace query ( null )  . build (  )  ;   }  logger . warn ( "" invalid redirect url  {  } "" locationuri )  ;  return null ;   }  ",603,4,get,1,"[242, 403]"
2007,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\RedirectingEurekaHttpClient.java,get redirect base uri,"private uri   ( uri locationuri )  {  if  ( locationuri  =  =  null )   {  throw new  transport exception ( "" missing  location header in the redirect reply"" )  ;   }   matcher path matcher = redirect   path   regex . matcher ( locationuri . get path (  )  )  ;  if  ( path matcher . matches (  )  )   {  return  uri builder . from uri ( locationuri )  . host ( dns service . resolve ip ( locationuri . get host (  )  )  )  . replace path ( path matcher . group ( 1 )  )  . replace query ( null )  . build (  )  ;   }  logger . warn ( "" invalid redirect url  {  } "" locationuri )  ;  return null ;   }  ",603,4,redirect,2,"[142, 192, 545]"
2008,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\RedirectingEurekaHttpClient.java,get redirect base uri,"private uri   ( uri locationuri )  {  if  ( locationuri  =  =  null )   {  throw new  transport exception ( "" missing  location header in the redirect reply"" )  ;   }   matcher path matcher = redirect   path   regex . matcher ( locationuri . get path (  )  )  ;  if  ( path matcher . matches (  )  )   {  return  uri builder . from uri ( locationuri )  . host ( dns service . resolve ip ( locationuri . get host (  )  )  )  . replace path ( path matcher . group ( 1 )  )  . replace query ( null )  . build (  )  ;   }  logger . warn ( "" invalid redirect url  {  } "" locationuri )  ;  return null ;   }  ",603,4,base,3,[]
2009,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\RedirectingEurekaHttpClient.java,get redirect base uri,"private uri   ( uri locationuri )  {  if  ( locationuri  =  =  null )   {  throw new  transport exception ( "" missing  location header in the redirect reply"" )  ;   }   matcher path matcher = redirect   path   regex . matcher ( locationuri . get path (  )  )  ;  if  ( path matcher . matches (  )  )   {  return  uri builder . from uri ( locationuri )  . host ( dns service . resolve ip ( locationuri . get host (  )  )  )  . replace path ( path matcher . group ( 1 )  )  . replace query ( null )  . build (  )  ;   }  logger . warn ( "" invalid redirect url  {  } "" locationuri )  ;  return null ;   }  ",603,4,uri,4,"[8, 16, 28, 52, 236, 313, 332, 346, 397, 574]"
2010,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\RedirectingEurekaHttpClient.java,new client,@ override public  eureka http client   (  eureka endpoint endpoint )  {  return new  redirecting eureka http client ( endpoint . get service url (  )  delegate factory dns service )  ;   }  ,191,2,new,1,[81]
2011,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\RedirectingEurekaHttpClient.java,new client,@ override public  eureka http client   (  eureka endpoint endpoint )  {  return new  redirecting eureka http client ( endpoint . get service url (  )  delegate factory dns service )  ;   }  ,191,2,client,2,"[31, 110]"
2012,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\RedirectingEurekaHttpClient.java,shutdown,@ override public void   (  )  {  delegate factory . shutdown (  )  ;   }  ,75,1,shutdown,1,[53]
2013,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\ServerStatusEvaluators.java,accept,@ override public boolean   ( int status code  request type request type )  {  return status code  >  =  200 && status code  <  300 ;   }  ,139,1,accept,1,[]
2014,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\ServerStatusEvaluators.java,http success evaluator,public static  server status evaluator   (  )  {  return http   success   evaluator ;   }  ,91,3,http,1,[57]
2015,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\ServerStatusEvaluators.java,http success evaluator,public static  server status evaluator   (  )  {  return http   success   evaluator ;   }  ,91,3,success,2,[64]
2016,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\ServerStatusEvaluators.java,http success evaluator,public static  server status evaluator   (  )  {  return http   success   evaluator ;   }  ,91,3,evaluator,3,"[29, 74]"
2017,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\ServerStatusEvaluators.java,legacy evaluator,public static  server status evaluator   (  )  {  return legacy   evaluator ;   }  ,83,2,legacy,1,[57]
2018,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\ServerStatusEvaluators.java,legacy evaluator,public static  server status evaluator   (  )  {  return legacy   evaluator ;   }  ,83,2,evaluator,2,"[29, 66]"
2019,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\DefaultEurekaTransportConfig.java, default eureka transport config,"public   (  string parent namespace  dynamic property factory config instance )  {  this . namespace = parent namespace  =  =  null  ?  sub   namespace :  ( parent namespace . ends with ( "" . "" )   ?  parent namespace  +  sub   namespace : parent namespace  +  "" . ""  +  sub   namespace )  ;  this . config instance = config instance ;   }  ",341,4,default,1,[]
2020,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\DefaultEurekaTransportConfig.java, default eureka transport config,"public   (  string parent namespace  dynamic property factory config instance )  {  this . namespace = parent namespace  =  =  null  ?  sub   namespace :  ( parent namespace . ends with ( "" . "" )   ?  parent namespace  +  sub   namespace : parent namespace  +  "" . ""  +  sub   namespace )  ;  this . config instance = config instance ;   }  ",341,4,eureka,2,[]
2021,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\DefaultEurekaTransportConfig.java, default eureka transport config,"public   (  string parent namespace  dynamic property factory config instance )  {  this . namespace = parent namespace  =  =  null  ?  sub   namespace :  ( parent namespace . ends with ( "" . "" )   ?  parent namespace  +  sub   namespace : parent namespace  +  "" . ""  +  sub   namespace )  ;  this . config instance = config instance ;   }  ",341,4,transport,3,[]
2022,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\DefaultEurekaTransportConfig.java, default eureka transport config,"public   (  string parent namespace  dynamic property factory config instance )  {  this . namespace = parent namespace  =  =  null  ?  sub   namespace :  ( parent namespace . ends with ( "" . "" )   ?  parent namespace  +  sub   namespace : parent namespace  +  "" . ""  +  sub   namespace )  ;  this . config instance = config instance ;   }  ",341,4,config,4,"[62, 300, 318]"
2023,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\DefaultEurekaTransportConfig.java,applications resolver use ip,@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  application   resolver   use   ip   key false )  . get (  )  ;   }  ,167,4,applications,1,[]
2024,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\DefaultEurekaTransportConfig.java,applications resolver use ip,@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  application   resolver   use   ip   key false )  . get (  )  ;   }  ,167,4,resolver,2,[113]
2025,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\DefaultEurekaTransportConfig.java,applications resolver use ip,@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  application   resolver   use   ip   key false )  . get (  )  ;   }  ,167,4,use,3,[124]
2026,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\DefaultEurekaTransportConfig.java,applications resolver use ip,@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  application   resolver   use   ip   key false )  . get (  )  ;   }  ,167,4,ip,4,[130]
2027,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\DefaultEurekaTransportConfig.java,get applications resolver data staleness threshold seconds,@ override public int   (  )  {  return config instance . get int property ( namespace  +  data   staleness   threshold   key  values . data   staleness   trheshold )  . get (  )  ;   }  ,187,7,get,1,"[58, 170]"
2028,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\DefaultEurekaTransportConfig.java,get applications resolver data staleness threshold seconds,@ override public int   (  )  {  return config instance . get int property ( namespace  +  data   staleness   threshold   key  values . data   staleness   trheshold )  . get (  )  ;   }  ,187,7,applications,2,[]
2029,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\DefaultEurekaTransportConfig.java,get applications resolver data staleness threshold seconds,@ override public int   (  )  {  return config instance . get int property ( namespace  +  data   staleness   threshold   key  values . data   staleness   trheshold )  . get (  )  ;   }  ,187,7,resolver,3,[]
2030,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\DefaultEurekaTransportConfig.java,get applications resolver data staleness threshold seconds,@ override public int   (  )  {  return config instance . get int property ( namespace  +  data   staleness   threshold   key  values . data   staleness   trheshold )  . get (  )  ;   }  ,187,7,data,4,"[91, 136]"
2031,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\DefaultEurekaTransportConfig.java,get applications resolver data staleness threshold seconds,@ override public int   (  )  {  return config instance . get int property ( namespace  +  data   staleness   threshold   key  values . data   staleness   trheshold )  . get (  )  ;   }  ,187,7,staleness,5,"[98, 143]"
2032,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\DefaultEurekaTransportConfig.java,get applications resolver data staleness threshold seconds,@ override public int   (  )  {  return config instance . get int property ( namespace  +  data   staleness   threshold   key  values . data   staleness   trheshold )  . get (  )  ;   }  ,187,7,threshold,6,[110]
2033,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\DefaultEurekaTransportConfig.java,get applications resolver data staleness threshold seconds,@ override public int   (  )  {  return config instance . get int property ( namespace  +  data   staleness   threshold   key  values . data   staleness   trheshold )  . get (  )  ;   }  ,187,7,seconds,7,[]
2034,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\DefaultEurekaTransportConfig.java,get async executor thread pool size,@ override public int   (  )  {  return config instance . get int property ( namespace  +  async   executor   threadpool   size   key  values . async   executor   threadpool   size )  . get (  )  ;   }  ,203,6,get,1,"[58, 186]"
2035,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\DefaultEurekaTransportConfig.java,get async executor thread pool size,@ override public int   (  )  {  return config instance . get int property ( namespace  +  async   executor   threadpool   size   key  values . async   executor   threadpool   size )  . get (  )  ;   }  ,203,6,async,2,"[91, 144]"
2036,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\DefaultEurekaTransportConfig.java,get async executor thread pool size,@ override public int   (  )  {  return config instance . get int property ( namespace  +  async   executor   threadpool   size   key  values . async   executor   threadpool   size )  . get (  )  ;   }  ,203,6,executor,3,"[99, 152]"
2037,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\DefaultEurekaTransportConfig.java,get async executor thread pool size,@ override public int   (  )  {  return config instance . get int property ( namespace  +  async   executor   threadpool   size   key  values . async   executor   threadpool   size )  . get (  )  ;   }  ,203,6,thread,4,"[110, 163]"
2038,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\DefaultEurekaTransportConfig.java,get async executor thread pool size,@ override public int   (  )  {  return config instance . get int property ( namespace  +  async   executor   threadpool   size   key  values . async   executor   threadpool   size )  . get (  )  ;   }  ,203,6,pool,5,"[116, 169]"
2039,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\DefaultEurekaTransportConfig.java,get async executor thread pool size,@ override public int   (  )  {  return config instance . get int property ( namespace  +  async   executor   threadpool   size   key  values . async   executor   threadpool   size )  . get (  )  ;   }  ,203,6,size,6,"[123, 176]"
2040,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\DefaultEurekaTransportConfig.java,get async resolver refresh interval ms,@ override public int   (  )  {  return config instance . get int property ( namespace  +  async   resolver   refresh   interval   key  values . async   resolver   refresh   interval )  . get (  )  ;   }  ,205,6,get,1,"[58, 188]"
2041,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\DefaultEurekaTransportConfig.java,get async resolver refresh interval ms,@ override public int   (  )  {  return config instance . get int property ( namespace  +  async   resolver   refresh   interval   key  values . async   resolver   refresh   interval )  . get (  )  ;   }  ,205,6,async,2,"[91, 145]"
2042,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\DefaultEurekaTransportConfig.java,get async resolver refresh interval ms,@ override public int   (  )  {  return config instance . get int property ( namespace  +  async   resolver   refresh   interval   key  values . async   resolver   refresh   interval )  . get (  )  ;   }  ,205,6,resolver,3,"[99, 153]"
2043,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\DefaultEurekaTransportConfig.java,get async resolver refresh interval ms,@ override public int   (  )  {  return config instance . get int property ( namespace  +  async   resolver   refresh   interval   key  values . async   resolver   refresh   interval )  . get (  )  ;   }  ,205,6,refresh,4,"[110, 164]"
2044,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\DefaultEurekaTransportConfig.java,get async resolver refresh interval ms,@ override public int   (  )  {  return config instance . get int property ( namespace  +  async   resolver   refresh   interval   key  values . async   resolver   refresh   interval )  . get (  )  ;   }  ,205,6,interval,5,"[120, 174]"
2045,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\DefaultEurekaTransportConfig.java,get async resolver refresh interval ms,@ override public int   (  )  {  return config instance . get int property ( namespace  +  async   resolver   refresh   interval   key  values . async   resolver   refresh   interval )  . get (  )  ;   }  ,205,6,ms,6,[]
2046,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\DefaultEurekaTransportConfig.java,get async resolver warm up timeout ms,@ override public int   (  )  {  return config instance . get int property ( namespace  +  async   resolver   warmup   timeout   key  values . async   resolver   warmup   timeout )  . get (  )  ;   }  ,201,7,get,1,"[58, 184]"
2047,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\DefaultEurekaTransportConfig.java,get async resolver warm up timeout ms,@ override public int   (  )  {  return config instance . get int property ( namespace  +  async   resolver   warmup   timeout   key  values . async   resolver   warmup   timeout )  . get (  )  ;   }  ,201,7,async,2,"[91, 143]"
2048,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\DefaultEurekaTransportConfig.java,get async resolver warm up timeout ms,@ override public int   (  )  {  return config instance . get int property ( namespace  +  async   resolver   warmup   timeout   key  values . async   resolver   warmup   timeout )  . get (  )  ;   }  ,201,7,resolver,3,"[99, 151]"
2049,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\DefaultEurekaTransportConfig.java,get async resolver warm up timeout ms,@ override public int   (  )  {  return config instance . get int property ( namespace  +  async   resolver   warmup   timeout   key  values . async   resolver   warmup   timeout )  . get (  )  ;   }  ,201,7,warm,4,"[110, 162]"
2050,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\DefaultEurekaTransportConfig.java,get async resolver warm up timeout ms,@ override public int   (  )  {  return config instance . get int property ( namespace  +  async   resolver   warmup   timeout   key  values . async   resolver   warmup   timeout )  . get (  )  ;   }  ,201,7,up,5,"[114, 166]"
2051,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\DefaultEurekaTransportConfig.java,get async resolver warm up timeout ms,@ override public int   (  )  {  return config instance . get int property ( namespace  +  async   resolver   warmup   timeout   key  values . async   resolver   warmup   timeout )  . get (  )  ;   }  ,201,7,timeout,6,"[119, 171]"
2052,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\DefaultEurekaTransportConfig.java,get async resolver warm up timeout ms,@ override public int   (  )  {  return config instance . get int property ( namespace  +  async   resolver   warmup   timeout   key  values . async   resolver   warmup   timeout )  . get (  )  ;   }  ,201,7,ms,7,[]
2053,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\DefaultEurekaTransportConfig.java,get bootstrap resolver strategy,@ override public  string   (  )  {  return config instance . get string property ( namespace  +  bootstrap   resolver   strategy   key null )  . get (  )  ;   }  ,163,4,get,1,"[62, 146]"
2054,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\DefaultEurekaTransportConfig.java,get bootstrap resolver strategy,@ override public  string   (  )  {  return config instance . get string property ( namespace  +  bootstrap   resolver   strategy   key null )  . get (  )  ;   }  ,163,4,bootstrap,2,[98]
2055,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\DefaultEurekaTransportConfig.java,get bootstrap resolver strategy,@ override public  string   (  )  {  return config instance . get string property ( namespace  +  bootstrap   resolver   strategy   key null )  . get (  )  ;   }  ,163,4,resolver,3,[110]
2056,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\DefaultEurekaTransportConfig.java,get bootstrap resolver strategy,@ override public  string   (  )  {  return config instance . get string property ( namespace  +  bootstrap   resolver   strategy   key null )  . get (  )  ;   }  ,163,4,strategy,4,[121]
2057,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\DefaultEurekaTransportConfig.java,get read cluster vip,@ override public  string   (  )  {  return config instance . get string property ( namespace  +  read   cluster   vip   key null )  . get (  )  ;   }  ,152,4,get,1,"[62, 135]"
2058,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\DefaultEurekaTransportConfig.java,get read cluster vip,@ override public  string   (  )  {  return config instance . get string property ( namespace  +  read   cluster   vip   key null )  . get (  )  ;   }  ,152,4,read,2,[98]
2059,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\DefaultEurekaTransportConfig.java,get read cluster vip,@ override public  string   (  )  {  return config instance . get string property ( namespace  +  read   cluster   vip   key null )  . get (  )  ;   }  ,152,4,cluster,3,[105]
2060,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\DefaultEurekaTransportConfig.java,get read cluster vip,@ override public  string   (  )  {  return config instance . get string property ( namespace  +  read   cluster   vip   key null )  . get (  )  ;   }  ,152,4,vip,4,[115]
2061,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\DefaultEurekaTransportConfig.java,get retryable client quarantine refresh percentage,@ override public double   (  )  {  return config instance . get double property ( namespace  +  quarantine   refresh   percentage   key  values . quarantine   refresh   percentage )  . get (  )  ;   }  ,203,6,get,1,"[61, 186]"
2062,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\DefaultEurekaTransportConfig.java,get retryable client quarantine refresh percentage,@ override public double   (  )  {  return config instance . get double property ( namespace  +  quarantine   refresh   percentage   key  values . quarantine   refresh   percentage )  . get (  )  ;   }  ,203,6,retryable,2,[]
2063,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\DefaultEurekaTransportConfig.java,get retryable client quarantine refresh percentage,@ override public double   (  )  {  return config instance . get double property ( namespace  +  quarantine   refresh   percentage   key  values . quarantine   refresh   percentage )  . get (  )  ;   }  ,203,6,client,3,[]
2064,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\DefaultEurekaTransportConfig.java,get retryable client quarantine refresh percentage,@ override public double   (  )  {  return config instance . get double property ( namespace  +  quarantine   refresh   percentage   key  values . quarantine   refresh   percentage )  . get (  )  ;   }  ,203,6,quarantine,4,"[97, 147]"
2065,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\DefaultEurekaTransportConfig.java,get retryable client quarantine refresh percentage,@ override public double   (  )  {  return config instance . get double property ( namespace  +  quarantine   refresh   percentage   key  values . quarantine   refresh   percentage )  . get (  )  ;   }  ,203,6,refresh,5,"[110, 160]"
2066,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\DefaultEurekaTransportConfig.java,get retryable client quarantine refresh percentage,@ override public double   (  )  {  return config instance . get double property ( namespace  +  quarantine   refresh   percentage   key  values . quarantine   refresh   percentage )  . get (  )  ;   }  ,203,6,percentage,6,"[120, 170]"
2067,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\DefaultEurekaTransportConfig.java,get sessioned client reconnect interval seconds,@ override public int   (  )  {  return config instance . get int property ( namespace  +  session   reconnect   interval   key  values . session   reconnect   interval )  . get (  )  ;   }  ,191,6,get,1,"[58, 174]"
2068,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\DefaultEurekaTransportConfig.java,get sessioned client reconnect interval seconds,@ override public int   (  )  {  return config instance . get int property ( namespace  +  session   reconnect   interval   key  values . session   reconnect   interval )  . get (  )  ;   }  ,191,6,sessioned,2,[]
2069,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\DefaultEurekaTransportConfig.java,get sessioned client reconnect interval seconds,@ override public int   (  )  {  return config instance . get int property ( namespace  +  session   reconnect   interval   key  values . session   reconnect   interval )  . get (  )  ;   }  ,191,6,client,3,[]
2070,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\DefaultEurekaTransportConfig.java,get sessioned client reconnect interval seconds,@ override public int   (  )  {  return config instance . get int property ( namespace  +  session   reconnect   interval   key  values . session   reconnect   interval )  . get (  )  ;   }  ,191,6,reconnect,4,"[101, 148]"
2071,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\DefaultEurekaTransportConfig.java,get sessioned client reconnect interval seconds,@ override public int   (  )  {  return config instance . get int property ( namespace  +  session   reconnect   interval   key  values . session   reconnect   interval )  . get (  )  ;   }  ,191,6,interval,5,"[113, 160]"
2072,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\DefaultEurekaTransportConfig.java,get sessioned client reconnect interval seconds,@ override public int   (  )  {  return config instance . get int property ( namespace  +  session   reconnect   interval   key  values . session   reconnect   interval )  . get (  )  ;   }  ,191,6,seconds,6,[]
2073,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\DefaultEurekaTransportConfig.java,get write cluster vip,@ override public  string   (  )  {  return config instance . get string property ( namespace  +  write   cluster   vip   key null )  . get (  )  ;   }  ,153,4,get,1,"[62, 136]"
2074,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\DefaultEurekaTransportConfig.java,get write cluster vip,@ override public  string   (  )  {  return config instance . get string property ( namespace  +  write   cluster   vip   key null )  . get (  )  ;   }  ,153,4,write,2,[98]
2075,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\DefaultEurekaTransportConfig.java,get write cluster vip,@ override public  string   (  )  {  return config instance . get string property ( namespace  +  write   cluster   vip   key null )  . get (  )  ;   }  ,153,4,cluster,3,[106]
2076,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\DefaultEurekaTransportConfig.java,get write cluster vip,@ override public  string   (  )  {  return config instance . get string property ( namespace  +  write   cluster   vip   key null )  . get (  )  ;   }  ,153,4,vip,4,[116]
2077,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\DefaultEurekaTransportConfig.java,use bootstrap resolver for query,@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  use   bootstrap   resolver   for   query true )  . get (  )  ;   }  ,167,5,use,1,[99]
2078,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\DefaultEurekaTransportConfig.java,use bootstrap resolver for query,@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  use   bootstrap   resolver   for   query true )  . get (  )  ;   }  ,167,5,bootstrap,2,[105]
2079,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\DefaultEurekaTransportConfig.java,use bootstrap resolver for query,@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  use   bootstrap   resolver   for   query true )  . get (  )  ;   }  ,167,5,resolver,3,[117]
2080,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\DefaultEurekaTransportConfig.java,use bootstrap resolver for query,@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  use   bootstrap   resolver   for   query true )  . get (  )  ;   }  ,167,5,for,4,[128]
2081,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\DefaultEurekaTransportConfig.java,use bootstrap resolver for query,@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  use   bootstrap   resolver   for   query true )  . get (  )  ;   }  ,167,5,query,5,[134]
2082,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\SessionedEurekaHttpClient.java, sessioned eureka http client,public   (  string name  eureka http client factory client factory long session duration ms )  {  this . name = name ;  this . client factory = client factory ;  this . session duration ms = session duration ms ;  this . current session duration ms = randomize session duration ( session duration ms )  ;   monitors . register object ( name this )  ;   }  ,356,4,sessioned,1,[]
2083,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\SessionedEurekaHttpClient.java, sessioned eureka http client,public   (  string name  eureka http client factory client factory long session duration ms )  {  this . name = name ;  this . client factory = client factory ;  this . session duration ms = session duration ms ;  this . current session duration ms = randomize session duration ( session duration ms )  ;   monitors . register object ( name this )  ;   }  ,356,4,eureka,2,[25]
2084,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\SessionedEurekaHttpClient.java, sessioned eureka http client,public   (  string name  eureka http client factory client factory long session duration ms )  {  this . name = name ;  this . client factory = client factory ;  this . session duration ms = session duration ms ;  this . current session duration ms = randomize session duration ( session duration ms )  ;   monitors . register object ( name this )  ;   }  ,356,4,http,3,[32]
2085,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\SessionedEurekaHttpClient.java, sessioned eureka http client,public   (  string name  eureka http client factory client factory long session duration ms )  {  this . name = name ;  this . client factory = client factory ;  this . session duration ms = session duration ms ;  this . current session duration ms = randomize session duration ( session duration ms )  ;   monitors . register object ( name this )  ;   }  ,356,4,client,4,"[37, 52, 127, 144]"
2086,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\SessionedEurekaHttpClient.java,execute,@ override protected  < r >  eureka http response < r >    (  request executor < r >  request executor )  {  long now =  system . current time millis (  )  ;  long delay = now  -  last reconnect time stamp ;  if  ( delay  >  =  current session duration ms,255,1,execute,1,[]
2087,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\SessionedEurekaHttpClient.java,get current session duration,"@ monitor ( name = metric   transport   prefix  +  ""current session duration"" description = "" duration of the current session"" type =  data source type . gauge )  public long   (  )  {  return last reconnect time stamp  <  0  ?  0 :  system . current time",255,4,get,1,[]
2088,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\SessionedEurekaHttpClient.java,get current session duration,"@ monitor ( name = metric   transport   prefix  +  ""current session duration"" description = "" duration of the current session"" type =  data source type . gauge )  public long   (  )  {  return last reconnect time stamp  <  0  ?  0 :  system . current time",255,4,current,2,"[52, 110, 243]"
2089,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\SessionedEurekaHttpClient.java,get current session duration,"@ monitor ( name = metric   transport   prefix  +  ""current session duration"" description = "" duration of the current session"" type =  data source type . gauge )  public long   (  )  {  return last reconnect time stamp  <  0  ?  0 :  system . current time",255,4,session,3,"[60, 118]"
2090,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\SessionedEurekaHttpClient.java,get current session duration,"@ monitor ( name = metric   transport   prefix  +  ""current session duration"" description = "" duration of the current session"" type =  data source type . gauge )  public long   (  )  {  return last reconnect time stamp  <  0  ?  0 :  system . current time",255,4,duration,4,"[68, 94]"
2091,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\SessionedEurekaHttpClient.java,randomize session duration,protected long   ( long session duration ms )  {  long delta =  ( long )  ( session duration ms *  ( random . next double (  )   -  0 . 5 )  )  ;  return session duration ms  +  delta ;   }  ,191,3,randomize,1,[]
2092,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\SessionedEurekaHttpClient.java,randomize session duration,protected long   ( long session duration ms )  {  long delta =  ( long )  ( session duration ms *  ( random . next double (  )   -  0 . 5 )  )  ;  return session duration ms  +  delta ;   }  ,191,3,session,2,"[24, 76, 154]"
2093,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\SessionedEurekaHttpClient.java,randomize session duration,protected long   ( long session duration ms )  {  long delta =  ( long )  ( session duration ms *  ( random . next double (  )   -  0 . 5 )  )  ;  return session duration ms  +  delta ;   }  ,191,3,duration,3,"[32, 84, 162]"
2094,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\SessionedEurekaHttpClient.java,shutdown,@ override public void   (  )  {  if  (  monitors . is object registered ( name this )  )   {   monitors . unregister object ( name this )  ;   }   transport utils . shutdown ( eureka http client ref . get and set ( null )  )  ;   }  ,234,1,shutdown,1,[166]
2095,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClients.java,canonical client factory,static  eureka http client factory   ( final  string name final  eureka transport config transport config final  cluster resolver <  eureka endpoint >  cluster resolver final  transport client factory transport client factory )  {  return new  eureka http client factory (  )  {  @ override public  eureka http client new client (  )  {  return new  sessioned eureka http client ( name  retryable eureka http client . create factory ( name transport config cluster resolver  redirecting eureka http client . create factory ( transport client factory )   server status evaluators . legacy evaluator (  )  )  transport config . get sessioned client reconnect interval seconds (  )  * 1000 )  ;   }  @ override public void shutdown (  )  {  wrap closable ( cluster resolver )  . shutdown (  )  ;   }   }   ;   }  ,810,3,canonical,1,[]
2096,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClients.java,canonical client factory,static  eureka http client factory   ( final  string name final  eureka transport config transport config final  cluster resolver <  eureka endpoint >  cluster resolver final  transport client factory transport client factory )  {  return new  eureka http client factory (  )  {  @ override public  eureka http client new client (  )  {  return new  sessioned eureka http client ( name  retryable eureka http client . create factory ( name transport config cluster resolver  redirecting eureka http client . create factory ( transport client factory )   server status evaluators . legacy evaluator (  )  )  transport config . get sessioned client reconnect interval seconds (  )  * 1000 )  ;   }  @ override public void shutdown (  )  {  wrap closable ( cluster resolver )  . shutdown (  )  ;   }   }   ;   }  ,810,3,client,2,"[20, 186, 211, 256, 311, 322, 372, 409, 499, 535, 640]"
2097,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClients.java,canonical client factory,static  eureka http client factory   ( final  string name final  eureka transport config transport config final  cluster resolver <  eureka endpoint >  cluster resolver final  transport client factory transport client factory )  {  return new  eureka http client factory (  )  {  @ override public  eureka http client new client (  )  {  return new  sessioned eureka http client ( name  retryable eureka http client . create factory ( name transport config cluster resolver  redirecting eureka http client . create factory ( transport client factory )   server status evaluators . legacy evaluator (  )  )  transport config . get sessioned client reconnect interval seconds (  )  * 1000 )  ;   }  @ override public void shutdown (  )  {  wrap closable ( cluster resolver )  . shutdown (  )  ;   }   }   ;   }  ,810,3,factory,3,"[27, 193, 218, 263, 425, 515, 542]"
2098,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClients.java,composite bootstrap resolver,"static  closable resolver <  aws endpoint >    ( final  eureka client config client config final  eureka transport config transport config final  transport client factory transport client factory final  instance info my instance info final  applications resolver .  applications source applications source )  {  final  cluster resolver root resolver = new  config cluster resolver ( client config my instance info )  ;  final  eureka http resolver remote resolver = new  eureka http resolver ( client config transport config root resolver transport client factory transport config . get write cluster vip (  )  )  ;  final  applications resolver local resolver = new  applications resolver ( client config transport config applications source transport config . get write cluster vip (  )  )  ;   cluster resolver <  aws endpoint >  composite resolver = new  cluster resolver <  aws endpoint >  (  )  {  @ override public  string get region (  )  {  return client config . get region (  )  ;   }  @ override public  list <  aws endpoint >  get cluster endpoints (  )  {   list <  aws endpoint >  result = local resolver . get cluster endpoints (  )  ;  if  ( result . is empty (  )  )   {  result = remote resolver . get cluster endpoints (  )  ;   }  return result ;   }   }   ;   list <  aws endpoint >  initial value = composite resolver . get cluster endpoints (  )  ;  if  ( initial value . is empty (  )  )   {   string msg = "" initial resolution of  eureka endpoints failed .   check  config cluster resolver logs for more info"" ;  logger . error ( msg )  ;  fail fast on init check ( client config msg )  ;   }   string[] avail zones = client config . get availability zones ( client config . get region (  )  )  ;   string my zone =  instance info . get zone ( avail zones my instance info )  ;  return new  async resolver <  >  (  eureka client names . bootstrap new  zone affinity cluster resolver ( composite resolver my zone true )  initial value transport config . get async executor thread pool size (  )  transport config . get async resolver refresh interval ms (  )  )  ;   }  ",2095,3,composite,1,"[833, 1322, 1911]"
2099,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClients.java,composite bootstrap resolver,"static  closable resolver <  aws endpoint >    ( final  eureka client config client config final  eureka transport config transport config final  transport client factory transport client factory final  instance info my instance info final  applications resolver .  applications source applications source )  {  final  cluster resolver root resolver = new  config cluster resolver ( client config my instance info )  ;  final  eureka http resolver remote resolver = new  eureka http resolver ( client config transport config root resolver transport client factory transport config . get write cluster vip (  )  )  ;  final  applications resolver local resolver = new  applications resolver ( client config transport config applications source transport config . get write cluster vip (  )  )  ;   cluster resolver <  aws endpoint >  composite resolver = new  cluster resolver <  aws endpoint >  (  )  {  @ override public  string get region (  )  {  return client config . get region (  )  ;   }  @ override public  list <  aws endpoint >  get cluster endpoints (  )  {   list <  aws endpoint >  result = local resolver . get cluster endpoints (  )  ;  if  ( result . is empty (  )  )   {  result = remote resolver . get cluster endpoints (  )  ;   }  return result ;   }   }   ;   list <  aws endpoint >  initial value = composite resolver . get cluster endpoints (  )  ;  if  ( initial value . is empty (  )  )   {   string msg = "" initial resolution of  eureka endpoints failed .   check  config cluster resolver logs for more info"" ;  logger . error ( msg )  ;  fail fast on init check ( client config msg )  ;   }   string[] avail zones = client config . get availability zones ( client config . get region (  )  )  ;   string my zone =  instance info . get zone ( avail zones my instance info )  ;  return new  async resolver <  >  (  eureka client names . bootstrap new  zone affinity cluster resolver ( composite resolver my zone true )  initial value transport config . get async executor thread pool size (  )  transport config . get async resolver refresh interval ms (  )  )  ;   }  ",2095,3,bootstrap,2,[1863]
2100,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClients.java,composite bootstrap resolver,"static  closable resolver <  aws endpoint >    ( final  eureka client config client config final  eureka transport config transport config final  transport client factory transport client factory final  instance info my instance info final  applications resolver .  applications source applications source )  {  final  cluster resolver root resolver = new  config cluster resolver ( client config my instance info )  ;  final  eureka http resolver remote resolver = new  eureka http resolver ( client config transport config root resolver transport client factory transport config . get write cluster vip (  )  )  ;  final  applications resolver local resolver = new  applications resolver ( client config transport config applications source transport config . get write cluster vip (  )  )  ;   cluster resolver <  aws endpoint >  composite resolver = new  cluster resolver <  aws endpoint >  (  )  {  @ override public  string get region (  )  {  return client config . get region (  )  ;   }  @ override public  list <  aws endpoint >  get cluster endpoints (  )  {   list <  aws endpoint >  result = local resolver . get cluster endpoints (  )  ;  if  ( result . is empty (  )  )   {  result = remote resolver . get cluster endpoints (  )  ;   }  return result ;   }   }   ;   list <  aws endpoint >  initial value = composite resolver . get cluster endpoints (  )  ;  if  ( initial value . is empty (  )  )   {   string msg = "" initial resolution of  eureka endpoints failed .   check  config cluster resolver logs for more info"" ;  logger . error ( msg )  ;  fail fast on init check ( client config msg )  ;   }   string[] avail zones = client config . get availability zones ( client config . get region (  )  )  ;   string my zone =  instance info . get zone ( avail zones my instance info )  ;  return new  async resolver <  >  (  eureka client names . bootstrap new  zone affinity cluster resolver ( composite resolver my zone true )  initial value transport config . get async executor thread pool size (  )  transport config . get async resolver refresh interval ms (  )  )  ;   }  ",2095,3,resolver,3,"[17, 254, 327, 341, 372, 439, 455, 483, 530, 637, 652, 681, 805, 843, 867, 1111, 1206, 1332, 1507, 1823, 1900, 1921, 2050]"
2101,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClients.java,composite query resolver,static  closable resolver <  aws endpoint >    ( final  cluster resolver <  aws endpoint >  remote resolver final  cluster resolver <  aws endpoint >  local resolver final  eureka client config client config final  eureka transport config transport config final  instance info my instance info )  {   string[] avail zones = client config . get availability zones ( client config . get region (  )  )  ;   string my zone =  instance info . get zone ( avail zones my instance info )  ;   cluster resolver <  aws endpoint >  composite resolver = new  cluster resolver <  aws endpoint >  (  )  {  @ override public  string get region (  )  {  return client config . get region (  )  ;   }  @ override public  list <  aws endpoint >  get cluster endpoints (  )  {   list <  aws endpoint >  result = local resolver . get cluster endpoints (  )  ;  if  ( result . is empty (  )  )   {  result = remote resolver . get cluster endpoints (  )  ;   }  return result ;   }   }   ;  return new  async resolver <  >  (  eureka client names . query new  zone affinity cluster resolver ( composite resolver my zone true )  transport config . get async executor thread pool size (  )  transport config . get async resolver refresh interval ms (  )  transport config . get async resolver warm up timeout ms (  )  )  ;   }  ,1305,3,composite,1,"[522, 1072]"
2102,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClients.java,composite query resolver,static  closable resolver <  aws endpoint >    ( final  cluster resolver <  aws endpoint >  remote resolver final  cluster resolver <  aws endpoint >  local resolver final  eureka client config client config final  eureka transport config transport config final  instance info my instance info )  {   string[] avail zones = client config . get availability zones ( client config . get region (  )  )  ;   string my zone =  instance info . get zone ( avail zones my instance info )  ;   cluster resolver <  aws endpoint >  composite resolver = new  cluster resolver <  aws endpoint >  (  )  {  @ override public  string get region (  )  {  return client config . get region (  )  ;   }  @ override public  list <  aws endpoint >  get cluster endpoints (  )  {   list <  aws endpoint >  result = local resolver . get cluster endpoints (  )  ;  if  ( result . is empty (  )  )   {  result = remote resolver . get cluster endpoints (  )  ;   }  return result ;   }   }   ;  return new  async resolver <  >  (  eureka client names . query new  zone affinity cluster resolver ( composite resolver my zone true )  transport config . get async executor thread pool size (  )  transport config . get async resolver refresh interval ms (  )  transport config . get async resolver warm up timeout ms (  )  )  ;   }  ,1305,3,query,2,[1028]
2103,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClients.java,composite query resolver,static  closable resolver <  aws endpoint >    ( final  cluster resolver <  aws endpoint >  remote resolver final  cluster resolver <  aws endpoint >  local resolver final  eureka client config client config final  eureka transport config transport config final  instance info my instance info )  {   string[] avail zones = client config . get availability zones ( client config . get region (  )  )  ;   string my zone =  instance info . get zone ( avail zones my instance info )  ;   cluster resolver <  aws endpoint >  composite resolver = new  cluster resolver <  aws endpoint >  (  )  {  @ override public  string get region (  )  {  return client config . get region (  )  ;   }  @ override public  list <  aws endpoint >  get cluster endpoints (  )  {   list <  aws endpoint >  result = local resolver . get cluster endpoints (  )  ;  if  ( result . is empty (  )  )   {  result = remote resolver . get cluster endpoints (  )  ;   }  return result ;   }   }   ;  return new  async resolver <  >  (  eureka client names . query new  zone affinity cluster resolver ( composite resolver my zone true )  transport config . get async executor thread pool size (  )  transport config . get async resolver refresh interval ms (  )  transport config . get async resolver warm up timeout ms (  )  )  ;   }  ,1305,3,resolver,3,"[17, 64, 99, 123, 157, 494, 532, 556, 800, 895, 988, 1061, 1082, 1197, 1261]"
2104,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClients.java,default bootstrap resolver,"static  closable resolver <  aws endpoint >    ( final  eureka client config client config final  instance info my instance info )  {   string[] avail zones = client config . get availability zones ( client config . get region (  )  )  ;   string my zone =  instance info . get zone ( avail zones my instance info )  ;   cluster resolver <  aws endpoint >  delegate resolver = new  zone affinity cluster resolver ( new  config cluster resolver ( client config my instance info )  my zone true )  ;   list <  aws endpoint >  initial value = delegate resolver . get cluster endpoints (  )  ;  if  ( initial value . is empty (  )  )   {   string msg = "" initial resolution of  eureka server endpoints failed .   check  config cluster resolver logs for more info"" ;  logger . error ( msg )  ;  fail fast on init check ( client config msg )  ;   }  return new  async resolver <  >  (  eureka client names . bootstrap delegate resolver initial value 1 client config . get eureka service url poll interval seconds (  )  * 1000 )  ;   }  ",1030,3,default,1,[]
2105,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClients.java,default bootstrap resolver,"static  closable resolver <  aws endpoint >    ( final  eureka client config client config final  instance info my instance info )  {   string[] avail zones = client config . get availability zones ( client config . get region (  )  )  ;   string my zone =  instance info . get zone ( avail zones my instance info )  ;   cluster resolver <  aws endpoint >  delegate resolver = new  zone affinity cluster resolver ( new  config cluster resolver ( client config my instance info )  my zone true )  ;   list <  aws endpoint >  initial value = delegate resolver . get cluster endpoints (  )  ;  if  ( initial value . is empty (  )  )   {   string msg = "" initial resolution of  eureka server endpoints failed .   check  config cluster resolver logs for more info"" ;  logger . error ( msg )  ;  fail fast on init check ( client config msg )  ;   }  return new  async resolver <  >  (  eureka client names . bootstrap delegate resolver initial value 1 client config . get eureka service url poll interval seconds (  )  * 1000 )  ;   }  ",1030,3,bootstrap,2,[902]
2106,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClients.java,default bootstrap resolver,"static  closable resolver <  aws endpoint >    ( final  eureka client config client config final  instance info my instance info )  {   string[] avail zones = client config . get availability zones ( client config . get region (  )  )  ;   string my zone =  instance info . get zone ( avail zones my instance info )  ;   cluster resolver <  aws endpoint >  delegate resolver = new  zone affinity cluster resolver ( new  config cluster resolver ( client config my instance info )  my zone true )  ;   list <  aws endpoint >  initial value = delegate resolver . get cluster endpoints (  )  ;  if  ( initial value . is empty (  )  )   {   string msg = "" initial resolution of  eureka server endpoints failed .   check  config cluster resolver logs for more info"" ;  logger . error ( msg )  ;  fail fast on init check ( client config msg )  ;   }  return new  async resolver <  >  (  eureka client names . bootstrap delegate resolver initial value 1 client config . get eureka service url poll interval seconds (  )  * 1000 )  ;   }  ",1030,3,resolver,3,"[17, 329, 366, 404, 435, 549, 731, 862, 921]"
2107,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClients.java,fail fast on init check,"private static void   (  eureka client config client config  string msg )  {  if  ( ""true"" . equals ( client config . get experimental ( ""client transport fail fast on init"" )  )  )   {  throw new  runtime exception ( msg )  ;   }   }  ",236,5,fail,1,[155]
2108,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClients.java,fail fast on init check,"private static void   (  eureka client config client config  string msg )  {  if  ( ""true"" . equals ( client config . get experimental ( ""client transport fail fast on init"" )  )  )   {  throw new  runtime exception ( msg )  ;   }   }  ",236,5,fast,2,[160]
2109,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClients.java,fail fast on init check,"private static void   (  eureka client config client config  string msg )  {  if  ( ""true"" . equals ( client config . get experimental ( ""client transport fail fast on init"" )  )  )   {  throw new  runtime exception ( msg )  ;   }   }  ",236,5,on,3,"[40, 54, 110, 165, 213]"
2110,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClients.java,fail fast on init check,"private static void   (  eureka client config client config  string msg )  {  if  ( ""true"" . equals ( client config . get experimental ( ""client transport fail fast on init"" )  )  )   {  throw new  runtime exception ( msg )  ;   }   }  ",236,5,init,4,[168]
2111,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClients.java,fail fast on init check,"private static void   (  eureka client config client config  string msg )  {  if  ( ""true"" . equals ( client config . get experimental ( ""client transport fail fast on init"" )  )  )   {  throw new  runtime exception ( msg )  ;   }   }  ",236,5,check,5,[]
2112,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClients.java,get cluster endpoints,@ override public  list < t >    (  )  {  return cluster resolver . get cluster endpoints (  )  ;   }  ,103,3,get,1,[68]
2113,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClients.java,get cluster endpoints,@ override public  list < t >    (  )  {  return cluster resolver . get cluster endpoints (  )  ;   }  ,103,3,cluster,2,"[49, 72]"
2114,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClients.java,get cluster endpoints,@ override public  list < t >    (  )  {  return cluster resolver . get cluster endpoints (  )  ;   }  ,103,3,endpoints,3,[80]
2115,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClients.java,get region,@ override public  string   (  )  {  return cluster resolver . get region (  )  ;   }  ,87,2,get,1,[63]
2116,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClients.java,get region,@ override public  string   (  )  {  return cluster resolver . get region (  )  ;   }  ,87,2,region,2,[67]
2117,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClients.java,new bootstrap resolver,"public static  closable resolver <  aws endpoint >    ( final  eureka client config client config final  eureka transport config transport config final  transport client factory transport client factory final  instance info my instance info final  applications resolver .  applications source applications source )  {  if  ( composite   bootstrap   strategy . equals ( transport config . get bootstrap resolver strategy (  )  )  )   {  if  ( client config . should fetch registry (  )  )   {  return composite bootstrap resolver ( client config transport config transport client factory my instance info applications source )  ;   }  else  {  logger . warn ( "" cannot create a composite bootstrap resolver if registry fetch is disabled . ""  +  ""  falling back to using a default bootstrap resolver . "" )  ;   }   }  return default bootstrap resolver ( client config my instance info )  ;   }  ",893,3,new,1,[]
2118,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClients.java,new bootstrap resolver,"public static  closable resolver <  aws endpoint >    ( final  eureka client config client config final  eureka transport config transport config final  transport client factory transport client factory final  instance info my instance info final  applications resolver .  applications source applications source )  {  if  ( composite   bootstrap   strategy . equals ( transport config . get bootstrap resolver strategy (  )  )  )   {  if  ( client config . should fetch registry (  )  )   {  return composite bootstrap resolver ( client config transport config transport client factory my instance info applications source )  ;   }  else  {  logger . warn ( "" cannot create a composite bootstrap resolver if registry fetch is disabled . ""  +  ""  falling back to using a default bootstrap resolver . "" )  ;   }   }  return default bootstrap resolver ( client config my instance info )  ;   }  ",893,3,bootstrap,2,"[337, 392, 510, 687, 779, 831]"
2119,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClients.java,new bootstrap resolver,"public static  closable resolver <  aws endpoint >    ( final  eureka client config client config final  eureka transport config transport config final  transport client factory transport client factory final  instance info my instance info final  applications resolver .  applications source applications source )  {  if  ( composite   bootstrap   strategy . equals ( transport config . get bootstrap resolver strategy (  )  )  )   {  if  ( client config . should fetch registry (  )  )   {  return composite bootstrap resolver ( client config transport config transport client factory my instance info applications source )  ;   }  else  {  logger . warn ( "" cannot create a composite bootstrap resolver if registry fetch is disabled . ""  +  ""  falling back to using a default bootstrap resolver . "" )  ;   }   }  return default bootstrap resolver ( client config my instance info )  ;   }  ",893,3,resolver,3,"[24, 261, 402, 520, 697, 789, 841]"
2120,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClients.java,new client,@ override public  eureka http client   (  )  {  return new  sessioned eureka http client ( name  retryable eureka http client . create factory ( name transport config cluster resolver  redirecting eureka http client . create factory ( transport client fa,255,2,new,1,[56]
2121,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClients.java,new client,@ override public  eureka http client   (  )  {  return new  sessioned eureka http client ( name  retryable eureka http client . create factory ( name transport config cluster resolver  redirecting eureka http client . create factory ( transport client fa,255,2,client,2,"[31, 83, 120, 210, 246]"
2122,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClients.java,query client factory,public static  eureka http client factory   (  cluster resolver bootstrap resolver  transport client factory transport client factory  eureka client config client config  eureka transport config transport config  instance info my instance info  applications resolver .  applications source applications source )  {   closable resolver query resolver = transport config . use bootstrap resolver for query (  )   ?  wrap closable ( bootstrap resolver )  : query client resolver ( bootstrap resolver transport client factory client config transport config my instance info applications source )  ;  return canonical client factory (  eureka client names . query transport config query resolver transport client factory )  ;   }  ,726,3,query,1,"[335, 398, 454, 653, 676]"
2123,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClients.java,query client factory,public static  eureka http client factory   (  cluster resolver bootstrap resolver  transport client factory transport client factory  eureka client config client config  eureka transport config transport config  instance info my instance info  applications resolver .  applications source applications source )  {   closable resolver query resolver = transport config . use bootstrap resolver for query (  )   ?  wrap closable ( bootstrap resolver )  : query client resolver ( bootstrap resolver transport client factory client config transport config my instance info applications source )  ;  return canonical client factory (  eureka client names . query transport config query resolver transport client factory )  ;   }  ,726,3,client,2,"[27, 94, 119, 142, 156, 460, 507, 522, 613, 638, 701]"
2124,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClients.java,query client factory,public static  eureka http client factory   (  cluster resolver bootstrap resolver  transport client factory transport client factory  eureka client config client config  eureka transport config transport config  instance info my instance info  applications resolver .  applications source applications source )  {   closable resolver query resolver = transport config . use bootstrap resolver for query (  )   ?  wrap closable ( bootstrap resolver )  : query client resolver ( bootstrap resolver transport client factory client config transport config my instance info applications source )  ;  return canonical client factory (  eureka client names . query transport config query resolver transport client factory )  ;   }  ,726,3,factory,3,"[34, 101, 126, 514, 620, 708]"
2125,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClients.java,query client resolver,static  closable resolver <  aws endpoint >    ( final  cluster resolver bootstrap resolver final  transport client factory transport client factory final  eureka client config client config final  eureka transport config transport config final  instance info my instance info final  applications resolver .  applications source applications source )  {  final  eureka http resolver remote resolver = new  eureka http resolver ( client config transport config bootstrap resolver transport client factory transport config . get read cluster vip (  )  )  ;  final  applications resolver local resolver = new  applications resolver ( client config transport config applications source transport config . get read cluster vip (  )  )  ;  return composite query resolver ( remote resolver local resolver client config transport config my instance info )  ;   }  ,857,3,query,1,[751]
2126,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClients.java,query client resolver,static  closable resolver <  aws endpoint >    ( final  cluster resolver bootstrap resolver final  transport client factory transport client factory final  eureka client config client config final  eureka transport config transport config final  instance info my instance info final  applications resolver .  applications source applications source )  {  final  eureka http resolver remote resolver = new  eureka http resolver ( client config transport config bootstrap resolver transport client factory transport config . get read cluster vip (  )  )  ;  final  applications resolver local resolver = new  applications resolver ( client config transport config applications source transport config . get read cluster vip (  )  )  ;  return composite query resolver ( remote resolver local resolver client config transport config my instance info )  ;   }  ,857,3,client,2,"[109, 134, 163, 177, 429, 489, 631, 799]"
2127,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClients.java,query client resolver,static  closable resolver <  aws endpoint >    ( final  cluster resolver bootstrap resolver final  transport client factory transport client factory final  eureka client config client config final  eureka transport config transport config final  instance info my instance info final  applications resolver .  applications source applications source )  {  final  eureka http resolver remote resolver = new  eureka http resolver ( client config transport config bootstrap resolver transport client factory transport config . get read cluster vip (  )  )  ;  final  applications resolver local resolver = new  applications resolver ( client config transport config applications source transport config . get read cluster vip (  )  )  ;  return composite query resolver ( remote resolver local resolver client config transport config my instance info )  ;   }  ,857,3,resolver,3,"[17, 64, 83, 297, 374, 390, 418, 470, 576, 591, 620, 757, 775, 790]"
2128,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClients.java,registration client factory,public static  eureka http client factory   (  cluster resolver bootstrap resolver  transport client factory transport client factory  eureka transport config transport config )  {  return canonical client factory (  eureka client names . registration transport config bootstrap resolver transport client factory )  ;   }  ,323,3,registration,1,[239]
2129,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClients.java,registration client factory,public static  eureka http client factory   (  cluster resolver bootstrap resolver  transport client factory transport client factory  eureka transport config transport config )  {  return canonical client factory (  eureka client names . registration transport config bootstrap resolver transport client factory )  ;   }  ,323,3,client,2,"[27, 94, 119, 199, 224, 298]"
2130,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClients.java,registration client factory,public static  eureka http client factory   (  cluster resolver bootstrap resolver  transport client factory transport client factory  eureka transport config transport config )  {  return canonical client factory (  eureka client names . registration transport config bootstrap resolver transport client factory )  ;   }  ,323,3,factory,3,"[34, 101, 126, 206, 305]"
2131,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClients.java,wrap closable,static  < t extends  eureka endpoint >  closable resolver < t >    ( final  cluster resolver < t >  cluster resolver )  {  if  ( cluster resolver instanceof  closable resolver )   {  return  (  closable resolver ) cluster resolver ;   }  return new  closable resolver < t >  (  )  {  @ override public void shutdown (  )  {   }  @ override public  string get region (  )  {  return cluster resolver . get region (  )  ;   }  @ override public  list < t >  get cluster endpoints (  )  {  return cluster resolver . get cluster endpoints (  )  ;   }   }   ;   }  ,560,2,wrap,1,[]
2132,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClients.java,wrap closable,static  < t extends  eureka endpoint >  closable resolver < t >    ( final  cluster resolver < t >  cluster resolver )  {  if  ( cluster resolver instanceof  closable resolver )   {  return  (  closable resolver ) cluster resolver ;   }  return new  closable resolver < t >  (  )  {  @ override public void shutdown (  )  {   }  @ override public  string get region (  )  {  return cluster resolver . get region (  )  ;   }  @ override public  list < t >  get cluster endpoints (  )  {  return cluster resolver . get cluster endpoints (  )  ;   }   }   ;   }  ,560,2,closable,2,"[40, 158, 194, 250]"
2133,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpResponse.java, eureka http response,"private   (  eureka http response builder < t >  builder )  {  this . status code = builder . status code ;  this . entity = builder . entity ;  this . headers = builder . headers ;  if  ( headers  !  =  null )   {   string location value = headers . get (  http headers . location )  ;  try  {  this . location = location value  =  =  null  ?  null : new uri ( location value )  ;   }  catch  (  uri syntax exception e )   {  throw new  transport exception ( "" invalid  location header value in response ;  cannot complete the request  ( location = ""  +  location value  +  ' ) ' e )  ;   }   }  else  {  this . location = null ;   }   }  ",640,3,eureka,1,[13]
2134,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpResponse.java, eureka http response,"private   (  eureka http response builder < t >  builder )  {  this . status code = builder . status code ;  this . entity = builder . entity ;  this . headers = builder . headers ;  if  ( headers  !  =  null )   {   string location value = headers . get (  http headers . location )  ;  try  {  this . location = location value  =  =  null  ?  null : new uri ( location value )  ;   }  catch  (  uri syntax exception e )   {  throw new  transport exception ( "" invalid  location header value in response ;  cannot complete the request  ( location = ""  +  location value  +  ' ) ' e )  ;   }   }  else  {  this . location = null ;   }   }  ",640,3,http,2,"[20, 258]"
2135,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpResponse.java, eureka http response,"private   (  eureka http response builder < t >  builder )  {  this . status code = builder . status code ;  this . entity = builder . entity ;  this . headers = builder . headers ;  if  ( headers  !  =  null )   {   string location value = headers . get (  http headers . location )  ;  try  {  this . location = location value  =  =  null  ?  null : new uri ( location value )  ;   }  catch  (  uri syntax exception e )   {  throw new  transport exception ( "" invalid  location header value in response ;  cannot complete the request  ( location = ""  +  location value  +  ' ) ' e )  ;   }   }  else  {  this . location = null ;   }   }  ",640,3,response,3,"[25, 496]"
2136,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpResponse.java, eureka http response builder,private   ( int status code )  {  this . status code = status code ;   }  ,74,4,eureka,1,[]
2137,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpResponse.java, eureka http response builder,private   ( int status code )  {  this . status code = status code ;   }  ,74,4,http,2,[]
2138,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpResponse.java, eureka http response builder,private   ( int status code )  {  this . status code = status code ;   }  ,74,4,response,3,[]
2139,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpResponse.java, eureka http response builder,private   ( int status code )  {  this . status code = status code ;   }  ,74,4,builder,4,[]
2140,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpResponse.java,an eureka http response,public static  < t >  eureka http response builder < t >    ( int status code t entity )  {  return new  eureka http response builder < t >  ( status code )  . entity ( entity )  ;   }  ,186,4,an,1,[]
2141,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpResponse.java,an eureka http response,public static  < t >  eureka http response builder < t >    ( int status code t entity )  {  return new  eureka http response builder < t >  ( status code )  . entity ( entity )  ;   }  ,186,4,eureka,2,"[22, 105]"
2142,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpResponse.java,an eureka http response,public static  < t >  eureka http response builder < t >    ( int status code t entity )  {  return new  eureka http response builder < t >  ( status code )  . entity ( entity )  ;   }  ,186,4,http,3,"[29, 112]"
2143,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpResponse.java,an eureka http response,public static  < t >  eureka http response builder < t >    ( int status code t entity )  {  return new  eureka http response builder < t >  ( status code )  . entity ( entity )  ;   }  ,186,4,response,4,"[34, 117]"
2144,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpResponse.java,build,public  eureka http response < t >    (  )  {  return new  eureka http response < t >  ( this )  ;   }  ,104,1,build,1,[]
2145,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpResponse.java,entity,public  eureka http response builder < t >    ( t entity  media type content type )  {  return entity ( entity )  . type ( content type )  ;   }  ,146,1,entity,1,"[50, 95, 104]"
2146,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpResponse.java,get entity,public t   (  )  {  return entity ;   }  ,41,2,get,1,[]
2147,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpResponse.java,get entity,public t   (  )  {  return entity ;   }  ,41,2,entity,2,[27]
2148,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpResponse.java,get headers,public  map <  string  string >    (  )  {  return headers  =  =  null  ?   collections .  <  string  string > empty map (  )  : headers ;   }  ,144,2,get,1,[]
2149,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpResponse.java,get headers,public  map <  string  string >    (  )  {  return headers  =  =  null  ?   collections .  <  string  string > empty map (  )  : headers ;   }  ,144,2,headers,2,"[51, 129]"
2150,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpResponse.java,get location,public uri   (  )  {  return location ;   }  ,45,2,get,1,[]
2151,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpResponse.java,get location,public uri   (  )  {  return location ;   }  ,45,2,location,2,[29]
2152,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpResponse.java,get status code,public int   (  )  {  return status code ;   }  ,48,3,get,1,[]
2153,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpResponse.java,get status code,public int   (  )  {  return status code ;   }  ,48,3,status,2,[29]
2154,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpResponse.java,get status code,public int   (  )  {  return status code ;   }  ,48,3,code,3,[36]
2155,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpResponse.java,headers,public  eureka http response builder < t >    (  map <  string  string >  headers )  {  this . headers = headers ;  return this ;   }  ,135,1,headers,1,"[74, 95, 105]"
2156,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpResponse.java,status,public static  eureka http response <  void >    ( int status )  {  return new  eureka http response <  >  ( status null )  ;   }  ,131,1,status,1,"[55, 109]"
2157,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpResponse.java,type,public  eureka http response builder < t >    (  media type content type )  {  headers (  http headers . content   type content type . to string (  )  )  ;  return this ;   }  ,176,1,type,1,"[55, 68, 115, 128]"
2158,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\ApacheHttpClientConnectionCleaner.java, apache http client connection cleaner,"public   (  apache http client4 apache http client final long connection idle timeout )  {  this . apache http client = apache http client ;  this . eureka conn cleaner . schedule with fixed delay ( new  runnable (  )  {  @ override public void run (  )  {  clean idle ( connection idle timeout )  ;   }   }   http   connection   cleaner   interval   ms http   connection   cleaner   interval   ms  time unit . milliseconds )  ;   monitor config .  builder monitor config builder =  monitor config . builder ( "" eureka -  connection -  cleaner -  time"" )  ;  execution time stats = new  basic timer ( monitor config builder . build (  )  )  ;  cleanup failed = new  basic counter (  monitor config . builder ( "" eureka -  connection -  cleaner -  failure"" )  . build (  )  )  ;  try  {   monitors . register object ( this )  ;   }  catch  (   exception e )   {  logger . error ( "" unable to register with servo . "" e )  ;   }   }  ",931,5,apache,1,"[12, 32, 99, 120]"
2159,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\ApacheHttpClientConnectionCleaner.java, apache http client connection cleaner,"public   (  apache http client4 apache http client final long connection idle timeout )  {  this . apache http client = apache http client ;  this . eureka conn cleaner . schedule with fixed delay ( new  runnable (  )  {  @ override public void run (  )  {  clean idle ( connection idle timeout )  ;   }   }   http   connection   cleaner   interval   ms http   connection   cleaner   interval   ms  time unit . milliseconds )  ;   monitor config .  builder monitor config builder =  monitor config . builder ( "" eureka -  connection -  cleaner -  time"" )  ;  execution time stats = new  basic timer ( monitor config builder . build (  )  )  ;  cleanup failed = new  basic counter (  monitor config . builder ( "" eureka -  connection -  cleaner -  failure"" )  . build (  )  )  ;  try  {   monitors . register object ( this )  ;   }  catch  (   exception e )   {  logger . error ( "" unable to register with servo . "" e )  ;   }   }  ",931,5,http,2,"[19, 39, 106, 127, 310, 354]"
2160,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\ApacheHttpClientConnectionCleaner.java, apache http client connection cleaner,"public   (  apache http client4 apache http client final long connection idle timeout )  {  this . apache http client = apache http client ;  this . eureka conn cleaner . schedule with fixed delay ( new  runnable (  )  {  @ override public void run (  )  {  clean idle ( connection idle timeout )  ;   }   }   http   connection   cleaner   interval   ms http   connection   cleaner   interval   ms  time unit . milliseconds )  ;   monitor config .  builder monitor config builder =  monitor config . builder ( "" eureka -  connection -  cleaner -  time"" )  ;  execution time stats = new  basic timer ( monitor config builder . build (  )  )  ;  cleanup failed = new  basic counter (  monitor config . builder ( "" eureka -  connection -  cleaner -  failure"" )  . build (  )  )  ;  try  {   monitors . register object ( this )  ;   }  catch  (   exception e )   {  logger . error ( "" unable to register with servo . "" e )  ;   }   }  ",931,5,client,3,"[24, 44, 111, 132]"
2161,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\ApacheHttpClientConnectionCleaner.java, apache http client connection cleaner,"public   (  apache http client4 apache http client final long connection idle timeout )  {  this . apache http client = apache http client ;  this . eureka conn cleaner . schedule with fixed delay ( new  runnable (  )  {  @ override public void run (  )  {  clean idle ( connection idle timeout )  ;   }   }   http   connection   cleaner   interval   ms http   connection   cleaner   interval   ms  time unit . milliseconds )  ;   monitor config .  builder monitor config builder =  monitor config . builder ( "" eureka -  connection -  cleaner -  time"" )  ;  execution time stats = new  basic timer ( monitor config builder . build (  )  )  ;  cleanup failed = new  basic counter (  monitor config . builder ( "" eureka -  connection -  cleaner -  failure"" )  . build (  )  )  ;  try  {   monitors . register object ( this )  ;   }  catch  (   exception e )   {  logger . error ( "" unable to register with servo . "" e )  ;   }   }  ",931,5,connection,4,"[62, 271, 317, 361, 522, 722]"
2162,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\ApacheHttpClientConnectionCleaner.java, apache http client connection cleaner,"public   (  apache http client4 apache http client final long connection idle timeout )  {  this . apache http client = apache http client ;  this . eureka conn cleaner . schedule with fixed delay ( new  runnable (  )  {  @ override public void run (  )  {  clean idle ( connection idle timeout )  ;   }   }   http   connection   cleaner   interval   ms http   connection   cleaner   interval   ms  time unit . milliseconds )  ;   monitor config .  builder monitor config builder =  monitor config . builder ( "" eureka -  connection -  cleaner -  time"" )  ;  execution time stats = new  basic timer ( monitor config builder . build (  )  )  ;  cleanup failed = new  basic counter (  monitor config . builder ( "" eureka -  connection -  cleaner -  failure"" )  . build (  )  )  ;  try  {   monitors . register object ( this )  ;   }  catch  (   exception e )   {  logger . error ( "" unable to register with servo . "" e )  ;   }   }  ",931,5,cleaner,5,"[161, 330, 374, 536, 736]"
2163,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\ApacheHttpClientConnectionCleaner.java,clean idle,"public void   ( long delay ms )  {   stopwatch start = execution time stats . start (  )  ;  try  {  apache http client . get client handler (  )  . get http client (  )  . get connection manager (  )  . close idle connections ( delay ms  time unit . seconds )  ;   }  catch  (   throwable e )   {  logger . error ( "" cannot clean connections"" e )  ;  cleanup failed . increment (  )  ;   }  finally  {  if  ( null  !  =  start )   {  start . stop (  )  ;   }   }   }  ",469,2,clean,1,"[325, 352]"
2164,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\ApacheHttpClientConnectionCleaner.java,clean idle,"public void   ( long delay ms )  {   stopwatch start = execution time stats . start (  )  ;  try  {  apache http client . get client handler (  )  . get http client (  )  . get connection manager (  )  . close idle connections ( delay ms  time unit . seconds )  ;   }  catch  (   throwable e )   {  logger . error ( "" cannot clean connections"" e )  ;  cleanup failed . increment (  )  ;   }  finally  {  if  ( null  !  =  start )   {  start . stop (  )  ;   }   }   }  ",469,2,idle,2,[210]
2165,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\ApacheHttpClientConnectionCleaner.java,new thread,"@ override public  thread   (  runnable r )  {   thread thread = new  thread ( r "" eureka -  jersey client -  conn -  cleaner""  +  thread number . increment and get (  )  )  ;  thread . set daemon ( true )  ;  return thread ;   }  ",231,2,new,1,[65]
2166,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\ApacheHttpClientConnectionCleaner.java,new thread,"@ override public  thread   (  runnable r )  {   thread thread = new  thread ( r "" eureka -  jersey client -  conn -  cleaner""  +  thread number . increment and get (  )  )  ;  thread . set daemon ( true )  ;  return thread ;   }  ",231,2,thread,2,"[19, 49, 56, 70, 131, 177, 217]"
2167,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\ApacheHttpClientConnectionCleaner.java,run,@ override public void   (  )  {  clean idle ( connection idle timeout )  ;   }  ,81,1,run,1,[]
2168,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\ApacheHttpClientConnectionCleaner.java,shutdown,public void   (  )  {  clean idle ( 0 )  ;  eureka conn cleaner . shutdown (  )  ;   }  ,88,1,shutdown,1,[66]
2169,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\AbstractJerseyEurekaHttpClient.java, abstract jersey eureka http client,"protected   (  client jersey client  string service url )  {  this . jersey client = jersey client ;  this . service url = service url ;  logger . debug ( "" created client for url:  {  } "" service url )  ;   }  ",211,5,abstract,1,[]
2170,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\AbstractJerseyEurekaHttpClient.java, abstract jersey eureka http client,"protected   (  client jersey client  string service url )  {  this . jersey client = jersey client ;  this . service url = service url ;  logger . debug ( "" created client for url:  {  } "" service url )  ;   }  ",211,5,jersey,2,"[22, 69, 85]"
2171,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\AbstractJerseyEurekaHttpClient.java, abstract jersey eureka http client,"protected   (  client jersey client  string service url )  {  this . jersey client = jersey client ;  this . service url = service url ;  logger . debug ( "" created client for url:  {  } "" service url )  ;   }  ",211,5,eureka,3,[]
2172,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\AbstractJerseyEurekaHttpClient.java, abstract jersey eureka http client,"protected   (  client jersey client  string service url )  {  this . jersey client = jersey client ;  this . service url = service url ;  logger . debug ( "" created client for url:  {  } "" service url )  ;   }  ",211,5,http,4,[]
2173,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\AbstractJerseyEurekaHttpClient.java, abstract jersey eureka http client,"protected   (  client jersey client  string service url )  {  this . jersey client = jersey client ;  this . service url = service url ;  logger . debug ( "" created client for url:  {  } "" service url )  ;   }  ",211,5,client,5,"[15, 29, 76, 92, 165]"
2174,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\Jersey1TransportClientFactories.java,new client,@ override public  eureka http client   (  eureka endpoint service url )  {  return metrics factory . new client ( service url )  ;   }  ,137,2,new,1,[102]
2175,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\Jersey1TransportClientFactories.java,new client,@ override public  eureka http client   (  eureka endpoint service url )  {  return metrics factory . new client ( service url )  ;   }  ,137,2,client,2,"[31, 106]"
2176,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\Jersey1TransportClientFactories.java,new transport client factory,@ override public  transport client factory   (  eureka client config client config  collection <  client filter >  additional filters  instance info my instance info  optional < ssl context >  ssl context  optional <  hostname verifier >  hostname verifi,255,4,new,1,[]
2177,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\Jersey1TransportClientFactories.java,new transport client factory,@ override public  transport client factory   (  eureka client config client config  collection <  client filter >  additional filters  instance info my instance info  optional < ssl context >  ssl context  optional <  hostname verifier >  hostname verifi,255,4,transport,2,[19]
2178,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\Jersey1TransportClientFactories.java,new transport client factory,@ override public  transport client factory   (  eureka client config client config  collection <  client filter >  additional filters  instance info my instance info  optional < ssl context >  ssl context  optional <  hostname verifier >  hostname verifi,255,4,client,3,"[29, 56, 70, 99]"
2179,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\Jersey1TransportClientFactories.java,new transport client factory,@ override public  transport client factory   (  eureka client config client config  collection <  client filter >  additional filters  instance info my instance info  optional < ssl context >  ssl context  optional <  hostname verifier >  hostname verifi,255,4,factory,4,[36]
2180,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\Jersey1TransportClientFactories.java,shutdown,@ override public void   (  )  {  metrics factory . shutdown (  )  ;  jersey factory . shutdown (  )  ;   }  ,109,1,shutdown,1,"[52, 87]"
2181,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\JerseyApplicationClient.java, jersey application client,public   (  client jersey client  string service url  map <  string  string >  additional headers )  {  super ( jersey client service url )  ;  this . additional headers = additional headers ;   }  ,198,3,jersey,1,"[19, 112]"
2182,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\JerseyApplicationClient.java, jersey application client,public   (  client jersey client  string service url  map <  string  string >  additional headers )  {  super ( jersey client service url )  ;  this . additional headers = additional headers ;   }  ,198,3,application,2,[]
2183,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\JerseyApplicationClient.java, jersey application client,public   (  client jersey client  string service url  map <  string  string >  additional headers )  {  super ( jersey client service url )  ;  this . additional headers = additional headers ;   }  ,198,3,client,3,"[12, 26, 119]"
2184,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\JerseyApplicationClient.java,add extra headers,@ override protected void   (  builder web resource )  {  if  ( additional headers  !  =  null )   {  for  (   string key : additional headers . key set (  )  )   {  web resource . header ( key additional headers . get ( key )  )  ;   }   }   }  ,246,3,add,1,"[64, 124, 194]"
2185,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\JerseyApplicationClient.java,add extra headers,@ override protected void   (  builder web resource )  {  if  ( additional headers  !  =  null )   {  for  (   string key : additional headers . key set (  )  )   {  web resource . header ( key additional headers . get ( key )  )  ;   }   }   }  ,246,3,extra,2,[]
2186,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\JerseyApplicationClient.java,add extra headers,@ override protected void   (  builder web resource )  {  if  ( additional headers  !  =  null )   {  for  (   string key : additional headers . key set (  )  )   {  web resource . header ( key additional headers . get ( key )  )  ;   }   }   }  ,246,3,headers,3,"[75, 135, 205]"
2187,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\EurekaJerseyClientImpl.java, eureka jersey client impl,"public   ( int connection timeout int read timeout final int connection idle timeout  client config client config )  {  try  {  jersey client config = client config ;  apache http client =  apache http client4 . create ( jersey client config )  ;   http params params = apache http client . get client handler (  )  . get http client (  )  . get params (  )  ;   http connection params . set connection timeout ( params connection timeout )  ;   http connection params . set so timeout ( params read timeout )  ;  this . apache http client connection cleaner = new  apache http client connection cleaner ( apache http client connection idle timeout )  ;   }  catch  (   throwable e )   {  throw new  runtime exception ( "" cannot create  jersey client"" e )  ;   }   }  ",768,4,eureka,1,[]
2188,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\EurekaJerseyClientImpl.java, eureka jersey client impl,"public   ( int connection timeout int read timeout final int connection idle timeout  client config client config )  {  try  {  jersey client config = client config ;  apache http client =  apache http client4 . create ( jersey client config )  ;   http params params = apache http client . get client handler (  )  . get http client (  )  . get params (  )  ;   http connection params . set connection timeout ( params connection timeout )  ;   http connection params . set so timeout ( params read timeout )  ;  this . apache http client connection cleaner = new  apache http client connection cleaner ( apache http client connection idle timeout )  ;   }  catch  (   throwable e )   {  throw new  runtime exception ( "" cannot create  jersey client"" e )  ;   }   }  ",768,4,jersey,2,"[128, 221, 737]"
2189,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\EurekaJerseyClientImpl.java, eureka jersey client impl,"public   ( int connection timeout int read timeout final int connection idle timeout  client config client config )  {  try  {  jersey client config = client config ;  apache http client =  apache http client4 . create ( jersey client config )  ;   http params params = apache http client . get client handler (  )  . get http client (  )  . get params (  )  ;   http connection params . set connection timeout ( params connection timeout )  ;   http connection params . set so timeout ( params read timeout )  ;  this . apache http client connection cleaner = new  apache http client connection cleaner ( apache http client connection idle timeout )  ;   }  catch  (   throwable e )   {  throw new  runtime exception ( "" cannot create  jersey client"" e )  ;   }   }  ",768,4,client,3,"[86, 100, 135, 151, 180, 202, 228, 282, 295, 327, 533, 578, 618, 744]"
2190,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\EurekaJerseyClientImpl.java, eureka jersey client impl,"public   ( int connection timeout int read timeout final int connection idle timeout  client config client config )  {  try  {  jersey client config = client config ;  apache http client =  apache http client4 . create ( jersey client config )  ;   http params params = apache http client . get client handler (  )  . get http client (  )  . get params (  )  ;   http connection params . set connection timeout ( params connection timeout )  ;   http connection params . set so timeout ( params read timeout )  ;  this . apache http client connection cleaner = new  apache http client connection cleaner ( apache http client connection idle timeout )  ;   }  catch  (   throwable e )   {  throw new  runtime exception ( "" cannot create  jersey client"" e )  ;   }   }  ",768,4,impl,4,[]
2191,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\EurekaJerseyClientImpl.java, my default apache http client config,"  (  )  {   monitored connection manager cm ;  if  ( systemssl )   {  cm = create system sslcm (  )  ;   }  else if  ( ssl context  !  =  null || hostname verifier  !  =  null || trust store file name  !  =  null )   {  cm = create custom sslcm (  )  ;   }  else  {  cm = create default sslcm (  )  ;   }  if  ( proxy host  !  =  null )   {  add proxy configuration ( cm )  ;   }   discovery jersey provider discovery jersey provider = new  discovery jersey provider ( encoder wrapper decoder wrapper )  ;  get singletons (  )  . add ( discovery jersey provider )  ;  cm . set default max per route ( max connections per host )  ;  cm . set max total ( max total connections )  ;  get properties (  )  . put (  apache http client4 config . property   connection   manager cm )  ;   string full user agent name =  ( user agent  =  =  null  ?  client name : user agent )   +  "" / v""  +  build version (  )  ;  get properties (  )  . put (  core protocolp names . user   agent full user agent name )  ;  get properties (  )  . put ( property   follow   redirects  boolean . false )  ;  get properties (  )  . put (  clientp names . handle   redirects  boolean . false )  ;   }  ",1175,6,my,1,[]
2192,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\EurekaJerseyClientImpl.java, my default apache http client config,"  (  )  {   monitored connection manager cm ;  if  ( systemssl )   {  cm = create system sslcm (  )  ;   }  else if  ( ssl context  !  =  null || hostname verifier  !  =  null || trust store file name  !  =  null )   {  cm = create custom sslcm (  )  ;   }  else  {  cm = create default sslcm (  )  ;   }  if  ( proxy host  !  =  null )   {  add proxy configuration ( cm )  ;   }   discovery jersey provider discovery jersey provider = new  discovery jersey provider ( encoder wrapper decoder wrapper )  ;  get singletons (  )  . add ( discovery jersey provider )  ;  cm . set default max per route ( max connections per host )  ;  cm . set max total ( max total connections )  ;  get properties (  )  . put (  apache http client4 config . property   connection   manager cm )  ;   string full user agent name =  ( user agent  =  =  null  ?  client name : user agent )   +  "" / v""  +  build version (  )  ;  get properties (  )  . put (  core protocolp names . user   agent full user agent name )  ;  get properties (  )  . put ( property   follow   redirects  boolean . false )  ;  get properties (  )  . put (  clientp names . handle   redirects  boolean . false )  ;   }  ",1175,6,default,2,"[279, 577]"
2193,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\EurekaJerseyClientImpl.java, my default apache http client config,"  (  )  {   monitored connection manager cm ;  if  ( systemssl )   {  cm = create system sslcm (  )  ;   }  else if  ( ssl context  !  =  null || hostname verifier  !  =  null || trust store file name  !  =  null )   {  cm = create custom sslcm (  )  ;   }  else  {  cm = create default sslcm (  )  ;   }  if  ( proxy host  !  =  null )   {  add proxy configuration ( cm )  ;   }   discovery jersey provider discovery jersey provider = new  discovery jersey provider ( encoder wrapper decoder wrapper )  ;  get singletons (  )  . add ( discovery jersey provider )  ;  cm . set default max per route ( max connections per host )  ;  cm . set max total ( max total connections )  ;  get properties (  )  . put (  apache http client4 config . property   connection   manager cm )  ;   string full user agent name =  ( user agent  =  =  null  ?  client name : user agent )   +  "" / v""  +  build version (  )  ;  get properties (  )  . put (  core protocolp names . user   agent full user agent name )  ;  get properties (  )  . put ( property   follow   redirects  boolean . false )  ;  get properties (  )  . put (  clientp names . handle   redirects  boolean . false )  ;   }  ",1175,6,apache,3,[711]
2194,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\EurekaJerseyClientImpl.java, my default apache http client config,"  (  )  {   monitored connection manager cm ;  if  ( systemssl )   {  cm = create system sslcm (  )  ;   }  else if  ( ssl context  !  =  null || hostname verifier  !  =  null || trust store file name  !  =  null )   {  cm = create custom sslcm (  )  ;   }  else  {  cm = create default sslcm (  )  ;   }  if  ( proxy host  !  =  null )   {  add proxy configuration ( cm )  ;   }   discovery jersey provider discovery jersey provider = new  discovery jersey provider ( encoder wrapper decoder wrapper )  ;  get singletons (  )  . add ( discovery jersey provider )  ;  cm . set default max per route ( max connections per host )  ;  cm . set max total ( max total connections )  ;  get properties (  )  . put (  apache http client4 config . property   connection   manager cm )  ;   string full user agent name =  ( user agent  =  =  null  ?  client name : user agent )   +  "" / v""  +  build version (  )  ;  get properties (  )  . put (  core protocolp names . user   agent full user agent name )  ;  get properties (  )  . put ( property   follow   redirects  boolean . false )  ;  get properties (  )  . put (  clientp names . handle   redirects  boolean . false )  ;   }  ",1175,6,http,4,[718]
2195,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\EurekaJerseyClientImpl.java, my default apache http client config,"  (  )  {   monitored connection manager cm ;  if  ( systemssl )   {  cm = create system sslcm (  )  ;   }  else if  ( ssl context  !  =  null || hostname verifier  !  =  null || trust store file name  !  =  null )   {  cm = create custom sslcm (  )  ;   }  else  {  cm = create default sslcm (  )  ;   }  if  ( proxy host  !  =  null )   {  add proxy configuration ( cm )  ;   }   discovery jersey provider discovery jersey provider = new  discovery jersey provider ( encoder wrapper decoder wrapper )  ;  get singletons (  )  . add ( discovery jersey provider )  ;  cm . set default max per route ( max connections per host )  ;  cm . set max total ( max total connections )  ;  get properties (  )  . put (  apache http client4 config . property   connection   manager cm )  ;   string full user agent name =  ( user agent  =  =  null  ?  client name : user agent )   +  "" / v""  +  build version (  )  ;  get properties (  )  . put (  core protocolp names . user   agent full user agent name )  ;  get properties (  )  . put ( property   follow   redirects  boolean . false )  ;  get properties (  )  . put (  clientp names . handle   redirects  boolean . false )  ;   }  ",1175,6,client,5,"[723, 842, 1113]"
2196,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\EurekaJerseyClientImpl.java, my default apache http client config,"  (  )  {   monitored connection manager cm ;  if  ( systemssl )   {  cm = create system sslcm (  )  ;   }  else if  ( ssl context  !  =  null || hostname verifier  !  =  null || trust store file name  !  =  null )   {  cm = create custom sslcm (  )  ;   }  else  {  cm = create default sslcm (  )  ;   }  if  ( proxy host  !  =  null )   {  add proxy configuration ( cm )  ;   }   discovery jersey provider discovery jersey provider = new  discovery jersey provider ( encoder wrapper decoder wrapper )  ;  get singletons (  )  . add ( discovery jersey provider )  ;  cm . set default max per route ( max connections per host )  ;  cm . set max total ( max total connections )  ;  get properties (  )  . put (  apache http client4 config . property   connection   manager cm )  ;   string full user agent name =  ( user agent  =  =  null  ?  client name : user agent )   +  "" / v""  +  build version (  )  ;  get properties (  )  . put (  core protocolp names . user   agent full user agent name )  ;  get properties (  )  . put ( property   follow   redirects  boolean . false )  ;  get properties (  )  . put (  clientp names . handle   redirects  boolean . false )  ;   }  ",1175,6,config,6,"[352, 731]"
2197,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\EurekaJerseyClientImpl.java,add proxy configuration,"private void   (  monitored connection manager cm )  {  if  ( proxy user name  !  =  null && proxy password  !  =  null )   {  get properties (  )  . put (  apache http client4 config . property   proxy   username proxy user name )  ;  get properties (  )  . put (  apache http client4 config . property   proxy   password proxy password )  ;   }  else  {  get properties (  )  . put (  apache http client4 config . property   proxy   username ""guest"" )  ;  get properties (  )  . put (  apache http client4 config . property   proxy   password ""guest"" )  ;   }  get properties (  )  . put (  default apache http client4 config . property   proxy   uri ""http: /  / ""  +  proxy host  +  "":"" +  proxy port )  ;   }  ",714,3,add,1,[]
2198,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\EurekaJerseyClientImpl.java,add proxy configuration,"private void   (  monitored connection manager cm )  {  if  ( proxy user name  !  =  null && proxy password  !  =  null )   {  get properties (  )  . put (  apache http client4 config . property   proxy   username proxy user name )  ;  get properties (  )  . put (  apache http client4 config . property   proxy   password proxy password )  ;   }  else  {  get properties (  )  . put (  apache http client4 config . property   proxy   username ""guest"" )  ;  get properties (  )  . put (  apache http client4 config . property   proxy   password ""guest"" )  ;   }  get properties (  )  . put (  default apache http client4 config . property   proxy   uri ""http: /  / ""  +  proxy host  +  "":"" +  proxy port )  ;   }  ",714,3,proxy,2,"[62, 93, 197, 214, 306, 323, 427, 528, 641, 671, 693]"
2199,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\EurekaJerseyClientImpl.java,add proxy configuration,"private void   (  monitored connection manager cm )  {  if  ( proxy user name  !  =  null && proxy password  !  =  null )   {  get properties (  )  . put (  apache http client4 config . property   proxy   username proxy user name )  ;  get properties (  )  . put (  apache http client4 config . property   proxy   password proxy password )  ;   }  else  {  get properties (  )  . put (  apache http client4 config . property   proxy   username ""guest"" )  ;  get properties (  )  . put (  apache http client4 config . property   proxy   password ""guest"" )  ;   }  get properties (  )  . put (  default apache http client4 config . property   proxy   uri ""http: /  / ""  +  proxy host  +  "":"" +  proxy port )  ;   }  ",714,3,configuration,3,[]
2200,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\EurekaJerseyClientImpl.java,build,"public  eureka jersey client   (  )  {   my default apache http client4 config config = new  my default apache http client4 config (  )  ;  try  {  return new  eureka jersey client impl ( connection timeout read timeout connection idle timeout config )  ;   }  catch  (   throwable e )   {  throw new  runtime exception ( "" cannot create  jersey client "" e )  ;   }   }  ",371,1,build,1,[]
2201,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\EurekaJerseyClientImpl.java,create custom sslcm,"private  monitored connection manager   (  )  {   file input stream fin = null ;  try  {  if  ( ssl context  =  =  null )   {  ssl context = ssl context . get instance ( protocol   scheme )  ;   key store ssl key store =  key store . get instance ( keystore   type )  ;  fin = new  file input stream ( trust store file name )  ;  ssl key store . load ( fin trust store password . to char array (  )  )  ;   trust manager factory factory =  trust manager factory . get instance (  trust manager factory . get default algorithm (  )  )  ;  factory . init ( ssl key store )  ;   trust manager[] trust managers = factory . get trust managers (  )  ;  ssl context . init ( null trust managers null )  ;   }  if  ( hostname verifier  =  =  null )   {  hostname verifier = ssl socket factory . allow   all   hostname   verifier ;   }  ssl connection socket factory custom ssl socket factory = new ssl connection socket factory ( ssl context hostname verifier )  ;  ssl socket factory ssl socket factory = new ssl socket factory adapter ( custom ssl socket factory )  ;   scheme registry ssl scheme registry = new  scheme registry (  )  ;  ssl scheme registry . register ( new  scheme ( protocol https   port ssl socket factory )  )  ;  return new  monitored connection manager ( client name ssl scheme registry )  ;   }  catch  (   exception ex )   {  throw new  illegal state exception ( ""ssl configuration issue"" ex )  ;   }  finally  {  if  ( fin  !  =  null )   {  try  {  fin . close (  )  ;   }  catch  (  io exception ignore )   {   }   }   }   }  ",1548,3,create,1,[]
2202,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\EurekaJerseyClientImpl.java,create custom sslcm,"private  monitored connection manager   (  )  {   file input stream fin = null ;  try  {  if  ( ssl context  =  =  null )   {  ssl context = ssl context . get instance ( protocol   scheme )  ;   key store ssl key store =  key store . get instance ( keystore   type )  ;  fin = new  file input stream ( trust store file name )  ;  ssl key store . load ( fin trust store password . to char array (  )  )  ;   trust manager factory factory =  trust manager factory . get instance (  trust manager factory . get default algorithm (  )  )  ;  factory . init ( ssl key store )  ;   trust manager[] trust managers = factory . get trust managers (  )  ;  ssl context . init ( null trust managers null )  ;   }  if  ( hostname verifier  =  =  null )   {  hostname verifier = ssl socket factory . allow   all   hostname   verifier ;   }  ssl connection socket factory custom ssl socket factory = new ssl connection socket factory ( ssl context hostname verifier )  ;  ssl socket factory ssl socket factory = new ssl socket factory adapter ( custom ssl socket factory )  ;   scheme registry ssl scheme registry = new  scheme registry (  )  ;  ssl scheme registry . register ( new  scheme ( protocol https   port ssl socket factory )  )  ;  return new  monitored connection manager ( client name ssl scheme registry )  ;   }  catch  (   exception ex )   {  throw new  illegal state exception ( ""ssl configuration issue"" ex )  ;   }  finally  {  if  ( fin  !  =  null )   {  try  {  fin . close (  )  ;   }  catch  (  io exception ignore )   {   }   }   }   }  ",1548,3,custom,2,"[858, 1031]"
2203,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\EurekaJerseyClientImpl.java,create custom sslcm,"private  monitored connection manager   (  )  {   file input stream fin = null ;  try  {  if  ( ssl context  =  =  null )   {  ssl context = ssl context . get instance ( protocol   scheme )  ;   key store ssl key store =  key store . get instance ( keystore   type )  ;  fin = new  file input stream ( trust store file name )  ;  ssl key store . load ( fin trust store password . to char array (  )  )  ;   trust manager factory factory =  trust manager factory . get instance (  trust manager factory . get default algorithm (  )  )  ;  factory . init ( ssl key store )  ;   trust manager[] trust managers = factory . get trust managers (  )  ;  ssl context . init ( null trust managers null )  ;   }  if  ( hostname verifier  =  =  null )   {  hostname verifier = ssl socket factory . allow   all   hostname   verifier ;   }  ssl connection socket factory custom ssl socket factory = new ssl connection socket factory ( ssl context hostname verifier )  ;  ssl socket factory ssl socket factory = new ssl socket factory adapter ( custom ssl socket factory )  ;   scheme registry ssl scheme registry = new  scheme registry (  )  ;  ssl scheme registry . register ( new  scheme ( protocol https   port ssl socket factory )  )  ;  return new  monitored connection manager ( client name ssl scheme registry )  ;   }  catch  (   exception ex )   {  throw new  illegal state exception ( ""ssl configuration issue"" ex )  ;   }  finally  {  if  ( fin  !  =  null )   {  try  {  fin . close (  )  ;   }  catch  (  io exception ignore )   {   }   }   }   }  ",1548,3,sslcm,3,[]
2204,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\EurekaJerseyClientImpl.java,create default sslcm,"private  monitored connection manager   (  )  {  final  scheme registry registry = new  scheme registry (  )  ;  registry . register ( new  scheme ( ""http"" 80  plain socket factory . get socket factory (  )  )  )  ;  registry . register ( new  scheme ( ""https"" 443 new ssl socket factory adapter ( ssl connection socket factory . get socket factory (  )  )  )  )  ;  return new  monitored connection manager ( client name registry )  ;   }  ",441,3,create,1,[]
2205,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\EurekaJerseyClientImpl.java,create default sslcm,"private  monitored connection manager   (  )  {  final  scheme registry registry = new  scheme registry (  )  ;  registry . register ( new  scheme ( ""http"" 80  plain socket factory . get socket factory (  )  )  )  ;  registry . register ( new  scheme ( ""https"" 443 new ssl socket factory adapter ( ssl connection socket factory . get socket factory (  )  )  )  )  ;  return new  monitored connection manager ( client name registry )  ;   }  ",441,3,default,2,[]
2206,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\EurekaJerseyClientImpl.java,create default sslcm,"private  monitored connection manager   (  )  {  final  scheme registry registry = new  scheme registry (  )  ;  registry . register ( new  scheme ( ""http"" 80  plain socket factory . get socket factory (  )  )  )  ;  registry . register ( new  scheme ( ""https"" 443 new ssl socket factory adapter ( ssl connection socket factory . get socket factory (  )  )  )  )  ;  return new  monitored connection manager ( client name registry )  ;   }  ",441,3,sslcm,3,[]
2207,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\EurekaJerseyClientImpl.java,create system sslcm,private  monitored connection manager   (  )  {   monitored connection manager cm ;  ssl connection socket factory system socket factory = ssl connection socket factory . get system socket factory (  )  ;  ssl socket factory ssl socket factory = new ssl socket factory adapter ( system socket factory )  ;   scheme registry ssl scheme registry = new  scheme registry (  )  ;  ssl scheme registry . register ( new  scheme ( protocol https   port ssl socket factory )  )  ;  cm = new  monitored connection manager ( client name ssl scheme registry )  ;  return cm ;   }  ,569,3,create,1,[]
2208,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\EurekaJerseyClientImpl.java,create system sslcm,private  monitored connection manager   (  )  {   monitored connection manager cm ;  ssl connection socket factory system socket factory = ssl connection socket factory . get system socket factory (  )  ;  ssl socket factory ssl socket factory = new ssl socket factory adapter ( system socket factory )  ;   scheme registry ssl scheme registry = new  scheme registry (  )  ;  ssl scheme registry . register ( new  scheme ( protocol https   port ssl socket factory )  )  ;  cm = new  monitored connection manager ( client name ssl scheme registry )  ;  return cm ;   }  ,569,3,system,2,"[115, 175, 279]"
2209,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\EurekaJerseyClientImpl.java,create system sslcm,private  monitored connection manager   (  )  {   monitored connection manager cm ;  ssl connection socket factory system socket factory = ssl connection socket factory . get system socket factory (  )  ;  ssl socket factory ssl socket factory = new ssl socket factory adapter ( system socket factory )  ;   scheme registry ssl scheme registry = new  scheme registry (  )  ;  ssl scheme registry . register ( new  scheme ( protocol https   port ssl socket factory )  )  ;  cm = new  monitored connection manager ( client name ssl scheme registry )  ;  return cm ;   }  ,569,3,sslcm,3,[]
2210,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\EurekaJerseyClientImpl.java,destroy resources,@ override public void   (  )  {  apache http client connection cleaner . shutdown (  )  ;  apache http client . destroy (  )  ;   }  ,134,2,destroy,1,[113]
2211,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\EurekaJerseyClientImpl.java,destroy resources,@ override public void   (  )  {  apache http client connection cleaner . shutdown (  )  ;  apache http client . destroy (  )  ;   }  ,134,2,resources,2,[]
2212,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\EurekaJerseyClientImpl.java,get client,@ override public  apache http client4   (  )  {  return apache http client ;   }  ,83,2,get,1,[]
2213,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\EurekaJerseyClientImpl.java,get client,@ override public  apache http client4   (  )  {  return apache http client ;   }  ,83,2,client,2,"[31, 69]"
2214,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\EurekaJerseyClientImpl.java,with client name,public  eureka jersey client builder   (  string client name )  {  this . client name = client name ;  return this ;   }  ,122,3,with,1,[]
2215,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\EurekaJerseyClientImpl.java,with client name,public  eureka jersey client builder   (  string client name )  {  this . client name = client name ;  return this ;   }  ,122,3,client,2,"[22, 49, 74, 88]"
2216,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\EurekaJerseyClientImpl.java,with client name,public  eureka jersey client builder   (  string client name )  {  this . client name = client name ;  return this ;   }  ,122,3,name,3,"[56, 81, 95]"
2217,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\EurekaJerseyClientImpl.java,with connection idle timeout,public  eureka jersey client builder   ( int connection idle timeout )  {  this . connection idle timeout = connection idle timeout ;  return this ;   }  ,154,4,with,1,[]
2218,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\EurekaJerseyClientImpl.java,with connection idle timeout,public  eureka jersey client builder   ( int connection idle timeout )  {  this . connection idle timeout = connection idle timeout ;  return this ;   }  ,154,4,connection,2,"[45, 82, 108]"
2219,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\EurekaJerseyClientImpl.java,with connection idle timeout,public  eureka jersey client builder   ( int connection idle timeout )  {  this . connection idle timeout = connection idle timeout ;  return this ;   }  ,154,4,idle,3,"[56, 93, 119]"
2220,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\EurekaJerseyClientImpl.java,with connection idle timeout,public  eureka jersey client builder   ( int connection idle timeout )  {  this . connection idle timeout = connection idle timeout ;  return this ;   }  ,154,4,timeout,4,"[61, 98, 124]"
2221,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\EurekaJerseyClientImpl.java,with connection timeout,public  eureka jersey client builder   ( int connection timeout )  {  this . connection timeout = connection timeout ;  return this ;   }  ,139,3,with,1,[]
2222,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\EurekaJerseyClientImpl.java,with connection timeout,public  eureka jersey client builder   ( int connection timeout )  {  this . connection timeout = connection timeout ;  return this ;   }  ,139,3,connection,2,"[45, 77, 98]"
2223,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\EurekaJerseyClientImpl.java,with connection timeout,public  eureka jersey client builder   ( int connection timeout )  {  this . connection timeout = connection timeout ;  return this ;   }  ,139,3,timeout,3,"[56, 88, 109]"
2224,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\EurekaJerseyClientImpl.java,with customssl,public  eureka jersey client builder   ( ssl context ssl context )  {  this . ssl context = ssl context ;  return this ;   }  ,126,2,with,1,[]
2225,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\EurekaJerseyClientImpl.java,with customssl,public  eureka jersey client builder   ( ssl context ssl context )  {  this . ssl context = ssl context ;  return this ;   }  ,126,2,customssl,2,[]
2226,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\EurekaJerseyClientImpl.java,with decoder,public  eureka jersey client builder   (  string decoder name  string client data accept )  {  return this . with decoder wrapper (  codec wrappers . resolve decoder ( decoder name client data accept )  )  ;   }  ,213,2,with,1,[109]
2227,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\EurekaJerseyClientImpl.java,with decoder,public  eureka jersey client builder   (  string decoder name  string client data accept )  {  return this . with decoder wrapper (  codec wrappers . resolve decoder ( decoder name client data accept )  )  ;   }  ,213,2,decoder,2,"[49, 114, 158, 168]"
2228,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\EurekaJerseyClientImpl.java,with decoder wrapper,public  eureka jersey client builder   (  decoder wrapper decoder wrapper )  {  this . decoder wrapper = decoder wrapper ;  return this ;   }  ,143,3,with,1,[]
2229,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\EurekaJerseyClientImpl.java,with decoder wrapper,public  eureka jersey client builder   (  decoder wrapper decoder wrapper )  {  this . decoder wrapper = decoder wrapper ;  return this ;   }  ,143,3,decoder,2,"[42, 58, 87, 105]"
2230,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\EurekaJerseyClientImpl.java,with decoder wrapper,public  eureka jersey client builder   (  decoder wrapper decoder wrapper )  {  this . decoder wrapper = decoder wrapper ;  return this ;   }  ,143,3,wrapper,3,"[50, 66, 95, 113]"
2231,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\EurekaJerseyClientImpl.java,with encoder,public  eureka jersey client builder   (  string encoder name )  {  return this . with encoder wrapper (  codec wrappers . get encoder ( encoder name )  )  ;   }  ,163,2,with,1,[82]
2232,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\EurekaJerseyClientImpl.java,with encoder,public  eureka jersey client builder   (  string encoder name )  {  return this . with encoder wrapper (  codec wrappers . get encoder ( encoder name )  )  ;   }  ,163,2,encoder,2,"[49, 87, 127, 137]"
2233,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\EurekaJerseyClientImpl.java,with encoder wrapper,public  eureka jersey client builder   (  encoder wrapper encoder wrapper )  {  this . encoder wrapper = encoder wrapper ;  return this ;   }  ,143,3,with,1,[]
2234,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\EurekaJerseyClientImpl.java,with encoder wrapper,public  eureka jersey client builder   (  encoder wrapper encoder wrapper )  {  this . encoder wrapper = encoder wrapper ;  return this ;   }  ,143,3,encoder,2,"[42, 58, 87, 105]"
2235,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\EurekaJerseyClientImpl.java,with encoder wrapper,public  eureka jersey client builder   (  encoder wrapper encoder wrapper )  {  this . encoder wrapper = encoder wrapper ;  return this ;   }  ,143,3,wrapper,3,"[50, 66, 95, 113]"
2236,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\EurekaJerseyClientImpl.java,with hostname verifier,public void   (  hostname verifier hostname verifier )  {  this . hostname verifier = hostname verifier ;   }  ,111,3,with,1,[]
2237,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\EurekaJerseyClientImpl.java,with hostname verifier,public void   (  hostname verifier hostname verifier )  {  this . hostname verifier = hostname verifier ;   }  ,111,3,hostname,2,"[17, 35, 66, 86]"
2238,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\EurekaJerseyClientImpl.java,with hostname verifier,public void   (  hostname verifier hostname verifier )  {  this . hostname verifier = hostname verifier ;   }  ,111,3,verifier,3,"[26, 44, 75, 95]"
2239,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\EurekaJerseyClientImpl.java,with max connections per host,public  eureka jersey client builder   ( int max connections per host )  {  this . max connections per host = max connections per host ;  return this ;   }  ,157,5,with,1,[]
2240,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\EurekaJerseyClientImpl.java,with max connections per host,public  eureka jersey client builder   ( int max connections per host )  {  this . max connections per host = max connections per host ;  return this ;   }  ,157,5,max,2,"[45, 83, 110]"
2241,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\EurekaJerseyClientImpl.java,with max connections per host,public  eureka jersey client builder   ( int max connections per host )  {  this . max connections per host = max connections per host ;  return this ;   }  ,157,5,connections,3,"[49, 87, 114]"
2242,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\EurekaJerseyClientImpl.java,with max connections per host,public  eureka jersey client builder   ( int max connections per host )  {  this . max connections per host = max connections per host ;  return this ;   }  ,157,5,per,4,"[61, 99, 126]"
2243,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\EurekaJerseyClientImpl.java,with max connections per host,public  eureka jersey client builder   ( int max connections per host )  {  this . max connections per host = max connections per host ;  return this ;   }  ,157,5,host,5,"[65, 103, 130]"
2244,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\EurekaJerseyClientImpl.java,with max total connections,public  eureka jersey client builder   ( int max total connections )  {  this . max total connections = max total connections ;  return this ;   }  ,148,4,with,1,[]
2245,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\EurekaJerseyClientImpl.java,with max total connections,public  eureka jersey client builder   ( int max total connections )  {  this . max total connections = max total connections ;  return this ;   }  ,148,4,max,2,"[45, 80, 104]"
2246,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\EurekaJerseyClientImpl.java,with max total connections,public  eureka jersey client builder   ( int max total connections )  {  this . max total connections = max total connections ;  return this ;   }  ,148,4,total,3,"[49, 84, 108]"
2247,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\EurekaJerseyClientImpl.java,with max total connections,public  eureka jersey client builder   ( int max total connections )  {  this . max total connections = max total connections ;  return this ;   }  ,148,4,connections,4,"[55, 90, 114]"
2248,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\EurekaJerseyClientImpl.java,with proxy,public  eureka jersey client builder   (  string proxy host  string proxy port  string user  string password )  {  this . proxy host = proxy host ;  this . proxy port = proxy port ;  this . proxy user name = user ;  this . proxy password = password ;  return this ;   }  ,271,2,with,1,[]
2249,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\EurekaJerseyClientImpl.java,with proxy,public  eureka jersey client builder   (  string proxy host  string proxy port  string user  string password )  {  this . proxy host = proxy host ;  this . proxy port = proxy port ;  this . proxy user name = user ;  this . proxy password = password ;  return this ;   }  ,271,2,proxy,2,"[49, 68, 122, 135, 156, 169, 190, 223]"
2250,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\EurekaJerseyClientImpl.java,with read timeout,public  eureka jersey client builder   ( int read timeout )  {  this . read timeout = read timeout ;  return this ;   }  ,121,3,with,1,[]
2251,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\EurekaJerseyClientImpl.java,with read timeout,public  eureka jersey client builder   ( int read timeout )  {  this . read timeout = read timeout ;  return this ;   }  ,121,3,read,2,"[45, 71, 86]"
2252,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\EurekaJerseyClientImpl.java,with read timeout,public  eureka jersey client builder   ( int read timeout )  {  this . read timeout = read timeout ;  return this ;   }  ,121,3,timeout,3,"[50, 76, 91]"
2253,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\EurekaJerseyClientImpl.java,with systemssl configuration,public  eureka jersey client builder   (  )  {  this . systemssl = true ;  return this ;   }  ,94,3,with,1,[]
2254,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\EurekaJerseyClientImpl.java,with systemssl configuration,public  eureka jersey client builder   (  )  {  this . systemssl = true ;  return this ;   }  ,94,3,systemssl,2,[55]
2255,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\EurekaJerseyClientImpl.java,with systemssl configuration,public  eureka jersey client builder   (  )  {  this . systemssl = true ;  return this ;   }  ,94,3,configuration,3,[]
2256,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\EurekaJerseyClientImpl.java,with trust store file,public  eureka jersey client builder   (  string trust store file name  string trust store password )  {  this . trust store file name = trust store file name ;  this . trust store password = trust store password ;  return this ;   }  ,235,4,with,1,[]
2257,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\EurekaJerseyClientImpl.java,with trust store file,public  eureka jersey client builder   (  string trust store file name  string trust store password )  {  this . trust store file name = trust store file name ;  this . trust store password = trust store password ;  return this ;   }  ,235,4,trust,2,"[49, 79, 113, 137, 169, 192]"
2258,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\EurekaJerseyClientImpl.java,with trust store file,public  eureka jersey client builder   (  string trust store file name  string trust store password )  {  this . trust store file name = trust store file name ;  this . trust store password = trust store password ;  return this ;   }  ,235,4,store,3,"[55, 85, 119, 143, 175, 198]"
2259,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\EurekaJerseyClientImpl.java,with trust store file,public  eureka jersey client builder   (  string trust store file name  string trust store password )  {  this . trust store file name = trust store file name ;  this . trust store password = trust store password ;  return this ;   }  ,235,4,file,4,"[61, 125, 149]"
2260,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\EurekaJerseyClientImpl.java,with user agent,public  eureka jersey client builder   (  string user agent )  {  this . user agent = user agent ;  return this ;   }  ,119,3,with,1,[]
2261,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\EurekaJerseyClientImpl.java,with user agent,public  eureka jersey client builder   (  string user agent )  {  this . user agent = user agent ;  return this ;   }  ,119,3,user,2,"[49, 73, 86]"
2262,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\EurekaJerseyClientImpl.java,with user agent,public  eureka jersey client builder   (  string user agent )  {  this . user agent = user agent ;  return this ;   }  ,119,3,agent,3,"[54, 78, 91]"
2263,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\SSLSocketFactoryAdapter.java,ssl socket factory adapter,public   ( ssl connection socket factory factory  hostname verifier hostname verifier )  {  super (  dummyssl socket factory . instance new  wrappedx509 hostname verifier ( hostname verifier )  )  ;  this . factory = factory ;   }  ,232,4,ssl,1,"[11, 106]"
2264,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\SSLSocketFactoryAdapter.java,ssl socket factory adapter,public   ( ssl connection socket factory factory  hostname verifier hostname verifier )  {  super (  dummyssl socket factory . instance new  wrappedx509 hostname verifier ( hostname verifier )  )  ;  this . factory = factory ;   }  ,232,4,socket,2,"[26, 110]"
2265,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\SSLSocketFactoryAdapter.java,ssl socket factory adapter,public   ( ssl connection socket factory factory  hostname verifier hostname verifier )  {  super (  dummyssl socket factory . instance new  wrappedx509 hostname verifier ( hostname verifier )  )  ;  this . factory = factory ;   }  ,232,4,factory,3,"[33, 41, 117, 207, 217]"
2266,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\SSLSocketFactoryAdapter.java,ssl socket factory adapter,public   ( ssl connection socket factory factory  hostname verifier hostname verifier )  {  super (  dummyssl socket factory . instance new  wrappedx509 hostname verifier ( hostname verifier )  )  ;  this . factory = factory ;   }  ,232,4,adapter,4,[]
2267,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\SSLSocketFactoryAdapter.java, wrappedx hostname verifier,private   (  hostname verifier hostname verifier )  {  this . hostname verifier = hostname verifier ;   }  ,107,3,wrappedx,1,[]
2268,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\SSLSocketFactoryAdapter.java, wrappedx hostname verifier,private   (  hostname verifier hostname verifier )  {  this . hostname verifier = hostname verifier ;   }  ,107,3,hostname,2,"[13, 31, 62, 82]"
2269,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\SSLSocketFactoryAdapter.java, wrappedx hostname verifier,private   (  hostname verifier hostname verifier )  {  this . hostname verifier = hostname verifier ;   }  ,107,3,verifier,3,"[22, 40, 71, 91]"
2270,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\SSLSocketFactoryAdapter.java,connect socket,@ override public  socket   ( final int connect timeout final  socket socket final  http host host final  inet socket address remote address final  inet socket address local address final  http context context )  throws io exception  {  return factory . c,255,2,connect,1,[40]
2271,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\SSLSocketFactoryAdapter.java,connect socket,@ override public  socket   ( final int connect timeout final  socket socket final  http host host final  inet socket address remote address final  inet socket address local address final  http context context )  throws io exception  {  return factory . c,255,2,socket,2,"[19, 63, 70, 111, 153]"
2272,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\SSLSocketFactoryAdapter.java,create layered socket,@ override public  socket   ( final  socket socket final  string target final int port final  http context context )  throws io exception  {  return factory . create layered socket ( socket target port context )  ;   }  ,220,3,create,1,[159]
2273,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\SSLSocketFactoryAdapter.java,create layered socket,@ override public  socket   ( final  socket socket final  string target final int port final  http context context )  throws io exception  {  return factory . create layered socket ( socket target port context )  ;   }  ,220,3,layered,2,[166]
2274,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\SSLSocketFactoryAdapter.java,create layered socket,@ override public  socket   ( final  socket socket final  string target final int port final  http context context )  throws io exception  {  return factory . create layered socket ( socket target port context )  ;   }  ,220,3,socket,3,"[19, 37, 44, 174, 183]"
2275,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\SSLSocketFactoryAdapter.java,create socket,@ override public  socket   (  inet address address int port  inet address local address int local port )  throws io exception  {  throw new  unsupported operation exception (  )  ;   }  ,187,2,create,1,[]
2276,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\SSLSocketFactoryAdapter.java,create socket,@ override public  socket   (  inet address address int port  inet address local address int local port )  throws io exception  {  throw new  unsupported operation exception (  )  ;   }  ,187,2,socket,2,[19]
2277,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\SSLSocketFactoryAdapter.java,get default cipher suites,@ override public  string[]   (  )  {  throw new  unsupported operation exception (  )  ;   }  ,95,4,get,1,[]
2278,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\SSLSocketFactoryAdapter.java,get default cipher suites,@ override public  string[]   (  )  {  throw new  unsupported operation exception (  )  ;   }  ,95,4,default,2,[]
2279,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\SSLSocketFactoryAdapter.java,get default cipher suites,@ override public  string[]   (  )  {  throw new  unsupported operation exception (  )  ;   }  ,95,4,cipher,3,[]
2280,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\SSLSocketFactoryAdapter.java,get default cipher suites,@ override public  string[]   (  )  {  throw new  unsupported operation exception (  )  ;   }  ,95,4,suites,4,[]
2281,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\SSLSocketFactoryAdapter.java,get supported cipher suites,@ override public  string[]   (  )  {  throw new  unsupported operation exception (  )  ;   }  ,95,4,get,1,[]
2282,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\SSLSocketFactoryAdapter.java,get supported cipher suites,@ override public  string[]   (  )  {  throw new  unsupported operation exception (  )  ;   }  ,95,4,supported,2,[52]
2283,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\SSLSocketFactoryAdapter.java,get supported cipher suites,@ override public  string[]   (  )  {  throw new  unsupported operation exception (  )  ;   }  ,95,4,cipher,3,[]
2284,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\SSLSocketFactoryAdapter.java,get supported cipher suites,@ override public  string[]   (  )  {  throw new  unsupported operation exception (  )  ;   }  ,95,4,suites,4,[]
2285,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\SSLSocketFactoryAdapter.java,verify,@ override public boolean   (  string hostname ssl session session )  {  return hostname verifier . verify ( hostname session )  ;   }  ,136,1,verify,1,[100]
2286,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\JerseyEurekaHttpClientFactory.java, jersey eureka http client factory,private   (  eureka jersey client jersey client  apache http client4 apache client long connection idle timeout  map <  string  string >  additional headers )  {  this . jersey client = jersey client ;  this . apache client = jersey client  !  =  null  ?  jersey client . get client (  )  : apache client ;  this . additional headers = additional headers ;  this . cleaner = new  apache http client connection cleaner ( this . apache client connection idle timeout )  ;   }  ,475,5,jersey,1,"[20, 34, 170, 186, 226, 256]"
2287,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\JerseyEurekaHttpClientFactory.java, jersey eureka http client factory,private   (  eureka jersey client jersey client  apache http client4 apache client long connection idle timeout  map <  string  string >  additional headers )  {  this . jersey client = jersey client ;  this . apache client = jersey client  !  =  null  ?  jersey client . get client (  )  : apache client ;  this . additional headers = additional headers ;  this . cleaner = new  apache http client connection cleaner ( this . apache client connection idle timeout )  ;   }  ,475,5,eureka,2,[13]
2288,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\JerseyEurekaHttpClientFactory.java, jersey eureka http client factory,private   (  eureka jersey client jersey client  apache http client4 apache client long connection idle timeout  map <  string  string >  additional headers )  {  this . jersey client = jersey client ;  this . apache client = jersey client  !  =  null  ?  jersey client . get client (  )  : apache client ;  this . additional headers = additional headers ;  this . cleaner = new  apache http client connection cleaner ( this . apache client connection idle timeout )  ;   }  ,475,5,http,3,"[56, 387]"
2289,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\JerseyEurekaHttpClientFactory.java, jersey eureka http client factory,private   (  eureka jersey client jersey client  apache http client4 apache client long connection idle timeout  map <  string  string >  additional headers )  {  this . jersey client = jersey client ;  this . apache client = jersey client  !  =  null  ?  jersey client . get client (  )  : apache client ;  this . additional headers = additional headers ;  this . cleaner = new  apache http client connection cleaner ( this . apache client connection idle timeout )  ;   }  ,475,5,client,4,"[27, 41, 61, 76, 177, 193, 217, 233, 263, 276, 298, 392, 434]"
2290,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\JerseyEurekaHttpClientFactory.java, jersey eureka http client factory,private   (  eureka jersey client jersey client  apache http client4 apache client long connection idle timeout  map <  string  string >  additional headers )  {  this . jersey client = jersey client ;  this . apache client = jersey client  !  =  null  ?  jersey client . get client (  )  : apache client ;  this . additional headers = additional headers ;  this . cleaner = new  apache http client connection cleaner ( this . apache client connection idle timeout )  ;   }  ,475,5,factory,5,[]
2291,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\JerseyEurekaHttpClientFactory.java,add filters,private void   (  apache http client4 discovery apache client )  {  discovery apache client . add filter ( new gzip content encoding filter ( false )  )  ;   string ip = my instance info  =  =  null  ?  null : my instance info . getip addr (  )  ;   abstract eureka identity identity = client identity  =  =  null  ?  new  eureka client identity ( ip )  : client identity ;  discovery apache client . add filter ( new  eureka identity header filter ( identity )  )  ;  if  ( additional filters  !  =  null )   {  for  (   client filter filter : additional filters )   {  if  ( filter  !  =  null )   {  discovery apache client . add filter ( filter )  ;   }   }   }   }  ,671,2,add,1,"[94, 235, 401, 475, 545, 629]"
2292,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\JerseyEurekaHttpClientFactory.java,add filters,private void   (  apache http client4 discovery apache client )  {  discovery apache client . add filter ( new gzip content encoding filter ( false )  )  ;   string ip = my instance info  =  =  null  ?  null : my instance info . getip addr (  )  ;   abstract eureka identity identity = client identity  =  =  null  ?  new  eureka client identity ( ip )  : client identity ;  discovery apache client . add filter ( new  eureka identity header filter ( identity )  )  ;  if  ( additional filters  !  =  null )   {  for  (   client filter filter : additional filters )   {  if  ( filter  !  =  null )   {  discovery apache client . add filter ( filter )  ;   }   }   }   }  ,671,2,filters,2,"[486, 556]"
2293,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\JerseyEurekaHttpClientFactory.java,add proxy configuration,"private void   (  client config client config )  {  if  ( proxy user name  !  =  null && proxy password  !  =  null )   {  client config . get properties (  )  . put (  apache http client4 config . property   proxy   username proxy user name )  ;  client config . get properties (  )  . put (  apache http client4 config . property   proxy   password proxy password )  ;   }  else  {  client config . get properties (  )  . put (  apache http client4 config . property   proxy   username ""guest"" )  ;  client config . get properties (  )  . put (  apache http client4 config . property   proxy   password ""guest"" )  ;   }  client config . get properties (  )  . put (  default apache http client4 config . property   proxy   uri ""http: /  / ""  +  proxy host  +  ':' +  proxy port )  ;   }  ",790,3,add,1,[]
2294,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\JerseyEurekaHttpClientFactory.java,add proxy configuration,"private void   (  client config client config )  {  if  ( proxy user name  !  =  null && proxy password  !  =  null )   {  client config . get properties (  )  . put (  apache http client4 config . property   proxy   username proxy user name )  ;  client config . get properties (  )  . put (  apache http client4 config . property   proxy   password proxy password )  ;   }  else  {  client config . get properties (  )  . put (  apache http client4 config . property   proxy   username ""guest"" )  ;  client config . get properties (  )  . put (  apache http client4 config . property   proxy   password ""guest"" )  ;   }  client config . get properties (  )  . put (  default apache http client4 config . property   proxy   uri ""http: /  / ""  +  proxy host  +  ':' +  proxy port )  ;   }  ",790,3,proxy,2,"[58, 89, 209, 226, 334, 351, 471, 588, 717, 747, 769]"
2295,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\JerseyEurekaHttpClientFactory.java,add proxy configuration,"private void   (  client config client config )  {  if  ( proxy user name  !  =  null && proxy password  !  =  null )   {  client config . get properties (  )  . put (  apache http client4 config . property   proxy   username proxy user name )  ;  client config . get properties (  )  . put (  apache http client4 config . property   proxy   password proxy password )  ;   }  else  {  client config . get properties (  )  . put (  apache http client4 config . property   proxy   username ""guest"" )  ;  client config . get properties (  )  . put (  apache http client4 config . property   proxy   password ""guest"" )  ;   }  client config . get properties (  )  . put (  default apache http client4 config . property   proxy   uri ""http: /  / ""  +  proxy host  +  ':' +  proxy port )  ;   }  ",790,3,configuration,3,[]
2296,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\JerseyEurekaHttpClientFactory.java,build,"@ override public  jersey eureka http client factory   (  )  {   map <  string  string >  additional headers = new  hash map <  >  (  )  ;  if  ( allow redirect )   {  additional headers . put ( http   x   discovery   allow   redirect ""true"" )  ;   }  if ",255,1,build,1,[]
2297,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\JerseyEurekaHttpClientFactory.java,build experimental,"private  jersey eureka http client factory   (  map <  string  string >  additional headers )  {   thread safe client conn manager cm = create connection manager (  )  ;   client config client config = new  default apache http client4 config (  )  ;  if  ( proxy host  !  =  null )   {  add proxy configuration ( client config )  ;   }   discovery jersey provider discovery jersey provider = new  discovery jersey provider ( encoder wrapper decoder wrapper )  ;  client config . get singletons (  )  . add ( discovery jersey provider )  ;  cm . set default max per route ( max connections per host )  ;  cm . set max total ( max total connections )  ;  client config . get properties (  )  . put (  apache http client4 config . property   connection   manager cm )  ;   string full user agent name =  ( user agent  =  =  null  ?  client name : user agent )   +  "" / v""  +  build version (  )  ;  client config . get properties (  )  . put (  core protocolp names . user   agent full user agent name )  ;  client config . get properties (  )  . put (  client config . property   follow   redirects  boolean . false )  ;  client config . get properties (  )  . put (  clientp names . handle   redirects  boolean . false )  ;   apache http client4 apache client =  apache http client4 . create ( client config )  ;  add filters ( apache client )  ;  return new  jersey eureka http client factory ( apache client connection idle timeout additional headers )  ;   }  ",1462,2,build,1,[873]
2298,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\JerseyEurekaHttpClientFactory.java,build experimental,"private  jersey eureka http client factory   (  map <  string  string >  additional headers )  {   thread safe client conn manager cm = create connection manager (  )  ;   client config client config = new  default apache http client4 config (  )  ;  if  ( proxy host  !  =  null )   {  add proxy configuration ( client config )  ;   }   discovery jersey provider discovery jersey provider = new  discovery jersey provider ( encoder wrapper decoder wrapper )  ;  client config . get singletons (  )  . add ( discovery jersey provider )  ;  cm . set default max per route ( max connections per host )  ;  cm . set max total ( max total connections )  ;  client config . get properties (  )  . put (  apache http client4 config . property   connection   manager cm )  ;   string full user agent name =  ( user agent  =  =  null  ?  client name : user agent )   +  "" / v""  +  build version (  )  ;  client config . get properties (  )  . put (  core protocolp names . user   agent full user agent name )  ;  client config . get properties (  )  . put (  client config . property   follow   redirects  boolean . false )  ;  client config . get properties (  )  . put (  clientp names . handle   redirects  boolean . false )  ;   apache http client4 apache client =  apache http client4 . create ( client config )  ;  add filters ( apache client )  ;  return new  jersey eureka http client factory ( apache client connection idle timeout additional headers )  ;   }  ",1462,2,experimental,2,[]
2299,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\JerseyEurekaHttpClientFactory.java,build legacy,"private  jersey eureka http client factory   (  map <  string  string >  additional headers boolean systemssl )  {   eureka jersey client builder client builder = new  eureka jersey client builder (  )  . with client name ( client name )  . with user agent ( "" java -  eureka client"" )  . with connection timeout ( connection timeout )  . with read timeout ( read timeout )  . with max connections per host ( max connections per host )  . with max total connections ( max total connections )  . with connection idle timeout (  ( int ) connection idle timeout )  . with encoder wrapper ( encoder wrapper )  . with decoder wrapper ( decoder wrapper )  ;  if  ( systemssl )   {  client builder . with systemssl configuration (  )  ;   }  else if  ( ssl context  !  =  null )   {  client builder . with customssl ( ssl context )  ;   }  if  ( hostname verifier  !  =  null )   {  client builder . with hostname verifier ( hostname verifier )  ;   }   eureka jersey client jersey client = client builder . build (  )  ;   apache http client4 discovery apache client = jersey client . get client (  )  ;  add filters ( discovery apache client )  ;  return new  jersey eureka http client factory ( jersey client additional headers )  ;   }  ",1234,2,build,1,"[138, 153, 189, 683, 784, 883, 991, 1001]"
2300,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\JerseyEurekaHttpClientFactory.java,build legacy,"private  jersey eureka http client factory   (  map <  string  string >  additional headers boolean systemssl )  {   eureka jersey client builder client builder = new  eureka jersey client builder (  )  . with client name ( client name )  . with user agent ( "" java -  eureka client"" )  . with connection timeout ( connection timeout )  . with read timeout ( read timeout )  . with max connections per host ( max connections per host )  . with max total connections ( max total connections )  . with connection idle timeout (  ( int ) connection idle timeout )  . with encoder wrapper ( encoder wrapper )  . with decoder wrapper ( decoder wrapper )  ;  if  ( systemssl )   {  client builder . with systemssl configuration (  )  ;   }  else if  ( ssl context  !  =  null )   {  client builder . with customssl ( ssl context )  ;   }  if  ( hostname verifier  !  =  null )   {  client builder . with hostname verifier ( hostname verifier )  ;   }   eureka jersey client jersey client = client builder . build (  )  ;   apache http client4 discovery apache client = jersey client . get client (  )  ;  add filters ( discovery apache client )  ;  return new  jersey eureka http client factory ( jersey client additional headers )  ;   }  ",1234,2,legacy,2,[]
2301,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\JerseyEurekaHttpClientFactory.java,create,"public static  jersey eureka http client factory   (  eureka client config client config  collection <  client filter >  additional filters  instance info my instance info  abstract eureka identity client identity  optional < ssl context >  ssl context  optional <  hostname verifier >  hostname verifier )  {   jersey eureka http client factory builder client builder = new builder (  )  . with additional filters ( additional filters )  . with my instance info ( my instance info )  . with user agent ( "" java -  eureka client"" )  . with client config ( client config )  . with client identity ( client identity )  ;  ssl context . if present ( client builder::withssl context )  ;  hostname verifier . if present ( client builder::with hostname verifier )  ;  if  ( ""true"" . equals (  system . get property ( ""com . netflix . eureka . shouldssl connections use system socket factory"" )  )  )   {  client builder . with client name ( "" discovery client - http client -  system"" )  . with systemssl configuration (  )  ;   }  else if  ( client config . get proxy host (  )   !  =  null && client config . get proxy port (  )   !  =  null )   {  client builder . with client name ( "" proxy -  discovery client - http client"" )  . with proxy ( client config . get proxy host (  )   integer . parse int ( client config . get proxy port (  )  )  client config . get proxy user name (  )  client config . get proxy password (  )  )  ;   }  else  {  client builder . with client name ( "" discovery client - http client"" )  ;   }  return client builder . build (  )  ;   }  ",1568,1,create,1,[]
2302,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\JerseyEurekaHttpClientFactory.java,create connection manager,"private  thread safe client conn manager   (  )  {  try  {   thread safe client conn manager connection manager ;  if  ( ssl context  !  =  null )   {   scheme socket factory socket factory = new ssl socket factory ( ssl context new  allow all hostname verifier (  )  )  ;   scheme registry ssl scheme registry = new  scheme registry (  )  ;  ssl scheme registry . register ( new  scheme ( ""https"" 443 socket factory )  )  ;  connection manager = new  thread safe client conn manager ( ssl scheme registry )  ;   }  else  {  connection manager = new  thread safe client conn manager (  )  ;   }  return connection manager ;   }  catch  (   exception e )   {  throw new  illegal state exception ( "" cannot initialize  apache connection manager"" e )  ;   }   }  ",760,3,create,1,[]
2303,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\JerseyEurekaHttpClientFactory.java,create connection manager,"private  thread safe client conn manager   (  )  {  try  {   thread safe client conn manager connection manager ;  if  ( ssl context  !  =  null )   {   scheme socket factory socket factory = new ssl socket factory ( ssl context new  allow all hostname verifier (  )  )  ;   scheme registry ssl scheme registry = new  scheme registry (  )  ;  ssl scheme registry . register ( new  scheme ( ""https"" 443 socket factory )  )  ;  connection manager = new  thread safe client conn manager ( ssl scheme registry )  ;   }  else  {  connection manager = new  thread safe client conn manager (  )  ;   }  return connection manager ;   }  catch  (   exception e )   {  throw new  illegal state exception ( "" cannot initialize  apache connection manager"" e )  ;   }   }  ",760,3,connection,2,"[93, 426, 525, 603, 724]"
2304,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\JerseyEurekaHttpClientFactory.java,create connection manager,"private  thread safe client conn manager   (  )  {  try  {   thread safe client conn manager connection manager ;  if  ( ssl context  !  =  null )   {   scheme socket factory socket factory = new ssl socket factory ( ssl context new  allow all hostname verifier (  )  )  ;   scheme registry ssl scheme registry = new  scheme registry (  )  ;  ssl scheme registry . register ( new  scheme ( ""https"" 443 socket factory )  )  ;  connection manager = new  thread safe client conn manager ( ssl scheme registry )  ;   }  else  {  connection manager = new  thread safe client conn manager (  )  ;   }  return connection manager ;   }  catch  (   exception e )   {  throw new  illegal state exception ( "" cannot initialize  apache connection manager"" e )  ;   }   }  ",760,3,manager,3,"[33, 85, 104, 437, 476, 536, 575, 614, 735]"
2305,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\JerseyEurekaHttpClientFactory.java,experimental builder,public static  jersey eureka http client factory builder   (  )  {  return new  jersey eureka http client factory builder (  )  . with experimental ( true )  ;   }  ,165,2,experimental,1,[135]
2306,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\JerseyEurekaHttpClientFactory.java,experimental builder,public static  jersey eureka http client factory builder   (  )  {  return new  jersey eureka http client factory builder (  )  . with experimental ( true )  ;   }  ,165,2,builder,2,"[49, 114]"
2307,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\JerseyEurekaHttpClientFactory.java,new builder,public static  jersey eureka http client factory builder   (  )  {  return new  jersey eureka http client factory builder (  )  . with experimental ( false )  ;   }  ,166,2,new,1,[75]
2308,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\JerseyEurekaHttpClientFactory.java,new builder,public static  jersey eureka http client factory builder   (  )  {  return new  jersey eureka http client factory builder (  )  . with experimental ( false )  ;   }  ,166,2,builder,2,"[49, 114]"
2309,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\JerseyEurekaHttpClientFactory.java,new client,@ override public  eureka http client   (  eureka endpoint endpoint )  {  return new  jersey application client ( apache client endpoint . get service url (  )  additional headers )  ;   }  ,190,2,new,1,[81]
2310,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\JerseyEurekaHttpClientFactory.java,new client,@ override public  eureka http client   (  eureka endpoint endpoint )  {  return new  jersey application client ( apache client endpoint . get service url (  )  additional headers )  ;   }  ,190,2,client,2,"[31, 105, 121]"
2311,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\JerseyEurekaHttpClientFactory.java,shutdown,@ override public void   (  )  {  cleaner . shutdown (  )  ;  if  ( jersey client  !  =  null )   {  jersey client . destroy resources (  )  ;   }  else  {  apache client . destroy (  )  ;   }   }  ,198,1,shutdown,1,[44]
2312,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\JerseyEurekaHttpClientFactory.java,with additional filters,public  jersey eureka http client factory builder   (  collection <  client filter >  additional filters )  {  this . additional filters = additional filters ;  return this ;   }  ,180,3,with,1,[]
2313,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\JerseyEurekaHttpClientFactory.java,with additional filters,public  jersey eureka http client factory builder   (  collection <  client filter >  additional filters )  {  this . additional filters = additional filters ;  return this ;   }  ,180,3,additional,2,"[86, 118, 139]"
2314,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\JerseyEurekaHttpClientFactory.java,with additional filters,public  jersey eureka http client factory builder   (  collection <  client filter >  additional filters )  {  this . additional filters = additional filters ;  return this ;   }  ,180,3,filters,3,"[97, 129, 150]"
2315,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\JerseyEurekaHttpClientFactory.java,with experimental,public  jersey eureka http client factory builder   ( boolean experimental )  {  this . experimental = experimental ;  return this ;   }  ,138,2,with,1,[]
2316,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\JerseyEurekaHttpClientFactory.java,with experimental,public  jersey eureka http client factory builder   ( boolean experimental )  {  this . experimental = experimental ;  return this ;   }  ,138,2,experimental,2,"[62, 88, 103]"
2317,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\TransportException.java, transport exception,public   (  string message  throwable cause )  {  super ( message cause )  ;   }  ,82,2,transport,1,[]
2318,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\TransportException.java, transport exception,public   (  string message  throwable cause )  {  super ( message cause )  ;   }  ,82,2,exception,2,[]
2319,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\TransportUtils.java,get or set another client,public static  eureka http client   (  atomic reference <  eureka http client >  eureka http client ref  eureka http client another )  {   eureka http client existing = eureka http client ref . get (  )  ;  if  ( eureka http client ref . compare and set ( null another )  )   {  return another ;   }  another . shutdown (  )  ;  return existing ;   }  ,352,5,get,1,[194]
2320,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\TransportUtils.java,get or set another client,public static  eureka http client   (  atomic reference <  eureka http client >  eureka http client ref  eureka http client another )  {   eureka http client existing = eureka http client ref . get (  )  ;  if  ( eureka http client ref . compare and set ( null another )  )   {  return another ;   }  another . shutdown (  )  ;  return existing ;   }  ,352,5,or,2,[]
2321,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\TransportUtils.java,get or set another client,public static  eureka http client   (  atomic reference <  eureka http client >  eureka http client ref  eureka http client another )  {   eureka http client existing = eureka http client ref . get (  )  ;  if  ( eureka http client ref . compare and set ( null another )  )   {  return another ;   }  another . shutdown (  )  ;  return existing ;   }  ,352,5,set,3,[250]
2322,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\TransportUtils.java,get or set another client,public static  eureka http client   (  atomic reference <  eureka http client >  eureka http client ref  eureka http client another )  {   eureka http client existing = eureka http client ref . get (  )  ;  if  ( eureka http client ref . compare and set ( null another )  )   {  return another ;   }  another . shutdown (  )  ;  return existing ;   }  ,352,5,another,4,"[124, 261, 286, 301]"
2323,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\TransportUtils.java,get or set another client,public static  eureka http client   (  atomic reference <  eureka http client >  eureka http client ref  eureka http client another )  {   eureka http client existing = eureka http client ref . get (  )  ;  if  ( eureka http client ref . compare and set ( null another )  )   {  return another ;   }  another . shutdown (  )  ;  return existing ;   }  ,352,5,client,5,"[27, 71, 93, 117, 151, 181, 225]"
2324,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\TransportUtils.java,shutdown,public static void   (  eureka http client eureka http client )  {  if  ( eureka http client  !  =  null )   {  eureka http client . shutdown (  )  ;   }   }  ,159,1,shutdown,1,[133]
2325,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\TimedSupervisorTask.java, timed supervisor task,"public   (  string name  scheduled executor service scheduler  thread pool executor executor int timeout  time unit time unit int exp back off bound  runnable task )  {  this . scheduler = scheduler ;  this . executor = executor ;  this . timeout millis = time unit . to millis ( timeout )  ;  this . task = task ;  this . delay = new  atomic long ( timeout millis )  ;  this . max delay = timeout millis * exp back off bound ;  timeout counter =  monitors . new counter ( ""timeouts"" )  ;  rejected counter =  monitors . new counter ( ""rejected executions"" )  ;  throwable counter =  monitors . new counter ( ""throwables"" )  ;  thread pool level gauge = new  long gauge (  monitor config . builder ( ""thread pool used"" )  . build (  )  )  ;   monitors . register object ( name this )  ;   }  ",792,3,timed,1,[]
2326,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\TimedSupervisorTask.java, timed supervisor task,"public   (  string name  scheduled executor service scheduler  thread pool executor executor int timeout  time unit time unit int exp back off bound  runnable task )  {  this . scheduler = scheduler ;  this . executor = executor ;  this . timeout millis = time unit . to millis ( timeout )  ;  this . task = task ;  this . delay = new  atomic long ( timeout millis )  ;  this . max delay = timeout millis * exp back off bound ;  timeout counter =  monitors . new counter ( ""timeouts"" )  ;  rejected counter =  monitors . new counter ( ""rejected executions"" )  ;  throwable counter =  monitors . new counter ( ""throwables"" )  ;  thread pool level gauge = new  long gauge (  monitor config . builder ( ""thread pool used"" )  . build (  )  )  ;   monitors . register object ( name this )  ;   }  ",792,3,supervisor,2,[]
2327,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\TimedSupervisorTask.java, timed supervisor task,"public   (  string name  scheduled executor service scheduler  thread pool executor executor int timeout  time unit time unit int exp back off bound  runnable task )  {  this . scheduler = scheduler ;  this . executor = executor ;  this . timeout millis = time unit . to millis ( timeout )  ;  this . task = task ;  this . delay = new  atomic long ( timeout millis )  ;  this . max delay = timeout millis * exp back off bound ;  timeout counter =  monitors . new counter ( ""timeouts"" )  ;  rejected counter =  monitors . new counter ( ""rejected executions"" )  ;  throwable counter =  monitors . new counter ( ""throwables"" )  ;  thread pool level gauge = new  long gauge (  monitor config . builder ( ""thread pool used"" )  . build (  )  )  ;   monitors . register object ( name this )  ;   }  ",792,3,task,3,"[159, 301, 308]"
2328,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\TimedSupervisorTask.java,run,@ override public void   (  )  {   future <  ?  >  future = null ;  try  {  future = executor . submit ( task )  ;  thread pool level gauge . set (  ( long ) executor . get active count (  )  )  ;  future . get ( timeout millis  time unit . milliseconds ),255,1,run,1,[]
2329,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\StatusChangeEvent.java, status change event,public   (  instance info .  instance status previous  instance info .  instance status current )  {  super (  )  ;  this . current = current ;  this . previous = previous ;   }  ,179,3,status,1,"[38, 81]"
2330,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\StatusChangeEvent.java, status change event,public   (  instance info .  instance status previous  instance info .  instance status current )  {  super (  )  ;  this . current = current ;  this . previous = previous ;   }  ,179,3,change,2,[]
2331,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\StatusChangeEvent.java, status change event,public   (  instance info .  instance status previous  instance info .  instance status current )  {  super (  )  ;  this . current = current ;  this . previous = previous ;   }  ,179,3,event,3,[]
2332,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\StatusChangeEvent.java,get previous status,public  instance info .  instance status   (  )  {  return previous ;   }  ,75,3,get,1,[]
2333,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\StatusChangeEvent.java,get previous status,public  instance info .  instance status   (  )  {  return previous ;   }  ,75,3,previous,2,[59]
2334,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\StatusChangeEvent.java,get previous status,public  instance info .  instance status   (  )  {  return previous ;   }  ,75,3,status,3,[34]
2335,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\StatusChangeEvent.java,get status,public  instance info .  instance status   (  )  {  return current ;   }  ,74,2,get,1,[]
2336,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\StatusChangeEvent.java,get status,public  instance info .  instance status   (  )  {  return current ;   }  ,74,2,status,2,[34]
2337,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\StatusChangeEvent.java,is up,public boolean   (  )  {  return this . current . equals (  instance info .  instance status . up )  ;   }  ,108,2,is,1,[35]
2338,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\StatusChangeEvent.java,is up,public boolean   (  )  {  return this . current . equals (  instance info .  instance status . up )  ;   }  ,108,2,up,2,[95]
2339,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\StatusChangeEvent.java,to string,"@ override public  string   (  )  {  return "" status change event [timestamp = ""  +  get timestamp (  )   +  ""  current = "" +  current +  ""  previous = "" +  previous +  ""]"" ;   }  ",180,2,to,1,[]
2340,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\StatusChangeEvent.java,to string,"@ override public  string   (  )  {  return "" status change event [timestamp = ""  +  get timestamp (  )   +  ""  current = "" +  current +  ""  previous = "" +  previous +  ""]"" ;   }  ",180,2,string,2,[19]
2341,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\DiscoveryBuildInfo.java, discovery build info,"  (  class <  ?  >  clazz )  {   manifest resolved manifest = null ;  try  {   string jar url = resolve jar url ( clazz )  ;  if  ( jar url  !  =  null )   {  resolved manifest = load manifest ( jar url )  ;   }   }  catch  (   throwable e )   {  logger . warn ( "" cannot load eureka - client manifest file ;  no build meta data are available"" e )  ;   }  this . manifest = resolved manifest ;   }  ",399,3,discovery,1,[]
2342,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\DiscoveryBuildInfo.java, discovery build info,"  (  class <  ?  >  clazz )  {   manifest resolved manifest = null ;  try  {   string jar url = resolve jar url ( clazz )  ;  if  ( jar url  !  =  null )   {  resolved manifest = load manifest ( jar url )  ;   }   }  catch  (   throwable e )   {  logger . warn ( "" cannot load eureka - client manifest file ;  no build meta data are available"" e )  ;   }  this . manifest = resolved manifest ;   }  ",399,3,build,2,[313]
2343,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\DiscoveryBuildInfo.java, discovery build info,"  (  class <  ?  >  clazz )  {   manifest resolved manifest = null ;  try  {   string jar url = resolve jar url ( clazz )  ;  if  ( jar url  !  =  null )   {  resolved manifest = load manifest ( jar url )  ;   }   }  catch  (   throwable e )   {  logger . warn ( "" cannot load eureka - client manifest file ;  no build meta data are available"" e )  ;   }  this . manifest = resolved manifest ;   }  ",399,3,info,3,[]
2344,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\DiscoveryBuildInfo.java,build version,public static  string   (  )  {  return instance . get build version (  )  ;   }  ,82,2,build,1,[55]
2345,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\DiscoveryBuildInfo.java,build version,public static  string   (  )  {  return instance . get build version (  )  ;   }  ,82,2,version,2,[61]
2346,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\DiscoveryBuildInfo.java,get build version," string   (  )  {  return get manifest attribute ( "" implementation -  version"" "" < version   unknown > "" )  ;   }  ",116,3,get,1,[26]
2347,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\DiscoveryBuildInfo.java,get build version," string   (  )  {  return get manifest attribute ( "" implementation -  version"" "" < version   unknown > "" )  ;   }  ",116,3,build,2,[]
2348,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\DiscoveryBuildInfo.java,get build version," string   (  )  {  return get manifest attribute ( "" implementation -  version"" "" < version   unknown > "" )  ;   }  ",116,3,version,3,"[71, 84]"
2349,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\DiscoveryBuildInfo.java,get manifest attribute, string   (  string name  string default value )  {  if  ( manifest  =  =  null )   {  return default value ;   }   name attr name = new  name ( name )  ;   object value = manifest . get main attributes (  )  . get ( attr name )  ;  return value  =  =  null  ?  default value : value . to string (  )  ;   }  ,309,3,get,1,"[183, 211]"
2350,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\DiscoveryBuildInfo.java,get manifest attribute, string   (  string name  string default value )  {  if  ( manifest  =  =  null )   {  return default value ;   }   name attr name = new  name ( name )  ;   object value = manifest . get main attributes (  )  . get ( attr name )  ;  return value  =  =  null  ?  default value : value . to string (  )  ;   }  ,309,3,manifest,2,"[59, 172]"
2351,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\DiscoveryBuildInfo.java,get manifest attribute, string   (  string name  string default value )  {  if  ( manifest  =  =  null )   {  return default value ;   }   name attr name = new  name ( name )  ;   object value = manifest . get main attributes (  )  . get ( attr name )  ;  return value  =  =  null  ?  default value : value . to string (  )  ;   }  ,309,3,attribute,3,[192]
2352,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\DiscoveryBuildInfo.java,load manifest,"private static  manifest   (  string jar url )  throws  exception  {   input stream is = new url ( jar url  +  "" !  / meta - inf / manifest . mf"" )  . open stream (  )  ;  try  {  return new  manifest ( is )  ;   }  finally  {  is . close (  )  ;   }   }  ",256,2,load,1,[]
2353,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\DiscoveryBuildInfo.java,load manifest,"private static  manifest   (  string jar url )  throws  exception  {   input stream is = new url ( jar url  +  "" !  / meta - inf / manifest . mf"" )  . open stream (  )  ;  try  {  return new  manifest ( is )  ;   }  finally  {  is . close (  )  ;   }   }  ",256,2,manifest,2,"[16, 131, 192]"
2354,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\DiscoveryBuildInfo.java,resolve jar url,"private static  string   (  class <  ?  >  clazz )  {  url location = clazz . get resource ( ' / '  +  clazz . get name (  )  . replace ( ' . ' ' / ' )   +  "" . class"" )  ;  if  ( location  !  =  null )   {   matcher matcher =  pattern . compile ( "" ( jar:file . * - [\\d . ] +  (  - rc[\\d] + | - snapshot )  ?  . jar )  !  . *$"" )  . matcher ( location . to string (  )  )  ;  if  ( matcher . matches (  )  )   {  return matcher . group ( 1 )  ;   }   }  return null ;   }  ",476,3,resolve,1,[]
2355,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\DiscoveryBuildInfo.java,resolve jar url,"private static  string   (  class <  ?  >  clazz )  {  url location = clazz . get resource ( ' / '  +  clazz . get name (  )  . replace ( ' . ' ' / ' )   +  "" . class"" )  ;  if  ( location  !  =  null )   {   matcher matcher =  pattern . compile ( "" ( jar:file . * - [\\d . ] +  (  - rc[\\d] + | - snapshot )  ?  . jar )  !  . *$"" )  . matcher ( location . to string (  )  )  ;  if  ( matcher . matches (  )  )   {  return matcher . group ( 1 )  ;   }   }  return null ;   }  ",476,3,jar,2,"[252, 315]"
2356,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\DiscoveryBuildInfo.java,resolve jar url,"private static  string   (  class <  ?  >  clazz )  {  url location = clazz . get resource ( ' / '  +  clazz . get name (  )  . replace ( ' . ' ' / ' )   +  "" . class"" )  ;  if  ( location  !  =  null )   {   matcher matcher =  pattern . compile ( "" ( jar:file . * - [\\d . ] +  (  - rc[\\d] + | - snapshot )  ?  . jar )  !  . *$"" )  . matcher ( location . to string (  )  )  ;  if  ( matcher . matches (  )  )   {  return matcher . group ( 1 )  ;   }   }  return null ;   }  ",476,3,url,3,[55]
2357,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\EurekaEntityComparators.java,equal,private static boolean   (  map <  string  string >  first  map <  string  string >  second )  {  if  ( first  =  =  second )   {  return true ;   }  if  ( first  =  =  null || first  =  =  null && second  !  =  null || first . size (  )   !  =  second . size (  )  )   {  return false ;   }  for  (   map .  entry <  string  string >  entry : first . entry set (  )  )   {  if  (  ! second . contains key ( entry . get key (  )  )  )   {  return false ;   }   string first value = entry . get value (  )  ;   string second value = second . get ( entry . get key (  )  )  ;  if  (  ! first value . equals ( second value )  )   {  return false ;   }   }  return true ;   }  ,673,1,equal,1,[598]
2358,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\EurekaEntityComparators.java,equal mini,public static boolean   (  instance info first  instance info second )  {  if  ( first  =  =  second )   {  return true ;   }  if  ( first  =  =  null || first  =  =  null && second  !  =  null )   {  return false ;   }  if  ( first . get port (  )   !  =  second . get port (  )  )   {  return false ;   }  if  ( first . get secure port (  )   !  =  second . get secure port (  )  )   {  return false ;   }  if  ( first . get action type (  )   !  =  second . get action type (  )  )   {  return false ;   }  if  ( first . get instance id (  )   !  =  null  ?   ! first . get instance id (  )  . equals ( second . get instance id (  )  )  : second . get instance id (  )   !  =  null )   {  return false ;   }  if  ( first . get app name (  )   !  =  null  ?   ! first . get app name (  )  . equals ( second . get app name (  )  )  : second . get app name (  )   !  =  null )   {  return false ;   }  if  ( first . getasg name (  )   !  =  null  ?   ! first . getasg name (  )  . equals ( second . getasg name (  )  )  : second . getasg name (  )   !  =  null )   {  return false ;   }  if  (  ! subset of ( first . get data center info (  )  second . get data center info (  )  )  )   {  return false ;   }  if  ( first . get host name (  )   !  =  null  ?   ! first . get host name (  )  . equals ( second . get host name (  )  )  : second . get host name (  )   !  =  null )   {  return false ;   }  if  ( first . getip addr (  )   !  =  null  ?   ! first . getip addr (  )  . equals ( second . getip addr (  )  )  : second . getip addr (  )   !  =  null )   {  return false ;   }  if  ( first . getvip address (  )   !  =  null  ?   ! first . getvip address (  )  . equals ( second . getvip address (  )  )  : second . getvip address (  )   !  =  null )   {  return false ;   }  if  ( first . get secure vip address (  )   !  =  null  ?   ! first . get secure vip address (  )  . equals ( second . get secure vip address (  )  )  : second . get secure vip address (  )   !  =  null )   {  return false ;   }  if  ( first . get status (  )   !  =  null  ?   ! first . get status (  )  . equals ( second . get status (  )  )  : second . get status (  )   !  =  null )   {  return false ;   }  if  ( first . get last updated timestamp (  )   !  =  second . get last updated timestamp (  )  )   {  return false ;   }  return true ;   }  ,2338,2,equal,1,"[597, 793, 981, 1293, 1481, 1671, 1885, 2091]"
2359,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\EurekaEntityComparators.java,equal mini,public static boolean   (  instance info first  instance info second )  {  if  ( first  =  =  second )   {  return true ;   }  if  ( first  =  =  null || first  =  =  null && second  !  =  null )   {  return false ;   }  if  ( first . get port (  )   !  =  second . get port (  )  )   {  return false ;   }  if  ( first . get secure port (  )   !  =  second . get secure port (  )  )   {  return false ;   }  if  ( first . get action type (  )   !  =  second . get action type (  )  )   {  return false ;   }  if  ( first . get instance id (  )   !  =  null  ?   ! first . get instance id (  )  . equals ( second . get instance id (  )  )  : second . get instance id (  )   !  =  null )   {  return false ;   }  if  ( first . get app name (  )   !  =  null  ?   ! first . get app name (  )  . equals ( second . get app name (  )  )  : second . get app name (  )   !  =  null )   {  return false ;   }  if  ( first . getasg name (  )   !  =  null  ?   ! first . getasg name (  )  . equals ( second . getasg name (  )  )  : second . getasg name (  )   !  =  null )   {  return false ;   }  if  (  ! subset of ( first . get data center info (  )  second . get data center info (  )  )  )   {  return false ;   }  if  ( first . get host name (  )   !  =  null  ?   ! first . get host name (  )  . equals ( second . get host name (  )  )  : second . get host name (  )   !  =  null )   {  return false ;   }  if  ( first . getip addr (  )   !  =  null  ?   ! first . getip addr (  )  . equals ( second . getip addr (  )  )  : second . getip addr (  )   !  =  null )   {  return false ;   }  if  ( first . getvip address (  )   !  =  null  ?   ! first . getvip address (  )  . equals ( second . getvip address (  )  )  : second . getvip address (  )   !  =  null )   {  return false ;   }  if  ( first . get secure vip address (  )   !  =  null  ?   ! first . get secure vip address (  )  . equals ( second . get secure vip address (  )  )  : second . get secure vip address (  )   !  =  null )   {  return false ;   }  if  ( first . get status (  )   !  =  null  ?   ! first . get status (  )  . equals ( second . get status (  )  )  : second . get status (  )   !  =  null )   {  return false ;   }  if  ( first . get last updated timestamp (  )   !  =  second . get last updated timestamp (  )  )   {  return false ;   }  return true ;   }  ,2338,2,mini,2,[]
2360,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\EurekaEntityComparators.java,equals,@ override public boolean   (  instance info first  instance info second )  {  return first . get id (  )   !  =  null  ?  first . get id (  )  . equals ( second . get id (  )  )  : second . get id (  )   =  =  null ;   }  ,223,1,equals,1,[146]
2361,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\EurekaEntityComparators.java,id equal,private static boolean   (  instance info first  instance info second )  {  return first . get id (  )  . equals ( second . get id (  )  )  ;   }  ,147,2,id,1,"[95, 128]"
2362,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\EurekaEntityComparators.java,id equal,private static boolean   (  instance info first  instance info second )  {  return first . get id (  )  . equals ( second . get id (  )  )  ;   }  ,147,2,equal,2,[106]
2363,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\EurekaEntityComparators.java,subset of,public static boolean   (  amazon info first  amazon info second )  {  if  ( first  =  =  second )   {  return true ;   }  if  ( first  =  =  null || first  =  =  null && second  !  =  null )   {  return false ;   }  return first . get metadata (  )  . entry set (  )  . contains all ( second . get metadata (  )  . entry set (  )  )  ;   }  ,342,2,subset,1,[]
2364,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\EurekaEntityComparators.java,subset of,public static boolean   (  amazon info first  amazon info second )  {  if  ( first  =  =  second )   {  return true ;   }  if  ( first  =  =  null || first  =  =  null && second  !  =  null )   {  return false ;   }  return first . get metadata (  )  . entry set (  )  . contains all ( second . get metadata (  )  . entry set (  )  )  ;   }  ,342,2,of,2,[]
2365,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\DeserializerStringCache.java, array char buffer,  (  json parser source  supplier <  string >  value transform )  throws io exception  {  this ( source )  ;  this . value transform = value transform ;   }  ,158,3,array,1,[]
2366,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\DeserializerStringCache.java, array char buffer,  (  json parser source  supplier <  string >  value transform )  throws io exception  {  this ( source )  ;  this . value transform = value transform ;   }  ,158,3,char,2,[]
2367,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\DeserializerStringCache.java, array char buffer,  (  json parser source  supplier <  string >  value transform )  throws io exception  {  this ( source )  ;  this . value transform = value transform ;   }  ,158,3,buffer,3,[]
2368,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\DeserializerStringCache.java, deserializer string cache,private   (  map <  char buffer  string >  global cache  map <  char buffer  string >  application cache )  {  this . global cache = global cache ;  this . application cache = application cache ;   }  ,201,3,deserializer,1,[]
2369,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\DeserializerStringCache.java, deserializer string cache,private   (  map <  char buffer  string >  global cache  map <  char buffer  string >  application cache )  {  this . global cache = global cache ;  this . application cache = application cache ;   }  ,201,3,string,2,"[33, 77]"
2370,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\DeserializerStringCache.java, deserializer string cache,private   (  map <  char buffer  string >  global cache  map <  char buffer  string >  application cache )  {  this . global cache = global cache ;  this . application cache = application cache ;   }  ,201,3,cache,3,"[50, 99, 125, 140, 168, 188]"
2371,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\DeserializerStringCache.java, string char buffer,  (  string source )  {  this . source = source ;   }  ,55,3,string,1,[5]
2372,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\DeserializerStringCache.java, string char buffer,  (  string source )  {  this . source = source ;   }  ,55,3,char,2,[]
2373,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\DeserializerStringCache.java, string char buffer,  (  string source )  {  this . source = source ;   }  ,55,3,buffer,3,[]
2374,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\DeserializerStringCache.java,apply,"public  string   ( final  string string value  cache scope cache scope )  {  if  ( string value  !  =  null &&  ( length limit  <  0 || string value . length (  )   <  =  length limit )  )   {  return  (  string )  ( cache scope  =  =   cache scope . global   scope  ?  global cache : application cache )  . compute if absent (  char buffer . wrap ( string value )  s  -  >   {  logger . trace ( ""  ( string )  writing new interned value  {  }  into  {  }  cache scope"" string value cache scope )  ;  return string value ;   }   )  ;   }  return string value ;   }  ",566,1,apply,1,[]
2375,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\DeserializerStringCache.java,array hash,private static int   ( char[] a int offset int length )  {  if  ( a  =  =  null )  return 0 ;  int result = 0 ;  int limit = offset  +  length ;  for  ( int i = offset ;  i  <  limit ;  i +  +  )   {  result = 31 * result  +  a[i] ;   }  return result ;   }  ,259,2,array,1,[]
2376,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\DeserializerStringCache.java,array hash,private static int   ( char[] a int offset int length )  {  if  ( a  =  =  null )  return 0 ;  int result = 0 ;  int limit = offset  +  length ;  for  ( int i = offset ;  i  <  limit ;  i +  +  )   {  result = 31 * result  +  a[i] ;   }  return result ;   }  ,259,2,hash,2,[]
2377,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\DeserializerStringCache.java,chars,@ override public  of int   (  )  {  return new  of int (  )  {  int index ;  @ override public boolean has next (  )  {  return index  <  source . length (  )  ;   }  @ override public int next int (  )  {  return source . char at ( index +  +  )  ;   } ,255,1,chars,1,[]
2378,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\DeserializerStringCache.java,clear,"public static void   (  deserialization context context  cache scope scope )  {  with cache ( context cache  -  >   {  if  ( scope  =  =   cache scope . global   scope )   {  if  ( debug log enabled )  logger . debug ( ""clearing global - level serialization cache with size  {  } "" cache . global cache . size (  )  )  ;  cache . global cache . clear (  )  ;   }  if  ( debug log enabled )  logger . debug ( ""clearing app - level serialization cache with size  {  } "" cache . application cache . size (  )  )  ;  cache . application cache . clear (  )  ;  return null ;   }   )  ;   }  ",586,1,clear,1,"[220, 345, 409, 541]"
2379,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\DeserializerStringCache.java,consume,@ override public  string   (  bi consumer <  char buffer  string >  value consumer )  {  value consumer . accept ( this source )  ;  return source ;   }  ,155,1,consume,1,"[34, 75, 96]"
2380,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\DeserializerStringCache.java,equals,@ override public boolean   (  object other )  {  if  ( other instanceof  char buffer )   {   char buffer other buffer =  (  char buffer ) other ;  int length = source . length (  )  ;  if  ( other buffer . length (  )   =  =  length )   {   of int other ,255,1,equals,1,[]
2381,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\DeserializerStringCache.java,from,public static  deserializer string cache   (  deserialization context context )  {  return with cache ( context cache  -  >   {  if  ( cache  =  =  null )   {  cache = new  deserializer string cache ( new  hash map <  char buffer  string >  (  )  new  hash map <  char buffer  string >  (  )  )  ;   }  return cache ;   }   )  ;   }  ,334,1,from,1,[]
2382,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\DeserializerStringCache.java,has next,@ override public boolean   (  )  {  return index  <  source . length (  )  ;   }  ,83,2,has,1,[]
2383,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\DeserializerStringCache.java,has next,@ override public boolean   (  )  {  return index  <  source . length (  )  ;   }  ,83,2,next,2,[]
2384,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\DeserializerStringCache.java,hash code,@ override public int   (  )  {  return source . hash code (  )  ;   }  ,72,2,hash,1,[49]
2385,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\DeserializerStringCache.java,hash code,@ override public int   (  )  {  return source . hash code (  )  ;   }  ,72,2,code,2,[54]
2386,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\DeserializerStringCache.java,init,public static  object reader   (  object reader reader  deserialization context context )  {  return with cache ( context cache  -  >   {  if  ( cache  =  =  null )  throw new  illegal state exception (  )  ;  return reader . with attribute ( attr   string   cache cache )  ;   }   )  ;   }  ,292,1,init,1,[]
2387,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\DeserializerStringCache.java,init reader,public  object reader   (  object reader reader )  {  return reader . with attribute ( attr   string   cache this )  ;   }  ,124,2,init,1,[]
2388,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\DeserializerStringCache.java,init reader,public  object reader   (  object reader reader )  {  return reader . with attribute ( attr   string   cache this )  ;   }  ,124,2,reader,2,"[15, 34, 41, 61]"
2389,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\DeserializerStringCache.java,length,@ override public int   (  )  {  return source . length (  )  ;   }  ,69,1,length,1,[49]
2390,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\DeserializerStringCache.java,next int,@ override public int   (  )  {  return source . char at ( index +  +  )  ;   }  ,81,2,next,1,[]
2391,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\DeserializerStringCache.java,next int,@ override public int   (  )  {  return source . char at ( index +  +  )  ;   }  ,81,2,int,2,[18]
2392,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\DeserializerStringCache.java,remove eldest entry,@ override protected boolean   (  entry <  char buffer  string >  eldest )  {  return size (  )   >  lru   limit ;   }  ,120,3,remove,1,[]
2393,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\DeserializerStringCache.java,remove eldest entry,@ override protected boolean   (  entry <  char buffer  string >  eldest )  {  return size (  )   >  lru   limit ;   }  ,120,3,eldest,2,[66]
2394,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\DeserializerStringCache.java,remove eldest entry,@ override protected boolean   (  entry <  char buffer  string >  eldest )  {  return size (  )   >  lru   limit ;   }  ,120,3,entry,3,[34]
2395,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\DeserializerStringCache.java,size,public int   (  )  {  return global cache . size (  )   +  application cache . size (  )  ;   }  ,97,1,size,1,"[44, 79]"
2396,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\DeserializerStringCache.java,to string,@ override public  string   (  )  {  return source ;   }  ,58,2,to,1,[]
2397,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\DeserializerStringCache.java,to string,@ override public  string   (  )  {  return source ;   }  ,58,2,string,2,[19]
2398,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\DeserializerStringCache.java,with cache,private static  < t > t   (  object reader reader  function <  deserializer string cache t >  consumer )  {   deserializer string cache cache =  (  deserializer string cache ) reader . get attributes (  )  . get attribute ( attr   string   cache )  ;  return consumer . apply ( cache )  ;   }  ,294,2,with,1,[]
2399,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\DeserializerStringCache.java,with cache,private static  < t > t   (  object reader reader  function <  deserializer string cache t >  consumer )  {   deserializer string cache cache =  (  deserializer string cache ) reader . get attributes (  )  . get attribute ( attr   string   cache )  ;  return consumer . apply ( cache )  ;   }  ,294,2,cache,2,"[83, 130, 136, 168, 240, 278]"
2400,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\DeserializerStringCache.java,wrap,public static  char buffer   (  string source )  {  return new  string char buffer ( source )  ;   }  ,102,1,wrap,1,[]
2401,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\EurekaEntityFunctions.java,comparator by app name and id,public static  comparator <  instance info >    (  )  {  return instance   app   id   comparator ;   }  ,104,6,comparator,1,"[15, 86]"
2402,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\EurekaEntityFunctions.java,comparator by app name and id,public static  comparator <  instance info >    (  )  {  return instance   app   id   comparator ;   }  ,104,6,by,2,[]
2403,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\EurekaEntityFunctions.java,comparator by app name and id,public static  comparator <  instance info >    (  )  {  return instance   app   id   comparator ;   }  ,104,6,app,3,[75]
2404,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\EurekaEntityFunctions.java,comparator by app name and id,public static  comparator <  instance info >    (  )  {  return instance   app   id   comparator ;   }  ,104,6,name,4,[]
2405,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\EurekaEntityFunctions.java,comparator by app name and id,public static  comparator <  instance info >    (  )  {  return instance   app   id   comparator ;   }  ,104,6,and,5,[]
2406,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\EurekaEntityFunctions.java,comparator by app name and id,public static  comparator <  instance info >    (  )  {  return instance   app   id   comparator ;   }  ,104,6,id,6,[81]
2407,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\EurekaEntityFunctions.java,compare,@ override public int   (  instance info o1  instance info o2 )  {  int ac = compare strings ( o1 . get app name (  )  o2 . get app name (  )  )  ;  if  ( ac  !  =  0 )   {  return ac ;   }  return compare strings ( o1 . get id (  )  o2 . get id (  )  )  ,255,1,compare,1,"[77, 198]"
2408,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\EurekaEntityFunctions.java,compare strings,private int   (  string s1  string s2 )  {  if  ( s1  =  =  null )   {  if  ( s2  !  =  null )   {  return  - 1 ;   }   }  if  ( s2  =  =  null )   {  return 1 ;   }  return s1 . compare to ( s2 )  ;   }  ,205,2,compare,1,[179]
2409,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\EurekaEntityFunctions.java,compare strings,private int   (  string s1  string s2 )  {  if  ( s1  =  =  null )   {  if  ( s2  !  =  null )   {  return  - 1 ;   }   }  if  ( s2  =  =  null )   {  return 1 ;   }  return s1 . compare to ( s2 )  ;   }  ,205,2,strings,2,[]
2410,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\EurekaEntityFunctions.java,copy application,public static void   (  application source  application result )  {  if  ( source  !  =  null )   {  for  (   instance info instance : source . get instances (  )  )   {  result . add instance ( instance )  ;   }   }   }  ,222,2,copy,1,[]
2411,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\EurekaEntityFunctions.java,copy application,public static void   (  application source  application result )  {  if  ( source  !  =  null )   {  for  (   instance info instance : source . get instances (  )  )   {  result . add instance ( instance )  ;   }   }   }  ,222,2,application,2,"[24, 44]"
2412,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\EurekaEntityFunctions.java,copy applications,public static void   (  applications source  applications result )  {  if  ( source  !  =  null )   {  for  (   application app : source . get registered applications (  )  )   {  result . add application ( new  application ( app . get name (  )  app . get instances (  )  )  )  ;   }   }   }  ,294,2,copy,1,[]
2413,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\EurekaEntityFunctions.java,copy applications,public static void   (  applications source  applications result )  {  if  ( source  !  =  null )   {  for  (   application app : source . get registered applications (  )  )   {  result . add application ( new  application ( app . get name (  )  app . get instances (  )  )  )  ;   }   }   }  ,294,2,applications,2,"[24, 45, 154]"
2414,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\EurekaEntityFunctions.java,copy instance,public static  instance info   (  instance info original  action type action type )  {   instance info copy = new  instance info ( original )  ;  copy . set action type ( action type )  ;  return copy ;   }  ,208,2,copy,1,"[103, 146, 196]"
2415,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\EurekaEntityFunctions.java,copy instance,public static  instance info   (  instance info original  action type action type )  {   instance info copy = new  instance info ( original )  ;  copy . set action type ( action type )  ;  return copy ;   }  ,208,2,instance,2,"[15, 34, 89, 115]"
2416,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\EurekaEntityFunctions.java,copy instances,public static  collection <  instance info >    (  collection <  instance info >  instances  action type action type )  {   list <  instance info >  result = new  array list <  >  (  )  ;  for  (   instance info instance : instances )   {  result . add ( copy instance ( instance action type )  )  ;   }  return result ;   }  ,326,2,copy,1,[255]
2417,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\EurekaEntityFunctions.java,copy instances,public static  collection <  instance info >    (  collection <  instance info >  instances  action type action type )  {   list <  instance info >  result = new  array list <  >  (  )  ;  for  (   instance info instance : instances )   {  result . add ( copy instance ( instance action type )  )  ;   }  return result ;   }  ,326,2,instances,2,"[82, 223]"
2418,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\EurekaEntityFunctions.java,count instances,public static int   (  applications applications )  {  int count = 0 ;  for  (   application application : applications . get registered applications (  )  )   {  count +  = application . get instances (  )  . size (  )  ;   }  return count ;   }  ,248,2,count,1,"[59, 163, 235]"
2419,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\EurekaEntityFunctions.java,count instances,public static int   (  applications applications )  {  int count = 0 ;  for  (   application application : applications . get registered applications (  )  )   {  count +  = application . get instances (  )  . size (  )  ;   }  return count ;   }  ,248,2,instances,2,[192]
2420,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\EurekaEntityFunctions.java,deep copy application,public static  application   (  application source )  {   application result = new  application ( source . get name (  )  )  ;  deep copy application ( source result  eureka entity transformers .  <  instance info > identity (  )  )  ;  return result ;   }  ,258,3,deep,1,[128]
2421,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\EurekaEntityFunctions.java,deep copy application,public static  application   (  application source )  {   application result = new  application ( source . get name (  )  )  ;  deep copy application ( source result  eureka entity transformers .  <  instance info > identity (  )  )  ;  return result ;   }  ,258,3,copy,2,[133]
2422,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\EurekaEntityFunctions.java,deep copy application,public static  application   (  application source )  {   application result = new  application ( source . get name (  )  )  ;  deep copy application ( source result  eureka entity transformers .  <  instance info > identity (  )  )  ;  return result ;   }  ,258,3,application,3,"[15, 32, 58, 84, 138]"
2423,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\EurekaEntityFunctions.java,deep copy applications,public static  applications   (  applications source )  {   applications result = new  applications (  )  ;  for  (   application application : source . get registered applications (  )  )   {  result . add application ( deep copy application ( application )  )  ;   }  return update meta ( result )  ;   }  ,308,3,deep,1,[221]
2424,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\EurekaEntityFunctions.java,deep copy applications,public static  applications   (  applications source )  {   applications result = new  applications (  )  ;  for  (   application application : source . get registered applications (  )  )   {  result . add application ( deep copy application ( application )  )  ;   }  return update meta ( result )  ;   }  ,308,3,copy,2,[226]
2425,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\EurekaEntityFunctions.java,deep copy applications,public static  applications   (  applications source )  {   applications result = new  applications (  )  ;  for  (   application application : source . get registered applications (  )  )   {  result . add application ( deep copy application ( application )  )  ;   }  return update meta ( result )  ;   }  ,308,3,applications,3,"[15, 33, 60, 87, 168]"
2426,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\EurekaEntityFunctions.java,merge application,"public static  application   (  application first  application second )  {  if  (  ! first . get name (  )  . equals ( second . get name (  )  )  )   {  throw new  illegal argument exception ( "" cannot merge applications with different names"" )  ;   }   application merged = copy application ( first )  ;  for  (   instance info instance : second . get instances (  )  )   {  switch  ( instance . get action type (  )  )   {  case added: case modified: merged . add instance ( instance )  ;  break ;  case deleted: merged . remove instance ( instance )  ;   }   }  return merged ;   }  ",586,2,merge,1,"[202, 266, 453, 515, 572]"
2427,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\EurekaEntityFunctions.java,merge application,"public static  application   (  application first  application second )  {  if  (  ! first . get name (  )  . equals ( second . get name (  )  )  )   {  throw new  illegal argument exception ( "" cannot merge applications with different names"" )  ;   }   application merged = copy application ( first )  ;  for  (   instance info instance : second . get instances (  )  )   {  switch  ( instance . get action type (  )  )   {  case added: case modified: merged . add instance ( instance )  ;  break ;  case deleted: merged . remove instance ( instance )  ;   }   }  return merged ;   }  ",586,2,application,2,"[15, 32, 51, 208, 254, 280]"
2428,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\EurekaEntityFunctions.java,merge applications,public static  applications   (  applications first  applications second )  {   set <  string >  first names = select application names ( first )  ;   set <  string >  second names = select application names ( second )  ;   set <  string >  all names = new  hash set <  string >  ( first names )  ;  all names . add all ( second names )  ;   applications merged = new  applications (  )  ;  for  (   string app name : all names )   {  if  ( first names . contains ( app name )  )   {  if  ( second names . contains ( app name )  )   {  merged . add application ( merge application ( first . get registered applications ( app name )  second . get registered applications ( app name )  )  )  ;   }  else  {  merged . add application ( copy application ( first . get registered applications ( app name )  )  )  ;   }   }  else  {  merged . add application ( copy application ( second . get registered applications ( app name )  )  )  ;   }   }  return update meta ( merged )  ;   }  ,980,2,merge,1,"[355, 536, 563, 706, 828, 963]"
2429,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\EurekaEntityFunctions.java,merge applications,public static  applications   (  applications first  applications second )  {   set <  string >  first names = select application names ( first )  ;   set <  string >  second names = select application names ( second )  ;   set <  string >  all names = new  hash set <  string >  ( first names )  ;  all names . add all ( second names )  ;   applications merged = new  applications (  )  ;  for  (   string app name : all names )   {  if  ( first names . contains ( app name )  )   {  if  ( second names . contains ( app name )  )   {  merged . add application ( merge application ( first . get registered applications ( app name )  second . get registered applications ( app name )  )  )  ;   }  else  {  merged . add application ( copy application ( first . get registered applications ( app name )  )  )  ;   }   }  else  {  merged . add application ( copy application ( second . get registered applications ( app name )  )  )  ;   }   }  return update meta ( merged )  ;   }  ,980,2,applications,2,"[15, 33, 53, 342, 369, 606, 657, 775, 898]"
2430,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\EurekaEntityFunctions.java,select all,public static  collection <  instance info >    (  applications applications )  {   list <  instance info >  all = new  array list <  >  (  )  ;  for  (   application a : applications . get registered applications (  )  )   {  all . add all ( a . get instances (  )  )  ;   }  return all ;   }  ,295,2,select,1,[]
2431,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\EurekaEntityFunctions.java,select all,public static  collection <  instance info >    (  applications applications )  {   list <  instance info >  all = new  array list <  >  (  )  ;  for  (   application a : applications . get registered applications (  )  )   {  all . add all ( a . get instances (  )  )  ;   }  return all ;   }  ,295,2,all,2,"[109, 227, 237, 284]"
2432,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\EurekaEntityFunctions.java,select application names,public static  set <  string >    (  applications applications )  {   set <  string >  result = new  hash set <  >  (  )  ;  for  (   application app : applications . get registered applications (  )  )   {  result . add ( app . get name (  )  )  ;   }  return result ;   }  ,275,3,select,1,[]
2433,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\EurekaEntityFunctions.java,select application names,public static  set <  string >    (  applications applications )  {   set <  string >  result = new  hash set <  >  (  )  ;  for  (   application app : applications . get registered applications (  )  )   {  result . add ( app . get name (  )  )  ;   }  return result ;   }  ,275,3,application,2,"[37, 50, 134, 152, 182]"
2434,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\EurekaEntityFunctions.java,select application names,public static  set <  string >    (  applications applications )  {   set <  string >  result = new  hash set <  >  (  )  ;  for  (   application app : applications . get registered applications (  )  )   {  result . add ( app . get name (  )  )  ;   }  return result ;   }  ,275,3,names,3,[]
2435,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\EurekaEntityFunctions.java,select instance,public static  instance info   (  applications applications  string app name  string id )  {   application application = applications . get registered applications ( app name )  ;  if  ( application  !  =  null )   {  for  (   instance info instance : application . get instances (  )  )   {  if  ( instance . get id (  )  . equals ( id )  )   {  return instance ;   }   }   }  return null ;   }  ,397,2,select,1,[]
2436,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\EurekaEntityFunctions.java,select instance,public static  instance info   (  applications applications  string app name  string id )  {   application application = applications . get registered applications ( app name )  ;  if  ( application  !  =  null )   {  for  (   instance info instance : application . get instances (  )  )   {  if  ( instance . get id (  )  . equals ( id )  )   {  return instance ;   }   }   }  return null ;   }  ,397,2,instance,2,"[15, 227, 241, 270, 299, 354]"
2437,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\EurekaEntityFunctions.java,select instances mapped by id,public static  map <  string  instance info >    (  application application )  {   map <  string  instance info >  result = new  hash map <  >  (  )  ;  for  (   instance info instance : application . get instances (  )  )   {  result . put ( instance . get id (  )  instance )  ;   }  return result ;   }  ,307,5,select,1,[]
2438,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\EurekaEntityFunctions.java,select instances mapped by id,public static  map <  string  instance info >    (  application application )  {   map <  string  instance info >  result = new  hash map <  >  (  )  ;  for  (   instance info instance : application . get instances (  )  )   {  result . put ( instance . get id (  )  instance )  ;   }  return result ;   }  ,307,5,instances,2,[205]
2439,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\EurekaEntityFunctions.java,select instances mapped by id,public static  map <  string  instance info >    (  application application )  {   map <  string  instance info >  result = new  hash map <  >  (  )  ;  for  (   instance info instance : application . get instances (  )  )   {  result . put ( instance . get id (  )  instance )  ;   }  return result ;   }  ,307,5,mapped,3,[]
2440,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\EurekaEntityFunctions.java,select instances mapped by id,public static  map <  string  instance info >    (  application application )  {   map <  string  instance info >  result = new  hash map <  >  (  )  ;  for  (   instance info instance : application . get instances (  )  )   {  result . put ( instance . get id (  )  instance )  ;   }  return result ;   }  ,307,5,by,4,[]
2441,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\EurekaEntityFunctions.java,select instances mapped by id,public static  map <  string  instance info >    (  application application )  {   map <  string  instance info >  result = new  hash map <  >  (  )  ;  for  (   instance info instance : application . get instances (  )  )   {  result . put ( instance . get id (  )  instance )  ;   }  return result ;   }  ,307,5,id,5,[258]
2442,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\EurekaEntityFunctions.java,take first,public static  instance info   (  applications applications )  {  for  (   application application : applications . get registered applications (  )  )   {  if  (  ! application . get instances (  )  . is empty (  )  )   {  return application . get instances (  )  . get ( 0 )  ;   }   }  return null ;   }  ,308,2,take,1,[]
2443,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\EurekaEntityFunctions.java,take first,public static  instance info   (  applications applications )  {  for  (   application application : applications . get registered applications (  )  )   {  if  (  ! application . get instances (  )  . is empty (  )  )   {  return application . get instances (  )  . get ( 0 )  ;   }   }  return null ;   }  ,308,2,first,2,[]
2444,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\EurekaEntityFunctions.java,to application map,public static  map <  string  application >    (  list <  instance info >  instances )  {   map <  string  application >  application map = new  hash map <  string  application >  (  )  ;  for  (   instance info instance : instances )   {   string app name = instance . get app name (  )  ;   application application = application map . get ( app name )  ;  if  ( application  =  =  null )   {  application map . put ( app name application = new  application ( app name )  )  ;   }  application . add instance ( instance )  ;   }  return application map ;   }  ,561,3,to,1,[]
2445,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\EurekaEntityFunctions.java,to application map,public static  map <  string  application >    (  list <  instance info >  instances )  {   map <  string  application >  application map = new  hash map <  string  application >  (  )  ;  for  (   instance info instance : instances )   {   string app name = instance . get app name (  )  ;   application application = application map . get ( app name )  ;  if  ( application  =  =  null )   {  application map . put ( app name application = new  application ( app name )  )  ;   }  application . add instance ( instance )  ;   }  return application map ;   }  ,561,3,application,2,"[30, 107, 122, 165, 293, 305, 319, 364, 395, 428, 447, 483, 538]"
2446,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\EurekaEntityFunctions.java,to application map,public static  map <  string  application >    (  list <  instance info >  instances )  {   map <  string  application >  application map = new  hash map <  string  application >  (  )  ;  for  (   instance info instance : instances )   {   string app name = instance . get app name (  )  ;   application application = application map . get ( app name )  ;  if  ( application  =  =  null )   {  application map . put ( app name application = new  application ( app name )  )  ;   }  application . add instance ( instance )  ;   }  return application map ;   }  ,561,3,map,3,"[15, 92, 134, 150, 331, 407, 550]"
2447,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\EurekaEntityFunctions.java,to applications,public static  applications   (  list <  instance info >  instances )  {   applications result = new  applications (  )  ;  for  (   instance info instance : instances )   {   application app = result . get registered applications ( instance . get app name (  )  )  ;  if  ( app  =  =  null )   {  app = new  application ( instance . get app name (  )  )  ;  result . add application ( app )  ;   }  app . add instance ( instance )  ;   }  return update meta ( result )  ;   }  ,478,2,to,1,[]
2448,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\EurekaEntityFunctions.java,to applications,public static  applications   (  list <  instance info >  instances )  {   applications result = new  applications (  )  ;  for  (   instance info instance : instances )   {   application app = result . get registered applications ( instance . get app name (  )  )  ;  if  ( app  =  =  null )   {  app = new  application ( instance . get app name (  )  )  ;  result . add application ( app )  ;   }  app . add instance ( instance )  ;   }  return update meta ( result )  ;   }  ,478,2,applications,2,"[15, 75, 102, 218]"
2449,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\EurekaEntityFunctions.java,update meta,public static  applications   (  applications applications )  {  applications . set version ( 1l )  ;  applications . set apps hash code ( applications . get reconcile hash code (  )  )  ;  return applications ;   }  ,217,2,update,1,[]
2450,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\EurekaEntityFunctions.java,update meta,public static  applications   (  applications applications )  {  applications . set version ( 1l )  ;  applications . set apps hash code ( applications . get reconcile hash code (  )  )  ;  return applications ;   }  ,217,2,meta,2,[]
2451,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\EurekaEntityTransformers.java,action type setter,"public static  transformer <  instance info >    (  action type action type )  {  switch  ( action type )   {  case added: return add   action   setter   transformer ;  case modified: return modified   action   setter   transformer ;  case deleted: return deleted   action   setter   transformer ;   }  throw new  illegal state exception ( "" unhandled  action type value ""  +  action type )  ;   }  ",399,3,action,1,"[52, 64, 92, 136, 202, 266, 353, 377]"
2452,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\EurekaEntityTransformers.java,action type setter,"public static  transformer <  instance info >    (  action type action type )  {  switch  ( action type )   {  case added: return add   action   setter   transformer ;  case modified: return modified   action   setter   transformer ;  case deleted: return deleted   action   setter   transformer ;   }  throw new  illegal state exception ( "" unhandled  action type value ""  +  action type )  ;   }  ",399,3,type,2,"[59, 71, 99, 360, 384]"
2453,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\EurekaEntityTransformers.java,action type setter,"public static  transformer <  instance info >    (  action type action type )  {  switch  ( action type )   {  case added: return add   action   setter   transformer ;  case modified: return modified   action   setter   transformer ;  case deleted: return deleted   action   setter   transformer ;   }  throw new  illegal state exception ( "" unhandled  action type value ""  +  action type )  ;   }  ",399,3,setter,3,"[145, 211, 275]"
2454,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\EurekaEntityTransformers.java,apply,@ override public  instance info   (  instance info instance )  {   instance info copy = new  instance info ( instance )  ;  copy . set action type (  action type . deleted )  ;  return copy ;   }  ,198,1,apply,1,[]
2455,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\EurekaEntityTransformers.java,identity,public static  < t >  transformer < t >    (  )  {  return  (  transformer < t >  ) identity   transformer ;   }  ,114,1,identity,1,[84]
2456,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\ExceptionsMetric.java, exceptions metric,public   (  string name )  {  this . name = name ;   }  ,56,2,exceptions,1,[]
2457,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\ExceptionsMetric.java, exceptions metric,public   (  string name )  {  this . name = name ;   }  ,56,2,metric,2,[]
2458,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\ExceptionsMetric.java,count,public void   (  throwable ex )  {  get or create counter ( extract name ( ex )  )  . increment (  )  ;   }  ,109,1,count,1,[50]
2459,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\ExceptionsMetric.java,extract name,private static  string   (  throwable ex )  {   throwable cause = ex ;  while  ( cause . get cause (  )   !  =  null )   {  cause = cause . get cause (  )  ;   }  return cause . get class (  )  . get simple name (  )  ;   }  ,225,2,extract,1,[]
2460,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\ExceptionsMetric.java,extract name,private static  string   (  throwable ex )  {   throwable cause = ex ;  while  ( cause . get cause (  )   !  =  null )   {  cause = cause . get cause (  )  ;   }  return cause . get class (  )  . get simple name (  )  ;   }  ,225,2,name,2,[207]
2461,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\ExceptionsMetric.java,get or create counter,"private  counter   (  string exception name )  {   counter counter = exception counters . get ( exception name )  ;  if  ( counter  =  =  null )   {  counter = new  basic counter (  monitor config . builder ( name )  . with tag ( ""id"" exception name )  . build (  )  )  ;  if  ( exception counters . put if absent ( exception name counter )   =  =  null )   {   default monitor registry . get instance (  )  . register ( counter )  ;   }  else  {  counter = exception counters . get ( exception name )  ;   }   }  return counter ;   }  ",536,4,get,1,"[90, 389, 479]"
2462,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\ExceptionsMetric.java,get or create counter,"private  counter   (  string exception name )  {   counter counter = exception counters . get ( exception name )  ;  if  ( counter  =  =  null )   {  counter = new  basic counter (  monitor config . builder ( name )  . with tag ( ""id"" exception name )  . build (  )  )  ;  if  ( exception counters . put if absent ( exception name counter )   =  =  null )   {   default monitor registry . get instance (  )  . register ( counter )  ;   }  else  {  counter = exception counters . get ( exception name )  ;   }   }  return counter ;   }  ",536,4,or,2,"[187, 375]"
2463,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\ExceptionsMetric.java,get or create counter,"private  counter   (  string exception name )  {   counter counter = exception counters . get ( exception name )  ;  if  ( counter  =  =  null )   {  counter = new  basic counter (  monitor config . builder ( name )  . with tag ( ""id"" exception name )  . build (  )  )  ;  if  ( exception counters . put if absent ( exception name counter )   =  =  null )   {   default monitor registry . get instance (  )  . register ( counter )  ;   }  else  {  counter = exception counters . get ( exception name )  ;   }   }  return counter ;   }  ",536,4,create,3,[]
2464,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\ExceptionsMetric.java,get or create counter,"private  counter   (  string exception name )  {   counter counter = exception counters . get ( exception name )  ;  if  ( counter  =  =  null )   {  counter = new  basic counter (  monitor config . builder ( name )  . with tag ( ""id"" exception name )  . build (  )  )  ;  if  ( exception counters . put if absent ( exception name counter )   =  =  null )   {   default monitor registry . get instance (  )  . register ( counter )  ;   }  else  {  counter = exception counters . get ( exception name )  ;   }   }  return counter ;   }  ",536,4,counter,4,"[9, 51, 59, 79, 123, 150, 171, 289, 331, 421, 448, 468, 521]"
2465,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\ExceptionsMetric.java,shutdown,public void   (  )  {   servo util . unregister ( exception counters . values (  )  )  ;   }  ,94,1,shutdown,1,[]
2466,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\EurekaUtils.java,get private ip,public static  string   (  instance info instance info )  {   string default private ip = null ;  if  ( instance info . get data center info (  )  instanceof  amazon info )   {  default private ip =  (  (  amazon info ) instance info . get data center info (  )  )  . get (  amazon info .  meta data key . local ipv4 )  ;   }  if  ( is null or empty ( default private ip )  )   {  default private ip = instance info . getip addr (  )  ;   }  return default private ip ;   }  ,475,3,get,1,"[120, 236, 268, 418]"
2467,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\EurekaUtils.java,get private ip,public static  string   (  instance info instance info )  {   string default private ip = null ;  if  ( instance info . get data center info (  )  instanceof  amazon info )   {  default private ip =  (  (  amazon info ) instance info . get data center info (  )  )  . get (  amazon info .  meta data key . local ipv4 )  ;   }  if  ( is null or empty ( default private ip )  )   {  default private ip = instance info . getip addr (  )  ;   }  return default private ip ;   }  ,475,3,private,2,"[77, 186, 360, 389, 457]"
2468,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\EurekaUtils.java,get private ip,public static  string   (  instance info instance info )  {   string default private ip = null ;  if  ( instance info . get data center info (  )  instanceof  amazon info )   {  default private ip =  (  (  amazon info ) instance info . get data center info (  )  )  . get (  amazon info .  meta data key . local ipv4 )  ;   }  if  ( is null or empty ( default private ip )  )   {  default private ip = instance info . getip addr (  )  ;   }  return default private ip ;   }  ,475,3,ip,3,"[85, 194, 312, 368, 397, 421, 465]"
2469,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\EurekaUtils.java,is in ec,"public static boolean   (  instance info instance info )  {  if  ( instance info . get data center info (  )  instanceof  amazon info )   {   string instance id =  (  (  amazon info ) instance info . get data center info (  )  )  . get id (  )  ;  if  ( instance id  !  =  null && instance id . starts with ( ""i - "" )  )   {  return true ;   }   }  return false ;   }  ",369,3,is,1,[]
2470,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\EurekaUtils.java,is in ec,"public static boolean   (  instance info instance info )  {  if  ( instance info . get data center info (  )  instanceof  amazon info )   {   string instance id =  (  (  amazon info ) instance info . get data center info (  )  )  . get id (  )  ;  if  ( instance id  !  =  null && instance id . starts with ( ""i - "" )  )   {  return true ;   }   }  return false ;   }  ",369,3,in,2,"[27, 36, 41, 50, 67, 76, 99, 110, 129, 145, 149, 177, 184, 193, 216, 254, 281]"
2471,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\EurekaUtils.java,is in ec,"public static boolean   (  instance info instance info )  {  if  ( instance info . get data center info (  )  instanceof  amazon info )   {   string instance id =  (  (  amazon info ) instance info . get data center info (  )  )  . get id (  )  ;  if  ( instance id  !  =  null && instance id . starts with ( ""i - "" )  )   {  return true ;   }   }  return false ;   }  ",369,3,ec,3,[]
2472,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\EurekaUtils.java,is in vpc,public static boolean   (  instance info instance info )  {  if  ( instance info . get data center info (  )  instanceof  amazon info )   {   amazon info info =  (  amazon info ) instance info . get data center info (  )  ;   string vpc id = info . get (  amazon info .  meta data key . vpc id )  ;  return  ! is null or empty ( vpc id )  ;   }  return false ;   }  ,366,3,is,1,[310]
2473,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\EurekaUtils.java,is in vpc,public static boolean   (  instance info instance info )  {  if  ( instance info . get data center info (  )  instanceof  amazon info )   {   amazon info info =  (  amazon info ) instance info . get data center info (  )  ;   string vpc id = info . get (  amazon info .  meta data key . vpc id )  ;  return  ! is null or empty ( vpc id )  ;   }  return false ;   }  ,366,3,in,2,"[27, 36, 41, 50, 67, 76, 99, 110, 129, 149, 154, 172, 179, 188, 211, 229, 242, 263]"
2474,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\EurekaUtils.java,is in vpc,public static boolean   (  instance info instance info )  {  if  ( instance info . get data center info (  )  instanceof  amazon info )   {   amazon info info =  (  amazon info ) instance info . get data center info (  )  ;   string vpc id = info . get (  amazon info .  meta data key . vpc id )  ;  return  ! is null or empty ( vpc id )  ;   }  return false ;   }  ,366,3,vpc,3,"[233, 287, 329]"
2475,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\EurekaUtils.java,is null or empty,private static boolean   (  string str )  {  return str  =  =  null || str . is empty (  )  ;   }  ,99,4,is,1,[77]
2476,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\EurekaUtils.java,is null or empty,private static boolean   (  string str )  {  return str  =  =  null || str . is empty (  )  ;   }  ,99,4,null,2,[63]
2477,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\EurekaUtils.java,is null or empty,private static boolean   (  string str )  {  return str  =  =  null || str . is empty (  )  ;   }  ,99,4,or,3,[]
2478,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\EurekaUtils.java,is null or empty,private static boolean   (  string str )  {  return str  =  =  null || str . is empty (  )  ;   }  ,99,4,empty,4,[80]
2479,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\RateLimiter.java, rate limiter,"public   (  time unit average rate unit )  {  switch  ( average rate unit )   {  case seconds: rate to ms conversion = 1000 ;  break ;  case minutes: rate to ms conversion = 60 * 1000 ;  break ;  default : throw new  illegal argument exception ( "" time unit of ""  +  average rate unit  +  "" is not supported"" )  ;   }   }  ",323,2,rate,1,"[30, 64, 95, 150, 275]"
2480,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\RateLimiter.java, rate limiter,"public   (  time unit average rate unit )  {  switch  ( average rate unit )   {  case seconds: rate to ms conversion = 1000 ;  break ;  case minutes: rate to ms conversion = 60 * 1000 ;  break ;  default : throw new  illegal argument exception ( "" time unit of ""  +  average rate unit  +  "" is not supported"" )  ;   }   }  ",323,2,limiter,2,[]
2481,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\RateLimiter.java,acquire,public boolean   ( int burst size long average rate long current time millis )  {  if  ( burst size  <  =  0 || average rate  <  =  0 )   {  return true ;   }  refill token ( burst size average rate current time millis )  ;  return consume token ( burst size )  ;   }  ,269,1,acquire,1,[]
2482,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\RateLimiter.java,consume token,private boolean   ( int burst size )  {  while  ( true )   {  int current level = consumed tokens . get (  )  ;  if  ( current level  >  =  burst size )   {  return false ;   }  if  ( consumed tokens . compare and set ( current level current level  +  1 )  )   {  return true ;   }   }   }  ,291,2,consume,1,"[82, 184]"
2483,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\RateLimiter.java,consume token,private boolean   ( int burst size )  {  while  ( true )   {  int current level = consumed tokens . get (  )  ;  if  ( current level  >  =  burst size )   {  return false ;   }  if  ( consumed tokens . compare and set ( current level current level  +  1 )  )   {  return true ;   }   }   }  ,291,2,token,2,"[91, 193]"
2484,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\RateLimiter.java,refill token,private void   ( int burst size long average rate long current time millis )  {  long refill time = last refill time . get (  )  ;  long time delta = current time millis  -  refill time ;  long new tokens = time delta * average rate  /  rate to ms conversion ;  if  ( new tokens  >  0 )   {  long new refill time = refill time  =  =  0  ?  current time millis : refill time  +  new tokens * rate to ms conversion  /  average rate ;  if  ( last refill time . compare and set ( refill time new refill time )  )   {  while  ( true )   {  int current level = consumed tokens . get (  )  ;  int adjusted level =  math . min ( current level burst size )  ;  int new level =  ( int )  math . max ( 0 adjusted level  -  new tokens )  ;  if  ( consumed tokens . compare and set ( current level new level )  )   {  return ;   }   }   }   }   }  ,835,2,refill,1,"[86, 105, 174, 301, 315, 362, 444, 476, 492]"
2485,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\RateLimiter.java,refill token,private void   ( int burst size long average rate long current time millis )  {  long refill time = last refill time . get (  )  ;  long time delta = current time millis  -  refill time ;  long new tokens = time delta * average rate  /  rate to ms conversion ;  if  ( new tokens  >  0 )   {  long new refill time = refill time  =  =  0  ?  current time millis : refill time  +  new tokens * rate to ms conversion  /  average rate ;  if  ( last refill time . compare and set ( refill time new refill time )  )   {  while  ( true )   {  int current level = consumed tokens . get (  )  ;  int adjusted level =  math . min ( current level burst size )  ;  int new level =  ( int )  math . max ( 0 adjusted level  -  new tokens )  ;  if  ( consumed tokens . compare and set ( current level new level )  )   {  return ;   }   }   }   }   }  ,835,2,token,2,"[198, 272, 382, 564, 716, 744]"
2486,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\RateLimiter.java,reset,public void   (  )  {  consumed tokens . set ( 0 )  ;  last refill time . set ( 0 )  ;   }  ,92,1,reset,1,[]
2487,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\ServoUtil.java,register,"public static  < t > boolean   (  monitor < t >  monitor )  {  try  {   default monitor registry . get instance (  )  . register ( monitor )  ;   }  catch  (   exception e )   {  logger . warn ( "" cannot register monitor  {  } "" monitor . get config (  )  . get name (  )  )  ;  if  ( logger . is debug enabled (  )  )   {  logger . debug ( e . get message (  )  e )  ;   }  return false ;   }  return true ;   }  ",414,1,register,1,"[120, 204]"
2488,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\ServoUtil.java,unregister,public static  < m extends  monitor > void   (  collection < m >  monitors )  {  for  (  m monitor : monitors )   {  unregister ( monitor )  ;   }   }  ,152,1,unregister,1,[117]
2489,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\StringCache.java, string cache,public   ( int length limit )  {  this . length limit = length limit ;   }  ,76,2,string,1,[]
2490,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\StringCache.java, string cache,public   ( int length limit )  {  this . length limit = length limit ;   }  ,76,2,cache,2,[]
2491,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\StringCache.java,cached value of,public  string   ( final  string str )  {  if  ( str  !  =  null &&  ( length limit  <  0 || str . length (  )   <  =  length limit )  )   {  try  {  lock . read lock (  )  . lock (  )  ;   weak reference <  string >  ref = cache . get ( str )  ;  if  ( ref  !  =  null )   {  return ref . get (  )  ;   }   }  finally  {  lock . read lock (  )  . unlock (  )  ;   }  try  {  lock . write lock (  )  . lock (  )  ;   weak reference <  string >  ref = cache . get ( str )  ;  if  ( ref  !  =  null )   {  return ref . get (  )  ;   }  cache . put ( str new  weak reference <  >  ( str )  )  ;   }  finally  {  lock . write lock (  )  . unlock (  )  ;   }  return str ;   }  return str ;   }  ,691,3,cached,1,[]
2492,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\StringCache.java,cached value of,public  string   ( final  string str )  {  if  ( str  !  =  null &&  ( length limit  <  0 || str . length (  )   <  =  length limit )  )   {  try  {  lock . read lock (  )  . lock (  )  ;   weak reference <  string >  ref = cache . get ( str )  ;  if  ( ref  !  =  null )   {  return ref . get (  )  ;   }   }  finally  {  lock . read lock (  )  . unlock (  )  ;   }  try  {  lock . write lock (  )  . lock (  )  ;   weak reference <  string >  ref = cache . get ( str )  ;  if  ( ref  !  =  null )   {  return ref . get (  )  ;   }  cache . put ( str new  weak reference <  >  ( str )  )  ;   }  finally  {  lock . write lock (  )  . unlock (  )  ;   }  return str ;   }  return str ;   }  ,691,3,value,2,[]
2493,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\StringCache.java,cached value of,public  string   ( final  string str )  {  if  ( str  !  =  null &&  ( length limit  <  0 || str . length (  )   <  =  length limit )  )   {  try  {  lock . read lock (  )  . lock (  )  ;   weak reference <  string >  ref = cache . get ( str )  ;  if  ( ref  !  =  null )   {  return ref . get (  )  ;   }   }  finally  {  lock . read lock (  )  . unlock (  )  ;   }  try  {  lock . write lock (  )  . lock (  )  ;   weak reference <  string >  ref = cache . get ( str )  ;  if  ( ref  !  =  null )   {  return ref . get (  )  ;   }  cache . put ( str new  weak reference <  >  ( str )  )  ;   }  finally  {  lock . write lock (  )  . unlock (  )  ;   }  return str ;   }  return str ;   }  ,691,3,of,3,[]
2494,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\StringCache.java,intern,public static  string   (  string original )  {  return instance . cached value of ( original )  ;   }  ,104,1,intern,1,[]
2495,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\StringCache.java,size,public int   (  )  {  try  {  lock . read lock (  )  . lock (  )  ;  return cache . size (  )  ;   }  finally  {  lock . read lock (  )  . unlock (  )  ;   }   }  ,163,1,size,1,[84]
2496,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\StringUtil.java,join,public static  string   (  string .  .  .  values )  {  if  ( values  =  =  null || values . length  =  =  0 )   {  return null ;   }   string builder sb = new  string builder (  )  ;  for  (   string value : values )   {  sb . append ( ' ' )  . append ( value )  ;   }  return sb . substring ( 1 )  ;   }  ,307,1,join,1,[]
2497,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\SystemUtil.java,get serveri pv,"public static  string   (  )  {   string candidate address = null ;  try  {   enumeration <  network interface >  nics =  network interface . get network interfaces (  )  ;  while  ( nics . has more elements (  )  )   {   network interface nic = nics . next element (  )  ;   enumeration <  inet address >  inet addresses = nic . get inet addresses (  )  ;  while  ( inet addresses . has more elements (  )  )   {   string address = inet addresses . next element (  )  . get host address (  )  ;   string nic name = nic . get name (  )  ;  if  ( nic name . starts with ( ""eth0"" )  || nic name . starts with ( ""en0"" )  )   {  return address ;   }  if  ( nic name . ends with ( ""0"" )  || candidate address  =  =  null )   {  candidate address = address ;   }   }   }   }  catch  (   socket exception e )   {  throw new  runtime exception ( "" cannot resolve local network address"" e )  ;   }  return candidate address  =  =  null  ?  ""127 . 0 . 0 . 1"" : candidate address ;   }  ",976,3,get,1,"[142, 330, 471, 522]"
2498,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\SystemUtil.java,get serveri pv,"public static  string   (  )  {   string candidate address = null ;  try  {   enumeration <  network interface >  nics =  network interface . get network interfaces (  )  ;  while  ( nics . has more elements (  )  )   {   network interface nic = nics . next element (  )  ;   enumeration <  inet address >  inet addresses = nic . get inet addresses (  )  ;  while  ( inet addresses . has more elements (  )  )   {   string address = inet addresses . next element (  )  . get host address (  )  ;   string nic name = nic . get name (  )  ;  if  ( nic name . starts with ( ""eth0"" )  || nic name . starts with ( ""en0"" )  )   {  return address ;   }  if  ( nic name . ends with ( ""0"" )  || candidate address  =  =  null )   {  candidate address = address ;   }   }   }   }  catch  (   socket exception e )   {  throw new  runtime exception ( "" cannot resolve local network address"" e )  ;   }  return candidate address  =  =  null  ?  ""127 . 0 . 0 . 1"" : candidate address ;   }  ",976,3,serveri,2,[]
2499,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\SystemUtil.java,get serveri pv,"public static  string   (  )  {   string candidate address = null ;  try  {   enumeration <  network interface >  nics =  network interface . get network interfaces (  )  ;  while  ( nics . has more elements (  )  )   {   network interface nic = nics . next element (  )  ;   enumeration <  inet address >  inet addresses = nic . get inet addresses (  )  ;  while  ( inet addresses . has more elements (  )  )   {   string address = inet addresses . next element (  )  . get host address (  )  ;   string nic name = nic . get name (  )  ;  if  ( nic name . starts with ( ""eth0"" )  || nic name . starts with ( ""en0"" )  )   {  return address ;   }  if  ( nic name . ends with ( ""0"" )  || candidate address  =  =  null )   {  candidate address = address ;   }   }   }   }  catch  (   socket exception e )   {  throw new  runtime exception ( "" cannot resolve local network address"" e )  ;   }  return candidate address  =  =  null  ?  ""127 . 0 . 0 . 1"" : candidate address ;   }  ",976,3,pv,3,[]
2500,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\SystemUtil.java,main,"public static void   (  string[] args )  {   system . out . println ( "" found ip = ""  +  get serveri pv4 (  )  )  ;   }  ",121,1,main,1,[]
2501,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\ThresholdLevelsMetric.java, no op threshold level metric,public   (  )  {  super ( null null new long[] {  }  )  ;   }  ,63,5,no,1,[]
2502,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\ThresholdLevelsMetric.java, no op threshold level metric,public   (  )  {  super ( null null new long[] {  }  )  ;   }  ,63,5,op,2,[]
2503,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\ThresholdLevelsMetric.java, no op threshold level metric,public   (  )  {  super ( null null new long[] {  }  )  ;   }  ,63,5,threshold,3,[]
2504,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\ThresholdLevelsMetric.java, no op threshold level metric,public   (  )  {  super ( null null new long[] {  }  )  ;   }  ,63,5,level,4,[]
2505,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\ThresholdLevelsMetric.java, no op threshold level metric,public   (  )  {  super ( null null new long[] {  }  )  ;   }  ,63,5,metric,5,[]
2506,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\ThresholdLevelsMetric.java, threshold levels metric,"public   (  object owner  string prefix long[] levels )  {  this . levels = levels ;  this . gauges = new  long gauge[levels . length] ;  for  ( int i = 0 ;  i  <  levels . length ;  i +  +  )   {   string name = prefix  +   string . format ( ""%05d"" levels[i] )  ;   monitor config config = new  monitor config .  builder ( name )  . with tag ( ""class"" owner . get class (  )  . get name (  )  )  . build (  )  ;  gauges[i] = new  long gauge ( config )  ;  try  {   default monitor registry . get instance (  )  . register ( gauges[i] )  ;   }  catch  (   throwable e )   {  logger . warn ( "" cannot register metric  {  } "" name e )  ;   }   }   }  ",649,3,threshold,1,[]
2507,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\ThresholdLevelsMetric.java, threshold levels metric,"public   (  object owner  string prefix long[] levels )  {  this . levels = levels ;  this . gauges = new  long gauge[levels . length] ;  for  ( int i = 0 ;  i  <  levels . length ;  i +  +  )   {   string name = prefix  +   string . format ( ""%05d"" levels[i] )  ;   monitor config config = new  monitor config .  builder ( name )  . with tag ( ""class"" owner . get class (  )  . get name (  )  )  . build (  )  ;  gauges[i] = new  long gauge ( config )  ;  try  {   default monitor registry . get instance (  )  . register ( gauges[i] )  ;   }  catch  (   throwable e )   {  logger . warn ( "" cannot register metric  {  } "" name e )  ;   }   }   }  ",649,3,levels,2,"[47, 67, 76, 118, 164, 250]"
2508,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\ThresholdLevelsMetric.java, threshold levels metric,"public   (  object owner  string prefix long[] levels )  {  this . levels = levels ;  this . gauges = new  long gauge[levels . length] ;  for  ( int i = 0 ;  i  <  levels . length ;  i +  +  )   {   string name = prefix  +   string . format ( ""%05d"" levels[i] )  ;   monitor config config = new  monitor config .  builder ( name )  . with tag ( ""class"" owner . get class (  )  . get name (  )  )  . build (  )  ;  gauges[i] = new  long gauge ( config )  ;  try  {   default monitor registry . get instance (  )  . register ( gauges[i] )  ;   }  catch  (   throwable e )   {  logger . warn ( "" cannot register metric  {  } "" name e )  ;   }   }   }  ",649,3,metric,3,[609]
2509,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\AmazonInfoTest.java,test extract account id,"@ test public void   (  )  throws  exception  {   string json = "" { \n""  +  "" \""image id\"" : \""ami - some id\"" \n""  +  "" \""instance type\"" : \""m1 . small\"" \n"" +  "" \""version\"" : \""2000 - 00 - 00\"" \n"" +  "" \""architecture\"" : \""x86   64\"" \n"" +  "" \""accou",255,4,test,1,[2]
2510,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\AmazonInfoTest.java,test extract account id,"@ test public void   (  )  throws  exception  {   string json = "" { \n""  +  "" \""image id\"" : \""ami - some id\"" \n""  +  "" \""instance type\"" : \""m1 . small\"" \n"" +  "" \""version\"" : \""2000 - 00 - 00\"" \n"" +  "" \""architecture\"" : \""x86   64\"" \n"" +  "" \""accou",255,4,extract,2,[]
2511,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\AmazonInfoTest.java,test extract account id,"@ test public void   (  )  throws  exception  {   string json = "" { \n""  +  "" \""image id\"" : \""ami - some id\"" \n""  +  "" \""instance type\"" : \""m1 . small\"" \n"" +  "" \""version\"" : \""2000 - 00 - 00\"" \n"" +  "" \""architecture\"" : \""x86   64\"" \n"" +  "" \""accou",255,4,account,3,[]
2512,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\AmazonInfoTest.java,test extract account id,"@ test public void   (  )  throws  exception  {   string json = "" { \n""  +  "" \""image id\"" : \""ami - some id\"" \n""  +  "" \""instance type\"" : \""m1 . small\"" \n"" +  "" \""version\"" : \""2000 - 00 - 00\"" \n"" +  "" \""architecture\"" : \""x86   64\"" \n"" +  "" \""accou",255,4,id,4,"[16, 86, 106]"
2513,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\ApplicationInfoManagerTest.java,map,@ override public  instance info .  instance status   (  instance info .  instance status prev )  {  return null ;   }  ,120,1,map,1,[]
2514,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\ApplicationInfoManagerTest.java,set up,@ before public void   (  )  {   amazon info initial amazon info =  amazon info .  builder . new builder (  )  . build (  )  ;  config = spy ( new  cloud instance config ( initial amazon info )  )  ;  instance info =  instance info generator . take one ( ,255,2,set,1,[]
2515,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\ApplicationInfoManagerTest.java,set up,@ before public void   (  )  {   amazon info initial amazon info =  amazon info .  builder . new builder (  )  . build (  )  ;  config = spy ( new  cloud instance config ( initial amazon info )  )  ;  instance info =  instance info generator . take one ( ,255,2,up,2,[]
2516,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\ApplicationInfoManagerTest.java,test custom instance status mapper,@ test public void   (  )  {   application info manager .  optional args optional args = new  application info manager .  optional args (  )  ;  optional args . set instance status mapper ( new  application info manager .  instance status mapper (  )  {  ,255,5,test,1,[2]
2517,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\ApplicationInfoManagerTest.java,test custom instance status mapper,@ test public void   (  )  {   application info manager .  optional args optional args = new  application info manager .  optional args (  )  ;  optional args . set instance status mapper ( new  application info manager .  instance status mapper (  )  {  ,255,5,custom,2,[]
2518,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\ApplicationInfoManagerTest.java,test custom instance status mapper,@ test public void   (  )  {   application info manager .  optional args optional args = new  application info manager .  optional args (  )  ;  optional args . set instance status mapper ( new  application info manager .  instance status mapper (  )  {  ,255,5,instance,3,"[165, 223]"
2519,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\ApplicationInfoManagerTest.java,test custom instance status mapper,@ test public void   (  )  {   application info manager .  optional args optional args = new  application info manager .  optional args (  )  ;  optional args . set instance status mapper ( new  application info manager .  instance status mapper (  )  {  ,255,5,status,4,"[174, 232]"
2520,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\ApplicationInfoManagerTest.java,test custom instance status mapper,@ test public void   (  )  {   application info manager .  optional args optional args = new  application info manager .  optional args (  )  ;  optional args . set instance status mapper ( new  application info manager .  instance status mapper (  )  {  ,255,5,mapper,5,"[181, 239]"
2521,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\ApplicationInfoManagerTest.java,test null result instance status mapper,@ test public void   (  )  {   application info manager .  optional args optional args = new  application info manager .  optional args (  )  ;  optional args . set instance status mapper ( new  application info manager .  instance status mapper (  )  {  ,255,6,test,1,[2]
2522,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\ApplicationInfoManagerTest.java,test null result instance status mapper,@ test public void   (  )  {   application info manager .  optional args optional args = new  application info manager .  optional args (  )  ;  optional args . set instance status mapper ( new  application info manager .  instance status mapper (  )  {  ,255,6,null,2,[]
2523,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\ApplicationInfoManagerTest.java,test null result instance status mapper,@ test public void   (  )  {   application info manager .  optional args optional args = new  application info manager .  optional args (  )  ;  optional args . set instance status mapper ( new  application info manager .  instance status mapper (  )  {  ,255,6,result,3,[]
2524,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\ApplicationInfoManagerTest.java,test null result instance status mapper,@ test public void   (  )  {   application info manager .  optional args optional args = new  application info manager .  optional args (  )  ;  optional args . set instance status mapper ( new  application info manager .  instance status mapper (  )  {  ,255,6,instance,4,"[165, 223]"
2525,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\ApplicationInfoManagerTest.java,test null result instance status mapper,@ test public void   (  )  {   application info manager .  optional args optional args = new  application info manager .  optional args (  )  ;  optional args . set instance status mapper ( new  application info manager .  instance status mapper (  )  {  ,255,6,status,5,"[174, 232]"
2526,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\ApplicationInfoManagerTest.java,test null result instance status mapper,@ test public void   (  )  {   application info manager .  optional args optional args = new  application info manager .  optional args (  )  ;  optional args . set instance status mapper ( new  application info manager .  instance status mapper (  )  {  ,255,6,mapper,6,"[181, 239]"
2527,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\ApplicationInfoManagerTest.java,test refresh data center info with amazon info,"@ test public void   (  )  {   string new public hostname = ""new value"" ;  assert that ( instance info . get host name (  )  is ( not ( new public hostname )  )  )  ;   (  (  amazon info ) config . get data center info (  )  )  . get metadata (  )  . put ",255,8,test,1,[2]
2528,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\ApplicationInfoManagerTest.java,test refresh data center info with amazon info,"@ test public void   (  )  {   string new public hostname = ""new value"" ;  assert that ( instance info . get host name (  )  is ( not ( new public hostname )  )  )  ;   (  (  amazon info ) config . get data center info (  )  )  . get metadata (  )  . put ",255,8,refresh,2,[]
2529,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\ApplicationInfoManagerTest.java,test refresh data center info with amazon info,"@ test public void   (  )  {   string new public hostname = ""new value"" ;  assert that ( instance info . get host name (  )  is ( not ( new public hostname )  )  )  ;   (  (  amazon info ) config . get data center info (  )  )  . get metadata (  )  . put ",255,8,data,3,"[202, 238]"
2530,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\ApplicationInfoManagerTest.java,test refresh data center info with amazon info,"@ test public void   (  )  {   string new public hostname = ""new value"" ;  assert that ( instance info . get host name (  )  is ( not ( new public hostname )  )  )  ;   (  (  amazon info ) config . get data center info (  )  )  . get metadata (  )  . put ",255,8,center,4,[207]
2531,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\ApplicationInfoManagerTest.java,test refresh data center info with amazon info,"@ test public void   (  )  {   string new public hostname = ""new value"" ;  assert that ( instance info . get host name (  )  is ( not ( new public hostname )  )  )  ;   (  (  amazon info ) config . get data center info (  )  )  . get metadata (  )  . put ",255,8,info,5,"[98, 182, 214]"
2532,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\ApplicationInfoManagerTest.java,test refresh data center info with amazon info,"@ test public void   (  )  {   string new public hostname = ""new value"" ;  assert that ( instance info . get host name (  )  is ( not ( new public hostname )  )  )  ;   (  (  amazon info ) config . get data center info (  )  )  . get metadata (  )  . put ",255,8,with,6,[]
2533,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\ApplicationInfoManagerTest.java,test refresh data center info with amazon info,"@ test public void   (  )  {   string new public hostname = ""new value"" ;  assert that ( instance info . get host name (  )  is ( not ( new public hostname )  )  )  ;   (  (  amazon info ) config . get data center info (  )  )  . get metadata (  )  . put ",255,8,amazon,7,[175]
2534,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\ApplicationInfoManagerTest.java,test refresh data center info with amazon info,"@ test public void   (  )  {   string new public hostname = ""new value"" ;  assert that ( instance info . get host name (  )  is ( not ( new public hostname )  )  )  ;   (  (  amazon info ) config . get data center info (  )  )  . get metadata (  )  . put ",255,8,info,8,"[98, 182, 214]"
2535,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\CloudInstanceConfigTest.java,create config,private  cloud instance config   (  amazon info info )  {  return new  cloud instance config ( info )  {  @ override public  string[] get default address resolution order (  )  {  return new  string[] { public hostname . name (  )  local ipv4 . name (  )  }  ;   }  @ override public  string get host name (  boolean refresh )  {  return dummy default ;   }   }   ;   }  ,371,2,create,1,[]
2536,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\CloudInstanceConfigTest.java,create config,private  cloud instance config   (  amazon info info )  {  return new  cloud instance config ( info )  {  @ override public  string[] get default address resolution order (  )  {  return new  string[] { public hostname . name (  )  local ipv4 . name (  )  }  ;   }  @ override public  string get host name (  boolean refresh )  {  return dummy default ;   }   }   ;   }  ,371,2,config,2,"[24, 86]"
2537,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\CloudInstanceConfigTest.java,get default address resolution order,@ override public  string[]   (  )  {  return new  string[] { public hostname . name (  )  local ipv4 . name (  )  }  ;   }  ,125,5,get,1,[]
2538,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\CloudInstanceConfigTest.java,get default address resolution order,@ override public  string[]   (  )  {  return new  string[] { public hostname . name (  )  local ipv4 . name (  )  }  ;   }  ,125,5,default,2,[]
2539,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\CloudInstanceConfigTest.java,get default address resolution order,@ override public  string[]   (  )  {  return new  string[] { public hostname . name (  )  local ipv4 . name (  )  }  ;   }  ,125,5,address,3,[]
2540,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\CloudInstanceConfigTest.java,get default address resolution order,@ override public  string[]   (  )  {  return new  string[] { public hostname . name (  )  local ipv4 . name (  )  }  ;   }  ,125,5,resolution,4,[]
2541,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\CloudInstanceConfigTest.java,get default address resolution order,@ override public  string[]   (  )  {  return new  string[] { public hostname . name (  )  local ipv4 . name (  )  }  ;   }  ,125,5,order,5,[]
2542,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\CloudInstanceConfigTest.java,get host name,@ override public  string   ( boolean refresh )  {  return dummy default ;   }  ,80,3,get,1,[]
2543,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\CloudInstanceConfigTest.java,get host name,@ override public  string   ( boolean refresh )  {  return dummy default ;   }  ,80,3,host,2,[]
2544,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\CloudInstanceConfigTest.java,get host name,@ override public  string   ( boolean refresh )  {  return dummy default ;   }  ,80,3,name,3,[]
2545,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\CloudInstanceConfigTest.java,set up,@ before public void   (  )  {  instance info =  instance info generator . take one (  )  ;   }  ,97,2,set,1,[]
2546,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\CloudInstanceConfigTest.java,set up,@ before public void   (  )  {  instance info =  instance info generator . take one (  )  ;   }  ,97,2,up,2,[]
2547,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\CloudInstanceConfigTest.java,test resolve default address,@ test public void   (  )  {   amazon info info =  (  amazon info ) instance info . get data center info (  )  ;  config = create config ( info )  ;  assert that ( config . resolve default address ( false )  is ( info . get ( public hostname )  )  )  ;  i,255,4,test,1,[2]
2548,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\CloudInstanceConfigTest.java,test resolve default address,@ test public void   (  )  {   amazon info info =  (  amazon info ) instance info . get data center info (  )  ;  config = create config ( info )  ;  assert that ( config . resolve default address ( false )  is ( info . get ( public hostname )  )  )  ;  i,255,4,resolve,2,[173]
2549,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\CloudInstanceConfigTest.java,test resolve default address,@ test public void   (  )  {   amazon info info =  (  amazon info ) instance info . get data center info (  )  ;  config = create config ( info )  ;  assert that ( config . resolve default address ( false )  is ( info . get ( public hostname )  )  )  ;  i,255,4,default,3,[181]
2550,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\CloudInstanceConfigTest.java,test resolve default address,@ test public void   (  )  {   amazon info info =  (  amazon info ) instance info . get data center info (  )  ;  config = create config ( info )  ;  assert that ( config . resolve default address ( false )  is ( info . get ( public hostname )  )  )  ;  i,255,4,address,4,[189]
2551,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\AbstractDiscoveryClientTester.java,set up,@ before public void   (  )  throws  exception  {  setup properties (  )  ;  populate local registry at startup (  )  ;  populate remote registry at startup (  )  ;  setup discovery client (  )  ;   }  ,202,2,set,1,"[51, 166]"
2552,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\AbstractDiscoveryClientTester.java,set up,@ before public void   (  )  throws  exception  {  setup properties (  )  ;  populate local registry at startup (  )  ;  populate remote registry at startup (  )  ;  setup discovery client (  )  ;   }  ,202,2,up,2,"[54, 109, 154, 169]"
2553,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\AbstractDiscoveryClientTester.java,tear down,@ after public void   (  )  throws  exception  {  shutdown discovery client (  )  ;   discovery client resource . clear discovery client config (  )  ;   }  ,157,2,tear,1,[]
2554,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\AbstractDiscoveryClientTester.java,tear down,@ after public void   (  )  throws  exception  {  shutdown discovery client (  )  ;   discovery client resource . clear discovery client config (  )  ;   }  ,157,2,down,2,[54]
2555,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BackUpRegistryTest.java,create local apps,private  application   (  )  {   application myapp = new  application ( local   region   app   name )  ;   instance info instance info = create local instance ( local   region   instance   1   hostname )  ;  myapp . add instance ( instance info )  ;  return myapp ;   }  ,271,3,create,1,[137]
2556,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BackUpRegistryTest.java,create local apps,private  application   (  )  {   application myapp = new  application ( local   region   app   name )  ;   instance info instance info = create local instance ( local   region   instance   1   hostname )  ;  myapp . add instance ( instance info )  ;  return myapp ;   }  ,271,3,local,2,"[72, 144, 161]"
2557,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BackUpRegistryTest.java,create local apps,private  application   (  )  {   application myapp = new  application ( local   region   app   name )  ;   instance info instance info = create local instance ( local   region   instance   1   hostname )  ;  myapp . add instance ( instance info )  ;  return myapp ;   }  ,271,3,apps,3,[]
2558,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BackUpRegistryTest.java,create local instance,"private  instance info   (  string instance host name )  {   instance info .  builder instance builder =  instance info .  builder . new builder (  )  ;  instance builder . set app name ( local   region   app   name )  ;  instance builder . setvip address ( all   regions   vip   addr )  ;  instance builder . set host name ( instance host name )  ;  instance builder . setip addr ( ""10 . 10 . 101 . 1"" )  ;   amazon info amazon info = get amazon info ( null instance host name )  ;  instance builder . set data center info ( amazon info )  ;  instance builder . set metadata ( amazon info . get metadata (  )  )  ;  return instance builder . build (  )  ;   }  ",662,3,create,1,[]
2559,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BackUpRegistryTest.java,create local instance,"private  instance info   (  string instance host name )  {   instance info .  builder instance builder =  instance info .  builder . new builder (  )  ;  instance builder . set app name ( local   region   app   name )  ;  instance builder . setvip address ( all   regions   vip   addr )  ;  instance builder . set host name ( instance host name )  ;  instance builder . setip addr ( ""10 . 10 . 101 . 1"" )  ;   amazon info amazon info = get amazon info ( null instance host name )  ;  instance builder . set data center info ( amazon info )  ;  instance builder . set metadata ( amazon info . get metadata (  )  )  ;  return instance builder . build (  )  ;   }  ",662,3,local,2,[188]
2560,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BackUpRegistryTest.java,create local instance,"private  instance info   (  string instance host name )  {   instance info .  builder instance builder =  instance info .  builder . new builder (  )  ;  instance builder . set app name ( local   region   app   name )  ;  instance builder . setvip address ( all   regions   vip   addr )  ;  instance builder . set host name ( instance host name )  ;  instance builder . setip addr ( ""10 . 10 . 101 . 1"" )  ;   amazon info amazon info = get amazon info ( null instance host name )  ;  instance builder . set data center info ( amazon info )  ;  instance builder . set metadata ( amazon info . get metadata (  )  )  ;  return instance builder . build (  )  ;   }  ",662,3,instance,3,"[9, 35, 61, 86, 106, 154, 222, 291, 326, 351, 459, 484, 544, 624]"
2561,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BackUpRegistryTest.java,create remote apps,private  application   (  )  {   application myapp = new  application ( remote   region   app   name )  ;   instance info instance info = create remote instance ( remote   region   instance   1   hostname )  ;  myapp . add instance ( instance info )  ;  return myapp ;   }  ,274,3,create,1,[138]
2562,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BackUpRegistryTest.java,create remote apps,private  application   (  )  {   application myapp = new  application ( remote   region   app   name )  ;   instance info instance info = create remote instance ( remote   region   instance   1   hostname )  ;  myapp . add instance ( instance info )  ;  return myapp ;   }  ,274,3,remote,2,"[72, 145, 163]"
2563,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BackUpRegistryTest.java,create remote apps,private  application   (  )  {   application myapp = new  application ( remote   region   app   name )  ;   instance info instance info = create remote instance ( remote   region   instance   1   hostname )  ;  myapp . add instance ( instance info )  ;  return myapp ;   }  ,274,3,apps,3,[]
2564,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BackUpRegistryTest.java,create remote instance,"private  instance info   (  string instance host name )  {   instance info .  builder instance builder =  instance info .  builder . new builder (  )  ;  instance builder . set app name ( remote   region   app   name )  ;  instance builder . setvip address ( all   regions   vip   addr )  ;  instance builder . set host name ( instance host name )  ;  instance builder . setip addr ( ""10 . 10 . 101 . 1"" )  ;   amazon info amazon info = get amazon info ( remote   zone instance host name )  ;  instance builder . set data center info ( amazon info )  ;  instance builder . set metadata ( amazon info . get metadata (  )  )  ;  return instance builder . build (  )  ;   }  ",672,3,create,1,[]
2565,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BackUpRegistryTest.java,create remote instance,"private  instance info   (  string instance host name )  {   instance info .  builder instance builder =  instance info .  builder . new builder (  )  ;  instance builder . set app name ( remote   region   app   name )  ;  instance builder . setvip address ( all   regions   vip   addr )  ;  instance builder . set host name ( instance host name )  ;  instance builder . setip addr ( ""10 . 10 . 101 . 1"" )  ;   amazon info amazon info = get amazon info ( remote   zone instance host name )  ;  instance builder . set data center info ( amazon info )  ;  instance builder . set metadata ( amazon info . get metadata (  )  )  ;  return instance builder . build (  )  ;   }  ",672,3,remote,2,"[188, 455]"
2566,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BackUpRegistryTest.java,create remote instance,"private  instance info   (  string instance host name )  {   instance info .  builder instance builder =  instance info .  builder . new builder (  )  ;  instance builder . set app name ( remote   region   app   name )  ;  instance builder . setvip address ( all   regions   vip   addr )  ;  instance builder . set host name ( instance host name )  ;  instance builder . setip addr ( ""10 . 10 . 101 . 1"" )  ;   amazon info amazon info = get amazon info ( remote   zone instance host name )  ;  instance builder . set data center info ( amazon info )  ;  instance builder . set metadata ( amazon info . get metadata (  )  )  ;  return instance builder . build (  )  ;   }  ",672,3,instance,3,"[9, 35, 61, 86, 106, 154, 223, 292, 327, 352, 469, 494, 554, 634]"
2567,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BackUpRegistryTest.java,get amazon info,"private  amazon info   ( @ nullable  string availability zone  string instance host name )  {   amazon info .  builder az builder =  amazon info .  builder . new builder (  )  ;  az builder . add metadata (  amazon info .  meta data key . availability zone  ( null  =  =  availability zone )   ?  ""us - east - 1a"" : availability zone )  ;  az builder . add metadata (  amazon info .  meta data key . instance id instance host name )  ;  az builder . add metadata (  amazon info .  meta data key . ami id ""xxx"" )  ;  az builder . add metadata (  amazon info .  meta data key . instance type ""xxx"" )  ;  az builder . add metadata (  amazon info .  meta data key . local ipv4 ""xxx"" )  ;  az builder . add metadata (  amazon info .  meta data key . public ipv4 ""xxx"" )  ;  az builder . add metadata (  amazon info .  meta data key . public hostname instance host name )  ;  return az builder . build (  )  ;   }  ",909,3,get,1,[]
2568,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BackUpRegistryTest.java,get amazon info,"private  amazon info   ( @ nullable  string availability zone  string instance host name )  {   amazon info .  builder az builder =  amazon info .  builder . new builder (  )  ;  az builder . add metadata (  amazon info .  meta data key . availability zone  ( null  =  =  availability zone )   ?  ""us - east - 1a"" : availability zone )  ;  az builder . add metadata (  amazon info .  meta data key . instance id instance host name )  ;  az builder . add metadata (  amazon info .  meta data key . ami id ""xxx"" )  ;  az builder . add metadata (  amazon info .  meta data key . instance type ""xxx"" )  ;  az builder . add metadata (  amazon info .  meta data key . local ipv4 ""xxx"" )  ;  az builder . add metadata (  amazon info .  meta data key . public ipv4 ""xxx"" )  ;  az builder . add metadata (  amazon info .  meta data key . public hostname instance host name )  ;  return az builder . build (  )  ;   }  ",909,3,amazon,2,"[9, 96, 133, 208, 369, 466, 545, 631, 714, 798]"
2569,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BackUpRegistryTest.java,get amazon info,"private  amazon info   ( @ nullable  string availability zone  string instance host name )  {   amazon info .  builder az builder =  amazon info .  builder . new builder (  )  ;  az builder . add metadata (  amazon info .  meta data key . availability zone  ( null  =  =  availability zone )   ?  ""us - east - 1a"" : availability zone )  ;  az builder . add metadata (  amazon info .  meta data key . instance id instance host name )  ;  az builder . add metadata (  amazon info .  meta data key . ami id ""xxx"" )  ;  az builder . add metadata (  amazon info .  meta data key . instance type ""xxx"" )  ;  az builder . add metadata (  amazon info .  meta data key . local ipv4 ""xxx"" )  ;  az builder . add metadata (  amazon info .  meta data key . public ipv4 ""xxx"" )  ;  az builder . add metadata (  amazon info .  meta data key . public hostname instance host name )  ;  return az builder . build (  )  ;   }  ",909,3,info,3,"[16, 103, 140, 215, 376, 473, 552, 638, 721, 805]"
2570,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BackUpRegistryTest.java,get name,@ override public  name   (  )  {  return  name .  my own ;   }  ,65,2,get,1,[]
2571,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BackUpRegistryTest.java,get name,@ override public  name   (  )  {  return  name .  my own ;   }  ,65,2,name,2,"[19, 43]"
2572,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BackUpRegistryTest.java,set up,"public void   ( boolean enable remote )  throws  exception  {   configuration manager . get config instance (  )  . set property ( ""eureka . client . refresh . interval"" client   refresh   rate )  ;   configuration manager . get config instance (  )  . set property ( ""eureka . registration . enabled"" ""false"" )  ;  if  ( enable remote )   {   configuration manager . get config instance (  )  . set property ( ""eureka . fetch remote regions registry"" remote   region )  ;   }   configuration manager . get config instance (  )  . set property ( ""eureka . myregion . availability zones"" remote   zone )  ;   configuration manager . get config instance (  )  . set property ( ""eureka . backupregistry""  mock backup registry . class . get name (  )  )  ;   configuration manager . get config instance (  )  . set property ( ""eureka . service url . default"" ""http: /  / localhost:""  +  not   available   eureka   port  +   mock remote eureka server . eureka   api   base   path )  ;   instance info .  builder builder =  instance info .  builder . new builder (  )  ;  builder . setip addr ( ""10 . 10 . 101 . 00"" )  ;  builder . set host name ( "" hosttt"" )  ;  builder . set app name ( "" eureka test app - ""  +  uuid . randomuuid (  )  )  ;  builder . set data center info ( new  data center info (  )  {  @ override public  name get name (  )  {  return  name .  my own ;   }   }   )  ;   application info manager application info manager = new  application info manager ( new  my data center instance config (  )  builder . build (  )  )  ;  backup registry = new  mock backup registry (  )  ;  setup backup mock (  )  ;  client = new  discovery client ( application info manager new  default eureka client config (  )  null  providers . of (  (  backup registry ) backup registry )  )  ;   }  ",1793,2,set,1,"[116, 253, 396, 531, 660, 807, 1076, 1126, 1168, 1249, 1594]"
2573,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BackUpRegistryTest.java,set up,"public void   ( boolean enable remote )  throws  exception  {   configuration manager . get config instance (  )  . set property ( ""eureka . client . refresh . interval"" client   refresh   rate )  ;   configuration manager . get config instance (  )  . set property ( ""eureka . registration . enabled"" ""false"" )  ;  if  ( enable remote )   {   configuration manager . get config instance (  )  . set property ( ""eureka . fetch remote regions registry"" remote   region )  ;   }   configuration manager . get config instance (  )  . set property ( ""eureka . myregion . availability zones"" remote   zone )  ;   configuration manager . get config instance (  )  . set property ( ""eureka . backupregistry""  mock backup registry . class . get name (  )  )  ;   configuration manager . get config instance (  )  . set property ( ""eureka . service url . default"" ""http: /  / localhost:""  +  not   available   eureka   port  +   mock remote eureka server . eureka   api   base   path )  ;   instance info .  builder builder =  instance info .  builder . new builder (  )  ;  builder . setip addr ( ""10 . 10 . 101 . 00"" )  ;  builder . set host name ( "" hosttt"" )  ;  builder . set app name ( "" eureka test app - ""  +  uuid . randomuuid (  )  )  ;  builder . set data center info ( new  data center info (  )  {  @ override public  name get name (  )  {  return  name .  my own ;   }   }   )  ;   application info manager application info manager = new  application info manager ( new  my data center instance config (  )  builder . build (  )  )  ;  backup registry = new  mock backup registry (  )  ;  setup backup mock (  )  ;  client = new  discovery client ( application info manager new  default eureka client config (  )  null  providers . of (  (  backup registry ) backup registry )  )  ;   }  ",1793,2,up,2,"[689, 711, 1545, 1573, 1597, 1604, 1750, 1768]"
2574,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BackUpRegistryTest.java,setup backup mock,private void   (  )  {   application local app = create local apps (  )  ;   applications local apps = new  applications (  )  ;  local apps . add application ( local app )  ;  backup registry . set local region apps ( local apps )  ;   application remote app = create remote apps (  )  ;   applications remote apps = new  applications (  )  ;  remote apps . add application ( remote app )  ;  backup registry . get remote region vs apps (  )  . put ( remote   region remote apps )  ;   }  ,490,3,setup,1,[]
2575,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BackUpRegistryTest.java,setup backup mock,private void   (  )  {   application local app = create local apps (  )  ;   applications local apps = new  applications (  )  ;  local apps . add application ( local app )  ;  backup registry . set local region apps ( local apps )  ;   application remote app = create remote apps (  )  ;   applications remote apps = new  applications (  )  ;  remote apps . add application ( remote app )  ;  backup registry . get remote region vs apps (  )  . put ( remote   region remote apps )  ;   }  ,490,3,backup,2,"[177, 394]"
2576,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BackUpRegistryTest.java,setup backup mock,private void   (  )  {   application local app = create local apps (  )  ;   applications local apps = new  applications (  )  ;  local apps . add application ( local app )  ;  backup registry . set local region apps ( local apps )  ;   application remote app = create remote apps (  )  ;   applications remote apps = new  applications (  )  ;  remote apps . add application ( remote app )  ;  backup registry . get remote region vs apps (  )  . put ( remote   region remote apps )  ;   }  ,490,3,mock,3,[]
2577,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BackUpRegistryTest.java,tear down,@ after public void   (  )  throws  exception  {  client . shutdown (  )  ;   configuration manager . get config instance (  )  . clear (  )  ;   }  ,149,2,tear,1,[]
2578,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BackUpRegistryTest.java,tear down,@ after public void   (  )  throws  exception  {  client . shutdown (  )  ;   configuration manager . get config instance (  )  . clear (  )  ;   }  ,149,2,down,2,[63]
2579,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BackUpRegistryTest.java,test apps hash code,"@ test public void   (  )  throws  exception  {  set up ( true )  ;   applications applications = client . get applications (  )  ;   assert . assert equals ( ""up   1   "" applications . get apps hash code (  )  )  ;   }  ",221,4,test,1,[2]
2580,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BackUpRegistryTest.java,test apps hash code,"@ test public void   (  )  throws  exception  {  set up ( true )  ;   applications applications = client . get applications (  )  ;   assert . assert equals ( ""up   1   "" applications . get apps hash code (  )  )  ;   }  ",221,4,apps,2,[190]
2581,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BackUpRegistryTest.java,test apps hash code,"@ test public void   (  )  throws  exception  {  set up ( true )  ;   applications applications = client . get applications (  )  ;   assert . assert equals ( ""up   1   "" applications . get apps hash code (  )  )  ;   }  ",221,4,hash,3,[195]
2582,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BackUpRegistryTest.java,test apps hash code,"@ test public void   (  )  throws  exception  {  set up ( true )  ;   applications applications = client . get applications (  )  ;   assert . assert equals ( ""up   1   "" applications . get apps hash code (  )  )  ;   }  ",221,4,code,4,[200]
2583,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BackUpRegistryTest.java,test local only,@ test public void   (  )  throws  exception  {  set up ( false )  ;   applications applications = client . get applications (  )  ;   list <  application >  registered applications = applications . get registered applications (  )  ;   system . out . pri,255,3,test,1,[2]
2584,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BackUpRegistryTest.java,test local only,@ test public void   (  )  throws  exception  {  set up ( false )  ;   applications applications = client . get applications (  )  ;   list <  application >  registered applications = applications . get registered applications (  )  ;   system . out . pri,255,3,local,2,[]
2585,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BackUpRegistryTest.java,test local only,@ test public void   (  )  throws  exception  {  set up ( false )  ;   applications applications = client . get applications (  )  ;   list <  application >  registered applications = applications . get registered applications (  )  ;   system . out . pri,255,3,only,3,[]
2586,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BackUpRegistryTest.java,test remote enabled and queried,@ test public void   (  )  throws  exception  {  set up ( true )  ;   applications applications = client . get applications fora region ( remote   region )  ;   list <  application >  registered applications = applications . get registered applications ( ,255,5,test,1,[2]
2587,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BackUpRegistryTest.java,test remote enabled and queried,@ test public void   (  )  throws  exception  {  set up ( true )  ;   applications applications = client . get applications fora region ( remote   region )  ;   list <  application >  registered applications = applications . get registered applications ( ,255,5,remote,2,[138]
2588,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BackUpRegistryTest.java,test remote enabled and queried,@ test public void   (  )  throws  exception  {  set up ( true )  ;   applications applications = client . get applications fora region ( remote   region )  ;   list <  application >  registered applications = applications . get registered applications ( ,255,5,enabled,3,[]
2589,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BackUpRegistryTest.java,test remote enabled and queried,@ test public void   (  )  throws  exception  {  set up ( true )  ;   applications applications = client . get applications fora region ( remote   region )  ;   list <  application >  registered applications = applications . get registered applications ( ,255,5,and,4,[]
2590,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BackUpRegistryTest.java,test remote enabled and queried,@ test public void   (  )  throws  exception  {  set up ( true )  ;   applications applications = client . get applications fora region ( remote   region )  ;   list <  application >  registered applications = applications . get registered applications ( ,255,5,queried,5,[]
2591,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BackUpRegistryTest.java,test remote enabled but local only queried,@ test public void   (  )  throws  exception  {  set up ( true )  ;   applications applications = client . get applications (  )  ;   list <  application >  registered applications = applications . get registered applications (  )  ;   assert . assert not,255,7,test,1,[2]
2592,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BackUpRegistryTest.java,test remote enabled but local only queried,@ test public void   (  )  throws  exception  {  set up ( true )  ;   applications applications = client . get applications (  )  ;   list <  application >  registered applications = applications . get registered applications (  )  ;   assert . assert not,255,7,remote,2,[]
2593,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BackUpRegistryTest.java,test remote enabled but local only queried,@ test public void   (  )  throws  exception  {  set up ( true )  ;   applications applications = client . get applications (  )  ;   list <  application >  registered applications = applications . get registered applications (  )  ;   assert . assert not,255,7,enabled,3,[]
2594,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BackUpRegistryTest.java,test remote enabled but local only queried,@ test public void   (  )  throws  exception  {  set up ( true )  ;   applications applications = client . get applications (  )  ;   list <  application >  registered applications = applications . get registered applications (  )  ;   assert . assert not,255,7,but,4,[]
2595,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BackUpRegistryTest.java,test remote enabled but local only queried,@ test public void   (  )  throws  exception  {  set up ( true )  ;   applications applications = client . get applications (  )  ;   list <  application >  registered applications = applications . get registered applications (  )  ;   assert . assert not,255,7,local,5,[]
2596,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BackUpRegistryTest.java,test remote enabled but local only queried,@ test public void   (  )  throws  exception  {  set up ( true )  ;   applications applications = client . get applications (  )  ;   list <  application >  registered applications = applications . get registered applications (  )  ;   assert . assert not,255,7,only,6,[]
2597,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BackUpRegistryTest.java,test remote enabled but local only queried,@ test public void   (  )  throws  exception  {  set up ( true )  ;   applications applications = client . get applications (  )  ;   list <  application >  registered applications = applications . get registered applications (  )  ;   assert . assert not,255,7,queried,7,[]
2598,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\RefreshableAmazonInfoProviderTest.java,copy amazon info,private static  amazon info   (  instance info instance info )  {   amazon info curr info =  (  amazon info ) instance info . get data center info (  )  ;   amazon info copy info = new  amazon info (  )  ;  for  (   string key : curr info . get metadata (  )  . key set (  )  )   {  copy info . get metadata (  )  . put ( key curr info . get metadata (  )  . get ( key )  )  ;   }  return copy info ;   }  ,406,3,copy,1,"[169, 283, 389]"
2599,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\RefreshableAmazonInfoProviderTest.java,copy amazon info,private static  amazon info   (  instance info instance info )  {   amazon info curr info =  (  amazon info ) instance info . get data center info (  )  ;   amazon info copy info = new  amazon info (  )  ;  for  (   string key : curr info . get metadata (  )  . key set (  )  )   {  copy info . get metadata (  )  . put ( key curr info . get metadata (  )  . get ( key )  )  ;   }  return copy info ;   }  ,406,3,amazon,2,"[16, 68, 96, 157, 186]"
2600,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\RefreshableAmazonInfoProviderTest.java,copy amazon info,private static  amazon info   (  instance info instance info )  {   amazon info curr info =  (  amazon info ) instance info . get data center info (  )  ;   amazon info copy info = new  amazon info (  )  ;  for  (   string key : curr info . get metadata (  )  . key set (  )  )   {  copy info . get metadata (  )  . put ( key curr info . get metadata (  )  . get ( key )  )  ;   }  return copy info ;   }  ,406,3,info,3,"[23, 42, 56, 75, 85, 103, 119, 142, 164, 174, 193, 234, 288, 331, 394]"
2601,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\RefreshableAmazonInfoProviderTest.java,set up,@ before public void   (  )  {  instance info =  instance info generator . take one (  )  ;   }  ,97,2,set,1,[]
2602,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\RefreshableAmazonInfoProviderTest.java,set up,@ before public void   (  )  {  instance info =  instance info generator . take one (  )  ;   }  ,97,2,up,2,[]
2603,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\RefreshableAmazonInfoProviderTest.java,test amazon info no update if empty,@ test public void   (  )  {   amazon info old info =  (  amazon info ) instance info . get data center info (  )  ;   amazon info new info = new  amazon info (  )  ;  assert that (  refreshable amazon info provider . should update ( new info old info )  ,255,7,test,1,[2]
2604,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\RefreshableAmazonInfoProviderTest.java,test amazon info no update if empty,@ test public void   (  )  {   amazon info old info =  (  amazon info ) instance info . get data center info (  )  ;   amazon info new info = new  amazon info (  )  ;  assert that (  refreshable amazon info provider . should update ( new info old info )  ,255,7,amazon,2,"[31, 58, 119, 147, 195]"
2605,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\RefreshableAmazonInfoProviderTest.java,test amazon info no update if empty,@ test public void   (  )  {   amazon info old info =  (  amazon info ) instance info . get data center info (  )  ;   amazon info new info = new  amazon info (  )  ;  assert that (  refreshable amazon info provider . should update ( new info old info )  ,255,7,info,3,"[38, 47, 65, 81, 104, 126, 135, 154, 202, 238, 247]"
2606,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\RefreshableAmazonInfoProviderTest.java,test amazon info no update if empty,@ test public void   (  )  {   amazon info old info =  (  amazon info ) instance info . get data center info (  )  ;   amazon info new info = new  amazon info (  )  ;  assert that (  refreshable amazon info provider . should update ( new info old info )  ,255,7,no,4,[]
2607,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\RefreshableAmazonInfoProviderTest.java,test amazon info no update if empty,@ test public void   (  )  {   amazon info old info =  (  amazon info ) instance info . get data center info (  )  ;   amazon info new info = new  amazon info (  )  ;  assert that (  refreshable amazon info provider . should update ( new info old info )  ,255,7,update,5,[225]
2608,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\RefreshableAmazonInfoProviderTest.java,test amazon info no update if empty,@ test public void   (  )  {   amazon info old info =  (  amazon info ) instance info . get data center info (  )  ;   amazon info new info = new  amazon info (  )  ;  assert that (  refreshable amazon info provider . should update ( new info old info )  ,255,7,if,6,[]
2609,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\RefreshableAmazonInfoProviderTest.java,test amazon info no update if empty,@ test public void   (  )  {   amazon info old info =  (  amazon info ) instance info . get data center info (  )  ;   amazon info new info = new  amazon info (  )  ;  assert that (  refreshable amazon info provider . should update ( new info old info )  ,255,7,empty,7,[]
2610,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\RefreshableAmazonInfoProviderTest.java,test amazon info no update if equal,@ test public void   (  )  {   amazon info old info =  (  amazon info ) instance info . get data center info (  )  ;   amazon info new info = copy amazon info ( instance info )  ;  assert that (  refreshable amazon info provider . should update ( new info,255,7,test,1,[2]
2611,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\RefreshableAmazonInfoProviderTest.java,test amazon info no update if equal,@ test public void   (  )  {   amazon info old info =  (  amazon info ) instance info . get data center info (  )  ;   amazon info new info = copy amazon info ( instance info )  ;  assert that (  refreshable amazon info provider . should update ( new info,255,7,amazon,2,"[31, 58, 119, 147, 208]"
2612,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\RefreshableAmazonInfoProviderTest.java,test amazon info no update if equal,@ test public void   (  )  {   amazon info old info =  (  amazon info ) instance info . get data center info (  )  ;   amazon info new info = copy amazon info ( instance info )  ;  assert that (  refreshable amazon info provider . should update ( new info,255,7,info,3,"[38, 47, 65, 81, 104, 126, 135, 154, 170, 215, 251]"
2613,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\RefreshableAmazonInfoProviderTest.java,test amazon info no update if equal,@ test public void   (  )  {   amazon info old info =  (  amazon info ) instance info . get data center info (  )  ;   amazon info new info = copy amazon info ( instance info )  ;  assert that (  refreshable amazon info provider . should update ( new info,255,7,no,4,[]
2614,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\RefreshableAmazonInfoProviderTest.java,test amazon info no update if equal,@ test public void   (  )  {   amazon info old info =  (  amazon info ) instance info . get data center info (  )  ;   amazon info new info = copy amazon info ( instance info )  ;  assert that (  refreshable amazon info provider . should update ( new info,255,7,update,5,[238]
2615,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\RefreshableAmazonInfoProviderTest.java,test amazon info no update if equal,@ test public void   (  )  {   amazon info old info =  (  amazon info ) instance info . get data center info (  )  ;   amazon info new info = copy amazon info ( instance info )  ;  assert that (  refreshable amazon info provider . should update ( new info,255,7,if,6,[]
2616,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\RefreshableAmazonInfoProviderTest.java,test amazon info no update if equal,@ test public void   (  )  {   amazon info old info =  (  amazon info ) instance info . get data center info (  )  ;   amazon info new info = copy amazon info ( instance info )  ;  assert that (  refreshable amazon info provider . should update ( new info,255,7,equal,7,[]
2617,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\RefreshableAmazonInfoProviderTest.java,test amazon info no update if no instance id,@ test public void   (  )  {   amazon info old info =  (  amazon info ) instance info . get data center info (  )  ;   amazon info new info = copy amazon info ( instance info )  ;  new info . get metadata (  )  . remove ( instance id . get name (  )  )  ;,255,9,test,1,[2]
2618,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\RefreshableAmazonInfoProviderTest.java,test amazon info no update if no instance id,@ test public void   (  )  {   amazon info old info =  (  amazon info ) instance info . get data center info (  )  ;   amazon info new info = copy amazon info ( instance info )  ;  new info . get metadata (  )  . remove ( instance id . get name (  )  )  ;,255,9,amazon,2,"[31, 58, 119, 147]"
2619,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\RefreshableAmazonInfoProviderTest.java,test amazon info no update if no instance id,@ test public void   (  )  {   amazon info old info =  (  amazon info ) instance info . get data center info (  )  ;   amazon info new info = copy amazon info ( instance info )  ;  new info . get metadata (  )  . remove ( instance id . get name (  )  )  ;,255,9,info,3,"[38, 47, 65, 81, 104, 126, 135, 154, 170, 185]"
2620,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\RefreshableAmazonInfoProviderTest.java,test amazon info no update if no instance id,@ test public void   (  )  {   amazon info old info =  (  amazon info ) instance info . get data center info (  )  ;   amazon info new info = copy amazon info ( instance info )  ;  new info . get metadata (  )  . remove ( instance id . get name (  )  )  ;,255,9,no,4,[]
2621,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\RefreshableAmazonInfoProviderTest.java,test amazon info no update if no instance id,@ test public void   (  )  {   amazon info old info =  (  amazon info ) instance info . get data center info (  )  ;   amazon info new info = copy amazon info ( instance info )  ;  new info . get metadata (  )  . remove ( instance id . get name (  )  )  ;,255,9,update,5,[]
2622,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\RefreshableAmazonInfoProviderTest.java,test amazon info no update if no instance id,@ test public void   (  )  {   amazon info old info =  (  amazon info ) instance info . get data center info (  )  ;   amazon info new info = copy amazon info ( instance info )  ;  new info . get metadata (  )  . remove ( instance id . get name (  )  )  ;,255,9,if,6,[]
2623,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\RefreshableAmazonInfoProviderTest.java,test amazon info no update if no instance id,@ test public void   (  )  {   amazon info old info =  (  amazon info ) instance info . get data center info (  )  ;   amazon info new info = copy amazon info ( instance info )  ;  new info . get metadata (  )  . remove ( instance id . get name (  )  )  ;,255,9,no,7,[]
2624,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\RefreshableAmazonInfoProviderTest.java,test amazon info no update if no instance id,@ test public void   (  )  {   amazon info old info =  (  amazon info ) instance info . get data center info (  )  ;   amazon info new info = copy amazon info ( instance info )  ;  new info . get metadata (  )  . remove ( instance id . get name (  )  )  ;,255,9,instance,8,"[72, 161, 222]"
2625,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\RefreshableAmazonInfoProviderTest.java,test amazon info no update if no instance id,@ test public void   (  )  {   amazon info old info =  (  amazon info ) instance info . get data center info (  )  ;   amazon info new info = copy amazon info ( instance info )  ;  new info . get metadata (  )  . remove ( instance id . get name (  )  )  ;,255,9,id,9,"[16, 231]"
2626,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\RefreshableAmazonInfoProviderTest.java,test amazon info no update if no local ipv,@ test public void   (  )  {   amazon info old info =  (  amazon info ) instance info . get data center info (  )  ;   amazon info new info = copy amazon info ( instance info )  ;  new info . get metadata (  )  . remove ( local ipv4 . get name (  )  )  ; ,255,9,test,1,[2]
2627,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\RefreshableAmazonInfoProviderTest.java,test amazon info no update if no local ipv,@ test public void   (  )  {   amazon info old info =  (  amazon info ) instance info . get data center info (  )  ;   amazon info new info = copy amazon info ( instance info )  ;  new info . get metadata (  )  . remove ( local ipv4 . get name (  )  )  ; ,255,9,amazon,2,"[31, 58, 119, 147]"
2628,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\RefreshableAmazonInfoProviderTest.java,test amazon info no update if no local ipv,@ test public void   (  )  {   amazon info old info =  (  amazon info ) instance info . get data center info (  )  ;   amazon info new info = copy amazon info ( instance info )  ;  new info . get metadata (  )  . remove ( local ipv4 . get name (  )  )  ; ,255,9,info,3,"[38, 47, 65, 81, 104, 126, 135, 154, 170, 185]"
2629,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\RefreshableAmazonInfoProviderTest.java,test amazon info no update if no local ipv,@ test public void   (  )  {   amazon info old info =  (  amazon info ) instance info . get data center info (  )  ;   amazon info new info = copy amazon info ( instance info )  ;  new info . get metadata (  )  . remove ( local ipv4 . get name (  )  )  ; ,255,9,no,4,[]
2630,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\RefreshableAmazonInfoProviderTest.java,test amazon info no update if no local ipv,@ test public void   (  )  {   amazon info old info =  (  amazon info ) instance info . get data center info (  )  ;   amazon info new info = copy amazon info ( instance info )  ;  new info . get metadata (  )  . remove ( local ipv4 . get name (  )  )  ; ,255,9,update,5,[]
2631,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\RefreshableAmazonInfoProviderTest.java,test amazon info no update if no local ipv,@ test public void   (  )  {   amazon info old info =  (  amazon info ) instance info . get data center info (  )  ;   amazon info new info = copy amazon info ( instance info )  ;  new info . get metadata (  )  . remove ( local ipv4 . get name (  )  )  ; ,255,9,if,6,[]
2632,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\RefreshableAmazonInfoProviderTest.java,test amazon info no update if no local ipv,@ test public void   (  )  {   amazon info old info =  (  amazon info ) instance info . get data center info (  )  ;   amazon info new info = copy amazon info ( instance info )  ;  new info . get metadata (  )  . remove ( local ipv4 . get name (  )  )  ; ,255,9,no,7,[]
2633,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\RefreshableAmazonInfoProviderTest.java,test amazon info no update if no local ipv,@ test public void   (  )  {   amazon info old info =  (  amazon info ) instance info . get data center info (  )  ;   amazon info new info = copy amazon info ( instance info )  ;  new info . get metadata (  )  . remove ( local ipv4 . get name (  )  )  ; ,255,9,local,8,[222]
2634,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\RefreshableAmazonInfoProviderTest.java,test amazon info no update if no local ipv,@ test public void   (  )  {   amazon info old info =  (  amazon info ) instance info . get data center info (  )  ;   amazon info new info = copy amazon info ( instance info )  ;  new info . get metadata (  )  . remove ( local ipv4 . get name (  )  )  ; ,255,9,ipv,9,[228]
2635,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\RefreshableAmazonInfoProviderTest.java,test amazon info update positive case,@ test public void   (  )  {   amazon info old info =  (  amazon info ) instance info . get data center info (  )  ;   amazon info new info = copy amazon info ( instance info )  ;  new info . get metadata (  )  . remove ( ami id . get name (  )  )  ;  ass,255,6,test,1,[2]
2636,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\RefreshableAmazonInfoProviderTest.java,test amazon info update positive case,@ test public void   (  )  {   amazon info old info =  (  amazon info ) instance info . get data center info (  )  ;   amazon info new info = copy amazon info ( instance info )  ;  new info . get metadata (  )  . remove ( ami id . get name (  )  )  ;  ass,255,6,amazon,2,"[31, 58, 119, 147]"
2637,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\RefreshableAmazonInfoProviderTest.java,test amazon info update positive case,@ test public void   (  )  {   amazon info old info =  (  amazon info ) instance info . get data center info (  )  ;   amazon info new info = copy amazon info ( instance info )  ;  new info . get metadata (  )  . remove ( ami id . get name (  )  )  ;  ass,255,6,info,3,"[38, 47, 65, 81, 104, 126, 135, 154, 170, 185]"
2638,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\RefreshableAmazonInfoProviderTest.java,test amazon info update positive case,@ test public void   (  )  {   amazon info old info =  (  amazon info ) instance info . get data center info (  )  ;   amazon info new info = copy amazon info ( instance info )  ;  new info . get metadata (  )  . remove ( ami id . get name (  )  )  ;  ass,255,6,update,4,[]
2639,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\RefreshableAmazonInfoProviderTest.java,test amazon info update positive case,@ test public void   (  )  {   amazon info old info =  (  amazon info ) instance info . get data center info (  )  ;   amazon info new info = copy amazon info ( instance info )  ;  new info . get metadata (  )  . remove ( ami id . get name (  )  )  ;  ass,255,6,positive,5,[]
2640,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\RefreshableAmazonInfoProviderTest.java,test amazon info update positive case,@ test public void   (  )  {   amazon info old info =  (  amazon info ) instance info . get data center info (  )  ;   amazon info new info = copy amazon info ( instance info )  ;  new info . get metadata (  )  . remove ( ami id . get name (  )  )  ;  ass,255,6,case,6,[]
2641,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\InstanceInfoTest.java,get name,public  data center info .  name   (  )  {  return  data center info .  name .  my own ;   }  ,94,2,get,1,[]
2642,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\InstanceInfoTest.java,get name,public  data center info .  name   (  )  {  return  data center info .  name .  my own ;   }  ,94,2,name,2,"[28, 72]"
2643,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\InstanceInfoTest.java,tear down,"@ after public void   (  )  throws  exception  {   (  (  concurrent composite configuration )  configuration manager . get config instance (  )  )  . clear override property ( ""netflix   app   group"" )  ;   (  (  concurrent composite configuration )  conf",255,2,tear,1,[]
2644,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\InstanceInfoTest.java,tear down,"@ after public void   (  )  throws  exception  {   (  (  concurrent composite configuration )  configuration manager . get config instance (  )  )  . clear override property ( ""netflix   app   group"" )  ;   (  (  concurrent composite configuration )  conf",255,2,down,2,[]
2645,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\InstanceInfoTest.java,test app group name,"@ test public void   (  )  throws  exception  {   string app group = ""test app group"" ;   (  (  concurrent composite configuration )  configuration manager . get config instance (  )  )  . set override property ( ""eureka . app group"" app group )  ;   my d",255,4,test,1,"[2, 70]"
2646,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\InstanceInfoTest.java,test app group name,"@ test public void   (  )  throws  exception  {   string app group = ""test app group"" ;   (  (  concurrent composite configuration )  configuration manager . get config instance (  )  )  . set override property ( ""eureka . app group"" app group )  ;   my d",255,4,app,2,"[57, 75, 223, 234]"
2647,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\InstanceInfoTest.java,test app group name,"@ test public void   (  )  throws  exception  {   string app group = ""test app group"" ;   (  (  concurrent composite configuration )  configuration manager . get config instance (  )  )  . set override property ( ""eureka . app group"" app group )  ;   my d",255,4,group,3,"[61, 79, 227, 238]"
2648,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\InstanceInfoTest.java,test app group name,"@ test public void   (  )  throws  exception  {   string app group = ""test app group"" ;   (  (  concurrent composite configuration )  configuration manager . get config instance (  )  )  . set override property ( ""eureka . app group"" app group )  ;   my d",255,4,name,4,[]
2649,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\InstanceInfoTest.java,test app group name system prop,"@ test public void   (  )  throws  exception  {   string app group = ""test app group system prop"" ;   (  (  concurrent composite configuration )  configuration manager . get config instance (  )  )  . set override property ( ""netflix   app   group"" app gr",255,6,test,1,"[2, 70]"
2650,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\InstanceInfoTest.java,test app group name system prop,"@ test public void   (  )  throws  exception  {   string app group = ""test app group system prop"" ;   (  (  concurrent composite configuration )  configuration manager . get config instance (  )  )  . set override property ( ""netflix   app   group"" app gr",255,6,app,2,"[57, 75, 236, 249]"
2651,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\InstanceInfoTest.java,test app group name system prop,"@ test public void   (  )  throws  exception  {   string app group = ""test app group system prop"" ;   (  (  concurrent composite configuration )  configuration manager . get config instance (  )  )  . set override property ( ""netflix   app   group"" app gr",255,6,group,3,"[61, 79, 242]"
2652,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\InstanceInfoTest.java,test app group name system prop,"@ test public void   (  )  throws  exception  {   string app group = ""test app group system prop"" ;   (  (  concurrent composite configuration )  configuration manager . get config instance (  )  )  . set override property ( ""netflix   app   group"" app gr",255,6,name,4,[]
2653,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\InstanceInfoTest.java,test app group name system prop,"@ test public void   (  )  throws  exception  {   string app group = ""test app group system prop"" ;   (  (  concurrent composite configuration )  configuration manager . get config instance (  )  )  . set override property ( ""netflix   app   group"" app gr",255,6,system,5,[85]
2654,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\InstanceInfoTest.java,test app group name system prop,"@ test public void   (  )  throws  exception  {   string app group = ""test app group system prop"" ;   (  (  concurrent composite configuration )  configuration manager . get config instance (  )  )  . set override property ( ""netflix   app   group"" app gr",255,6,prop,6,"[92, 214]"
2655,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\InstanceInfoTest.java,test copy constructor,@ test public void   (  )  {   data center info mydci = new  data center info (  )  {  public  data center info .  name get name (  )  {  return  data center info .  name .  my own ;   }   }   ;   instance info smallii1 = new builder (  )  . set app name ,255,3,test,1,[2]
2656,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\InstanceInfoTest.java,test copy constructor,@ test public void   (  )  {   data center info mydci = new  data center info (  )  {  public  data center info .  name get name (  )  {  return  data center info .  name .  my own ;   }   }   ;   instance info smallii1 = new builder (  )  . set app name ,255,3,copy,2,[]
2657,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\InstanceInfoTest.java,test copy constructor,@ test public void   (  )  {   data center info mydci = new  data center info (  )  {  public  data center info .  name get name (  )  {  return  data center info .  name .  my own ;   }   }   ;   instance info smallii1 = new builder (  )  . set app name ,255,3,constructor,3,[]
2658,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\InstanceInfoTest.java,test get id with instance id not used,"@ test public void   (  )  {   instance info baseline =  instance info generator . take one (  )  ;   instance info instance info1 = new  instance info .  builder ( baseline )  . set instance id ( """" )  . build (  )  ;   string data center info id =  (  (",255,8,test,1,[2]
2659,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\InstanceInfoTest.java,test get id with instance id not used,"@ test public void   (  )  {   instance info baseline =  instance info generator . take one (  )  ;   instance info instance info1 = new  instance info .  builder ( baseline )  . set instance id ( """" )  . build (  )  ;   string data center info id =  (  (",255,8,get,2,[]
2660,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\InstanceInfoTest.java,test get id with instance id not used,"@ test public void   (  )  {   instance info baseline =  instance info generator . take one (  )  ;   instance info instance info1 = new  instance info .  builder ( baseline )  . set instance id ( """" )  . build (  )  ;   string data center info id =  (  (",255,8,id,3,"[16, 192, 245]"
2661,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\InstanceInfoTest.java,test get id with instance id not used,"@ test public void   (  )  {   instance info baseline =  instance info generator . take one (  )  ;   instance info instance info1 = new  instance info .  builder ( baseline )  . set instance id ( """" )  . build (  )  ;   string data center info id =  (  (",255,8,with,4,[]
2662,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\InstanceInfoTest.java,test get id with instance id not used,"@ test public void   (  )  {   instance info baseline =  instance info generator . take one (  )  ;   instance info instance info1 = new  instance info .  builder ( baseline )  . set instance id ( """" )  . build (  )  ;   string data center info id =  (  (",255,8,instance,5,"[31, 57, 102, 116, 138, 183]"
2663,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\InstanceInfoTest.java,test get id with instance id not used,"@ test public void   (  )  {   instance info baseline =  instance info generator . take one (  )  ;   instance info instance info1 = new  instance info .  builder ( baseline )  . set instance id ( """" )  . build (  )  ;   string data center info id =  (  (",255,8,id,6,"[16, 192, 245]"
2664,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\InstanceInfoTest.java,test get id with instance id not used,"@ test public void   (  )  {   instance info baseline =  instance info generator . take one (  )  ;   instance info instance info1 = new  instance info .  builder ( baseline )  . set instance id ( """" )  . build (  )  ;   string data center info id =  (  (",255,8,not,7,[]
2665,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\InstanceInfoTest.java,test get id with instance id not used,"@ test public void   (  )  {   instance info baseline =  instance info generator . take one (  )  ;   instance info instance info1 = new  instance info .  builder ( baseline )  . set instance id ( """" )  . build (  )  ;   string data center info id =  (  (",255,8,used,8,[]
2666,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\InstanceInfoTest.java,test get id with instance id used,@ test public void   (  )  {   instance info baseline =  instance info generator . take one (  )  ;   string data center info id =  (  (  unique identifier ) baseline . get data center info (  )  )  . get id (  )  ;  assert that ( baseline . get instance ,255,7,test,1,[2]
2667,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\InstanceInfoTest.java,test get id with instance id used,@ test public void   (  )  {   instance info baseline =  instance info generator . take one (  )  ;   string data center info id =  (  (  unique identifier ) baseline . get data center info (  )  )  . get id (  )  ;  assert that ( baseline . get instance ,255,7,get,2,"[169, 201, 242]"
2668,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\InstanceInfoTest.java,test get id with instance id used,@ test public void   (  )  {   instance info baseline =  instance info generator . take one (  )  ;   string data center info id =  (  (  unique identifier ) baseline . get data center info (  )  )  . get id (  )  ;  assert that ( baseline . get instance ,255,7,id,3,"[16, 126, 145, 205]"
2669,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\InstanceInfoTest.java,test get id with instance id used,@ test public void   (  )  {   instance info baseline =  instance info generator . take one (  )  ;   string data center info id =  (  (  unique identifier ) baseline . get data center info (  )  )  . get id (  )  ;  assert that ( baseline . get instance ,255,7,with,4,[]
2670,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\InstanceInfoTest.java,test get id with instance id used,@ test public void   (  )  {   instance info baseline =  instance info generator . take one (  )  ;   string data center info id =  (  (  unique identifier ) baseline . get data center info (  )  )  . get id (  )  ;  assert that ( baseline . get instance ,255,7,instance,5,"[31, 57, 246]"
2671,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\InstanceInfoTest.java,test get id with instance id used,@ test public void   (  )  {   instance info baseline =  instance info generator . take one (  )  ;   string data center info id =  (  (  unique identifier ) baseline . get data center info (  )  )  . get id (  )  ;  assert that ( baseline . get instance ,255,7,id,6,"[16, 126, 145, 205]"
2672,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\InstanceInfoTest.java,test get id with instance id used,@ test public void   (  )  {   instance info baseline =  instance info generator . take one (  )  ;   string data center info id =  (  (  unique identifier ) baseline . get data center info (  )  )  . get id (  )  ;  assert that ( baseline . get instance ,255,7,used,7,[]
2673,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\InstanceInfoTest.java,test health check set contains valid url entries,"@ test public void   (  )  throws  exception  {   builder builder = new builder (  )  . set app name ( ""test"" )  . set namespace ( ""eureka . "" )  . set host name ( ""localhost"" )  . set port ( 80 )  . set secure port ( 443 )  . enable port (  port type . s",255,8,test,1,"[2, 104]"
2674,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\InstanceInfoTest.java,test health check set contains valid url entries,"@ test public void   (  )  throws  exception  {   builder builder = new builder (  )  . set app name ( ""test"" )  . set namespace ( ""eureka . "" )  . set host name ( ""localhost"" )  . set port ( 80 )  . set secure port ( 443 )  . enable port (  port type . s",255,8,health,2,[]
2675,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\InstanceInfoTest.java,test health check set contains valid url entries,"@ test public void   (  )  throws  exception  {   builder builder = new builder (  )  . set app name ( ""test"" )  . set namespace ( ""eureka . "" )  . set host name ( ""localhost"" )  . set port ( 80 )  . set secure port ( 443 )  . enable port (  port type . s",255,8,check,3,[]
2676,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\InstanceInfoTest.java,test health check set contains valid url entries,"@ test public void   (  )  throws  exception  {   builder builder = new builder (  )  . set app name ( ""test"" )  . set namespace ( ""eureka . "" )  . set host name ( ""localhost"" )  . set port ( 80 )  . set secure port ( 443 )  . enable port (  port type . s",255,8,set,4,"[88, 115, 148, 181, 200]"
2677,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\InstanceInfoTest.java,test health check set contains valid url entries,"@ test public void   (  )  throws  exception  {   builder builder = new builder (  )  . set app name ( ""test"" )  . set namespace ( ""eureka . "" )  . set host name ( ""localhost"" )  . set port ( 80 )  . set secure port ( 443 )  . enable port (  port type . s",255,8,contains,5,[]
2678,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\InstanceInfoTest.java,test health check set contains valid url entries,"@ test public void   (  )  throws  exception  {   builder builder = new builder (  )  . set app name ( ""test"" )  . set namespace ( ""eureka . "" )  . set host name ( ""localhost"" )  . set port ( 80 )  . set secure port ( 443 )  . enable port (  port type . s",255,8,valid,6,[]
2679,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\InstanceInfoTest.java,test health check set contains valid url entries,"@ test public void   (  )  throws  exception  {   builder builder = new builder (  )  . set app name ( ""test"" )  . set namespace ( ""eureka . "" )  . set host name ( ""localhost"" )  . set port ( 80 )  . set secure port ( 443 )  . enable port (  port type . s",255,8,url,7,[]
2680,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\InstanceInfoTest.java,test health check set contains valid url entries,"@ test public void   (  )  throws  exception  {   builder builder = new builder (  )  . set app name ( ""test"" )  . set namespace ( ""eureka . "" )  . set host name ( ""localhost"" )  . set port ( 80 )  . set secure port ( 443 )  . enable port (  port type . s",255,8,entries,8,[]
2681,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EnumLookupTest.java, test enum,private   (  string name )  {  this . name = name ;   }  ,57,2,test,1,[]
2682,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EnumLookupTest.java, test enum,private   (  string name )  {  this . name = name ;   }  ,57,2,enum,2,[]
2683,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EnumLookupTest.java,test lookup,"@ test public void   (  )  {   enum lookup <  test enum >  lookup = new  enum lookup <  >  (  test enum . class v  -  >  v . name . to char array (  )  )  ;  char[] buffer = ""zeroonetwothreefour"" . to char array (  )  ;   assert . assert same (  test enum",255,2,test,1,"[2, 46, 94, 246]"
2684,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EnumLookupTest.java,test lookup,"@ test public void   (  )  {   enum lookup <  test enum >  lookup = new  enum lookup <  >  (  test enum . class v  -  >  v . name . to char array (  )  )  ;  char[] buffer = ""zeroonetwothreefour"" . to char array (  )  ;   assert . assert same (  test enum",255,2,lookup,2,"[36, 59, 78]"
2685,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BaseDiscoveryClientTester.java,add local app delta,protected void   (  )  {   application myapp delta = new  application ( local   region   app3   name )  ;   instance info instance info = create instance ( local   region   app3   name all   regions   vip3   addr local   region   app3   instance1   hostname null )  ;  instance info . set action type (  instance info .  action type . added )  ;  myapp delta . add instance ( instance info )  ;  mock local eureka server . add local region apps delta ( local   region   app3   name myapp delta )  ;   }  ,504,4,add,1,"[208, 335, 361, 423]"
2686,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BaseDiscoveryClientTester.java,add local app delta,protected void   (  )  {   application myapp delta = new  application ( local   region   app3   name )  ;   instance info instance info = create instance ( local   region   app3   name all   regions   vip3   addr local   region   app3   instance1   hostname null )  ;  instance info . set action type (  instance info .  action type . added )  ;  myapp delta . add instance ( instance info )  ;  mock local eureka server . add local region apps delta ( local   region   app3   name myapp delta )  ;   }  ,504,4,local,2,"[72, 156, 213, 401, 427, 453]"
2687,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BaseDiscoveryClientTester.java,add local app delta,protected void   (  )  {   application myapp delta = new  application ( local   region   app3   name )  ;   instance info instance info = create instance ( local   region   app3   name all   regions   vip3   addr local   region   app3   instance1   hostname null )  ;  instance info . set action type (  instance info .  action type . added )  ;  myapp delta . add instance ( instance info )  ;  mock local eureka server . add local region apps delta ( local   region   app3   name myapp delta )  ;   }  ,504,4,app,3,"[27, 41, 58, 89, 173, 230, 349, 440, 470, 484]"
2688,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BaseDiscoveryClientTester.java,add local app delta,protected void   (  )  {   application myapp delta = new  application ( local   region   app3   name )  ;   instance info instance info = create instance ( local   region   app3   name all   regions   vip3   addr local   region   app3   instance1   hostname null )  ;  instance info . set action type (  instance info .  action type . added )  ;  myapp delta . add instance ( instance info )  ;  mock local eureka server . add local region apps delta ( local   region   app3   name myapp delta )  ;   }  ,504,4,delta,4,"[45, 353, 445, 488]"
2689,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BaseDiscoveryClientTester.java,create instance,"protected static  instance info   (  string app name  string vip address  string instance host name  string zone )  {   instance info .  builder instance builder =  instance info .  builder . new builder (  )  ;  instance builder . set app name ( app name )  ;  instance builder . setvip address ( vip address )  ;  instance builder . set host name ( instance host name )  ;  instance builder . setip addr ( ""10 . 10 . 101 . 1"" )  ;   amazon info amazon info = get amazon info ( zone instance host name )  ;  instance builder . set data center info ( amazon info )  ;  instance builder . set metadata ( amazon info . get metadata (  )  )  ;  instance builder . set lease info (  lease info .  builder . new builder (  )  . build (  )  )  ;  return instance builder . build (  )  ;   }  ",786,2,create,1,[]
2690,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BaseDiscoveryClientTester.java,create instance,"protected static  instance info   (  string app name  string vip address  string instance host name  string zone )  {   instance info .  builder instance builder =  instance info .  builder . new builder (  )  ;  instance builder . set app name ( app name )  ;  instance builder . setvip address ( vip address )  ;  instance builder . set host name ( instance host name )  ;  instance builder . setip addr ( ""10 . 10 . 101 . 1"" )  ;   amazon info amazon info = get amazon info ( zone instance host name )  ;  instance builder . set data center info ( amazon info )  ;  instance builder . set metadata ( amazon info . get metadata (  )  )  ;  instance builder . set lease info (  lease info .  builder . new builder (  )  . build (  )  )  ;  return instance builder . build (  )  ;   }  ",786,2,instance,2,"[18, 81, 120, 145, 165, 213, 262, 316, 351, 376, 484, 509, 569, 642, 748]"
2691,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BaseDiscoveryClientTester.java,create local apps,protected static  list <  application >    (  )  {   application myapp1 = new  application ( local   region   app1   name )  ;   instance info instance info1 = create instance ( local   region   app1   name all   regions   vip1   addr local   region   app1   instance1   hostname null )  ;  myapp1 . add instance ( instance info1 )  ;   application myapp2 = new  application ( local   region   app2   name )  ;   instance info instance info2 = create instance ( local   region   app2   name all   regions   vip2   addr local   region   app2   instance1   hostname null )  ;  myapp2 . add instance ( instance info2 )  ;  return  arrays . as list ( myapp1 myapp2 )  ;   }  ,671,3,create,1,"[160, 444]"
2692,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BaseDiscoveryClientTester.java,create local apps,protected static  list <  application >    (  )  {   application myapp1 = new  application ( local   region   app1   name )  ;   instance info instance info1 = create instance ( local   region   app1   name all   regions   vip1   addr local   region   app1   instance1   hostname null )  ;  myapp1 . add instance ( instance info1 )  ;   application myapp2 = new  application ( local   region   app2   name )  ;   instance info instance info2 = create instance ( local   region   app2   name all   regions   vip2   addr local   region   app2   instance1   hostname null )  ;  myapp2 . add instance ( instance info2 )  ;  return  arrays . as list ( myapp1 myapp2 )  ;   }  ,671,3,local,2,"[93, 178, 235, 377, 462, 519]"
2693,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BaseDiscoveryClientTester.java,create local apps,protected static  list <  application >    (  )  {   application myapp1 = new  application ( local   region   app1   name )  ;   instance info instance info1 = create instance ( local   region   app1   name all   regions   vip1   addr local   region   app1   instance1   hostname null )  ;  myapp1 . add instance ( instance info1 )  ;   application myapp2 = new  application ( local   region   app2   name )  ;   instance info instance info2 = create instance ( local   region   app2   name all   regions   vip2   addr local   region   app2   instance1   hostname null )  ;  myapp2 . add instance ( instance info2 )  ;  return  arrays . as list ( myapp1 myapp2 )  ;   }  ,671,3,apps,3,[]
2694,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BaseDiscoveryClientTester.java,create local apps delta,protected static  list <  application >    (  )  {   application myapp1 = new  application ( local   region   app1   name )  ;   instance info instance info1 = create instance ( local   region   app1   name all   regions   vip1   addr local   region   app1   instance2   hostname null )  ;  instance info1 . set action type (  instance info .  action type . added )  ;  myapp1 . add instance ( instance info1 )  ;   application myapp2 = new  application ( local   region   app2   name )  ;   instance info instance info2 = create instance ( local   region   app2   name all   regions   vip2   addr local   region   app2   instance2   hostname null )  ;  instance info2 . set action type (  instance info .  action type . added )  ;  myapp2 . add instance ( instance info2 )  ;  return  arrays . as list ( myapp1 myapp2 )  ;   }  ,829,4,create,1,"[160, 523]"
2695,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BaseDiscoveryClientTester.java,create local apps delta,protected static  list <  application >    (  )  {   application myapp1 = new  application ( local   region   app1   name )  ;   instance info instance info1 = create instance ( local   region   app1   name all   regions   vip1   addr local   region   app1   instance2   hostname null )  ;  instance info1 . set action type (  instance info .  action type . added )  ;  myapp1 . add instance ( instance info1 )  ;   application myapp2 = new  application ( local   region   app2   name )  ;   instance info instance info2 = create instance ( local   region   app2   name all   regions   vip2   addr local   region   app2   instance2   hostname null )  ;  instance info2 . set action type (  instance info .  action type . added )  ;  myapp2 . add instance ( instance info2 )  ;  return  arrays . as list ( myapp1 myapp2 )  ;   }  ,829,4,local,2,"[93, 178, 235, 456, 541, 598]"
2696,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BaseDiscoveryClientTester.java,create local apps delta,protected static  list <  application >    (  )  {   application myapp1 = new  application ( local   region   app1   name )  ;   instance info instance info1 = create instance ( local   region   app1   name all   regions   vip1   addr local   region   app1   instance2   hostname null )  ;  instance info1 . set action type (  instance info .  action type . added )  ;  myapp1 . add instance ( instance info1 )  ;   application myapp2 = new  application ( local   region   app2   name )  ;   instance info instance info2 = create instance ( local   region   app2   name all   regions   vip2   addr local   region   app2   instance2   hostname null )  ;  instance info2 . set action type (  instance info .  action type . added )  ;  myapp2 . add instance ( instance info2 )  ;  return  arrays . as list ( myapp1 myapp2 )  ;   }  ,829,4,apps,3,[]
2697,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BaseDiscoveryClientTester.java,create local apps delta,protected static  list <  application >    (  )  {   application myapp1 = new  application ( local   region   app1   name )  ;   instance info instance info1 = create instance ( local   region   app1   name all   regions   vip1   addr local   region   app1   instance2   hostname null )  ;  instance info1 . set action type (  instance info .  action type . added )  ;  myapp1 . add instance ( instance info1 )  ;   application myapp2 = new  application ( local   region   app2   name )  ;   instance info instance info2 = create instance ( local   region   app2   name all   regions   vip2   addr local   region   app2   instance2   hostname null )  ;  instance info2 . set action type (  instance info .  action type . added )  ;  myapp2 . add instance ( instance info2 )  ;  return  arrays . as list ( myapp1 myapp2 )  ;   }  ,829,4,delta,4,[]
2698,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BaseDiscoveryClientTester.java,create remote apps,protected static  list <  application >    (  )  {   application myapp1 = new  application ( remote   region   app1   name )  ;   instance info instance info1 = create instance ( remote   region   app1   name all   regions   vip1   addr remote   region   app1   instance1   hostname remote   zone )  ;  myapp1 . add instance ( instance info1 )  ;   application myapp2 = new  application ( remote   region   app2   name )  ;   instance info instance info2 = create instance ( remote   region   app2   name all   regions   vip2   addr remote   region   app2   instance1   hostname remote   zone )  ;  myapp2 . add instance ( instance info2 )  ;  return  arrays . as list ( myapp1 myapp2 )  ;   }  ,695,3,create,1,"[161, 457]"
2699,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BaseDiscoveryClientTester.java,create remote apps,protected static  list <  application >    (  )  {   application myapp1 = new  application ( remote   region   app1   name )  ;   instance info instance info1 = create instance ( remote   region   app1   name all   regions   vip1   addr remote   region   app1   instance1   hostname remote   zone )  ;  myapp1 . add instance ( instance info1 )  ;   application myapp2 = new  application ( remote   region   app2   name )  ;   instance info instance info2 = create instance ( remote   region   app2   name all   regions   vip2   addr remote   region   app2   instance1   hostname remote   zone )  ;  myapp2 . add instance ( instance info2 )  ;  return  arrays . as list ( myapp1 myapp2 )  ;   }  ,695,3,remote,2,"[93, 179, 237, 283, 389, 475, 533, 579]"
2700,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BaseDiscoveryClientTester.java,create remote apps,protected static  list <  application >    (  )  {   application myapp1 = new  application ( remote   region   app1   name )  ;   instance info instance info1 = create instance ( remote   region   app1   name all   regions   vip1   addr remote   region   app1   instance1   hostname remote   zone )  ;  myapp1 . add instance ( instance info1 )  ;   application myapp2 = new  application ( remote   region   app2   name )  ;   instance info instance info2 = create instance ( remote   region   app2   name all   regions   vip2   addr remote   region   app2   instance1   hostname remote   zone )  ;  myapp2 . add instance ( instance info2 )  ;  return  arrays . as list ( myapp1 myapp2 )  ;   }  ,695,3,apps,3,[]
2701,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BaseDiscoveryClientTester.java,create remote apps delta,protected static  list <  application >    (  )  {   application myapp1 = new  application ( remote   region   app1   name )  ;   instance info instance info1 = create instance ( remote   region   app1   name all   regions   vip1   addr remote   region   app1   instance2   hostname remote   zone )  ;  instance info1 . set action type (  instance info .  action type . added )  ;  myapp1 . add instance ( instance info1 )  ;   application myapp2 = new  application ( remote   region   app2   name )  ;   instance info instance info2 = create instance ( remote   region   app2   name all   regions   vip2   addr remote   region   app2   instance2   hostname remote   zone )  ;  instance info2 . set action type (  instance info .  action type . added )  ;  myapp2 . add instance ( instance info2 )  ;  return  arrays . as list ( myapp1 myapp2 )  ;   }  ,853,4,create,1,"[161, 536]"
2702,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BaseDiscoveryClientTester.java,create remote apps delta,protected static  list <  application >    (  )  {   application myapp1 = new  application ( remote   region   app1   name )  ;   instance info instance info1 = create instance ( remote   region   app1   name all   regions   vip1   addr remote   region   app1   instance2   hostname remote   zone )  ;  instance info1 . set action type (  instance info .  action type . added )  ;  myapp1 . add instance ( instance info1 )  ;   application myapp2 = new  application ( remote   region   app2   name )  ;   instance info instance info2 = create instance ( remote   region   app2   name all   regions   vip2   addr remote   region   app2   instance2   hostname remote   zone )  ;  instance info2 . set action type (  instance info .  action type . added )  ;  myapp2 . add instance ( instance info2 )  ;  return  arrays . as list ( myapp1 myapp2 )  ;   }  ,853,4,remote,2,"[93, 179, 237, 283, 468, 554, 612, 658]"
2703,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BaseDiscoveryClientTester.java,create remote apps delta,protected static  list <  application >    (  )  {   application myapp1 = new  application ( remote   region   app1   name )  ;   instance info instance info1 = create instance ( remote   region   app1   name all   regions   vip1   addr remote   region   app1   instance2   hostname remote   zone )  ;  instance info1 . set action type (  instance info .  action type . added )  ;  myapp1 . add instance ( instance info1 )  ;   application myapp2 = new  application ( remote   region   app2   name )  ;   instance info instance info2 = create instance ( remote   region   app2   name all   regions   vip2   addr remote   region   app2   instance2   hostname remote   zone )  ;  instance info2 . set action type (  instance info .  action type . added )  ;  myapp2 . add instance ( instance info2 )  ;  return  arrays . as list ( myapp1 myapp2 )  ;   }  ,853,4,apps,3,[]
2704,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BaseDiscoveryClientTester.java,create remote apps delta,protected static  list <  application >    (  )  {   application myapp1 = new  application ( remote   region   app1   name )  ;   instance info instance info1 = create instance ( remote   region   app1   name all   regions   vip1   addr remote   region   app1   instance2   hostname remote   zone )  ;  instance info1 . set action type (  instance info .  action type . added )  ;  myapp1 . add instance ( instance info1 )  ;   application myapp2 = new  application ( remote   region   app2   name )  ;   instance info instance info2 = create instance ( remote   region   app2   name all   regions   vip2   addr remote   region   app2   instance2   hostname remote   zone )  ;  instance info2 . set action type (  instance info .  action type . added )  ;  myapp2 . add instance ( instance info2 )  ;  return  arrays . as list ( myapp1 myapp2 )  ;   }  ,853,4,delta,4,[]
2705,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BaseDiscoveryClientTester.java,get amazon info,"protected static  amazon info   ( @ nullable  string availability zone  string instance host name )  {   amazon info .  builder az builder =  amazon info .  builder . new builder (  )  ;  az builder . add metadata (  amazon info .  meta data key . availability zone null  =  =  availability zone  ?  ""us - east - 1a"" : availability zone )  ;  az builder . add metadata (  amazon info .  meta data key . instance id instance host name )  ;  az builder . add metadata (  amazon info .  meta data key . ami id ""xxx"" )  ;  az builder . add metadata (  amazon info .  meta data key . instance type ""xxx"" )  ;  az builder . add metadata (  amazon info .  meta data key . local ipv4 ""xxx"" )  ;  az builder . add metadata (  amazon info .  meta data key . public ipv4 ""xxx"" )  ;  az builder . add metadata (  amazon info .  meta data key . public hostname instance host name )  ;  return az builder . build (  )  ;   }  ",912,3,get,1,[]
2706,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BaseDiscoveryClientTester.java,get amazon info,"protected static  amazon info   ( @ nullable  string availability zone  string instance host name )  {   amazon info .  builder az builder =  amazon info .  builder . new builder (  )  ;  az builder . add metadata (  amazon info .  meta data key . availability zone null  =  =  availability zone  ?  ""us - east - 1a"" : availability zone )  ;  az builder . add metadata (  amazon info .  meta data key . instance id instance host name )  ;  az builder . add metadata (  amazon info .  meta data key . ami id ""xxx"" )  ;  az builder . add metadata (  amazon info .  meta data key . instance type ""xxx"" )  ;  az builder . add metadata (  amazon info .  meta data key . local ipv4 ""xxx"" )  ;  az builder . add metadata (  amazon info .  meta data key . public ipv4 ""xxx"" )  ;  az builder . add metadata (  amazon info .  meta data key . public hostname instance host name )  ;  return az builder . build (  )  ;   }  ",912,3,amazon,2,"[18, 105, 142, 217, 372, 469, 548, 634, 717, 801]"
2707,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BaseDiscoveryClientTester.java,get amazon info,"protected static  amazon info   ( @ nullable  string availability zone  string instance host name )  {   amazon info .  builder az builder =  amazon info .  builder . new builder (  )  ;  az builder . add metadata (  amazon info .  meta data key . availability zone null  =  =  availability zone  ?  ""us - east - 1a"" : availability zone )  ;  az builder . add metadata (  amazon info .  meta data key . instance id instance host name )  ;  az builder . add metadata (  amazon info .  meta data key . ami id ""xxx"" )  ;  az builder . add metadata (  amazon info .  meta data key . instance type ""xxx"" )  ;  az builder . add metadata (  amazon info .  meta data key . local ipv4 ""xxx"" )  ;  az builder . add metadata (  amazon info .  meta data key . public ipv4 ""xxx"" )  ;  az builder . add metadata (  amazon info .  meta data key . public hostname instance host name )  ;  return az builder . build (  )  ;   }  ",912,3,info,3,"[25, 112, 149, 224, 379, 476, 555, 641, 724, 808]"
2708,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BaseDiscoveryClientTester.java,new instance info builder,protected  instance info .  builder   ( int renewal interval in secs )  {  return  discovery client resource . new instance info builder ( renewal interval in secs )  ;   }  ,174,4,new,1,"[46, 111, 141]"
2709,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BaseDiscoveryClientTester.java,new instance info builder,protected  instance info .  builder   ( int renewal interval in secs )  {  return  discovery client resource . new instance info builder ( renewal interval in secs )  ;   }  ,174,4,instance,2,"[11, 115]"
2710,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BaseDiscoveryClientTester.java,new instance info builder,protected  instance info .  builder   ( int renewal interval in secs )  {  return  discovery client resource . new instance info builder ( renewal interval in secs )  ;   }  ,174,4,info,3,"[20, 124]"
2711,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BaseDiscoveryClientTester.java,new instance info builder,protected  instance info .  builder   ( int renewal interval in secs )  {  return  discovery client resource . new instance info builder ( renewal interval in secs )  ;   }  ,174,4,builder,4,"[28, 129]"
2712,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BaseDiscoveryClientTester.java,populate local registry at startup,protected void   (  )  {  for  (   application app : create local apps (  )  )   {  mock local eureka server . add local region apps ( app . get name (  )  app )  ;   }  for  (   application app delta : create local apps delta (  )  )   {  mock local eureka server . add local region apps delta ( app delta . get name (  )  app delta )  ;   }   }  ,348,5,populate,1,[]
2713,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BaseDiscoveryClientTester.java,populate local registry at startup,protected void   (  )  {  for  (   application app : create local apps (  )  )   {  mock local eureka server . add local region apps ( app . get name (  )  app )  ;   }  for  (   application app delta : create local apps delta (  )  )   {  mock local eureka server . add local region apps delta ( app delta . get name (  )  app delta )  ;   }   }  ,348,5,local,2,"[60, 89, 115, 210, 245, 271]"
2714,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BaseDiscoveryClientTester.java,populate local registry at startup,protected void   (  )  {  for  (   application app : create local apps (  )  )   {  mock local eureka server . add local region apps ( app . get name (  )  app )  ;   }  for  (   application app delta : create local apps delta (  )  )   {  mock local eureka server . add local region apps delta ( app delta . get name (  )  app delta )  ;   }   }  ,348,5,registry,3,[]
2715,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BaseDiscoveryClientTester.java,populate local registry at startup,protected void   (  )  {  for  (   application app : create local apps (  )  )   {  mock local eureka server . add local region apps ( app . get name (  )  app )  ;   }  for  (   application app delta : create local apps delta (  )  )   {  mock local eureka server . add local region apps delta ( app delta . get name (  )  app delta )  ;   }   }  ,348,5,at,4,"[41, 56, 185, 206]"
2716,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BaseDiscoveryClientTester.java,populate local registry at startup,protected void   (  )  {  for  (   application app : create local apps (  )  )   {  mock local eureka server . add local region apps ( app . get name (  )  app )  ;   }  for  (   application app delta : create local apps delta (  )  )   {  mock local eureka server . add local region apps delta ( app delta . get name (  )  app delta )  ;   }   }  ,348,5,startup,5,[]
2717,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BaseDiscoveryClientTester.java,populate remote registry at startup,protected void   (  )  {  for  (   application app : create remote apps (  )  )   {  mock local eureka server . add remote region apps ( app . get name (  )  app )  ;   }  for  (   application app delta : create remote apps delta (  )  )   {  mock local eureka server . add remote region apps delta ( app delta . get name (  )  app delta )  ;   }   }  ,352,5,populate,1,[]
2718,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BaseDiscoveryClientTester.java,populate remote registry at startup,protected void   (  )  {  for  (   application app : create remote apps (  )  )   {  mock local eureka server . add remote region apps ( app . get name (  )  app )  ;   }  for  (   application app delta : create remote apps delta (  )  )   {  mock local eureka server . add remote region apps delta ( app delta . get name (  )  app delta )  ;   }   }  ,352,5,remote,2,"[60, 116, 212, 274]"
2719,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BaseDiscoveryClientTester.java,populate remote registry at startup,protected void   (  )  {  for  (   application app : create remote apps (  )  )   {  mock local eureka server . add remote region apps ( app . get name (  )  app )  ;   }  for  (   application app delta : create remote apps delta (  )  )   {  mock local eureka server . add remote region apps delta ( app delta . get name (  )  app delta )  ;   }   }  ,352,5,registry,3,[]
2720,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BaseDiscoveryClientTester.java,populate remote registry at startup,protected void   (  )  {  for  (   application app : create remote apps (  )  )   {  mock local eureka server . add remote region apps ( app . get name (  )  app )  ;   }  for  (   application app delta : create remote apps delta (  )  )   {  mock local eureka server . add remote region apps delta ( app delta . get name (  )  app delta )  ;   }   }  ,352,5,at,4,"[41, 56, 187, 208]"
2721,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BaseDiscoveryClientTester.java,populate remote registry at startup,protected void   (  )  {  for  (   application app : create remote apps (  )  )   {  mock local eureka server . add remote region apps ( app . get name (  )  app )  ;   }  for  (   application app delta : create remote apps delta (  )  )   {  mock local eureka server . add remote region apps delta ( app delta . get name (  )  app delta )  ;   }   }  ,352,5,startup,5,[]
2722,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BaseDiscoveryClientTester.java,setup discovery client,protected void   ( int renewal interval in secs )  {   instance info instance info = new instance info builder ( renewal interval in secs )  . build (  )  ;  client =  discovery client resource . setup discovery client ( instance info )  ;   }  ,245,3,setup,1,[196]
2723,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BaseDiscoveryClientTester.java,setup discovery client,protected void   ( int renewal interval in secs )  {   instance info instance info = new instance info builder ( renewal interval in secs )  . build (  )  ;  client =  discovery client resource . setup discovery client ( instance info )  ;   }  ,245,3,discovery,2,"[168, 202]"
2724,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BaseDiscoveryClientTester.java,setup discovery client,protected void   ( int renewal interval in secs )  {   instance info instance info = new instance info builder ( renewal interval in secs )  . build (  )  ;  client =  discovery client resource . setup discovery client ( instance info )  ;   }  ,245,3,client,3,"[158, 178, 212]"
2725,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BaseDiscoveryClientTester.java,setup properties,protected void   (  )  {   discovery client resource . setup discovery client config ( mock local eureka server . get port (  )   mock remote eureka server . eureka   api   base   path )  ;   }  ,195,2,setup,1,[55]
2726,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BaseDiscoveryClientTester.java,setup properties,protected void   (  )  {   discovery client resource . setup discovery client config ( mock local eureka server . get port (  )   mock remote eureka server . eureka   api   base   path )  ;   }  ,195,2,properties,2,[]
2727,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BaseDiscoveryClientTester.java,shutdown discovery client,protected void   (  )  {  if  ( client  !  =  null )   {  client . shutdown (  )  ;   }   }  ,93,3,shutdown,1,[67]
2728,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BaseDiscoveryClientTester.java,shutdown discovery client,protected void   (  )  {  if  ( client  !  =  null )   {  client . shutdown (  )  ;   }   }  ,93,3,discovery,2,[]
2729,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BaseDiscoveryClientTester.java,shutdown discovery client,protected void   (  )  {  if  ( client  !  =  null )   {  client . shutdown (  )  ;   }   }  ,93,3,client,3,"[32, 58]"
2730,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\CodecLoadTester.java, codec load tester,"public   (  string[] args )  throws  exception  {  if  ( args . length  !  =  1 )   {   system . err . println ( ""error: too many command line arguments ;  file name expected only"" )  ;  throw new  illegal argument exception (  )  ;   }   string file name = args[0] ;   applications applications ;  try  {   system . out . println ( "" attempting to load ""  +  file name  +  "" in xml format .  .  . "" )  ;  applications = load with codec ( file name  media type . application   xml   type )  ;   }  catch  (   exception e )   {   system . out . println ( "" attempting to load ""  +  file name  +  "" in json format .  .  . "" )  ;  applications = load with codec ( file name  media type . application   json   type )  ;   }  this . applications = applications ;  long total instances = 0 ;  for  (   application a : applications . get registered applications (  )  )   {  total instances +  = a . get instances (  )  . size (  )  ;   }   system . out . printf ( "" loaded %d applications with %d instances\n"" applications . get registered applications (  )  . size (  )  total instances )  ;  first holder . value = applications ;   }  ",1131,3,codec,1,"[431, 653]"
2731,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\CodecLoadTester.java, codec load tester,"public   (  string[] args )  throws  exception  {  if  ( args . length  !  =  1 )   {   system . err . println ( ""error: too many command line arguments ;  file name expected only"" )  ;  throw new  illegal argument exception (  )  ;   }   string file name = args[0] ;   applications applications ;  try  {   system . out . println ( "" attempting to load ""  +  file name  +  "" in xml format .  .  . "" )  ;  applications = load with codec ( file name  media type . application   xml   type )  ;   }  catch  (   exception e )   {   system . out . println ( "" attempting to load ""  +  file name  +  "" in json format .  .  . "" )  ;  applications = load with codec ( file name  media type . application   json   type )  ;   }  this . applications = applications ;  long total instances = 0 ;  for  (   application a : applications . get registered applications (  )  )   {  total instances +  = a . get instances (  )  . size (  )  ;   }   system . out . printf ( "" loaded %d applications with %d instances\n"" applications . get registered applications (  )  . size (  )  total instances )  ;  first holder . value = applications ;   }  ",1131,3,load,2,"[349, 421, 570, 643, 960]"
2732,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\CodecLoadTester.java, codec load tester,"public   (  string[] args )  throws  exception  {  if  ( args . length  !  =  1 )   {   system . err . println ( ""error: too many command line arguments ;  file name expected only"" )  ;  throw new  illegal argument exception (  )  ;   }   string file name = args[0] ;   applications applications ;  try  {   system . out . println ( "" attempting to load ""  +  file name  +  "" in xml format .  .  . "" )  ;  applications = load with codec ( file name  media type . application   xml   type )  ;   }  catch  (   exception e )   {   system . out . println ( "" attempting to load ""  +  file name  +  "" in json format .  .  . "" )  ;  applications = load with codec ( file name  media type . application   json   type )  ;   }  this . applications = applications ;  long total instances = 0 ;  for  (   application a : applications . get registered applications (  )  )   {  total instances +  = a . get instances (  )  . size (  )  ;   }   system . out . printf ( "" loaded %d applications with %d instances\n"" applications . get registered applications (  )  . size (  )  total instances )  ;  first holder . value = applications ;   }  ",1131,3,tester,3,[]
2733,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\CodecLoadTester.java,call,@ override public int   (  object object )  {   abstract eureka jackson codec codec ;  if  ( media type . equals (  media type . application   json   type )  )   {  codec = compact  ?  json codec ng compact : json codecng ;   }  else  {  codec = compact  ,255,1,call,1,[]
2734,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\CodecLoadTester.java,create jackson ng action," func0   ( final  media type media type final boolean compact )  {  return new  func0 <  object >  (  )  {  @ override public int call (   object object )  {   abstract eureka jackson codec codec ;  if  ( media type . equals (  media type . application   json   type )  )   {  codec = compact  ?  json codec ng compact : json codecng ;   }  else  {  codec = compact  ?  xml codec ng compact : xml codecng ;   }   byte array output stream capture stream = new  byte array output stream (  )  ;  try  {  codec . write to ( object capture stream )  ;  byte[] bytes = capture stream . to byte array (  )  ;   input stream source = new  byte array input stream ( bytes )  ;   applications read value = codec . get object mapper ( object . get class (  )  )  . read value ( source  applications . class )  ;  second holder . value = read value ;  return bytes . length ;   }  catch  (  io exception e )   {  throw new  runtime exception ( ""unexpected"" e )  ;   }   }   }   ;   }  ",974,4,create,1,[]
2735,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\CodecLoadTester.java,create jackson ng action," func0   ( final  media type media type final boolean compact )  {  return new  func0 <  object >  (  )  {  @ override public int call (   object object )  {   abstract eureka jackson codec codec ;  if  ( media type . equals (  media type . application   json   type )  )   {  codec = compact  ?  json codec ng compact : json codecng ;   }  else  {  codec = compact  ?  xml codec ng compact : xml codecng ;   }   byte array output stream capture stream = new  byte array output stream (  )  ;  try  {  codec . write to ( object capture stream )  ;  byte[] bytes = capture stream . to byte array (  )  ;   input stream source = new  byte array input stream ( bytes )  ;   applications read value = codec . get object mapper ( object . get class (  )  )  . read value ( source  applications . class )  ;  second holder . value = read value ;  return bytes . length ;   }  catch  (  io exception e )   {  throw new  runtime exception ( ""unexpected"" e )  ;   }   }   }   ;   }  ",974,4,jackson,2,[176]
2736,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\CodecLoadTester.java,create jackson ng action," func0   ( final  media type media type final boolean compact )  {  return new  func0 <  object >  (  )  {  @ override public int call (   object object )  {   abstract eureka jackson codec codec ;  if  ( media type . equals (  media type . application   json   type )  )   {  codec = compact  ?  json codec ng compact : json codecng ;   }  else  {  codec = compact  ?  xml codec ng compact : xml codecng ;   }   byte array output stream capture stream = new  byte array output stream (  )  ;  try  {  codec . write to ( object capture stream )  ;  byte[] bytes = capture stream . to byte array (  )  ;   input stream source = new  byte array input stream ( bytes )  ;   applications read value = codec . get object mapper ( object . get class (  )  )  . read value ( source  applications . class )  ;  second holder . value = read value ;  return bytes . length ;   }  catch  (  io exception e )   {  throw new  runtime exception ( ""unexpected"" e )  ;   }   }   }   ;   }  ",974,4,ng,3,"[308, 331, 380, 402, 858]"
2737,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\CodecLoadTester.java,create jackson ng action," func0   ( final  media type media type final boolean compact )  {  return new  func0 <  object >  (  )  {  @ override public int call (   object object )  {   abstract eureka jackson codec codec ;  if  ( media type . equals (  media type . application   json   type )  )   {  codec = compact  ?  json codec ng compact : json codecng ;   }  else  {  codec = compact  ?  xml codec ng compact : xml codecng ;   }   byte array output stream capture stream = new  byte array output stream (  )  ;  try  {  codec . write to ( object capture stream )  ;  byte[] bytes = capture stream . to byte array (  )  ;   input stream source = new  byte array input stream ( bytes )  ;   applications read value = codec . get object mapper ( object . get class (  )  )  . read value ( source  applications . class )  ;  second holder . value = read value ;  return bytes . length ;   }  catch  (  io exception e )   {  throw new  runtime exception ( ""unexpected"" e )  ;   }   }   }   ;   }  ",974,4,action,4,[]
2738,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\CodecLoadTester.java,format size,"private static  string   ( long size )  {  if  ( size  <  1000 )   {  return  string . format ( ""%d [bytes]"" size )  ;   }  if  ( size  <  1024 * 1024 )   {  return  string . format ( ""% . 2f [kb]"" size  /  1024f )  ;   }  return  string . format ( ""% . 2f [mb]"" size  /   ( 1024f * 1024f )  )  ;   }  ",302,2,format,1,"[87, 175, 240]"
2739,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\CodecLoadTester.java,format size,"private static  string   ( long size )  {  if  ( size  <  1000 )   {  return  string . format ( ""%d [bytes]"" size )  ;   }  if  ( size  <  1024 * 1024 )   {  return  string . format ( ""% . 2f [kb]"" size  /  1024f )  ;   }  return  string . format ( ""% . 2f [mb]"" size  /   ( 1024f * 1024f )  )  ;   }  ",302,2,size,2,"[32, 49, 109, 130, 198, 263]"
2740,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\CodecLoadTester.java,load with codec,private  applications   (  string file name  media type media type )  throws io exception  {   file input stream fis = new  file input stream ( file name )  ;   buffered input stream bis = new  buffered input stream ( fis )  ;  return  (  applications ) xstream codec . read ( bis  applications . class media type )  ;   }  ,324,3,load,1,[]
2741,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\CodecLoadTester.java,load with codec,private  applications   (  string file name  media type media type )  throws io exception  {   file input stream fis = new  file input stream ( file name )  ;   buffered input stream bis = new  buffered input stream ( fis )  ;  return  (  applications ) xstream codec . read ( bis  applications . class media type )  ;   }  ,324,3,with,2,[]
2742,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\CodecLoadTester.java,load with codec,private  applications   (  string file name  media type media type )  throws io exception  {   file input stream fis = new  file input stream ( file name )  ;   buffered input stream bis = new  buffered input stream ( fis )  ;  return  (  applications ) xstream codec . read ( bis  applications . class media type )  ;   }  ,324,3,codec,3,[262]
2743,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\CodecLoadTester.java,main,public static void   (  string[] args )  throws  exception  {   codec load tester load tester ;  if  ( args . length  =  =  0 )   {  load tester = new  codec load tester ( 2000 40 )  ;   }  else  {  load tester = new  codec load tester ( args )  ;   }  load tester . run full speed (  )  ;   thread . sleep ( 100000 )  ;   }  ,326,1,main,1,[]
2744,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\CodecLoadTester.java,run application interval test,"public void   ( int batch int interval ms long duration sec  func0 action )  {  long start time =  system . current time millis (  )  ;  long end time = start time  +  duration sec * 1000 ;  long now ;  do  {  now =  system . current time millis (  )  ;  run application load test ( batch action )  ;  long waiting = interval ms  -   (  system . current time millis (  )   -  now )  ;   system . out . println ( "" waiting ""  +  waiting  +  ""ms"" )  ;  if  ( waiting  >  0 )   {  try  {   thread . sleep ( waiting )  ;   }  catch  (   interrupted exception e )   {   }   }   }  while  ( now  <  end time )  ;   }  ",612,4,run,1,[255]
2745,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\CodecLoadTester.java,run application interval test,"public void   ( int batch int interval ms long duration sec  func0 action )  {  long start time =  system . current time millis (  )  ;  long end time = start time  +  duration sec * 1000 ;  long now ;  do  {  now =  system . current time millis (  )  ;  run application load test ( batch action )  ;  long waiting = interval ms  -   (  system . current time millis (  )   -  now )  ;   system . out . println ( "" waiting ""  +  waiting  +  ""ms"" )  ;  if  ( waiting  >  0 )   {  try  {   thread . sleep ( waiting )  ;   }  catch  (   interrupted exception e )   {   }   }   }  while  ( now  <  end time )  ;   }  ",612,4,application,2,[259]
2746,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\CodecLoadTester.java,run application interval test,"public void   ( int batch int interval ms long duration sec  func0 action )  {  long start time =  system . current time millis (  )  ;  long end time = start time  +  duration sec * 1000 ;  long now ;  do  {  now =  system . current time millis (  )  ;  run application load test ( batch action )  ;  long waiting = interval ms  -   (  system . current time millis (  )   -  now )  ;   system . out . println ( "" waiting ""  +  waiting  +  ""ms"" )  ;  if  ( waiting  >  0 )   {  try  {   thread . sleep ( waiting )  ;   }  catch  (   interrupted exception e )   {   }   }   }  while  ( now  <  end time )  ;   }  ",612,4,interval,3,"[30, 317]"
2747,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\CodecLoadTester.java,run application interval test,"public void   ( int batch int interval ms long duration sec  func0 action )  {  long start time =  system . current time millis (  )  ;  long end time = start time  +  duration sec * 1000 ;  long now ;  do  {  now =  system . current time millis (  )  ;  run application load test ( batch action )  ;  long waiting = interval ms  -   (  system . current time millis (  )   -  now )  ;   system . out . println ( "" waiting ""  +  waiting  +  ""ms"" )  ;  if  ( waiting  >  0 )   {  try  {   thread . sleep ( waiting )  ;   }  catch  (   interrupted exception e )   {   }   }   }  while  ( now  <  end time )  ;   }  ",612,4,test,4,[276]
2748,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\CodecLoadTester.java,run application load test,public void   ( int loops  func0 <  application >  action )  {  for  ( int i = 0 ;  i  <  loops ;  i +  +  )   {  action . call ( application list . get ( i % application list . size (  )  )  )  ;   }   }  ,206,4,run,1,[]
2749,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\CodecLoadTester.java,run application load test,public void   ( int loops  func0 <  application >  action )  {  for  ( int i = 0 ;  i  <  loops ;  i +  +  )   {  action . call ( application list . get ( i % application list . size (  )  )  )  ;   }   }  ,206,4,application,2,"[36, 130, 159]"
2750,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\CodecLoadTester.java,run application load test,public void   ( int loops  func0 <  application >  action )  {  for  ( int i = 0 ;  i  <  loops ;  i +  +  )   {  action . call ( application list . get ( i % application list . size (  )  )  )  ;   }   }  ,206,4,load,3,[]
2751,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\CodecLoadTester.java,run application load test,public void   ( int loops  func0 <  application >  action )  {  for  ( int i = 0 ;  i  <  loops ;  i +  +  )   {  action . call ( application list . get ( i % application list . size (  )  )  )  ;   }   }  ,206,4,test,4,[]
2752,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\CodecLoadTester.java,run applications load test,"public void   ( int loops  func0 <  applications >  action )  {  long size = 0 ;  for  ( int i = 0 ;  i  <  loops ;  i +  +  )   {  size +  = action . call ( applications )  ;   }   system . out . println ( "" average applications object size = ""  +  format size ( size  /  loops )  )  ;   }  ",292,4,run,1,[]
2753,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\CodecLoadTester.java,run applications load test,"public void   ( int loops  func0 <  applications >  action )  {  long size = 0 ;  for  ( int i = 0 ;  i  <  loops ;  i +  +  )   {  size +  = action . call ( applications )  ;   }   system . out . println ( "" average applications object size = ""  +  format size ( size  /  loops )  )  ;   }  ",292,4,applications,2,"[36, 158, 217]"
2754,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\CodecLoadTester.java,run applications load test,"public void   ( int loops  func0 <  applications >  action )  {  long size = 0 ;  for  ( int i = 0 ;  i  <  loops ;  i +  +  )   {  size +  = action . call ( applications )  ;   }   system . out . println ( "" average applications object size = ""  +  format size ( size  /  loops )  )  ;   }  ",292,4,load,3,[]
2755,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\CodecLoadTester.java,run applications load test,"public void   ( int loops  func0 <  applications >  action )  {  long size = 0 ;  for  ( int i = 0 ;  i  <  loops ;  i +  +  )   {  size +  = action . call ( applications )  ;   }   system . out . println ( "" average applications object size = ""  +  format size ( size  /  loops )  )  ;   }  ",292,4,test,4,[]
2756,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\CodecLoadTester.java,run full speed,"public void   (  )  {  int loop = 5 ;   system . gc (  )  ;  long start =  system . current time millis (  )  ;  run applications load test ( loop create jackson ng action (  media type . application   json   type false )  )  ;  long execution time =  system . current time millis (  )   -  start ;   system . out . printf ( "" execution time: %d[ms]\n"" execution time )  ;   }  ",378,3,run,1,[113]
2757,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\CodecLoadTester.java,run full speed,"public void   (  )  {  int loop = 5 ;   system . gc (  )  ;  long start =  system . current time millis (  )  ;  run applications load test ( loop create jackson ng action (  media type . application   json   type false )  )  ;  long execution time =  system . current time millis (  )   -  start ;   system . out . printf ( "" execution time: %d[ms]\n"" execution time )  ;   }  ",378,3,full,2,[]
2758,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\CodecLoadTester.java,run full speed,"public void   (  )  {  int loop = 5 ;   system . gc (  )  ;  long start =  system . current time millis (  )  ;  run applications load test ( loop create jackson ng action (  media type . application   json   type false )  )  ;  long execution time =  system . current time millis (  )   -  start ;   system . out . printf ( "" execution time: %d[ms]\n"" execution time )  ;   }  ",378,3,speed,3,[]
2759,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\CodecLoadTester.java,run instance info interval test,"public void   ( int batch int interval ms long duration sec  func0 action )  {  long start time =  system . current time millis (  )  ;  long end time = start time  +  duration sec * 1000 ;  long now ;  do  {  now =  system . current time millis (  )  ;  run instance info load test ( batch action )  ;  long waiting = interval ms  -   (  system . current time millis (  )   -  now )  ;   system . out . println ( "" waiting ""  +  waiting  +  ""ms"" )  ;  if  ( waiting  >  0 )   {  try  {   thread . sleep ( waiting )  ;   }  catch  (   interrupted exception e )   {   }   }   }  while  ( now  <  end time )  ;   }  ",614,5,run,1,[255]
2760,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\CodecLoadTester.java,run instance info interval test,"public void   ( int batch int interval ms long duration sec  func0 action )  {  long start time =  system . current time millis (  )  ;  long end time = start time  +  duration sec * 1000 ;  long now ;  do  {  now =  system . current time millis (  )  ;  run instance info load test ( batch action )  ;  long waiting = interval ms  -   (  system . current time millis (  )   -  now )  ;   system . out . println ( "" waiting ""  +  waiting  +  ""ms"" )  ;  if  ( waiting  >  0 )   {  try  {   thread . sleep ( waiting )  ;   }  catch  (   interrupted exception e )   {   }   }   }  while  ( now  <  end time )  ;   }  ",614,5,instance,2,[259]
2761,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\CodecLoadTester.java,run instance info interval test,"public void   ( int batch int interval ms long duration sec  func0 action )  {  long start time =  system . current time millis (  )  ;  long end time = start time  +  duration sec * 1000 ;  long now ;  do  {  now =  system . current time millis (  )  ;  run instance info load test ( batch action )  ;  long waiting = interval ms  -   (  system . current time millis (  )   -  now )  ;   system . out . println ( "" waiting ""  +  waiting  +  ""ms"" )  ;  if  ( waiting  >  0 )   {  try  {   thread . sleep ( waiting )  ;   }  catch  (   interrupted exception e )   {   }   }   }  while  ( now  <  end time )  ;   }  ",614,5,info,3,[268]
2762,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\CodecLoadTester.java,run instance info interval test,"public void   ( int batch int interval ms long duration sec  func0 action )  {  long start time =  system . current time millis (  )  ;  long end time = start time  +  duration sec * 1000 ;  long now ;  do  {  now =  system . current time millis (  )  ;  run instance info load test ( batch action )  ;  long waiting = interval ms  -   (  system . current time millis (  )   -  now )  ;   system . out . println ( "" waiting ""  +  waiting  +  ""ms"" )  ;  if  ( waiting  >  0 )   {  try  {   thread . sleep ( waiting )  ;   }  catch  (   interrupted exception e )   {   }   }   }  while  ( now  <  end time )  ;   }  ",614,5,interval,4,"[30, 319]"
2763,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\CodecLoadTester.java,run instance info interval test,"public void   ( int batch int interval ms long duration sec  func0 action )  {  long start time =  system . current time millis (  )  ;  long end time = start time  +  duration sec * 1000 ;  long now ;  do  {  now =  system . current time millis (  )  ;  run instance info load test ( batch action )  ;  long waiting = interval ms  -   (  system . current time millis (  )   -  now )  ;   system . out . println ( "" waiting ""  +  waiting  +  ""ms"" )  ;  if  ( waiting  >  0 )   {  try  {   thread . sleep ( waiting )  ;   }  catch  (   interrupted exception e )   {   }   }   }  while  ( now  <  end time )  ;   }  ",614,5,test,5,[278]
2764,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\CodecLoadTester.java,run instance info load test,public void   ( int loops  func0 <  instance info >  action )  {  for  ( int i = 0 ;  i  <  loops ;  i +  +  )   {  action . call ( instance info list . get ( i % instance info list . size (  )  )  )  ;   }   }  ,212,5,run,1,[]
2765,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\CodecLoadTester.java,run instance info load test,public void   ( int loops  func0 <  instance info >  action )  {  for  ( int i = 0 ;  i  <  loops ;  i +  +  )   {  action . call ( instance info list . get ( i % instance info list . size (  )  )  )  ;   }   }  ,212,5,instance,2,"[36, 132, 163]"
2766,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\CodecLoadTester.java,run instance info load test,public void   ( int loops  func0 <  instance info >  action )  {  for  ( int i = 0 ;  i  <  loops ;  i +  +  )   {  action . call ( instance info list . get ( i % instance info list . size (  )  )  )  ;   }   }  ,212,5,info,3,"[45, 141, 172]"
2767,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\CodecLoadTester.java,run instance info load test,public void   ( int loops  func0 <  instance info >  action )  {  for  ( int i = 0 ;  i  <  loops ;  i +  +  )   {  action . call ( instance info list . get ( i % instance info list . size (  )  )  )  ;   }   }  ,212,5,load,4,[]
2768,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\CodecLoadTester.java,run instance info load test,public void   ( int loops  func0 <  instance info >  action )  {  for  ( int i = 0 ;  i  <  loops ;  i +  +  )   {  action . call ( instance info list . get ( i % instance info list . size (  )  )  )  ;   }   }  ,212,5,test,5,[]
2769,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\CodecLoadTester.java,run intervals,public void   (  )  {  int batch = 1500 ;  int interval ms = 1000 ;  long duration sec = 600 ;  run instance info interval test ( batch interval ms duration sec xstream json action )  ;   }  ,191,2,run,1,[96]
2770,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\CodecLoadTester.java,run intervals,public void   (  )  {  int batch = 1500 ;  int interval ms = 1000 ;  long duration sec = 600 ;  run instance info interval test ( batch interval ms duration sec xstream json action )  ;   }  ,191,2,intervals,2,[]
2771,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJacksonCodecIntegrationTest.java,download registration,"private static  file   (  string discovery url )  throws io exception  {  if  ( discovery url  =  =  null )   {  throw new  illegal argument exception ( ""null value not allowed for parameter discovery url"" )  ;   }   file local file =  file . create temp file ( ""discovery - data - "" "" . json"" )  ;  url url = new url ( discovery url )  ;   system . out . println ( ""downloading registration data from ""  +  url  +  "" to "" +  local file )  ;   httpurl connection hurl conn =  (  httpurl connection ) url . open connection (  )  ;  hurl conn . set do output ( true )  ;  hurl conn . set request property ( ""accept"" ""application / json"" )  ;  hurl conn . connect (  )  ;  try  (  input stream is = hurl conn . get input stream (  )  )  {  java . nio . file .  files . copy ( is local file . to path (  )   standard copy option . replace   existing )  ;   }  return local file ;   }  ",881,2,download,1,[367]
2772,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJacksonCodecIntegrationTest.java,download registration,"private static  file   (  string discovery url )  throws io exception  {  if  ( discovery url  =  =  null )   {  throw new  illegal argument exception ( ""null value not allowed for parameter discovery url"" )  ;   }   file local file =  file . create temp file ( ""discovery - data - "" "" . json"" )  ;  url url = new url ( discovery url )  ;   system . out . println ( ""downloading registration data from ""  +  url  +  "" to "" +  local file )  ;   httpurl connection hurl conn =  (  httpurl connection ) url . open connection (  )  ;  hurl conn . set do output ( true )  ;  hurl conn . set request property ( ""accept"" ""application / json"" )  ;  hurl conn . connect (  )  ;  try  (  input stream is = hurl conn . get input stream (  )  )  {  java . nio . file .  files . copy ( is local file . to path (  )   standard copy option . replace   existing )  ;   }  return local file ;   }  ",881,2,registration,2,[379]
2773,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJacksonCodecIntegrationTest.java,test curiosity,"@ test public void   (  )  {  char[] arr1 = ""test"" . to char array (  )  ;  char[] arr2 = new char[] { 't' 'e' 's' 't' }  ;   system . out . println ( ""array equals""  +  arr1 . equals ( arr2 )  )  ;   }  ",204,2,test,1,"[2, 45]"
2774,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJacksonCodecIntegrationTest.java,test curiosity,"@ test public void   (  )  {  char[] arr1 = ""test"" . to char array (  )  ;  char[] arr2 = new char[] { 't' 'e' 's' 't' }  ;   system . out . println ( ""array equals""  +  arr1 . equals ( arr2 )  )  ;   }  ",204,2,curiosity,2,[]
2775,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJacksonCodecIntegrationTest.java,test decode timeout,"@ test public void   (  )  throws  exception  {   executor service executor =  executors . new fixed thread pool ( 5 )  ;   file local discovery = download registration (  system . get property ( ""discovery . url"" )  )  ;   callable <  applications >  tas",255,3,test,1,[2]
2776,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJacksonCodecIntegrationTest.java,test decode timeout,"@ test public void   (  )  throws  exception  {   executor service executor =  executors . new fixed thread pool ( 5 )  ;   file local discovery = download registration (  system . get property ( ""discovery . url"" )  )  ;   callable <  applications >  tas",255,3,decode,2,[]
2777,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJacksonCodecIntegrationTest.java,test decode timeout,"@ test public void   (  )  throws  exception  {   executor service executor =  executors . new fixed thread pool ( 5 )  ;   file local discovery = download registration (  system . get property ( ""discovery . url"" )  )  ;   callable <  applications >  tas",255,3,timeout,3,[]
2778,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJacksonCodecIntegrationTest.java,test real decode,"@ test public void   (  )  throws  exception  {   applications applications ;   file local discovery = new  file ( "" / var / folders / 6j / qy6n1npj11x5j2j   9ng2wzmw0000gp / t / discovery - data - 6054758555577530004 . json"" )  ;  long test start =  syst",255,3,test,1,"[2, 237]"
2779,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJacksonCodecIntegrationTest.java,test real decode,"@ test public void   (  )  throws  exception  {   applications applications ;   file local discovery = new  file ( "" / var / folders / 6j / qy6n1npj11x5j2j   9ng2wzmw0000gp / t / discovery - data - 6054758555577530004 . json"" )  ;  long test start =  syst",255,3,real,2,[]
2780,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJacksonCodecIntegrationTest.java,test real decode,"@ test public void   (  )  throws  exception  {   applications applications ;   file local discovery = new  file ( "" / var / folders / 6j / qy6n1npj11x5j2j   9ng2wzmw0000gp / t / discovery - data - 6054758555577530004 . json"" )  ;  long test start =  syst",255,3,decode,3,[]
2781,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,call,@ override public void   (  encoder wrapper encoding codec  decoder wrapper decoding codec )  throws io exception  {   string encoded string = encoding codec . encode ( replication list response )  ;   replication list response decoded value = decoding co,255,1,call,1,[]
2782,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,test application encode decode,"@ test public void   (  )  throws  exception  {  final  application application = new  application ( ""test app"" )  ;  application . add instance ( info iterator . next (  )  )  ;  application . add instance ( info iterator . next (  )  )  ;   action2 codi",255,4,test,1,"[2, 102]"
2783,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,test application encode decode,"@ test public void   (  )  throws  exception  {  final  application application = new  application ( ""test app"" )  ;  application . add instance ( info iterator . next (  )  )  ;  application . add instance ( info iterator . next (  )  )  ;   action2 codi",255,4,application,2,"[56, 68, 87, 118, 180]"
2784,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,test application encode decode,"@ test public void   (  )  throws  exception  {  final  application application = new  application ( ""test app"" )  ;  application . add instance ( info iterator . next (  )  )  ;  application . add instance ( info iterator . next (  )  )  ;   action2 codi",255,4,encode,3,[]
2785,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,test application encode decode,"@ test public void   (  )  throws  exception  {  final  application application = new  application ( ""test app"" )  ;  application . add instance ( info iterator . next (  )  )  ;  application . add instance ( info iterator . next (  )  )  ;   action2 codi",255,4,decode,4,[]
2786,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,test applications encode decode,@ test public void   (  )  throws  exception  {  final  applications applications = info generator . take delta ( 2 )  ;   action2 coding action = new  action2 (  )  {  @ override public void call (   encoder wrapper encoding codec   decoder wrapper decod,255,4,test,1,[2]
2787,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,test applications encode decode,@ test public void   (  )  throws  exception  {  final  applications applications = info generator . take delta ( 2 )  ;   action2 coding action = new  action2 (  )  {  @ override public void call (   encoder wrapper encoding codec   decoder wrapper decod,255,4,applications,2,"[56, 69]"
2788,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,test applications encode decode,@ test public void   (  )  throws  exception  {  final  applications applications = info generator . take delta ( 2 )  ;   action2 coding action = new  action2 (  )  {  @ override public void call (   encoder wrapper encoding codec   decoder wrapper decod,255,4,encode,3,[201]
2789,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,test applications encode decode,@ test public void   (  )  throws  exception  {  final  applications applications = info generator . take delta ( 2 )  ;   action2 coding action = new  action2 (  )  {  @ override public void call (   encoder wrapper encoding codec   decoder wrapper decod,255,4,decode,4,[234]
2790,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,test applications json encode decode with single app item,@ test public void   (  )  throws  exception  {  final  applications applications = info generator . take delta ( 1 )  ;   action2 coding action = new  action2 (  )  {  @ override public void call (   encoder wrapper encoding codec   decoder wrapper decod,255,9,test,1,[2]
2791,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,test applications json encode decode with single app item,@ test public void   (  )  throws  exception  {  final  applications applications = info generator . take delta ( 1 )  ;   action2 coding action = new  action2 (  )  {  @ override public void call (   encoder wrapper encoding codec   decoder wrapper decod,255,9,applications,2,"[56, 69]"
2792,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,test applications json encode decode with single app item,@ test public void   (  )  throws  exception  {  final  applications applications = info generator . take delta ( 1 )  ;   action2 coding action = new  action2 (  )  {  @ override public void call (   encoder wrapper encoding codec   decoder wrapper decod,255,9,json,3,[]
2793,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,test applications json encode decode with single app item,@ test public void   (  )  throws  exception  {  final  applications applications = info generator . take delta ( 1 )  ;   action2 coding action = new  action2 (  )  {  @ override public void call (   encoder wrapper encoding codec   decoder wrapper decod,255,9,encode,4,[201]
2794,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,test applications json encode decode with single app item,@ test public void   (  )  throws  exception  {  final  applications applications = info generator . take delta ( 1 )  ;   action2 coding action = new  action2 (  )  {  @ override public void call (   encoder wrapper encoding codec   decoder wrapper decod,255,9,decode,5,[234]
2795,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,test applications json encode decode with single app item,@ test public void   (  )  throws  exception  {  final  applications applications = info generator . take delta ( 1 )  ;   action2 coding action = new  action2 (  )  {  @ override public void call (   encoder wrapper encoding codec   decoder wrapper decod,255,9,with,6,[]
2796,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,test applications json encode decode with single app item,@ test public void   (  )  throws  exception  {  final  applications applications = info generator . take delta ( 1 )  ;   action2 coding action = new  action2 (  )  {  @ override public void call (   encoder wrapper encoding codec   decoder wrapper decod,255,9,single,7,[]
2797,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,test applications json encode decode with single app item,@ test public void   (  )  throws  exception  {  final  applications applications = info generator . take delta ( 1 )  ;   action2 coding action = new  action2 (  )  {  @ override public void call (   encoder wrapper encoding codec   decoder wrapper decod,255,9,app,8,"[56, 69, 211, 244]"
2798,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,test applications json encode decode with single app item,@ test public void   (  )  throws  exception  {  final  applications applications = info generator . take delta ( 1 )  ;   action2 coding action = new  action2 (  )  {  @ override public void call (   encoder wrapper encoding codec   decoder wrapper decod,255,9,item,9,[]
2799,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,test batch request encoding,@ test public void   (  )  throws  exception  {   instance info instance =  instance info generator . take one (  )  ;   list <  replication instance >  replication instances = new  array list <  >  (  )  ;  replication instances . add ( new  replication ,255,4,test,1,[2]
2800,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,test batch request encoding,@ test public void   (  )  throws  exception  {   instance info instance =  instance info generator . take one (  )  ;   list <  replication instance >  replication instances = new  array list <  >  (  )  ;  replication instances . add ( new  replication ,255,4,batch,2,[]
2801,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,test batch request encoding,@ test public void   (  )  throws  exception  {   instance info instance =  instance info generator . take one (  )  ;   list <  replication instance >  replication instances = new  array list <  >  (  )  ;  replication instances . add ( new  replication ,255,4,request,3,[]
2802,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,test batch request encoding,@ test public void   (  )  throws  exception  {   instance info instance =  instance info generator . take one (  )  ;   list <  replication instance >  replication instances = new  array list <  >  (  )  ;  replication instances . add ( new  replication ,255,4,encoding,4,[]
2803,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,test batch response encoding,@ test public void   (  )  throws  exception  {   list <  replication instance response >  response list = new  array list <  >  (  )  ;  response list . add ( new  replication instance response ( 200  instance info generator . take one (  )  )  )  ;  fin,255,4,test,1,[2]
2804,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,test batch response encoding,@ test public void   (  )  throws  exception  {   list <  replication instance response >  response list = new  array list <  >  (  )  ;  response list . add ( new  replication instance response ( 200  instance info generator . take one (  )  )  )  ;  fin,255,4,batch,2,[]
2805,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,test batch response encoding,@ test public void   (  )  throws  exception  {   list <  replication instance response >  response list = new  array list <  >  (  )  ;  response list . add ( new  replication instance response ( 200  instance info generator . take one (  )  )  )  ;  fin,255,4,response,3,"[79, 91, 138, 186]"
2806,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,test batch response encoding,@ test public void   (  )  throws  exception  {   list <  replication instance response >  response list = new  array list <  >  (  )  ;  response list . add ( new  replication instance response ( 200  instance info generator . take one (  )  )  )  ;  fin,255,4,encoding,4,[]
2807,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,test instance info encode decode,@ test public void   (  )  throws  exception  {  final  instance info instance info = info iterator . next (  )  ;   action2 coding action = new  action2 (  )  {  @ override public void call (   encoder wrapper encoding codec   decoder wrapper decoding co,255,5,test,1,[2]
2808,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,test instance info encode decode,@ test public void   (  )  throws  exception  {  final  instance info instance info = info iterator . next (  )  ;   action2 coding action = new  action2 (  )  {  @ override public void call (   encoder wrapper encoding codec   decoder wrapper decoding co,255,5,instance,2,"[56, 70]"
2809,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,test instance info encode decode,@ test public void   (  )  throws  exception  {  final  instance info instance info = info iterator . next (  )  ;   action2 coding action = new  action2 (  )  {  @ override public void call (   encoder wrapper encoding codec   decoder wrapper decoding co,255,5,info,3,"[65, 79, 86]"
2810,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,test instance info encode decode,@ test public void   (  )  throws  exception  {  final  instance info instance info = info iterator . next (  )  ;   action2 coding action = new  action2 (  )  {  @ override public void call (   encoder wrapper encoding codec   decoder wrapper decoding co,255,5,encode,4,[195]
2811,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,test instance info encode decode,@ test public void   (  )  throws  exception  {  final  instance info instance info = info iterator . next (  )  ;   action2 coding action = new  action2 (  )  {  @ override public void call (   encoder wrapper encoding codec   decoder wrapper decoding co,255,5,decode,5,[228]
2812,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,test instance info encode decode compatibility due to overridden status renaming,@ test public void   (  )  throws  exception  {  final  instance info instance info = info iterator . next (  )  ;  new  instance info .  builder ( instance info )  . set overridden status (  instance info .  instance status . out   of   service )  ;   ac,255,11,test,1,[2]
2813,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,test instance info encode decode compatibility due to overridden status renaming,@ test public void   (  )  throws  exception  {  final  instance info instance info = info iterator . next (  )  ;  new  instance info .  builder ( instance info )  . set overridden status (  instance info .  instance status . out   of   service )  ;   ac,255,11,instance,2,"[56, 70, 121, 148, 192, 209]"
2814,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,test instance info encode decode compatibility due to overridden status renaming,@ test public void   (  )  throws  exception  {  final  instance info instance info = info iterator . next (  )  ;  new  instance info .  builder ( instance info )  . set overridden status (  instance info .  instance status . out   of   service )  ;   ac,255,11,info,3,"[65, 79, 86, 130, 157, 201]"
2815,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,test instance info encode decode compatibility due to overridden status renaming,@ test public void   (  )  throws  exception  {  final  instance info instance info = info iterator . next (  )  ;  new  instance info .  builder ( instance info )  . set overridden status (  instance info .  instance status . out   of   service )  ;   ac,255,11,encode,4,[]
2816,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,test instance info encode decode compatibility due to overridden status renaming,@ test public void   (  )  throws  exception  {  final  instance info instance info = info iterator . next (  )  ;  new  instance info .  builder ( instance info )  . set overridden status (  instance info .  instance status . out   of   service )  ;   ac,255,11,decode,5,[]
2817,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,test instance info encode decode compatibility due to overridden status renaming,@ test public void   (  )  throws  exception  {  final  instance info instance info = info iterator . next (  )  ;  new  instance info .  builder ( instance info )  . set overridden status (  instance info .  instance status . out   of   service )  ;   ac,255,11,compatibility,6,[]
2818,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,test instance info encode decode compatibility due to overridden status renaming,@ test public void   (  )  throws  exception  {  final  instance info instance info = info iterator . next (  )  ;  new  instance info .  builder ( instance info )  . set overridden status (  instance info .  instance status . out   of   service )  ;   ac,255,11,due,7,[]
2819,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,test instance info encode decode compatibility due to overridden status renaming,@ test public void   (  )  throws  exception  {  final  instance info instance info = info iterator . next (  )  ;  new  instance info .  builder ( instance info )  . set overridden status (  instance info .  instance status . out   of   service )  ;   ac,255,11,to,8,[96]
2820,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,test instance info encode decode compatibility due to overridden status renaming,@ test public void   (  )  throws  exception  {  final  instance info instance info = info iterator . next (  )  ;  new  instance info .  builder ( instance info )  . set overridden status (  instance info .  instance status . out   of   service )  ;   ac,255,11,overridden,9,[171]
2821,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,test instance info encode decode compatibility due to overridden status renaming,@ test public void   (  )  throws  exception  {  final  instance info instance info = info iterator . next (  )  ;  new  instance info .  builder ( instance info )  . set overridden status (  instance info .  instance status . out   of   service )  ;   ac,255,11,status,10,"[182, 218]"
2822,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,test instance info encode decode compatibility due to overridden status renaming,@ test public void   (  )  throws  exception  {  final  instance info instance info = info iterator . next (  )  ;  new  instance info .  builder ( instance info )  . set overridden status (  instance info .  instance status . out   of   service )  ;   ac,255,11,renaming,11,[]
2823,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,test instance info encode decode json with empty metadata map,@ test public void   (  )  throws  exception  {  final  instance info base = info iterator . next (  )  ;  final  instance info instance info = new  instance info .  builder ( base )  . set metadata (  collections . empty   map )  . build (  )  ;   action,255,10,test,1,[2]
2824,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,test instance info encode decode json with empty metadata map,@ test public void   (  )  throws  exception  {  final  instance info base = info iterator . next (  )  ;  final  instance info instance info = new  instance info .  builder ( base )  . set metadata (  collections . empty   map )  . build (  )  ;   action,255,10,instance,2,"[56, 114, 128, 149]"
2825,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,test instance info encode decode json with empty metadata map,@ test public void   (  )  throws  exception  {  final  instance info base = info iterator . next (  )  ;  final  instance info instance info = new  instance info .  builder ( base )  . set metadata (  collections . empty   map )  . build (  )  ;   action,255,10,info,3,"[65, 77, 123, 137, 158]"
2826,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,test instance info encode decode json with empty metadata map,@ test public void   (  )  throws  exception  {  final  instance info base = info iterator . next (  )  ;  final  instance info instance info = new  instance info .  builder ( base )  . set metadata (  collections . empty   map )  . build (  )  ;   action,255,10,encode,4,[]
2827,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,test instance info encode decode json with empty metadata map,@ test public void   (  )  throws  exception  {  final  instance info base = info iterator . next (  )  ;  final  instance info instance info = new  instance info .  builder ( base )  . set metadata (  collections . empty   map )  . build (  )  ;   action,255,10,decode,5,[]
2828,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,test instance info encode decode json with empty metadata map,@ test public void   (  )  throws  exception  {  final  instance info base = info iterator . next (  )  ;  final  instance info instance info = new  instance info .  builder ( base )  . set metadata (  collections . empty   map )  . build (  )  ;   action,255,10,json,6,[]
2829,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,test instance info encode decode json with empty metadata map,@ test public void   (  )  throws  exception  {  final  instance info base = info iterator . next (  )  ;  final  instance info instance info = new  instance info .  builder ( base )  . set metadata (  collections . empty   map )  . build (  )  ;   action,255,10,with,7,[]
2830,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,test instance info encode decode json with empty metadata map,@ test public void   (  )  throws  exception  {  final  instance info base = info iterator . next (  )  ;  final  instance info instance info = new  instance info .  builder ( base )  . set metadata (  collections . empty   map )  . build (  )  ;   action,255,10,empty,8,[216]
2831,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,test instance info encode decode json with empty metadata map,@ test public void   (  )  throws  exception  {  final  instance info base = info iterator . next (  )  ;  final  instance info instance info = new  instance info .  builder ( base )  . set metadata (  collections . empty   map )  . build (  )  ;   action,255,10,metadata,9,[190]
2832,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,test instance info encode decode json with empty metadata map,@ test public void   (  )  throws  exception  {  final  instance info base = info iterator . next (  )  ;  final  instance info instance info = new  instance info .  builder ( base )  . set metadata (  collections . empty   map )  . build (  )  ;   action,255,10,map,10,[224]
2833,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,test instance info encode decode legacy jackson to jackson,@ deprecated @ test public void   (  )  throws  exception  {  final  instance info instance info = info iterator . next (  )  ;   action2 coding action = new  action2 (  )  {  @ override public void call (   encoder wrapper encoding codec   decoder wrappe,255,9,test,1,[15]
2834,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,test instance info encode decode legacy jackson to jackson,@ deprecated @ test public void   (  )  throws  exception  {  final  instance info instance info = info iterator . next (  )  ;   action2 coding action = new  action2 (  )  {  @ override public void call (   encoder wrapper encoding codec   decoder wrappe,255,9,instance,2,"[69, 83]"
2835,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,test instance info encode decode legacy jackson to jackson,@ deprecated @ test public void   (  )  throws  exception  {  final  instance info instance info = info iterator . next (  )  ;   action2 coding action = new  action2 (  )  {  @ override public void call (   encoder wrapper encoding codec   decoder wrappe,255,9,info,3,"[78, 92, 99]"
2836,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,test instance info encode decode legacy jackson to jackson,@ deprecated @ test public void   (  )  throws  exception  {  final  instance info instance info = info iterator . next (  )  ;   action2 coding action = new  action2 (  )  {  @ override public void call (   encoder wrapper encoding codec   decoder wrappe,255,9,encode,4,[208]
2837,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,test instance info encode decode legacy jackson to jackson,@ deprecated @ test public void   (  )  throws  exception  {  final  instance info instance info = info iterator . next (  )  ;   action2 coding action = new  action2 (  )  {  @ override public void call (   encoder wrapper encoding codec   decoder wrappe,255,9,decode,5,[241]
2838,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,test instance info encode decode legacy jackson to jackson,@ deprecated @ test public void   (  )  throws  exception  {  final  instance info instance info = info iterator . next (  )  ;   action2 coding action = new  action2 (  )  {  @ override public void call (   encoder wrapper encoding codec   decoder wrappe,255,9,legacy,6,[]
2839,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,test instance info encode decode legacy jackson to jackson,@ deprecated @ test public void   (  )  throws  exception  {  final  instance info instance info = info iterator . next (  )  ;   action2 coding action = new  action2 (  )  {  @ override public void call (   encoder wrapper encoding codec   decoder wrappe,255,9,jackson,7,[]
2840,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,test instance info encode decode legacy jackson to jackson,@ deprecated @ test public void   (  )  throws  exception  {  final  instance info instance info = info iterator . next (  )  ;   action2 coding action = new  action2 (  )  {  @ override public void call (   encoder wrapper encoding codec   decoder wrappe,255,9,to,8,[109]
2841,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,test instance info encode decode legacy jackson to jackson,@ deprecated @ test public void   (  )  throws  exception  {  final  instance info instance info = info iterator . next (  )  ;   action2 coding action = new  action2 (  )  {  @ override public void call (   encoder wrapper encoding codec   decoder wrappe,255,9,jackson,9,[]
2842,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,test instance info full encode mini decode jackson,@ test public void   (  )  throws  exception  {  final  instance info instance info = info iterator . next (  )  ;   action2 coding action = new  action2 (  )  {  @ override public void call (   encoder wrapper encoding codec   decoder wrapper decoding co,255,8,test,1,[2]
2843,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,test instance info full encode mini decode jackson,@ test public void   (  )  throws  exception  {  final  instance info instance info = info iterator . next (  )  ;   action2 coding action = new  action2 (  )  {  @ override public void call (   encoder wrapper encoding codec   decoder wrapper decoding co,255,8,instance,2,"[56, 70]"
2844,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,test instance info full encode mini decode jackson,@ test public void   (  )  throws  exception  {  final  instance info instance info = info iterator . next (  )  ;   action2 coding action = new  action2 (  )  {  @ override public void call (   encoder wrapper encoding codec   decoder wrapper decoding co,255,8,info,3,"[65, 79, 86]"
2845,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,test instance info full encode mini decode jackson,@ test public void   (  )  throws  exception  {  final  instance info instance info = info iterator . next (  )  ;   action2 coding action = new  action2 (  )  {  @ override public void call (   encoder wrapper encoding codec   decoder wrapper decoding co,255,8,full,4,[]
2846,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,test instance info full encode mini decode jackson,@ test public void   (  )  throws  exception  {  final  instance info instance info = info iterator . next (  )  ;   action2 coding action = new  action2 (  )  {  @ override public void call (   encoder wrapper encoding codec   decoder wrapper decoding co,255,8,encode,5,[195]
2847,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,test instance info full encode mini decode jackson,@ test public void   (  )  throws  exception  {  final  instance info instance info = info iterator . next (  )  ;   action2 coding action = new  action2 (  )  {  @ override public void call (   encoder wrapper encoding codec   decoder wrapper decoding co,255,8,mini,6,[]
2848,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,test instance info full encode mini decode jackson,@ test public void   (  )  throws  exception  {  final  instance info instance info = info iterator . next (  )  ;   action2 coding action = new  action2 (  )  {  @ override public void call (   encoder wrapper encoding codec   decoder wrapper decoding co,255,8,decode,7,[228]
2849,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,test instance info full encode mini decode jackson,@ test public void   (  )  throws  exception  {  final  instance info instance info = info iterator . next (  )  ;   action2 coding action = new  action2 (  )  {  @ override public void call (   encoder wrapper encoding codec   decoder wrapper decoding co,255,8,jackson,8,[]
2850,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,test instance info full encode mini decode jackson with my own data center info,@ test public void   (  )  throws  exception  {  final  instance info base = info iterator . next (  )  ;  final  instance info instance info = new  instance info .  builder ( base )  . set data center info ( new  my data center info (  data center info .,255,14,test,1,[2]
2851,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,test instance info full encode mini decode jackson with my own data center info,@ test public void   (  )  throws  exception  {  final  instance info base = info iterator . next (  )  ;  final  instance info instance info = new  instance info .  builder ( base )  . set data center info ( new  my data center info (  data center info .,255,14,instance,2,"[56, 114, 128, 149]"
2852,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,test instance info full encode mini decode jackson with my own data center info,@ test public void   (  )  throws  exception  {  final  instance info base = info iterator . next (  )  ;  final  instance info instance info = new  instance info .  builder ( base )  . set data center info ( new  my data center info (  data center info .,255,14,info,3,"[65, 77, 123, 137, 158, 202, 229, 249]"
2853,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,test instance info full encode mini decode jackson with my own data center info,@ test public void   (  )  throws  exception  {  final  instance info base = info iterator . next (  )  ;  final  instance info instance info = new  instance info .  builder ( base )  . set data center info ( new  my data center info (  data center info .,255,14,full,4,[]
2854,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,test instance info full encode mini decode jackson with my own data center info,@ test public void   (  )  throws  exception  {  final  instance info base = info iterator . next (  )  ;  final  instance info instance info = new  instance info .  builder ( base )  . set data center info ( new  my data center info (  data center info .,255,14,encode,5,[]
2855,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,test instance info full encode mini decode jackson with my own data center info,@ test public void   (  )  throws  exception  {  final  instance info base = info iterator . next (  )  ;  final  instance info instance info = new  instance info .  builder ( base )  . set data center info ( new  my data center info (  data center info .,255,14,mini,6,[]
2856,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,test instance info full encode mini decode jackson with my own data center info,@ test public void   (  )  throws  exception  {  final  instance info base = info iterator . next (  )  ;  final  instance info instance info = new  instance info .  builder ( base )  . set data center info ( new  my data center info (  data center info .,255,14,decode,7,[]
2857,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,test instance info full encode mini decode jackson with my own data center info,@ test public void   (  )  throws  exception  {  final  instance info base = info iterator . next (  )  ;  final  instance info instance info = new  instance info .  builder ( base )  . set data center info ( new  my data center info (  data center info .,255,14,jackson,8,[]
2858,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,test instance info full encode mini decode jackson with my own data center info,@ test public void   (  )  throws  exception  {  final  instance info base = info iterator . next (  )  ;  final  instance info instance info = new  instance info .  builder ( base )  . set data center info ( new  my data center info (  data center info .,255,14,with,9,[]
2859,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,test instance info full encode mini decode jackson with my own data center info,@ test public void   (  )  throws  exception  {  final  instance info base = info iterator . next (  )  ;  final  instance info instance info = new  instance info .  builder ( base )  . set data center info ( new  my data center info (  data center info .,255,14,my,10,[214]
2860,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,test instance info full encode mini decode jackson with my own data center info,@ test public void   (  )  throws  exception  {  final  instance info base = info iterator . next (  )  ;  final  instance info instance info = new  instance info .  builder ( base )  . set data center info ( new  my data center info (  data center info .,255,14,own,11,[]
2861,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,test instance info full encode mini decode jackson with my own data center info,@ test public void   (  )  throws  exception  {  final  instance info base = info iterator . next (  )  ;  final  instance info instance info = new  instance info .  builder ( base )  . set data center info ( new  my data center info (  data center info .,255,14,data,12,"[190, 217, 237]"
2862,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,test instance info full encode mini decode jackson with my own data center info,@ test public void   (  )  throws  exception  {  final  instance info base = info iterator . next (  )  ;  final  instance info instance info = new  instance info .  builder ( base )  . set data center info ( new  my data center info (  data center info .,255,14,center,13,"[195, 222, 242]"
2863,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,test instance info full encode mini decode jackson with my own data center info,@ test public void   (  )  throws  exception  {  final  instance info base = info iterator . next (  )  ;  final  instance info instance info = new  instance info .  builder ( base )  . set data center info ( new  my data center info (  data center info .,255,14,info,14,"[65, 77, 123, 137, 158, 202, 229, 249]"
2864,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,test instance info mini encode mini decode jackson,@ test public void   (  )  throws  exception  {  final  instance info instance info = info iterator . next (  )  ;   action2 coding action = new  action2 (  )  {  @ override public void call (   encoder wrapper encoding codec   decoder wrapper decoding co,255,8,test,1,[2]
2865,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,test instance info mini encode mini decode jackson,@ test public void   (  )  throws  exception  {  final  instance info instance info = info iterator . next (  )  ;   action2 coding action = new  action2 (  )  {  @ override public void call (   encoder wrapper encoding codec   decoder wrapper decoding co,255,8,instance,2,"[56, 70]"
2866,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,test instance info mini encode mini decode jackson,@ test public void   (  )  throws  exception  {  final  instance info instance info = info iterator . next (  )  ;   action2 coding action = new  action2 (  )  {  @ override public void call (   encoder wrapper encoding codec   decoder wrapper decoding co,255,8,info,3,"[65, 79, 86]"
2867,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,test instance info mini encode mini decode jackson,@ test public void   (  )  throws  exception  {  final  instance info instance info = info iterator . next (  )  ;   action2 coding action = new  action2 (  )  {  @ override public void call (   encoder wrapper encoding codec   decoder wrapper decoding co,255,8,mini,4,[]
2868,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,test instance info mini encode mini decode jackson,@ test public void   (  )  throws  exception  {  final  instance info instance info = info iterator . next (  )  ;   action2 coding action = new  action2 (  )  {  @ override public void call (   encoder wrapper encoding codec   decoder wrapper decoding co,255,8,encode,5,[195]
2869,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,test instance info mini encode mini decode jackson,@ test public void   (  )  throws  exception  {  final  instance info instance info = info iterator . next (  )  ;   action2 coding action = new  action2 (  )  {  @ override public void call (   encoder wrapper encoding codec   decoder wrapper decoding co,255,8,mini,6,[]
2870,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,test instance info mini encode mini decode jackson,@ test public void   (  )  throws  exception  {  final  instance info instance info = info iterator . next (  )  ;   action2 coding action = new  action2 (  )  {  @ override public void call (   encoder wrapper encoding codec   decoder wrapper decoding co,255,8,decode,7,[228]
2871,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,test instance info mini encode mini decode jackson,@ test public void   (  )  throws  exception  {  final  instance info instance info = info iterator . next (  )  ;   action2 coding action = new  action2 (  )  {  @ override public void call (   encoder wrapper encoding codec   decoder wrapper decoding co,255,8,jackson,8,[]
2872,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,verify all pairs,"public void   (  action2 coding action  class <  ?  >  type to encode  list <  codec wrapper >  codec holders )  throws  exception  {  for  (   encoder wrapper encoding codec : codec holders )   {  for  (   decoder wrapper decoding codec : codec holders )   {   string pair = "" { ""  +  encoding codec . codec name (  )   +  ' ' +  decoding codec . codec name (  )  +  ' } ' ;   system . out . println ( "" encoding ""  +  type to encode . get simple name (  )   +  "" using "" +  pair )  ;  try  {  coding action . call ( encoding codec decoding codec )  ;   }  catch  (   exception ex )   {  throw new  exception ( "" encoding failure for codec pair ""  +  pair ex )  ;   }   }   }   }  ",682,3,verify,1,[]
2873,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,verify all pairs,"public void   (  action2 coding action  class <  ?  >  type to encode  list <  codec wrapper >  codec holders )  throws  exception  {  for  (   encoder wrapper encoding codec : codec holders )   {  for  (   decoder wrapper decoding codec : codec holders )   {   string pair = "" { ""  +  encoding codec . codec name (  )   +  ' ' +  decoding codec . codec name (  )  +  ' } ' ;   system . out . println ( "" encoding ""  +  type to encode . get simple name (  )   +  "" using "" +  pair )  ;  try  {  coding action . call ( encoding codec decoding codec )  ;   }  catch  (   exception ex )   {  throw new  exception ( "" encoding failure for codec pair ""  +  pair ex )  ;   }   }   }   }  ",682,3,all,2,[512]
2874,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,verify all pairs,"public void   (  action2 coding action  class <  ?  >  type to encode  list <  codec wrapper >  codec holders )  throws  exception  {  for  (   encoder wrapper encoding codec : codec holders )   {  for  (   decoder wrapper decoding codec : codec holders )   {   string pair = "" { ""  +  encoding codec . codec name (  )   +  ' ' +  decoding codec . codec name (  )  +  ' } ' ;   system . out . println ( "" encoding ""  +  type to encode . get simple name (  )   +  "" using "" +  pair )  ;  try  {  coding action . call ( encoding codec decoding codec )  ;   }  catch  (   exception ex )   {  throw new  exception ( "" encoding failure for codec pair ""  +  pair ex )  ;   }   }   }   }  ",682,3,pairs,3,[]
2875,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,verify for pair,"public void   (  action2 coding action  class <  ?  >  type to encode  encoder wrapper encoding codec  decoder wrapper decoding codec )  throws  exception  {   string pair = "" { ""  +  encoding codec . codec name (  )   +  ' ' +  decoding codec . codec name (  )  +  ' } ' ;   system . out . println ( "" encoding ""  +  type to encode . get simple name (  )   +  "" using "" +  pair )  ;  try  {  coding action . call ( encoding codec decoding codec )  ;   }  catch  (   exception ex )   {  throw new  exception ( "" encoding failure for codec pair ""  +  pair ex )  ;   }   }  ",572,3,verify,1,[]
2876,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,verify for pair,"public void   (  action2 coding action  class <  ?  >  type to encode  encoder wrapper encoding codec  decoder wrapper decoding codec )  throws  exception  {   string pair = "" { ""  +  encoding codec . codec name (  )   +  ' ' +  decoding codec . codec name (  )  +  ' } ' ;   system . out . println ( "" encoding ""  +  type to encode . get simple name (  )   +  "" using "" +  pair )  ;  try  {  coding action . call ( encoding codec decoding codec )  ;   }  catch  (   exception ex )   {  throw new  exception ( "" encoding failure for codec pair ""  +  pair ex )  ;   }   }  ",572,3,for,2,[529]
2877,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,verify for pair,"public void   (  action2 coding action  class <  ?  >  type to encode  encoder wrapper encoding codec  decoder wrapper decoding codec )  throws  exception  {   string pair = "" { ""  +  encoding codec . codec name (  )   +  ' ' +  decoding codec . codec name (  )  +  ' } ' ;   system . out . println ( "" encoding ""  +  type to encode . get simple name (  )   +  "" using "" +  pair )  ;  try  {  coding action . call ( encoding codec decoding codec )  ;   }  catch  (   exception ex )   {  throw new  exception ( "" encoding failure for codec pair ""  +  pair ex )  ;   }   }  ",572,3,pair,3,"[167, 374, 539, 550]"
2878,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\JsonXStreamTest.java,test encoding decoding with meta data,@ test public void   (  )  throws  exception  {   applications applications =  instance info generator . new builder ( 10 2 )  . with meta data ( true )  . build (  )  . to applications (  )  ;  x stream xstream =  jsonx stream . get instance (  )  ;   st,255,6,test,1,[2]
2879,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\JsonXStreamTest.java,test encoding decoding with meta data,@ test public void   (  )  throws  exception  {   applications applications =  instance info generator . new builder ( 10 2 )  . with meta data ( true )  . build (  )  . to applications (  )  ;  x stream xstream =  jsonx stream . get instance (  )  ;   st,255,6,encoding,2,[]
2880,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\JsonXStreamTest.java,test encoding decoding with meta data,@ test public void   (  )  throws  exception  {   applications applications =  instance info generator . new builder ( 10 2 )  . with meta data ( true )  . build (  )  . to applications (  )  ;  x stream xstream =  jsonx stream . get instance (  )  ;   st,255,6,decoding,3,[]
2881,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\JsonXStreamTest.java,test encoding decoding with meta data,@ test public void   (  )  throws  exception  {   applications applications =  instance info generator . new builder ( 10 2 )  . with meta data ( true )  . build (  )  . to applications (  )  ;  x stream xstream =  jsonx stream . get instance (  )  ;   st,255,6,with,4,[129]
2882,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\JsonXStreamTest.java,test encoding decoding with meta data,@ test public void   (  )  throws  exception  {   applications applications =  instance info generator . new builder ( 10 2 )  . with meta data ( true )  . build (  )  . to applications (  )  ;  x stream xstream =  jsonx stream . get instance (  )  ;   st,255,6,meta,5,[134]
2883,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\JsonXStreamTest.java,test encoding decoding with meta data,@ test public void   (  )  throws  exception  {   applications applications =  instance info generator . new builder ( 10 2 )  . with meta data ( true )  . build (  )  . to applications (  )  ;  x stream xstream =  jsonx stream . get instance (  )  ;   st,255,6,data,6,[139]
2884,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\JsonXStreamTest.java,test encoding decoding without meta data,@ test public void   (  )  throws  exception  {   applications applications =  instance info generator . new builder ( 10 2 )  . with meta data ( false )  . build (  )  . to applications (  )  ;  x stream xstream =  jsonx stream . get instance (  )  ;   s,255,6,test,1,[2]
2885,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\JsonXStreamTest.java,test encoding decoding without meta data,@ test public void   (  )  throws  exception  {   applications applications =  instance info generator . new builder ( 10 2 )  . with meta data ( false )  . build (  )  . to applications (  )  ;  x stream xstream =  jsonx stream . get instance (  )  ;   s,255,6,encoding,2,[]
2886,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\JsonXStreamTest.java,test encoding decoding without meta data,@ test public void   (  )  throws  exception  {   applications applications =  instance info generator . new builder ( 10 2 )  . with meta data ( false )  . build (  )  . to applications (  )  ;  x stream xstream =  jsonx stream . get instance (  )  ;   s,255,6,decoding,3,[]
2887,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\JsonXStreamTest.java,test encoding decoding without meta data,@ test public void   (  )  throws  exception  {   applications applications =  instance info generator . new builder ( 10 2 )  . with meta data ( false )  . build (  )  . to applications (  )  ;  x stream xstream =  jsonx stream . get instance (  )  ;   s,255,6,without,4,[]
2888,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\JsonXStreamTest.java,test encoding decoding without meta data,@ test public void   (  )  throws  exception  {   applications applications =  instance info generator . new builder ( 10 2 )  . with meta data ( false )  . build (  )  . to applications (  )  ;  x stream xstream =  jsonx stream . get instance (  )  ;   s,255,6,meta,5,[134]
2889,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\JsonXStreamTest.java,test encoding decoding without meta data,@ test public void   (  )  throws  exception  {   applications applications =  instance info generator . new builder ( 10 2 )  . with meta data ( false )  . build (  )  . to applications (  )  ;  x stream xstream =  jsonx stream . get instance (  )  ;   s,255,6,data,6,[139]
2890,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\JsonXStreamTest.java,test void element unmarshalling,"@ test ( expected =  forbidden class exception . class timeout = 5000 )  public void   (  )  throws  exception  {  x stream xstream =  jsonx stream . get instance (  )  ;  xstream . fromxml ( "" { 'void':null } "" )  ;   }  ",222,4,test,1,[2]
2891,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\JsonXStreamTest.java,test void element unmarshalling,"@ test ( expected =  forbidden class exception . class timeout = 5000 )  public void   (  )  throws  exception  {  x stream xstream =  jsonx stream . get instance (  )  ;  xstream . fromxml ( "" { 'void':null } "" )  ;   }  ",222,4,void,2,"[80, 197]"
2892,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\JsonXStreamTest.java,test void element unmarshalling,"@ test ( expected =  forbidden class exception . class timeout = 5000 )  public void   (  )  throws  exception  {  x stream xstream =  jsonx stream . get instance (  )  ;  xstream . fromxml ( "" { 'void':null } "" )  ;   }  ",222,4,element,3,[]
2893,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\JsonXStreamTest.java,test void element unmarshalling,"@ test ( expected =  forbidden class exception . class timeout = 5000 )  public void   (  )  throws  exception  {  x stream xstream =  jsonx stream . get instance (  )  ;  xstream . fromxml ( "" { 'void':null } "" )  ;   }  ",222,4,unmarshalling,4,[]
2894,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJacksonCodecTest.java,test application jackson encode decode,@ test public void   (  )  throws  exception  {   byte array output stream capture stream = new  byte array output stream (  )  ;  codec . write to ( application   1 capture stream )  ;  byte[] encoded = capture stream . to byte array (  )  ;   input stre,255,5,test,1,[2]
2895,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJacksonCodecTest.java,test application jackson encode decode,@ test public void   (  )  throws  exception  {   byte array output stream capture stream = new  byte array output stream (  )  ;  codec . write to ( application   1 capture stream )  ;  byte[] encoded = capture stream . to byte array (  )  ;   input stre,255,5,application,2,[150]
2896,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJacksonCodecTest.java,test application jackson encode decode,@ test public void   (  )  throws  exception  {   byte array output stream capture stream = new  byte array output stream (  )  ;  codec . write to ( application   1 capture stream )  ;  byte[] encoded = capture stream . to byte array (  )  ;   input stre,255,5,jackson,3,[]
2897,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJacksonCodecTest.java,test application jackson encode decode,@ test public void   (  )  throws  exception  {   byte array output stream capture stream = new  byte array output stream (  )  ;  codec . write to ( application   1 capture stream )  ;  byte[] encoded = capture stream . to byte array (  )  ;   input stre,255,5,encode,4,[194]
2898,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJacksonCodecTest.java,test application jackson encode decode,@ test public void   (  )  throws  exception  {   byte array output stream capture stream = new  byte array output stream (  )  ;  codec . write to ( application   1 capture stream )  ;  byte[] encoded = capture stream . to byte array (  )  ;   input stre,255,5,decode,5,[]
2899,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJacksonCodecTest.java,test application jackson encodex stream decode,@ test public void   (  )  throws  exception  {   byte array output stream capture stream = new  byte array output stream (  )  ;  codec . write to ( application   1 capture stream )  ;  byte[] encoded = capture stream . to byte array (  )  ;   input stre,255,6,test,1,[2]
2900,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJacksonCodecTest.java,test application jackson encodex stream decode,@ test public void   (  )  throws  exception  {   byte array output stream capture stream = new  byte array output stream (  )  ;  codec . write to ( application   1 capture stream )  ;  byte[] encoded = capture stream . to byte array (  )  ;   input stre,255,6,application,2,[150]
2901,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJacksonCodecTest.java,test application jackson encodex stream decode,@ test public void   (  )  throws  exception  {   byte array output stream capture stream = new  byte array output stream (  )  ;  codec . write to ( application   1 capture stream )  ;  byte[] encoded = capture stream . to byte array (  )  ;   input stre,255,6,jackson,3,[]
2902,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJacksonCodecTest.java,test application jackson encodex stream decode,@ test public void   (  )  throws  exception  {   byte array output stream capture stream = new  byte array output stream (  )  ;  codec . write to ( application   1 capture stream )  ;  byte[] encoded = capture stream . to byte array (  )  ;   input stre,255,6,encodex,4,[]
2903,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJacksonCodecTest.java,test application jackson encodex stream decode,@ test public void   (  )  throws  exception  {   byte array output stream capture stream = new  byte array output stream (  )  ;  codec . write to ( application   1 capture stream )  ;  byte[] encoded = capture stream . to byte array (  )  ;   input stre,255,6,stream,5,"[68, 83, 115, 174, 212]"
2904,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJacksonCodecTest.java,test application jackson encodex stream decode,@ test public void   (  )  throws  exception  {   byte array output stream capture stream = new  byte array output stream (  )  ;  codec . write to ( application   1 capture stream )  ;  byte[] encoded = capture stream . to byte array (  )  ;   input stre,255,6,decode,6,[]
2905,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJacksonCodecTest.java,test applicationx stream encode jackson decode,@ test public void   (  )  throws  exception  {   application original = application   1 ;   byte array output stream capture stream = new  byte array output stream (  )  ;  new  entity body converter (  )  . write ( original capture stream  media type . ,255,6,test,1,[2]
2906,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJacksonCodecTest.java,test applicationx stream encode jackson decode,@ test public void   (  )  throws  exception  {   application original = application   1 ;   byte array output stream capture stream = new  byte array output stream (  )  ;  new  entity body converter (  )  . write ( original capture stream  media type . ,255,6,applicationx,2,[]
2907,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJacksonCodecTest.java,test applicationx stream encode jackson decode,@ test public void   (  )  throws  exception  {   application original = application   1 ;   byte array output stream capture stream = new  byte array output stream (  )  ;  new  entity body converter (  )  . write ( original capture stream  media type . ,255,6,stream,3,"[111, 126, 158, 234]"
2908,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJacksonCodecTest.java,test applicationx stream encode jackson decode,@ test public void   (  )  throws  exception  {   application original = application   1 ;   byte array output stream capture stream = new  byte array output stream (  )  ;  new  entity body converter (  )  . write ( original capture stream  media type . ,255,6,encode,4,[]
2909,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJacksonCodecTest.java,test applicationx stream encode jackson decode,@ test public void   (  )  throws  exception  {   application original = application   1 ;   byte array output stream capture stream = new  byte array output stream (  )  ;  new  entity body converter (  )  . write ( original capture stream  media type . ,255,6,jackson,5,[]
2910,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJacksonCodecTest.java,test applicationx stream encode jackson decode,@ test public void   (  )  throws  exception  {   application original = application   1 ;   byte array output stream capture stream = new  byte array output stream (  )  ;  new  entity body converter (  )  . write ( original capture stream  media type . ,255,6,decode,6,[]
2911,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJacksonCodecTest.java,test applications jackson encode decode,@ test public void   (  )  throws  exception  {   byte array output stream capture stream = new  byte array output stream (  )  ;  codec . write to ( applications capture stream )  ;  byte[] encoded = capture stream . to byte array (  )  ;   input stream ,255,5,test,1,[2]
2912,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJacksonCodecTest.java,test applications jackson encode decode,@ test public void   (  )  throws  exception  {   byte array output stream capture stream = new  byte array output stream (  )  ;  codec . write to ( applications capture stream )  ;  byte[] encoded = capture stream . to byte array (  )  ;   input stream ,255,5,applications,2,[150]
2913,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJacksonCodecTest.java,test applications jackson encode decode,@ test public void   (  )  throws  exception  {   byte array output stream capture stream = new  byte array output stream (  )  ;  codec . write to ( applications capture stream )  ;  byte[] encoded = capture stream . to byte array (  )  ;   input stream ,255,5,jackson,3,[]
2914,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJacksonCodecTest.java,test applications jackson encode decode,@ test public void   (  )  throws  exception  {   byte array output stream capture stream = new  byte array output stream (  )  ;  codec . write to ( applications capture stream )  ;  byte[] encoded = capture stream . to byte array (  )  ;   input stream ,255,5,encode,4,[191]
2915,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJacksonCodecTest.java,test applications jackson encode decode,@ test public void   (  )  throws  exception  {   byte array output stream capture stream = new  byte array output stream (  )  ;  codec . write to ( applications capture stream )  ;  byte[] encoded = capture stream . to byte array (  )  ;   input stream ,255,5,decode,5,[]
2916,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJacksonCodecTest.java,test applications jackson encodex stream decode,@ test public void   (  )  throws  exception  {   byte array output stream capture stream = new  byte array output stream (  )  ;  codec . write to ( applications capture stream )  ;  byte[] encoded = capture stream . to byte array (  )  ;   input stream ,255,6,test,1,[2]
2917,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJacksonCodecTest.java,test applications jackson encodex stream decode,@ test public void   (  )  throws  exception  {   byte array output stream capture stream = new  byte array output stream (  )  ;  codec . write to ( applications capture stream )  ;  byte[] encoded = capture stream . to byte array (  )  ;   input stream ,255,6,applications,2,[150]
2918,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJacksonCodecTest.java,test applications jackson encodex stream decode,@ test public void   (  )  throws  exception  {   byte array output stream capture stream = new  byte array output stream (  )  ;  codec . write to ( applications capture stream )  ;  byte[] encoded = capture stream . to byte array (  )  ;   input stream ,255,6,jackson,3,[]
2919,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJacksonCodecTest.java,test applications jackson encodex stream decode,@ test public void   (  )  throws  exception  {   byte array output stream capture stream = new  byte array output stream (  )  ;  codec . write to ( applications capture stream )  ;  byte[] encoded = capture stream . to byte array (  )  ;   input stream ,255,6,encodex,4,[]
2920,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJacksonCodecTest.java,test applications jackson encodex stream decode,@ test public void   (  )  throws  exception  {   byte array output stream capture stream = new  byte array output stream (  )  ;  codec . write to ( applications capture stream )  ;  byte[] encoded = capture stream . to byte array (  )  ;   input stream ,255,6,stream,5,"[68, 83, 115, 171, 209, 248]"
2921,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJacksonCodecTest.java,test applications jackson encodex stream decode,@ test public void   (  )  throws  exception  {   byte array output stream capture stream = new  byte array output stream (  )  ;  codec . write to ( applications capture stream )  ;  byte[] encoded = capture stream . to byte array (  )  ;   input stream ,255,6,decode,6,[]
2922,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJacksonCodecTest.java,test applicationsx stream encode jackson decode,@ test public void   (  )  throws  exception  {   applications original = applications ;   byte array output stream capture stream = new  byte array output stream (  )  ;  new  entity body converter (  )  . write ( original capture stream  media type . ap,255,6,test,1,[2]
2923,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJacksonCodecTest.java,test applicationsx stream encode jackson decode,@ test public void   (  )  throws  exception  {   applications original = applications ;   byte array output stream capture stream = new  byte array output stream (  )  ;  new  entity body converter (  )  . write ( original capture stream  media type . ap,255,6,applicationsx,2,[]
2924,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJacksonCodecTest.java,test applicationsx stream encode jackson decode,@ test public void   (  )  throws  exception  {   applications original = applications ;   byte array output stream capture stream = new  byte array output stream (  )  ;  new  entity body converter (  )  . write ( original capture stream  media type . ap,255,6,stream,3,"[109, 124, 156, 232]"
2925,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJacksonCodecTest.java,test applicationsx stream encode jackson decode,@ test public void   (  )  throws  exception  {   applications original = applications ;   byte array output stream capture stream = new  byte array output stream (  )  ;  new  entity body converter (  )  . write ( original capture stream  media type . ap,255,6,encode,4,[]
2926,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJacksonCodecTest.java,test applicationsx stream encode jackson decode,@ test public void   (  )  throws  exception  {   applications original = applications ;   byte array output stream capture stream = new  byte array output stream (  )  ;  new  entity body converter (  )  . write ( original capture stream  media type . ap,255,6,jackson,5,[]
2927,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJacksonCodecTest.java,test applicationsx stream encode jackson decode,@ test public void   (  )  throws  exception  {   applications original = applications ;   byte array output stream capture stream = new  byte array output stream (  )  ;  new  entity body converter (  )  . write ( original capture stream  media type . ap,255,6,decode,6,[]
2928,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJacksonCodecTest.java,test instance info jackson encode decode,@ test public void   (  )  throws  exception  {   byte array output stream capture stream = new  byte array output stream (  )  ;  codec . write to ( instance   info   1   a1 capture stream )  ;  byte[] encoded = capture stream . to byte array (  )  ;   i,255,6,test,1,[2]
2929,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJacksonCodecTest.java,test instance info jackson encode decode,@ test public void   (  )  throws  exception  {   byte array output stream capture stream = new  byte array output stream (  )  ;  codec . write to ( instance   info   1   a1 capture stream )  ;  byte[] encoded = capture stream . to byte array (  )  ;   i,255,6,instance,2,[150]
2930,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJacksonCodecTest.java,test instance info jackson encode decode,@ test public void   (  )  throws  exception  {   byte array output stream capture stream = new  byte array output stream (  )  ;  codec . write to ( instance   info   1   a1 capture stream )  ;  byte[] encoded = capture stream . to byte array (  )  ;   i,255,6,info,3,[161]
2931,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJacksonCodecTest.java,test instance info jackson encode decode,@ test public void   (  )  throws  exception  {   byte array output stream capture stream = new  byte array output stream (  )  ;  codec . write to ( instance   info   1   a1 capture stream )  ;  byte[] encoded = capture stream . to byte array (  )  ;   i,255,6,jackson,4,[]
2932,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJacksonCodecTest.java,test instance info jackson encode decode,@ test public void   (  )  throws  exception  {   byte array output stream capture stream = new  byte array output stream (  )  ;  codec . write to ( instance   info   1   a1 capture stream )  ;  byte[] encoded = capture stream . to byte array (  )  ;   i,255,6,encode,5,[203]
2933,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJacksonCodecTest.java,test instance info jackson encode decode,@ test public void   (  )  throws  exception  {   byte array output stream capture stream = new  byte array output stream (  )  ;  codec . write to ( instance   info   1   a1 capture stream )  ;  byte[] encoded = capture stream . to byte array (  )  ;   i,255,6,decode,6,[]
2934,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJacksonCodecTest.java,test instance info jackson encode decode without meta data,@ test public void   (  )  throws  exception  {   instance info no meta data info =  instance info generator . new builder ( 1 1 )  . with meta data ( false )  . build (  )  . service iterator (  )  . next (  )  ;   byte array output stream capture stream,255,9,test,1,[2]
2935,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJacksonCodecTest.java,test instance info jackson encode decode without meta data,@ test public void   (  )  throws  exception  {   instance info no meta data info =  instance info generator . new builder ( 1 1 )  . with meta data ( false )  . build (  )  . service iterator (  )  . next (  )  ;   byte array output stream capture stream,255,9,instance,2,"[50, 85]"
2936,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJacksonCodecTest.java,test instance info jackson encode decode without meta data,@ test public void   (  )  throws  exception  {   instance info no meta data info =  instance info generator . new builder ( 1 1 )  . with meta data ( false )  . build (  )  . service iterator (  )  . next (  )  ;   byte array output stream capture stream,255,9,info,3,"[59, 77, 94]"
2937,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJacksonCodecTest.java,test instance info jackson encode decode without meta data,@ test public void   (  )  throws  exception  {   instance info no meta data info =  instance info generator . new builder ( 1 1 )  . with meta data ( false )  . build (  )  . service iterator (  )  . next (  )  ;   byte array output stream capture stream,255,9,jackson,4,[]
2938,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJacksonCodecTest.java,test instance info jackson encode decode without meta data,@ test public void   (  )  throws  exception  {   instance info no meta data info =  instance info generator . new builder ( 1 1 )  . with meta data ( false )  . build (  )  . service iterator (  )  . next (  )  ;   byte array output stream capture stream,255,9,encode,5,[]
2939,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJacksonCodecTest.java,test instance info jackson encode decode without meta data,@ test public void   (  )  throws  exception  {   instance info no meta data info =  instance info generator . new builder ( 1 1 )  . with meta data ( false )  . build (  )  . service iterator (  )  . next (  )  ;   byte array output stream capture stream,255,9,decode,6,[]
2940,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJacksonCodecTest.java,test instance info jackson encode decode without meta data,@ test public void   (  )  throws  exception  {   instance info no meta data info =  instance info generator . new builder ( 1 1 )  . with meta data ( false )  . build (  )  . service iterator (  )  . next (  )  ;   byte array output stream capture stream,255,9,without,7,[]
2941,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJacksonCodecTest.java,test instance info jackson encode decode without meta data,@ test public void   (  )  throws  exception  {   instance info no meta data info =  instance info generator . new builder ( 1 1 )  . with meta data ( false )  . build (  )  . service iterator (  )  . next (  )  ;   byte array output stream capture stream,255,9,meta,8,"[67, 139]"
2942,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJacksonCodecTest.java,test instance info jackson encode decode without meta data,@ test public void   (  )  throws  exception  {   instance info no meta data info =  instance info generator . new builder ( 1 1 )  . with meta data ( false )  . build (  )  . service iterator (  )  . next (  )  ;   byte array output stream capture stream,255,9,data,9,"[72, 144]"
2943,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJacksonCodecTest.java,test instance info jackson encodex stream decode,@ test public void   (  )  throws  exception  {   byte array output stream capture stream = new  byte array output stream (  )  ;  codec . write to ( instance   info   1   a1 capture stream )  ;  byte[] encoded = capture stream . to byte array (  )  ;   i,255,7,test,1,[2]
2944,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJacksonCodecTest.java,test instance info jackson encodex stream decode,@ test public void   (  )  throws  exception  {   byte array output stream capture stream = new  byte array output stream (  )  ;  codec . write to ( instance   info   1   a1 capture stream )  ;  byte[] encoded = capture stream . to byte array (  )  ;   i,255,7,instance,2,[150]
2945,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJacksonCodecTest.java,test instance info jackson encodex stream decode,@ test public void   (  )  throws  exception  {   byte array output stream capture stream = new  byte array output stream (  )  ;  codec . write to ( instance   info   1   a1 capture stream )  ;  byte[] encoded = capture stream . to byte array (  )  ;   i,255,7,info,3,[161]
2946,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJacksonCodecTest.java,test instance info jackson encodex stream decode,@ test public void   (  )  throws  exception  {   byte array output stream capture stream = new  byte array output stream (  )  ;  codec . write to ( instance   info   1   a1 capture stream )  ;  byte[] encoded = capture stream . to byte array (  )  ;   i,255,7,jackson,4,[]
2947,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJacksonCodecTest.java,test instance info jackson encodex stream decode,@ test public void   (  )  throws  exception  {   byte array output stream capture stream = new  byte array output stream (  )  ;  codec . write to ( instance   info   1   a1 capture stream )  ;  byte[] encoded = capture stream . to byte array (  )  ;   i,255,7,encodex,5,[]
2948,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJacksonCodecTest.java,test instance info jackson encodex stream decode,@ test public void   (  )  throws  exception  {   byte array output stream capture stream = new  byte array output stream (  )  ;  codec . write to ( instance   info   1   a1 capture stream )  ;  byte[] encoded = capture stream . to byte array (  )  ;   i,255,7,stream,6,"[68, 83, 115, 183, 221]"
2949,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJacksonCodecTest.java,test instance info jackson encodex stream decode,@ test public void   (  )  throws  exception  {   byte array output stream capture stream = new  byte array output stream (  )  ;  codec . write to ( instance   info   1   a1 capture stream )  ;  byte[] encoded = capture stream . to byte array (  )  ;   i,255,7,decode,7,[]
2950,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJacksonCodecTest.java,test instance infox stream encode jackson decode,@ test public void   (  )  throws  exception  {   instance info original = instance   info   1   a1 ;   byte array output stream capture stream = new  byte array output stream (  )  ;  new  entity body converter (  )  . write ( original capture stream  me,255,7,test,1,[2]
2951,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJacksonCodecTest.java,test instance infox stream encode jackson decode,@ test public void   (  )  throws  exception  {   instance info original = instance   info   1   a1 ;   byte array output stream capture stream = new  byte array output stream (  )  ;  new  entity body converter (  )  . write ( original capture stream  me,255,7,instance,2,"[50, 75]"
2952,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJacksonCodecTest.java,test instance infox stream encode jackson decode,@ test public void   (  )  throws  exception  {   instance info original = instance   info   1   a1 ;   byte array output stream capture stream = new  byte array output stream (  )  ;  new  entity body converter (  )  . write ( original capture stream  me,255,7,infox,3,[]
2953,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJacksonCodecTest.java,test instance infox stream encode jackson decode,@ test public void   (  )  throws  exception  {   instance info original = instance   info   1   a1 ;   byte array output stream capture stream = new  byte array output stream (  )  ;  new  entity body converter (  )  . write ( original capture stream  me,255,7,stream,4,"[122, 137, 169, 245]"
2954,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJacksonCodecTest.java,test instance infox stream encode jackson decode,@ test public void   (  )  throws  exception  {   instance info original = instance   info   1   a1 ;   byte array output stream capture stream = new  byte array output stream (  )  ;  new  entity body converter (  )  . write ( original capture stream  me,255,7,encode,5,[]
2955,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJacksonCodecTest.java,test instance infox stream encode jackson decode,@ test public void   (  )  throws  exception  {   instance info original = instance   info   1   a1 ;   byte array output stream capture stream = new  byte array output stream (  )  ;  new  entity body converter (  )  . write ( original capture stream  me,255,7,jackson,6,[]
2956,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJacksonCodecTest.java,test instance infox stream encode jackson decode,@ test public void   (  )  throws  exception  {   instance info original = instance   info   1   a1 ;   byte array output stream capture stream = new  byte array output stream (  )  ;  new  entity body converter (  )  . write ( original capture stream  me,255,7,decode,7,[]
2957,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJacksonCodecTest.java,test jackson write,@ test public void   (  )  throws  exception  {   byte array output stream capture stream = new  byte array output stream (  )  ;  codec . write to ( instance   info   1   a1 capture stream )  ;  byte[] encoded = capture stream . to byte array (  )  ;   i,255,3,test,1,[2]
2958,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJacksonCodecTest.java,test jackson write,@ test public void   (  )  throws  exception  {   byte array output stream capture stream = new  byte array output stream (  )  ;  codec . write to ( instance   info   1   a1 capture stream )  ;  byte[] encoded = capture stream . to byte array (  )  ;   i,255,3,jackson,2,[]
2959,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJacksonCodecTest.java,test jackson write,@ test public void   (  )  throws  exception  {   byte array output stream capture stream = new  byte array output stream (  )  ;  codec . write to ( instance   info   1   a1 capture stream )  ;  byte[] encoded = capture stream . to byte array (  )  ;   i,255,3,write,3,[139]
2960,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJacksonCodecTest.java,test jackson write to string,@ test public void   (  )  throws  exception  {   string json value = codec . write to string ( instance   info   1   a1 )  ;   instance info decoded = codec . read value (  instance info . class new  byte array input stream ( json value . get bytes (  ch,255,5,test,1,[2]
2961,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJacksonCodecTest.java,test jackson write to string,@ test public void   (  )  throws  exception  {   string json value = codec . write to string ( instance   info   1   a1 )  ;   instance info decoded = codec . read value (  instance info . class new  byte array input stream ( json value . get bytes (  ch,255,5,jackson,2,[]
2962,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJacksonCodecTest.java,test jackson write to string,@ test public void   (  )  throws  exception  {   string json value = codec . write to string ( instance   info   1   a1 )  ;   instance info decoded = codec . read value (  instance info . class new  byte array input stream ( json value . get bytes (  ch,255,5,write,3,[78]
2963,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJacksonCodecTest.java,test jackson write to string,@ test public void   (  )  throws  exception  {   string json value = codec . write to string ( instance   info   1   a1 )  ;   instance info decoded = codec . read value (  instance info . class new  byte array input stream ( json value . get bytes (  ch,255,5,to,4,[84]
2964,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJacksonCodecTest.java,test jackson write to string,@ test public void   (  )  throws  exception  {   string json value = codec . write to string ( instance   info   1   a1 )  ;   instance info decoded = codec . read value (  instance info . class new  byte array input stream ( json value . get bytes (  ch,255,5,string,5,"[50, 87]"
2965,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,do amazon info compact encode decode test,private void   (  abstract eureka jackson codec codec )  throws  exception  {   amazon info amazon info =  (  amazon info ) info iterator . next (  )  . get data center info (  )  ;   string encoded string = codec . get object mapper (  data center info . class )  . write value as string ( amazon info )  ;   amazon info decoded value =  (  amazon info ) codec . get object mapper (  data center info . class )  . read value ( encoded string  data center info . class )  ;  assert that ( decoded value . get (  meta data key . public hostname )  is ( equal to ( amazon info . get (  meta data key . public hostname )  )  )  )  ;   }  ,635,7,do,1,[]
2966,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,do amazon info compact encode decode test,private void   (  abstract eureka jackson codec codec )  throws  exception  {   amazon info amazon info =  (  amazon info ) info iterator . next (  )  . get data center info (  )  ;   string encoded string = codec . get object mapper (  data center info . class )  . write value as string ( amazon info )  ;   amazon info decoded value =  (  amazon info ) codec . get object mapper (  data center info . class )  . read value ( encoded string  data center info . class )  ;  assert that ( decoded value . get (  meta data key . public hostname )  is ( equal to ( amazon info . get (  meta data key . public hostname )  )  )  )  ;   }  ,635,7,amazon,2,"[80, 92, 110, 291, 310, 342, 563]"
2967,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,do amazon info compact encode decode test,private void   (  abstract eureka jackson codec codec )  throws  exception  {   amazon info amazon info =  (  amazon info ) info iterator . next (  )  . get data center info (  )  ;   string encoded string = codec . get object mapper (  data center info . class )  . write value as string ( amazon info )  ;   amazon info decoded value =  (  amazon info ) codec . get object mapper (  data center info . class )  . read value ( encoded string  data center info . class )  ;  assert that ( decoded value . get (  meta data key . public hostname )  is ( equal to ( amazon info . get (  meta data key . public hostname )  )  )  )  ;   }  ,635,7,info,3,"[87, 99, 117, 124, 169, 249, 298, 317, 349, 397, 456, 570]"
2968,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,do amazon info compact encode decode test,private void   (  abstract eureka jackson codec codec )  throws  exception  {   amazon info amazon info =  (  amazon info ) info iterator . next (  )  . get data center info (  )  ;   string encoded string = codec . get object mapper (  data center info . class )  . write value as string ( amazon info )  ;   amazon info decoded value =  (  amazon info ) codec . get object mapper (  data center info . class )  . read value ( encoded string  data center info . class )  ;  assert that ( decoded value . get (  meta data key . public hostname )  is ( equal to ( amazon info . get (  meta data key . public hostname )  )  )  )  ;   }  ,635,7,compact,4,[]
2969,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,do amazon info compact encode decode test,private void   (  abstract eureka jackson codec codec )  throws  exception  {   amazon info amazon info =  (  amazon info ) info iterator . next (  )  . get data center info (  )  ;   string encoded string = codec . get object mapper (  data center info . class )  . write value as string ( amazon info )  ;   amazon info decoded value =  (  amazon info ) codec . get object mapper (  data center info . class )  . read value ( encoded string  data center info . class )  ;  assert that ( decoded value . get (  meta data key . public hostname )  is ( equal to ( amazon info . get (  meta data key . public hostname )  )  )  )  ;   }  ,635,7,encode,5,"[191, 428]"
2970,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,do amazon info compact encode decode test,private void   (  abstract eureka jackson codec codec )  throws  exception  {   amazon info amazon info =  (  amazon info ) info iterator . next (  )  . get data center info (  )  ;   string encoded string = codec . get object mapper (  data center info . class )  . write value as string ( amazon info )  ;   amazon info decoded value =  (  amazon info ) codec . get object mapper (  data center info . class )  . read value ( encoded string  data center info . class )  ;  assert that ( decoded value . get (  meta data key . public hostname )  is ( equal to ( amazon info . get (  meta data key . public hostname )  )  )  )  ;   }  ,635,7,decode,6,"[322, 489]"
2971,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,do amazon info compact encode decode test,private void   (  abstract eureka jackson codec codec )  throws  exception  {   amazon info amazon info =  (  amazon info ) info iterator . next (  )  . get data center info (  )  ;   string encoded string = codec . get object mapper (  data center info . class )  . write value as string ( amazon info )  ;   amazon info decoded value =  (  amazon info ) codec . get object mapper (  data center info . class )  . read value ( encoded string  data center info . class )  ;  assert that ( decoded value . get (  meta data key . public hostname )  is ( equal to ( amazon info . get (  meta data key . public hostname )  )  )  )  ;   }  ,635,7,test,7,[]
2972,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,do amazon info encode decode test,private void   (  abstract eureka jackson codec codec )  throws  exception  {   amazon info amazon info =  (  amazon info ) info iterator . next (  )  . get data center info (  )  ;   string encoded string = codec . get object mapper (  data center info . class )  . write value as string ( amazon info )  ;   data center info decoded value = codec . get object mapper (  data center info . class )  . read value ( encoded string  data center info . class )  ;  assert that (  eureka entity comparators . equal ( amazon info decoded value )  is ( true )  )  ;   }  ,565,6,do,1,[]
2973,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,do amazon info encode decode test,private void   (  abstract eureka jackson codec codec )  throws  exception  {   amazon info amazon info =  (  amazon info ) info iterator . next (  )  . get data center info (  )  ;   string encoded string = codec . get object mapper (  data center info . class )  . write value as string ( amazon info )  ;   data center info decoded value = codec . get object mapper (  data center info . class )  . read value ( encoded string  data center info . class )  ;  assert that (  eureka entity comparators . equal ( amazon info decoded value )  is ( true )  )  ;   }  ,565,6,amazon,2,"[80, 92, 110, 291, 513]"
2974,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,do amazon info encode decode test,private void   (  abstract eureka jackson codec codec )  throws  exception  {   amazon info amazon info =  (  amazon info ) info iterator . next (  )  . get data center info (  )  ;   string encoded string = codec . get object mapper (  data center info . class )  . write value as string ( amazon info )  ;   data center info decoded value = codec . get object mapper (  data center info . class )  . read value ( encoded string  data center info . class )  ;  assert that (  eureka entity comparators . equal ( amazon info decoded value )  is ( true )  )  ;   }  ,565,6,info,3,"[87, 99, 117, 124, 169, 249, 298, 322, 384, 443, 520]"
2975,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,do amazon info encode decode test,private void   (  abstract eureka jackson codec codec )  throws  exception  {   amazon info amazon info =  (  amazon info ) info iterator . next (  )  . get data center info (  )  ;   string encoded string = codec . get object mapper (  data center info . class )  . write value as string ( amazon info )  ;   data center info decoded value = codec . get object mapper (  data center info . class )  . read value ( encoded string  data center info . class )  ;  assert that (  eureka entity comparators . equal ( amazon info decoded value )  is ( true )  )  ;   }  ,565,6,encode,4,"[191, 415]"
2976,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,do amazon info encode decode test,private void   (  abstract eureka jackson codec codec )  throws  exception  {   amazon info amazon info =  (  amazon info ) info iterator . next (  )  . get data center info (  )  ;   string encoded string = codec . get object mapper (  data center info . class )  . write value as string ( amazon info )  ;   data center info decoded value = codec . get object mapper (  data center info . class )  . read value ( encoded string  data center info . class )  ;  assert that (  eureka entity comparators . equal ( amazon info decoded value )  is ( true )  )  ;   }  ,565,6,decode,5,"[327, 525]"
2977,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,do amazon info encode decode test,private void   (  abstract eureka jackson codec codec )  throws  exception  {   amazon info amazon info =  (  amazon info ) info iterator . next (  )  . get data center info (  )  ;   string encoded string = codec . get object mapper (  data center info . class )  . write value as string ( amazon info )  ;   data center info decoded value = codec . get object mapper (  data center info . class )  . read value ( encoded string  data center info . class )  ;  assert that (  eureka entity comparators . equal ( amazon info decoded value )  is ( true )  )  ;   }  ,565,6,test,6,[]
2978,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,do application encode decode,"private void   (  abstract eureka jackson codec codec )  throws  exception  {   application application = new  application ( ""test app"" )  ;  application . add instance ( info iterator . next (  )  )  ;  application . add instance ( info iterator . next (  )  )  ;   string encoded string = codec . get object mapper (  application . class )  . write value as string ( application )  ;   application decoded value = codec . get object mapper (  application . class )  . read value ( encoded string  application . class )  ;  assert that (  eureka entity comparators . equal ( application decoded value )  is ( true )  )  ;   }  ",628,4,do,1,[]
2979,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,do application encode decode,"private void   (  abstract eureka jackson codec codec )  throws  exception  {   application application = new  application ( ""test app"" )  ;  application . add instance ( info iterator . next (  )  )  ;  application . add instance ( info iterator . next (  )  )  ;   string encoded string = codec . get object mapper (  application . class )  . write value as string ( application )  ;   application decoded value = codec . get object mapper (  application . class )  . read value ( encoded string  application . class )  ;  assert that (  eureka entity comparators . equal ( application decoded value )  is ( true )  )  ;   }  ",628,4,application,2,"[80, 92, 111, 142, 204, 320, 369, 388, 445, 499, 576]"
2980,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,do application encode decode,"private void   (  abstract eureka jackson codec codec )  throws  exception  {   application application = new  application ( ""test app"" )  ;  application . add instance ( info iterator . next (  )  )  ;  application . add instance ( info iterator . next (  )  )  ;   string encoded string = codec . get object mapper (  application . class )  . write value as string ( application )  ;   application decoded value = codec . get object mapper (  application . class )  . read value ( encoded string  application . class )  ;  assert that (  eureka entity comparators . equal ( application decoded value )  is ( true )  )  ;   }  ",628,4,encode,3,"[274, 483]"
2981,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,do application encode decode,"private void   (  abstract eureka jackson codec codec )  throws  exception  {   application application = new  application ( ""test app"" )  ;  application . add instance ( info iterator . next (  )  )  ;  application . add instance ( info iterator . next (  )  )  ;   string encoded string = codec . get object mapper (  application . class )  . write value as string ( application )  ;   application decoded value = codec . get object mapper (  application . class )  . read value ( encoded string  application . class )  ;  assert that (  eureka entity comparators . equal ( application decoded value )  is ( true )  )  ;   }  ",628,4,decode,4,"[400, 588]"
2982,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,do applications encode decode,private void   (  abstract eureka jackson codec codec )  throws  exception  {   applications applications = info generator . take delta ( 2 )  ;   string encoded string = codec . get object mapper (  applications . class )  . write value as string ( applications )  ;   applications decoded value = codec . get object mapper (  applications . class )  . read value ( encoded string  applications . class )  ;  assert that (  eureka entity comparators . equal ( applications decoded value )  is ( true )  )  ;   }  ,514,4,do,1,[]
2983,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,do applications encode decode,private void   (  abstract eureka jackson codec codec )  throws  exception  {   applications applications = info generator . take delta ( 2 )  ;   string encoded string = codec . get object mapper (  applications . class )  . write value as string ( applications )  ;   applications decoded value = codec . get object mapper (  applications . class )  . read value ( encoded string  applications . class )  ;  assert that (  eureka entity comparators . equal ( applications decoded value )  is ( true )  )  ;   }  ,514,4,applications,2,"[80, 93, 200, 250, 270, 328, 383, 461]"
2984,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,do applications encode decode,private void   (  abstract eureka jackson codec codec )  throws  exception  {   applications applications = info generator . take delta ( 2 )  ;   string encoded string = codec . get object mapper (  applications . class )  . write value as string ( applications )  ;   applications decoded value = codec . get object mapper (  applications . class )  . read value ( encoded string  applications . class )  ;  assert that (  eureka entity comparators . equal ( applications decoded value )  is ( true )  )  ;   }  ,514,4,encode,3,"[154, 367]"
2985,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,do applications encode decode,private void   (  abstract eureka jackson codec codec )  throws  exception  {   applications applications = info generator . take delta ( 2 )  ;   string encoded string = codec . get object mapper (  applications . class )  . write value as string ( applications )  ;   applications decoded value = codec . get object mapper (  applications . class )  . read value ( encoded string  applications . class )  ;  assert that (  eureka entity comparators . equal ( applications decoded value )  is ( true )  )  ;   }  ,514,4,decode,4,"[283, 474]"
2986,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,do instance info compact encode decode,"private void   (  abstract eureka jackson codec codec boolean is json )  throws  exception  {   instance info instance info = info iterator . next (  )  ;   string encoded string = codec . get object mapper (  instance info . class )  . write value as string ( instance info )  ;  if  ( is json )   {   json node metadata node = new  object mapper (  )  . read tree ( encoded string )  . get ( ""instance"" )  . get ( ""metadata"" )  ;  assert that ( metadata node is ( null value (  )  )  )  ;   }   instance info decoded value = codec . get object mapper (  instance info . class )  . read value ( encoded string  instance info . class )  ;  assert that ( decoded value . get id (  )  is ( equal to ( instance info . get id (  )  )  )  )  ;  assert that ( decoded value . get metadata (  )  . is empty (  )  is ( true )  )  ;   }  ",829,6,do,1,[]
2987,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,do instance info compact encode decode,"private void   (  abstract eureka jackson codec codec boolean is json )  throws  exception  {   instance info instance info = info iterator . next (  )  ;   string encoded string = codec . get object mapper (  instance info . class )  . write value as string ( instance info )  ;  if  ( is json )   {   json node metadata node = new  object mapper (  )  . read tree ( encoded string )  . get ( ""instance"" )  . get ( ""metadata"" )  ;  assert that ( metadata node is ( null value (  )  )  )  ;   }   instance info decoded value = codec . get object mapper (  instance info . class )  . read value ( encoded string  instance info . class )  ;  assert that ( decoded value . get id (  )  is ( equal to ( instance info . get id (  )  )  )  )  ;  assert that ( decoded value . get metadata (  )  . is empty (  )  is ( true )  )  ;   }  ",829,6,instance,2,"[96, 110, 210, 261, 395, 497, 556, 612, 699]"
2988,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,do instance info compact encode decode,"private void   (  abstract eureka jackson codec codec boolean is json )  throws  exception  {   instance info instance info = info iterator . next (  )  ;   string encoded string = codec . get object mapper (  instance info . class )  . write value as string ( instance info )  ;  if  ( is json )   {   json node metadata node = new  object mapper (  )  . read tree ( encoded string )  . get ( ""instance"" )  . get ( ""metadata"" )  ;  assert that ( metadata node is ( null value (  )  )  )  ;   }   instance info decoded value = codec . get object mapper (  instance info . class )  . read value ( encoded string  instance info . class )  ;  assert that ( decoded value . get id (  )  is ( equal to ( instance info . get id (  )  )  )  )  ;  assert that ( decoded value . get metadata (  )  . is empty (  )  is ( true )  )  ;   }  ",829,6,info,3,"[105, 119, 126, 219, 270, 506, 565, 621, 708]"
2989,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,do instance info compact encode decode,"private void   (  abstract eureka jackson codec codec boolean is json )  throws  exception  {   instance info instance info = info iterator . next (  )  ;   string encoded string = codec . get object mapper (  instance info . class )  . write value as string ( instance info )  ;  if  ( is json )   {   json node metadata node = new  object mapper (  )  . read tree ( encoded string )  . get ( ""instance"" )  . get ( ""metadata"" )  ;  assert that ( metadata node is ( null value (  )  )  )  ;   }   instance info decoded value = codec . get object mapper (  instance info . class )  . read value ( encoded string  instance info . class )  ;  assert that ( decoded value . get id (  )  is ( equal to ( instance info . get id (  )  )  )  )  ;  assert that ( decoded value . get metadata (  )  . is empty (  )  is ( true )  )  ;   }  ",829,6,compact,4,[]
2990,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,do instance info compact encode decode,"private void   (  abstract eureka jackson codec codec boolean is json )  throws  exception  {   instance info instance info = info iterator . next (  )  ;   string encoded string = codec . get object mapper (  instance info . class )  . write value as string ( instance info )  ;  if  ( is json )   {   json node metadata node = new  object mapper (  )  . read tree ( encoded string )  . get ( ""instance"" )  . get ( ""metadata"" )  ;  assert that ( metadata node is ( null value (  )  )  )  ;   }   instance info decoded value = codec . get object mapper (  instance info . class )  . read value ( encoded string  instance info . class )  ;  assert that ( decoded value . get id (  )  is ( equal to ( instance info . get id (  )  )  )  )  ;  assert that ( decoded value . get metadata (  )  . is empty (  )  is ( true )  )  ;   }  ",829,6,encode,5,"[164, 368, 596]"
2991,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,do instance info compact encode decode,"private void   (  abstract eureka jackson codec codec boolean is json )  throws  exception  {   instance info instance info = info iterator . next (  )  ;   string encoded string = codec . get object mapper (  instance info . class )  . write value as string ( instance info )  ;  if  ( is json )   {   json node metadata node = new  object mapper (  )  . read tree ( encoded string )  . get ( ""instance"" )  . get ( ""metadata"" )  ;  assert that ( metadata node is ( null value (  )  )  )  ;   }   instance info decoded value = codec . get object mapper (  instance info . class )  . read value ( encoded string  instance info . class )  ;  assert that ( decoded value . get id (  )  is ( equal to ( instance info . get id (  )  )  )  )  ;  assert that ( decoded value . get metadata (  )  . is empty (  )  is ( true )  )  ;   }  ",829,6,decode,6,"[511, 654, 754]"
2992,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,do instance info encode decode,private void   (  abstract eureka jackson codec codec )  throws  exception  {   instance info instance info = info iterator . next (  )  ;   string encoded string = codec . get object mapper (  instance info . class )  . write value as string ( instance info )  ;   instance info decoded value = codec . get object mapper (  instance info . class )  . read value ( encoded string  instance info . class )  ;  assert that (  eureka entity comparators . equal ( instance info decoded value )  is ( true )  )  ;   }  ,514,5,do,1,[]
2993,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,do instance info encode decode,private void   (  abstract eureka jackson codec codec )  throws  exception  {   instance info instance info = info iterator . next (  )  ;   string encoded string = codec . get object mapper (  instance info . class )  . write value as string ( instance info )  ;   instance info decoded value = codec . get object mapper (  instance info . class )  . read value ( encoded string  instance info . class )  ;  assert that (  eureka entity comparators . equal ( instance info decoded value )  is ( true )  )  ;   }  ,514,5,instance,2,"[80, 94, 194, 245, 266, 325, 381, 460]"
2994,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,do instance info encode decode,private void   (  abstract eureka jackson codec codec )  throws  exception  {   instance info instance info = info iterator . next (  )  ;   string encoded string = codec . get object mapper (  instance info . class )  . write value as string ( instance info )  ;   instance info decoded value = codec . get object mapper (  instance info . class )  . read value ( encoded string  instance info . class )  ;  assert that (  eureka entity comparators . equal ( instance info decoded value )  is ( true )  )  ;   }  ,514,5,info,3,"[89, 103, 110, 203, 254, 275, 334, 390, 469]"
2995,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,do instance info encode decode,private void   (  abstract eureka jackson codec codec )  throws  exception  {   instance info instance info = info iterator . next (  )  ;   string encoded string = codec . get object mapper (  instance info . class )  . write value as string ( instance info )  ;   instance info decoded value = codec . get object mapper (  instance info . class )  . read value ( encoded string  instance info . class )  ;  assert that (  eureka entity comparators . equal ( instance info decoded value )  is ( true )  )  ;   }  ,514,5,encode,4,"[148, 365]"
2996,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,do instance info encode decode,private void   (  abstract eureka jackson codec codec )  throws  exception  {   instance info instance info = info iterator . next (  )  ;   string encoded string = codec . get object mapper (  instance info . class )  . write value as string ( instance info )  ;   instance info decoded value = codec . get object mapper (  instance info . class )  . read value ( encoded string  instance info . class )  ;  assert that (  eureka entity comparators . equal ( instance info decoded value )  is ( true )  )  ;   }  ,514,5,decode,5,"[280, 474]"
2997,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,do instance info ignored fields are filtered out during deserialization process,public void   (  abstract eureka jackson codec full codec  abstract eureka jackson codec compact codec )  throws  exception  {   instance info instance info = info iterator . next (  )  ;   string encoded string = full codec . get object mapper (  instance info . class )  . write value as string ( instance info )  ;   instance info decoded value = compact codec . get object mapper (  instance info . class )  . read value ( encoded string  instance info . class )  ;  assert that ( decoded value . get id (  )  is ( equal to ( instance info . get id (  )  )  )  )  ;  assert that ( decoded value . get app name (  )  is ( equal to ( instance info . get app name (  )  )  )  )  ;  assert that ( decoded value . getip addr (  )  is ( equal to ( instance info . getip addr (  )  )  )  )  ;  assert that ( decoded value . getvip address (  )  is ( equal to ( instance info . getvip address (  )  )  )  )  ;  assert that ( decoded value . get secure vip address (  )  is ( equal to ( instance info . get secure vip address (  )  )  )  )  ;  assert that ( decoded value . get host name (  )  is ( equal to ( instance info . get host name (  )  )  )  )  ;  assert that ( decoded value . get status (  )  is ( equal to ( instance info . get status (  )  )  )  )  ;  assert that ( decoded value . get action type (  )  is ( equal to ( instance info . get action type (  )  )  )  )  ;  assert that ( decoded value . getasg name (  )  is ( equal to ( instance info . getasg name (  )  )  )  )  ;  assert that ( decoded value . get last updated timestamp (  )  is ( equal to ( instance info . get last updated timestamp (  )  )  )  )  ;   amazon info source amazon info =  (  amazon info ) instance info . get data center info (  )  ;   amazon info decoded amazon info =  (  amazon info ) decoded value . get data center info (  )  ;  assert that ( decoded amazon info . get (  meta data key . account id )  is ( equal to ( source amazon info . get (  meta data key . account id )  )  )  )  ;   }  ,1989,11,do,1,[]
2998,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,do instance info ignored fields are filtered out during deserialization process,public void   (  abstract eureka jackson codec full codec  abstract eureka jackson codec compact codec )  throws  exception  {   instance info instance info = info iterator . next (  )  ;   string encoded string = full codec . get object mapper (  instance info . class )  . write value as string ( instance info )  ;   instance info decoded value = compact codec . get object mapper (  instance info . class )  . read value ( encoded string  instance info . class )  ;  assert that ( decoded value . get id (  )  is ( equal to ( instance info . get id (  )  )  )  )  ;  assert that ( decoded value . get app name (  )  is ( equal to ( instance info . get app name (  )  )  )  )  ;  assert that ( decoded value . getip addr (  )  is ( equal to ( instance info . getip addr (  )  )  )  )  ;  assert that ( decoded value . getvip address (  )  is ( equal to ( instance info . getvip address (  )  )  )  )  ;  assert that ( decoded value . get secure vip address (  )  is ( equal to ( instance info . get secure vip address (  )  )  )  )  ;  assert that ( decoded value . get host name (  )  is ( equal to ( instance info . get host name (  )  )  )  )  ;  assert that ( decoded value . get status (  )  is ( equal to ( instance info . get status (  )  )  )  )  ;  assert that ( decoded value . get action type (  )  is ( equal to ( instance info . get action type (  )  )  )  )  ;  assert that ( decoded value . getasg name (  )  is ( equal to ( instance info . getasg name (  )  )  )  )  ;  assert that ( decoded value . get last updated timestamp (  )  is ( equal to ( instance info . get last updated timestamp (  )  )  )  )  ;   amazon info source amazon info =  (  amazon info ) instance info . get data center info (  )  ;   amazon info decoded amazon info =  (  amazon info ) decoded value . get data center info (  )  ;  assert that ( decoded amazon info . get (  meta data key . account id )  is ( equal to ( source amazon info . get (  meta data key . account id )  )  )  )  ;   }  ,1989,11,instance,2,"[129, 143, 248, 299, 320, 387, 443, 530, 636, 746, 858, 982, 1105, 1216, 1329, 1443, 1568, 1681]"
2999,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,do instance info ignored fields are filtered out during deserialization process,public void   (  abstract eureka jackson codec full codec  abstract eureka jackson codec compact codec )  throws  exception  {   instance info instance info = info iterator . next (  )  ;   string encoded string = full codec . get object mapper (  instance info . class )  . write value as string ( instance info )  ;   instance info decoded value = compact codec . get object mapper (  instance info . class )  . read value ( encoded string  instance info . class )  ;  assert that ( decoded value . get id (  )  is ( equal to ( instance info . get id (  )  )  )  )  ;  assert that ( decoded value . get app name (  )  is ( equal to ( instance info . get app name (  )  )  )  )  ;  assert that ( decoded value . getip addr (  )  is ( equal to ( instance info . getip addr (  )  )  )  )  ;  assert that ( decoded value . getvip address (  )  is ( equal to ( instance info . getvip address (  )  )  )  )  ;  assert that ( decoded value . get secure vip address (  )  is ( equal to ( instance info . get secure vip address (  )  )  )  )  ;  assert that ( decoded value . get host name (  )  is ( equal to ( instance info . get host name (  )  )  )  )  ;  assert that ( decoded value . get status (  )  is ( equal to ( instance info . get status (  )  )  )  )  ;  assert that ( decoded value . get action type (  )  is ( equal to ( instance info . get action type (  )  )  )  )  ;  assert that ( decoded value . getasg name (  )  is ( equal to ( instance info . getasg name (  )  )  )  )  ;  assert that ( decoded value . get last updated timestamp (  )  is ( equal to ( instance info . get last updated timestamp (  )  )  )  )  ;   amazon info source amazon info =  (  amazon info ) instance info . get data center info (  )  ;   amazon info decoded amazon info =  (  amazon info ) decoded value . get data center info (  )  ;  assert that ( decoded amazon info . get (  meta data key . account id )  is ( equal to ( source amazon info . get (  meta data key . account id )  )  )  )  ;   }  ,1989,11,info,3,"[138, 152, 159, 257, 308, 329, 396, 452, 539, 645, 755, 867, 991, 1114, 1225, 1338, 1452, 1577, 1637, 1656, 1674, 1690, 1713, 1735, 1755, 1773, 1812, 1855, 1929]"
3000,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,do instance info ignored fields are filtered out during deserialization process,public void   (  abstract eureka jackson codec full codec  abstract eureka jackson codec compact codec )  throws  exception  {   instance info instance info = info iterator . next (  )  ;   string encoded string = full codec . get object mapper (  instance info . class )  . write value as string ( instance info )  ;   instance info decoded value = compact codec . get object mapper (  instance info . class )  . read value ( encoded string  instance info . class )  ;  assert that ( decoded value . get id (  )  is ( equal to ( instance info . get id (  )  )  )  )  ;  assert that ( decoded value . get app name (  )  is ( equal to ( instance info . get app name (  )  )  )  )  ;  assert that ( decoded value . getip addr (  )  is ( equal to ( instance info . getip addr (  )  )  )  )  ;  assert that ( decoded value . getvip address (  )  is ( equal to ( instance info . getvip address (  )  )  )  )  ;  assert that ( decoded value . get secure vip address (  )  is ( equal to ( instance info . get secure vip address (  )  )  )  )  ;  assert that ( decoded value . get host name (  )  is ( equal to ( instance info . get host name (  )  )  )  )  ;  assert that ( decoded value . get status (  )  is ( equal to ( instance info . get status (  )  )  )  )  ;  assert that ( decoded value . get action type (  )  is ( equal to ( instance info . get action type (  )  )  )  )  ;  assert that ( decoded value . getasg name (  )  is ( equal to ( instance info . getasg name (  )  )  )  )  ;  assert that ( decoded value . get last updated timestamp (  )  is ( equal to ( instance info . get last updated timestamp (  )  )  )  )  ;   amazon info source amazon info =  (  amazon info ) instance info . get data center info (  )  ;   amazon info decoded amazon info =  (  amazon info ) decoded value . get data center info (  )  ;  assert that ( decoded amazon info . get (  meta data key . account id )  is ( equal to ( source amazon info . get (  meta data key . account id )  )  )  )  ;   }  ,1989,11,ignored,4,[]
3001,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,do instance info ignored fields are filtered out during deserialization process,public void   (  abstract eureka jackson codec full codec  abstract eureka jackson codec compact codec )  throws  exception  {   instance info instance info = info iterator . next (  )  ;   string encoded string = full codec . get object mapper (  instance info . class )  . write value as string ( instance info )  ;   instance info decoded value = compact codec . get object mapper (  instance info . class )  . read value ( encoded string  instance info . class )  ;  assert that ( decoded value . get id (  )  is ( equal to ( instance info . get id (  )  )  )  )  ;  assert that ( decoded value . get app name (  )  is ( equal to ( instance info . get app name (  )  )  )  )  ;  assert that ( decoded value . getip addr (  )  is ( equal to ( instance info . getip addr (  )  )  )  )  ;  assert that ( decoded value . getvip address (  )  is ( equal to ( instance info . getvip address (  )  )  )  )  ;  assert that ( decoded value . get secure vip address (  )  is ( equal to ( instance info . get secure vip address (  )  )  )  )  ;  assert that ( decoded value . get host name (  )  is ( equal to ( instance info . get host name (  )  )  )  )  ;  assert that ( decoded value . get status (  )  is ( equal to ( instance info . get status (  )  )  )  )  ;  assert that ( decoded value . get action type (  )  is ( equal to ( instance info . get action type (  )  )  )  )  ;  assert that ( decoded value . getasg name (  )  is ( equal to ( instance info . getasg name (  )  )  )  )  ;  assert that ( decoded value . get last updated timestamp (  )  is ( equal to ( instance info . get last updated timestamp (  )  )  )  )  ;   amazon info source amazon info =  (  amazon info ) instance info . get data center info (  )  ;   amazon info decoded amazon info =  (  amazon info ) decoded value . get data center info (  )  ;  assert that ( decoded amazon info . get (  meta data key . account id )  is ( equal to ( source amazon info . get (  meta data key . account id )  )  )  )  ;   }  ,1989,11,fields,5,[]
3002,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,do instance info ignored fields are filtered out during deserialization process,public void   (  abstract eureka jackson codec full codec  abstract eureka jackson codec compact codec )  throws  exception  {   instance info instance info = info iterator . next (  )  ;   string encoded string = full codec . get object mapper (  instance info . class )  . write value as string ( instance info )  ;   instance info decoded value = compact codec . get object mapper (  instance info . class )  . read value ( encoded string  instance info . class )  ;  assert that ( decoded value . get id (  )  is ( equal to ( instance info . get id (  )  )  )  )  ;  assert that ( decoded value . get app name (  )  is ( equal to ( instance info . get app name (  )  )  )  )  ;  assert that ( decoded value . getip addr (  )  is ( equal to ( instance info . getip addr (  )  )  )  )  ;  assert that ( decoded value . getvip address (  )  is ( equal to ( instance info . getvip address (  )  )  )  )  ;  assert that ( decoded value . get secure vip address (  )  is ( equal to ( instance info . get secure vip address (  )  )  )  )  ;  assert that ( decoded value . get host name (  )  is ( equal to ( instance info . get host name (  )  )  )  )  ;  assert that ( decoded value . get status (  )  is ( equal to ( instance info . get status (  )  )  )  )  ;  assert that ( decoded value . get action type (  )  is ( equal to ( instance info . get action type (  )  )  )  )  ;  assert that ( decoded value . getasg name (  )  is ( equal to ( instance info . getasg name (  )  )  )  )  ;  assert that ( decoded value . get last updated timestamp (  )  is ( equal to ( instance info . get last updated timestamp (  )  )  )  )  ;   amazon info source amazon info =  (  amazon info ) instance info . get data center info (  )  ;   amazon info decoded amazon info =  (  amazon info ) decoded value . get data center info (  )  ;  assert that ( decoded amazon info . get (  meta data key . account id )  is ( equal to ( source amazon info . get (  meta data key . account id )  )  )  )  ;   }  ,1989,11,are,6,[]
3003,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,do instance info ignored fields are filtered out during deserialization process,public void   (  abstract eureka jackson codec full codec  abstract eureka jackson codec compact codec )  throws  exception  {   instance info instance info = info iterator . next (  )  ;   string encoded string = full codec . get object mapper (  instance info . class )  . write value as string ( instance info )  ;   instance info decoded value = compact codec . get object mapper (  instance info . class )  . read value ( encoded string  instance info . class )  ;  assert that ( decoded value . get id (  )  is ( equal to ( instance info . get id (  )  )  )  )  ;  assert that ( decoded value . get app name (  )  is ( equal to ( instance info . get app name (  )  )  )  )  ;  assert that ( decoded value . getip addr (  )  is ( equal to ( instance info . getip addr (  )  )  )  )  ;  assert that ( decoded value . getvip address (  )  is ( equal to ( instance info . getvip address (  )  )  )  )  ;  assert that ( decoded value . get secure vip address (  )  is ( equal to ( instance info . get secure vip address (  )  )  )  )  ;  assert that ( decoded value . get host name (  )  is ( equal to ( instance info . get host name (  )  )  )  )  ;  assert that ( decoded value . get status (  )  is ( equal to ( instance info . get status (  )  )  )  )  ;  assert that ( decoded value . get action type (  )  is ( equal to ( instance info . get action type (  )  )  )  )  ;  assert that ( decoded value . getasg name (  )  is ( equal to ( instance info . getasg name (  )  )  )  )  ;  assert that ( decoded value . get last updated timestamp (  )  is ( equal to ( instance info . get last updated timestamp (  )  )  )  )  ;   amazon info source amazon info =  (  amazon info ) instance info . get data center info (  )  ;   amazon info decoded amazon info =  (  amazon info ) decoded value . get data center info (  )  ;  assert that ( decoded amazon info . get (  meta data key . account id )  is ( equal to ( source amazon info . get (  meta data key . account id )  )  )  )  ;   }  ,1989,11,filtered,7,[]
3004,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,do instance info ignored fields are filtered out during deserialization process,public void   (  abstract eureka jackson codec full codec  abstract eureka jackson codec compact codec )  throws  exception  {   instance info instance info = info iterator . next (  )  ;   string encoded string = full codec . get object mapper (  instance info . class )  . write value as string ( instance info )  ;   instance info decoded value = compact codec . get object mapper (  instance info . class )  . read value ( encoded string  instance info . class )  ;  assert that ( decoded value . get id (  )  is ( equal to ( instance info . get id (  )  )  )  )  ;  assert that ( decoded value . get app name (  )  is ( equal to ( instance info . get app name (  )  )  )  )  ;  assert that ( decoded value . getip addr (  )  is ( equal to ( instance info . getip addr (  )  )  )  )  ;  assert that ( decoded value . getvip address (  )  is ( equal to ( instance info . getvip address (  )  )  )  )  ;  assert that ( decoded value . get secure vip address (  )  is ( equal to ( instance info . get secure vip address (  )  )  )  )  ;  assert that ( decoded value . get host name (  )  is ( equal to ( instance info . get host name (  )  )  )  )  ;  assert that ( decoded value . get status (  )  is ( equal to ( instance info . get status (  )  )  )  )  ;  assert that ( decoded value . get action type (  )  is ( equal to ( instance info . get action type (  )  )  )  )  ;  assert that ( decoded value . getasg name (  )  is ( equal to ( instance info . getasg name (  )  )  )  )  ;  assert that ( decoded value . get last updated timestamp (  )  is ( equal to ( instance info . get last updated timestamp (  )  )  )  )  ;   amazon info source amazon info =  (  amazon info ) instance info . get data center info (  )  ;   amazon info decoded amazon info =  (  amazon info ) decoded value . get data center info (  )  ;  assert that ( decoded amazon info . get (  meta data key . account id )  is ( equal to ( source amazon info . get (  meta data key . account id )  )  )  )  ;   }  ,1989,11,out,8,[]
3005,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,do instance info ignored fields are filtered out during deserialization process,public void   (  abstract eureka jackson codec full codec  abstract eureka jackson codec compact codec )  throws  exception  {   instance info instance info = info iterator . next (  )  ;   string encoded string = full codec . get object mapper (  instance info . class )  . write value as string ( instance info )  ;   instance info decoded value = compact codec . get object mapper (  instance info . class )  . read value ( encoded string  instance info . class )  ;  assert that ( decoded value . get id (  )  is ( equal to ( instance info . get id (  )  )  )  )  ;  assert that ( decoded value . get app name (  )  is ( equal to ( instance info . get app name (  )  )  )  )  ;  assert that ( decoded value . getip addr (  )  is ( equal to ( instance info . getip addr (  )  )  )  )  ;  assert that ( decoded value . getvip address (  )  is ( equal to ( instance info . getvip address (  )  )  )  )  ;  assert that ( decoded value . get secure vip address (  )  is ( equal to ( instance info . get secure vip address (  )  )  )  )  ;  assert that ( decoded value . get host name (  )  is ( equal to ( instance info . get host name (  )  )  )  )  ;  assert that ( decoded value . get status (  )  is ( equal to ( instance info . get status (  )  )  )  )  ;  assert that ( decoded value . get action type (  )  is ( equal to ( instance info . get action type (  )  )  )  )  ;  assert that ( decoded value . getasg name (  )  is ( equal to ( instance info . getasg name (  )  )  )  )  ;  assert that ( decoded value . get last updated timestamp (  )  is ( equal to ( instance info . get last updated timestamp (  )  )  )  )  ;   amazon info source amazon info =  (  amazon info ) instance info . get data center info (  )  ;   amazon info decoded amazon info =  (  amazon info ) decoded value . get data center info (  )  ;  assert that ( decoded amazon info . get (  meta data key . account id )  is ( equal to ( source amazon info . get (  meta data key . account id )  )  )  )  ;   }  ,1989,11,during,9,[]
3006,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,do instance info ignored fields are filtered out during deserialization process,public void   (  abstract eureka jackson codec full codec  abstract eureka jackson codec compact codec )  throws  exception  {   instance info instance info = info iterator . next (  )  ;   string encoded string = full codec . get object mapper (  instance info . class )  . write value as string ( instance info )  ;   instance info decoded value = compact codec . get object mapper (  instance info . class )  . read value ( encoded string  instance info . class )  ;  assert that ( decoded value . get id (  )  is ( equal to ( instance info . get id (  )  )  )  )  ;  assert that ( decoded value . get app name (  )  is ( equal to ( instance info . get app name (  )  )  )  )  ;  assert that ( decoded value . getip addr (  )  is ( equal to ( instance info . getip addr (  )  )  )  )  ;  assert that ( decoded value . getvip address (  )  is ( equal to ( instance info . getvip address (  )  )  )  )  ;  assert that ( decoded value . get secure vip address (  )  is ( equal to ( instance info . get secure vip address (  )  )  )  )  ;  assert that ( decoded value . get host name (  )  is ( equal to ( instance info . get host name (  )  )  )  )  ;  assert that ( decoded value . get status (  )  is ( equal to ( instance info . get status (  )  )  )  )  ;  assert that ( decoded value . get action type (  )  is ( equal to ( instance info . get action type (  )  )  )  )  ;  assert that ( decoded value . getasg name (  )  is ( equal to ( instance info . getasg name (  )  )  )  )  ;  assert that ( decoded value . get last updated timestamp (  )  is ( equal to ( instance info . get last updated timestamp (  )  )  )  )  ;   amazon info source amazon info =  (  amazon info ) instance info . get data center info (  )  ;   amazon info decoded amazon info =  (  amazon info ) decoded value . get data center info (  )  ;  assert that ( decoded amazon info . get (  meta data key . account id )  is ( equal to ( source amazon info . get (  meta data key . account id )  )  )  )  ;   }  ,1989,11,deserialization,10,[]
3007,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,do instance info ignored fields are filtered out during deserialization process,public void   (  abstract eureka jackson codec full codec  abstract eureka jackson codec compact codec )  throws  exception  {   instance info instance info = info iterator . next (  )  ;   string encoded string = full codec . get object mapper (  instance info . class )  . write value as string ( instance info )  ;   instance info decoded value = compact codec . get object mapper (  instance info . class )  . read value ( encoded string  instance info . class )  ;  assert that ( decoded value . get id (  )  is ( equal to ( instance info . get id (  )  )  )  )  ;  assert that ( decoded value . get app name (  )  is ( equal to ( instance info . get app name (  )  )  )  )  ;  assert that ( decoded value . getip addr (  )  is ( equal to ( instance info . getip addr (  )  )  )  )  ;  assert that ( decoded value . getvip address (  )  is ( equal to ( instance info . getvip address (  )  )  )  )  ;  assert that ( decoded value . get secure vip address (  )  is ( equal to ( instance info . get secure vip address (  )  )  )  )  ;  assert that ( decoded value . get host name (  )  is ( equal to ( instance info . get host name (  )  )  )  )  ;  assert that ( decoded value . get status (  )  is ( equal to ( instance info . get status (  )  )  )  )  ;  assert that ( decoded value . get action type (  )  is ( equal to ( instance info . get action type (  )  )  )  )  ;  assert that ( decoded value . getasg name (  )  is ( equal to ( instance info . getasg name (  )  )  )  )  ;  assert that ( decoded value . get last updated timestamp (  )  is ( equal to ( instance info . get last updated timestamp (  )  )  )  )  ;   amazon info source amazon info =  (  amazon info ) instance info . get data center info (  )  ;   amazon info decoded amazon info =  (  amazon info ) decoded value . get data center info (  )  ;  assert that ( decoded amazon info . get (  meta data key . account id )  is ( equal to ( source amazon info . get (  meta data key . account id )  )  )  )  ;   }  ,1989,11,process,11,[]
3008,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\StringCacheTest.java,gc,public static void   (  )  {   system . gc (  )  ;   system . run finalization (  )  ;  try  {   thread . sleep ( 1000 )  ;   }  catch  (   interrupted exception e )   {   }   }  ,179,1,gc,1,[40]
3009,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,do instance info with no meta encode decode,"private void   (  abstract eureka jackson codec codec boolean json )  throws  exception  {   instance info no meta data info = new  instance info .  builder ( info iterator . next (  )  )  . set metadata ( null )  . build (  )  ;   string encoded string = codec . get object mapper (  instance info . class )  . write value as string ( no meta data info )  ;  if  ( json )   {  assert that ( encoded string . contains ( ""\""@class\"":\""java . util .  collections$ empty map\"""" )  is ( true )  )  ;   }   instance info decoded value = codec . get object mapper (  instance info . class )  . read value ( encoded string  instance info . class )  ;  assert that ( decoded value . get id (  )  is ( equal to ( no meta data info . get id (  )  )  )  )  ;  assert that ( decoded value . get metadata (  )  . is empty (  )  is ( true )  )  ;   }  ",838,8,do,1,[]
3010,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,do instance info with no meta encode decode,"private void   (  abstract eureka jackson codec codec boolean json )  throws  exception  {   instance info no meta data info = new  instance info .  builder ( info iterator . next (  )  )  . set metadata ( null )  . build (  )  ;   string encoded string = codec . get object mapper (  instance info . class )  . write value as string ( no meta data info )  ;  if  ( json )   {  assert that ( encoded string . contains ( ""\""@class\"":\""java . util .  collections$ empty map\"""" )  is ( true )  )  ;   }   instance info decoded value = codec . get object mapper (  instance info . class )  . read value ( encoded string  instance info . class )  ;  assert that ( decoded value . get id (  )  is ( equal to ( no meta data info . get id (  )  )  )  )  ;  assert that ( decoded value . get metadata (  )  . is empty (  )  is ( true )  )  ;   }  ",838,8,instance,2,"[93, 132, 285, 502, 561, 617]"
3011,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,do instance info with no meta encode decode,"private void   (  abstract eureka jackson codec codec boolean json )  throws  exception  {   instance info no meta data info = new  instance info .  builder ( info iterator . next (  )  )  . set metadata ( null )  . build (  )  ;   string encoded string = codec . get object mapper (  instance info . class )  . write value as string ( no meta data info )  ;  if  ( json )   {  assert that ( encoded string . contains ( ""\""@class\"":\""java . util .  collections$ empty map\"""" )  is ( true )  )  ;   }   instance info decoded value = codec . get object mapper (  instance info . class )  . read value ( encoded string  instance info . class )  ;  assert that ( decoded value . get id (  )  is ( equal to ( no meta data info . get id (  )  )  )  )  ;  assert that ( decoded value . get metadata (  )  . is empty (  )  is ( true )  )  ;   }  ",838,8,info,3,"[102, 120, 141, 159, 294, 349, 511, 570, 626, 717]"
3012,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,do instance info with no meta encode decode,"private void   (  abstract eureka jackson codec codec boolean json )  throws  exception  {   instance info no meta data info = new  instance info .  builder ( info iterator . next (  )  )  . set metadata ( null )  . build (  )  ;   string encoded string = codec . get object mapper (  instance info . class )  . write value as string ( no meta data info )  ;  if  ( json )   {  assert that ( encoded string . contains ( ""\""@class\"":\""java . util .  collections$ empty map\"""" )  is ( true )  )  ;   }   instance info decoded value = codec . get object mapper (  instance info . class )  . read value ( encoded string  instance info . class )  ;  assert that ( decoded value . get id (  )  is ( equal to ( no meta data info . get id (  )  )  )  )  ;  assert that ( decoded value . get metadata (  )  . is empty (  )  is ( true )  )  ;   }  ",838,8,with,4,[]
3013,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,do instance info with no meta encode decode,"private void   (  abstract eureka jackson codec codec boolean json )  throws  exception  {   instance info no meta data info = new  instance info .  builder ( info iterator . next (  )  )  . set metadata ( null )  . build (  )  ;   string encoded string = codec . get object mapper (  instance info . class )  . write value as string ( no meta data info )  ;  if  ( json )   {  assert that ( encoded string . contains ( ""\""@class\"":\""java . util .  collections$ empty map\"""" )  is ( true )  )  ;   }   instance info decoded value = codec . get object mapper (  instance info . class )  . read value ( encoded string  instance info . class )  ;  assert that ( decoded value . get id (  )  is ( equal to ( no meta data info . get id (  )  )  )  )  ;  assert that ( decoded value . get metadata (  )  . is empty (  )  is ( true )  )  ;   }  ",838,8,no,5,"[107, 336, 704]"
3014,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,do instance info with no meta encode decode,"private void   (  abstract eureka jackson codec codec boolean json )  throws  exception  {   instance info no meta data info = new  instance info .  builder ( info iterator . next (  )  )  . set metadata ( null )  . build (  )  ;   string encoded string = codec . get object mapper (  instance info . class )  . write value as string ( no meta data info )  ;  if  ( json )   {  assert that ( encoded string . contains ( ""\""@class\"":\""java . util .  collections$ empty map\"""" )  is ( true )  )  ;   }   instance info decoded value = codec . get object mapper (  instance info . class )  . read value ( encoded string  instance info . class )  ;  assert that ( decoded value . get id (  )  is ( equal to ( no meta data info . get id (  )  )  )  )  ;  assert that ( decoded value . get metadata (  )  . is empty (  )  is ( true )  )  ;   }  ",838,8,meta,6,"[110, 195, 339, 707, 783]"
3015,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,do instance info with no meta encode decode,"private void   (  abstract eureka jackson codec codec boolean json )  throws  exception  {   instance info no meta data info = new  instance info .  builder ( info iterator . next (  )  )  . set metadata ( null )  . build (  )  ;   string encoded string = codec . get object mapper (  instance info . class )  . write value as string ( no meta data info )  ;  if  ( json )   {  assert that ( encoded string . contains ( ""\""@class\"":\""java . util .  collections$ empty map\"""" )  is ( true )  )  ;   }   instance info decoded value = codec . get object mapper (  instance info . class )  . read value ( encoded string  instance info . class )  ;  assert that ( decoded value . get id (  )  is ( equal to ( no meta data info . get id (  )  )  )  )  ;  assert that ( decoded value . get metadata (  )  . is empty (  )  is ( true )  )  ;   }  ",838,8,encode,7,"[239, 392, 601]"
3016,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,do instance info with no meta encode decode,"private void   (  abstract eureka jackson codec codec boolean json )  throws  exception  {   instance info no meta data info = new  instance info .  builder ( info iterator . next (  )  )  . set metadata ( null )  . build (  )  ;   string encoded string = codec . get object mapper (  instance info . class )  . write value as string ( no meta data info )  ;  if  ( json )   {  assert that ( encoded string . contains ( ""\""@class\"":\""java . util .  collections$ empty map\"""" )  is ( true )  )  ;   }   instance info decoded value = codec . get object mapper (  instance info . class )  . read value ( encoded string  instance info . class )  ;  assert that ( decoded value . get id (  )  is ( equal to ( no meta data info . get id (  )  )  )  )  ;  assert that ( decoded value . get metadata (  )  . is empty (  )  is ( true )  )  ;   }  ",838,8,decode,8,"[516, 659, 763]"
3017,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\StringCacheTest.java,test verify strings are garbage collected if not referenced,"@ test public void   (  )  throws  exception  {   string cache cache = new  string cache (  )  ;  for  ( int i = 0 ;  i  <  cache   size ;  i +  +  )   {  cache . cached value of ( ""id#""  +  i )  ;   }  gc (  )  ;  assert true ( cache . size (  )   <  cac",255,9,test,1,[2]
3018,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\StringCacheTest.java,test verify strings are garbage collected if not referenced,"@ test public void   (  )  throws  exception  {   string cache cache = new  string cache (  )  ;  for  ( int i = 0 ;  i  <  cache   size ;  i +  +  )   {  cache . cached value of ( ""id#""  +  i )  ;   }  gc (  )  ;  assert true ( cache . size (  )   <  cac",255,9,verify,2,[]
3019,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\StringCacheTest.java,test verify strings are garbage collected if not referenced,"@ test public void   (  )  throws  exception  {   string cache cache = new  string cache (  )  ;  for  ( int i = 0 ;  i  <  cache   size ;  i +  +  )   {  cache . cached value of ( ""id#""  +  i )  ;   }  gc (  )  ;  assert true ( cache . size (  )   <  cac",255,9,strings,3,[]
3020,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\StringCacheTest.java,test verify strings are garbage collected if not referenced,"@ test public void   (  )  throws  exception  {   string cache cache = new  string cache (  )  ;  for  ( int i = 0 ;  i  <  cache   size ;  i +  +  )   {  cache . cached value of ( ""id#""  +  i )  ;   }  gc (  )  ;  assert true ( cache . size (  )   <  cac",255,9,are,4,[]
3021,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\StringCacheTest.java,test verify strings are garbage collected if not referenced,"@ test public void   (  )  throws  exception  {   string cache cache = new  string cache (  )  ;  for  ( int i = 0 ;  i  <  cache   size ;  i +  +  )   {  cache . cached value of ( ""id#""  +  i )  ;   }  gc (  )  ;  assert true ( cache . size (  )   <  cac",255,9,garbage,5,[]
3022,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\StringCacheTest.java,test verify strings are garbage collected if not referenced,"@ test public void   (  )  throws  exception  {   string cache cache = new  string cache (  )  ;  for  ( int i = 0 ;  i  <  cache   size ;  i +  +  )   {  cache . cached value of ( ""id#""  +  i )  ;   }  gc (  )  ;  assert true ( cache . size (  )   <  cac",255,9,collected,6,[]
3023,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\StringCacheTest.java,test verify strings are garbage collected if not referenced,"@ test public void   (  )  throws  exception  {   string cache cache = new  string cache (  )  ;  for  ( int i = 0 ;  i  <  cache   size ;  i +  +  )   {  cache . cached value of ( ""id#""  +  i )  ;   }  gc (  )  ;  assert true ( cache . size (  )   <  cac",255,9,if,7,[]
3024,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\StringCacheTest.java,test verify strings are garbage collected if not referenced,"@ test public void   (  )  throws  exception  {   string cache cache = new  string cache (  )  ;  for  ( int i = 0 ;  i  <  cache   size ;  i +  +  )   {  cache . cached value of ( ""id#""  +  i )  ;   }  gc (  )  ;  assert true ( cache . size (  )   <  cac",255,9,not,8,[]
3025,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\StringCacheTest.java,test verify strings are garbage collected if not referenced,"@ test public void   (  )  throws  exception  {   string cache cache = new  string cache (  )  ;  for  ( int i = 0 ;  i  <  cache   size ;  i +  +  )   {  cache . cached value of ( ""id#""  +  i )  ;   }  gc (  )  ;  assert true ( cache . size (  )   <  cac",255,9,referenced,9,[]
3026,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,do lease info encode decode,private void   (  abstract eureka jackson codec codec )  throws  exception  {   lease info lease info = info iterator . next (  )  . get lease info (  )  ;   string encoded string = codec . get object mapper (  lease info . class )  . write value as string ( lease info )  ;   lease info decoded value = codec . get object mapper (  lease info . class )  . read value ( encoded string  lease info . class )  ;  assert that (  eureka entity comparators . equal ( lease info decoded value )  is ( true )  )  ;   }  ,513,5,do,1,[]
3027,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,do lease info encode decode,private void   (  abstract eureka jackson codec codec )  throws  exception  {   lease info lease info = info iterator . next (  )  . get lease info (  )  ;   string encoded string = codec . get object mapper (  lease info . class )  . write value as string ( lease info )  ;   lease info decoded value = codec . get object mapper (  lease info . class )  . read value ( encoded string  lease info . class )  ;  assert that (  eureka entity comparators . equal ( lease info decoded value )  is ( true )  )  ;   }  ,513,5,lease,2,"[80, 91, 137, 211, 259, 277, 333, 386, 462]"
3028,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,do lease info encode decode,private void   (  abstract eureka jackson codec codec )  throws  exception  {   lease info lease info = info iterator . next (  )  . get lease info (  )  ;   string encoded string = codec . get object mapper (  lease info . class )  . write value as string ( lease info )  ;   lease info decoded value = codec . get object mapper (  lease info . class )  . read value ( encoded string  lease info . class )  ;  assert that (  eureka entity comparators . equal ( lease info decoded value )  is ( true )  )  ;   }  ,513,5,info,3,"[86, 97, 104, 143, 217, 265, 283, 339, 392, 468]"
3029,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,do lease info encode decode,private void   (  abstract eureka jackson codec codec )  throws  exception  {   lease info lease info = info iterator . next (  )  . get lease info (  )  ;   string encoded string = codec . get object mapper (  lease info . class )  . write value as string ( lease info )  ;   lease info decoded value = codec . get object mapper (  lease info . class )  . read value ( encoded string  lease info . class )  ;  assert that (  eureka entity comparators . equal ( lease info decoded value )  is ( true )  )  ;   }  ,513,5,encode,4,"[165, 370]"
3030,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,do lease info encode decode,private void   (  abstract eureka jackson codec codec )  throws  exception  {   lease info lease info = info iterator . next (  )  . get lease info (  )  ;   string encoded string = codec . get object mapper (  lease info . class )  . write value as string ( lease info )  ;   lease info decoded value = codec . get object mapper (  lease info . class )  . read value ( encoded string  lease info . class )  ;  assert that (  eureka entity comparators . equal ( lease info decoded value )  is ( true )  )  ;   }  ,513,5,decode,5,"[288, 473]"
3031,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,do my data center info encode decode test,private void   (  abstract eureka jackson codec codec )  throws  exception  {   data center info my data center info = new  data center info (  )  {  @ override public  name get name (  )  {  return  name .  my own ;   }   }   ;   string encoded string = codec . get object mapper (  data center info . class )  . write value as string ( my data center info )  ;   data center info decoded value = codec . get object mapper (  data center info . class )  . read value ( encoded string  data center info . class )  ;  assert that ( decoded value . get name (  )  is ( equal to (  name .  my own )  )  )  ;   }  ,610,8,do,1,[]
3032,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,do my data center info encode decode test,private void   (  abstract eureka jackson codec codec )  throws  exception  {   data center info my data center info = new  data center info (  )  {  @ override public  name get name (  )  {  return  name .  my own ;   }   }   ;   string encoded string = codec . get object mapper (  data center info . class )  . write value as string ( my data center info )  ;   data center info decoded value = codec . get object mapper (  data center info . class )  . read value ( encoded string  data center info . class )  ;  assert that ( decoded value . get name (  )  is ( equal to (  name .  my own )  )  )  ;   }  ,610,8,my,2,"[97, 208, 338, 587]"
3033,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,do my data center info encode decode test,private void   (  abstract eureka jackson codec codec )  throws  exception  {   data center info my data center info = new  data center info (  )  {  @ override public  name get name (  )  {  return  name .  my own ;   }   }   ;   string encoded string = codec . get object mapper (  data center info . class )  . write value as string ( my data center info )  ;   data center info decoded value = codec . get object mapper (  data center info . class )  . read value ( encoded string  data center info . class )  ;  assert that ( decoded value . get name (  )  is ( equal to (  name .  my own )  )  )  ;   }  ,610,8,data,3,"[80, 100, 124, 284, 341, 365, 427, 486]"
3034,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,do my data center info encode decode test,private void   (  abstract eureka jackson codec codec )  throws  exception  {   data center info my data center info = new  data center info (  )  {  @ override public  name get name (  )  {  return  name .  my own ;   }   }   ;   string encoded string = codec . get object mapper (  data center info . class )  . write value as string ( my data center info )  ;   data center info decoded value = codec . get object mapper (  data center info . class )  . read value ( encoded string  data center info . class )  ;  assert that ( decoded value . get name (  )  is ( equal to (  name .  my own )  )  )  ;   }  ,610,8,center,4,"[85, 105, 129, 289, 346, 370, 432, 491]"
3035,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,do my data center info encode decode test,private void   (  abstract eureka jackson codec codec )  throws  exception  {   data center info my data center info = new  data center info (  )  {  @ override public  name get name (  )  {  return  name .  my own ;   }   }   ;   string encoded string = codec . get object mapper (  data center info . class )  . write value as string ( my data center info )  ;   data center info decoded value = codec . get object mapper (  data center info . class )  . read value ( encoded string  data center info . class )  ;  assert that ( decoded value . get name (  )  is ( equal to (  name .  my own )  )  )  ;   }  ,610,8,info,5,"[92, 112, 136, 296, 353, 377, 439, 498]"
3036,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,do my data center info encode decode test,private void   (  abstract eureka jackson codec codec )  throws  exception  {   data center info my data center info = new  data center info (  )  {  @ override public  name get name (  )  {  return  name .  my own ;   }   }   ;   string encoded string = codec . get object mapper (  data center info . class )  . write value as string ( my data center info )  ;   data center info decoded value = codec . get object mapper (  data center info . class )  . read value ( encoded string  data center info . class )  ;  assert that ( decoded value . get name (  )  is ( equal to (  name .  my own )  )  )  ;   }  ,610,8,encode,6,"[238, 470]"
3037,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,do my data center info encode decode test,private void   (  abstract eureka jackson codec codec )  throws  exception  {   data center info my data center info = new  data center info (  )  {  @ override public  name get name (  )  {  return  name .  my own ;   }   }   ;   string encoded string = codec . get object mapper (  data center info . class )  . write value as string ( my data center info )  ;   data center info decoded value = codec . get object mapper (  data center info . class )  . read value ( encoded string  data center info . class )  ;  assert that ( decoded value . get name (  )  is ( equal to (  name .  my own )  )  )  ;   }  ,610,8,decode,7,"[382, 531]"
3038,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,do my data center info encode decode test,private void   (  abstract eureka jackson codec codec )  throws  exception  {   data center info my data center info = new  data center info (  )  {  @ override public  name get name (  )  {  return  name .  my own ;   }   }   ;   string encoded string = codec . get object mapper (  data center info . class )  . write value as string ( my data center info )  ;   data center info decoded value = codec . get object mapper (  data center info . class )  . read value ( encoded string  data center info . class )  ;  assert that ( decoded value . get name (  )  is ( equal to (  name .  my own )  )  )  ;   }  ,610,8,test,8,[]
3039,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,get name,@ override public  name   (  )  {  return  name .  my own ;   }  ,65,2,get,1,[]
3040,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,get name,@ override public  name   (  )  {  return  name .  my own ;   }  ,65,2,name,2,"[19, 43]"
3041,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test amazon info compact encode decode with json,@ test public void   (  )  throws  exception  {  do amazon info compact encode decode test ( new  eureka json jackson codec (  key formatter . default key formatter (  )  true )  )  ;   }  ,189,8,test,1,"[2, 86]"
3042,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test amazon info compact encode decode with json,@ test public void   (  )  throws  exception  {  do amazon info compact encode decode test ( new  eureka json jackson codec (  key formatter . default key formatter (  )  true )  )  ;   }  ,189,8,amazon,2,[52]
3043,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test amazon info compact encode decode with json,@ test public void   (  )  throws  exception  {  do amazon info compact encode decode test ( new  eureka json jackson codec (  key formatter . default key formatter (  )  true )  )  ;   }  ,189,8,info,3,[59]
3044,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test amazon info compact encode decode with json,@ test public void   (  )  throws  exception  {  do amazon info compact encode decode test ( new  eureka json jackson codec (  key formatter . default key formatter (  )  true )  )  ;   }  ,189,8,compact,4,[64]
3045,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test amazon info compact encode decode with json,@ test public void   (  )  throws  exception  {  do amazon info compact encode decode test ( new  eureka json jackson codec (  key formatter . default key formatter (  )  true )  )  ;   }  ,189,8,encode,5,[72]
3046,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test amazon info compact encode decode with json,@ test public void   (  )  throws  exception  {  do amazon info compact encode decode test ( new  eureka json jackson codec (  key formatter . default key formatter (  )  true )  )  ;   }  ,189,8,decode,6,[79]
3047,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test amazon info compact encode decode with json,@ test public void   (  )  throws  exception  {  do amazon info compact encode decode test ( new  eureka json jackson codec (  key formatter . default key formatter (  )  true )  )  ;   }  ,189,8,with,7,[]
3048,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test amazon info compact encode decode with json,@ test public void   (  )  throws  exception  {  do amazon info compact encode decode test ( new  eureka json jackson codec (  key formatter . default key formatter (  )  true )  )  ;   }  ,189,8,json,8,[105]
3049,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test amazon info compact encode decode with xml,@ test public void   (  )  throws  exception  {  do amazon info compact encode decode test ( new  eureka xml jackson codec (  key formatter . default key formatter (  )  true )  )  ;   }  ,188,8,test,1,"[2, 86]"
3050,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test amazon info compact encode decode with xml,@ test public void   (  )  throws  exception  {  do amazon info compact encode decode test ( new  eureka xml jackson codec (  key formatter . default key formatter (  )  true )  )  ;   }  ,188,8,amazon,2,[52]
3051,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test amazon info compact encode decode with xml,@ test public void   (  )  throws  exception  {  do amazon info compact encode decode test ( new  eureka xml jackson codec (  key formatter . default key formatter (  )  true )  )  ;   }  ,188,8,info,3,[59]
3052,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test amazon info compact encode decode with xml,@ test public void   (  )  throws  exception  {  do amazon info compact encode decode test ( new  eureka xml jackson codec (  key formatter . default key formatter (  )  true )  )  ;   }  ,188,8,compact,4,[64]
3053,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test amazon info compact encode decode with xml,@ test public void   (  )  throws  exception  {  do amazon info compact encode decode test ( new  eureka xml jackson codec (  key formatter . default key formatter (  )  true )  )  ;   }  ,188,8,encode,5,[72]
3054,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test amazon info compact encode decode with xml,@ test public void   (  )  throws  exception  {  do amazon info compact encode decode test ( new  eureka xml jackson codec (  key formatter . default key formatter (  )  true )  )  ;   }  ,188,8,decode,6,[79]
3055,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test amazon info compact encode decode with xml,@ test public void   (  )  throws  exception  {  do amazon info compact encode decode test ( new  eureka xml jackson codec (  key formatter . default key formatter (  )  true )  )  ;   }  ,188,8,with,7,[]
3056,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test amazon info compact encode decode with xml,@ test public void   (  )  throws  exception  {  do amazon info compact encode decode test ( new  eureka xml jackson codec (  key formatter . default key formatter (  )  true )  )  ;   }  ,188,8,xml,8,[105]
3057,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test amazon info encode decode with json,@ test public void   (  )  throws  exception  {  do amazon info encode decode test ( new  eureka json jackson codec (  )  )  ;   }  ,132,7,test,1,"[2, 78]"
3058,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test amazon info encode decode with json,@ test public void   (  )  throws  exception  {  do amazon info encode decode test ( new  eureka json jackson codec (  )  )  ;   }  ,132,7,amazon,2,[52]
3059,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test amazon info encode decode with json,@ test public void   (  )  throws  exception  {  do amazon info encode decode test ( new  eureka json jackson codec (  )  )  ;   }  ,132,7,info,3,[59]
3060,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test amazon info encode decode with json,@ test public void   (  )  throws  exception  {  do amazon info encode decode test ( new  eureka json jackson codec (  )  )  ;   }  ,132,7,encode,4,[64]
3061,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test amazon info encode decode with json,@ test public void   (  )  throws  exception  {  do amazon info encode decode test ( new  eureka json jackson codec (  )  )  ;   }  ,132,7,decode,5,[71]
3062,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test amazon info encode decode with json,@ test public void   (  )  throws  exception  {  do amazon info encode decode test ( new  eureka json jackson codec (  )  )  ;   }  ,132,7,with,6,[]
3063,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test amazon info encode decode with json,@ test public void   (  )  throws  exception  {  do amazon info encode decode test ( new  eureka json jackson codec (  )  )  ;   }  ,132,7,json,7,[97]
3064,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test amazon info encode decode with xml,@ test public void   (  )  throws  exception  {  do amazon info encode decode test ( new  eureka xml jackson codec (  )  )  ;   }  ,131,7,test,1,"[2, 78]"
3065,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test amazon info encode decode with xml,@ test public void   (  )  throws  exception  {  do amazon info encode decode test ( new  eureka xml jackson codec (  )  )  ;   }  ,131,7,amazon,2,[52]
3066,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test amazon info encode decode with xml,@ test public void   (  )  throws  exception  {  do amazon info encode decode test ( new  eureka xml jackson codec (  )  )  ;   }  ,131,7,info,3,[59]
3067,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test amazon info encode decode with xml,@ test public void   (  )  throws  exception  {  do amazon info encode decode test ( new  eureka xml jackson codec (  )  )  ;   }  ,131,7,encode,4,[64]
3068,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test amazon info encode decode with xml,@ test public void   (  )  throws  exception  {  do amazon info encode decode test ( new  eureka xml jackson codec (  )  )  ;   }  ,131,7,decode,5,[71]
3069,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test amazon info encode decode with xml,@ test public void   (  )  throws  exception  {  do amazon info encode decode test ( new  eureka xml jackson codec (  )  )  ;   }  ,131,7,with,6,[]
3070,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test amazon info encode decode with xml,@ test public void   (  )  throws  exception  {  do amazon info encode decode test ( new  eureka xml jackson codec (  )  )  ;   }  ,131,7,xml,7,[97]
3071,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test application encode decode with json,@ test public void   (  )  throws  exception  {  do application encode decode ( new  eureka json jackson codec (  )  )  ;   }  ,127,6,test,1,[2]
3072,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test application encode decode with json,@ test public void   (  )  throws  exception  {  do application encode decode ( new  eureka json jackson codec (  )  )  ;   }  ,127,6,application,2,[52]
3073,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test application encode decode with json,@ test public void   (  )  throws  exception  {  do application encode decode ( new  eureka json jackson codec (  )  )  ;   }  ,127,6,encode,3,[64]
3074,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test application encode decode with json,@ test public void   (  )  throws  exception  {  do application encode decode ( new  eureka json jackson codec (  )  )  ;   }  ,127,6,decode,4,[71]
3075,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test application encode decode with json,@ test public void   (  )  throws  exception  {  do application encode decode ( new  eureka json jackson codec (  )  )  ;   }  ,127,6,with,5,[]
3076,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test application encode decode with json,@ test public void   (  )  throws  exception  {  do application encode decode ( new  eureka json jackson codec (  )  )  ;   }  ,127,6,json,6,[92]
3077,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test application encode decode with xml,@ test public void   (  )  throws  exception  {  do application encode decode ( new  eureka xml jackson codec (  )  )  ;   }  ,126,6,test,1,[2]
3078,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test application encode decode with xml,@ test public void   (  )  throws  exception  {  do application encode decode ( new  eureka xml jackson codec (  )  )  ;   }  ,126,6,application,2,[52]
3079,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test application encode decode with xml,@ test public void   (  )  throws  exception  {  do application encode decode ( new  eureka xml jackson codec (  )  )  ;   }  ,126,6,encode,3,[64]
3080,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test application encode decode with xml,@ test public void   (  )  throws  exception  {  do application encode decode ( new  eureka xml jackson codec (  )  )  ;   }  ,126,6,decode,4,[71]
3081,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test application encode decode with xml,@ test public void   (  )  throws  exception  {  do application encode decode ( new  eureka xml jackson codec (  )  )  ;   }  ,126,6,with,5,[]
3082,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test application encode decode with xml,@ test public void   (  )  throws  exception  {  do application encode decode ( new  eureka xml jackson codec (  )  )  ;   }  ,126,6,xml,6,[92]
3083,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test applications encode decode with json,@ test public void   (  )  throws  exception  {  do applications encode decode ( new  eureka json jackson codec (  )  )  ;   }  ,128,6,test,1,[2]
3084,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test applications encode decode with json,@ test public void   (  )  throws  exception  {  do applications encode decode ( new  eureka json jackson codec (  )  )  ;   }  ,128,6,applications,2,[52]
3085,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test applications encode decode with json,@ test public void   (  )  throws  exception  {  do applications encode decode ( new  eureka json jackson codec (  )  )  ;   }  ,128,6,encode,3,[65]
3086,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test applications encode decode with json,@ test public void   (  )  throws  exception  {  do applications encode decode ( new  eureka json jackson codec (  )  )  ;   }  ,128,6,decode,4,[72]
3087,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test applications encode decode with json,@ test public void   (  )  throws  exception  {  do applications encode decode ( new  eureka json jackson codec (  )  )  ;   }  ,128,6,with,5,[]
3088,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test applications encode decode with json,@ test public void   (  )  throws  exception  {  do applications encode decode ( new  eureka json jackson codec (  )  )  ;   }  ,128,6,json,6,[93]
3089,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test applications encode decode with xml,@ test public void   (  )  throws  exception  {  do applications encode decode ( new  eureka xml jackson codec (  )  )  ;   }  ,127,6,test,1,[2]
3090,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test applications encode decode with xml,@ test public void   (  )  throws  exception  {  do applications encode decode ( new  eureka xml jackson codec (  )  )  ;   }  ,127,6,applications,2,[52]
3091,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test applications encode decode with xml,@ test public void   (  )  throws  exception  {  do applications encode decode ( new  eureka xml jackson codec (  )  )  ;   }  ,127,6,encode,3,[65]
3092,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test applications encode decode with xml,@ test public void   (  )  throws  exception  {  do applications encode decode ( new  eureka xml jackson codec (  )  )  ;   }  ,127,6,decode,4,[72]
3093,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test applications encode decode with xml,@ test public void   (  )  throws  exception  {  do applications encode decode ( new  eureka xml jackson codec (  )  )  ;   }  ,127,6,with,5,[]
3094,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test applications encode decode with xml,@ test public void   (  )  throws  exception  {  do applications encode decode ( new  eureka xml jackson codec (  )  )  ;   }  ,127,6,xml,6,[93]
3095,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test instance info compact encode decode with json,@ test public void   (  )  throws  exception  {  do instance info compact encode decode ( new  eureka json jackson codec (  key formatter . default key formatter (  )  true )  true )  ;   }  ,191,8,test,1,[2]
3096,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test instance info compact encode decode with json,@ test public void   (  )  throws  exception  {  do instance info compact encode decode ( new  eureka json jackson codec (  key formatter . default key formatter (  )  true )  true )  ;   }  ,191,8,instance,2,[52]
3097,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test instance info compact encode decode with json,@ test public void   (  )  throws  exception  {  do instance info compact encode decode ( new  eureka json jackson codec (  key formatter . default key formatter (  )  true )  true )  ;   }  ,191,8,info,3,[61]
3098,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test instance info compact encode decode with json,@ test public void   (  )  throws  exception  {  do instance info compact encode decode ( new  eureka json jackson codec (  key formatter . default key formatter (  )  true )  true )  ;   }  ,191,8,compact,4,[66]
3099,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test instance info compact encode decode with json,@ test public void   (  )  throws  exception  {  do instance info compact encode decode ( new  eureka json jackson codec (  key formatter . default key formatter (  )  true )  true )  ;   }  ,191,8,encode,5,[74]
3100,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test instance info compact encode decode with json,@ test public void   (  )  throws  exception  {  do instance info compact encode decode ( new  eureka json jackson codec (  key formatter . default key formatter (  )  true )  true )  ;   }  ,191,8,decode,6,[81]
3101,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test instance info compact encode decode with json,@ test public void   (  )  throws  exception  {  do instance info compact encode decode ( new  eureka json jackson codec (  key formatter . default key formatter (  )  true )  true )  ;   }  ,191,8,with,7,[]
3102,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test instance info compact encode decode with json,@ test public void   (  )  throws  exception  {  do instance info compact encode decode ( new  eureka json jackson codec (  key formatter . default key formatter (  )  true )  true )  ;   }  ,191,8,json,8,[102]
3103,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test instance info compact encode decode with xml,@ test public void   (  )  throws  exception  {  do instance info compact encode decode ( new  eureka xml jackson codec (  key formatter . default key formatter (  )  true )  false )  ;   }  ,191,8,test,1,[2]
3104,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test instance info compact encode decode with xml,@ test public void   (  )  throws  exception  {  do instance info compact encode decode ( new  eureka xml jackson codec (  key formatter . default key formatter (  )  true )  false )  ;   }  ,191,8,instance,2,[52]
3105,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test instance info compact encode decode with xml,@ test public void   (  )  throws  exception  {  do instance info compact encode decode ( new  eureka xml jackson codec (  key formatter . default key formatter (  )  true )  false )  ;   }  ,191,8,info,3,[61]
3106,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test instance info compact encode decode with xml,@ test public void   (  )  throws  exception  {  do instance info compact encode decode ( new  eureka xml jackson codec (  key formatter . default key formatter (  )  true )  false )  ;   }  ,191,8,compact,4,[66]
3107,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test instance info compact encode decode with xml,@ test public void   (  )  throws  exception  {  do instance info compact encode decode ( new  eureka xml jackson codec (  key formatter . default key formatter (  )  true )  false )  ;   }  ,191,8,encode,5,[74]
3108,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test instance info compact encode decode with xml,@ test public void   (  )  throws  exception  {  do instance info compact encode decode ( new  eureka xml jackson codec (  key formatter . default key formatter (  )  true )  false )  ;   }  ,191,8,decode,6,[81]
3109,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test instance info compact encode decode with xml,@ test public void   (  )  throws  exception  {  do instance info compact encode decode ( new  eureka xml jackson codec (  key formatter . default key formatter (  )  true )  false )  ;   }  ,191,8,with,7,[]
3110,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test instance info compact encode decode with xml,@ test public void   (  )  throws  exception  {  do instance info compact encode decode ( new  eureka xml jackson codec (  key formatter . default key formatter (  )  true )  false )  ;   }  ,191,8,xml,8,[102]
3111,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test instance info encode decode with json,@ test public void   (  )  throws  exception  {  do instance info encode decode ( new  eureka json jackson codec (  )  )  ;   }  ,129,7,test,1,[2]
3112,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test instance info encode decode with json,@ test public void   (  )  throws  exception  {  do instance info encode decode ( new  eureka json jackson codec (  )  )  ;   }  ,129,7,instance,2,[52]
3113,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test instance info encode decode with json,@ test public void   (  )  throws  exception  {  do instance info encode decode ( new  eureka json jackson codec (  )  )  ;   }  ,129,7,info,3,[61]
3114,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test instance info encode decode with json,@ test public void   (  )  throws  exception  {  do instance info encode decode ( new  eureka json jackson codec (  )  )  ;   }  ,129,7,encode,4,[66]
3115,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test instance info encode decode with json,@ test public void   (  )  throws  exception  {  do instance info encode decode ( new  eureka json jackson codec (  )  )  ;   }  ,129,7,decode,5,[73]
3116,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test instance info encode decode with json,@ test public void   (  )  throws  exception  {  do instance info encode decode ( new  eureka json jackson codec (  )  )  ;   }  ,129,7,with,6,[]
3117,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test instance info encode decode with json,@ test public void   (  )  throws  exception  {  do instance info encode decode ( new  eureka json jackson codec (  )  )  ;   }  ,129,7,json,7,[94]
3118,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test instance info encode decode with xml,@ test public void   (  )  throws  exception  {  do instance info encode decode ( new  eureka xml jackson codec (  )  )  ;   }  ,128,7,test,1,[2]
3119,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test instance info encode decode with xml,@ test public void   (  )  throws  exception  {  do instance info encode decode ( new  eureka xml jackson codec (  )  )  ;   }  ,128,7,instance,2,[52]
3120,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test instance info encode decode with xml,@ test public void   (  )  throws  exception  {  do instance info encode decode ( new  eureka xml jackson codec (  )  )  ;   }  ,128,7,info,3,[61]
3121,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test instance info encode decode with xml,@ test public void   (  )  throws  exception  {  do instance info encode decode ( new  eureka xml jackson codec (  )  )  ;   }  ,128,7,encode,4,[66]
3122,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test instance info encode decode with xml,@ test public void   (  )  throws  exception  {  do instance info encode decode ( new  eureka xml jackson codec (  )  )  ;   }  ,128,7,decode,5,[73]
3123,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test instance info encode decode with xml,@ test public void   (  )  throws  exception  {  do instance info encode decode ( new  eureka xml jackson codec (  )  )  ;   }  ,128,7,with,6,[]
3124,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test instance info encode decode with xml,@ test public void   (  )  throws  exception  {  do instance info encode decode ( new  eureka xml jackson codec (  )  )  ;   }  ,128,7,xml,7,[94]
3125,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test instance info ignored fields are filtered out during deserialization process with json,@ test public void   (  )  throws  exception  {  do instance info ignored fields are filtered out during deserialization process ( new  eureka json jackson codec (  )  new  eureka json jackson codec (  key formatter . default key formatter (  )  true )  ),255,13,test,1,[2]
3126,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test instance info ignored fields are filtered out during deserialization process with json,@ test public void   (  )  throws  exception  {  do instance info ignored fields are filtered out during deserialization process ( new  eureka json jackson codec (  )  new  eureka json jackson codec (  key formatter . default key formatter (  )  true )  ),255,13,instance,2,[52]
3127,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test instance info ignored fields are filtered out during deserialization process with json,@ test public void   (  )  throws  exception  {  do instance info ignored fields are filtered out during deserialization process ( new  eureka json jackson codec (  )  new  eureka json jackson codec (  key formatter . default key formatter (  )  true )  ),255,13,info,3,[61]
3128,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test instance info ignored fields are filtered out during deserialization process with json,@ test public void   (  )  throws  exception  {  do instance info ignored fields are filtered out during deserialization process ( new  eureka json jackson codec (  )  new  eureka json jackson codec (  key formatter . default key formatter (  )  true )  ),255,13,ignored,4,[66]
3129,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test instance info ignored fields are filtered out during deserialization process with json,@ test public void   (  )  throws  exception  {  do instance info ignored fields are filtered out during deserialization process ( new  eureka json jackson codec (  )  new  eureka json jackson codec (  key formatter . default key formatter (  )  true )  ),255,13,fields,5,[74]
3130,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test instance info ignored fields are filtered out during deserialization process with json,@ test public void   (  )  throws  exception  {  do instance info ignored fields are filtered out during deserialization process ( new  eureka json jackson codec (  )  new  eureka json jackson codec (  key formatter . default key formatter (  )  true )  ),255,13,are,6,[81]
3131,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test instance info ignored fields are filtered out during deserialization process with json,@ test public void   (  )  throws  exception  {  do instance info ignored fields are filtered out during deserialization process ( new  eureka json jackson codec (  )  new  eureka json jackson codec (  key formatter . default key formatter (  )  true )  ),255,13,filtered,7,[85]
3132,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test instance info ignored fields are filtered out during deserialization process with json,@ test public void   (  )  throws  exception  {  do instance info ignored fields are filtered out during deserialization process ( new  eureka json jackson codec (  )  new  eureka json jackson codec (  key formatter . default key formatter (  )  true )  ),255,13,out,8,[94]
3133,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test instance info ignored fields are filtered out during deserialization process with json,@ test public void   (  )  throws  exception  {  do instance info ignored fields are filtered out during deserialization process ( new  eureka json jackson codec (  )  new  eureka json jackson codec (  key formatter . default key formatter (  )  true )  ),255,13,during,9,[98]
3134,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test instance info ignored fields are filtered out during deserialization process with json,@ test public void   (  )  throws  exception  {  do instance info ignored fields are filtered out during deserialization process ( new  eureka json jackson codec (  )  new  eureka json jackson codec (  key formatter . default key formatter (  )  true )  ),255,13,deserialization,10,[105]
3135,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test instance info ignored fields are filtered out during deserialization process with json,@ test public void   (  )  throws  exception  {  do instance info ignored fields are filtered out during deserialization process ( new  eureka json jackson codec (  )  new  eureka json jackson codec (  key formatter . default key formatter (  )  true )  ),255,13,process,11,[121]
3136,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test instance info ignored fields are filtered out during deserialization process with json,@ test public void   (  )  throws  exception  {  do instance info ignored fields are filtered out during deserialization process ( new  eureka json jackson codec (  )  new  eureka json jackson codec (  key formatter . default key formatter (  )  true )  ),255,13,with,12,[]
3137,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test instance info ignored fields are filtered out during deserialization process with json,@ test public void   (  )  throws  exception  {  do instance info ignored fields are filtered out during deserialization process ( new  eureka json jackson codec (  )  new  eureka json jackson codec (  key formatter . default key formatter (  )  true )  ),255,13,json,13,"[143, 180]"
3138,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test instance info ignored fields are filtered out during deserialization process with xml,@ test public void   (  )  throws  exception  {  do instance info ignored fields are filtered out during deserialization process ( new  eureka xml jackson codec (  )  new  eureka xml jackson codec (  key formatter . default key formatter (  )  true )  )  ,255,13,test,1,[2]
3139,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test instance info ignored fields are filtered out during deserialization process with xml,@ test public void   (  )  throws  exception  {  do instance info ignored fields are filtered out during deserialization process ( new  eureka xml jackson codec (  )  new  eureka xml jackson codec (  key formatter . default key formatter (  )  true )  )  ,255,13,instance,2,[52]
3140,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test instance info ignored fields are filtered out during deserialization process with xml,@ test public void   (  )  throws  exception  {  do instance info ignored fields are filtered out during deserialization process ( new  eureka xml jackson codec (  )  new  eureka xml jackson codec (  key formatter . default key formatter (  )  true )  )  ,255,13,info,3,[61]
3141,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test instance info ignored fields are filtered out during deserialization process with xml,@ test public void   (  )  throws  exception  {  do instance info ignored fields are filtered out during deserialization process ( new  eureka xml jackson codec (  )  new  eureka xml jackson codec (  key formatter . default key formatter (  )  true )  )  ,255,13,ignored,4,[66]
3142,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test instance info ignored fields are filtered out during deserialization process with xml,@ test public void   (  )  throws  exception  {  do instance info ignored fields are filtered out during deserialization process ( new  eureka xml jackson codec (  )  new  eureka xml jackson codec (  key formatter . default key formatter (  )  true )  )  ,255,13,fields,5,[74]
3143,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test instance info ignored fields are filtered out during deserialization process with xml,@ test public void   (  )  throws  exception  {  do instance info ignored fields are filtered out during deserialization process ( new  eureka xml jackson codec (  )  new  eureka xml jackson codec (  key formatter . default key formatter (  )  true )  )  ,255,13,are,6,[81]
3144,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test instance info ignored fields are filtered out during deserialization process with xml,@ test public void   (  )  throws  exception  {  do instance info ignored fields are filtered out during deserialization process ( new  eureka xml jackson codec (  )  new  eureka xml jackson codec (  key formatter . default key formatter (  )  true )  )  ,255,13,filtered,7,[85]
3145,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test instance info ignored fields are filtered out during deserialization process with xml,@ test public void   (  )  throws  exception  {  do instance info ignored fields are filtered out during deserialization process ( new  eureka xml jackson codec (  )  new  eureka xml jackson codec (  key formatter . default key formatter (  )  true )  )  ,255,13,out,8,[94]
3146,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test instance info ignored fields are filtered out during deserialization process with xml,@ test public void   (  )  throws  exception  {  do instance info ignored fields are filtered out during deserialization process ( new  eureka xml jackson codec (  )  new  eureka xml jackson codec (  key formatter . default key formatter (  )  true )  )  ,255,13,during,9,[98]
3147,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test instance info ignored fields are filtered out during deserialization process with xml,@ test public void   (  )  throws  exception  {  do instance info ignored fields are filtered out during deserialization process ( new  eureka xml jackson codec (  )  new  eureka xml jackson codec (  key formatter . default key formatter (  )  true )  )  ,255,13,deserialization,10,[105]
3148,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test instance info ignored fields are filtered out during deserialization process with xml,@ test public void   (  )  throws  exception  {  do instance info ignored fields are filtered out during deserialization process ( new  eureka xml jackson codec (  )  new  eureka xml jackson codec (  key formatter . default key formatter (  )  true )  )  ,255,13,process,11,[121]
3149,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test instance info ignored fields are filtered out during deserialization process with xml,@ test public void   (  )  throws  exception  {  do instance info ignored fields are filtered out during deserialization process ( new  eureka xml jackson codec (  )  new  eureka xml jackson codec (  key formatter . default key formatter (  )  true )  )  ,255,13,with,12,[]
3150,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test instance info ignored fields are filtered out during deserialization process with xml,@ test public void   (  )  throws  exception  {  do instance info ignored fields are filtered out during deserialization process ( new  eureka xml jackson codec (  )  new  eureka xml jackson codec (  key formatter . default key formatter (  )  true )  )  ,255,13,xml,13,"[143, 179]"
3151,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test instance info with no meta encode decode with json,@ test public void   (  )  throws  exception  {  do instance info with no meta encode decode ( new  eureka json jackson codec (  )  true )  ;   }  ,147,10,test,1,[2]
3152,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test instance info with no meta encode decode with json,@ test public void   (  )  throws  exception  {  do instance info with no meta encode decode ( new  eureka json jackson codec (  )  true )  ;   }  ,147,10,instance,2,[52]
3153,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test instance info with no meta encode decode with json,@ test public void   (  )  throws  exception  {  do instance info with no meta encode decode ( new  eureka json jackson codec (  )  true )  ;   }  ,147,10,info,3,[61]
3154,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test instance info with no meta encode decode with json,@ test public void   (  )  throws  exception  {  do instance info with no meta encode decode ( new  eureka json jackson codec (  )  true )  ;   }  ,147,10,with,4,[66]
3155,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test instance info with no meta encode decode with json,@ test public void   (  )  throws  exception  {  do instance info with no meta encode decode ( new  eureka json jackson codec (  )  true )  ;   }  ,147,10,no,5,[71]
3156,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test instance info with no meta encode decode with json,@ test public void   (  )  throws  exception  {  do instance info with no meta encode decode ( new  eureka json jackson codec (  )  true )  ;   }  ,147,10,meta,6,[74]
3157,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test instance info with no meta encode decode with json,@ test public void   (  )  throws  exception  {  do instance info with no meta encode decode ( new  eureka json jackson codec (  )  true )  ;   }  ,147,10,encode,7,[79]
3158,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test instance info with no meta encode decode with json,@ test public void   (  )  throws  exception  {  do instance info with no meta encode decode ( new  eureka json jackson codec (  )  true )  ;   }  ,147,10,decode,8,[86]
3159,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test instance info with no meta encode decode with json,@ test public void   (  )  throws  exception  {  do instance info with no meta encode decode ( new  eureka json jackson codec (  )  true )  ;   }  ,147,10,with,9,[66]
3160,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test instance info with no meta encode decode with json,@ test public void   (  )  throws  exception  {  do instance info with no meta encode decode ( new  eureka json jackson codec (  )  true )  ;   }  ,147,10,json,10,[107]
3161,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test instance info with no meta encode decode with xml,@ test public void   (  )  throws  exception  {  do instance info with no meta encode decode ( new  eureka xml jackson codec (  )  false )  ;   }  ,147,10,test,1,[2]
3162,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test instance info with no meta encode decode with xml,@ test public void   (  )  throws  exception  {  do instance info with no meta encode decode ( new  eureka xml jackson codec (  )  false )  ;   }  ,147,10,instance,2,[52]
3163,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test instance info with no meta encode decode with xml,@ test public void   (  )  throws  exception  {  do instance info with no meta encode decode ( new  eureka xml jackson codec (  )  false )  ;   }  ,147,10,info,3,[61]
3164,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test instance info with no meta encode decode with xml,@ test public void   (  )  throws  exception  {  do instance info with no meta encode decode ( new  eureka xml jackson codec (  )  false )  ;   }  ,147,10,with,4,[66]
3165,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test instance info with no meta encode decode with xml,@ test public void   (  )  throws  exception  {  do instance info with no meta encode decode ( new  eureka xml jackson codec (  )  false )  ;   }  ,147,10,no,5,[71]
3166,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test instance info with no meta encode decode with xml,@ test public void   (  )  throws  exception  {  do instance info with no meta encode decode ( new  eureka xml jackson codec (  )  false )  ;   }  ,147,10,meta,6,[74]
3167,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test instance info with no meta encode decode with xml,@ test public void   (  )  throws  exception  {  do instance info with no meta encode decode ( new  eureka xml jackson codec (  )  false )  ;   }  ,147,10,encode,7,[79]
3168,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test instance info with no meta encode decode with xml,@ test public void   (  )  throws  exception  {  do instance info with no meta encode decode ( new  eureka xml jackson codec (  )  false )  ;   }  ,147,10,decode,8,[86]
3169,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test instance info with no meta encode decode with xml,@ test public void   (  )  throws  exception  {  do instance info with no meta encode decode ( new  eureka xml jackson codec (  )  false )  ;   }  ,147,10,with,9,[66]
3170,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test instance info with no meta encode decode with xml,@ test public void   (  )  throws  exception  {  do instance info with no meta encode decode ( new  eureka xml jackson codec (  )  false )  ;   }  ,147,10,xml,10,[107]
3171,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test lease info encode decode with json,@ test public void   (  )  throws  exception  {  do lease info encode decode ( new  eureka json jackson codec (  )  )  ;   }  ,126,7,test,1,[2]
3172,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test lease info encode decode with json,@ test public void   (  )  throws  exception  {  do lease info encode decode ( new  eureka json jackson codec (  )  )  ;   }  ,126,7,lease,2,[52]
3173,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test lease info encode decode with json,@ test public void   (  )  throws  exception  {  do lease info encode decode ( new  eureka json jackson codec (  )  )  ;   }  ,126,7,info,3,[58]
3174,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test lease info encode decode with json,@ test public void   (  )  throws  exception  {  do lease info encode decode ( new  eureka json jackson codec (  )  )  ;   }  ,126,7,encode,4,[63]
3175,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test lease info encode decode with json,@ test public void   (  )  throws  exception  {  do lease info encode decode ( new  eureka json jackson codec (  )  )  ;   }  ,126,7,decode,5,[70]
3176,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test lease info encode decode with json,@ test public void   (  )  throws  exception  {  do lease info encode decode ( new  eureka json jackson codec (  )  )  ;   }  ,126,7,with,6,[]
3177,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test lease info encode decode with json,@ test public void   (  )  throws  exception  {  do lease info encode decode ( new  eureka json jackson codec (  )  )  ;   }  ,126,7,json,7,[91]
3178,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test lease info encode decode with xml,@ test public void   (  )  throws  exception  {  do lease info encode decode ( new  eureka xml jackson codec (  )  )  ;   }  ,125,7,test,1,[2]
3179,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test lease info encode decode with xml,@ test public void   (  )  throws  exception  {  do lease info encode decode ( new  eureka xml jackson codec (  )  )  ;   }  ,125,7,lease,2,[52]
3180,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test lease info encode decode with xml,@ test public void   (  )  throws  exception  {  do lease info encode decode ( new  eureka xml jackson codec (  )  )  ;   }  ,125,7,info,3,[58]
3181,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test lease info encode decode with xml,@ test public void   (  )  throws  exception  {  do lease info encode decode ( new  eureka xml jackson codec (  )  )  ;   }  ,125,7,encode,4,[63]
3182,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test lease info encode decode with xml,@ test public void   (  )  throws  exception  {  do lease info encode decode ( new  eureka xml jackson codec (  )  )  ;   }  ,125,7,decode,5,[70]
3183,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test lease info encode decode with xml,@ test public void   (  )  throws  exception  {  do lease info encode decode ( new  eureka xml jackson codec (  )  )  ;   }  ,125,7,with,6,[]
3184,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test lease info encode decode with xml,@ test public void   (  )  throws  exception  {  do lease info encode decode ( new  eureka xml jackson codec (  )  )  ;   }  ,125,7,xml,7,[91]
3185,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test my data center info encode decode with json,@ test public void   (  )  throws  exception  {  do my data center info encode decode test ( new  eureka json jackson codec (  )  )  ;   }  ,140,9,test,1,"[2, 86]"
3186,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test my data center info encode decode with json,@ test public void   (  )  throws  exception  {  do my data center info encode decode test ( new  eureka json jackson codec (  )  )  ;   }  ,140,9,my,2,[52]
3187,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test my data center info encode decode with json,@ test public void   (  )  throws  exception  {  do my data center info encode decode test ( new  eureka json jackson codec (  )  )  ;   }  ,140,9,data,3,[55]
3188,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test my data center info encode decode with json,@ test public void   (  )  throws  exception  {  do my data center info encode decode test ( new  eureka json jackson codec (  )  )  ;   }  ,140,9,center,4,[60]
3189,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test my data center info encode decode with json,@ test public void   (  )  throws  exception  {  do my data center info encode decode test ( new  eureka json jackson codec (  )  )  ;   }  ,140,9,info,5,[67]
3190,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test my data center info encode decode with json,@ test public void   (  )  throws  exception  {  do my data center info encode decode test ( new  eureka json jackson codec (  )  )  ;   }  ,140,9,encode,6,[72]
3191,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test my data center info encode decode with json,@ test public void   (  )  throws  exception  {  do my data center info encode decode test ( new  eureka json jackson codec (  )  )  ;   }  ,140,9,decode,7,[79]
3192,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test my data center info encode decode with json,@ test public void   (  )  throws  exception  {  do my data center info encode decode test ( new  eureka json jackson codec (  )  )  ;   }  ,140,9,with,8,[]
3193,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test my data center info encode decode with json,@ test public void   (  )  throws  exception  {  do my data center info encode decode test ( new  eureka json jackson codec (  )  )  ;   }  ,140,9,json,9,[105]
3194,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test my data center info encode decode with xml,@ test public void   (  )  throws  exception  {  do my data center info encode decode test ( new  eureka xml jackson codec (  )  )  ;   }  ,139,9,test,1,"[2, 86]"
3195,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test my data center info encode decode with xml,@ test public void   (  )  throws  exception  {  do my data center info encode decode test ( new  eureka xml jackson codec (  )  )  ;   }  ,139,9,my,2,[52]
3196,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test my data center info encode decode with xml,@ test public void   (  )  throws  exception  {  do my data center info encode decode test ( new  eureka xml jackson codec (  )  )  ;   }  ,139,9,data,3,[55]
3197,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test my data center info encode decode with xml,@ test public void   (  )  throws  exception  {  do my data center info encode decode test ( new  eureka xml jackson codec (  )  )  ;   }  ,139,9,center,4,[60]
3198,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test my data center info encode decode with xml,@ test public void   (  )  throws  exception  {  do my data center info encode decode test ( new  eureka xml jackson codec (  )  )  ;   }  ,139,9,info,5,[67]
3199,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test my data center info encode decode with xml,@ test public void   (  )  throws  exception  {  do my data center info encode decode test ( new  eureka xml jackson codec (  )  )  ;   }  ,139,9,encode,6,[72]
3200,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test my data center info encode decode with xml,@ test public void   (  )  throws  exception  {  do my data center info encode decode test ( new  eureka xml jackson codec (  )  )  ;   }  ,139,9,decode,7,[79]
3201,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test my data center info encode decode with xml,@ test public void   (  )  throws  exception  {  do my data center info encode decode test ( new  eureka xml jackson codec (  )  )  ;   }  ,139,9,with,8,[]
3202,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,test my data center info encode decode with xml,@ test public void   (  )  throws  exception  {  do my data center info encode decode test ( new  eureka xml jackson codec (  )  )  ;   }  ,139,9,xml,9,[105]
3203,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\wrappers\CodecWrappersTest.java,codec name,@ override public  string   (  )  {  return test wrapper name ;   }  ,69,2,codec,1,[]
3204,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\wrappers\CodecWrappersTest.java,codec name,@ override public  string   (  )  {  return test wrapper name ;   }  ,69,2,name,2,[57]
3205,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\wrappers\CodecWrappersTest.java,decode,@ override public  < t > t   (  input stream input stream  class < t >  type )  throws io exception  {  return null ;   }  ,123,1,decode,1,[]
3206,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\wrappers\CodecWrappersTest.java,support,@ override public boolean   (  media type media type )  {  return false ;   }  ,79,1,support,1,[]
3207,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\wrappers\CodecWrappersTest.java,test register new wrapper,@ test public void   (  )  {   assert . assert null (  codec wrappers . get encoder ( test wrapper name )  )  ;   assert . assert null (  codec wrappers . get decoder ( test wrapper name )  )  ;   codec wrappers . register wrapper ( new  test wrapper (  ),255,4,test,1,"[2, 86, 169, 238]"
3208,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\wrappers\CodecWrappersTest.java,test register new wrapper,@ test public void   (  )  {   assert . assert null (  codec wrappers . get encoder ( test wrapper name )  )  ;   assert . assert null (  codec wrappers . get decoder ( test wrapper name )  )  ;   codec wrappers . register wrapper ( new  test wrapper (  ),255,4,register,2,[214]
3209,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\wrappers\CodecWrappersTest.java,test register new wrapper,@ test public void   (  )  {   assert . assert null (  codec wrappers . get encoder ( test wrapper name )  )  ;   assert . assert null (  codec wrappers . get decoder ( test wrapper name )  )  ;   codec wrappers . register wrapper ( new  test wrapper (  ),255,4,new,3,[233]
3210,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\wrappers\CodecWrappersTest.java,test register new wrapper,@ test public void   (  )  {   assert . assert null (  codec wrappers . get encoder ( test wrapper name )  )  ;   assert . assert null (  codec wrappers . get decoder ( test wrapper name )  )  ;   codec wrappers . register wrapper ( new  test wrapper (  ),255,4,wrapper,4,"[61, 91, 144, 174, 203, 223, 243]"
3211,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\XmlXStreamTest.java,test encoding decoding with meta data,@ test public void   (  )  throws  exception  {   applications applications =  instance info generator . new builder ( 10 2 )  . with meta data ( true )  . build (  )  . to applications (  )  ;  x stream xstream =  xmlx stream . get instance (  )  ;   str,255,6,test,1,[2]
3212,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\XmlXStreamTest.java,test encoding decoding with meta data,@ test public void   (  )  throws  exception  {   applications applications =  instance info generator . new builder ( 10 2 )  . with meta data ( true )  . build (  )  . to applications (  )  ;  x stream xstream =  xmlx stream . get instance (  )  ;   str,255,6,encoding,2,[]
3213,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\XmlXStreamTest.java,test encoding decoding with meta data,@ test public void   (  )  throws  exception  {   applications applications =  instance info generator . new builder ( 10 2 )  . with meta data ( true )  . build (  )  . to applications (  )  ;  x stream xstream =  xmlx stream . get instance (  )  ;   str,255,6,decoding,3,[]
3214,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\XmlXStreamTest.java,test encoding decoding with meta data,@ test public void   (  )  throws  exception  {   applications applications =  instance info generator . new builder ( 10 2 )  . with meta data ( true )  . build (  )  . to applications (  )  ;  x stream xstream =  xmlx stream . get instance (  )  ;   str,255,6,with,4,[129]
3215,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\XmlXStreamTest.java,test encoding decoding with meta data,@ test public void   (  )  throws  exception  {   applications applications =  instance info generator . new builder ( 10 2 )  . with meta data ( true )  . build (  )  . to applications (  )  ;  x stream xstream =  xmlx stream . get instance (  )  ;   str,255,6,meta,5,[134]
3216,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\XmlXStreamTest.java,test encoding decoding with meta data,@ test public void   (  )  throws  exception  {   applications applications =  instance info generator . new builder ( 10 2 )  . with meta data ( true )  . build (  )  . to applications (  )  ;  x stream xstream =  xmlx stream . get instance (  )  ;   str,255,6,data,6,[139]
3217,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\XmlXStreamTest.java,test encoding decoding without meta data,@ test public void   (  )  throws  exception  {   applications applications =  instance info generator . new builder ( 10 2 )  . with meta data ( false )  . build (  )  . to applications (  )  ;  x stream xstream =  xmlx stream . get instance (  )  ;   st,255,6,test,1,[2]
3218,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\XmlXStreamTest.java,test encoding decoding without meta data,@ test public void   (  )  throws  exception  {   applications applications =  instance info generator . new builder ( 10 2 )  . with meta data ( false )  . build (  )  . to applications (  )  ;  x stream xstream =  xmlx stream . get instance (  )  ;   st,255,6,encoding,2,[]
3219,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\XmlXStreamTest.java,test encoding decoding without meta data,@ test public void   (  )  throws  exception  {   applications applications =  instance info generator . new builder ( 10 2 )  . with meta data ( false )  . build (  )  . to applications (  )  ;  x stream xstream =  xmlx stream . get instance (  )  ;   st,255,6,decoding,3,[]
3220,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\XmlXStreamTest.java,test encoding decoding without meta data,@ test public void   (  )  throws  exception  {   applications applications =  instance info generator . new builder ( 10 2 )  . with meta data ( false )  . build (  )  . to applications (  )  ;  x stream xstream =  xmlx stream . get instance (  )  ;   st,255,6,without,4,[]
3221,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\XmlXStreamTest.java,test encoding decoding without meta data,@ test public void   (  )  throws  exception  {   applications applications =  instance info generator . new builder ( 10 2 )  . with meta data ( false )  . build (  )  . to applications (  )  ;  x stream xstream =  xmlx stream . get instance (  )  ;   st,255,6,meta,5,[134]
3222,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\XmlXStreamTest.java,test encoding decoding without meta data,@ test public void   (  )  throws  exception  {   applications applications =  instance info generator . new builder ( 10 2 )  . with meta data ( false )  . build (  )  . to applications (  )  ;  x stream xstream =  xmlx stream . get instance (  )  ;   st,255,6,data,6,[139]
3223,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\XmlXStreamTest.java,test void attribute unmarshalling,"@ test ( expected =  forbidden class exception . class timeout = 5000 )  public void   (  )  throws  exception  {  x stream xstream =  xmlx stream . get instance (  )  ;  xstream . fromxml ( "" < string class = 'void' >  hello  world !  <  / string > "" )  ",255,4,test,1,[2]
3224,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\XmlXStreamTest.java,test void attribute unmarshalling,"@ test ( expected =  forbidden class exception . class timeout = 5000 )  public void   (  )  throws  exception  {  x stream xstream =  xmlx stream . get instance (  )  ;  xstream . fromxml ( "" < string class = 'void' >  hello  world !  <  / string > "" )  ",255,4,void,2,"[80, 211]"
3225,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\XmlXStreamTest.java,test void attribute unmarshalling,"@ test ( expected =  forbidden class exception . class timeout = 5000 )  public void   (  )  throws  exception  {  x stream xstream =  xmlx stream . get instance (  )  ;  xstream . fromxml ( "" < string class = 'void' >  hello  world !  <  / string > "" )  ",255,4,attribute,3,[]
3226,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\XmlXStreamTest.java,test void attribute unmarshalling,"@ test ( expected =  forbidden class exception . class timeout = 5000 )  public void   (  )  throws  exception  {  x stream xstream =  xmlx stream . get instance (  )  ;  xstream . fromxml ( "" < string class = 'void' >  hello  world !  <  / string > "" )  ",255,4,unmarshalling,4,[]
3227,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\XmlXStreamTest.java,test void element unmarshalling,"@ test ( expected =  forbidden class exception . class timeout = 5000 )  public void   (  )  throws  exception  {  x stream xstream =  xmlx stream . get instance (  )  ;  xstream . fromxml ( "" < void /  > "" )  ;   }  ",217,4,test,1,[2]
3228,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\XmlXStreamTest.java,test void element unmarshalling,"@ test ( expected =  forbidden class exception . class timeout = 5000 )  public void   (  )  throws  exception  {  x stream xstream =  xmlx stream . get instance (  )  ;  xstream . fromxml ( "" < void /  > "" )  ;   }  ",217,4,void,2,"[80, 195]"
3229,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\XmlXStreamTest.java,test void element unmarshalling,"@ test ( expected =  forbidden class exception . class timeout = 5000 )  public void   (  )  throws  exception  {  x stream xstream =  xmlx stream . get instance (  )  ;  xstream . fromxml ( "" < void /  > "" )  ;   }  ",217,4,element,3,[]
3230,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\XmlXStreamTest.java,test void element unmarshalling,"@ test ( expected =  forbidden class exception . class timeout = 5000 )  public void   (  )  throws  exception  {  x stream xstream =  xmlx stream . get instance (  )  ;  xstream . fromxml ( "" < void /  > "" )  ;   }  ",217,4,unmarshalling,4,[]
3231,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientCloseJerseyThreadTest.java,contains jersey thread,private boolean   (  )  {   set <  thread >  threads =  thread . get all stack traces (  )  . key set (  )  ;  for  (   thread t : threads )   {  if  ( t . get name (  )  . contains ( thread   name )  )   {  return true ;   }   }  return false ;   }  ,251,3,contains,1,[173]
3232,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientCloseJerseyThreadTest.java,contains jersey thread,private boolean   (  )  {   set <  thread >  threads =  thread . get all stack traces (  )  . key set (  )  ;  for  (   thread t : threads )   {  if  ( t . get name (  )  . contains ( thread   name )  )   {  return true ;   }   }  return false ;   }  ,251,3,jersey,2,[]
3233,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientCloseJerseyThreadTest.java,contains jersey thread,private boolean   (  )  {   set <  thread >  threads =  thread . get all stack traces (  )  . key set (  )  ;  for  (   thread t : threads )   {  if  ( t . get name (  )  . contains ( thread   name )  )   {  return true ;   }   }  return false ;   }  ,251,3,thread,3,"[35, 45, 56, 120, 131, 184]"
3234,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientCloseJerseyThreadTest.java,test thread count,@ test public void   (  )  throws  interrupted exception  {  assert that ( contains jersey thread (  )  equal to ( true )  )  ;  client . shutdown (  )  ;   thread . sleep ( 5 )  ;  assert that ( contains jersey thread (  )  equal to ( false )  )  ;   }  ,255,3,test,1,[2]
3235,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientCloseJerseyThreadTest.java,test thread count,@ test public void   (  )  throws  interrupted exception  {  assert that ( contains jersey thread (  )  equal to ( true )  )  ;  client . shutdown (  )  ;   thread . sleep ( 5 )  ;  assert that ( contains jersey thread (  )  equal to ( false )  )  ;   }  ,255,3,thread,2,"[91, 157, 212]"
3236,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientCloseJerseyThreadTest.java,test thread count,@ test public void   (  )  throws  interrupted exception  {  assert that ( contains jersey thread (  )  equal to ( true )  )  ;  client . shutdown (  )  ;   thread . sleep ( 5 )  ;  assert that ( contains jersey thread (  )  equal to ( false )  )  ;   }  ,255,3,count,3,[]
3237,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientDisableRegistryTest.java,get name,@ override public  name   (  )  {  return  name .  my own ;   }  ,65,2,get,1,[]
3238,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientDisableRegistryTest.java,get name,@ override public  name   (  )  {  return  name .  my own ;   }  ,65,2,name,2,"[19, 43]"
3239,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientDisableRegistryTest.java,set up,"@ before public void   (  )  throws  exception  {  mock local eureka server = new  mock remote eureka server (  )  ;  mock local eureka server . start (  )  ;   configuration manager . get config instance (  )  . set property ( ""eureka . registration . en",255,2,set,1,[213]
3240,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientDisableRegistryTest.java,set up,"@ before public void   (  )  throws  exception  {  mock local eureka server = new  mock remote eureka server (  )  ;  mock local eureka server . start (  )  ;   configuration manager . get config instance (  )  . set property ( ""eureka . registration . en",255,2,up,2,[]
3241,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientDisableRegistryTest.java,test disable fetch registry,"@ test public void   (  )  throws  exception  {   assert . assert false ( "" registry fetch disabled but eureka server recieved a registry fetch . "" mock local eureka server . is sent registry (  )  )  ;   }  ",208,4,test,1,[2]
3242,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientDisableRegistryTest.java,test disable fetch registry,"@ test public void   (  )  throws  exception  {   assert . assert false ( "" registry fetch disabled but eureka server recieved a registry fetch . "" mock local eureka server . is sent registry (  )  )  ;   }  ",208,4,disable,2,[91]
3243,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientDisableRegistryTest.java,test disable fetch registry,"@ test public void   (  )  throws  exception  {   assert . assert false ( "" registry fetch disabled but eureka server recieved a registry fetch . "" mock local eureka server . is sent registry (  )  )  ;   }  ",208,4,fetch,3,"[85, 138]"
3244,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientDisableRegistryTest.java,test disable fetch registry,"@ test public void   (  )  throws  exception  {   assert . assert false ( "" registry fetch disabled but eureka server recieved a registry fetch . "" mock local eureka server . is sent registry (  )  )  ;   }  ",208,4,registry,4,"[76, 129, 183]"
3245,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientHealthTest.java, my health check callback,private   ( boolean health )  {  this . health = health ;   }  ,63,4,my,1,[]
3246,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientHealthTest.java, my health check callback,private   ( boolean health )  {  this . health = health ;   }  ,63,4,health,2,"[20, 40, 49]"
3247,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientHealthTest.java, my health check callback,private   ( boolean health )  {  this . health = health ;   }  ,63,4,check,3,[]
3248,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientHealthTest.java, my health check callback,private   ( boolean health )  {  this . health = health ;   }  ,63,4,callback,4,[]
3249,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientHealthTest.java, my health check handler,private   (  instance info .  instance status health )  {  this . health = health ;   }  ,89,4,my,1,[]
3250,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientHealthTest.java, my health check handler,private   (  instance info .  instance status health )  {  this . health = health ;   }  ,89,4,health,2,"[46, 66, 75]"
3251,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientHealthTest.java, my health check handler,private   (  instance info .  instance status health )  {  this . health = health ;   }  ,89,4,check,3,[]
3252,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientHealthTest.java, my health check handler,private   (  instance info .  instance status health )  {  this . health = health ;   }  ,89,4,handler,4,[]
3253,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientHealthTest.java,get status,"@ override public  instance info .  instance status   (  instance info .  instance status current status )  {  invoked = true ;  if  ( should exception )   {  throw new  runtime exception ( ""test induced exception"" )  ;   }  return health ;   }  ",246,2,get,1,[]
3254,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientHealthTest.java,get status,"@ override public  instance info .  instance status   (  instance info .  instance status current status )  {  invoked = true ;  if  ( should exception )   {  throw new  runtime exception ( ""test induced exception"" )  ;   }  return health ;   }  ",246,2,status,2,"[45, 83, 98]"
3255,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientHealthTest.java,is healthy,@ override public boolean   (  )  {  invoked = true ;  return health ;   }  ,76,2,is,1,[]
3256,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientHealthTest.java,is healthy,@ override public boolean   (  )  {  invoked = true ;  return health ;   }  ,76,2,healthy,2,[]
3257,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientHealthTest.java,is invoked,public boolean   (  )  {  return invoked ;   }  ,48,2,is,1,[]
3258,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientHealthTest.java,is invoked,public boolean   (  )  {  return invoked ;   }  ,48,2,invoked,2,[33]
3259,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientHealthTest.java,new instance info builder,@ override protected  instance info .  builder   ( int renewal interval in secs )  {   instance info .  builder builder = super . new instance info builder ( renewal interval in secs )  ;  builder . set status (  instance info .  instance status . startin,255,4,new,1,"[57, 130, 160]"
3260,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientHealthTest.java,new instance info builder,@ override protected  instance info .  builder   ( int renewal interval in secs )  {   instance info .  builder builder = super . new instance info builder ( renewal interval in secs )  ;  builder . set status (  instance info .  instance status . startin,255,4,instance,2,"[22, 87, 134, 213, 230]"
3261,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientHealthTest.java,new instance info builder,@ override protected  instance info .  builder   ( int renewal interval in secs )  {   instance info .  builder builder = super . new instance info builder ( renewal interval in secs )  ;  builder . set status (  instance info .  instance status . startin,255,4,info,3,"[31, 96, 143, 222]"
3262,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientHealthTest.java,new instance info builder,@ override protected  instance info .  builder   ( int renewal interval in secs )  {   instance info .  builder builder = super . new instance info builder ( renewal interval in secs )  ;  builder . set status (  instance info .  instance status . startin,255,4,builder,4,"[39, 104, 112, 148, 189]"
3263,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientHealthTest.java,reset,public void   (  )  {  should exception = false ;  invoked = false ;   }  ,74,1,reset,1,[]
3264,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientHealthTest.java,setup properties,"@ override protected void   (  )  {  super . setup properties (  )  ;   configuration manager . get config instance (  )  . set property ( ""eureka . registration . enabled"" ""true"" )  ;   configuration manager . get config instance (  )  . set property ( """,255,2,setup,1,[45]
3265,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientHealthTest.java,setup properties,"@ override protected void   (  )  {  super . setup properties (  )  ;   configuration manager . get config instance (  )  . set property ( ""eureka . registration . enabled"" ""true"" )  ;   configuration manager . get config instance (  )  . set property ( """,255,2,properties,2,[51]
3266,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientHealthTest.java,test callback,@ test public void   (  )  throws  exception  {   my health check callback my callback = new  my health check callback ( true )  ;   assert . assert true ( client instanceof  discovery client )  ;   discovery client client impl =  (  discovery client ) cl,255,2,test,1,[2]
3267,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientHealthTest.java,test callback,@ test public void   (  )  throws  exception  {   my health check callback my callback = new  my health check callback ( true )  ;   assert . assert true ( client instanceof  discovery client )  ;   discovery client client impl =  (  discovery client ) cl,255,2,callback,2,"[66, 78, 110]"
3268,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientHealthTest.java,test handler,@ test public void   (  )  throws  exception  {   my health check handler my health check handler = new  my health check handler (  instance info .  instance status . up )  ;   assert . assert true ( client instanceof  discovery client )  ;   discovery cl,255,2,test,1,[2]
3269,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientHealthTest.java,test handler,@ test public void   (  )  throws  exception  {   my health check handler my health check handler = new  my health check handler (  instance info .  instance status . up )  ;   assert . assert true ( client instanceof  discovery client )  ;   discovery cl,255,2,handler,2,"[66, 90, 121]"
3270,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegisterUpdateTest.java, test application info manager,  (  instance info instance info )  {  super ( new  my data center instance config (  )  instance info null )  ;   }  ,118,4,test,1,[]
3271,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegisterUpdateTest.java, test application info manager,  (  instance info instance info )  {  super ( new  my data center instance config (  )  instance info null )  ;   }  ,118,4,application,2,[]
3272,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegisterUpdateTest.java, test application info manager,  (  instance info instance info )  {  super ( new  my data center instance config (  )  instance info null )  ;   }  ,118,4,info,3,"[14, 28, 98]"
3273,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegisterUpdateTest.java, test application info manager,  (  instance info instance info )  {  super ( new  my data center instance config (  )  instance info null )  ;   }  ,118,4,manager,4,[]
3274,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegisterUpdateTest.java, test client,public   (  application info manager application info manager  eureka client config config )  {  super ( application info manager config )  ;   }  ,147,2,test,1,[]
3275,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegisterUpdateTest.java, test client,public   (  application info manager application info manager  eureka client config config )  {  super ( application info manager config )  ;   }  ,147,2,client,2,[70]
3276,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegisterUpdateTest.java,expect status,private void   (  instance info .  instance status expected long timeout  time unit time unit )  throws  interrupted exception  {   string status = mock local eureka server . registration statuses queue . poll ( timeout time unit )  ;   assert . assert equals ( expected . name (  )  status )  ;   }  ,301,2,expect,1,"[51, 262]"
3277,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegisterUpdateTest.java,expect status,private void   (  instance info .  instance status expected long timeout  time unit time unit )  throws  interrupted exception  {   string status = mock local eureka server . registration statuses queue . poll ( timeout time unit )  ;   assert . assert equals ( expected . name (  )  status )  ;   }  ,301,2,status,2,"[44, 139, 188, 284]"
3278,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegisterUpdateTest.java,get last,private static  < t > t   (  list < t >  list )  {  return list . get ( list . size (  )   -  1 )  ;   }  ,106,2,get,1,[66]
3279,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegisterUpdateTest.java,get last,private static  < t > t   (  list < t >  list )  {  return list . get ( list . size (  )   -  1 )  ;   }  ,106,2,last,2,[]
3280,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegisterUpdateTest.java,get status change listeners, map <  string  status change listener >    (  )  {  return this . listeners ;   }  ,84,4,get,1,[]
3281,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegisterUpdateTest.java,get status change listeners, map <  string  status change listener >    (  )  {  return this . listeners ;   }  ,84,4,status,2,[16]
3282,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegisterUpdateTest.java,get status change listeners, map <  string  status change listener >    (  )  {  return this . listeners ;   }  ,84,4,change,3,[23]
3283,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegisterUpdateTest.java,get status change listeners, map <  string  status change listener >    (  )  {  return this . listeners ;   }  ,84,4,listeners,4,[67]
3284,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegisterUpdateTest.java,register update lifecycle test,@ test public void   (  )  throws  exception  {  application info manager . set instance status (  instance info .  instance status . up )  ;  expect status (  instance info .  instance status . up 5  time unit . seconds )  ;  application info manager . s,255,4,register,1,[]
3285,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegisterUpdateTest.java,register update lifecycle test,@ test public void   (  )  throws  exception  {  application info manager . set instance status (  instance info .  instance status . up )  ;  expect status (  instance info .  instance status . up 5  time unit . seconds )  ;  application info manager . s,255,4,update,2,[]
3286,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegisterUpdateTest.java,register update lifecycle test,@ test public void   (  )  throws  exception  {  application info manager . set instance status (  instance info .  instance status . up )  ;  expect status (  instance info .  instance status . up 5  time unit . seconds )  ;  application info manager . s,255,4,lifecycle,3,[]
3287,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegisterUpdateTest.java,register update lifecycle test,@ test public void   (  )  throws  exception  {  application info manager . set instance status (  instance info .  instance status . up )  ;  expect status (  instance info .  instance status . up 5  time unit . seconds )  ;  application info manager . s,255,4,test,4,[2]
3288,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegisterUpdateTest.java,register update quick lifecycle test,@ test public void   (  )  throws  exception  {  application info manager . set instance status (  instance info .  instance status . up )  ;  application info manager . set instance status (  instance info .  instance status . unknown )  ;  application i,255,5,register,1,[]
3289,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegisterUpdateTest.java,register update quick lifecycle test,@ test public void   (  )  throws  exception  {  application info manager . set instance status (  instance info .  instance status . up )  ;  application info manager . set instance status (  instance info .  instance status . unknown )  ;  application i,255,5,update,2,[]
3290,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegisterUpdateTest.java,register update quick lifecycle test,@ test public void   (  )  throws  exception  {  application info manager . set instance status (  instance info .  instance status . up )  ;  application info manager . set instance status (  instance info .  instance status . unknown )  ;  application i,255,5,quick,3,[]
3291,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegisterUpdateTest.java,register update quick lifecycle test,@ test public void   (  )  throws  exception  {  application info manager . set instance status (  instance info .  instance status . up )  ;  application info manager . set instance status (  instance info .  instance status . unknown )  ;  application i,255,5,lifecycle,4,[]
3292,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegisterUpdateTest.java,register update quick lifecycle test,@ test public void   (  )  throws  exception  {  application info manager . set instance status (  instance info .  instance status . up )  ;  application info manager . set instance status (  instance info .  instance status . unknown )  ;  application i,255,5,test,5,[2]
3293,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegisterUpdateTest.java,register update shutdown test,@ test public void   (  )  throws  exception  {   assert . assert equals ( 1 application info manager . get status change listeners (  )  . size (  )  )  ;  client . shutdown (  )  ;   assert . assert equals ( 0 application info manager . get status chang,255,4,register,1,[]
3294,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegisterUpdateTest.java,register update shutdown test,@ test public void   (  )  throws  exception  {   assert . assert equals ( 1 application info manager . get status change listeners (  )  . size (  )  )  ;  client . shutdown (  )  ;   assert . assert equals ( 0 application info manager . get status chang,255,4,update,2,[]
3295,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegisterUpdateTest.java,register update shutdown test,@ test public void   (  )  throws  exception  {   assert . assert equals ( 1 application info manager . get status change listeners (  )  . size (  )  )  ;  client . shutdown (  )  ;   assert . assert equals ( 0 application info manager . get status chang,255,4,shutdown,3,[166]
3296,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegisterUpdateTest.java,register update shutdown test,@ test public void   (  )  throws  exception  {   assert . assert equals ( 1 application info manager . get status change listeners (  )  . size (  )  )  ;  client . shutdown (  )  ;   assert . assert equals ( 0 application info manager . get status chang,255,4,test,4,[2]
3297,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegisterUpdateTest.java,set up,"@ before public void   (  )  throws  exception  {  mock local eureka server = new  mock remote eureka server (  )  ;  mock local eureka server . start (  )  ;   configuration manager . get config instance (  )  . set property ( ""eureka . name"" "" eureka te",255,2,set,1,[213]
3298,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegisterUpdateTest.java,set up,"@ before public void   (  )  throws  exception  {  mock local eureka server = new  mock remote eureka server (  )  ;  mock local eureka server . start (  )  ;   configuration manager . get config instance (  )  . set property ( ""eureka . name"" "" eureka te",255,2,up,2,[]
3299,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegisterUpdateTest.java,tear down,@ after public void   (  )  throws  exception  {  client . shutdown (  )  ;  mock local eureka server . stop (  )  ;   configuration manager . get config instance (  )  . clear (  )  ;   }  ,190,2,tear,1,[]
3300,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegisterUpdateTest.java,tear down,@ after public void   (  )  throws  exception  {  client . shutdown (  )  ;  mock local eureka server . stop (  )  ;   configuration manager . get config instance (  )  . clear (  )  ;   }  ,190,2,down,2,[63]
3301,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegisterUpdateTest.java,test do not unregister on shutdown,"@ test public void   (  )  throws  exception  {  client . shutdown (  )  ;   configuration manager . get config instance (  )  . set property ( ""eureka . should unregister on shutdown"" ""false"" )  ;  client =  mockito . spy ( new  test client ( application",255,6,test,1,"[2, 230]"
3302,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegisterUpdateTest.java,test do not unregister on shutdown,"@ test public void   (  )  throws  exception  {  client . shutdown (  )  ;   configuration manager . get config instance (  )  . set property ( ""eureka . should unregister on shutdown"" ""false"" )  ;  client =  mockito . spy ( new  test client ( application",255,6,do,2,"[62, 179]"
3303,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegisterUpdateTest.java,test do not unregister on shutdown,"@ test public void   (  )  throws  exception  {  client . shutdown (  )  ;   configuration manager . get config instance (  )  . set property ( ""eureka . should unregister on shutdown"" ""false"" )  ;  client =  mockito . spy ( new  test client ( application",255,6,not,3,[]
3304,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegisterUpdateTest.java,test do not unregister on shutdown,"@ test public void   (  )  throws  exception  {  client . shutdown (  )  ;   configuration manager . get config instance (  )  . set property ( ""eureka . should unregister on shutdown"" ""false"" )  ;  client =  mockito . spy ( new  test client ( application",255,6,unregister,4,[161]
3305,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegisterUpdateTest.java,test do not unregister on shutdown,"@ test public void   (  )  throws  exception  {  client . shutdown (  )  ;   configuration manager . get config instance (  )  . set property ( ""eureka . should unregister on shutdown"" ""false"" )  ;  client =  mockito . spy ( new  test client ( application",255,6,on,5,"[42, 78, 88, 106, 172, 253]"
3306,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegisterUpdateTest.java,test do not unregister on shutdown,"@ test public void   (  )  throws  exception  {  client . shutdown (  )  ;   configuration manager . get config instance (  )  . set property ( ""eureka . should unregister on shutdown"" ""false"" )  ;  client =  mockito . spy ( new  test client ( application",255,6,shutdown,6,"[58, 175]"
3307,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegisterUpdateTest.java,test registration disabled,"@ test public void   (  )  throws  exception  {  client . shutdown (  )  ;   configuration manager . get config instance (  )  . set property ( ""eureka . registration . enabled"" ""false"" )  ;  client = new  test client ( application info manager new  defau",255,3,test,1,"[2, 206]"
3308,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegisterUpdateTest.java,test registration disabled,"@ test public void   (  )  throws  exception  {  client . shutdown (  )  ;   configuration manager . get config instance (  )  . set property ( ""eureka . registration . enabled"" ""false"" )  ;  client = new  test client ( application info manager new  defau",255,3,registration,2,[154]
3309,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegisterUpdateTest.java,test registration disabled,"@ test public void   (  )  throws  exception  {  client . shutdown (  )  ;   configuration manager . get config instance (  )  . set property ( ""eureka . registration . enabled"" ""false"" )  ;  client = new  test client ( application info manager new  defau",255,3,disabled,3,[]
3310,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegisterUpdateTest.java,unregister,@ override public void   (  )  {  super . unregister (  )  ;   }  ,66,1,unregister,1,[42]
3311,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientEventBusTest.java,consume,@ subscribe public void   (  status change event event )  {  received events . add ( event )  ;  event latch . count down (  )  ;   }  ,135,1,consume,1,[]
3312,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientEventBusTest.java,set up,@ before public void   (  )  throws  exception  {  reset ( request handler )  ;  when ( request handler . register ( any (  instance info . class )  )  )  . then return (  eureka http response . status ( 204 )  )  ;  when ( request handler . cancel ( any ,255,2,set,1,[53]
3313,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientEventBusTest.java,set up,@ before public void   (  )  throws  exception  {  reset ( request handler )  ;  when ( request handler . register ( any (  instance info . class )  )  )  . then return (  eureka http response . status ( 204 )  )  ;  when ( request handler . cancel ( any ,255,2,up,2,[]
3314,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientEventBusTest.java,set up class,@ before class public static void   (  )  throws io exception  {  eureka http server = new  simple eureka http server ( request handler )  ;   }  ,146,3,set,1,[]
3315,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientEventBusTest.java,set up class,@ before class public static void   (  )  throws io exception  {  eureka http server = new  simple eureka http server ( request handler )  ;   }  ,146,3,up,2,[]
3316,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientEventBusTest.java,set up class,@ before class public static void   (  )  throws io exception  {  eureka http server = new  simple eureka http server ( request handler )  ;   }  ,146,3,class,3,[9]
3317,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientEventBusTest.java,tear down class,@ after class public static void   (  )  throws  exception  {  if  ( eureka http server  !  =  null )   {  eureka http server . shutdown (  )  ;   }   }  ,154,3,tear,1,[]
3318,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientEventBusTest.java,tear down class,@ after class public static void   (  )  throws  exception  {  if  ( eureka http server  !  =  null )   {  eureka http server . shutdown (  )  ;   }   }  ,154,3,down,2,[132]
3319,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientEventBusTest.java,tear down class,@ after class public static void   (  )  throws  exception  {  if  ( eureka http server  !  =  null )   {  eureka http server . shutdown (  )  ;   }   }  ,154,3,class,3,[8]
3320,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientEventBusTest.java,test cache refresh event,"@ test public void   (  )  throws  exception  {   instance info generator instance gen =  instance info generator . new builder ( 2 ""test app"" )  . build (  )  ;   applications initial apps = instance gen . take delta ( 1 )  ;  when ( request handler . ge",255,4,test,1,"[2, 133]"
3321,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientEventBusTest.java,test cache refresh event,"@ test public void   (  )  throws  exception  {   instance info generator instance gen =  instance info generator . new builder ( 2 ""test app"" )  . build (  )  ;   applications initial apps = instance gen . take delta ( 1 )  ;  when ( request handler . ge",255,4,cache,2,[]
3322,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientEventBusTest.java,test cache refresh event,"@ test public void   (  )  throws  exception  {   instance info generator instance gen =  instance info generator . new builder ( 2 ""test app"" )  . build (  )  ;   applications initial apps = instance gen . take delta ( 1 )  ;  when ( request handler . ge",255,4,refresh,3,[]
3323,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientEventBusTest.java,test cache refresh event,"@ test public void   (  )  throws  exception  {   instance info generator instance gen =  instance info generator . new builder ( 2 ""test app"" )  . build (  )  ;   applications initial apps = instance gen . take delta ( 1 )  ;  when ( request handler . ge",255,4,event,4,[]
3324,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientEventBusTest.java,test status change event,@ test public void   (  )  throws  exception  {  final  count down latch event latch = new  count down latch ( 1 )  ;  final  list <  status change event >  received events = new  array list <  status change event >  (  )  ;   event bus event bus = discov,255,4,test,1,[2]
3325,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientEventBusTest.java,test status change event,@ test public void   (  )  throws  exception  {  final  count down latch event latch = new  count down latch ( 1 )  ;  final  list <  status change event >  received events = new  array list <  status change event >  (  )  ;   event bus event bus = discov,255,4,status,2,"[134, 194]"
3326,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientEventBusTest.java,test status change event,@ test public void   (  )  throws  exception  {  final  count down latch event latch = new  count down latch ( 1 )  ;  final  list <  status change event >  received events = new  array list <  status change event >  (  )  ;   event bus event bus = discov,255,4,change,3,"[141, 201]"
3327,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientEventBusTest.java,test status change event,@ test public void   (  )  throws  exception  {  final  count down latch event latch = new  count down latch ( 1 )  ;  final  list <  status change event >  received events = new  array list <  status change event >  (  )  ;   event bus event bus = discov,255,4,event,4,"[73, 148, 166, 208, 227, 237]"
3328,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\EurekaEventListenerTest.java,on event,@ override public void   (  eureka event event )  {  this . event = event ;   }  ,81,2,on,1,[]
3329,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\EurekaEventListenerTest.java,on event,@ override public void   (  eureka event event )  {  this . event = event ;   }  ,81,2,event,2,"[35, 41, 60, 68]"
3330,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\EurekaEventListenerTest.java,set up,@ before public void   (  )  throws  exception  {  reset ( request handler )  ;  when ( request handler . register ( any (  instance info . class )  )  )  . then return (  eureka http response . status ( 204 )  )  ;  when ( request handler . cancel ( any ,255,2,set,1,[53]
3331,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\EurekaEventListenerTest.java,set up,@ before public void   (  )  throws  exception  {  reset ( request handler )  ;  when ( request handler . register ( any (  instance info . class )  )  )  . then return (  eureka http response . status ( 204 )  )  ;  when ( request handler . cancel ( any ,255,2,up,2,[]
3332,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\EurekaEventListenerTest.java,set up class,@ before class public static void   (  )  throws io exception  {  eureka http server = new  simple eureka http server ( request handler )  ;   }  ,146,3,set,1,[]
3333,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\EurekaEventListenerTest.java,set up class,@ before class public static void   (  )  throws io exception  {  eureka http server = new  simple eureka http server ( request handler )  ;   }  ,146,3,up,2,[]
3334,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\EurekaEventListenerTest.java,set up class,@ before class public static void   (  )  throws io exception  {  eureka http server = new  simple eureka http server ( request handler )  ;   }  ,146,3,class,3,[9]
3335,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\EurekaEventListenerTest.java,tear down class,@ after class public static void   (  )  throws  exception  {  if  ( eureka http server  !  =  null )   {  eureka http server . shutdown (  )  ;   }   }  ,154,3,tear,1,[]
3336,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\EurekaEventListenerTest.java,tear down class,@ after class public static void   (  )  throws  exception  {  if  ( eureka http server  !  =  null )   {  eureka http server . shutdown (  )  ;   }   }  ,154,3,down,2,[132]
3337,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\EurekaEventListenerTest.java,tear down class,@ after class public static void   (  )  throws  exception  {  if  ( eureka http server  !  =  null )   {  eureka http server . shutdown (  )  ;   }   }  ,154,3,class,3,[8]
3338,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\EurekaEventListenerTest.java,test cache refresh event,@ test public void   (  )  throws  exception  {   capturing eureka event listener listener = new  capturing eureka event listener (  )  ;   applications initial apps = to applications ( discovery client resource . get my instance info (  )  )  ;  when ( r,255,4,test,1,[2]
3339,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\EurekaEventListenerTest.java,test cache refresh event,@ test public void   (  )  throws  exception  {   capturing eureka event listener listener = new  capturing eureka event listener (  )  ;   applications initial apps = to applications ( discovery client resource . get my instance info (  )  )  ;  when ( r,255,4,cache,2,[]
3340,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\EurekaEventListenerTest.java,test cache refresh event,@ test public void   (  )  throws  exception  {   capturing eureka event listener listener = new  capturing eureka event listener (  )  ;   applications initial apps = to applications ( discovery client resource . get my instance info (  )  )  ;  when ( r,255,4,refresh,3,[]
3341,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\EurekaEventListenerTest.java,test cache refresh event,@ test public void   (  )  throws  exception  {   capturing eureka event listener listener = new  capturing eureka event listener (  )  ;   applications initial apps = to applications ( discovery client resource . get my instance info (  )  )  ;  when ( r,255,4,event,4,"[67, 115]"
3342,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRedirectTest.java,await,private static void   (  callable <  boolean >  condition long time  time unit time unit )  throws  exception  {  long timeout =  system . current time millis (  )   +  time unit . to millis ( time )  ;  while  (  ! condition . call (  )  )   {  if  (  system . current time millis (  )   >  =  timeout )   {  throw new  timeout exception (  )  ;   }   thread . sleep ( 100 )  ;   }   }  ,388,1,await,1,[]
3343,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRedirectTest.java,call,@ override public  boolean   (  )  throws  exception  {   list <  application >  application list = client . get applications (  )  . get registered applications (  )  ;  return  ! application list . is empty (  )  && application list . get ( 0 )  . get i,255,1,call,1,[]
3344,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRedirectTest.java,set up,"@ before public void   (  )  throws  exception  {  target server base uri = ""http: /  / localhost:""  +  target server mock rule . get http port (  )  ;   }  ",157,2,set,1,[]
3345,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRedirectTest.java,set up,"@ before public void   (  )  throws  exception  {  target server base uri = ""http: /  / localhost:""  +  target server mock rule . get http port (  )  ;   }  ",157,2,up,2,[]
3346,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRedirectTest.java,tear down,@ after public void   (  )  {  if  ( redirect server mock client  !  =  null )   {  redirect server mock client . reset (  )  ;   }  if  ( target server mock client . client  !  =  null )   {  target server mock client . client . reset (  )  ;   }   }  ,253,2,tear,1,[]
3347,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRedirectTest.java,tear down,@ after public void   (  )  {  if  ( redirect server mock client  !  =  null )   {  redirect server mock client . reset (  )  ;   }  if  ( target server mock client . client  !  =  null )   {  target server mock client . client . reset (  )  ;   }   }  ,253,2,down,2,[]
3348,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRedirectTest.java,test client falls back to original server on error,@ test public void   (  )  throws  exception  {   applications full fetch apps1 = data generator . take delta ( 1 )  ;   string full fetch json1 = to json ( full fetch apps1 )  ;   applications full fetch apps2 =  eureka entity functions . merge applicati,255,9,test,1,[2]
3349,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRedirectTest.java,test client falls back to original server on error,@ test public void   (  )  throws  exception  {   applications full fetch apps1 = data generator . take delta ( 1 )  ;   string full fetch json1 = to json ( full fetch apps1 )  ;   applications full fetch apps2 =  eureka entity functions . merge applicati,255,9,client,2,[]
3350,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRedirectTest.java,test client falls back to original server on error,@ test public void   (  )  throws  exception  {   applications full fetch apps1 = data generator . take delta ( 1 )  ;   string full fetch json1 = to json ( full fetch apps1 )  ;   applications full fetch apps2 =  eureka entity functions . merge applicati,255,9,falls,3,[]
3351,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRedirectTest.java,test client falls back to original server on error,@ test public void   (  )  throws  exception  {   applications full fetch apps1 = data generator . take delta ( 1 )  ;   string full fetch json1 = to json ( full fetch apps1 )  ;   applications full fetch apps2 =  eureka entity functions . merge applicati,255,9,back,4,[]
3352,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRedirectTest.java,test client falls back to original server on error,@ test public void   (  )  throws  exception  {   applications full fetch apps1 = data generator . take delta ( 1 )  ;   string full fetch json1 = to json ( full fetch apps1 )  ;   applications full fetch apps2 =  eureka entity functions . merge applicati,255,9,to,5,"[93, 147]"
3353,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRedirectTest.java,test client falls back to original server on error,@ test public void   (  )  throws  exception  {   applications full fetch apps1 = data generator . take delta ( 1 )  ;   string full fetch json1 = to json ( full fetch apps1 )  ;   applications full fetch apps2 =  eureka entity functions . merge applicati,255,9,original,6,[]
3354,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRedirectTest.java,test client falls back to original server on error,@ test public void   (  )  throws  exception  {   applications full fetch apps1 = data generator . take delta ( 1 )  ;   string full fetch json1 = to json ( full fetch apps1 )  ;   applications full fetch apps2 =  eureka entity functions . merge applicati,255,9,server,7,[]
3355,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRedirectTest.java,test client falls back to original server on error,@ test public void   (  )  throws  exception  {   applications full fetch apps1 = data generator . take delta ( 1 )  ;   string full fetch json1 = to json ( full fetch apps1 )  ;   applications full fetch apps2 =  eureka entity functions . merge applicati,255,9,on,8,"[42, 59, 141, 152, 190, 234]"
3356,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRedirectTest.java,test client falls back to original server on error,@ test public void   (  )  throws  exception  {   applications full fetch apps1 = data generator . take delta ( 1 )  ;   string full fetch json1 = to json ( full fetch apps1 )  ;   applications full fetch apps2 =  eureka entity functions . merge applicati,255,9,error,9,[]
3357,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRedirectTest.java,test client query follows redirects and pins to target server,@ test public void   (  )  throws  exception  {   applications full fetch apps = data generator . take delta ( 1 )  ;   string full fetch json = to json ( full fetch apps )  ;   applications delta fetch apps = data generator . take delta ( 1 )  ;   string,255,10,test,1,[2]
3358,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRedirectTest.java,test client query follows redirects and pins to target server,@ test public void   (  )  throws  exception  {   applications full fetch apps = data generator . take delta ( 1 )  ;   string full fetch json = to json ( full fetch apps )  ;   applications delta fetch apps = data generator . take delta ( 1 )  ;   string,255,10,client,2,[]
3359,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRedirectTest.java,test client query follows redirects and pins to target server,@ test public void   (  )  throws  exception  {   applications full fetch apps = data generator . take delta ( 1 )  ;   string full fetch json = to json ( full fetch apps )  ;   applications delta fetch apps = data generator . take delta ( 1 )  ;   string,255,10,query,3,[]
3360,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRedirectTest.java,test client query follows redirects and pins to target server,@ test public void   (  )  throws  exception  {   applications full fetch apps = data generator . take delta ( 1 )  ;   string full fetch json = to json ( full fetch apps )  ;   applications delta fetch apps = data generator . take delta ( 1 )  ;   string,255,10,follows,4,[]
3361,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRedirectTest.java,test client query follows redirects and pins to target server,@ test public void   (  )  throws  exception  {   applications full fetch apps = data generator . take delta ( 1 )  ;   string full fetch json = to json ( full fetch apps )  ;   applications delta fetch apps = data generator . take delta ( 1 )  ;   string,255,10,redirects,5,[]
3362,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRedirectTest.java,test client query follows redirects and pins to target server,@ test public void   (  )  throws  exception  {   applications full fetch apps = data generator . take delta ( 1 )  ;   string full fetch json = to json ( full fetch apps )  ;   applications delta fetch apps = data generator . take delta ( 1 )  ;   string,255,10,and,6,[]
3363,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRedirectTest.java,test client query follows redirects and pins to target server,@ test public void   (  )  throws  exception  {   applications full fetch apps = data generator . take delta ( 1 )  ;   string full fetch json = to json ( full fetch apps )  ;   applications delta fetch apps = data generator . take delta ( 1 )  ;   string,255,10,pins,7,[]
3364,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRedirectTest.java,test client query follows redirects and pins to target server,@ test public void   (  )  throws  exception  {   applications full fetch apps = data generator . take delta ( 1 )  ;   string full fetch json = to json ( full fetch apps )  ;   applications delta fetch apps = data generator . take delta ( 1 )  ;   string,255,10,to,8,"[92, 145, 221]"
3365,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRedirectTest.java,test client query follows redirects and pins to target server,@ test public void   (  )  throws  exception  {   applications full fetch apps = data generator . take delta ( 1 )  ;   string full fetch json = to json ( full fetch apps )  ;   applications delta fetch apps = data generator . take delta ( 1 )  ;   string,255,10,target,9,[]
3366,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRedirectTest.java,test client query follows redirects and pins to target server,@ test public void   (  )  throws  exception  {   applications full fetch apps = data generator . take delta ( 1 )  ;   string full fetch json = to json ( full fetch apps )  ;   applications delta fetch apps = data generator . take delta ( 1 )  ;   string,255,10,server,10,[]
3367,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRedirectTest.java,to json,private static  string   (  applications applications )  throws io exception  {   byte array output stream os = new  byte array output stream (  )  ;  new  entity body converter (  )  . write ( applications os  media type . application   json   type )  ;  os . close (  )  ;  return os . to string (  )  ;   }  ,311,2,to,1,[288]
3368,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRedirectTest.java,to json,private static  string   (  applications applications )  throws io exception  {   byte array output stream os = new  byte array output stream (  )  ;  new  entity body converter (  )  . write ( applications os  media type . application   json   type )  ;  os . close (  )  ;  return os . to string (  )  ;   }  ,311,2,json,2,[238]
3369,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\guice\EurekaModuleTest.java,configure,@ override protected void   (  )  {  bind (  eureka instance config . class )  . to provider (  my data center instance config provider . class )  . in (  scopes . singleton )  ;   }  ,184,1,configure,1,[]
3370,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\guice\EurekaModuleTest.java,set up,"@ before public void   (  )  throws  exception  {   configuration manager . get config instance (  )  . set property ( ""eureka . region"" ""default"" )  ;   configuration manager . get config instance (  )  . set property ( ""eureka . should fetch registry"" """,255,2,set,1,"[104, 206]"
3371,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\guice\EurekaModuleTest.java,set up,"@ before public void   (  )  throws  exception  {   configuration manager . get config instance (  )  . set property ( ""eureka . region"" ""default"" )  ;   configuration manager . get config instance (  )  . set property ( ""eureka . should fetch registry"" """,255,2,up,2,[]
3372,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\guice\EurekaModuleTest.java,tear down,@ after public void   (  )  {  if  ( injector  !  =  null )   {  injector . shutdown (  )  ;   }   configuration manager . get config instance (  )  . clear (  )  ;   }  ,170,2,tear,1,[]
3373,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\guice\EurekaModuleTest.java,tear down,@ after public void   (  )  {  if  ( injector  !  =  null )   {  injector . shutdown (  )  ;   }   configuration manager . get config instance (  )  . clear (  )  ;   }  ,170,2,down,2,[80]
3374,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\guice\EurekaModuleTest.java,testdi,"@ suppress warnings ( ""deprecation"" )  @ test public void   (  )  {   instance info instance info = injector . get instance (  instance info . class )  ;   assert . assert equals (  application info manager . get instance (  )  . get info (  )  instance i",255,1,testdi,1,[]
3375,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\InstanceRegionCheckerTest.java,test default override,"@ test public void   (  )  throws  exception  {   configuration manager . get config instance (  )  . set property ( ""eureka . us - east - 1 . availability zones"" ""abc def"" )  ;   property based az to region mapper az to region mapper = new  property base",255,3,test,1,[2]
3376,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\InstanceRegionCheckerTest.java,test default override,"@ test public void   (  )  throws  exception  {   configuration manager . get config instance (  )  . set property ( ""eureka . us - east - 1 . availability zones"" ""abc def"" )  ;   property based az to region mapper az to region mapper = new  property base",255,3,default,2,[]
3377,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\InstanceRegionCheckerTest.java,test default override,"@ test public void   (  )  throws  exception  {   configuration manager . get config instance (  )  . set property ( ""eureka . us - east - 1 . availability zones"" ""abc def"" )  ;   property based az to region mapper az to region mapper = new  property base",255,3,override,3,[]
3378,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\InstanceRegionCheckerTest.java,test defaults,@ test public void   (  )  throws  exception  {   property based az to region mapper az to region mapper = new  property based az to region mapper ( new  default eureka client config (  )  )  ;   instance region checker checker = new  instance region chec,255,2,test,1,[2]
3379,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\InstanceRegionCheckerTest.java,test defaults,@ test public void   (  )  throws  exception  {   property based az to region mapper az to region mapper = new  property based az to region mapper ( new  default eureka client config (  )  )  ;   instance region checker checker = new  instance region chec,255,2,defaults,2,[]
3380,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\InstanceRegionCheckerTest.java,test instance with noaz,"@ test public void   (  )  throws  exception  {   configuration manager . get config instance (  )  . set property ( ""eureka . us - east - 1 . availability zones"" ""abc def"" )  ;   property based az to region mapper az to region mapper = new  property base",255,4,test,1,[2]
3381,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\InstanceRegionCheckerTest.java,test instance with noaz,"@ test public void   (  )  throws  exception  {   configuration manager . get config instance (  )  . set property ( ""eureka . us - east - 1 . availability zones"" ""abc def"" )  ;   property based az to region mapper az to region mapper = new  property base",255,4,instance,2,[85]
3382,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\InstanceRegionCheckerTest.java,test instance with noaz,"@ test public void   (  )  throws  exception  {   configuration manager . get config instance (  )  . set property ( ""eureka . us - east - 1 . availability zones"" ""abc def"" )  ;   property based az to region mapper az to region mapper = new  property base",255,4,with,3,[]
3383,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\InstanceRegionCheckerTest.java,test instance with noaz,"@ test public void   (  )  throws  exception  {   configuration manager . get config instance (  )  . set property ( ""eureka . us - east - 1 . availability zones"" ""abc def"" )  ;   property based az to region mapper az to region mapper = new  property base",255,4,noaz,4,[]
3384,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\InstanceRegionCheckerTest.java,test not mappedaz,"@ test public void   (  )  throws  exception  {   configuration manager . get config instance (  )  . set property ( ""eureka . us - east - 1 . availability zones"" ""abc def"" )  ;   property based az to region mapper az to region mapper = new  property base",255,3,test,1,[2]
3385,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\InstanceRegionCheckerTest.java,test not mappedaz,"@ test public void   (  )  throws  exception  {   configuration manager . get config instance (  )  . set property ( ""eureka . us - east - 1 . availability zones"" ""abc def"" )  ;   property based az to region mapper az to region mapper = new  property base",255,3,not,2,[]
3386,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\InstanceRegionCheckerTest.java,test not mappedaz,"@ test public void   (  )  throws  exception  {   configuration manager . get config instance (  )  . set property ( ""eureka . us - east - 1 . availability zones"" ""abc def"" )  ;   property based az to region mapper az to region mapper = new  property base",255,3,mappedaz,3,[]
3387,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\InstanceRegionCheckerTest.java,test not mappedaz not following format,"@ test public void   (  )  throws  exception  {   configuration manager . get config instance (  )  . set property ( ""eureka . us - east - 1 . availability zones"" ""abc def"" )  ;   property based az to region mapper az to region mapper = new  property base",255,6,test,1,[2]
3388,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\InstanceRegionCheckerTest.java,test not mappedaz not following format,"@ test public void   (  )  throws  exception  {   configuration manager . get config instance (  )  . set property ( ""eureka . us - east - 1 . availability zones"" ""abc def"" )  ;   property based az to region mapper az to region mapper = new  property base",255,6,not,2,[]
3389,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\InstanceRegionCheckerTest.java,test not mappedaz not following format,"@ test public void   (  )  throws  exception  {   configuration manager . get config instance (  )  . set property ( ""eureka . us - east - 1 . availability zones"" ""abc def"" )  ;   property based az to region mapper az to region mapper = new  property base",255,6,mappedaz,3,[]
3390,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\InstanceRegionCheckerTest.java,test not mappedaz not following format,"@ test public void   (  )  throws  exception  {   configuration manager . get config instance (  )  . set property ( ""eureka . us - east - 1 . availability zones"" ""abc def"" )  ;   property based az to region mapper az to region mapper = new  property base",255,6,not,4,[]
3391,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\InstanceRegionCheckerTest.java,test not mappedaz not following format,"@ test public void   (  )  throws  exception  {   configuration manager . get config instance (  )  . set property ( ""eureka . us - east - 1 . availability zones"" ""abc def"" )  ;   property based az to region mapper az to region mapper = new  property base",255,6,following,5,[]
3392,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\InstanceRegionCheckerTest.java,test not mappedaz not following format,"@ test public void   (  )  throws  exception  {   configuration manager . get config instance (  )  . set property ( ""eureka . us - east - 1 . availability zones"" ""abc def"" )  ;   property based az to region mapper az to region mapper = new  property base",255,6,format,6,[]
3393,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\InstanceInfoReplicatorTest.java,get name,@ override public  name   (  )  {  return  name .  my own ;   }  ,65,2,get,1,[]
3394,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\InstanceInfoReplicatorTest.java,get name,@ override public  name   (  )  {  return  name .  my own ;   }  ,65,2,name,2,"[19, 43]"
3395,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\InstanceInfoReplicatorTest.java,set up,@ before public void   (  )  throws  exception  {  discovery client = mock (  discovery client . class )  ;   health check handler health check handler = mock (  health check handler . class )  ;  when ( discovery client . get health check handler (  )  ),255,2,set,1,[]
3396,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\InstanceInfoReplicatorTest.java,set up,@ before public void   (  )  throws  exception  {  discovery client = mock (  discovery client . class )  ;   health check handler health check handler = mock (  health check handler . class )  ;  when ( discovery client . get health check handler (  )  ),255,2,up,2,[]
3397,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\InstanceInfoReplicatorTest.java,tear down,@ after public void   (  )  throws  exception  {  replicator . stop (  )  ;   }  ,81,2,tear,1,[]
3398,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\InstanceInfoReplicatorTest.java,tear down,@ after public void   (  )  throws  exception  {  replicator . stop (  )  ;   }  ,81,2,down,2,[]
3399,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\InstanceInfoReplicatorTest.java,test on demand update,@ test public void   (  )  throws  throwable  {  assert true ( replicator . on demand update (  )  )  ;   thread . sleep ( 10 )  ;  assert true ( replicator . on demand update (  )  )  ;   thread . sleep ( 1000 * refresh rate seconds  /  2 )  ;  assert tr,255,4,test,1,[2]
3400,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\InstanceInfoReplicatorTest.java,test on demand update,@ test public void   (  )  throws  throwable  {  assert true ( replicator . on demand update (  )  )  ;   thread . sleep ( 10 )  ;  assert true ( replicator . on demand update (  )  )  ;   thread . sleep ( 1000 * refresh rate seconds  /  2 )  ;  assert tr,255,4,on,2,"[76, 159, 229]"
3401,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\InstanceInfoReplicatorTest.java,test on demand update,@ test public void   (  )  throws  throwable  {  assert true ( replicator . on demand update (  )  )  ;   thread . sleep ( 10 )  ;  assert true ( replicator . on demand update (  )  )  ;   thread . sleep ( 1000 * refresh rate seconds  /  2 )  ;  assert tr,255,4,demand,3,"[79, 162]"
3402,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\InstanceInfoReplicatorTest.java,test on demand update,@ test public void   (  )  throws  throwable  {  assert true ( replicator . on demand update (  )  )  ;   thread . sleep ( 10 )  ;  assert true ( replicator . on demand update (  )  )  ;   thread . sleep ( 1000 * refresh rate seconds  /  2 )  ;  assert tr,255,4,update,4,"[86, 169]"
3403,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\InstanceInfoReplicatorTest.java,test on demand update rate limiting,@ test public void   (  )  throws  throwable  {  assert true ( replicator . on demand update (  )  )  ;   thread . sleep ( 10 )  ;  assert true ( replicator . on demand update (  )  )  ;   thread . sleep ( 10 )  ;  assert false ( replicator . on demand up,255,6,test,1,[2]
3404,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\InstanceInfoReplicatorTest.java,test on demand update rate limiting,@ test public void   (  )  throws  throwable  {  assert true ( replicator . on demand update (  )  )  ;   thread . sleep ( 10 )  ;  assert true ( replicator . on demand update (  )  )  ;   thread . sleep ( 10 )  ;  assert false ( replicator . on demand up,255,6,on,2,"[76, 159, 243]"
3405,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\InstanceInfoReplicatorTest.java,test on demand update rate limiting,@ test public void   (  )  throws  throwable  {  assert true ( replicator . on demand update (  )  )  ;   thread . sleep ( 10 )  ;  assert true ( replicator . on demand update (  )  )  ;   thread . sleep ( 10 )  ;  assert false ( replicator . on demand up,255,6,demand,3,"[79, 162, 246]"
3406,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\InstanceInfoReplicatorTest.java,test on demand update rate limiting,@ test public void   (  )  throws  throwable  {  assert true ( replicator . on demand update (  )  )  ;   thread . sleep ( 10 )  ;  assert true ( replicator . on demand update (  )  )  ;   thread . sleep ( 10 )  ;  assert false ( replicator . on demand up,255,6,update,4,"[86, 169]"
3407,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\InstanceInfoReplicatorTest.java,test on demand update rate limiting,@ test public void   (  )  throws  throwable  {  assert true ( replicator . on demand update (  )  )  ;   thread . sleep ( 10 )  ;  assert true ( replicator . on demand update (  )  )  ;   thread . sleep ( 10 )  ;  assert false ( replicator . on demand up,255,6,rate,5,[]
3408,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\InstanceInfoReplicatorTest.java,test on demand update rate limiting,@ test public void   (  )  throws  throwable  {  assert true ( replicator . on demand update (  )  )  ;   thread . sleep ( 10 )  ;  assert true ( replicator . on demand update (  )  )  ;   thread . sleep ( 10 )  ;  assert false ( replicator . on demand up,255,6,limiting,6,[]
3409,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\InstanceInfoReplicatorTest.java,test on demand update reset automatic refresh,@ test public void   (  )  throws  throwable  {  replicator . start ( 0 )  ;   thread . sleep ( 1000 * refresh rate seconds  /  2 )  ;  assert true ( replicator . on demand update (  )  )  ;   thread . sleep ( 1000 * refresh rate seconds  +  50 )  ;  veri,255,7,test,1,[2]
3410,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\InstanceInfoReplicatorTest.java,test on demand update reset automatic refresh,@ test public void   (  )  throws  throwable  {  replicator . start ( 0 )  ;   thread . sleep ( 1000 * refresh rate seconds  /  2 )  ;  assert true ( replicator . on demand update (  )  )  ;   thread . sleep ( 1000 * refresh rate seconds  +  50 )  ;  veri,255,7,on,2,"[119, 163, 233]"
3411,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\InstanceInfoReplicatorTest.java,test on demand update reset automatic refresh,@ test public void   (  )  throws  throwable  {  replicator . start ( 0 )  ;   thread . sleep ( 1000 * refresh rate seconds  /  2 )  ;  assert true ( replicator . on demand update (  )  )  ;   thread . sleep ( 1000 * refresh rate seconds  +  50 )  ;  veri,255,7,demand,3,[166]
3412,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\InstanceInfoReplicatorTest.java,test on demand update reset automatic refresh,@ test public void   (  )  throws  throwable  {  replicator . start ( 0 )  ;   thread . sleep ( 1000 * refresh rate seconds  /  2 )  ;  assert true ( replicator . on demand update (  )  )  ;   thread . sleep ( 1000 * refresh rate seconds  +  50 )  ;  veri,255,7,update,4,[173]
3413,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\InstanceInfoReplicatorTest.java,test on demand update reset automatic refresh,@ test public void   (  )  throws  throwable  {  replicator . start ( 0 )  ;   thread . sleep ( 1000 * refresh rate seconds  /  2 )  ;  assert true ( replicator . on demand update (  )  )  ;   thread . sleep ( 1000 * refresh rate seconds  +  50 )  ;  veri,255,7,reset,5,[]
3414,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\InstanceInfoReplicatorTest.java,test on demand update reset automatic refresh,@ test public void   (  )  throws  throwable  {  replicator . start ( 0 )  ;   thread . sleep ( 1000 * refresh rate seconds  /  2 )  ;  assert true ( replicator . on demand update (  )  )  ;   thread . sleep ( 1000 * refresh rate seconds  +  50 )  ;  veri,255,7,automatic,6,[]
3415,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\InstanceInfoReplicatorTest.java,test on demand update reset automatic refresh,@ test public void   (  )  throws  throwable  {  replicator . start ( 0 )  ;   thread . sleep ( 1000 * refresh rate seconds  /  2 )  ;  assert true ( replicator . on demand update (  )  )  ;   thread . sleep ( 1000 * refresh rate seconds  +  50 )  ;  veri,255,7,refresh,7,"[103, 217]"
3416,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\InstanceInfoReplicatorTest.java,test on demand update reset automatic refresh with initial delay,@ test public void   (  )  throws  throwable  {  replicator . start ( 1000 * refresh rate seconds )  ;  assert true ( replicator . on demand update (  )  )  ;   thread . sleep ( 1000 * refresh rate seconds  +  100 )  ;  verify ( discovery client times ( 2,255,10,test,1,[2]
3417,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\InstanceInfoReplicatorTest.java,test on demand update reset automatic refresh with initial delay,@ test public void   (  )  throws  throwable  {  replicator . start ( 1000 * refresh rate seconds )  ;  assert true ( replicator . on demand update (  )  )  ;   thread . sleep ( 1000 * refresh rate seconds  +  100 )  ;  verify ( discovery client times ( 2,255,10,on,2,"[93, 131, 201]"
3418,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\InstanceInfoReplicatorTest.java,test on demand update reset automatic refresh with initial delay,@ test public void   (  )  throws  throwable  {  replicator . start ( 1000 * refresh rate seconds )  ;  assert true ( replicator . on demand update (  )  )  ;   thread . sleep ( 1000 * refresh rate seconds  +  100 )  ;  verify ( discovery client times ( 2,255,10,demand,3,[134]
3419,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\InstanceInfoReplicatorTest.java,test on demand update reset automatic refresh with initial delay,@ test public void   (  )  throws  throwable  {  replicator . start ( 1000 * refresh rate seconds )  ;  assert true ( replicator . on demand update (  )  )  ;   thread . sleep ( 1000 * refresh rate seconds  +  100 )  ;  verify ( discovery client times ( 2,255,10,update,4,[141]
3420,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\InstanceInfoReplicatorTest.java,test on demand update reset automatic refresh with initial delay,@ test public void   (  )  throws  throwable  {  replicator . start ( 1000 * refresh rate seconds )  ;  assert true ( replicator . on demand update (  )  )  ;   thread . sleep ( 1000 * refresh rate seconds  +  100 )  ;  verify ( discovery client times ( 2,255,10,reset,5,[]
3421,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\InstanceInfoReplicatorTest.java,test on demand update reset automatic refresh with initial delay,@ test public void   (  )  throws  throwable  {  replicator . start ( 1000 * refresh rate seconds )  ;  assert true ( replicator . on demand update (  )  )  ;   thread . sleep ( 1000 * refresh rate seconds  +  100 )  ;  verify ( discovery client times ( 2,255,10,automatic,6,[]
3422,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\InstanceInfoReplicatorTest.java,test on demand update reset automatic refresh with initial delay,@ test public void   (  )  throws  throwable  {  replicator . start ( 1000 * refresh rate seconds )  ;  assert true ( replicator . on demand update (  )  )  ;   thread . sleep ( 1000 * refresh rate seconds  +  100 )  ;  verify ( discovery client times ( 2,255,10,refresh,7,"[77, 185]"
3423,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\InstanceInfoReplicatorTest.java,test on demand update reset automatic refresh with initial delay,@ test public void   (  )  throws  throwable  {  replicator . start ( 1000 * refresh rate seconds )  ;  assert true ( replicator . on demand update (  )  )  ;   thread . sleep ( 1000 * refresh rate seconds  +  100 )  ;  verify ( discovery client times ( 2,255,10,with,8,[]
3424,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\InstanceInfoReplicatorTest.java,test on demand update reset automatic refresh with initial delay,@ test public void   (  )  throws  throwable  {  replicator . start ( 1000 * refresh rate seconds )  ;  assert true ( replicator . on demand update (  )  )  ;   thread . sleep ( 1000 * refresh rate seconds  +  100 )  ;  verify ( discovery client times ( 2,255,10,initial,9,[]
3425,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\InstanceInfoReplicatorTest.java,test on demand update reset automatic refresh with initial delay,@ test public void   (  )  throws  throwable  {  replicator . start ( 1000 * refresh rate seconds )  ;  assert true ( replicator . on demand update (  )  )  ;   thread . sleep ( 1000 * refresh rate seconds  +  100 )  ;  verify ( discovery client times ( 2,255,10,delay,10,[]
3426,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegistryTest.java,get name,@ override public  name   (  )  {  return null ;   }  ,54,2,get,1,[]
3427,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegistryTest.java,get name,@ override public  name   (  )  {  return null ;   }  ,54,2,name,2,[19]
3428,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegistryTest.java,prepare remote region registry,"private void   (  )  throws  exception  {   applications local applications =  instance info generator . new builder ( 4 ""app1"" ""app2"" )  . build (  )  . to applications (  )  ;   applications remote applications =  instance info generator . new builder ( 4 ""remote1"" ""remote2"" )  . with zone ( test   remote   zone )  . build (  )  . to applications (  )  ;   applications all applications = merge applications ( local applications remote applications )  ;   applications delta = copy applications ( remote applications )  ;  delta . set apps hash code ( all applications . get apps hash code (  )  )  ;  when ( request handler . get applications ( test   remote   region )  )  . then return ( an eureka http response ( 200 local applications )  . type (  media type . application   json   type )  . build (  )  )  ;  when ( request handler . get delta ( test   remote   region )  )  . then return ( an eureka http response ( 200 delta )  . type (  media type . application   json   type )  . build (  )  )  ;  assert that ( discovery client resource . await cache update ( 5  time unit . seconds )  is ( true )  )  ;   }  ",1124,4,prepare,1,[]
3429,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegistryTest.java,prepare remote region registry,"private void   (  )  throws  exception  {   applications local applications =  instance info generator . new builder ( 4 ""app1"" ""app2"" )  . build (  )  . to applications (  )  ;   applications remote applications =  instance info generator . new builder ( 4 ""remote1"" ""remote2"" )  . with zone ( test   remote   zone )  . build (  )  . to applications (  )  ;   applications all applications = merge applications ( local applications remote applications )  ;   applications delta = copy applications ( remote applications )  ;  delta . set apps hash code ( all applications . get apps hash code (  )  )  ;  when ( request handler . get applications ( test   remote   region )  )  . then return ( an eureka http response ( 200 local applications )  . type (  media type . application   json   type )  . build (  )  )  ;  when ( request handler . get delta ( test   remote   region )  )  . then return ( an eureka http response ( 200 delta )  . type (  media type . application   json   type )  . build (  )  )  ;  assert that ( discovery client resource . await cache update ( 5  time unit . seconds )  is ( true )  )  ;   }  ",1124,4,remote,2,"[193, 259, 269, 302, 433, 501, 657, 863]"
3430,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegistryTest.java,prepare remote region registry,"private void   (  )  throws  exception  {   applications local applications =  instance info generator . new builder ( 4 ""app1"" ""app2"" )  . build (  )  . to applications (  )  ;   applications remote applications =  instance info generator . new builder ( 4 ""remote1"" ""remote2"" )  . with zone ( test   remote   zone )  . build (  )  . to applications (  )  ;   applications all applications = merge applications ( local applications remote applications )  ;   applications delta = copy applications ( remote applications )  ;  delta . set apps hash code ( all applications . get apps hash code (  )  )  ;  when ( request handler . get applications ( test   remote   region )  )  . then return ( an eureka http response ( 200 local applications )  . type (  media type . application   json   type )  . build (  )  )  ;  when ( request handler . get delta ( test   remote   region )  )  . then return ( an eureka http response ( 200 delta )  . type (  media type . application   json   type )  . build (  )  )  ;  assert that ( discovery client resource . await cache update ( 5  time unit . seconds )  is ( true )  )  ;   }  ",1124,4,region,3,"[666, 872]"
3431,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegistryTest.java,prepare remote region registry,"private void   (  )  throws  exception  {   applications local applications =  instance info generator . new builder ( 4 ""app1"" ""app2"" )  . build (  )  . to applications (  )  ;   applications remote applications =  instance info generator . new builder ( 4 ""remote1"" ""remote2"" )  . with zone ( test   remote   zone )  . build (  )  . to applications (  )  ;   applications all applications = merge applications ( local applications remote applications )  ;   applications delta = copy applications ( remote applications )  ;  delta . set apps hash code ( all applications . get apps hash code (  )  )  ;  when ( request handler . get applications ( test   remote   region )  )  . then return ( an eureka http response ( 200 local applications )  . type (  media type . application   json   type )  . build (  )  )  ;  when ( request handler . get delta ( test   remote   region )  )  . then return ( an eureka http response ( 200 delta )  . type (  media type . application   json   type )  . build (  )  )  ;  assert that ( discovery client resource . await cache update ( 5  time unit . seconds )  is ( true )  )  ;   }  ",1124,4,registry,4,[]
3432,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegistryTest.java,set up,@ before public void   (  )  throws  exception  {  reset ( request handler )  ;  when ( request handler . cancel ( any string (  )  any string (  )  )  )  . then return (  eureka http response . status ( 200 )  )  ;  when ( request handler . get delta (  ,255,2,set,1,[53]
3433,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegistryTest.java,set up,@ before public void   (  )  throws  exception  {  reset ( request handler )  ;  when ( request handler . cancel ( any string (  )  any string (  )  )  )  . then return (  eureka http response . status ( 200 )  )  ;  when ( request handler . get delta (  ,255,2,up,2,[]
3434,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegistryTest.java,set up class,@ before class public static void   (  )  throws io exception  {  eureka http server = new  simple eureka http server ( request handler )  ;   }  ,146,3,set,1,[]
3435,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegistryTest.java,set up class,@ before class public static void   (  )  throws io exception  {  eureka http server = new  simple eureka http server ( request handler )  ;   }  ,146,3,up,2,[]
3436,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegistryTest.java,set up class,@ before class public static void   (  )  throws io exception  {  eureka http server = new  simple eureka http server ( request handler )  ;   }  ,146,3,class,3,[9]
3437,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegistryTest.java,tear down class,@ after class public static void   (  )  throws  exception  {  if  ( eureka http server  !  =  null )   {  eureka http server . shutdown (  )  ;   }   }  ,154,3,tear,1,[]
3438,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegistryTest.java,tear down class,@ after class public static void   (  )  throws  exception  {  if  ( eureka http server  !  =  null )   {  eureka http server . shutdown (  )  ;   }   }  ,154,3,down,2,[132]
3439,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegistryTest.java,tear down class,@ after class public static void   (  )  throws  exception  {  if  ( eureka http server  !  =  null )   {  eureka http server . shutdown (  )  ;   }   }  ,154,3,class,3,[8]
3440,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegistryTest.java,test all apps for regions,@ test public void   (  )  throws  exception  {  prepare remote region registry (  )  ;   eureka client client = discovery client resource . get client (  )  ;   applications apps for remote region = client . get applications fora region ( test   remote  ,255,5,test,1,"[2, 240]"
3441,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegistryTest.java,test all apps for regions,@ test public void   (  )  throws  exception  {  prepare remote region registry (  )  ;   eureka client client = discovery client resource . get client (  )  ;   applications apps for remote region = client . get applications fora region ( test   remote  ,255,5,all,2,[]
3442,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegistryTest.java,test all apps for regions,@ test public void   (  )  throws  exception  {  prepare remote region registry (  )  ;   eureka client client = discovery client resource . get client (  )  ;   applications apps for remote region = client . get applications fora region ( test   remote  ,255,5,apps,3,[175]
3443,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegistryTest.java,test all apps for regions,@ test public void   (  )  throws  exception  {  prepare remote region registry (  )  ;   eureka client client = discovery client resource . get client (  )  ;   applications apps for remote region = client . get applications fora region ( test   remote  ,255,5,for,4,"[180, 226]"
3444,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegistryTest.java,test all apps for regions,@ test public void   (  )  throws  exception  {  prepare remote region registry (  )  ;   eureka client client = discovery client resource . get client (  )  ;   applications apps for remote region = client . get applications fora region ( test   remote  ,255,5,regions,5,[]
3445,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegistryTest.java,test apply delta with bad instance info data center info as null,"@ test public void   (  )  throws  exception  {   instance info generator instance gen =  instance info generator . new builder ( 2 ""test app"" )  . build (  )  ;   instance info first = instance gen . first (  )  ;   applications initial = to applications",255,12,test,1,"[2, 133]"
3446,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegistryTest.java,test apply delta with bad instance info data center info as null,"@ test public void   (  )  throws  exception  {   instance info generator instance gen =  instance info generator . new builder ( 2 ""test app"" )  . build (  )  ;   instance info first = instance gen . first (  )  ;   applications initial = to applications",255,12,apply,2,[]
3447,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegistryTest.java,test apply delta with bad instance info data center info as null,"@ test public void   (  )  throws  exception  {   instance info generator instance gen =  instance info generator . new builder ( 2 ""test app"" )  . build (  )  ;   instance info first = instance gen . first (  )  ;   applications initial = to applications",255,12,delta,3,[]
3448,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegistryTest.java,test apply delta with bad instance info data center info as null,"@ test public void   (  )  throws  exception  {   instance info generator instance gen =  instance info generator . new builder ( 2 ""test app"" )  . build (  )  ;   instance info first = instance gen . first (  )  ;   applications initial = to applications",255,12,with,4,[]
3449,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegistryTest.java,test apply delta with bad instance info data center info as null,"@ test public void   (  )  throws  exception  {   instance info generator instance gen =  instance info generator . new builder ( 2 ""test app"" )  . build (  )  ;   instance info first = instance gen . first (  )  ;   applications initial = to applications",255,12,bad,5,[]
3450,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegistryTest.java,test apply delta with bad instance info data center info as null,"@ test public void   (  )  throws  exception  {   instance info generator instance gen =  instance info generator . new builder ( 2 ""test app"" )  . build (  )  ;   instance info first = instance gen . first (  )  ;   applications initial = to applications",255,12,instance,6,"[50, 74, 90, 164, 186]"
3451,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegistryTest.java,test apply delta with bad instance info data center info as null,"@ test public void   (  )  throws  exception  {   instance info generator instance gen =  instance info generator . new builder ( 2 ""test app"" )  . build (  )  ;   instance info first = instance gen . first (  )  ;   applications initial = to applications",255,12,info,7,"[59, 99, 173]"
3452,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegistryTest.java,test apply delta with bad instance info data center info as null,"@ test public void   (  )  throws  exception  {   instance info generator instance gen =  instance info generator . new builder ( 2 ""test app"" )  . build (  )  ;   instance info first = instance gen . first (  )  ;   applications initial = to applications",255,12,data,8,[]
3453,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegistryTest.java,test apply delta with bad instance info data center info as null,"@ test public void   (  )  throws  exception  {   instance info generator instance gen =  instance info generator . new builder ( 2 ""test app"" )  . build (  )  ;   instance info first = instance gen . first (  )  ;   applications initial = to applications",255,12,center,9,[]
3454,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegistryTest.java,test apply delta with bad instance info data center info as null,"@ test public void   (  )  throws  exception  {   instance info generator instance gen =  instance info generator . new builder ( 2 ""test app"" )  . build (  )  ;   instance info first = instance gen . first (  )  ;   applications initial = to applications",255,12,info,10,"[59, 99, 173]"
3455,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegistryTest.java,test apply delta with bad instance info data center info as null,"@ test public void   (  )  throws  exception  {   instance info generator instance gen =  instance info generator . new builder ( 2 ""test app"" )  . build (  )  ;   instance info first = instance gen . first (  )  ;   applications initial = to applications",255,12,as,11,[]
3456,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegistryTest.java,test apply delta with bad instance info data center info as null,"@ test public void   (  )  throws  exception  {   instance info generator instance gen =  instance info generator . new builder ( 2 ""test app"" )  . build (  )  ;   instance info first = instance gen . first (  )  ;   applications initial = to applications",255,12,null,12,[]
3457,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegistryTest.java,test apps hash code after refresh,"@ test public void   (  )  throws  exception  {   instance info generator instance gen =  instance info generator . new builder ( 2 ""test app"" )  . build (  )  ;   instance info first = instance gen . first (  )  ;   applications initial = to applications",255,6,test,1,"[2, 133]"
3458,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegistryTest.java,test apps hash code after refresh,"@ test public void   (  )  throws  exception  {   instance info generator instance gen =  instance info generator . new builder ( 2 ""test app"" )  . build (  )  ;   instance info first = instance gen . first (  )  ;   applications initial = to applications",255,6,apps,2,[]
3459,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegistryTest.java,test apps hash code after refresh,"@ test public void   (  )  throws  exception  {   instance info generator instance gen =  instance info generator . new builder ( 2 ""test app"" )  . build (  )  ;   instance info first = instance gen . first (  )  ;   applications initial = to applications",255,6,hash,3,[]
3460,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegistryTest.java,test apps hash code after refresh,"@ test public void   (  )  throws  exception  {   instance info generator instance gen =  instance info generator . new builder ( 2 ""test app"" )  . build (  )  ;   instance info first = instance gen . first (  )  ;   applications initial = to applications",255,6,code,4,[]
3461,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegistryTest.java,test apps hash code after refresh,"@ test public void   (  )  throws  exception  {   instance info generator instance gen =  instance info generator . new builder ( 2 ""test app"" )  . build (  )  ;   instance info first = instance gen . first (  )  ;   applications initial = to applications",255,6,after,5,[]
3462,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegistryTest.java,test apps hash code after refresh,"@ test public void   (  )  throws  exception  {   instance info generator instance gen =  instance info generator . new builder ( 2 ""test app"" )  . build (  )  ;   instance info first = instance gen . first (  )  ;   applications initial = to applications",255,6,refresh,6,[]
3463,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegistryTest.java,test cache refresh single app for local region,"@ test public void   (  )  throws  exception  {   instance info generator instance gen =  instance info generator . new builder ( 2 ""test app"" )  . build (  )  ;   applications initial apps = instance gen . take delta ( 1 )  ;   string vip address = initi",255,8,test,1,"[2, 133]"
3464,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegistryTest.java,test cache refresh single app for local region,"@ test public void   (  )  throws  exception  {   instance info generator instance gen =  instance info generator . new builder ( 2 ""test app"" )  . build (  )  ;   applications initial apps = instance gen . take delta ( 1 )  ;   string vip address = initi",255,8,cache,2,[]
3465,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegistryTest.java,test cache refresh single app for local region,"@ test public void   (  )  throws  exception  {   instance info generator instance gen =  instance info generator . new builder ( 2 ""test app"" )  . build (  )  ;   applications initial apps = instance gen . take delta ( 1 )  ;   string vip address = initi",255,8,refresh,3,[]
3466,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegistryTest.java,test cache refresh single app for local region,"@ test public void   (  )  throws  exception  {   instance info generator instance gen =  instance info generator . new builder ( 2 ""test app"" )  . build (  )  ;   applications initial apps = instance gen . take delta ( 1 )  ;   string vip address = initi",255,8,single,4,[]
3467,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegistryTest.java,test cache refresh single app for local region,"@ test public void   (  )  throws  exception  {   instance info generator instance gen =  instance info generator . new builder ( 2 ""test app"" )  . build (  )  ;   applications initial apps = instance gen . take delta ( 1 )  ;   string vip address = initi",255,8,app,5,"[138, 164, 185]"
3468,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegistryTest.java,test cache refresh single app for local region,"@ test public void   (  )  throws  exception  {   instance info generator instance gen =  instance info generator . new builder ( 2 ""test app"" )  . build (  )  ;   applications initial apps = instance gen . take delta ( 1 )  ;   string vip address = initi",255,8,for,6,[]
3469,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegistryTest.java,test cache refresh single app for local region,"@ test public void   (  )  throws  exception  {   instance info generator instance gen =  instance info generator . new builder ( 2 ""test app"" )  . build (  )  ;   applications initial apps = instance gen . take delta ( 1 )  ;   string vip address = initi",255,8,local,7,[]
3470,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegistryTest.java,test cache refresh single app for local region,"@ test public void   (  )  throws  exception  {   instance info generator instance gen =  instance info generator . new builder ( 2 ""test app"" )  . build (  )  ;   applications initial apps = instance gen . take delta ( 1 )  ;   string vip address = initi",255,8,region,8,[]
3471,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegistryTest.java,test eureka client periodic cache refresh,@ test public void   (  )  throws  exception  {   instance info generator instance gen =  instance info generator . new builder ( 3 1 )  . build (  )  ;   applications initial apps = instance gen . take delta ( 1 )  ;  when ( request handler . get applica,255,6,test,1,[2]
3472,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegistryTest.java,test eureka client periodic cache refresh,@ test public void   (  )  throws  exception  {   instance info generator instance gen =  instance info generator . new builder ( 3 1 )  . build (  )  ;   applications initial apps = instance gen . take delta ( 1 )  ;  when ( request handler . get applica,255,6,eureka,2,[]
3473,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegistryTest.java,test eureka client periodic cache refresh,@ test public void   (  )  throws  exception  {   instance info generator instance gen =  instance info generator . new builder ( 3 1 )  . build (  )  ;   applications initial apps = instance gen . take delta ( 1 )  ;  when ( request handler . get applica,255,6,client,3,[]
3474,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegistryTest.java,test eureka client periodic cache refresh,@ test public void   (  )  throws  exception  {   instance info generator instance gen =  instance info generator . new builder ( 3 1 )  . build (  )  ;   applications initial apps = instance gen . take delta ( 1 )  ;  when ( request handler . get applica,255,6,periodic,4,[]
3475,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegistryTest.java,test eureka client periodic cache refresh,@ test public void   (  )  throws  exception  {   instance info generator instance gen =  instance info generator . new builder ( 3 1 )  . build (  )  ;   applications initial apps = instance gen . take delta ( 1 )  ;  when ( request handler . get applica,255,6,cache,5,[]
3476,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegistryTest.java,test eureka client periodic cache refresh,@ test public void   (  )  throws  exception  {   instance info generator instance gen =  instance info generator . new builder ( 3 1 )  . build (  )  ;   applications initial apps = instance gen . take delta ( 1 )  ;  when ( request handler . get applica,255,6,refresh,6,[]
3477,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegistryTest.java,test eureka client periodic heartbeat,@ test public void   (  )  throws  exception  {   discovery client resource registering client resource = discovery client resource . fork (  )  . with registration ( true )  . with registry fetch ( false )  . build (  )  ;   instance info instance = regi,255,5,test,1,[2]
3478,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegistryTest.java,test eureka client periodic heartbeat,@ test public void   (  )  throws  exception  {   discovery client resource registering client resource = discovery client resource . fork (  )  . with registration ( true )  . with registry fetch ( false )  . build (  )  ;   instance info instance = regi,255,5,eureka,2,[]
3479,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegistryTest.java,test eureka client periodic heartbeat,@ test public void   (  )  throws  exception  {   discovery client resource registering client resource = discovery client resource . fork (  )  . with registration ( true )  . with registry fetch ( false )  . build (  )  ;   instance info instance = regi,255,5,client,3,"[60, 88, 116]"
3480,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegistryTest.java,test eureka client periodic heartbeat,@ test public void   (  )  throws  exception  {   discovery client resource registering client resource = discovery client resource . fork (  )  . with registration ( true )  . with registry fetch ( false )  . build (  )  ;   instance info instance = regi,255,5,periodic,4,[]
3481,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegistryTest.java,test eureka client periodic heartbeat,@ test public void   (  )  throws  exception  {   discovery client resource registering client resource = discovery client resource . fork (  )  . with registration ( true )  . with registry fetch ( false )  . build (  )  ;   instance info instance = regi,255,5,heartbeat,5,[]
3482,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegistryTest.java,test get all known regions,@ test public void   (  )  throws  exception  {  prepare remote region registry (  )  ;   eureka client client = discovery client resource . get client (  )  ;   set <  string >  all known regions = client . get all known regions (  )  ;  assert that ( al,255,5,test,1,[2]
3483,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegistryTest.java,test get all known regions,@ test public void   (  )  throws  exception  {  prepare remote region registry (  )  ;   eureka client client = discovery client resource . get client (  )  ;   set <  string >  all known regions = client . get all known regions (  )  ;  assert that ( al,255,5,get,2,"[141, 208]"
3484,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegistryTest.java,test get all known regions,@ test public void   (  )  throws  exception  {  prepare remote region registry (  )  ;   eureka client client = discovery client resource . get client (  )  ;   set <  string >  all known regions = client . get all known regions (  )  ;  assert that ( al,255,5,all,3,"[179, 212]"
3485,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegistryTest.java,test get all known regions,@ test public void   (  )  throws  exception  {  prepare remote region registry (  )  ;   eureka client client = discovery client resource . get client (  )  ;   set <  string >  all known regions = client . get all known regions (  )  ;  assert that ( al,255,5,known,4,"[183, 216]"
3486,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegistryTest.java,test get all known regions,@ test public void   (  )  throws  exception  {  prepare remote region registry (  )  ;   eureka client client = discovery client resource . get client (  )  ;   set <  string >  all known regions = client . get all known regions (  )  ;  assert that ( al,255,5,regions,5,"[189, 222]"
3487,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegistryTest.java,test get by vip in local region,"@ test public void   (  )  throws  exception  {   applications applications =  instance info generator . new builder ( 4 ""app1"" ""app2"" )  . build (  )  . to applications (  )  ;   instance info instance = applications . get registered applications ( ""app1",255,7,test,1,[2]
3488,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegistryTest.java,test get by vip in local region,"@ test public void   (  )  throws  exception  {   applications applications =  instance info generator . new builder ( 4 ""app1"" ""app2"" )  . build (  )  . to applications (  )  ;   instance info instance = applications . get registered applications ( ""app1",255,7,get,2,[220]
3489,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegistryTest.java,test get by vip in local region,"@ test public void   (  )  throws  exception  {   applications applications =  instance info generator . new builder ( 4 ""app1"" ""app2"" )  . build (  )  . to applications (  )  ;   instance info instance = applications . get registered applications ( ""app1",255,7,by,3,[]
3490,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegistryTest.java,test get by vip in local region,"@ test public void   (  )  throws  exception  {   applications applications =  instance info generator . new builder ( 4 ""app1"" ""app2"" )  . build (  )  . to applications (  )  ;   instance info instance = applications . get registered applications ( ""app1",255,7,vip,4,[]
3491,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegistryTest.java,test get by vip in local region,"@ test public void   (  )  throws  exception  {   applications applications =  instance info generator . new builder ( 4 ""app1"" ""app2"" )  . build (  )  . to applications (  )  ;   instance info instance = applications . get registered applications ( ""app1",255,7,in,5,"[79, 88, 180, 189, 194]"
3492,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegistryTest.java,test get by vip in local region,"@ test public void   (  )  throws  exception  {   applications applications =  instance info generator . new builder ( 4 ""app1"" ""app2"" )  . build (  )  . to applications (  )  ;   instance info instance = applications . get registered applications ( ""app1",255,7,local,6,[]
3493,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegistryTest.java,test get by vip in local region,"@ test public void   (  )  throws  exception  {   applications applications =  instance info generator . new builder ( 4 ""app1"" ""app2"" )  . build (  )  . to applications (  )  ;   instance info instance = applications . get registered applications ( ""app1",255,7,region,7,[]
3494,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegistryTest.java,test get by vip in remote region,@ test public void   (  )  throws  exception  {  prepare remote region registry (  )  ;   eureka client client = discovery client resource . get client (  )  ;   string vip address = take first ( client . get applications fora region ( test   remote   reg,255,7,test,1,"[2, 236]"
3495,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegistryTest.java,test get by vip in remote region,@ test public void   (  )  throws  exception  {  prepare remote region registry (  )  ;   eureka client client = discovery client resource . get client (  )  ;   string vip address = take first ( client . get applications fora region ( test   remote   reg,255,7,get,2,"[141, 205]"
3496,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegistryTest.java,test get by vip in remote region,@ test public void   (  )  throws  exception  {  prepare remote region registry (  )  ;   eureka client client = discovery client resource . get client (  )  ;   string vip address = take first ( client . get applications fora region ( test   remote   reg,255,7,by,3,[]
3497,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegistryTest.java,test get by vip in remote region,@ test public void   (  )  throws  exception  {  prepare remote region registry (  )  ;   eureka client client = discovery client resource . get client (  )  ;   string vip address = take first ( client . get applications fora region ( test   remote   reg,255,7,vip,4,[169]
3498,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegistryTest.java,test get by vip in remote region,@ test public void   (  )  throws  exception  {  prepare remote region registry (  )  ;   eureka client client = discovery client resource . get client (  )  ;   string vip address = take first ( client . get applications fora region ( test   remote   reg,255,7,in,5,[165]
3499,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegistryTest.java,test get by vip in remote region,@ test public void   (  )  throws  exception  {  prepare remote region registry (  )  ;   eureka client client = discovery client resource . get client (  )  ;   string vip address = take first ( client . get applications fora region ( test   remote   reg,255,7,remote,6,"[57, 243]"
3500,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegistryTest.java,test get by vip in remote region,@ test public void   (  )  throws  exception  {  prepare remote region registry (  )  ;   eureka client client = discovery client resource . get client (  )  ;   string vip address = take first ( client . get applications fora region ( test   remote   reg,255,7,region,7,"[64, 227]"
3501,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegistryTest.java,test get invalidvip,"@ test public void   (  )  throws  exception  {   applications applications =  instance info generator . new builder ( 1 ""test app"" )  . build (  )  . to applications (  )  ;  when ( request handler . get applications ( test   remote   region )  )  . then",255,3,test,1,"[2, 122, 220]"
3502,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegistryTest.java,test get invalidvip,"@ test public void   (  )  throws  exception  {   applications applications =  instance info generator . new builder ( 1 ""test app"" )  . build (  )  . to applications (  )  ;  when ( request handler . get applications ( test   remote   region )  )  . then",255,3,get,2,[201]
3503,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegistryTest.java,test get invalidvip,"@ test public void   (  )  throws  exception  {   applications applications =  instance info generator . new builder ( 1 ""test app"" )  . build (  )  . to applications (  )  ;  when ( request handler . get applications ( test   remote   region )  )  . then",255,3,invalidvip,3,[]
3504,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegistryTest.java,test get invalidvip for remote region,"@ test public void   (  )  throws  exception  {  prepare remote region registry (  )  ;   eureka client client = discovery client resource . get client (  )  ;   list <  instance info >  instances by vip address = client . get instances by vip address ( """,255,6,test,1,[2]
3505,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegistryTest.java,test get invalidvip for remote region,"@ test public void   (  )  throws  exception  {  prepare remote region registry (  )  ;   eureka client client = discovery client resource . get client (  )  ;   list <  instance info >  instances by vip address = client . get instances by vip address ( """,255,6,get,2,"[141, 223]"
3506,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegistryTest.java,test get invalidvip for remote region,"@ test public void   (  )  throws  exception  {  prepare remote region registry (  )  ;   eureka client client = discovery client resource . get client (  )  ;   list <  instance info >  instances by vip address = client . get instances by vip address ( """,255,6,invalidvip,3,[]
3507,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegistryTest.java,test get invalidvip for remote region,"@ test public void   (  )  throws  exception  {  prepare remote region registry (  )  ;   eureka client client = discovery client resource . get client (  )  ;   list <  instance info >  instances by vip address = client . get instances by vip address ( """,255,6,for,4,[]
3508,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegistryTest.java,test get invalidvip for remote region,"@ test public void   (  )  throws  exception  {  prepare remote region registry (  )  ;   eureka client client = discovery client resource . get client (  )  ;   list <  instance info >  instances by vip address = client . get instances by vip address ( """,255,6,remote,5,[57]
3509,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegistryTest.java,test get invalidvip for remote region,"@ test public void   (  )  throws  exception  {  prepare remote region registry (  )  ;   eureka client client = discovery client resource . get client (  )  ;   list <  instance info >  instances by vip address = client . get instances by vip address ( """,255,6,region,6,[64]
3510,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\EurekaClientLifecycleTest.java,configure,@ override protected void   (  )  {  bind (  eureka instance config . class )  . to (  local eureka instance config . class )  ;  bind (  eureka client config . class )  . to (  bad server eureka client config2 . class )  ;  bind (  abstract discovery cli,255,1,configure,1,[]
3511,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\EurekaClientLifecycleTest.java,get appname,@ override public  string   (  )  {  return my   application   name ;   }  ,75,2,get,1,[]
3512,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\EurekaClientLifecycleTest.java,get appname,@ override public  string   (  )  {  return my   application   name ;   }  ,75,2,appname,2,[]
3513,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\EurekaClientLifecycleTest.java,get eureka server service urls,"@ override public  list <  string >    (  string my zone )  {  return singleton list ( ""http: /  / localhost:1 / v2 / "" )  ;   }  ",130,5,get,1,[]
3514,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\EurekaClientLifecycleTest.java,get eureka server service urls,"@ override public  list <  string >    (  string my zone )  {  return singleton list ( ""http: /  / localhost:1 / v2 / "" )  ;   }  ",130,5,eureka,2,[]
3515,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\EurekaClientLifecycleTest.java,get eureka server service urls,"@ override public  list <  string >    (  string my zone )  {  return singleton list ( ""http: /  / localhost:1 / v2 / "" )  ;   }  ",130,5,server,3,[]
3516,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\EurekaClientLifecycleTest.java,get eureka server service urls,"@ override public  list <  string >    (  string my zone )  {  return singleton list ( ""http: /  / localhost:1 / v2 / "" )  ;   }  ",130,5,service,4,[]
3517,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\EurekaClientLifecycleTest.java,get eureka server service urls,"@ override public  list <  string >    (  string my zone )  {  return singleton list ( ""http: /  / localhost:1 / v2 / "" )  ;   }  ",130,5,urls,5,[]
3518,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\EurekaClientLifecycleTest.java,get initial instance info replication interval seconds,@ override public int   (  )  {  return 0 ;   }  ,49,7,get,1,[]
3519,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\EurekaClientLifecycleTest.java,get initial instance info replication interval seconds,@ override public int   (  )  {  return 0 ;   }  ,49,7,initial,2,[]
3520,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\EurekaClientLifecycleTest.java,get initial instance info replication interval seconds,@ override public int   (  )  {  return 0 ;   }  ,49,7,instance,3,[]
3521,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\EurekaClientLifecycleTest.java,get initial instance info replication interval seconds,@ override public int   (  )  {  return 0 ;   }  ,49,7,info,4,[]
3522,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\EurekaClientLifecycleTest.java,get initial instance info replication interval seconds,@ override public int   (  )  {  return 0 ;   }  ,49,7,replication,5,[]
3523,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\EurekaClientLifecycleTest.java,get initial instance info replication interval seconds,@ override public int   (  )  {  return 0 ;   }  ,49,7,interval,6,[]
3524,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\EurekaClientLifecycleTest.java,get initial instance info replication interval seconds,@ override public int   (  )  {  return 0 ;   }  ,49,7,seconds,7,[]
3525,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\EurekaClientLifecycleTest.java,get instance id,@ override public  string   (  )  {  return my   instance   id ;   }  ,70,3,get,1,[]
3526,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\EurekaClientLifecycleTest.java,get instance id,@ override public  string   (  )  {  return my   instance   id ;   }  ,70,3,instance,2,[49]
3527,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\EurekaClientLifecycleTest.java,get instance id,@ override public  string   (  )  {  return my   instance   id ;   }  ,70,3,id,3,"[7, 60]"
3528,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\EurekaClientLifecycleTest.java,get instance info replication interval seconds,@ override public int   (  )  {  return 1 ;   }  ,49,6,get,1,[]
3529,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\EurekaClientLifecycleTest.java,get instance info replication interval seconds,@ override public int   (  )  {  return 1 ;   }  ,49,6,instance,2,[]
3530,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\EurekaClientLifecycleTest.java,get instance info replication interval seconds,@ override public int   (  )  {  return 1 ;   }  ,49,6,info,3,[]
3531,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\EurekaClientLifecycleTest.java,get instance info replication interval seconds,@ override public int   (  )  {  return 1 ;   }  ,49,6,replication,4,[]
3532,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\EurekaClientLifecycleTest.java,get instance info replication interval seconds,@ override public int   (  )  {  return 1 ;   }  ,49,6,interval,5,[]
3533,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\EurekaClientLifecycleTest.java,get instance info replication interval seconds,@ override public int   (  )  {  return 1 ;   }  ,49,6,seconds,6,[]
3534,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\EurekaClientLifecycleTest.java,get lease renewal interval in seconds,@ override public int   (  )  {  return 1 ;   }  ,49,6,get,1,[]
3535,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\EurekaClientLifecycleTest.java,get lease renewal interval in seconds,@ override public int   (  )  {  return 1 ;   }  ,49,6,lease,2,[]
3536,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\EurekaClientLifecycleTest.java,get lease renewal interval in seconds,@ override public int   (  )  {  return 1 ;   }  ,49,6,renewal,3,[]
3537,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\EurekaClientLifecycleTest.java,get lease renewal interval in seconds,@ override public int   (  )  {  return 1 ;   }  ,49,6,interval,4,[]
3538,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\EurekaClientLifecycleTest.java,get lease renewal interval in seconds,@ override public int   (  )  {  return 1 ;   }  ,49,6,in,5,[18]
3539,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\EurekaClientLifecycleTest.java,get lease renewal interval in seconds,@ override public int   (  )  {  return 1 ;   }  ,49,6,seconds,6,[]
3540,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\EurekaClientLifecycleTest.java,get registry fetch interval seconds,@ override public int   (  )  {  return 1 ;   }  ,49,5,get,1,[]
3541,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\EurekaClientLifecycleTest.java,get registry fetch interval seconds,@ override public int   (  )  {  return 1 ;   }  ,49,5,registry,2,[]
3542,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\EurekaClientLifecycleTest.java,get registry fetch interval seconds,@ override public int   (  )  {  return 1 ;   }  ,49,5,fetch,3,[]
3543,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\EurekaClientLifecycleTest.java,get registry fetch interval seconds,@ override public int   (  )  {  return 1 ;   }  ,49,5,interval,4,[]
3544,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\EurekaClientLifecycleTest.java,get registry fetch interval seconds,@ override public int   (  )  {  return 1 ;   }  ,49,5,seconds,5,[]
3545,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\EurekaClientLifecycleTest.java,setup class,@ before class public static void   (  )  throws io exception  {  eureka http server = new  simple eureka http server ( request handler )  ;  when ( request handler . register ( any (  instance info . class )  )  )  . then return (  eureka http response .,255,2,setup,1,[]
3546,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\EurekaClientLifecycleTest.java,setup class,@ before class public static void   (  )  throws io exception  {  eureka http server = new  simple eureka http server ( request handler )  ;  when ( request handler . register ( any (  instance info . class )  )  )  . then return (  eureka http response .,255,2,class,2,"[9, 201]"
3547,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\EurekaClientLifecycleTest.java,should enforce registration at init,@ override public boolean   (  )  {  return true ;   }  ,56,5,should,1,[]
3548,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\EurekaClientLifecycleTest.java,should enforce registration at init,@ override public boolean   (  )  {  return true ;   }  ,56,5,enforce,2,[]
3549,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\EurekaClientLifecycleTest.java,should enforce registration at init,@ override public boolean   (  )  {  return true ;   }  ,56,5,registration,3,[]
3550,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\EurekaClientLifecycleTest.java,should enforce registration at init,@ override public boolean   (  )  {  return true ;   }  ,56,5,at,4,[]
3551,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\EurekaClientLifecycleTest.java,should enforce registration at init,@ override public boolean   (  )  {  return true ;   }  ,56,5,init,5,[]
3552,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\EurekaClientLifecycleTest.java,should fetch registry,@ override public boolean   (  )  {  return false ;   }  ,57,3,should,1,[]
3553,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\EurekaClientLifecycleTest.java,should fetch registry,@ override public boolean   (  )  {  return false ;   }  ,57,3,fetch,2,[]
3554,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\EurekaClientLifecycleTest.java,should fetch registry,@ override public boolean   (  )  {  return false ;   }  ,57,3,registry,3,[]
3555,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\EurekaClientLifecycleTest.java,should register with eureka,@ override public boolean   (  )  {  return false ;   }  ,57,4,should,1,[]
3556,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\EurekaClientLifecycleTest.java,should register with eureka,@ override public boolean   (  )  {  return false ;   }  ,57,4,register,2,[]
3557,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\EurekaClientLifecycleTest.java,should register with eureka,@ override public boolean   (  )  {  return false ;   }  ,57,4,with,3,[]
3558,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\EurekaClientLifecycleTest.java,should register with eureka,@ override public boolean   (  )  {  return false ;   }  ,57,4,eureka,4,[]
3559,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\EurekaClientLifecycleTest.java,tear down class,@ after class public static void   (  )  {  if  ( eureka http server  !  =  null )   {  eureka http server . shutdown (  )  ;   }   }  ,135,3,tear,1,[]
3560,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\EurekaClientLifecycleTest.java,tear down class,@ after class public static void   (  )  {  if  ( eureka http server  !  =  null )   {  eureka http server . shutdown (  )  ;   }   }  ,135,3,down,2,[113]
3561,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\EurekaClientLifecycleTest.java,tear down class,@ after class public static void   (  )  {  if  ( eureka http server  !  =  null )   {  eureka http server . shutdown (  )  ;   }   }  ,135,3,class,3,[8]
3562,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\EurekaClientLifecycleTest.java,test backup registry injection,@ test public void   (  )  throws  exception  {  final  backup registry backup registry = mock (  backup registry . class )  ;  when ( backup registry . fetch registry (  )  )  . then return ( applications )  ;   injector injector =  lifecycle injector . ,255,4,test,1,[2]
3563,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\EurekaClientLifecycleTest.java,test backup registry injection,@ test public void   (  )  throws  exception  {  final  backup registry backup registry = mock (  backup registry . class )  ;  when ( backup registry . fetch registry (  )  )  . then return ( applications )  ;   injector injector =  lifecycle injector . ,255,4,backup,2,"[56, 72, 98, 135]"
3564,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\EurekaClientLifecycleTest.java,test backup registry injection,@ test public void   (  )  throws  exception  {  final  backup registry backup registry = mock (  backup registry . class )  ;  when ( backup registry . fetch registry (  )  )  . then return ( applications )  ;   injector injector =  lifecycle injector . ,255,4,registry,3,"[63, 79, 105, 142, 159]"
3565,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\EurekaClientLifecycleTest.java,test backup registry injection,@ test public void   (  )  throws  exception  {  final  backup registry backup registry = mock (  backup registry . class )  ;  when ( backup registry . fetch registry (  )  )  . then return ( applications )  ;   injector injector =  lifecycle injector . ,255,4,injection,4,[]
3566,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\EurekaClientLifecycleTest.java,test enforcing registration on init fast fail,@ test ( expected =  provision exception . class )  public void   (  )  {   injector injector =  lifecycle injector . builder (  )  . with modules ( new  abstract module (  )  {  @ override protected void configure (  )  {  bind (  eureka instance config ,255,7,test,1,[2]
3567,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\EurekaClientLifecycleTest.java,test enforcing registration on init fast fail,@ test ( expected =  provision exception . class )  public void   (  )  {   injector injector =  lifecycle injector . builder (  )  . with modules ( new  abstract module (  )  {  @ override protected void configure (  )  {  bind (  eureka instance config ,255,7,enforcing,2,[]
3568,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\EurekaClientLifecycleTest.java,test enforcing registration on init fast fail,@ test ( expected =  provision exception . class )  public void   (  )  {   injector injector =  lifecycle injector . builder (  )  . with modules ( new  abstract module (  )  {  @ override protected void configure (  )  {  bind (  eureka instance config ,255,7,registration,3,[]
3569,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\EurekaClientLifecycleTest.java,test enforcing registration on init fast fail,@ test ( expected =  provision exception . class )  public void   (  )  {   injector injector =  lifecycle injector . builder (  )  . with modules ( new  abstract module (  )  {  @ override protected void configure (  )  {  bind (  eureka instance config ,255,7,on,4,"[28, 38, 206, 249]"
3570,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\EurekaClientLifecycleTest.java,test enforcing registration on init fast fail,@ test ( expected =  provision exception . class )  public void   (  )  {   injector injector =  lifecycle injector . builder (  )  . with modules ( new  abstract module (  )  {  @ override protected void configure (  )  {  bind (  eureka instance config ,255,7,init,5,[]
3571,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\EurekaClientLifecycleTest.java,test enforcing registration on init fast fail,@ test ( expected =  provision exception . class )  public void   (  )  {   injector injector =  lifecycle injector . builder (  )  . with modules ( new  abstract module (  )  {  @ override protected void configure (  )  {  bind (  eureka instance config ,255,7,fast,6,[]
3572,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\EurekaClientLifecycleTest.java,test enforcing registration on init fast fail,@ test ( expected =  provision exception . class )  public void   (  )  {   injector injector =  lifecycle injector . builder (  )  . with modules ( new  abstract module (  )  {  @ override protected void configure (  )  {  bind (  eureka instance config ,255,7,fail,7,[]
3573,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\EurekaClientLifecycleTest.java,test eureka client lifecycle,@ test public void   (  )  throws  exception  {   injector injector =  lifecycle injector . builder (  )  . with modules ( new  abstract module (  )  {  @ override protected void configure (  )  {  bind (  eureka instance config . class )  . to (  local e,255,4,test,1,[2]
3574,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\EurekaClientLifecycleTest.java,test eureka client lifecycle,@ test public void   (  )  throws  exception  {   injector injector =  lifecycle injector . builder (  )  . with modules ( new  abstract module (  )  {  @ override protected void configure (  )  {  bind (  eureka instance config . class )  . to (  local e,255,4,eureka,2,[206]
3575,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\EurekaClientLifecycleTest.java,test eureka client lifecycle,@ test public void   (  )  throws  exception  {   injector injector =  lifecycle injector . builder (  )  . with modules ( new  abstract module (  )  {  @ override protected void configure (  )  {  bind (  eureka instance config . class )  . to (  local e,255,4,client,3,[]
3576,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\EurekaClientLifecycleTest.java,test eureka client lifecycle,@ test public void   (  )  throws  exception  {   injector injector =  lifecycle injector . builder (  )  . with modules ( new  abstract module (  )  {  @ override protected void configure (  )  {  bind (  eureka instance config . class )  . to (  local e,255,4,lifecycle,4,[71]
3577,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\MockBackupRegistry.java,fetch registry,@ override public  applications   (  string[] include remote regions )  {   applications to return = new  applications (  )  ;  for  (   application application : local region apps . get registered applications (  )  )   {  to return . add application ( a,255,2,fetch,1,[]
3578,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\MockBackupRegistry.java,fetch registry,@ override public  applications   (  string[] include remote regions )  {   applications to return = new  applications (  )  ;  for  (   application application : local region apps . get registered applications (  )  )   {  to return . add application ( a,255,2,registry,2,[]
3579,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\MockBackupRegistry.java,get local region apps,public  applications   (  )  {  return local region apps ;   }  ,64,4,get,1,[]
3580,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\MockBackupRegistry.java,get local region apps,public  applications   (  )  {  return local region apps ;   }  ,64,4,local,2,[39]
3581,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\MockBackupRegistry.java,get local region apps,public  applications   (  )  {  return local region apps ;   }  ,64,4,region,3,[45]
3582,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\MockBackupRegistry.java,get local region apps,public  applications   (  )  {  return local region apps ;   }  ,64,4,apps,4,[52]
3583,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\MockBackupRegistry.java,get remote region vs apps,public  map <  string  applications >    (  )  {  return remote region vs apps ;   }  ,86,5,get,1,[]
3584,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\MockBackupRegistry.java,get remote region vs apps,public  map <  string  applications >    (  )  {  return remote region vs apps ;   }  ,86,5,remote,2,[57]
3585,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\MockBackupRegistry.java,get remote region vs apps,public  map <  string  applications >    (  )  {  return remote region vs apps ;   }  ,86,5,region,3,[64]
3586,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\MockBackupRegistry.java,get remote region vs apps,public  map <  string  applications >    (  )  {  return remote region vs apps ;   }  ,86,5,vs,4,[71]
3587,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\MockBackupRegistry.java,get remote region vs apps,public  map <  string  applications >    (  )  {  return remote region vs apps ;   }  ,86,5,apps,5,[74]
3588,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\MockBackupRegistry.java,set local region apps,public void   (  applications local region apps )  {  this . local region apps = local region apps ;   }  ,106,4,set,1,[]
3589,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\MockBackupRegistry.java,set local region apps,public void   (  applications local region apps )  {  this . local region apps = local region apps ;   }  ,106,4,local,2,"[30, 61, 81]"
3590,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\MockBackupRegistry.java,set local region apps,public void   (  applications local region apps )  {  this . local region apps = local region apps ;   }  ,106,4,region,3,"[36, 67, 87]"
3591,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\MockBackupRegistry.java,set local region apps,public void   (  applications local region apps )  {  this . local region apps = local region apps ;   }  ,106,4,apps,4,"[43, 74, 94]"
3592,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\MockBackupRegistry.java,set remote region vs apps,public void   (  map <  string  applications >  remote region vs apps )  {  this . remote region vs apps = remote region vs apps ;   }  ,136,5,set,1,[]
3593,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\MockBackupRegistry.java,set remote region vs apps,public void   (  map <  string  applications >  remote region vs apps )  {  this . remote region vs apps = remote region vs apps ;   }  ,136,5,remote,2,"[48, 83, 107]"
3594,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\MockBackupRegistry.java,set remote region vs apps,public void   (  map <  string  applications >  remote region vs apps )  {  this . remote region vs apps = remote region vs apps ;   }  ,136,5,region,3,"[55, 90, 114]"
3595,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\MockBackupRegistry.java,set remote region vs apps,public void   (  map <  string  applications >  remote region vs apps )  {  this . remote region vs apps = remote region vs apps ;   }  ,136,5,vs,4,"[62, 97, 121]"
3596,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\MockBackupRegistry.java,set remote region vs apps,public void   (  map <  string  applications >  remote region vs apps )  {  this . remote region vs apps = remote region vs apps ;   }  ,136,5,apps,5,"[65, 100, 124]"
3597,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\Jersey1DiscoveryClientOptionalArgsTest.java,before,@ before public void   (  )  {  args = new  jersey1 discovery client optional args (  )  ;   }  ,96,1,before,1,[2]
3598,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\Jersey1DiscoveryClientOptionalArgsTest.java,get,@ override public t   (  )  {  return null ;   }  ,50,1,get,1,[]
3599,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\Jersey1DiscoveryClientOptionalArgsTest.java,test health check callback guice provider,@ test public void   (  )  {  args . set health check callback provider ( new  guice provider <  health check callback >  (  )  )  ;   }  ,138,6,test,1,[2]
3600,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\Jersey1DiscoveryClientOptionalArgsTest.java,test health check callback guice provider,@ test public void   (  )  {  args . set health check callback provider ( new  guice provider <  health check callback >  (  )  )  ;   }  ,138,6,health,2,"[41, 97]"
3601,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\Jersey1DiscoveryClientOptionalArgsTest.java,test health check callback guice provider,@ test public void   (  )  {  args . set health check callback provider ( new  guice provider <  health check callback >  (  )  )  ;   }  ,138,6,check,3,"[48, 104]"
3602,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\Jersey1DiscoveryClientOptionalArgsTest.java,test health check callback guice provider,@ test public void   (  )  {  args . set health check callback provider ( new  guice provider <  health check callback >  (  )  )  ;   }  ,138,6,callback,4,"[54, 110]"
3603,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\Jersey1DiscoveryClientOptionalArgsTest.java,test health check callback guice provider,@ test public void   (  )  {  args . set health check callback provider ( new  guice provider <  health check callback >  (  )  )  ;   }  ,138,6,guice,5,[79]
3604,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\Jersey1DiscoveryClientOptionalArgsTest.java,test health check callback guice provider,@ test public void   (  )  {  args . set health check callback provider ( new  guice provider <  health check callback >  (  )  )  ;   }  ,138,6,provider,6,"[63, 85]"
3605,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\Jersey1DiscoveryClientOptionalArgsTest.java,test health check callback javax provider,@ test public void   (  )  {  args . set health check callback provider ( new  javax provider <  health check callback >  (  )  )  ;   }  ,138,6,test,1,[2]
3606,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\Jersey1DiscoveryClientOptionalArgsTest.java,test health check callback javax provider,@ test public void   (  )  {  args . set health check callback provider ( new  javax provider <  health check callback >  (  )  )  ;   }  ,138,6,health,2,"[41, 97]"
3607,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\Jersey1DiscoveryClientOptionalArgsTest.java,test health check callback javax provider,@ test public void   (  )  {  args . set health check callback provider ( new  javax provider <  health check callback >  (  )  )  ;   }  ,138,6,check,3,"[48, 104]"
3608,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\Jersey1DiscoveryClientOptionalArgsTest.java,test health check callback javax provider,@ test public void   (  )  {  args . set health check callback provider ( new  javax provider <  health check callback >  (  )  )  ;   }  ,138,6,callback,4,"[54, 110]"
3609,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\Jersey1DiscoveryClientOptionalArgsTest.java,test health check callback javax provider,@ test public void   (  )  {  args . set health check callback provider ( new  javax provider <  health check callback >  (  )  )  ;   }  ,138,6,javax,5,[79]
3610,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\Jersey1DiscoveryClientOptionalArgsTest.java,test health check callback javax provider,@ test public void   (  )  {  args . set health check callback provider ( new  javax provider <  health check callback >  (  )  )  ;   }  ,138,6,provider,6,"[63, 85]"
3611,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\Jersey1DiscoveryClientOptionalArgsTest.java,test health check handler guice provider,@ test public void   (  )  {  args . set health check handler provider ( new  guice provider <  health check handler >  (  )  )  ;   }  ,136,6,test,1,[2]
3612,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\Jersey1DiscoveryClientOptionalArgsTest.java,test health check handler guice provider,@ test public void   (  )  {  args . set health check handler provider ( new  guice provider <  health check handler >  (  )  )  ;   }  ,136,6,health,2,"[41, 96]"
3613,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\Jersey1DiscoveryClientOptionalArgsTest.java,test health check handler guice provider,@ test public void   (  )  {  args . set health check handler provider ( new  guice provider <  health check handler >  (  )  )  ;   }  ,136,6,check,3,"[48, 103]"
3614,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\Jersey1DiscoveryClientOptionalArgsTest.java,test health check handler guice provider,@ test public void   (  )  {  args . set health check handler provider ( new  guice provider <  health check handler >  (  )  )  ;   }  ,136,6,handler,4,"[54, 109]"
3615,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\Jersey1DiscoveryClientOptionalArgsTest.java,test health check handler guice provider,@ test public void   (  )  {  args . set health check handler provider ( new  guice provider <  health check handler >  (  )  )  ;   }  ,136,6,guice,5,[78]
3616,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\Jersey1DiscoveryClientOptionalArgsTest.java,test health check handler guice provider,@ test public void   (  )  {  args . set health check handler provider ( new  guice provider <  health check handler >  (  )  )  ;   }  ,136,6,provider,6,"[62, 84]"
3617,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\Jersey1DiscoveryClientOptionalArgsTest.java,test health check handler javax provider,@ test public void   (  )  {  args . set health check handler provider ( new  javax provider <  health check handler >  (  )  )  ;   }  ,136,6,test,1,[2]
3618,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\Jersey1DiscoveryClientOptionalArgsTest.java,test health check handler javax provider,@ test public void   (  )  {  args . set health check handler provider ( new  javax provider <  health check handler >  (  )  )  ;   }  ,136,6,health,2,"[41, 96]"
3619,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\Jersey1DiscoveryClientOptionalArgsTest.java,test health check handler javax provider,@ test public void   (  )  {  args . set health check handler provider ( new  javax provider <  health check handler >  (  )  )  ;   }  ,136,6,check,3,"[48, 103]"
3620,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\Jersey1DiscoveryClientOptionalArgsTest.java,test health check handler javax provider,@ test public void   (  )  {  args . set health check handler provider ( new  javax provider <  health check handler >  (  )  )  ;   }  ,136,6,handler,4,"[54, 109]"
3621,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\Jersey1DiscoveryClientOptionalArgsTest.java,test health check handler javax provider,@ test public void   (  )  {  args . set health check handler provider ( new  javax provider <  health check handler >  (  )  )  ;   }  ,136,6,javax,5,[78]
3622,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\Jersey1DiscoveryClientOptionalArgsTest.java,test health check handler javax provider,@ test public void   (  )  {  args . set health check handler provider ( new  javax provider <  health check handler >  (  )  )  ;   }  ,136,6,provider,6,"[62, 84]"
3623,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\provider\DiscoveryJerseyProviderTest.java,test decoding with utf charset explicitly set,"@ test public void   (  )  throws  exception  {   map <  string  string >  params = new  hash map <  >  (  )  ;  params . put ( ""charset"" ""utf - 8"" )  ;  test encoding decoding ( new  media type ( ""application"" ""json"" params )  )  ;   }  ",238,7,test,1,"[2, 154]"
3624,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\provider\DiscoveryJerseyProviderTest.java,test decoding with utf charset explicitly set,"@ test public void   (  )  throws  exception  {   map <  string  string >  params = new  hash map <  >  (  )  ;  params . put ( ""charset"" ""utf - 8"" )  ;  test encoding decoding ( new  media type ( ""application"" ""json"" params )  )  ;   }  ",238,7,decoding,2,[168]
3625,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\provider\DiscoveryJerseyProviderTest.java,test decoding with utf charset explicitly set,"@ test public void   (  )  throws  exception  {   map <  string  string >  params = new  hash map <  >  (  )  ;  params . put ( ""charset"" ""utf - 8"" )  ;  test encoding decoding ( new  media type ( ""application"" ""json"" params )  )  ;   }  ",238,7,with,3,[]
3626,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\provider\DiscoveryJerseyProviderTest.java,test decoding with utf charset explicitly set,"@ test public void   (  )  throws  exception  {   map <  string  string >  params = new  hash map <  >  (  )  ;  params . put ( ""charset"" ""utf - 8"" )  ;  test encoding decoding ( new  media type ( ""application"" ""json"" params )  )  ;   }  ",238,7,utf,4,[139]
3627,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\provider\DiscoveryJerseyProviderTest.java,test decoding with utf charset explicitly set,"@ test public void   (  )  throws  exception  {   map <  string  string >  params = new  hash map <  >  (  )  ;  params . put ( ""charset"" ""utf - 8"" )  ;  test encoding decoding ( new  media type ( ""application"" ""json"" params )  )  ;   }  ",238,7,charset,5,[129]
3628,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\provider\DiscoveryJerseyProviderTest.java,test decoding with utf charset explicitly set,"@ test public void   (  )  throws  exception  {   map <  string  string >  params = new  hash map <  >  (  )  ;  params . put ( ""charset"" ""utf - 8"" )  ;  test encoding decoding ( new  media type ( ""application"" ""json"" params )  )  ;   }  ",238,7,explicitly,6,[]
3629,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\provider\DiscoveryJerseyProviderTest.java,test decoding with utf charset explicitly set,"@ test public void   (  )  throws  exception  {   map <  string  string >  params = new  hash map <  >  (  )  ;  params . put ( ""charset"" ""utf - 8"" )  ;  test encoding decoding ( new  media type ( ""application"" ""json"" params )  )  ;   }  ",238,7,set,7,[133]
3630,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\provider\DiscoveryJerseyProviderTest.java,test encoding decoding,private void   (  media type media type )  throws io exception  {  assert that ( jersey provider . is writeable (  instance info . class  instance info . class null media type )  is ( true )  )  ;   byte array output stream out = new  byte array output stream (  )  ;  jersey provider . write to ( instance  instance info . class  instance info . class null media type null out )  ;  assert that ( jersey provider . is readable (  instance info . class  instance info . class null media type )  is ( true )  )  ;   byte array input stream in = new  byte array input stream ( out . to byte array (  )  )  ;   instance info decoded instance =  (  instance info ) jersey provider . read from (  instance info . class  instance info . class null media type null in )  ;  assert that ( decoded instance is ( equal to ( instance )  )  )  ;   }  ,839,3,test,1,[]
3631,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\provider\DiscoveryJerseyProviderTest.java,test encoding decoding,private void   (  media type media type )  throws io exception  {  assert that ( jersey provider . is writeable (  instance info . class  instance info . class null media type )  is ( true )  )  ;   byte array output stream out = new  byte array output stream (  )  ;  jersey provider . write to ( instance  instance info . class  instance info . class null media type null out )  ;  assert that ( jersey provider . is readable (  instance info . class  instance info . class null media type )  is ( true )  )  ;   byte array input stream in = new  byte array input stream ( out . to byte array (  )  )  ;   instance info decoded instance =  (  instance info ) jersey provider . read from (  instance info . class  instance info . class null media type null in )  ;  assert that ( decoded instance is ( equal to ( instance )  )  )  ;   }  ,839,3,encoding,2,[]
3632,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\provider\DiscoveryJerseyProviderTest.java,test encoding decoding,private void   (  media type media type )  throws io exception  {  assert that ( jersey provider . is writeable (  instance info . class  instance info . class null media type )  is ( true )  )  ;   byte array output stream out = new  byte array output stream (  )  ;  jersey provider . write to ( instance  instance info . class  instance info . class null media type null out )  ;  assert that ( jersey provider . is readable (  instance info . class  instance info . class null media type )  is ( true )  )  ;   byte array input stream in = new  byte array input stream ( out . to byte array (  )  )  ;   instance info decoded instance =  (  instance info ) jersey provider . read from (  instance info . class  instance info . class null media type null in )  ;  assert that ( decoded instance is ( equal to ( instance )  )  )  ;   }  ,839,3,decoding,3,[]
3633,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\provider\DiscoveryJerseyProviderTest.java,test json encoding decoding,@ test public void   (  )  throws  exception  {  test encoding decoding (  media type . application   json   type )  ;   }  ,124,4,test,1,"[2, 49]"
3634,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\provider\DiscoveryJerseyProviderTest.java,test json encoding decoding,@ test public void   (  )  throws  exception  {  test encoding decoding (  media type . application   json   type )  ;   }  ,124,4,json,2,[102]
3635,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\provider\DiscoveryJerseyProviderTest.java,test json encoding decoding,@ test public void   (  )  throws  exception  {  test encoding decoding (  media type . application   json   type )  ;   }  ,124,4,encoding,3,[54]
3636,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\provider\DiscoveryJerseyProviderTest.java,test json encoding decoding,@ test public void   (  )  throws  exception  {  test encoding decoding (  media type . application   json   type )  ;   }  ,124,4,decoding,4,[63]
3637,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\provider\DiscoveryJerseyProviderTest.java,test non utf charset is not accepted,"@ test public void   (  )  throws  exception  {   map <  string  string >  params = new  hash map <  >  (  )  ;  params . put ( ""charset"" ""iso - 8859"" )  ;   media type media type with non supported charset = new  media type ( ""application"" ""json"" params ",255,7,test,1,[2]
3638,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\provider\DiscoveryJerseyProviderTest.java,test non utf charset is not accepted,"@ test public void   (  )  throws  exception  {   map <  string  string >  params = new  hash map <  >  (  )  ;  params . put ( ""charset"" ""iso - 8859"" )  ;   media type media type with non supported charset = new  media type ( ""application"" ""json"" params ",255,7,non,2,[185]
3639,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\provider\DiscoveryJerseyProviderTest.java,test non utf charset is not accepted,"@ test public void   (  )  throws  exception  {   map <  string  string >  params = new  hash map <  >  (  )  ;  params . put ( ""charset"" ""iso - 8859"" )  ;   media type media type with non supported charset = new  media type ( ""application"" ""json"" params ",255,7,utf,3,[]
3640,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\provider\DiscoveryJerseyProviderTest.java,test non utf charset is not accepted,"@ test public void   (  )  throws  exception  {   map <  string  string >  params = new  hash map <  >  (  )  ;  params . put ( ""charset"" ""iso - 8859"" )  ;   media type media type with non supported charset = new  media type ( ""application"" ""json"" params ",255,7,charset,4,"[129, 199]"
3641,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\provider\DiscoveryJerseyProviderTest.java,test non utf charset is not accepted,"@ test public void   (  )  throws  exception  {   map <  string  string >  params = new  hash map <  >  (  )  ;  params . put ( ""charset"" ""iso - 8859"" )  ;   media type media type with non supported charset = new  media type ( ""application"" ""json"" params ",255,7,is,5,[139]
3642,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\provider\DiscoveryJerseyProviderTest.java,test non utf charset is not accepted,"@ test public void   (  )  throws  exception  {   map <  string  string >  params = new  hash map <  >  (  )  ;  params . put ( ""charset"" ""iso - 8859"" )  ;   media type media type with non supported charset = new  media type ( ""application"" ""json"" params ",255,7,not,6,[]
3643,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\provider\DiscoveryJerseyProviderTest.java,test non utf charset is not accepted,"@ test public void   (  )  throws  exception  {   map <  string  string >  params = new  hash map <  >  (  )  ;  params . put ( ""charset"" ""iso - 8859"" )  ;   media type media type with non supported charset = new  media type ( ""application"" ""json"" params ",255,7,accepted,7,[]
3644,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\provider\DiscoveryJerseyProviderTest.java,test xml encoding decoding,@ test public void   (  )  throws  exception  {  test encoding decoding (  media type . application   xml   type )  ;   }  ,123,4,test,1,"[2, 49]"
3645,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\provider\DiscoveryJerseyProviderTest.java,test xml encoding decoding,@ test public void   (  )  throws  exception  {  test encoding decoding (  media type . application   xml   type )  ;   }  ,123,4,xml,2,[102]
3646,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\provider\DiscoveryJerseyProviderTest.java,test xml encoding decoding,@ test public void   (  )  throws  exception  {  test encoding decoding (  media type . application   xml   type )  ;   }  ,123,4,encoding,3,[54]
3647,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\provider\DiscoveryJerseyProviderTest.java,test xml encoding decoding,@ test public void   (  )  throws  exception  {  test encoding decoding (  media type . application   xml   type )  ;   }  ,123,4,decoding,4,[63]
3648,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\MockRemoteEurekaServer.java,add delta apps,protected void   ( boolean include remote  applications apps )  {  for  (   application application : application delta map . values (  )  )   {  apps . add application ( application )  ;   }  if  ( include remote )   {  for  (   application application : remote region apps delta . values (  )  )   {  apps . add application ( application )  ;   }   }   }  ,358,3,add,1,"[153, 310]"
3649,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\MockRemoteEurekaServer.java,add delta apps,protected void   ( boolean include remote  applications apps )  {  for  (   application application : application delta map . values (  )  )   {  apps . add application ( application )  ;   }  if  ( include remote )   {  for  (   application application : remote region apps delta . values (  )  )   {  apps . add application ( application )  ;   }   }   }  ,358,3,delta,2,"[114, 275]"
3650,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\MockRemoteEurekaServer.java,add delta apps,protected void   ( boolean include remote  applications apps )  {  for  (   application application : application delta map . values (  )  )   {  apps . add application ( application )  ;   }  if  ( include remote )   {  for  (   application application : remote region apps delta . values (  )  )   {  apps . add application ( application )  ;   }   }   }  ,358,3,apps,3,"[56, 146, 270, 303]"
3651,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\MockRemoteEurekaServer.java,add local region apps,public void   (  string app name  application app )  {  application map . put ( app name app )  ;   }  ,103,4,add,1,[]
3652,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\MockRemoteEurekaServer.java,add local region apps,public void   (  string app name  application app )  {  application map . put ( app name app )  ;   }  ,103,4,local,2,[]
3653,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\MockRemoteEurekaServer.java,add local region apps,public void   (  string app name  application app )  {  application map . put ( app name app )  ;   }  ,103,4,region,3,[]
3654,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\MockRemoteEurekaServer.java,add local region apps,public void   (  string app name  application app )  {  application map . put ( app name app )  ;   }  ,103,4,apps,4,[]
3655,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\MockRemoteEurekaServer.java,add local region apps delta,public void   (  string app name  application app )  {  application delta map . put ( app name app )  ;   }  ,109,5,add,1,[]
3656,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\MockRemoteEurekaServer.java,add local region apps delta,public void   (  string app name  application app )  {  application delta map . put ( app name app )  ;   }  ,109,5,local,2,[]
3657,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\MockRemoteEurekaServer.java,add local region apps delta,public void   (  string app name  application app )  {  application delta map . put ( app name app )  ;   }  ,109,5,region,3,[]
3658,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\MockRemoteEurekaServer.java,add local region apps delta,public void   (  string app name  application app )  {  application delta map . put ( app name app )  ;   }  ,109,5,apps,4,[]
3659,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\MockRemoteEurekaServer.java,add local region apps delta,public void   (  string app name  application app )  {  application delta map . put ( app name app )  ;   }  ,109,5,delta,5,[68]
3660,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\MockRemoteEurekaServer.java,add remote region apps,public void   (  string app name  application app )  {  remote region apps . put ( app name app )  ;   }  ,106,4,add,1,[]
3661,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\MockRemoteEurekaServer.java,add remote region apps,public void   (  string app name  application app )  {  remote region apps . put ( app name app )  ;   }  ,106,4,remote,2,[56]
3662,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\MockRemoteEurekaServer.java,add remote region apps,public void   (  string app name  application app )  {  remote region apps . put ( app name app )  ;   }  ,106,4,region,3,[63]
3663,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\MockRemoteEurekaServer.java,add remote region apps,public void   (  string app name  application app )  {  remote region apps . put ( app name app )  ;   }  ,106,4,apps,4,[70]
3664,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\MockRemoteEurekaServer.java,add remote region apps delta,public void   (  string app name  application app )  {  remote region apps delta . put ( app name app )  ;   }  ,112,5,add,1,[]
3665,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\MockRemoteEurekaServer.java,add remote region apps delta,public void   (  string app name  application app )  {  remote region apps delta . put ( app name app )  ;   }  ,112,5,remote,2,[56]
3666,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\MockRemoteEurekaServer.java,add remote region apps delta,public void   (  string app name  application app )  {  remote region apps delta . put ( app name app )  ;   }  ,112,5,region,3,[63]
3667,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\MockRemoteEurekaServer.java,add remote region apps delta,public void   (  string app name  application app )  {  remote region apps delta . put ( app name app )  ;   }  ,112,5,apps,4,[70]
3668,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\MockRemoteEurekaServer.java,add remote region apps delta,public void   (  string app name  application app )  {  remote region apps delta . put ( app name app )  ;   }  ,112,5,delta,5,[75]
3669,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\MockRemoteEurekaServer.java,after,@ override protected void   (  )  {  try  {  stop (  )  ;   }  catch  (   exception e )   {   assert . fail ( e . get message (  )  )  ;   }   }  ,146,1,after,1,[]
3670,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\MockRemoteEurekaServer.java,before,@ override protected void   (  )  throws  throwable  {  start (  )  ;   }  ,75,1,before,1,[]
3671,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\MockRemoteEurekaServer.java,get delta apps hash code,protected  string   ( boolean include remote )  {   applications all apps = new  applications (  )  ;  for  (   application application : application map . values (  )  )   {  all apps . add application ( application )  ;   }  if  ( include remote )   {  for  (   application application : remote region apps . values (  )  )   {  all apps . add application ( application )  ;   }   }  add delta apps ( include remote all apps )  ;  return all apps . get reconcile hash code (  )  ;   }  ,488,5,get,1,[451]
3672,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\MockRemoteEurekaServer.java,get delta apps hash code,protected  string   ( boolean include remote )  {   applications all apps = new  applications (  )  ;  for  (   application application : application map . values (  )  )   {  all apps . add application ( application )  ;   }  if  ( include remote )   {  for  (   application application : remote region apps . values (  )  )   {  all apps . add application ( application )  ;   }   }  add delta apps ( include remote all apps )  ;  return all apps . get reconcile hash code (  )  ;   }  ,488,5,delta,2,[390]
3673,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\MockRemoteEurekaServer.java,get delta apps hash code,protected  string   ( boolean include remote )  {   applications all apps = new  applications (  )  ;  for  (   application application : application map . values (  )  )   {  all apps . add application ( application )  ;   }  if  ( include remote )   {  for  (   application application : remote region apps . values (  )  )   {  all apps . add application ( application )  ;   }   }  add delta apps ( include remote all apps )  ;  return all apps . get reconcile hash code (  )  ;   }  ,488,5,apps,3,"[69, 180, 304, 335, 396, 422, 444]"
3674,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\MockRemoteEurekaServer.java,get delta apps hash code,protected  string   ( boolean include remote )  {   applications all apps = new  applications (  )  ;  for  (   application application : application map . values (  )  )   {  all apps . add application ( application )  ;   }  if  ( include remote )   {  for  (   application application : remote region apps . values (  )  )   {  all apps . add application ( application )  ;   }   }  add delta apps ( include remote all apps )  ;  return all apps . get reconcile hash code (  )  ;   }  ,488,5,hash,4,[465]
3675,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\MockRemoteEurekaServer.java,get delta apps hash code,protected  string   ( boolean include remote )  {   applications all apps = new  applications (  )  ;  for  (   application application : application map . values (  )  )   {  all apps . add application ( application )  ;   }  if  ( include remote )   {  for  (   application application : remote region apps . values (  )  )   {  all apps . add application ( application )  ;   }   }  add delta apps ( include remote all apps )  ;  return all apps . get reconcile hash code (  )  ;   }  ,488,5,code,5,[470]
3676,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\MockRemoteEurekaServer.java,get name,@ override public  name   (  )  {  return  name .  my own ;   }  ,65,2,get,1,[]
3677,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\MockRemoteEurekaServer.java,get name,@ override public  name   (  )  {  return  name .  my own ;   }  ,65,2,name,2,"[19, 43]"
3678,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\MockRemoteEurekaServer.java,get port,public int   (  )  {  return port ;   }  ,41,2,get,1,[]
3679,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\MockRemoteEurekaServer.java,get port,public int   (  )  {  return port ;   }  ,41,2,port,2,[29]
3680,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\MockRemoteEurekaServer.java,handle,@ override public void   (  string target  http servlet request request  http servlet response response int dispatch )  throws io exception   servlet exception  {   string auth name = request . get header (  abstract eureka identity . auth   name   header,255,1,handle,1,[]
3681,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\MockRemoteEurekaServer.java,is remote request,"protected boolean   (  http servlet request request )  {   string query string = request . get query string (  )  ;  if  ( query string  =  =  null )   {  return false ;   }  return query string . contains ( ""regions = "" )  ;   }  ",231,3,is,1,[]
3682,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\MockRemoteEurekaServer.java,is remote request,"protected boolean   (  http servlet request request )  {   string query string = request . get query string (  )  ;  if  ( query string  =  =  null )   {  return false ;   }  return query string . contains ( ""regions = "" )  ;   }  ",231,3,remote,2,[]
3683,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\MockRemoteEurekaServer.java,is remote request,"protected boolean   (  http servlet request request )  {   string query string = request . get query string (  )  ;  if  ( query string  =  =  null )   {  return false ;   }  return query string . contains ( ""regions = "" )  ;   }  ",231,3,request,3,"[36, 44, 81]"
3684,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\MockRemoteEurekaServer.java,is sent delta,public boolean   (  )  {  return sent delta . get (  )  ;   }  ,63,3,is,1,[]
3685,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\MockRemoteEurekaServer.java,is sent delta,public boolean   (  )  {  return sent delta . get (  )  ;   }  ,63,3,sent,2,[33]
3686,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\MockRemoteEurekaServer.java,is sent delta,public boolean   (  )  {  return sent delta . get (  )  ;   }  ,63,3,delta,3,[38]
3687,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\MockRemoteEurekaServer.java,is sent registry,public boolean   (  )  {  return sent registry . get (  )  ;   }  ,66,3,is,1,[41]
3688,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\MockRemoteEurekaServer.java,is sent registry,public boolean   (  )  {  return sent registry . get (  )  ;   }  ,66,3,sent,2,[33]
3689,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\MockRemoteEurekaServer.java,is sent registry,public boolean   (  )  {  return sent registry . get (  )  ;   }  ,66,3,registry,3,[38]
3690,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\MockRemoteEurekaServer.java,send ok response with content,"protected void   (  request request  http servlet response response  applications apps )  throws io exception  {   string content =  xmlx stream . get instance (  )  . toxml ( apps )  ;  response . set content type ( ""application / xml"" )  ;  response . set status (  http servlet response . sc   ok )  ;  response . get writer (  )  . println ( content )  ;  response . get writer (  )  . flush (  )  ;  request . set handled ( true )  ;   system . out . println ( "" eureka port: ""  +  port  +  "" .  "" +   system . current time millis (  )  +  "" .   eureka resource mock  sent response for request path: "" +  request . get path info (  )  +  ""  apps count: "" +  apps . get registered applications (  )  . size (  )  )  ;   }  ",727,5,send,1,[]
3691,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\MockRemoteEurekaServer.java,send ok response with content,"protected void   (  request request  http servlet response response  applications apps )  throws io exception  {   string content =  xmlx stream . get instance (  )  . toxml ( apps )  ;  response . set content type ( ""application / xml"" )  ;  response . set status (  http servlet response . sc   ok )  ;  response . get writer (  )  . println ( content )  ;  response . get writer (  )  . flush (  )  ;  request . set handled ( true )  ;   system . out . println ( "" eureka port: ""  +  port  +  "" .  "" +   system . current time millis (  )  +  "" .   eureka resource mock  sent response for request path: "" +  request . get path info (  )  +  ""  apps count: "" +  apps . get registered applications (  )  . size (  )  )  ;   }  ",727,5,ok,2,[297]
3692,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\MockRemoteEurekaServer.java,send ok response with content,"protected void   (  request request  http servlet response response  applications apps )  throws io exception  {   string content =  xmlx stream . get instance (  )  . toxml ( apps )  ;  response . set content type ( ""application / xml"" )  ;  response . set status (  http servlet response . sc   ok )  ;  response . get writer (  )  . println ( content )  ;  response . get writer (  )  . flush (  )  ;  request . set handled ( true )  ;   system . out . println ( "" eureka port: ""  +  port  +  "" .  "" +   system . current time millis (  )  +  "" .   eureka resource mock  sent response for request path: "" +  request . get path info (  )  +  ""  apps count: "" +  apps . get registered applications (  )  . size (  )  )  ;   }  ",727,5,response,3,"[50, 59, 187, 243, 281, 306, 360, 578]"
3693,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\MockRemoteEurekaServer.java,send ok response with content,"protected void   (  request request  http servlet response response  applications apps )  throws io exception  {   string content =  xmlx stream . get instance (  )  . toxml ( apps )  ;  response . set content type ( ""application / xml"" )  ;  response . set status (  http servlet response . sc   ok )  ;  response . get writer (  )  . println ( content )  ;  response . get writer (  )  . flush (  )  ;  request . set handled ( true )  ;   system . out . println ( "" eureka port: ""  +  port  +  "" .  "" +   system . current time millis (  )  +  "" .   eureka resource mock  sent response for request path: "" +  request . get path info (  )  +  ""  apps count: "" +  apps . get registered applications (  )  . size (  )  )  ;   }  ",727,5,with,4,[]
3694,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\MockRemoteEurekaServer.java,send ok response with content,"protected void   (  request request  http servlet response response  applications apps )  throws io exception  {   string content =  xmlx stream . get instance (  )  . toxml ( apps )  ;  response . set content type ( ""application / xml"" )  ;  response . set status (  http servlet response . sc   ok )  ;  response . get writer (  )  . println ( content )  ;  response . get writer (  )  . flush (  )  ;  request . set handled ( true )  ;   system . out . println ( "" eureka port: ""  +  port  +  "" .  "" +   system . current time millis (  )  +  "" .   eureka resource mock  sent response for request path: "" +  request . get path info (  )  +  ""  apps count: "" +  apps . get registered applications (  )  . size (  )  )  ;   }  ",727,5,content,5,"[122, 202, 346]"
3695,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\MockRemoteEurekaServer.java,sleep,"protected void   ( int seconds )  {  try  {   thread . sleep ( seconds )  ;   }  catch  (   interrupted exception e )   {   system . out . println ( "" interrupted: ""  +  e )  ;   }   }  ",186,1,sleep,1,[55]
3696,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\MockRemoteEurekaServer.java,start,public void   (  )  throws  exception  {  server = new  server ( port )  ;  server . set handler ( new  apps resource handler (  )  )  ;  server . start (  )  ;  port = server . get connectors (  ) [0] . get local port (  )  ;   }  ,232,1,start,1,[147]
3697,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\MockRemoteEurekaServer.java,stop,public void   (  )  throws  exception  {  server . stop (  )  ;  server = null ;  port = 0 ;  registration statuses queue . clear (  )  ;  registration statuses . clear (  )  ;  application map . clear (  )  ;  remote region apps . clear (  )  ;  remote region apps delta . clear (  )  ;  application delta map . clear (  )  ;   }  ,332,1,stop,1,[51]
3698,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\MockRemoteEurekaServer.java,wait for delta to be retrieved,"public void   ( int refresh rate )  throws  interrupted exception  {  int count = 0 ;  while  ( count +  +   <  3 &&  ! is sent delta (  )  )   {   system . out . println ( "" sleeping for ""  +  refresh rate  +  "" seconds to let the remote registry fetch delta .   attempt: "" +  count )  ;   thread . sleep ( 3 * refresh rate * 1000 )  ;   system . out . println ( "" done sleeping for 10 seconds to let the remote registry fetch delta .   delta fetched: ""  +  is sent delta (  )  )  ;   }   system . out . println ( "" sleeping for extra ""  +  refresh rate  +  "" seconds for the client to update delta in memory . "" )  ;   }  ",624,6,wait,1,[]
3699,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\MockRemoteEurekaServer.java,wait for delta to be retrieved,"public void   ( int refresh rate )  throws  interrupted exception  {  int count = 0 ;  while  ( count +  +   <  3 &&  ! is sent delta (  )  )   {   system . out . println ( "" sleeping for ""  +  refresh rate  +  "" seconds to let the remote registry fetch delta .   attempt: "" +  count )  ;   thread . sleep ( 3 * refresh rate * 1000 )  ;   system . out . println ( "" done sleeping for 10 seconds to let the remote registry fetch delta .   delta fetched: ""  +  is sent delta (  )  )  ;   }   system . out . println ( "" sleeping for extra ""  +  refresh rate  +  "" seconds for the client to update delta in memory . "" )  ;   }  ",624,6,for,2,"[184, 380, 526, 569]"
3700,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\MockRemoteEurekaServer.java,wait for delta to be retrieved,"public void   ( int refresh rate )  throws  interrupted exception  {  int count = 0 ;  while  ( count +  +   <  3 &&  ! is sent delta (  )  )   {   system . out . println ( "" sleeping for ""  +  refresh rate  +  "" seconds to let the remote registry fetch delta .   attempt: "" +  count )  ;   thread . sleep ( 3 * refresh rate * 1000 )  ;   system . out . println ( "" done sleeping for 10 seconds to let the remote registry fetch delta .   delta fetched: ""  +  is sent delta (  )  )  ;   }   system . out . println ( "" sleeping for extra ""  +  refresh rate  +  "" seconds for the client to update delta in memory . "" )  ;   }  ",624,6,delta,3,"[128, 254, 428, 438, 467, 594]"
3701,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\MockRemoteEurekaServer.java,wait for delta to be retrieved,"public void   ( int refresh rate )  throws  interrupted exception  {  int count = 0 ;  while  ( count +  +   <  3 &&  ! is sent delta (  )  )   {   system . out . println ( "" sleeping for ""  +  refresh rate  +  "" seconds to let the remote registry fetch delta .   attempt: "" +  count )  ;   thread . sleep ( 3 * refresh rate * 1000 )  ;   system . out . println ( "" done sleeping for 10 seconds to let the remote registry fetch delta .   delta fetched: ""  +  is sent delta (  )  )  ;   }   system . out . println ( "" sleeping for extra ""  +  refresh rate  +  "" seconds for the client to update delta in memory . "" )  ;   }  ",624,6,to,4,"[221, 395, 584]"
3702,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\MockRemoteEurekaServer.java,wait for delta to be retrieved,"public void   ( int refresh rate )  throws  interrupted exception  {  int count = 0 ;  while  ( count +  +   <  3 &&  ! is sent delta (  )  )   {   system . out . println ( "" sleeping for ""  +  refresh rate  +  "" seconds to let the remote registry fetch delta .   attempt: "" +  count )  ;   thread . sleep ( 3 * refresh rate * 1000 )  ;   system . out . println ( "" done sleeping for 10 seconds to let the remote registry fetch delta .   delta fetched: ""  +  is sent delta (  )  )  ;   }   system . out . println ( "" sleeping for extra ""  +  refresh rate  +  "" seconds for the client to update delta in memory . "" )  ;   }  ",624,6,be,5,[]
3703,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\MockRemoteEurekaServer.java,wait for delta to be retrieved,"public void   ( int refresh rate )  throws  interrupted exception  {  int count = 0 ;  while  ( count +  +   <  3 &&  ! is sent delta (  )  )   {   system . out . println ( "" sleeping for ""  +  refresh rate  +  "" seconds to let the remote registry fetch delta .   attempt: "" +  count )  ;   thread . sleep ( 3 * refresh rate * 1000 )  ;   system . out . println ( "" done sleeping for 10 seconds to let the remote registry fetch delta .   delta fetched: ""  +  is sent delta (  )  )  ;   }   system . out . println ( "" sleeping for extra ""  +  refresh rate  +  "" seconds for the client to update delta in memory . "" )  ;   }  ",624,6,retrieved,6,[]
3704,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\AsyncResolverTest.java,set up,@ before public void   (  )  {  when ( transport config . get async executor thread pool size (  )  )  . then return ( 3 )  ;  when ( transport config . get async resolver refresh interval ms (  )  )  . then return ( 200 )  ;  when ( transport config . ge,255,2,set,1,[]
3705,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\AsyncResolverTest.java,set up,@ before public void   (  )  {  when ( transport config . get async executor thread pool size (  )  )  . then return ( 3 )  ;  when ( transport config . get async resolver refresh interval ms (  )  )  . then return ( 200 )  ;  when ( transport config . ge,255,2,up,2,[]
3706,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\AsyncResolverTest.java,shut down,@ after public void   (  )  {  resolver . shutdown (  )  ;   }  ,64,2,shut,1,[42]
3707,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\AsyncResolverTest.java,shut down,@ after public void   (  )  {  resolver . shutdown (  )  ;   }  ,64,2,down,2,[46]
3708,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\AsyncResolverTest.java,test delegate failure at warm up,@ test public void   (  )  {  when ( delegate resolver . get cluster endpoints (  )  )  . then return ( null )  ;  do nothing (  )  . when ( resolver )  . schedule task ( any long (  )  )  ;   list endpoints = resolver . get cluster endpoints (  )  ;  ass,255,6,test,1,[2]
3709,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\AsyncResolverTest.java,test delegate failure at warm up,@ test public void   (  )  {  when ( delegate resolver . get cluster endpoints (  )  )  . then return ( null )  ;  do nothing (  )  . when ( resolver )  . schedule task ( any long (  )  )  ;   list endpoints = resolver . get cluster endpoints (  )  ;  ass,255,6,delegate,2,[37]
3710,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\AsyncResolverTest.java,test delegate failure at warm up,@ test public void   (  )  {  when ( delegate resolver . get cluster endpoints (  )  )  . then return ( null )  ;  do nothing (  )  . when ( resolver )  . schedule task ( any long (  )  )  ;   list endpoints = resolver . get cluster endpoints (  )  ;  ass,255,6,failure,3,[]
3711,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\AsyncResolverTest.java,test delegate failure at warm up,@ test public void   (  )  {  when ( delegate resolver . get cluster endpoints (  )  )  . then return ( null )  ;  do nothing (  )  . when ( resolver )  . schedule task ( any long (  )  )  ;   list endpoints = resolver . get cluster endpoints (  )  ;  ass,255,6,at,4,[42]
3712,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\AsyncResolverTest.java,test delegate failure at warm up,@ test public void   (  )  {  when ( delegate resolver . get cluster endpoints (  )  )  . then return ( null )  ;  do nothing (  )  . when ( resolver )  . schedule task ( any long (  )  )  ;   list endpoints = resolver . get cluster endpoints (  )  ;  ass,255,6,warm,5,[]
3713,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\AsyncResolverTest.java,test delegate failure at warm up,@ test public void   (  )  {  when ( delegate resolver . get cluster endpoints (  )  )  . then return ( null )  ;  do nothing (  )  . when ( resolver )  . schedule task ( any long (  )  )  ;   list endpoints = resolver . get cluster endpoints (  )  ;  ass,255,6,up,6,[]
3714,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\AsyncResolverTest.java,test happy case,@ test public void   (  )  {   list delegate returns1 = new  array list (  sample cluster .  us east1a . builder (  )  . with server pool ( 2 )  . build (  )  )  ;   list delegate returns2 = new  array list (  sample cluster .  us east1b . builder (  )  .,255,3,test,1,[2]
3715,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\AsyncResolverTest.java,test happy case,@ test public void   (  )  {   list delegate returns1 = new  array list (  sample cluster .  us east1a . builder (  )  . with server pool ( 2 )  . build (  )  )  ;   list delegate returns2 = new  array list (  sample cluster .  us east1b . builder (  )  .,255,3,happy,2,[]
3716,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\AsyncResolverTest.java,test happy case,@ test public void   (  )  {   list delegate returns1 = new  array list (  sample cluster .  us east1a . builder (  )  . with server pool ( 2 )  . build (  )  )  ;   list delegate returns2 = new  array list (  sample cluster .  us east1b . builder (  )  .,255,3,case,3,[]
3717,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\providers\DefaultEurekaClientConfigProviderTest.java,configure,"@ override public void   (  bootstrap binder binder )  {  binder . bind (  string . class )  . annotated with (  eureka namespace . class )  . to instance ( ""testnamespace . "" )  ;   }  ",186,1,configure,1,[]
3718,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\providers\DefaultEurekaClientConfigProviderTest.java,test name space injection,"@ test public void   (  )  throws  exception  {   configuration manager . get config instance (  )  . set property ( ""testnamespace . service url . default"" service   uri )  ;   injector injector =  lifecycle injector . builder (  )  . with bootstrap modu",255,4,test,1,"[2, 118]"
3719,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\providers\DefaultEurekaClientConfigProviderTest.java,test name space injection,"@ test public void   (  )  throws  exception  {   configuration manager . get config instance (  )  . set property ( ""testnamespace . service url . default"" service   uri )  ;   injector injector =  lifecycle injector . builder (  )  . with bootstrap modu",255,4,name,2,[122]
3720,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\providers\DefaultEurekaClientConfigProviderTest.java,test name space injection,"@ test public void   (  )  throws  exception  {   configuration manager . get config instance (  )  . set property ( ""testnamespace . service url . default"" service   uri )  ;   injector injector =  lifecycle injector . builder (  )  . with bootstrap modu",255,4,space,3,[126]
3721,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\providers\DefaultEurekaClientConfigProviderTest.java,test name space injection,"@ test public void   (  )  throws  exception  {   configuration manager . get config instance (  )  . set property ( ""testnamespace . service url . default"" service   uri )  ;   injector injector =  lifecycle injector . builder (  )  . with bootstrap modu",255,4,injection,4,[]
3722,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\ApplicationsTest.java,get name,public  data center info .  name   (  )  {  return  data center info .  name .  my own ;   }  ,94,2,get,1,[]
3723,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\ApplicationsTest.java,get name,public  data center info .  name   (  )  {  return  data center info .  name .  my own ;   }  ,94,2,name,2,"[28, 72]"
3724,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\ApplicationsTest.java,shuffle remote registry test,"@ test public void   (  )  throws  exception  {   amazon info ai1 =  amazon info .  builder . new builder (  )  . add metadata (  meta data key . availability zone ""us - east - 1a"" )  . build (  )  ;   instance info instance info1 =  instance info .  buil",255,4,shuffle,1,[]
3725,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\ApplicationsTest.java,shuffle remote registry test,"@ test public void   (  )  throws  exception  {   amazon info ai1 =  amazon info .  builder . new builder (  )  . add metadata (  meta data key . availability zone ""us - east - 1a"" )  . build (  )  ;   instance info instance info1 =  instance info .  buil",255,4,remote,2,[]
3726,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\ApplicationsTest.java,shuffle remote registry test,"@ test public void   (  )  throws  exception  {   amazon info ai1 =  amazon info .  builder . new builder (  )  . add metadata (  meta data key . availability zone ""us - east - 1a"" )  . build (  )  ;   instance info instance info1 =  instance info .  buil",255,4,registry,3,[]
3727,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\ApplicationsTest.java,shuffle remote registry test,"@ test public void   (  )  throws  exception  {   amazon info ai1 =  amazon info .  builder . new builder (  )  . add metadata (  meta data key . availability zone ""us - east - 1a"" )  . build (  )  ;   instance info instance info1 =  instance info .  buil",255,4,test,4,[2]
3728,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\ApplicationsTest.java,shuffle secure virtual host name map last instance test,@ test public void   (  )  {   data center info mydci = new  data center info (  )  {  public  data center info .  name get name (  )  {  return  data center info .  name .  my own ;   }   }   ;   instance info instance info =  instance info .  builder . ,255,9,shuffle,1,[]
3729,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\ApplicationsTest.java,shuffle secure virtual host name map last instance test,@ test public void   (  )  {   data center info mydci = new  data center info (  )  {  public  data center info .  name get name (  )  {  return  data center info .  name .  my own ;   }   }   ;   instance info instance info =  instance info .  builder . ,255,9,secure,2,[]
3730,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\ApplicationsTest.java,shuffle secure virtual host name map last instance test,@ test public void   (  )  {   data center info mydci = new  data center info (  )  {  public  data center info .  name get name (  )  {  return  data center info .  name .  my own ;   }   }   ;   instance info instance info =  instance info .  builder . ,255,9,virtual,3,[]
3731,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\ApplicationsTest.java,shuffle secure virtual host name map last instance test,@ test public void   (  )  {   data center info mydci = new  data center info (  )  {  public  data center info .  name get name (  )  {  return  data center info .  name .  my own ;   }   }   ;   instance info instance info =  instance info .  builder . ,255,9,host,4,[]
3732,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\ApplicationsTest.java,shuffle secure virtual host name map last instance test,@ test public void   (  )  {   data center info mydci = new  data center info (  )  {  public  data center info .  name get name (  )  {  return  data center info .  name .  my own ;   }   }   ;   instance info instance info =  instance info .  builder . ,255,9,name,5,"[115, 124, 166]"
3733,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\ApplicationsTest.java,shuffle secure virtual host name map last instance test,@ test public void   (  )  {   data center info mydci = new  data center info (  )  {  public  data center info .  name get name (  )  {  return  data center info .  name .  my own ;   }   }   ;   instance info instance info =  instance info .  builder . ,255,9,map,6,[]
3734,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\ApplicationsTest.java,shuffle secure virtual host name map last instance test,@ test public void   (  )  {   data center info mydci = new  data center info (  )  {  public  data center info .  name get name (  )  {  return  data center info .  name .  my own ;   }   }   ;   instance info instance info =  instance info .  builder . ,255,9,last,7,[]
3735,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\ApplicationsTest.java,shuffle secure virtual host name map last instance test,@ test public void   (  )  {   data center info mydci = new  data center info (  )  {  public  data center info .  name get name (  )  {  return  data center info .  name .  my own ;   }   }   ;   instance info instance info =  instance info .  builder . ,255,9,instance,8,"[197, 211, 228]"
3736,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\ApplicationsTest.java,shuffle secure virtual host name map last instance test,@ test public void   (  )  {   data center info mydci = new  data center info (  )  {  public  data center info .  name get name (  )  {  return  data center info .  name .  my own ;   }   }   ;   instance info instance info =  instance info .  builder . ,255,9,test,9,[2]
3737,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\ApplicationsTest.java,shuffle virtual host name map last instance test,@ test public void   (  )  {   data center info mydci = new  data center info (  )  {  public  data center info .  name get name (  )  {  return  data center info .  name .  my own ;   }   }   ;   instance info instance info =  instance info .  builder . ,255,8,shuffle,1,[]
3738,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\ApplicationsTest.java,shuffle virtual host name map last instance test,@ test public void   (  )  {   data center info mydci = new  data center info (  )  {  public  data center info .  name get name (  )  {  return  data center info .  name .  my own ;   }   }   ;   instance info instance info =  instance info .  builder . ,255,8,virtual,2,[]
3739,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\ApplicationsTest.java,shuffle virtual host name map last instance test,@ test public void   (  )  {   data center info mydci = new  data center info (  )  {  public  data center info .  name get name (  )  {  return  data center info .  name .  my own ;   }   }   ;   instance info instance info =  instance info .  builder . ,255,8,host,3,[]
3740,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\ApplicationsTest.java,shuffle virtual host name map last instance test,@ test public void   (  )  {   data center info mydci = new  data center info (  )  {  public  data center info .  name get name (  )  {  return  data center info .  name .  my own ;   }   }   ;   instance info instance info =  instance info .  builder . ,255,8,name,4,"[115, 124, 166]"
3741,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\ApplicationsTest.java,shuffle virtual host name map last instance test,@ test public void   (  )  {   data center info mydci = new  data center info (  )  {  public  data center info .  name get name (  )  {  return  data center info .  name .  my own ;   }   }   ;   instance info instance info =  instance info .  builder . ,255,8,map,5,[]
3742,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\ApplicationsTest.java,shuffle virtual host name map last instance test,@ test public void   (  )  {   data center info mydci = new  data center info (  )  {  public  data center info .  name get name (  )  {  return  data center info .  name .  my own ;   }   }   ;   instance info instance info =  instance info .  builder . ,255,8,last,6,[]
3743,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\ApplicationsTest.java,shuffle virtual host name map last instance test,@ test public void   (  )  {   data center info mydci = new  data center info (  )  {  public  data center info .  name get name (  )  {  return  data center info .  name .  my own ;   }   }   ;   instance info instance info =  instance info .  builder . ,255,8,instance,7,"[197, 211, 228]"
3744,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\ApplicationsTest.java,shuffle virtual host name map last instance test,@ test public void   (  )  {   data center info mydci = new  data center info (  )  {  public  data center info .  name get name (  )  {  return  data center info .  name .  my own ;   }   }   ;   instance info instance info =  instance info .  builder . ,255,8,test,8,[2]
3745,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\ApplicationsTest.java,test applications hash and version,"@ test public void   (  )  {   applications applications = new  applications ( ""apps hash code"" 1l  collections . empty list (  )  )  ;  assert equals ( 1l  ( long ) applications . get version (  )  )  ;  assert equals ( ""apps hash code"" applications . ge",255,5,test,1,[2]
3746,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\ApplicationsTest.java,test applications hash and version,"@ test public void   (  )  {   applications applications = new  applications ( ""apps hash code"" 1l  collections . empty list (  )  )  ;  assert equals ( 1l  ( long ) applications . get version (  )  )  ;  assert equals ( ""apps hash code"" applications . ge",255,5,applications,2,"[31, 44, 64, 166, 238]"
3747,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\ApplicationsTest.java,test applications hash and version,"@ test public void   (  )  {   applications applications = new  applications ( ""apps hash code"" 1l  collections . empty list (  )  )  ;  assert equals ( 1l  ( long ) applications . get version (  )  )  ;  assert equals ( ""apps hash code"" applications . ge",255,5,hash,3,"[85, 227]"
3748,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\ApplicationsTest.java,test applications hash and version,"@ test public void   (  )  {   applications applications = new  applications ( ""apps hash code"" 1l  collections . empty list (  )  )  ;  assert equals ( 1l  ( long ) applications . get version (  )  )  ;  assert equals ( ""apps hash code"" applications . ge",255,5,and,4,[]
3749,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\ApplicationsTest.java,test applications hash and version,"@ test public void   (  )  {   applications applications = new  applications ( ""apps hash code"" 1l  collections . empty list (  )  )  ;  assert equals ( 1l  ( long ) applications . get version (  )  )  ;  assert equals ( ""apps hash code"" applications . ge",255,5,version,5,[185]
3750,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\ApplicationsTest.java,test get next index,@ test public void   (  )  {   data center info mydci = new  data center info (  )  {  public  data center info .  name get name (  )  {  return  data center info .  name .  my own ;   }   }   ;   instance info instance info =  instance info .  builder . ,255,4,test,1,[2]
3751,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\ApplicationsTest.java,test get next index,@ test public void   (  )  {   data center info mydci = new  data center info (  )  {  public  data center info .  name get name (  )  {  return  data center info .  name .  my own ;   }   }   ;   instance info instance info =  instance info .  builder . ,255,4,get,2,[120]
3752,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\ApplicationsTest.java,test get next index,@ test public void   (  )  {   data center info mydci = new  data center info (  )  {  public  data center info .  name get name (  )  {  return  data center info .  name .  my own ;   }   }   ;   instance info instance info =  instance info .  builder . ,255,4,next,3,[]
3753,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\ApplicationsTest.java,test get next index,@ test public void   (  )  {   data center info mydci = new  data center info (  )  {  public  data center info .  name get name (  )  {  return  data center info .  name .  my own ;   }   }   ;   instance info instance info =  instance info .  builder . ,255,4,index,4,[]
3754,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\ApplicationsTest.java,test instance filtering,@ test public void   (  )  {   data center info mydci = new  data center info (  )  {  public  data center info .  name get name (  )  {  return  data center info .  name .  my own ;   }   }   ;   instance info instance info =  instance info .  builder . ,255,3,test,1,[2]
3755,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\ApplicationsTest.java,test instance filtering,@ test public void   (  )  {   data center info mydci = new  data center info (  )  {  public  data center info .  name get name (  )  {  return  data center info .  name .  my own ;   }   }   ;   instance info instance info =  instance info .  builder . ,255,3,instance,2,"[197, 211, 228]"
3756,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\ApplicationsTest.java,test instance filtering,@ test public void   (  )  {   data center info mydci = new  data center info (  )  {  public  data center info .  name get name (  )  {  return  data center info .  name .  my own ;   }   }   ;   instance info instance info =  instance info .  builder . ,255,3,filtering,3,[]
3757,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\ApplicationsTest.java,test populate instance count,@ test public void   (  )  {   data center info mydci = new  data center info (  )  {  public  data center info .  name get name (  )  {  return  data center info .  name .  my own ;   }   }   ;   instance info instance info =  instance info .  builder . ,255,4,test,1,[2]
3758,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\ApplicationsTest.java,test populate instance count,@ test public void   (  )  {   data center info mydci = new  data center info (  )  {  public  data center info .  name get name (  )  {  return  data center info .  name .  my own ;   }   }   ;   instance info instance info =  instance info .  builder . ,255,4,populate,2,[]
3759,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\ApplicationsTest.java,test populate instance count,@ test public void   (  )  {   data center info mydci = new  data center info (  )  {  public  data center info .  name get name (  )  {  return  data center info .  name .  my own ;   }   }   ;   instance info instance info =  instance info .  builder . ,255,4,instance,3,"[197, 211, 228]"
3760,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\ApplicationsTest.java,test populate instance count,@ test public void   (  )  {   data center info mydci = new  data center info (  )  {  public  data center info .  name get name (  )  {  return  data center info .  name .  my own ;   }   }   ;   instance info instance info =  instance info .  builder . ,255,4,count,4,[]
3761,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\ApplicationsTest.java,test reconcile hashcode,@ test public void   (  )  {   data center info mydci = new  data center info (  )  {  public  data center info .  name get name (  )  {  return  data center info .  name .  my own ;   }   }   ;   instance info instance info =  instance info .  builder . ,255,3,test,1,[2]
3762,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\ApplicationsTest.java,test reconcile hashcode,@ test public void   (  )  {   data center info mydci = new  data center info (  )  {  public  data center info .  name get name (  )  {  return  data center info .  name .  my own ;   }   }   ;   instance info instance info =  instance info .  builder . ,255,3,reconcile,2,[]
3763,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\ApplicationsTest.java,test reconcile hashcode,@ test public void   (  )  {   data center info mydci = new  data center info (  )  {  public  data center info .  name get name (  )  {  return  data center info .  name .  my own ;   }   }   ;   instance info instance info =  instance info .  builder . ,255,3,hashcode,3,[]
3764,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\ApplicationsTest.java,test registered applications,@ test public void   (  )  {   data center info mydci = new  data center info (  )  {  public  data center info .  name get name (  )  {  return  data center info .  name .  my own ;   }   }   ;   instance info instance info =  instance info .  builder . ,255,3,test,1,[2]
3765,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\ApplicationsTest.java,test registered applications,@ test public void   (  )  {   data center info mydci = new  data center info (  )  {  public  data center info .  name get name (  )  {  return  data center info .  name .  my own ;   }   }   ;   instance info instance info =  instance info .  builder . ,255,3,registered,2,[]
3766,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\ApplicationsTest.java,test registered applications,@ test public void   (  )  {   data center info mydci = new  data center info (  )  {  public  data center info .  name get name (  )  {  return  data center info .  name .  my own ;   }   }   ;   instance info instance info =  instance info .  builder . ,255,3,applications,3,[]
3767,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\ApplicationsTest.java,test registered applications constructor,@ test public void   (  )  {   data center info mydci = new  data center info (  )  {  public  data center info .  name get name (  )  {  return  data center info .  name .  my own ;   }   }   ;   instance info instance info =  instance info .  builder . ,255,4,test,1,[2]
3768,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\ApplicationsTest.java,test registered applications constructor,@ test public void   (  )  {   data center info mydci = new  data center info (  )  {  public  data center info .  name get name (  )  {  return  data center info .  name .  my own ;   }   }   ;   instance info instance info =  instance info .  builder . ,255,4,registered,2,[]
3769,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\ApplicationsTest.java,test registered applications constructor,@ test public void   (  )  {   data center info mydci = new  data center info (  )  {  public  data center info .  name get name (  )  {  return  data center info .  name .  my own ;   }   }   ;   instance info instance info =  instance info .  builder . ,255,4,applications,3,[]
3770,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\ApplicationsTest.java,test registered applications constructor,@ test public void   (  )  {   data center info mydci = new  data center info (  )  {  public  data center info .  name get name (  )  {  return  data center info .  name .  my own ;   }   }   ;   instance info instance info =  instance info .  builder . ,255,4,constructor,4,[]
3771,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\ApplicationsTest.java,test version and app hash,"@ test public void   (  )  {   applications apps = new  applications (  )  ;  assert equals (  - 1l  ( long ) apps . get version (  )  )  ;  assert null ( apps . get apps hash code (  )  )  ;  apps . set version ( 101l )  ;  apps . set apps hash code ( ""u",255,5,test,1,[2]
3772,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\ApplicationsTest.java,test version and app hash,"@ test public void   (  )  {   applications apps = new  applications (  )  ;  assert equals (  - 1l  ( long ) apps . get version (  )  )  ;  assert null ( apps . get apps hash code (  )  )  ;  apps . set version ( 101l )  ;  apps . set apps hash code ( ""u",255,5,version,2,"[121, 204]"
3773,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\ApplicationsTest.java,test version and app hash,"@ test public void   (  )  {   applications apps = new  applications (  )  ;  assert equals (  - 1l  ( long ) apps . get version (  )  )  ;  assert null ( apps . get apps hash code (  )  )  ;  apps . set version ( 101l )  ;  apps . set apps hash code ( ""u",255,5,and,3,[]
3774,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\ApplicationsTest.java,test version and app hash,"@ test public void   (  )  {   applications apps = new  applications (  )  ;  assert equals (  - 1l  ( long ) apps . get version (  )  )  ;  assert null ( apps . get apps hash code (  )  )  ;  apps . set version ( 101l )  ;  apps . set apps hash code ( ""u",255,5,app,4,"[31, 44, 56, 110, 155, 166, 193, 225, 236]"
3775,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\ApplicationsTest.java,test version and app hash,"@ test public void   (  )  {   applications apps = new  applications (  )  ;  assert equals (  - 1l  ( long ) apps . get version (  )  )  ;  assert null ( apps . get apps hash code (  )  )  ;  apps . set version ( 101l )  ;  apps . set apps hash code ( ""u",255,5,hash,5,"[171, 241]"
3776,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\aws\ApplicationsResolverTest.java,set up,"@ before public void   (  )  {  when ( client config . get eureka serverurl context (  )  )  . then return ( ""context"" )  ;  when ( client config . get region (  )  )  . then return ( ""region"" )  ;  when ( transport config . get applications resolver data",255,2,set,1,[]
3777,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\aws\ApplicationsResolverTest.java,set up,"@ before public void   (  )  {  when ( client config . get eureka serverurl context (  )  )  . then return ( ""context"" )  ;  when ( client config . get region (  )  )  . then return ( ""region"" )  ;  when ( transport config . get applications resolver data",255,2,up,2,[]
3778,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\aws\ApplicationsResolverTest.java,test happy case,@ test public void   (  )  {  when ( applications source . get applications ( any int (  )  eq (  time unit . seconds )  )  )  . then return ( applications )  ;   list <  aws endpoint >  endpoints = resolver . get cluster endpoints (  )  ;  assert that ( ,255,3,test,1,[2]
3779,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\aws\ApplicationsResolverTest.java,test happy case,@ test public void   (  )  {  when ( applications source . get applications ( any int (  )  eq (  time unit . seconds )  )  )  . then return ( applications )  ;   list <  aws endpoint >  endpoints = resolver . get cluster endpoints (  )  ;  assert that ( ,255,3,happy,2,[]
3780,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\aws\ApplicationsResolverTest.java,test happy case,@ test public void   (  )  {  when ( applications source . get applications ( any int (  )  eq (  time unit . seconds )  )  )  . then return ( applications )  ;   list <  aws endpoint >  endpoints = resolver . get cluster endpoints (  )  ;  assert that ( ,255,3,case,3,[]
3781,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\aws\ApplicationsResolverTest.java,test stale data,@ test public void   (  )  {  when ( applications source . get applications ( any int (  )  eq (  time unit . seconds )  )  )  . then return ( null )  ;   list <  aws endpoint >  endpoints = resolver . get cluster endpoints (  )  ;  assert that ( endpoint,255,3,test,1,[2]
3782,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\aws\ApplicationsResolverTest.java,test stale data,@ test public void   (  )  {  when ( applications source . get applications ( any int (  )  eq (  time unit . seconds )  )  )  . then return ( null )  ;   list <  aws endpoint >  endpoints = resolver . get cluster endpoints (  )  ;  assert that ( endpoint,255,3,stale,2,[]
3783,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\aws\ApplicationsResolverTest.java,test stale data,@ test public void   (  )  {  when ( applications source . get applications ( any int (  )  eq (  time unit . seconds )  )  )  . then return ( null )  ;   list <  aws endpoint >  endpoints = resolver . get cluster endpoints (  )  ;  assert that ( endpoint,255,3,data,3,[]
3784,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\aws\ApplicationsResolverTest.java,test vip does not exist,"@ test public void   (  )  {  vip address = ""do not exist"" ;  when ( transport config . get read cluster vip (  )  )  . then return ( vip address )  ;  resolver = new  applications resolver ( client config transport config applications source transport co",255,5,test,1,[2]
3785,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\aws\ApplicationsResolverTest.java,test vip does not exist,"@ test public void   (  )  {  vip address = ""do not exist"" ;  when ( transport config . get read cluster vip (  )  )  . then return ( vip address )  ;  resolver = new  applications resolver ( client config transport config applications source transport co",255,5,vip,2,"[30, 105, 134]"
3786,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\aws\ApplicationsResolverTest.java,test vip does not exist,"@ test public void   (  )  {  vip address = ""do not exist"" ;  when ( transport config . get read cluster vip (  )  )  . then return ( vip address )  ;  resolver = new  applications resolver ( client config transport config applications source transport co",255,5,does,3,[]
3787,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\aws\ApplicationsResolverTest.java,test vip does not exist,"@ test public void   (  )  {  vip address = ""do not exist"" ;  when ( transport config . get read cluster vip (  )  )  . then return ( vip address )  ;  resolver = new  applications resolver ( client config transport config applications source transport co",255,5,not,4,[48]
3788,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\aws\ApplicationsResolverTest.java,test vip does not exist,"@ test public void   (  )  {  vip address = ""do not exist"" ;  when ( transport config . get read cluster vip (  )  )  . then return ( vip address )  ;  resolver = new  applications resolver ( client config transport config applications source transport co",255,5,exist,5,[52]
3789,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\aws\EurekaHttpResolverTest.java,set up,"@ before public void   (  )  {  when ( client config . get eureka serverurl context (  )  )  . then return ( ""context"" )  ;  when ( client config . get region (  )  )  . then return ( ""region"" )  ;  applications =  instance info generator . new builder ( ",255,2,set,1,[]
3790,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\aws\EurekaHttpResolverTest.java,set up,"@ before public void   (  )  {  when ( client config . get eureka serverurl context (  )  )  . then return ( ""context"" )  ;  when ( client config . get region (  )  )  . then return ( ""region"" )  ;  applications =  instance info generator . new builder ( ",255,2,up,2,[]
3791,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\aws\EurekaHttpResolverTest.java,test error response from remote server,@ test public void   (  )  {  when ( http client . get vip ( vip address )  )  . then return (  eureka http response . an eureka http response ( 500  (  applications ) null )  . build (  )  )  ;   list <  aws endpoint >  endpoints = resolver . get cluster,255,6,test,1,[2]
3792,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\aws\EurekaHttpResolverTest.java,test error response from remote server,@ test public void   (  )  {  when ( http client . get vip ( vip address )  )  . then return (  eureka http response . an eureka http response ( 500  (  applications ) null )  . build (  )  )  ;   list <  aws endpoint >  endpoints = resolver . get cluster,255,6,error,2,[]
3793,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\aws\EurekaHttpResolverTest.java,test error response from remote server,@ test public void   (  )  {  when ( http client . get vip ( vip address )  )  . then return (  eureka http response . an eureka http response ( 500  (  applications ) null )  . build (  )  )  ;   list <  aws endpoint >  endpoints = resolver . get cluster,255,6,response,3,"[108, 134]"
3794,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\aws\EurekaHttpResolverTest.java,test error response from remote server,@ test public void   (  )  {  when ( http client . get vip ( vip address )  )  . then return (  eureka http response . an eureka http response ( 500  (  applications ) null )  . build (  )  )  ;   list <  aws endpoint >  endpoints = resolver . get cluster,255,6,from,4,[]
3795,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\aws\EurekaHttpResolverTest.java,test error response from remote server,@ test public void   (  )  {  when ( http client . get vip ( vip address )  )  . then return (  eureka http response . an eureka http response ( 500  (  applications ) null )  . build (  )  )  ;   list <  aws endpoint >  endpoints = resolver . get cluster,255,6,remote,5,[]
3796,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\aws\EurekaHttpResolverTest.java,test error response from remote server,@ test public void   (  )  {  when ( http client . get vip ( vip address )  )  . then return (  eureka http response . an eureka http response ( 500  (  applications ) null )  . build (  )  )  ;   list <  aws endpoint >  endpoints = resolver . get cluster,255,6,server,6,[]
3797,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\aws\EurekaHttpResolverTest.java,test happy case,@ test public void   (  )  {   list <  aws endpoint >  endpoints = resolver . get cluster endpoints (  )  ;  assert that ( endpoints . size (  )  equal to ( applications . get instances by virtual host name ( vip address )  . size (  )  )  )  ;  verify ( ,255,3,test,1,[2]
3798,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\aws\EurekaHttpResolverTest.java,test happy case,@ test public void   (  )  {   list <  aws endpoint >  endpoints = resolver . get cluster endpoints (  )  ;  assert that ( endpoints . size (  )  equal to ( applications . get instances by virtual host name ( vip address )  . size (  )  )  )  ;  verify ( ,255,3,happy,2,[]
3799,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\aws\EurekaHttpResolverTest.java,test happy case,@ test public void   (  )  {   list <  aws endpoint >  endpoints = resolver . get cluster endpoints (  )  ;  assert that ( endpoints . size (  )  equal to ( applications . get instances by virtual host name ( vip address )  . size (  )  )  )  ;  verify ( ,255,3,case,3,[]
3800,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\aws\EurekaHttpResolverTest.java,test no valid data from remote server,@ test public void   (  )  {   applications new applications = new  applications (  )  ;  for  (   application application : applications . get registered applications (  )  )   {  if  (  ! application . get instances (  )  . get ( 0 )  . getvip address (,255,7,test,1,[2]
3801,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\aws\EurekaHttpResolverTest.java,test no valid data from remote server,@ test public void   (  )  {   applications new applications = new  applications (  )  ;  for  (   application application : applications . get registered applications (  )  )   {  if  (  ! application . get instances (  )  . get ( 0 )  . getvip address (,255,7,no,2,[]
3802,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\aws\EurekaHttpResolverTest.java,test no valid data from remote server,@ test public void   (  )  {   applications new applications = new  applications (  )  ;  for  (   application application : applications . get registered applications (  )  )   {  if  (  ! application . get instances (  )  . get ( 0 )  . getvip address (,255,7,valid,3,[]
3803,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\aws\EurekaHttpResolverTest.java,test no valid data from remote server,@ test public void   (  )  {   applications new applications = new  applications (  )  ;  for  (   application application : applications . get registered applications (  )  )   {  if  (  ! application . get instances (  )  . get ( 0 )  . getvip address (,255,7,data,4,[]
3804,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\aws\EurekaHttpResolverTest.java,test no valid data from remote server,@ test public void   (  )  {   applications new applications = new  applications (  )  ;  for  (   application application : applications . get registered applications (  )  )   {  if  (  ! application . get instances (  )  . get ( 0 )  . getvip address (,255,7,from,5,[]
3805,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\aws\EurekaHttpResolverTest.java,test no valid data from remote server,@ test public void   (  )  {   applications new applications = new  applications (  )  ;  for  (   application application : applications . get registered applications (  )  )   {  if  (  ! application . get instances (  )  . get ( 0 )  . getvip address (,255,7,remote,6,[]
3806,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\aws\EurekaHttpResolverTest.java,test no valid data from remote server,@ test public void   (  )  {   applications new applications = new  applications (  )  ;  for  (   application application : applications . get registered applications (  )  )   {  if  (  ! application . get instances (  )  . get ( 0 )  . getvip address (,255,7,server,7,[]
3807,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\aws\ConfigClusterResolverTest.java,set up,"@ before public void   (  )  {  when ( client config . should use dns for fetching service urls (  )  )  . then return ( false )  ;  when ( client config . get region (  )  )  . then return ( ""us - east - 1"" )  ;  when ( client config . get availability z",255,2,set,1,[]
3808,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\aws\ConfigClusterResolverTest.java,set up,"@ before public void   (  )  {  when ( client config . should use dns for fetching service urls (  )  )  . then return ( false )  ;  when ( client config . get region (  )  )  . then return ( ""us - east - 1"" )  ;  when ( client config . get availability z",255,2,up,2,[]
3809,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\aws\ConfigClusterResolverTest.java,test read from config,@ test public void   (  )  {   list <  aws endpoint >  endpoints = resolver . get cluster endpoints (  )  ;  assert that ( endpoints . size (  )  equal to ( 6 )  )  ;  for  (   aws endpoint endpoint : endpoints )   {  if  ( endpoint . get zone (  )  . equ,255,4,test,1,[2]
3810,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\aws\ConfigClusterResolverTest.java,test read from config,@ test public void   (  )  {   list <  aws endpoint >  endpoints = resolver . get cluster endpoints (  )  ;  assert that ( endpoints . size (  )  equal to ( 6 )  )  ;  for  (   aws endpoint endpoint : endpoints )   {  if  ( endpoint . get zone (  )  . equ,255,4,read,2,[]
3811,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\aws\ConfigClusterResolverTest.java,test read from config,@ test public void   (  )  {   list <  aws endpoint >  endpoints = resolver . get cluster endpoints (  )  ;  assert that ( endpoints . size (  )  equal to ( 6 )  )  ;  for  (   aws endpoint endpoint : endpoints )   {  if  ( endpoint . get zone (  )  . equ,255,4,from,3,[]
3812,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\aws\ConfigClusterResolverTest.java,test read from config,@ test public void   (  )  {   list <  aws endpoint >  endpoints = resolver . get cluster endpoints (  )  ;  assert that ( endpoints . size (  )  equal to ( 6 )  )  ;  for  (   aws endpoint endpoint : endpoints )   {  if  ( endpoint . get zone (  )  . equ,255,4,config,4,[]
3813,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\aws\TestEurekaHttpResolver.java, test eureka http resolver,public   (  eureka client config client config  eureka transport config transport config  eureka http client factory client factory  string vip address )  {  super ( client config transport config client factory vip address )  ;   }  ,234,4,test,1,[]
3814,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\aws\TestEurekaHttpResolver.java, test eureka http resolver,public   (  eureka client config client config  eureka transport config transport config  eureka http client factory client factory  string vip address )  {  super ( client config transport config client factory vip address )  ;   }  ,234,4,eureka,2,"[12, 48, 90]"
3815,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\aws\TestEurekaHttpResolver.java, test eureka http resolver,public   (  eureka client config client config  eureka transport config transport config  eureka http client factory client factory  string vip address )  {  super ( client config transport config client factory vip address )  ;   }  ,234,4,http,3,[97]
3816,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\aws\TestEurekaHttpResolver.java, test eureka http resolver,public   (  eureka client config client config  eureka transport config transport config  eureka http client factory client factory  string vip address )  {  super ( client config transport config client factory vip address )  ;   }  ,234,4,resolver,4,[]
3817,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\aws\SampleCluster.java, sample cluster builder,public   (  string region  string zone  string network prefix )  {  this . region = region ;  this . zone = zone ;  this . network prefix = network prefix ;   }  ,162,3,sample,1,[]
3818,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\aws\SampleCluster.java, sample cluster builder,public   (  string region  string zone  string network prefix )  {  this . region = region ;  this . zone = zone ;  this . network prefix = network prefix ;   }  ,162,3,cluster,2,[]
3819,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\aws\SampleCluster.java, sample cluster builder,public   (  string region  string zone  string network prefix )  {  this . region = region ;  this . zone = zone ;  this . network prefix = network prefix ;   }  ,162,3,builder,3,[]
3820,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\aws\SampleCluster.java,build,"public  list <  aws endpoint >    (  )  {   list <  aws endpoint >  endpoints = new  array list <  >  (  )  ;  for  ( int i = 0 ;  i  <  server pool size ;  i +  +  )   {   string host name = network prefix  +  i ;  endpoints . add ( new  aws endpoint ( host name 80 false "" / eureka / v2"" region zone )  )  ;   }  return endpoints ;   }  ",339,1,build,1,[]
3821,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\ResolverUtilsTest.java,test extract zone from host name,"@ test public void   (  )  throws  exception  {  assert that (  resolver utils . extract zone from host name ( ""us - east - 1c . myservice . net"" )  is ( equal to ( ""us - east - 1c"" )  )  )  ;  assert that (  resolver utils . extract zone from host name (",255,6,test,1,[2]
3822,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\ResolverUtilsTest.java,test extract zone from host name,"@ test public void   (  )  throws  exception  {  assert that (  resolver utils . extract zone from host name ( ""us - east - 1c . myservice . net"" )  is ( equal to ( ""us - east - 1c"" )  )  )  ;  assert that (  resolver utils . extract zone from host name (",255,6,extract,2,"[81, 226]"
3823,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\ResolverUtilsTest.java,test extract zone from host name,"@ test public void   (  )  throws  exception  {  assert that (  resolver utils . extract zone from host name ( ""us - east - 1c . myservice . net"" )  is ( equal to ( ""us - east - 1c"" )  )  )  ;  assert that (  resolver utils . extract zone from host name (",255,6,zone,3,"[89, 234]"
3824,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\ResolverUtilsTest.java,test extract zone from host name,"@ test public void   (  )  throws  exception  {  assert that (  resolver utils . extract zone from host name ( ""us - east - 1c . myservice . net"" )  is ( equal to ( ""us - east - 1c"" )  )  )  ;  assert that (  resolver utils . extract zone from host name (",255,6,from,4,"[94, 239]"
3825,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\ResolverUtilsTest.java,test extract zone from host name,"@ test public void   (  )  throws  exception  {  assert that (  resolver utils . extract zone from host name ( ""us - east - 1c . myservice . net"" )  is ( equal to ( ""us - east - 1c"" )  )  )  ;  assert that (  resolver utils . extract zone from host name (",255,6,host,5,"[99, 244]"
3826,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\ResolverUtilsTest.java,test extract zone from host name,"@ test public void   (  )  throws  exception  {  assert that (  resolver utils . extract zone from host name ( ""us - east - 1c . myservice . net"" )  is ( equal to ( ""us - east - 1c"" )  )  )  ;  assert that (  resolver utils . extract zone from host name (",255,6,name,6,"[104, 249]"
3827,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\ResolverUtilsTest.java,test identical,@ test public void   (  )  throws  exception  {   list <  aws endpoint >  first list =  sample cluster .  us east1a . builder (  )  . with server pool ( 10 )  . build (  )  ;   list <  aws endpoint >  second list =  resolver utils . randomize ( first list,255,2,test,1,[2]
3828,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\ResolverUtilsTest.java,test identical,@ test public void   (  )  throws  exception  {   list <  aws endpoint >  first list =  sample cluster .  us east1a . builder (  )  . with server pool ( 10 )  . build (  )  ;   list <  aws endpoint >  second list =  resolver utils . randomize ( first list,255,2,identical,2,[]
3829,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\ResolverUtilsTest.java,test split by zone,@ test public void   (  )  throws  exception  {   list <  aws endpoint >  endpoints =  sample cluster . merge (  sample cluster .  us east1a  sample cluster .  us east1b  sample cluster .  us east1c )  ;   list <  aws endpoint > [] parts =  resolver utils,255,4,test,1,[2]
3830,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\ResolverUtilsTest.java,test split by zone,@ test public void   (  )  throws  exception  {   list <  aws endpoint >  endpoints =  sample cluster . merge (  sample cluster .  us east1a  sample cluster .  us east1b  sample cluster .  us east1c )  ;   list <  aws endpoint > [] parts =  resolver utils,255,4,split,2,[]
3831,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\ResolverUtilsTest.java,test split by zone,@ test public void   (  )  throws  exception  {   list <  aws endpoint >  endpoints =  sample cluster . merge (  sample cluster .  us east1a  sample cluster .  us east1b  sample cluster .  us east1c )  ;   list <  aws endpoint > [] parts =  resolver utils,255,4,by,3,[]
3832,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\ResolverUtilsTest.java,test split by zone,@ test public void   (  )  throws  exception  {   list <  aws endpoint >  endpoints =  sample cluster . merge (  sample cluster .  us east1a  sample cluster .  us east1b  sample cluster .  us east1c )  ;   list <  aws endpoint > [] parts =  resolver utils,255,4,zone,4,[]
3833,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\aws\ZoneAffinityClusterResolverTest.java,test anti affinity,@ test public void   (  )  throws  exception  {   list <  aws endpoint >  endpoints =  sample cluster . merge (  sample cluster .  us east1a  sample cluster .  us east1b )  ;   zone affinity cluster resolver resolver = new  zone affinity cluster resolver ,255,3,test,1,[2]
3834,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\aws\ZoneAffinityClusterResolverTest.java,test anti affinity,@ test public void   (  )  throws  exception  {   list <  aws endpoint >  endpoints =  sample cluster . merge (  sample cluster .  us east1a  sample cluster .  us east1b )  ;   zone affinity cluster resolver resolver = new  zone affinity cluster resolver ,255,3,anti,2,[]
3835,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\aws\ZoneAffinityClusterResolverTest.java,test anti affinity,@ test public void   (  )  throws  exception  {   list <  aws endpoint >  endpoints =  sample cluster . merge (  sample cluster .  us east1a  sample cluster .  us east1b )  ;   zone affinity cluster resolver resolver = new  zone affinity cluster resolver ,255,3,affinity,3,"[182, 229]"
3836,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\aws\ZoneAffinityClusterResolverTest.java,test application zone is first on the list,@ test public void   (  )  throws  exception  {   list <  aws endpoint >  endpoints =  sample cluster . merge (  sample cluster .  us east1a  sample cluster .  us east1b  sample cluster .  us east1c )  ;   zone affinity cluster resolver resolver = new  zo,255,8,test,1,[2]
3837,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\aws\ZoneAffinityClusterResolverTest.java,test application zone is first on the list,@ test public void   (  )  throws  exception  {   list <  aws endpoint >  endpoints =  sample cluster . merge (  sample cluster .  us east1a  sample cluster .  us east1b  sample cluster .  us east1c )  ;   zone affinity cluster resolver resolver = new  zo,255,8,application,2,[]
3838,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\aws\ZoneAffinityClusterResolverTest.java,test application zone is first on the list,@ test public void   (  )  throws  exception  {   list <  aws endpoint >  endpoints =  sample cluster . merge (  sample cluster .  us east1a  sample cluster .  us east1b  sample cluster .  us east1c )  ;   zone affinity cluster resolver resolver = new  zo,255,8,zone,3,[206]
3839,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\aws\ZoneAffinityClusterResolverTest.java,test application zone is first on the list,@ test public void   (  )  throws  exception  {   list <  aws endpoint >  endpoints =  sample cluster . merge (  sample cluster .  us east1a  sample cluster .  us east1b  sample cluster .  us east1c )  ;   zone affinity cluster resolver resolver = new  zo,255,8,is,4,[51]
3840,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\aws\ZoneAffinityClusterResolverTest.java,test application zone is first on the list,@ test public void   (  )  throws  exception  {   list <  aws endpoint >  endpoints =  sample cluster . merge (  sample cluster .  us east1a  sample cluster .  us east1b  sample cluster .  us east1c )  ;   zone affinity cluster resolver resolver = new  zo,255,8,first,5,[]
3841,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\aws\ZoneAffinityClusterResolverTest.java,test application zone is first on the list,@ test public void   (  )  throws  exception  {   list <  aws endpoint >  endpoints =  sample cluster . merge (  sample cluster .  us east1a  sample cluster .  us east1b  sample cluster .  us east1c )  ;   zone affinity cluster resolver resolver = new  zo,255,8,on,6,"[42, 207]"
3842,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\aws\ZoneAffinityClusterResolverTest.java,test application zone is first on the list,@ test public void   (  )  throws  exception  {   list <  aws endpoint >  endpoints =  sample cluster . merge (  sample cluster .  us east1a  sample cluster .  us east1b  sample cluster .  us east1c )  ;   zone affinity cluster resolver resolver = new  zo,255,8,the,7,[]
3843,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\aws\ZoneAffinityClusterResolverTest.java,test application zone is first on the list,@ test public void   (  )  throws  exception  {   list <  aws endpoint >  endpoints =  sample cluster . merge (  sample cluster .  us east1a  sample cluster .  us east1b  sample cluster .  us east1c )  ;   zone affinity cluster resolver resolver = new  zo,255,8,list,8,[50]
3844,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\aws\ZoneAffinityClusterResolverTest.java,test unrecognized zone is ignored,@ test public void   (  )  throws  exception  {   list <  aws endpoint >  endpoints =  sample cluster . merge (  sample cluster .  us east1a  sample cluster .  us east1b )  ;   zone affinity cluster resolver resolver = new  zone affinity cluster resolver ,255,5,test,1,[2]
3845,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\aws\ZoneAffinityClusterResolverTest.java,test unrecognized zone is ignored,@ test public void   (  )  throws  exception  {   list <  aws endpoint >  endpoints =  sample cluster . merge (  sample cluster .  us east1a  sample cluster .  us east1b )  ;   zone affinity cluster resolver resolver = new  zone affinity cluster resolver ,255,5,unrecognized,2,[]
3846,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\aws\ZoneAffinityClusterResolverTest.java,test unrecognized zone is ignored,@ test public void   (  )  throws  exception  {   list <  aws endpoint >  endpoints =  sample cluster . merge (  sample cluster .  us east1a  sample cluster .  us east1b )  ;   zone affinity cluster resolver resolver = new  zone affinity cluster resolver ,255,5,zone,3,"[177, 224]"
3847,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\aws\ZoneAffinityClusterResolverTest.java,test unrecognized zone is ignored,@ test public void   (  )  throws  exception  {   list <  aws endpoint >  endpoints =  sample cluster . merge (  sample cluster .  us east1a  sample cluster .  us east1b )  ;   zone affinity cluster resolver resolver = new  zone affinity cluster resolver ,255,5,is,4,[51]
3848,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\aws\ZoneAffinityClusterResolverTest.java,test unrecognized zone is ignored,@ test public void   (  )  throws  exception  {   list <  aws endpoint >  endpoints =  sample cluster . merge (  sample cluster .  us east1a  sample cluster .  us east1b )  ;   zone affinity cluster resolver resolver = new  zone affinity cluster resolver ,255,5,ignored,5,[]
3849,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\StaticClusterResolverTest.java,test cluster resolver fromurl,"@ test public void   (  )  throws  exception  {  verify equal (  static cluster resolver . fromurl ( ""regiona"" new url ( ""http: /  / eureka . test:8080 / eureka / v2 / apps"" )  )  new  default endpoint ( ""eureka . test"" 8080 false "" / eureka / v2 / apps"" ",255,4,test,1,"[2, 142, 214]"
3850,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\StaticClusterResolverTest.java,test cluster resolver fromurl,"@ test public void   (  )  throws  exception  {  verify equal (  static cluster resolver . fromurl ( ""regiona"" new url ( ""http: /  / eureka . test:8080 / eureka / v2 / apps"" )  )  new  default endpoint ( ""eureka . test"" 8080 false "" / eureka / v2 / apps"" ",255,4,cluster,2,[72]
3851,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\StaticClusterResolverTest.java,test cluster resolver fromurl,"@ test public void   (  )  throws  exception  {  verify equal (  static cluster resolver . fromurl ( ""regiona"" new url ( ""http: /  / eureka . test:8080 / eureka / v2 / apps"" )  )  new  default endpoint ( ""eureka . test"" 8080 false "" / eureka / v2 / apps"" ",255,4,resolver,3,[80]
3852,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\StaticClusterResolverTest.java,test cluster resolver fromurl,"@ test public void   (  )  throws  exception  {  verify equal (  static cluster resolver . fromurl ( ""regiona"" new url ( ""http: /  / eureka . test:8080 / eureka / v2 / apps"" )  )  new  default endpoint ( ""eureka . test"" 8080 false "" / eureka / v2 / apps"" ",255,4,fromurl,4,[91]
3853,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\StaticClusterResolverTest.java,verify equal,private static void   (  cluster resolver <  eureka endpoint >  actual  eureka endpoint expected )  {  assert that ( actual . get cluster endpoints (  )  . get ( 0 )  is ( equal to ( expected )  )  )  ;   }  ,208,2,verify,1,[]
3854,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\StaticClusterResolverTest.java,verify equal,private static void   (  cluster resolver <  eureka endpoint >  actual  eureka endpoint expected )  {  assert that ( actual . get cluster endpoints (  )  . get ( 0 )  is ( equal to ( expected )  )  )  ;   }  ,208,2,equal,2,[172]
3855,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\ReloadingClusterResolverTest.java,await update,"private static boolean   (  reloading cluster resolver <  aws endpoint >  resolver  list <  aws endpoint >  expected )  throws  exception  {  long deadline =  system . current time millis (  )   +  5 * 1000 ;  do  {   list <  aws endpoint >  current = resolver . get cluster endpoints (  )  ;  if  (  resolver utils . identical ( current expected )  )   {  return true ;   }   thread . sleep ( 1 )  ;   }  while  (  system . current time millis (  )   <  deadline )  ;  throw new  timeout exception ( "" endpoint list not reloaded on time"" )  ;   }  ",549,2,await,1,[]
3856,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\ReloadingClusterResolverTest.java,await update,"private static boolean   (  reloading cluster resolver <  aws endpoint >  resolver  list <  aws endpoint >  expected )  throws  exception  {  long deadline =  system . current time millis (  )   +  5 * 1000 ;  do  {   list <  aws endpoint >  current = resolver . get cluster endpoints (  )  ;  if  (  resolver utils . identical ( current expected )  )   {  return true ;   }   thread . sleep ( 1 )  ;   }  while  (  system . current time millis (  )   <  deadline )  ;  throw new  timeout exception ( "" endpoint list not reloaded on time"" )  ;   }  ",549,2,update,2,[]
3857,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\ReloadingClusterResolverTest.java,create cluster resolver,"@ override public  cluster resolver <  aws endpoint >    (  )  {  return new  static cluster resolver <  >  ( ""regiona"" current endpoints ref . get (  )  )  ;   }  ",164,3,create,1,[]
3858,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\ReloadingClusterResolverTest.java,create cluster resolver,"@ override public  cluster resolver <  aws endpoint >    (  )  {  return new  static cluster resolver <  >  ( ""regiona"" current endpoints ref . get (  )  )  ;   }  ",164,3,cluster,2,"[19, 85]"
3859,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\ReloadingClusterResolverTest.java,create cluster resolver,"@ override public  cluster resolver <  aws endpoint >    (  )  {  return new  static cluster resolver <  >  ( ""regiona"" current endpoints ref . get (  )  )  ;   }  ",164,3,resolver,3,"[27, 93]"
3860,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\ReloadingClusterResolverTest.java,set endpoints,void   (  list <  aws endpoint >  endpoints )  {  current endpoints ref . set ( endpoints )  ;   }  ,100,2,set,1,[74]
3861,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\ReloadingClusterResolverTest.java,set endpoints,void   (  list <  aws endpoint >  endpoints )  {  current endpoints ref . set ( endpoints )  ;   }  ,100,2,endpoints,2,"[34, 58, 80]"
3862,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\ReloadingClusterResolverTest.java,test data are reloaded periodically,@ test ( timeout = 30000 )  public void   (  )  throws  exception  {   list <  aws endpoint >  first endpoint list =  sample cluster .  us east1a . build (  )  ;  factory . set endpoints ( first endpoint list )  ;  resolver = new  reloading cluster resolv,255,5,test,1,[2]
3863,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\ReloadingClusterResolverTest.java,test data are reloaded periodically,@ test ( timeout = 30000 )  public void   (  )  throws  exception  {   list <  aws endpoint >  first endpoint list =  sample cluster .  us east1a . build (  )  ;  factory . set endpoints ( first endpoint list )  ;  resolver = new  reloading cluster resolv,255,5,data,2,[]
3864,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\ReloadingClusterResolverTest.java,test data are reloaded periodically,@ test ( timeout = 30000 )  public void   (  )  throws  exception  {   list <  aws endpoint >  first endpoint list =  sample cluster .  us east1a . build (  )  ;  factory . set endpoints ( first endpoint list )  ;  resolver = new  reloading cluster resolv,255,5,are,3,[]
3865,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\ReloadingClusterResolverTest.java,test data are reloaded periodically,@ test ( timeout = 30000 )  public void   (  )  throws  exception  {   list <  aws endpoint >  first endpoint list =  sample cluster .  us east1a . build (  )  ;  factory . set endpoints ( first endpoint list )  ;  resolver = new  reloading cluster resolv,255,5,reloaded,4,[]
3866,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\ReloadingClusterResolverTest.java,test data are reloaded periodically,@ test ( timeout = 30000 )  public void   (  )  throws  exception  {   list <  aws endpoint >  first endpoint list =  sample cluster .  us east1a . build (  )  ;  factory . set endpoints ( first endpoint list )  ;  resolver = new  reloading cluster resolv,255,5,periodically,5,[]
3867,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\ReloadingClusterResolverTest.java,test identical lists do not cause reload,@ test ( timeout = 30000 )  public void   (  )  throws  exception  {   list <  aws endpoint >  first endpoint list =  sample cluster .  us east1a . build (  )  ;  factory . set endpoints ( first endpoint list )  ;  resolver = new  reloading cluster resolv,255,7,test,1,[2]
3868,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\ReloadingClusterResolverTest.java,test identical lists do not cause reload,@ test ( timeout = 30000 )  public void   (  )  throws  exception  {   list <  aws endpoint >  first endpoint list =  sample cluster .  us east1a . build (  )  ;  factory . set endpoints ( first endpoint list )  ;  resolver = new  reloading cluster resolv,255,7,identical,2,[]
3869,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\ReloadingClusterResolverTest.java,test identical lists do not cause reload,@ test ( timeout = 30000 )  public void   (  )  throws  exception  {   list <  aws endpoint >  first endpoint list =  sample cluster .  us east1a . build (  )  ;  factory . set endpoints ( first endpoint list )  ;  resolver = new  reloading cluster resolv,255,7,lists,3,[]
3870,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\ReloadingClusterResolverTest.java,test identical lists do not cause reload,@ test ( timeout = 30000 )  public void   (  )  throws  exception  {   list <  aws endpoint >  first endpoint list =  sample cluster .  us east1a . build (  )  ;  factory . set endpoints ( first endpoint list )  ;  resolver = new  reloading cluster resolv,255,7,do,4,[]
3871,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\ReloadingClusterResolverTest.java,test identical lists do not cause reload,@ test ( timeout = 30000 )  public void   (  )  throws  exception  {   list <  aws endpoint >  first endpoint list =  sample cluster .  us east1a . build (  )  ;  factory . set endpoints ( first endpoint list )  ;  resolver = new  reloading cluster resolv,255,7,not,5,[]
3872,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\ReloadingClusterResolverTest.java,test identical lists do not cause reload,@ test ( timeout = 30000 )  public void   (  )  throws  exception  {   list <  aws endpoint >  first endpoint list =  sample cluster .  us east1a . build (  )  ;  factory . set endpoints ( first endpoint list )  ;  resolver = new  reloading cluster resolv,255,7,cause,6,[]
3873,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\ReloadingClusterResolverTest.java,test identical lists do not cause reload,@ test ( timeout = 30000 )  public void   (  )  throws  exception  {   list <  aws endpoint >  first endpoint list =  sample cluster .  us east1a . build (  )  ;  factory . set endpoints ( first endpoint list )  ;  resolver = new  reloading cluster resolv,255,7,reload,7,[231]
3874,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RedirectingEurekaHttpClientTest.java,setup redirect,"public void   (  )  {  when ( factory . new client (  matchers .  <  eureka endpoint > any vararg (  )  )  )  . then return ( source client redirected client )  ;  when ( source client . get applications (  )  )  . then return ( an eureka http response ( 302  applications . class )  . headers (  http headers . location ""http: /  / another . discovery . test / eureka / v2 / apps"" )  . build (  )  )  ;  when ( dns service . resolve ip ( ""another . discovery . test"" )  )  . then return ( ""192 . 168 . 0 . 1"" )  ;  when ( redirected client . get applications (  )  )  . then return ( an eureka http response ( 200 new  applications (  )  )  . type (  media type . application   json   type )  . build (  )  )  ;   }  ",718,2,setup,1,[]
3875,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RedirectingEurekaHttpClientTest.java,setup redirect,"public void   (  )  {  when ( factory . new client (  matchers .  <  eureka endpoint > any vararg (  )  )  )  . then return ( source client redirected client )  ;  when ( source client . get applications (  )  )  . then return ( an eureka http response ( 302  applications . class )  . headers (  http headers . location ""http: /  / another . discovery . test / eureka / v2 / apps"" )  . build (  )  )  ;  when ( dns service . resolve ip ( ""another . discovery . test"" )  )  . then return ( ""192 . 168 . 0 . 1"" )  ;  when ( redirected client . get applications (  )  )  . then return ( an eureka http response ( 200 new  applications (  )  )  . type (  media type . application   json   type )  . build (  )  )  ;   }  ",718,2,redirect,2,"[140, 523]"
3876,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RedirectingEurekaHttpClientTest.java,test non redirected requests are served by first client,@ test public void   (  )  throws  exception  {  when ( factory . new client (  matchers .  <  eureka endpoint > any vararg (  )  )  )  . then return ( source client )  ;  when ( source client . get applications (  )  )  . then return ( an eureka http res,255,9,test,1,[2]
3877,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RedirectingEurekaHttpClientTest.java,test non redirected requests are served by first client,@ test public void   (  )  throws  exception  {  when ( factory . new client (  matchers .  <  eureka endpoint > any vararg (  )  )  )  . then return ( source client )  ;  when ( source client . get applications (  )  )  . then return ( an eureka http res,255,9,non,2,[]
3878,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RedirectingEurekaHttpClientTest.java,test non redirected requests are served by first client,@ test public void   (  )  throws  exception  {  when ( factory . new client (  matchers .  <  eureka endpoint > any vararg (  )  )  )  . then return ( source client )  ;  when ( source client . get applications (  )  )  . then return ( an eureka http res,255,9,redirected,3,[]
3879,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RedirectingEurekaHttpClientTest.java,test non redirected requests are served by first client,@ test public void   (  )  throws  exception  {  when ( factory . new client (  matchers .  <  eureka endpoint > any vararg (  )  )  )  . then return ( source client )  ;  when ( source client . get applications (  )  )  . then return ( an eureka http res,255,9,requests,4,[]
3880,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RedirectingEurekaHttpClientTest.java,test non redirected requests are served by first client,@ test public void   (  )  throws  exception  {  when ( factory . new client (  matchers .  <  eureka endpoint > any vararg (  )  )  )  . then return ( source client )  ;  when ( source client . get applications (  )  )  . then return ( an eureka http res,255,9,are,5,[]
3881,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RedirectingEurekaHttpClientTest.java,test non redirected requests are served by first client,@ test public void   (  )  throws  exception  {  when ( factory . new client (  matchers .  <  eureka endpoint > any vararg (  )  )  )  . then return ( source client )  ;  when ( source client . get applications (  )  )  . then return ( an eureka http res,255,9,served,6,[]
3882,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RedirectingEurekaHttpClientTest.java,test non redirected requests are served by first client,@ test public void   (  )  throws  exception  {  when ( factory . new client (  matchers .  <  eureka endpoint > any vararg (  )  )  )  . then return ( source client )  ;  when ( source client . get applications (  )  )  . then return ( an eureka http res,255,9,by,7,[]
3883,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RedirectingEurekaHttpClientTest.java,test non redirected requests are served by first client,@ test public void   (  )  throws  exception  {  when ( factory . new client (  matchers .  <  eureka endpoint > any vararg (  )  )  )  . then return ( source client )  ;  when ( source client . get applications (  )  )  . then return ( an eureka http res,255,9,first,8,[]
3884,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RedirectingEurekaHttpClientTest.java,test non redirected requests are served by first client,@ test public void   (  )  throws  exception  {  when ( factory . new client (  matchers .  <  eureka endpoint > any vararg (  )  )  )  . then return ( source client )  ;  when ( source client . get applications (  )  )  . then return ( an eureka http res,255,9,client,9,"[70, 159, 186]"
3885,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RedirectingEurekaHttpClientTest.java,test on connection error pinned client is destroyed,@ test public void   (  )  throws  exception  {  setup redirect (  )  ;   redirecting eureka http client http client = new  redirecting eureka http client ( service   url factory dns service )  ;  http client . get applications (  )  ;  verify ( redirecte,255,8,test,1,[2]
3886,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RedirectingEurekaHttpClientTest.java,test on connection error pinned client is destroyed,@ test public void   (  )  throws  exception  {  setup redirect (  )  ;   redirecting eureka http client http client = new  redirecting eureka http client ( service   url factory dns service )  ;  http client . get applications (  )  ;  verify ( redirecte,255,8,on,2,"[42, 224]"
3887,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RedirectingEurekaHttpClientTest.java,test on connection error pinned client is destroyed,@ test public void   (  )  throws  exception  {  setup redirect (  )  ;   redirecting eureka http client http client = new  redirecting eureka http client ( service   url factory dns service )  ;  http client . get applications (  )  ;  verify ( redirecte,255,8,connection,3,[]
3888,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RedirectingEurekaHttpClientTest.java,test on connection error pinned client is destroyed,@ test public void   (  )  throws  exception  {  setup redirect (  )  ;   redirecting eureka http client http client = new  redirecting eureka http client ( service   url factory dns service )  ;  http client . get applications (  )  ;  verify ( redirecte,255,8,error,4,[]
3889,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RedirectingEurekaHttpClientTest.java,test on connection error pinned client is destroyed,@ test public void   (  )  throws  exception  {  setup redirect (  )  ;   redirecting eureka http client http client = new  redirecting eureka http client ( service   url factory dns service )  ;  http client . get applications (  )  ;  verify ( redirecte,255,8,pinned,5,[]
3890,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RedirectingEurekaHttpClientTest.java,test on connection error pinned client is destroyed,@ test public void   (  )  throws  exception  {  setup redirect (  )  ;   redirecting eureka http client http client = new  redirecting eureka http client ( service   url factory dns service )  ;  http client . get applications (  )  ;  verify ( redirecte,255,8,client,6,"[98, 110, 148, 202]"
3891,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RedirectingEurekaHttpClientTest.java,test on connection error pinned client is destroyed,@ test public void   (  )  throws  exception  {  setup redirect (  )  ;   redirecting eureka http client http client = new  redirecting eureka http client ( service   url factory dns service )  ;  http client . get applications (  )  ;  verify ( redirecte,255,8,is,7,[]
3892,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RedirectingEurekaHttpClientTest.java,test on connection error pinned client is destroyed,@ test public void   (  )  throws  exception  {  setup redirect (  )  ;   redirecting eureka http client http client = new  redirecting eureka http client ( service   url factory dns service )  ;  http client . get applications (  )  ;  verify ( redirecte,255,8,destroyed,8,[]
3893,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RedirectingEurekaHttpClientTest.java,test redirects are followed and client is pinned to the last server,@ test public void   (  )  throws  exception  {  setup redirect (  )  ;   redirecting eureka http client http client = new  redirecting eureka http client ( service   url factory dns service )  ;  http client . get applications (  )  ;  verify ( factory t,255,12,test,1,[2]
3894,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RedirectingEurekaHttpClientTest.java,test redirects are followed and client is pinned to the last server,@ test public void   (  )  throws  exception  {  setup redirect (  )  ;   redirecting eureka http client http client = new  redirecting eureka http client ( service   url factory dns service )  ;  http client . get applications (  )  ;  verify ( factory t,255,12,redirects,2,[]
3895,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RedirectingEurekaHttpClientTest.java,test redirects are followed and client is pinned to the last server,@ test public void   (  )  throws  exception  {  setup redirect (  )  ;   redirecting eureka http client http client = new  redirecting eureka http client ( service   url factory dns service )  ;  http client . get applications (  )  ;  verify ( factory t,255,12,are,3,[]
3896,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RedirectingEurekaHttpClientTest.java,test redirects are followed and client is pinned to the last server,@ test public void   (  )  throws  exception  {  setup redirect (  )  ;   redirecting eureka http client http client = new  redirecting eureka http client ( service   url factory dns service )  ;  http client . get applications (  )  ;  verify ( factory t,255,12,followed,4,[]
3897,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RedirectingEurekaHttpClientTest.java,test redirects are followed and client is pinned to the last server,@ test public void   (  )  throws  exception  {  setup redirect (  )  ;   redirecting eureka http client http client = new  redirecting eureka http client ( service   url factory dns service )  ;  http client . get applications (  )  ;  verify ( factory t,255,12,and,5,[]
3898,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RedirectingEurekaHttpClientTest.java,test redirects are followed and client is pinned to the last server,@ test public void   (  )  throws  exception  {  setup redirect (  )  ;   redirecting eureka http client http client = new  redirecting eureka http client ( service   url factory dns service )  ;  http client . get applications (  )  ;  verify ( factory t,255,12,client,6,"[98, 110, 148, 202]"
3899,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RedirectingEurekaHttpClientTest.java,test redirects are followed and client is pinned to the last server,@ test public void   (  )  throws  exception  {  setup redirect (  )  ;   redirecting eureka http client http client = new  redirecting eureka http client ( service   url factory dns service )  ;  http client . get applications (  )  ;  verify ( factory t,255,12,is,7,[]
3900,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RedirectingEurekaHttpClientTest.java,test redirects are followed and client is pinned to the last server,@ test public void   (  )  throws  exception  {  setup redirect (  )  ;   redirecting eureka http client http client = new  redirecting eureka http client ( service   url factory dns service )  ;  http client . get applications (  )  ;  verify ( factory t,255,12,pinned,8,[]
3901,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RedirectingEurekaHttpClientTest.java,test redirects are followed and client is pinned to the last server,@ test public void   (  )  throws  exception  {  setup redirect (  )  ;   redirecting eureka http client http client = new  redirecting eureka http client ( service   url factory dns service )  ;  http client . get applications (  )  ;  verify ( factory t,255,12,to,9,"[174, 249]"
3902,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RedirectingEurekaHttpClientTest.java,test redirects are followed and client is pinned to the last server,@ test public void   (  )  throws  exception  {  setup redirect (  )  ;   redirecting eureka http client http client = new  redirecting eureka http client ( service   url factory dns service )  ;  http client . get applications (  )  ;  verify ( factory t,255,12,the,10,[]
3903,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RedirectingEurekaHttpClientTest.java,test redirects are followed and client is pinned to the last server,@ test public void   (  )  throws  exception  {  setup redirect (  )  ;   redirecting eureka http client http client = new  redirecting eureka http client ( service   url factory dns service )  ;  http client . get applications (  )  ;  verify ( factory t,255,12,last,11,[]
3904,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RedirectingEurekaHttpClientTest.java,test redirects are followed and client is pinned to the last server,@ test public void   (  )  throws  exception  {  setup redirect (  )  ;   redirecting eureka http client http client = new  redirecting eureka http client ( service   url factory dns service )  ;  http client . get applications (  )  ;  verify ( factory t,255,12,server,12,[]
3905,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClientTest.java, request executor runner,  (  request executor <  void >  request executor )  {  this . request executor = request executor ;   }  ,106,3,request,1,"[5, 33, 63, 82]"
3906,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClientTest.java, request executor runner,  (  request executor <  void >  request executor )  {  this . request executor = request executor ;   }  ,106,3,executor,2,"[13, 41, 71, 90]"
3907,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClientTest.java, request executor runner,  (  request executor <  void >  request executor )  {  this . request executor = request executor ;   }  ,106,3,runner,3,[]
3908,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClientTest.java,await ready,"void   (  )  {  try  {  ready latch . await (  )  ;   }  catch  (   interrupted exception e )   {  throw new  illegal state exception ( ""never released"" )  ;   }   }  ",167,2,await,1,[38]
3909,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClientTest.java,await ready,"void   (  )  {  try  {  ready latch . await (  )  ;   }  catch  (   interrupted exception e )   {  throw new  illegal state exception ( ""never released"" )  ;   }   }  ",167,2,ready,2,[24]
3910,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClientTest.java,complete,void   (  )  {  complete latch . count down (  )  ;   }  ,57,1,complete,1,[16]
3911,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClientTest.java,execute,"@ override public  eureka http response <  void >    (  eureka http client delegate )  {  ready latch . count down (  )  ;  try  {  complete latch . await (  )  ;   }  catch  (   interrupted exception e )   {  throw new  illegal state exception ( ""never r",255,1,execute,1,[]
3912,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClientTest.java,execute with transport error expectation,"private void   (  )  {  try  {  retryable client . execute ( request executor )  ;  fail ( "" transport exception expected"" )  ;   }  catch  (   transport exception ignore )   {   }   }  ",186,5,execute,1,[51]
3913,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClientTest.java,execute with transport error expectation,"private void   (  )  {  try  {  retryable client . execute ( request executor )  ;  fail ( "" transport exception expected"" )  ;   }  catch  (   transport exception ignore )   {   }   }  ",186,5,with,2,[]
3914,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClientTest.java,execute with transport error expectation,"private void   (  )  {  try  {  retryable client . execute ( request executor )  ;  fail ( "" transport exception expected"" )  ;   }  catch  (   transport exception ignore )   {   }   }  ",186,5,transport,3,"[93, 144]"
3915,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClientTest.java,execute with transport error expectation,"private void   (  )  {  try  {  retryable client . execute ( request executor )  ;  fail ( "" transport exception expected"" )  ;   }  catch  (   transport exception ignore )   {   }   }  ",186,5,error,4,[]
3916,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClientTest.java,execute with transport error expectation,"private void   (  )  {  try  {  retryable client . execute ( request executor )  ;  fail ( "" transport exception expected"" )  ;   }  catch  (   transport exception ignore )   {   }   }  ",186,5,expectation,5,[]
3917,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClientTest.java,get request type,@ override public  request type   (  )  {  return test   request   type ;   }  ,79,3,get,1,[]
3918,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClientTest.java,get request type,@ override public  request type   (  )  {  return test   request   type ;   }  ,79,3,request,2,"[19, 57]"
3919,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClientTest.java,get request type,@ override public  request type   (  )  {  return test   request   type ;   }  ,79,3,type,3,"[27, 67]"
3920,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClientTest.java,run,@ override public void   (  )  {  retryable client . execute ( request executor )  ;   }  ,90,1,run,1,[]
3921,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClientTest.java,set up,"@ before public void   (  )  throws  exception  {  when ( transport config . get retryable client quarantine refresh percentage (  )  )  . then return ( 0 . 66 )  ;  retryable client = new  retryable eureka http client ( ""test"" transport config cluster re",255,2,set,1,[]
3922,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClientTest.java,set up,"@ before public void   (  )  throws  exception  {  when ( transport config . get retryable client quarantine refresh percentage (  )  )  . then return ( 0 . 66 )  ;  retryable client = new  retryable eureka http client ( ""test"" transport config cluster re",255,2,up,2,[]
3923,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClientTest.java,simulate transport error,"private void   ( int delegate from int count )  {  for  ( int i = 0 ;  i  <  count ;  i +  +  )   {  int delegate id = delegate from  +  i ;  when ( client factory . new client (  matchers .  <  eureka endpoint > any vararg (  )  )  )  . then return ( cluster delegates . get ( delegate id )  )  ;  when ( request executor . execute ( cluster delegates . get ( delegate id )  )  )  . then throw ( new  transport exception ( ""simulated network error"" )  )  ;   }   }  ",467,3,simulate,1,[425]
3924,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClientTest.java,simulate transport error,"private void   ( int delegate from int count )  {  for  ( int i = 0 ;  i  <  count ;  i +  +  )   {  int delegate id = delegate from  +  i ;  when ( client factory . new client (  matchers .  <  eureka endpoint > any vararg (  )  )  )  . then return ( cluster delegates . get ( delegate id )  )  ;  when ( request executor . execute ( cluster delegates . get ( delegate id )  )  )  . then throw ( new  transport exception ( ""simulated network error"" )  )  ;   }   }  ",467,3,transport,2,[402]
3925,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClientTest.java,simulate transport error,"private void   ( int delegate from int count )  {  for  ( int i = 0 ;  i  <  count ;  i +  +  )   {  int delegate id = delegate from  +  i ;  when ( client factory . new client (  matchers .  <  eureka endpoint > any vararg (  )  )  )  . then return ( cluster delegates . get ( delegate id )  )  ;  when ( request executor . execute ( cluster delegates . get ( delegate id )  )  )  . then throw ( new  transport exception ( ""simulated network error"" )  )  ;   }   }  ",467,3,error,3,[443]
3926,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClientTest.java,testxx status code results in request retry,@ test public void   (  )  throws  exception  {  when ( client factory . new client (  matchers .  <  eureka endpoint > any vararg (  )  )  )  . then return ( cluster delegates . get ( 0 )  cluster delegates . get ( 1 )  )  ;  when ( request executor . ex,255,7,testxx,1,[]
3927,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClientTest.java,testxx status code results in request retry,@ test public void   (  )  throws  exception  {  when ( client factory . new client (  matchers .  <  eureka endpoint > any vararg (  )  )  )  . then return ( cluster delegates . get ( 0 )  cluster delegates . get ( 1 )  )  ;  when ( request executor . ex,255,7,status,2,[]
3928,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClientTest.java,testxx status code results in request retry,@ test public void   (  )  throws  exception  {  when ( client factory . new client (  matchers .  <  eureka endpoint > any vararg (  )  )  )  . then return ( cluster delegates . get ( 0 )  cluster delegates . get ( 1 )  )  ;  when ( request executor . ex,255,7,code,3,[]
3929,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClientTest.java,testxx status code results in request retry,@ test public void   (  )  throws  exception  {  when ( client factory . new client (  matchers .  <  eureka endpoint > any vararg (  )  )  )  . then return ( cluster delegates . get ( 0 )  cluster delegates . get ( 1 )  )  ;  when ( request executor . ex,255,7,results,4,[]
3930,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClientTest.java,testxx status code results in request retry,@ test public void   (  )  throws  exception  {  when ( client factory . new client (  matchers .  <  eureka endpoint > any vararg (  )  )  )  . then return ( cluster delegates . get ( 0 )  cluster delegates . get ( 1 )  )  ;  when ( request executor . ex,255,7,in,5,[114]
3931,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClientTest.java,testxx status code results in request retry,@ test public void   (  )  throws  exception  {  when ( client factory . new client (  matchers .  <  eureka endpoint > any vararg (  )  )  )  . then return ( cluster delegates . get ( 0 )  cluster delegates . get ( 1 )  )  ;  when ( request executor . ex,255,7,request,6,[234]
3932,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClientTest.java,testxx status code results in request retry,@ test public void   (  )  throws  exception  {  when ( client factory . new client (  matchers .  <  eureka endpoint > any vararg (  )  )  )  . then return ( cluster delegates . get ( 0 )  cluster delegates . get ( 1 )  )  ;  when ( request executor . ex,255,7,retry,7,[]
3933,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClientTest.java,test concurrent requests leave last successful delegate,@ test ( timeout = 10000 )  public void   (  )  throws  exception  {  when ( client factory . new client (  matchers .  <  eureka endpoint > any vararg (  )  )  )  . then return ( cluster delegates . get ( 0 )  cluster delegates . get ( 1 )  )  ;   blocki,255,7,test,1,[2]
3934,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClientTest.java,test concurrent requests leave last successful delegate,@ test ( timeout = 10000 )  public void   (  )  throws  exception  {  when ( client factory . new client (  matchers .  <  eureka endpoint > any vararg (  )  )  )  . then return ( cluster delegates . get ( 0 )  cluster delegates . get ( 1 )  )  ;   blocki,255,7,concurrent,2,[]
3935,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClientTest.java,test concurrent requests leave last successful delegate,@ test ( timeout = 10000 )  public void   (  )  throws  exception  {  when ( client factory . new client (  matchers .  <  eureka endpoint > any vararg (  )  )  )  . then return ( cluster delegates . get ( 0 )  cluster delegates . get ( 1 )  )  ;   blocki,255,7,requests,3,[]
3936,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClientTest.java,test concurrent requests leave last successful delegate,@ test ( timeout = 10000 )  public void   (  )  throws  exception  {  when ( client factory . new client (  matchers .  <  eureka endpoint > any vararg (  )  )  )  . then return ( cluster delegates . get ( 0 )  cluster delegates . get ( 1 )  )  ;   blocki,255,7,leave,4,[]
3937,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClientTest.java,test concurrent requests leave last successful delegate,@ test ( timeout = 10000 )  public void   (  )  throws  exception  {  when ( client factory . new client (  matchers .  <  eureka endpoint > any vararg (  )  )  )  . then return ( cluster delegates . get ( 0 )  cluster delegates . get ( 1 )  )  ;   blocki,255,7,last,5,[]
3938,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClientTest.java,test concurrent requests leave last successful delegate,@ test ( timeout = 10000 )  public void   (  )  throws  exception  {  when ( client factory . new client (  matchers .  <  eureka endpoint > any vararg (  )  )  )  . then return ( cluster delegates . get ( 0 )  cluster delegates . get ( 1 )  )  ;   blocki,255,7,successful,6,[]
3939,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClientTest.java,test concurrent requests leave last successful delegate,@ test ( timeout = 10000 )  public void   (  )  throws  exception  {  when ( client factory . new client (  matchers .  <  eureka endpoint > any vararg (  )  )  )  . then return ( cluster delegates . get ( 0 )  cluster delegates . get ( 1 )  )  ;   blocki,255,7,delegate,7,"[188, 219]"
3940,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClientTest.java,test error response is returned if retry limit is reached,@ test ( expected =  transport exception . class )  public void   (  )  throws  exception  {  simulate transport error ( 0 number   of   retries  +  1 )  ;  retryable client . execute ( request executor )  ;   }  ,213,10,test,1,[2]
3941,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClientTest.java,test error response is returned if retry limit is reached,@ test ( expected =  transport exception . class )  public void   (  )  throws  exception  {  simulate transport error ( 0 number   of   retries  +  1 )  ;  retryable client . execute ( request executor )  ;   }  ,213,10,error,2,[113]
3942,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClientTest.java,test error response is returned if retry limit is reached,@ test ( expected =  transport exception . class )  public void   (  )  throws  exception  {  simulate transport error ( 0 number   of   retries  +  1 )  ;  retryable client . execute ( request executor )  ;   }  ,213,10,response,3,[]
3943,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClientTest.java,test error response is returned if retry limit is reached,@ test ( expected =  transport exception . class )  public void   (  )  throws  exception  {  simulate transport error ( 0 number   of   retries  +  1 )  ;  retryable client . execute ( request executor )  ;   }  ,213,10,is,4,[]
3944,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClientTest.java,test error response is returned if retry limit is reached,@ test ( expected =  transport exception . class )  public void   (  )  throws  exception  {  simulate transport error ( 0 number   of   retries  +  1 )  ;  retryable client . execute ( request executor )  ;   }  ,213,10,returned,5,[]
3945,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClientTest.java,test error response is returned if retry limit is reached,@ test ( expected =  transport exception . class )  public void   (  )  throws  exception  {  simulate transport error ( 0 number   of   retries  +  1 )  ;  retryable client . execute ( request executor )  ;   }  ,213,10,if,6,[]
3946,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClientTest.java,test error response is returned if retry limit is reached,@ test ( expected =  transport exception . class )  public void   (  )  throws  exception  {  simulate transport error ( 0 number   of   retries  +  1 )  ;  retryable client . execute ( request executor )  ;   }  ,213,10,retry,7,[157]
3947,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClientTest.java,test error response is returned if retry limit is reached,@ test ( expected =  transport exception . class )  public void   (  )  throws  exception  {  simulate transport error ( 0 number   of   retries  +  1 )  ;  retryable client . execute ( request executor )  ;   }  ,213,10,limit,8,[]
3948,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClientTest.java,test error response is returned if retry limit is reached,@ test ( expected =  transport exception . class )  public void   (  )  throws  exception  {  simulate transport error ( 0 number   of   retries  +  1 )  ;  retryable client . execute ( request executor )  ;   }  ,213,10,is,9,[]
3949,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClientTest.java,test error response is returned if retry limit is reached,@ test ( expected =  transport exception . class )  public void   (  )  throws  exception  {  simulate transport error ( 0 number   of   retries  +  1 )  ;  retryable client . execute ( request executor )  ;   }  ,213,10,reached,10,[]
3950,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClientTest.java,test quarantine list is reset when no more server are available,@ test public void   (  )  throws  exception  {  simulate transport error ( 0 cluster   size )  ;  for  ( int i = 0 ;  i  <  2 ;  i +  +  )   {  execute with transport error expectation (  )  ;   }  when ( client factory . new client (  matchers .  <  eur,255,11,test,1,[2]
3951,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClientTest.java,test quarantine list is reset when no more server are available,@ test public void   (  )  throws  exception  {  simulate transport error ( 0 cluster   size )  ;  for  ( int i = 0 ;  i  <  2 ;  i +  +  )   {  execute with transport error expectation (  )  ;   }  when ( client factory . new client (  matchers .  <  eur,255,11,quarantine,2,[]
3952,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClientTest.java,test quarantine list is reset when no more server are available,@ test public void   (  )  throws  exception  {  simulate transport error ( 0 cluster   size )  ;  for  ( int i = 0 ;  i  <  2 ;  i +  +  )   {  execute with transport error expectation (  )  ;   }  when ( client factory . new client (  matchers .  <  eur,255,11,list,3,[]
3953,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClientTest.java,test quarantine list is reset when no more server are available,@ test public void   (  )  throws  exception  {  simulate transport error ( 0 cluster   size )  ;  for  ( int i = 0 ;  i  <  2 ;  i +  +  )   {  execute with transport error expectation (  )  ;   }  when ( client factory . new client (  matchers .  <  eur,255,11,is,4,[]
3954,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClientTest.java,test quarantine list is reset when no more server are available,@ test public void   (  )  throws  exception  {  simulate transport error ( 0 cluster   size )  ;  for  ( int i = 0 ;  i  <  2 ;  i +  +  )   {  execute with transport error expectation (  )  ;   }  when ( client factory . new client (  matchers .  <  eur,255,11,reset,5,[]
3955,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClientTest.java,test quarantine list is reset when no more server are available,@ test public void   (  )  throws  exception  {  simulate transport error ( 0 cluster   size )  ;  for  ( int i = 0 ;  i  <  2 ;  i +  +  )   {  execute with transport error expectation (  )  ;   }  when ( client factory . new client (  matchers .  <  eur,255,11,when,6,[199]
3956,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClientTest.java,test quarantine list is reset when no more server are available,@ test public void   (  )  throws  exception  {  simulate transport error ( 0 cluster   size )  ;  for  ( int i = 0 ;  i  <  2 ;  i +  +  )   {  execute with transport error expectation (  )  ;   }  when ( client factory . new client (  matchers .  <  eur,255,11,no,7,[]
3957,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClientTest.java,test quarantine list is reset when no more server are available,@ test public void   (  )  throws  exception  {  simulate transport error ( 0 cluster   size )  ;  for  ( int i = 0 ;  i  <  2 ;  i +  +  )   {  execute with transport error expectation (  )  ;   }  when ( client factory . new client (  matchers .  <  eur,255,11,more,8,[]
3958,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClientTest.java,test quarantine list is reset when no more server are available,@ test public void   (  )  throws  exception  {  simulate transport error ( 0 cluster   size )  ;  for  ( int i = 0 ;  i  <  2 ;  i +  +  )   {  execute with transport error expectation (  )  ;   }  when ( client factory . new client (  matchers .  <  eur,255,11,server,9,[]
3959,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClientTest.java,test quarantine list is reset when no more server are available,@ test public void   (  )  throws  exception  {  simulate transport error ( 0 cluster   size )  ;  for  ( int i = 0 ;  i  <  2 ;  i +  +  )   {  execute with transport error expectation (  )  ;   }  when ( client factory . new client (  matchers .  <  eur,255,11,are,10,[]
3960,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClientTest.java,test quarantine list is reset when no more server are available,@ test public void   (  )  throws  exception  {  simulate transport error ( 0 cluster   size )  ;  for  ( int i = 0 ;  i  <  2 ;  i +  +  )   {  execute with transport error expectation (  )  ;   }  when ( client factory . new client (  matchers .  <  eur,255,11,available,11,[]
3961,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClientTest.java,test request is retried on connection error,@ test public void   (  )  throws  exception  {  when ( client factory . new client (  matchers .  <  eureka endpoint > any vararg (  )  )  )  . then return ( cluster delegates . get ( 0 )  cluster delegates . get ( 1 )  )  ;  when ( request executor . ex,255,7,test,1,[2]
3962,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClientTest.java,test request is retried on connection error,@ test public void   (  )  throws  exception  {  when ( client factory . new client (  matchers .  <  eureka endpoint > any vararg (  )  )  )  . then return ( cluster delegates . get ( 0 )  cluster delegates . get ( 1 )  )  ;  when ( request executor . ex,255,7,request,2,[234]
3963,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClientTest.java,test request is retried on connection error,@ test public void   (  )  throws  exception  {  when ( client factory . new client (  matchers .  <  eureka endpoint > any vararg (  )  )  )  . then return ( cluster delegates . get ( 0 )  cluster delegates . get ( 1 )  )  ;  when ( request executor . ex,255,7,is,3,[]
3964,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClientTest.java,test request is retried on connection error,@ test public void   (  )  throws  exception  {  when ( client factory . new client (  matchers .  <  eureka endpoint > any vararg (  )  )  )  . then return ( cluster delegates . get ( 0 )  cluster delegates . get ( 1 )  )  ;  when ( request executor . ex,255,7,retried,4,[]
3965,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClientTest.java,test request is retried on connection error,@ test public void   (  )  throws  exception  {  when ( client factory . new client (  matchers .  <  eureka endpoint > any vararg (  )  )  )  . then return ( cluster delegates . get ( 0 )  cluster delegates . get ( 1 )  )  ;  when ( request executor . ex,255,7,on,5,[42]
3966,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClientTest.java,test request is retried on connection error,@ test public void   (  )  throws  exception  {  when ( client factory . new client (  matchers .  <  eureka endpoint > any vararg (  )  )  )  . then return ( cluster delegates . get ( 0 )  cluster delegates . get ( 1 )  )  ;  when ( request executor . ex,255,7,connection,6,[]
3967,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClientTest.java,test request is retried on connection error,@ test public void   (  )  throws  exception  {  when ( client factory . new client (  matchers .  <  eureka endpoint > any vararg (  )  )  )  . then return ( cluster delegates . get ( 0 )  cluster delegates . get ( 1 )  )  ;  when ( request executor . ex,255,7,error,7,[]
3968,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClientTest.java,test requests reuse same connection if there is no error,@ test public void   (  )  throws  exception  {  when ( client factory . new client (  matchers .  <  eureka endpoint > any vararg (  )  )  )  . then return ( cluster delegates . get ( 0 )  )  ;  when ( request executor . execute ( cluster delegates . get,255,10,test,1,[2]
3969,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClientTest.java,test requests reuse same connection if there is no error,@ test public void   (  )  throws  exception  {  when ( client factory . new client (  matchers .  <  eureka endpoint > any vararg (  )  )  )  . then return ( cluster delegates . get ( 0 )  )  ;  when ( request executor . execute ( cluster delegates . get,255,10,requests,2,[]
3970,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClientTest.java,test requests reuse same connection if there is no error,@ test public void   (  )  throws  exception  {  when ( client factory . new client (  matchers .  <  eureka endpoint > any vararg (  )  )  )  . then return ( cluster delegates . get ( 0 )  )  ;  when ( request executor . execute ( cluster delegates . get,255,10,reuse,3,[]
3971,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClientTest.java,test requests reuse same connection if there is no error,@ test public void   (  )  throws  exception  {  when ( client factory . new client (  matchers .  <  eureka endpoint > any vararg (  )  )  )  . then return ( cluster delegates . get ( 0 )  )  ;  when ( request executor . execute ( cluster delegates . get,255,10,same,4,[]
3972,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClientTest.java,test requests reuse same connection if there is no error,@ test public void   (  )  throws  exception  {  when ( client factory . new client (  matchers .  <  eureka endpoint > any vararg (  )  )  )  . then return ( cluster delegates . get ( 0 )  )  ;  when ( request executor . execute ( cluster delegates . get,255,10,connection,5,[]
3973,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClientTest.java,test requests reuse same connection if there is no error,@ test public void   (  )  throws  exception  {  when ( client factory . new client (  matchers .  <  eureka endpoint > any vararg (  )  )  )  . then return ( cluster delegates . get ( 0 )  )  ;  when ( request executor . execute ( cluster delegates . get,255,10,if,6,[]
3974,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClientTest.java,test requests reuse same connection if there is no error,@ test public void   (  )  throws  exception  {  when ( client factory . new client (  matchers .  <  eureka endpoint > any vararg (  )  )  )  . then return ( cluster delegates . get ( 0 )  )  ;  when ( request executor . execute ( cluster delegates . get,255,10,there,7,[]
3975,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClientTest.java,test requests reuse same connection if there is no error,@ test public void   (  )  throws  exception  {  when ( client factory . new client (  matchers .  <  eureka endpoint > any vararg (  )  )  )  . then return ( cluster delegates . get ( 0 )  )  ;  when ( request executor . execute ( cluster delegates . get,255,10,is,8,[]
3976,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClientTest.java,test requests reuse same connection if there is no error,@ test public void   (  )  throws  exception  {  when ( client factory . new client (  matchers .  <  eureka endpoint > any vararg (  )  )  )  . then return ( cluster delegates . get ( 0 )  )  ;  when ( request executor . execute ( cluster delegates . get,255,10,no,9,[]
3977,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClientTest.java,test requests reuse same connection if there is no error,@ test public void   (  )  throws  exception  {  when ( client factory . new client (  matchers .  <  eureka endpoint > any vararg (  )  )  )  . then return ( cluster delegates . get ( 0 )  )  ;  when ( request executor . execute ( cluster delegates . get,255,10,error,10,[]
3978,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\EurekaHttpClientsTest.java,await,public boolean   ( long timeout  time unit unit )  throws  exception  {  return latch . await ( timeout unit )  ;   }  ,119,1,await,1,[88]
3979,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\TimedSupervisorTaskTest.java, test task,public   ( int run time secs boolean block interrupt )  {  this . run time secs = run time secs ;  this . block interrupt = block interrupt ;   }  ,147,2,test,1,[]
3980,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\TimedSupervisorTaskTest.java, test task,public   ( int run time secs boolean block interrupt )  {  this . run time secs = run time secs ;  this . block interrupt = block interrupt ;   }  ,147,2,task,2,[]
3981,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\TimedSupervisorTaskTest.java,run,public void   (  )  {  test task start counter . increment and get (  )  ;  try  {  test task counter . increment and get (  )  ;  synchronized  ( max concurrent test tasks )   {  int active count = executor . get active count (  )  ;  if  ( max concurrent test tasks . get (  )   <  active count )   {  max concurrent test tasks . set ( active count )  ;   }   }  long end time =  system . current time millis (  )   +  run time secs * 1000 ;  while  ( end time  >  =   system . current time millis (  )  )   {  try  {   thread . sleep ( run time secs * 1000 )  ;   }  catch  (   interrupted exception e )   {  if  (  ! block interrupt )   {  throw e ;   }   }   }  test task counter . decrement and get (  )  ;  test task successful counter . increment and get (  )  ;   }  catch  (   interrupted exception e )   {  test task interrupted counter . increment and get (  )  ;   }   }  ,885,1,run,1,"[421, 539]"
3982,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\TimedSupervisorTaskTest.java,set up,"@ before public void   (  )  {  scheduler =  executors . new scheduled thread pool ( 4 new  thread factory builder (  )  . set name format ( "" discovery client - %d"" )  . set daemon ( true )  . build (  )  )  ;  helper executor =  more executors . listeni",255,2,set,1,"[123, 171]"
3983,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\TimedSupervisorTaskTest.java,set up,"@ before public void   (  )  {  scheduler =  executors . new scheduled thread pool ( 4 new  thread factory builder (  )  . set name format ( "" discovery client - %d"" )  . set daemon ( true )  . build (  )  )  ;  helper executor =  more executors . listeni",255,2,up,2,[]
3984,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\TimedSupervisorTaskTest.java,tear down,@ after public void   (  )  {  if  ( executor  !  =  null )   {  executor . shutdown now (  )  ;   }  if  ( helper executor  !  =  null )   {  helper executor . shutdown now (  )  ;   }  if  ( scheduler  !  =  null )   {  scheduler . shutdown now (  )  ; ,255,2,tear,1,[]
3985,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\TimedSupervisorTaskTest.java,tear down,@ after public void   (  )  {  if  ( executor  !  =  null )   {  executor . shutdown now (  )  ;   }  if  ( helper executor  !  =  null )   {  helper executor . shutdown now (  )  ;   }  if  ( scheduler  !  =  null )   {  scheduler . shutdown now (  )  ; ,255,2,down,2,"[80, 165, 238]"
3986,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\TimedSupervisorTaskTest.java,test supervisor reject new tasks if thread pool is full for incomplete tasks,"@ test public void   (  )  throws  exception  {   test task test task = new  test task ( 4 true )  ;   timed supervisor task supervisor task = new  timed supervisor task ( ""test"" scheduler executor 1  time unit . milliseconds exp   back   off   bound test",255,13,test,1,"[2, 50, 60, 77, 173, 251]"
3987,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\TimedSupervisorTaskTest.java,test supervisor reject new tasks if thread pool is full for incomplete tasks,"@ test public void   (  )  throws  exception  {   test task test task = new  test task ( 4 true )  ;   timed supervisor task supervisor task = new  timed supervisor task ( ""test"" scheduler executor 1  time unit . milliseconds exp   back   off   bound test",255,13,supervisor,2,"[109, 125, 154]"
3988,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\TimedSupervisorTaskTest.java,test supervisor reject new tasks if thread pool is full for incomplete tasks,"@ test public void   (  )  throws  exception  {   test task test task = new  test task ( 4 true )  ;   timed supervisor task supervisor task = new  timed supervisor task ( ""test"" scheduler executor 1  time unit . milliseconds exp   back   off   bound test",255,13,reject,3,[]
3989,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\TimedSupervisorTaskTest.java,test supervisor reject new tasks if thread pool is full for incomplete tasks,"@ test public void   (  )  throws  exception  {   test task test task = new  test task ( 4 true )  ;   timed supervisor task supervisor task = new  timed supervisor task ( ""test"" scheduler executor 1  time unit . milliseconds exp   back   off   bound test",255,13,new,4,"[72, 143]"
3990,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\TimedSupervisorTaskTest.java,test supervisor reject new tasks if thread pool is full for incomplete tasks,"@ test public void   (  )  throws  exception  {   test task test task = new  test task ( 4 true )  ;   timed supervisor task supervisor task = new  timed supervisor task ( ""test"" scheduler executor 1  time unit . milliseconds exp   back   off   bound test",255,13,tasks,5,[]
3991,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\TimedSupervisorTaskTest.java,test supervisor reject new tasks if thread pool is full for incomplete tasks,"@ test public void   (  )  throws  exception  {   test task test task = new  test task ( 4 true )  ;   timed supervisor task supervisor task = new  timed supervisor task ( ""test"" scheduler executor 1  time unit . milliseconds exp   back   off   bound test",255,13,if,6,[]
3992,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\TimedSupervisorTaskTest.java,test supervisor reject new tasks if thread pool is full for incomplete tasks,"@ test public void   (  )  throws  exception  {   test task test task = new  test task ( 4 true )  ;   timed supervisor task supervisor task = new  timed supervisor task ( ""test"" scheduler executor 1  time unit . milliseconds exp   back   off   bound test",255,13,thread,7,[]
3993,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\TimedSupervisorTaskTest.java,test supervisor reject new tasks if thread pool is full for incomplete tasks,"@ test public void   (  )  throws  exception  {   test task test task = new  test task ( 4 true )  ;   timed supervisor task supervisor task = new  timed supervisor task ( ""test"" scheduler executor 1  time unit . milliseconds exp   back   off   bound test",255,13,pool,8,[]
3994,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\TimedSupervisorTaskTest.java,test supervisor reject new tasks if thread pool is full for incomplete tasks,"@ test public void   (  )  throws  exception  {   test task test task = new  test task ( 4 true )  ;   timed supervisor task supervisor task = new  timed supervisor task ( ""test"" scheduler executor 1  time unit . milliseconds exp   back   off   bound test",255,13,is,9,"[115, 131, 160, 217]"
3995,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\TimedSupervisorTaskTest.java,test supervisor reject new tasks if thread pool is full for incomplete tasks,"@ test public void   (  )  throws  exception  {   test task test task = new  test task ( 4 true )  ;   timed supervisor task supervisor task = new  timed supervisor task ( ""test"" scheduler executor 1  time unit . milliseconds exp   back   off   bound test",255,13,full,10,[]
3996,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\TimedSupervisorTaskTest.java,test supervisor reject new tasks if thread pool is full for incomplete tasks,"@ test public void   (  )  throws  exception  {   test task test task = new  test task ( 4 true )  ;   timed supervisor task supervisor task = new  timed supervisor task ( ""test"" scheduler executor 1  time unit . milliseconds exp   back   off   bound test",255,13,for,11,[]
3997,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\TimedSupervisorTaskTest.java,test supervisor reject new tasks if thread pool is full for incomplete tasks,"@ test public void   (  )  throws  exception  {   test task test task = new  test task ( 4 true )  ;   timed supervisor task supervisor task = new  timed supervisor task ( ""test"" scheduler executor 1  time unit . milliseconds exp   back   off   bound test",255,13,incomplete,12,[]
3998,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\TimedSupervisorTaskTest.java,test supervisor reject new tasks if thread pool is full for incomplete tasks,"@ test public void   (  )  throws  exception  {   test task test task = new  test task ( 4 true )  ;   timed supervisor task supervisor task = new  timed supervisor task ( ""test"" scheduler executor 1  time unit . milliseconds exp   back   off   bound test",255,13,tasks,13,[]
3999,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\TimedSupervisorTaskTest.java,test supervisor task as periodic scheduled job happy case,"@ test public void   (  )  throws  exception  {   test task test task = new  test task ( 1 false )  ;   timed supervisor task supervisor task = new  timed supervisor task ( ""test"" scheduler executor 4  time unit . seconds exp   back   off   bound test tas",255,9,test,1,"[2, 50, 60, 77, 174, 247]"
4000,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\TimedSupervisorTaskTest.java,test supervisor task as periodic scheduled job happy case,"@ test public void   (  )  throws  exception  {   test task test task = new  test task ( 1 false )  ;   timed supervisor task supervisor task = new  timed supervisor task ( ""test"" scheduler executor 4  time unit . seconds exp   back   off   bound test tas",255,9,supervisor,2,"[110, 126, 155]"
4001,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\TimedSupervisorTaskTest.java,test supervisor task as periodic scheduled job happy case,"@ test public void   (  )  throws  exception  {   test task test task = new  test task ( 1 false )  ;   timed supervisor task supervisor task = new  timed supervisor task ( ""test"" scheduler executor 4  time unit . seconds exp   back   off   bound test tas",255,9,task,3,"[55, 65, 82, 121, 137, 166]"
4002,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\TimedSupervisorTaskTest.java,test supervisor task as periodic scheduled job happy case,"@ test public void   (  )  throws  exception  {   test task test task = new  test task ( 1 false )  ;   timed supervisor task supervisor task = new  timed supervisor task ( ""test"" scheduler executor 4  time unit . seconds exp   back   off   bound test tas",255,9,as,4,"[56, 66, 83, 122, 138, 167, 253]"
4003,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\TimedSupervisorTaskTest.java,test supervisor task as periodic scheduled job happy case,"@ test public void   (  )  throws  exception  {   test task test task = new  test task ( 1 false )  ;   timed supervisor task supervisor task = new  timed supervisor task ( ""test"" scheduler executor 4  time unit . seconds exp   back   off   bound test tas",255,9,periodic,5,[]
4004,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\TimedSupervisorTaskTest.java,test supervisor task as periodic scheduled job happy case,"@ test public void   (  )  throws  exception  {   test task test task = new  test task ( 1 false )  ;   timed supervisor task supervisor task = new  timed supervisor task ( ""test"" scheduler executor 4  time unit . seconds exp   back   off   bound test tas",255,9,scheduled,6,[]
4005,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\TimedSupervisorTaskTest.java,test supervisor task as periodic scheduled job happy case,"@ test public void   (  )  throws  exception  {   test task test task = new  test task ( 1 false )  ;   timed supervisor task supervisor task = new  timed supervisor task ( ""test"" scheduler executor 4  time unit . seconds exp   back   off   bound test tas",255,9,job,7,[]
4006,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\TimedSupervisorTaskTest.java,test supervisor task as periodic scheduled job happy case,"@ test public void   (  )  throws  exception  {   test task test task = new  test task ( 1 false )  ;   timed supervisor task supervisor task = new  timed supervisor task ( ""test"" scheduler executor 4  time unit . seconds exp   back   off   bound test tas",255,9,happy,8,[]
4007,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\TimedSupervisorTaskTest.java,test supervisor task as periodic scheduled job happy case,"@ test public void   (  )  throws  exception  {   test task test task = new  test task ( 1 false )  ;   timed supervisor task supervisor task = new  timed supervisor task ( ""test"" scheduler executor 4  time unit . seconds exp   back   off   bound test tas",255,9,case,9,[]
4008,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\TimedSupervisorTaskTest.java,test supervisor task as periodic scheduled job test task timing out,"@ test public void   (  )  throws  exception  {   test task test task = new  test task ( 5 false )  ;   timed supervisor task supervisor task = new  timed supervisor task ( ""test"" scheduler executor 2  time unit . seconds exp   back   off   bound test tas",255,11,test,1,"[2, 50, 60, 77, 174, 247]"
4009,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\TimedSupervisorTaskTest.java,test supervisor task as periodic scheduled job test task timing out,"@ test public void   (  )  throws  exception  {   test task test task = new  test task ( 5 false )  ;   timed supervisor task supervisor task = new  timed supervisor task ( ""test"" scheduler executor 2  time unit . seconds exp   back   off   bound test tas",255,11,supervisor,2,"[110, 126, 155]"
4010,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\TimedSupervisorTaskTest.java,test supervisor task as periodic scheduled job test task timing out,"@ test public void   (  )  throws  exception  {   test task test task = new  test task ( 5 false )  ;   timed supervisor task supervisor task = new  timed supervisor task ( ""test"" scheduler executor 2  time unit . seconds exp   back   off   bound test tas",255,11,task,3,"[55, 65, 82, 121, 137, 166]"
4011,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\TimedSupervisorTaskTest.java,test supervisor task as periodic scheduled job test task timing out,"@ test public void   (  )  throws  exception  {   test task test task = new  test task ( 5 false )  ;   timed supervisor task supervisor task = new  timed supervisor task ( ""test"" scheduler executor 2  time unit . seconds exp   back   off   bound test tas",255,11,as,4,"[56, 66, 83, 122, 138, 167, 253]"
4012,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\TimedSupervisorTaskTest.java,test supervisor task as periodic scheduled job test task timing out,"@ test public void   (  )  throws  exception  {   test task test task = new  test task ( 5 false )  ;   timed supervisor task supervisor task = new  timed supervisor task ( ""test"" scheduler executor 2  time unit . seconds exp   back   off   bound test tas",255,11,periodic,5,[]
4013,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\TimedSupervisorTaskTest.java,test supervisor task as periodic scheduled job test task timing out,"@ test public void   (  )  throws  exception  {   test task test task = new  test task ( 5 false )  ;   timed supervisor task supervisor task = new  timed supervisor task ( ""test"" scheduler executor 2  time unit . seconds exp   back   off   bound test tas",255,11,scheduled,6,[]
4014,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\TimedSupervisorTaskTest.java,test supervisor task as periodic scheduled job test task timing out,"@ test public void   (  )  throws  exception  {   test task test task = new  test task ( 5 false )  ;   timed supervisor task supervisor task = new  timed supervisor task ( ""test"" scheduler executor 2  time unit . seconds exp   back   off   bound test tas",255,11,job,7,[]
4015,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\TimedSupervisorTaskTest.java,test supervisor task as periodic scheduled job test task timing out,"@ test public void   (  )  throws  exception  {   test task test task = new  test task ( 5 false )  ;   timed supervisor task supervisor task = new  timed supervisor task ( ""test"" scheduler executor 2  time unit . seconds exp   back   off   bound test tas",255,11,test,8,"[2, 50, 60, 77, 174, 247]"
4016,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\TimedSupervisorTaskTest.java,test supervisor task as periodic scheduled job test task timing out,"@ test public void   (  )  throws  exception  {   test task test task = new  test task ( 5 false )  ;   timed supervisor task supervisor task = new  timed supervisor task ( ""test"" scheduler executor 2  time unit . seconds exp   back   off   bound test tas",255,11,task,9,"[55, 65, 82, 121, 137, 166]"
4017,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\TimedSupervisorTaskTest.java,test supervisor task as periodic scheduled job test task timing out,"@ test public void   (  )  throws  exception  {   test task test task = new  test task ( 5 false )  ;   timed supervisor task supervisor task = new  timed supervisor task ( ""test"" scheduler executor 2  time unit . seconds exp   back   off   bound test tas",255,11,timing,10,[]
4018,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\TimedSupervisorTaskTest.java,test supervisor task as periodic scheduled job test task timing out,"@ test public void   (  )  throws  exception  {   test task test task = new  test task ( 5 false )  ;   timed supervisor task supervisor task = new  timed supervisor task ( ""test"" scheduler executor 2  time unit . seconds exp   back   off   bound test tas",255,11,out,11,[]
4019,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\TimedSupervisorTaskTest.java,test supervisor task cancels timed out task,"@ test public void   (  )  throws  exception  {   test task test task = new  test task ( 5 false )  ;   timed supervisor task supervisor task = new  timed supervisor task ( ""test"" scheduler executor 1  time unit . seconds exp   back   off   bound test tas",255,7,test,1,"[2, 50, 60, 77, 174, 247]"
4020,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\TimedSupervisorTaskTest.java,test supervisor task cancels timed out task,"@ test public void   (  )  throws  exception  {   test task test task = new  test task ( 5 false )  ;   timed supervisor task supervisor task = new  timed supervisor task ( ""test"" scheduler executor 1  time unit . seconds exp   back   off   bound test tas",255,7,supervisor,2,"[110, 126, 155]"
4021,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\TimedSupervisorTaskTest.java,test supervisor task cancels timed out task,"@ test public void   (  )  throws  exception  {   test task test task = new  test task ( 5 false )  ;   timed supervisor task supervisor task = new  timed supervisor task ( ""test"" scheduler executor 1  time unit . seconds exp   back   off   bound test tas",255,7,task,3,"[55, 65, 82, 121, 137, 166]"
4022,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\TimedSupervisorTaskTest.java,test supervisor task cancels timed out task,"@ test public void   (  )  throws  exception  {   test task test task = new  test task ( 5 false )  ;   timed supervisor task supervisor task = new  timed supervisor task ( ""test"" scheduler executor 1  time unit . seconds exp   back   off   bound test tas",255,7,cancels,4,[]
4023,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\TimedSupervisorTaskTest.java,test supervisor task cancels timed out task,"@ test public void   (  )  throws  exception  {   test task test task = new  test task ( 5 false )  ;   timed supervisor task supervisor task = new  timed supervisor task ( ""test"" scheduler executor 1  time unit . seconds exp   back   off   bound test tas",255,7,timed,5,"[104, 149]"
4024,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\TimedSupervisorTaskTest.java,test supervisor task cancels timed out task,"@ test public void   (  )  throws  exception  {   test task test task = new  test task ( 5 false )  ;   timed supervisor task supervisor task = new  timed supervisor task ( ""test"" scheduler executor 1  time unit . seconds exp   back   off   bound test tas",255,7,out,6,[]
4025,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\TimedSupervisorTaskTest.java,test supervisor task cancels timed out task,"@ test public void   (  )  throws  exception  {   test task test task = new  test task ( 5 false )  ;   timed supervisor task supervisor task = new  timed supervisor task ( ""test"" scheduler executor 1  time unit . seconds exp   back   off   bound test tas",255,7,task,7,"[55, 65, 82, 121, 137, 166]"
4026,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\TimedSupervisorTaskTest.java,test supervisor task default single test task happy case,"@ test public void   (  )  throws  exception  {   test task test task = new  test task ( 1 false )  ;   timed supervisor task supervisor task = new  timed supervisor task ( ""test"" scheduler executor 5  time unit . seconds exp   back   off   bound test tas",255,9,test,1,"[2, 50, 60, 77, 174, 247]"
4027,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\TimedSupervisorTaskTest.java,test supervisor task default single test task happy case,"@ test public void   (  )  throws  exception  {   test task test task = new  test task ( 1 false )  ;   timed supervisor task supervisor task = new  timed supervisor task ( ""test"" scheduler executor 5  time unit . seconds exp   back   off   bound test tas",255,9,supervisor,2,"[110, 126, 155]"
4028,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\TimedSupervisorTaskTest.java,test supervisor task default single test task happy case,"@ test public void   (  )  throws  exception  {   test task test task = new  test task ( 1 false )  ;   timed supervisor task supervisor task = new  timed supervisor task ( ""test"" scheduler executor 5  time unit . seconds exp   back   off   bound test tas",255,9,task,3,"[55, 65, 82, 121, 137, 166]"
4029,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\TimedSupervisorTaskTest.java,test supervisor task default single test task happy case,"@ test public void   (  )  throws  exception  {   test task test task = new  test task ( 1 false )  ;   timed supervisor task supervisor task = new  timed supervisor task ( ""test"" scheduler executor 5  time unit . seconds exp   back   off   bound test tas",255,9,default,4,[]
4030,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\TimedSupervisorTaskTest.java,test supervisor task default single test task happy case,"@ test public void   (  )  throws  exception  {   test task test task = new  test task ( 1 false )  ;   timed supervisor task supervisor task = new  timed supervisor task ( ""test"" scheduler executor 5  time unit . seconds exp   back   off   bound test tas",255,9,single,5,[]
4031,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\TimedSupervisorTaskTest.java,test supervisor task default single test task happy case,"@ test public void   (  )  throws  exception  {   test task test task = new  test task ( 1 false )  ;   timed supervisor task supervisor task = new  timed supervisor task ( ""test"" scheduler executor 5  time unit . seconds exp   back   off   bound test tas",255,9,test,6,"[2, 50, 60, 77, 174, 247]"
4032,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\TimedSupervisorTaskTest.java,test supervisor task default single test task happy case,"@ test public void   (  )  throws  exception  {   test task test task = new  test task ( 1 false )  ;   timed supervisor task supervisor task = new  timed supervisor task ( ""test"" scheduler executor 5  time unit . seconds exp   back   off   bound test tas",255,9,task,7,"[55, 65, 82, 121, 137, 166]"
4033,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\TimedSupervisorTaskTest.java,test supervisor task default single test task happy case,"@ test public void   (  )  throws  exception  {   test task test task = new  test task ( 1 false )  ;   timed supervisor task supervisor task = new  timed supervisor task ( ""test"" scheduler executor 5  time unit . seconds exp   back   off   bound test tas",255,9,happy,8,[]
4034,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\TimedSupervisorTaskTest.java,test supervisor task default single test task happy case,"@ test public void   (  )  throws  exception  {   test task test task = new  test task ( 1 false )  ;   timed supervisor task supervisor task = new  timed supervisor task ( ""test"" scheduler executor 5  time unit . seconds exp   back   off   bound test tas",255,9,case,9,[]
4035,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\EurekaHttpClientsTest.java,handle,@ override public  client response   (  client request cr )  throws  client handler exception  {  latch . count down (  )  ;  return mock (  client response . class )  ;   }  ,175,1,handle,1,[76]
4036,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\EurekaHttpClientsTest.java,set up,@ before public void   (  )  throws io exception  {  client config = mock (  eureka client config . class )  ;  transport config = mock (  eureka transport config . class )  ;  when ( client config . get eureka server total connections per host (  )  )  .,255,2,set,1,[]
4037,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\EurekaHttpClientsTest.java,set up,@ before public void   (  )  throws io exception  {  client config = mock (  eureka client config . class )  ;  transport config = mock (  eureka transport config . class )  ;  when ( client config . get eureka server total connections per host (  )  )  .,255,2,up,2,[]
4038,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\EurekaHttpClientsTest.java,tear down,@ after public void   (  )  throws  exception  {  if  ( write server  !  =  null )   {  write server . shutdown (  )  ;   }  if  ( read server  !  =  null )   {  read server . shutdown (  )  ;   }  if  ( client factory  !  =  null )   {  client factory . ,255,2,tear,1,[]
4039,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\EurekaHttpClientsTest.java,tear down,@ after public void   (  )  throws  exception  {  if  ( write server  !  =  null )   {  write server . shutdown (  )  ;   }  if  ( read server  !  =  null )   {  read server . shutdown (  )  ;   }  if  ( client factory  !  =  null )   {  client factory . ,255,2,down,2,"[107, 180]"
4040,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\EurekaHttpClientsTest.java,test adding additional filters,@ test public void   (  )  throws  exception  {   test filter test filter = new  test filter (  )  ;   collection <  client filter >  additional filters =  arrays .  <  client filter > as list ( test filter )  ;   transport client factory transport client,255,4,test,1,"[2, 50, 62, 81, 195]"
4041,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\EurekaHttpClientsTest.java,test adding additional filters,@ test public void   (  )  throws  exception  {   test filter test filter = new  test filter (  )  ;   collection <  client filter >  additional filters =  arrays .  <  client filter > as list ( test filter )  ;   transport client factory transport client,255,4,adding,2,[]
4042,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\EurekaHttpClientsTest.java,test adding additional filters,@ test public void   (  )  throws  exception  {   test filter test filter = new  test filter (  )  ;   collection <  client filter >  additional filters =  arrays .  <  client filter > as list ( test filter )  ;   transport client factory transport client,255,4,additional,3,[134]
4043,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\EurekaHttpClientsTest.java,test adding additional filters,@ test public void   (  )  throws  exception  {   test filter test filter = new  test filter (  )  ;   collection <  client filter >  additional filters =  arrays .  <  client filter > as list ( test filter )  ;   transport client factory transport client,255,4,filters,4,[145]
4044,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\EurekaHttpClientsTest.java,test canonical client,"@ test public void   (  )  throws  exception  {   applications apps = instance gen . to applications (  )  ;  when ( write request handler . get applications (  )  )  . then return ( an eureka http response ( 302  applications . class )  . headers ( "" loc",255,3,test,1,[2]
4045,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\EurekaHttpClientsTest.java,test canonical client,"@ test public void   (  )  throws  exception  {   applications apps = instance gen . to applications (  )  ;  when ( write request handler . get applications (  )  )  . then return ( an eureka http response ( 302  applications . class )  . headers ( "" loc",255,3,canonical,2,[]
4046,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\EurekaHttpClientsTest.java,test canonical client,"@ test public void   (  )  throws  exception  {   applications apps = instance gen . to applications (  )  ;  when ( write request handler . get applications (  )  )  . then return ( an eureka http response ( 302  applications . class )  . headers ( "" loc",255,3,client,3,[]
4047,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\EurekaHttpClientsTest.java,test canonical resolver,"@ test public void   (  )  throws  exception  {  when ( client config . get eureka serverurl context (  )  )  . then return ( ""context"" )  ;  when ( client config . get region (  )  )  . then return ( ""region"" )  ;  when ( transport config . get async exe",255,3,test,1,[2]
4048,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\EurekaHttpClientsTest.java,test canonical resolver,"@ test public void   (  )  throws  exception  {  when ( client config . get eureka serverurl context (  )  )  . then return ( ""context"" )  ;  when ( client config . get region (  )  )  . then return ( ""region"" )  ;  when ( transport config . get async exe",255,3,canonical,2,[]
4049,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\EurekaHttpClientsTest.java,test canonical resolver,"@ test public void   (  )  throws  exception  {  when ( client config . get eureka serverurl context (  )  )  . then return ( ""context"" )  ;  when ( client config . get region (  )  )  . then return ( ""region"" )  ;  when ( transport config . get async exe",255,3,resolver,3,[]
4050,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\EurekaHttpClientsTest.java,test composite bootstrap resolver,"@ test public void   (  )  throws  exception  {   applications applications =  instance info generator . new builder ( 5 ""eureka write"" ""some other"" )  . build (  )  . to applications (  )  ;   applications applications2 =  instance info generator . new b",255,4,test,1,[2]
4051,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\EurekaHttpClientsTest.java,test composite bootstrap resolver,"@ test public void   (  )  throws  exception  {   applications applications =  instance info generator . new builder ( 5 ""eureka write"" ""some other"" )  . build (  )  . to applications (  )  ;   applications applications2 =  instance info generator . new b",255,4,composite,2,[]
4052,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\EurekaHttpClientsTest.java,test composite bootstrap resolver,"@ test public void   (  )  throws  exception  {   applications applications =  instance info generator . new builder ( 5 ""eureka write"" ""some other"" )  . build (  )  . to applications (  )  ;   applications applications2 =  instance info generator . new b",255,4,bootstrap,3,[]
4053,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\EurekaHttpClientsTest.java,test composite bootstrap resolver,"@ test public void   (  )  throws  exception  {   applications applications =  instance info generator . new builder ( 5 ""eureka write"" ""some other"" )  . build (  )  . to applications (  )  ;   applications applications2 =  instance info generator . new b",255,4,resolver,4,[]
4054,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\jersey\JerseyApplicationClientTest.java,get eureka http client,"@ override protected  eureka http client   ( uri serviceuri )  {   preconditions . check state ( jersey http client  =  =  null "" eureka http client has been already created"" )  ;   transport client factory client factory =  jersey eureka http client fact",255,4,get,1,[]
4055,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\jersey\JerseyApplicationClientTest.java,get eureka http client,"@ override protected  eureka http client   ( uri serviceuri )  {   preconditions . check state ( jersey http client  =  =  null "" eureka http client has been already created"" )  ;   transport client factory client factory =  jersey eureka http client fact",255,4,eureka,2,"[22, 130, 232]"
4056,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\jersey\JerseyApplicationClientTest.java,get eureka http client,"@ override protected  eureka http client   ( uri serviceuri )  {   preconditions . check state ( jersey http client  =  =  null "" eureka http client has been already created"" )  ;   transport client factory client factory =  jersey eureka http client fact",255,4,http,3,"[29, 104, 137, 239]"
4057,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\jersey\JerseyApplicationClientTest.java,get eureka http client,"@ override protected  eureka http client   ( uri serviceuri )  {   preconditions . check state ( jersey http client  =  =  null "" eureka http client has been already created"" )  ;   transport client factory client factory =  jersey eureka http client fact",255,4,client,4,"[34, 109, 142, 192, 207, 244]"
4058,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\jersey\JerseyApplicationClientTest.java,tear down,@ override @ after public void   (  )  throws  exception  {  if  ( jersey http client  !  =  null )   {  jersey http client . shutdown (  )  ;   }  super . tear down (  )  ;   }  ,179,2,tear,1,[156]
4059,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\jersey\JerseyApplicationClientTest.java,tear down,@ override @ after public void   (  )  throws  exception  {  if  ( jersey http client  !  =  null )   {  jersey http client . shutdown (  )  ;   }  super . tear down (  )  ;   }  ,179,2,down,2,"[130, 161]"
4060,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\SessionedEurekaHttpClientTest.java,answer,@ override public  eureka http client   (  invocation on mock invocation )  throws  throwable  {  return client ref . get (  )  ;   }  ,135,1,answer,1,[]
4061,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\SessionedEurekaHttpClientTest.java,test reconnect is enforced at configured interval,@ test public void   (  )  throws  exception  {  final  atomic reference <  eureka http client >  client ref = new  atomic reference <  >  ( first client )  ;  when ( factory . new client (  )  )  . then answer ( new  answer <  eureka http client >  (  ) ,255,7,test,1,[2]
4062,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\SessionedEurekaHttpClientTest.java,test reconnect is enforced at configured interval,@ test public void   (  )  throws  exception  {  final  atomic reference <  eureka http client >  client ref = new  atomic reference <  >  ( first client )  ;  when ( factory . new client (  )  )  . then answer ( new  answer <  eureka http client >  (  ) ,255,7,reconnect,2,[]
4063,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\SessionedEurekaHttpClientTest.java,test reconnect is enforced at configured interval,@ test public void   (  )  throws  exception  {  final  atomic reference <  eureka http client >  client ref = new  atomic reference <  >  ( first client )  ;  when ( factory . new client (  )  )  . then answer ( new  answer <  eureka http client >  (  ) ,255,7,is,3,[]
4064,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\SessionedEurekaHttpClientTest.java,test reconnect is enforced at configured interval,@ test public void   (  )  throws  exception  {  final  atomic reference <  eureka http client >  client ref = new  atomic reference <  >  ( first client )  ;  when ( factory . new client (  )  )  . then answer ( new  answer <  eureka http client >  (  ) ,255,7,enforced,4,[]
4065,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\SessionedEurekaHttpClientTest.java,test reconnect is enforced at configured interval,@ test public void   (  )  throws  exception  {  final  atomic reference <  eureka http client >  client ref = new  atomic reference <  >  ( first client )  ;  when ( factory . new client (  )  )  . then answer ( new  answer <  eureka http client >  (  ) ,255,7,at,5,"[56, 116]"
4066,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\SessionedEurekaHttpClientTest.java,test reconnect is enforced at configured interval,@ test public void   (  )  throws  exception  {  final  atomic reference <  eureka http client >  client ref = new  atomic reference <  >  ( first client )  ;  when ( factory . new client (  )  )  . then answer ( new  answer <  eureka http client >  (  ) ,255,7,configured,6,[]
4067,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\SessionedEurekaHttpClientTest.java,test reconnect is enforced at configured interval,@ test public void   (  )  throws  exception  {  final  atomic reference <  eureka http client >  client ref = new  atomic reference <  >  ( first client )  ;  when ( factory . new client (  )  )  . then answer ( new  answer <  eureka http client >  (  ) ,255,7,interval,7,[]
4068,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\util\EurekaUtilsTest.java,get name,@ override public  name   (  )  {  return  name .  my own ;   }  ,65,2,get,1,[]
4069,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\util\EurekaUtilsTest.java,get name,@ override public  name   (  )  {  return  name .  my own ;   }  ,65,2,name,2,"[19, 43]"
4070,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\util\EurekaUtilsTest.java,test is in ec,@ test public void   (  )  {   instance info instance info1 = new  instance info .  builder (  instance info generator . take one (  )  )  . set data center info ( new  data center info (  )  {  @ override public  name get name (  )  {  return  name .  my,255,4,test,1,[2]
4071,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\util\EurekaUtilsTest.java,test is in ec,@ test public void   (  )  {   instance info instance info1 = new  instance info .  builder (  instance info generator . take one (  )  )  . set data center info ( new  data center info (  )  {  @ override public  name get name (  )  {  return  name .  my,255,4,is,2,[]
4072,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\util\EurekaUtilsTest.java,test is in ec,@ test public void   (  )  {   instance info instance info1 = new  instance info .  builder (  instance info generator . take one (  )  )  . set data center info ( new  data center info (  )  {  @ override public  name get name (  )  {  return  name .  my,255,4,in,3,"[31, 40, 45, 54, 67, 76, 95, 104, 157, 181]"
4073,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\util\EurekaUtilsTest.java,test is in ec,@ test public void   (  )  {   instance info instance info1 = new  instance info .  builder (  instance info generator . take one (  )  )  . set data center info ( new  data center info (  )  {  @ override public  name get name (  )  {  return  name .  my,255,4,ec,4,[]
4074,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\util\EurekaUtilsTest.java,test is in vpc,@ test public void   (  )  {   instance info instance info1 = new  instance info .  builder (  instance info generator . take one (  )  )  . set data center info ( new  data center info (  )  {  @ override public  name get name (  )  {  return  name .  my,255,4,test,1,[2]
4075,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\util\EurekaUtilsTest.java,test is in vpc,@ test public void   (  )  {   instance info instance info1 = new  instance info .  builder (  instance info generator . take one (  )  )  . set data center info ( new  data center info (  )  {  @ override public  name get name (  )  {  return  name .  my,255,4,is,2,[]
4076,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\util\EurekaUtilsTest.java,test is in vpc,@ test public void   (  )  {   instance info instance info1 = new  instance info .  builder (  instance info generator . take one (  )  )  . set data center info ( new  data center info (  )  {  @ override public  name get name (  )  {  return  name .  my,255,4,in,3,"[31, 40, 45, 54, 67, 76, 95, 104, 157, 181]"
4077,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\util\EurekaUtilsTest.java,test is in vpc,@ test public void   (  )  {   instance info instance info1 = new  instance info .  builder (  instance info generator . take one (  )  )  . set data center info ( new  data center info (  )  {  @ override public  name get name (  )  {  return  name .  my,255,4,vpc,4,[]
4078,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\util\RateLimiterTest.java,test bursts,private void   (  rate limiter rate limiter long start int burst size int average rate long step )  {  assert true ( rate limiter . acquire ( burst size average rate start )  )  ;  assert true ( rate limiter . acquire ( burst size average rate start )  )  ;  assert false ( rate limiter . acquire ( burst size average rate start )  )  ;  assert true ( rate limiter . acquire ( burst size average rate start  +  step  +  step  /  2 )  )  ;  assert false ( rate limiter . acquire ( burst size average rate start  +  step  +  step  /  2 )  )  ;  assert true ( rate limiter . acquire ( burst size average rate start  +  2 * step )  )  ;   }  ,638,2,test,1,[]
4079,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\util\RateLimiterTest.java,test bursts,private void   (  rate limiter rate limiter long start int burst size int average rate long step )  {  assert true ( rate limiter . acquire ( burst size average rate start )  )  ;  assert true ( rate limiter . acquire ( burst size average rate start )  )  ;  assert false ( rate limiter . acquire ( burst size average rate start )  )  ;  assert true ( rate limiter . acquire ( burst size average rate start  +  step  +  step  /  2 )  )  ;  assert false ( rate limiter . acquire ( burst size average rate start  +  step  +  step  /  2 )  )  ;  assert true ( rate limiter . acquire ( burst size average rate start  +  2 * step )  )  ;   }  ,638,2,bursts,2,[]
4080,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\util\RateLimiterTest.java,test even load,private void   (  rate limiter rate limiter long start int burst size int average rate long step )  {  for  ( long current time = start ;  current time  <  3 ;  current time +  = step )   {  assert true ( rate limiter . acquire ( burst size average rate current time )  )  ;   }   }  ,284,3,test,1,[]
4081,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\util\RateLimiterTest.java,test even load,private void   (  rate limiter rate limiter long start int burst size int average rate long step )  {  for  ( long current time = start ;  current time  <  3 ;  current time +  = step )   {  assert true ( rate limiter . acquire ( burst size average rate current time )  )  ;   }   }  ,284,3,even,2,[]
4082,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\util\RateLimiterTest.java,test even load,private void   (  rate limiter rate limiter long start int burst size int average rate long step )  {  for  ( long current time = start ;  current time  <  3 ;  current time +  = step )   {  assert true ( rate limiter . acquire ( burst size average rate current time )  )  ;   }   }  ,284,3,load,3,[]
4083,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\util\DiscoveryBuildInfoTest.java,test requested manifest is located and loaded,"@ test public void   (  )  throws  exception  {   discovery build info build info = new  discovery build info (  object mapper . class )  ;  assert that ( build info . get build version (  )  . contains ( ""version   unknown"" )  is ( false )  )  ;   }  ",252,7,test,1,[2]
4084,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\util\DiscoveryBuildInfoTest.java,test requested manifest is located and loaded,"@ test public void   (  )  throws  exception  {   discovery build info build info = new  discovery build info (  object mapper . class )  ;  assert that ( build info . get build version (  )  . contains ( ""version   unknown"" )  is ( false )  )  ;   }  ",252,7,requested,2,[]
4085,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\util\DiscoveryBuildInfoTest.java,test requested manifest is located and loaded,"@ test public void   (  )  throws  exception  {   discovery build info build info = new  discovery build info (  object mapper . class )  ;  assert that ( build info . get build version (  )  . contains ( ""version   unknown"" )  is ( false )  )  ;   }  ",252,7,manifest,3,[]
4086,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\util\DiscoveryBuildInfoTest.java,test requested manifest is located and loaded,"@ test public void   (  )  throws  exception  {   discovery build info build info = new  discovery build info (  object mapper . class )  ;  assert that ( build info . get build version (  )  . contains ( ""version   unknown"" )  is ( false )  )  ;   }  ",252,7,is,4,"[51, 90, 228]"
4087,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\util\DiscoveryBuildInfoTest.java,test requested manifest is located and loaded,"@ test public void   (  )  throws  exception  {   discovery build info build info = new  discovery build info (  object mapper . class )  ;  assert that ( build info . get build version (  )  . contains ( ""version   unknown"" )  is ( false )  )  ;   }  ",252,7,located,5,[]
4088,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\util\DiscoveryBuildInfoTest.java,test requested manifest is located and loaded,"@ test public void   (  )  throws  exception  {   discovery build info build info = new  discovery build info (  object mapper . class )  ;  assert that ( build info . get build version (  )  . contains ( ""version   unknown"" )  is ( false )  )  ;   }  ",252,7,and,6,[]
4089,C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\util\DiscoveryBuildInfoTest.java,test requested manifest is located and loaded,"@ test public void   (  )  throws  exception  {   discovery build info build info = new  discovery build info (  object mapper . class )  ;  assert that ( build info . get build version (  )  . contains ( ""version   unknown"" )  is ( false )  )  ;   }  ",252,7,loaded,7,[]
4090,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\Archaius2AmazonInfoConfig.java, archaius amazon info config,public   (  config config instance  string namespace )  {  this . namespace = namespace ;  this . config instance = config instance ;  this . prefixed config = new  internal prefixed config ( config instance namespace )  ;   }  ,228,4,archaius,1,[]
4091,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\Archaius2AmazonInfoConfig.java, archaius amazon info config,public   (  config config instance  string namespace )  {  this . namespace = namespace ;  this . config instance = config instance ;  this . prefixed config = new  internal prefixed config ( config instance namespace )  ;   }  ,228,4,amazon,2,[]
4092,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\Archaius2AmazonInfoConfig.java, archaius amazon info config,public   (  config config instance  string namespace )  {  this . namespace = namespace ;  this . config instance = config instance ;  this . prefixed config = new  internal prefixed config ( config instance namespace )  ;   }  ,228,4,info,3,[]
4093,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\Archaius2AmazonInfoConfig.java, archaius amazon info config,public   (  config config instance  string namespace )  {  this . namespace = namespace ;  this . config instance = config instance ;  this . prefixed config = new  internal prefixed config ( config instance namespace )  ;   }  ,228,4,config,4,"[12, 19, 98, 116, 151, 183, 192]"
4094,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\Archaius2AmazonInfoConfig.java,get connect timeout,@ override public int   (  )  {  return prefixed config . get integer ( connect   timeout   key  values . default   connect   timeout )  ;   }  ,144,3,get,1,[58]
4095,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\Archaius2AmazonInfoConfig.java,get connect timeout,@ override public int   (  )  {  return prefixed config . get integer ( connect   timeout   key  values . default   connect   timeout )  ;   }  ,144,3,connect,2,"[72, 116]"
4096,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\Archaius2AmazonInfoConfig.java,get connect timeout,@ override public int   (  )  {  return prefixed config . get integer ( connect   timeout   key  values . default   connect   timeout )  ;   }  ,144,3,timeout,3,"[82, 126]"
4097,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\Archaius2AmazonInfoConfig.java,get namespace,@ override public  string   (  )  {  return namespace ;   }  ,61,2,get,1,[]
4098,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\Archaius2AmazonInfoConfig.java,get namespace,@ override public  string   (  )  {  return namespace ;   }  ,61,2,namespace,2,[44]
4099,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\Archaius2AmazonInfoConfig.java,get num retries,@ override public int   (  )  {  return prefixed config . get integer ( num   retries   key  values . default   num   retries )  ;   }  ,136,3,get,1,[58]
4100,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\Archaius2AmazonInfoConfig.java,get num retries,@ override public int   (  )  {  return prefixed config . get integer ( num   retries   key  values . default   num   retries )  ;   }  ,136,3,num,2,"[72, 112]"
4101,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\Archaius2AmazonInfoConfig.java,get num retries,@ override public int   (  )  {  return prefixed config . get integer ( num   retries   key  values . default   num   retries )  ;   }  ,136,3,retries,3,"[78, 118]"
4102,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\Archaius2AmazonInfoConfig.java,get read timeout,@ override public int   (  )  {  return prefixed config . get integer ( read   timeout   key  values . default   read   timeout )  ;   }  ,138,3,get,1,[58]
4103,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\Archaius2AmazonInfoConfig.java,get read timeout,@ override public int   (  )  {  return prefixed config . get integer ( read   timeout   key  values . default   read   timeout )  ;   }  ,138,3,read,2,"[72, 113]"
4104,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\Archaius2AmazonInfoConfig.java,get read timeout,@ override public int   (  )  {  return prefixed config . get integer ( read   timeout   key  values . default   read   timeout )  ;   }  ,138,3,timeout,3,"[79, 120]"
4105,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\Archaius2AmazonInfoConfig.java,should fail fast on first load,@ override public boolean   (  )  {  return prefixed config . get boolean ( fail   fast   on   first   load   key true )  ;   }  ,129,6,should,1,[]
4106,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\Archaius2AmazonInfoConfig.java,should fail fast on first load,@ override public boolean   (  )  {  return prefixed config . get boolean ( fail   fast   on   first   load   key true )  ;   }  ,129,6,fail,2,[76]
4107,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\Archaius2AmazonInfoConfig.java,should fail fast on first load,@ override public boolean   (  )  {  return prefixed config . get boolean ( fail   fast   on   first   load   key true )  ;   }  ,129,6,fast,3,[83]
4108,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\Archaius2AmazonInfoConfig.java,should fail fast on first load,@ override public boolean   (  )  {  return prefixed config . get boolean ( fail   fast   on   first   load   key true )  ;   }  ,129,6,on,4,"[54, 90]"
4109,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\Archaius2AmazonInfoConfig.java,should fail fast on first load,@ override public boolean   (  )  {  return prefixed config . get boolean ( fail   fast   on   first   load   key true )  ;   }  ,129,6,first,5,[95]
4110,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\Archaius2AmazonInfoConfig.java,should fail fast on first load,@ override public boolean   (  )  {  return prefixed config . get boolean ( fail   fast   on   first   load   key true )  ;   }  ,129,6,load,6,[103]
4111,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\Archaius2AmazonInfoConfig.java,should log amazon metadata errors,@ override public boolean   (  )  {  return prefixed config . get boolean ( log   metadata   error   key false )  ;   }  ,121,5,should,1,[]
4112,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\Archaius2AmazonInfoConfig.java,should log amazon metadata errors,@ override public boolean   (  )  {  return prefixed config . get boolean ( log   metadata   error   key false )  ;   }  ,121,5,log,2,[76]
4113,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\Archaius2AmazonInfoConfig.java,should log amazon metadata errors,@ override public boolean   (  )  {  return prefixed config . get boolean ( log   metadata   error   key false )  ;   }  ,121,5,amazon,3,[]
4114,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\Archaius2AmazonInfoConfig.java,should log amazon metadata errors,@ override public boolean   (  )  {  return prefixed config . get boolean ( log   metadata   error   key false )  ;   }  ,121,5,metadata,4,[82]
4115,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\Archaius2AmazonInfoConfig.java,should log amazon metadata errors,@ override public boolean   (  )  {  return prefixed config . get boolean ( log   metadata   error   key false )  ;   }  ,121,5,errors,5,[]
4116,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\Archaius2AmazonInfoConfig.java,should validate instance id,@ override public boolean   (  )  {  return prefixed config . get boolean ( should   validate   instance   id   key true )  ;   }  ,131,4,should,1,[76]
4117,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\Archaius2AmazonInfoConfig.java,should validate instance id,@ override public boolean   (  )  {  return prefixed config . get boolean ( should   validate   instance   id   key true )  ;   }  ,131,4,validate,2,[85]
4118,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\Archaius2AmazonInfoConfig.java,should validate instance id,@ override public boolean   (  )  {  return prefixed config . get boolean ( should   validate   instance   id   key true )  ;   }  ,131,4,instance,3,[96]
4119,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\Archaius2AmazonInfoConfig.java,should validate instance id,@ override public boolean   (  )  {  return prefixed config . get boolean ( should   validate   instance   id   key true )  ;   }  ,131,4,id,4,"[7, 88, 107]"
4120,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\Ec2EurekaArchaius2InstanceConfig.java, ec eureka archaius instance config,  (  config config instance  amazon info config amazon info config  string namespace  amazon info initial info boolean eager init )  {  super ( config instance namespace )  ;  this . amazon info config = amazon info config ;  if  ( eager init )   {   refreshable amazon info provider .  fallback address provider fallback address provider = new  refreshable amazon info provider .  fallback address provider (  )  {  @ override public  string get fallback ip (  )  {  return  ec2 eureka archaius2 instance config . super . get ip address (  )  ;   }  @ override public  string get fallback hostname (  )  {  return  ec2 eureka archaius2 instance config . super . get host name ( false )  ;   }   }   ;  this . amazon info holder = new  refreshable amazon info provider ( amazon info config fallback address provider )  ;   }  else  {  this . amazon info holder = new  refreshable amazon info provider ( initial info amazon info config )  ;   }   }  ,949,5,ec,1,"[476, 616]"
4121,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\Ec2EurekaArchaius2InstanceConfig.java, ec eureka archaius instance config,  (  config config instance  amazon info config amazon info config  string namespace  amazon info initial info boolean eager init )  {  super ( config instance namespace )  ;  this . amazon info config = amazon info config ;  if  ( eager init )   {   refreshable amazon info provider .  fallback address provider fallback address provider = new  refreshable amazon info provider .  fallback address provider (  )  {  @ override public  string get fallback ip (  )  {  return  ec2 eureka archaius2 instance config . super . get ip address (  )  ;   }  @ override public  string get fallback hostname (  )  {  return  ec2 eureka archaius2 instance config . super . get host name ( false )  ;   }   }   ;  this . amazon info holder = new  refreshable amazon info provider ( amazon info config fallback address provider )  ;   }  else  {  this . amazon info holder = new  refreshable amazon info provider ( initial info amazon info config )  ;   }   }  ,949,5,eureka,2,"[480, 620]"
4122,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\Ec2EurekaArchaius2InstanceConfig.java, ec eureka archaius instance config,  (  config config instance  amazon info config amazon info config  string namespace  amazon info initial info boolean eager init )  {  super ( config instance namespace )  ;  this . amazon info config = amazon info config ;  if  ( eager init )   {   refreshable amazon info provider .  fallback address provider fallback address provider = new  refreshable amazon info provider .  fallback address provider (  )  {  @ override public  string get fallback ip (  )  {  return  ec2 eureka archaius2 instance config . super . get ip address (  )  ;   }  @ override public  string get fallback hostname (  )  {  return  ec2 eureka archaius2 instance config . super . get host name ( false )  ;   }   }   ;  this . amazon info holder = new  refreshable amazon info provider ( amazon info config fallback address provider )  ;   }  else  {  this . amazon info holder = new  refreshable amazon info provider ( initial info amazon info config )  ;   }   }  ,949,5,archaius,3,"[487, 627]"
4123,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\Ec2EurekaArchaius2InstanceConfig.java, ec eureka archaius instance config,  (  config config instance  amazon info config amazon info config  string namespace  amazon info initial info boolean eager init )  {  super ( config instance namespace )  ;  this . amazon info config = amazon info config ;  if  ( eager init )   {   refreshable amazon info provider .  fallback address provider fallback address provider = new  refreshable amazon info provider .  fallback address provider (  )  {  @ override public  string get fallback ip (  )  {  return  ec2 eureka archaius2 instance config . super . get ip address (  )  ;   }  @ override public  string get fallback hostname (  )  {  return  ec2 eureka archaius2 instance config . super . get host name ( false )  ;   }   }   ;  this . amazon info holder = new  refreshable amazon info provider ( amazon info config fallback address provider )  ;   }  else  {  this . amazon info holder = new  refreshable amazon info provider ( initial info amazon info config )  ;   }   }  ,949,5,instance,4,"[19, 151, 497, 637]"
4124,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\Ec2EurekaArchaius2InstanceConfig.java, ec eureka archaius instance config,  (  config config instance  amazon info config amazon info config  string namespace  amazon info initial info boolean eager init )  {  super ( config instance namespace )  ;  this . amazon info config = amazon info config ;  if  ( eager init )   {   refreshable amazon info provider .  fallback address provider fallback address provider = new  refreshable amazon info provider .  fallback address provider (  )  {  @ override public  string get fallback ip (  )  {  return  ec2 eureka archaius2 instance config . super . get ip address (  )  ;   }  @ override public  string get fallback hostname (  )  {  return  ec2 eureka archaius2 instance config . super . get host name ( false )  ;   }   }   ;  this . amazon info holder = new  refreshable amazon info provider ( amazon info config fallback address provider )  ;   }  else  {  this . amazon info holder = new  refreshable amazon info provider ( initial info amazon info config )  ;   }   }  ,949,5,config,5,"[5, 12, 41, 60, 144, 195, 216, 506, 646, 783, 928]"
4125,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\Ec2EurekaArchaius2InstanceConfig.java,get data center info,@ override public  data center info   (  )  {  return amazon info holder . get (  )  ;   }  ,92,4,get,1,[75]
4126,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\Ec2EurekaArchaius2InstanceConfig.java,get data center info,@ override public  data center info   (  )  {  return amazon info holder . get (  )  ;   }  ,92,4,data,2,[19]
4127,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\Ec2EurekaArchaius2InstanceConfig.java,get data center info,@ override public  data center info   (  )  {  return amazon info holder . get (  )  ;   }  ,92,4,center,3,[24]
4128,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\Ec2EurekaArchaius2InstanceConfig.java,get data center info,@ override public  data center info   (  )  {  return amazon info holder . get (  )  ;   }  ,92,4,info,4,"[31, 61]"
4129,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\Ec2EurekaArchaius2InstanceConfig.java,get default address resolution order,@ override public  string[]   (  )  {   string[] order = super . get default address resolution order (  )  ;  return  ( order . length  =  =  0 )   ?  default   aws   address   resolution   order : order ;   }  ,212,5,get,1,[65]
4130,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\Ec2EurekaArchaius2InstanceConfig.java,get default address resolution order,@ override public  string[]   (  )  {   string[] order = super . get default address resolution order (  )  ;  return  ( order . length  =  =  0 )   ?  default   aws   address   resolution   order : order ;   }  ,212,5,default,2,"[69, 152]"
4131,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\Ec2EurekaArchaius2InstanceConfig.java,get default address resolution order,@ override public  string[]   (  )  {   string[] order = super . get default address resolution order (  )  ;  return  ( order . length  =  =  0 )   ?  default   aws   address   resolution   order : order ;   }  ,212,5,address,3,"[77, 168]"
4132,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\Ec2EurekaArchaius2InstanceConfig.java,get default address resolution order,@ override public  string[]   (  )  {   string[] order = super . get default address resolution order (  )  ;  return  ( order . length  =  =  0 )   ?  default   aws   address   resolution   order : order ;   }  ,212,5,resolution,4,"[85, 178]"
4133,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\Ec2EurekaArchaius2InstanceConfig.java,get default address resolution order,@ override public  string[]   (  )  {   string[] order = super . get default address resolution order (  )  ;  return  ( order . length  =  =  0 )   ?  default   aws   address   resolution   order : order ;   }  ,212,5,order,5,"[49, 96, 121, 191, 199]"
4134,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\Ec2EurekaArchaius2InstanceConfig.java,get fallback hostname,@ override public  string   (  )  {  return  ec2 eureka archaius2 instance config . super . get host name ( false )  ;   }  ,124,3,get,1,[92]
4135,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\Ec2EurekaArchaius2InstanceConfig.java,get fallback hostname,@ override public  string   (  )  {  return  ec2 eureka archaius2 instance config . super . get host name ( false )  ;   }  ,124,3,fallback,2,[]
4136,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\Ec2EurekaArchaius2InstanceConfig.java,get fallback hostname,@ override public  string   (  )  {  return  ec2 eureka archaius2 instance config . super . get host name ( false )  ;   }  ,124,3,hostname,3,[]
4137,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\Ec2EurekaArchaius2InstanceConfig.java,get fallback ip,@ override public  string   (  )  {  return  ec2 eureka archaius2 instance config . super . get ip address (  )  ;   }  ,120,3,get,1,[92]
4138,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\Ec2EurekaArchaius2InstanceConfig.java,get fallback ip,@ override public  string   (  )  {  return  ec2 eureka archaius2 instance config . super . get ip address (  )  ;   }  ,120,3,fallback,2,[]
4139,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\Ec2EurekaArchaius2InstanceConfig.java,get fallback ip,@ override public  string   (  )  {  return  ec2 eureka archaius2 instance config . super . get ip address (  )  ;   }  ,120,3,ip,3,[96]
4140,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\Ec2EurekaArchaius2InstanceConfig.java,get host name,@ override public  string   ( boolean refresh )  {  if  ( refresh )   {  amazon info holder . refresh (  )  ;   }  return amazon info holder . get (  )  . get (  meta data key . public hostname )  ;   }  ,204,3,get,1,"[143, 155]"
4141,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\Ec2EurekaArchaius2InstanceConfig.java,get host name,@ override public  string   ( boolean refresh )  {  if  ( refresh )   {  amazon info holder . refresh (  )  ;   }  return amazon info holder . get (  )  . get (  meta data key . public hostname )  ;   }  ,204,3,host,2,[185]
4142,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\Ec2EurekaArchaius2InstanceConfig.java,get host name,@ override public  string   ( boolean refresh )  {  if  ( refresh )   {  amazon info holder . refresh (  )  ;   }  return amazon info holder . get (  )  . get (  meta data key . public hostname )  ;   }  ,204,3,name,3,[189]
4143,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\Ec2EurekaArchaius2InstanceConfig.java,refresh amazon info,@ deprecated public synchronized void   (  )  {  amazon info holder . refresh (  )  ;   }  ,91,3,refresh,1,[70]
4144,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\Ec2EurekaArchaius2InstanceConfig.java,refresh amazon info,@ deprecated public synchronized void   (  )  {  amazon info holder . refresh (  )  ;   }  ,91,3,amazon,2,[49]
4145,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\Ec2EurekaArchaius2InstanceConfig.java,refresh amazon info,@ deprecated public synchronized void   (  )  {  amazon info holder . refresh (  )  ;   }  ,91,3,info,3,[56]
4146,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\Ec2EurekaArchaius2InstanceConfig.java,resolve default address,@ override public  string   ( boolean refresh )  {   string result = get host name ( refresh )  ;  for  (   string name : get default address resolution order (  )  )   {  try  {   amazon info .  meta data key key =  amazon info .  meta data key . value o,255,3,resolve,1,[]
4147,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\Ec2EurekaArchaius2InstanceConfig.java,resolve default address,@ override public  string   ( boolean refresh )  {   string result = get host name ( refresh )  ;  for  (   string name : get default address resolution order (  )  )   {  try  {   amazon info .  meta data key key =  amazon info .  meta data key . value o,255,3,default,2,[126]
4148,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\Ec2EurekaArchaius2InstanceConfig.java,resolve default address,@ override public  string   ( boolean refresh )  {   string result = get host name ( refresh )  ;  for  (   string name : get default address resolution order (  )  )   {  try  {   amazon info .  meta data key key =  amazon info .  meta data key . value o,255,3,address,3,[134]
4149,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java, eureka archaius instance config,public   (  config config instance  string namespace  data center info dc info )  {  this . default app group = config instance . get string ( fallback   app   group   key  values . unknown   application )  ;  this . namespace = namespace ;  this . config instance = config instance ;  this . prefixed config = new  internal prefixed config ( config instance namespace )  ;  this . dc info = dc info ;   }  ,407,4,eureka,1,[]
4150,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java, eureka archaius instance config,public   (  config config instance  string namespace  data center info dc info )  {  this . default app group = config instance . get string ( fallback   app   group   key  values . unknown   application )  ;  this . namespace = namespace ;  this . config instance = config instance ;  this . prefixed config = new  internal prefixed config ( config instance namespace )  ;  this . dc info = dc info ;   }  ,407,4,archaius,2,[]
4151,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java, eureka archaius instance config,public   (  config config instance  string namespace  data center info dc info )  {  this . default app group = config instance . get string ( fallback   app   group   key  values . unknown   application )  ;  this . namespace = namespace ;  this . config instance = config instance ;  this . prefixed config = new  internal prefixed config ( config instance namespace )  ;  this . dc info = dc info ;   }  ,407,4,instance,3,"[26, 119, 256, 274, 350]"
4152,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java, eureka archaius instance config,public   (  config config instance  string namespace  data center info dc info )  {  this . default app group = config instance . get string ( fallback   app   group   key  values . unknown   application )  ;  this . namespace = namespace ;  this . config instance = config instance ;  this . prefixed config = new  internal prefixed config ( config instance namespace )  ;  this . dc info = dc info ;   }  ,407,4,config,4,"[12, 19, 112, 249, 267, 302, 334, 343]"
4153,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,getasg name,@ override public  string   (  )  {  return prefixed config . get string ( asg   name   key super . getasg name (  )  )  ;   }  ,128,2,getasg,1,[100]
4154,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,getasg name,@ override public  string   (  )  {  return prefixed config . get string ( asg   name   key super . getasg name (  )  )  ;   }  ,128,2,name,2,"[81, 107]"
4155,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,get app group name,@ override public  string   (  )  {  return prefixed config . get string ( app   group   key default app group )  . trim (  )  ;   }  ,134,4,get,1,[62]
4156,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,get app group name,@ override public  string   (  )  {  return prefixed config . get string ( app   group   key default app group )  . trim (  )  ;   }  ,134,4,app,2,"[75, 101]"
4157,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,get app group name,@ override public  string   (  )  {  return prefixed config . get string ( app   group   key default app group )  . trim (  )  ;   }  ,134,4,group,3,"[81, 105]"
4158,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,get app group name,@ override public  string   (  )  {  return prefixed config . get string ( app   group   key default app group )  . trim (  )  ;   }  ,134,4,name,4,[]
4159,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,get appname,@ override public  string   (  )  {  return prefixed config . get string ( app   name   key  values . unknown   application )  . trim (  )  ;   }  ,147,2,get,1,[62]
4160,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,get appname,@ override public  string   (  )  {  return prefixed config . get string ( app   name   key  values . unknown   application )  . trim (  )  ;   }  ,147,2,appname,2,[]
4161,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,get data center info,@ override public  data center info   (  )  {  return dc info ;   }  ,69,4,get,1,[]
4162,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,get data center info,@ override public  data center info   (  )  {  return dc info ;   }  ,69,4,data,2,[19]
4163,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,get data center info,@ override public  data center info   (  )  {  return dc info ;   }  ,69,4,center,3,[24]
4164,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,get data center info,@ override public  data center info   (  )  {  return dc info ;   }  ,69,4,info,4,"[31, 57]"
4165,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,get default address resolution order,"@ override public  string[]   (  )  {   string result = prefixed config . get string ( default   address   resolution   order   key null )  ;  return result  =  =  null  ?  new  string[0] : result . split ( "" "" )  ;   }  ",221,5,get,1,[74]
4166,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,get default address resolution order,"@ override public  string[]   (  )  {   string result = prefixed config . get string ( default   address   resolution   order   key null )  ;  return result  =  =  null  ?  new  string[0] : result . split ( "" "" )  ;   }  ",221,5,default,2,[87]
4167,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,get default address resolution order,"@ override public  string[]   (  )  {   string result = prefixed config . get string ( default   address   resolution   order   key null )  ;  return result  =  =  null  ?  new  string[0] : result . split ( "" "" )  ;   }  ",221,5,address,3,[97]
4168,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,get default address resolution order,"@ override public  string[]   (  )  {   string result = prefixed config . get string ( default   address   resolution   order   key null )  ;  return result  =  =  null  ?  new  string[0] : result . split ( "" "" )  ;   }  ",221,5,resolution,4,[107]
4169,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,get default address resolution order,"@ override public  string[]   (  )  {   string result = prefixed config . get string ( default   address   resolution   order   key null )  ;  return result  =  =  null  ?  new  string[0] : result . split ( "" "" )  ;   }  ",221,5,order,5,[120]
4170,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,get health check url,@ override public  string   (  )  {  return prefixed config . get string ( healthcheck   url   key null )  ;   }  ,114,4,get,1,[62]
4171,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,get health check url,@ override public  string   (  )  {  return prefixed config . get string ( healthcheck   url   key null )  ;   }  ,114,4,health,2,[75]
4172,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,get health check url,@ override public  string   (  )  {  return prefixed config . get string ( healthcheck   url   key null )  ;   }  ,114,4,check,3,[81]
4173,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,get health check url,@ override public  string   (  )  {  return prefixed config . get string ( healthcheck   url   key null )  ;   }  ,114,4,url,4,[89]
4174,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,get health check url path,@ override public  string   (  )  {  return prefixed config . get string ( healthcheck   url   path   key  values . default   healthcheck   urlpath )  ;   }  ,158,5,get,1,[62]
4175,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,get health check url path,@ override public  string   (  )  {  return prefixed config . get string ( healthcheck   url   path   key  values . default   healthcheck   urlpath )  ;   }  ,158,5,health,2,"[75, 126]"
4176,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,get health check url path,@ override public  string   (  )  {  return prefixed config . get string ( healthcheck   url   path   key  values . default   healthcheck   urlpath )  ;   }  ,158,5,check,3,"[81, 132]"
4177,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,get health check url path,@ override public  string   (  )  {  return prefixed config . get string ( healthcheck   url   path   key  values . default   healthcheck   urlpath )  ;   }  ,158,5,url,4,"[89, 140]"
4178,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,get health check url path,@ override public  string   (  )  {  return prefixed config . get string ( healthcheck   url   path   key  values . default   healthcheck   urlpath )  ;   }  ,158,5,path,5,"[95, 143]"
4179,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,get home page url,@ override public  string   (  )  {  return prefixed config . get string ( home   page   url   key null )  ;   }  ,114,4,get,1,[62]
4180,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,get home page url,@ override public  string   (  )  {  return prefixed config . get string ( home   page   url   key null )  ;   }  ,114,4,home,2,[75]
4181,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,get home page url,@ override public  string   (  )  {  return prefixed config . get string ( home   page   url   key null )  ;   }  ,114,4,page,3,[82]
4182,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,get home page url,@ override public  string   (  )  {  return prefixed config . get string ( home   page   url   key null )  ;   }  ,114,4,url,4,[89]
4183,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,get home page url path,@ override public  string   (  )  {  return prefixed config . get string ( home   page   url   path   key  values . default   homepage   urlpath )  ;   }  ,155,5,get,1,[62]
4184,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,get home page url path,@ override public  string   (  )  {  return prefixed config . get string ( home   page   url   path   key  values . default   homepage   urlpath )  ;   }  ,155,5,home,2,"[75, 126]"
4185,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,get home page url path,@ override public  string   (  )  {  return prefixed config . get string ( home   page   url   path   key  values . default   homepage   urlpath )  ;   }  ,155,5,page,3,"[82, 130]"
4186,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,get home page url path,@ override public  string   (  )  {  return prefixed config . get string ( home   page   url   path   key  values . default   homepage   urlpath )  ;   }  ,155,5,url,4,"[89, 137]"
4187,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,get home page url path,@ override public  string   (  )  {  return prefixed config . get string ( home   page   url   path   key  values . default   homepage   urlpath )  ;   }  ,155,5,path,5,"[95, 140]"
4188,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,get instance id,@ override public  string   (  )  {   string result = prefixed config . get string ( instance   id   key null )  ;  return result  =  =  null  ?  null : result . trim (  )  ;   }  ,180,3,get,1,[72]
4189,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,get instance id,@ override public  string   (  )  {   string result = prefixed config . get string ( instance   id   key null )  ;  return result  =  =  null  ?  null : result . trim (  )  ;   }  ,180,3,instance,2,[85]
4190,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,get instance id,@ override public  string   (  )  {   string result = prefixed config . get string ( instance   id   key null )  ;  return result  =  =  null  ?  null : result . trim (  )  ;   }  ,180,3,id,3,"[7, 96]"
4191,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,get lease expiration duration in seconds,@ override public int   (  )  {  return prefixed config . get integer ( lease   expiration   duration   key super . get lease expiration duration in seconds (  )  )  ;   }  ,173,6,get,1,"[58, 116]"
4192,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,get lease expiration duration in seconds,@ override public int   (  )  {  return prefixed config . get integer ( lease   expiration   duration   key super . get lease expiration duration in seconds (  )  )  ;   }  ,173,6,lease,2,"[72, 120]"
4193,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,get lease expiration duration in seconds,@ override public int   (  )  {  return prefixed config . get integer ( lease   expiration   duration   key super . get lease expiration duration in seconds (  )  )  ;   }  ,173,6,expiration,3,"[80, 126]"
4194,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,get lease expiration duration in seconds,@ override public int   (  )  {  return prefixed config . get integer ( lease   expiration   duration   key super . get lease expiration duration in seconds (  )  )  ;   }  ,173,6,duration,4,"[93, 137]"
4195,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,get lease expiration duration in seconds,@ override public int   (  )  {  return prefixed config . get integer ( lease   expiration   duration   key super . get lease expiration duration in seconds (  )  )  ;   }  ,173,6,in,5,"[18, 62, 146]"
4196,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,get lease expiration duration in seconds,@ override public int   (  )  {  return prefixed config . get integer ( lease   expiration   duration   key super . get lease expiration duration in seconds (  )  )  ;   }  ,173,6,seconds,6,[149]
4197,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,get lease renewal interval in seconds,@ override public int   (  )  {  return prefixed config . get integer ( lease   renewal   interval   key super . get lease renewal interval in seconds (  )  )  ;   }  ,167,6,get,1,"[58, 113]"
4198,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,get lease renewal interval in seconds,@ override public int   (  )  {  return prefixed config . get integer ( lease   renewal   interval   key super . get lease renewal interval in seconds (  )  )  ;   }  ,167,6,lease,2,"[72, 117]"
4199,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,get lease renewal interval in seconds,@ override public int   (  )  {  return prefixed config . get integer ( lease   renewal   interval   key super . get lease renewal interval in seconds (  )  )  ;   }  ,167,6,renewal,3,"[80, 123]"
4200,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,get lease renewal interval in seconds,@ override public int   (  )  {  return prefixed config . get integer ( lease   renewal   interval   key super . get lease renewal interval in seconds (  )  )  ;   }  ,167,6,interval,4,"[90, 131]"
4201,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,get lease renewal interval in seconds,@ override public int   (  )  {  return prefixed config . get integer ( lease   renewal   interval   key super . get lease renewal interval in seconds (  )  )  ;   }  ,167,6,in,5,"[18, 62, 90, 131, 140]"
4202,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,get lease renewal interval in seconds,@ override public int   (  )  {  return prefixed config . get integer ( lease   renewal   interval   key super . get lease renewal interval in seconds (  )  )  ;   }  ,167,6,seconds,6,[143]
4203,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,get metadata map,@ override public  map <  string  string >    (  )  {   map <  string  string >  meta = new  hash map <  >  (  )  ;   internal prefixed config metadata config = new  internal prefixed config ( config instance namespace instance   metadata   prefix )  ;  f,255,3,get,1,[]
4204,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,get metadata map,@ override public  map <  string  string >    (  )  {   map <  string  string >  meta = new  hash map <  >  (  )  ;   internal prefixed config metadata config = new  internal prefixed config ( config instance namespace instance   metadata   prefix )  ;  f,255,3,metadata,2,"[143, 230]"
4205,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,get metadata map,@ override public  map <  string  string >    (  )  {   map <  string  string >  meta = new  hash map <  >  (  )  ;   internal prefixed config metadata config = new  internal prefixed config ( config instance namespace instance   metadata   prefix )  ;  f,255,3,map,3,"[19, 56, 98]"
4206,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,get name,@ override public  name   (  )  {  return  name .  my own ;   }  ,65,2,get,1,[]
4207,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,get name,@ override public  name   (  )  {  return  name .  my own ;   }  ,65,2,name,2,"[19, 43]"
4208,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,get namespace,@ override public  string   (  )  {  return namespace ;   }  ,61,2,get,1,[]
4209,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,get namespace,@ override public  string   (  )  {  return namespace ;   }  ,61,2,namespace,2,[44]
4210,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,get non secure port,@ override public int   (  )  {  return prefixed config . get integer ( port   key super . get non secure port (  )  )  ;   }  ,127,4,get,1,"[58, 91]"
4211,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,get non secure port,@ override public int   (  )  {  return prefixed config . get integer ( port   key super . get non secure port (  )  )  ;   }  ,127,4,non,2,[95]
4212,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,get non secure port,@ override public int   (  )  {  return prefixed config . get integer ( port   key super . get non secure port (  )  )  ;   }  ,127,4,secure,3,[99]
4213,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,get non secure port,@ override public int   (  )  {  return prefixed config . get integer ( port   key super . get non secure port (  )  )  ;   }  ,127,4,port,4,"[72, 106]"
4214,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,get secure health check url,@ override public  string   (  )  {  return prefixed config . get string ( secure   healthcheck   url   key null )  ;   }  ,123,5,get,1,[62]
4215,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,get secure health check url,@ override public  string   (  )  {  return prefixed config . get string ( secure   healthcheck   url   key null )  ;   }  ,123,5,secure,2,[75]
4216,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,get secure health check url,@ override public  string   (  )  {  return prefixed config . get string ( secure   healthcheck   url   key null )  ;   }  ,123,5,health,3,[84]
4217,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,get secure health check url,@ override public  string   (  )  {  return prefixed config . get string ( secure   healthcheck   url   key null )  ;   }  ,123,5,check,4,[90]
4218,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,get secure health check url,@ override public  string   (  )  {  return prefixed config . get string ( secure   healthcheck   url   key null )  ;   }  ,123,5,url,5,[98]
4219,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,get secure port,@ override public int   (  )  {  return prefixed config . get integer ( secure   port   key super . get secure port (  )  )  ;   }  ,132,3,get,1,"[58, 100]"
4220,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,get secure port,@ override public int   (  )  {  return prefixed config . get integer ( secure   port   key super . get secure port (  )  )  ;   }  ,132,3,secure,2,"[72, 104]"
4221,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,get secure port,@ override public int   (  )  {  return prefixed config . get integer ( secure   port   key super . get secure port (  )  )  ;   }  ,132,3,port,3,"[81, 111]"
4222,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,get secure port enabled,@ override public boolean   (  )  {  return prefixed config . get boolean ( secure   port   enabled   key super . get secure port enabled (  )  )  ;   }  ,154,4,get,1,"[62, 114]"
4223,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,get secure port enabled,@ override public boolean   (  )  {  return prefixed config . get boolean ( secure   port   enabled   key super . get secure port enabled (  )  )  ;   }  ,154,4,secure,2,"[76, 118]"
4224,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,get secure port enabled,@ override public boolean   (  )  {  return prefixed config . get boolean ( secure   port   enabled   key super . get secure port enabled (  )  )  ;   }  ,154,4,port,3,"[85, 125]"
4225,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,get secure port enabled,@ override public boolean   (  )  {  return prefixed config . get boolean ( secure   port   enabled   key super . get secure port enabled (  )  )  ;   }  ,154,4,enabled,4,"[92, 130]"
4226,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,get secure virtual host name,@ override public  string   (  )  {  return this . get secure port enabled (  )   ?  prefixed config . get string ( secure   virtual   hostname   key super . get secure virtual host name (  )  )  : null ;   }  ,210,5,get,1,"[51, 103, 158]"
4227,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,get secure virtual host name,@ override public  string   (  )  {  return this . get secure port enabled (  )   ?  prefixed config . get string ( secure   virtual   hostname   key super . get secure virtual host name (  )  )  : null ;   }  ,210,5,secure,2,"[55, 116, 162]"
4228,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,get secure virtual host name,@ override public  string   (  )  {  return this . get secure port enabled (  )   ?  prefixed config . get string ( secure   virtual   hostname   key super . get secure virtual host name (  )  )  : null ;   }  ,210,5,virtual,3,"[125, 169]"
4229,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,get secure virtual host name,@ override public  string   (  )  {  return this . get secure port enabled (  )   ?  prefixed config . get string ( secure   virtual   hostname   key super . get secure virtual host name (  )  )  : null ;   }  ,210,5,host,4,"[135, 177]"
4230,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,get secure virtual host name,@ override public  string   (  )  {  return this . get secure port enabled (  )   ?  prefixed config . get string ( secure   virtual   hostname   key super . get secure virtual host name (  )  )  : null ;   }  ,210,5,name,5,"[139, 182]"
4231,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,get status page url,@ override public  string   (  )  {  return prefixed config . get string ( status   page   url   key null )  ;   }  ,116,4,get,1,[62]
4232,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,get status page url,@ override public  string   (  )  {  return prefixed config . get string ( status   page   url   key null )  ;   }  ,116,4,status,2,[75]
4233,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,get status page url,@ override public  string   (  )  {  return prefixed config . get string ( status   page   url   key null )  ;   }  ,116,4,page,3,[84]
4234,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,get status page url,@ override public  string   (  )  {  return prefixed config . get string ( status   page   url   key null )  ;   }  ,116,4,url,4,[91]
4235,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,get status page url path,@ override public  string   (  )  {  return prefixed config . get string ( status   page   url   path   key  values . default   statuspage   urlpath )  ;   }  ,159,5,get,1,[62]
4236,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,get status page url path,@ override public  string   (  )  {  return prefixed config . get string ( status   page   url   path   key  values . default   statuspage   urlpath )  ;   }  ,159,5,status,2,"[75, 128]"
4237,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,get status page url path,@ override public  string   (  )  {  return prefixed config . get string ( status   page   url   path   key  values . default   statuspage   urlpath )  ;   }  ,159,5,page,3,"[84, 134]"
4238,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,get status page url path,@ override public  string   (  )  {  return prefixed config . get string ( status   page   url   path   key  values . default   statuspage   urlpath )  ;   }  ,159,5,url,4,"[91, 141]"
4239,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,get status page url path,@ override public  string   (  )  {  return prefixed config . get string ( status   page   url   path   key  values . default   statuspage   urlpath )  ;   }  ,159,5,path,5,"[97, 144]"
4240,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,get virtual host name,@ override public  string   (  )  {  return this . is non secure port enabled (  )   ?  prefixed config . get string ( virtual   hostname   key super . get virtual host name (  )  )  : null ;   }  ,197,4,get,1,"[106, 152]"
4241,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,get virtual host name,@ override public  string   (  )  {  return this . is non secure port enabled (  )   ?  prefixed config . get string ( virtual   hostname   key super . get virtual host name (  )  )  : null ;   }  ,197,4,virtual,2,"[119, 156]"
4242,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,get virtual host name,@ override public  string   (  )  {  return this . is non secure port enabled (  )   ?  prefixed config . get string ( virtual   hostname   key super . get virtual host name (  )  )  : null ;   }  ,197,4,host,3,"[129, 164]"
4243,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,get virtual host name,@ override public  string   (  )  {  return this . is non secure port enabled (  )   ?  prefixed config . get string ( virtual   hostname   key super . get virtual host name (  )  )  : null ;   }  ,197,4,name,4,"[133, 169]"
4244,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,is instance enabled onit,@ override public boolean   (  )  {  return prefixed config . get boolean ( traffic   enabled   on   init   key super . is instance enabled onit (  )  )  ;   }  ,161,4,is,1,[120]
4245,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,is instance enabled onit,@ override public boolean   (  )  {  return prefixed config . get boolean ( traffic   enabled   on   init   key super . is instance enabled onit (  )  )  ;   }  ,161,4,instance,2,[123]
4246,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,is instance enabled onit,@ override public boolean   (  )  {  return prefixed config . get boolean ( traffic   enabled   on   init   key super . is instance enabled onit (  )  )  ;   }  ,161,4,enabled,3,"[86, 132]"
4247,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,is instance enabled onit,@ override public boolean   (  )  {  return prefixed config . get boolean ( traffic   enabled   on   init   key super . is instance enabled onit (  )  )  ;   }  ,161,4,onit,4,[140]
4248,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,is non secure port enabled,@ override public boolean   (  )  {  return prefixed config . get boolean ( port   enabled   key super . is non secure port enabled (  )  )  ;   }  ,148,5,is,1,[105]
4249,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,is non secure port enabled,@ override public boolean   (  )  {  return prefixed config . get boolean ( port   enabled   key super . is non secure port enabled (  )  )  ;   }  ,148,5,non,2,[108]
4250,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,is non secure port enabled,@ override public boolean   (  )  {  return prefixed config . get boolean ( port   enabled   key super . is non secure port enabled (  )  )  ;   }  ,148,5,secure,3,[112]
4251,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,is non secure port enabled,@ override public boolean   (  )  {  return prefixed config . get boolean ( port   enabled   key super . is non secure port enabled (  )  )  ;   }  ,148,5,port,4,"[76, 119]"
4252,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,is non secure port enabled,@ override public boolean   (  )  {  return prefixed config . get boolean ( port   enabled   key super . is non secure port enabled (  )  )  ;   }  ,148,5,enabled,5,"[83, 124]"
4253,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\providers\Archaius2VipAddressResolver.java, archaius vip address resolver,@ inject public   (  config config )  {  this . config = config ;   }  ,71,4,archaius,1,[]
4254,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\providers\Archaius2VipAddressResolver.java, archaius vip address resolver,@ inject public   (  config config )  {  this . config = config ;   }  ,71,4,vip,2,[]
4255,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\providers\Archaius2VipAddressResolver.java, archaius vip address resolver,@ inject public   (  config config )  {  this . config = config ;   }  ,71,4,address,3,[]
4256,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\providers\Archaius2VipAddressResolver.java, archaius vip address resolver,@ inject public   (  config config )  {  this . config = config ;   }  ,71,4,resolver,4,[]
4257,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\providers\Archaius2VipAddressResolver.java,resolve deployment context based vip addresses,@ override public  string   (  string vip address macro )  {  if  ( vip address macro  =  =  null )   {  return null ;   }   string result = vip address macro ;   matcher matcher = vip   attributes   pattern . matcher ( result )  ;  while  ( matcher . fin,255,6,resolve,1,[]
4258,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\providers\Archaius2VipAddressResolver.java,resolve deployment context based vip addresses,@ override public  string   (  string vip address macro )  {  if  ( vip address macro  =  =  null )   {  return null ;   }   string result = vip address macro ;   matcher matcher = vip   attributes   pattern . matcher ( result )  ;  while  ( matcher . fin,255,6,deployment,2,[]
4259,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\providers\Archaius2VipAddressResolver.java,resolve deployment context based vip addresses,@ override public  string   (  string vip address macro )  {  if  ( vip address macro  =  =  null )   {  return null ;   }   string result = vip address macro ;   matcher matcher = vip   attributes   pattern . matcher ( result )  ;  while  ( matcher . fin,255,6,context,3,[]
4260,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\providers\Archaius2VipAddressResolver.java,resolve deployment context based vip addresses,@ override public  string   (  string vip address macro )  {  if  ( vip address macro  =  =  null )   {  return null ;   }   string result = vip address macro ;   matcher matcher = vip   attributes   pattern . matcher ( result )  ;  while  ( matcher . fin,255,6,based,4,[]
4261,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\providers\Archaius2VipAddressResolver.java,resolve deployment context based vip addresses,@ override public  string   (  string vip address macro )  {  if  ( vip address macro  =  =  null )   {  return null ;   }   string result = vip address macro ;   matcher matcher = vip   attributes   pattern . matcher ( result )  ;  while  ( matcher . fin,255,6,vip,5,"[38, 68, 141, 181]"
4262,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\providers\Archaius2VipAddressResolver.java,resolve deployment context based vip addresses,@ override public  string   (  string vip address macro )  {  if  ( vip address macro  =  =  null )   {  return null ;   }   string result = vip address macro ;   matcher matcher = vip   attributes   pattern . matcher ( result )  ;  while  ( matcher . fin,255,6,addresses,6,[]
4263,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\providers\CompositeInstanceConfigFactory.java, composite instance config factory,@ inject public   (  config config instance  string namespace )  {  this . config instance = config instance ;  this . namespace = namespace ;  this . prefixed config = new  internal prefixed config ( config instance namespace )  ;   }  ,237,4,composite,1,[]
4264,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\providers\CompositeInstanceConfigFactory.java, composite instance config factory,@ inject public   (  config config instance  string namespace )  {  this . config instance = config instance ;  this . namespace = namespace ;  this . prefixed config = new  internal prefixed config ( config instance namespace )  ;   }  ,237,4,instance,2,"[35, 82, 100, 208]"
4265,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\providers\CompositeInstanceConfigFactory.java, composite instance config factory,@ inject public   (  config config instance  string namespace )  {  this . config instance = config instance ;  this . namespace = namespace ;  this . prefixed config = new  internal prefixed config ( config instance namespace )  ;   }  ,237,4,config,3,"[21, 28, 75, 93, 160, 192, 201]"
4266,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\providers\CompositeInstanceConfigFactory.java, composite instance config factory,@ inject public   (  config config instance  string namespace )  {  this . config instance = config instance ;  this . namespace = namespace ;  this . prefixed config = new  internal prefixed config ( config instance namespace )  ;   }  ,237,4,factory,4,[]
4267,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\providers\CompositeInstanceConfigFactory.java,auto detect ec,"private boolean   (  amazon info config amazon info config )  {  try  {  url url =  amazon info .  meta data key . instance id . geturl ( null null )  ;   string id =  amazon info utils . read ec2 metadata url (  amazon info .  meta data key . instance id url amazon info config . get connect timeout (  )  amazon info config . get read timeout (  )  )  ;  if  ( id  !  =  null )   {  logger . info ( "" auto detected ec2 deployment environment  instance id  =   {  } "" id )  ;  return true ;   }  else  {  logger . info ( "" auto detected non - ec2 deployment environment  instance id from metadata url is null"" )  ;  return false ;   }   }  catch  (   socket timeout exception e )   {  logger . info ( "" auto detected non - ec2 deployment environment  connection to ec2 instance metadata url failed . "" )  ;   }  catch  (   exception e )   {  logger . warn ( "" failed to auto - detect whether we are in ec2 due to unexpected exception"" e )  ;   }  return false ;   }  ",968,3,auto,1,"[403, 524, 704, 871]"
4268,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\providers\CompositeInstanceConfigFactory.java,auto detect ec,"private boolean   (  amazon info config amazon info config )  {  try  {  url url =  amazon info .  meta data key . instance id . geturl ( null null )  ;   string id =  amazon info utils . read ec2 metadata url (  amazon info .  meta data key . instance id url amazon info config . get connect timeout (  )  amazon info config . get read timeout (  )  )  ;  if  ( id  !  =  null )   {  logger . info ( "" auto detected ec2 deployment environment  instance id  =   {  } "" id )  ;  return true ;   }  else  {  logger . info ( "" auto detected non - ec2 deployment environment  instance id from metadata url is null"" )  ;  return false ;   }   }  catch  (   socket timeout exception e )   {  logger . info ( "" auto detected non - ec2 deployment environment  connection to ec2 instance metadata url failed . "" )  ;   }  catch  (   exception e )   {  logger . warn ( "" failed to auto - detect whether we are in ec2 due to unexpected exception"" e )  ;   }  return false ;   }  ",968,3,detect,2,"[408, 529, 709, 878]"
4269,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\providers\CompositeInstanceConfigFactory.java,auto detect ec,"private boolean   (  amazon info config amazon info config )  {  try  {  url url =  amazon info .  meta data key . instance id . geturl ( null null )  ;   string id =  amazon info utils . read ec2 metadata url (  amazon info .  meta data key . instance id url amazon info config . get connect timeout (  )  amazon info config . get read timeout (  )  )  ;  if  ( id  !  =  null )   {  logger . info ( "" auto detected ec2 deployment environment  instance id  =   {  } "" id )  ;  return true ;   }  else  {  logger . info ( "" auto detected non - ec2 deployment environment  instance id from metadata url is null"" )  ;  return false ;   }   }  catch  (   socket timeout exception e )   {  logger . info ( "" auto detected non - ec2 deployment environment  connection to ec2 instance metadata url failed . "" )  ;   }  catch  (   exception e )   {  logger . warn ( "" failed to auto - detect whether we are in ec2 due to unexpected exception"" e )  ;   }  return false ;   }  ",968,3,ec,3,"[193, 289, 411, 417, 532, 544, 712, 724, 756, 766, 881, 903, 919]"
4270,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\providers\CompositeInstanceConfigFactory.java,get,@ override public synchronized  eureka instance config   (  )  {  if  ( eureka instance config  =  =  null )   {   amazon info config amazon info config = new  archaius2 amazon info config ( config instance namespace )  ;  if  ( is in ec2 ( amazon info co,255,1,get,1,[]
4271,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\providers\CompositeInstanceConfigFactory.java,get deployment environment override,private  string   (  )  {  return prefixed config . get string ( deployment   environment   override   key null )  ;   }  ,122,4,get,1,[52]
4272,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\providers\CompositeInstanceConfigFactory.java,get deployment environment override,private  string   (  )  {  return prefixed config . get string ( deployment   environment   override   key null )  ;   }  ,122,4,deployment,2,[65]
4273,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\providers\CompositeInstanceConfigFactory.java,get deployment environment override,private  string   (  )  {  return prefixed config . get string ( deployment   environment   override   key null )  ;   }  ,122,4,environment,3,[78]
4274,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\providers\CompositeInstanceConfigFactory.java,get deployment environment override,private  string   (  )  {  return prefixed config . get string ( deployment   environment   override   key null )  ;   }  ,122,4,override,4,[92]
4275,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\providers\CompositeInstanceConfigFactory.java,is in ec,"private boolean   (  amazon info config amazon info config )  {   string deployment environment override = get deployment environment override (  )  ;  if  ( deployment environment override  =  =  null )   {  return auto detect ec2 ( amazon info config )  ;   }  else if  ( ""ec2"" . equals ignore case ( deployment environment override )  )   {  logger . info ( "" assuming ec2 deployment environment due to config override"" )  ;  return true ;   }  else  {  return false ;   }   }  ",481,3,is,1,[]
4276,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\providers\CompositeInstanceConfigFactory.java,is in ec,"private boolean   (  amazon info config amazon info config )  {   string deployment environment override = get deployment environment override (  )  ;  if  ( deployment environment override  =  =  null )   {  return auto detect ec2 ( amazon info config )  ;   }  else if  ( ""ec2"" . equals ignore case ( deployment environment override )  )   {  logger . info ( "" assuming ec2 deployment environment due to config override"" )  ;  return true ;   }  else  {  return false ;   }   }  ",481,3,in,2,"[28, 47, 69, 241, 354, 368]"
4277,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\providers\CompositeInstanceConfigFactory.java,is in ec,"private boolean   (  amazon info config amazon info config )  {   string deployment environment override = get deployment environment override (  )  ;  if  ( deployment environment override  =  =  null )   {  return auto detect ec2 ( amazon info config )  ;   }  else if  ( ""ec2"" . equals ignore case ( deployment environment override )  )   {  logger . info ( "" assuming ec2 deployment environment due to config override"" )  ;  return true ;   }  else  {  return false ;   }   }  ",481,3,ec,3,"[224, 228, 275, 372]"
4278,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java, eureka archaius client config,public   (  config config instance  eureka transport config transport config  string namespace )  {  this . transport config = transport config ;  this . config instance = config instance ;  this . prefixed config = new  internal prefixed config ( config instance namespace )  ;   }  ,284,4,eureka,1,[36]
4279,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java, eureka archaius client config,public   (  config config instance  eureka transport config transport config  string namespace )  {  this . transport config = transport config ;  this . config instance = config instance ;  this . prefixed config = new  internal prefixed config ( config instance namespace )  ;   }  ,284,4,archaius,2,[]
4280,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java, eureka archaius client config,public   (  config config instance  eureka transport config transport config  string namespace )  {  this . transport config = transport config ;  this . config instance = config instance ;  this . prefixed config = new  internal prefixed config ( config instance namespace )  ;   }  ,284,4,client,3,[]
4281,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java, eureka archaius client config,public   (  config config instance  eureka transport config transport config  string namespace )  {  this . transport config = transport config ;  this . config instance = config instance ;  this . prefixed config = new  internal prefixed config ( config instance namespace )  ;   }  ,284,4,config,4,"[12, 19, 53, 70, 118, 137, 154, 172, 207, 239, 248]"
4282,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,allow redirects,public boolean   (  )  {  return prefixed config . get boolean ( should   allow   redirects   key false )  ;   }  ,114,2,allow,1,[74]
4283,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,allow redirects,public boolean   (  )  {  return prefixed config . get boolean ( should   allow   redirects   key false )  ;   }  ,114,2,redirects,2,[82]
4284,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,fetch registry for remote regions,public  string   (  )  {  return prefixed config . get string ( should   fetch   remote   region   key null )  ;   }  ,118,5,fetch,1,[73]
4285,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,fetch registry for remote regions,public  string   (  )  {  return prefixed config . get string ( should   fetch   remote   region   key null )  ;   }  ,118,5,registry,2,[]
4286,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,fetch registry for remote regions,public  string   (  )  {  return prefixed config . get string ( should   fetch   remote   region   key null )  ;   }  ,118,5,for,3,[]
4287,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,fetch registry for remote regions,public  string   (  )  {  return prefixed config . get string ( should   fetch   remote   region   key null )  ;   }  ,118,5,remote,4,[81]
4288,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,fetch registry for remote regions,public  string   (  )  {  return prefixed config . get string ( should   fetch   remote   region   key null )  ;   }  ,118,5,regions,5,[]
4289,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get availability zones,"public  string[]   (  string region )  {  return prefixed config . get string (  string . format ( ""%s . ""  +  config   availability   zone   prefix region )  default   zone )  . split ( "" "" )  ;   }  ",201,3,get,1,[67]
4290,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get availability zones,"public  string[]   (  string region )  {  return prefixed config . get string (  string . format ( ""%s . ""  +  config   availability   zone   prefix region )  default   zone )  . split ( "" "" )  ;   }  ",201,3,availability,2,[120]
4291,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get availability zones,"public  string[]   (  string region )  {  return prefixed config . get string (  string . format ( ""%s . ""  +  config   availability   zone   prefix region )  default   zone )  . split ( "" "" )  ;   }  ",201,3,zones,3,[]
4292,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get backup registry impl,public  string   (  )  {  return prefixed config . get string ( backup   registry   classname   key null )  ;   }  ,115,4,get,1,[51]
4293,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get backup registry impl,public  string   (  )  {  return prefixed config . get string ( backup   registry   classname   key null )  ;   }  ,115,4,backup,2,[64]
4294,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get backup registry impl,public  string   (  )  {  return prefixed config . get string ( backup   registry   classname   key null )  ;   }  ,115,4,registry,3,[73]
4295,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get backup registry impl,public  string   (  )  {  return prefixed config . get string ( backup   registry   classname   key null )  ;   }  ,115,4,impl,4,[]
4296,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get cache refresh executor exponential back off bound,public int   (  )  {  return prefixed config . get integer ( cacherefresh   backoff   bound   key  values . default   executor   thread   pool   backoff   bound )  ;   }  ,171,8,get,1,[47]
4297,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get cache refresh executor exponential back off bound,public int   (  )  {  return prefixed config . get integer ( cacherefresh   backoff   bound   key  values . default   executor   thread   pool   backoff   bound )  ;   }  ,171,8,cache,2,[61]
4298,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get cache refresh executor exponential back off bound,public int   (  )  {  return prefixed config . get integer ( cacherefresh   backoff   bound   key  values . default   executor   thread   pool   backoff   bound )  ;   }  ,171,8,refresh,3,[66]
4299,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get cache refresh executor exponential back off bound,public int   (  )  {  return prefixed config . get integer ( cacherefresh   backoff   bound   key  values . default   executor   thread   pool   backoff   bound )  ;   }  ,171,8,executor,4,[118]
4300,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get cache refresh executor exponential back off bound,public int   (  )  {  return prefixed config . get integer ( cacherefresh   backoff   bound   key  values . default   executor   thread   pool   backoff   bound )  ;   }  ,171,8,exponential,5,[]
4301,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get cache refresh executor exponential back off bound,public int   (  )  {  return prefixed config . get integer ( cacherefresh   backoff   bound   key  values . default   executor   thread   pool   backoff   bound )  ;   }  ,171,8,back,6,"[76, 145]"
4302,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get cache refresh executor exponential back off bound,public int   (  )  {  return prefixed config . get integer ( cacherefresh   backoff   bound   key  values . default   executor   thread   pool   backoff   bound )  ;   }  ,171,8,off,7,"[80, 149]"
4303,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get cache refresh executor exponential back off bound,public int   (  )  {  return prefixed config . get integer ( cacherefresh   backoff   bound   key  values . default   executor   thread   pool   backoff   bound )  ;   }  ,171,8,bound,8,"[86, 155]"
4304,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get cache refresh executor thread pool size,public int   (  )  {  return prefixed config . get integer ( cacherefresh   threadpool   size   key  values . default   executor   thread   pool   size )  ;   }  ,162,7,get,1,[47]
4305,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get cache refresh executor thread pool size,public int   (  )  {  return prefixed config . get integer ( cacherefresh   threadpool   size   key  values . default   executor   thread   pool   size )  ;   }  ,162,7,cache,2,[61]
4306,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get cache refresh executor thread pool size,public int   (  )  {  return prefixed config . get integer ( cacherefresh   threadpool   size   key  values . default   executor   thread   pool   size )  ;   }  ,162,7,refresh,3,[66]
4307,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get cache refresh executor thread pool size,public int   (  )  {  return prefixed config . get integer ( cacherefresh   threadpool   size   key  values . default   executor   thread   pool   size )  ;   }  ,162,7,executor,4,[120]
4308,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get cache refresh executor thread pool size,public int   (  )  {  return prefixed config . get integer ( cacherefresh   threadpool   size   key  values . default   executor   thread   pool   size )  ;   }  ,162,7,thread,5,"[76, 131]"
4309,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get cache refresh executor thread pool size,public int   (  )  {  return prefixed config . get integer ( cacherefresh   threadpool   size   key  values . default   executor   thread   pool   size )  ;   }  ,162,7,pool,6,"[82, 140]"
4310,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get cache refresh executor thread pool size,public int   (  )  {  return prefixed config . get integer ( cacherefresh   threadpool   size   key  values . default   executor   thread   pool   size )  ;   }  ,162,7,size,7,"[89, 147]"
4311,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get client data accept,@ override public  string   (  )  {  return prefixed config . get string ( client   data   accept   key  eureka accept . full . name (  )  )  ;   }  ,149,4,get,1,[62]
4312,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get client data accept,@ override public  string   (  )  {  return prefixed config . get string ( client   data   accept   key  eureka accept . full . name (  )  )  ;   }  ,149,4,client,2,[75]
4313,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get client data accept,@ override public  string   (  )  {  return prefixed config . get string ( client   data   accept   key  eureka accept . full . name (  )  )  ;   }  ,149,4,data,3,[84]
4314,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get client data accept,@ override public  string   (  )  {  return prefixed config . get string ( client   data   accept   key  eureka accept . full . name (  )  )  ;   }  ,149,4,accept,4,"[91, 112]"
4315,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get decoder name,@ override public  string   (  )  {  return prefixed config . get string ( client   decoder   name   key null )  ;   }  ,120,3,get,1,[62]
4316,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get decoder name,@ override public  string   (  )  {  return prefixed config . get string ( client   decoder   name   key null )  ;   }  ,120,3,decoder,2,[84]
4317,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get decoder name,@ override public  string   (  )  {  return prefixed config . get string ( client   decoder   name   key null )  ;   }  ,120,3,name,3,[94]
4318,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get dollar replacement,public  string   (  )  {  return prefixed config . get string ( config   dollar   replacement   key  values . config   dollar   replacement )  ;   }  ,150,3,get,1,[51]
4319,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get dollar replacement,public  string   (  )  {  return prefixed config . get string ( config   dollar   replacement   key  values . config   dollar   replacement )  ;   }  ,150,3,dollar,2,"[73, 119]"
4320,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get dollar replacement,public  string   (  )  {  return prefixed config . get string ( config   dollar   replacement   key  values . config   dollar   replacement )  ;   }  ,150,3,replacement,3,"[82, 128]"
4321,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get encoder name,@ override public  string   (  )  {  return prefixed config . get string ( client   encoder   name   key null )  ;   }  ,120,3,get,1,[62]
4322,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get encoder name,@ override public  string   (  )  {  return prefixed config . get string ( client   encoder   name   key null )  ;   }  ,120,3,encoder,2,[84]
4323,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get encoder name,@ override public  string   (  )  {  return prefixed config . get string ( client   encoder   name   key null )  ;   }  ,120,3,name,3,[94]
4324,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get escape char replacement,public  string   (  )  {  return prefixed config . get string ( config   escape   char   replacement   key  values . config   escape   char   replacement )  ;   }  ,164,4,get,1,[51]
4325,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get escape char replacement,public  string   (  )  {  return prefixed config . get string ( config   escape   char   replacement   key  values . config   escape   char   replacement )  ;   }  ,164,4,escape,2,"[73, 126]"
4326,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get escape char replacement,public  string   (  )  {  return prefixed config . get string ( config   escape   char   replacement   key  values . config   escape   char   replacement )  ;   }  ,164,4,char,3,"[82, 135]"
4327,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get escape char replacement,public  string   (  )  {  return prefixed config . get string ( config   escape   char   replacement   key  values . config   escape   char   replacement )  ;   }  ,164,4,replacement,4,"[89, 142]"
4328,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get eureka connection idle timeout seconds,public int   (  )  {  return prefixed config . get integer ( eureka   server   connection   idle   timeout   key 30 )  ;   }  ,126,6,get,1,[47]
4329,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get eureka connection idle timeout seconds,public int   (  )  {  return prefixed config . get integer ( eureka   server   connection   idle   timeout   key 30 )  ;   }  ,126,6,eureka,2,[61]
4330,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get eureka connection idle timeout seconds,public int   (  )  {  return prefixed config . get integer ( eureka   server   connection   idle   timeout   key 30 )  ;   }  ,126,6,connection,3,[79]
4331,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get eureka connection idle timeout seconds,public int   (  )  {  return prefixed config . get integer ( eureka   server   connection   idle   timeout   key 30 )  ;   }  ,126,6,idle,4,[92]
4332,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get eureka connection idle timeout seconds,public int   (  )  {  return prefixed config . get integer ( eureka   server   connection   idle   timeout   key 30 )  ;   }  ,126,6,timeout,5,[99]
4333,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get eureka connection idle timeout seconds,public int   (  )  {  return prefixed config . get integer ( eureka   server   connection   idle   timeout   key 30 )  ;   }  ,126,6,seconds,6,[]
4334,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get eureka server connect timeout seconds,public int   (  )  {  return prefixed config . get integer ( eureka   server   connect   timeout   key 5 )  ;   }  ,115,6,get,1,[47]
4335,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get eureka server connect timeout seconds,public int   (  )  {  return prefixed config . get integer ( eureka   server   connect   timeout   key 5 )  ;   }  ,115,6,eureka,2,[61]
4336,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get eureka server connect timeout seconds,public int   (  )  {  return prefixed config . get integer ( eureka   server   connect   timeout   key 5 )  ;   }  ,115,6,server,3,[70]
4337,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get eureka server connect timeout seconds,public int   (  )  {  return prefixed config . get integer ( eureka   server   connect   timeout   key 5 )  ;   }  ,115,6,connect,4,[79]
4338,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get eureka server connect timeout seconds,public int   (  )  {  return prefixed config . get integer ( eureka   server   connect   timeout   key 5 )  ;   }  ,115,6,timeout,5,[89]
4339,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get eureka server connect timeout seconds,public int   (  )  {  return prefixed config . get integer ( eureka   server   connect   timeout   key 5 )  ;   }  ,115,6,seconds,6,[]
4340,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get eureka serverdns name,public  string   (  )  {  return prefixed config . get string ( eureka   server   dns   name   key prefixed config . get string ( eureka   server   fallback   dns   name   key null )  )  ;   }  ,194,4,get,1,"[51, 117]"
4341,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get eureka serverdns name,public  string   (  )  {  return prefixed config . get string ( eureka   server   dns   name   key prefixed config . get string ( eureka   server   fallback   dns   name   key null )  )  ;   }  ,194,4,eureka,2,"[64, 130]"
4342,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get eureka serverdns name,public  string   (  )  {  return prefixed config . get string ( eureka   server   dns   name   key prefixed config . get string ( eureka   server   fallback   dns   name   key null )  )  ;   }  ,194,4,serverdns,3,[]
4343,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get eureka serverdns name,public  string   (  )  {  return prefixed config . get string ( eureka   server   dns   name   key prefixed config . get string ( eureka   server   fallback   dns   name   key null )  )  ;   }  ,194,4,name,4,"[88, 165]"
4344,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get eureka server port,public  string   (  )  {  return prefixed config . get string ( eureka   server   port   key prefixed config . get string ( eureka   server   fallback   port   key null )  )  ;   }  ,182,4,get,1,"[51, 111]"
4345,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get eureka server port,public  string   (  )  {  return prefixed config . get string ( eureka   server   port   key prefixed config . get string ( eureka   server   fallback   port   key null )  )  ;   }  ,182,4,eureka,2,"[64, 124]"
4346,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get eureka server port,public  string   (  )  {  return prefixed config . get string ( eureka   server   port   key prefixed config . get string ( eureka   server   fallback   port   key null )  )  ;   }  ,182,4,server,3,"[73, 133]"
4347,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get eureka server port,public  string   (  )  {  return prefixed config . get string ( eureka   server   port   key prefixed config . get string ( eureka   server   fallback   port   key null )  )  ;   }  ,182,4,port,4,"[82, 153]"
4348,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get eureka server read timeout seconds,public int   (  )  {  return prefixed config . get integer ( eureka   server   read   timeout   key 8 )  ;   }  ,112,6,get,1,[47]
4349,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get eureka server read timeout seconds,public int   (  )  {  return prefixed config . get integer ( eureka   server   read   timeout   key 8 )  ;   }  ,112,6,eureka,2,[61]
4350,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get eureka server read timeout seconds,public int   (  )  {  return prefixed config . get integer ( eureka   server   read   timeout   key 8 )  ;   }  ,112,6,server,3,[70]
4351,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get eureka server read timeout seconds,public int   (  )  {  return prefixed config . get integer ( eureka   server   read   timeout   key 8 )  ;   }  ,112,6,read,4,[79]
4352,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get eureka server read timeout seconds,public int   (  )  {  return prefixed config . get integer ( eureka   server   read   timeout   key 8 )  ;   }  ,112,6,timeout,5,[86]
4353,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get eureka server read timeout seconds,public int   (  )  {  return prefixed config . get integer ( eureka   server   read   timeout   key 8 )  ;   }  ,112,6,seconds,6,[]
4354,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get eureka server service urls,"public  list <  string >    (  string my zone )  {   string service urls = prefixed config . get string ( config   eureka   server   service   url   prefix  +  "" . ""  +  my zone null )  ;  if  ( service urls  =  =  null || service urls . is empty (  )  )   {  service urls = prefixed config . get string ( config   eureka   server   service   url   prefix  +  "" . default"" null )  ;   }  return service urls  !  =  null  ?   arrays . as list ( service urls . split ( "" "" )  )  :  collections .  <  string > empty list (  )  ;   }  ",531,5,get,1,"[93, 293]"
4355,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get eureka server service urls,"public  list <  string >    (  string my zone )  {   string service urls = prefixed config . get string ( config   eureka   server   service   url   prefix  +  "" . ""  +  my zone null )  ;  if  ( service urls  =  =  null || service urls . is empty (  )  )   {  service urls = prefixed config . get string ( config   eureka   server   service   url   prefix  +  "" . default"" null )  ;   }  return service urls  !  =  null  ?   arrays . as list ( service urls . split ( "" "" )  )  :  collections .  <  string > empty list (  )  ;   }  ",531,5,eureka,2,"[115, 315]"
4356,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get eureka server service urls,"public  list <  string >    (  string my zone )  {   string service urls = prefixed config . get string ( config   eureka   server   service   url   prefix  +  "" . ""  +  my zone null )  ;  if  ( service urls  =  =  null || service urls . is empty (  )  )   {  service urls = prefixed config . get string ( config   eureka   server   service   url   prefix  +  "" . default"" null )  ;   }  return service urls  !  =  null  ?   arrays . as list ( service urls . split ( "" "" )  )  :  collections .  <  string > empty list (  )  ;   }  ",531,5,server,3,"[124, 324]"
4357,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get eureka server service urls,"public  list <  string >    (  string my zone )  {   string service urls = prefixed config . get string ( config   eureka   server   service   url   prefix  +  "" . ""  +  my zone null )  ;  if  ( service urls  =  =  null || service urls . is empty (  )  )   {  service urls = prefixed config . get string ( config   eureka   server   service   url   prefix  +  "" . default"" null )  ;   }  return service urls  !  =  null  ?   arrays . as list ( service urls . split ( "" "" )  )  :  collections .  <  string > empty list (  )  ;   }  ",531,5,service,4,"[60, 133, 195, 223, 260, 333, 395, 444]"
4358,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get eureka server service urls,"public  list <  string >    (  string my zone )  {   string service urls = prefixed config . get string ( config   eureka   server   service   url   prefix  +  "" . ""  +  my zone null )  ;  if  ( service urls  =  =  null || service urls . is empty (  )  )   {  service urls = prefixed config . get string ( config   eureka   server   service   url   prefix  +  "" . default"" null )  ;   }  return service urls  !  =  null  ?   arrays . as list ( service urls . split ( "" "" )  )  :  collections .  <  string > empty list (  )  ;   }  ",531,5,urls,5,"[68, 203, 231, 268, 403, 452]"
4359,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get eureka server total connections,public int   (  )  {  return prefixed config . get integer ( eureka   server   max   connections   key 200 )  ;   }  ,117,5,get,1,[47]
4360,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get eureka server total connections,public int   (  )  {  return prefixed config . get integer ( eureka   server   max   connections   key 200 )  ;   }  ,117,5,eureka,2,[61]
4361,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get eureka server total connections,public int   (  )  {  return prefixed config . get integer ( eureka   server   max   connections   key 200 )  ;   }  ,117,5,server,3,[70]
4362,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get eureka server total connections,public int   (  )  {  return prefixed config . get integer ( eureka   server   max   connections   key 200 )  ;   }  ,117,5,total,4,[]
4363,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get eureka server total connections,public int   (  )  {  return prefixed config . get integer ( eureka   server   max   connections   key 200 )  ;   }  ,117,5,connections,5,[85]
4364,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get eureka server total connections per host,public int   (  )  {  return prefixed config . get integer ( eureka   server   max   connections   per   host   key 50 )  ;   }  ,129,7,get,1,[47]
4365,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get eureka server total connections per host,public int   (  )  {  return prefixed config . get integer ( eureka   server   max   connections   per   host   key 50 )  ;   }  ,129,7,eureka,2,[61]
4366,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get eureka server total connections per host,public int   (  )  {  return prefixed config . get integer ( eureka   server   max   connections   per   host   key 50 )  ;   }  ,129,7,server,3,[70]
4367,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get eureka server total connections per host,public int   (  )  {  return prefixed config . get integer ( eureka   server   max   connections   per   host   key 50 )  ;   }  ,129,7,total,4,[]
4368,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get eureka server total connections per host,public int   (  )  {  return prefixed config . get integer ( eureka   server   max   connections   per   host   key 50 )  ;   }  ,129,7,connections,5,[85]
4369,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get eureka server total connections per host,public int   (  )  {  return prefixed config . get integer ( eureka   server   max   connections   per   host   key 50 )  ;   }  ,129,7,per,6,[99]
4370,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get eureka server total connections per host,public int   (  )  {  return prefixed config . get integer ( eureka   server   max   connections   per   host   key 50 )  ;   }  ,129,7,host,7,[105]
4371,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get eureka serverurl context,public  string   (  )  {  return prefixed config . get string ( eureka   server   url   context   key null )  ;   }  ,117,4,get,1,[51]
4372,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get eureka serverurl context,public  string   (  )  {  return prefixed config . get string ( eureka   server   url   context   key null )  ;   }  ,117,4,eureka,2,[64]
4373,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get eureka serverurl context,public  string   (  )  {  return prefixed config . get string ( eureka   server   url   context   key null )  ;   }  ,117,4,serverurl,3,[]
4374,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get eureka serverurl context,public  string   (  )  {  return prefixed config . get string ( eureka   server   url   context   key null )  ;   }  ,117,4,context,4,[88]
4375,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get eureka service url poll interval seconds,public int   (  )  {  return prefixed config . get integer ( eureka   server   url   poll   interval   key 300 )  ;   }  ,121,7,get,1,[47]
4376,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get eureka service url poll interval seconds,public int   (  )  {  return prefixed config . get integer ( eureka   server   url   poll   interval   key 300 )  ;   }  ,121,7,eureka,2,[61]
4377,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get eureka service url poll interval seconds,public int   (  )  {  return prefixed config . get integer ( eureka   server   url   poll   interval   key 300 )  ;   }  ,121,7,service,3,[]
4378,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get eureka service url poll interval seconds,public int   (  )  {  return prefixed config . get integer ( eureka   server   url   poll   interval   key 300 )  ;   }  ,121,7,url,4,[79]
4379,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get eureka service url poll interval seconds,public int   (  )  {  return prefixed config . get integer ( eureka   server   url   poll   interval   key 300 )  ;   }  ,121,7,poll,5,[85]
4380,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get eureka service url poll interval seconds,public int   (  )  {  return prefixed config . get integer ( eureka   server   url   poll   interval   key 300 )  ;   }  ,121,7,interval,6,[92]
4381,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get eureka service url poll interval seconds,public int   (  )  {  return prefixed config . get integer ( eureka   server   url   poll   interval   key 300 )  ;   }  ,121,7,seconds,7,[]
4382,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get experimental,"@ override public  string   (  string name )  {  return prefixed config . get string ( config   experimental   prefix  +  "" . ""  +  name null )  ;   }  ",152,2,get,1,[74]
4383,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get experimental,"@ override public  string   (  string name )  {  return prefixed config . get string ( config   experimental   prefix  +  "" . ""  +  name null )  ;   }  ",152,2,experimental,2,[96]
4384,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get heartbeat executor exponential back off bound,public int   (  )  {  return prefixed config . get integer ( heartbeat   backoff   bound   key  values . default   executor   thread   pool   backoff   bound )  ;   }  ,168,7,get,1,[47]
4385,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get heartbeat executor exponential back off bound,public int   (  )  {  return prefixed config . get integer ( heartbeat   backoff   bound   key  values . default   executor   thread   pool   backoff   bound )  ;   }  ,168,7,heartbeat,2,[61]
4386,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get heartbeat executor exponential back off bound,public int   (  )  {  return prefixed config . get integer ( heartbeat   backoff   bound   key  values . default   executor   thread   pool   backoff   bound )  ;   }  ,168,7,executor,3,[115]
4387,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get heartbeat executor exponential back off bound,public int   (  )  {  return prefixed config . get integer ( heartbeat   backoff   bound   key  values . default   executor   thread   pool   backoff   bound )  ;   }  ,168,7,exponential,4,[]
4388,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get heartbeat executor exponential back off bound,public int   (  )  {  return prefixed config . get integer ( heartbeat   backoff   bound   key  values . default   executor   thread   pool   backoff   bound )  ;   }  ,168,7,back,5,"[73, 142]"
4389,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get heartbeat executor exponential back off bound,public int   (  )  {  return prefixed config . get integer ( heartbeat   backoff   bound   key  values . default   executor   thread   pool   backoff   bound )  ;   }  ,168,7,off,6,"[77, 146]"
4390,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get heartbeat executor exponential back off bound,public int   (  )  {  return prefixed config . get integer ( heartbeat   backoff   bound   key  values . default   executor   thread   pool   backoff   bound )  ;   }  ,168,7,bound,7,"[83, 152]"
4391,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get heartbeat executor thread pool size,public int   (  )  {  return prefixed config . get integer ( heartbeat   threadpool   size   key  values . default   executor   thread   pool   size )  ;   }  ,159,6,get,1,[47]
4392,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get heartbeat executor thread pool size,public int   (  )  {  return prefixed config . get integer ( heartbeat   threadpool   size   key  values . default   executor   thread   pool   size )  ;   }  ,159,6,heartbeat,2,[61]
4393,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get heartbeat executor thread pool size,public int   (  )  {  return prefixed config . get integer ( heartbeat   threadpool   size   key  values . default   executor   thread   pool   size )  ;   }  ,159,6,executor,3,[117]
4394,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get heartbeat executor thread pool size,public int   (  )  {  return prefixed config . get integer ( heartbeat   threadpool   size   key  values . default   executor   thread   pool   size )  ;   }  ,159,6,thread,4,"[73, 128]"
4395,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get heartbeat executor thread pool size,public int   (  )  {  return prefixed config . get integer ( heartbeat   threadpool   size   key  values . default   executor   thread   pool   size )  ;   }  ,159,6,pool,5,"[79, 137]"
4396,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get heartbeat executor thread pool size,public int   (  )  {  return prefixed config . get integer ( heartbeat   threadpool   size   key  values . default   executor   thread   pool   size )  ;   }  ,159,6,size,6,"[86, 144]"
4397,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get initial instance info replication interval seconds,public int   (  )  {  return prefixed config . get integer ( initial   registration   replication   delay   key 40 )  ;   }  ,125,7,get,1,[47]
4398,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get initial instance info replication interval seconds,public int   (  )  {  return prefixed config . get integer ( initial   registration   replication   delay   key 40 )  ;   }  ,125,7,initial,2,[61]
4399,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get initial instance info replication interval seconds,public int   (  )  {  return prefixed config . get integer ( initial   registration   replication   delay   key 40 )  ;   }  ,125,7,instance,3,[]
4400,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get initial instance info replication interval seconds,public int   (  )  {  return prefixed config . get integer ( initial   registration   replication   delay   key 40 )  ;   }  ,125,7,info,4,[]
4401,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get initial instance info replication interval seconds,public int   (  )  {  return prefixed config . get integer ( initial   registration   replication   delay   key 40 )  ;   }  ,125,7,replication,5,[86]
4402,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get initial instance info replication interval seconds,public int   (  )  {  return prefixed config . get integer ( initial   registration   replication   delay   key 40 )  ;   }  ,125,7,interval,6,[]
4403,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get initial instance info replication interval seconds,public int   (  )  {  return prefixed config . get integer ( initial   registration   replication   delay   key 40 )  ;   }  ,125,7,seconds,7,[]
4404,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get instance info replication interval seconds,public int   (  )  {  return prefixed config . get integer ( registration   replication   interval   key 30 )  ;   }  ,118,6,get,1,[47]
4405,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get instance info replication interval seconds,public int   (  )  {  return prefixed config . get integer ( registration   replication   interval   key 30 )  ;   }  ,118,6,instance,2,[]
4406,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get instance info replication interval seconds,public int   (  )  {  return prefixed config . get integer ( registration   replication   interval   key 30 )  ;   }  ,118,6,info,3,[]
4407,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get instance info replication interval seconds,public int   (  )  {  return prefixed config . get integer ( registration   replication   interval   key 30 )  ;   }  ,118,6,replication,4,[76]
4408,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get instance info replication interval seconds,public int   (  )  {  return prefixed config . get integer ( registration   replication   interval   key 30 )  ;   }  ,118,6,interval,5,[90]
4409,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get instance info replication interval seconds,public int   (  )  {  return prefixed config . get integer ( registration   replication   interval   key 30 )  ;   }  ,118,6,seconds,6,[]
4410,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get proxy host,public  string   (  )  {  return prefixed config . get string ( eureka   server   proxy   host   key null )  ;   }  ,116,3,get,1,[51]
4411,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get proxy host,public  string   (  )  {  return prefixed config . get string ( eureka   server   proxy   host   key null )  ;   }  ,116,3,proxy,2,[82]
4412,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get proxy host,public  string   (  )  {  return prefixed config . get string ( eureka   server   proxy   host   key null )  ;   }  ,116,3,host,3,[90]
4413,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get proxy password,public  string   (  )  {  return prefixed config . get string ( eureka   server   proxy   password   key null )  ;   }  ,120,3,get,1,[51]
4414,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get proxy password,public  string   (  )  {  return prefixed config . get string ( eureka   server   proxy   password   key null )  ;   }  ,120,3,proxy,2,[82]
4415,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get proxy password,public  string   (  )  {  return prefixed config . get string ( eureka   server   proxy   password   key null )  ;   }  ,120,3,password,3,[90]
4416,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get proxy port,public  string   (  )  {  return prefixed config . get string ( eureka   server   proxy   port   key null )  ;   }  ,116,3,get,1,[51]
4417,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get proxy port,public  string   (  )  {  return prefixed config . get string ( eureka   server   proxy   port   key null )  ;   }  ,116,3,proxy,2,[82]
4418,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get proxy port,public  string   (  )  {  return prefixed config . get string ( eureka   server   proxy   port   key null )  ;   }  ,116,3,port,3,[90]
4419,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get proxy user name,public  string   (  )  {  return prefixed config . get string ( eureka   server   proxy   username   key null )  ;   }  ,120,4,get,1,[51]
4420,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get proxy user name,public  string   (  )  {  return prefixed config . get string ( eureka   server   proxy   username   key null )  ;   }  ,120,4,proxy,2,[82]
4421,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get proxy user name,public  string   (  )  {  return prefixed config . get string ( eureka   server   proxy   username   key null )  ;   }  ,120,4,user,3,[90]
4422,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get proxy user name,public  string   (  )  {  return prefixed config . get string ( eureka   server   proxy   username   key null )  ;   }  ,120,4,name,4,[94]
4423,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get region,public  string   (  )  {  return prefixed config . get string ( client   region   key prefixed config . get string ( client   region   fallback   key  values . default   client   region )  )  ;   }  ,199,2,get,1,"[51, 104]"
4424,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get region,public  string   (  )  {  return prefixed config . get string ( client   region   key prefixed config . get string ( client   region   fallback   key  values . default   client   region )  )  ;   }  ,199,2,region,2,"[73, 126, 179]"
4425,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get registry fetch interval seconds,public int   (  )  {  return prefixed config . get integer ( registry   refresh   interval   key 30 )  ;   }  ,110,5,get,1,[47]
4426,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get registry fetch interval seconds,public int   (  )  {  return prefixed config . get integer ( registry   refresh   interval   key 30 )  ;   }  ,110,5,registry,2,[61]
4427,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get registry fetch interval seconds,public int   (  )  {  return prefixed config . get integer ( registry   refresh   interval   key 30 )  ;   }  ,110,5,fetch,3,[]
4428,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get registry fetch interval seconds,public int   (  )  {  return prefixed config . get integer ( registry   refresh   interval   key 30 )  ;   }  ,110,5,interval,4,[82]
4429,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get registry fetch interval seconds,public int   (  )  {  return prefixed config . get integer ( registry   refresh   interval   key 30 )  ;   }  ,110,5,seconds,5,[]
4430,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get registry refresh single vip address,public  string   (  )  {  return prefixed config . get string ( fetch   single   vip   only   key null )  ;   }  ,113,6,get,1,[51]
4431,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get registry refresh single vip address,public  string   (  )  {  return prefixed config . get string ( fetch   single   vip   only   key null )  ;   }  ,113,6,registry,2,[]
4432,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get registry refresh single vip address,public  string   (  )  {  return prefixed config . get string ( fetch   single   vip   only   key null )  ;   }  ,113,6,refresh,3,[]
4433,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get registry refresh single vip address,public  string   (  )  {  return prefixed config . get string ( fetch   single   vip   only   key null )  ;   }  ,113,6,single,4,[72]
4434,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get registry refresh single vip address,public  string   (  )  {  return prefixed config . get string ( fetch   single   vip   only   key null )  ;   }  ,113,6,vip,5,[81]
4435,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get registry refresh single vip address,public  string   (  )  {  return prefixed config . get string ( fetch   single   vip   only   key null )  ;   }  ,113,6,address,6,[]
4436,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get transport config,@ override public  eureka transport config   (  )  {  return transport config ;   }  ,85,3,get,1,[]
4437,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get transport config,@ override public  eureka transport config   (  )  {  return transport config ;   }  ,85,3,transport,2,"[26, 61]"
4438,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,get transport config,@ override public  eureka transport config   (  )  {  return transport config ;   }  ,85,3,config,3,"[36, 71]"
4439,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,should disable delta,public boolean   (  )  {  return prefixed config . get boolean ( should   disable   delta   key false )  ;   }  ,112,3,should,1,[65]
4440,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,should disable delta,public boolean   (  )  {  return prefixed config . get boolean ( should   disable   delta   key false )  ;   }  ,112,3,disable,2,[74]
4441,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,should disable delta,public boolean   (  )  {  return prefixed config . get boolean ( should   disable   delta   key false )  ;   }  ,112,3,delta,3,[84]
4442,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,should enforce registration at init,public boolean   (  )  {  return prefixed config . get boolean ( should   enforce   registration   at   init false )  ;   }  ,125,5,should,1,[65]
4443,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,should enforce registration at init,public boolean   (  )  {  return prefixed config . get boolean ( should   enforce   registration   at   init false )  ;   }  ,125,5,enforce,2,[74]
4444,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,should enforce registration at init,public boolean   (  )  {  return prefixed config . get boolean ( should   enforce   registration   at   init false )  ;   }  ,125,5,registration,3,[84]
4445,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,should enforce registration at init,public boolean   (  )  {  return prefixed config . get boolean ( should   enforce   registration   at   init false )  ;   }  ,125,5,at,4,"[91, 99]"
4446,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,should enforce registration at init,public boolean   (  )  {  return prefixed config . get boolean ( should   enforce   registration   at   init false )  ;   }  ,125,5,init,5,[104]
4447,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,should fetch registry,public boolean   (  )  {  return prefixed config . get boolean ( fetch   registry   enabled   key true )  ;   }  ,113,3,should,1,[]
4448,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,should fetch registry,public boolean   (  )  {  return prefixed config . get boolean ( fetch   registry   enabled   key true )  ;   }  ,113,3,fetch,2,[65]
4449,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,should fetch registry,public boolean   (  )  {  return prefixed config . get boolean ( fetch   registry   enabled   key true )  ;   }  ,113,3,registry,3,[73]
4450,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,should filter only up instances,public boolean   (  )  {  return prefixed config . get boolean ( should   filter   only   up   instances   key true )  ;   }  ,126,5,should,1,[65]
4451,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,should filter only up instances,public boolean   (  )  {  return prefixed config . get boolean ( should   filter   only   up   instances   key true )  ;   }  ,126,5,filter,2,[74]
4452,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,should filter only up instances,public boolean   (  )  {  return prefixed config . get boolean ( should   filter   only   up   instances   key true )  ;   }  ,126,5,only,3,[83]
4453,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,should filter only up instances,public boolean   (  )  {  return prefixed config . get boolean ( should   filter   only   up   instances   key true )  ;   }  ,126,5,up,4,[90]
4454,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,should filter only up instances,public boolean   (  )  {  return prefixed config . get boolean ( should   filter   only   up   instances   key true )  ;   }  ,126,5,instances,5,[95]
4455,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,shouldg zip content,public boolean   (  )  {  return prefixed config . get boolean ( eureka   server   gzip   content   key true )  ;   }  ,119,3,shouldg,1,[]
4456,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,shouldg zip content,public boolean   (  )  {  return prefixed config . get boolean ( eureka   server   gzip   content   key true )  ;   }  ,119,3,zip,2,[84]
4457,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,shouldg zip content,public boolean   (  )  {  return prefixed config . get boolean ( eureka   server   gzip   content   key true )  ;   }  ,119,3,content,3,[90]
4458,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,should log delta diff,public boolean   (  )  {  return prefixed config . get boolean ( should   log   delta   diff   key false )  ;   }  ,115,4,should,1,[65]
4459,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,should log delta diff,public boolean   (  )  {  return prefixed config . get boolean ( should   log   delta   diff   key false )  ;   }  ,115,4,log,2,[74]
4460,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,should log delta diff,public boolean   (  )  {  return prefixed config . get boolean ( should   log   delta   diff   key false )  ;   }  ,115,4,delta,3,[80]
4461,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,should log delta diff,public boolean   (  )  {  return prefixed config . get boolean ( should   log   delta   diff   key false )  ;   }  ,115,4,diff,4,[88]
4462,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,should on demand update status change,public boolean   (  )  {  return prefixed config . get boolean ( should   ondemand   update   status   key true )  ;   }  ,122,6,should,1,[65]
4463,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,should on demand update status change,public boolean   (  )  {  return prefixed config . get boolean ( should   ondemand   update   status   key true )  ;   }  ,122,6,on,2,"[43, 74]"
4464,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,should on demand update status change,public boolean   (  )  {  return prefixed config . get boolean ( should   ondemand   update   status   key true )  ;   }  ,122,6,demand,3,[76]
4465,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,should on demand update status change,public boolean   (  )  {  return prefixed config . get boolean ( should   ondemand   update   status   key true )  ;   }  ,122,6,update,4,[85]
4466,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,should on demand update status change,public boolean   (  )  {  return prefixed config . get boolean ( should   ondemand   update   status   key true )  ;   }  ,122,6,status,5,[94]
4467,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,should on demand update status change,public boolean   (  )  {  return prefixed config . get boolean ( should   ondemand   update   status   key true )  ;   }  ,122,6,change,6,[]
4468,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,should prefer same zone eureka,public boolean   (  )  {  return prefixed config . get boolean ( should   prefer   same   zone   server   key true )  ;   }  ,125,5,should,1,[65]
4469,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,should prefer same zone eureka,public boolean   (  )  {  return prefixed config . get boolean ( should   prefer   same   zone   server   key true )  ;   }  ,125,5,prefer,2,[74]
4470,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,should prefer same zone eureka,public boolean   (  )  {  return prefixed config . get boolean ( should   prefer   same   zone   server   key true )  ;   }  ,125,5,same,3,[83]
4471,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,should prefer same zone eureka,public boolean   (  )  {  return prefixed config . get boolean ( should   prefer   same   zone   server   key true )  ;   }  ,125,5,zone,4,[90]
4472,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,should prefer same zone eureka,public boolean   (  )  {  return prefixed config . get boolean ( should   prefer   same   zone   server   key true )  ;   }  ,125,5,eureka,5,[]
4473,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,should register with eureka,public boolean   (  )  {  return prefixed config . get boolean ( registration   enabled   key true )  ;   }  ,109,4,should,1,[]
4474,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,should register with eureka,public boolean   (  )  {  return prefixed config . get boolean ( registration   enabled   key true )  ;   }  ,109,4,register,2,[]
4475,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,should register with eureka,public boolean   (  )  {  return prefixed config . get boolean ( registration   enabled   key true )  ;   }  ,109,4,with,3,[]
4476,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,should register with eureka,public boolean   (  )  {  return prefixed config . get boolean ( registration   enabled   key true )  ;   }  ,109,4,eureka,4,[]
4477,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,should unregister on shutdown,public boolean   (  )  {  return prefixed config . get boolean ( should   unregister   on   shutdown   key true )  ;   }  ,122,4,should,1,[65]
4478,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,should unregister on shutdown,public boolean   (  )  {  return prefixed config . get boolean ( should   unregister   on   shutdown   key true )  ;   }  ,122,4,unregister,2,[74]
4479,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,should unregister on shutdown,public boolean   (  )  {  return prefixed config . get boolean ( should   unregister   on   shutdown   key true )  ;   }  ,122,4,on,3,"[43, 87]"
4480,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,should unregister on shutdown,public boolean   (  )  {  return prefixed config . get boolean ( should   unregister   on   shutdown   key true )  ;   }  ,122,4,shutdown,4,[92]
4481,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,should use dns for fetching service urls,public boolean   (  )  {  return prefixed config . get boolean ( should   use   dns   key false )  ;   }  ,106,7,should,1,[65]
4482,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,should use dns for fetching service urls,public boolean   (  )  {  return prefixed config . get boolean ( should   use   dns   key false )  ;   }  ,106,7,use,2,[74]
4483,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,should use dns for fetching service urls,public boolean   (  )  {  return prefixed config . get boolean ( should   use   dns   key false )  ;   }  ,106,7,dns,3,[80]
4484,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,should use dns for fetching service urls,public boolean   (  )  {  return prefixed config . get boolean ( should   use   dns   key false )  ;   }  ,106,7,for,4,[]
4485,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,should use dns for fetching service urls,public boolean   (  )  {  return prefixed config . get boolean ( should   use   dns   key false )  ;   }  ,106,7,fetching,5,[]
4486,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,should use dns for fetching service urls,public boolean   (  )  {  return prefixed config . get boolean ( should   use   dns   key false )  ;   }  ,106,7,service,6,[]
4487,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,should use dns for fetching service urls,public boolean   (  )  {  return prefixed config . get boolean ( should   use   dns   key false )  ;   }  ,106,7,urls,7,[]
4488,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\guice\EurekaClientModule.java,bind eureka client config namespace,protected  linked binding builder <  string >    (  )  {  return bind (  string . class )  . annotated with (  names . named (  internal eureka client module . client   config   namespace   key )  )  ;   }  ,207,5,bind,1,"[18, 65]"
4489,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\guice\EurekaClientModule.java,bind eureka client config namespace,protected  linked binding builder <  string >    (  )  {  return bind (  string . class )  . annotated with (  names . named (  internal eureka client module . client   config   namespace   key )  )  ;   }  ,207,5,eureka,2,[137]
4490,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\guice\EurekaClientModule.java,bind eureka client config namespace,protected  linked binding builder <  string >    (  )  {  return bind (  string . class )  . annotated with (  names . named (  internal eureka client module . client   config   namespace   key )  )  ;   }  ,207,5,client,3,"[144, 160]"
4491,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\guice\EurekaClientModule.java,bind eureka client config namespace,protected  linked binding builder <  string >    (  )  {  return bind (  string . class )  . annotated with (  names . named (  internal eureka client module . client   config   namespace   key )  )  ;   }  ,207,5,config,4,[169]
4492,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\guice\EurekaClientModule.java,bind eureka client config namespace,protected  linked binding builder <  string >    (  )  {  return bind (  string . class )  . annotated with (  names . named (  internal eureka client module . client   config   namespace   key )  )  ;   }  ,207,5,namespace,5,[178]
4493,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\guice\EurekaClientModule.java,bind eureka instance config factory,protected  linked binding builder <  eureka instance config factory >    (  )  {  return bind (  eureka instance config factory . class )  ;   }  ,146,5,bind,1,"[18, 89]"
4494,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\guice\EurekaClientModule.java,bind eureka instance config factory,protected  linked binding builder <  eureka instance config factory >    (  )  {  return bind (  eureka instance config factory . class )  ;   }  ,146,5,eureka,2,"[37, 97]"
4495,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\guice\EurekaClientModule.java,bind eureka instance config factory,protected  linked binding builder <  eureka instance config factory >    (  )  {  return bind (  eureka instance config factory . class )  ;   }  ,146,5,instance,3,"[44, 104]"
4496,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\guice\EurekaClientModule.java,bind eureka instance config factory,protected  linked binding builder <  eureka instance config factory >    (  )  {  return bind (  eureka instance config factory . class )  ;   }  ,146,5,config,4,"[53, 113]"
4497,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\guice\EurekaClientModule.java,bind eureka instance config factory,protected  linked binding builder <  eureka instance config factory >    (  )  {  return bind (  eureka instance config factory . class )  ;   }  ,146,5,factory,5,"[60, 120]"
4498,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\guice\EurekaClientModule.java,bind eureka instance config namespace,protected  linked binding builder <  string >    (  )  {  return bind (  string . class )  . annotated with (  names . named (  internal eureka client module . instance   config   namespace   key )  )  ;   }  ,209,5,bind,1,"[18, 65]"
4499,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\guice\EurekaClientModule.java,bind eureka instance config namespace,protected  linked binding builder <  string >    (  )  {  return bind (  string . class )  . annotated with (  names . named (  internal eureka client module . instance   config   namespace   key )  )  ;   }  ,209,5,eureka,2,[137]
4500,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\guice\EurekaClientModule.java,bind eureka instance config namespace,protected  linked binding builder <  string >    (  )  {  return bind (  string . class )  . annotated with (  names . named (  internal eureka client module . instance   config   namespace   key )  )  ;   }  ,209,5,instance,3,[160]
4501,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\guice\EurekaClientModule.java,bind eureka instance config namespace,protected  linked binding builder <  string >    (  )  {  return bind (  string . class )  . annotated with (  names . named (  internal eureka client module . instance   config   namespace   key )  )  ;   }  ,209,5,config,4,[171]
4502,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\guice\EurekaClientModule.java,bind eureka instance config namespace,protected  linked binding builder <  string >    (  )  {  return bind (  string . class )  . annotated with (  names . named (  internal eureka client module . instance   config   namespace   key )  )  ;   }  ,209,5,namespace,5,[180]
4503,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\guice\EurekaClientModule.java,configure,@ override protected void   (  )  {  install ( new  internal eureka client module (  )  )  ;  configure eureka (  )  ;   }  ,124,1,configure,1,[94]
4504,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\shared\transport\EurekaArchaius2TransportConfig.java, eureka archaius transport config,public   (  config config instance  string parent namespace  string sub namespace )  {  this . config instance = config instance ;  this . prefixed config = new  internal prefixed config ( config instance parent namespace sub namespace )  ;   }  ,246,4,eureka,1,[]
4505,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\shared\transport\EurekaArchaius2TransportConfig.java, eureka archaius transport config,public   (  config config instance  string parent namespace  string sub namespace )  {  this . config instance = config instance ;  this . prefixed config = new  internal prefixed config ( config instance parent namespace sub namespace )  ;   }  ,246,4,archaius,2,[]
4506,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\shared\transport\EurekaArchaius2TransportConfig.java, eureka archaius transport config,public   (  config config instance  string parent namespace  string sub namespace )  {  this . config instance = config instance ;  this . prefixed config = new  internal prefixed config ( config instance parent namespace sub namespace )  ;   }  ,246,4,transport,3,[]
4507,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\shared\transport\EurekaArchaius2TransportConfig.java, eureka archaius transport config,public   (  config config instance  string parent namespace  string sub namespace )  {  this . config instance = config instance ;  this . prefixed config = new  internal prefixed config ( config instance parent namespace sub namespace )  ;   }  ,246,4,config,4,"[12, 19, 95, 113, 148, 180, 189]"
4508,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\shared\transport\EurekaArchaius2TransportConfig.java,applications resolver use ip,@ override public boolean   (  )  {  return prefixed config . get boolean ( application   resolver   use   ip   key false )  ;   }  ,132,4,applications,1,[]
4509,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\shared\transport\EurekaArchaius2TransportConfig.java,applications resolver use ip,@ override public boolean   (  )  {  return prefixed config . get boolean ( application   resolver   use   ip   key false )  ;   }  ,132,4,resolver,2,[90]
4510,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\shared\transport\EurekaArchaius2TransportConfig.java,applications resolver use ip,@ override public boolean   (  )  {  return prefixed config . get boolean ( application   resolver   use   ip   key false )  ;   }  ,132,4,use,3,[101]
4511,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\shared\transport\EurekaArchaius2TransportConfig.java,applications resolver use ip,@ override public boolean   (  )  {  return prefixed config . get boolean ( application   resolver   use   ip   key false )  ;   }  ,132,4,ip,4,[107]
4512,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\shared\transport\EurekaArchaius2TransportConfig.java,get applications resolver data staleness threshold seconds,@ override public int   (  )  {  return prefixed config . get integer ( data   staleness   threshold   key  values . data   staleness   trheshold )  ;   }  ,156,7,get,1,[58]
4513,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\shared\transport\EurekaArchaius2TransportConfig.java,get applications resolver data staleness threshold seconds,@ override public int   (  )  {  return prefixed config . get integer ( data   staleness   threshold   key  values . data   staleness   trheshold )  ;   }  ,156,7,applications,2,[]
4514,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\shared\transport\EurekaArchaius2TransportConfig.java,get applications resolver data staleness threshold seconds,@ override public int   (  )  {  return prefixed config . get integer ( data   staleness   threshold   key  values . data   staleness   trheshold )  ;   }  ,156,7,resolver,3,[]
4515,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\shared\transport\EurekaArchaius2TransportConfig.java,get applications resolver data staleness threshold seconds,@ override public int   (  )  {  return prefixed config . get integer ( data   staleness   threshold   key  values . data   staleness   trheshold )  ;   }  ,156,7,data,4,"[72, 117]"
4516,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\shared\transport\EurekaArchaius2TransportConfig.java,get applications resolver data staleness threshold seconds,@ override public int   (  )  {  return prefixed config . get integer ( data   staleness   threshold   key  values . data   staleness   trheshold )  ;   }  ,156,7,staleness,5,"[79, 124]"
4517,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\shared\transport\EurekaArchaius2TransportConfig.java,get applications resolver data staleness threshold seconds,@ override public int   (  )  {  return prefixed config . get integer ( data   staleness   threshold   key  values . data   staleness   trheshold )  ;   }  ,156,7,threshold,6,[91]
4518,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\shared\transport\EurekaArchaius2TransportConfig.java,get applications resolver data staleness threshold seconds,@ override public int   (  )  {  return prefixed config . get integer ( data   staleness   threshold   key  values . data   staleness   trheshold )  ;   }  ,156,7,seconds,7,[]
4519,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\shared\transport\EurekaArchaius2TransportConfig.java,get async executor thread pool size,@ override public int   (  )  {  return prefixed config . get integer ( async   executor   threadpool   size   key  values . async   executor   threadpool   size )  ;   }  ,172,6,get,1,[58]
4520,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\shared\transport\EurekaArchaius2TransportConfig.java,get async executor thread pool size,@ override public int   (  )  {  return prefixed config . get integer ( async   executor   threadpool   size   key  values . async   executor   threadpool   size )  ;   }  ,172,6,async,2,"[72, 125]"
4521,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\shared\transport\EurekaArchaius2TransportConfig.java,get async executor thread pool size,@ override public int   (  )  {  return prefixed config . get integer ( async   executor   threadpool   size   key  values . async   executor   threadpool   size )  ;   }  ,172,6,executor,3,"[80, 133]"
4522,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\shared\transport\EurekaArchaius2TransportConfig.java,get async executor thread pool size,@ override public int   (  )  {  return prefixed config . get integer ( async   executor   threadpool   size   key  values . async   executor   threadpool   size )  ;   }  ,172,6,thread,4,"[91, 144]"
4523,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\shared\transport\EurekaArchaius2TransportConfig.java,get async executor thread pool size,@ override public int   (  )  {  return prefixed config . get integer ( async   executor   threadpool   size   key  values . async   executor   threadpool   size )  ;   }  ,172,6,pool,5,"[97, 150]"
4524,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\shared\transport\EurekaArchaius2TransportConfig.java,get async executor thread pool size,@ override public int   (  )  {  return prefixed config . get integer ( async   executor   threadpool   size   key  values . async   executor   threadpool   size )  ;   }  ,172,6,size,6,"[104, 157]"
4525,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\shared\transport\EurekaArchaius2TransportConfig.java,get async resolver refresh interval ms,@ override public int   (  )  {  return prefixed config . get integer ( async   resolver   refresh   interval   key  values . async   resolver   refresh   interval )  ;   }  ,174,6,get,1,[58]
4526,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\shared\transport\EurekaArchaius2TransportConfig.java,get async resolver refresh interval ms,@ override public int   (  )  {  return prefixed config . get integer ( async   resolver   refresh   interval   key  values . async   resolver   refresh   interval )  ;   }  ,174,6,async,2,"[72, 126]"
4527,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\shared\transport\EurekaArchaius2TransportConfig.java,get async resolver refresh interval ms,@ override public int   (  )  {  return prefixed config . get integer ( async   resolver   refresh   interval   key  values . async   resolver   refresh   interval )  ;   }  ,174,6,resolver,3,"[80, 134]"
4528,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\shared\transport\EurekaArchaius2TransportConfig.java,get async resolver refresh interval ms,@ override public int   (  )  {  return prefixed config . get integer ( async   resolver   refresh   interval   key  values . async   resolver   refresh   interval )  ;   }  ,174,6,refresh,4,"[91, 145]"
4529,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\shared\transport\EurekaArchaius2TransportConfig.java,get async resolver refresh interval ms,@ override public int   (  )  {  return prefixed config . get integer ( async   resolver   refresh   interval   key  values . async   resolver   refresh   interval )  ;   }  ,174,6,interval,5,"[101, 155]"
4530,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\shared\transport\EurekaArchaius2TransportConfig.java,get async resolver refresh interval ms,@ override public int   (  )  {  return prefixed config . get integer ( async   resolver   refresh   interval   key  values . async   resolver   refresh   interval )  ;   }  ,174,6,ms,6,[]
4531,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\shared\transport\EurekaArchaius2TransportConfig.java,get async resolver warm up timeout ms,@ override public int   (  )  {  return prefixed config . get integer ( async   resolver   warmup   timeout   key  values . async   resolver   warmup   timeout )  ;   }  ,170,7,get,1,[58]
4532,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\shared\transport\EurekaArchaius2TransportConfig.java,get async resolver warm up timeout ms,@ override public int   (  )  {  return prefixed config . get integer ( async   resolver   warmup   timeout   key  values . async   resolver   warmup   timeout )  ;   }  ,170,7,async,2,"[72, 124]"
4533,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\shared\transport\EurekaArchaius2TransportConfig.java,get async resolver warm up timeout ms,@ override public int   (  )  {  return prefixed config . get integer ( async   resolver   warmup   timeout   key  values . async   resolver   warmup   timeout )  ;   }  ,170,7,resolver,3,"[80, 132]"
4534,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\shared\transport\EurekaArchaius2TransportConfig.java,get async resolver warm up timeout ms,@ override public int   (  )  {  return prefixed config . get integer ( async   resolver   warmup   timeout   key  values . async   resolver   warmup   timeout )  ;   }  ,170,7,warm,4,"[91, 143]"
4535,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\shared\transport\EurekaArchaius2TransportConfig.java,get async resolver warm up timeout ms,@ override public int   (  )  {  return prefixed config . get integer ( async   resolver   warmup   timeout   key  values . async   resolver   warmup   timeout )  ;   }  ,170,7,up,5,"[95, 147]"
4536,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\shared\transport\EurekaArchaius2TransportConfig.java,get async resolver warm up timeout ms,@ override public int   (  )  {  return prefixed config . get integer ( async   resolver   warmup   timeout   key  values . async   resolver   warmup   timeout )  ;   }  ,170,7,timeout,6,"[100, 152]"
4537,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\shared\transport\EurekaArchaius2TransportConfig.java,get async resolver warm up timeout ms,@ override public int   (  )  {  return prefixed config . get integer ( async   resolver   warmup   timeout   key  values . async   resolver   warmup   timeout )  ;   }  ,170,7,ms,7,[]
4538,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\shared\transport\EurekaArchaius2TransportConfig.java,get bootstrap resolver strategy,@ override public  string   (  )  {  return prefixed config . get string ( bootstrap   resolver   strategy   key null )  ;   }  ,128,4,get,1,[62]
4539,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\shared\transport\EurekaArchaius2TransportConfig.java,get bootstrap resolver strategy,@ override public  string   (  )  {  return prefixed config . get string ( bootstrap   resolver   strategy   key null )  ;   }  ,128,4,bootstrap,2,[75]
4540,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\shared\transport\EurekaArchaius2TransportConfig.java,get bootstrap resolver strategy,@ override public  string   (  )  {  return prefixed config . get string ( bootstrap   resolver   strategy   key null )  ;   }  ,128,4,resolver,3,[87]
4541,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\shared\transport\EurekaArchaius2TransportConfig.java,get bootstrap resolver strategy,@ override public  string   (  )  {  return prefixed config . get string ( bootstrap   resolver   strategy   key null )  ;   }  ,128,4,strategy,4,[98]
4542,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\shared\transport\EurekaArchaius2TransportConfig.java,get read cluster vip,@ override public  string   (  )  {  return prefixed config . get string ( read   cluster   vip   key null )  ;   }  ,117,4,get,1,[62]
4543,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\shared\transport\EurekaArchaius2TransportConfig.java,get read cluster vip,@ override public  string   (  )  {  return prefixed config . get string ( read   cluster   vip   key null )  ;   }  ,117,4,read,2,[75]
4544,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\shared\transport\EurekaArchaius2TransportConfig.java,get read cluster vip,@ override public  string   (  )  {  return prefixed config . get string ( read   cluster   vip   key null )  ;   }  ,117,4,cluster,3,[82]
4545,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\shared\transport\EurekaArchaius2TransportConfig.java,get read cluster vip,@ override public  string   (  )  {  return prefixed config . get string ( read   cluster   vip   key null )  ;   }  ,117,4,vip,4,[92]
4546,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\shared\transport\EurekaArchaius2TransportConfig.java,get retryable client quarantine refresh percentage,@ override public double   (  )  {  return prefixed config . get double ( quarantine   refresh   percentage   key  values . quarantine   refresh   percentage )  ;   }  ,168,6,get,1,[61]
4547,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\shared\transport\EurekaArchaius2TransportConfig.java,get retryable client quarantine refresh percentage,@ override public double   (  )  {  return prefixed config . get double ( quarantine   refresh   percentage   key  values . quarantine   refresh   percentage )  ;   }  ,168,6,retryable,2,[]
4548,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\shared\transport\EurekaArchaius2TransportConfig.java,get retryable client quarantine refresh percentage,@ override public double   (  )  {  return prefixed config . get double ( quarantine   refresh   percentage   key  values . quarantine   refresh   percentage )  ;   }  ,168,6,client,3,[]
4549,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\shared\transport\EurekaArchaius2TransportConfig.java,get retryable client quarantine refresh percentage,@ override public double   (  )  {  return prefixed config . get double ( quarantine   refresh   percentage   key  values . quarantine   refresh   percentage )  ;   }  ,168,6,quarantine,4,"[74, 124]"
4550,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\shared\transport\EurekaArchaius2TransportConfig.java,get retryable client quarantine refresh percentage,@ override public double   (  )  {  return prefixed config . get double ( quarantine   refresh   percentage   key  values . quarantine   refresh   percentage )  ;   }  ,168,6,refresh,5,"[87, 137]"
4551,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\shared\transport\EurekaArchaius2TransportConfig.java,get retryable client quarantine refresh percentage,@ override public double   (  )  {  return prefixed config . get double ( quarantine   refresh   percentage   key  values . quarantine   refresh   percentage )  ;   }  ,168,6,percentage,6,"[97, 147]"
4552,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\shared\transport\EurekaArchaius2TransportConfig.java,get sessioned client reconnect interval seconds,@ override public int   (  )  {  return prefixed config . get integer ( session   reconnect   interval   key  values . session   reconnect   interval )  ;   }  ,160,6,get,1,[58]
4553,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\shared\transport\EurekaArchaius2TransportConfig.java,get sessioned client reconnect interval seconds,@ override public int   (  )  {  return prefixed config . get integer ( session   reconnect   interval   key  values . session   reconnect   interval )  ;   }  ,160,6,sessioned,2,[]
4554,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\shared\transport\EurekaArchaius2TransportConfig.java,get sessioned client reconnect interval seconds,@ override public int   (  )  {  return prefixed config . get integer ( session   reconnect   interval   key  values . session   reconnect   interval )  ;   }  ,160,6,client,3,[]
4555,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\shared\transport\EurekaArchaius2TransportConfig.java,get sessioned client reconnect interval seconds,@ override public int   (  )  {  return prefixed config . get integer ( session   reconnect   interval   key  values . session   reconnect   interval )  ;   }  ,160,6,reconnect,4,"[82, 129]"
4556,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\shared\transport\EurekaArchaius2TransportConfig.java,get sessioned client reconnect interval seconds,@ override public int   (  )  {  return prefixed config . get integer ( session   reconnect   interval   key  values . session   reconnect   interval )  ;   }  ,160,6,interval,5,"[94, 141]"
4557,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\shared\transport\EurekaArchaius2TransportConfig.java,get sessioned client reconnect interval seconds,@ override public int   (  )  {  return prefixed config . get integer ( session   reconnect   interval   key  values . session   reconnect   interval )  ;   }  ,160,6,seconds,6,[]
4558,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\shared\transport\EurekaArchaius2TransportConfig.java,get write cluster vip,@ override public  string   (  )  {  return prefixed config . get string ( write   cluster   vip   key null )  ;   }  ,118,4,get,1,[62]
4559,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\shared\transport\EurekaArchaius2TransportConfig.java,get write cluster vip,@ override public  string   (  )  {  return prefixed config . get string ( write   cluster   vip   key null )  ;   }  ,118,4,write,2,[75]
4560,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\shared\transport\EurekaArchaius2TransportConfig.java,get write cluster vip,@ override public  string   (  )  {  return prefixed config . get string ( write   cluster   vip   key null )  ;   }  ,118,4,cluster,3,[83]
4561,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\shared\transport\EurekaArchaius2TransportConfig.java,get write cluster vip,@ override public  string   (  )  {  return prefixed config . get string ( write   cluster   vip   key null )  ;   }  ,118,4,vip,4,[93]
4562,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\shared\transport\EurekaArchaius2TransportConfig.java,use bootstrap resolver for query,@ override public boolean   (  )  {  return prefixed config . get boolean ( use   bootstrap   resolver   for   query true )  ;   }  ,132,5,use,1,[76]
4563,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\shared\transport\EurekaArchaius2TransportConfig.java,use bootstrap resolver for query,@ override public boolean   (  )  {  return prefixed config . get boolean ( use   bootstrap   resolver   for   query true )  ;   }  ,132,5,bootstrap,2,[82]
4564,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\shared\transport\EurekaArchaius2TransportConfig.java,use bootstrap resolver for query,@ override public boolean   (  )  {  return prefixed config . get boolean ( use   bootstrap   resolver   for   query true )  ;   }  ,132,5,resolver,3,[94]
4565,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\shared\transport\EurekaArchaius2TransportConfig.java,use bootstrap resolver for query,@ override public boolean   (  )  {  return prefixed config . get boolean ( use   bootstrap   resolver   for   query true )  ;   }  ,132,5,for,4,[105]
4566,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\shared\transport\EurekaArchaius2TransportConfig.java,use bootstrap resolver for query,@ override public boolean   (  )  {  return prefixed config . get boolean ( use   bootstrap   resolver   for   query true )  ;   }  ,132,5,query,5,[111]
4567,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\test\java\com\netflix\appinfo\Ec2EurekaArchaius2InstanceConfigTest.java,create config,private  ec2 eureka archaius2 instance config   (  amazon info info )  {  return new  ec2 eureka archaius2 instance config (  map config . from (  collections .  <  string  string > empty map (  )  )  info )  {  @ override public  string[] get default address resolution order (  )  {  return new  string[] { public hostname . name (  )  local ipv4 . name (  )  }  ;   }  @ override public  string get host name (  boolean refresh )  {  return dummy default ;   }   }   ;   }  ,477,2,create,1,[]
4568,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\test\java\com\netflix\appinfo\Ec2EurekaArchaius2InstanceConfigTest.java,create config,private  ec2 eureka archaius2 instance config   (  amazon info info )  {  return new  ec2 eureka archaius2 instance config (  map config . from (  collections .  <  string  string > empty map (  )  )  info )  {  @ override public  string[] get default address resolution order (  )  {  return new  string[] { public hostname . name (  )  local ipv4 . name (  )  }  ;   }  @ override public  string get host name (  boolean refresh )  {  return dummy default ;   }   }   ;   }  ,477,2,config,2,"[39, 116, 130]"
4569,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\test\java\com\netflix\appinfo\Ec2EurekaArchaius2InstanceConfigTest.java,get default address resolution order,@ override public  string[]   (  )  {  return new  string[] { public hostname . name (  )  local ipv4 . name (  )  }  ;   }  ,125,5,get,1,[]
4570,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\test\java\com\netflix\appinfo\Ec2EurekaArchaius2InstanceConfigTest.java,get default address resolution order,@ override public  string[]   (  )  {  return new  string[] { public hostname . name (  )  local ipv4 . name (  )  }  ;   }  ,125,5,default,2,[]
4571,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\test\java\com\netflix\appinfo\Ec2EurekaArchaius2InstanceConfigTest.java,get default address resolution order,@ override public  string[]   (  )  {  return new  string[] { public hostname . name (  )  local ipv4 . name (  )  }  ;   }  ,125,5,address,3,[]
4572,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\test\java\com\netflix\appinfo\Ec2EurekaArchaius2InstanceConfigTest.java,get default address resolution order,@ override public  string[]   (  )  {  return new  string[] { public hostname . name (  )  local ipv4 . name (  )  }  ;   }  ,125,5,resolution,4,[]
4573,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\test\java\com\netflix\appinfo\Ec2EurekaArchaius2InstanceConfigTest.java,get default address resolution order,@ override public  string[]   (  )  {  return new  string[] { public hostname . name (  )  local ipv4 . name (  )  }  ;   }  ,125,5,order,5,[]
4574,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\test\java\com\netflix\appinfo\Ec2EurekaArchaius2InstanceConfigTest.java,get host name,@ override public  string   ( boolean refresh )  {  return dummy default ;   }  ,80,3,get,1,[]
4575,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\test\java\com\netflix\appinfo\Ec2EurekaArchaius2InstanceConfigTest.java,get host name,@ override public  string   ( boolean refresh )  {  return dummy default ;   }  ,80,3,host,2,[]
4576,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\test\java\com\netflix\appinfo\Ec2EurekaArchaius2InstanceConfigTest.java,get host name,@ override public  string   ( boolean refresh )  {  return dummy default ;   }  ,80,3,name,3,[]
4577,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\test\java\com\netflix\appinfo\Ec2EurekaArchaius2InstanceConfigTest.java,set up,@ before public void   (  )  {  instance info =  instance info generator . take one (  )  ;   }  ,97,2,set,1,[]
4578,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\test\java\com\netflix\appinfo\Ec2EurekaArchaius2InstanceConfigTest.java,set up,@ before public void   (  )  {  instance info =  instance info generator . take one (  )  ;   }  ,97,2,up,2,[]
4579,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\test\java\com\netflix\appinfo\Ec2EurekaArchaius2InstanceConfigTest.java,test resolve default address,@ test public void   (  )  {   amazon info info =  (  amazon info ) instance info . get data center info (  )  ;  config = create config ( info )  ;  assert that ( config . resolve default address ( false )  is ( info . get ( public hostname )  )  )  ;  i,255,4,test,1,[2]
4580,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\test\java\com\netflix\appinfo\Ec2EurekaArchaius2InstanceConfigTest.java,test resolve default address,@ test public void   (  )  {   amazon info info =  (  amazon info ) instance info . get data center info (  )  ;  config = create config ( info )  ;  assert that ( config . resolve default address ( false )  is ( info . get ( public hostname )  )  )  ;  i,255,4,resolve,2,[173]
4581,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\test\java\com\netflix\appinfo\Ec2EurekaArchaius2InstanceConfigTest.java,test resolve default address,@ test public void   (  )  {   amazon info info =  (  amazon info ) instance info . get data center info (  )  ;  config = create config ( info )  ;  assert that ( config . resolve default address ( false )  is ( info . get ( public hostname )  )  )  ;  i,255,4,default,3,[181]
4582,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\test\java\com\netflix\appinfo\Ec2EurekaArchaius2InstanceConfigTest.java,test resolve default address,@ test public void   (  )  {   amazon info info =  (  amazon info ) instance info . get data center info (  )  ;  config = create config ( info )  ;  assert that ( config . resolve default address ( false )  is ( info . get ( public hostname )  )  )  ;  i,255,4,address,4,[189]
4583,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\internal\util\InternalPrefixedConfig.java, internal prefixed config,"public   (  config config  string .  .  .  namespaces )  {  this . config = config ;   string temp namespace = """" ;  for  (   string namespace : namespaces )   {  if  ( namespace  !  =  null &&  ! namespace . is empty (  )  )   {  temp namespace +  = namespace . ends with ( "" . "" )   ?  namespace : namespace  +  "" . "" ;   }   }  this . namespace = temp namespace ;   }  ",372,3,internal,1,[]
4584,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\internal\util\InternalPrefixedConfig.java, internal prefixed config,"public   (  config config  string .  .  .  namespaces )  {  this . config = config ;   string temp namespace = """" ;  for  (   string namespace : namespaces )   {  if  ( namespace  !  =  null &&  ! namespace . is empty (  )  )   {  temp namespace +  = namespace . ends with ( "" . "" )   ?  namespace : namespace  +  "" . "" ;   }   }  this . namespace = temp namespace ;   }  ",372,3,prefixed,2,[]
4585,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\internal\util\InternalPrefixedConfig.java, internal prefixed config,"public   (  config config  string .  .  .  namespaces )  {  this . config = config ;   string temp namespace = """" ;  for  (   string namespace : namespaces )   {  if  ( namespace  !  =  null &&  ! namespace . is empty (  )  )   {  temp namespace +  = namespace . ends with ( "" . "" )   ?  namespace : namespace  +  "" . "" ;   }   }  this . namespace = temp namespace ;   }  ",372,3,config,3,"[12, 19, 67, 76]"
4586,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\internal\util\InternalPrefixedConfig.java,get boolean,public  boolean   (  string key  boolean default value )  {  return config . get boolean ( namespace  +  key default value )  ;   }  ,133,2,get,1,[77]
4587,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\internal\util\InternalPrefixedConfig.java,get boolean,public  boolean   (  string key  boolean default value )  {  return config . get boolean ( namespace  +  key default value )  ;   }  ,133,2,boolean,2,"[8, 33, 81]"
4588,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\internal\util\InternalPrefixedConfig.java,get double,public  double   (  string key  double default value )  {  return config . get double ( namespace  +  key default value )  ;   }  ,130,2,get,1,[75]
4589,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\internal\util\InternalPrefixedConfig.java,get double,public  double   (  string key  double default value )  {  return config . get double ( namespace  +  key default value )  ;   }  ,130,2,double,2,"[8, 32, 79]"
4590,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\internal\util\InternalPrefixedConfig.java,get integer,public  integer   (  string key  integer default value )  {  return config . get integer ( namespace  +  key default value )  ;   }  ,133,2,get,1,[77]
4591,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\internal\util\InternalPrefixedConfig.java,get integer,public  integer   (  string key  integer default value )  {  return config . get integer ( namespace  +  key default value )  ;   }  ,133,2,integer,2,"[8, 33, 81]"
4592,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\internal\util\InternalPrefixedConfig.java,get keys,"public  iterator <  string >    (  )  {  final  string prefix regex = ""^""  +  namespace ;  final  iterator <  string >  internal iterator = config . get keys ( namespace )  ;  return new  iterator <  string >  (  )  {  @ override public boolean has next (  )  {  return internal iterator . has next (  )  ;   }  @ override public  string next (  )  {   string value = internal iterator . next (  )  ;  return value . replace first ( prefix regex """" )  ;   }   }   ;   }  ",471,2,get,1,[149]
4593,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\internal\util\InternalPrefixedConfig.java,get keys,"public  iterator <  string >    (  )  {  final  string prefix regex = ""^""  +  namespace ;  final  iterator <  string >  internal iterator = config . get keys ( namespace )  ;  return new  iterator <  string >  (  )  {  @ override public boolean has next (  )  {  return internal iterator . has next (  )  ;   }  @ override public  string next (  )  {   string value = internal iterator . next (  )  ;  return value . replace first ( prefix regex """" )  ;   }   }   ;   }  ",471,2,keys,2,[153]
4594,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\internal\util\InternalPrefixedConfig.java,get long,public  long   (  string key  long default value )  {  return config . get long ( namespace  +  key default value )  ;   }  ,124,2,get,1,[71]
4595,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\internal\util\InternalPrefixedConfig.java,get long,public  long   (  string key  long default value )  {  return config . get long ( namespace  +  key default value )  ;   }  ,124,2,long,2,"[8, 30, 75]"
4596,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\internal\util\InternalPrefixedConfig.java,get namespace,public  string   (  )  {  return namespace ;   }  ,50,2,get,1,[]
4597,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\internal\util\InternalPrefixedConfig.java,get namespace,public  string   (  )  {  return namespace ;   }  ,50,2,namespace,2,[33]
4598,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\internal\util\InternalPrefixedConfig.java,get string,public  string   (  string key  string default value )  {  return config . get string ( namespace  +  key default value )  ;   }  ,130,2,get,1,[75]
4599,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\internal\util\InternalPrefixedConfig.java,get string,public  string   (  string key  string default value )  {  return config . get string ( namespace  +  key default value )  ;   }  ,130,2,string,2,"[8, 20, 32, 79]"
4600,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\internal\util\InternalPrefixedConfig.java,has next,@ override public boolean   (  )  {  return internal iterator . has next (  )  ;   }  ,86,2,has,1,[64]
4601,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\internal\util\InternalPrefixedConfig.java,has next,@ override public boolean   (  )  {  return internal iterator . has next (  )  ;   }  ,86,2,next,2,[68]
4602,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\internal\util\InternalPrefixedConfig.java,next,"@ override public  string   (  )  {   string value = internal iterator . next (  )  ;  return value . replace first ( prefix regex """" )  ;   }  ",144,1,next,1,[73]
4603,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\test\java\com\netflix\discovery\guice\Ec2EurekaClientModuleTest.java,configure archaius,"@ override protected void   (  )  {  bind application configuration override (  )  . to instance (  map config . builder (  )  . put ( ""eureka . region"" ""default"" )  . put ( ""eureka . should fetch registry"" ""false"" )  . put ( ""eureka . registration . enab",255,2,configure,1,[]
4604,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\test\java\com\netflix\discovery\guice\Ec2EurekaClientModuleTest.java,configure archaius,"@ override protected void   (  )  {  bind application configuration override (  )  . to instance (  map config . builder (  )  . put ( ""eureka . region"" ""default"" )  . put ( ""eureka . should fetch registry"" ""false"" )  . put ( ""eureka . registration . enab",255,2,archaius,2,[]
4605,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\test\java\com\netflix\discovery\guice\Ec2EurekaClientModuleTest.java,set up,@ before public void   (  )  throws  exception  {  injector =  injector builder . from modules ( new  archaius module (  )  {  @ override protected void configure archaius (  )  {  bind application configuration override (  )  . to instance (  map config ,255,2,set,1,[]
4606,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\test\java\com\netflix\discovery\guice\Ec2EurekaClientModuleTest.java,set up,@ before public void   (  )  throws  exception  {  injector =  injector builder . from modules ( new  archaius module (  )  {  @ override protected void configure archaius (  )  {  bind application configuration override (  )  . to instance (  map config ,255,2,up,2,[]
4607,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\test\java\com\netflix\discovery\guice\Ec2EurekaClientModuleTest.java,tear down,@ after public void   (  )  {  if  ( injector  !  =  null )   {  injector . shutdown (  )  ;   }   }  ,102,2,tear,1,[]
4608,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\test\java\com\netflix\discovery\guice\Ec2EurekaClientModuleTest.java,tear down,@ after public void   (  )  {  if  ( injector  !  =  null )   {  injector . shutdown (  )  ;   }   }  ,102,2,down,2,[80]
4609,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\test\java\com\netflix\discovery\guice\Ec2EurekaClientModuleTest.java,testdi,"@ suppress warnings ( ""deprecation"" )  @ test public void   (  )  {   instance info instance info = injector . get instance (  instance info . class )  ;   assert . assert equals (  application info manager . get instance (  )  . get info (  )  instance i",255,1,testdi,1,[]
4610,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\guice\InternalEurekaClientModule.java,configure,@ override protected void   (  )  {  require binding (  config . class )  ;  bind (  application info manager . class )  . as eager singleton (  )  ;  bind (  vip address resolver . class )  . to (  archaius2 vip address resolver . class )  ;  bind (  ins,255,1,configure,1,[]
4611,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\guice\InternalEurekaClientModule.java,equals,@ override public boolean   (  object obj )  {  return obj  !  =  null && get class (  )  . equals ( obj . get class (  )  )  ;   }  ,133,1,equals,1,[92]
4612,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\guice\InternalEurekaClientModule.java,get client config namespace," string   (  )  {  return client config namespace  =  =  null  ?  ""eureka"" : client config namespace ;   }  ",108,4,get,1,[]
4613,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\guice\InternalEurekaClientModule.java,get client config namespace," string   (  )  {  return client config namespace  =  =  null  ?  ""eureka"" : client config namespace ;   }  ",108,4,client,2,"[26, 77]"
4614,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\guice\InternalEurekaClientModule.java,get client config namespace," string   (  )  {  return client config namespace  =  =  null  ?  ""eureka"" : client config namespace ;   }  ",108,4,config,3,"[33, 84]"
4615,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\guice\InternalEurekaClientModule.java,get client config namespace," string   (  )  {  return client config namespace  =  =  null  ?  ""eureka"" : client config namespace ;   }  ",108,4,namespace,4,"[40, 91]"
4616,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\guice\InternalEurekaClientModule.java,get eureka client config,@ provides @ singleton public  eureka client config   (  config config  eureka transport config transport config  module config module config  eureka config loader config loader )  {  return new  eureka archaius2 client config ( config transport config mo,255,4,get,1,[]
4617,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\guice\InternalEurekaClientModule.java,get eureka client config,@ provides @ singleton public  eureka client config   (  config config  eureka transport config transport config  module config module config  eureka config loader config loader )  {  return new  eureka archaius2 client config ( config transport config mo,255,4,eureka,2,"[31, 72, 143, 196]"
4618,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\guice\InternalEurekaClientModule.java,get eureka client config,@ provides @ singleton public  eureka client config   (  config config  eureka transport config transport config  module config module config  eureka config loader config loader )  {  return new  eureka archaius2 client config ( config transport config mo,255,4,client,3,"[38, 213]"
4619,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\guice\InternalEurekaClientModule.java,get eureka client config,@ provides @ singleton public  eureka client config   (  config config  eureka transport config transport config  module config module config  eureka config loader config loader )  {  return new  eureka archaius2 client config ( config transport config mo,255,4,config,4,"[45, 57, 64, 89, 106, 121, 135, 150, 164, 220, 229, 246]"
4620,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\guice\InternalEurekaClientModule.java,get eureka instance config provider,@ provides @ singleton public  eureka instance config   (  module config module config  eureka config loader config loader )  {  return module config . get instance config provider (  )  . get (  )  ;   }  ,206,5,get,1,"[152, 189]"
4621,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\guice\InternalEurekaClientModule.java,get eureka instance config provider,@ provides @ singleton public  eureka instance config   (  module config module config  eureka config loader config loader )  {  return module config . get instance config provider (  )  . get (  )  ;   }  ,206,5,eureka,2,"[31, 88]"
4622,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\guice\InternalEurekaClientModule.java,get eureka instance config provider,@ provides @ singleton public  eureka instance config   (  module config module config  eureka config loader config loader )  {  return module config . get instance config provider (  )  . get (  )  ;   }  ,206,5,instance,3,"[38, 156]"
4623,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\guice\InternalEurekaClientModule.java,get eureka instance config provider,@ provides @ singleton public  eureka instance config   (  module config module config  eureka config loader config loader )  {  return module config . get instance config provider (  )  . get (  )  ;   }  ,206,5,config,4,"[47, 66, 80, 95, 109, 143, 165]"
4624,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\guice\InternalEurekaClientModule.java,get eureka instance config provider,@ provides @ singleton public  eureka instance config   (  module config module config  eureka config loader config loader )  {  return module config . get instance config provider (  )  . get (  )  ;   }  ,206,5,provider,5,[172]
4625,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\guice\InternalEurekaClientModule.java,get eureka transport config,@ provides @ singleton public  eureka transport config   (  config config  module config module config  eureka config loader config loader )  {  return new  eureka archaius2 transport config ( config module config . get client config namespace (  )  )  ; ,255,4,get,1,[216]
4626,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\guice\InternalEurekaClientModule.java,get eureka transport config,@ provides @ singleton public  eureka transport config   (  config config  module config module config  eureka config loader config loader )  {  return new  eureka archaius2 transport config ( config module config . get client config namespace (  )  )  ; ,255,4,eureka,2,"[31, 104, 157]"
4627,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\guice\InternalEurekaClientModule.java,get eureka transport config,@ provides @ singleton public  eureka transport config   (  config config  module config module config  eureka config loader config loader )  {  return new  eureka archaius2 transport config ( config module config . get client config namespace (  )  )  ; ,255,4,transport,3,"[38, 174]"
4628,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\guice\InternalEurekaClientModule.java,get eureka transport config,@ provides @ singleton public  eureka transport config   (  config config  module config module config  eureka config loader config loader )  {  return new  eureka archaius2 transport config ( config module config . get client config namespace (  )  )  ; ,255,4,config,4,"[48, 60, 67, 82, 96, 111, 125, 184, 193, 207, 227]"
4629,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\guice\InternalEurekaClientModule.java,get instance config namespace," string   (  )  {  return instance config namespace  =  =  null  ?  ""eureka"" : instance config namespace ;   }  ",112,4,get,1,[]
4630,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\guice\InternalEurekaClientModule.java,get instance config namespace," string   (  )  {  return instance config namespace  =  =  null  ?  ""eureka"" : instance config namespace ;   }  ",112,4,instance,2,"[26, 79]"
4631,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\guice\InternalEurekaClientModule.java,get instance config namespace," string   (  )  {  return instance config namespace  =  =  null  ?  ""eureka"" : instance config namespace ;   }  ",112,4,config,3,"[35, 88]"
4632,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\guice\InternalEurekaClientModule.java,get instance config namespace," string   (  )  {  return instance config namespace  =  =  null  ?  ""eureka"" : instance config namespace ;   }  ",112,4,namespace,4,"[42, 95]"
4633,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\guice\InternalEurekaClientModule.java,get instance config provider, eureka instance config factory   (  )  {  return instance config factory  =  =  null  ?  new  composite instance config factory ( config get instance config namespace (  )  )  : instance config factory ;   }  ,210,4,get,1,[138]
4634,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\guice\InternalEurekaClientModule.java,get instance config provider, eureka instance config factory   (  )  {  return instance config factory  =  =  null  ?  new  composite instance config factory ( config get instance config namespace (  )  )  : instance config factory ;   }  ,210,4,instance,2,"[8, 50, 105, 142, 179]"
4635,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\guice\InternalEurekaClientModule.java,get instance config provider, eureka instance config factory   (  )  {  return instance config factory  =  =  null  ?  new  composite instance config factory ( config get instance config namespace (  )  )  : instance config factory ;   }  ,210,4,config,3,"[17, 59, 114, 131, 151, 188]"
4636,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\guice\InternalEurekaClientModule.java,get instance config provider, eureka instance config factory   (  )  {  return instance config factory  =  =  null  ?  new  composite instance config factory ( config get instance config namespace (  )  )  : instance config factory ;   }  ,210,4,provider,4,[]
4637,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\guice\InternalEurekaClientModule.java,hash code,@ override public int   (  )  {  return get class (  )  . hash code (  )  ;   }  ,81,2,hash,1,[58]
4638,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\guice\InternalEurekaClientModule.java,hash code,@ override public int   (  )  {  return get class (  )  . hash code (  )  ;   }  ,81,2,code,2,[63]
4639,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\test\java\com\netflix\discovery\guice\EurekaClientModuleConfigurationTest.java,configure,@ override protected void   (  )  {  bind (  application info manager . class )  . to instance ( mock info manager )  ;   }  ,125,1,configure,1,[]
4640,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\test\java\com\netflix\discovery\guice\EurekaClientModuleConfigurationTest.java,configure eureka,@ override protected void   (  )  {  bind eureka instance config factory (  )  . to instance ( mock factory )  ;   }  ,118,2,configure,1,[]
4641,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\test\java\com\netflix\discovery\guice\EurekaClientModuleConfigurationTest.java,configure eureka,@ override protected void   (  )  {  bind eureka instance config factory (  )  . to instance ( mock factory )  ;   }  ,118,2,eureka,2,[42]
4642,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\test\java\com\netflix\discovery\guice\EurekaClientModuleConfigurationTest.java,test bind eureka instance config factory,@ test public void   (  )  {  final  eureka instance config factory mock factory =  mockito . mock (  eureka instance config factory . class )  ;  final  eureka instance config mock config =  mockito . mock (  eureka instance config . class )  ;  final  a,255,6,test,1,[2]
4643,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\test\java\com\netflix\discovery\guice\EurekaClientModuleConfigurationTest.java,test bind eureka instance config factory,@ test public void   (  )  {  final  eureka instance config factory mock factory =  mockito . mock (  eureka instance config factory . class )  ;  final  eureka instance config mock config =  mockito . mock (  eureka instance config . class )  ;  final  a,255,6,bind,2,[]
4644,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\test\java\com\netflix\discovery\guice\EurekaClientModuleConfigurationTest.java,test bind eureka instance config factory,@ test public void   (  )  {  final  eureka instance config factory mock factory =  mockito . mock (  eureka instance config factory . class )  ;  final  eureka instance config mock config =  mockito . mock (  eureka instance config . class )  ;  final  a,255,6,eureka,3,"[37, 102, 154, 210]"
4645,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\test\java\com\netflix\discovery\guice\EurekaClientModuleConfigurationTest.java,test bind eureka instance config factory,@ test public void   (  )  {  final  eureka instance config factory mock factory =  mockito . mock (  eureka instance config factory . class )  ;  final  eureka instance config mock config =  mockito . mock (  eureka instance config . class )  ;  final  a,255,6,instance,4,"[44, 109, 161, 217]"
4646,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\test\java\com\netflix\discovery\guice\EurekaClientModuleConfigurationTest.java,test bind eureka instance config factory,@ test public void   (  )  {  final  eureka instance config factory mock factory =  mockito . mock (  eureka instance config factory . class )  ;  final  eureka instance config mock config =  mockito . mock (  eureka instance config . class )  ;  final  a,255,6,config,5,"[53, 118, 170, 182, 226]"
4647,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\test\java\com\netflix\discovery\guice\EurekaClientModuleConfigurationTest.java,test bind eureka instance config factory,@ test public void   (  )  {  final  eureka instance config factory mock factory =  mockito . mock (  eureka instance config factory . class )  ;  final  eureka instance config mock config =  mockito . mock (  eureka instance config . class )  ;  final  a,255,6,factory,6,"[60, 73, 125]"
4648,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\test\java\com\netflix\discovery\guice\NonEc2EurekaClientModuleTest.java,configure archaius,"@ override protected void   (  )  {  bind application configuration override (  )  . to instance (  map config . builder (  )  . put ( ""eureka . region"" ""default"" )  . put ( ""eureka . should fetch registry"" ""false"" )  . put ( ""eureka . registration . enab",255,2,configure,1,[]
4649,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\test\java\com\netflix\discovery\guice\NonEc2EurekaClientModuleTest.java,configure archaius,"@ override protected void   (  )  {  bind application configuration override (  )  . to instance (  map config . builder (  )  . put ( ""eureka . region"" ""default"" )  . put ( ""eureka . should fetch registry"" ""false"" )  . put ( ""eureka . registration . enab",255,2,archaius,2,[]
4650,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\test\java\com\netflix\discovery\guice\NonEc2EurekaClientModuleTest.java,set up,@ before public void   (  )  throws  exception  {  injector =  injector builder . from modules ( new  archaius module (  )  {  @ override protected void configure archaius (  )  {  bind application configuration override (  )  . to instance (  map config ,255,2,set,1,[]
4651,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\test\java\com\netflix\discovery\guice\NonEc2EurekaClientModuleTest.java,set up,@ before public void   (  )  throws  exception  {  injector =  injector builder . from modules ( new  archaius module (  )  {  @ override protected void configure archaius (  )  {  bind application configuration override (  )  . to instance (  map config ,255,2,up,2,[]
4652,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\test\java\com\netflix\discovery\guice\NonEc2EurekaClientModuleTest.java,tear down,@ after public void   (  )  {  if  ( injector  !  =  null )   {  injector . shutdown (  )  ;   }   }  ,102,2,tear,1,[]
4653,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\test\java\com\netflix\discovery\guice\NonEc2EurekaClientModuleTest.java,tear down,@ after public void   (  )  {  if  ( injector  !  =  null )   {  injector . shutdown (  )  ;   }   }  ,102,2,down,2,[80]
4654,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\test\java\com\netflix\discovery\guice\NonEc2EurekaClientModuleTest.java,testdi,"@ suppress warnings ( ""deprecation"" )  @ test public void   (  )  {   instance info instance info = injector . get instance (  instance info . class )  ;   assert . assert equals (  application info manager . get instance (  )  . get info (  )  instance i",255,1,testdi,1,[]
4655,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\guice\Jersey2EurekaModule.java,configure,@ override protected void   (  )  {  bind (  application info manager . class )  . as eager singleton (  )  ;  bind (  eureka instance config . class )  . to provider (  cloud instance config provider . class )  . in (  scopes . singleton )  ;  bind (  eu,255,1,configure,1,[]
4656,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\guice\Jersey2EurekaModule.java,equals,@ override public boolean   (  object obj )  {  return obj  !  =  null && get class (  )  . equals ( obj . get class (  )  )  ;   }  ,133,1,equals,1,[92]
4657,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\guice\Jersey2EurekaModule.java,get transport client factories,@ provides public  transport client factories   (  )  {  return  jersey2 transport client factories . get instance (  )  ;   }  ,128,4,get,1,[102]
4658,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\guice\Jersey2EurekaModule.java,get transport client factories,@ provides public  transport client factories   (  )  {  return  jersey2 transport client factories . get instance (  )  ;   }  ,128,4,transport,2,"[19, 73]"
4659,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\guice\Jersey2EurekaModule.java,get transport client factories,@ provides public  transport client factories   (  )  {  return  jersey2 transport client factories . get instance (  )  ;   }  ,128,4,client,3,"[29, 83]"
4660,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\guice\Jersey2EurekaModule.java,get transport client factories,@ provides public  transport client factories   (  )  {  return  jersey2 transport client factories . get instance (  )  ;   }  ,128,4,factories,4,"[36, 90]"
4661,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\guice\Jersey2EurekaModule.java,hash code,@ override public int   (  )  {  return get class (  )  . hash code (  )  ;   }  ,81,2,hash,1,[58]
4662,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\guice\Jersey2EurekaModule.java,hash code,@ override public int   (  )  {  return get class (  )  . hash code (  )  ;   }  ,81,2,code,2,[63]
4663,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\test\java\com\netflix\discovery\internal\util\InternalPrefixedConfigTest.java,test prefixes,"@ test public void   (  )  {   config config instance =  mockito . mock (  config . class )  ;   internal prefixed config config = new  internal prefixed config ( config instance )  ;   assert . assert equals ( """" config . get namespace (  )  )  ;  config",255,2,test,1,[2]
4664,C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\test\java\com\netflix\discovery\internal\util\InternalPrefixedConfigTest.java,test prefixes,"@ test public void   (  )  {   config config instance =  mockito . mock (  config . class )  ;   internal prefixed config config = new  internal prefixed config ( config instance )  ;   assert . assert equals ( """" config . get namespace (  )  )  ;  config",255,2,prefixes,2,[]
4665,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\AbstractJersey2EurekaHttpClient.java, abstract jersey eureka http client,"public   (  client jersey client  string service url )  {  this . jersey client = jersey client ;  this . service url = service url ;   string local user name = null ;   string local password = null ;  try  {  uri serviceuri = new uri ( service url )  ;  if  ( serviceuri . get user info (  )   !  =  null )   {   string[] credentials = serviceuri . get user info (  )  . split ( "":"" )  ;  if  ( credentials . length  =  =  2 )   {  local user name = credentials[0] ;  local password = credentials[1] ;   }   }   }  catch  (  uri syntax exception ignore )   {   }  this . user name = local user name ;  this . password = local password ;   }  ",643,5,abstract,1,[]
4666,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\AbstractJersey2EurekaHttpClient.java, abstract jersey eureka http client,"public   (  client jersey client  string service url )  {  this . jersey client = jersey client ;  this . service url = service url ;   string local user name = null ;   string local password = null ;  try  {  uri serviceuri = new uri ( service url )  ;  if  ( serviceuri . get user info (  )   !  =  null )   {   string[] credentials = serviceuri . get user info (  )  . split ( "":"" )  ;  if  ( credentials . length  =  =  2 )   {  local user name = credentials[0] ;  local password = credentials[1] ;   }   }   }  catch  (  uri syntax exception ignore )   {   }  this . user name = local user name ;  this . password = local password ;   }  ",643,5,jersey,2,"[19, 66, 82]"
4667,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\AbstractJersey2EurekaHttpClient.java, abstract jersey eureka http client,"public   (  client jersey client  string service url )  {  this . jersey client = jersey client ;  this . service url = service url ;   string local user name = null ;   string local password = null ;  try  {  uri serviceuri = new uri ( service url )  ;  if  ( serviceuri . get user info (  )   !  =  null )   {   string[] credentials = serviceuri . get user info (  )  . split ( "":"" )  ;  if  ( credentials . length  =  =  2 )   {  local user name = credentials[0] ;  local password = credentials[1] ;   }   }   }  catch  (  uri syntax exception ignore )   {   }  this . user name = local user name ;  this . password = local password ;   }  ",643,5,eureka,3,[]
4668,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\AbstractJersey2EurekaHttpClient.java, abstract jersey eureka http client,"public   (  client jersey client  string service url )  {  this . jersey client = jersey client ;  this . service url = service url ;   string local user name = null ;   string local password = null ;  try  {  uri serviceuri = new uri ( service url )  ;  if  ( serviceuri . get user info (  )   !  =  null )   {   string[] credentials = serviceuri . get user info (  )  . split ( "":"" )  ;  if  ( credentials . length  =  =  2 )   {  local user name = credentials[0] ;  local password = credentials[1] ;   }   }   }  catch  (  uri syntax exception ignore )   {   }  this . user name = local user name ;  this . password = local password ;   }  ",643,5,http,4,[]
4669,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\AbstractJersey2EurekaHttpClient.java, abstract jersey eureka http client,"public   (  client jersey client  string service url )  {  this . jersey client = jersey client ;  this . service url = service url ;   string local user name = null ;   string local password = null ;  try  {  uri serviceuri = new uri ( service url )  ;  if  ( serviceuri . get user info (  )   !  =  null )   {   string[] credentials = serviceuri . get user info (  )  . split ( "":"" )  ;  if  ( credentials . length  =  =  2 )   {  local user name = credentials[0] ;  local password = credentials[1] ;   }   }   }  catch  (  uri syntax exception ignore )   {   }  this . user name = local user name ;  this . password = local password ;   }  ",643,5,client,5,"[12, 26, 73, 89]"
4670,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\EurekaIdentityHeaderFilter.java, eureka identity header filter,public   (  abstract eureka identity auth info )  {  this . auth info = auth info ;   }  ,89,4,eureka,1,[21]
4671,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\EurekaIdentityHeaderFilter.java, eureka identity header filter,public   (  abstract eureka identity auth info )  {  this . auth info = auth info ;   }  ,89,4,identity,2,[28]
4672,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\EurekaIdentityHeaderFilter.java, eureka identity header filter,public   (  abstract eureka identity auth info )  {  this . auth info = auth info ;   }  ,89,4,header,3,[]
4673,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\EurekaIdentityHeaderFilter.java, eureka identity header filter,public   (  abstract eureka identity auth info )  {  this . auth info = auth info ;   }  ,89,4,filter,4,[]
4674,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\EurekaIdentityHeaderFilter.java,filter,@ override public void   (  client request context request context )  throws io exception  {  if  ( auth info  !  =  null )   {  request context . get headers (  )  . put single (  abstract eureka identity . auth   name   header   key auth info . get name,255,1,filter,1,[]
4675,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\EurekaJersey2ClientImpl.java, connection cleaner task,"private   ( int connection idle timeout )  {  this . connection idle timeout = connection idle timeout ;   monitor config .  builder monitor config builder =  monitor config . builder ( "" eureka -  connection -  cleaner -  time"" )  ;  execution time stats = new  basic timer ( monitor config builder . build (  )  )  ;  cleanup failed = new  basic counter (  monitor config . builder ( "" eureka -  connection -  cleaner -  failure"" )  . build (  )  )  ;  try  {   monitors . register object ( this )  ;   }  catch  (   exception e )   {  s   logger . error ( "" unable to register with servo . "" e )  ;   }   }  ",611,3,connection,1,"[16, 53, 79, 198, 398]"
4676,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\EurekaJersey2ClientImpl.java, connection cleaner task,"private   ( int connection idle timeout )  {  this . connection idle timeout = connection idle timeout ;   monitor config .  builder monitor config builder =  monitor config . builder ( "" eureka -  connection -  cleaner -  time"" )  ;  execution time stats = new  basic timer ( monitor config builder . build (  )  )  ;  cleanup failed = new  basic counter (  monitor config . builder ( "" eureka -  connection -  cleaner -  failure"" )  . build (  )  )  ;  try  {   monitors . register object ( this )  ;   }  catch  (   exception e )   {  s   logger . error ( "" unable to register with servo . "" e )  ;   }   }  ",611,3,cleaner,2,"[212, 412]"
4677,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\EurekaJersey2ClientImpl.java, connection cleaner task,"private   ( int connection idle timeout )  {  this . connection idle timeout = connection idle timeout ;   monitor config .  builder monitor config builder =  monitor config . builder ( "" eureka -  connection -  cleaner -  time"" )  ;  execution time stats = new  basic timer ( monitor config builder . build (  )  )  ;  cleanup failed = new  basic counter (  monitor config . builder ( "" eureka -  connection -  cleaner -  failure"" )  . build (  )  )  ;  try  {   monitors . register object ( this )  ;   }  catch  (   exception e )   {  s   logger . error ( "" unable to register with servo . "" e )  ;   }   }  ",611,3,task,3,[]
4678,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\EurekaJersey2ClientImpl.java, eureka jersey client impl,"public   ( int connection timeout int read timeout final int connection idle timeout  client config client config )  {  try  {  jersey client config = client config ;  jersey client config . register (  discovery jersey provider . class )  ;  jersey client config . connector provider ( new  apache connector provider (  )  )  ;  jersey client config . property (  client properties . connect   timeout connection timeout )  ;  jersey client config . property (  client properties . read   timeout read timeout )  ;  apache http client =  client builder . new client ( jersey client config )  ;  connection cleaner task = new  connection cleaner task ( connection idle timeout )  ;  eureka conn cleaner . schedule with fixed delay ( connection cleaner task http   connection   cleaner   interval   ms http   connection   cleaner   interval   ms  time unit . milliseconds )  ;   }  catch  (   throwable e )   {  throw new  runtime exception ( "" cannot create  jersey2 client"" e )  ;   }   }  ",991,4,eureka,1,[683]
4679,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\EurekaJersey2ClientImpl.java, eureka jersey client impl,"public   ( int connection timeout int read timeout final int connection idle timeout  client config client config )  {  try  {  jersey client config = client config ;  jersey client config . register (  discovery jersey provider . class )  ;  jersey client config . connector provider ( new  apache connector provider (  )  )  ;  jersey client config . property (  client properties . connect   timeout connection timeout )  ;  jersey client config . property (  client properties . read   timeout read timeout )  ;  apache http client =  client builder . new client ( jersey client config )  ;  connection cleaner task = new  connection cleaner task ( connection idle timeout )  ;  eureka conn cleaner . schedule with fixed delay ( connection cleaner task http   connection   cleaner   interval   ms http   connection   cleaner   interval   ms  time unit . milliseconds )  ;   }  catch  (   throwable e )   {  throw new  runtime exception ( "" cannot create  jersey2 client"" e )  ;   }   }  ",991,4,jersey,2,"[128, 168, 213, 243, 330, 428, 569, 959]"
4680,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\EurekaJersey2ClientImpl.java, eureka jersey client impl,"public   ( int connection timeout int read timeout final int connection idle timeout  client config client config )  {  try  {  jersey client config = client config ;  jersey client config . register (  discovery jersey provider . class )  ;  jersey client config . connector provider ( new  apache connector provider (  )  )  ;  jersey client config . property (  client properties . connect   timeout connection timeout )  ;  jersey client config . property (  client properties . read   timeout read timeout )  ;  apache http client =  client builder . new client ( jersey client config )  ;  connection cleaner task = new  connection cleaner task ( connection idle timeout )  ;  eureka conn cleaner . schedule with fixed delay ( connection cleaner task http   connection   cleaner   interval   ms http   connection   cleaner   interval   ms  time unit . milliseconds )  ;   }  catch  (   throwable e )   {  throw new  runtime exception ( "" cannot create  jersey2 client"" e )  ;   }   }  ",991,4,client,3,"[86, 100, 135, 151, 175, 250, 337, 365, 435, 463, 529, 539, 560, 576, 967]"
4681,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\EurekaJersey2ClientImpl.java, eureka jersey client impl,"public   ( int connection timeout int read timeout final int connection idle timeout  client config client config )  {  try  {  jersey client config = client config ;  jersey client config . register (  discovery jersey provider . class )  ;  jersey client config . connector provider ( new  apache connector provider (  )  )  ;  jersey client config . property (  client properties . connect   timeout connection timeout )  ;  jersey client config . property (  client properties . read   timeout read timeout )  ;  apache http client =  client builder . new client ( jersey client config )  ;  connection cleaner task = new  connection cleaner task ( connection idle timeout )  ;  eureka conn cleaner . schedule with fixed delay ( connection cleaner task http   connection   cleaner   interval   ms http   connection   cleaner   interval   ms  time unit . milliseconds )  ;   }  catch  (   throwable e )   {  throw new  runtime exception ( "" cannot create  jersey2 client"" e )  ;   }   }  ",991,4,impl,4,[]
4682,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\EurekaJersey2ClientImpl.java, my default apache http client config,"  (  )  {   pooling http client connection manager cm ;  if  ( systemssl )   {  cm = create system sslcm (  )  ;   }  else if  ( trust store file name  !  =  null )   {  cm = create custom sslcm (  )  ;   }  else  {  cm = new  pooling http client connection manager (  )  ;   }  if  ( proxy host  !  =  null )   {  add proxy configuration (  )  ;   }   discovery jersey provider discovery jersey provider = new  discovery jersey provider ( encoder wrapper decoder wrapper )  ;  register ( discovery jersey provider )  ;  cm . set default max per route ( max connections per host )  ;  cm . set max total ( max total connections )  ;  property (  apache client properties . connection   manager cm )  ;   string full user agent name =  ( user agent  =  =  null  ?  client name : user agent )   +  "" / v""  +  build version (  )  ;  property (  core protocolp names . user   agent full user agent name )  ;  property (  client properties . follow   redirects  boolean . false )  ;  property (  clientp names . handle   redirects  boolean . false )  ;   }  ",1053,6,my,1,[]
4683,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\EurekaJersey2ClientImpl.java, my default apache http client config,"  (  )  {   pooling http client connection manager cm ;  if  ( systemssl )   {  cm = create system sslcm (  )  ;   }  else if  ( trust store file name  !  =  null )   {  cm = create custom sslcm (  )  ;   }  else  {  cm = new  pooling http client connection manager (  )  ;   }  if  ( proxy host  !  =  null )   {  add proxy configuration (  )  ;   }   discovery jersey provider discovery jersey provider = new  discovery jersey provider ( encoder wrapper decoder wrapper )  ;  register ( discovery jersey provider )  ;  cm . set default max per route ( max connections per host )  ;  cm . set max total ( max total connections )  ;  property (  apache client properties . connection   manager cm )  ;   string full user agent name =  ( user agent  =  =  null  ?  client name : user agent )   +  "" / v""  +  build version (  )  ;  property (  core protocolp names . user   agent full user agent name )  ;  property (  client properties . follow   redirects  boolean . false )  ;  property (  clientp names . handle   redirects  boolean . false )  ;   }  ",1053,6,default,2,[530]
4684,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\EurekaJersey2ClientImpl.java, my default apache http client config,"  (  )  {   pooling http client connection manager cm ;  if  ( systemssl )   {  cm = create system sslcm (  )  ;   }  else if  ( trust store file name  !  =  null )   {  cm = create custom sslcm (  )  ;   }  else  {  cm = new  pooling http client connection manager (  )  ;   }  if  ( proxy host  !  =  null )   {  add proxy configuration (  )  ;   }   discovery jersey provider discovery jersey provider = new  discovery jersey provider ( encoder wrapper decoder wrapper )  ;  register ( discovery jersey provider )  ;  cm . set default max per route ( max connections per host )  ;  cm . set max total ( max total connections )  ;  property (  apache client properties . connection   manager cm )  ;   string full user agent name =  ( user agent  =  =  null  ?  client name : user agent )   +  "" / v""  +  build version (  )  ;  property (  core protocolp names . user   agent full user agent name )  ;  property (  client properties . follow   redirects  boolean . false )  ;  property (  clientp names . handle   redirects  boolean . false )  ;   }  ",1053,6,apache,3,[646]
4685,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\EurekaJersey2ClientImpl.java, my default apache http client config,"  (  )  {   pooling http client connection manager cm ;  if  ( systemssl )   {  cm = create system sslcm (  )  ;   }  else if  ( trust store file name  !  =  null )   {  cm = create custom sslcm (  )  ;   }  else  {  cm = new  pooling http client connection manager (  )  ;   }  if  ( proxy host  !  =  null )   {  add proxy configuration (  )  ;   }   discovery jersey provider discovery jersey provider = new  discovery jersey provider ( encoder wrapper decoder wrapper )  ;  register ( discovery jersey provider )  ;  cm . set default max per route ( max connections per host )  ;  cm . set max total ( max total connections )  ;  property (  apache client properties . connection   manager cm )  ;   string full user agent name =  ( user agent  =  =  null  ?  client name : user agent )   +  "" / v""  +  build version (  )  ;  property (  core protocolp names . user   agent full user agent name )  ;  property (  client properties . follow   redirects  boolean . false )  ;  property (  clientp names . handle   redirects  boolean . false )  ;   }  ",1053,6,http,4,"[20, 235]"
4686,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\EurekaJersey2ClientImpl.java, my default apache http client config,"  (  )  {   pooling http client connection manager cm ;  if  ( systemssl )   {  cm = create system sslcm (  )  ;   }  else if  ( trust store file name  !  =  null )   {  cm = create custom sslcm (  )  ;   }  else  {  cm = new  pooling http client connection manager (  )  ;   }  if  ( proxy host  !  =  null )   {  add proxy configuration (  )  ;   }   discovery jersey provider discovery jersey provider = new  discovery jersey provider ( encoder wrapper decoder wrapper )  ;  register ( discovery jersey provider )  ;  cm . set default max per route ( max connections per host )  ;  cm . set max total ( max total connections )  ;  property (  apache client properties . connection   manager cm )  ;   string full user agent name =  ( user agent  =  =  null  ?  client name : user agent )   +  "" / v""  +  build version (  )  ;  property (  core protocolp names . user   agent full user agent name )  ;  property (  client properties . follow   redirects  boolean . false )  ;  property (  clientp names . handle   redirects  boolean . false )  ;   }  ",1053,6,client,5,"[25, 240, 653, 764, 917, 991]"
4687,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\EurekaJersey2ClientImpl.java, my default apache http client config,"  (  )  {   pooling http client connection manager cm ;  if  ( systemssl )   {  cm = create system sslcm (  )  ;   }  else if  ( trust store file name  !  =  null )   {  cm = create custom sslcm (  )  ;   }  else  {  cm = new  pooling http client connection manager (  )  ;   }  if  ( proxy host  !  =  null )   {  add proxy configuration (  )  ;   }   discovery jersey provider discovery jersey provider = new  discovery jersey provider ( encoder wrapper decoder wrapper )  ;  register ( discovery jersey provider )  ;  cm . set default max per route ( max connections per host )  ;  cm . set max total ( max total connections )  ;  property (  apache client properties . connection   manager cm )  ;   string full user agent name =  ( user agent  =  =  null  ?  client name : user agent )   +  "" / v""  +  build version (  )  ;  property (  core protocolp names . user   agent full user agent name )  ;  property (  client properties . follow   redirects  boolean . false )  ;  property (  clientp names . handle   redirects  boolean . false )  ;   }  ",1053,6,config,6,[325]
4688,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\EurekaJersey2ClientImpl.java,add proxy configuration,"private void   (  )  {  if  ( proxy user name  !  =  null && proxy password  !  =  null )   {  property (  client properties . proxy   username proxy user name )  ;  property (  client properties . proxy   password proxy password )  ;   }  else  {  property (  client properties . proxy   username ""guest"" )  ;  property (  client properties . proxy   password ""guest"" )  ;   }  property (  client properties . proxy   uri ""http: /  / ""  +  proxy host  +  "":"" +  proxy port )  ;   }  ",484,3,add,1,[]
4689,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\EurekaJersey2ClientImpl.java,add proxy configuration,"private void   (  )  {  if  ( proxy user name  !  =  null && proxy password  !  =  null )   {  property (  client properties . proxy   username proxy user name )  ;  property (  client properties . proxy   password proxy password )  ;   }  else  {  property (  client properties . proxy   username ""guest"" )  ;  property (  client properties . proxy   password ""guest"" )  ;   }  property (  client properties . proxy   uri ""http: /  / ""  +  proxy host  +  "":"" +  proxy port )  ;   }  ",484,3,proxy,2,"[30, 61, 127, 144, 198, 215, 281, 344, 411, 441, 463]"
4690,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\EurekaJersey2ClientImpl.java,add proxy configuration,"private void   (  )  {  if  ( proxy user name  !  =  null && proxy password  !  =  null )   {  property (  client properties . proxy   username proxy user name )  ;  property (  client properties . proxy   password proxy password )  ;   }  else  {  property (  client properties . proxy   username ""guest"" )  ;  property (  client properties . proxy   password ""guest"" )  ;   }  property (  client properties . proxy   uri ""http: /  / ""  +  proxy host  +  "":"" +  proxy port )  ;   }  ",484,3,configuration,3,[]
4691,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\EurekaJersey2ClientImpl.java,build,"public  eureka jersey2 client   (  )  {   my default apache http client4 config config = new  my default apache http client4 config (  )  ;  try  {  return new  eureka jersey2 client impl ( connection timeout read timeout connection idle timeout config )  ;   }  catch  (   throwable e )   {  throw new  runtime exception ( "" cannot create  jersey client "" e )  ;   }   }  ",373,1,build,1,[]
4692,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\EurekaJersey2ClientImpl.java,create custom sslcm,"private  pooling http client connection manager   (  )  {   file input stream fin = null ;  try  {  ssl context ssl context = ssl context . get instance ( protocol   scheme )  ;   key store ssl key store =  key store . get instance ( keystore   type )  ;  fin = new  file input stream ( trust store file name )  ;  ssl key store . load ( fin trust store password . to char array (  )  )  ;   trust manager factory factory =  trust manager factory . get instance (  trust manager factory . get default algorithm (  )  )  ;  factory . init ( ssl key store )  ;   trust manager[] trust managers = factory . get trust managers (  )  ;  ssl context . init ( null trust managers null )  ;   connection socket factory socket factory = new ssl connection socket factory ( ssl context ssl connection socket factory . allow   all   hostname   verifier )  ;   registry registry =  registry builder .  <  connection socket factory > create (  )  . register ( protocol socket factory )  . build (  )  ;  return new  pooling http client connection manager ( registry )  ;   }  catch  (   exception ex )   {  throw new  illegal state exception ( ""ssl configuration issue"" ex )  ;   }  finally  {  if  ( fin  !  =  null )   {  try  {  fin . close (  )  ;   }  catch  (  io exception ignore )   {   }   }   }   }  ",1297,3,create,1,[921]
4693,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\EurekaJersey2ClientImpl.java,create custom sslcm,"private  pooling http client connection manager   (  )  {   file input stream fin = null ;  try  {  ssl context ssl context = ssl context . get instance ( protocol   scheme )  ;   key store ssl key store =  key store . get instance ( keystore   type )  ;  fin = new  file input stream ( trust store file name )  ;  ssl key store . load ( fin trust store password . to char array (  )  )  ;   trust manager factory factory =  trust manager factory . get instance (  trust manager factory . get default algorithm (  )  )  ;  factory . init ( ssl key store )  ;   trust manager[] trust managers = factory . get trust managers (  )  ;  ssl context . init ( null trust managers null )  ;   connection socket factory socket factory = new ssl connection socket factory ( ssl context ssl connection socket factory . allow   all   hostname   verifier )  ;   registry registry =  registry builder .  <  connection socket factory > create (  )  . register ( protocol socket factory )  . build (  )  ;  return new  pooling http client connection manager ( registry )  ;   }  catch  (   exception ex )   {  throw new  illegal state exception ( ""ssl configuration issue"" ex )  ;   }  finally  {  if  ( fin  !  =  null )   {  try  {  fin . close (  )  ;   }  catch  (  io exception ignore )   {   }   }   }   }  ",1297,3,custom,2,[]
4694,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\EurekaJersey2ClientImpl.java,create custom sslcm,"private  pooling http client connection manager   (  )  {   file input stream fin = null ;  try  {  ssl context ssl context = ssl context . get instance ( protocol   scheme )  ;   key store ssl key store =  key store . get instance ( keystore   type )  ;  fin = new  file input stream ( trust store file name )  ;  ssl key store . load ( fin trust store password . to char array (  )  )  ;   trust manager factory factory =  trust manager factory . get instance (  trust manager factory . get default algorithm (  )  )  ;  factory . init ( ssl key store )  ;   trust manager[] trust managers = factory . get trust managers (  )  ;  ssl context . init ( null trust managers null )  ;   connection socket factory socket factory = new ssl connection socket factory ( ssl context ssl connection socket factory . allow   all   hostname   verifier )  ;   registry registry =  registry builder .  <  connection socket factory > create (  )  . register ( protocol socket factory )  . build (  )  ;  return new  pooling http client connection manager ( registry )  ;   }  catch  (   exception ex )   {  throw new  illegal state exception ( ""ssl configuration issue"" ex )  ;   }  finally  {  if  ( fin  !  =  null )   {  try  {  fin . close (  )  ;   }  catch  (  io exception ignore )   {   }   }   }   }  ",1297,3,sslcm,3,[]
4695,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\EurekaJersey2ClientImpl.java,create system sslcm,private  pooling http client connection manager   (  )  {   connection socket factory socket factory = ssl connection socket factory . get system socket factory (  )  ;   registry registry =  registry builder .  <  connection socket factory > create (  )  . register ( protocol socket factory )  . build (  )  ;  return new  pooling http client connection manager ( registry )  ;   }  ,385,3,create,1,[243]
4696,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\EurekaJersey2ClientImpl.java,create system sslcm,private  pooling http client connection manager   (  )  {   connection socket factory socket factory = ssl connection socket factory . get system socket factory (  )  ;   registry registry =  registry builder .  <  connection socket factory > create (  )  . register ( protocol socket factory )  . build (  )  ;  return new  pooling http client connection manager ( registry )  ;   }  ,385,3,system,2,[139]
4697,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\EurekaJersey2ClientImpl.java,create system sslcm,private  pooling http client connection manager   (  )  {   connection socket factory socket factory = ssl connection socket factory . get system socket factory (  )  ;   registry registry =  registry builder .  <  connection socket factory > create (  )  . register ( protocol socket factory )  . build (  )  ;  return new  pooling http client connection manager ( registry )  ;   }  ,385,3,sslcm,3,[]
4698,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\EurekaJersey2ClientImpl.java,destroy resources,@ override public void   (  )  {  if  ( eureka conn cleaner  !  =  null )   {  eureka conn cleaner . execute ( connection cleaner task )  ;  eureka conn cleaner . shutdown (  )  ;   }  if  ( apache http client  !  =  null )   {  apache http client . close,255,2,destroy,1,[]
4699,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\EurekaJersey2ClientImpl.java,destroy resources,@ override public void   (  )  {  if  ( eureka conn cleaner  !  =  null )   {  eureka conn cleaner . execute ( connection cleaner task )  ;  eureka conn cleaner . shutdown (  )  ;   }  if  ( apache http client  !  =  null )   {  apache http client . close,255,2,resources,2,[]
4700,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\EurekaJersey2ClientImpl.java,get client,@ override public  client   (  )  {  return apache http client ;   }  ,70,2,get,1,[]
4701,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\EurekaJersey2ClientImpl.java,get client,@ override public  client   (  )  {  return apache http client ;   }  ,70,2,client,2,"[19, 56]"
4702,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\EurekaJersey2ClientImpl.java,new thread,"@ override public  thread   (  runnable r )  {   thread thread = new  thread ( r "" eureka -  jersey2 client -  conn -  cleaner""  +  thread number . increment and get (  )  )  ;  thread . set daemon ( true )  ;  return thread ;   }  ",232,2,new,1,[65]
4703,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\EurekaJersey2ClientImpl.java,new thread,"@ override public  thread   (  runnable r )  {   thread thread = new  thread ( r "" eureka -  jersey2 client -  conn -  cleaner""  +  thread number . increment and get (  )  )  ;  thread . set daemon ( true )  ;  return thread ;   }  ",232,2,thread,2,"[19, 49, 56, 70, 132, 178, 218]"
4704,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\EurekaJersey2ClientImpl.java,run,@ override public void   (  )  {   stopwatch start = execution time stats . start (  )  ;  try  {   http client connection manager cm =  (  http client connection manager ) apache http client . get configuration (  )  . get property (  apache client prope,255,1,run,1,[]
4705,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\EurekaJersey2ClientImpl.java,with client name,public  eureka jersey2 client builder   (  string client name )  {  this . client name = client name ;  return this ;   }  ,123,3,with,1,[]
4706,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\EurekaJersey2ClientImpl.java,with client name,public  eureka jersey2 client builder   (  string client name )  {  this . client name = client name ;  return this ;   }  ,123,3,client,2,"[23, 50, 75, 89]"
4707,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\EurekaJersey2ClientImpl.java,with client name,public  eureka jersey2 client builder   (  string client name )  {  this . client name = client name ;  return this ;   }  ,123,3,name,3,"[57, 82, 96]"
4708,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\EurekaJersey2ClientImpl.java,with connection idle timeout,public  eureka jersey2 client builder   ( int connection idle timeout )  {  this . connection idle timeout = connection idle timeout ;  return this ;   }  ,155,4,with,1,[]
4709,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\EurekaJersey2ClientImpl.java,with connection idle timeout,public  eureka jersey2 client builder   ( int connection idle timeout )  {  this . connection idle timeout = connection idle timeout ;  return this ;   }  ,155,4,connection,2,"[46, 83, 109]"
4710,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\EurekaJersey2ClientImpl.java,with connection idle timeout,public  eureka jersey2 client builder   ( int connection idle timeout )  {  this . connection idle timeout = connection idle timeout ;  return this ;   }  ,155,4,idle,3,"[57, 94, 120]"
4711,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\EurekaJersey2ClientImpl.java,with connection idle timeout,public  eureka jersey2 client builder   ( int connection idle timeout )  {  this . connection idle timeout = connection idle timeout ;  return this ;   }  ,155,4,timeout,4,"[62, 99, 125]"
4712,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\EurekaJersey2ClientImpl.java,with connection timeout,public  eureka jersey2 client builder   ( int connection timeout )  {  this . connection timeout = connection timeout ;  return this ;   }  ,140,3,with,1,[]
4713,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\EurekaJersey2ClientImpl.java,with connection timeout,public  eureka jersey2 client builder   ( int connection timeout )  {  this . connection timeout = connection timeout ;  return this ;   }  ,140,3,connection,2,"[46, 78, 99]"
4714,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\EurekaJersey2ClientImpl.java,with connection timeout,public  eureka jersey2 client builder   ( int connection timeout )  {  this . connection timeout = connection timeout ;  return this ;   }  ,140,3,timeout,3,"[57, 89, 110]"
4715,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\EurekaJersey2ClientImpl.java,with decoder,public  eureka jersey2 client builder   (  string decoder name  string client data accept )  {  return this . with decoder wrapper (  codec wrappers . resolve decoder ( decoder name client data accept )  )  ;   }  ,214,2,with,1,[110]
4716,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\EurekaJersey2ClientImpl.java,with decoder,public  eureka jersey2 client builder   (  string decoder name  string client data accept )  {  return this . with decoder wrapper (  codec wrappers . resolve decoder ( decoder name client data accept )  )  ;   }  ,214,2,decoder,2,"[50, 115, 159, 169]"
4717,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\EurekaJersey2ClientImpl.java,with decoder wrapper,public  eureka jersey2 client builder   (  decoder wrapper decoder wrapper )  {  this . decoder wrapper = decoder wrapper ;  return this ;   }  ,144,3,with,1,[]
4718,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\EurekaJersey2ClientImpl.java,with decoder wrapper,public  eureka jersey2 client builder   (  decoder wrapper decoder wrapper )  {  this . decoder wrapper = decoder wrapper ;  return this ;   }  ,144,3,decoder,2,"[43, 59, 88, 106]"
4719,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\EurekaJersey2ClientImpl.java,with decoder wrapper,public  eureka jersey2 client builder   (  decoder wrapper decoder wrapper )  {  this . decoder wrapper = decoder wrapper ;  return this ;   }  ,144,3,wrapper,3,"[51, 67, 96, 114]"
4720,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\EurekaJersey2ClientImpl.java,with encoder,public  eureka jersey2 client builder   (  string encoder name )  {  return this . with encoder wrapper (  codec wrappers . get encoder ( encoder name )  )  ;   }  ,164,2,with,1,[83]
4721,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\EurekaJersey2ClientImpl.java,with encoder,public  eureka jersey2 client builder   (  string encoder name )  {  return this . with encoder wrapper (  codec wrappers . get encoder ( encoder name )  )  ;   }  ,164,2,encoder,2,"[50, 88, 128, 138]"
4722,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\EurekaJersey2ClientImpl.java,with encoder wrapper,public  eureka jersey2 client builder   (  encoder wrapper encoder wrapper )  {  this . encoder wrapper = encoder wrapper ;  return this ;   }  ,144,3,with,1,[]
4723,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\EurekaJersey2ClientImpl.java,with encoder wrapper,public  eureka jersey2 client builder   (  encoder wrapper encoder wrapper )  {  this . encoder wrapper = encoder wrapper ;  return this ;   }  ,144,3,encoder,2,"[43, 59, 88, 106]"
4724,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\EurekaJersey2ClientImpl.java,with encoder wrapper,public  eureka jersey2 client builder   (  encoder wrapper encoder wrapper )  {  this . encoder wrapper = encoder wrapper ;  return this ;   }  ,144,3,wrapper,3,"[51, 67, 96, 114]"
4725,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\EurekaJersey2ClientImpl.java,with max connections per host,public  eureka jersey2 client builder   ( int max connections per host )  {  this . max connections per host = max connections per host ;  return this ;   }  ,158,5,with,1,[]
4726,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\EurekaJersey2ClientImpl.java,with max connections per host,public  eureka jersey2 client builder   ( int max connections per host )  {  this . max connections per host = max connections per host ;  return this ;   }  ,158,5,max,2,"[46, 84, 111]"
4727,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\EurekaJersey2ClientImpl.java,with max connections per host,public  eureka jersey2 client builder   ( int max connections per host )  {  this . max connections per host = max connections per host ;  return this ;   }  ,158,5,connections,3,"[50, 88, 115]"
4728,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\EurekaJersey2ClientImpl.java,with max connections per host,public  eureka jersey2 client builder   ( int max connections per host )  {  this . max connections per host = max connections per host ;  return this ;   }  ,158,5,per,4,"[62, 100, 127]"
4729,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\EurekaJersey2ClientImpl.java,with max connections per host,public  eureka jersey2 client builder   ( int max connections per host )  {  this . max connections per host = max connections per host ;  return this ;   }  ,158,5,host,5,"[66, 104, 131]"
4730,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\EurekaJersey2ClientImpl.java,with max total connections,public  eureka jersey2 client builder   ( int max total connections )  {  this . max total connections = max total connections ;  return this ;   }  ,149,4,with,1,[]
4731,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\EurekaJersey2ClientImpl.java,with max total connections,public  eureka jersey2 client builder   ( int max total connections )  {  this . max total connections = max total connections ;  return this ;   }  ,149,4,max,2,"[46, 81, 105]"
4732,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\EurekaJersey2ClientImpl.java,with max total connections,public  eureka jersey2 client builder   ( int max total connections )  {  this . max total connections = max total connections ;  return this ;   }  ,149,4,total,3,"[50, 85, 109]"
4733,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\EurekaJersey2ClientImpl.java,with max total connections,public  eureka jersey2 client builder   ( int max total connections )  {  this . max total connections = max total connections ;  return this ;   }  ,149,4,connections,4,"[56, 91, 115]"
4734,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\EurekaJersey2ClientImpl.java,with proxy,public  eureka jersey2 client builder   (  string proxy host  string proxy port  string user  string password )  {  this . proxy host = proxy host ;  this . proxy port = proxy port ;  this . proxy user name = user ;  this . proxy password = password ;  return this ;   }  ,272,2,with,1,[]
4735,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\EurekaJersey2ClientImpl.java,with proxy,public  eureka jersey2 client builder   (  string proxy host  string proxy port  string user  string password )  {  this . proxy host = proxy host ;  this . proxy port = proxy port ;  this . proxy user name = user ;  this . proxy password = password ;  return this ;   }  ,272,2,proxy,2,"[50, 69, 123, 136, 157, 170, 191, 224]"
4736,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\EurekaJersey2ClientImpl.java,with read timeout,public  eureka jersey2 client builder   ( int read timeout )  {  this . read timeout = read timeout ;  return this ;   }  ,122,3,with,1,[]
4737,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\EurekaJersey2ClientImpl.java,with read timeout,public  eureka jersey2 client builder   ( int read timeout )  {  this . read timeout = read timeout ;  return this ;   }  ,122,3,read,2,"[46, 72, 87]"
4738,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\EurekaJersey2ClientImpl.java,with read timeout,public  eureka jersey2 client builder   ( int read timeout )  {  this . read timeout = read timeout ;  return this ;   }  ,122,3,timeout,3,"[51, 77, 92]"
4739,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\EurekaJersey2ClientImpl.java,with systemssl configuration,public  eureka jersey2 client builder   (  )  {  this . systemssl = true ;  return this ;   }  ,95,3,with,1,[]
4740,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\EurekaJersey2ClientImpl.java,with systemssl configuration,public  eureka jersey2 client builder   (  )  {  this . systemssl = true ;  return this ;   }  ,95,3,systemssl,2,[56]
4741,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\EurekaJersey2ClientImpl.java,with systemssl configuration,public  eureka jersey2 client builder   (  )  {  this . systemssl = true ;  return this ;   }  ,95,3,configuration,3,[]
4742,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\EurekaJersey2ClientImpl.java,with trust store file,public  eureka jersey2 client builder   (  string trust store file name  string trust store password )  {  this . trust store file name = trust store file name ;  this . trust store password = trust store password ;  return this ;   }  ,236,4,with,1,[]
4743,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\EurekaJersey2ClientImpl.java,with trust store file,public  eureka jersey2 client builder   (  string trust store file name  string trust store password )  {  this . trust store file name = trust store file name ;  this . trust store password = trust store password ;  return this ;   }  ,236,4,trust,2,"[50, 80, 114, 138, 170, 193]"
4744,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\EurekaJersey2ClientImpl.java,with trust store file,public  eureka jersey2 client builder   (  string trust store file name  string trust store password )  {  this . trust store file name = trust store file name ;  this . trust store password = trust store password ;  return this ;   }  ,236,4,store,3,"[56, 86, 120, 144, 176, 199]"
4745,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\EurekaJersey2ClientImpl.java,with trust store file,public  eureka jersey2 client builder   (  string trust store file name  string trust store password )  {  this . trust store file name = trust store file name ;  this . trust store password = trust store password ;  return this ;   }  ,236,4,file,4,"[62, 126, 150]"
4746,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\EurekaJersey2ClientImpl.java,with user agent,public  eureka jersey2 client builder   (  string user agent )  {  this . user agent = user agent ;  return this ;   }  ,120,3,with,1,[]
4747,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\EurekaJersey2ClientImpl.java,with user agent,public  eureka jersey2 client builder   (  string user agent )  {  this . user agent = user agent ;  return this ;   }  ,120,3,user,2,"[50, 74, 87]"
4748,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\EurekaJersey2ClientImpl.java,with user agent,public  eureka jersey2 client builder   (  string user agent )  {  this . user agent = user agent ;  return this ;   }  ,120,3,agent,3,"[55, 79, 92]"
4749,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\Jersey2ApplicationClientFactory.java, jersey application client factory,public   (  client jersey2 client  multivalued map <  string  object >  additional headers )  {  this . jersey2 client = jersey2 client ;  this . additional headers = additional headers ;   }  ,193,4,jersey,1,"[19, 104, 121]"
4750,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\Jersey2ApplicationClientFactory.java, jersey application client factory,public   (  client jersey2 client  multivalued map <  string  object >  additional headers )  {  this . jersey2 client = jersey2 client ;  this . additional headers = additional headers ;   }  ,193,4,application,2,[]
4751,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\Jersey2ApplicationClientFactory.java, jersey application client factory,public   (  client jersey2 client  multivalued map <  string  object >  additional headers )  {  this . jersey2 client = jersey2 client ;  this . additional headers = additional headers ;   }  ,193,4,client,3,"[12, 27, 112, 129]"
4752,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\Jersey2ApplicationClientFactory.java, jersey application client factory,public   (  client jersey2 client  multivalued map <  string  object >  additional headers )  {  this . jersey2 client = jersey2 client ;  this . additional headers = additional headers ;   }  ,193,4,factory,4,[]
4753,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\Jersey2ApplicationClientFactory.java,add providers,private void   (  client config client config )  {   discovery jersey provider discovery jersey provider = new  discovery jersey provider ( encoder wrapper decoder wrapper )  ;  client config . register ( discovery jersey provider )  ;   }  ,241,2,add,1,[]
4754,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\Jersey2ApplicationClientFactory.java,add providers,private void   (  client config client config )  {   discovery jersey provider discovery jersey provider = new  discovery jersey provider ( encoder wrapper decoder wrapper )  ;  client config . register ( discovery jersey provider )  ;   }  ,241,2,providers,2,[]
4755,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\Jersey2ApplicationClientFactory.java,add proxy configuration,"private void   (  client config client config )  {  if  ( proxy host  !  =  null )   {   string proxy address = proxy host ;  if  ( proxy port  >  0 )   {  proxy address +  = ':'  +  proxy port ;   }  client config . property (  client properties . proxy   uri proxy address )  ;  if  ( proxy user name  !  =  null )   {  if  ( proxy password  =  =  null )   {  throw new  illegal argument exception ( "" proxy user name provided but not password"" )  ;   }  client config . property (  client properties . proxy   username proxy user name )  ;  client config . property (  client properties . proxy   password proxy password )  ;   }   }   }  ",642,3,add,1,"[102, 162, 267]"
4756,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\Jersey2ApplicationClientFactory.java,add proxy configuration,"private void   (  client config client config )  {  if  ( proxy host  !  =  null )   {   string proxy address = proxy host ;  if  ( proxy port  >  0 )   {  proxy address +  = ':'  +  proxy port ;   }  client config . property (  client properties . proxy   uri proxy address )  ;  if  ( proxy user name  !  =  null )   {  if  ( proxy password  =  =  null )   {  throw new  illegal argument exception ( "" proxy user name provided but not password"" )  ;   }  client config . property (  client properties . proxy   username proxy user name )  ;  client config . property (  client properties . proxy   password proxy password )  ;   }   }   }  ",642,3,proxy,2,"[58, 96, 112, 132, 156, 183, 249, 261, 287, 328, 404, 505, 522, 592, 609]"
4757,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\Jersey2ApplicationClientFactory.java,add proxy configuration,"private void   (  client config client config )  {  if  ( proxy host  !  =  null )   {   string proxy address = proxy host ;  if  ( proxy port  >  0 )   {  proxy address +  = ':'  +  proxy port ;   }  client config . property (  client properties . proxy   uri proxy address )  ;  if  ( proxy user name  !  =  null )   {  if  ( proxy password  =  =  null )   {  throw new  illegal argument exception ( "" proxy user name provided but not password"" )  ;   }  client config . property (  client properties . proxy   username proxy user name )  ;  client config . property (  client properties . proxy   password proxy password )  ;   }   }   }  ",642,3,configuration,3,[]
4758,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\Jersey2ApplicationClientFactory.java,addssl configuration,"private void   (  client builder client builder )  {  try  {  if  ( systemssl )   {  client builder . ssl context ( ssl context . get default (  )  )  ;   }  else if  ( trust store file name  !  =  null )   {   key store trust store =  key store . get instance ( key   store   type )  ;   file input stream fin = new  file input stream ( trust store file name )  ;  trust store . load ( fin trust store password . to char array (  )  )  ;  client builder . trust store ( trust store )  ;   }  else if  ( ssl context  !  =  null )   {  client builder . ssl context ( ssl context )  ;   }   }  catch  (   exception ex )   {  throw new  illegal argument exception ( "" cannot setup ssl for  jersey2 client"" ex )  ;   }   }  ",720,2,addssl,1,[]
4759,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\Jersey2ApplicationClientFactory.java,addssl configuration,"private void   (  client builder client builder )  {  try  {  if  ( systemssl )   {  client builder . ssl context ( ssl context . get default (  )  )  ;   }  else if  ( trust store file name  !  =  null )   {   key store trust store =  key store . get instance ( key   store   type )  ;   file input stream fin = new  file input stream ( trust store file name )  ;  trust store . load ( fin trust store password . to char array (  )  )  ;  client builder . trust store ( trust store )  ;   }  else if  ( ssl context  !  =  null )   {  client builder . ssl context ( ssl context )  ;   }   }  catch  (   exception ex )   {  throw new  illegal argument exception ( "" cannot setup ssl for  jersey2 client"" ex )  ;   }   }  ",720,2,configuration,2,[]
4760,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\Jersey2ApplicationClientFactory.java,build,@ override public  jersey2 application client factory   (  )  {   client builder client builder =  client builder . new builder (  )  ;   client config client config = new  client config (  )  ;  for  (   client request filter filter : additional filters ,255,1,build,1,"[73, 88, 106, 120]"
4761,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\Jersey2ApplicationClientFactory.java,create,"public static  jersey2 application client factory   (  eureka client config client config  collection <  client request filter >  additional filters  instance info my instance info  abstract eureka identity client identity  optional < ssl context >  ssl context  optional <  hostname verifier >  hostname verifier )  {   jersey2 application client factory builder client builder = new builder (  )  ;  client builder . with additional filters ( additional filters )  ;  client builder . with my instance info ( my instance info )  ;  client builder . with user agent ( "" java -  eureka client"" )  ;  client builder . with client config ( client config )  ;  client builder . with client identity ( client identity )  ;  ssl context . if present ( client builder::withssl context )  ;  hostname verifier . if present ( client builder::with hostname verifier )  ;  if  ( ""true"" . equals (  system . get property ( ""com . netflix . eureka . shouldssl connections use system socket factory"" )  )  )   {  client builder . with client name ( "" discovery client - http client -  system"" )  . with systemssl configuration (  )  ;   }  else if  ( client config . get proxy host (  )   !  =  null && client config . get proxy port (  )   !  =  null )   {  client builder . with client name ( "" proxy -  discovery client - http client"" )  . with proxy ( client config . get proxy host (  )   integer . parse int ( client config . get proxy port (  )  )  client config . get proxy user name (  )  client config . get proxy password (  )  )  ;   }  else  {  client builder . with client name ( "" discovery client - http client"" )  ;   }  return client builder . build (  )  ;   }  ",1668,1,create,1,[]
4762,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\Jersey2ApplicationClientFactory.java,filter,@ override public void   (  client request context request context )  {  request context . get headers (  )  . put (  http headers . user   agent  collections .  <  object > singleton list ( full user agent name )  )  ;   }  ,225,1,filter,1,[]
4763,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\Jersey2ApplicationClientFactory.java,new builder,public static  jersey2 application client factory builder   (  )  {  return new  jersey2 application client factory builder (  )  ;   }  ,137,2,new,1,[76]
4764,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\Jersey2ApplicationClientFactory.java,new builder,public static  jersey2 application client factory builder   (  )  {  return new  jersey2 application client factory builder (  )  ;   }  ,137,2,builder,2,"[50, 116]"
4765,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\Jersey2ApplicationClientFactory.java,new client,@ override public  eureka http client   (  eureka endpoint endpoint )  {  return new  jersey2 application client ( jersey2 client endpoint . get service url (  )  additional headers )  ;   }  ,192,2,new,1,[81]
4766,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\Jersey2ApplicationClientFactory.java,new client,@ override public  eureka http client   (  eureka endpoint endpoint )  {  return new  jersey2 application client ( jersey2 client endpoint . get service url (  )  additional headers )  ;   }  ,192,2,client,2,"[31, 106, 123]"
4767,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\Jersey2ApplicationClientFactory.java,shutdown,@ override public void   (  )  {  jersey2 client . close (  )  ;   }  ,70,1,shutdown,1,[]
4768,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\Jersey2ApplicationClientFactory.java,with additional filters, jersey2 application client factory builder   (  collection <  client request filter >  additional filters )  {  if  ( additional filters  !  =  null )   {  this . additional filters . add all ( additional filters )  ;   }  return this ;   }  ,243,3,with,1,[]
4769,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\Jersey2ApplicationClientFactory.java,with additional filters, jersey2 application client factory builder   (  collection <  client request filter >  additional filters )  {  if  ( additional filters  !  =  null )   {  this . additional filters . add all ( additional filters )  ;   }  return this ;   }  ,243,3,additional,2,"[88, 119, 164, 195]"
4770,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\Jersey2ApplicationClientFactory.java,with additional filters, jersey2 application client factory builder   (  collection <  client request filter >  additional filters )  {  if  ( additional filters  !  =  null )   {  this . additional filters . add all ( additional filters )  ;   }  return this ;   }  ,243,3,filters,3,"[99, 130, 175, 206]"
4771,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\Jersey2ApplicationClientFactory.java,with feature,public  jersey2 application client factory builder   (  feature feature )  {  features . add ( feature )  ;  return this ;   }  ,128,2,with,1,[]
4772,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\Jersey2ApplicationClientFactory.java,with feature,public  jersey2 application client factory builder   (  feature feature )  {  features . add ( feature )  ;  return this ;   }  ,128,2,feature,2,"[56, 64, 78, 95]"
4773,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\Jersey2TransportClientFactories.java,get instance,public static  jersey2 transport client factories   (  )  {  return instance ;   }  ,84,2,get,1,[]
4774,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\Jersey2TransportClientFactories.java,get instance,public static  jersey2 transport client factories   (  )  {  return instance ;   }  ,84,2,instance,2,[68]
4775,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\Jersey2ApplicationClient.java, jersey application client,public   (  client jersey client  string service url  multivalued map <  string  object >  additional headers )  {  super ( jersey client service url )  ;  this . additional headers = additional headers ;   }  ,210,3,jersey,1,"[19, 124]"
4776,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\Jersey2ApplicationClient.java, jersey application client,public   (  client jersey client  string service url  multivalued map <  string  object >  additional headers )  {  super ( jersey client service url )  ;  this . additional headers = additional headers ;   }  ,210,3,application,2,[]
4777,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\Jersey2ApplicationClient.java, jersey application client,public   (  client jersey client  string service url  multivalued map <  string  object >  additional headers )  {  super ( jersey client service url )  ;  this . additional headers = additional headers ;   }  ,210,3,client,3,"[12, 26, 131]"
4778,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\Jersey2TransportClientFactories.java,new client,@ override public  eureka http client   (  eureka endpoint service url )  {  return metrics factory . new client ( service url )  ;   }  ,137,2,new,1,[102]
4779,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\Jersey2TransportClientFactories.java,new client,@ override public  eureka http client   (  eureka endpoint service url )  {  return metrics factory . new client ( service url )  ;   }  ,137,2,client,2,"[31, 106]"
4780,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\Jersey2ApplicationClient.java,add extra headers,@ override protected void   (  builder web resource )  {  if  ( additional headers  !  =  null )   {  for  (   map .  entry <  string  list <  object >  >  entry : additional headers . entry set (  )  )   {  web resource . header ( entry . get key (  )  e,255,3,add,1,"[64, 164]"
4781,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\Jersey2ApplicationClient.java,add extra headers,@ override protected void   (  builder web resource )  {  if  ( additional headers  !  =  null )   {  for  (   map .  entry <  string  list <  object >  >  entry : additional headers . entry set (  )  )   {  web resource . header ( entry . get key (  )  e,255,3,extra,2,[]
4782,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\Jersey2ApplicationClient.java,add extra headers,@ override protected void   (  builder web resource )  {  if  ( additional headers  !  =  null )   {  for  (   map .  entry <  string  list <  object >  >  entry : additional headers . entry set (  )  )   {  web resource . header ( entry . get key (  )  e,255,3,headers,3,"[75, 175]"
4783,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\Jersey2TransportClientFactories.java,new transport client factory,@ override public  transport client factory   (  collection <  client request filter >  additional filters  eureka jersey client provided jersey client )  {  throw new  unsupported operation exception (  )  ;   }  ,214,4,new,1,[164]
4784,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\Jersey2TransportClientFactories.java,new transport client factory,@ override public  transport client factory   (  collection <  client request filter >  additional filters  eureka jersey client provided jersey client )  {  throw new  unsupported operation exception (  )  ;   }  ,214,4,transport,2,[19]
4785,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\Jersey2TransportClientFactories.java,new transport client factory,@ override public  transport client factory   (  collection <  client request filter >  additional filters  eureka jersey client provided jersey client )  {  throw new  unsupported operation exception (  )  ;   }  ,214,4,client,3,"[29, 63, 122, 145]"
4786,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\Jersey2TransportClientFactories.java,new transport client factory,@ override public  transport client factory   (  collection <  client request filter >  additional filters  eureka jersey client provided jersey client )  {  throw new  unsupported operation exception (  )  ;   }  ,214,4,factory,4,[36]
4787,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\Jersey2TransportClientFactories.java,shutdown,@ override public void   (  )  {  metrics factory . shutdown (  )  ;  jersey factory . shutdown (  )  ;   }  ,109,1,shutdown,1,"[52, 87]"
4788,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\Jersey2EurekaIdentityHeaderFilter.java, jersey eureka identity header filter,public   (  abstract eureka identity auth info )  {  this . auth info = auth info ;   }  ,89,5,jersey,1,[]
4789,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\Jersey2EurekaIdentityHeaderFilter.java, jersey eureka identity header filter,public   (  abstract eureka identity auth info )  {  this . auth info = auth info ;   }  ,89,5,eureka,2,[21]
4790,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\Jersey2EurekaIdentityHeaderFilter.java, jersey eureka identity header filter,public   (  abstract eureka identity auth info )  {  this . auth info = auth info ;   }  ,89,5,identity,3,[28]
4791,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\Jersey2EurekaIdentityHeaderFilter.java, jersey eureka identity header filter,public   (  abstract eureka identity auth info )  {  this . auth info = auth info ;   }  ,89,5,header,4,[]
4792,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\Jersey2EurekaIdentityHeaderFilter.java, jersey eureka identity header filter,public   (  abstract eureka identity auth info )  {  this . auth info = auth info ;   }  ,89,5,filter,5,[]
4793,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\Jersey2EurekaIdentityHeaderFilter.java,filter,@ override public void   (  client request context request context )  throws io exception  {  if  ( auth info  !  =  null )   {  request context . get headers (  )  . put single (  abstract eureka identity . auth   name   header   key auth info . get name,255,1,filter,1,[]
4794,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\test\java\com\netflix\discovery\shared\transport\jersey2\AbstractJersey2EurekaHttpClientTest.java,get eureka http client,@ override protected  eureka http client   ( uri serviceuri )  {   jersey2 application client factory builder factory builder =  jersey2 application client factory . new builder (  )  ;  if  ( serviceuri . get user info (  )   !  =  null )   {  factory bu,255,4,get,1,[206]
4795,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\test\java\com\netflix\discovery\shared\transport\jersey2\AbstractJersey2EurekaHttpClientTest.java,get eureka http client,@ override protected  eureka http client   ( uri serviceuri )  {   jersey2 application client factory builder factory builder =  jersey2 application client factory . new builder (  )  ;  if  ( serviceuri . get user info (  )   !  =  null )   {  factory bu,255,4,eureka,2,[22]
4796,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\test\java\com\netflix\discovery\shared\transport\jersey2\AbstractJersey2EurekaHttpClientTest.java,get eureka http client,@ override protected  eureka http client   ( uri serviceuri )  {   jersey2 application client factory builder factory builder =  jersey2 application client factory . new builder (  )  ;  if  ( serviceuri . get user info (  )   !  =  null )   {  factory bu,255,4,http,3,[29]
4797,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\test\java\com\netflix\discovery\shared\transport\jersey2\AbstractJersey2EurekaHttpClientTest.java,get eureka http client,@ override protected  eureka http client   ( uri serviceuri )  {   jersey2 application client factory builder factory builder =  jersey2 application client factory . new builder (  )  ;  if  ( serviceuri . get user info (  )   !  =  null )   {  factory bu,255,4,client,4,"[34, 87, 149]"
4798,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\test\java\com\netflix\discovery\shared\transport\jersey2\AbstractJersey2EurekaHttpClientTest.java,tear down,@ override @ after public void   (  )  throws  exception  {  if  ( jersey2 http client  !  =  null )   {  jersey2 http client . shutdown (  )  ;   }  super . tear down (  )  ;   }  ,181,2,tear,1,[158]
4799,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\test\java\com\netflix\discovery\shared\transport\jersey2\AbstractJersey2EurekaHttpClientTest.java,tear down,@ override @ after public void   (  )  throws  exception  {  if  ( jersey2 http client  !  =  null )   {  jersey2 http client . shutdown (  )  ;   }  super . tear down (  )  ;   }  ,181,2,down,2,"[132, 163]"
4800,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\test\java\com\netflix\discovery\guice\Jersey2EurekaModuleTest.java,configure,@ override protected void   (  )  {  bind (  eureka instance config . class )  . to provider (  my data center instance config provider . class )  . in (  scopes . singleton )  ;   }  ,184,1,configure,1,[]
4801,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\test\java\com\netflix\discovery\guice\Jersey2EurekaModuleTest.java,set up,"@ before public void   (  )  throws  exception  {   configuration manager . get config instance (  )  . set property ( ""eureka . region"" ""default"" )  ;   configuration manager . get config instance (  )  . set property ( ""eureka . should fetch registry"" """,255,2,set,1,"[104, 206]"
4802,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\test\java\com\netflix\discovery\guice\Jersey2EurekaModuleTest.java,set up,"@ before public void   (  )  throws  exception  {   configuration manager . get config instance (  )  . set property ( ""eureka . region"" ""default"" )  ;   configuration manager . get config instance (  )  . set property ( ""eureka . should fetch registry"" """,255,2,up,2,[]
4803,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\test\java\com\netflix\discovery\guice\Jersey2EurekaModuleTest.java,tear down,@ after public void   (  )  {  if  ( injector  !  =  null )   {  injector . shutdown (  )  ;   }   configuration manager . get config instance (  )  . clear (  )  ;   }  ,170,2,tear,1,[]
4804,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\test\java\com\netflix\discovery\guice\Jersey2EurekaModuleTest.java,tear down,@ after public void   (  )  {  if  ( injector  !  =  null )   {  injector . shutdown (  )  ;   }   configuration manager . get config instance (  )  . clear (  )  ;   }  ,170,2,down,2,[80]
4805,C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\test\java\com\netflix\discovery\guice\Jersey2EurekaModuleTest.java,testdi,"@ suppress warnings ( ""deprecation"" )  @ test public void   (  )  {   instance info instance info = injector . get instance (  instance info . class )  ;   assert . assert equals (  application info manager . get instance (  )  . get info (  )  instance i",255,1,testdi,1,[]
4806,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\AwsAsgUtil.java, aws asg util,@ inject public   (  eureka server config server config  eureka client config client config  instance registry registry )  {  this . server config = server config ;  this . client config = client config ;  this . registry = registry ;  this . asg cache = ,255,3,aws,1,[]
4807,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\AwsAsgUtil.java, aws asg util,@ inject public   (  eureka server config server config  eureka client config client config  instance registry registry )  {  this . server config = server config ;  this . client config = client config ;  this . registry = registry ;  this . asg cache = ,255,3,asg,2,[243]
4808,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\AwsAsgUtil.java, aws asg util,@ inject public   (  eureka server config server config  eureka client config client config  instance registry registry )  {  this . server config = server config ;  this . client config = client config ;  this . registry = registry ;  this . asg cache = ,255,3,util,3,[]
4809,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\AwsAsgUtil.java, cache key,  (  string asg account id  string asg name )  {  this . asg account id = asg account id ;  this . asg name = asg name ;   }  ,126,2,cache,1,[]
4810,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\AwsAsgUtil.java, cache key,  (  string asg account id  string asg name )  {  this . asg account id = asg account id ;  this . asg name = asg name ;   }  ,126,2,key,2,[]
4811,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\AwsAsgUtil.java,call,@ override public  boolean   (  )  throws  exception  {  return load ( key )  ;   }  ,85,1,call,1,[]
4812,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\AwsAsgUtil.java,equals,@ override public boolean   (  object o )  {  if  ( this  =  =  o )  return true ;  if  (  !  ( o instanceof  cache key )  )  return false ;   cache key cache key =  (  cache key ) o ;  if  ( asg account id  !  =  null  ?   ! asg account id . equals ( cac,255,1,equals,1,[243]
4813,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\AwsAsgUtil.java,getasg account,"private  string   (  string asg name )  {   applications apps = registry . get applications from local region only (  )  ;  for  (   application app : apps . get registered applications (  )  )   {  for  (   instance info instance info : app . get instances (  )  )   {   string this asg name = instance info . getasg name (  )  ;  if  ( this asg name  !  =  null && this asg name . equals ( asg name )  )   {   string local account id = get account id ( instance info null )  ;  if  ( local account id  !  =  null )   {  return local account id ;   }   }   }   }  logger . info ( "" couldn't get the asg account for  {  }   using the default account id instead"" asg name )  ;  return account id ;   }  ",702,2,getasg,1,[311]
4814,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\AwsAsgUtil.java,getasg account,"private  string   (  string asg name )  {   applications apps = registry . get applications from local region only (  )  ;  for  (   application app : apps . get registered applications (  )  )   {  for  (   instance info instance info : app . get instances (  )  )   {   string this asg name = instance info . getasg name (  )  ;  if  ( this asg name  !  =  null && this asg name . equals ( asg name )  )   {   string local account id = get account id ( instance info null )  ;  if  ( local account id  !  =  null )   {  return local account id ;   }   }   }   }  logger . info ( "" couldn't get the asg account for  {  }   using the default account id instead"" asg name )  ;  return account id ;   }  ",702,2,account,2,"[425, 442, 492, 535, 604, 642, 684]"
4815,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\AwsAsgUtil.java,getasg update task,"private  timer task   (  )  {  return new  timer task (  )  {  @ override public void run (  )  {  try  {   set <  cache key >  cache keys = get cache keys (  )  ;  if  ( logger . is debug enabled (  )  )   {  logger . debug ( "" trying to refresh the keys for  {  } ""  arrays . to string ( cache keys . to array (  )  )  )  ;   }  for  (   cache key key : cache keys )   {  try  {  asg cache . refresh ( key )  ;   }  catch  (   throwable e )   {  logger . error ( "" error updating the asg cache for  {  } "" key e )  ;   }   }   }  catch  (   throwable e )   {  logger . error ( "" error updating the asg cache"" e )  ;   }   }   }   ;   }  ",639,3,getasg,1,[]
4816,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\AwsAsgUtil.java,getasg update task,"private  timer task   (  )  {  return new  timer task (  )  {  @ override public void run (  )  {  try  {   set <  cache key >  cache keys = get cache keys (  )  ;  if  ( logger . is debug enabled (  )  )   {  logger . debug ( "" trying to refresh the keys for  {  } ""  arrays . to string ( cache keys . to array (  )  )  )  ;   }  for  (   cache key key : cache keys )   {  try  {  asg cache . refresh ( key )  ;   }  catch  (   throwable e )   {  logger . error ( "" error updating the asg cache for  {  } "" key e )  ;   }   }   }  catch  (   throwable e )   {  logger . error ( "" error updating the asg cache"" e )  ;   }   }   }   ;   }  ",639,3,update,2,[]
4817,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\AwsAsgUtil.java,getasg update task,"private  timer task   (  )  {  return new  timer task (  )  {  @ override public void run (  )  {  try  {   set <  cache key >  cache keys = get cache keys (  )  ;  if  ( logger . is debug enabled (  )  )   {  logger . debug ( "" trying to refresh the keys for  {  } ""  arrays . to string ( cache keys . to array (  )  )  )  ;   }  for  (   cache key key : cache keys )   {  try  {  asg cache . refresh ( key )  ;   }  catch  (   throwable e )   {  logger . error ( "" error updating the asg cache for  {  } "" key e )  ;   }   }   }  catch  (   throwable e )   {  logger . error ( "" error updating the asg cache"" e )  ;   }   }   }   ;   }  ",639,3,task,3,"[15, 49]"
4818,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\AwsAsgUtil.java,get account id,private static  string   (  )  {   instance info my info =  application info manager . get instance (  )  . get info (  )  ;  return  (  (  amazon info ) my info . get data center info (  )  )  . get (  meta data key . account id )  ;   }  ,240,3,get,1,"[87, 108, 164, 196]"
4819,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\AwsAsgUtil.java,get account id,private static  string   (  )  {   instance info my info =  application info manager . get instance (  )  . get info (  )  ;  return  (  (  amazon info ) my info . get data center info (  )  )  . get (  meta data key . account id )  ;   }  ,240,3,account,2,[219]
4820,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\AwsAsgUtil.java,get account id,private static  string   (  )  {   instance info my info =  application info manager . get instance (  )  . get info (  )  ;  return  (  (  amazon info ) my info . get data center info (  )  )  . get (  meta data key . account id )  ;   }  ,240,3,id,3,[227]
4821,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\AwsAsgUtil.java,get amazon auto scaling client,"private  amazon auto scaling   (  )  {   string aws access id = server config . getaws access id (  )  ;   string aws secret key = server config . getaws secret key (  )  ;   client configuration client configuration = new  client configuration (  )  . with connection timeout ( server config . getasg query timeout ms (  )  )  ;  if  ( null  !  =  aws access id &&  ! """" . equals ( aws access id )  && null  !  =  aws secret key &&  ! """" . equals ( aws secret key )  )   {  return new  amazon auto scaling client ( new  basicaws credentials ( aws access id aws secret key )  client configuration )  ;   }  else  {  return new  amazon auto scaling client ( new  instance profile credentials provider (  )  client configuration )  ;   }   }  ",741,5,get,1,"[80, 147, 295]"
4822,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\AwsAsgUtil.java,get amazon auto scaling client,"private  amazon auto scaling   (  )  {   string aws access id = server config . getaws access id (  )  ;   string aws secret key = server config . getaws secret key (  )  ;   client configuration client configuration = new  client configuration (  )  . with connection timeout ( server config . getasg query timeout ms (  )  )  ;  if  ( null  !  =  aws access id &&  ! """" . equals ( aws access id )  && null  !  =  aws secret key &&  ! """" . equals ( aws secret key )  )   {  return new  amazon auto scaling client ( new  basicaws credentials ( aws access id aws secret key )  client configuration )  ;   }  else  {  return new  amazon auto scaling client ( new  instance profile credentials provider (  )  client configuration )  ;   }   }  ",741,5,amazon,2,"[9, 487, 628]"
4823,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\AwsAsgUtil.java,get amazon auto scaling client,"private  amazon auto scaling   (  )  {   string aws access id = server config . getaws access id (  )  ;   string aws secret key = server config . getaws secret key (  )  ;   client configuration client configuration = new  client configuration (  )  . with connection timeout ( server config . getasg query timeout ms (  )  )  ;  if  ( null  !  =  aws access id &&  ! """" . equals ( aws access id )  && null  !  =  aws secret key &&  ! """" . equals ( aws secret key )  )   {  return new  amazon auto scaling client ( new  basicaws credentials ( aws access id aws secret key )  client configuration )  ;   }  else  {  return new  amazon auto scaling client ( new  instance profile credentials provider (  )  client configuration )  ;   }   }  ",741,5,auto,3,"[16, 494, 635]"
4824,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\AwsAsgUtil.java,get amazon auto scaling client,"private  amazon auto scaling   (  )  {   string aws access id = server config . getaws access id (  )  ;   string aws secret key = server config . getaws secret key (  )  ;   client configuration client configuration = new  client configuration (  )  . with connection timeout ( server config . getasg query timeout ms (  )  )  ;  if  ( null  !  =  aws access id &&  ! """" . equals ( aws access id )  && null  !  =  aws secret key &&  ! """" . equals ( aws secret key )  )   {  return new  amazon auto scaling client ( new  basicaws credentials ( aws access id aws secret key )  client configuration )  ;   }  else  {  return new  amazon auto scaling client ( new  instance profile credentials provider (  )  client configuration )  ;   }   }  ",741,5,scaling,4,"[21, 499, 640]"
4825,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\AwsAsgUtil.java,get amazon auto scaling client,"private  amazon auto scaling   (  )  {   string aws access id = server config . getaws access id (  )  ;   string aws secret key = server config . getaws secret key (  )  ;   client configuration client configuration = new  client configuration (  )  . with connection timeout ( server config . getasg query timeout ms (  )  )  ;  if  ( null  !  =  aws access id &&  ! """" . equals ( aws access id )  && null  !  =  aws secret key &&  ! """" . equals ( aws secret key )  )   {  return new  amazon auto scaling client ( new  basicaws credentials ( aws access id aws secret key )  client configuration )  ;   }  else  {  return new  amazon auto scaling client ( new  instance profile credentials provider (  )  client configuration )  ;   }   }  ",741,5,client,5,"[175, 196, 224, 507, 576, 648, 706]"
4826,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\AwsAsgUtil.java,get cache keys,private  set <  cache key >    (  )  {   set <  cache key >  cache keys = new  hash set <  cache key >  (  )  ;   applications apps = registry . get applications from local region only (  )  ;  for  (   application app : apps . get registered applications (  )  )   {  for  (   instance info instance info : app . get instances (  )  )   {   string local account id = get account id ( instance info account id )  ;   string asg name = instance info . getasg name (  )  ;  if  ( asg name  !  =  null )   {   cache key key = new  cache key ( local account id asg name )  ;  cache keys . add ( key )  ;   }   }   }  return cache keys ;   }  ,638,3,get,1,"[145, 228, 314, 368, 451]"
4827,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\AwsAsgUtil.java,get cache keys,private  set <  cache key >    (  )  {   set <  cache key >  cache keys = new  hash set <  cache key >  (  )  ;   applications apps = registry . get applications from local region only (  )  ;  for  (   application app : apps . get registered applications (  )  )   {  for  (   instance info instance info : app . get instances (  )  )   {   string local account id = get account id ( instance info account id )  ;   string asg name = instance info . getasg name (  )  ;  if  ( asg name  !  =  null )   {   cache key key = new  cache key ( local account id asg name )  ;  cache keys . add ( key )  ;   }   }   }  return cache keys ;   }  ,638,3,cache,2,"[16, 48, 61, 91, 507, 528, 572, 620]"
4828,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\AwsAsgUtil.java,get cache keys,private  set <  cache key >    (  )  {   set <  cache key >  cache keys = new  hash set <  cache key >  (  )  ;   applications apps = registry . get applications from local region only (  )  ;  for  (   application app : apps . get registered applications (  )  )   {  for  (   instance info instance info : app . get instances (  )  )   {   string local account id = get account id ( instance info account id )  ;   string asg name = instance info . getasg name (  )  ;  if  ( asg name  !  =  null )   {   cache key key = new  cache key ( local account id asg name )  ;  cache keys . add ( key )  ;   }   }   }  return cache keys ;   }  ,638,3,keys,3,"[67, 578, 626]"
4829,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\AwsAsgUtil.java,get numberofasg queries,"@com . netflix . servo . annotations .  monitor ( name = ""num ofasg queries"" description = "" number of queries made to aws to retrieve asg information"" type =  data source type . counter )  public long   (  )  {  return asg cache . stats (  )  . load coun",255,3,get,1,[]
4830,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\AwsAsgUtil.java,get numberofasg queries,"@com . netflix . servo . annotations .  monitor ( name = ""num ofasg queries"" description = "" number of queries made to aws to retrieve asg information"" type =  data source type . counter )  public long   (  )  {  return asg cache . stats (  )  . load coun",255,3,numberofasg,2,[]
4831,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\AwsAsgUtil.java,get numberofasg queries,"@com . netflix . servo . annotations .  monitor ( name = ""num ofasg queries"" description = "" number of queries made to aws to retrieve asg information"" type =  data source type . counter )  public long   (  )  {  return asg cache . stats (  )  . load coun",255,3,queries,3,"[68, 103]"
4832,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\AwsAsgUtil.java,get numberofasg query failures,"@com . netflix . servo . annotations .  monitor ( name = ""num ofasg query failures"" description = "" number of queries made to aws to retrieve asg information and that failed"" type =  data source type . counter )  public long   (  )  {  return asg cache . ",255,4,get,1,[]
4833,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\AwsAsgUtil.java,get numberofasg query failures,"@com . netflix . servo . annotations .  monitor ( name = ""num ofasg query failures"" description = "" number of queries made to aws to retrieve asg information and that failed"" type =  data source type . counter )  public long   (  )  {  return asg cache . ",255,4,numberofasg,2,[]
4834,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\AwsAsgUtil.java,get numberofasg query failures,"@com . netflix . servo . annotations .  monitor ( name = ""num ofasg query failures"" description = "" number of queries made to aws to retrieve asg information and that failed"" type =  data source type . counter )  public long   (  )  {  return asg cache . ",255,4,query,3,[68]
4835,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\AwsAsgUtil.java,get numberofasg query failures,"@com . netflix . servo . annotations .  monitor ( name = ""num ofasg query failures"" description = "" number of queries made to aws to retrieve asg information and that failed"" type =  data source type . counter )  public long   (  )  {  return asg cache . ",255,4,failures,4,[74]
4836,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\AwsAsgUtil.java,get numberof elementsinasg cache,"@com . netflix . servo . annotations .  monitor ( name = ""num of elementsinasg cache"" description = "" number of elements in the asg  cache"" type =  data source type . gauge )  public long   (  )  {  return asg cache . size (  )  ;   }  ",236,4,get,1,[]
4837,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\AwsAsgUtil.java,get numberof elementsinasg cache,"@com . netflix . servo . annotations .  monitor ( name = ""num of elementsinasg cache"" description = "" number of elements in the asg  cache"" type =  data source type . gauge )  public long   (  )  {  return asg cache . size (  )  ;   }  ",236,4,numberof,2,[]
4838,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\AwsAsgUtil.java,get numberof elementsinasg cache,"@com . netflix . servo . annotations .  monitor ( name = ""num of elementsinasg cache"" description = "" number of elements in the asg  cache"" type =  data source type . gauge )  public long   (  )  {  return asg cache . size (  )  ;   }  ",236,4,elementsinasg,3,[65]
4839,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\AwsAsgUtil.java,get numberof elementsinasg cache,"@com . netflix . servo . annotations .  monitor ( name = ""num of elementsinasg cache"" description = "" number of elements in the asg  cache"" type =  data source type . gauge )  public long   (  )  {  return asg cache . size (  )  ;   }  ",236,4,cache,4,"[79, 133, 210]"
4840,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\AwsAsgUtil.java,hash code,@ override public int   (  )  {  int result = asg name  !  =  null  ?  asg name . hash code (  )  : 0 ;  result = 31 * result  +   ( asg account id  !  =  null  ?  asg account id . hash code (  )  : 0 )  ;  return result ;   }  ,228,2,hash,1,"[82, 181]"
4841,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\AwsAsgUtil.java,hash code,@ override public int   (  )  {  int result = asg name  !  =  null  ?  asg name . hash code (  )  : 0 ;  result = 31 * result  +   ( asg account id  !  =  null  ?  asg account id . hash code (  )  : 0 )  ;  return result ;   }  ,228,2,code,2,"[87, 186]"
4842,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\AwsAsgUtil.java,initialize sts session,"private  credentials   (  string asg account )  {  aws security token service sts = new aws security token service client ( new  instance profile credentials provider (  )  )  ;   string region = client config . get region (  )  ;  if  (  ! region . equals ( ""us - east - 1"" )  )   {  sts . set endpoint ( ""sts . ""  +  region  +  "" . amazonaws . com"" )  ;   }   string role name = server config . get list auto scaling groups role name (  )  ;   string role arn = ""arn:aws:iam::""  +  asg account  +  "":role / "" +  role name ;   assume role result assume role result = sts . assume role ( new  assume role request (  )  . with role arn ( role arn )  . with role session name ( ""sts - session - ""  +  asg account )  )  ;  return assume role result . get credentials (  )  ;   }  ",777,3,initialize,1,[]
4843,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\AwsAsgUtil.java,initialize sts session,"private  credentials   (  string asg account )  {  aws security token service sts = new aws security token service client ( new  instance profile credentials provider (  )  )  ;   string region = client config . get region (  )  ;  if  (  ! region . equals ( ""us - east - 1"" )  )   {  sts . set endpoint ( ""sts . ""  +  region  +  "" . amazonaws . com"" )  ;   }   string role name = server config . get list auto scaling groups role name (  )  ;   string role arn = ""arn:aws:iam::""  +  asg account  +  "":role / "" +  role name ;   assume role result assume role result = sts . assume role ( new  assume role request (  )  . with role arn ( role arn )  . with role session name ( ""sts - session - ""  +  asg account )  )  ;  return assume role result . get credentials (  )  ;   }  ",777,3,sts,2,"[78, 285, 307, 568, 677]"
4844,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\AwsAsgUtil.java,initialize sts session,"private  credentials   (  string asg account )  {  aws security token service sts = new aws security token service client ( new  instance profile credentials provider (  )  )  ;   string region = client config . get region (  )  ;  if  (  ! region . equals ( ""us - east - 1"" )  )   {  sts . set endpoint ( ""sts . ""  +  region  +  "" . amazonaws . com"" )  ;   }   string role name = server config . get list auto scaling groups role name (  )  ;   string role arn = ""arn:aws:iam::""  +  asg account  +  "":role / "" +  role name ;   assume role result assume role result = sts . assume role ( new  assume role request (  )  . with role arn ( role arn )  . with role session name ( ""sts - session - ""  +  asg account )  )  ;  return assume role result . get credentials (  )  ;   }  ",777,3,session,3,"[661, 683]"
4845,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\AwsAsgUtil.java,isasg enabled,"public boolean   (  instance info instance info )  {   cache key cache key = new  cache key ( get account id ( instance info account id )  instance info . getasg name (  )  )  ;   boolean result = asg cache . get if present ( cache key )  ;  if  ( result  !  =  null )   {  return result ;   }  else  {  logger . info ( "" cache value for asg  {  }  does not exist yet  async refreshing . "" cache key . asg name )  ;  asg cache . refresh ( cache key )  ;  return true ;   }   }  ",478,2,isasg,1,[]
4846,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\AwsAsgUtil.java,isasg enabled,"public boolean   (  instance info instance info )  {   cache key cache key = new  cache key ( get account id ( instance info account id )  instance info . getasg name (  )  )  ;   boolean result = asg cache . get if present ( cache key )  ;  if  ( result  !  =  null )   {  return result ;   }  else  {  logger . info ( "" cache value for asg  {  }  does not exist yet  async refreshing . "" cache key . asg name )  ;  asg cache . refresh ( cache key )  ;  return true ;   }   }  ",478,2,enabled,2,[]
4847,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\AwsAsgUtil.java,isasg enabledinaws,"private  boolean   (  string asg accountid  string asg name )  {  try  {   stopwatch t = this . loadasg info timer . start (  )  ;  boolean return value =  ! is add to load balancer suspended ( asg accountid asg name )  ;  t . stop (  )  ;  return return value ;   }  catch  (   throwable e )   {  logger . error ( "" could not get asg information from aws: "" e )  ;   }  return  boolean . true ;   }  ",401,2,isasg,1,[]
4848,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\AwsAsgUtil.java,isasg enabledinaws,"private  boolean   (  string asg accountid  string asg name )  {  try  {   stopwatch t = this . loadasg info timer . start (  )  ;  boolean return value =  ! is add to load balancer suspended ( asg accountid asg name )  ;  t . stop (  )  ;  return return value ;   }  catch  (   throwable e )   {  logger . error ( "" could not get asg information from aws: "" e )  ;   }  return  boolean . true ;   }  ",401,2,enabledinaws,2,[]
4849,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\AwsAsgUtil.java,is add to load balancer suspended,private boolean   (  auto scaling group asg )  {   list <  suspended process >  suspended processes = asg . get suspended processes (  )  ;  for  (   suspended process process : suspended processes )   {  if  ( prop   add   to   load   balancer . equals ( process . get process name (  )  )  )   {  return true ;   }   }  return false ;   }  ,342,6,is,1,[52]
4850,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\AwsAsgUtil.java,is add to load balancer suspended,private boolean   (  auto scaling group asg )  {   list <  suspended process >  suspended processes = asg . get suspended processes (  )  ;  for  (   suspended process process : suspended processes )   {  if  ( prop   add   to   load   balancer . equals ( process . get process name (  )  )  )   {  return true ;   }   }  return false ;   }  ,342,6,add,2,[218]
4851,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\AwsAsgUtil.java,is add to load balancer suspended,private boolean   (  auto scaling group asg )  {   list <  suspended process >  suspended processes = asg . get suspended processes (  )  ;  for  (   suspended process process : suspended processes )   {  if  ( prop   add   to   load   balancer . equals ( process . get process name (  )  )  )   {  return true ;   }   }  return false ;   }  ,342,6,to,3,"[23, 224]"
4852,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\AwsAsgUtil.java,is add to load balancer suspended,private boolean   (  auto scaling group asg )  {   list <  suspended process >  suspended processes = asg . get suspended processes (  )  ;  for  (   suspended process process : suspended processes )   {  if  ( prop   add   to   load   balancer . equals ( process . get process name (  )  )  )   {  return true ;   }   }  return false ;   }  ,342,6,load,4,[229]
4853,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\AwsAsgUtil.java,is add to load balancer suspended,private boolean   (  auto scaling group asg )  {   list <  suspended process >  suspended processes = asg . get suspended processes (  )  ;  for  (   suspended process process : suspended processes )   {  if  ( prop   add   to   load   balancer . equals ( process . get process name (  )  )  )   {  return true ;   }   }  return false ;   }  ,342,6,balancer,5,[236]
4854,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\AwsAsgUtil.java,is add to load balancer suspended,private boolean   (  auto scaling group asg )  {   list <  suspended process >  suspended processes = asg . get suspended processes (  )  ;  for  (   suspended process process : suspended processes )   {  if  ( prop   add   to   load   balancer . equals ( process . get process name (  )  )  )   {  return true ;   }   }  return false ;   }  ,342,6,suspended,6,"[59, 80, 112, 150, 178]"
4855,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\AwsAsgUtil.java,load,@ override public  boolean   (  cache key key )  throws  exception  {  return isasg enabledinaws ( key . asg account id key . asg name )  ;   }  ,145,1,load,1,[]
4856,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\AwsAsgUtil.java,new thread,"@ override public  thread   (  runnable r )  {   thread thread = new  thread ( r "" eureka - aws - isasg enabled"" )  ;  thread . set daemon ( true )  ;  return thread ;   }  ",173,2,new,1,[65]
4857,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\AwsAsgUtil.java,new thread,"@ override public  thread   (  runnable r )  {   thread thread = new  thread ( r "" eureka - aws - isasg enabled"" )  ;  thread . set daemon ( true )  ;  return thread ;   }  ",173,2,thread,2,"[19, 49, 56, 70, 119, 159]"
4858,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\AwsAsgUtil.java,reload,@ override public  listenable future <  boolean >    ( final  cache key key  boolean old value )  throws  exception  {  return listening cache reload executor . submit ( new  callable <  boolean >  (  )  {  @ override public  boolean call (  )  throws  ex,255,1,reload,1,[143]
4859,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\AwsAsgUtil.java,retrieve auto scaling group,"private  auto scaling group   (  string asg name )  {  if  (  strings . is null or empty ( asg name )  )   {  logger . warn ( ""null asg name specified  not attempting to retrieve  auto scaling group from aws"" )  ;  return null ;   }   describe auto scaling groups request request = new  describe auto scaling groups request (  )  . with auto scaling group names ( asg name )  ;   describe auto scaling groups result result = aws client . describe auto scaling groups ( request )  ;   list <  auto scaling group >  asgs = result . get auto scaling groups (  )  ;  if  ( asgs . is empty (  )  )   {  return null ;   }  else  {  return asgs . get ( 0 )  ;   }   }  ",662,4,retrieve,1,[170]
4860,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\AwsAsgUtil.java,retrieve auto scaling group,"private  auto scaling group   (  string asg name )  {  if  (  strings . is null or empty ( asg name )  )   {  logger . warn ( ""null asg name specified  not attempting to retrieve  auto scaling group from aws"" )  ;  return null ;   }   describe auto scaling groups request request = new  describe auto scaling groups request (  )  . with auto scaling group names ( asg name )  ;   describe auto scaling groups result result = aws client . describe auto scaling groups ( request )  ;   list <  auto scaling group >  asgs = result . get auto scaling groups (  )  ;  if  ( asgs . is empty (  )  )   {  return null ;   }  else  {  return asgs . get ( 0 )  ;   }   }  ",662,4,auto,2,"[9, 180, 244, 296, 337, 389, 447, 492, 534]"
4861,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\AwsAsgUtil.java,retrieve auto scaling group,"private  auto scaling group   (  string asg name )  {  if  (  strings . is null or empty ( asg name )  )   {  logger . warn ( ""null asg name specified  not attempting to retrieve  auto scaling group from aws"" )  ;  return null ;   }   describe auto scaling groups request request = new  describe auto scaling groups request (  )  . with auto scaling group names ( asg name )  ;   describe auto scaling groups result result = aws client . describe auto scaling groups ( request )  ;   list <  auto scaling group >  asgs = result . get auto scaling groups (  )  ;  if  ( asgs . is empty (  )  )   {  return null ;   }  else  {  return asgs . get ( 0 )  ;   }   }  ",662,4,scaling,3,"[14, 185, 249, 301, 342, 394, 452, 497, 539]"
4862,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\AwsAsgUtil.java,retrieve auto scaling group,"private  auto scaling group   (  string asg name )  {  if  (  strings . is null or empty ( asg name )  )   {  logger . warn ( ""null asg name specified  not attempting to retrieve  auto scaling group from aws"" )  ;  return null ;   }   describe auto scaling groups request request = new  describe auto scaling groups request (  )  . with auto scaling group names ( asg name )  ;   describe auto scaling groups result result = aws client . describe auto scaling groups ( request )  ;   list <  auto scaling group >  asgs = result . get auto scaling groups (  )  ;  if  ( asgs . is empty (  )  )   {  return null ;   }  else  {  return asgs . get ( 0 )  ;   }   }  ",662,4,group,4,"[22, 193, 257, 309, 350, 402, 460, 505, 547]"
4863,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\AwsAsgUtil.java,retrieve auto scaling group cross account,"private  auto scaling group   (  string asg account  string asg name )  {  logger . debug ( "" getting cross account asg for asg name:  {  }   asg account:  {  } "" asg name asg account )  ;   credentials credentials = sts credentials . get ( asg account )  ;  if  ( credentials  =  =  null || credentials . get expiration (  )  . get time (  )   <   system . current time millis (  )   +  1000 )   {  sts credentials . put ( asg account initialize sts session ( asg account )  )  ;  credentials = sts credentials . get ( asg account )  ;   }   client configuration client configuration = new  client configuration (  )  . with connection timeout ( server config . getasg query timeout ms (  )  )  ;   amazon auto scaling auto scaling client = new  amazon auto scaling client ( new  basic session credentials ( credentials . get access key id (  )  credentials . get secret access key (  )  credentials . get session token (  )  )  client configuration )  ;   string region = client config . get region (  )  ;  if  (  ! region . equals ( ""us - east - 1"" )  )   {  auto scaling client . set endpoint ( ""autoscaling . ""  +  region  +  "" . amazonaws . com"" )  ;   }   describe auto scaling groups request request = new  describe auto scaling groups request (  )  . with auto scaling group names ( asg name )  ;   describe auto scaling groups result result = auto scaling client . describe auto scaling groups ( request )  ;   list <  auto scaling group >  asgs = result . get auto scaling groups (  )  ;  if  ( asgs . is empty (  )  )   {  return null ;   }  else  {  return asgs . get ( 0 )  ;   }   }  ",1600,6,retrieve,1,[]
4864,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\AwsAsgUtil.java,retrieve auto scaling group cross account,"private  auto scaling group   (  string asg account  string asg name )  {  logger . debug ( "" getting cross account asg for asg name:  {  }   asg account:  {  } "" asg name asg account )  ;   credentials credentials = sts credentials . get ( asg account )  ;  if  ( credentials  =  =  null || credentials . get expiration (  )  . get time (  )   <   system . current time millis (  )   +  1000 )   {  sts credentials . put ( asg account initialize sts session ( asg account )  )  ;  credentials = sts credentials . get ( asg account )  ;   }   client configuration client configuration = new  client configuration (  )  . with connection timeout ( server config . getasg query timeout ms (  )  )  ;   amazon auto scaling auto scaling client = new  amazon auto scaling client ( new  basic session credentials ( credentials . get access key id (  )  credentials . get secret access key (  )  credentials . get session token (  )  )  client configuration )  ;   string region = client config . get region (  )  ;  if  (  ! region . equals ( ""us - east - 1"" )  )   {  auto scaling client . set endpoint ( ""autoscaling . ""  +  region  +  "" . amazonaws . com"" )  ;   }   describe auto scaling groups request request = new  describe auto scaling groups request (  )  . with auto scaling group names ( asg name )  ;   describe auto scaling groups result result = auto scaling client . describe auto scaling groups ( request )  ;   list <  auto scaling group >  asgs = result . get auto scaling groups (  )  ;  if  ( asgs . is empty (  )  )   {  return null ;   }  else  {  return asgs . get ( 0 )  ;   }   }  ",1600,6,auto,2,"[9, 707, 720, 754, 1063, 1101, 1173, 1225, 1266, 1318, 1354, 1385, 1430, 1472]"
4865,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\AwsAsgUtil.java,retrieve auto scaling group cross account,"private  auto scaling group   (  string asg account  string asg name )  {  logger . debug ( "" getting cross account asg for asg name:  {  }   asg account:  {  } "" asg name asg account )  ;   credentials credentials = sts credentials . get ( asg account )  ;  if  ( credentials  =  =  null || credentials . get expiration (  )  . get time (  )   <   system . current time millis (  )   +  1000 )   {  sts credentials . put ( asg account initialize sts session ( asg account )  )  ;  credentials = sts credentials . get ( asg account )  ;   }   client configuration client configuration = new  client configuration (  )  . with connection timeout ( server config . getasg query timeout ms (  )  )  ;   amazon auto scaling auto scaling client = new  amazon auto scaling client ( new  basic session credentials ( credentials . get access key id (  )  credentials . get secret access key (  )  credentials . get session token (  )  )  client configuration )  ;   string region = client config . get region (  )  ;  if  (  ! region . equals ( ""us - east - 1"" )  )   {  auto scaling client . set endpoint ( ""autoscaling . ""  +  region  +  "" . amazonaws . com"" )  ;   }   describe auto scaling groups request request = new  describe auto scaling groups request (  )  . with auto scaling group names ( asg name )  ;   describe auto scaling groups result result = auto scaling client . describe auto scaling groups ( request )  ;   list <  auto scaling group >  asgs = result . get auto scaling groups (  )  ;  if  ( asgs . is empty (  )  )   {  return null ;   }  else  {  return asgs . get ( 0 )  ;   }   }  ",1600,6,scaling,3,"[14, 712, 725, 759, 1068, 1105, 1178, 1230, 1271, 1323, 1359, 1390, 1435, 1477]"
4866,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\AwsAsgUtil.java,retrieve auto scaling group cross account,"private  auto scaling group   (  string asg account  string asg name )  {  logger . debug ( "" getting cross account asg for asg name:  {  }   asg account:  {  } "" asg name asg account )  ;   credentials credentials = sts credentials . get ( asg account )  ;  if  ( credentials  =  =  null || credentials . get expiration (  )  . get time (  )   <   system . current time millis (  )   +  1000 )   {  sts credentials . put ( asg account initialize sts session ( asg account )  )  ;  credentials = sts credentials . get ( asg account )  ;   }   client configuration client configuration = new  client configuration (  )  . with connection timeout ( server config . getasg query timeout ms (  )  )  ;   amazon auto scaling auto scaling client = new  amazon auto scaling client ( new  basic session credentials ( credentials . get access key id (  )  credentials . get secret access key (  )  credentials . get session token (  )  )  client configuration )  ;   string region = client config . get region (  )  ;  if  (  ! region . equals ( ""us - east - 1"" )  )   {  auto scaling client . set endpoint ( ""autoscaling . ""  +  region  +  "" . amazonaws . com"" )  ;   }   describe auto scaling groups request request = new  describe auto scaling groups request (  )  . with auto scaling group names ( asg name )  ;   describe auto scaling groups result result = auto scaling client . describe auto scaling groups ( request )  ;   list <  auto scaling group >  asgs = result . get auto scaling groups (  )  ;  if  ( asgs . is empty (  )  )   {  return null ;   }  else  {  return asgs . get ( 0 )  ;   }   }  ",1600,6,group,4,"[22, 1186, 1238, 1279, 1331, 1398, 1443, 1485]"
4867,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\AwsAsgUtil.java,retrieve auto scaling group cross account,"private  auto scaling group   (  string asg account  string asg name )  {  logger . debug ( "" getting cross account asg for asg name:  {  }   asg account:  {  } "" asg name asg account )  ;   credentials credentials = sts credentials . get ( asg account )  ;  if  ( credentials  =  =  null || credentials . get expiration (  )  . get time (  )   <   system . current time millis (  )   +  1000 )   {  sts credentials . put ( asg account initialize sts session ( asg account )  )  ;  credentials = sts credentials . get ( asg account )  ;   }   client configuration client configuration = new  client configuration (  )  . with connection timeout ( server config . getasg query timeout ms (  )  )  ;   amazon auto scaling auto scaling client = new  amazon auto scaling client ( new  basic session credentials ( credentials . get access key id (  )  credentials . get secret access key (  )  credentials . get session token (  )  )  client configuration )  ;   string region = client config . get region (  )  ;  if  (  ! region . equals ( ""us - east - 1"" )  )   {  auto scaling client . set endpoint ( ""autoscaling . ""  +  region  +  "" . amazonaws . com"" )  ;   }   describe auto scaling groups request request = new  describe auto scaling groups request (  )  . with auto scaling group names ( asg name )  ;   describe auto scaling groups result result = auto scaling client . describe auto scaling groups ( request )  ;   list <  auto scaling group >  asgs = result . get auto scaling groups (  )  ;  if  ( asgs . is empty (  )  )   {  return null ;   }  else  {  return asgs . get ( 0 )  ;   }   }  ",1600,6,cross,5,[102]
4868,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\AwsAsgUtil.java,retrieve auto scaling group cross account,"private  auto scaling group   (  string asg account  string asg name )  {  logger . debug ( "" getting cross account asg for asg name:  {  }   asg account:  {  } "" asg name asg account )  ;   credentials credentials = sts credentials . get ( asg account )  ;  if  ( credentials  =  =  null || credentials . get expiration (  )  . get time (  )   <   system . current time millis (  )   +  1000 )   {  sts credentials . put ( asg account initialize sts session ( asg account )  )  ;  credentials = sts credentials . get ( asg account )  ;   }   client configuration client configuration = new  client configuration (  )  . with connection timeout ( server config . getasg query timeout ms (  )  )  ;   amazon auto scaling auto scaling client = new  amazon auto scaling client ( new  basic session credentials ( credentials . get access key id (  )  credentials . get secret access key (  )  credentials . get session token (  )  )  client configuration )  ;   string region = client config . get region (  )  ;  if  (  ! region . equals ( ""us - east - 1"" )  )   {  auto scaling client . set endpoint ( ""autoscaling . ""  +  region  +  "" . amazonaws . com"" )  ;   }   describe auto scaling groups request request = new  describe auto scaling groups request (  )  . with auto scaling group names ( asg name )  ;   describe auto scaling groups result result = auto scaling client . describe auto scaling groups ( request )  ;   list <  auto scaling group >  asgs = result . get auto scaling groups (  )  ;  if  ( asgs . is empty (  )  )   {  return null ;   }  else  {  return asgs . get ( 0 )  ;   }   }  ",1600,6,account,6,"[44, 108, 146, 176, 245, 428, 465, 524]"
4869,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\AwsAsgUtil.java,run,"@ override public void   (  )  {  try  {   set <  cache key >  cache keys = get cache keys (  )  ;  if  ( logger . is debug enabled (  )  )   {  logger . debug ( "" trying to refresh the keys for  {  } ""  arrays . to string ( cache keys . to array (  )  ) ",255,1,run,1,[]
4870,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\AwsAsgUtil.java,set status,public void   (  string asg name boolean enabled )  {   string asg account id = getasg account ( asg name )  ;  asg cache . put ( new  cache key ( asg account id asg name )  enabled )  ;   }  ,192,2,set,1,[]
4871,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\AwsAsgUtil.java,set status,public void   (  string asg name boolean enabled )  {   string asg account id = getasg account ( asg name )  ;  asg cache . put ( new  cache key ( asg account id asg name )  enabled )  ;   }  ,192,2,status,2,[]
4872,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\AwsAsgUtil.java,to string,"@ override public  string   (  )  {  return "" cache key { ""  +  ""asg name = '""  +  asg name  +  '\'' +  ""  asg account id = '"" +  asg account id +  '\'' +  ' } ' ;   }  ",169,2,to,1,[]
4873,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\AwsAsgUtil.java,to string,"@ override public  string   (  )  {  return "" cache key { ""  +  ""asg name = '""  +  asg name  +  '\'' +  ""  asg account id = '"" +  asg account id +  '\'' +  ' } ' ;   }  ",169,2,string,2,[19]
4874,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\AwsBinderDelegate.java, aws binder delegate,@ inject public   (  eureka server config server config  eureka client config client config  peer aware instance registry registry  application info manager application info manager )  {   aws binding strategy binding strategy = server config . get bindin,255,3,aws,1,[189]
4875,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\AwsBinderDelegate.java, aws binder delegate,@ inject public   (  eureka server config server config  eureka client config client config  peer aware instance registry registry  application info manager application info manager )  {   aws binding strategy binding strategy = server config . get bindin,255,3,binder,2,[]
4876,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\AwsBinderDelegate.java, aws binder delegate,@ inject public   (  eureka server config server config  eureka client config client config  peer aware instance registry registry  application info manager application info manager )  {   aws binding strategy binding strategy = server config . get bindin,255,3,delegate,3,[]
4877,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\AwsBinderDelegate.java,shutdown,@ override @ pre destroy public void   (  )  throws  exception  {  delegate . shutdown (  )  ;   }  ,100,1,shutdown,1,[78]
4878,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\AwsBinderDelegate.java,start,@ override @ post construct public void   (  )  throws  exception  {  delegate . start (  )  ;   }  ,100,1,start,1,[81]
4879,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\EIPManager.java,eip manager,@ inject public   (  eureka server config server config  eureka client config client config  peer aware instance registry registry  application info manager application info manager )  {  this . server config = server config ;  this . client config = clie,255,2,eip,1,[]
4880,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\EIPManager.java,eip manager,@ inject public   (  eureka server config server config  eureka client config client config  peer aware instance registry registry  application info manager application info manager )  {  this . server config = server config ;  this . client config = clie,255,2,manager,2,"[149, 174]"
4881,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\EIPManager.java,bindeip,"public void   (  )  {   instance info my info = application info manager . get info (  )  ;   string my instance id =  (  (  amazon info ) my info . get data center info (  )  )  . get (  meta data key . instance id )  ;   string my zone =  (  (  amazon info ) my info . get data center info (  )  )  . get (  meta data key . availability zone )  ;   collection <  string >  candidateei ps = get candidateei ps ( my instance id my zone )  ;   amazonec2 ec2 service = getec2 service (  )  ;  boolean is myinstance associated witheip = false ;   address selectedeip = null ;  for  (   string eip entry : candidateei ps )   {  try  {   string associated instance id ;   describe addresses request describe address request = new  describe addresses request (  )  . with public ips ( eip entry )  ;   describe addresses result result = ec2 service . describe addresses ( describe address request )  ;  if  (  ( result . get addresses (  )   !  =  null )  &&  (  ! result . get addresses (  )  . is empty (  )  )  )   {   address eip address = result . get addresses (  )  . get ( 0 )  ;  associated instance id = eip address . get instance id (  )  ;  if  (  (  ( associated instance id  =  =  null )  ||  ( associated instance id . is empty (  )  )  )  )   {  if  ( selectedeip  =  =  null )   {  selectedeip = eip address ;   }   }  else if  ( is myinstance associated witheip =  ( associated instance id . equals ( my instance id )  )  )   {  selectedeip = eip address ;  break ;   }  else  {  logger . warn ( "" the selected eip  {  }  is associated with another instance  {  }  according to aws ""  +  "" hence skipping this"" eip entry associated instance id )  ;   }   }   }  catch  (   throwable t )   {  logger . error ( "" failed to bind elastic ip:  {  }  to  {  } "" eip entry my instance id t )  ;   }   }  if  ( null  !  =  selectedeip )   {   string public ip = selectedeip . get public ip (  )  ;  if  (  ! is myinstance associated witheip )   {   associate address request associate address request = new  associate address request (  )  . with instance id ( my instance id )  ;   string domain = selectedeip . get domain (  )  ;  if  ( ""vpc"" . equals ( domain )  )   {  associate address request . set allocation id ( selectedeip . get allocation id (  )  )  ;   }  else  {  associate address request . set public ip ( public ip )  ;   }  ec2 service . associate address ( associate address request )  ;  logger . info ( ""\n\n\n associated  {  }  running in zone:  {  }  to elastic ip:  {  } "" my instance id my zone public ip )  ;   }  logger . info ( "" my instance  {  }  seems to be already associated with the eip  {  } "" my instance id public ip )  ;   }  else  {  logger . info ( "" no eip is free to be associated with this instance .   candidate ei ps are:  {  } "" candidateei ps )  ;   }   }  ",2808,1,bindeip,1,[]
4882,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\EIPManager.java,get candidateei ps,"public  collection <  string >    (  string my instance id  string my zone )  {  if  ( my zone  =  =  null )   {  my zone = ""us - east - 1d"" ;   }   collection <  string >  eip candidates = client config . should use dns for fetching service urls (  )   ?  getei ps for zone fromdns ( my zone )  : getei ps for zone from config ( my zone )  ;  if  ( eip candidates  =  =  null || eip candidates . size (  )   =  =  0 )   {  throw new  runtime exception ( "" could not get any elastic ips from the eip pool for zone :""  +  my zone )  ;   }  return eip candidates ;   }  ",568,3,get,1,"[257, 298, 467]"
4883,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\EIPManager.java,get candidateei ps,"public  collection <  string >    (  string my instance id  string my zone )  {  if  ( my zone  =  =  null )   {  my zone = ""us - east - 1d"" ;   }   collection <  string >  eip candidates = client config . should use dns for fetching service urls (  )   ?  getei ps for zone fromdns ( my zone )  : getei ps for zone from config ( my zone )  ;  if  ( eip candidates  =  =  null || eip candidates . size (  )   =  =  0 )   {  throw new  runtime exception ( "" could not get any elastic ips from the eip pool for zone :""  +  my zone )  ;   }  return eip candidates ;   }  ",568,3,candidateei,2,[]
4884,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\EIPManager.java,get candidateei ps,"public  collection <  string >    (  string my instance id  string my zone )  {  if  ( my zone  =  =  null )   {  my zone = ""us - east - 1d"" ;   }   collection <  string >  eip candidates = client config . should use dns for fetching service urls (  )   ?  getei ps for zone fromdns ( my zone )  : getei ps for zone from config ( my zone )  ;  if  ( eip candidates  =  =  null || eip candidates . size (  )   =  =  0 )   {  throw new  runtime exception ( "" could not get any elastic ips from the eip pool for zone :""  +  my zone )  ;   }  return eip candidates ;   }  ",568,3,ps,3,"[263, 304, 484]"
4885,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\EIPManager.java,getec service,"private  amazonec2   (  )  {   string aws access id = server config . getaws access id (  )  ;   string aws secret key = server config . getaws secret key (  )  ;   amazonec2 ec2 service ;  if  ( null  !  =  aws access id &&  ! """" . equals ( aws access id )  && null  !  =  aws secret key &&  ! """" . equals ( aws secret key )  )   {  ec2 service = new  amazonec2 client ( new  basicaws credentials ( aws access id aws secret key )  )  ;   }  else  {  ec2 service = new  amazonec2 client ( new  instance profile credentials provider (  )  )  ;   }   string region = client config . get region (  )  ;  region = region . trim (  )  . to lower case (  )  ;  ec2 service . set endpoint ( ""ec2 . ""  +  region  +  "" . amazonaws . com"" )  ;  return ec2 service ;   }  ",761,2,getec,1,[]
4886,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\EIPManager.java,getec service,"private  amazonec2   (  )  {   string aws access id = server config . getaws access id (  )  ;   string aws secret key = server config . getaws secret key (  )  ;   amazonec2 ec2 service ;  if  ( null  !  =  aws access id &&  ! """" . equals ( aws access id )  && null  !  =  aws secret key &&  ! """" . equals ( aws secret key )  )   {  ec2 service = new  amazonec2 client ( new  basicaws credentials ( aws access id aws secret key )  )  ;   }  else  {  ec2 service = new  amazonec2 client ( new  instance profile credentials provider (  )  )  ;   }   string region = client config . get region (  )  ;  region = region . trim (  )  . to lower case (  )  ;  ec2 service . set endpoint ( ""ec2 . ""  +  region  +  "" . amazonaws . com"" )  ;  return ec2 service ;   }  ",761,2,service,2,"[179, 338, 455, 659, 746]"
4887,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\EIPManager.java,getei ps for zone from config,private  collection <  string >    (  string my zone )  {   list <  string >  ec2 urls = client config . get eureka server service urls ( my zone )  ;  return getei ps from service urls ( ec2 urls )  ;   }  ,207,6,getei,1,[159]
4888,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\EIPManager.java,getei ps for zone from config,private  collection <  string >    (  string my zone )  {   list <  string >  ec2 urls = client config . get eureka server service urls ( my zone )  ;  return getei ps from service urls ( ec2 urls )  ;   }  ,207,6,ps,2,[165]
4889,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\EIPManager.java,getei ps for zone from config,private  collection <  string >    (  string my zone )  {   list <  string >  ec2 urls = client config . get eureka server service urls ( my zone )  ;  return getei ps from service urls ( ec2 urls )  ;   }  ,207,6,for,3,[]
4890,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\EIPManager.java,getei ps for zone from config,private  collection <  string >    (  string my zone )  {   list <  string >  ec2 urls = client config . get eureka server service urls ( my zone )  ;  return getei ps from service urls ( ec2 urls )  ;   }  ,207,6,zone,4,"[48, 141]"
4891,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\EIPManager.java,getei ps for zone from config,private  collection <  string >    (  string my zone )  {   list <  string >  ec2 urls = client config . get eureka server service urls ( my zone )  ;  return getei ps from service urls ( ec2 urls )  ;   }  ,207,6,from,5,[168]
4892,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\EIPManager.java,getei ps for zone from config,private  collection <  string >    (  string my zone )  {   list <  string >  ec2 urls = client config . get eureka server service urls ( my zone )  ;  return getei ps from service urls ( ec2 urls )  ;   }  ,207,6,config,6,[96]
4893,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\EIPManager.java,getei ps for zone fromdns,private  collection <  string >    (  string my zone )  {   list <  string >  ec2 urls =  endpoint utils . get service urls fromdns ( client config my zone true new  endpoint utils .  instance info based url randomizer ( application info manager . get info (  )  )  )  ;  return getei ps from service urls ( ec2 urls )  ;   }  ,327,5,getei,1,[279]
4894,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\EIPManager.java,getei ps for zone fromdns,private  collection <  string >    (  string my zone )  {   list <  string >  ec2 urls =  endpoint utils . get service urls fromdns ( client config my zone true new  endpoint utils .  instance info based url randomizer ( application info manager . get info (  )  )  )  ;  return getei ps from service urls ( ec2 urls )  ;   }  ,327,5,ps,2,[285]
4895,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\EIPManager.java,getei ps for zone fromdns,private  collection <  string >    (  string my zone )  {   list <  string >  ec2 urls =  endpoint utils . get service urls fromdns ( client config my zone true new  endpoint utils .  instance info based url randomizer ( application info manager . get info (  )  )  )  ;  return getei ps from service urls ( ec2 urls )  ;   }  ,327,5,for,3,[]
4896,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\EIPManager.java,getei ps for zone fromdns,private  collection <  string >    (  string my zone )  {   list <  string >  ec2 urls =  endpoint utils . get service urls fromdns ( client config my zone true new  endpoint utils .  instance info based url randomizer ( application info manager . get info (  )  )  )  ;  return getei ps from service urls ( ec2 urls )  ;   }  ,327,5,zone,4,"[48, 151]"
4897,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\EIPManager.java,getei ps for zone fromdns,private  collection <  string >    (  string my zone )  {   list <  string >  ec2 urls =  endpoint utils . get service urls fromdns ( client config my zone true new  endpoint utils .  instance info based url randomizer ( application info manager . get info (  )  )  )  ;  return getei ps from service urls ( ec2 urls )  ;   }  ,327,5,fromdns,5,[124]
4898,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\EIPManager.java,getei ps from service urls,"private  collection <  string >    (  list <  string >  ec2 urls )  {   list <  string >  returned urls = new  array list <  string >  (  )  ;   string region = client config . get region (  )  ;   string region phrase = """" ;  if  (  ! us   east   1 . equals ( region )  )   {  region phrase = "" . ""  +  region ;   }  for  (   string cname : ec2 urls )   {  int begin index = cname . index of ( ""ec2 - "" )   +  4 ;  if  (  - 1  <  begin index )   {  int end index = cname . index of ( region phrase  +  "" . compute"" )  ;   string eip str = cname . substring ( begin index end index )  ;   string eip = eip str . replace all ( ""\\ - "" "" . "" )  ;  returned urls . add ( eip )  ;   }   }  return returned urls ;   }  ",714,5,getei,1,[]
4899,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\EIPManager.java,getei ps from service urls,"private  collection <  string >    (  list <  string >  ec2 urls )  {   list <  string >  returned urls = new  array list <  string >  (  )  ;   string region = client config . get region (  )  ;   string region phrase = """" ;  if  (  ! us   east   1 . equals ( region )  )   {  region phrase = "" . ""  +  region ;   }  for  (   string cname : ec2 urls )   {  int begin index = cname . index of ( ""ec2 - "" )   +  4 ;  if  (  - 1  <  begin index )   {  int end index = cname . index of ( region phrase  +  "" . compute"" )  ;   string eip str = cname . substring ( begin index end index )  ;   string eip = eip str . replace all ( ""\\ - "" "" . "" )  ;  returned urls . add ( eip )  ;   }   }  return returned urls ;   }  ",714,5,ps,2,[]
4900,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\EIPManager.java,getei ps from service urls,"private  collection <  string >    (  list <  string >  ec2 urls )  {   list <  string >  returned urls = new  array list <  string >  (  )  ;   string region = client config . get region (  )  ;   string region phrase = """" ;  if  (  ! us   east   1 . equals ( region )  )   {  region phrase = "" . ""  +  region ;   }  for  (   string cname : ec2 urls )   {  int begin index = cname . index of ( ""ec2 - "" )   +  4 ;  if  (  - 1  <  begin index )   {  int end index = cname . index of ( region phrase  +  "" . compute"" )  ;   string eip str = cname . substring ( begin index end index )  ;   string eip = eip str . replace all ( ""\\ - "" "" . "" )  ;  returned urls . add ( eip )  ;   }   }  return returned urls ;   }  ",714,5,from,3,[]
4901,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\EIPManager.java,getei ps from service urls,"private  collection <  string >    (  list <  string >  ec2 urls )  {   list <  string >  returned urls = new  array list <  string >  (  )  ;   string region = client config . get region (  )  ;   string region phrase = """" ;  if  (  ! us   east   1 . equals ( region )  )   {  region phrase = "" . ""  +  region ;   }  for  (   string cname : ec2 urls )   {  int begin index = cname . index of ( ""ec2 - "" )   +  4 ;  if  (  - 1  <  begin index )   {  int end index = cname . index of ( region phrase  +  "" . compute"" )  ;   string eip str = cname . substring ( begin index end index )  ;   string eip = eip str . replace all ( ""\\ - "" "" . "" )  ;  returned urls . add ( eip )  ;   }   }  return returned urls ;   }  ",714,5,service,4,[]
4902,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\EIPManager.java,getei ps from service urls,"private  collection <  string >    (  list <  string >  ec2 urls )  {   list <  string >  returned urls = new  array list <  string >  (  )  ;   string region = client config . get region (  )  ;   string region phrase = """" ;  if  (  ! us   east   1 . equals ( region )  )   {  region phrase = "" . ""  +  region ;   }  for  (   string cname : ec2 urls )   {  int begin index = cname . index of ( ""ec2 - "" )   +  4 ;  if  (  - 1  <  begin index )   {  int end index = cname . index of ( region phrase  +  "" . compute"" )  ;   string eip str = cname . substring ( begin index end index )  ;   string eip = eip str . replace all ( ""\\ - "" "" . "" )  ;  returned urls . add ( eip )  ;   }   }  return returned urls ;   }  ",714,5,urls,5,"[60, 99, 346, 655, 702]"
4903,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\EIPManager.java,handleeip binding,"private void   (  )  throws  interrupted exception  {  int retries = server config . geteip bind rebind retries (  )  ;  for  ( int i = 0 ;  i  <  retries ;  i +  +  )   {  try  {  if  ( iseip bound (  )  )   {  break ;   }  else  {  bindeip (  )  ;   }   }  catch  (   throwable e )   {  logger . error ( "" cannot bind to eip"" e )  ;   thread . sleep ( eip   bind   sleep   time   ms )  ;   }   }  timer . schedule ( new eip binding task (  )  server config . geteip binding retry interval ms when unbound (  )  )  ;   }  ",523,2,handleeip,1,[]
4904,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\EIPManager.java,handleeip binding,"private void   (  )  throws  interrupted exception  {  int retries = server config . geteip bind rebind retries (  )  ;  for  ( int i = 0 ;  i  <  retries ;  i +  +  )   {  try  {  if  ( iseip bound (  )  )   {  break ;   }  else  {  bindeip (  )  ;   }   }  catch  (   throwable e )   {  logger . error ( "" cannot bind to eip"" e )  ;   thread . sleep ( eip   bind   sleep   time   ms )  ;   }   }  timer . schedule ( new eip binding task (  )  server config . geteip binding retry interval ms when unbound (  )  )  ;   }  ",523,2,binding,2,"[426, 468]"
4905,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\EIPManager.java,iseip bound,"public boolean   (  )  {   instance info my info = application info manager . get info (  )  ;   string my instance id =  (  (  amazon info ) my info . get data center info (  )  )  . get (  meta data key . instance id )  ;   string my zone =  (  (  amazon info ) my info . get data center info (  )  )  . get (  meta data key . availability zone )  ;   string my publicip =  (  (  amazon info ) my info . get data center info (  )  )  . get (  meta data key . public ipv4 )  ;   collection <  string >  candidateei ps = get candidateei ps ( my instance id my zone )  ;  for  (   string eip entry : candidateei ps )   {  if  ( eip entry . equals ( my publicip )  )   {  logger . info ( "" my instance  {  }  seems to be already associated with the public ip  {  } "" my instance id my publicip )  ;  return true ;   }   }  return false ;   }  ",841,2,iseip,1,[]
4906,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\EIPManager.java,iseip bound,"public boolean   (  )  {   instance info my info = application info manager . get info (  )  ;   string my instance id =  (  (  amazon info ) my info . get data center info (  )  )  . get (  meta data key . instance id )  ;   string my zone =  (  (  amazon info ) my info . get data center info (  )  )  . get (  meta data key . availability zone )  ;   string my publicip =  (  (  amazon info ) my info . get data center info (  )  )  . get (  meta data key . public ipv4 )  ;   collection <  string >  candidateei ps = get candidateei ps ( my instance id my zone )  ;  for  (   string eip entry : candidateei ps )   {  if  ( eip entry . equals ( my publicip )  )   {  logger . info ( "" my instance  {  }  seems to be already associated with the public ip  {  } "" my instance id my publicip )  ;  return true ;   }   }  return false ;   }  ",841,2,bound,2,[]
4907,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\EIPManager.java,run,@ override public void   (  )  {  boolean iseip bound = false ;  try  {  iseip bound = iseip bound (  )  ;  if  (  ! iseip bound )   {  registry . clear registry (  )  ;  int count = registry . sync up (  )  ;  registry . open for traffic ( application in,255,1,run,1,[]
4908,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\EIPManager.java,shutdown,@ pre destroy public void   (  )  throws  exception  {  timer . cancel (  )  ;  for  ( int i = 0 ;  i  <  server config . geteip bind rebind retries (  )  ;  i +  +  )   {  try  {  unbindeip (  )  ;  break ;   }  catch  (   exception e )   {  logger . war,255,1,shutdown,1,[]
4909,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\EIPManager.java,start,@ post construct public void   (  )  throws  exception  {  handleeip binding (  )  ;   }  ,90,1,start,1,[]
4910,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\EIPManager.java,unbindeip,"public void   (  )  throws  exception  {   instance info my info = application info manager . get info (  )  ;   string my publicip = null ;  if  ( my info  !  =  null && my info . get data center info (  )  . get name (  )   =  =   name .  amazon )   {  my publicip =  (  (  amazon info ) my info . get data center info (  )  )  . get (  meta data key . public ipv4 )  ;  if  ( my publicip  =  =  null )   {  logger . info ( "" instance is not associated with an eip .   will not try to unbind"" )  ;  return ;   }  try  {   amazonec2 ec2 service = getec2 service (  )  ;   describe addresses request describe address request = new  describe addresses request (  )  . with public ips ( my publicip )  ;   describe addresses result result = ec2 service . describe addresses ( describe address request )  ;  if  (  ( result . get addresses (  )   !  =  null )  &&  (  ! result . get addresses (  )  . is empty (  )  )  )   {   address eip address = result . get addresses (  )  . get ( 0 )  ;   disassociate address request dissociate request = new  disassociate address request (  )  ;   string domain = eip address . get domain (  )  ;  if  ( ""vpc"" . equals ( domain )  )   {  dissociate request . set association id ( eip address . get association id (  )  )  ;   }  else  {  dissociate request . set public ip ( eip address . get public ip (  )  )  ;   }  ec2 service . disassociate address ( dissociate request )  ;  logger . info ( "" dissociated the eip  {  }  from this instance"" my publicip )  ;   }   }  catch  (   throwable e )   {  throw new  runtime exception ( "" cannot dissociate address from this instance"" e )  ;   }   }   }  ",1639,1,unbindeip,1,[]
4911,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\AsgReplicationTask.java, asg replication task,protected   (  string peer node name  action action  string asg name asg status new status )  {  super ( peer node name action )  ;  this . asg name = asg name ;  this . new status = new status ;   }  ,201,3,asg,1,"[60, 69, 140, 151]"
4912,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\AsgReplicationTask.java, asg replication task,protected   (  string peer node name  action action  string asg name asg status new status )  {  super ( peer node name action )  ;  this . asg name = asg name ;  this . new status = new status ;   }  ,201,3,replication,2,[]
4913,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\AsgReplicationTask.java, asg replication task,protected   (  string peer node name  action action  string asg name asg status new status )  {  super ( peer node name action )  ;  this . asg name = asg name ;  this . new status = new status ;   }  ,201,3,task,3,[]
4914,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\AsgReplicationTask.java,get asg name,public  string   (  )  {  return asg name ;   }  ,49,3,get,1,[]
4915,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\AsgReplicationTask.java,get asg name,public  string   (  )  {  return asg name ;   }  ,49,3,asg,2,[33]
4916,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\AsgReplicationTask.java,get asg name,public  string   (  )  {  return asg name ;   }  ,49,3,name,3,[37]
4917,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\AsgReplicationTask.java,get new status,public asg status   (  )  {  return new status ;   }  ,54,3,get,1,[]
4918,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\AsgReplicationTask.java,get new status,public asg status   (  )  {  return new status ;   }  ,54,3,new,2,[36]
4919,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\AsgReplicationTask.java,get new status,public asg status   (  )  {  return new status ;   }  ,54,3,status,3,"[11, 40]"
4920,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\AsgReplicationTask.java,get task name,@ override public  string   (  )  {  return asg name  +  ':'  +  action +  '@' +  peer node name ;   }  ,104,3,get,1,[]
4921,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\AsgReplicationTask.java,get task name,@ override public  string   (  )  {  return asg name  +  ':'  +  action +  '@' +  peer node name ;   }  ,104,3,task,2,[]
4922,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\AsgReplicationTask.java,get task name,@ override public  string   (  )  {  return asg name  +  ':'  +  action +  '@' +  peer node name ;   }  ,104,3,name,3,"[48, 92]"
4923,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\Route53Binder.java, resource record set with hosted zone,public   (  hosted zone hosted zone  resource record set resource record set )  {  this . hosted zone = hosted zone ;  this . resource record set = resource record set ;   }  ,175,6,resource,1,"[37, 57, 126, 148]"
4924,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\Route53Binder.java, resource record set with hosted zone,public   (  hosted zone hosted zone  resource record set resource record set )  {  this . hosted zone = hosted zone ;  this . resource record set = resource record set ;   }  ,175,6,record,2,"[46, 66, 135, 157]"
4925,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\Route53Binder.java, resource record set with hosted zone,public   (  hosted zone hosted zone  resource record set resource record set )  {  this . hosted zone = hosted zone ;  this . resource record set = resource record set ;   }  ,175,6,set,3,"[53, 73, 142, 164]"
4926,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\Route53Binder.java, resource record set with hosted zone,public   (  hosted zone hosted zone  resource record set resource record set )  {  this . hosted zone = hosted zone ;  this . resource record set = resource record set ;   }  ,175,6,with,4,[]
4927,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\Route53Binder.java, resource record set with hosted zone,public   (  hosted zone hosted zone  resource record set resource record set )  {  this . hosted zone = hosted zone ;  this . resource record set = resource record set ;   }  ,175,6,hosted,5,"[12, 24, 90, 104]"
4928,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\Route53Binder.java, resource record set with hosted zone,public   (  hosted zone hosted zone  resource record set resource record set )  {  this . hosted zone = hosted zone ;  this . resource record set = resource record set ;   }  ,175,6,zone,6,"[19, 31, 97, 111]"
4929,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\Route53Binder.java, route binder,"public   (  string registration hostname  eureka server config server config  eureka client config client config  application info manager application info manager )  {  this . registration hostname = registration hostname ;  this . server config = server config ;  this . client config = client config ;  this . application info manager = application info manager ;  this . timer = new  timer ( "" eureka -  route53 binder"" true )  ;  this . amazon route53 client = get amazon route53 client ( server config )  ;   }  ",518,2,route,1,"[408, 449, 477]"
4930,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\Route53Binder.java, route binder,"public   (  string registration hostname  eureka server config server config  eureka client config client config  application info manager application info manager )  {  this . registration hostname = registration hostname ;  this . server config = server config ;  this . client config = client config ;  this . application info manager = application info manager ;  this . timer = new  timer ( "" eureka -  route53 binder"" true )  ;  this . amazon route53 client = get amazon route53 client ( server config )  ;   }  ",518,2,binder,2,[416]
4931,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\Route53Binder.java,create resource record set,private boolean   (  resource record set with hosted zone rrs )  throws  interrupted exception  {  rrs . get resource record set (  )  . set resource records (  arrays . as list ( new  resource record ( registration hostname )  )  )  ;   change change = new  change (  change action . upsert rrs . get resource record set (  )  )  ;  if  ( execute change with retry ( change rrs . get hosted zone (  )  )  )   {   thread . sleep ( 1000 )  ;   resource record set resource record set = get resource record set ( rrs . get resource record set (  )  . get name (  )  rrs . get hosted zone (  )  )  ;  return resource record set . get resource records (  )  . equals ( rrs . get resource record set (  )  . get resource records (  )  )  ;   }  return false ;   }  ,760,4,create,1,[]
4932,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\Route53Binder.java,create resource record set,private boolean   (  resource record set with hosted zone rrs )  throws  interrupted exception  {  rrs . get resource record set (  )  . set resource records (  arrays . as list ( new  resource record ( registration hostname )  )  )  ;   change change = new  change (  change action . upsert rrs . get resource record set (  )  )  ;  if  ( execute change with retry ( change rrs . get hosted zone (  )  )  )   {   thread . sleep ( 1000 )  ;   resource record set resource record set = get resource record set ( rrs . get resource record set (  )  . get name (  )  rrs . get hosted zone (  )  )  ;  return resource record set . get resource records (  )  . equals ( rrs . get resource record set (  )  . get resource records (  )  )  ;   }  return false ;   }  ,760,4,resource,2,"[21, 109, 141, 185, 302, 443, 463, 489, 521, 605, 631, 675, 707]"
4933,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\Route53Binder.java,create resource record set,private boolean   (  resource record set with hosted zone rrs )  throws  interrupted exception  {  rrs . get resource record set (  )  . set resource records (  arrays . as list ( new  resource record ( registration hostname )  )  )  ;   change change = new  change (  change action . upsert rrs . get resource record set (  )  )  ;  if  ( execute change with retry ( change rrs . get hosted zone (  )  )  )   {   thread . sleep ( 1000 )  ;   resource record set resource record set = get resource record set ( rrs . get resource record set (  )  . get name (  )  rrs . get hosted zone (  )  )  ;  return resource record set . get resource records (  )  . equals ( rrs . get resource record set (  )  . get resource records (  )  )  ;   }  return false ;   }  ,760,4,record,3,"[30, 118, 150, 194, 311, 452, 472, 498, 530, 614, 640, 684, 716]"
4934,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\Route53Binder.java,create resource record set,private boolean   (  resource record set with hosted zone rrs )  throws  interrupted exception  {  rrs . get resource record set (  )  . set resource records (  arrays . as list ( new  resource record ( registration hostname )  )  )  ;   change change = new  change (  change action . upsert rrs . get resource record set (  )  )  ;  if  ( execute change with retry ( change rrs . get hosted zone (  )  )  )   {   thread . sleep ( 1000 )  ;   resource record set resource record set = get resource record set ( rrs . get resource record set (  )  . get name (  )  rrs . get hosted zone (  )  )  ;  return resource record set . get resource records (  )  . equals ( rrs . get resource record set (  )  . get resource records (  )  )  ;   }  return false ;   }  ,760,4,set,4,"[37, 125, 137, 318, 459, 479, 505, 537, 621, 691]"
4935,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\Route53Binder.java,do bind,"private void   (  )  throws  interrupted exception  {   list <  resource record set with hosted zone >  free domains = new  array list <  >  (  )  ;   list <  string >  domains = get declared domains (  )  ;  for  (   string domain : domains )   {   resource record set with hosted zone rrs = get resource record set with hosted zone ( domain )  ;  if  ( rrs  !  =  null )   {  if  ( rrs . get resource record set (  )   =  =  null )   {   resource record set resource record set = new  resource record set (  )  ;  resource record set . set name ( domain )  ;  resource record set . set type ( rr type . cname )  ;  resource record set . setttl ( server config . get route53 domainttl (  )  )  ;  free domains . add ( new  resource record set with hosted zone ( rrs . get hosted zone (  )  resource record set )  )  ;   }  else if  ( null   domain . equals ( rrs . get resource record set (  )  . get resource records (  )  . get ( 0 )  . get value (  )  )  )   {  free domains . add ( rrs )  ;   }  if  ( has value ( rrs registration hostname )  )   {  return ;   }   }   }  for  (   resource record set with hosted zone rrs : free domains )   {  if  ( create resource record set ( rrs )  )   {  logger . info ( "" bind  {  }  to  {  } "" registration hostname rrs . get resource record set (  )  . get name (  )  )  ;  return ;   }   }  logger . warn ( "" unable to find free domain in  {  } "" domains )  ;   }  ",1412,2,do,1,"[109, 169, 192, 225, 234, 336, 549, 676, 703, 842, 971, 1134, 1376, 1394]"
4936,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\Route53Binder.java,do bind,"private void   (  )  throws  interrupted exception  {   list <  resource record set with hosted zone >  free domains = new  array list <  >  (  )  ;   list <  string >  domains = get declared domains (  )  ;  for  (   string domain : domains )   {   resource record set with hosted zone rrs = get resource record set with hosted zone ( domain )  ;  if  ( rrs  !  =  null )   {  if  ( rrs . get resource record set (  )   =  =  null )   {   resource record set resource record set = new  resource record set (  )  ;  resource record set . set name ( domain )  ;  resource record set . set type ( rr type . cname )  ;  resource record set . setttl ( server config . get route53 domainttl (  )  )  ;  free domains . add ( new  resource record set with hosted zone ( rrs . get hosted zone (  )  resource record set )  )  ;   }  else if  ( null   domain . equals ( rrs . get resource record set (  )  . get resource records (  )  . get ( 0 )  . get value (  )  )  )   {  free domains . add ( rrs )  ;   }  if  ( has value ( rrs registration hostname )  )   {  return ;   }   }   }  for  (   resource record set with hosted zone rrs : free domains )   {  if  ( create resource record set ( rrs )  )   {  logger . info ( "" bind  {  }  to  {  } "" registration hostname rrs . get resource record set (  )  . get name (  )  )  ;  return ;   }   }  logger . warn ( "" unable to find free domain in  {  } "" domains )  ;   }  ",1412,2,bind,2,[1216]
4937,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\Route53Binder.java,execute change,"private void   (  change change  hosted zone hosted zone )  {  logger . info ( "" execute change  {  }  "" change )  ;   change resource record sets request change resource record sets request = new  change resource record sets request (  )  ;  change resource record sets request . set hosted zone id ( hosted zone . get id (  )  )  ;   change batch change batch = new  change batch (  )  ;  change batch . with changes ( change )  ;  change resource record sets request . set change batch ( change batch )  ;  amazon route53 client . change resource record sets ( change resource record sets request )  ;   }  ",610,2,execute,1,[81]
4938,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\Route53Binder.java,execute change,"private void   (  change change  hosted zone hosted zone )  {  logger . info ( "" execute change  {  }  "" change )  ;   change resource record sets request change resource record sets request = new  change resource record sets request (  )  ;  change resource record sets request . set hosted zone id ( hosted zone . get id (  )  )  ;   change batch change batch = new  change batch (  )  ;  change batch . with changes ( change )  ;  change resource record sets request . set change batch ( change batch )  ;  amazon route53 client . change resource record sets ( change resource record sets request )  ;   }  ",610,2,change,2,"[18, 25, 89, 105, 119, 155, 198, 243, 336, 349, 369, 391, 411, 421, 434, 476, 491, 534, 564]"
4939,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\Route53Binder.java,execute change with retry,"private boolean   (  change change  hosted zone hosted zone )  throws  interrupted exception  {   throwable first error = null ;  for  ( int i = 0 ;  i  <  server config . get route53 bind rebind retries (  )  ;  i +  +  )   {  try  {  execute change ( change hosted zone )  ;  return true ;   }  catch  (   throwable e )   {  if  ( first error  =  =  null )   {  first error = e ;   }   thread . sleep ( 1000 )  ;   }   }  if  ( first error  !  =  null )   {  logger . error ( "" cannot execute change  {  }   {  } "" change first error first error )  ;   }  return false ;   }  ",578,4,execute,1,"[236, 487]"
4940,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\Route53Binder.java,execute change with retry,"private boolean   (  change change  hosted zone hosted zone )  throws  interrupted exception  {   throwable first error = null ;  for  ( int i = 0 ;  i  <  server config . get route53 bind rebind retries (  )  ;  i +  +  )   {  try  {  execute change ( change hosted zone )  ;  return true ;   }  catch  (   throwable e )   {  if  ( first error  =  =  null )   {  first error = e ;   }   thread . sleep ( 1000 )  ;   }   }  if  ( first error  !  =  null )   {  logger . error ( "" cannot execute change  {  }   {  } "" change first error first error )  ;   }  return false ;   }  ",578,4,change,2,"[21, 28, 244, 253, 495, 517]"
4941,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\Route53Binder.java,execute change with retry,"private boolean   (  change change  hosted zone hosted zone )  throws  interrupted exception  {   throwable first error = null ;  for  ( int i = 0 ;  i  <  server config . get route53 bind rebind retries (  )  ;  i +  +  )   {  try  {  execute change ( change hosted zone )  ;  return true ;   }  catch  (   throwable e )   {  if  ( first error  =  =  null )   {  first error = e ;   }   thread . sleep ( 1000 )  ;   }   }  if  ( first error  !  =  null )   {  logger . error ( "" cannot execute change  {  }   {  } "" change first error first error )  ;   }  return false ;   }  ",578,4,with,3,[]
4942,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\Route53Binder.java,execute change with retry,"private boolean   (  change change  hosted zone hosted zone )  throws  interrupted exception  {   throwable first error = null ;  for  ( int i = 0 ;  i  <  server config . get route53 bind rebind retries (  )  ;  i +  +  )   {  try  {  execute change ( change hosted zone )  ;  return true ;   }  catch  (   throwable e )   {  if  ( first error  =  =  null )   {  first error = e ;   }   thread . sleep ( 1000 )  ;   }   }  if  ( first error  !  =  null )   {  logger . error ( "" cannot execute change  {  }   {  } "" change first error first error )  ;   }  return false ;   }  ",578,4,retry,4,[]
4943,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\Route53Binder.java,extract domain,"private  string   (  string url )  throws  malformedurl exception  {  return new url ( url )  . get host (  )   +  "" . "" ;   }  ",128,2,extract,1,[]
4944,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\Route53Binder.java,extract domain,"private  string   (  string url )  throws  malformedurl exception  {  return new url ( url )  . get host (  )   +  "" . "" ;   }  ",128,2,domain,2,[]
4945,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\Route53Binder.java,get amazon route client,"private  amazon route53 client   (  eureka server config server config )  {   string aws access id = server config . getaws access id (  )  ;   string aws secret key = server config . getaws secret key (  )  ;   client configuration client configuration = new  client configuration (  )  . with connection timeout ( server config . getasg query timeout ms (  )  )  ;  if  ( null  !  =  aws access id &&  ! """" . equals ( aws access id )  && null  !  =  aws secret key &&  ! """" . equals ( aws secret key )  )   {  return new  amazon route53 client ( new  basicaws credentials ( aws access id aws secret key )  client configuration )  ;   }  else  {  return new  amazon route53 client ( new  instance profile credentials provider (  )  client configuration )  ;   }   }  ",768,4,get,1,"[117, 184, 332]"
4946,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\Route53Binder.java,get amazon route client,"private  amazon route53 client   (  eureka server config server config )  {   string aws access id = server config . getaws access id (  )  ;   string aws secret key = server config . getaws secret key (  )  ;   client configuration client configuration = new  client configuration (  )  . with connection timeout ( server config . getasg query timeout ms (  )  )  ;  if  ( null  !  =  aws access id &&  ! """" . equals ( aws access id )  && null  !  =  aws secret key &&  ! """" . equals ( aws secret key )  )   {  return new  amazon route53 client ( new  basicaws credentials ( aws access id aws secret key )  client configuration )  ;   }  else  {  return new  amazon route53 client ( new  instance profile credentials provider (  )  client configuration )  ;   }   }  ",768,4,amazon,2,"[9, 524, 660]"
4947,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\Route53Binder.java,get amazon route client,"private  amazon route53 client   (  eureka server config server config )  {   string aws access id = server config . getaws access id (  )  ;   string aws secret key = server config . getaws secret key (  )  ;   client configuration client configuration = new  client configuration (  )  . with connection timeout ( server config . getasg query timeout ms (  )  )  ;  if  ( null  !  =  aws access id &&  ! """" . equals ( aws access id )  && null  !  =  aws secret key &&  ! """" . equals ( aws secret key )  )   {  return new  amazon route53 client ( new  basicaws credentials ( aws access id aws secret key )  client configuration )  ;   }  else  {  return new  amazon route53 client ( new  instance profile credentials provider (  )  client configuration )  ;   }   }  ",768,4,route,3,"[16, 531, 667]"
4948,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\Route53Binder.java,get amazon route client,"private  amazon route53 client   (  eureka server config server config )  {   string aws access id = server config . getaws access id (  )  ;   string aws secret key = server config . getaws secret key (  )  ;   client configuration client configuration = new  client configuration (  )  . with connection timeout ( server config . getasg query timeout ms (  )  )  ;  if  ( null  !  =  aws access id &&  ! """" . equals ( aws access id )  && null  !  =  aws secret key &&  ! """" . equals ( aws secret key )  )   {  return new  amazon route53 client ( new  basicaws credentials ( aws access id aws secret key )  client configuration )  ;   }  else  {  return new  amazon route53 client ( new  instance profile credentials provider (  )  client configuration )  ;   }   }  ",768,4,client,4,"[24, 212, 233, 261, 539, 608, 675, 733]"
4949,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\Route53Binder.java,get declared domains,private  list <  string >    (  )  {  final  string my zone = get my zone (  )  ;   list <  string >  ec2 urls = client config . get eureka server service urls ( my zone )  ;  return to domains ( ec2 urls )  ;   }  ,215,3,get,1,"[62, 129]"
4950,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\Route53Binder.java,get declared domains,private  list <  string >    (  )  {  final  string my zone = get my zone (  )  ;   list <  string >  ec2 urls = client config . get eureka server service urls ( my zone )  ;  return to domains ( ec2 urls )  ;   }  ,215,3,declared,2,[]
4951,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\Route53Binder.java,get declared domains,private  list <  string >    (  )  {  final  string my zone = get my zone (  )  ;   list <  string >  ec2 urls = client config . get eureka server service urls ( my zone )  ;  return to domains ( ec2 urls )  ;   }  ,215,3,domains,3,[186]
4952,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\Route53Binder.java,get hosted zone,public  hosted zone   (  )  {  return hosted zone ;   }  ,57,3,get,1,[]
4953,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\Route53Binder.java,get hosted zone,public  hosted zone   (  )  {  return hosted zone ;   }  ,57,3,hosted,2,"[8, 38]"
4954,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\Route53Binder.java,get hosted zone,public  hosted zone   (  )  {  return hosted zone ;   }  ,57,3,zone,3,"[15, 45]"
4955,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\Route53Binder.java,get my zone,"private  string   (  )  {   instance info info = application info manager . get info (  )  ;   amazon info amazon info = info  !  =  null  ?   (  amazon info ) info . get data center info (  )  : null ;   string zone = amazon info  !  =  null  ?  amazon info . get (  amazon info .  meta data key . availability zone )  : null ;  if  ( zone  =  =  null )   {  throw new  runtime exception ( "" cannot extract availability zone"" )  ;   }  return zone ;   }  ",456,3,get,1,"[76, 167, 261]"
4956,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\Route53Binder.java,get my zone,"private  string   (  )  {   instance info info = application info manager . get info (  )  ;   amazon info amazon info = info  !  =  null  ?   (  amazon info ) info . get data center info (  )  : null ;   string zone = amazon info  !  =  null  ?  amazon info . get (  amazon info .  meta data key . availability zone )  : null ;  if  ( zone  =  =  null )   {  throw new  runtime exception ( "" cannot extract availability zone"" )  ;   }  return zone ;   }  ",456,3,my,2,[]
4957,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\Route53Binder.java,get my zone,"private  string   (  )  {   instance info info = application info manager . get info (  )  ;   amazon info amazon info = info  !  =  null  ?   (  amazon info ) info . get data center info (  )  : null ;   string zone = amazon info  !  =  null  ?  amazon info . get (  amazon info .  meta data key . availability zone )  : null ;  if  ( zone  =  =  null )   {  throw new  runtime exception ( "" cannot extract availability zone"" )  ;   }  return zone ;   }  ",456,3,zone,3,"[212, 312, 336, 421, 444]"
4958,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\Route53Binder.java,get registration hostname from amazon data center info,private static  string   (  application info manager application info manager )  {   instance info my info = application info manager . get info (  )  ;   amazon info data center info =  (  amazon info ) my info . get data center info (  )  ;   string ip = data center info . get (  amazon info .  meta data key . public hostname )  ;  if  ( ip  =  =  null || ip . length (  )   =  =  0 )   {  return data center info . get (  amazon info .  meta data key . local hostname )  ;   }  return ip ;   }  ,500,8,get,1,"[136, 214, 276, 420]"
4959,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\Route53Binder.java,get registration hostname from amazon data center info,private static  string   (  application info manager application info manager )  {   instance info my info = application info manager . get info (  )  ;   amazon info data center info =  (  amazon info ) my info . get data center info (  )  ;   string ip = data center info . get (  amazon info .  meta data key . public hostname )  ;  if  ( ip  =  =  null || ip . length (  )   =  =  0 )   {  return data center info . get (  amazon info .  meta data key . local hostname )  ;   }  return ip ;   }  ,500,8,registration,2,[]
4960,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\Route53Binder.java,get registration hostname from amazon data center info,private static  string   (  application info manager application info manager )  {   instance info my info = application info manager . get info (  )  ;   amazon info data center info =  (  amazon info ) my info . get data center info (  )  ;   string ip = data center info . get (  amazon info .  meta data key . public hostname )  ;  if  ( ip  =  =  null || ip . length (  )   =  =  0 )   {  return data center info . get (  amazon info .  meta data key . local hostname )  ;   }  return ip ;   }  ,500,8,hostname,3,"[321, 464]"
4961,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\Route53Binder.java,get registration hostname from amazon data center info,private static  string   (  application info manager application info manager )  {   instance info my info = application info manager . get info (  )  ;   amazon info data center info =  (  amazon info ) my info . get data center info (  )  ;   string ip = data center info . get (  amazon info .  meta data key . public hostname )  ;  if  ( ip  =  =  null || ip . length (  )   =  =  0 )   {  return data center info . get (  amazon info .  meta data key . local hostname )  ;   }  return ip ;   }  ,500,8,from,4,[]
4962,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\Route53Binder.java,get registration hostname from amazon data center info,private static  string   (  application info manager application info manager )  {   instance info my info = application info manager . get info (  )  ;   amazon info data center info =  (  amazon info ) my info . get data center info (  )  ;   string ip = data center info . get (  amazon info .  meta data key . public hostname )  ;  if  ( ip  =  =  null || ip . length (  )   =  =  0 )   {  return data center info . get (  amazon info .  meta data key . local hostname )  ;   }  return ip ;   }  ,500,8,amazon,5,"[155, 190, 283, 427]"
4963,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\Route53Binder.java,get registration hostname from amazon data center info,private static  string   (  application info manager application info manager )  {   instance info my info = application info manager . get info (  )  ;   amazon info data center info =  (  amazon info ) my info . get data center info (  )  ;   string ip = data center info . get (  amazon info .  meta data key . public hostname )  ;  if  ( ip  =  =  null || ip . length (  )   =  =  0 )   {  return data center info . get (  amazon info .  meta data key . local hostname )  ;   }  return ip ;   }  ,500,8,data,6,"[167, 218, 257, 303, 401, 447]"
4964,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\Route53Binder.java,get registration hostname from amazon data center info,private static  string   (  application info manager application info manager )  {   instance info my info = application info manager . get info (  )  ;   amazon info data center info =  (  amazon info ) my info . get data center info (  )  ;   string ip = data center info . get (  amazon info .  meta data key . public hostname )  ;  if  ( ip  =  =  null || ip . length (  )   =  =  0 )   {  return data center info . get (  amazon info .  meta data key . local hostname )  ;   }  return ip ;   }  ,500,8,center,7,"[172, 223, 262, 406]"
4965,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\Route53Binder.java,get registration hostname from amazon data center info,private static  string   (  application info manager application info manager )  {   instance info my info = application info manager . get info (  )  ;   amazon info data center info =  (  amazon info ) my info . get data center info (  )  ;   string ip = data center info . get (  amazon info .  meta data key . public hostname )  ;  if  ( ip  =  =  null || ip . length (  )   =  =  0 )   {  return data center info . get (  amazon info .  meta data key . local hostname )  ;   }  return ip ;   }  ,500,8,info,8,"[40, 65, 94, 102, 121, 140, 162, 179, 197, 207, 230, 269, 290, 413, 434]"
4966,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\Route53Binder.java,get resource record set,public  resource record set   (  )  {  return resource record set ;   }  ,73,4,get,1,[]
4967,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\Route53Binder.java,get resource record set,public  resource record set   (  )  {  return resource record set ;   }  ,73,4,resource,2,"[8, 46]"
4968,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\Route53Binder.java,get resource record set,public  resource record set   (  )  {  return resource record set ;   }  ,73,4,record,3,"[17, 55]"
4969,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\Route53Binder.java,get resource record set,public  resource record set   (  )  {  return resource record set ;   }  ,73,4,set,4,"[24, 62]"
4970,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\Route53Binder.java,get resource record set with hosted zone,private  resource record set with hosted zone   (  string domain )  {   hosted zone hosted zone = get hosted zone ( domain )  ;  if  ( hosted zone  !  =  null )   {  return new  resource record set with hosted zone ( hosted zone get resource record set ( domain hosted zone )  )  ;   }  return null ;   }  ,306,7,get,1,"[98, 229]"
4971,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\Route53Binder.java,get resource record set with hosted zone,private  resource record set with hosted zone   (  string domain )  {   hosted zone hosted zone = get hosted zone ( domain )  ;  if  ( hosted zone  !  =  null )   {  return new  resource record set with hosted zone ( hosted zone get resource record set ( domain hosted zone )  )  ;   }  return null ;   }  ,306,7,resource,2,"[9, 178, 233]"
4972,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\Route53Binder.java,get resource record set with hosted zone,private  resource record set with hosted zone   (  string domain )  {   hosted zone hosted zone = get hosted zone ( domain )  ;  if  ( hosted zone  !  =  null )   {  return new  resource record set with hosted zone ( hosted zone get resource record set ( domain hosted zone )  )  ;   }  return null ;   }  ,306,7,record,3,"[18, 187, 242]"
4973,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\Route53Binder.java,get resource record set with hosted zone,private  resource record set with hosted zone   (  string domain )  {   hosted zone hosted zone = get hosted zone ( domain )  ;  if  ( hosted zone  !  =  null )   {  return new  resource record set with hosted zone ( hosted zone get resource record set ( domain hosted zone )  )  ;   }  return null ;   }  ,306,7,set,4,"[25, 194, 249]"
4974,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\Route53Binder.java,get resource record set with hosted zone,private  resource record set with hosted zone   (  string domain )  {   hosted zone hosted zone = get hosted zone ( domain )  ;  if  ( hosted zone  !  =  null )   {  return new  resource record set with hosted zone ( hosted zone get resource record set ( domain hosted zone )  )  ;   }  return null ;   }  ,306,7,with,5,"[29, 198]"
4975,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\Route53Binder.java,get resource record set with hosted zone,private  resource record set with hosted zone   (  string domain )  {   hosted zone hosted zone = get hosted zone ( domain )  ;  if  ( hosted zone  !  =  null )   {  return new  resource record set with hosted zone ( hosted zone get resource record set ( domain hosted zone )  )  ;   }  return null ;   }  ,306,7,hosted,6,"[34, 72, 84, 102, 135, 203, 217, 262]"
4976,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\Route53Binder.java,get resource record set with hosted zone,private  resource record set with hosted zone   (  string domain )  {   hosted zone hosted zone = get hosted zone ( domain )  ;  if  ( hosted zone  !  =  null )   {  return new  resource record set with hosted zone ( hosted zone get resource record set ( domain hosted zone )  )  ;   }  return null ;   }  ,306,7,zone,7,"[41, 79, 91, 109, 142, 210, 224, 269]"
4977,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\Route53Binder.java,has value,private boolean   (  resource record set with hosted zone resource record set with hosted zone  string ip )  {  if  ( resource record set with hosted zone  !  =  null && resource record set with hosted zone . get resource record set (  )   !  =  null )   {  for  (   resource record rr : resource record set with hosted zone . get resource record set (  )  . get resource records (  )  )   {  if  ( ip . equals ( rr . get value (  )  )  )   {  return true ;   }   }   }  return false ;   }  ,491,2,has,1,[]
4978,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\Route53Binder.java,has value,private boolean   (  resource record set with hosted zone resource record set with hosted zone  string ip )  {  if  ( resource record set with hosted zone  !  =  null && resource record set with hosted zone . get resource record set (  )   !  =  null )   {  for  (   resource record rr : resource record set with hosted zone . get resource record set (  )  . get resource records (  )  )   {  if  ( ip . equals ( rr . get value (  )  )  )   {  return true ;   }   }   }  return false ;   }  ,491,2,value,2,[422]
4979,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\Route53Binder.java,run,"@ override public void   (  )  {  try  {  do bind (  )  ;   }  catch  (   throwable e )   {  logger . error ( "" could not bind to  route53"" e )  ;   }   }  ",156,1,run,1,[]
4980,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\Route53Binder.java,shutdown,@ override @ pre destroy public void   (  )  throws  interrupted exception  {  timer . cancel (  )  ;  for  (   string domain : get declared domains (  )  )   {  unbind from domain ( domain )  ;   }  amazon route53 client . shutdown (  )  ;   }  ,246,1,shutdown,1,[224]
4981,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\Route53Binder.java,start,@ override @ post construct public void   (  )  throws  interrupted exception  {  do bind (  )  ;  timer . schedule ( new  timer task (  )  {  @ override public void run (  )  {  try  {  do bind (  )  ;   }  catch  (   throwable e )   {  logger . error ( ,255,1,start,1,[]
4982,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\Route53Binder.java,to domains,"private  list <  string >    (  list <  string >  ec2 urls )  {   list <  string >  domains = new  array list <  >  ( ec2 urls . size (  )  )  ;  for  (   string url : ec2 urls )   {  try  {  domains . add ( extract domain ( url )  )  ;   }  catch  (   malformedurl exception e )   {  logger . error ( "" invalid url  {  } "" url e )  ;   }   }  return domains ;   }  ",366,2,to,1,[]
4983,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\Route53Binder.java,to domains,"private  list <  string >    (  list <  string >  ec2 urls )  {   list <  string >  domains = new  array list <  >  ( ec2 urls . size (  )  )  ;  for  (   string url : ec2 urls )   {  try  {  domains . add ( extract domain ( url )  )  ;   }  catch  (   malformedurl exception e )   {  logger . error ( "" invalid url  {  } "" url e )  ;   }   }  return domains ;   }  ",366,2,domains,2,"[84, 192, 351]"
4984,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\Route53Binder.java,unbind from domain,private void   (  string domain )  throws  interrupted exception  {   resource record set with hosted zone resource record set with hosted zone = get resource record set with hosted zone ( domain )  ;  if  ( has value ( resource record set with hosted zone registration hostname )  )   {  resource record set with hosted zone . get resource record set (  )  . get resource records (  )  . get ( 0 )  . set value ( null   domain )  ;  execute change with retry ( new  change (  change action . upsert resource record set with hosted zone . get resource record set (  )  )  resource record set with hosted zone . get hosted zone (  )  )  ;   }   }  ,647,3,unbind,1,[]
4985,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\Route53Binder.java,unbind from domain,private void   (  string domain )  throws  interrupted exception  {   resource record set with hosted zone resource record set with hosted zone = get resource record set with hosted zone ( domain )  ;  if  ( has value ( resource record set with hosted zone registration hostname )  )   {  resource record set with hosted zone . get resource record set (  )  . get resource records (  )  . get ( 0 )  . set value ( null   domain )  ;  execute change with retry ( new  change (  change action . upsert resource record set with hosted zone . get resource record set (  )  )  resource record set with hosted zone . get hosted zone (  )  )  ;   }   }  ,647,3,from,2,[]
4986,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\Route53Binder.java,unbind from domain,private void   (  string domain )  throws  interrupted exception  {   resource record set with hosted zone resource record set with hosted zone = get resource record set with hosted zone ( domain )  ;  if  ( has value ( resource record set with hosted zone registration hostname )  )   {  resource record set with hosted zone . get resource record set (  )  . get resource records (  )  . get ( 0 )  . set value ( null   domain )  ;  execute change with retry ( new  change (  change action . upsert resource record set with hosted zone . get resource record set (  )  )  resource record set with hosted zone . get hosted zone (  )  )  ;   }   }  ,647,3,domain,3,"[25, 189, 421]"
4987,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\ElasticNetworkInterfaceBinder.java, elastic network interface binder,@ inject public   (  eureka server config server config  eureka client config client config  peer aware instance registry registry  application info manager application info manager )  {  this . server config = server config ;  this . client config = clie,255,4,elastic,1,[]
4988,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\ElasticNetworkInterfaceBinder.java, elastic network interface binder,@ inject public   (  eureka server config server config  eureka client config client config  peer aware instance registry registry  application info manager application info manager )  {  this . server config = server config ;  this . client config = clie,255,4,network,2,[]
4989,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\ElasticNetworkInterfaceBinder.java, elastic network interface binder,@ inject public   (  eureka server config server config  eureka client config client config  peer aware instance registry registry  application info manager application info manager )  {  this . server config = server config ;  this . client config = clie,255,4,interface,3,[]
4990,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\ElasticNetworkInterfaceBinder.java, elastic network interface binder,@ inject public   (  eureka server config server config  eureka client config client config  peer aware instance registry registry  application info manager application info manager )  {  this . server config = server config ;  this . client config = clie,255,4,binder,4,[]
4991,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\ElasticNetworkInterfaceBinder.java,already bound,"public boolean   (  )  throws  malformedurl exception  {   instance info my info = application info manager . get info (  )  ;   string my instance id =  (  (  amazon info ) my info . get data center info (  )  )  . get (  amazon info .  meta data key . instance id )  ;   amazonec2 ec2 service = getec2 service (  )  ;   list <  instance network interface >  instance network interfaces = instance data ( my instance id ec2 service )  . get network interfaces (  )  ;   list <  string >  candidatei ps = get candidate ips (  )  ;  for  (   string ip : candidatei ps )   {  for  (   instance network interface ini : instance network interfaces )   {  if  ( ip . equals ( ini . get private ip address (  )  )  )   {  logger . info ( "" my instance  {  }  seems to be already associated with the ip  {  } "" my instance id ip )  ;  return true ;   }   }   }  return false ;   }  ",875,2,already,1,[765]
4992,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\ElasticNetworkInterfaceBinder.java,already bound,"public boolean   (  )  throws  malformedurl exception  {   instance info my info = application info manager . get info (  )  ;   string my instance id =  (  (  amazon info ) my info . get data center info (  )  )  . get (  amazon info .  meta data key . instance id )  ;   amazonec2 ec2 service = getec2 service (  )  ;   list <  instance network interface >  instance network interfaces = instance data ( my instance id ec2 service )  . get network interfaces (  )  ;   list <  string >  candidatei ps = get candidate ips (  )  ;  for  (   string ip : candidatei ps )   {  for  (   instance network interface ini : instance network interfaces )   {  if  ( ip . equals ( ini . get private ip address (  )  )  )   {  logger . info ( "" my instance  {  }  seems to be already associated with the ip  {  } "" my instance id ip )  ;  return true ;   }   }   }  return false ;   }  ",875,2,bound,2,[]
4993,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\ElasticNetworkInterfaceBinder.java,apply,public  integer   (  network interface network interface )  {  return ips . index of ( network interface . get private ip address (  )  )  ;   }  ,146,1,apply,1,[]
4994,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\ElasticNetworkInterfaceBinder.java,bind,"public void   (  )  throws  malformedurl exception  {   instance info my info =  application info manager . get instance (  )  . get info (  )  ;   string my instance id =  (  (  amazon info ) my info . get data center info (  )  )  . get (  amazon info .  meta data key . instance id )  ;   string my zone =  (  (  amazon info ) my info . get data center info (  )  )  . get (  amazon info .  meta data key . availability zone )  ;  final  list <  string >  ips = get candidate ips (  )  ;   ordering <  network interface >  ips order =  ordering . natural (  )  . on result of ( new  function <  network interface  integer >  (  )  {  public  integer apply (   network interface network interface )  {  return ips . index of ( network interface . get private ip address (  )  )  ;   }   }   )  ;   amazonec2 ec2 service = getec2 service (  )  ;   string subnet id = instance data ( my instance id ec2 service )  . get subnet id (  )  ;   describe network interfaces result result = ec2 service . describe network interfaces ( new  describe network interfaces request (  )  . with filters ( new  filter ( ""private - ip - address"" ips )  )  . with filters ( new  filter ( ""status""  lists . new array list ( ""available"" )  )  )  . with filters ( new  filter ( ""subnet - id""  lists . new array list ( subnet id )  )  )  )  ;  if  ( result . get network interfaces (  )  . is empty (  )  )   {  logger . info ( "" no ip is free to be associated with this instance .   candidate ips are:  {  }  for zone:  {  } "" ips my zone )  ;   }  else  {   network interface selected = ips order . min ( result . get network interfaces (  )  )  ;  ec2 service . attach network interface ( new  attach network interface request (  )  . with network interface id ( selected . get network interface id (  )  )  . with device index ( 1 )  . with instance id ( my instance id )  )  ;   }   }  ",1871,1,bind,1,[]
4995,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\ElasticNetworkInterfaceBinder.java,get candidate ips,"public  list <  string >    (  )  throws  malformedurl exception  {   instance info my info = application info manager . get info (  )  ;   string my zone =  (  (  amazon info ) my info . get data center info (  )  )  . get (  amazon info .  meta data key . availability zone )  ;   collection <  string >  candidates = client config . should use dns for fetching service urls (  )   ?  geti ps for zone fromdns ( my zone )  : geti ps for zone from config ( my zone )  ;  if  ( candidates  =  =  null || candidates . size (  )   =  =  0 )   {  throw new  runtime exception ( "" could not get any ips from the pool for zone :""  +  my zone )  ;   }   list <  string >  ips =  lists . new array list (  )  ;  for  (   string candidate : candidates )   {   string host = new url ( candidate )  . get host (  )  ;  if  (  inet addresses . is inet address ( host )  )   {  ips . add ( host )  ;   }  else  {   string first part of host =  splitter . on ( "" . "" )  . split to list ( host )  . get ( 0 )  ;   list <  string >  no ip prefix =  splitter . on ( "" - "" )  . split to list ( first part of host )  . sub list ( 1 5 )  ;   string ip =  joiner . on ( "" . "" )  . join ( no ip prefix )  ;  if  (  inet addresses . is inet address ( ip )  )   {  ips . add ( ip )  ;   }  else  {  throw new  illegal argument exception ( "" illegal internal hostname ""  +  host  +  "" translated to '"" +  ip +  ""'"" )  ;   }   }   }  return ips ;   }  ",1427,3,get,1,"[121, 188, 220, 387, 427, 587, 791, 985]"
4996,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\ElasticNetworkInterfaceBinder.java,get candidate ips,"public  list <  string >    (  )  throws  malformedurl exception  {   instance info my info = application info manager . get info (  )  ;   string my zone =  (  (  amazon info ) my info . get data center info (  )  )  . get (  amazon info .  meta data key . availability zone )  ;   collection <  string >  candidates = client config . should use dns for fetching service urls (  )   ?  geti ps for zone fromdns ( my zone )  : geti ps for zone from config ( my zone )  ;  if  ( candidates  =  =  null || candidates . size (  )   =  =  0 )   {  throw new  runtime exception ( "" could not get any ips from the pool for zone :""  +  my zone )  ;   }   list <  string >  ips =  lists . new array list (  )  ;  for  (   string candidate : candidates )   {   string host = new url ( candidate )  . get host (  )  ;  if  (  inet addresses . is inet address ( host )  )   {  ips . add ( host )  ;   }  else  {   string first part of host =  splitter . on ( "" . "" )  . split to list ( host )  . get ( 0 )  ;   list <  string >  no ip prefix =  splitter . on ( "" - "" )  . split to list ( first part of host )  . sub list ( 1 5 )  ;   string ip =  joiner . on ( "" . "" )  . join ( no ip prefix )  ;  if  (  inet addresses . is inet address ( ip )  )   {  ips . add ( ip )  ;   }  else  {  throw new  illegal argument exception ( "" illegal internal hostname ""  +  host  +  "" translated to '"" +  ip +  ""'"" )  ;   }   }   }  return ips ;   }  ",1427,3,candidate,2,"[307, 478, 504, 721, 733, 776]"
4997,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\ElasticNetworkInterfaceBinder.java,get candidate ips,"public  list <  string >    (  )  throws  malformedurl exception  {   instance info my info = application info manager . get info (  )  ;   string my zone =  (  (  amazon info ) my info . get data center info (  )  )  . get (  amazon info .  meta data key . availability zone )  ;   collection <  string >  candidates = client config . should use dns for fetching service urls (  )   ?  geti ps for zone fromdns ( my zone )  : geti ps for zone from config ( my zone )  ;  if  ( candidates  =  =  null || candidates . size (  )   =  =  0 )   {  throw new  runtime exception ( "" could not get any ips from the pool for zone :""  +  my zone )  ;   }   list <  string >  ips =  lists . new array list (  )  ;  for  (   string candidate : candidates )   {   string host = new url ( candidate )  . get host (  )  ;  if  (  inet addresses . is inet address ( host )  )   {  ips . add ( host )  ;   }  else  {   string first part of host =  splitter . on ( "" . "" )  . split to list ( host )  . get ( 0 )  ;   list <  string >  no ip prefix =  splitter . on ( "" - "" )  . split to list ( first part of host )  . sub list ( 1 5 )  ;   string ip =  joiner . on ( "" . "" )  . join ( no ip prefix )  ;  if  (  inet addresses . is inet address ( ip )  )   {  ips . add ( ip )  ;   }  else  {  throw new  illegal argument exception ( "" illegal internal hostname ""  +  host  +  "" translated to '"" +  ip +  ""'"" )  ;   }   }   }  return ips ;   }  ",1427,3,ips,3,"[595, 666, 866, 1242, 1416]"
4998,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\ElasticNetworkInterfaceBinder.java,getec service,"private  amazonec2   (  )  {   string aws access id = server config . getaws access id (  )  ;   string aws secret key = server config . getaws secret key (  )  ;   amazonec2 ec2 service ;  if  ( null  !  =  aws access id &&  ! """" . equals ( aws access id )  && null  !  =  aws secret key &&  ! """" . equals ( aws secret key )  )   {  ec2 service = new  amazonec2 client ( new  basicaws credentials ( aws access id aws secret key )  )  ;   }  else  {  ec2 service = new  amazonec2 client ( new  instance profile credentials provider (  )  )  ;   }   string region = client config . get region (  )  ;  region = region . trim (  )  . to lower case (  )  ;  ec2 service . set endpoint ( ""ec2 . ""  +  region  +  "" . amazonaws . com"" )  ;  return ec2 service ;   }  ",761,2,getec,1,[]
4999,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\ElasticNetworkInterfaceBinder.java,getec service,"private  amazonec2   (  )  {   string aws access id = server config . getaws access id (  )  ;   string aws secret key = server config . getaws secret key (  )  ;   amazonec2 ec2 service ;  if  ( null  !  =  aws access id &&  ! """" . equals ( aws access id )  && null  !  =  aws secret key &&  ! """" . equals ( aws secret key )  )   {  ec2 service = new  amazonec2 client ( new  basicaws credentials ( aws access id aws secret key )  )  ;   }  else  {  ec2 service = new  amazonec2 client ( new  instance profile credentials provider (  )  )  ;   }   string region = client config . get region (  )  ;  region = region . trim (  )  . to lower case (  )  ;  ec2 service . set endpoint ( ""ec2 . ""  +  region  +  "" . amazonaws . com"" )  ;  return ec2 service ;   }  ",761,2,service,2,"[179, 338, 455, 659, 746]"
5000,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\ElasticNetworkInterfaceBinder.java,geti ps for zone from config,private  collection <  string >    (  string my zone )  {  return client config . get eureka server service urls ( my zone )  ;   }  ,133,6,geti,1,[]
5001,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\ElasticNetworkInterfaceBinder.java,geti ps for zone from config,private  collection <  string >    (  string my zone )  {  return client config . get eureka server service urls ( my zone )  ;   }  ,133,6,ps,2,[]
5002,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\ElasticNetworkInterfaceBinder.java,geti ps for zone from config,private  collection <  string >    (  string my zone )  {  return client config . get eureka server service urls ( my zone )  ;   }  ,133,6,for,3,[]
5003,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\ElasticNetworkInterfaceBinder.java,geti ps for zone from config,private  collection <  string >    (  string my zone )  {  return client config . get eureka server service urls ( my zone )  ;   }  ,133,6,zone,4,"[48, 118]"
5004,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\ElasticNetworkInterfaceBinder.java,geti ps for zone from config,private  collection <  string >    (  string my zone )  {  return client config . get eureka server service urls ( my zone )  ;   }  ,133,6,from,5,[]
5005,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\ElasticNetworkInterfaceBinder.java,geti ps for zone from config,private  collection <  string >    (  string my zone )  {  return client config . get eureka server service urls ( my zone )  ;   }  ,133,6,config,6,[73]
5006,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\ElasticNetworkInterfaceBinder.java,geti ps for zone fromdns,private  collection <  string >    (  string my zone )  {  return  endpoint utils . get service urls fromdns ( client config my zone true new  endpoint utils .  instance info based url randomizer ( application info manager . get info (  )  )  )  ;   }  ,253,5,geti,1,[]
5007,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\ElasticNetworkInterfaceBinder.java,geti ps for zone fromdns,private  collection <  string >    (  string my zone )  {  return  endpoint utils . get service urls fromdns ( client config my zone true new  endpoint utils .  instance info based url randomizer ( application info manager . get info (  )  )  )  ;   }  ,253,5,ps,2,[]
5008,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\ElasticNetworkInterfaceBinder.java,geti ps for zone fromdns,private  collection <  string >    (  string my zone )  {  return  endpoint utils . get service urls fromdns ( client config my zone true new  endpoint utils .  instance info based url randomizer ( application info manager . get info (  )  )  )  ;   }  ,253,5,for,3,[]
5009,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\ElasticNetworkInterfaceBinder.java,geti ps for zone fromdns,private  collection <  string >    (  string my zone )  {  return  endpoint utils . get service urls fromdns ( client config my zone true new  endpoint utils .  instance info based url randomizer ( application info manager . get info (  )  )  )  ;   }  ,253,5,zone,4,"[48, 128]"
5010,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\ElasticNetworkInterfaceBinder.java,geti ps for zone fromdns,private  collection <  string >    (  string my zone )  {  return  endpoint utils . get service urls fromdns ( client config my zone true new  endpoint utils .  instance info based url randomizer ( application info manager . get info (  )  )  )  ;   }  ,253,5,fromdns,5,[101]
5011,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\ElasticNetworkInterfaceBinder.java,instance data,private  instance   (  string my instance id  amazonec2 ec2 )  {  return ec2 . describe instances ( new  describe instances request (  )  . with instance ids ( my instance id )  )  . get reservations (  )  . get ( 0 )  . get instances (  )  . get ( 0 )  ;   }  ,261,2,instance,1,"[9, 33, 88, 114, 145, 163, 225]"
5012,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\ElasticNetworkInterfaceBinder.java,instance data,private  instance   (  string my instance id  amazonec2 ec2 )  {  return ec2 . describe instances ( new  describe instances request (  )  . with instance ids ( my instance id )  )  . get reservations (  )  . get ( 0 )  . get instances (  )  . get ( 0 )  ;   }  ,261,2,data,2,[]
5013,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\ElasticNetworkInterfaceBinder.java,run,@ override public void   (  )  {  boolean already bound = false ;  try  {  already bound = already bound (  )  ;  if  (  ! already bound )   {  registry . clear registry (  )  ;  int count = registry . sync up (  )  ;  registry . open for traffic ( applic,255,1,run,1,[]
5014,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\ElasticNetworkInterfaceBinder.java,shutdown,@ pre destroy public void   (  )  throws  exception  {  timer . cancel (  )  ;  for  ( int i = 0 ;  i  <  server config . geteip bind rebind retries (  )  ;  i +  +  )   {  try  {  unbind (  )  ;  break ;   }  catch  (   exception e )   {  logger . warn (,255,1,shutdown,1,[]
5015,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\ElasticNetworkInterfaceBinder.java,start,@ post construct public void   (  )  throws  exception  {  int retries = server config . geteip bind rebind retries (  )  ;  for  ( int i = 0 ;  i  <  retries ;  i +  +  )   {  try  {  if  ( already bound (  )  )   {  break ;   }  else  {  bind (  )  ;   ,255,1,start,1,[]
5016,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\ElasticNetworkInterfaceBinder.java,unbind,public void   (  )  throws  exception  {   instance info my info = application info manager . get info (  )  ;   string my instance id =  (  (  amazon info ) my info . get data center info (  )  )  . get (  amazon info .  meta data key . instance id )  ;   amazonec2 ec2 = getec2 service (  )  ;   list <  instance network interface >  result = instance data ( my instance id ec2 )  . get network interfaces (  )  ;   list <  string >  ips = get candidate ips (  )  ;  for  (   instance network interface network interface : result )   {  if  ( ips . contains ( network interface . get private ip address (  )  )  )   {   string attachment id = network interface . get attachment (  )  . get attachment id (  )  ;  ec2 . detach network interface ( new  detach network interface request (  )  . with attachment id ( attachment id )  )  ;  break ;   }   }   }  ,859,1,unbind,1,[]
5017,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\DynamicGZIPContentEncodingFilter.java, dynamicgzip content encoding filter,public   (  eureka server config config )  {  this . config = config ;   }  ,76,4,dynamicgzip,1,[]
5018,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\DynamicGZIPContentEncodingFilter.java, dynamicgzip content encoding filter,public   (  eureka server config config )  {  this . config = config ;   }  ,76,4,content,2,[]
5019,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\DynamicGZIPContentEncodingFilter.java, dynamicgzip content encoding filter,public   (  eureka server config config )  {  this . config = config ;   }  ,76,4,encoding,3,[]
5020,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\DynamicGZIPContentEncodingFilter.java, dynamicgzip content encoding filter,public   (  eureka server config config )  {  this . config = config ;   }  ,76,4,filter,4,[]
5021,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\DynamicGZIPContentEncodingFilter.java, gzip adapter,  (  client request adapter cra )  {  super ( cra )  ;   }  ,60,2,gzip,1,[]
5022,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\DynamicGZIPContentEncodingFilter.java, gzip adapter,  (  client request adapter cra )  {  super ( cra )  ;   }  ,60,2,adapter,2,[20]
5023,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\DynamicGZIPContentEncodingFilter.java,adapt,@ override public  output stream   (  client request request  output stream out )  throws io exception  {  return new gzip output stream ( get adapter (  )  . adapt ( request out )  )  ;   }  ,192,1,adapt,1,"[143, 159]"
5024,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\DynamicGZIPContentEncodingFilter.java,decompress response,private static void   (  client response response )  {   input stream entity input stream = response . get entity input stream (  )  ;  gzip input stream uncompressedis ;  try  {  uncompressedis = new gzip input stream ( entity input stream )  ;   }  catch  (  io exception ex )   {  try  {  entity input stream . close (  )  ;   }  catch  (  io exception ignored )   {   }  throw new  client handler exception ( ex )  ;   }  response . set entity input stream ( uncompressedis )  ;   }  ,488,2,decompress,1,[]
5025,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\DynamicGZIPContentEncodingFilter.java,decompress response,private static void   (  client response response )  {   input stream entity input stream = response . get entity input stream (  )  ;  gzip input stream uncompressedis ;  try  {  uncompressedis = new gzip input stream ( entity input stream )  ;   }  catch  (  io exception ex )   {  try  {  entity input stream . close (  )  ;   }  catch  (  io exception ignored )   {   }  throw new  client handler exception ( ex )  ;   }  response . set entity input stream ( uncompressedis )  ;   }  ,488,2,response,2,"[32, 41, 92, 426]"
5026,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\DynamicGZIPContentEncodingFilter.java,handle,@ override public  client response   (  client request request )  {  if  (  ! request . get headers (  )  . contains key (  http headers . accept   encoding )  )   {  request . get headers (  )  . add (  http headers . accept   encoding gzip   encoding ) ,255,1,handle,1,[]
5027,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\DynamicGZIPContentEncodingFilter.java,is compression enabled,private boolean   (  )  {  return config . should enable replicated request compression (  )  ;   }  ,101,3,is,1,[]
5028,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\DynamicGZIPContentEncodingFilter.java,is compression enabled,private boolean   (  )  {  return config . should enable replicated request compression (  )  ;   }  ,101,3,compression,2,[76]
5029,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\DynamicGZIPContentEncodingFilter.java,is compression enabled,private boolean   (  )  {  return config . should enable replicated request compression (  )  ;   }  ,101,3,enabled,3,[]
5030,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\InstanceReplicationTask.java, instance replication task,protected   (  string peer node name  action action  instance info instance info  instance status overridden status boolean replicate instance info )  {  super ( peer node name action )  ;  this . app name = instance info . get app name (  )  ;  this . id = instance info . get id (  )  ;  this . instance info = instance info ;  this . overridden status = overridden status ;  this . replicate instance info = replicate instance info ;   }  ,442,3,instance,1,"[53, 67, 82, 134, 208, 258, 297, 313, 395, 421]"
5031,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\InstanceReplicationTask.java, instance replication task,protected   (  string peer node name  action action  instance info instance info  instance status overridden status boolean replicate instance info )  {  super ( peer node name action )  ;  this . app name = instance info . get app name (  )  ;  this . id = instance info . get id (  )  ;  this . instance info = instance info ;  this . overridden status = overridden status ;  this . replicate instance info = replicate instance info ;   }  ,442,3,replication,2,[]
5032,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\InstanceReplicationTask.java, instance replication task,protected   (  string peer node name  action action  instance info instance info  instance status overridden status boolean replicate instance info )  {  super ( peer node name action )  ;  this . app name = instance info . get app name (  )  ;  this . id = instance info . get id (  )  ;  this . instance info = instance info ;  this . overridden status = overridden status ;  this . replicate instance info = replicate instance info ;   }  ,442,3,task,3,[]
5033,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\InstanceReplicationTask.java,get app name,public  string   (  )  {  return app name ;   }  ,49,3,get,1,[]
5034,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\InstanceReplicationTask.java,get app name,public  string   (  )  {  return app name ;   }  ,49,3,app,2,[33]
5035,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\InstanceReplicationTask.java,get app name,public  string   (  )  {  return app name ;   }  ,49,3,name,3,[37]
5036,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\InstanceReplicationTask.java,get id,public  string   (  )  {  return id ;   }  ,43,2,get,1,[]
5037,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\InstanceReplicationTask.java,get id,public  string   (  )  {  return id ;   }  ,43,2,id,2,[33]
5038,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\InstanceReplicationTask.java,get instance info,public  instance info   (  )  {  return instance info ;   }  ,61,3,get,1,[]
5039,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\InstanceReplicationTask.java,get instance info,public  instance info   (  )  {  return instance info ;   }  ,61,3,instance,2,"[8, 40]"
5040,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\InstanceReplicationTask.java,get instance info,public  instance info   (  )  {  return instance info ;   }  ,61,3,info,3,"[17, 49]"
5041,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\InstanceReplicationTask.java,get overridden status,public  instance status   (  )  {  return overridden status ;   }  ,67,3,get,1,[]
5042,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\InstanceReplicationTask.java,get overridden status,public  instance status   (  )  {  return overridden status ;   }  ,67,3,overridden,2,[42]
5043,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\InstanceReplicationTask.java,get overridden status,public  instance status   (  )  {  return overridden status ;   }  ,67,3,status,3,"[17, 53]"
5044,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\InstanceReplicationTask.java,get task name,public  string   (  )  {  return app name  +  ' / '  +  id +  ':' +  action +  '@' +  peer node name ;   }  ,108,3,get,1,[]
5045,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\InstanceReplicationTask.java,get task name,public  string   (  )  {  return app name  +  ' / '  +  id +  ':' +  action +  '@' +  peer node name ;   }  ,108,3,task,2,[]
5046,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\InstanceReplicationTask.java,get task name,public  string   (  )  {  return app name  +  ' / '  +  id +  ':' +  action +  '@' +  peer node name ;   }  ,108,3,name,3,"[37, 96]"
5047,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\InstanceReplicationTask.java,should replicate instance info,public boolean   (  )  {  return replicate instance info ;   }  ,64,4,should,1,[]
5048,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\InstanceReplicationTask.java,should replicate instance info,public boolean   (  )  {  return replicate instance info ;   }  ,64,4,replicate,2,[33]
5049,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\InstanceReplicationTask.java,should replicate instance info,public boolean   (  )  {  return replicate instance info ;   }  ,64,4,instance,3,[43]
5050,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\InstanceReplicationTask.java,should replicate instance info,public boolean   (  )  {  return replicate instance info ;   }  ,64,4,info,4,[52]
5051,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNode.java, peer eureka node,  (  peer aware instance registry registry  string target host  string service url  http replication client replication client  eureka server config config int batch size long max batching delay ms long retry sleep time ms long server unavailable sleep time ms )  {  this . registry = registry ;  this . target host = target host ;  this . replication client = replication client ;  this . service url = service url ;  this . config = config ;  this . max processing delay ms = config . get max time for replication (  )  ;   string batcher name = get batcher name (  )  ;   replication task processor task processor = new  replication task processor ( target host replication client )  ;  this . batching dispatcher =  task dispatchers . create batching task dispatcher ( batcher name config . get max elements in peer replication pool (  )  batch size config . get max threads for peer replication (  )  max batching delay ms server unavailable sleep time ms retry sleep time ms task processor )  ;  this . non batching dispatcher =  task dispatchers . create non batching task dispatcher ( target host config . get max elements in status replication pool (  )  config . get max threads for status replication (  )  max batching delay ms server unavailable sleep time ms retry sleep time ms task processor )  ;   }  ,1318,3,peer,1,"[5, 815, 883]"
5052,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNode.java, peer eureka node,  (  peer aware instance registry registry  string target host  string service url  http replication client replication client  eureka server config config int batch size long max batching delay ms long retry sleep time ms long server unavailable sleep time ms )  {  this . registry = registry ;  this . target host = target host ;  this . replication client = replication client ;  this . service url = service url ;  this . config = config ;  this . max processing delay ms = config . get max time for replication (  )  ;   string batcher name = get batcher name (  )  ;   replication task processor task processor = new  replication task processor ( target host replication client )  ;  this . batching dispatcher =  task dispatchers . create batching task dispatcher ( batcher name config . get max elements in peer replication pool (  )  batch size config . get max threads for peer replication (  )  max batching delay ms server unavailable sleep time ms retry sleep time ms task processor )  ;  this . non batching dispatcher =  task dispatchers . create non batching task dispatcher ( target host config . get max elements in status replication pool (  )  config . get max threads for status replication (  )  max batching delay ms server unavailable sleep time ms retry sleep time ms task processor )  ;   }  ,1318,3,eureka,2,[128]
5053,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNode.java, peer eureka node,  (  peer aware instance registry registry  string target host  string service url  http replication client replication client  eureka server config config int batch size long max batching delay ms long retry sleep time ms long server unavailable sleep time ms )  {  this . registry = registry ;  this . target host = target host ;  this . replication client = replication client ;  this . service url = service url ;  this . config = config ;  this . max processing delay ms = config . get max time for replication (  )  ;   string batcher name = get batcher name (  )  ;   replication task processor task processor = new  replication task processor ( target host replication client )  ;  this . batching dispatcher =  task dispatchers . create batching task dispatcher ( batcher name config . get max elements in peer replication pool (  )  batch size config . get max threads for peer replication (  )  max batching delay ms server unavailable sleep time ms retry sleep time ms task processor )  ;  this . non batching dispatcher =  task dispatchers . create non batching task dispatcher ( target host config . get max elements in status replication pool (  )  config . get max threads for status replication (  )  max batching delay ms server unavailable sleep time ms retry sleep time ms task processor )  ;   }  ,1318,3,node,3,[]
5054,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNode.java,cancel,"public void   ( final  string app name final  string id )  throws  exception  {  long expiry time =  system . current time millis (  )   +  max processing delay ms ;  batching dispatcher . process ( task id ( ""cancel"" app name id )  new  instance replication task ( target host  action .  cancel app name id )  {  @ override public  eureka http response <  void >  execute (  )  {  return replication client . cancel ( app name id )  ;   }  @ override public void handle failure (  int status code   object response entity )  throws  throwable  {  super . handle failure ( status code response entity )  ;  if  ( status code  =  =  404 )   {  logger . warn ( "" {  } : missing entry . "" get task name (  )  )  ;   }   }   }   expiry time )  ;   }  ",747,1,cancel,1,"[210, 289, 410]"
5055,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNode.java,delete status override,"public void   ( final  string app name final  string id final  instance info info )  {  long expiry time =  system . current time millis (  )   +  max processing delay ms ;  batching dispatcher . process ( task id ( ""delete status override"" app name id )  new  instance replication task ( target host  action .  delete status override info null false )  {  @ override public  eureka http response <  void >  execute (  )  {  return replication client . delete status override ( app name id info )  ;   }   }   expiry time )  ;   }  ",532,3,delete,1,"[217, 312, 453]"
5056,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNode.java,delete status override,"public void   ( final  string app name final  string id final  instance info info )  {  long expiry time =  system . current time millis (  )   +  max processing delay ms ;  batching dispatcher . process ( task id ( ""delete status override"" app name id )  new  instance replication task ( target host  action .  delete status override info null false )  {  @ override public  eureka http response <  void >  execute (  )  {  return replication client . delete status override ( app name id info )  ;   }   }   expiry time )  ;   }  ",532,3,status,2,"[224, 319, 460]"
5057,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNode.java,delete status override,"public void   ( final  string app name final  string id final  instance info info )  {  long expiry time =  system . current time millis (  )   +  max processing delay ms ;  batching dispatcher . process ( task id ( ""delete status override"" app name id )  new  instance replication task ( target host  action .  delete status override info null false )  {  @ override public  eureka http response <  void >  execute (  )  {  return replication client . delete status override ( app name id info )  ;   }   }   expiry time )  ;   }  ",532,3,override,3,"[231, 326, 359, 467]"
5058,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNode.java,equals,@ override public boolean   (  object obj )  {  if  ( this  =  =  obj )   {  return true ;   }  if  ( obj  =  =  null )   {  return false ;   }  if  ( get class (  )   !  =  obj . get class (  )  )   {  return false ;   }   peer eureka node other =  (  pe,255,1,equals,1,[]
5059,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNode.java,execute,@ override public  eureka http response <  void >    (  )  {  return replication client . delete status override ( app name id info )  ;   }  ,142,1,execute,1,[]
5060,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNode.java,get batcher name,"public  string   (  )  {   string batcher name ;  try  {  batcher name = new url ( service url )  . get host (  )  ;   }  catch  (   malformedurl exception e1 )   {  batcher name = service url ;   }  return ""target   ""  +  batcher name ;   }  ",243,3,get,1,"[100, 211]"
5061,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNode.java,get batcher name,"public  string   (  )  {   string batcher name ;  try  {  batcher name = new url ( service url )  . get host (  )  ;   }  catch  (   malformedurl exception e1 )   {  batcher name = service url ;   }  return ""target   ""  +  batcher name ;   }  ",243,3,batcher,2,"[34, 58, 166, 223]"
5062,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNode.java,get batcher name,"public  string   (  )  {   string batcher name ;  try  {  batcher name = new url ( service url )  . get host (  )  ;   }  catch  (   malformedurl exception e1 )   {  batcher name = service url ;   }  return ""target   ""  +  batcher name ;   }  ",243,3,name,3,"[42, 66, 174, 231]"
5063,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNode.java,get lease renewal of,private static int   (  instance info info )  {  return  ( info . get lease info (  )   =  =  null  ?   lease . default   duration   in   secs : info . get lease info (  )  . get renewal interval in secs (  )  )  * 1000 ;   }  ,227,4,get,1,"[66, 152, 175]"
5064,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNode.java,get lease renewal of,private static int   (  instance info info )  {  return  ( info . get lease info (  )   =  =  null  ?   lease . default   duration   in   secs : info . get lease info (  )  . get renewal interval in secs (  )  )  * 1000 ;   }  ,227,4,lease,2,"[70, 104, 156]"
5065,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNode.java,get lease renewal of,private static int   (  instance info info )  {  return  ( info . get lease info (  )   =  =  null  ?   lease . default   duration   in   secs : info . get lease info (  )  . get renewal interval in secs (  )  )  * 1000 ;   }  ,227,4,renewal,3,[179]
5066,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNode.java,get lease renewal of,private static int   (  instance info info )  {  return  ( info . get lease info (  )   =  =  null  ?   lease . default   duration   in   secs : info . get lease info (  )  . get renewal interval in secs (  )  )  * 1000 ;   }  ,227,4,of,4,[]
5067,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNode.java,get service url,public  string   (  )  {  return service url ;   }  ,52,3,get,1,[]
5068,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNode.java,get service url,public  string   (  )  {  return service url ;   }  ,52,3,service,2,[33]
5069,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNode.java,get service url,public  string   (  )  {  return service url ;   }  ,52,3,url,3,[41]
5070,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNode.java,handle failure,"@ override public void   ( int status code  object response entity )  throws  throwable  {  super . handle failure ( status code response entity )  ;  if  ( status code  =  =  404 )   {  logger . warn ( "" {  } : missing entry . "" get task name (  )  )  ; ",255,2,handle,1,[100]
5071,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNode.java,handle failure,"@ override public void   ( int status code  object response entity )  throws  throwable  {  super . handle failure ( status code response entity )  ;  if  ( status code  =  =  404 )   {  logger . warn ( "" {  } : missing entry . "" get task name (  )  )  ; ",255,2,failure,2,[107]
5072,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNode.java,hash code,@ override public int   (  )  {  final int prime = 31 ;  int result = 1 ;  result = prime * result  +   (  ( service url  =  =  null )   ?  0 : service url . hash code (  )  )  ;  return result ;   }  ,201,2,hash,1,[158]
5073,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNode.java,hash code,@ override public int   (  )  {  final int prime = 31 ;  int result = 1 ;  result = prime * result  +   (  ( service url  =  =  null )   ?  0 : service url . hash code (  )  )  ;  return result ;   }  ,201,2,code,2,[163]
5074,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNode.java,heartbeat,"public void   ( final  string app name final  string id final  instance info info final  instance status overridden status boolean prime connection )  throws  throwable  {  if  ( prime connection )   {  replication client . send heart beat ( app name id info overridden status )  ;  return ;   }   replication task replication task = new  instance replication task ( target host  action .  heartbeat info overridden status false )  {  @ override public  eureka http response <  instance info >  execute (  )  throws  throwable  {  return replication client . send heart beat ( app name id info overridden status )  ;   }  @ override public void handle failure (  int status code   object response entity )  throws  throwable  {  super . handle failure ( status code response entity )  ;  if  ( status code  =  =  404 )   {  logger . warn ( "" {  } : missing entry . "" get task name (  )  )  ;  if  ( info  !  =  null )   {  logger . warn ( "" {  } : cannot find instance id  {  }  and hence replicating the instance with status  {  } "" get task name (  )  info . get id (  )  info . get status (  )  )  ;  register ( info )  ;   }   }  else if  ( config . should sync when timestamp differs (  )  )   {   instance info peer instance info =  (  instance info ) response entity ;  if  ( peer instance info  !  =  null )   {  sync instances if timestamp differs ( app name id info peer instance info )  ;   }   }   }   }   ;  long expiry time =  system . current time millis (  )   +  get lease renewal of ( info )  ;  batching dispatcher . process ( task id ( ""heartbeat"" info )  replication task expiry time )  ;   }  ",1615,1,heartbeat,1,"[390, 1557]"
5075,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNode.java,register,"public void   ( final  instance info info )  throws  exception  {  long expiry time =  system . current time millis (  )   +  get lease renewal of ( info )  ;  batching dispatcher . process ( task id ( ""register"" info )  new  instance replication task ( target host  action .  register info null true )  {  public  eureka http response <  void >  execute (  )  {  return replication client . register ( info )  ;   }   }   expiry time )  ;   }  ",445,1,register,1,"[203, 277, 392]"
5076,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNode.java,shut down,public void   (  )  {  batching dispatcher . shutdown (  )  ;  non batching dispatcher . shutdown (  )  ;   }  ,111,2,shut,1,"[45, 89]"
5077,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNode.java,shut down,public void   (  )  {  batching dispatcher . shutdown (  )  ;  non batching dispatcher . shutdown (  )  ;   }  ,111,2,down,2,"[49, 93]"
5078,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNode.java,status update,"public void   ( final  string app name final  string id final  instance status new status final  instance info info )  {  long expiry time =  system . current time millis (  )   +  max processing delay ms ;  batching dispatcher . process ( task id ( ""status update"" app name id )  new  instance replication task ( target host  action .  status update info null false )  {  @ override public  eureka http response <  void >  execute (  )  {  return replication client . status update ( app name id new status info )  ;   }   }   expiry time )  ;   }  ",550,2,status,1,"[72, 83, 251, 337, 469, 501]"
5079,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNode.java,status update,"public void   ( final  string app name final  string id final  instance status new status final  instance info info )  {  long expiry time =  system . current time millis (  )   +  max processing delay ms ;  batching dispatcher . process ( task id ( ""status update"" app name id )  new  instance replication task ( target host  action .  status update info null false )  {  @ override public  eureka http response <  void >  execute (  )  {  return replication client . status update ( app name id new status info )  ;   }   }   expiry time )  ;   }  ",550,2,update,2,"[258, 344, 476]"
5080,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNode.java,sync instances if timestamp differs,"private void   (  string app name  string id  instance info info  instance info info from peer )  {  try  {  if  ( info from peer  !  =  null )   {  logger . warn ( "" peer wants us to take the instance information from it  since the timestamp differs ""  +  "" id :  {  }   my  timestamp :  {  }    peer's timestamp:  {  } "" id info . get last dirty timestamp (  )  info from peer . get last dirty timestamp (  )  )  ;  if  ( info from peer . get overridden status (  )   !  =  null &&  !  instance status . unknown . equals ( info from peer . get overridden status (  )  )  )   {  logger . warn ( "" overridden  status info  - id  {  }   mine  {  }   peer's  {  } "" id info . get overridden status (  )  info from peer . get overridden status (  )  )  ;  registry . store overridden status if required ( app name id info from peer . get overridden status (  )  )  ;   }  registry . register ( info from peer true )  ;   }   }  catch  (   throwable e )   {  logger . warn ( "" exception when trying to set information from peer :"" e )  ;   }   }  ",1043,5,sync,1,[]
5081,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNode.java,sync instances if timestamp differs,"private void   (  string app name  string id  instance info info  instance info info from peer )  {  try  {  if  ( info from peer  !  =  null )   {  logger . warn ( "" peer wants us to take the instance information from it  since the timestamp differs ""  +  "" id :  {  }   my  timestamp :  {  }    peer's timestamp:  {  } "" id info . get last dirty timestamp (  )  info from peer . get last dirty timestamp (  )  )  ;  if  ( info from peer . get overridden status (  )   !  =  null &&  !  instance status . unknown . equals ( info from peer . get overridden status (  )  )  )   {  logger . warn ( "" overridden  status info  - id  {  }   mine  {  }   peer's  {  } "" id info . get overridden status (  )  info from peer . get overridden status (  )  )  ;  registry . store overridden status if required ( app name id info from peer . get overridden status (  )  )  ;   }  registry . register ( info from peer true )  ;   }   }  catch  (   throwable e )   {  logger . warn ( "" exception when trying to set information from peer :"" e )  ;   }   }  ",1043,5,instances,2,[]
5082,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNode.java,sync instances if timestamp differs,"private void   (  string app name  string id  instance info info  instance info info from peer )  {  try  {  if  ( info from peer  !  =  null )   {  logger . warn ( "" peer wants us to take the instance information from it  since the timestamp differs ""  +  "" id :  {  }   my  timestamp :  {  }    peer's timestamp:  {  } "" id info . get last dirty timestamp (  )  info from peer . get last dirty timestamp (  )  )  ;  if  ( info from peer . get overridden status (  )   !  =  null &&  !  instance status . unknown . equals ( info from peer . get overridden status (  )  )  )   {  logger . warn ( "" overridden  status info  - id  {  }   mine  {  }   peer's  {  } "" id info . get overridden status (  )  info from peer . get overridden status (  )  )  ;  registry . store overridden status if required ( app name id info from peer . get overridden status (  )  )  ;   }  registry . register ( info from peer true )  ;   }   }  catch  (   throwable e )   {  logger . warn ( "" exception when trying to set information from peer :"" e )  ;   }   }  ",1043,5,if,3,"[109, 244, 418, 788]"
5083,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNode.java,sync instances if timestamp differs,"private void   (  string app name  string id  instance info info  instance info info from peer )  {  try  {  if  ( info from peer  !  =  null )   {  logger . warn ( "" peer wants us to take the instance information from it  since the timestamp differs ""  +  "" id :  {  }   my  timestamp :  {  }    peer's timestamp:  {  } "" id info . get last dirty timestamp (  )  info from peer . get last dirty timestamp (  )  )  ;  if  ( info from peer . get overridden status (  )   !  =  null &&  !  instance status . unknown . equals ( info from peer . get overridden status (  )  )  )   {  logger . warn ( "" overridden  status info  - id  {  }   mine  {  }   peer's  {  } "" id info . get overridden status (  )  info from peer . get overridden status (  )  )  ;  registry . store overridden status if required ( app name id info from peer . get overridden status (  )  )  ;   }  registry . register ( info from peer true )  ;   }   }  catch  (   throwable e )   {  logger . warn ( "" exception when trying to set information from peer :"" e )  ;   }   }  ",1043,5,timestamp,4,"[233, 276, 304, 348, 396]"
5084,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNode.java,sync instances if timestamp differs,"private void   (  string app name  string id  instance info info  instance info info from peer )  {  try  {  if  ( info from peer  !  =  null )   {  logger . warn ( "" peer wants us to take the instance information from it  since the timestamp differs ""  +  "" id :  {  }   my  timestamp :  {  }    peer's timestamp:  {  } "" id info . get last dirty timestamp (  )  info from peer . get last dirty timestamp (  )  )  ;  if  ( info from peer . get overridden status (  )   !  =  null &&  !  instance status . unknown . equals ( info from peer . get overridden status (  )  )  )   {  logger . warn ( "" overridden  status info  - id  {  }   mine  {  }   peer's  {  } "" id info . get overridden status (  )  info from peer . get overridden status (  )  )  ;  registry . store overridden status if required ( app name id info from peer . get overridden status (  )  )  ;   }  registry . register ( info from peer true )  ;   }   }  catch  (   throwable e )   {  logger . warn ( "" exception when trying to set information from peer :"" e )  ;   }   }  ",1043,5,differs,5,[243]
5085,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNode.java,task id,private static  string   (  string request type  instance info info )  {  return task id ( request type info . get app name (  )  info . get id (  )  )  ;   }  ,160,2,task,1,[81]
5086,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNode.java,task id,private static  string   (  string request type  instance info info )  {  return task id ( request type info . get app name (  )  info . get id (  )  )  ;   }  ,160,2,id,2,"[86, 141]"
5087,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationInstanceResponse.java, replication instance response,"@ json creator public   ( @ json property ( ""status code"" )  int status code @ json property ( ""response entity"" )   instance info response entity )  {  this . status code = status code ;  this . response entity = response entity ;   }  ",237,3,replication,1,[]
5088,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationInstanceResponse.java, replication instance response,"@ json creator public   ( @ json property ( ""status code"" )  int status code @ json property ( ""response entity"" )   instance info response entity )  {  this . status code = status code ;  this . response entity = response entity ;   }  ",237,3,instance,2,[117]
5089,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationInstanceResponse.java, replication instance response,"@ json creator public   ( @ json property ( ""status code"" )  int status code @ json property ( ""response entity"" )   instance info response entity )  {  this . status code = status code ;  this . response entity = response entity ;   }  ",237,3,response,3,"[96, 131, 196, 214]"
5090,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationInstanceResponse.java,build,public  replication instance response   (  )  {  return new  replication instance response ( status code response entity )  ;   }  ,131,1,build,1,[]
5091,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationInstanceResponse.java,equals,@ override public boolean   (  object o )  {  if  ( this  =  =  o )  return true ;  if  ( o  =  =  null || get class (  )   !  =  o . get class (  )  )  return false ;   replication instance response that =  (  replication instance response ) o ;  if  ( s,255,1,equals,1,[]
5092,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationInstanceResponse.java,get response entity,public  instance info   (  )  {  return response entity ;   }  ,63,3,get,1,[]
5093,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationInstanceResponse.java,get response entity,public  instance info   (  )  {  return response entity ;   }  ,63,3,response,2,[40]
5094,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationInstanceResponse.java,get response entity,public  instance info   (  )  {  return response entity ;   }  ,63,3,entity,3,[49]
5095,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationInstanceResponse.java,get status code,public int   (  )  {  return status code ;   }  ,48,3,get,1,[]
5096,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationInstanceResponse.java,get status code,public int   (  )  {  return status code ;   }  ,48,3,status,2,[29]
5097,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationInstanceResponse.java,get status code,public int   (  )  {  return status code ;   }  ,48,3,code,3,[36]
5098,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationList.java, replication list,public   (  replication instance replication instance )  {  this (  collections . singleton list ( replication instance )  )  ;   }  ,133,2,replication,1,"[12, 33, 99]"
5099,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationList.java, replication list,public   (  replication instance replication instance )  {  this (  collections . singleton list ( replication instance )  )  ;   }  ,133,2,list,2,[92]
5100,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationList.java,add replication instance,public void   (  replication instance instance )  {  replication list . add ( instance )  ;   }  ,97,3,add,1,[72]
5101,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationList.java,add replication instance,public void   (  replication instance instance )  {  replication list . add ( instance )  ;   }  ,97,3,replication,2,"[17, 53]"
5102,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationList.java,add replication instance,public void   (  replication instance instance )  {  replication list . add ( instance )  ;   }  ,97,3,instance,3,"[29, 38, 78]"
5103,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationList.java,equals,@ override public boolean   (  object o )  {  if  ( this  =  =  o )  return true ;  if  ( o  =  =  null || get class (  )   !  =  o . get class (  )  )  return false ;   replication list that =  (  replication list ) o ;  return  !  ( replication list  ! ,255,1,equals,1,[]
5104,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationList.java,get replication list,public  list <  replication instance >    (  )  {  return this . replication list ;   }  ,89,3,get,1,[]
5105,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationList.java,get replication list,public  list <  replication instance >    (  )  {  return this . replication list ;   }  ,89,3,replication,2,"[16, 65]"
5106,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationList.java,get replication list,public  list <  replication instance >    (  )  {  return this . replication list ;   }  ,89,3,list,3,"[8, 77]"
5107,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationList.java,hash code,@ override public int   (  )  {  return replication list  !  =  null  ?  replication list . hash code (  )  : 0 ;   }  ,119,2,hash,1,[92]
5108,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationList.java,hash code,@ override public int   (  )  {  return replication list  !  =  null  ?  replication list . hash code (  )  : 0 ;   }  ,119,2,code,2,[97]
5109,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationInstanceResponse.java,hash code,@ override public int   (  )  {  int result = status code ;  result = 31 * result  +   ( response entity  !  =  null  ?  response entity . hash code (  )  : 0 )  ;  return result ;   }  ,186,2,hash,1,[139]
5110,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationInstanceResponse.java,hash code,@ override public int   (  )  {  int result = status code ;  result = 31 * result  +   ( response entity  !  =  null  ?  response entity . hash code (  )  : 0 )  ;  return result ;   }  ,186,2,code,2,"[53, 144]"
5111,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationInstanceResponse.java,set response entity,public  builder   (  instance info entity )  {  this . response entity = entity ;  return this ;   }  ,102,3,set,1,[]
5112,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationInstanceResponse.java,set response entity,public  builder   (  instance info entity )  {  this . response entity = entity ;  return this ;   }  ,102,3,response,2,[55]
5113,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationInstanceResponse.java,set response entity,public  builder   (  instance info entity )  {  this . response entity = entity ;  return this ;   }  ,102,3,entity,3,"[35, 64, 73]"
5114,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationInstanceResponse.java,set status code,public  builder   ( int status code )  {  this . status code = status code ;  return this ;   }  ,97,3,set,1,[]
5115,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationInstanceResponse.java,set status code,public  builder   ( int status code )  {  this . status code = status code ;  return this ;   }  ,97,3,status,2,"[24, 49, 63]"
5116,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationInstanceResponse.java,set status code,public  builder   ( int status code )  {  this . status code = status code ;  return this ;   }  ,97,3,code,3,"[31, 56, 70]"
5117,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationInstance.java, replication instance,"@ json creator public   ( @ json property ( ""app name"" )   string app name @ json property ( ""id"" )   string id @ json property ( ""last dirty timestamp"" )   long last dirty timestamp @ json property ( ""overridden status"" )   string overridden status @ jso",255,2,replication,1,[]
5118,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationInstance.java, replication instance,"@ json creator public   ( @ json property ( ""app name"" )   string app name @ json property ( ""id"" )   string id @ json property ( ""last dirty timestamp"" )   long last dirty timestamp @ json property ( ""overridden status"" )   string overridden status @ jso",255,2,instance,2,[]
5119,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationInstance.java,a replication instance,public static  replication instance builder   (  )  {  return new  replication instance builder (  )  ;   }  ,109,3,a,1,"[9, 21, 31, 73, 83]"
5120,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationInstance.java,a replication instance,public static  replication instance builder   (  )  {  return new  replication instance builder (  )  ;   }  ,109,3,replication,2,"[15, 67]"
5121,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationInstance.java,a replication instance,public static  replication instance builder   (  )  {  return new  replication instance builder (  )  ;   }  ,109,3,instance,3,"[27, 79]"
5122,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationInstance.java,build,public  replication instance   (  )  {  return new  replication instance ( app name id last dirty timestamp overridden status status instance info action )  ;   }  ,164,1,build,1,[]
5123,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationInstance.java,but,public  replication instance builder   (  )  {  return a replication instance (  )  . with app name ( app name )  . with id ( id )  . with last dirty timestamp ( last dirty timestamp )  . with overridden status ( overridden status )  . with status ( status )  . with instance info ( instance info )  . with action ( action )  ;   }  ,333,1,but,1,[]
5124,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationInstance.java,equals,@ override public boolean   (  object o )  {  if  ( this  =  =  o )  return true ;  if  ( o  =  =  null || get class (  )   !  =  o . get class (  )  )  return false ;   replication instance that =  (  replication instance ) o ;  if  ( app name  !  =  nul,255,1,equals,1,[]
5125,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationInstance.java,get action,public  action   (  )  {  return action ;   }  ,47,2,get,1,[]
5126,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationInstance.java,get action,public  action   (  )  {  return action ;   }  ,47,2,action,2,"[8, 33]"
5127,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationInstance.java,get app name,public  string   (  )  {  return app name ;   }  ,49,3,get,1,[]
5128,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationInstance.java,get app name,public  string   (  )  {  return app name ;   }  ,49,3,app,2,[33]
5129,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationInstance.java,get app name,public  string   (  )  {  return app name ;   }  ,49,3,name,3,[37]
5130,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationInstance.java,get id,public  string   (  )  {  return id ;   }  ,43,2,get,1,[]
5131,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationInstance.java,get id,public  string   (  )  {  return id ;   }  ,43,2,id,2,[33]
5132,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationInstance.java,get instance info,public  instance info   (  )  {  return instance info ;   }  ,61,3,get,1,[]
5133,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationInstance.java,get instance info,public  instance info   (  )  {  return instance info ;   }  ,61,3,instance,2,"[8, 40]"
5134,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationInstance.java,get instance info,public  instance info   (  )  {  return instance info ;   }  ,61,3,info,3,"[17, 49]"
5135,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationInstance.java,get last dirty timestamp,public  long   (  )  {  return last dirty timestamp ;   }  ,59,4,get,1,[]
5136,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationInstance.java,get last dirty timestamp,public  long   (  )  {  return last dirty timestamp ;   }  ,59,4,last,2,[31]
5137,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationInstance.java,get last dirty timestamp,public  long   (  )  {  return last dirty timestamp ;   }  ,59,4,dirty,3,[36]
5138,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationInstance.java,get last dirty timestamp,public  long   (  )  {  return last dirty timestamp ;   }  ,59,4,timestamp,4,[42]
5139,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationInstance.java,get overridden status,public  string   (  )  {  return overridden status ;   }  ,58,3,get,1,[]
5140,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationInstance.java,get overridden status,public  string   (  )  {  return overridden status ;   }  ,58,3,overridden,2,[33]
5141,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationInstance.java,get overridden status,public  string   (  )  {  return overridden status ;   }  ,58,3,status,3,[44]
5142,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationInstance.java,get status,public  string   (  )  {  return status ;   }  ,47,2,get,1,[]
5143,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationInstance.java,get status,public  string   (  )  {  return status ;   }  ,47,2,status,2,[33]
5144,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationInstance.java,hash code,@ override public int   (  )  {  int result = app name  !  =  null  ?  app name . hash code (  )  : 0 ;  result = 31 * result  +   ( id  !  =  null  ?  id . hash code (  )  : 0 )  ;  result = 31 * result  +   ( last dirty timestamp  !  =  null  ?  last di,255,2,hash,1,"[82, 157]"
5145,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationInstance.java,hash code,@ override public int   (  )  {  int result = app name  !  =  null  ?  app name . hash code (  )  : 0 ;  result = 31 * result  +   ( id  !  =  null  ?  id . hash code (  )  : 0 )  ;  result = 31 * result  +   ( last dirty timestamp  !  =  null  ?  last di,255,2,code,2,"[87, 162]"
5146,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationInstance.java,replication instance,public static  replication instance builder   (  )  {  return  replication instance builder . a replication instance (  )  ;   }  ,130,2,replication,1,"[15, 63, 96]"
5147,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationInstance.java,replication instance,public static  replication instance builder   (  )  {  return  replication instance builder . a replication instance (  )  ;   }  ,130,2,instance,2,"[27, 75, 108]"
5148,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationInstance.java,with action,public  replication instance builder   (  action action )  {  this . action = action ;  return this ;   }  ,107,2,with,1,[]
5149,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationInstance.java,with action,public  replication instance builder   (  action action )  {  this . action = action ;  return this ;   }  ,107,2,action,2,"[42, 49, 69, 78]"
5150,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationInstance.java,with app name,public  replication instance builder   (  string app name )  {  this . app name = app name ;  return this ;   }  ,113,3,with,1,[]
5151,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationInstance.java,with app name,public  replication instance builder   (  string app name )  {  this . app name = app name ;  return this ;   }  ,113,3,app,2,"[49, 71, 82]"
5152,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationInstance.java,with app name,public  replication instance builder   (  string app name )  {  this . app name = app name ;  return this ;   }  ,113,3,name,3,"[53, 75, 86]"
5153,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationInstance.java,with id,public  replication instance builder   (  string id )  {  this . id = id ;  return this ;   }  ,95,2,with,1,[]
5154,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationInstance.java,with id,public  replication instance builder   (  string id )  {  this . id = id ;  return this ;   }  ,95,2,id,2,"[49, 65, 70]"
5155,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationInstance.java,with instance info,public  replication instance builder   (  instance info instance info )  {  this . instance info = instance info ;  return this ;   }  ,135,3,with,1,[]
5156,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationInstance.java,with instance info,public  replication instance builder   (  instance info instance info )  {  this . instance info = instance info ;  return this ;   }  ,135,3,instance,2,"[20, 42, 56, 83, 99]"
5157,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationInstance.java,with instance info,public  replication instance builder   (  instance info instance info )  {  this . instance info = instance info ;  return this ;   }  ,135,3,info,3,"[51, 65, 92, 108]"
5158,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationInstance.java,with last dirty timestamp,public  replication instance builder   (  long last dirty timestamp )  {  this . last dirty timestamp = last dirty timestamp ;  return this ;   }  ,147,4,with,1,[]
5159,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationInstance.java,with last dirty timestamp,public  replication instance builder   (  long last dirty timestamp )  {  this . last dirty timestamp = last dirty timestamp ;  return this ;   }  ,147,4,last,2,"[47, 81, 104]"
5160,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationInstance.java,with last dirty timestamp,public  replication instance builder   (  long last dirty timestamp )  {  this . last dirty timestamp = last dirty timestamp ;  return this ;   }  ,147,4,dirty,3,"[52, 86, 109]"
5161,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationInstance.java,with last dirty timestamp,public  replication instance builder   (  long last dirty timestamp )  {  this . last dirty timestamp = last dirty timestamp ;  return this ;   }  ,147,4,timestamp,4,"[58, 92, 115]"
5162,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationInstance.java,with overridden status,public  replication instance builder   (  string overridden status )  {  this . overridden status = overridden status ;  return this ;   }  ,140,3,with,1,[]
5163,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationInstance.java,with overridden status,public  replication instance builder   (  string overridden status )  {  this . overridden status = overridden status ;  return this ;   }  ,140,3,overridden,2,"[49, 80, 100]"
5164,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationInstance.java,with overridden status,public  replication instance builder   (  string overridden status )  {  this . overridden status = overridden status ;  return this ;   }  ,140,3,status,3,"[60, 91, 111]"
5165,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationInstance.java,with status,public  replication instance builder   (  string status )  {  this . status = status ;  return this ;   }  ,107,2,with,1,[]
5166,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationInstance.java,with status,public  replication instance builder   (  string status )  {  this . status = status ;  return this ;   }  ,107,2,status,2,"[49, 69, 78]"
5167,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationListResponse.java, replication list response,"@ json creator public   ( @ json property ( ""response list"" )   list <  replication instance response >  response list )  {  this . response list = response list ;   }  ",169,3,replication,1,[72]
5168,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationListResponse.java, replication list response,"@ json creator public   ( @ json property ( ""response list"" )   list <  replication instance response >  response list )  {  this . response list = response list ;   }  ",169,3,list,2,"[54, 64, 114, 141, 157]"
5169,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationListResponse.java, replication list response,"@ json creator public   ( @ json property ( ""response list"" )   list <  replication instance response >  response list )  {  this . response list = response list ;   }  ",169,3,response,3,"[45, 93, 105, 132, 148]"
5170,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationListResponse.java,add response,public void   (  replication instance response single response )  {  response list . add ( single response )  ;   }  ,117,2,add,1,[85]
5171,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationListResponse.java,add response,public void   (  replication instance response single response )  {  response list . add ( single response )  ;   }  ,117,2,response,2,"[38, 54, 69, 98]"
5172,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationListResponse.java,equals,@ override public boolean   (  object o )  {  if  ( this  =  =  o )  return true ;  if  ( o  =  =  null || get class (  )   !  =  o . get class (  )  )  return false ;   replication list response that =  (  replication list response ) o ;  return  !  ( re,255,1,equals,1,[]
5173,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationListResponse.java,get response list,public  list <  replication instance response >    (  )  {  return response list ;   }  ,88,3,get,1,[]
5174,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationListResponse.java,get response list,public  list <  replication instance response >    (  )  {  return response list ;   }  ,88,3,response,2,"[37, 67]"
5175,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationListResponse.java,get response list,public  list <  replication instance response >    (  )  {  return response list ;   }  ,88,3,list,3,"[8, 76]"
5176,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationListResponse.java,hash code,@ override public int   (  )  {  return response list  !  =  null  ?  response list . hash code (  )  : 0 ;   }  ,113,2,hash,1,[86]
5177,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationListResponse.java,hash code,@ override public int   (  )  {  return response list  !  =  null  ?  response list . hash code (  )  : 0 ;   }  ,113,2,code,2,[91]
5178,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNodes.java, peer eureka nodes,@ inject public   (  peer aware instance registry registry  eureka server config server config  eureka client config client config  server codecs server codecs  application info manager application info manager )  {  this . registry = registry ;  this . s,255,3,peer,1,[21]
5179,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNodes.java, peer eureka nodes,@ inject public   (  peer aware instance registry registry  eureka server config server config  eureka client config client config  server codecs server codecs  application info manager application info manager )  {  this . registry = registry ;  this . s,255,3,eureka,2,"[60, 96]"
5180,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNodes.java, peer eureka nodes,@ inject public   (  peer aware instance registry registry  eureka server config server config  eureka client config client config  server codecs server codecs  application info manager application info manager )  {  this . registry = registry ;  this . s,255,3,nodes,3,[]
5181,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNodes.java,create peer eureka node,"protected  peer eureka node   (  string peer eureka node url )  {   http replication client replication client =  jersey replication client . create replication client ( server config server codecs peer eureka node url )  ;   string target host = host from url ( peer eureka node url )  ;  if  ( target host  =  =  null )   {  target host = ""host"" ;   }  return new  peer eureka node ( registry target host peer eureka node url replication client server config )  ;   }  ",471,4,create,1,[142]
5182,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNodes.java,create peer eureka node,"protected  peer eureka node   (  string peer eureka node url )  {   http replication client replication client =  jersey replication client . create replication client ( server config server codecs peer eureka node url )  ;   string target host = host from url ( peer eureka node url )  ;  if  ( target host  =  =  null )   {  target host = ""host"" ;   }  return new  peer eureka node ( registry target host peer eureka node url replication client server config )  ;   }  ",471,4,peer,2,"[11, 40, 198, 263, 367, 407]"
5183,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNodes.java,create peer eureka node,"protected  peer eureka node   (  string peer eureka node url )  {   http replication client replication client =  jersey replication client . create replication client ( server config server codecs peer eureka node url )  ;   string target host = host from url ( peer eureka node url )  ;  if  ( target host  =  =  null )   {  target host = ""host"" ;   }  return new  peer eureka node ( registry target host peer eureka node url replication client server config )  ;   }  ",471,4,eureka,3,"[16, 45, 203, 268, 372, 412]"
5184,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNodes.java,create peer eureka node,"protected  peer eureka node   (  string peer eureka node url )  {   http replication client replication client =  jersey replication client . create replication client ( server config server codecs peer eureka node url )  ;   string target host = host from url ( peer eureka node url )  ;  if  ( target host  =  =  null )   {  target host = ""host"" ;   }  return new  peer eureka node ( registry target host peer eureka node url replication client server config )  ;   }  ",471,4,node,4,"[23, 52, 210, 275, 379, 419]"
5185,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNodes.java,get min number of available peers,public int   (  )  {  return server config . get health status min number of available peers (  )  ;   }  ,106,6,get,1,[45]
5186,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNodes.java,get min number of available peers,public int   (  )  {  return server config . get health status min number of available peers (  )  ;   }  ,106,6,min,2,[63]
5187,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNodes.java,get min number of available peers,public int   (  )  {  return server config . get health status min number of available peers (  )  ;   }  ,106,6,number,3,[67]
5188,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNodes.java,get min number of available peers,public int   (  )  {  return server config . get health status min number of available peers (  )  ;   }  ,106,6,of,4,[74]
5189,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNodes.java,get min number of available peers,public int   (  )  {  return server config . get health status min number of available peers (  )  ;   }  ,106,6,available,5,[77]
5190,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNodes.java,get min number of available peers,public int   (  )  {  return server config . get health status min number of available peers (  )  ;   }  ,106,6,peers,6,[87]
5191,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNodes.java,get peer eureka nodes,public  list <  peer eureka node >    (  )  {  return peer eureka nodes ;   }  ,79,4,get,1,[]
5192,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNodes.java,get peer eureka nodes,public  list <  peer eureka node >    (  )  {  return peer eureka nodes ;   }  ,79,4,peer,2,"[16, 54]"
5193,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNodes.java,get peer eureka nodes,public  list <  peer eureka node >    (  )  {  return peer eureka nodes ;   }  ,79,4,eureka,3,"[21, 59]"
5194,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNodes.java,get peer eureka nodes,public  list <  peer eureka node >    (  )  {  return peer eureka nodes ;   }  ,79,4,nodes,4,[66]
5195,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNodes.java,get peer nodes view,public  list <  peer eureka node >    (  )  {  return  collections . unmodifiable list ( peer eureka nodes )  ;   }  ,117,4,get,1,[]
5196,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNodes.java,get peer nodes view,public  list <  peer eureka node >    (  )  {  return  collections . unmodifiable list ( peer eureka nodes )  ;   }  ,117,4,peer,2,"[16, 89]"
5197,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNodes.java,get peer nodes view,public  list <  peer eureka node >    (  )  {  return  collections . unmodifiable list ( peer eureka nodes )  ;   }  ,117,4,nodes,3,[101]
5198,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNodes.java,get peer nodes view,public  list <  peer eureka node >    (  )  {  return  collections . unmodifiable list ( peer eureka nodes )  ;   }  ,117,4,view,4,[]
5199,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNodes.java,host from url,"public static  string   (  string url )  {  uri uri ;  try  {  uri = new uri ( url )  ;   }  catch  (  uri syntax exception e )   {  logger . warn ( "" cannot parse service uri  {  } "" url e )  ;  return null ;   }  return uri . get host (  )  ;   }  ",250,3,host,1,[232]
5200,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNodes.java,host from url,"public static  string   (  string url )  {  uri uri ;  try  {  uri = new uri ( url )  ;   }  catch  (  uri syntax exception e )   {  logger . warn ( "" cannot parse service uri  {  } "" url e )  ;  return null ;   }  return uri . get host (  )  ;   }  ",250,3,from,2,[]
5201,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNodes.java,host from url,"public static  string   (  string url )  {  uri uri ;  try  {  uri = new uri ( url )  ;   }  catch  (  uri syntax exception e )   {  logger . warn ( "" cannot parse service uri  {  } "" url e )  ;  return null ;   }  return uri . get host (  )  ;   }  ",250,3,url,3,"[34, 79, 184]"
5202,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNodes.java,is instanceurl,public boolean   (  string url  instance info instance )  {   string host name = host from url ( url )  ;   string my info comparator = instance . get host name (  )  ;  if  ( client config . get transport config (  )  . applications resolver use ip (  )  )   {  my info comparator = instance . getip addr (  )  ;   }  return host name  !  =  null && host name . equals ( my info comparator )  ;   }  ,401,2,is,1,[]
5203,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNodes.java,is instanceurl,public boolean   (  string url  instance info instance )  {   string host name = host from url ( url )  ;   string my info comparator = instance . get host name (  )  ;  if  ( client config . get transport config (  )  . applications resolver use ip (  )  )   {  my info comparator = instance . getip addr (  )  ;   }  return host name  !  =  null && host name . equals ( my info comparator )  ;   }  ,401,2,instanceurl,2,[]
5204,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNodes.java,is this me,public static boolean   (  string url )  {   instance info my info =  application info manager . get instance (  )  . get info (  )  ;   string host name = host from url ( url )  ;  return host name  !  =  null && host name . equals ( my info . get host name (  )  )  ;   }  ,275,3,is,1,[]
5205,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNodes.java,is this me,public static boolean   (  string url )  {   instance info my info =  application info manager . get instance (  )  . get info (  )  ;   string host name = host from url ( url )  ;  return host name  !  =  null && host name . equals ( my info . get host name (  )  )  ;   }  ,275,3,this,2,[]
5206,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNodes.java,is this me,public static boolean   (  string url )  {   instance info my info =  application info manager . get instance (  )  . get info (  )  ;   string host name = host from url ( url )  ;  return host name  !  =  null && host name . equals ( my info . get host name (  )  )  ;   }  ,275,3,me,3,"[151, 196, 221, 256]"
5207,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNodes.java,is this my url,public boolean   (  string url )  {  return is instanceurl ( url application info manager . get info (  )  )  ;   }  ,117,4,is,1,[44]
5208,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNodes.java,is this my url,public boolean   (  string url )  {  return is instanceurl ( url application info manager . get info (  )  )  ;   }  ,117,4,this,2,[]
5209,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNodes.java,is this my url,public boolean   (  string url )  {  return is instanceurl ( url application info manager . get info (  )  )  ;   }  ,117,4,my,3,[]
5210,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNodes.java,is this my url,public boolean   (  string url )  {  return is instanceurl ( url application info manager . get info (  )  )  ;   }  ,117,4,url,4,"[27, 55, 61]"
5211,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNodes.java,new thread,"@ override public  thread   (  runnable r )  {   thread thread = new  thread ( r "" eureka -  peer nodes updater"" )  ;  thread . set daemon ( true )  ;  return thread ;   }  ",173,2,new,1,[65]
5212,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNodes.java,new thread,"@ override public  thread   (  runnable r )  {   thread thread = new  thread ( r "" eureka -  peer nodes updater"" )  ;  thread . set daemon ( true )  ;  return thread ;   }  ",173,2,thread,2,"[19, 49, 56, 70, 119, 159]"
5213,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNodes.java,resolve peer urls,protected  list <  string >    (  )  {   instance info my info = application info manager . get info (  )  ;   string zone =  instance info . get zone ( client config . get availability zones ( client config . get region (  )  )  my info )  ;   list <  string >  replica urls =  endpoint utils . get discovery service urls ( client config zone new  endpoint utils .  instance info based url randomizer ( my info )  )  ;  int idx = 0 ;  while  ( idx  <  replica urls . size (  )  )   {  if  ( is this my url ( replica urls . get ( idx )  )  )   {  replica urls . remove ( idx )  ;   }  else  {  idx +  +  ;   }   }  return replica urls ;   }  ,642,3,resolve,1,[]
5214,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNodes.java,resolve peer urls,protected  list <  string >    (  )  {   instance info my info = application info manager . get info (  )  ;   string zone =  instance info . get zone ( client config . get availability zones ( client config . get region (  )  )  my info )  ;   list <  string >  replica urls =  endpoint utils . get discovery service urls ( client config zone new  endpoint utils .  instance info based url randomizer ( my info )  )  ;  int idx = 0 ;  while  ( idx  <  replica urls . size (  )  )   {  if  ( is this my url ( replica urls . get ( idx )  )  )   {  replica urls . remove ( idx )  ;   }  else  {  idx +  +  ;   }   }  return replica urls ;   }  ,642,3,peer,2,[]
5215,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNodes.java,resolve peer urls,protected  list <  string >    (  )  {   instance info my info = application info manager . get info (  )  ;   string zone =  instance info . get zone ( client config . get availability zones ( client config . get region (  )  )  my info )  ;   list <  string >  replica urls =  endpoint utils . get discovery service urls ( client config zone new  endpoint utils .  instance info based url randomizer ( my info )  )  ;  int idx = 0 ;  while  ( idx  <  replica urls . size (  )  )   {  if  ( is this my url ( replica urls . get ( idx )  )  )   {  replica urls . remove ( idx )  ;   }  else  {  idx +  +  ;   }   }  return replica urls ;   }  ,642,3,urls,3,"[271, 318, 461, 517, 555, 630]"
5216,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNodes.java,run,"@ override public void   (  )  {  try  {  update peer eureka nodes ( resolve peer urls (  )  )  ;   }  catch  (   throwable e )   {  logger . error ( "" cannot update the replica  nodes"" e )  ;   }   }  ",202,1,run,1,[]
5217,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNodes.java,shutdown,public void   (  )  {  task executor . shutdown (  )  ;   list <  peer eureka node >  to remove = this . peer eureka nodes ;  this . peer eureka nodes =  collections . empty list (  )  ;  this . peer eureka node urls =  collections . empty set (  )  ;  for  (   peer eureka node node : to remove )   {  node . shut down (  )  ;   }   }  ,337,1,shutdown,1,[39]
5218,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNodes.java,start,"public void   (  )  {  task executor =  executors . new single thread scheduled executor ( new  thread factory (  )  {  @ override public  thread new thread (   runnable r )  {   thread thread = new  thread ( r "" eureka -  peer nodes updater"" )  ;  thread . set daemon ( true )  ;  return thread ;   }   }   )  ;  try  {  update peer eureka nodes ( resolve peer urls (  )  )  ;   runnable peers update task = new  runnable (  )  {  @ override public void run (  )  {  try  {  update peer eureka nodes ( resolve peer urls (  )  )  ;   }  catch  (   throwable e )   {  logger . error ( "" cannot update the replica  nodes"" e )  ;   }   }   }   ;  task executor . schedule with fixed delay ( peers update task server config . get peer eureka nodes update interval ms (  )  server config . get peer eureka nodes update interval ms (  )   time unit . milliseconds )  ;   }  catch  (   exception e )   {  throw new  illegal state exception ( e )  ;   }  for  (   peer eureka node node : peer eureka nodes )   {  logger . info ( "" replica node url:  {  } "" node . get service url (  )  )  ;   }   }  ",1092,1,start,1,[]
5219,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNodes.java,update peer eureka nodes,"protected void   (  list <  string >  new peer urls )  {  if  ( new peer urls . is empty (  )  )   {  logger . warn ( "" the replica size seems to be empty .   check the route 53 dns  registry"" )  ;  return ;   }   set <  string >  to shutdown = new  hash set <  >  ( peer eureka node urls )  ;  to shutdown . remove all ( new peer urls )  ;   set <  string >  to add = new  hash set <  >  ( new peer urls )  ;  to add . remove all ( peer eureka node urls )  ;  if  ( to shutdown . is empty (  )  && to add . is empty (  )  )   {  return ;   }   list <  peer eureka node >  new node list = new  array list <  >  ( peer eureka nodes )  ;  if  (  ! to shutdown . is empty (  )  )   {  logger . info ( "" removing no longer available peer nodes  {  } "" to shutdown )  ;  int i = 0 ;  while  ( i  <  new node list . size (  )  )   {   peer eureka node eureka node = new node list . get ( i )  ;  if  ( to shutdown . contains ( eureka node . get service url (  )  )  )   {  new node list . remove ( i )  ;  eureka node . shut down (  )  ;   }  else  {  i +  +  ;   }   }   }  if  (  ! to add . is empty (  )  )   {  logger . info ( "" adding new peer nodes  {  } "" to add )  ;  for  (   string peer url : to add )   {  new node list . add ( create peer eureka node ( peer url )  )  ;   }   }  this . peer eureka nodes = new node list ;  this . peer eureka node urls = new  hash set <  >  ( new peer urls )  ;   }  ",1406,4,update,1,[]
5220,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNodes.java,update peer eureka nodes,"protected void   (  list <  string >  new peer urls )  {  if  ( new peer urls . is empty (  )  )   {  logger . warn ( "" the replica size seems to be empty .   check the route 53 dns  registry"" )  ;  return ;   }   set <  string >  to shutdown = new  hash set <  >  ( peer eureka node urls )  ;  to shutdown . remove all ( new peer urls )  ;   set <  string >  to add = new  hash set <  >  ( new peer urls )  ;  to add . remove all ( peer eureka node urls )  ;  if  ( to shutdown . is empty (  )  && to add . is empty (  )  )   {  return ;   }   list <  peer eureka node >  new node list = new  array list <  >  ( peer eureka nodes )  ;  if  (  ! to shutdown . is empty (  )  )   {  logger . info ( "" removing no longer available peer nodes  {  } "" to shutdown )  ;  int i = 0 ;  while  ( i  <  new node list . size (  )  )   {   peer eureka node eureka node = new node list . get ( i )  ;  if  ( to shutdown . contains ( eureka node . get service url (  )  )  )   {  new node list . remove ( i )  ;  eureka node . shut down (  )  ;   }  else  {  i +  +  ;   }   }   }  if  (  ! to add . is empty (  )  )   {  logger . info ( "" adding new peer nodes  {  } "" to add )  ;  for  (   string peer url : to add )   {  new node list . add ( create peer eureka node ( peer url )  )  ;   }   }  this . peer eureka nodes = new node list ;  this . peer eureka node urls = new  hash set <  >  ( new peer urls )  ;   }  ",1406,4,peer,2,"[42, 68, 267, 326, 395, 433, 553, 613, 729, 829, 1138, 1186, 1240, 1259, 1292, 1336, 1386]"
5221,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNodes.java,update peer eureka nodes,"protected void   (  list <  string >  new peer urls )  {  if  ( new peer urls . is empty (  )  )   {  logger . warn ( "" the replica size seems to be empty .   check the route 53 dns  registry"" )  ;  return ;   }   set <  string >  to shutdown = new  hash set <  >  ( peer eureka node urls )  ;  to shutdown . remove all ( new peer urls )  ;   set <  string >  to add = new  hash set <  >  ( new peer urls )  ;  to add . remove all ( peer eureka node urls )  ;  if  ( to shutdown . is empty (  )  && to add . is empty (  )  )   {  return ;   }   list <  peer eureka node >  new node list = new  array list <  >  ( peer eureka nodes )  ;  if  (  ! to shutdown . is empty (  )  )   {  logger . info ( "" removing no longer available peer nodes  {  } "" to shutdown )  ;  int i = 0 ;  while  ( i  <  new node list . size (  )  )   {   peer eureka node eureka node = new node list . get ( i )  ;  if  ( to shutdown . contains ( eureka node . get service url (  )  )  )   {  new node list . remove ( i )  ;  eureka node . shut down (  )  ;   }  else  {  i +  +  ;   }   }   }  if  (  ! to add . is empty (  )  )   {  logger . info ( "" adding new peer nodes  {  } "" to add )  ;  for  (   string peer url : to add )   {  new node list . add ( create peer eureka node ( peer url )  )  ;   }   }  this . peer eureka nodes = new node list ;  this . peer eureka node urls = new  hash set <  >  ( new peer urls )  ;   }  ",1406,4,eureka,3,"[272, 438, 558, 618, 834, 846, 921, 1000, 1245, 1297, 1341]"
5222,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNodes.java,update peer eureka nodes,"protected void   (  list <  string >  new peer urls )  {  if  ( new peer urls . is empty (  )  )   {  logger . warn ( "" the replica size seems to be empty .   check the route 53 dns  registry"" )  ;  return ;   }   set <  string >  to shutdown = new  hash set <  >  ( peer eureka node urls )  ;  to shutdown . remove all ( new peer urls )  ;   set <  string >  to add = new  hash set <  >  ( new peer urls )  ;  to add . remove all ( peer eureka node urls )  ;  if  ( to shutdown . is empty (  )  && to add . is empty (  )  )   {  return ;   }   list <  peer eureka node >  new node list = new  array list <  >  ( peer eureka nodes )  ;  if  (  ! to shutdown . is empty (  )  )   {  logger . info ( "" removing no longer available peer nodes  {  } "" to shutdown )  ;  int i = 0 ;  while  ( i  <  new node list . size (  )  )   {   peer eureka node eureka node = new node list . get ( i )  ;  if  ( to shutdown . contains ( eureka node . get service url (  )  )  )   {  new node list . remove ( i )  ;  eureka node . shut down (  )  ;   }  else  {  i +  +  ;   }   }   }  if  (  ! to add . is empty (  )  )   {  logger . info ( "" adding new peer nodes  {  } "" to add )  ;  for  (   string peer url : to add )   {  new node list . add ( create peer eureka node ( peer url )  )  ;   }   }  this . peer eureka nodes = new node list ;  this . peer eureka node urls = new  hash set <  >  ( new peer urls )  ;   }  ",1406,4,nodes,4,"[625, 734, 1143, 1304]"
5223,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\ReplicationTask.java, replication task,  (  string peer node name  action action )  {  this . peer node name = peer node name ;  this . action = action ;   }  ,120,2,replication,1,[]
5224,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\ReplicationTask.java, replication task,  (  string peer node name  action action )  {  this . peer node name = peer node name ;  this . action = action ;   }  ,120,2,task,2,[]
5225,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\ReplicationTaskProcessor.java, replication task processor,  (  string peer id  http replication client replication client )  {  this . replication client = replication client ;  this . peer id = peer id ;   }  ,152,3,replication,1,"[26, 45, 77, 98]"
5226,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\ReplicationTaskProcessor.java, replication task processor,  (  string peer id  http replication client replication client )  {  this . replication client = replication client ;  this . peer id = peer id ;   }  ,152,3,task,2,[]
5227,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\ReplicationTaskProcessor.java, replication task processor,  (  string peer id  http replication client replication client )  {  this . replication client = replication client ;  this . peer id = peer id ;   }  ,152,3,processor,3,[]
5228,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerContext.java, default eureka server context,@ inject public   (  eureka server config server config  server codecs server codecs  peer aware instance registry registry  peer eureka nodes peer eureka nodes  application info manager application info manager )  {  this . server config = server config ,255,4,default,1,[]
5229,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerContext.java, default eureka server context,@ inject public   (  eureka server config server config  server codecs server codecs  peer aware instance registry registry  peer eureka nodes peer eureka nodes  application info manager application info manager )  {  this . server config = server config ,255,4,eureka,2,"[21, 130, 148]"
5230,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerContext.java, default eureka server context,@ inject public   (  eureka server config server config  server codecs server codecs  peer aware instance registry registry  peer eureka nodes peer eureka nodes  application info manager application info manager )  {  this . server config = server config ,255,4,server,3,"[28, 42, 57, 71, 225, 241]"
5231,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerContext.java, default eureka server context,@ inject public   (  eureka server config server config  server codecs server codecs  peer aware instance registry registry  peer eureka nodes peer eureka nodes  application info manager application info manager )  {  this . server config = server config ,255,4,context,4,[]
5232,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerContext.java,get application info manager,@ override public  application info manager   (  )  {  return application info manager ;   }  ,94,4,get,1,[]
5233,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerContext.java,get application info manager,@ override public  application info manager   (  )  {  return application info manager ;   }  ,94,4,application,2,"[19, 62]"
5234,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerContext.java,get application info manager,@ override public  application info manager   (  )  {  return application info manager ;   }  ,94,4,info,3,"[31, 74]"
5235,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerContext.java,get application info manager,@ override public  application info manager   (  )  {  return application info manager ;   }  ,94,4,manager,4,"[36, 79]"
5236,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerContext.java,get peer eureka nodes,@ override public  peer eureka nodes   (  )  {  return peer eureka nodes ;   }  ,80,4,get,1,[]
5237,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerContext.java,get peer eureka nodes,@ override public  peer eureka nodes   (  )  {  return peer eureka nodes ;   }  ,80,4,peer,2,"[19, 55]"
5238,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerContext.java,get peer eureka nodes,@ override public  peer eureka nodes   (  )  {  return peer eureka nodes ;   }  ,80,4,eureka,3,"[24, 60]"
5239,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerContext.java,get peer eureka nodes,@ override public  peer eureka nodes   (  )  {  return peer eureka nodes ;   }  ,80,4,nodes,4,"[31, 67]"
5240,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerContext.java,get registry,@ override public  peer aware instance registry   (  )  {  return registry ;   }  ,82,2,get,1,[]
5241,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerContext.java,get registry,@ override public  peer aware instance registry   (  )  {  return registry ;   }  ,82,2,registry,2,"[39, 66]"
5242,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerContext.java,get server codecs,@ override public  server codecs   (  )  {  return server codecs ;   }  ,72,3,get,1,[]
5243,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerContext.java,get server codecs,@ override public  server codecs   (  )  {  return server codecs ;   }  ,72,3,server,2,"[19, 51]"
5244,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerContext.java,get server codecs,@ override public  server codecs   (  )  {  return server codecs ;   }  ,72,3,codecs,3,"[26, 58]"
5245,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerContext.java,get server config,@ override public  eureka server config   (  )  {  return server config ;   }  ,79,3,get,1,[]
5246,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerContext.java,get server config,@ override public  eureka server config   (  )  {  return server config ;   }  ,79,3,server,2,"[26, 58]"
5247,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerContext.java,get server config,@ override public  eureka server config   (  )  {  return server config ;   }  ,79,3,config,3,"[33, 65]"
5248,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerContext.java,initialize,"@ post construct @ override public void   (  )  throws  exception  {  logger . info ( "" initializing  .  .  . "" )  ;  peer eureka nodes . start (  )  ;  registry . init ( peer eureka nodes )  ;  logger . info ( "" initialized"" )  ;   }  ",236,1,initialize,1,[213]
5249,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerContext.java,shutdown,"@ pre destroy @ override public void   (  )  throws  exception  {  logger . info ( "" shutting down  .  .  . "" )  ;  registry . shutdown (  )  ;  peer eureka nodes . shutdown (  )  ;  logger . info ( "" shut down"" )  ;   }  ",222,1,shutdown,1,"[127, 165]"
5250,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\ReplicationTaskProcessor.java,create replication instance of,private static  replication instance   (  instance replication task task )  {   replication instance builder instance builder = a replication instance (  )  ;  instance builder . with app name ( task . get app name (  )  )  ;  instance builder . with id ( task . get id (  )  )  ;   instance info instance info = task . get instance info (  )  ;  if  ( instance info  !  =  null )   {   string overridden status = task . get overridden status (  )   =  =  null  ?  null : task . get overridden status (  )  . name (  )  ;  instance builder . with overridden status ( overridden status )  ;  instance builder . with last dirty timestamp ( instance info . get last dirty timestamp (  )  )  ;  if  ( task . should replicate instance info (  )  )   {  instance builder . with instance info ( instance info )  ;   }   string instance status = instance info . get status (  )   =  =  null  ?  null : instance info . get status (  )  . name (  )  ;  instance builder . with status ( instance status )  ;   }  instance builder . with action ( task . get action (  )  )  ;  return instance builder . build (  )  ;   }  ,1110,4,create,1,[]
5251,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\ReplicationTaskProcessor.java,create replication instance of,private static  replication instance   (  instance replication task task )  {   replication instance builder instance builder = a replication instance (  )  ;  instance builder . with app name ( task . get app name (  )  )  ;  instance builder . with id ( task . get id (  )  )  ;   instance info instance info = task . get instance info (  )  ;  if  ( instance info  !  =  null )   {   string overridden status = task . get overridden status (  )   =  =  null  ?  null : task . get overridden status (  )  . name (  )  ;  instance builder . with overridden status ( overridden status )  ;  instance builder . with last dirty timestamp ( instance info . get last dirty timestamp (  )  )  ;  if  ( task . should replicate instance info (  )  )   {  instance builder . with instance info ( instance info )  ;   }   string instance status = instance info . get status (  )   =  =  null  ?  null : instance info . get status (  )  . name (  )  ;  instance builder . with status ( instance status )  ;   }  instance builder . with action ( task . get action (  )  )  ;  return instance builder . build (  )  ;   }  ,1110,4,replication,2,"[16, 51, 80, 130]"
5252,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\ReplicationTaskProcessor.java,create replication instance of,private static  replication instance   (  instance replication task task )  {   replication instance builder instance builder = a replication instance (  )  ;  instance builder . with app name ( task . get app name (  )  )  ;  instance builder . with id ( task . get id (  )  )  ;   instance info instance info = task . get instance info (  )  ;  if  ( instance info  !  =  null )   {   string overridden status = task . get overridden status (  )   =  =  null  ?  null : task . get overridden status (  )  . name (  )  ;  instance builder . with overridden status ( overridden status )  ;  instance builder . with last dirty timestamp ( instance info . get last dirty timestamp (  )  )  ;  if  ( task . should replicate instance info (  )  )   {  instance builder . with instance info ( instance info )  ;   }   string instance status = instance info . get status (  )   =  =  null  ?  null : instance info . get status (  )  . name (  )  ;  instance builder . with status ( instance status )  ;   }  instance builder . with action ( task . get action (  )  )  ;  return instance builder . build (  )  ;   }  ,1110,4,instance,3,"[28, 42, 92, 109, 142, 160, 227, 283, 297, 324, 353, 523, 591, 638, 721, 748, 772, 788, 820, 838, 894, 943, 976, 1002, 1072]"
5253,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\ReplicationTaskProcessor.java,create replication instance of,private static  replication instance   (  instance replication task task )  {   replication instance builder instance builder = a replication instance (  )  ;  instance builder . with app name ( task . get app name (  )  )  ;  instance builder . with id ( task . get id (  )  )  ;   instance info instance info = task . get instance info (  )  ;  if  ( instance info  !  =  null )   {   string overridden status = task . get overridden status (  )   =  =  null  ?  null : task . get overridden status (  )  . name (  )  ;  instance builder . with overridden status ( overridden status )  ;  instance builder . with last dirty timestamp ( instance info . get last dirty timestamp (  )  )  ;  if  ( task . should replicate instance info (  )  )   {  instance builder . with instance info ( instance info )  ;   }   string instance status = instance info . get status (  )   =  =  null  ?  null : instance info . get status (  )  . name (  )  ;  instance builder . with status ( instance status )  ;   }  instance builder . with action ( task . get action (  )  )  ;  return instance builder . build (  )  ;   }  ,1110,4,of,4,[]
5254,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\ReplicationTaskProcessor.java,create replication list of,private  replication list   (  list <  replication task >  tasks )  {   replication list list = new  replication list (  )  ;  for  (   replication task task : tasks )   {  list . add replication instance ( create replication instance of (  (  instance replication task ) task )  )  ;   }  return list ;   }  ,309,4,create,1,[207]
5255,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\ReplicationTaskProcessor.java,create replication list of,private  replication list   (  list <  replication task >  tasks )  {   replication list list = new  replication list (  )  ;  for  (   replication task task : tasks )   {  list . add replication instance ( create replication instance of (  (  instance replication task ) task )  )  ;   }  return list ;   }  ,309,4,replication,2,"[9, 39, 72, 101, 136, 184, 214, 253]"
5256,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\ReplicationTaskProcessor.java,create replication list of,private  replication list   (  list <  replication task >  tasks )  {   replication list list = new  replication list (  )  ;  for  (   replication task task : tasks )   {  list . add replication instance ( create replication instance of (  (  instance replication task ) task )  )  ;   }  return list ;   }  ,309,4,list,3,"[21, 31, 84, 89, 113, 173, 297]"
5257,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\ReplicationTaskProcessor.java,create replication list of,private  replication list   (  list <  replication task >  tasks )  {   replication list list = new  replication list (  )  ;  for  (   replication task task : tasks )   {  list . add replication instance ( create replication instance of (  (  instance replication task ) task )  )  ;   }  return list ;   }  ,309,4,of,4,[235]
5258,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\ReplicationTaskProcessor.java,handle batch response,"private void   (  replication task task  replication instance response response )  {  int status code = response . get status code (  )  ;  if  ( is success ( status code )  )   {  task . handle success (  )  ;  return ;   }  try  {  task . handle failure ( response . get status code (  )  response . get response entity (  )  )  ;   }  catch  (   throwable e )   {  logger . error ( "" replication task  {  }  error handler failure"" task . get task name (  )  e )  ;   }   }  ",477,3,handle,1,"[188, 241, 417]"
5259,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\ReplicationTaskProcessor.java,handle batch response,"private void   (  replication task task  replication instance response response )  {  int status code = response . get status code (  )  ;  if  ( is success ( status code )  )   {  task . handle success (  )  ;  return ;   }  try  {  task . handle failure ( response . get status code (  )  response . get response entity (  )  )  ;   }  catch  (   throwable e )   {  logger . error ( "" replication task  {  }  error handler failure"" task . get task name (  )  e )  ;   }   }  ",477,3,batch,2,[]
5260,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\ReplicationTaskProcessor.java,handle batch response,"private void   (  replication task task  replication instance response response )  {  int status code = response . get status code (  )  ;  if  ( is success ( status code )  )   {  task . handle success (  )  ;  return ;   }  try  {  task . handle failure ( response . get status code (  )  response . get response entity (  )  )  ;   }  catch  (   throwable e )   {  logger . error ( "" replication task  {  }  error handler failure"" task . get task name (  )  e )  ;   }   }  ",477,3,response,3,"[62, 71, 104, 258, 291, 306]"
5261,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\ReplicationTaskProcessor.java,is network connect exception,private static boolean   (  throwable e )  {  do  {  if  ( io exception . class . is instance ( e )  )   {  return true ;   }  e = e . get cause (  )  ;   }  while  ( e  !  =  null )  ;  return false ;   }  ,207,4,is,1,[82]
5262,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\ReplicationTaskProcessor.java,is network connect exception,private static boolean   (  throwable e )  {  do  {  if  ( io exception . class . is instance ( e )  )   {  return true ;   }  e = e . get cause (  )  ;   }  while  ( e  !  =  null )  ;  return false ;   }  ,207,4,network,2,[]
5263,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\ReplicationTaskProcessor.java,is network connect exception,private static boolean   (  throwable e )  {  do  {  if  ( io exception . class . is instance ( e )  )   {  return true ;   }  e = e . get cause (  )  ;   }  while  ( e  !  =  null )  ;  return false ;   }  ,207,4,connect,3,[]
5264,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\ReplicationTaskProcessor.java,is network connect exception,private static boolean   (  throwable e )  {  do  {  if  ( io exception . class . is instance ( e )  )   {  return true ;   }  e = e . get cause (  )  ;   }  while  ( e  !  =  null )  ;  return false ;   }  ,207,4,exception,4,[62]
5265,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\ReplicationTaskProcessor.java,is success,private static boolean   ( int status code )  {  return status code  >  =  200 && status code  <  300 ;   }  ,109,2,is,1,[]
5266,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\ReplicationTaskProcessor.java,is success,private static boolean   ( int status code )  {  return status code  >  =  200 && status code  <  300 ;   }  ,109,2,success,2,[]
5267,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\ReplicationTaskProcessor.java,log network error sample,"private void   (  replication task task  throwable e )  {  long now =  system . current time millis (  )  ;  if  ( now  -  last network error time  >  10000 )   {  last network error time = now ;   string builder sb = new  string builder (  )  ;  sb . append ( "" network level connection to peer "" )  . append ( peer id )  ;  if  ( task  !  =  null )   {  sb . append ( "" for task "" )  . append ( task . get task name (  )  )  ;   }  sb . append ( "" ;  retrying after delay"" )  ;  logger . error ( sb . to string (  )  e )  ;   }   }  ",535,4,log,1,[481]
5268,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\ReplicationTaskProcessor.java,log network error sample,"private void   (  replication task task  throwable e )  {  long now =  system . current time millis (  )  ;  if  ( now  -  last network error time  >  10000 )   {  last network error time = now ;   string builder sb = new  string builder (  )  ;  sb . append ( "" network level connection to peer "" )  . append ( peer id )  ;  if  ( task  !  =  null )   {  sb . append ( "" for task "" )  . append ( task . get task name (  )  )  ;   }  sb . append ( "" ;  retrying after delay"" )  ;  logger . error ( sb . to string (  )  e )  ;   }   }  ",535,4,network,2,"[128, 169, 263]"
5269,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\ReplicationTaskProcessor.java,log network error sample,"private void   (  replication task task  throwable e )  {  long now =  system . current time millis (  )  ;  if  ( now  -  last network error time  >  10000 )   {  last network error time = now ;   string builder sb = new  string builder (  )  ;  sb . append ( "" network level connection to peer "" )  . append ( peer id )  ;  if  ( task  !  =  null )   {  sb . append ( "" for task "" )  . append ( task . get task name (  )  )  ;   }  sb . append ( "" ;  retrying after delay"" )  ;  logger . error ( sb . to string (  )  e )  ;   }   }  ",535,4,error,3,"[136, 177, 490]"
5270,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\ReplicationTaskProcessor.java,log network error sample,"private void   (  replication task task  throwable e )  {  long now =  system . current time millis (  )  ;  if  ( now  -  last network error time  >  10000 )   {  last network error time = now ;   string builder sb = new  string builder (  )  ;  sb . append ( "" network level connection to peer "" )  . append ( peer id )  ;  if  ( task  !  =  null )   {  sb . append ( "" for task "" )  . append ( task . get task name (  )  )  ;   }  sb . append ( "" ;  retrying after delay"" )  ;  logger . error ( sb . to string (  )  e )  ;   }   }  ",535,4,sample,4,[]
5271,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\ReplicationTaskProcessor.java,maybe read time out,private static boolean   (  throwable e )  {  do  {  if  ( io exception . class . is instance ( e )  )   {   string message = e . get message (  )  . to lower case (  )  ;   matcher matcher = read   time   out   pattern . matcher ( message )  ;  if  ( matcher . find (  )  )   {  return true ;   }   }  e = e . get cause (  )  ;   }  while  ( e  !  =  null )  ;  return false ;   }  ,383,4,maybe,1,[]
5272,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\ReplicationTaskProcessor.java,maybe read time out,private static boolean   (  throwable e )  {  do  {  if  ( io exception . class . is instance ( e )  )   {   string message = e . get message (  )  . to lower case (  )  ;   matcher matcher = read   time   out   pattern . matcher ( message )  ;  if  ( matcher . find (  )  )   {  return true ;   }   }  e = e . get cause (  )  ;   }  while  ( e  !  =  null )  ;  return false ;   }  ,383,4,read,2,[192]
5273,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\ReplicationTaskProcessor.java,maybe read time out,private static boolean   (  throwable e )  {  do  {  if  ( io exception . class . is instance ( e )  )   {   string message = e . get message (  )  . to lower case (  )  ;   matcher matcher = read   time   out   pattern . matcher ( message )  ;  if  ( matcher . find (  )  )   {  return true ;   }   }  e = e . get cause (  )  ;   }  while  ( e  !  =  null )  ;  return false ;   }  ,383,4,time,3,[199]
5274,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\ReplicationTaskProcessor.java,maybe read time out,private static boolean   (  throwable e )  {  do  {  if  ( io exception . class . is instance ( e )  )   {   string message = e . get message (  )  . to lower case (  )  ;   matcher matcher = read   time   out   pattern . matcher ( message )  ;  if  ( matcher . find (  )  )   {  return true ;   }   }  e = e . get cause (  )  ;   }  while  ( e  !  =  null )  ;  return false ;   }  ,383,4,out,4,[206]
5275,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\ReplicationTaskProcessor.java,process,@ override public  processing result   (  list <  replication task >  tasks )  {   replication list list = create replication list of ( tasks )  ;  try  {   eureka http response <  replication list response >  response = replication client . submit batch ,255,1,process,1,[19]
5276,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java, default eureka server config,public   (  string namespace )  {  this . namespace = namespace ;  init (  )  ;   }  ,85,4,default,1,[]
5277,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java, default eureka server config,public   (  string namespace )  {  this . namespace = namespace ;  init (  )  ;   }  ,85,4,eureka,2,[]
5278,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java, default eureka server config,public   (  string namespace )  {  this . namespace = namespace ;  init (  )  ;   }  ,85,4,server,3,[]
5279,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java, default eureka server config,public   (  string namespace )  {  this . namespace = namespace ;  init (  )  ;   }  ,85,4,config,4,[]
5280,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,disable transparent fallback to other region,"@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  ""remote region . disable . transparent . fallback"" false )  . get (  )  ;   }  ",178,6,disable,1,[116]
5281,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,disable transparent fallback to other region,"@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  ""remote region . disable . transparent . fallback"" false )  . get (  )  ;   }  ",178,6,transparent,2,[126]
5282,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,disable transparent fallback to other region,"@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  ""remote region . disable . transparent . fallback"" false )  . get (  )  ;   }  ",178,6,fallback,3,[140]
5283,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,disable transparent fallback to other region,"@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  ""remote region . disable . transparent . fallback"" false )  . get (  )  ;   }  ",178,6,to,4,[]
5284,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,disable transparent fallback to other region,"@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  ""remote region . disable . transparent . fallback"" false )  . get (  )  ;   }  ",178,6,other,5,[]
5285,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,disable transparent fallback to other region,"@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  ""remote region . disable . transparent . fallback"" false )  . get (  )  ;   }  ",178,6,region,6,[107]
5286,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,getasg cache expiry timeout ms,"@ override public long   (  )  {  return config instance . get int property ( namespace  +  ""asg cache expiry timeout ms""  ( 10 * 60 * 1000 )  )  . get (  )  ;   }  ",165,5,getasg,1,[]
5287,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,getasg cache expiry timeout ms,"@ override public long   (  )  {  return config instance . get int property ( namespace  +  ""asg cache expiry timeout ms""  ( 10 * 60 * 1000 )  )  . get (  )  ;   }  ",165,5,cache,2,[97]
5288,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,getasg cache expiry timeout ms,"@ override public long   (  )  {  return config instance . get int property ( namespace  +  ""asg cache expiry timeout ms""  ( 10 * 60 * 1000 )  )  . get (  )  ;   }  ",165,5,expiry,3,[103]
5289,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,getasg cache expiry timeout ms,"@ override public long   (  )  {  return config instance . get int property ( namespace  +  ""asg cache expiry timeout ms""  ( 10 * 60 * 1000 )  )  . get (  )  ;   }  ",165,5,timeout,4,[110]
5290,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,getasg cache expiry timeout ms,"@ override public long   (  )  {  return config instance . get int property ( namespace  +  ""asg cache expiry timeout ms""  ( 10 * 60 * 1000 )  )  . get (  )  ;   }  ",165,5,ms,5,[118]
5291,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,getasg query timeout ms,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""asg query timeout ms"" 300 )  . get (  )  ;   }  ",140,4,getasg,1,[]
5292,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,getasg query timeout ms,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""asg query timeout ms"" 300 )  . get (  )  ;   }  ",140,4,query,2,[96]
5293,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,getasg query timeout ms,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""asg query timeout ms"" 300 )  . get (  )  ;   }  ",140,4,timeout,3,[102]
5294,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,getasg query timeout ms,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""asg query timeout ms"" 300 )  . get (  )  ;   }  ",140,4,ms,4,[110]
5295,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,getasg update interval ms,"@ override public long   (  )  {  return config instance . get int property ( namespace  +  ""asg update interval ms""  ( 5 * 60 * 1000 )  )  . get (  )  ;   }  ",159,4,getasg,1,[]
5296,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,getasg update interval ms,"@ override public long   (  )  {  return config instance . get int property ( namespace  +  ""asg update interval ms""  ( 5 * 60 * 1000 )  )  . get (  )  ;   }  ",159,4,update,2,[97]
5297,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,getasg update interval ms,"@ override public long   (  )  {  return config instance . get int property ( namespace  +  ""asg update interval ms""  ( 5 * 60 * 1000 )  )  . get (  )  ;   }  ",159,4,interval,3,[104]
5298,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,getasg update interval ms,"@ override public long   (  )  {  return config instance . get int property ( namespace  +  ""asg update interval ms""  ( 5 * 60 * 1000 )  )  . get (  )  ;   }  ",159,4,ms,4,[113]
5299,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,getaws access id,"@ override public  string   (  )  {   string aws access id = config instance . get string property ( namespace  +  ""aws access id"" null )  . get (  )  ;  if  ( null  !  =  aws access id )   {  return aws access id . trim (  )  ;   }  else  {  return null ",255,3,getaws,1,[]
5300,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,getaws access id,"@ override public  string   (  )  {   string aws access id = config instance . get string property ( namespace  +  ""aws access id"" null )  . get (  )  ;  if  ( null  !  =  aws access id )   {  return aws access id . trim (  )  ;   }  else  {  return null ",255,3,access,2,"[49, 120, 176, 204]"
5301,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,getaws access id,"@ override public  string   (  )  {   string aws access id = config instance . get string property ( namespace  +  ""aws access id"" null )  . get (  )  ;  if  ( null  !  =  aws access id )   {  return aws access id . trim (  )  ;   }  else  {  return null ",255,3,id,3,"[7, 56, 127, 183, 211]"
5302,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,getaws secret key,"@ override public  string   (  )  {   string aws secret key = config instance . get string property ( namespace  +  ""aws secret key"" null )  . get (  )  ;  if  ( null  !  =  aws secret key )   {  return aws secret key . trim (  )  ;   }  else  {  return n",255,3,getaws,1,[]
5303,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,getaws secret key,"@ override public  string   (  )  {   string aws secret key = config instance . get string property ( namespace  +  ""aws secret key"" null )  . get (  )  ;  if  ( null  !  =  aws secret key )   {  return aws secret key . trim (  )  ;   }  else  {  return n",255,3,secret,2,"[49, 121, 178, 207]"
5304,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,getaws secret key,"@ override public  string   (  )  {   string aws secret key = config instance . get string property ( namespace  +  ""aws secret key"" null )  . get (  )  ;  if  ( null  !  =  aws secret key )   {  return aws secret key . trim (  )  ;   }  else  {  return n",255,3,key,3,"[56, 128, 185, 214]"
5305,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get binding strategy,"@ override public  aws binding strategy   (  )  {  return  aws binding strategy . value of ( config instance . get string property ( namespace  +  ""aws binding strategy""  aws binding strategy . eip . name (  )  )  . get (  )  . to upper case (  )  )  ;   ",255,3,get,1,"[111, 216]"
5306,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get binding strategy,"@ override public  aws binding strategy   (  )  {  return  aws binding strategy . value of ( config instance . get string property ( namespace  +  ""aws binding strategy""  aws binding strategy . eip . name (  )  )  . get (  )  . to upper case (  )  )  ;   ",255,3,binding,2,"[23, 63, 152, 175]"
5307,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get binding strategy,"@ override public  aws binding strategy   (  )  {  return  aws binding strategy . value of ( config instance . get string property ( namespace  +  ""aws binding strategy""  aws binding strategy . eip . name (  )  )  . get (  )  . to upper case (  )  )  ;   ",255,3,strategy,3,"[31, 71, 160, 183]"
5308,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get delta retention timer interval in ms,"@ override public long   (  )  {  return config instance . get long property ( namespace  +  ""delta retention timer interval in ms""  ( 30 * 1000 )  )  . get (  )  ;   }  ",170,7,get,1,"[59, 153]"
5309,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get delta retention timer interval in ms,"@ override public long   (  )  {  return config instance . get long property ( namespace  +  ""delta retention timer interval in ms""  ( 30 * 1000 )  )  . get (  )  ;   }  ",170,7,delta,2,[94]
5310,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get delta retention timer interval in ms,"@ override public long   (  )  {  return config instance . get long property ( namespace  +  ""delta retention timer interval in ms""  ( 30 * 1000 )  )  . get (  )  ;   }  ",170,7,retention,3,[100]
5311,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get delta retention timer interval in ms,"@ override public long   (  )  {  return config instance . get long property ( namespace  +  ""delta retention timer interval in ms""  ( 30 * 1000 )  )  . get (  )  ;   }  ",170,7,timer,4,[110]
5312,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get delta retention timer interval in ms,"@ override public long   (  )  {  return config instance . get long property ( namespace  +  ""delta retention timer interval in ms""  ( 30 * 1000 )  )  . get (  )  ;   }  ",170,7,interval,5,[116]
5313,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get delta retention timer interval in ms,"@ override public long   (  )  {  return config instance . get long property ( namespace  +  ""delta retention timer interval in ms""  ( 30 * 1000 )  )  . get (  )  ;   }  ",170,7,in,6,"[48, 116, 125]"
5314,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get delta retention timer interval in ms,"@ override public long   (  )  {  return config instance . get long property ( namespace  +  ""delta retention timer interval in ms""  ( 30 * 1000 )  )  . get (  )  ;   }  ",170,7,ms,7,[128]
5315,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,geteip bind rebind retries,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""eip bind rebind retries"" 3 )  . get (  )  ;   }  ",141,4,geteip,1,[]
5316,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,geteip bind rebind retries,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""eip bind rebind retries"" 3 )  . get (  )  ;   }  ",141,4,bind,2,"[96, 103]"
5317,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,geteip bind rebind retries,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""eip bind rebind retries"" 3 )  . get (  )  ;   }  ",141,4,rebind,3,[101]
5318,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,geteip bind rebind retries,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""eip bind rebind retries"" 3 )  . get (  )  ;   }  ",141,4,retries,4,[108]
5319,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,geteip binding retry interval ms,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""eip bind rebind retry interval ms""  ( 5 * 60 * 1000 )  )  . get (  )  ;   }  ",169,5,geteip,1,[]
5320,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,geteip binding retry interval ms,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""eip bind rebind retry interval ms""  ( 5 * 60 * 1000 )  )  . get (  )  ;   }  ",169,5,binding,2,[]
5321,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,geteip binding retry interval ms,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""eip bind rebind retry interval ms""  ( 5 * 60 * 1000 )  )  . get (  )  ;   }  ",169,5,retry,3,[108]
5322,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,geteip binding retry interval ms,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""eip bind rebind retry interval ms""  ( 5 * 60 * 1000 )  )  . get (  )  ;   }  ",169,5,interval,4,[114]
5323,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,geteip binding retry interval ms,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""eip bind rebind retry interval ms""  ( 5 * 60 * 1000 )  )  . get (  )  ;   }  ",169,5,ms,5,[123]
5324,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,geteip binding retry interval ms when unbound,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""eip bind rebind retry interval ms when unbound""  ( 1 * 60 * 1000 )  )  . get (  )  ;   }  ",182,7,geteip,1,[]
5325,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,geteip binding retry interval ms when unbound,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""eip bind rebind retry interval ms when unbound""  ( 1 * 60 * 1000 )  )  . get (  )  ;   }  ",182,7,binding,2,[]
5326,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,geteip binding retry interval ms when unbound,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""eip bind rebind retry interval ms when unbound""  ( 1 * 60 * 1000 )  )  . get (  )  ;   }  ",182,7,retry,3,[108]
5327,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,geteip binding retry interval ms when unbound,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""eip bind rebind retry interval ms when unbound""  ( 1 * 60 * 1000 )  )  . get (  )  ;   }  ",182,7,interval,4,[114]
5328,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,geteip binding retry interval ms when unbound,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""eip bind rebind retry interval ms when unbound""  ( 1 * 60 * 1000 )  )  . get (  )  ;   }  ",182,7,ms,5,[123]
5329,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,geteip binding retry interval ms when unbound,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""eip bind rebind retry interval ms when unbound""  ( 1 * 60 * 1000 )  )  . get (  )  ;   }  ",182,7,when,6,[126]
5330,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,geteip binding retry interval ms when unbound,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""eip bind rebind retry interval ms when unbound""  ( 1 * 60 * 1000 )  )  . get (  )  ;   }  ",182,7,unbound,7,[131]
5331,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get eviction interval timer in ms,"@ override public long   (  )  {  return config instance . get long property ( namespace  +  ""eviction interval timer in ms""  ( 60 * 1000 )  )  . get (  )  ;   }  ",163,6,get,1,"[59, 146]"
5332,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get eviction interval timer in ms,"@ override public long   (  )  {  return config instance . get long property ( namespace  +  ""eviction interval timer in ms""  ( 60 * 1000 )  )  . get (  )  ;   }  ",163,6,eviction,2,[94]
5333,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get eviction interval timer in ms,"@ override public long   (  )  {  return config instance . get long property ( namespace  +  ""eviction interval timer in ms""  ( 60 * 1000 )  )  . get (  )  ;   }  ",163,6,interval,3,[103]
5334,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get eviction interval timer in ms,"@ override public long   (  )  {  return config instance . get long property ( namespace  +  ""eviction interval timer in ms""  ( 60 * 1000 )  )  . get (  )  ;   }  ",163,6,timer,4,[112]
5335,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get eviction interval timer in ms,"@ override public long   (  )  {  return config instance . get long property ( namespace  +  ""eviction interval timer in ms""  ( 60 * 1000 )  )  . get (  )  ;   }  ",163,6,in,5,"[48, 103, 118]"
5336,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get eviction interval timer in ms,"@ override public long   (  )  {  return config instance . get long property ( namespace  +  ""eviction interval timer in ms""  ( 60 * 1000 )  )  . get (  )  ;   }  ",163,6,ms,6,[121]
5337,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get experimental,"@ override public  string   (  string name )  {  return config instance . get string property ( namespace  +  ""experimental . ""  +  name null )  . get (  )  ;   }  ",164,2,get,1,"[74, 147]"
5338,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get experimental,"@ override public  string   (  string name )  {  return config instance . get string property ( namespace  +  ""experimental . ""  +  name null )  . get (  )  ;   }  ",164,2,experimental,2,[111]
5339,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get health status min number of available peers,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""min available instances for peer replication""  - 1 )  . get (  )  ;   }  ",165,8,get,1,"[58, 148]"
5340,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get health status min number of available peers,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""min available instances for peer replication""  - 1 )  . get (  )  ;   }  ",165,8,health,2,[]
5341,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get health status min number of available peers,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""min available instances for peer replication""  - 1 )  . get (  )  ;   }  ",165,8,status,3,[]
5342,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get health status min number of available peers,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""min available instances for peer replication""  - 1 )  . get (  )  ;   }  ",165,8,min,4,[92]
5343,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get health status min number of available peers,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""min available instances for peer replication""  - 1 )  . get (  )  ;   }  ",165,8,number,5,[]
5344,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get health status min number of available peers,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""min available instances for peer replication""  - 1 )  . get (  )  ;   }  ",165,8,of,6,[]
5345,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get health status min number of available peers,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""min available instances for peer replication""  - 1 )  . get (  )  ;   }  ",165,8,available,7,[96]
5346,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get health status min number of available peers,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""min available instances for peer replication""  - 1 )  . get (  )  ;   }  ",165,8,peers,8,[]
5347,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get json codec name,"@ override public  string   (  )  {  return config instance . get string property ( namespace  +  ""json codec name"" null )  . get (  )  ;   }  ",143,4,get,1,"[62, 126]"
5348,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get json codec name,"@ override public  string   (  )  {  return config instance . get string property ( namespace  +  ""json codec name"" null )  . get (  )  ;   }  ",143,4,json,2,[99]
5349,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get json codec name,"@ override public  string   (  )  {  return config instance . get string property ( namespace  +  ""json codec name"" null )  . get (  )  ;   }  ",143,4,codec,3,[104]
5350,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get json codec name,"@ override public  string   (  )  {  return config instance . get string property ( namespace  +  ""json codec name"" null )  . get (  )  ;   }  ",143,4,name,4,"[84, 110]"
5351,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get list auto scaling groups role name,@ override public  string   (  )  {  return list auto scaling groups role name . get (  )  ;   }  ,98,7,get,1,[81]
5352,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get list auto scaling groups role name,@ override public  string   (  )  {  return list auto scaling groups role name . get (  )  ;   }  ,98,7,list,2,[44]
5353,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get list auto scaling groups role name,@ override public  string   (  )  {  return list auto scaling groups role name . get (  )  ;   }  ,98,7,auto,3,[49]
5354,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get list auto scaling groups role name,@ override public  string   (  )  {  return list auto scaling groups role name . get (  )  ;   }  ,98,7,scaling,4,[54]
5355,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get list auto scaling groups role name,@ override public  string   (  )  {  return list auto scaling groups role name . get (  )  ;   }  ,98,7,groups,5,[62]
5356,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get list auto scaling groups role name,@ override public  string   (  )  {  return list auto scaling groups role name . get (  )  ;   }  ,98,7,role,6,[69]
5357,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get list auto scaling groups role name,@ override public  string   (  )  {  return list auto scaling groups role name . get (  )  ;   }  ,98,7,name,7,[74]
5358,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get max elements in peer replication pool,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""max elements in peer replication pool"" 10000 )  . get (  )  ;   }  ",159,7,get,1,"[58, 142]"
5359,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get max elements in peer replication pool,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""max elements in peer replication pool"" 10000 )  . get (  )  ;   }  ",159,7,max,2,[92]
5360,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get max elements in peer replication pool,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""max elements in peer replication pool"" 10000 )  . get (  )  ;   }  ",159,7,elements,3,[96]
5361,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get max elements in peer replication pool,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""max elements in peer replication pool"" 10000 )  . get (  )  ;   }  ",159,7,in,4,"[18, 47, 62, 105]"
5362,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get max elements in peer replication pool,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""max elements in peer replication pool"" 10000 )  . get (  )  ;   }  ",159,7,peer,5,[108]
5363,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get max elements in peer replication pool,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""max elements in peer replication pool"" 10000 )  . get (  )  ;   }  ",159,7,replication,6,[113]
5364,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get max elements in peer replication pool,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""max elements in peer replication pool"" 10000 )  . get (  )  ;   }  ",159,7,pool,7,[125]
5365,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get max elements in status replication pool,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""max elements in status replication pool"" 10000 )  . get (  )  ;   }  ",161,7,get,1,"[58, 144]"
5366,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get max elements in status replication pool,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""max elements in status replication pool"" 10000 )  . get (  )  ;   }  ",161,7,max,2,[92]
5367,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get max elements in status replication pool,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""max elements in status replication pool"" 10000 )  . get (  )  ;   }  ",161,7,elements,3,[96]
5368,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get max elements in status replication pool,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""max elements in status replication pool"" 10000 )  . get (  )  ;   }  ",161,7,in,4,"[18, 47, 62, 105]"
5369,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get max elements in status replication pool,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""max elements in status replication pool"" 10000 )  . get (  )  ;   }  ",161,7,status,5,[108]
5370,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get max elements in status replication pool,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""max elements in status replication pool"" 10000 )  . get (  )  ;   }  ",161,7,replication,6,[115]
5371,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get max elements in status replication pool,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""max elements in status replication pool"" 10000 )  . get (  )  ;   }  ",161,7,pool,7,[127]
5372,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get max idle thread age in minutes for peer replication,"@ override public long   (  )  {  return config instance . get int property ( namespace  +  ""max idle thread age in minutes for peer replication"" 15 )  . get (  )  ;   }  ",171,10,get,1,"[59, 154]"
5373,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get max idle thread age in minutes for peer replication,"@ override public long   (  )  {  return config instance . get int property ( namespace  +  ""max idle thread age in minutes for peer replication"" 15 )  . get (  )  ;   }  ",171,10,max,2,[93]
5374,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get max idle thread age in minutes for peer replication,"@ override public long   (  )  {  return config instance . get int property ( namespace  +  ""max idle thread age in minutes for peer replication"" 15 )  . get (  )  ;   }  ",171,10,idle,3,[97]
5375,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get max idle thread age in minutes for peer replication,"@ override public long   (  )  {  return config instance . get int property ( namespace  +  ""max idle thread age in minutes for peer replication"" 15 )  . get (  )  ;   }  ",171,10,thread,4,[102]
5376,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get max idle thread age in minutes for peer replication,"@ override public long   (  )  {  return config instance . get int property ( namespace  +  ""max idle thread age in minutes for peer replication"" 15 )  . get (  )  ;   }  ",171,10,age,5,[109]
5377,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get max idle thread age in minutes for peer replication,"@ override public long   (  )  {  return config instance . get int property ( namespace  +  ""max idle thread age in minutes for peer replication"" 15 )  . get (  )  ;   }  ",171,10,in,6,"[48, 63, 113, 117]"
5378,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get max idle thread age in minutes for peer replication,"@ override public long   (  )  {  return config instance . get int property ( namespace  +  ""max idle thread age in minutes for peer replication"" 15 )  . get (  )  ;   }  ",171,10,minutes,7,[116]
5379,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get max idle thread age in minutes for peer replication,"@ override public long   (  )  {  return config instance . get int property ( namespace  +  ""max idle thread age in minutes for peer replication"" 15 )  . get (  )  ;   }  ",171,10,for,8,[124]
5380,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get max idle thread age in minutes for peer replication,"@ override public long   (  )  {  return config instance . get int property ( namespace  +  ""max idle thread age in minutes for peer replication"" 15 )  . get (  )  ;   }  ",171,10,peer,9,[128]
5381,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get max idle thread age in minutes for peer replication,"@ override public long   (  )  {  return config instance . get int property ( namespace  +  ""max idle thread age in minutes for peer replication"" 15 )  . get (  )  ;   }  ",171,10,replication,10,[133]
5382,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get max idle thread in minutes age for status replication,"@ override public long   (  )  {  return config instance . get long property ( namespace  +  ""max idle thread age in minutes for status replication"" 10 )  . get (  )  ;   }  ",174,10,get,1,"[59, 157]"
5383,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get max idle thread in minutes age for status replication,"@ override public long   (  )  {  return config instance . get long property ( namespace  +  ""max idle thread age in minutes for status replication"" 10 )  . get (  )  ;   }  ",174,10,max,2,[94]
5384,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get max idle thread in minutes age for status replication,"@ override public long   (  )  {  return config instance . get long property ( namespace  +  ""max idle thread age in minutes for status replication"" 10 )  . get (  )  ;   }  ",174,10,idle,3,[98]
5385,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get max idle thread in minutes age for status replication,"@ override public long   (  )  {  return config instance . get long property ( namespace  +  ""max idle thread age in minutes for status replication"" 10 )  . get (  )  ;   }  ",174,10,thread,4,[103]
5386,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get max idle thread in minutes age for status replication,"@ override public long   (  )  {  return config instance . get long property ( namespace  +  ""max idle thread age in minutes for status replication"" 10 )  . get (  )  ;   }  ",174,10,in,5,"[48, 114, 118]"
5387,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get max idle thread in minutes age for status replication,"@ override public long   (  )  {  return config instance . get long property ( namespace  +  ""max idle thread age in minutes for status replication"" 10 )  . get (  )  ;   }  ",174,10,minutes,6,[117]
5388,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get max idle thread in minutes age for status replication,"@ override public long   (  )  {  return config instance . get long property ( namespace  +  ""max idle thread age in minutes for status replication"" 10 )  . get (  )  ;   }  ",174,10,age,7,[110]
5389,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get max idle thread in minutes age for status replication,"@ override public long   (  )  {  return config instance . get long property ( namespace  +  ""max idle thread age in minutes for status replication"" 10 )  . get (  )  ;   }  ",174,10,for,8,[125]
5390,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get max idle thread in minutes age for status replication,"@ override public long   (  )  {  return config instance . get long property ( namespace  +  ""max idle thread age in minutes for status replication"" 10 )  . get (  )  ;   }  ",174,10,status,9,[129]
5391,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get max idle thread in minutes age for status replication,"@ override public long   (  )  {  return config instance . get long property ( namespace  +  ""max idle thread age in minutes for status replication"" 10 )  . get (  )  ;   }  ",174,10,replication,10,[136]
5392,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get max threads for peer replication,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""max threads for peer replication"" 20 )  . get (  )  ;   }  ",151,6,get,1,"[58, 134]"
5393,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get max threads for peer replication,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""max threads for peer replication"" 20 )  . get (  )  ;   }  ",151,6,max,2,[92]
5394,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get max threads for peer replication,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""max threads for peer replication"" 20 )  . get (  )  ;   }  ",151,6,threads,3,[96]
5395,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get max threads for peer replication,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""max threads for peer replication"" 20 )  . get (  )  ;   }  ",151,6,for,4,[104]
5396,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get max threads for peer replication,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""max threads for peer replication"" 20 )  . get (  )  ;   }  ",151,6,peer,5,[108]
5397,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get max threads for peer replication,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""max threads for peer replication"" 20 )  . get (  )  ;   }  ",151,6,replication,6,[113]
5398,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get max threads for status replication,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""max threads for status replication"" 1 )  . get (  )  ;   }  ",152,6,get,1,"[58, 135]"
5399,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get max threads for status replication,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""max threads for status replication"" 1 )  . get (  )  ;   }  ",152,6,max,2,[92]
5400,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get max threads for status replication,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""max threads for status replication"" 1 )  . get (  )  ;   }  ",152,6,threads,3,[96]
5401,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get max threads for status replication,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""max threads for status replication"" 1 )  . get (  )  ;   }  ",152,6,for,4,[104]
5402,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get max threads for status replication,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""max threads for status replication"" 1 )  . get (  )  ;   }  ",152,6,status,5,[108]
5403,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get max threads for status replication,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""max threads for status replication"" 1 )  . get (  )  ;   }  ",152,6,replication,6,[115]
5404,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get max time for replication,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""max time for replication"" time   to   wait   for   replication )  . get (  )  ;   }  ",177,5,get,1,"[58, 160]"
5405,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get max time for replication,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""max time for replication"" time   to   wait   for   replication )  . get (  )  ;   }  ",177,5,max,2,[92]
5406,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get max time for replication,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""max time for replication"" time   to   wait   for   replication )  . get (  )  ;   }  ",177,5,time,3,"[96, 118]"
5407,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get max time for replication,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""max time for replication"" time   to   wait   for   replication )  . get (  )  ;   }  ",177,5,for,4,"[101, 137]"
5408,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get max time for replication,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""max time for replication"" time   to   wait   for   replication )  . get (  )  ;   }  ",177,5,replication,5,"[105, 143]"
5409,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get min threads for peer replication,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""min threads for peer replication"" 5 )  . get (  )  ;   }  ",150,6,get,1,"[58, 133]"
5410,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get min threads for peer replication,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""min threads for peer replication"" 5 )  . get (  )  ;   }  ",150,6,min,2,[92]
5411,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get min threads for peer replication,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""min threads for peer replication"" 5 )  . get (  )  ;   }  ",150,6,threads,3,[96]
5412,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get min threads for peer replication,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""min threads for peer replication"" 5 )  . get (  )  ;   }  ",150,6,for,4,[104]
5413,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get min threads for peer replication,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""min threads for peer replication"" 5 )  . get (  )  ;   }  ",150,6,peer,5,[108]
5414,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get min threads for peer replication,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""min threads for peer replication"" 5 )  . get (  )  ;   }  ",150,6,replication,6,[113]
5415,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get min threads for status replication,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""min threads for status replication"" 1 )  . get (  )  ;   }  ",152,6,get,1,"[58, 135]"
5416,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get min threads for status replication,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""min threads for status replication"" 1 )  . get (  )  ;   }  ",152,6,min,2,[92]
5417,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get min threads for status replication,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""min threads for status replication"" 1 )  . get (  )  ;   }  ",152,6,threads,3,[96]
5418,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get min threads for status replication,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""min threads for status replication"" 1 )  . get (  )  ;   }  ",152,6,for,4,[104]
5419,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get min threads for status replication,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""min threads for status replication"" 1 )  . get (  )  ;   }  ",152,6,status,5,[108]
5420,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get min threads for status replication,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""min threads for status replication"" 1 )  . get (  )  ;   }  ",152,6,replication,6,[115]
5421,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get number of replication retries,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""number of replication retries"" 5 )  . get (  )  ;   }  ",147,5,get,1,"[58, 130]"
5422,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get number of replication retries,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""number of replication retries"" 5 )  . get (  )  ;   }  ",147,5,number,2,[92]
5423,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get number of replication retries,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""number of replication retries"" 5 )  . get (  )  ;   }  ",147,5,of,3,[99]
5424,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get number of replication retries,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""number of replication retries"" 5 )  . get (  )  ;   }  ",147,5,replication,4,[102]
5425,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get number of replication retries,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""number of replication retries"" 5 )  . get (  )  ;   }  ",147,5,retries,5,[114]
5426,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get peer eureka nodes update interval ms,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""peer eureka nodes update interval ms""  ( 10 * 60 * 1000 )  )  . get (  )  ;   }  ",173,7,get,1,"[58, 156]"
5427,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get peer eureka nodes update interval ms,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""peer eureka nodes update interval ms""  ( 10 * 60 * 1000 )  )  . get (  )  ;   }  ",173,7,peer,2,[92]
5428,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get peer eureka nodes update interval ms,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""peer eureka nodes update interval ms""  ( 10 * 60 * 1000 )  )  . get (  )  ;   }  ",173,7,eureka,3,[97]
5429,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get peer eureka nodes update interval ms,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""peer eureka nodes update interval ms""  ( 10 * 60 * 1000 )  )  . get (  )  ;   }  ",173,7,nodes,4,[104]
5430,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get peer eureka nodes update interval ms,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""peer eureka nodes update interval ms""  ( 10 * 60 * 1000 )  )  . get (  )  ;   }  ",173,7,update,5,[110]
5431,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get peer eureka nodes update interval ms,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""peer eureka nodes update interval ms""  ( 10 * 60 * 1000 )  )  . get (  )  ;   }  ",173,7,interval,6,[117]
5432,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get peer eureka nodes update interval ms,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""peer eureka nodes update interval ms""  ( 10 * 60 * 1000 )  )  . get (  )  ;   }  ",173,7,ms,7,[126]
5433,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get peer eureka status refresh time interval ms,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""peer eureka status refresh time interval ms""  ( 30 * 1000 )  )  . get (  )  ;   }  ",175,8,get,1,"[58, 158]"
5434,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get peer eureka status refresh time interval ms,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""peer eureka status refresh time interval ms""  ( 30 * 1000 )  )  . get (  )  ;   }  ",175,8,peer,2,[92]
5435,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get peer eureka status refresh time interval ms,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""peer eureka status refresh time interval ms""  ( 30 * 1000 )  )  . get (  )  ;   }  ",175,8,eureka,3,[97]
5436,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get peer eureka status refresh time interval ms,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""peer eureka status refresh time interval ms""  ( 30 * 1000 )  )  . get (  )  ;   }  ",175,8,status,4,[104]
5437,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get peer eureka status refresh time interval ms,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""peer eureka status refresh time interval ms""  ( 30 * 1000 )  )  . get (  )  ;   }  ",175,8,refresh,5,[111]
5438,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get peer eureka status refresh time interval ms,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""peer eureka status refresh time interval ms""  ( 30 * 1000 )  )  . get (  )  ;   }  ",175,8,time,6,[119]
5439,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get peer eureka status refresh time interval ms,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""peer eureka status refresh time interval ms""  ( 30 * 1000 )  )  . get (  )  ;   }  ",175,8,interval,7,[124]
5440,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get peer eureka status refresh time interval ms,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""peer eureka status refresh time interval ms""  ( 30 * 1000 )  )  . get (  )  ;   }  ",175,8,ms,8,[133]
5441,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get peer node connect timeout ms,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""peer node connect timeout ms"" 1000 )  . get (  )  ;   }  ",149,6,get,1,"[58, 132]"
5442,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get peer node connect timeout ms,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""peer node connect timeout ms"" 1000 )  . get (  )  ;   }  ",149,6,peer,2,[92]
5443,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get peer node connect timeout ms,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""peer node connect timeout ms"" 1000 )  . get (  )  ;   }  ",149,6,node,3,[97]
5444,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get peer node connect timeout ms,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""peer node connect timeout ms"" 1000 )  . get (  )  ;   }  ",149,6,connect,4,[102]
5445,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get peer node connect timeout ms,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""peer node connect timeout ms"" 1000 )  . get (  )  ;   }  ",149,6,timeout,5,[110]
5446,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get peer node connect timeout ms,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""peer node connect timeout ms"" 1000 )  . get (  )  ;   }  ",149,6,ms,6,[118]
5447,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get peer node connection idle timeout seconds,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""peer node connection idle timeout seconds"" 30 )  . get (  )  ;   }  ",160,7,get,1,"[58, 143]"
5448,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get peer node connection idle timeout seconds,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""peer node connection idle timeout seconds"" 30 )  . get (  )  ;   }  ",160,7,peer,2,[92]
5449,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get peer node connection idle timeout seconds,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""peer node connection idle timeout seconds"" 30 )  . get (  )  ;   }  ",160,7,node,3,[97]
5450,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get peer node connection idle timeout seconds,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""peer node connection idle timeout seconds"" 30 )  . get (  )  ;   }  ",160,7,connection,4,[102]
5451,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get peer node connection idle timeout seconds,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""peer node connection idle timeout seconds"" 30 )  . get (  )  ;   }  ",160,7,idle,5,[113]
5452,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get peer node connection idle timeout seconds,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""peer node connection idle timeout seconds"" 30 )  . get (  )  ;   }  ",160,7,timeout,6,[118]
5453,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get peer node connection idle timeout seconds,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""peer node connection idle timeout seconds"" 30 )  . get (  )  ;   }  ",160,7,seconds,7,[126]
5454,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get peer node read timeout ms,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""peer node read timeout ms"" 5000 )  . get (  )  ;   }  ",146,6,get,1,"[58, 129]"
5455,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get peer node read timeout ms,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""peer node read timeout ms"" 5000 )  . get (  )  ;   }  ",146,6,peer,2,[92]
5456,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get peer node read timeout ms,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""peer node read timeout ms"" 5000 )  . get (  )  ;   }  ",146,6,node,3,[97]
5457,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get peer node read timeout ms,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""peer node read timeout ms"" 5000 )  . get (  )  ;   }  ",146,6,read,4,[102]
5458,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get peer node read timeout ms,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""peer node read timeout ms"" 5000 )  . get (  )  ;   }  ",146,6,timeout,5,[107]
5459,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get peer node read timeout ms,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""peer node read timeout ms"" 5000 )  . get (  )  ;   }  ",146,6,ms,6,[115]
5460,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get peer node total connections,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""peer node total connections"" 1000 )  . get (  )  ;   }  ",148,5,get,1,"[58, 131]"
5461,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get peer node total connections,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""peer node total connections"" 1000 )  . get (  )  ;   }  ",148,5,peer,2,[92]
5462,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get peer node total connections,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""peer node total connections"" 1000 )  . get (  )  ;   }  ",148,5,node,3,[97]
5463,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get peer node total connections,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""peer node total connections"" 1000 )  . get (  )  ;   }  ",148,5,total,4,[102]
5464,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get peer node total connections,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""peer node total connections"" 1000 )  . get (  )  ;   }  ",148,5,connections,5,[108]
5465,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get peer node total connections per host,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""peer node total connections per host"" 500 )  . get (  )  ;   }  ",156,7,get,1,"[58, 139]"
5466,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get peer node total connections per host,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""peer node total connections per host"" 500 )  . get (  )  ;   }  ",156,7,peer,2,[92]
5467,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get peer node total connections per host,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""peer node total connections per host"" 500 )  . get (  )  ;   }  ",156,7,node,3,[97]
5468,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get peer node total connections per host,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""peer node total connections per host"" 500 )  . get (  )  ;   }  ",156,7,total,4,[102]
5469,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get peer node total connections per host,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""peer node total connections per host"" 500 )  . get (  )  ;   }  ",156,7,connections,5,[108]
5470,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get peer node total connections per host,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""peer node total connections per host"" 500 )  . get (  )  ;   }  ",156,7,per,6,"[69, 120]"
5471,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get peer node total connections per host,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""peer node total connections per host"" 500 )  . get (  )  ;   }  ",156,7,host,7,[124]
5472,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get rate limiter burst size,@ override public int   (  )  {  return rate limiter burst size . get (  )  ;   }  ,83,5,get,1,[66]
5473,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get rate limiter burst size,@ override public int   (  )  {  return rate limiter burst size . get (  )  ;   }  ,83,5,rate,2,[40]
5474,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get rate limiter burst size,@ override public int   (  )  {  return rate limiter burst size . get (  )  ;   }  ,83,5,limiter,3,[45]
5475,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get rate limiter burst size,@ override public int   (  )  {  return rate limiter burst size . get (  )  ;   }  ,83,5,burst,4,[53]
5476,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get rate limiter burst size,@ override public int   (  )  {  return rate limiter burst size . get (  )  ;   }  ,83,5,size,5,[59]
5477,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get rate limiter full fetch average rate,@ override public int   (  )  {  return rate limiter full fetch average rate . get (  )  ;   }  ,96,7,get,1,[79]
5478,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get rate limiter full fetch average rate,@ override public int   (  )  {  return rate limiter full fetch average rate . get (  )  ;   }  ,96,7,rate,2,"[40, 72]"
5479,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get rate limiter full fetch average rate,@ override public int   (  )  {  return rate limiter full fetch average rate . get (  )  ;   }  ,96,7,limiter,3,[45]
5480,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get rate limiter full fetch average rate,@ override public int   (  )  {  return rate limiter full fetch average rate . get (  )  ;   }  ,96,7,full,4,[53]
5481,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get rate limiter full fetch average rate,@ override public int   (  )  {  return rate limiter full fetch average rate . get (  )  ;   }  ,96,7,fetch,5,[58]
5482,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get rate limiter full fetch average rate,@ override public int   (  )  {  return rate limiter full fetch average rate . get (  )  ;   }  ,96,7,average,6,[64]
5483,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get rate limiter full fetch average rate,@ override public int   (  )  {  return rate limiter full fetch average rate . get (  )  ;   }  ,96,7,rate,7,"[40, 72]"
5484,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get rate limiter privileged clients,@ override public  set <  string >    (  )  {  return rate limiter privileged clients . get (  )  ;   }  ,105,5,get,1,[88]
5485,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get rate limiter privileged clients,@ override public  set <  string >    (  )  {  return rate limiter privileged clients . get (  )  ;   }  ,105,5,rate,2,[54]
5486,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get rate limiter privileged clients,@ override public  set <  string >    (  )  {  return rate limiter privileged clients . get (  )  ;   }  ,105,5,limiter,3,[59]
5487,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get rate limiter privileged clients,@ override public  set <  string >    (  )  {  return rate limiter privileged clients . get (  )  ;   }  ,105,5,privileged,4,[67]
5488,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get rate limiter privileged clients,@ override public  set <  string >    (  )  {  return rate limiter privileged clients . get (  )  ;   }  ,105,5,clients,5,[78]
5489,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get rate limiter registry fetch average rate,@ override public int   (  )  {  return rate limiter registry fetch average rate . get (  )  ;   }  ,100,7,get,1,[83]
5490,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get rate limiter registry fetch average rate,@ override public int   (  )  {  return rate limiter registry fetch average rate . get (  )  ;   }  ,100,7,rate,2,"[40, 76]"
5491,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get rate limiter registry fetch average rate,@ override public int   (  )  {  return rate limiter registry fetch average rate . get (  )  ;   }  ,100,7,limiter,3,[45]
5492,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get rate limiter registry fetch average rate,@ override public int   (  )  {  return rate limiter registry fetch average rate . get (  )  ;   }  ,100,7,registry,4,[53]
5493,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get rate limiter registry fetch average rate,@ override public int   (  )  {  return rate limiter registry fetch average rate . get (  )  ;   }  ,100,7,fetch,5,[62]
5494,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get rate limiter registry fetch average rate,@ override public int   (  )  {  return rate limiter registry fetch average rate . get (  )  ;   }  ,100,7,average,6,[68]
5495,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get rate limiter registry fetch average rate,@ override public int   (  )  {  return rate limiter registry fetch average rate . get (  )  ;   }  ,100,7,rate,7,"[40, 76]"
5496,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get registry sync retries,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""number registry sync retries"" 5 )  . get (  )  ;   }  ",146,4,get,1,"[58, 129]"
5497,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get registry sync retries,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""number registry sync retries"" 5 )  . get (  )  ;   }  ",146,4,registry,2,[99]
5498,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get registry sync retries,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""number registry sync retries"" 5 )  . get (  )  ;   }  ",146,4,sync,3,[108]
5499,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get registry sync retries,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""number registry sync retries"" 5 )  . get (  )  ;   }  ",146,4,retries,4,[113]
5500,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get registry sync retry wait ms,"@ override public long   (  )  {  return config instance . get int property ( namespace  +  ""registry sync retry wait ms"" 30 * 1000 )  . get (  )  ;   }  ",154,6,get,1,"[59, 137]"
5501,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get registry sync retry wait ms,"@ override public long   (  )  {  return config instance . get int property ( namespace  +  ""registry sync retry wait ms"" 30 * 1000 )  . get (  )  ;   }  ",154,6,registry,2,[93]
5502,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get registry sync retry wait ms,"@ override public long   (  )  {  return config instance . get int property ( namespace  +  ""registry sync retry wait ms"" 30 * 1000 )  . get (  )  ;   }  ",154,6,sync,3,[102]
5503,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get registry sync retry wait ms,"@ override public long   (  )  {  return config instance . get int property ( namespace  +  ""registry sync retry wait ms"" 30 * 1000 )  . get (  )  ;   }  ",154,6,retry,4,[107]
5504,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get registry sync retry wait ms,"@ override public long   (  )  {  return config instance . get int property ( namespace  +  ""registry sync retry wait ms"" 30 * 1000 )  . get (  )  ;   }  ",154,6,wait,5,[113]
5505,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get registry sync retry wait ms,"@ override public long   (  )  {  return config instance . get int property ( namespace  +  ""registry sync retry wait ms"" 30 * 1000 )  . get (  )  ;   }  ",154,6,ms,6,[118]
5506,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get remote region app whitelist,"@ nullable @ override public  set <  string >    ( @ nullable  string region name )  {  if  ( null  =  =  region name )   {  region name = ""global"" ;   }  else  {  region name = region name . trim (  )  . to lower case (  )  ;   }   dynamic string propert",255,5,get,1,[]
5507,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get remote region app whitelist,"@ nullable @ override public  set <  string >    ( @ nullable  string region name )  {  if  ( null  =  =  region name )   {  region name = ""global"" ;   }  else  {  region name = region name . trim (  )  . to lower case (  )  ;   }   dynamic string propert",255,5,remote,2,[]
5508,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get remote region app whitelist,"@ nullable @ override public  set <  string >    ( @ nullable  string region name )  {  if  ( null  =  =  region name )   {  region name = ""global"" ;   }  else  {  region name = region name . trim (  )  . to lower case (  )  ;   }   dynamic string propert",255,5,region,3,"[70, 106, 125, 164, 178]"
5509,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get remote region app whitelist,"@ nullable @ override public  set <  string >    ( @ nullable  string region name )  {  if  ( null  =  =  region name )   {  region name = ""global"" ;   }  else  {  region name = region name . trim (  )  . to lower case (  )  ;   }   dynamic string propert",255,5,app,4,[]
5510,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get remote region app whitelist,"@ nullable @ override public  set <  string >    ( @ nullable  string region name )  {  if  ( null  =  =  region name )   {  region name = ""global"" ;   }  else  {  region name = region name . trim (  )  . to lower case (  )  ;   }   dynamic string propert",255,5,whitelist,5,[]
5511,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get remote region connect timeout ms,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""remote region connect timeout ms"" 2000 )  . get (  )  ;   }  ",153,6,get,1,"[58, 136]"
5512,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get remote region connect timeout ms,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""remote region connect timeout ms"" 2000 )  . get (  )  ;   }  ",153,6,remote,2,[92]
5513,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get remote region connect timeout ms,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""remote region connect timeout ms"" 2000 )  . get (  )  ;   }  ",153,6,region,3,[99]
5514,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get remote region connect timeout ms,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""remote region connect timeout ms"" 2000 )  . get (  )  ;   }  ",153,6,connect,4,[106]
5515,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get remote region connect timeout ms,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""remote region connect timeout ms"" 2000 )  . get (  )  ;   }  ",153,6,timeout,5,[114]
5516,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get remote region connect timeout ms,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""remote region connect timeout ms"" 2000 )  . get (  )  ;   }  ",153,6,ms,6,[122]
5517,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get remote region connection idle timeout seconds,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""remote region connection idle timeout seconds"" 30 )  . get (  )  ;   }  ",164,7,get,1,"[58, 147]"
5518,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get remote region connection idle timeout seconds,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""remote region connection idle timeout seconds"" 30 )  . get (  )  ;   }  ",164,7,remote,2,[92]
5519,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get remote region connection idle timeout seconds,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""remote region connection idle timeout seconds"" 30 )  . get (  )  ;   }  ",164,7,region,3,[99]
5520,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get remote region connection idle timeout seconds,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""remote region connection idle timeout seconds"" 30 )  . get (  )  ;   }  ",164,7,connection,4,[106]
5521,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get remote region connection idle timeout seconds,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""remote region connection idle timeout seconds"" 30 )  . get (  )  ;   }  ",164,7,idle,5,[117]
5522,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get remote region connection idle timeout seconds,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""remote region connection idle timeout seconds"" 30 )  . get (  )  ;   }  ",164,7,timeout,6,[122]
5523,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get remote region connection idle timeout seconds,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""remote region connection idle timeout seconds"" 30 )  . get (  )  ;   }  ",164,7,seconds,7,[130]
5524,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get remote region fetch thread pool size,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""remote region . fetch thread pool size"" 20 )  . get (  )  ;   }  ",157,7,get,1,"[58, 140]"
5525,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get remote region fetch thread pool size,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""remote region . fetch thread pool size"" 20 )  . get (  )  ;   }  ",157,7,remote,2,[92]
5526,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get remote region fetch thread pool size,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""remote region . fetch thread pool size"" 20 )  . get (  )  ;   }  ",157,7,region,3,[99]
5527,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get remote region fetch thread pool size,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""remote region . fetch thread pool size"" 20 )  . get (  )  ;   }  ",157,7,fetch,4,[108]
5528,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get remote region fetch thread pool size,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""remote region . fetch thread pool size"" 20 )  . get (  )  ;   }  ",157,7,thread,5,[114]
5529,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get remote region fetch thread pool size,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""remote region . fetch thread pool size"" 20 )  . get (  )  ;   }  ",157,7,pool,6,[121]
5530,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get remote region fetch thread pool size,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""remote region . fetch thread pool size"" 20 )  . get (  )  ;   }  ",157,7,size,7,[126]
5531,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get remote region read timeout ms,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""remote region read timeout ms"" 5000 )  . get (  )  ;   }  ",150,6,get,1,"[58, 133]"
5532,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get remote region read timeout ms,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""remote region read timeout ms"" 5000 )  . get (  )  ;   }  ",150,6,remote,2,[92]
5533,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get remote region read timeout ms,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""remote region read timeout ms"" 5000 )  . get (  )  ;   }  ",150,6,region,3,[99]
5534,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get remote region read timeout ms,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""remote region read timeout ms"" 5000 )  . get (  )  ;   }  ",150,6,read,4,[106]
5535,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get remote region read timeout ms,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""remote region read timeout ms"" 5000 )  . get (  )  ;   }  ",150,6,timeout,5,[111]
5536,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get remote region read timeout ms,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""remote region read timeout ms"" 5000 )  . get (  )  ;   }  ",150,6,ms,6,[119]
5537,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get remote region registry fetch interval,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""remote region . registry fetch interval in seconds"" 30 )  . get (  )  ;   }  ",169,6,get,1,"[58, 152]"
5538,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get remote region registry fetch interval,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""remote region . registry fetch interval in seconds"" 30 )  . get (  )  ;   }  ",169,6,remote,2,[92]
5539,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get remote region registry fetch interval,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""remote region . registry fetch interval in seconds"" 30 )  . get (  )  ;   }  ",169,6,region,3,[99]
5540,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get remote region registry fetch interval,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""remote region . registry fetch interval in seconds"" 30 )  . get (  )  ;   }  ",169,6,registry,4,[108]
5541,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get remote region registry fetch interval,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""remote region . registry fetch interval in seconds"" 30 )  . get (  )  ;   }  ",169,6,fetch,5,[117]
5542,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get remote region registry fetch interval,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""remote region . registry fetch interval in seconds"" 30 )  . get (  )  ;   }  ",169,6,interval,6,[123]
5543,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get remote region total connections,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""remote region total connections"" 1000 )  . get (  )  ;   }  ",152,5,get,1,"[58, 135]"
5544,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get remote region total connections,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""remote region total connections"" 1000 )  . get (  )  ;   }  ",152,5,remote,2,[92]
5545,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get remote region total connections,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""remote region total connections"" 1000 )  . get (  )  ;   }  ",152,5,region,3,[99]
5546,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get remote region total connections,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""remote region total connections"" 1000 )  . get (  )  ;   }  ",152,5,total,4,[106]
5547,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get remote region total connections,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""remote region total connections"" 1000 )  . get (  )  ;   }  ",152,5,connections,5,[112]
5548,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get remote region total connections per host,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""remote region total connections per host"" 500 )  . get (  )  ;   }  ",160,7,get,1,"[58, 143]"
5549,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get remote region total connections per host,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""remote region total connections per host"" 500 )  . get (  )  ;   }  ",160,7,remote,2,[92]
5550,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get remote region total connections per host,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""remote region total connections per host"" 500 )  . get (  )  ;   }  ",160,7,region,3,[99]
5551,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get remote region total connections per host,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""remote region total connections per host"" 500 )  . get (  )  ;   }  ",160,7,total,4,[106]
5552,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get remote region total connections per host,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""remote region total connections per host"" 500 )  . get (  )  ;   }  ",160,7,connections,5,[112]
5553,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get remote region total connections per host,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""remote region total connections per host"" 500 )  . get (  )  ;   }  ",160,7,per,6,"[69, 124]"
5554,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get remote region total connections per host,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""remote region total connections per host"" 500 )  . get (  )  ;   }  ",160,7,host,7,[128]
5555,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get remote region trust store,"@ override public  string   (  )  {  return config instance . get string property ( namespace  +  ""remote region . trust store file name"" """" )  . get (  )  ;   }  ",163,5,get,1,"[62, 146]"
5556,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get remote region trust store,"@ override public  string   (  )  {  return config instance . get string property ( namespace  +  ""remote region . trust store file name"" """" )  . get (  )  ;   }  ",163,5,remote,2,[99]
5557,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get remote region trust store,"@ override public  string   (  )  {  return config instance . get string property ( namespace  +  ""remote region . trust store file name"" """" )  . get (  )  ;   }  ",163,5,region,3,[106]
5558,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get remote region trust store,"@ override public  string   (  )  {  return config instance . get string property ( namespace  +  ""remote region . trust store file name"" """" )  . get (  )  ;   }  ",163,5,trust,4,[115]
5559,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get remote region trust store,"@ override public  string   (  )  {  return config instance . get string property ( namespace  +  ""remote region . trust store file name"" """" )  . get (  )  ;   }  ",163,5,store,5,[121]
5560,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get remote region trust store password,"@ override public  string   (  )  {  return config instance . get string property ( namespace  +  ""remote region . trust store password"" ""changeit"" )  . get (  )  ;   }  ",170,6,get,1,"[62, 153]"
5561,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get remote region trust store password,"@ override public  string   (  )  {  return config instance . get string property ( namespace  +  ""remote region . trust store password"" ""changeit"" )  . get (  )  ;   }  ",170,6,remote,2,[99]
5562,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get remote region trust store password,"@ override public  string   (  )  {  return config instance . get string property ( namespace  +  ""remote region . trust store password"" ""changeit"" )  . get (  )  ;   }  ",170,6,region,3,[106]
5563,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get remote region trust store password,"@ override public  string   (  )  {  return config instance . get string property ( namespace  +  ""remote region . trust store password"" ""changeit"" )  . get (  )  ;   }  ",170,6,trust,4,[115]
5564,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get remote region trust store password,"@ override public  string   (  )  {  return config instance . get string property ( namespace  +  ""remote region . trust store password"" ""changeit"" )  . get (  )  ;   }  ",170,6,store,5,[121]
5565,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get remote region trust store password,"@ override public  string   (  )  {  return config instance . get string property ( namespace  +  ""remote region . trust store password"" ""changeit"" )  . get (  )  ;   }  ",170,6,password,6,[127]
5566,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get remote region urls,"@ override public  string[]   (  )  {   string remote region url string = config instance . get string property ( namespace  +  ""remote region urls"" null )  . get (  )  ;   string[] remote region url = null ;  if  ( remote region url string  !  =  null ) ",255,4,get,1,"[92, 159]"
5567,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get remote region urls,"@ override public  string[]   (  )  {   string remote region url string = config instance . get string property ( namespace  +  ""remote region urls"" null )  . get (  )  ;   string[] remote region url = null ;  if  ( remote region url string  !  =  null ) ",255,4,remote,2,"[47, 129, 182, 216]"
5568,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get remote region urls,"@ override public  string[]   (  )  {   string remote region url string = config instance . get string property ( namespace  +  ""remote region urls"" null )  . get (  )  ;   string[] remote region url = null ;  if  ( remote region url string  !  =  null ) ",255,4,region,3,"[54, 136, 189, 223]"
5569,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get remote region urls,"@ override public  string[]   (  )  {   string remote region url string = config instance . get string property ( namespace  +  ""remote region urls"" null )  . get (  )  ;   string[] remote region url = null ;  if  ( remote region url string  !  =  null ) ",255,4,urls,4,[143]
5570,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get remote region urls with name,"@ override public  map <  string  string >    (  )  {   string prop name = namespace  +  ""remote region urls with name"" ;   string remote region url with name string = config instance . get string property ( prop name null )  . get (  )  ;  if  ( null  = ",255,6,get,1,"[186, 228]"
5571,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get remote region urls with name,"@ override public  map <  string  string >    (  )  {   string prop name = namespace  +  ""remote region urls with name"" ;   string remote region url with name string = config instance . get string property ( prop name null )  . get (  )  ;  if  ( null  = ",255,6,remote,2,"[90, 131]"
5572,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get remote region urls with name,"@ override public  map <  string  string >    (  )  {   string prop name = namespace  +  ""remote region urls with name"" ;   string remote region url with name string = config instance . get string property ( prop name null )  . get (  )  ;  if  ( null  = ",255,6,region,3,"[97, 138]"
5573,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get remote region urls with name,"@ override public  map <  string  string >    (  )  {   string prop name = namespace  +  ""remote region urls with name"" ;   string remote region url with name string = config instance . get string property ( prop name null )  . get (  )  ;  if  ( null  = ",255,6,urls,4,[104]
5574,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get remote region urls with name,"@ override public  map <  string  string >    (  )  {   string prop name = namespace  +  ""remote region urls with name"" ;   string remote region url with name string = config instance . get string property ( prop name null )  . get (  )  ;  if  ( null  = ",255,6,with,5,"[109, 149]"
5575,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get remote region urls with name,"@ override public  map <  string  string >    (  )  {   string prop name = namespace  +  ""remote region urls with name"" ;   string remote region url with name string = config instance . get string property ( prop name null )  . get (  )  ;  if  ( null  = ",255,6,name,6,"[68, 75, 114, 154, 213]"
5576,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get renewal percent threshold,"@ override public double   (  )  {  return config instance . get double property ( namespace  +  ""renewal percent threshold"" 0 . 85 )  . get (  )  ;   }  ",154,4,get,1,"[61, 137]"
5577,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get renewal percent threshold,"@ override public double   (  )  {  return config instance . get double property ( namespace  +  ""renewal percent threshold"" 0 . 85 )  . get (  )  ;   }  ",154,4,renewal,2,[98]
5578,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get renewal percent threshold,"@ override public double   (  )  {  return config instance . get double property ( namespace  +  ""renewal percent threshold"" 0 . 85 )  . get (  )  ;   }  ",154,4,percent,3,[106]
5579,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get renewal percent threshold,"@ override public double   (  )  {  return config instance . get double property ( namespace  +  ""renewal percent threshold"" 0 . 85 )  . get (  )  ;   }  ",154,4,threshold,4,[114]
5580,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get renewal threshold update interval ms,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""renewal threshold update interval ms""  ( 15 * 60 * 1000 )  )  . get (  )  ;   }  ",173,6,get,1,"[58, 156]"
5581,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get renewal threshold update interval ms,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""renewal threshold update interval ms""  ( 15 * 60 * 1000 )  )  . get (  )  ;   }  ",173,6,renewal,2,[92]
5582,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get renewal threshold update interval ms,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""renewal threshold update interval ms""  ( 15 * 60 * 1000 )  )  . get (  )  ;   }  ",173,6,threshold,3,[100]
5583,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get renewal threshold update interval ms,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""renewal threshold update interval ms""  ( 15 * 60 * 1000 )  )  . get (  )  ;   }  ",173,6,update,4,[110]
5584,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get renewal threshold update interval ms,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""renewal threshold update interval ms""  ( 15 * 60 * 1000 )  )  . get (  )  ;   }  ",173,6,interval,5,[117]
5585,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get renewal threshold update interval ms,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""renewal threshold update interval ms""  ( 15 * 60 * 1000 )  )  . get (  )  ;   }  ",173,6,ms,6,[126]
5586,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get response cache auto expiration in seconds,"@ override public long   (  )  {  return config instance . get int property ( namespace  +  ""response cache auto expiration in seconds"" 180 )  . get (  )  ;   }  ",162,7,get,1,"[59, 145]"
5587,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get response cache auto expiration in seconds,"@ override public long   (  )  {  return config instance . get int property ( namespace  +  ""response cache auto expiration in seconds"" 180 )  . get (  )  ;   }  ",162,7,response,2,[93]
5588,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get response cache auto expiration in seconds,"@ override public long   (  )  {  return config instance . get int property ( namespace  +  ""response cache auto expiration in seconds"" 180 )  . get (  )  ;   }  ",162,7,cache,3,[102]
5589,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get response cache auto expiration in seconds,"@ override public long   (  )  {  return config instance . get int property ( namespace  +  ""response cache auto expiration in seconds"" 180 )  . get (  )  ;   }  ",162,7,auto,4,[108]
5590,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get response cache auto expiration in seconds,"@ override public long   (  )  {  return config instance . get int property ( namespace  +  ""response cache auto expiration in seconds"" 180 )  . get (  )  ;   }  ",162,7,expiration,5,[113]
5591,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get response cache auto expiration in seconds,"@ override public long   (  )  {  return config instance . get int property ( namespace  +  ""response cache auto expiration in seconds"" 180 )  . get (  )  ;   }  ",162,7,in,6,"[48, 63, 124]"
5592,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get response cache auto expiration in seconds,"@ override public long   (  )  {  return config instance . get int property ( namespace  +  ""response cache auto expiration in seconds"" 180 )  . get (  )  ;   }  ",162,7,seconds,7,[127]
5593,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get response cache update interval ms,"@ override public long   (  )  {  return config instance . get int property ( namespace  +  ""response cache update interval ms""  ( 30 * 1000 )  )  . get (  )  ;   }  ",166,6,get,1,"[59, 149]"
5594,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get response cache update interval ms,"@ override public long   (  )  {  return config instance . get int property ( namespace  +  ""response cache update interval ms""  ( 30 * 1000 )  )  . get (  )  ;   }  ",166,6,response,2,[93]
5595,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get response cache update interval ms,"@ override public long   (  )  {  return config instance . get int property ( namespace  +  ""response cache update interval ms""  ( 30 * 1000 )  )  . get (  )  ;   }  ",166,6,cache,3,[102]
5596,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get response cache update interval ms,"@ override public long   (  )  {  return config instance . get int property ( namespace  +  ""response cache update interval ms""  ( 30 * 1000 )  )  . get (  )  ;   }  ",166,6,update,4,[108]
5597,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get response cache update interval ms,"@ override public long   (  )  {  return config instance . get int property ( namespace  +  ""response cache update interval ms""  ( 30 * 1000 )  )  . get (  )  ;   }  ",166,6,interval,5,[115]
5598,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get response cache update interval ms,"@ override public long   (  )  {  return config instance . get int property ( namespace  +  ""response cache update interval ms""  ( 30 * 1000 )  )  . get (  )  ;   }  ",166,6,ms,6,[124]
5599,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get retention time inms in delta queue,"@ override public long   (  )  {  return config instance . get long property ( namespace  +  ""retention time inms in delta queue""  ( 3 * 60 * 1000 )  )  . get (  )  ;   }  ",172,7,get,1,"[59, 155]"
5600,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get retention time inms in delta queue,"@ override public long   (  )  {  return config instance . get long property ( namespace  +  ""retention time inms in delta queue""  ( 3 * 60 * 1000 )  )  . get (  )  ;   }  ",172,7,retention,2,[94]
5601,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get retention time inms in delta queue,"@ override public long   (  )  {  return config instance . get long property ( namespace  +  ""retention time inms in delta queue""  ( 3 * 60 * 1000 )  )  . get (  )  ;   }  ",172,7,time,3,[104]
5602,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get retention time inms in delta queue,"@ override public long   (  )  {  return config instance . get long property ( namespace  +  ""retention time inms in delta queue""  ( 3 * 60 * 1000 )  )  . get (  )  ;   }  ",172,7,inms,4,[109]
5603,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get retention time inms in delta queue,"@ override public long   (  )  {  return config instance . get long property ( namespace  +  ""retention time inms in delta queue""  ( 3 * 60 * 1000 )  )  . get (  )  ;   }  ",172,7,in,5,"[48, 109, 114]"
5604,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get retention time inms in delta queue,"@ override public long   (  )  {  return config instance . get long property ( namespace  +  ""retention time inms in delta queue""  ( 3 * 60 * 1000 )  )  . get (  )  ;   }  ",172,7,delta,6,[117]
5605,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get retention time inms in delta queue,"@ override public long   (  )  {  return config instance . get long property ( namespace  +  ""retention time inms in delta queue""  ( 3 * 60 * 1000 )  )  . get (  )  ;   }  ",172,7,queue,7,[123]
5606,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get route bind rebind retries,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""route53 bind rebind retries"" 3 )  . get (  )  ;   }  ",145,5,get,1,"[58, 128]"
5607,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get route bind rebind retries,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""route53 bind rebind retries"" 3 )  . get (  )  ;   }  ",145,5,route,2,[92]
5608,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get route bind rebind retries,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""route53 bind rebind retries"" 3 )  . get (  )  ;   }  ",145,5,bind,3,"[100, 107]"
5609,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get route bind rebind retries,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""route53 bind rebind retries"" 3 )  . get (  )  ;   }  ",145,5,rebind,4,[105]
5610,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get route bind rebind retries,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""route53 bind rebind retries"" 3 )  . get (  )  ;   }  ",145,5,retries,5,[112]
5611,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get route binding retry interval ms,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""route53 bind rebind retry interval ms""  ( 5 * 60 * 1000 )  )  . get (  )  ;   }  ",173,6,get,1,"[58, 156]"
5612,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get route binding retry interval ms,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""route53 bind rebind retry interval ms""  ( 5 * 60 * 1000 )  )  . get (  )  ;   }  ",173,6,route,2,[92]
5613,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get route binding retry interval ms,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""route53 bind rebind retry interval ms""  ( 5 * 60 * 1000 )  )  . get (  )  ;   }  ",173,6,binding,3,[]
5614,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get route binding retry interval ms,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""route53 bind rebind retry interval ms""  ( 5 * 60 * 1000 )  )  . get (  )  ;   }  ",173,6,retry,4,[112]
5615,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get route binding retry interval ms,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""route53 bind rebind retry interval ms""  ( 5 * 60 * 1000 )  )  . get (  )  ;   }  ",173,6,interval,5,[118]
5616,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get route binding retry interval ms,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""route53 bind rebind retry interval ms""  ( 5 * 60 * 1000 )  )  . get (  )  ;   }  ",173,6,ms,6,[127]
5617,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get route domainttl,"@ override public long   (  )  {  return config instance . get long property ( namespace  +  ""route53 domainttl"" 30l )  . get (  )  ;   }  ",139,3,get,1,"[59, 122]"
5618,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get route domainttl,"@ override public long   (  )  {  return config instance . get long property ( namespace  +  ""route53 domainttl"" 30l )  . get (  )  ;   }  ",139,3,route,2,[94]
5619,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get route domainttl,"@ override public long   (  )  {  return config instance . get long property ( namespace  +  ""route53 domainttl"" 30l )  . get (  )  ;   }  ",139,3,domainttl,3,[102]
5620,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get wait time in ms when sync empty,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""wait time in ms when sync empty""  ( 1000 * 60 * 5 )  )  . get (  )  ;   }  ",167,8,get,1,"[58, 150]"
5621,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get wait time in ms when sync empty,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""wait time in ms when sync empty""  ( 1000 * 60 * 5 )  )  . get (  )  ;   }  ",167,8,wait,2,[92]
5622,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get wait time in ms when sync empty,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""wait time in ms when sync empty""  ( 1000 * 60 * 5 )  )  . get (  )  ;   }  ",167,8,time,3,[97]
5623,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get wait time in ms when sync empty,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""wait time in ms when sync empty""  ( 1000 * 60 * 5 )  )  . get (  )  ;   }  ",167,8,in,4,"[18, 47, 62, 102]"
5624,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get wait time in ms when sync empty,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""wait time in ms when sync empty""  ( 1000 * 60 * 5 )  )  . get (  )  ;   }  ",167,8,ms,5,[105]
5625,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get wait time in ms when sync empty,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""wait time in ms when sync empty""  ( 1000 * 60 * 5 )  )  . get (  )  ;   }  ",167,8,when,6,[108]
5626,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get wait time in ms when sync empty,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""wait time in ms when sync empty""  ( 1000 * 60 * 5 )  )  . get (  )  ;   }  ",167,8,sync,7,[113]
5627,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get wait time in ms when sync empty,"@ override public int   (  )  {  return config instance . get int property ( namespace  +  ""wait time in ms when sync empty""  ( 1000 * 60 * 5 )  )  . get (  )  ;   }  ",167,8,empty,8,[118]
5628,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get xml codec name,"@ override public  string   (  )  {  return config instance . get string property ( namespace  +  ""xml codec name"" null )  . get (  )  ;   }  ",142,4,get,1,"[62, 125]"
5629,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get xml codec name,"@ override public  string   (  )  {  return config instance . get string property ( namespace  +  ""xml codec name"" null )  . get (  )  ;   }  ",142,4,xml,2,[99]
5630,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get xml codec name,"@ override public  string   (  )  {  return config instance . get string property ( namespace  +  ""xml codec name"" null )  . get (  )  ;   }  ",142,4,codec,3,[103]
5631,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,get xml codec name,"@ override public  string   (  )  {  return config instance . get string property ( namespace  +  ""xml codec name"" null )  . get (  )  ;   }  ",142,4,name,4,"[84, 109]"
5632,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,init,"private void   (  )  {   string env =  configuration manager . get config instance (  )  . get string ( eureka   environment test )  ;   configuration manager . get config instance (  )  . set property ( archaius   deployment   environment env )  ;   string eureka props file = eureka   props   file . get (  )  ;  try  {   configuration manager . load cascaded properties from resources ( eureka props file )  ;   }  catch  (  io exception e )   {  logger . warn ( "" cannot find the properties specified :  {  }  .   this may be okay if there are other environment ""  +  ""specific properties or the configuration is installed with a different mechanism . "" eureka props file )  ;   }   }  ",690,1,init,1,[]
5633,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,is rate limiter enabled,@ override public boolean   (  )  {  return rate limiter enabled . get (  )  ;   }  ,84,4,is,1,[]
5634,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,is rate limiter enabled,@ override public boolean   (  )  {  return rate limiter enabled . get (  )  ;   }  ,84,4,rate,2,[44]
5635,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,is rate limiter enabled,@ override public boolean   (  )  {  return rate limiter enabled . get (  )  ;   }  ,84,4,limiter,3,[49]
5636,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,is rate limiter enabled,@ override public boolean   (  )  {  return rate limiter enabled . get (  )  ;   }  ,84,4,enabled,4,[57]
5637,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,is rate limiter throttle standard clients,@ override public boolean   (  )  {  return rate limiter throttle standard clients . get (  )  ;   }  ,102,6,is,1,[]
5638,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,is rate limiter throttle standard clients,@ override public boolean   (  )  {  return rate limiter throttle standard clients . get (  )  ;   }  ,102,6,rate,2,[44]
5639,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,is rate limiter throttle standard clients,@ override public boolean   (  )  {  return rate limiter throttle standard clients . get (  )  ;   }  ,102,6,limiter,3,[49]
5640,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,is rate limiter throttle standard clients,@ override public boolean   (  )  {  return rate limiter throttle standard clients . get (  )  ;   }  ,102,6,throttle,4,[57]
5641,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,is rate limiter throttle standard clients,@ override public boolean   (  )  {  return rate limiter throttle standard clients . get (  )  ;   }  ,102,6,standard,5,[66]
5642,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,is rate limiter throttle standard clients,@ override public boolean   (  )  {  return rate limiter throttle standard clients . get (  )  ;   }  ,102,6,clients,6,[75]
5643,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,should batch replication,"@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  ""should batch replication"" false )  . get (  )  ;   }  ",154,3,should,1,[100]
5644,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,should batch replication,"@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  ""should batch replication"" false )  . get (  )  ;   }  ",154,3,batch,2,[107]
5645,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,should batch replication,"@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  ""should batch replication"" false )  . get (  )  ;   }  ",154,3,replication,3,[113]
5646,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,should disable delta,"@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  ""disable delta"" false )  . get (  )  ;   }  ",143,3,should,1,[]
5647,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,should disable delta,"@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  ""disable delta"" false )  . get (  )  ;   }  ",143,3,disable,2,[100]
5648,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,should disable delta,"@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  ""disable delta"" false )  . get (  )  ;   }  ",143,3,delta,3,[108]
5649,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,should disable delta for remote regions,"@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  ""disable delta for remote regions"" false )  . get (  )  ;   }  ",162,6,should,1,[]
5650,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,should disable delta for remote regions,"@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  ""disable delta for remote regions"" false )  . get (  )  ;   }  ",162,6,disable,2,[100]
5651,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,should disable delta for remote regions,"@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  ""disable delta for remote regions"" false )  . get (  )  ;   }  ",162,6,delta,3,[108]
5652,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,should disable delta for remote regions,"@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  ""disable delta for remote regions"" false )  . get (  )  ;   }  ",162,6,for,4,[114]
5653,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,should disable delta for remote regions,"@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  ""disable delta for remote regions"" false )  . get (  )  ;   }  ",162,6,remote,5,[118]
5654,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,should disable delta for remote regions,"@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  ""disable delta for remote regions"" false )  . get (  )  ;   }  ",162,6,regions,6,[125]
5655,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,should enable replicated request compression,"@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  ""enable replicated request compression"" false )  . get (  )  ;   }  ",167,5,should,1,[]
5656,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,should enable replicated request compression,"@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  ""enable replicated request compression"" false )  . get (  )  ;   }  ",167,5,enable,2,[100]
5657,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,should enable replicated request compression,"@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  ""enable replicated request compression"" false )  . get (  )  ;   }  ",167,5,replicated,3,[107]
5658,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,should enable replicated request compression,"@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  ""enable replicated request compression"" false )  . get (  )  ;   }  ",167,5,request,4,[118]
5659,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,should enable replicated request compression,"@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  ""enable replicated request compression"" false )  . get (  )  ;   }  ",167,5,compression,5,[126]
5660,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,should enable self preservation,"@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  ""enable self preservation"" true )  . get (  )  ;   }  ",153,4,should,1,[]
5661,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,should enable self preservation,"@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  ""enable self preservation"" true )  . get (  )  ;   }  ",153,4,enable,2,[100]
5662,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,should enable self preservation,"@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  ""enable self preservation"" true )  . get (  )  ;   }  ",153,4,self,3,[107]
5663,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,should enable self preservation,"@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  ""enable self preservation"" true )  . get (  )  ;   }  ",153,4,preservation,4,[112]
5664,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,shouldg zip content from remote region,"@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  ""remote region . gzip content"" true )  . get (  )  ;   }  ",157,6,shouldg,1,[]
5665,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,shouldg zip content from remote region,"@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  ""remote region . gzip content"" true )  . get (  )  ;   }  ",157,6,zip,2,[117]
5666,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,shouldg zip content from remote region,"@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  ""remote region . gzip content"" true )  . get (  )  ;   }  ",157,6,content,3,[121]
5667,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,shouldg zip content from remote region,"@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  ""remote region . gzip content"" true )  . get (  )  ;   }  ",157,6,from,4,[]
5668,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,shouldg zip content from remote region,"@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  ""remote region . gzip content"" true )  . get (  )  ;   }  ",157,6,remote,5,[100]
5669,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,shouldg zip content from remote region,"@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  ""remote region . gzip content"" true )  . get (  )  ;   }  ",157,6,region,6,[107]
5670,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,should log identity headers,"@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  ""auth . should log identity headers"" true )  . get (  )  ;   }  ",163,4,should,1,[107]
5671,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,should log identity headers,"@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  ""auth . should log identity headers"" true )  . get (  )  ;   }  ",163,4,log,2,[114]
5672,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,should log identity headers,"@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  ""auth . should log identity headers"" true )  . get (  )  ;   }  ",163,4,identity,3,[118]
5673,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,should log identity headers,"@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  ""auth . should log identity headers"" true )  . get (  )  ;   }  ",163,4,headers,4,[127]
5674,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,should prime aws replica connections,"@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  ""prime aws replica connections"" true )  . get (  )  ;   }  ",158,5,should,1,[]
5675,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,should prime aws replica connections,"@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  ""prime aws replica connections"" true )  . get (  )  ;   }  ",158,5,prime,2,[100]
5676,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,should prime aws replica connections,"@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  ""prime aws replica connections"" true )  . get (  )  ;   }  ",158,5,aws,3,[106]
5677,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,should prime aws replica connections,"@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  ""prime aws replica connections"" true )  . get (  )  ;   }  ",158,5,replica,4,[110]
5678,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,should prime aws replica connections,"@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  ""prime aws replica connections"" true )  . get (  )  ;   }  ",158,5,connections,5,[118]
5679,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,should sync when timestamp differs,"@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  ""sync when timestamp differs"" true )  . get (  )  ;   }  ",156,5,should,1,[]
5680,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,should sync when timestamp differs,"@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  ""sync when timestamp differs"" true )  . get (  )  ;   }  ",156,5,sync,2,[100]
5681,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,should sync when timestamp differs,"@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  ""sync when timestamp differs"" true )  . get (  )  ;   }  ",156,5,when,3,[105]
5682,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,should sync when timestamp differs,"@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  ""sync when timestamp differs"" true )  . get (  )  ;   }  ",156,5,timestamp,4,[110]
5683,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,should sync when timestamp differs,"@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  ""sync when timestamp differs"" true )  . get (  )  ;   }  ",156,5,differs,5,[120]
5684,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,should use read only response cache,"@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  ""should use read only response cache"" true )  . get (  )  ;   }  ",164,6,should,1,[100]
5685,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,should use read only response cache,"@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  ""should use read only response cache"" true )  . get (  )  ;   }  ",164,6,use,2,[107]
5686,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,should use read only response cache,"@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  ""should use read only response cache"" true )  . get (  )  ;   }  ",164,6,read,3,[111]
5687,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,should use read only response cache,"@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  ""should use read only response cache"" true )  . get (  )  ;   }  ",164,6,only,4,[116]
5688,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,should use read only response cache,"@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  ""should use read only response cache"" true )  . get (  )  ;   }  ",164,6,response,5,[121]
5689,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,should use read only response cache,"@ override public boolean   (  )  {  return config instance . get boolean property ( namespace  +  ""should use read only response cache"" true )  . get (  )  ;   }  ",164,6,cache,6,[130]
5690,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\EurekaBootStrap.java, eureka boot strap,public   (  eureka client eureka client )  {  this . eureka client = eureka client ;   }  ,90,3,eureka,1,"[12, 26, 53, 69]"
5691,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\EurekaBootStrap.java, eureka boot strap,public   (  eureka client eureka client )  {  this . eureka client = eureka client ;   }  ,90,3,boot,2,[]
5692,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\EurekaBootStrap.java, eureka boot strap,public   (  eureka client eureka client )  {  this . eureka client = eureka client ;   }  ,90,3,strap,3,[]
5693,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\EurekaBootStrap.java,context destroyed,"@ override public void   (  servlet context event event )  {  try  {  logger . info ( "" {  }   shutting down  eureka  server .  . "" new  date (  )  )  ;   servlet context sc = event . get servlet context (  )  ;  sc . remove attribute (  eureka server con",255,2,context,1,"[36, 163, 196]"
5694,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\EurekaBootStrap.java,context destroyed,"@ override public void   (  servlet context event event )  {  try  {  logger . info ( "" {  }   shutting down  eureka  server .  . "" new  date (  )  )  ;   servlet context sc = event . get servlet context (  )  ;  sc . remove attribute (  eureka server con",255,2,destroyed,2,[]
5695,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\EurekaBootStrap.java,context initialized,@ override public void   (  servlet context event event )  {  try  {  init eureka environment (  )  ;  init eureka server context (  )  ;   servlet context sc = event . get servlet context (  )  ;  sc . set attribute (  eureka server context . class . get,255,2,context,1,"[36, 122, 148, 181, 234]"
5696,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\EurekaBootStrap.java,context initialized,@ override public void   (  servlet context event event )  {  try  {  init eureka environment (  )  ;  init eureka server context (  )  ;   servlet context sc = event . get servlet context (  )  ;  sc . set attribute (  eureka server context . class . get,255,2,initialized,2,[]
5697,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\EurekaBootStrap.java,destroy eureka server context,protected void   (  )  throws  exception  {   eureka monitors . shutdown (  )  ;  if  ( aws binder  !  =  null )   {  aws binder . shutdown (  )  ;   }  if  ( server context  !  =  null )   {  server context . shutdown (  )  ;   }   }  ,236,4,destroy,1,[]
5698,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\EurekaBootStrap.java,destroy eureka server context,protected void   (  )  throws  exception  {   eureka monitors . shutdown (  )  ;  if  ( aws binder  !  =  null )   {  aws binder . shutdown (  )  ;   }  if  ( server context  !  =  null )   {  server context . shutdown (  )  ;   }   }  ,236,4,eureka,2,[46]
5699,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\EurekaBootStrap.java,destroy eureka server context,protected void   (  )  throws  exception  {   eureka monitors . shutdown (  )  ;  if  ( aws binder  !  =  null )   {  aws binder . shutdown (  )  ;   }  if  ( server context  !  =  null )   {  server context . shutdown (  )  ;   }   }  ,236,4,server,3,"[159, 193]"
5700,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\EurekaBootStrap.java,destroy eureka server context,protected void   (  )  throws  exception  {   eureka monitors . shutdown (  )  ;  if  ( aws binder  !  =  null )   {  aws binder . shutdown (  )  ;   }  if  ( server context  !  =  null )   {  server context . shutdown (  )  ;   }   }  ,236,4,context,4,"[166, 200]"
5701,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\EurekaBootStrap.java,get peer eureka nodes,protected  peer eureka nodes   (  peer aware instance registry registry  eureka server config eureka server config  eureka client config eureka client config  server codecs server codecs  application info manager application info manager )  {   peer eureka nodes peer eureka nodes = new  peer eureka nodes ( registry eureka server config eureka client config server codecs application info manager )  ;  return peer eureka nodes ;   }  ,436,4,get,1,[]
5702,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\EurekaBootStrap.java,get peer eureka nodes,protected  peer eureka nodes   (  peer aware instance registry registry  eureka server config eureka server config  eureka client config eureka client config  server codecs server codecs  application info manager application info manager )  {   peer eureka nodes peer eureka nodes = new  peer eureka nodes ( registry eureka server config eureka client config server codecs application info manager )  ;  return peer eureka nodes ;   }  ,436,4,peer,2,"[11, 34, 245, 263, 288, 411]"
5703,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\EurekaBootStrap.java,get peer eureka nodes,protected  peer eureka nodes   (  peer aware instance registry registry  eureka server config eureka server config  eureka client config eureka client config  server codecs server codecs  application info manager application info manager )  {   peer eureka nodes peer eureka nodes = new  peer eureka nodes ( registry eureka server config eureka client config server codecs application info manager )  ;  return peer eureka nodes ;   }  ,436,4,eureka,3,"[16, 73, 94, 116, 137, 250, 268, 293, 317, 338, 416]"
5704,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\EurekaBootStrap.java,get peer eureka nodes,protected  peer eureka nodes   (  peer aware instance registry registry  eureka server config eureka server config  eureka client config eureka client config  server codecs server codecs  application info manager application info manager )  {   peer eureka nodes peer eureka nodes = new  peer eureka nodes ( registry eureka server config eureka client config server codecs application info manager )  ;  return peer eureka nodes ;   }  ,436,4,nodes,4,"[23, 257, 275, 300, 423]"
5705,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\EurekaBootStrap.java,init eureka environment,"protected void   (  )  throws  exception  {  logger . info ( "" setting the eureka configuration .  . "" )  ;   string data center =  configuration manager . get config instance (  )  . get string ( eureka   datacenter )  ;  if  ( data center  =  =  null )   {  logger . info ( "" eureka data center value eureka . datacenter is not set  defaulting to default"" )  ;   configuration manager . get config instance (  )  . set property ( archaius   deployment   datacenter default )  ;   }  else  {   configuration manager . get config instance (  )  . set property ( archaius   deployment   datacenter data center )  ;   }   string environment =  configuration manager . get config instance (  )  . get string ( eureka   environment )  ;  if  ( environment  =  =  null )   {   configuration manager . get config instance (  )  . set property ( archaius   deployment   environment test )  ;  logger . info ( "" eureka environment value eureka . environment is not set  defaulting to test"" )  ;   }   }  ",996,3,init,1,[]
5706,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\EurekaBootStrap.java,init eureka environment,"protected void   (  )  throws  exception  {  logger . info ( "" setting the eureka configuration .  . "" )  ;   string data center =  configuration manager . get config instance (  )  . get string ( eureka   datacenter )  ;  if  ( data center  =  =  null )   {  logger . info ( "" eureka data center value eureka . datacenter is not set  defaulting to default"" )  ;   configuration manager . get config instance (  )  . set property ( archaius   deployment   datacenter default )  ;   }  else  {   configuration manager . get config instance (  )  . set property ( archaius   deployment   datacenter data center )  ;   }   string environment =  configuration manager . get config instance (  )  . get string ( eureka   environment )  ;  if  ( environment  =  =  null )   {   configuration manager . get config instance (  )  . set property ( archaius   deployment   environment test )  ;  logger . info ( "" eureka environment value eureka . environment is not set  defaulting to test"" )  ;   }   }  ",996,3,eureka,2,"[75, 197, 278, 303, 707, 904, 929]"
5707,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\EurekaBootStrap.java,init eureka environment,"protected void   (  )  throws  exception  {  logger . info ( "" setting the eureka configuration .  . "" )  ;   string data center =  configuration manager . get config instance (  )  . get string ( eureka   datacenter )  ;  if  ( data center  =  =  null )   {  logger . info ( "" eureka data center value eureka . datacenter is not set  defaulting to default"" )  ;   configuration manager . get config instance (  )  . set property ( archaius   deployment   datacenter default )  ;   }  else  {   configuration manager . get config instance (  )  . set property ( archaius   deployment   datacenter data center )  ;   }   string environment =  configuration manager . get config instance (  )  . get string ( eureka   environment )  ;  if  ( environment  =  =  null )   {   configuration manager . get config instance (  )  . set property ( archaius   deployment   environment test )  ;  logger . info ( "" eureka environment value eureka . environment is not set  defaulting to test"" )  ;   }   }  ",996,3,environment,3,"[627, 716, 740, 863, 911, 938]"
5708,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\EurekaBootStrap.java,init eureka server context,"protected void   (  )  throws  exception  {   eureka server config eureka server config = new  default eureka server config (  )  ;   jsonx stream . get instance (  )  . register converter ( new v1 aware instance info converter (  )  x stream . priority   very   high )  ;   xmlx stream . get instance (  )  . register converter ( new v1 aware instance info converter (  )  x stream . priority   very   high )  ;  logger . info ( "" initializing the eureka client .  .  . "" )  ;  logger . info ( eureka server config . get json codec name (  )  )  ;   server codecs server codecs = new  default server codecs ( eureka server config )  ;   application info manager application info manager = null ;  if  ( eureka client  =  =  null )   {   eureka instance config instance config = is cloud (  configuration manager . get deployment context (  )  )   ?  new  cloud instance config (  )  : new  my data center instance config (  )  ;  application info manager = new  application info manager ( instance config new  eureka config based instance info provider ( instance config )  . get (  )  )  ;   eureka client config eureka client config = new  default eureka client config (  )  ;  eureka client = new  discovery client ( application info manager eureka client config )  ;   }  else  {  application info manager = eureka client . get application info manager (  )  ;   }   peer aware instance registry registry ;  if  ( is aws ( application info manager . get info (  )  )  )   {  registry = new  aws instance registry ( eureka server config eureka client . get eureka client config (  )  server codecs eureka client )  ;  aws binder = new  aws binder delegate ( eureka server config eureka client . get eureka client config (  )  registry application info manager )  ;  aws binder . start (  )  ;   }  else  {  registry = new  peer aware instance registry impl ( eureka server config eureka client . get eureka client config (  )  server codecs eureka client )  ;   }   peer eureka nodes peer eureka nodes = get peer eureka nodes ( registry eureka server config eureka client . get eureka client config (  )  server codecs application info manager )  ;  server context = new  default eureka server context ( eureka server config server codecs registry peer eureka nodes application info manager )  ;   eureka server context holder . initialize ( server context )  ;  server context . initialize (  )  ;  logger . info ( "" initialized server context"" )  ;  int registry count = registry . sync up (  )  ;  registry . open for traffic ( application info manager registry count )  ;   eureka monitors . register all stats (  )  ;   }  ",2632,4,init,1,"[432, 2333, 2384, 2422]"
5709,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\EurekaBootStrap.java,init eureka server context,"protected void   (  )  throws  exception  {   eureka server config eureka server config = new  default eureka server config (  )  ;   jsonx stream . get instance (  )  . register converter ( new v1 aware instance info converter (  )  x stream . priority   very   high )  ;   xmlx stream . get instance (  )  . register converter ( new v1 aware instance info converter (  )  x stream . priority   very   high )  ;  logger . info ( "" initializing the eureka client .  .  . "" )  ;  logger . info ( eureka server config . get json codec name (  )  )  ;   server codecs server codecs = new  default server codecs ( eureka server config )  ;   application info manager application info manager = null ;  if  ( eureka client  =  =  null )   {   eureka instance config instance config = is cloud (  configuration manager . get deployment context (  )  )   ?  new  cloud instance config (  )  : new  my data center instance config (  )  ;  application info manager = new  application info manager ( instance config new  eureka config based instance info provider ( instance config )  . get (  )  )  ;   eureka client config eureka client config = new  default eureka client config (  )  ;  eureka client = new  discovery client ( application info manager eureka client config )  ;   }  else  {  application info manager = eureka client . get application info manager (  )  ;   }   peer aware instance registry registry ;  if  ( is aws ( application info manager . get info (  )  )  )   {  registry = new  aws instance registry ( eureka server config eureka client . get eureka client config (  )  server codecs eureka client )  ;  aws binder = new  aws binder delegate ( eureka server config eureka client . get eureka client config (  )  registry application info manager )  ;  aws binder . start (  )  ;   }  else  {  registry = new  peer aware instance registry impl ( eureka server config eureka client . get eureka client config (  )  server codecs eureka client )  ;   }   peer eureka nodes peer eureka nodes = get peer eureka nodes ( registry eureka server config eureka client . get eureka client config (  )  server codecs application info manager )  ;  server context = new  default eureka server context ( eureka server config server codecs registry peer eureka nodes application info manager )  ;   eureka server context holder . initialize ( server context )  ;  server context . initialize (  )  ;  logger . info ( "" initialized server context"" )  ;  int registry count = registry . sync up (  )  ;  registry . open for traffic ( application info manager registry count )  ;   eureka monitors . register all stats (  )  ;   }  ",2632,4,eureka,2,"[46, 67, 103, 449, 495, 610, 704, 738, 1011, 1094, 1115, 1151, 1181, 1246, 1313, 1520, 1541, 1561, 1602, 1662, 1683, 1703, 1863, 1884, 1904, 1945, 1975, 1993, 2017, 2041, 2062, 2082, 2184, 2208, 2257, 2302, 2582]"
5710,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\EurekaBootStrap.java,init eureka server context,"protected void   (  )  throws  exception  {   eureka server config eureka server config = new  default eureka server config (  )  ;   jsonx stream . get instance (  )  . register converter ( new v1 aware instance info converter (  )  x stream . priority   very   high )  ;   xmlx stream . get instance (  )  . register converter ( new v1 aware instance info converter (  )  x stream . priority   very   high )  ;  logger . info ( "" initializing the eureka client .  .  . "" )  ;  logger . info ( eureka server config . get json codec name (  )  )  ;   server codecs server codecs = new  default server codecs ( eureka server config )  ;   application info manager application info manager = null ;  if  ( eureka client  =  =  null )   {   eureka instance config instance config = is cloud (  configuration manager . get deployment context (  )  )   ?  new  cloud instance config (  )  : new  my data center instance config (  )  ;  application info manager = new  application info manager ( instance config new  eureka config based instance info provider ( instance config )  . get (  )  )  ;   eureka client config eureka client config = new  default eureka client config (  )  ;  eureka client = new  discovery client ( application info manager eureka client config )  ;   }  else  {  application info manager = eureka client . get application info manager (  )  ;   }   peer aware instance registry registry ;  if  ( is aws ( application info manager . get info (  )  )  )   {  registry = new  aws instance registry ( eureka server config eureka client . get eureka client config (  )  server codecs eureka client )  ;  aws binder = new  aws binder delegate ( eureka server config eureka client . get eureka client config (  )  registry application info manager )  ;  aws binder . start (  )  ;   }  else  {  registry = new  peer aware instance registry impl ( eureka server config eureka client . get eureka client config (  )  server codecs eureka client )  ;   }   peer eureka nodes peer eureka nodes = get peer eureka nodes ( registry eureka server config eureka client . get eureka client config (  )  server codecs application info manager )  ;  server context = new  default eureka server context ( eureka server config server codecs registry peer eureka nodes application info manager )  ;   eureka server context holder . initialize ( server context )  ;  server context . initialize (  )  ;  logger . info ( "" initialized server context"" )  ;  int registry count = registry . sync up (  )  ;  registry . open for traffic ( application info manager registry count )  ;   eureka monitors . register all stats (  )  ;   }  ",2632,4,server,3,"[53, 74, 110, 502, 551, 565, 594, 617, 1527, 1588, 1669, 1870, 1931, 2048, 2109, 2154, 2191, 2215, 2229, 2309, 2346, 2367, 2434]"
5711,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\EurekaBootStrap.java,init eureka server context,"protected void   (  )  throws  exception  {   eureka server config eureka server config = new  default eureka server config (  )  ;   jsonx stream . get instance (  )  . register converter ( new v1 aware instance info converter (  )  x stream . priority   very   high )  ;   xmlx stream . get instance (  )  . register converter ( new v1 aware instance info converter (  )  x stream . priority   very   high )  ;  logger . info ( "" initializing the eureka client .  .  . "" )  ;  logger . info ( eureka server config . get json codec name (  )  )  ;   server codecs server codecs = new  default server codecs ( eureka server config )  ;   application info manager application info manager = null ;  if  ( eureka client  =  =  null )   {   eureka instance config instance config = is cloud (  configuration manager . get deployment context (  )  )   ?  new  cloud instance config (  )  : new  my data center instance config (  )  ;  application info manager = new  application info manager ( instance config new  eureka config based instance info provider ( instance config )  . get (  )  )  ;   eureka client config eureka client config = new  default eureka client config (  )  ;  eureka client = new  discovery client ( application info manager eureka client config )  ;   }  else  {  application info manager = eureka client . get application info manager (  )  ;   }   peer aware instance registry registry ;  if  ( is aws ( application info manager . get info (  )  )  )   {  registry = new  aws instance registry ( eureka server config eureka client . get eureka client config (  )  server codecs eureka client )  ;  aws binder = new  aws binder delegate ( eureka server config eureka client . get eureka client config (  )  registry application info manager )  ;  aws binder . start (  )  ;   }  else  {  registry = new  peer aware instance registry impl ( eureka server config eureka client . get eureka client config (  )  server codecs eureka client )  ;   }   peer eureka nodes peer eureka nodes = get peer eureka nodes ( registry eureka server config eureka client . get eureka client config (  )  server codecs application info manager )  ;  server context = new  default eureka server context ( eureka server config server codecs registry peer eureka nodes application info manager )  ;   eureka server context holder . initialize ( server context )  ;  server context . initialize (  )  ;  logger . info ( "" initialized server context"" )  ;  int registry count = registry . sync up (  )  ;  registry . open for traffic ( application info manager registry count )  ;   eureka monitors . register all stats (  )  ;   }  ",2632,4,context,4,"[830, 2161, 2198, 2316, 2353, 2374, 2441]"
5712,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\EurekaBootStrap.java,is aws,"protected boolean   (  instance info self instance info )  {  boolean result =  data center info .  name .  amazon  =  =  self instance info . get data center info (  )  . get name (  )  ;  logger . info ( ""is aws returned  {  } "" result )  ;  return result ;   }  ",265,2,is,1,[207]
5713,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\EurekaBootStrap.java,is aws,"protected boolean   (  instance info self instance info )  {  boolean result =  data center info .  name .  amazon  =  =  self instance info . get data center info (  )  . get name (  )  ;  logger . info ( ""is aws returned  {  } "" result )  ;  return result ;   }  ",265,2,aws,2,[210]
5714,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\EurekaBootStrap.java,is cloud,"protected boolean   (  deployment context deployment context )  {  logger . info ( "" deployment datacenter is  {  } "" deployment context . get deployment datacenter (  )  )  ;  return cloud . equals ( deployment context . get deployment datacenter (  )  )  ;   }  ",264,2,is,1,[107]
5715,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\EurekaBootStrap.java,is cloud,"protected boolean   (  deployment context deployment context )  {  logger . info ( "" deployment datacenter is  {  } "" deployment context . get deployment datacenter (  )  )  ;  return cloud . equals ( deployment context . get deployment datacenter (  )  )  ;   }  ",264,2,cloud,2,[184]
5716,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\EurekaServerIdentity.java, eureka server identity,public   (  string id )  {  this . id = id ;   }  ,50,3,eureka,1,[]
5717,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\EurekaServerIdentity.java, eureka server identity,public   (  string id )  {  this . id = id ;   }  ,50,3,server,2,[]
5718,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\EurekaServerIdentity.java, eureka server identity,public   (  string id )  {  this . id = id ;   }  ,50,3,identity,3,[]
5719,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\EurekaServerIdentity.java,get id,@ override public  string   (  )  {  return id ;   }  ,54,2,get,1,[]
5720,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\EurekaServerIdentity.java,get id,@ override public  string   (  )  {  return id ;   }  ,54,2,id,2,"[7, 44]"
5721,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\EurekaServerIdentity.java,get name,@ override public  string   (  )  {  return default   server   name ;   }  ,75,2,get,1,[]
5722,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\EurekaServerIdentity.java,get name,@ override public  string   (  )  {  return default   server   name ;   }  ,75,2,name,2,[63]
5723,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\EurekaServerIdentity.java,get version,@ override public  string   (  )  {  return server version ;   }  ,66,2,get,1,[]
5724,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\EurekaServerIdentity.java,get version,@ override public  string   (  )  {  return server version ;   }  ,66,2,version,2,[51]
5725,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\EurekaServerContextHolder.java, eureka server context holder,private   (  eureka server context server context )  {  this . server context = server context ;   }  ,102,4,eureka,1,[13]
5726,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\EurekaServerContextHolder.java, eureka server context holder,private   (  eureka server context server context )  {  this . server context = server context ;   }  ,102,4,server,2,"[20, 35, 63, 80]"
5727,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\EurekaServerContextHolder.java, eureka server context holder,private   (  eureka server context server context )  {  this . server context = server context ;   }  ,102,4,context,3,"[27, 42, 70, 87]"
5728,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\EurekaServerContextHolder.java, eureka server context holder,private   (  eureka server context server context )  {  this . server context = server context ;   }  ,102,4,holder,4,[]
5729,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\EurekaServerContextHolder.java,get instance,public static  eureka server context holder   (  )  {  return holder ;   }  ,76,2,get,1,[]
5730,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\EurekaServerContextHolder.java,get instance,public static  eureka server context holder   (  )  {  return holder ;   }  ,76,2,instance,2,[]
5731,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\EurekaServerContextHolder.java,get server context,public  eureka server context   (  )  {  return this . server context ;   }  ,77,3,get,1,[]
5732,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\EurekaServerContextHolder.java,get server context,public  eureka server context   (  )  {  return this . server context ;   }  ,77,3,server,2,"[15, 55]"
5733,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\EurekaServerContextHolder.java,get server context,public  eureka server context   (  )  {  return this . server context ;   }  ,77,3,context,3,"[22, 62]"
5734,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\EurekaServerContextHolder.java,initialize,public static synchronized void   (  eureka server context server context )  {  holder = new  eureka server context holder ( server context )  ;   }  ,150,1,initialize,1,[]
5735,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\GzipEncodingEnforcingFilter.java, enum wrapper,private   (  enumeration < e >  delegate e extra element )  {  this . delegate = delegate ;  this . extra element ref = new  atomic reference <  >  ( extra element )  ;   }  ,174,2,enum,1,[13]
5736,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\GzipEncodingEnforcingFilter.java, enum wrapper,private   (  enumeration < e >  delegate e extra element )  {  this . delegate = delegate ;  this . extra element ref = new  atomic reference <  >  ( extra element )  ;   }  ,174,2,wrapper,2,[]
5737,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\GzipEncodingEnforcingFilter.java,add gzip accept encoding,"private static  http servlet request   (  http servlet request request )  {  return new  http servlet request wrapper ( request )  {  @ override public  enumeration <  string >  get headers (   string name )  {  if  (  http headers . accept   encoding . equals ( name )  )   {  return new  enum wrapper <  string >  ( ""gzip"" )  ;   }  return new  enum wrapper <  string >  ( super . get headers ( name )   http headers . accept   encoding )  ;   }  @ override public  enumeration <  string >  get header names (  )  {  return new  enum wrapper <  string >  ( super . get header names (  )   http headers . accept   encoding )  ;   }  @ override public  string get header (   string name )  {  if  (  http headers . accept   encoding . equals ( name )  )   {  return ""gzip"" ;   }  return super . get header ( name )  ;   }   }   ;   }  ",835,4,add,1,[]
5738,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\GzipEncodingEnforcingFilter.java,add gzip accept encoding,"private static  http servlet request   (  http servlet request request )  {  return new  http servlet request wrapper ( request )  {  @ override public  enumeration <  string >  get headers (   string name )  {  if  (  http headers . accept   encoding . equals ( name )  )   {  return new  enum wrapper <  string >  ( ""gzip"" )  ;   }  return new  enum wrapper <  string >  ( super . get headers ( name )   http headers . accept   encoding )  ;   }  @ override public  enumeration <  string >  get header names (  )  {  return new  enum wrapper <  string >  ( super . get header names (  )   http headers . accept   encoding )  ;   }  @ override public  string get header (   string name )  {  if  (  http headers . accept   encoding . equals ( name )  )   {  return ""gzip"" ;   }  return super . get header ( name )  ;   }   }   ;   }  ",835,4,gzip,2,"[319, 767]"
5739,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\GzipEncodingEnforcingFilter.java,add gzip accept encoding,"private static  http servlet request   (  http servlet request request )  {  return new  http servlet request wrapper ( request )  {  @ override public  enumeration <  string >  get headers (   string name )  {  if  (  http headers . accept   encoding . equals ( name )  )   {  return new  enum wrapper <  string >  ( ""gzip"" )  ;   }  return new  enum wrapper <  string >  ( super . get headers ( name )   http headers . accept   encoding )  ;   }  @ override public  enumeration <  string >  get header names (  )  {  return new  enum wrapper <  string >  ( super . get header names (  )   http headers . accept   encoding )  ;   }  @ override public  string get header (   string name )  {  if  (  http headers . accept   encoding . equals ( name )  )   {  return ""gzip"" ;   }  return super . get header ( name )  ;   }   }   ;   }  ",835,4,accept,3,"[234, 421, 606, 715]"
5740,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\GzipEncodingEnforcingFilter.java,add gzip accept encoding,"private static  http servlet request   (  http servlet request request )  {  return new  http servlet request wrapper ( request )  {  @ override public  enumeration <  string >  get headers (   string name )  {  if  (  http headers . accept   encoding . equals ( name )  )   {  return new  enum wrapper <  string >  ( ""gzip"" )  ;   }  return new  enum wrapper <  string >  ( super . get headers ( name )   http headers . accept   encoding )  ;   }  @ override public  enumeration <  string >  get header names (  )  {  return new  enum wrapper <  string >  ( super . get header names (  )   http headers . accept   encoding )  ;   }  @ override public  string get header (   string name )  {  if  (  http headers . accept   encoding . equals ( name )  )   {  return ""gzip"" ;   }  return super . get header ( name )  ;   }   }   ;   }  ",835,4,encoding,4,"[243, 430, 615, 724]"
5741,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\GzipEncodingEnforcingFilter.java,do filter,"@ override public void   (  servlet request request  servlet response response  filter chain chain )  throws io exception   servlet exception  {   http servlet request http request =  (  http servlet request ) request ;  if  ( ""get"" . equals ( http reques",255,2,do,1,[]
5742,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\GzipEncodingEnforcingFilter.java,do filter,"@ override public void   (  servlet request request  servlet response response  filter chain chain )  throws io exception   servlet exception  {   http servlet request http request =  (  http servlet request ) request ;  if  ( ""get"" . equals ( http reques",255,2,filter,2,[80]
5743,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\GzipEncodingEnforcingFilter.java,get header,"@ override public  string   (  string name )  {  if  (  http headers . accept   encoding . equals ( name )  )   {  return ""gzip"" ;   }  return super . get header ( name )  ;   }  ",179,2,get,1,[151]
5744,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\GzipEncodingEnforcingFilter.java,get header,"@ override public  string   (  string name )  {  if  (  http headers . accept   encoding . equals ( name )  )   {  return ""gzip"" ;   }  return super . get header ( name )  ;   }  ",179,2,header,2,"[61, 155]"
5745,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\GzipEncodingEnforcingFilter.java,get header names,@ override public  enumeration <  string >    (  )  {  return new  enum wrapper <  string >  ( super . get header names (  )   http headers . accept   encoding )  ;   }  ,170,3,get,1,[103]
5746,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\GzipEncodingEnforcingFilter.java,get header names,@ override public  enumeration <  string >    (  )  {  return new  enum wrapper <  string >  ( super . get header names (  )   http headers . accept   encoding )  ;   }  ,170,3,header,2,"[107, 132]"
5747,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\GzipEncodingEnforcingFilter.java,get header names,@ override public  enumeration <  string >    (  )  {  return new  enum wrapper <  string >  ( super . get header names (  )   http headers . accept   encoding )  ;   }  ,170,3,names,3,[114]
5748,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\GzipEncodingEnforcingFilter.java,get headers,"@ override public  enumeration <  string >    (  string name )  {  if  (  http headers . accept   encoding . equals ( name )  )   {  return new  enum wrapper <  string >  ( ""gzip"" )  ;   }  return new  enum wrapper <  string >  ( super . get headers ( nam",255,2,get,1,[238]
5749,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\GzipEncodingEnforcingFilter.java,get headers,"@ override public  enumeration <  string >    (  string name )  {  if  (  http headers . accept   encoding . equals ( name )  )   {  return new  enum wrapper <  string >  ( ""gzip"" )  ;   }  return new  enum wrapper <  string >  ( super . get headers ( nam",255,2,headers,2,"[79, 242]"
5750,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\GzipEncodingEnforcingFilter.java,has more elements,@ override public boolean   (  )  {  return extra element ref . get (  )   !  =  null || delegate  !  =  null && delegate . has more elements (  )  ;   }  ,155,3,has,1,[124]
5751,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\GzipEncodingEnforcingFilter.java,has more elements,@ override public boolean   (  )  {  return extra element ref . get (  )   !  =  null || delegate  !  =  null && delegate . has more elements (  )  ;   }  ,155,3,more,2,[128]
5752,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\GzipEncodingEnforcingFilter.java,has more elements,@ override public boolean   (  )  {  return extra element ref . get (  )   !  =  null || delegate  !  =  null && delegate . has more elements (  )  ;   }  ,155,3,elements,3,[133]
5753,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\GzipEncodingEnforcingFilter.java,next element,@ override public e   (  )  {  e extra = extra element ref . get and set ( null )  ;  if  ( extra  !  =  null )   {  return extra ;   }  if  ( delegate  =  =  null )   {  throw new  no such element exception (  )  ;   }  return delegate . next element (  ,255,2,next,1,[239]
5754,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\GzipEncodingEnforcingFilter.java,next element,@ override public e   (  )  {  e extra = extra element ref . get and set ( null )  ;  if  ( extra  !  =  null )   {  return extra ;   }  if  ( delegate  =  =  null )   {  throw new  no such element exception (  )  ;   }  return delegate . next element (  ,255,2,element,2,"[47, 190, 244]"
5755,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\lease\Lease.java, lease,public   ( t r int duration in secs )  {  holder = r ;  registration timestamp =  system . current time millis (  )  ;  last update timestamp = registration timestamp ;  duration =  ( duration in secs * 1000 )  ;   }  ,218,1,lease,1,[]
5756,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\lease\Lease.java,cancel,public void   (  )  {  if  ( eviction timestamp  <  =  0 )   {  eviction timestamp =  system . current time millis (  )  ;   }   }  ,132,1,cancel,1,[]
5757,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\lease\Lease.java,get eviction timestamp,public long   (  )  {  return eviction timestamp ;   }  ,56,3,get,1,[]
5758,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\lease\Lease.java,get eviction timestamp,public long   (  )  {  return eviction timestamp ;   }  ,56,3,eviction,2,[30]
5759,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\lease\Lease.java,get eviction timestamp,public long   (  )  {  return eviction timestamp ;   }  ,56,3,timestamp,3,[39]
5760,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\lease\Lease.java,get holder,public t   (  )  {  return holder ;   }  ,41,2,get,1,[]
5761,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\lease\Lease.java,get holder,public t   (  )  {  return holder ;   }  ,41,2,holder,2,[27]
5762,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\lease\Lease.java,get last renewal timestamp,public long   (  )  {  return last update timestamp ;   }  ,59,4,get,1,[]
5763,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\lease\Lease.java,get last renewal timestamp,public long   (  )  {  return last update timestamp ;   }  ,59,4,last,2,[30]
5764,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\lease\Lease.java,get last renewal timestamp,public long   (  )  {  return last update timestamp ;   }  ,59,4,renewal,3,[]
5765,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\lease\Lease.java,get last renewal timestamp,public long   (  )  {  return last update timestamp ;   }  ,59,4,timestamp,4,[42]
5766,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\lease\Lease.java,get registration timestamp,public long   (  )  {  return registration timestamp ;   }  ,60,3,get,1,[]
5767,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\lease\Lease.java,get registration timestamp,public long   (  )  {  return registration timestamp ;   }  ,60,3,registration,2,[30]
5768,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\lease\Lease.java,get registration timestamp,public long   (  )  {  return registration timestamp ;   }  ,60,3,timestamp,3,[43]
5769,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\lease\Lease.java,get service up timestamp,public long   (  )  {  return service up timestamp ;   }  ,58,4,get,1,[]
5770,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\lease\Lease.java,get service up timestamp,public long   (  )  {  return service up timestamp ;   }  ,58,4,service,2,[30]
5771,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\lease\Lease.java,get service up timestamp,public long   (  )  {  return service up timestamp ;   }  ,58,4,up,3,[38]
5772,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\lease\Lease.java,get service up timestamp,public long   (  )  {  return service up timestamp ;   }  ,58,4,timestamp,4,[41]
5773,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\lease\Lease.java,is expired,public boolean   ( long additional lease ms )  {  return  ( eviction timestamp  >  0 ||  system . current time millis (  )   >   ( last update timestamp  +  duration  +  additional lease ms )  )  ;   }  ,203,2,is,1,[115]
5774,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\lease\Lease.java,is expired,public boolean   ( long additional lease ms )  {  return  ( eviction timestamp  >  0 ||  system . current time millis (  )   >   ( last update timestamp  +  duration  +  additional lease ms )  )  ;   }  ,203,2,expired,2,[]
5775,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\lease\Lease.java,renew,public void   (  )  {  last update timestamp =  system . current time millis (  )   +  duration ;   }  ,103,1,renew,1,[]
5776,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\lease\Lease.java,service up,public void   (  )  {  if  ( service up timestamp  =  =  0 )   {  service up timestamp =  system . current time millis (  )  ;   }   }  ,136,2,service,1,"[29, 66]"
5777,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\lease\Lease.java,service up,public void   (  )  {  if  ( service up timestamp  =  =  0 )   {  service up timestamp =  system . current time millis (  )  ;   }   }  ,136,2,up,2,"[37, 74]"
5778,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\lease\Lease.java,set service up timestamp,public void   ( long service up timestamp )  {  this . service up timestamp = service up timestamp ;   }  ,106,4,set,1,[]
5779,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\lease\Lease.java,set service up timestamp,public void   ( long service up timestamp )  {  this . service up timestamp = service up timestamp ;   }  ,106,4,service,2,"[21, 55, 78]"
5780,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\lease\Lease.java,set service up timestamp,public void   ( long service up timestamp )  {  this . service up timestamp = service up timestamp ;   }  ,106,4,up,3,"[29, 63, 86]"
5781,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\lease\Lease.java,set service up timestamp,public void   ( long service up timestamp )  {  this . service up timestamp = service up timestamp ;   }  ,106,4,timestamp,4,"[32, 66, 89]"
5782,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\RateLimitingFilter.java,do filter,@ override public void   (  servlet request request  servlet response response  filter chain chain )  throws io exception   servlet exception  {   target target = get target ( request )  ;  if  ( target  =  =   target .  other )   {  chain . do filter ( r,255,2,do,1,[242]
5783,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\RateLimitingFilter.java,do filter,@ override public void   (  servlet request request  servlet response response  filter chain chain )  throws io exception   servlet exception  {   target target = get target ( request )  ;  if  ( target  =  =   target .  other )   {  chain . do filter ( r,255,2,filter,2,"[80, 245]"
5784,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\RateLimitingFilter.java,get target,"private static  target   (  servlet request request )  {   target target =  target .  other ;  if  ( request instanceof  http servlet request )   {   http servlet request http request =  (  http servlet request ) request ;   string path info = http request . get requesturi (  )  ;  if  ( ""get"" . equals ( http request . get method (  )  )  && path info  !  =  null )   {   matcher matcher = target   re . matcher ( path info )  ;  if  ( matcher . matches (  )  )   {  if  ( matcher . group count (  )   =  =  0 || matcher . group ( 1 )   =  =  null || "" / "" . equals ( matcher . group ( 1 )  )  )   {  target =  target .  full fetch ;   }  else if  ( "" / delta"" . equals ( matcher . group ( 1 )  )  )   {  target =  target .  delta fetch ;   }  else  {  target =  target .  application ;   }   }   }  if  ( target  =  =   target .  other )   {  logger . debug ( ""url path  {  }  not matched by rate limiting filter"" path info )  ;   }   }  return target ;   }  ",962,2,get,1,"[19, 62, 69, 79, 259, 290, 321, 395, 606, 616, 710, 720, 758, 768, 811, 826, 951]"
5785,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\RateLimitingFilter.java,get target,"private static  target   (  servlet request request )  {   target target =  target .  other ;  if  ( request instanceof  http servlet request )   {   http servlet request http request =  (  http servlet request ) request ;   string path info = http request . get requesturi (  )  ;  if  ( ""get"" . equals ( http request . get method (  )  )  && path info  !  =  null )   {   matcher matcher = target   re . matcher ( path info )  ;  if  ( matcher . matches (  )  )   {  if  ( matcher . group count (  )   =  =  0 || matcher . group ( 1 )   =  =  null || "" / "" . equals ( matcher . group ( 1 )  )  )   {  target =  target .  full fetch ;   }  else if  ( "" / delta"" . equals ( matcher . group ( 1 )  )  )   {  target =  target .  delta fetch ;   }  else  {  target =  target .  application ;   }   }   }  if  ( target  =  =   target .  other )   {  logger . debug ( ""url path  {  }  not matched by rate limiting filter"" path info )  ;   }   }  return target ;   }  ",962,2,target,2,"[16, 59, 66, 76, 392, 603, 613, 707, 717, 755, 765, 808, 823, 948]"
5786,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\RateLimitingFilter.java,increment stats,private void   (  target target )  {  if  ( server config . is rate limiter enabled (  )  )   {   eureka monitors . rate   limited . increment (  )  ;  if  ( target  =  =   target .  full fetch )   {   eureka monitors . rate   limited   full   fetch . increment (  )  ;   }   }  else  {   eureka monitors . rate   limited   candidates . increment (  )  ;  if  ( target  =  =   target .  full fetch )   {   eureka monitors . rate   limited   full   fetch   candidates . increment (  )  ;   }   }   }  ,500,2,increment,1,"[133, 252, 337, 469]"
5787,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\RateLimitingFilter.java,increment stats,private void   (  target target )  {  if  ( server config . is rate limiter enabled (  )  )   {   eureka monitors . rate   limited . increment (  )  ;  if  ( target  =  =   target .  full fetch )   {   eureka monitors . rate   limited   full   fetch . increment (  )  ;   }   }  else  {   eureka monitors . rate   limited   candidates . increment (  )  ;  if  ( target  =  =   target .  full fetch )   {   eureka monitors . rate   limited   full   fetch   candidates . increment (  )  ;   }   }   }  ,500,2,stats,2,[]
5788,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\RateLimitingFilter.java,init,@ override public void   (  filter config filter config )  throws  servlet exception  {  if  ( server config  =  =  null )   {   eureka server context server context =  (  eureka server context ) filter config . get servlet context (  )  . get attribute (,255,1,init,1,[]
5789,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\RateLimitingFilter.java,is overloaded,private boolean   (  target target )  {  int max in window = server config . get rate limiter burst size (  )  ;  int fetch window size = server config . get rate limiter registry fetch average rate (  )  ;  boolean overloaded =  ! registry fetch rate limiter . acquire ( max in window fetch window size )  ;  if  ( target  =  =   target .  full fetch )   {  int full fetch window size = server config . get rate limiter full fetch average rate (  )  ;  overloaded| =  ! registry full fetch rate limiter . acquire ( max in window full fetch window size )  ;   }  return overloaded ;   }  ,588,2,is,1,"[174, 235, 474]"
5790,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\RateLimitingFilter.java,is overloaded,private boolean   (  target target )  {  int max in window = server config . get rate limiter burst size (  )  ;  int fetch window size = server config . get rate limiter registry fetch average rate (  )  ;  boolean overloaded =  ! registry fetch rate limiter . acquire ( max in window fetch window size )  ;  if  ( target  =  =   target .  full fetch )   {  int full fetch window size = server config . get rate limiter full fetch average rate (  )  ;  overloaded| =  ! registry full fetch rate limiter . acquire ( max in window full fetch window size )  ;   }  return overloaded ;   }  ,588,2,overloaded,2,"[216, 454, 570]"
5791,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\RateLimitingFilter.java,is privileged,private boolean   (  http servlet request request )  {  if  ( server config . is rate limiter throttle standard clients (  )  )   {  return false ;   }   set <  string >  privileged clients = server config . get rate limiter privileged clients (  )  ;   string client name = request . get header (  abstract eureka identity . auth   name   header   key )  ;  return privileged clients . contains ( client name )  || default   privileged   clients . contains ( client name )  ;   }  ,482,2,is,1,[78]
5792,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\RateLimitingFilter.java,is privileged,private boolean   (  http servlet request request )  {  if  ( server config . is rate limiter throttle standard clients (  )  )   {  return false ;   }   set <  string >  privileged clients = server config . get rate limiter privileged clients (  )  ;   string client name = request . get header (  abstract eureka identity . auth   name   header   key )  ;  return privileged clients . contains ( client name )  || default   privileged   clients . contains ( client name )  ;   }  ,482,2,privileged,2,"[171, 225, 366, 426]"
5793,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\RateLimitingFilter.java,is rate limited,"private boolean   (  http servlet request request  target target )  {  if  ( is privileged ( request )  )   {  logger . debug ( "" privileged  {  }  request"" target )  ;  return false ;   }  if  ( is overloaded ( target )  )   {  logger . debug ( "" overloaded  {  }  request ;  discarding it"" target )  ;  return true ;   }  logger . debug ( "" {  }  request admitted"" target )  ;  return false ;   }  ",400,3,is,1,"[77, 196, 278]"
5794,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\RateLimitingFilter.java,is rate limited,"private boolean   (  http servlet request request  target target )  {  if  ( is privileged ( request )  )   {  logger . debug ( "" privileged  {  }  request"" target )  ;  return false ;   }  if  ( is overloaded ( target )  )   {  logger . debug ( "" overloaded  {  }  request ;  discarding it"" target )  ;  return true ;   }  logger . debug ( "" {  }  request admitted"" target )  ;  return false ;   }  ",400,3,rate,2,[]
5795,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\RateLimitingFilter.java,is rate limited,"private boolean   (  http servlet request request  target target )  {  if  ( is privileged ( request )  )   {  logger . debug ( "" privileged  {  }  request"" target )  ;  return false ;   }  if  ( is overloaded ( target )  )   {  logger . debug ( "" overloaded  {  }  request ;  discarding it"" target )  ;  return true ;   }  logger . debug ( "" {  }  request admitted"" target )  ;  return false ;   }  ",400,3,limited,3,[]
5796,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\RateLimitingFilter.java,reset,static void   (  )  {  registry fetch rate limiter . reset (  )  ;  registry full fetch rate limiter . reset (  )  ;   }  ,122,1,reset,1,"[53, 103]"
5797,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\AbstractInstanceRegistry.java, abstract instance registry,protected   (  eureka server config server config  eureka client config client config  server codecs server codecs )  {  this . server config = server config ;  this . client config = client config ;  this . server codecs = server codecs ;  this . recent canceled queue = new  circular queue <  pair <  long  string >  >  ( 1000 )  ;  this . recent registered queue = new  circular queue <  pair <  long  string >  >  ( 1000 )  ;  this . renews last min = new  measured rate ( 1000 * 60 * 1 )  ;  this . delta retention timer . schedule ( get delta retention task (  )  server config . get delta retention timer interval in ms (  )  server config . get delta retention timer interval in ms (  )  )  ;   }  ,706,3,abstract,1,[]
5798,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\AbstractInstanceRegistry.java, abstract instance registry,protected   (  eureka server config server config  eureka client config client config  server codecs server codecs )  {  this . server config = server config ;  this . client config = client config ;  this . server codecs = server codecs ;  this . recent canceled queue = new  circular queue <  pair <  long  string >  >  ( 1000 )  ;  this . recent registered queue = new  circular queue <  pair <  long  string >  >  ( 1000 )  ;  this . renews last min = new  measured rate ( 1000 * 60 * 1 )  ;  this . delta retention timer . schedule ( get delta retention task (  )  server config . get delta retention timer interval in ms (  )  server config . get delta retention timer interval in ms (  )  )  ;   }  ,706,3,instance,2,[]
5799,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\AbstractInstanceRegistry.java, abstract instance registry,protected   (  eureka server config server config  eureka client config client config  server codecs server codecs )  {  this . server config = server config ;  this . client config = client config ;  this . server codecs = server codecs ;  this . recent canceled queue = new  circular queue <  pair <  long  string >  >  ( 1000 )  ;  this . recent registered queue = new  circular queue <  pair <  long  string >  >  ( 1000 )  ;  this . renews last min = new  measured rate ( 1000 * 60 * 1 )  ;  this . delta retention timer . schedule ( get delta retention task (  )  server config . get delta retention timer interval in ms (  )  server config . get delta retention timer interval in ms (  )  )  ;   }  ,706,3,registry,3,[]
5800,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\AbstractInstanceRegistry.java, circular queue,public   ( int size )  {  this . size = size ;   }  ,52,2,circular,1,[]
5801,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\AbstractInstanceRegistry.java, circular queue,public   ( int size )  {  this . size = size ;   }  ,52,2,queue,2,[]
5802,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\AbstractInstanceRegistry.java, recently changed item,public   (  lease <  instance info >  lease )  {  this . lease info = lease ;  last update time =  system . current time millis (  )  ;   }  ,141,3,recently,1,[]
5803,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\AbstractInstanceRegistry.java, recently changed item,public   (  lease <  instance info >  lease )  {  this . lease info = lease ;  last update time =  system . current time millis (  )  ;   }  ,141,3,changed,2,[]
5804,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\AbstractInstanceRegistry.java, recently changed item,public   (  lease <  instance info >  lease )  {  this . lease info = lease ;  last update time =  system . current time millis (  )  ;   }  ,141,3,item,3,[]
5805,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\AbstractInstanceRegistry.java,add,@ override public boolean   ( e e )  {  this . make space if not available (  )  ;  return super . add ( e )  ;   }  ,117,1,add,1,[99]
5806,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\AbstractInstanceRegistry.java,cancel,@ override public boolean   (  string app name  string id boolean is replication )  {  return internal cancel ( app name id is replication )  ;   }  ,149,1,cancel,1,[103]
5807,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\AbstractInstanceRegistry.java,clear registry,@ override public void   (  )  {  overridden instance status map . clear (  )  ;  recent canceled queue . clear (  )  ;  recent registered queue . clear (  )  ;  recently changed queue . clear (  )  ;  registry . clear (  )  ;   }  ,232,2,clear,1,"[67, 106, 147, 187, 213]"
5808,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\AbstractInstanceRegistry.java,clear registry,@ override public void   (  )  {  overridden instance status map . clear (  )  ;  recent canceled queue . clear (  )  ;  recent registered queue . clear (  )  ;  recently changed queue . clear (  )  ;  registry . clear (  )  ;   }  ,232,2,registry,2,[202]
5809,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\AbstractInstanceRegistry.java,decorate instance info,private  instance info   (  lease <  instance info >  lease )  {   instance info info = lease . get holder (  )  ;  int renewal interval =  lease info . default   lease   renewal   interval ;  int lease duration =  lease info . default   lease   duration ;  if  ( info . get lease info (  )   !  =  null )   {  renewal interval = info . get lease info (  )  . get renewal interval in secs (  )  ;  lease duration = info . get lease info (  )  . get duration in secs (  )  ;   }  info . set lease info (  lease info .  builder . new builder (  )  . set registration timestamp ( lease . get registration timestamp (  )  )  . set renewal timestamp ( lease . get last renewal timestamp (  )  )  . set service up timestamp ( lease . get service up timestamp (  )  )  . set renewal interval in secs ( renewal interval )  . set duration in secs ( lease duration )  . set eviction timestamp ( lease . get eviction timestamp (  )  )  . build (  )  )  ;  info . set is coordinating discovery server (  )  ;  return info ;   }  ,1017,3,decorate,1,[]
5810,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\AbstractInstanceRegistry.java,decorate instance info,private  instance info   (  lease <  instance info >  lease )  {   instance info info = lease . get holder (  )  ;  int renewal interval =  lease info . default   lease   renewal   interval ;  int lease duration =  lease info . default   lease   duration ;  if  ( info . get lease info (  )   !  =  null )   {  renewal interval = info . get lease info (  )  . get renewal interval in secs (  )  ;  lease duration = info . get lease info (  )  . get duration in secs (  )  ;   }  info . set lease info (  lease info .  builder . new builder (  )  . set registration timestamp ( lease . get registration timestamp (  )  )  . set renewal timestamp ( lease . get last renewal timestamp (  )  )  . set service up timestamp ( lease . get service up timestamp (  )  )  . set renewal interval in secs ( renewal interval )  . set duration in secs ( lease duration )  . set eviction timestamp ( lease . get eviction timestamp (  )  )  . build (  )  )  ;  info . set is coordinating discovery server (  )  ;  return info ;   }  ,1017,3,instance,2,"[9, 37, 67]"
5811,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\AbstractInstanceRegistry.java,decorate instance info,private  instance info   (  lease <  instance info >  lease )  {   instance info info = lease . get holder (  )  ;  int renewal interval =  lease info . default   lease   renewal   interval ;  int lease duration =  lease info . default   lease   duration ;  if  ( info . get lease info (  )   !  =  null )   {  renewal interval = info . get lease info (  )  . get renewal interval in secs (  )  ;  lease duration = info . get lease info (  )  . get duration in secs (  )  ;   }  info . set lease info (  lease info .  builder . new builder (  )  . set registration timestamp ( lease . get registration timestamp (  )  )  . set renewal timestamp ( lease . get last renewal timestamp (  )  )  . set service up timestamp ( lease . get service up timestamp (  )  )  . set renewal interval in secs ( renewal interval )  . set duration in secs ( lease duration )  . set eviction timestamp ( lease . get eviction timestamp (  )  )  . build (  )  )  ;  info . set is coordinating discovery server (  )  ;  return info ;   }  ,1017,3,info,3,"[18, 46, 76, 81, 146, 221, 264, 281, 330, 347, 415, 432, 479, 496, 510, 945, 1005]"
5812,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\AbstractInstanceRegistry.java,delete status override,@ override public boolean   (  string app name  string id  instance status new status  string last dirty timestamp boolean is replication )  {  try  {  read . lock (  )  ;  status   override   delete . increment ( is replication )  ;   map <  string  leas,255,3,delete,1,[193]
5813,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\AbstractInstanceRegistry.java,delete status override,@ override public boolean   (  string app name  string id  instance status new status  string last dirty timestamp boolean is replication )  {  try  {  read . lock (  )  ;  status   override   delete . increment ( is replication )  ;   map <  string  leas,255,3,status,2,"[68, 79, 173]"
5814,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\AbstractInstanceRegistry.java,delete status override,@ override public boolean   (  string app name  string id  instance status new status  string last dirty timestamp boolean is replication )  {  try  {  read . lock (  )  ;  status   override   delete . increment ( is replication )  ;   map <  string  leas,255,3,override,3,"[2, 182]"
5815,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\AbstractInstanceRegistry.java,evict,"public void   ( long additional lease ms )  {  logger . debug ( "" running the evict task"" )  ;  if  (  ! is lease expiration enabled (  )  )   {  logger . debug ( ""ds: lease expiration is currently disabled . "" )  ;  return ;   }   list <  lease <  instance info >  >  expired leases = new  array list <  >  (  )  ;  for  (   entry <  string  map <  string  lease <  instance info >  >  >  group entry : registry . entry set (  )  )   {   map <  string  lease <  instance info >  >  lease map = group entry . get value (  )  ;  if  ( lease map  !  =  null )   {  for  (   entry <  string  lease <  instance info >  >  lease entry : lease map . entry set (  )  )   {   lease <  instance info >  lease = lease entry . get value (  )  ;  if  ( lease . is expired ( additional lease ms )  && lease . get holder (  )   !  =  null )   {  expired leases . add ( lease )  ;   }   }   }   }  int registry size =  ( int ) get local registry size (  )  ;  int registry size threshold =  ( int )  ( registry size * server config . get renewal percent threshold (  )  )  ;  int eviction limit = registry size  -  registry size threshold ;  int to evict =  math . min ( expired leases . size (  )  eviction limit )  ;  if  ( to evict  >  0 )   {  logger . info ( "" evicting  {  }  items  ( expired =  {  }   eviction limit =  {  }  ) "" to evict expired leases . size (  )  eviction limit )  ;   random random = new  random (  system . current time millis (  )  )  ;  for  ( int i = 0 ;  i  <  to evict ;  i +  +  )   {  int next = i  +  random . next int ( expired leases . size (  )   -  i )  ;   collections . swap ( expired leases i next )  ;   lease <  instance info >  lease = expired leases . get ( i )  ;   string app name = lease . get holder (  )  . get app name (  )  ;   string id = lease . get holder (  )  . get id (  )  ;  expired . increment (  )  ;  logger . warn ( ""ds:  registry: expired lease for  {  }  /  {  } "" app name id )  ;  internal cancel ( app name id false )  ;   }   }   }  ",1991,1,evict,1,"[78, 1065, 1134, 1184, 1214, 1251, 1294, 1325, 1359, 1482]"
5816,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\AbstractInstanceRegistry.java,get application,@ override public  application   (  string app name boolean include remote region )  {   application app = null ;   map <  string  lease <  instance info >  >  lease map = registry . get ( app name )  ;  if  ( lease map  !  =  null && lease map . size (  ,255,2,get,1,[183]
5817,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\AbstractInstanceRegistry.java,get application,@ override public  application   (  string app name boolean include remote region )  {   application app = null ;   map <  string  lease <  instance info >  >  lease map = registry . get ( app name )  ;  if  ( lease map  !  =  null && lease map . size (  ,255,2,application,2,"[19, 89]"
5818,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\AbstractInstanceRegistry.java,get application deltas,@ deprecated public  applications   (  )  {  get   all   cache   miss   delta . increment (  )  ;   applications apps = new  applications (  )  ;  apps . set version ( response cache . get version delta (  )  . get (  )  )  ;   map <  string  application ,255,3,get,1,"[45, 185, 211]"
5819,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\AbstractInstanceRegistry.java,get application deltas,@ deprecated public  applications   (  )  {  get   all   cache   miss   delta . increment (  )  ;   applications apps = new  applications (  )  ;  apps . set version ( response cache . get version delta (  )  . get (  )  )  ;   map <  string  application ,255,3,application,2,"[21, 100, 125, 243]"
5820,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\AbstractInstanceRegistry.java,get application deltas,@ deprecated public  applications   (  )  {  get   all   cache   miss   delta . increment (  )  ;   applications apps = new  applications (  )  ;  apps . set version ( response cache . get version delta (  )  . get (  )  )  ;   map <  string  application ,255,3,deltas,3,[]
5821,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\AbstractInstanceRegistry.java,get application deltas from multiple regions,"public  applications   (  string[] remote regions )  {  if  ( null  =  =  remote regions )   {  remote regions = all known remote regions ;   }  boolean include remote region = remote regions . length  !  =  0 ;  if  ( include remote region )   {  get   all   with   remote   regions   cache   miss   delta . increment (  )  ;   }  else  {  get   all   cache   miss   delta . increment (  )  ;   }   applications apps = new  applications (  )  ;  apps . set version ( response cache . get version delta with regions (  )  . get (  )  )  ;   map <  string  application >  application instances map = new  hash map <  string  application >  (  )  ;  try  {  write . lock (  )  ;   iterator <  recently changed item >  iter = this . recently changed queue . iterator (  )  ;  logger . debug ( "" the number of elements in the delta queue is : {  } "" this . recently changed queue . size (  )  )  ;  while  ( iter . has next (  )  )   {   lease <  instance info >  lease = iter . next (  )  . get lease info (  )  ;   instance info instance info = lease . get holder (  )  ;  logger . debug ( "" the instance id  {  }  is found with status  {  }  and actiontype  {  } "" instance info . get id (  )  instance info . get status (  )  . name (  )  instance info . get action type (  )  . name (  )  )  ;   application app = application instances map . get ( instance info . get app name (  )  )  ;  if  ( app  =  =  null )   {  app = new  application ( instance info . get app name (  )  )  ;  application instances map . put ( instance info . get app name (  )  app )  ;  apps . add application ( app )  ;   }  app . add instance ( decorate instance info ( lease )  )  ;   }  if  ( include remote region )   {  for  (   string remote region : remote regions )   {   remote region registry remote registry = region namevs remote registry . get ( remote region )  ;  if  ( null  !  =  remote registry )   {   applications remote apps delta = remote registry . get application deltas (  )  ;  if  ( null  !  =  remote apps delta )   {  for  (   application application : remote apps delta . get registered applications (  )  )   {  if  ( should fetch from remote registry ( application . get name (  )  remote region )  )   {   application app instance till now = apps . get registered applications ( application . get name (  )  )  ;  if  ( app instance till now  =  =  null )   {  app instance till now = new  application ( application . get name (  )  )  ;  apps . add application ( app instance till now )  ;   }  for  (   instance info instance info : application . get instances (  )  )   {  app instance till now . add instance ( instance info )  ;   }   }   }   }   }   }   }   applications all apps = get applications from multiple regions ( remote regions )  ;  apps . set apps hash code ( all apps . get reconcile hash code (  )  )  ;  return apps ;   }  finally  {  write . unlock (  )  ;   }   }  ",2899,6,get,1,"[248, 341, 485, 524, 988, 1051, 1180, 1209, 1255, 1343, 1365, 1460, 1535, 1831, 1950, 2080, 2177, 2260, 2304, 2429, 2560, 2699, 2800]"
5822,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\AbstractInstanceRegistry.java,get application deltas from multiple regions,"public  applications   (  string[] remote regions )  {  if  ( null  =  =  remote regions )   {  remote regions = all known remote regions ;   }  boolean include remote region = remote regions . length  !  =  0 ;  if  ( include remote region )   {  get   all   with   remote   regions   cache   miss   delta . increment (  )  ;   }  else  {  get   all   cache   miss   delta . increment (  )  ;   }   applications apps = new  applications (  )  ;  apps . set version ( response cache . get version delta with regions (  )  . get (  )  )  ;   map <  string  application >  application instances map = new  hash map <  string  application >  (  )  ;  try  {  write . lock (  )  ;   iterator <  recently changed item >  iter = this . recently changed queue . iterator (  )  ;  logger . debug ( "" the number of elements in the delta queue is : {  } "" this . recently changed queue . size (  )  )  ;  while  ( iter . has next (  )  )   {   lease <  instance info >  lease = iter . next (  )  . get lease info (  )  ;   instance info instance info = lease . get holder (  )  ;  logger . debug ( "" the instance id  {  }  is found with status  {  }  and actiontype  {  } "" instance info . get id (  )  instance info . get status (  )  . name (  )  instance info . get action type (  )  . name (  )  )  ;   application app = application instances map . get ( instance info . get app name (  )  )  ;  if  ( app  =  =  null )   {  app = new  application ( instance info . get app name (  )  )  ;  application instances map . put ( instance info . get app name (  )  app )  ;  apps . add application ( app )  ;   }  app . add instance ( decorate instance info ( lease )  )  ;   }  if  ( include remote region )   {  for  (   string remote region : remote regions )   {   remote region registry remote registry = region namevs remote registry . get ( remote region )  ;  if  ( null  !  =  remote registry )   {   applications remote apps delta = remote registry . get application deltas (  )  ;  if  ( null  !  =  remote apps delta )   {  for  (   application application : remote apps delta . get registered applications (  )  )   {  if  ( should fetch from remote registry ( application . get name (  )  remote region )  )   {   application app instance till now = apps . get registered applications ( application . get name (  )  )  ;  if  ( app instance till now  =  =  null )   {  app instance till now = new  application ( application . get name (  )  )  ;  apps . add application ( app instance till now )  ;   }  for  (   instance info instance info : application . get instances (  )  )   {  app instance till now . add instance ( instance info )  ;   }   }   }   }   }   }   }   applications all apps = get applications from multiple regions ( remote regions )  ;  apps . set apps hash code ( all apps . get reconcile hash code (  )  )  ;  return apps ;   }  finally  {  write . unlock (  )  ;   }   }  ",2899,6,application,2,"[8, 400, 425, 556, 571, 624, 1297, 1315, 1430, 1485, 1575, 1899, 1954, 2034, 2046, 2095, 2163, 2217, 2275, 2290, 2401, 2415, 2461, 2546, 2675, 2703]"
5823,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\AbstractInstanceRegistry.java,get application deltas from multiple regions,"public  applications   (  string[] remote regions )  {  if  ( null  =  =  remote regions )   {  remote regions = all known remote regions ;   }  boolean include remote region = remote regions . length  !  =  0 ;  if  ( include remote region )   {  get   all   with   remote   regions   cache   miss   delta . increment (  )  ;   }  else  {  get   all   cache   miss   delta . increment (  )  ;   }   applications apps = new  applications (  )  ;  apps . set version ( response cache . get version delta with regions (  )  . get (  )  )  ;   map <  string  application >  application instances map = new  hash map <  string  application >  (  )  ;  try  {  write . lock (  )  ;   iterator <  recently changed item >  iter = this . recently changed queue . iterator (  )  ;  logger . debug ( "" the number of elements in the delta queue is : {  } "" this . recently changed queue . size (  )  )  ;  while  ( iter . has next (  )  )   {   lease <  instance info >  lease = iter . next (  )  . get lease info (  )  ;   instance info instance info = lease . get holder (  )  ;  logger . debug ( "" the instance id  {  }  is found with status  {  }  and actiontype  {  } "" instance info . get id (  )  instance info . get status (  )  . name (  )  instance info . get action type (  )  . name (  )  )  ;   application app = application instances map . get ( instance info . get app name (  )  )  ;  if  ( app  =  =  null )   {  app = new  application ( instance info . get app name (  )  )  ;  application instances map . put ( instance info . get app name (  )  app )  ;  apps . add application ( app )  ;   }  app . add instance ( decorate instance info ( lease )  )  ;   }  if  ( include remote region )   {  for  (   string remote region : remote regions )   {   remote region registry remote registry = region namevs remote registry . get ( remote region )  ;  if  ( null  !  =  remote registry )   {   applications remote apps delta = remote registry . get application deltas (  )  ;  if  ( null  !  =  remote apps delta )   {  for  (   application application : remote apps delta . get registered applications (  )  )   {  if  ( should fetch from remote registry ( application . get name (  )  remote region )  )   {   application app instance till now = apps . get registered applications ( application . get name (  )  )  ;  if  ( app instance till now  =  =  null )   {  app instance till now = new  application ( application . get name (  )  )  ;  apps . add application ( app instance till now )  ;   }  for  (   instance info instance info : application . get instances (  )  )   {  app instance till now . add instance ( instance info )  ;   }   }   }   }   }   }   }   applications all apps = get applications from multiple regions ( remote regions )  ;  apps . set apps hash code ( all apps . get reconcile hash code (  )  )  ;  return apps ;   }  finally  {  write . unlock (  )  ;   }   }  ",2899,6,deltas,3,[1966]
5824,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\AbstractInstanceRegistry.java,get application deltas from multiple regions,"public  applications   (  string[] remote regions )  {  if  ( null  =  =  remote regions )   {  remote regions = all known remote regions ;   }  boolean include remote region = remote regions . length  !  =  0 ;  if  ( include remote region )   {  get   all   with   remote   regions   cache   miss   delta . increment (  )  ;   }  else  {  get   all   cache   miss   delta . increment (  )  ;   }   applications apps = new  applications (  )  ;  apps . set version ( response cache . get version delta with regions (  )  . get (  )  )  ;   map <  string  application >  application instances map = new  hash map <  string  application >  (  )  ;  try  {  write . lock (  )  ;   iterator <  recently changed item >  iter = this . recently changed queue . iterator (  )  ;  logger . debug ( "" the number of elements in the delta queue is : {  } "" this . recently changed queue . size (  )  )  ;  while  ( iter . has next (  )  )   {   lease <  instance info >  lease = iter . next (  )  . get lease info (  )  ;   instance info instance info = lease . get holder (  )  ;  logger . debug ( "" the instance id  {  }  is found with status  {  }  and actiontype  {  } "" instance info . get id (  )  instance info . get status (  )  . name (  )  instance info . get action type (  )  . name (  )  )  ;   application app = application instances map . get ( instance info . get app name (  )  )  ;  if  ( app  =  =  null )   {  app = new  application ( instance info . get app name (  )  )  ;  application instances map . put ( instance info . get app name (  )  app )  ;  apps . add application ( app )  ;   }  app . add instance ( decorate instance info ( lease )  )  ;   }  if  ( include remote region )   {  for  (   string remote region : remote regions )   {   remote region registry remote registry = region namevs remote registry . get ( remote region )  ;  if  ( null  !  =  remote registry )   {   applications remote apps delta = remote registry . get application deltas (  )  ;  if  ( null  !  =  remote apps delta )   {  for  (   application application : remote apps delta . get registered applications (  )  )   {  if  ( should fetch from remote registry ( application . get name (  )  remote region )  )   {   application app instance till now = apps . get registered applications ( application . get name (  )  )  ;  if  ( app instance till now  =  =  null )   {  app instance till now = new  application ( application . get name (  )  )  ;  apps . add application ( app instance till now )  ;   }  for  (   instance info instance info : application . get instances (  )  )   {  app instance till now . add instance ( instance info )  ;   }   }   }   }   }   }   }   applications all apps = get applications from multiple regions ( remote regions )  ;  apps . set apps hash code ( all apps . get reconcile hash code (  )  )  ;  return apps ;   }  finally  {  write . unlock (  )  ;   }   }  ",2899,6,from,4,"[2140, 2716]"
5825,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\AbstractInstanceRegistry.java,get application deltas from multiple regions,"public  applications   (  string[] remote regions )  {  if  ( null  =  =  remote regions )   {  remote regions = all known remote regions ;   }  boolean include remote region = remote regions . length  !  =  0 ;  if  ( include remote region )   {  get   all   with   remote   regions   cache   miss   delta . increment (  )  ;   }  else  {  get   all   cache   miss   delta . increment (  )  ;   }   applications apps = new  applications (  )  ;  apps . set version ( response cache . get version delta with regions (  )  . get (  )  )  ;   map <  string  application >  application instances map = new  hash map <  string  application >  (  )  ;  try  {  write . lock (  )  ;   iterator <  recently changed item >  iter = this . recently changed queue . iterator (  )  ;  logger . debug ( "" the number of elements in the delta queue is : {  } "" this . recently changed queue . size (  )  )  ;  while  ( iter . has next (  )  )   {   lease <  instance info >  lease = iter . next (  )  . get lease info (  )  ;   instance info instance info = lease . get holder (  )  ;  logger . debug ( "" the instance id  {  }  is found with status  {  }  and actiontype  {  } "" instance info . get id (  )  instance info . get status (  )  . name (  )  instance info . get action type (  )  . name (  )  )  ;   application app = application instances map . get ( instance info . get app name (  )  )  ;  if  ( app  =  =  null )   {  app = new  application ( instance info . get app name (  )  )  ;  application instances map . put ( instance info . get app name (  )  app )  ;  apps . add application ( app )  ;   }  app . add instance ( decorate instance info ( lease )  )  ;   }  if  ( include remote region )   {  for  (   string remote region : remote regions )   {   remote region registry remote registry = region namevs remote registry . get ( remote region )  ;  if  ( null  !  =  remote registry )   {   applications remote apps delta = remote registry . get application deltas (  )  ;  if  ( null  !  =  remote apps delta )   {  for  (   application application : remote apps delta . get registered applications (  )  )   {  if  ( should fetch from remote registry ( application . get name (  )  remote region )  )   {   application app instance till now = apps . get registered applications ( application . get name (  )  )  ;  if  ( app instance till now  =  =  null )   {  app instance till now = new  application ( application . get name (  )  )  ;  apps . add application ( app instance till now )  ;   }  for  (   instance info instance info : application . get instances (  )  )   {  app instance till now . add instance ( instance info )  ;   }   }   }   }   }   }   }   applications all apps = get applications from multiple regions ( remote regions )  ;  apps . set apps hash code ( all apps . get reconcile hash code (  )  )  ;  return apps ;   }  finally  {  write . unlock (  )  ;   }   }  ",2899,6,multiple,5,[2721]
5826,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\AbstractInstanceRegistry.java,get application deltas from multiple regions,"public  applications   (  string[] remote regions )  {  if  ( null  =  =  remote regions )   {  remote regions = all known remote regions ;   }  boolean include remote region = remote regions . length  !  =  0 ;  if  ( include remote region )   {  get   all   with   remote   regions   cache   miss   delta . increment (  )  ;   }  else  {  get   all   cache   miss   delta . increment (  )  ;   }   applications apps = new  applications (  )  ;  apps . set version ( response cache . get version delta with regions (  )  . get (  )  )  ;   map <  string  application >  application instances map = new  hash map <  string  application >  (  )  ;  try  {  write . lock (  )  ;   iterator <  recently changed item >  iter = this . recently changed queue . iterator (  )  ;  logger . debug ( "" the number of elements in the delta queue is : {  } "" this . recently changed queue . size (  )  )  ;  while  ( iter . has next (  )  )   {   lease <  instance info >  lease = iter . next (  )  . get lease info (  )  ;   instance info instance info = lease . get holder (  )  ;  logger . debug ( "" the instance id  {  }  is found with status  {  }  and actiontype  {  } "" instance info . get id (  )  instance info . get status (  )  . name (  )  instance info . get action type (  )  . name (  )  )  ;   application app = application instances map . get ( instance info . get app name (  )  )  ;  if  ( app  =  =  null )   {  app = new  application ( instance info . get app name (  )  )  ;  application instances map . put ( instance info . get app name (  )  app )  ;  apps . add application ( app )  ;   }  app . add instance ( decorate instance info ( lease )  )  ;   }  if  ( include remote region )   {  for  (   string remote region : remote regions )   {   remote region registry remote registry = region namevs remote registry . get ( remote region )  ;  if  ( null  !  =  remote registry )   {   applications remote apps delta = remote registry . get application deltas (  )  ;  if  ( null  !  =  remote apps delta )   {  for  (   application application : remote apps delta . get registered applications (  )  )   {  if  ( should fetch from remote registry ( application . get name (  )  remote region )  )   {   application app instance till now = apps . get registered applications ( application . get name (  )  )  ;  if  ( app instance till now  =  =  null )   {  app instance till now = new  application ( application . get name (  )  )  ;  apps . add application ( app instance till now )  ;   }  for  (   instance info instance info : application . get instances (  )  )   {  app instance till now . add instance ( instance info )  ;   }   }   }   }   }   }   }   applications all apps = get applications from multiple regions ( remote regions )  ;  apps . set apps hash code ( all apps . get reconcile hash code (  )  )  ;  return apps ;   }  finally  {  write . unlock (  )  ;   }   }  ",2899,6,regions,6,"[42, 81, 103, 130, 184, 276, 508, 1742, 2730, 2747]"
5827,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\AbstractInstanceRegistry.java,get applications,@ deprecated public  applications   ( boolean include remote region )  {  get   all   cache   miss . increment (  )  ;   applications apps = new  applications (  )  ;  apps . set version ( 1l )  ;  for  (   entry <  string  map <  string  lease <  instanc,255,2,get,1,[74]
5828,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\AbstractInstanceRegistry.java,get applications,@ deprecated public  applications   ( boolean include remote region )  {  get   all   cache   miss . increment (  )  ;   applications apps = new  applications (  )  ;  apps . set version ( 1l )  ;  for  (   entry <  string  map <  string  lease <  instanc,255,2,applications,2,"[21, 121, 146]"
5829,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\AbstractInstanceRegistry.java,get applications from all remote regions,public  applications   (  )  {  return get applications from multiple regions ( all known remote regions )  ;   }  ,115,6,get,1,[39]
5830,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\AbstractInstanceRegistry.java,get applications from all remote regions,public  applications   (  )  {  return get applications from multiple regions ( all known remote regions )  ;   }  ,115,6,applications,2,"[8, 43]"
5831,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\AbstractInstanceRegistry.java,get applications from all remote regions,public  applications   (  )  {  return get applications from multiple regions ( all known remote regions )  ;   }  ,115,6,from,3,[56]
5832,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\AbstractInstanceRegistry.java,get applications from all remote regions,public  applications   (  )  {  return get applications from multiple regions ( all known remote regions )  ;   }  ,115,6,all,4,[80]
5833,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\AbstractInstanceRegistry.java,get applications from all remote regions,public  applications   (  )  {  return get applications from multiple regions ( all known remote regions )  ;   }  ,115,6,remote,5,[90]
5834,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\AbstractInstanceRegistry.java,get applications from all remote regions,public  applications   (  )  {  return get applications from multiple regions ( all known remote regions )  ;   }  ,115,6,regions,6,"[70, 97]"
5835,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\AbstractInstanceRegistry.java,get applications from local region only,@ override public  applications   (  )  {  return get applications from multiple regions ( empty   str   array )  ;   }  ,121,6,get,1,[50]
5836,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\AbstractInstanceRegistry.java,get applications from local region only,@ override public  applications   (  )  {  return get applications from multiple regions ( empty   str   array )  ;   }  ,121,6,applications,2,"[19, 54]"
5837,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\AbstractInstanceRegistry.java,get applications from local region only,@ override public  applications   (  )  {  return get applications from multiple regions ( empty   str   array )  ;   }  ,121,6,from,3,[67]
5838,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\AbstractInstanceRegistry.java,get applications from local region only,@ override public  applications   (  )  {  return get applications from multiple regions ( empty   str   array )  ;   }  ,121,6,local,4,[]
5839,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\AbstractInstanceRegistry.java,get applications from local region only,@ override public  applications   (  )  {  return get applications from multiple regions ( empty   str   array )  ;   }  ,121,6,region,5,[81]
5840,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\AbstractInstanceRegistry.java,get applications from local region only,@ override public  applications   (  )  {  return get applications from multiple regions ( empty   str   array )  ;   }  ,121,6,only,6,[]
5841,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\AbstractInstanceRegistry.java,get applications from multiple regions,"public  applications   (  string[] remote regions )  {  boolean include remote region = null  !  =  remote regions && remote regions . length  !  =  0 ;  logger . debug ( "" fetching applications registry with remote regions:  {  }    regions argument  {  } "" include remote region remote regions )  ;  if  ( include remote region )   {  get   all   with   remote   regions   cache   miss . increment (  )  ;   }  else  {  get   all   cache   miss . increment (  )  ;   }   applications apps = new  applications (  )  ;  apps . set version ( 1l )  ;  for  (   entry <  string  map <  string  lease <  instance info >  >  >  entry : registry . entry set (  )  )   {   application app = null ;  if  ( entry . get value (  )   !  =  null )   {  for  (   entry <  string  lease <  instance info >  >  string lease entry : entry . get value (  )  . entry set (  )  )   {   lease <  instance info >  lease = string lease entry . get value (  )  ;  if  ( app  =  =  null )   {  app = new  application ( lease . get holder (  )  . get app name (  )  )  ;   }  app . add instance ( decorate instance info ( lease )  )  ;   }   }  if  ( app  !  =  null )   {  apps . add application ( app )  ;   }   }  if  ( include remote region )   {  for  (   string remote region : remote regions )   {   remote region registry remote registry = region namevs remote registry . get ( remote region )  ;  if  ( null  !  =  remote registry )   {   applications remote apps = remote registry . get applications (  )  ;  for  (   application application : remote apps . get registered applications (  )  )   {  if  ( should fetch from remote registry ( application . get name (  )  remote region )  )   {  logger . info ( "" application  {  }  fetched from the remote region  {  } "" application . get name (  )  remote region )  ;   application app instance till now = apps . get registered applications ( application . get name (  )  )  ;  if  ( app instance till now  =  =  null )   {  app instance till now = new  application ( application . get name (  )  )  ;  apps . add application ( app instance till now )  ;   }  for  (   instance info instance info : application . get instances (  )  )   {  app instance till now . add instance ( instance info )  ;   }   }  else  {  logger . debug ( "" application  {  }  not fetched from the remote region  {  }  as there exists a ""  +  ""whitelist and this app is not in the whitelist . "" application . get name (  )  remote region )  ;   }   }   }  else  {  logger . warn ( "" no remote registry available for the remote region  {  } "" remote region )  ;   }   }   }  apps . set apps hash code ( apps . get reconcile hash code (  )  )  ;  return apps ;   }  ",2676,5,get,1,"[337, 422, 706, 825, 922, 1003, 1022, 1355, 1468, 1543, 1640, 1769, 1848, 1892, 2017, 2148, 2421, 2621]"
5842,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\AbstractInstanceRegistry.java,get applications from multiple regions,"public  applications   (  string[] remote regions )  {  boolean include remote region = null  !  =  remote regions && remote regions . length  !  =  0 ;  logger . debug ( "" fetching applications registry with remote regions:  {  }    regions argument  {  } "" include remote region remote regions )  ;  if  ( include remote region )   {  get   all   with   remote   regions   cache   miss . increment (  )  ;   }  else  {  get   all   cache   miss . increment (  )  ;   }   applications apps = new  applications (  )  ;  apps . set version ( 1l )  ;  for  (   entry <  string  map <  string  lease <  instance info >  >  >  entry : registry . entry set (  )  )   {   application app = null ;  if  ( entry . get value (  )   !  =  null )   {  for  (   entry <  string  lease <  instance info >  >  string lease entry : entry . get value (  )  . entry set (  )  )   {   lease <  instance info >  lease = string lease entry . get value (  )  ;  if  ( app  =  =  null )   {  app = new  application ( lease . get holder (  )  . get app name (  )  )  ;   }  app . add instance ( decorate instance info ( lease )  )  ;   }   }  if  ( app  !  =  null )   {  apps . add application ( app )  ;   }   }  if  ( include remote region )   {  for  (   string remote region : remote regions )   {   remote region registry remote registry = region namevs remote registry . get ( remote region )  ;  if  ( null  !  =  remote registry )   {   applications remote apps = remote registry . get applications (  )  ;  for  (   application application : remote apps . get registered applications (  )  )   {  if  ( should fetch from remote registry ( application . get name (  )  remote region )  )   {  logger . info ( "" application  {  }  fetched from the remote region  {  } "" application . get name (  )  remote region )  ;   application app instance till now = apps . get registered applications ( application . get name (  )  )  ;  if  ( app instance till now  =  =  null )   {  app instance till now = new  application ( application . get name (  )  )  ;  apps . add application ( app instance till now )  ;   }  for  (   instance info instance info : application . get instances (  )  )   {  app instance till now . add instance ( instance info )  ;   }   }  else  {  logger . debug ( "" application  {  }  not fetched from the remote region  {  }  as there exists a ""  +  ""whitelist and this app is not in the whitelist . "" application . get name (  )  remote region )  ;   }   }   }  else  {  logger . warn ( "" no remote registry available for the remote region  {  } "" remote region )  ;   }   }   }  apps . set apps hash code ( apps . get reconcile hash code (  )  )  ;  return apps ;   }  ",2676,5,applications,2,"[8, 182, 473, 498, 1423, 1472, 1558, 1863]"
5843,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\AbstractInstanceRegistry.java,get applications from multiple regions,"public  applications   (  string[] remote regions )  {  boolean include remote region = null  !  =  remote regions && remote regions . length  !  =  0 ;  logger . debug ( "" fetching applications registry with remote regions:  {  }    regions argument  {  } "" include remote region remote regions )  ;  if  ( include remote region )   {  get   all   with   remote   regions   cache   miss . increment (  )  ;   }  else  {  get   all   cache   miss . increment (  )  ;   }   applications apps = new  applications (  )  ;  apps . set version ( 1l )  ;  for  (   entry <  string  map <  string  lease <  instance info >  >  >  entry : registry . entry set (  )  )   {   application app = null ;  if  ( entry . get value (  )   !  =  null )   {  for  (   entry <  string  lease <  instance info >  >  string lease entry : entry . get value (  )  . entry set (  )  )   {   lease <  instance info >  lease = string lease entry . get value (  )  ;  if  ( app  =  =  null )   {  app = new  application ( lease . get holder (  )  . get app name (  )  )  ;   }  app . add instance ( decorate instance info ( lease )  )  ;   }   }  if  ( app  !  =  null )   {  apps . add application ( app )  ;   }   }  if  ( include remote region )   {  for  (   string remote region : remote regions )   {   remote region registry remote registry = region namevs remote registry . get ( remote region )  ;  if  ( null  !  =  remote registry )   {   applications remote apps = remote registry . get applications (  )  ;  for  (   application application : remote apps . get registered applications (  )  )   {  if  ( should fetch from remote registry ( application . get name (  )  remote region )  )   {  logger . info ( "" application  {  }  fetched from the remote region  {  } "" application . get name (  )  remote region )  ;   application app instance till now = apps . get registered applications ( application . get name (  )  )  ;  if  ( app instance till now  =  =  null )   {  app instance till now = new  application ( application . get name (  )  )  ;  apps . add application ( app instance till now )  ;   }  for  (   instance info instance info : application . get instances (  )  )   {  app instance till now . add instance ( instance info )  ;   }   }  else  {  logger . debug ( "" application  {  }  not fetched from the remote region  {  }  as there exists a ""  +  ""whitelist and this app is not in the whitelist . "" application . get name (  )  remote region )  ;   }   }   }  else  {  logger . warn ( "" no remote registry available for the remote region  {  } "" remote region )  ;   }   }   }  apps . set apps hash code ( apps . get reconcile hash code (  )  )  ;  return apps ;   }  ",2676,5,from,3,"[1603, 1724, 2301]"
5844,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\AbstractInstanceRegistry.java,get applications from multiple regions,"public  applications   (  string[] remote regions )  {  boolean include remote region = null  !  =  remote regions && remote regions . length  !  =  0 ;  logger . debug ( "" fetching applications registry with remote regions:  {  }    regions argument  {  } "" include remote region remote regions )  ;  if  ( include remote region )   {  get   all   with   remote   regions   cache   miss . increment (  )  ;   }  else  {  get   all   cache   miss . increment (  )  ;   }   applications apps = new  applications (  )  ;  apps . set version ( 1l )  ;  for  (   entry <  string  map <  string  lease <  instance info >  >  >  entry : registry . entry set (  )  )   {   application app = null ;  if  ( entry . get value (  )   !  =  null )   {  for  (   entry <  string  lease <  instance info >  >  string lease entry : entry . get value (  )  . entry set (  )  )   {   lease <  instance info >  lease = string lease entry . get value (  )  ;  if  ( app  =  =  null )   {  app = new  application ( lease . get holder (  )  . get app name (  )  )  ;   }  app . add instance ( decorate instance info ( lease )  )  ;   }   }  if  ( app  !  =  null )   {  apps . add application ( app )  ;   }   }  if  ( include remote region )   {  for  (   string remote region : remote regions )   {   remote region registry remote registry = region namevs remote registry . get ( remote region )  ;  if  ( null  !  =  remote registry )   {   applications remote apps = remote registry . get applications (  )  ;  for  (   application application : remote apps . get registered applications (  )  )   {  if  ( should fetch from remote registry ( application . get name (  )  remote region )  )   {  logger . info ( "" application  {  }  fetched from the remote region  {  } "" application . get name (  )  remote region )  ;   application app instance till now = apps . get registered applications ( application . get name (  )  )  ;  if  ( app instance till now  =  =  null )   {  app instance till now = new  application ( application . get name (  )  )  ;  apps . add application ( app instance till now )  ;   }  for  (   instance info instance info : application . get instances (  )  )   {  app instance till now . add instance ( instance info )  ;   }   }  else  {  logger . debug ( "" application  {  }  not fetched from the remote region  {  }  as there exists a ""  +  ""whitelist and this app is not in the whitelist . "" application . get name (  )  remote region )  ;   }   }   }  else  {  logger . warn ( "" no remote registry available for the remote region  {  } "" remote region )  ;   }   }   }  apps . set apps hash code ( apps . get reconcile hash code (  )  )  ;  return apps ;   }  ",2676,5,multiple,4,[]
5845,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\AbstractInstanceRegistry.java,get applications from multiple regions,"public  applications   (  string[] remote regions )  {  boolean include remote region = null  !  =  remote regions && remote regions . length  !  =  0 ;  logger . debug ( "" fetching applications registry with remote regions:  {  }    regions argument  {  } "" include remote region remote regions )  ;  if  ( include remote region )   {  get   all   with   remote   regions   cache   miss . increment (  )  ;   }  else  {  get   all   cache   miss . increment (  )  ;   }   applications apps = new  applications (  )  ;  apps . set version ( 1l )  ;  for  (   entry <  string  map <  string  lease <  instance info >  >  >  entry : registry . entry set (  )  )   {   application app = null ;  if  ( entry . get value (  )   !  =  null )   {  for  (   entry <  string  lease <  instance info >  >  string lease entry : entry . get value (  )  . entry set (  )  )   {   lease <  instance info >  lease = string lease entry . get value (  )  ;  if  ( app  =  =  null )   {  app = new  application ( lease . get holder (  )  . get app name (  )  )  ;   }  app . add instance ( decorate instance info ( lease )  )  ;   }   }  if  ( app  !  =  null )   {  apps . add application ( app )  ;   }   }  if  ( include remote region )   {  for  (   string remote region : remote regions )   {   remote region registry remote registry = region namevs remote registry . get ( remote region )  ;  if  ( null  !  =  remote registry )   {   applications remote apps = remote registry . get applications (  )  ;  for  (   application application : remote apps . get registered applications (  )  )   {  if  ( should fetch from remote registry ( application . get name (  )  remote region )  )   {  logger . info ( "" application  {  }  fetched from the remote region  {  } "" application . get name (  )  remote region )  ;   application app instance till now = apps . get registered applications ( application . get name (  )  )  ;  if  ( app instance till now  =  =  null )   {  app instance till now = new  application ( application . get name (  )  )  ;  apps . add application ( app instance till now )  ;   }  for  (   instance info instance info : application . get instances (  )  )   {  app instance till now . add instance ( instance info )  ;   }   }  else  {  logger . debug ( "" application  {  }  not fetched from the remote region  {  }  as there exists a ""  +  ""whitelist and this app is not in the whitelist . "" application . get name (  )  remote region )  ;   }   }   }  else  {  logger . warn ( "" no remote registry available for the remote region  {  } "" remote region )  ;   }   }   }  apps . set apps hash code ( apps . get reconcile hash code (  )  )  ;  return apps ;   }  ",2676,5,regions,5,"[42, 107, 125, 216, 234, 288, 365, 1266]"
5846,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\AbstractInstanceRegistry.java,get compensation time ms,long   (  )  {  long curr nanos = get current time nano (  )  ;  long last nanos = last execution nanos ref . get and set ( curr nanos )  ;  if  ( last nanos  =  =  0l )   {  return 0l ;   }  long elapsed ms =  time unit . nanoseconds . to millis ( curr nanos  -  last nanos )  ;  long compensation time = elapsed ms  -  server config . get eviction interval timer in ms (  )  ;  return compensation time  <  =  0l  ?  0l : compensation time ;   }  ,449,4,get,1,"[34, 110, 337]"
5847,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\AbstractInstanceRegistry.java,get compensation time ms,long   (  )  {  long curr nanos = get current time nano (  )  ;  long last nanos = last execution nanos ref . get and set ( curr nanos )  ;  if  ( last nanos  =  =  0l )   {  return 0l ;   }  long elapsed ms =  time unit . nanoseconds . to millis ( curr nanos  -  last nanos )  ;  long compensation time = elapsed ms  -  server config . get eviction interval timer in ms (  )  ;  return compensation time  <  =  0l  ?  0l : compensation time ;   }  ,449,4,compensation,2,"[286, 387, 424]"
5848,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\AbstractInstanceRegistry.java,get compensation time ms,long   (  )  {  long curr nanos = get current time nano (  )  ;  long last nanos = last execution nanos ref . get and set ( curr nanos )  ;  if  ( last nanos  =  =  0l )   {  return 0l ;   }  long elapsed ms =  time unit . nanoseconds . to millis ( curr nanos  -  last nanos )  ;  long compensation time = elapsed ms  -  server config . get eviction interval timer in ms (  )  ;  return compensation time  <  =  0l  ?  0l : compensation time ;   }  ,449,4,time,3,"[46, 211, 299, 359, 400, 437]"
5849,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\AbstractInstanceRegistry.java,get compensation time ms,long   (  )  {  long curr nanos = get current time nano (  )  ;  long last nanos = last execution nanos ref . get and set ( curr nanos )  ;  if  ( last nanos  =  =  0l )   {  return 0l ;   }  long elapsed ms =  time unit . nanoseconds . to millis ( curr nanos  -  last nanos )  ;  long compensation time = elapsed ms  -  server config . get eviction interval timer in ms (  )  ;  return compensation time  <  =  0l  ?  0l : compensation time ;   }  ,449,4,ms,4,"[205, 314, 368]"
5850,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\AbstractInstanceRegistry.java,get current time nano,long   (  )  {  return  system . nano time (  )  ;   }  ,56,4,get,1,[]
5851,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\AbstractInstanceRegistry.java,get current time nano,long   (  )  {  return  system . nano time (  )  ;   }  ,56,4,current,2,[]
5852,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\AbstractInstanceRegistry.java,get current time nano,long   (  )  {  return  system . nano time (  )  ;   }  ,56,4,time,3,[38]
5853,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\AbstractInstanceRegistry.java,get current time nano,long   (  )  {  return  system . nano time (  )  ;   }  ,56,4,nano,4,[33]
5854,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\AbstractInstanceRegistry.java,get delta retention task,private  timer task   (  )  {  return new  timer task (  )  {  @ override public void run (  )  {   iterator <  recently changed item >  it = recently changed queue . iterator (  )  ;  while  ( it . has next (  )  )   {  if  ( it . next (  )  . get last update time (  )   <   system . current time millis (  )   -  server config . get retention time inms in delta queue (  )  )   {  it . remove (  )  ;   }  else  {  break ;   }   }   }   }   ;   }  ,451,4,get,1,"[245, 332]"
5855,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\AbstractInstanceRegistry.java,get delta retention task,private  timer task   (  )  {  return new  timer task (  )  {  @ override public void run (  )  {   iterator <  recently changed item >  it = recently changed queue . iterator (  )  ;  while  ( it . has next (  )  )   {  if  ( it . next (  )  . get last update time (  )   <   system . current time millis (  )   -  server config . get retention time inms in delta queue (  )  )   {  it . remove (  )  ;   }  else  {  break ;   }   }   }   }   ;   }  ,451,4,delta,2,[359]
5856,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\AbstractInstanceRegistry.java,get delta retention task,private  timer task   (  )  {  return new  timer task (  )  {  @ override public void run (  )  {   iterator <  recently changed item >  it = recently changed queue . iterator (  )  ;  while  ( it . has next (  )  )   {  if  ( it . next (  )  . get last update time (  )   <   system . current time millis (  )   -  server config . get retention time inms in delta queue (  )  )   {  it . remove (  )  ;   }  else  {  break ;   }   }   }   }   ;   }  ,451,4,retention,3,[336]
5857,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\AbstractInstanceRegistry.java,get delta retention task,private  timer task   (  )  {  return new  timer task (  )  {  @ override public void run (  )  {   iterator <  recently changed item >  it = recently changed queue . iterator (  )  ;  while  ( it . has next (  )  )   {  if  ( it . next (  )  . get last update time (  )   <   system . current time millis (  )   -  server config . get retention time inms in delta queue (  )  )   {  it . remove (  )  ;   }  else  {  break ;   }   }   }   }   ;   }  ,451,4,task,4,"[15, 49]"
5858,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\AbstractInstanceRegistry.java,get instance by app and id,@ override public  instance info   (  string app name  string id boolean include remote regions )  {   map <  string  lease <  instance info >  >  lease map = registry . get ( app name )  ;   lease <  instance info >  lease = null ;  if  ( lease map  !  =,255,6,get,1,[170]
5859,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\AbstractInstanceRegistry.java,get instance by app and id,@ override public  instance info   (  string app name  string id boolean include remote regions )  {   map <  string  lease <  instance info >  >  lease map = registry . get ( app name )  ;   lease <  instance info >  lease = null ;  if  ( lease map  !  =,255,6,instance,2,"[19, 127, 201]"
5860,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\AbstractInstanceRegistry.java,get instance by app and id,@ override public  instance info   (  string app name  string id boolean include remote regions )  {   map <  string  lease <  instance info >  >  lease map = registry . get ( app name )  ;   lease <  instance info >  lease = null ;  if  ( lease map  !  =,255,6,by,3,[]
5861,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\AbstractInstanceRegistry.java,get instance by app and id,@ override public  instance info   (  string app name  string id boolean include remote regions )  {   map <  string  lease <  instance info >  >  lease map = registry . get ( app name )  ;   lease <  instance info >  lease = null ;  if  ( lease map  !  =,255,6,app,4,"[45, 176]"
5862,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\AbstractInstanceRegistry.java,get instance by app and id,@ override public  instance info   (  string app name  string id boolean include remote regions )  {   map <  string  lease <  instance info >  >  lease map = registry . get ( app name )  ;   lease <  instance info >  lease = null ;  if  ( lease map  !  =,255,6,and,5,[]
5863,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\AbstractInstanceRegistry.java,get instance by app and id,@ override public  instance info   (  string app name  string id boolean include remote regions )  {   map <  string  lease <  instance info >  >  lease map = registry . get ( app name )  ;   lease <  instance info >  lease = null ;  if  ( lease map  !  =,255,6,id,6,"[7, 62]"
5864,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\AwsInstanceRegistry.java, aws instance registry,@ inject public   (  eureka server config server config  eureka client config client config  server codecs server codecs  eureka client eureka client )  {  super ( server config client config server codecs eureka client )  ;   }  ,230,3,aws,1,[]
5865,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\AwsInstanceRegistry.java, aws instance registry,@ inject public   (  eureka server config server config  eureka client config client config  server codecs server codecs  eureka client eureka client )  {  super ( server config client config server codecs eureka client )  ;   }  ,230,3,instance,2,[]
5866,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\AwsInstanceRegistry.java, aws instance registry,@ inject public   (  eureka server config server config  eureka client config client config  server codecs server codecs  eureka client eureka client )  {  super ( server config client config server codecs eureka client )  ;   }  ,230,3,registry,3,[]
5867,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\AwsInstanceRegistry.java,get aws asg util,public  aws asg util   (  )  {  return aws asg util ;   }  ,59,4,get,1,[]
5868,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\AwsInstanceRegistry.java,get aws asg util,public  aws asg util   (  )  {  return aws asg util ;   }  ,59,4,aws,2,"[8, 39]"
5869,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\AwsInstanceRegistry.java,get aws asg util,public  aws asg util   (  )  {  return aws asg util ;   }  ,59,4,asg,3,"[12, 43]"
5870,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\AwsInstanceRegistry.java,get aws asg util,public  aws asg util   (  )  {  return aws asg util ;   }  ,59,4,util,4,"[16, 47]"
5871,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\AwsInstanceRegistry.java,get instance info override rule,@ override protected  instance status override rule   (  )  {  return this . instance status override rule ;   }  ,114,5,get,1,[]
5872,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\AwsInstanceRegistry.java,get instance info override rule,@ override protected  instance status override rule   (  )  {  return this . instance status override rule ;   }  ,114,5,instance,2,"[22, 77]"
5873,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\AwsInstanceRegistry.java,get instance info override rule,@ override protected  instance status override rule   (  )  {  return this . instance status override rule ;   }  ,114,5,info,3,[]
5874,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\AwsInstanceRegistry.java,get instance info override rule,@ override protected  instance status override rule   (  )  {  return this . instance status override rule ;   }  ,114,5,override,4,"[2, 38, 93]"
5875,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\AwsInstanceRegistry.java,get instance info override rule,@ override protected  instance status override rule   (  )  {  return this . instance status override rule ;   }  ,114,5,rule,5,"[47, 102]"
5876,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\AwsInstanceRegistry.java,init,@ override public void   (  peer eureka nodes peer eureka nodes )  throws  exception  {  super . init ( peer eureka nodes )  ;  this . aws asg util = new  aws asg util ( server config client config this )  ;  this . instance status override rule = new  fi,255,1,init,1,[97]
5877,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\Key.java, key,"public   (  entity type entity type  string entity name  key type type  version v  eureka accept eureka accept @ nullable  string[] regions )  {  this . regions = regions ;  this . entity type = entity type ;  this . entity name = entity name ;  this . request type = type ;  this . request version = v ;  this . eureka accept = eureka accept ;  hash key = this . entity type  +  this . entity name  +   ( null  !  =  this . regions  ?   arrays . to string ( this . regions )  : """" )  +  request type . name (  )  +  request version . name (  )  +  this . eureka accept . name (  )  ;   }  ",590,1,key,1,"[57, 351]"
5878,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\Key.java,clone without regions,public  key   (  )  {  return new  key ( entity type entity name request type request version eureka accept )  ;   }  ,118,3,clone,1,[]
5879,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\Key.java,clone without regions,public  key   (  )  {  return new  key ( entity type entity name request type request version eureka accept )  ;   }  ,118,3,without,2,[]
5880,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\Key.java,clone without regions,public  key   (  )  {  return new  key ( entity type entity name request type request version eureka accept )  ;   }  ,118,3,regions,3,[]
5881,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\Key.java,equals,@ override public boolean   (  object other )  {  if  ( other instanceof  key )   {  return get hash key (  )  . equals (  (  (  key ) other )  . get hash key (  )  )  ;   }  else  {  return false ;   }   }  ,208,1,equals,1,[113]
5882,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\Key.java,get entity type,public  entity type   (  )  {  return entity type ;   }  ,57,3,get,1,[]
5883,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\Key.java,get entity type,public  entity type   (  )  {  return entity type ;   }  ,57,3,entity,2,"[8, 38]"
5884,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\Key.java,get entity type,public  entity type   (  )  {  return entity type ;   }  ,57,3,type,3,"[15, 45]"
5885,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\Key.java,get eureka accept,public  eureka accept   (  )  {  return eureka accept ;   }  ,61,3,get,1,[]
5886,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\Key.java,get eureka accept,public  eureka accept   (  )  {  return eureka accept ;   }  ,61,3,eureka,2,"[8, 40]"
5887,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\Key.java,get eureka accept,public  eureka accept   (  )  {  return eureka accept ;   }  ,61,3,accept,3,"[15, 47]"
5888,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\Key.java,get hash key,public  string   (  )  {  return hash key ;   }  ,49,3,get,1,[]
5889,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\Key.java,get hash key,public  string   (  )  {  return hash key ;   }  ,49,3,hash,2,[33]
5890,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\Key.java,get hash key,public  string   (  )  {  return hash key ;   }  ,49,3,key,3,[38]
5891,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\Key.java,get name,public  string   (  )  {  return entity name ;   }  ,52,2,get,1,[]
5892,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\Key.java,get name,public  string   (  )  {  return entity name ;   }  ,52,2,name,2,[40]
5893,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\Key.java,get regions,public  string[]   (  )  {  return regions ;   }  ,50,2,get,1,[]
5894,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\Key.java,get regions,public  string[]   (  )  {  return regions ;   }  ,50,2,regions,2,[35]
5895,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\Key.java,get type,public  key type   (  )  {  return request type ;   }  ,55,2,get,1,[]
5896,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\Key.java,get type,public  key type   (  )  {  return request type ;   }  ,55,2,type,2,"[12, 43]"
5897,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\Key.java,get version,public  version   (  )  {  return request version ;   }  ,57,2,get,1,[]
5898,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\Key.java,get version,public  version   (  )  {  return request version ;   }  ,57,2,version,2,"[8, 42]"
5899,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\Key.java,has regions,public boolean   (  )  {  return null  !  =  regions && regions . length  !  =  0 ;   }  ,89,2,has,1,[]
5900,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\Key.java,has regions,public boolean   (  )  {  return null  !  =  regions && regions . length  !  =  0 ;   }  ,89,2,regions,2,"[45, 56]"
5901,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\Key.java,hash code,@ override public int   (  )  {   string hash key = get hash key (  )  ;  return hash key . hash code (  )  ;   }  ,115,2,hash,1,"[41, 56, 81, 92]"
5902,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\Key.java,hash code,@ override public int   (  )  {   string hash key = get hash key (  )  ;  return hash key . hash code (  )  ;   }  ,115,2,code,2,[97]
5903,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\Key.java,to string compact,"public  string   (  )  {   string builder sb = new  string builder (  )  ;  sb . append ( "" { name = "" )  . append ( entity name )  . append ( ""  type = "" )  . append ( entity type )  . append ( ""  format = "" )  . append ( request type )  ;  if  ( regions  !  =  null )   {  sb . append ( ""  regions = "" )  . append (  arrays . to string ( regions )  )  ;   }  sb . append ( ' } ' )  ;  return sb . to string (  )  ;   }  ",422,3,to,1,"[328, 399]"
5904,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\Key.java,to string compact,"public  string   (  )  {   string builder sb = new  string builder (  )  ;  sb . append ( "" { name = "" )  . append ( entity name )  . append ( ""  type = "" )  . append ( entity type )  . append ( ""  format = "" )  . append ( request type )  ;  if  ( regions  !  =  null )   {  sb . append ( ""  regions = "" )  . append (  arrays . to string ( regions )  )  ;   }  sb . append ( ' } ' )  ;  return sb . to string (  )  ;   }  ",422,3,string,2,"[8, 27, 52, 331, 402]"
5905,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\Key.java,to string compact,"public  string   (  )  {   string builder sb = new  string builder (  )  ;  sb . append ( "" { name = "" )  . append ( entity name )  . append ( ""  type = "" )  . append ( entity type )  . append ( ""  format = "" )  . append ( request type )  ;  if  ( regions  !  =  null )   {  sb . append ( ""  regions = "" )  . append (  arrays . to string ( regions )  )  ;   }  sb . append ( ' } ' )  ;  return sb . to string (  )  ;   }  ",422,3,compact,3,[]
5906,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\rule\AlwaysMatchInstanceStatusRule.java,apply,"@ override public  status override result   (  instance info instance info  lease <  instance info >  existing lease boolean is replication )  {  logger . debug ( "" returning the default instance status  {  }  for instance  {  } "" instance info . get stat",255,1,apply,1,[]
5907,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\rule\AlwaysMatchInstanceStatusRule.java,to string,@ override public  string   (  )  {  return  always match instance status rule . class . get name (  )  ;   }  ,111,2,to,1,[]
5908,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\rule\AlwaysMatchInstanceStatusRule.java,to string,@ override public  string   (  )  {  return  always match instance status rule . class . get name (  )  ;   }  ,111,2,string,2,[19]
5909,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\rule\AsgEnabledRule.java, asg enabled rule,public   (  aws asg util aws asg util )  {  this . aws asg util = aws asg util ;   }  ,86,3,asg,1,"[16, 29, 55, 70]"
5910,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\rule\AsgEnabledRule.java, asg enabled rule,public   (  aws asg util aws asg util )  {  this . aws asg util = aws asg util ;   }  ,86,3,enabled,2,[]
5911,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\rule\AsgEnabledRule.java, asg enabled rule,public   (  aws asg util aws asg util )  {  this . aws asg util = aws asg util ;   }  ,86,3,rule,3,[]
5912,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\rule\AsgEnabledRule.java,apply,@ override public  status override result   (  instance info instance info  lease <  instance info >  existing lease boolean is replication )  {  if  ( instance info . getasg name (  )   !  =  null )   {  boolean isasg disabled =  ! aws asg util . isasg e,255,1,apply,1,[]
5913,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\rule\AsgEnabledRule.java,to string,@ override public  string   (  )  {  return  asg enabled rule . class . get name (  )  ;   }  ,94,2,to,1,[]
5914,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\rule\AsgEnabledRule.java,to string,@ override public  string   (  )  {  return  asg enabled rule . class . get name (  )  ;   }  ,94,2,string,2,[19]
5915,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\RemoteRegionRegistry.java, remote region registry,@ inject public   (  eureka server config server config  eureka client config client config  server codecs server codecs  string region name url remote regionurl )  {  this . server config = server config ;  this . remote regionurl = remote regionurl ;  t,255,3,remote,1,"[145, 215, 234]"
5916,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\RemoteRegionRegistry.java, remote region registry,@ inject public   (  eureka server config server config  eureka client config client config  server codecs server codecs  string region name url remote regionurl )  {  this . server config = server config ;  this . remote regionurl = remote regionurl ;  t,255,3,region,2,"[129, 152, 222, 241]"
5917,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\RemoteRegionRegistry.java, remote region registry,@ inject public   (  eureka server config server config  eureka client config client config  server codecs server codecs  string region name url remote regionurl )  {  this . server config = server config ;  this . remote regionurl = remote regionurl ;  t,255,3,registry,3,[]
5918,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\RemoteRegionRegistry.java,close response,"private void   (  client response response )  {  if  ( response  !  =  null )   {  try  {  response . close (  )  ;   }  catch  (   throwable th )   {  logger . error ( "" cannot release response resource :"" th )  ;   }   }   }  ",228,2,close,1,[102]
5919,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\RemoteRegionRegistry.java,close response,"private void   (  client response response )  {  if  ( response  !  =  null )   {  try  {  response . close (  )  ;   }  catch  (   throwable th )   {  logger . error ( "" cannot release response resource :"" th )  ;   }   }   }  ",228,2,response,2,"[25, 34, 55, 91, 186]"
5920,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\RemoteRegionRegistry.java,fetch and store delta,"private boolean   (  )  throws  throwable  {  long curr generation = fetch registry generation . get (  )  ;   applications delta = fetch remote registry ( true )  ;  if  ( delta  =  =  null )   {  logger . error ( "" the delta is null for some reason .   not storing this information"" )  ;   }  else if  ( fetch registry generation . compare and set ( curr generation curr generation  +  1 )  )   {  this . applications delta . set ( delta )  ;   }  else  {  delta = null ;  logger . warn ( "" not updating delta as another thread is updating it already"" )  ;   }  if  ( delta  =  =  null )   {  logger . warn ( "" the server does not allow the delta revision to be applied because it is not ""  +  ""safe .   hence got the full registry . "" )  ;  return store full registry (  )  ;   }  else  {   string reconcile hash code = """" ;  if  ( fetch registry update lock . try lock (  )  )   {  try  {  update delta ( delta )  ;  reconcile hash code = get applications (  )  . get reconcile hash code (  )  ;   }  finally  {  fetch registry update lock . unlock (  )  ;   }   }  else  {  logger . warn ( "" cannot acquire update lock  aborting update delta operation of fetch and store delta"" )  ;   }  if  (  (  ! reconcile hash code . equals ( delta . get apps hash code (  )  )  )  )   {  return reconcile and log difference ( delta reconcile hash code )  ;   }   }  return delta  !  =  null ;   }  ",1392,4,fetch,1,"[69, 132, 306, 835, 1017, 1160]"
5921,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\RemoteRegionRegistry.java,fetch and store delta,"private boolean   (  )  throws  throwable  {  long curr generation = fetch registry generation . get (  )  ;   applications delta = fetch remote registry ( true )  ;  if  ( delta  =  =  null )   {  logger . error ( "" the delta is null for some reason .   not storing this information"" )  ;   }  else if  ( fetch registry generation . compare and set ( curr generation curr generation  +  1 )  )   {  this . applications delta . set ( delta )  ;   }  else  {  delta = null ;  logger . warn ( "" not updating delta as another thread is updating it already"" )  ;   }  if  ( delta  =  =  null )   {  logger . warn ( "" the server does not allow the delta revision to be applied because it is not ""  +  ""safe .   hence got the full registry . "" )  ;  return store full registry (  )  ;   }  else  {   string reconcile hash code = """" ;  if  ( fetch registry update lock . try lock (  )  )   {  try  {  update delta ( delta )  ;  reconcile hash code = get applications (  )  . get reconcile hash code (  )  ;   }  finally  {  fetch registry update lock . unlock (  )  ;   }   }  else  {  logger . warn ( "" cannot acquire update lock  aborting update delta operation of fetch and store delta"" )  ;   }  if  (  (  ! reconcile hash code . equals ( delta . get apps hash code (  )  )  )  )   {  return reconcile and log difference ( delta reconcile hash code )  ;   }   }  return delta  !  =  null ;   }  ",1392,4,and,2,"[342, 1166, 1299]"
5922,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\RemoteRegionRegistry.java,fetch and store delta,"private boolean   (  )  throws  throwable  {  long curr generation = fetch registry generation . get (  )  ;   applications delta = fetch remote registry ( true )  ;  if  ( delta  =  =  null )   {  logger . error ( "" the delta is null for some reason .   not storing this information"" )  ;   }  else if  ( fetch registry generation . compare and set ( curr generation curr generation  +  1 )  )   {  this . applications delta . set ( delta )  ;   }  else  {  delta = null ;  logger . warn ( "" not updating delta as another thread is updating it already"" )  ;   }  if  ( delta  =  =  null )   {  logger . warn ( "" the server does not allow the delta revision to be applied because it is not ""  +  ""safe .   hence got the full registry . "" )  ;  return store full registry (  )  ;   }  else  {   string reconcile hash code = """" ;  if  ( fetch registry update lock . try lock (  )  )   {  try  {  update delta ( delta )  ;  reconcile hash code = get applications (  )  . get reconcile hash code (  )  ;   }  finally  {  fetch registry update lock . unlock (  )  ;   }   }  else  {  logger . warn ( "" cannot acquire update lock  aborting update delta operation of fetch and store delta"" )  ;   }  if  (  (  ! reconcile hash code . equals ( delta . get apps hash code (  )  )  )  )   {  return reconcile and log difference ( delta reconcile hash code )  ;   }   }  return delta  !  =  null ;   }  ",1392,4,store,3,"[751, 1170]"
5923,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\RemoteRegionRegistry.java,fetch and store delta,"private boolean   (  )  throws  throwable  {  long curr generation = fetch registry generation . get (  )  ;   applications delta = fetch remote registry ( true )  ;  if  ( delta  =  =  null )   {  logger . error ( "" the delta is null for some reason .   not storing this information"" )  ;   }  else if  ( fetch registry generation . compare and set ( curr generation curr generation  +  1 )  )   {  this . applications delta . set ( delta )  ;   }  else  {  delta = null ;  logger . warn ( "" not updating delta as another thread is updating it already"" )  ;   }  if  ( delta  =  =  null )   {  logger . warn ( "" the server does not allow the delta revision to be applied because it is not ""  +  ""safe .   hence got the full registry . "" )  ;  return store full registry (  )  ;   }  else  {   string reconcile hash code = """" ;  if  ( fetch registry update lock . try lock (  )  )   {  try  {  update delta ( delta )  ;  reconcile hash code = get applications (  )  . get reconcile hash code (  )  ;   }  finally  {  fetch registry update lock . unlock (  )  ;   }   }  else  {  logger . warn ( "" cannot acquire update lock  aborting update delta operation of fetch and store delta"" )  ;   }  if  (  (  ! reconcile hash code . equals ( delta . get apps hash code (  )  )  )  )   {  return reconcile and log difference ( delta reconcile hash code )  ;   }   }  return delta  !  =  null ;   }  ",1392,4,delta,4,"[124, 173, 221, 420, 434, 459, 506, 570, 643, 901, 909, 1141, 1176, 1236, 1320, 1367]"
5924,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\RemoteRegionRegistry.java,fetch registry,"private boolean   (  )  {  boolean success ;   stopwatch tracer = fetch registry timer . start (  )  ;  try  {  if  ( server config . should disable delta for remote regions (  )  ||  ( get applications (  )   =  =  null )  ||  ( get applications (  )  . get registered applications (  )  . size (  )   =  =  0 )  )   {  logger . info ( "" disable delta property :  {  } "" server config . should disable delta for remote regions (  )  )  ;  logger . info ( "" application is null :  {  } "" get applications (  )   =  =  null )  ;  logger . info ( "" registered  applications size is zero :  {  } "" get applications (  )  . get registered applications (  )  . is empty (  )  )  ;  success = store full registry (  )  ;   }  else  {  success = fetch and store delta (  )  ;   }  log total instances (  )  ;   }  catch  (   throwable e )   {  logger . error ( "" unable to fetch registry information from the remote registry  {  } "" this . remote regionurl e )  ;  return false ;   }  finally  {  if  ( tracer  !  =  null )   {  tracer . stop (  )  ;   }   }  return success ;   }  ",1075,2,fetch,1,"[66, 739, 866]"
5925,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\RemoteRegionRegistry.java,fetch registry,"private boolean   (  )  {  boolean success ;   stopwatch tracer = fetch registry timer . start (  )  ;  try  {  if  ( server config . should disable delta for remote regions (  )  ||  ( get applications (  )   =  =  null )  ||  ( get applications (  )  . get registered applications (  )  . size (  )   =  =  0 )  )   {  logger . info ( "" disable delta property :  {  } "" server config . should disable delta for remote regions (  )  )  ;  logger . info ( "" application is null :  {  } "" get applications (  )   =  =  null )  ;  logger . info ( "" registered  applications size is zero :  {  } "" get applications (  )  . get registered applications (  )  . is empty (  )  )  ;  success = store full registry (  )  ;   }  else  {  success = fetch and store delta (  )  ;   }  log total instances (  )  ;   }  catch  (   throwable e )   {  logger . error ( "" unable to fetch registry information from the remote registry  {  } "" this . remote regionurl e )  ;  return false ;   }  finally  {  if  ( tracer  !  =  null )   {  tracer . stop (  )  ;   }   }  return success ;   }  ",1075,2,registry,2,"[72, 698, 872, 909]"
5926,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\RemoteRegionRegistry.java,fetch remote registry,"private  applications   ( boolean delta )  {  logger . info ( "" getting instance registry info from the eureka server :  {  }    delta :  {  } "" this . remote regionurl delta )  ;  if  ( should use experimental transport (  )  )   {  try  {   eureka http response <  applications >  http response = delta  ?  eureka http client . get delta (  )  : eureka http client . get applications (  )  ;  int http status = http response . get status code (  )  ;  if  ( http status  >  =  200 && http status  <  300 )   {  logger . debug ( "" got the data successfully :  {  } "" http status )  ;  return http response . get entity (  )  ;   }  logger . warn ( "" cannot get the data from  {  }  :  {  } "" this . remote regionurl http status )  ;   }  catch  (   throwable t )   {  logger . error ( "" can't get a response from  {  } "" this . remote regionurl t )  ;   }   }  else  {   client response response = null ;  try  {   string url path = delta  ?  ""apps / delta"" : ""apps / "" ;  response = discovery apache client . resource ( this . remote regionurl  +  url path )  . accept (  media type . application   json   type )  . get (  client response . class )  ;  int http status = response . get status (  )  ;  if  ( http status  >  =  200 && http status  <  300 )   {  logger . debug ( "" got the data successfully :  {  } "" http status )  ;  return response . get entity (  applications . class )  ;   }  logger . warn ( "" cannot get the data from  {  }  :  {  } "" this . remote regionurl http status )  ;   }  catch  (   throwable t )   {  logger . error ( "" can't get a response from  {  } "" this . remote regionurl t )  ;   }  finally  {  close response ( response )  ;   }   }  return null ;   }  ",1695,3,fetch,1,[]
5927,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\RemoteRegionRegistry.java,fetch remote registry,"private  applications   ( boolean delta )  {  logger . info ( "" getting instance registry info from the eureka server :  {  }    delta :  {  } "" this . remote regionurl delta )  ;  if  ( should use experimental transport (  )  )   {  try  {   eureka http response <  applications >  http response = delta  ?  eureka http client . get delta (  )  : eureka http client . get applications (  )  ;  int http status = http response . get status code (  )  ;  if  ( http status  >  =  200 && http status  <  300 )   {  logger . debug ( "" got the data successfully :  {  } "" http status )  ;  return http response . get entity (  )  ;   }  logger . warn ( "" cannot get the data from  {  }  :  {  } "" this . remote regionurl http status )  ;   }  catch  (   throwable t )   {  logger . error ( "" can't get a response from  {  } "" this . remote regionurl t )  ;   }   }  else  {   client response response = null ;  try  {   string url path = delta  ?  ""apps / delta"" : ""apps / "" ;  response = discovery apache client . resource ( this . remote regionurl  +  url path )  . accept (  media type . application   json   type )  . get (  client response . class )  ;  int http status = response . get status (  )  ;  if  ( http status  >  =  200 && http status  <  300 )   {  logger . debug ( "" got the data successfully :  {  } "" http status )  ;  return response . get entity (  applications . class )  ;   }  logger . warn ( "" cannot get the data from  {  }  :  {  } "" this . remote regionurl http status )  ;   }  catch  (   throwable t )   {  logger . error ( "" can't get a response from  {  } "" this . remote regionurl t )  ;   }  finally  {  close response ( response )  ;   }   }  return null ;   }  ",1695,3,remote,2,"[152, 700, 829, 1029, 1466, 1595]"
5928,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\RemoteRegionRegistry.java,fetch remote registry,"private  applications   ( boolean delta )  {  logger . info ( "" getting instance registry info from the eureka server :  {  }    delta :  {  } "" this . remote regionurl delta )  ;  if  ( should use experimental transport (  )  )   {  try  {   eureka http response <  applications >  http response = delta  ?  eureka http client . get delta (  )  : eureka http client . get applications (  )  ;  int http status = http response . get status code (  )  ;  if  ( http status  >  =  200 && http status  <  300 )   {  logger . debug ( "" got the data successfully :  {  } "" http status )  ;  return http response . get entity (  )  ;   }  logger . warn ( "" cannot get the data from  {  }  :  {  } "" this . remote regionurl http status )  ;   }  catch  (   throwable t )   {  logger . error ( "" can't get a response from  {  } "" this . remote regionurl t )  ;   }   }  else  {   client response response = null ;  try  {   string url path = delta  ?  ""apps / delta"" : ""apps / "" ;  response = discovery apache client . resource ( this . remote regionurl  +  url path )  . accept (  media type . application   json   type )  . get (  client response . class )  ;  int http status = response . get status (  )  ;  if  ( http status  >  =  200 && http status  <  300 )   {  logger . debug ( "" got the data successfully :  {  } "" http status )  ;  return response . get entity (  applications . class )  ;   }  logger . warn ( "" cannot get the data from  {  }  :  {  } "" this . remote regionurl http status )  ;   }  catch  (   throwable t )   {  logger . error ( "" can't get a response from  {  } "" this . remote regionurl t )  ;   }  finally  {  close response ( response )  ;   }   }  return null ;   }  ",1695,3,registry,3,[81]
5929,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\RemoteRegionRegistry.java,get application,@ override public  application   (  string app name )  {  return this . applications . get (  )  . get registered applications ( app name )  ;   }  ,148,2,get,1,"[87, 99]"
5930,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\RemoteRegionRegistry.java,get application,@ override public  application   (  string app name )  {  return this . applications . get (  )  . get registered applications ( app name )  ;   }  ,148,2,application,2,"[19, 72, 114]"
5931,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\RemoteRegionRegistry.java,get application deltas,public  applications   (  )  {  return this . applications delta . get (  )  ;   }  ,84,3,get,1,[67]
5932,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\RemoteRegionRegistry.java,get application deltas,public  applications   (  )  {  return this . applications delta . get (  )  ;   }  ,84,3,application,2,"[8, 46]"
5933,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\RemoteRegionRegistry.java,get application deltas,public  applications   (  )  {  return this . applications delta . get (  )  ;   }  ,84,3,deltas,3,[]
5934,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\RemoteRegionRegistry.java,get applications,@ override public  applications   (  )  {  return applications . get (  )  ;   }  ,82,2,get,1,[65]
5935,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\RemoteRegionRegistry.java,get applications,@ override public  applications   (  )  {  return applications . get (  )  ;   }  ,82,2,applications,2,"[19, 50]"
5936,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\RemoteRegionRegistry.java,get instances by id,@ override public  list <  instance info >    (  string id )  {   list <  instance info >  list =  collections . empty list (  )  ;  for  (   application app : applications . get (  )  . get registered applications (  )  )   {   instance info info = app .,255,4,get,1,"[175, 187]"
5937,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\RemoteRegionRegistry.java,get instances by id,@ override public  list <  instance info >    (  string id )  {   list <  instance info >  list =  collections . empty list (  )  ;  for  (   application app : applications . get (  )  . get registered applications (  )  )   {   instance info info = app .,255,4,instances,2,[]
5938,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\RemoteRegionRegistry.java,get instances by id,@ override public  list <  instance info >    (  string id )  {   list <  instance info >  list =  collections . empty list (  )  ;  for  (   application app : applications . get (  )  . get registered applications (  )  )   {   instance info info = app .,255,4,by,3,[]
5939,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\RemoteRegionRegistry.java,get instances by id,@ override public  list <  instance info >    (  string id )  {   list <  instance info >  list =  collections . empty list (  )  ;  for  (   application app : applications . get (  )  . get registered applications (  )  )   {   instance info info = app .,255,4,id,4,"[7, 56]"
5940,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\RemoteRegionRegistry.java,get next server from eureka,@ override public  instance info   (  string arg0 boolean arg1 )  {  return null ;   }  ,88,5,get,1,[]
5941,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\RemoteRegionRegistry.java,get next server from eureka,@ override public  instance info   (  string arg0 boolean arg1 )  {  return null ;   }  ,88,5,next,2,[]
5942,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\RemoteRegionRegistry.java,get next server from eureka,@ override public  instance info   (  string arg0 boolean arg1 )  {  return null ;   }  ,88,5,server,3,[]
5943,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\RemoteRegionRegistry.java,get next server from eureka,@ override public  instance info   (  string arg0 boolean arg1 )  {  return null ;   }  ,88,5,from,4,[]
5944,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\RemoteRegionRegistry.java,get next server from eureka,@ override public  instance info   (  string arg0 boolean arg1 )  {  return null ;   }  ,88,5,eureka,5,[]
5945,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\RemoteRegionRegistry.java,is ready for serving data,public boolean   (  )  {  return ready for serving data ;   }  ,63,5,is,1,[]
5946,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\RemoteRegionRegistry.java,is ready for serving data,public boolean   (  )  {  return ready for serving data ;   }  ,63,5,ready,2,[33]
5947,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\RemoteRegionRegistry.java,is ready for serving data,public boolean   (  )  {  return ready for serving data ;   }  ,63,5,for,3,[39]
5948,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\RemoteRegionRegistry.java,is ready for serving data,public boolean   (  )  {  return ready for serving data ;   }  ,63,5,serving,4,[43]
5949,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\RemoteRegionRegistry.java,is ready for serving data,public boolean   (  )  {  return ready for serving data ;   }  ,63,5,data,5,[51]
5950,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\RemoteRegionRegistry.java,log total instances,"private void   (  )  {  int tot instances = 0 ;  for  (   application application : get applications (  )  . get registered applications (  )  )   {  tot instances +  = application . get instances as is from eureka (  )  . size (  )  ;   }  logger . debug ( "" the total number of all instances in the client now is  {  } "" tot instances )  ;   }  ",347,3,log,1,[241]
5951,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\RemoteRegionRegistry.java,log total instances,"private void   (  )  {  int tot instances = 0 ;  for  (   application application : get applications (  )  . get registered applications (  )  )   {  tot instances +  = application . get instances as is from eureka (  )  . size (  )  ;   }  logger . debug ( "" the total number of all instances in the client now is  {  } "" tot instances )  ;   }  ",347,3,total,2,[264]
5952,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\RemoteRegionRegistry.java,log total instances,"private void   (  )  {  int tot instances = 0 ;  for  (   application application : get applications (  )  . get registered applications (  )  )   {  tot instances +  = application . get instances as is from eureka (  )  . size (  )  ;   }  logger . debug ( "" the total number of all instances in the client now is  {  } "" tot instances )  ;   }  ",347,3,instances,3,"[32, 154, 187, 284, 327]"
5953,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\RemoteRegionRegistry.java,reconcile and log difference,"private boolean   (  applications delta  string reconcile hash code )  throws  throwable  {  logger . warn ( "" the  reconcile hashcodes do not match  client :  {  }   server :  {  }  .   getting the full registry"" reconcile hash code delta . get apps hash code (  )  )  ;  long current generation = fetch registry generation . get (  )  ;   applications apps = this . fetch remote registry ( false )  ;  if  ( apps  =  =  null )   {  logger . error ( "" the application is null for some reason .   not storing this information"" )  ;  return false ;   }  if  ( fetch registry generation . compare and set ( current generation current generation  +  1 )  )   {  applications . set ( apps )  ;  applications delta . set ( apps )  ;  logger . warn ( "" the  reconcile hashcodes after complete sync up  client :  {  }   server :  {  }  . "" get applications (  )  . get reconcile hash code (  )  delta . get apps hash code (  )  )  ;  return true ;   }  else  {  logger . warn ( "" not setting the applications map as another thread has advanced the update generation"" )  ;  return true ;   }   }  ",1089,4,reconcile,1,"[48, 116, 214, 752, 862]"
5954,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\RemoteRegionRegistry.java,reconcile and log difference,"private boolean   (  applications delta  string reconcile hash code )  throws  throwable  {  logger . warn ( "" the  reconcile hashcodes do not match  client :  {  }   server :  {  }  .   getting the full registry"" reconcile hash code delta . get apps hash code (  )  )  ;  long current generation = fetch registry generation . get (  )  ;   applications apps = this . fetch remote registry ( false )  ;  if  ( apps  =  =  null )   {  logger . error ( "" the application is null for some reason .   not storing this information"" )  ;  return false ;   }  if  ( fetch registry generation . compare and set ( current generation current generation  +  1 )  )   {  applications . set ( apps )  ;  applications delta . set ( apps )  ;  logger . warn ( "" the  reconcile hashcodes after complete sync up  client :  {  }   server :  {  }  . "" get applications (  )  . get reconcile hash code (  )  delta . get apps hash code (  )  )  ;  return true ;   }  else  {  logger . warn ( "" not setting the applications map as another thread has advanced the update generation"" )  ;  return true ;   }   }  ",1089,4,and,2,[595]
5955,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\RemoteRegionRegistry.java,reconcile and log difference,"private boolean   (  applications delta  string reconcile hash code )  throws  throwable  {  logger . warn ( "" the  reconcile hashcodes do not match  client :  {  }   server :  {  }  .   getting the full registry"" reconcile hash code delta . get apps hash code (  )  )  ;  long current generation = fetch registry generation . get (  )  ;   applications apps = this . fetch remote registry ( false )  ;  if  ( apps  =  =  null )   {  logger . error ( "" the application is null for some reason .   not storing this information"" )  ;  return false ;   }  if  ( fetch registry generation . compare and set ( current generation current generation  +  1 )  )   {  applications . set ( apps )  ;  applications delta . set ( apps )  ;  logger . warn ( "" the  reconcile hashcodes after complete sync up  client :  {  }   server :  {  }  . "" get applications (  )  . get reconcile hash code (  )  delta . get apps hash code (  )  )  ;  return true ;   }  else  {  logger . warn ( "" not setting the applications map as another thread has advanced the update generation"" )  ;  return true ;   }   }  ",1089,4,log,3,"[93, 434, 729, 955]"
5956,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\RemoteRegionRegistry.java,reconcile and log difference,"private boolean   (  applications delta  string reconcile hash code )  throws  throwable  {  logger . warn ( "" the  reconcile hashcodes do not match  client :  {  }   server :  {  }  .   getting the full registry"" reconcile hash code delta . get apps hash code (  )  )  ;  long current generation = fetch registry generation . get (  )  ;   applications apps = this . fetch remote registry ( false )  ;  if  ( apps  =  =  null )   {  logger . error ( "" the application is null for some reason .   not storing this information"" )  ;  return false ;   }  if  ( fetch registry generation . compare and set ( current generation current generation  +  1 )  )   {  applications . set ( apps )  ;  applications delta . set ( apps )  ;  logger . warn ( "" the  reconcile hashcodes after complete sync up  client :  {  }   server :  {  }  . "" get applications (  )  . get reconcile hash code (  )  delta . get apps hash code (  )  )  ;  return true ;   }  else  {  logger . warn ( "" not setting the applications map as another thread has advanced the update generation"" )  ;  return true ;   }   }  ",1089,4,difference,4,[]
5957,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\RemoteRegionRegistry.java,run,"@ override public void   (  )  {  try  {  if  ( fetch registry (  )  )   {  ready for serving data = true ;   }  else  {  logger . warn ( "" failed to fetch remote registry .   this means this eureka server is not ""  +  ""ready for serving traffic . "" )  ; ",255,1,run,1,[]
5958,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\RemoteRegionRegistry.java,should use experimental transport,"private boolean   (  )  {  if  ( eureka http client  =  =  null )   {  return false ;   }   string enabled = server config . get experimental ( ""transport . enabled"" )  ;  return enabled  !  =  null && ""true"" . equals ignore case ( enabled )  ;   }  ",250,4,should,1,[]
5959,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\RemoteRegionRegistry.java,should use experimental transport,"private boolean   (  )  {  if  ( eureka http client  =  =  null )   {  return false ;   }   string enabled = server config . get experimental ( ""transport . enabled"" )  ;  return enabled  !  =  null && ""true"" . equals ignore case ( enabled )  ;   }  ",250,4,use,2,[]
5960,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\RemoteRegionRegistry.java,should use experimental transport,"private boolean   (  )  {  if  ( eureka http client  =  =  null )   {  return false ;   }   string enabled = server config . get experimental ( ""transport . enabled"" )  ;  return enabled  !  =  null && ""true"" . equals ignore case ( enabled )  ;   }  ",250,4,experimental,3,[129]
5961,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\RemoteRegionRegistry.java,should use experimental transport,"private boolean   (  )  {  if  ( eureka http client  =  =  null )   {  return false ;   }   string enabled = server config . get experimental ( ""transport . enabled"" )  ;  return enabled  !  =  null && ""true"" . equals ignore case ( enabled )  ;   }  ",250,4,transport,4,[145]
5962,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\RemoteRegionRegistry.java,store full registry,"public boolean   (  )  {  long current generation = fetch registry generation . get (  )  ;   applications apps = fetch remote registry ( false )  ;  if  ( apps  =  =  null )   {  logger . error ( "" the application is null for some reason .   not storing this information"" )  ;   }  else if  ( fetch registry generation . compare and set ( current generation current generation  +  1 )  )   {  applications . set ( apps )  ;  applications delta . set ( apps )  ;  logger . info ( "" successfully updated registry with the latest content"" )  ;  return true ;   }  else  {  logger . warn ( "" not updating applications as another thread is updating it already"" )  ;   }  return false ;   }  ",687,3,store,1,[]
5963,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\RemoteRegionRegistry.java,store full registry,"public boolean   (  )  {  long current generation = fetch registry generation . get (  )  ;   applications apps = fetch remote registry ( false )  ;  if  ( apps  =  =  null )   {  logger . error ( "" the application is null for some reason .   not storing this information"" )  ;   }  else if  ( fetch registry generation . compare and set ( current generation current generation  +  1 )  )   {  applications . set ( apps )  ;  applications delta . set ( apps )  ;  logger . info ( "" successfully updated registry with the latest content"" )  ;  return true ;   }  else  {  logger . warn ( "" not updating applications as another thread is updating it already"" )  ;   }  return false ;   }  ",687,3,full,2,[489]
5964,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\RemoteRegionRegistry.java,store full registry,"public boolean   (  )  {  long current generation = fetch registry generation . get (  )  ;   applications apps = fetch remote registry ( false )  ;  if  ( apps  =  =  null )   {  logger . error ( "" the application is null for some reason .   not storing this information"" )  ;   }  else if  ( fetch registry generation . compare and set ( current generation current generation  +  1 )  )   {  applications . set ( apps )  ;  applications delta . set ( apps )  ;  logger . info ( "" successfully updated registry with the latest content"" )  ;  return true ;   }  else  {  logger . warn ( "" not updating applications as another thread is updating it already"" )  ;   }  return false ;   }  ",687,3,registry,3,"[58, 127, 300, 503]"
5965,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\RemoteRegionRegistry.java,update delta,"private void   (  applications delta )  {  int delta count = 0 ;  for  (   application app : delta . get registered applications (  )  )   {  for  (   instance info instance : app . get instances (  )  )   {   +  + delta count ;  if  (  action type . added . equals ( instance . get action type (  )  )  )   {   application existing app = get applications (  )  . get registered applications ( instance . get app name (  )  )  ;  if  ( existing app  =  =  null )   {  get applications (  )  . add application ( app )  ;   }  logger . debug ( "" added instance  {  }  to the existing apps "" instance . get id (  )  )  ;  get applications (  )  . get registered applications ( instance . get app name (  )  )  . add instance ( instance )  ;   }  else if  (  action type . modified . equals ( instance . get action type (  )  )  )   {   application existing app = get applications (  )  . get registered applications ( instance . get app name (  )  )  ;  if  ( existing app  =  =  null )   {  get applications (  )  . add application ( app )  ;   }  logger . debug ( "" modified instance  {  }  to the existing apps "" instance . get id (  )  )  ;  get applications (  )  . get registered applications ( instance . get app name (  )  )  . add instance ( instance )  ;   }  else if  (  action type . deleted . equals ( instance . get action type (  )  )  )   {   application existing app = get applications (  )  . get registered applications ( instance . get app name (  )  )  ;  if  ( existing app  =  =  null )   {  get applications (  )  . add application ( app )  ;   }  logger . debug ( "" deleted instance  {  }  to the existing apps "" instance . get id (  )  )  ;  get applications (  )  . get registered applications ( instance . get app name (  )  )  . remove instance ( instance )  ;   }   }   }  logger . debug ( "" the total number of instances fetched by the delta processor :  {  } "" delta count )  ;   }  ",1912,2,update,1,[]
5966,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\RemoteRegionRegistry.java,update delta,"private void   (  applications delta )  {  int delta count = 0 ;  for  (   application app : delta . get registered applications (  )  )   {  for  (   instance info instance : app . get instances (  )  )   {   +  + delta count ;  if  (  action type . added . equals ( instance . get action type (  )  )  )   {   application existing app = get applications (  )  . get registered applications ( instance . get app name (  )  )  ;  if  ( existing app  =  =  null )   {  get applications (  )  . add application ( app )  ;   }  logger . debug ( "" added instance  {  }  to the existing apps "" instance . get id (  )  )  ;  get applications (  )  . get registered applications ( instance . get app name (  )  )  . add instance ( instance )  ;   }  else if  (  action type . modified . equals ( instance . get action type (  )  )  )   {   application existing app = get applications (  )  . get registered applications ( instance . get app name (  )  )  ;  if  ( existing app  =  =  null )   {  get applications (  )  . add application ( app )  ;   }  logger . debug ( "" modified instance  {  }  to the existing apps "" instance . get id (  )  )  ;  get applications (  )  . get registered applications ( instance . get app name (  )  )  . add instance ( instance )  ;   }  else if  (  action type . deleted . equals ( instance . get action type (  )  )  )   {   application existing app = get applications (  )  . get registered applications ( instance . get app name (  )  )  ;  if  ( existing app  =  =  null )   {  get applications (  )  . add application ( app )  ;   }  logger . debug ( "" deleted instance  {  }  to the existing apps "" instance . get id (  )  )  ;  get applications (  )  . get registered applications ( instance . get app name (  )  )  . remove instance ( instance )  ;   }   }   }  logger . debug ( "" the total number of instances fetched by the delta processor :  {  } "" delta count )  ;   }  ",1912,2,delta,2,"[31, 47, 93, 215, 1864, 1890]"
5967,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\ResponseCacheImpl.java, response cache impl,"  (  eureka server config server config  server codecs server codecs  abstract instance registry registry )  {  this . server config = server config ;  this . server codecs = server codecs ;  this . should use read only response cache = server config . should use read only response cache (  )  ;  this . registry = registry ;  long response cache update interval ms = server config . get response cache update interval ms (  )  ;  this . read write cache map =  cache builder . new builder (  )  . initial capacity ( 1000 )  . expire after write ( server config . get response cache auto expiration in seconds (  )   time unit . seconds )  . removal listener ( new  removal listener <  key  value >  (  )  {  @ override public void on removal (   removal notification <  key  value >  notification )  {   key removed key = notification . get key (  )  ;  if  ( removed key . has regions (  )  )   {   key clone with no regions = removed key . clone without regions (  )  ;  region specific keys . remove ( clone with no regions removed key )  ;   }   }   }   )  . build ( new  cache loader <  key  value >  (  )  {  @ override public  value load (   key key )  throws  exception  {  if  ( key . has regions (  )  )   {   key clone with no regions = key . clone without regions (  )  ;  region specific keys . put ( clone with no regions key )  ;   }   value value = generate payload ( key )  ;  return value ;   }   }   )  ;  if  ( should use read only response cache )   {  timer . schedule ( get cache update task (  )  new  date (  (  (  system . current time millis (  )   /  response cache update interval ms )  * response cache update interval ms )   +  response cache update interval ms )  response cache update interval ms )  ;   }  try  {   monitors . register object ( this )  ;   }  catch  (   throwable e )   {  logger . warn ( "" cannot register the jmx monitor for the  instance registry"" e )  ;   }   }  ",1919,3,response,1,"[220, 274, 333, 389, 569, 1454, 1581, 1620, 1661, 1698]"
5968,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\ResponseCacheImpl.java, response cache impl,"  (  eureka server config server config  server codecs server codecs  abstract instance registry registry )  {  this . server config = server config ;  this . server codecs = server codecs ;  this . should use read only response cache = server config . should use read only response cache (  )  ;  this . registry = registry ;  long response cache update interval ms = server config . get response cache update interval ms (  )  ;  this . read write cache map =  cache builder . new builder (  )  . initial capacity ( 1000 )  . expire after write ( server config . get response cache auto expiration in seconds (  )   time unit . seconds )  . removal listener ( new  removal listener <  key  value >  (  )  {  @ override public void on removal (   removal notification <  key  value >  notification )  {   key removed key = notification . get key (  )  ;  if  ( removed key . has regions (  )  )   {   key clone with no regions = removed key . clone without regions (  )  ;  region specific keys . remove ( clone with no regions removed key )  ;   }   }   }   )  . build ( new  cache loader <  key  value >  (  )  {  @ override public  value load (   key key )  throws  exception  {  if  ( key . has regions (  )  )   {   key clone with no regions = key . clone without regions (  )  ;  region specific keys . put ( clone with no regions key )  ;   }   value value = generate payload ( key )  ;  return value ;   }   }   )  ;  if  ( should use read only response cache )   {  timer . schedule ( get cache update task (  )  new  date (  (  (  system . current time millis (  )   /  response cache update interval ms )  * response cache update interval ms )   +  response cache update interval ms )  response cache update interval ms )  ;   }  try  {   monitors . register object ( this )  ;   }  catch  (   throwable e )   {  logger . warn ( "" cannot register the jmx monitor for the  instance registry"" e )  ;   }   }  ",1919,3,cache,2,"[229, 283, 342, 398, 450, 463, 578, 1078, 1463, 1499, 1590, 1629, 1670, 1707]"
5969,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\ResponseCacheImpl.java, response cache impl,"  (  eureka server config server config  server codecs server codecs  abstract instance registry registry )  {  this . server config = server config ;  this . server codecs = server codecs ;  this . should use read only response cache = server config . should use read only response cache (  )  ;  this . registry = registry ;  long response cache update interval ms = server config . get response cache update interval ms (  )  ;  this . read write cache map =  cache builder . new builder (  )  . initial capacity ( 1000 )  . expire after write ( server config . get response cache auto expiration in seconds (  )   time unit . seconds )  . removal listener ( new  removal listener <  key  value >  (  )  {  @ override public void on removal (   removal notification <  key  value >  notification )  {   key removed key = notification . get key (  )  ;  if  ( removed key . has regions (  )  )   {   key clone with no regions = removed key . clone without regions (  )  ;  region specific keys . remove ( clone with no regions removed key )  ;   }   }   }   )  . build ( new  cache loader <  key  value >  (  )  {  @ override public  value load (   key key )  throws  exception  {  if  ( key . has regions (  )  )   {   key clone with no regions = key . clone without regions (  )  ;  region specific keys . put ( clone with no regions key )  ;   }   value value = generate payload ( key )  ;  return value ;   }   }   )  ;  if  ( should use read only response cache )   {  timer . schedule ( get cache update task (  )  new  date (  (  (  system . current time millis (  )   /  response cache update interval ms )  * response cache update interval ms )   +  response cache update interval ms )  response cache update interval ms )  ;   }  try  {   monitors . register object ( this )  ;   }  catch  (   throwable e )   {  logger . warn ( "" cannot register the jmx monitor for the  instance registry"" e )  ;   }   }  ",1919,3,impl,3,[]
5970,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\ResponseCacheImpl.java, value,public   (  string payload )  {  this . payload = payload ;  if  (  ! empty   payload . equals ( payload )  )   {   stopwatch tracer = compress payload timer . start (  )  ;  try  {   byte array output stream bos = new  byte array output stream (  )  ;  gzip output stream out = new gzip output stream ( bos )  ;  byte[] raw bytes = payload . get bytes (  )  ;  out . write ( raw bytes )  ;  out . finish (  )  ;  out . close (  )  ;  bos . close (  )  ;  gzipped = bos . to byte array (  )  ;   }  catch  (  io exception e )   {  gzipped = null ;   }  finally  {  if  ( tracer  !  =  null )   {  tracer . stop (  )  ;   }   }   }  else  {  gzipped = null ;   }   }  ,667,1,value,1,[]
5971,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\ResponseCacheImpl.java,generate payload,"private  value   (  key key )  {   stopwatch tracer = null ;  try  {   string payload ;  switch  ( key . get entity type (  )  )   {  case  application: boolean is remote region requested = key . has regions (  )  ;  if  ( all   apps . equals ( key . get name (  )  )  )   {  if  ( is remote region requested )   {  tracer = serialize all apps with remote region timer . start (  )  ;  payload = get pay load ( key registry . get applications from multiple regions ( key . get regions (  )  )  )  ;   }  else  {  tracer = serialize all apps timer . start (  )  ;  payload = get pay load ( key registry . get applications (  )  )  ;   }   }  else if  ( all   apps   delta . equals ( key . get name (  )  )  )   {  if  ( is remote region requested )   {  tracer = serialize delta apps with remote region timer . start (  )  ;  version delta with regions . increment and get (  )  ;  version delta with regions legacy . increment and get (  )  ;  payload = get pay load ( key registry . get application deltas from multiple regions ( key . get regions (  )  )  )  ;   }  else  {  tracer = serialize delta apps timer . start (  )  ;  version delta . increment and get (  )  ;  version delta legacy . increment and get (  )  ;  payload = get pay load ( key registry . get application deltas (  )  )  ;   }   }  else  {  tracer = serialize one apptimer . start (  )  ;  payload = get pay load ( key registry . get application ( key . get name (  )  )  )  ;   }  break ;  case vip: case svip: tracer = serialize viptimer . start (  )  ;  payload = get pay load ( key get applications for vip ( key registry )  )  ;  break ;  default : logger . error ( "" unidentified entity type:  {  }  found in the cache key . "" key . get entity type (  )  )  ;  payload = """" ;  break ;   }  return new  value ( payload )  ;   }  finally  {  if  ( tracer  !  =  null )   {  tracer . stop (  )  ;   }   }   }  ",1887,2,generate,1,[]
5972,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\ResponseCacheImpl.java,generate payload,"private  value   (  key key )  {   stopwatch tracer = null ;  try  {   string payload ;  switch  ( key . get entity type (  )  )   {  case  application: boolean is remote region requested = key . has regions (  )  ;  if  ( all   apps . equals ( key . get name (  )  )  )   {  if  ( is remote region requested )   {  tracer = serialize all apps with remote region timer . start (  )  ;  payload = get pay load ( key registry . get applications from multiple regions ( key . get regions (  )  )  )  ;   }  else  {  tracer = serialize all apps timer . start (  )  ;  payload = get pay load ( key registry . get applications (  )  )  ;   }   }  else if  ( all   apps   delta . equals ( key . get name (  )  )  )   {  if  ( is remote region requested )   {  tracer = serialize delta apps with remote region timer . start (  )  ;  version delta with regions . increment and get (  )  ;  version delta with regions legacy . increment and get (  )  ;  payload = get pay load ( key registry . get application deltas from multiple regions ( key . get regions (  )  )  )  ;   }  else  {  tracer = serialize delta apps timer . start (  )  ;  version delta . increment and get (  )  ;  version delta legacy . increment and get (  )  ;  payload = get pay load ( key registry . get application deltas (  )  )  ;   }   }  else  {  tracer = serialize one apptimer . start (  )  ;  payload = get pay load ( key registry . get application ( key . get name (  )  )  )  ;   }  break ;  case vip: case svip: tracer = serialize viptimer . start (  )  ;  payload = get pay load ( key get applications for vip ( key registry )  )  ;  break ;  default : logger . error ( "" unidentified entity type:  {  }  found in the cache key . "" key . get entity type (  )  )  ;  payload = """" ;  break ;   }  return new  value ( payload )  ;   }  finally  {  if  ( tracer  !  =  null )   {  tracer . stop (  )  ;   }   }   }  ",1887,2,payload,2,"[78, 386, 564, 944, 1223, 1364, 1531, 1741, 1790]"
5973,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\ResponseCacheImpl.java,get,@ visible for testing  string   ( final  key key boolean use read only cache )  {   value payload = get value ( key use read only cache )  ;  if  ( payload  =  =  null || payload . get payload (  )  . equals ( empty   payload )  )   {  return null ;   }  ,255,1,get,1,"[100, 181]"
5974,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\ResponseCacheImpl.java,get applications for vip,"private static  applications   (  key key  abstract instance registry registry )  {  logger . debug ( "" retrieving applications from registry for key :  {  }   {  }   {  }   {  } "" key . get entity type (  )  key . get name (  )  key . get version (  )  key . get type (  )  )  ;   applications to return = new  applications (  )  ;   applications applications = registry . get applications (  )  ;  for  (   application application : applications . get registered applications (  )  )   {   application app to add = null ;  for  (   instance info instance info : application . get instances (  )  )   {   string vip address ;  if  (  key .  entity type . vip . equals ( key . get entity type (  )  )  )   {  vip address = instance info . getvip address (  )  ;   }  else if  (  key .  entity type . svip . equals ( key . get entity type (  )  )  )   {  vip address = instance info . get secure vip address (  )  ;   }  else  {  continue ;   }  if  ( null  !  =  vip address )   {   string[] vip addresses = vip address . split ( "" "" )  ;   arrays . sort ( vip addresses )  ;  if  (  arrays . binary search ( vip addresses key . get name (  )  )   >  =  0 )   {  if  ( null  =  =  app to add )   {  app to add = new  application ( application . get name (  )  )  ;  to return . add application ( app to add )  ;   }  app to add . add instance ( instance info )  ;   }   }   }   }  to return . set apps hash code ( to return . get reconcile hash code (  )  )  ;  logger . debug ( "" retrieved applications from registry for key :  {  }   {  }   {  }   {  }   reconcile hashcode:  {  } "" key . get entity type (  )  key . get name (  )  key . get version (  )  key . get type (  )  to return . get reconcile hash code (  )  )  ;  return to return ;   }  ",1751,4,get,1,"[187, 215, 236, 260, 374, 450, 578, 677, 739, 822, 884, 1129, 1245, 1426, 1591, 1619, 1640, 1664, 1691]"
5975,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\ResponseCacheImpl.java,get applications for vip,"private static  applications   (  key key  abstract instance registry registry )  {  logger . debug ( "" retrieving applications from registry for key :  {  }   {  }   {  }   {  } "" key . get entity type (  )  key . get name (  )  key . get version (  )  key . get type (  )  )  ;   applications to return = new  applications (  )  ;   applications applications = registry . get applications (  )  ;  for  (   application application : applications . get registered applications (  )  )   {   application app to add = null ;  for  (   instance info instance info : application . get instances (  )  )   {   string vip address ;  if  (  key .  entity type . vip . equals ( key . get entity type (  )  )  )   {  vip address = instance info . getvip address (  )  ;   }  else if  (  key .  entity type . svip . equals ( key . get entity type (  )  )  )   {  vip address = instance info . get secure vip address (  )  ;   }  else  {  continue ;   }  if  ( null  !  =  vip address )   {   string[] vip addresses = vip address . split ( "" "" )  ;   arrays . sort ( vip addresses )  ;  if  (  arrays . binary search ( vip addresses key . get name (  )  )   >  =  0 )   {  if  ( null  =  =  app to add )   {  app to add = new  application ( application . get name (  )  )  ;  to return . add application ( app to add )  ;   }  app to add . add instance ( instance info )  ;   }   }   }   }  to return . set apps hash code ( to return . get reconcile hash code (  )  )  ;  logger . debug ( "" retrieved applications from registry for key :  {  }   {  }   {  }   {  }   reconcile hashcode:  {  } "" key . get entity type (  )  key . get name (  )  key . get version (  )  key . get type (  )  to return . get reconcile hash code (  )  )  ;  return to return ;   }  ",1751,4,applications,2,"[16, 115, 282, 312, 335, 348, 378, 435, 465, 1491]"
5976,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\ResponseCacheImpl.java,get applications for vip,"private static  applications   (  key key  abstract instance registry registry )  {  logger . debug ( "" retrieving applications from registry for key :  {  }   {  }   {  }   {  } "" key . get entity type (  )  key . get name (  )  key . get version (  )  key . get type (  )  )  ;   applications to return = new  applications (  )  ;   applications applications = registry . get applications (  )  ;  for  (   application application : applications . get registered applications (  )  )   {   application app to add = null ;  for  (   instance info instance info : application . get instances (  )  )   {   string vip address ;  if  (  key .  entity type . vip . equals ( key . get entity type (  )  )  )   {  vip address = instance info . getvip address (  )  ;   }  else if  (  key .  entity type . svip . equals ( key . get entity type (  )  )  )   {  vip address = instance info . get secure vip address (  )  ;   }  else  {  continue ;   }  if  ( null  !  =  vip address )   {   string[] vip addresses = vip address . split ( "" "" )  ;   arrays . sort ( vip addresses )  ;  if  (  arrays . binary search ( vip addresses key . get name (  )  )   >  =  0 )   {  if  ( null  =  =  app to add )   {  app to add = new  application ( application . get name (  )  )  ;  to return . add application ( app to add )  ;   }  app to add . add instance ( instance info )  ;   }   }   }   }  to return . set apps hash code ( to return . get reconcile hash code (  )  )  ;  logger . debug ( "" retrieved applications from registry for key :  {  }   {  }   {  }   {  }   reconcile hashcode:  {  } "" key . get entity type (  )  key . get name (  )  key . get version (  )  key . get type (  )  to return . get reconcile hash code (  )  )  ;  return to return ;   }  ",1751,4,for,3,"[142, 400, 525, 1518]"
5977,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\ResponseCacheImpl.java,get applications for vip,"private static  applications   (  key key  abstract instance registry registry )  {  logger . debug ( "" retrieving applications from registry for key :  {  }   {  }   {  }   {  } "" key . get entity type (  )  key . get name (  )  key . get version (  )  key . get type (  )  )  ;   applications to return = new  applications (  )  ;   applications applications = registry . get applications (  )  ;  for  (   application application : applications . get registered applications (  )  )   {   application app to add = null ;  for  (   instance info instance info : application . get instances (  )  )   {   string vip address ;  if  (  key .  entity type . vip . equals ( key . get entity type (  )  )  )   {  vip address = instance info . getvip address (  )  ;   }  else if  (  key .  entity type . svip . equals ( key . get entity type (  )  )  )   {  vip address = instance info . get secure vip address (  )  ;   }  else  {  continue ;   }  if  ( null  !  =  vip address )   {   string[] vip addresses = vip address . split ( "" "" )  ;   arrays . sort ( vip addresses )  ;  if  (  arrays . binary search ( vip addresses key . get name (  )  )   >  =  0 )   {  if  ( null  =  =  app to add )   {  app to add = new  application ( application . get name (  )  )  ;  to return . add application ( app to add )  ;   }  app to add . add instance ( instance info )  ;   }   }   }   }  to return . set apps hash code ( to return . get reconcile hash code (  )  )  ;  logger . debug ( "" retrieved applications from registry for key :  {  }   {  }   {  }   {  }   reconcile hashcode:  {  } "" key . get entity type (  )  key . get name (  )  key . get version (  )  key . get type (  )  to return . get reconcile hash code (  )  )  ;  return to return ;   }  ",1751,4,vip,4,"[613, 656, 709, 742, 801, 854, 895, 963, 992, 1008, 1057, 1109]"
5978,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\ResponseCacheImpl.java,get cache update task,"private  timer task   (  )  {  return new  timer task (  )  {  @ override public void run (  )  {  logger . debug ( "" updating the client cache from response cache"" )  ;  for  (   key key : read only cache map . key set (  )  )   {  if  ( logger . is debug enabled (  )  )   {  logger . debug ( "" updating the client cache from response cache for key :  {  }   {  }   {  }   {  } "" key . get entity type (  )  key . get name (  )  key . get version (  )  key . get type (  )  )  ;   }  try  {   current request version . set ( key . get version (  )  )  ;   value cache value = read write cache map . get ( key )  ;   value current cache value = read only cache map . get ( key )  ;  if  ( cache value  !  =  current cache value )   {  read only cache map . put ( key cache value )  ;   }   }  catch  (   throwable th )   {  logger . error ( "" error while updating the client cache from response cache for key  {  } "" key . to string compact (  )  th )  ;   }   }   }   }   ;   }  ",981,4,get,1,"[388, 416, 437, 461, 533, 601, 668]"
5979,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\ResponseCacheImpl.java,get cache update task,"private  timer task   (  )  {  return new  timer task (  )  {  @ override public void run (  )  {  logger . debug ( "" updating the client cache from response cache"" )  ;  for  (   key key : read only cache map . key set (  )  )   {  if  ( logger . is debug enabled (  )  )   {  logger . debug ( "" updating the client cache from response cache for key :  {  }   {  }   {  }   {  } "" key . get entity type (  )  key . get name (  )  key . get version (  )  key . get type (  )  )  ;   }  try  {   current request version . set ( key . get version (  )  )  ;   value cache value = read write cache map . get ( key )  ;   value current cache value = read only cache map . get ( key )  ;  if  ( cache value  !  =  current cache value )   {  read only cache map . put ( key cache value )  ;   }   }  catch  (   throwable th )   {  logger . error ( "" error while updating the client cache from response cache for key  {  } "" key . to string compact (  )  th )  ;   }   }   }   }   ;   }  ",981,4,cache,2,"[138, 158, 200, 317, 337, 564, 589, 632, 656, 690, 717, 746, 768, 876, 896]"
5980,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\ResponseCacheImpl.java,get cache update task,"private  timer task   (  )  {  return new  timer task (  )  {  @ override public void run (  )  {  logger . debug ( "" updating the client cache from response cache"" )  ;  for  (   key key : read only cache map . key set (  )  )   {  if  ( logger . is debug enabled (  )  )   {  logger . debug ( "" updating the client cache from response cache for key :  {  }   {  }   {  }   {  } "" key . get entity type (  )  key . get name (  )  key . get version (  )  key . get type (  )  )  ;   }  try  {   current request version . set ( key . get version (  )  )  ;   value cache value = read write cache map . get ( key )  ;   value current cache value = read only cache map . get ( key )  ;  if  ( cache value  !  =  current cache value )   {  read only cache map . put ( key cache value )  ;   }   }  catch  (   throwable th )   {  logger . error ( "" error while updating the client cache from response cache for key  {  } "" key . to string compact (  )  th )  ;   }   }   }   }   ;   }  ",981,4,update,3,[]
5981,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\ResponseCacheImpl.java,get cache update task,"private  timer task   (  )  {  return new  timer task (  )  {  @ override public void run (  )  {  logger . debug ( "" updating the client cache from response cache"" )  ;  for  (   key key : read only cache map . key set (  )  )   {  if  ( logger . is debug enabled (  )  )   {  logger . debug ( "" updating the client cache from response cache for key :  {  }   {  }   {  }   {  } "" key . get entity type (  )  key . get name (  )  key . get version (  )  key . get type (  )  )  ;   }  try  {   current request version . set ( key . get version (  )  )  ;   value cache value = read write cache map . get ( key )  ;   value current cache value = read only cache map . get ( key )  ;  if  ( cache value  !  =  current cache value )   {  read only cache map . put ( key cache value )  ;   }   }  catch  (   throwable th )   {  logger . error ( "" error while updating the client cache from response cache for key  {  } "" key . to string compact (  )  th )  ;   }   }   }   }   ;   }  ",981,4,task,4,"[15, 49]"
5982,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\ResponseCacheImpl.java,get current size,"@ monitor ( name = ""response cache size"" type =  data source type . gauge )  public int   (  )  {  return read write cache map . as map (  )  . size (  )  ;   }  ",162,3,get,1,[]
5983,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\ResponseCacheImpl.java,get current size,"@ monitor ( name = ""response cache size"" type =  data source type . gauge )  public int   (  )  {  return read write cache map . as map (  )  . size (  )  ;   }  ",162,3,current,2,[]
5984,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\ResponseCacheImpl.java,get current size,"@ monitor ( name = ""response cache size"" type =  data source type . gauge )  public int   (  )  {  return read write cache map . as map (  )  . size (  )  ;   }  ",162,3,size,3,"[35, 144]"
5985,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\ResponseCacheImpl.java,getgzip,public byte[]   (  key key )  {   value payload = get value ( key should use read only response cache )  ;  if  ( payload  =  =  null )   {  return null ;   }  return payload . get gzipped (  )  ;   }  ,202,1,getgzip,1,[]
5986,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\ResponseCacheImpl.java,get gzipped,public byte[]   (  )  {  return gzipped ;   }  ,47,2,get,1,[]
5987,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\ResponseCacheImpl.java,get gzipped,public byte[]   (  )  {  return gzipped ;   }  ,47,2,gzipped,2,[32]
5988,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\ResponseCacheImpl.java,get pay load,"private  string   (  key key  application app )  {  if  ( app  =  =  null )   {  return empty   payload ;   }   encoder wrapper encoder wrapper = server codecs . get encoder ( key . get type (  )  key . get eureka accept (  )  )  ;  try  {  return encoder wrapper . encode ( app )  ;   }  catch  (   exception e )   {  logger . error ( "" failed to encode the payload for application  {  } "" app . get name (  )  e )  ;  return """" ;   }   }  ",441,3,get,1,"[162, 182, 203, 397]"
5989,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\ResponseCacheImpl.java,get pay load,"private  string   (  key key  application app )  {  if  ( app  =  =  null )   {  return empty   payload ;   }   encoder wrapper encoder wrapper = server codecs . get encoder ( key . get type (  )  key . get eureka accept (  )  )  ;  try  {  return encoder wrapper . encode ( app )  ;   }  catch  (   exception e )   {  logger . error ( "" failed to encode the payload for application  {  } "" app . get name (  )  e )  ;  return """" ;   }   }  ",441,3,pay,2,"[96, 359]"
5990,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\ResponseCacheImpl.java,get pay load,"private  string   (  key key  application app )  {  if  ( app  =  =  null )   {  return empty   payload ;   }   encoder wrapper encoder wrapper = server codecs . get encoder ( key . get type (  )  key . get eureka accept (  )  )  ;  try  {  return encoder wrapper . encode ( app )  ;   }  catch  (   exception e )   {  logger . error ( "" failed to encode the payload for application  {  } "" app . get name (  )  e )  ;  return """" ;   }   }  ",441,3,load,3,"[99, 362]"
5991,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\ResponseCacheImpl.java,get payload,public  string   (  )  {  return payload ;   }  ,48,2,get,1,[]
5992,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\ResponseCacheImpl.java,get payload,public  string   (  )  {  return payload ;   }  ,48,2,payload,2,[33]
5993,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\ResponseCacheImpl.java,get value,@ visible for testing  value   ( final  key key boolean use read only cache )  {   value payload = null ;  try  {  if  ( use read only cache )   {  final  value current payload = read only cache map . get ( key )  ;  if  ( current payload  !  =  null )   ,255,2,get,1,[201]
5994,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\ResponseCacheImpl.java,get value,@ visible for testing  value   ( final  key key boolean use read only cache )  {   value payload = null ;  try  {  if  ( use read only cache )   {  final  value current payload = read only cache map . get ( key )  ;  if  ( current payload  !  =  null )   ,255,2,value,2,"[23, 83, 155]"
5995,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\ResponseCacheImpl.java,get version delta,@ override public  atomic long   (  )  {  return version delta ;   }  ,70,3,get,1,[]
5996,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\ResponseCacheImpl.java,get version delta,@ override public  atomic long   (  )  {  return version delta ;   }  ,70,3,version,2,[49]
5997,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\ResponseCacheImpl.java,get version delta,@ override public  atomic long   (  )  {  return version delta ;   }  ,70,3,delta,3,[57]
5998,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\ResponseCacheImpl.java,get version delta static,@ deprecated public static  atomic long   (  )  {  return version delta legacy ;   }  ,86,4,get,1,[]
5999,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\ResponseCacheImpl.java,get version delta static,@ deprecated public static  atomic long   (  )  {  return version delta legacy ;   }  ,86,4,version,2,[58]
6000,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\ResponseCacheImpl.java,get version delta static,@ deprecated public static  atomic long   (  )  {  return version delta legacy ;   }  ,86,4,delta,3,[66]
6001,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\ResponseCacheImpl.java,get version delta static,@ deprecated public static  atomic long   (  )  {  return version delta legacy ;   }  ,86,4,static,4,[20]
6002,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\ResponseCacheImpl.java,get version delta with regions,@ override public  atomic long   (  )  {  return version delta with regions ;   }  ,83,5,get,1,[]
6003,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\ResponseCacheImpl.java,get version delta with regions,@ override public  atomic long   (  )  {  return version delta with regions ;   }  ,83,5,version,2,[49]
6004,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\ResponseCacheImpl.java,get version delta with regions,@ override public  atomic long   (  )  {  return version delta with regions ;   }  ,83,5,delta,3,[57]
6005,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\ResponseCacheImpl.java,get version delta with regions,@ override public  atomic long   (  )  {  return version delta with regions ;   }  ,83,5,with,4,[63]
6006,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\ResponseCacheImpl.java,get version delta with regions,@ override public  atomic long   (  )  {  return version delta with regions ;   }  ,83,5,regions,5,[68]
6007,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\ResponseCacheImpl.java,get version delta with regions legacy,@ deprecated public static  atomic long   (  )  {  return version delta with regions legacy ;   }  ,99,6,get,1,[]
6008,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\ResponseCacheImpl.java,get version delta with regions legacy,@ deprecated public static  atomic long   (  )  {  return version delta with regions legacy ;   }  ,99,6,version,2,[58]
6009,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\ResponseCacheImpl.java,get version delta with regions legacy,@ deprecated public static  atomic long   (  )  {  return version delta with regions legacy ;   }  ,99,6,delta,3,[66]
6010,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\ResponseCacheImpl.java,get version delta with regions legacy,@ deprecated public static  atomic long   (  )  {  return version delta with regions legacy ;   }  ,99,6,with,4,[72]
6011,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\ResponseCacheImpl.java,get version delta with regions legacy,@ deprecated public static  atomic long   (  )  {  return version delta with regions legacy ;   }  ,99,6,regions,5,[77]
6012,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\ResponseCacheImpl.java,get version delta with regions legacy,@ deprecated public static  atomic long   (  )  {  return version delta with regions legacy ;   }  ,99,6,legacy,6,[85]
6013,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\ResponseCacheImpl.java,invalidate,"public void   (  key .  .  .  keys )  {  for  (   key key : keys )   {  logger . debug ( "" invalidating the response cache key :  {  }   {  }   {  }   {  }    {  } "" key . get entity type (  )  key . get name (  )  key . get version (  )  key . get type (  )  key . get eureka accept (  )  )  ;  read write cache map . invalidate ( key )  ;   collection <  key >  keys with regions = region specific keys . get ( key )  ;  if  ( null  !  =  keys with regions &&  ! keys with regions . is empty (  )  )   {  for  (   key keys with region : keys with regions )   {  logger . debug ( "" invalidating the response cache key :  {  }   {  }   {  }   {  }   {  } "" key . get entity type (  )  key . get name (  )  key . get version (  )  key . get type (  )  key . get eureka accept (  )  )  ;  read write cache map . invalidate ( keys with region )  ;   }   }   }   }  ",862,1,invalidate,1,"[319, 810]"
6014,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\ResponseCacheImpl.java,load,@ override public  value   (  key key )  throws  exception  {  if  ( key . has regions (  )  )   {   key clone with no regions = key . clone without regions (  )  ;  region specific keys . put ( clone with no regions key )  ;   }   value value = generate ,255,1,load,1,[]
6015,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\ResponseCacheImpl.java,on removal,@ override public void   (  removal notification <  key  value >  notification )  {   key removed key = notification . get key (  )  ;  if  ( removed key . has regions (  )  )   {   key clone with no regions = removed key . clone without regions (  )  ;  ,255,2,on,1,"[46, 76, 114, 164, 188, 204, 226, 242]"
6016,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\ResponseCacheImpl.java,on removal,@ override public void   (  removal notification <  key  value >  notification )  {   key removed key = notification . get key (  )  ;  if  ( removed key . has regions (  )  )   {   key clone with no regions = removed key . clone without regions (  )  ;  ,255,2,removal,2,[28]
6017,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\ResponseCacheImpl.java,run,"@ override public void   (  )  {  logger . debug ( "" updating the client cache from response cache"" )  ;  for  (   key key : read only cache map . key set (  )  )   {  if  ( logger . is debug enabled (  )  )   {  logger . debug ( "" updating the client cac",255,1,run,1,[]
6018,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java, peer aware instance registry impl,@ inject public   (  eureka server config server config  eureka client config client config  server codecs server codecs  eureka client eureka client )  {  super ( server config client config server codecs )  ;  this . eureka client = eureka client ;  thi,255,5,peer,1,[]
6019,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java, peer aware instance registry impl,@ inject public   (  eureka server config server config  eureka client config client config  server codecs server codecs  eureka client eureka client )  {  super ( server config client config server codecs )  ;  this . eureka client = eureka client ;  thi,255,5,aware,2,[]
6020,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java, peer aware instance registry impl,@ inject public   (  eureka server config server config  eureka client config client config  server codecs server codecs  eureka client eureka client )  {  super ( server config client config server codecs )  ;  this . eureka client = eureka client ;  thi,255,5,instance,3,[]
6021,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java, peer aware instance registry impl,@ inject public   (  eureka server config server config  eureka client config client config  server codecs server codecs  eureka client eureka client )  {  super ( server config client config server codecs )  ;  this . eureka client = eureka client ;  thi,255,5,registry,4,[]
6022,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java, peer aware instance registry impl,@ inject public   (  eureka server config server config  eureka client config client config  server codecs server codecs  eureka client eureka client )  {  super ( server config client config server codecs )  ;  this . eureka client = eureka client ;  thi,255,5,impl,5,[]
6023,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,cancel,@ override public boolean   ( final  string app name final  string id final boolean is replication )  {  if  ( super . cancel ( app name id is replication )  )   {  replicate to peers (  action .  cancel app name id null null is replication )  ;  synchron,255,1,cancel,1,"[119, 197]"
6024,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,compare,public int   (  application l  application r )  {  return l . get name (  )  . compare to ( r . get name (  )  )  ;   }  ,121,1,compare,1,[79]
6025,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,delete status override,@ override public boolean   (  string app name  string id  instance status new status  string last dirty timestamp boolean is replication )  {  if  ( super . delete status override ( app name id new status last dirty timestamp is replication )  )   {  rep,255,3,delete,1,[158]
6026,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,delete status override,@ override public boolean   (  string app name  string id  instance status new status  string last dirty timestamp boolean is replication )  {  if  ( super . delete status override ( app name id new status last dirty timestamp is replication )  )   {  rep,255,3,status,2,"[68, 79, 165, 199]"
6027,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,delete status override,@ override public boolean   (  string app name  string id  instance status new status  string last dirty timestamp boolean is replication )  {  if  ( super . delete status override ( app name id new status last dirty timestamp is replication )  )   {  rep,255,3,override,3,"[2, 172]"
6028,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,get instance info override rule,@ override protected  instance status override rule   (  )  {  return this . instance status override rule ;   }  ,114,5,get,1,[]
6029,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,get instance info override rule,@ override protected  instance status override rule   (  )  {  return this . instance status override rule ;   }  ,114,5,instance,2,"[22, 77]"
6030,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,get instance info override rule,@ override protected  instance status override rule   (  )  {  return this . instance status override rule ;   }  ,114,5,info,3,[]
6031,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,get instance info override rule,@ override protected  instance status override rule   (  )  {  return this . instance status override rule ;   }  ,114,5,override,4,"[2, 38, 93]"
6032,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,get instance info override rule,@ override protected  instance status override rule   (  )  {  return this . instance status override rule ;   }  ,114,5,rule,5,"[47, 102]"
6033,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,get local registry size,"@ override @com . netflix . servo . annotations .  monitor ( name = ""local registry size"" description = "" current registry size"" type =  data source type . gauge )  public long   (  )  {  return super . get local registry size (  )  ;   }  ",240,4,get,1,[203]
6034,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,get local registry size,"@ override @com . netflix . servo . annotations .  monitor ( name = ""local registry size"" description = "" current registry size"" type =  data source type . gauge )  public long   (  )  {  return super . get local registry size (  )  ;   }  ",240,4,local,2,"[69, 207]"
6035,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,get local registry size,"@ override @com . netflix . servo . annotations .  monitor ( name = ""local registry size"" description = "" current registry size"" type =  data source type . gauge )  public long   (  )  {  return super . get local registry size (  )  ;   }  ",240,4,registry,3,"[75, 114, 213]"
6036,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,get local registry size,"@ override @com . netflix . servo . annotations .  monitor ( name = ""local registry size"" description = "" current registry size"" type =  data source type . gauge )  public long   (  )  {  return super . get local registry size (  )  ;   }  ",240,4,size,4,"[84, 123, 222]"
6037,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,get next server from eureka,@ override public  instance info   (  string virtual hostname boolean secure )  {  return null ;   }  ,102,5,get,1,[]
6038,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,get next server from eureka,@ override public  instance info   (  string virtual hostname boolean secure )  {  return null ;   }  ,102,5,next,2,[]
6039,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,get next server from eureka,@ override public  instance info   (  string virtual hostname boolean secure )  {  return null ;   }  ,102,5,server,3,[]
6040,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,get next server from eureka,@ override public  instance info   (  string virtual hostname boolean secure )  {  return null ;   }  ,102,5,from,4,[]
6041,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,get next server from eureka,@ override public  instance info   (  string virtual hostname boolean secure )  {  return null ;   }  ,102,5,eureka,5,[]
6042,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,get num of replications in last min,"@com . netflix . servo . annotations .  monitor ( name = ""num of replications in last min"" description = "" number of total replications received in the last minute"" type = com . netflix . servo . annotations .  data source type . gauge )  public long   ( ",255,7,get,1,[]
6043,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,get num of replications in last min,"@com . netflix . servo . annotations .  monitor ( name = ""num of replications in last min"" description = "" number of total replications received in the last minute"" type = com . netflix . servo . annotations .  data source type . gauge )  public long   ( ",255,7,num,2,"[58, 107]"
6044,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,get num of replications in last min,"@com . netflix . servo . annotations .  monitor ( name = ""num of replications in last min"" description = "" number of total replications received in the last minute"" type = com . netflix . servo . annotations .  data source type . gauge )  public long   ( ",255,7,of,3,"[62, 114]"
6045,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,get num of replications in last min,"@com . netflix . servo . annotations .  monitor ( name = ""num of replications in last min"" description = "" number of total replications received in the last minute"" type = com . netflix . servo . annotations .  data source type . gauge )  public long   ( ",255,7,replications,4,"[65, 123]"
6046,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,get num of replications in last min,"@com . netflix . servo . annotations .  monitor ( name = ""num of replications in last min"" description = "" number of total replications received in the last minute"" type = com . netflix . servo . annotations .  data source type . gauge )  public long   ( ",255,7,in,5,"[78, 87, 145, 158]"
6047,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,get num of replications in last min,"@com . netflix . servo . annotations .  monitor ( name = ""num of replications in last min"" description = "" number of total replications received in the last minute"" type = com . netflix . servo . annotations .  data source type . gauge )  public long   ( ",255,7,last,6,"[81, 152]"
6048,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,get num of replications in last min,"@com . netflix . servo . annotations .  monitor ( name = ""num of replications in last min"" description = "" number of total replications received in the last minute"" type = com . netflix . servo . annotations .  data source type . gauge )  public long   ( ",255,7,min,7,"[86, 157]"
6049,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,get replica nodes,@ deprecated public  list <  peer eureka node >    (  )  {  return  collections . unmodifiable list ( peer eureka nodes . get peer eureka nodes (  )  )  ;   }  ,160,3,get,1,[122]
6050,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,get replica nodes,@ deprecated public  list <  peer eureka node >    (  )  {  return  collections . unmodifiable list ( peer eureka nodes . get peer eureka nodes (  )  )  ;   }  ,160,3,replica,2,[]
6051,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,get replica nodes,@ deprecated public  list <  peer eureka node >    (  )  {  return  collections . unmodifiable list ( peer eureka nodes . get peer eureka nodes (  )  )  ;   }  ,160,3,nodes,3,"[114, 138]"
6052,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,get sorted applications,@ override public  list <  application >    (  )  {   list <  application >  apps = new  array list <  application >  ( get applications (  )  . get registered applications (  )  )  ;   collections . sort ( apps app   comparator )  ;  return apps ;   }  ,254,3,get,1,"[120, 145]"
6053,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,get sorted applications,@ override public  list <  application >    (  )  {   list <  application >  apps = new  array list <  application >  ( get applications (  )  . get registered applications (  )  )  ;   collections . sort ( apps app   comparator )  ;  return apps ;   }  ,254,3,sorted,2,[]
6054,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,get sorted applications,@ override public  list <  application >    (  )  {   list <  application >  apps = new  array list <  application >  ( get applications (  )  . get registered applications (  )  )  ;   collections . sort ( apps app   comparator )  ;  return apps ;   }  ,254,3,applications,3,"[124, 160]"
6055,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,get timer,public com . netflix . servo . monitor .  timer   (  )  {  return this . timer ;   }  ,86,2,get,1,[]
6056,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,get timer,public com . netflix . servo . monitor .  timer   (  )  {  return this . timer ;   }  ,86,2,timer,2,"[42, 73]"
6057,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,init,@ override public void   (  peer eureka nodes peer eureka nodes )  throws  exception  {  this . number of replications last min . start (  )  ;  this . peer eureka nodes = peer eureka nodes ;  initialized response cache (  )  ;  schedule renewal threshold,255,1,init,1,[193]
6058,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,is below renew thresold,"@com . netflix . servo . annotations .  monitor ( name = ""is below renew threshold"" description = ""0  =  false  1  =  true"" type = com . netflix . servo . annotations .  data source type . gauge )  @ override public int   (  )  {  if  (  ( get num of rene",255,4,is,1,[58]
6059,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,is below renew thresold,"@com . netflix . servo . annotations .  monitor ( name = ""is below renew threshold"" description = ""0  =  false  1  =  true"" type = com . netflix . servo . annotations .  data source type . gauge )  @ override public int   (  )  {  if  (  ( get num of rene",255,4,below,2,[61]
6060,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,is below renew thresold,"@com . netflix . servo . annotations .  monitor ( name = ""is below renew threshold"" description = ""0  =  false  1  =  true"" type = com . netflix . servo . annotations .  data source type . gauge )  @ override public int   (  )  {  if  (  ( get num of rene",255,4,renew,3,[67]
6061,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,is below renew thresold,"@com . netflix . servo . annotations .  monitor ( name = ""is below renew threshold"" description = ""0  =  false  1  =  true"" type = com . netflix . servo . annotations .  data source type . gauge )  @ override public int   (  )  {  if  (  ( get num of rene",255,4,thresold,4,[]
6062,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,is lease expiration enabled,@ override public boolean   (  )  {  if  (  ! is self preservation mode enabled (  )  )   {  return true ;   }  return number of renews per min threshold  >  0 && get num of renews in last min (  )   >  number of renews per min threshold ;   }  ,245,4,is,1,[46]
6063,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,is lease expiration enabled,@ override public boolean   (  )  {  if  (  ! is self preservation mode enabled (  )  )   {  return true ;   }  return number of renews per min threshold  >  0 && get num of renews in last min (  )   >  number of renews per min threshold ;   }  ,245,4,lease,2,[]
6064,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,is lease expiration enabled,@ override public boolean   (  )  {  if  (  ! is self preservation mode enabled (  )  )   {  return true ;   }  return number of renews per min threshold  >  0 && get num of renews in last min (  )   >  number of renews per min threshold ;   }  ,245,4,expiration,3,[]
6065,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,is lease expiration enabled,@ override public boolean   (  )  {  if  (  ! is self preservation mode enabled (  )  )   {  return true ;   }  return number of renews per min threshold  >  0 && get num of renews in last min (  )   >  number of renews per min threshold ;   }  ,245,4,enabled,4,[72]
6066,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,is registerable,public boolean   (  instance info instance info )  {   data center info datacenter info = instance info . get data center info (  )  ;   string server region = client config . get region (  )  ;  if  (  amazon info . class . is instance ( datacenter info )  )   {   amazon info info =  amazon info . class . cast ( instance info . get data center info (  )  )  ;   string availability zone = info . get (  meta data key . availability zone )  ;  if  ( availability zone  =  =  null && us   east   1 . equals ignore case ( server region )  )   {  return true ;   }  else if  (  ( availability zone  !  =  null )  &&  ( availability zone . contains ( server region )  )  )   {  return true ;   }   }  return true ;   }  ,718,2,is,1,[225]
6067,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,is registerable,public boolean   (  instance info instance info )  {   data center info datacenter info = instance info . get data center info (  )  ;   string server region = client config . get region (  )  ;  if  (  amazon info . class . is instance ( datacenter info )  )   {   amazon info info =  amazon info . class . cast ( instance info . get data center info (  )  )  ;   string availability zone = info . get (  meta data key . availability zone )  ;  if  ( availability zone  =  =  null && us   east   1 . equals ignore case ( server region )  )   {  return true ;   }  else if  (  ( availability zone  !  =  null )  &&  ( availability zone . contains ( server region )  )  )   {  return true ;   }   }  return true ;   }  ,718,2,registerable,2,[]
6068,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,is self preservation mode enabled,@ override public boolean   (  )  {  return server config . should enable self preservation (  )  ;   }  ,105,5,is,1,[]
6069,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,is self preservation mode enabled,@ override public boolean   (  )  {  return server config . should enable self preservation (  )  ;   }  ,105,5,self,2,[74]
6070,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,is self preservation mode enabled,@ override public boolean   (  )  {  return server config . should enable self preservation (  )  ;   }  ,105,5,preservation,3,[79]
6071,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,is self preservation mode enabled,@ override public boolean   (  )  {  return server config . should enable self preservation (  )  ;   }  ,105,5,mode,4,[]
6072,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,is self preservation mode enabled,@ override public boolean   (  )  {  return server config . should enable self preservation (  )  ;   }  ,105,5,enabled,5,[]
6073,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,open for traffic,@ override public void   (  application info manager application info manager int count )  {  this . expected number of renews per min = count * 2 ;  this . number of renews per min threshold =  ( int )  ( this . expected number of renews per min * server,255,3,open,1,[]
6074,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,open for traffic,@ override public void   (  application info manager application info manager int count )  {  this . expected number of renews per min = count * 2 ;  this . number of renews per min threshold =  ( int )  ( this . expected number of renews per min * server,255,3,for,2,[]
6075,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,open for traffic,@ override public void   (  application info manager application info manager int count )  {  this . expected number of renews per min = count * 2 ;  this . number of renews per min threshold =  ( int )  ( this . expected number of renews per min * server,255,3,traffic,3,[]
6076,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,prime aws replicas,"private void   (  application info manager application info manager )  {  boolean are all peer nodes primed = false ;  while  (  ! are all peer nodes primed )   {   string peer host name = null ;  try  {   application eureka apps = this . get application ( application info manager . get info (  )  . get app name (  )  false )  ;  if  ( eureka apps  =  =  null )   {  are all peer nodes primed = true ;  logger . info ( "" no peers needed to prime . "" )  ;  return ;   }  for  (   peer eureka node node : peer eureka nodes . get peer eureka nodes (  )  )   {  for  (   instance info peer instance info : eureka apps . get instances (  )  )   {   lease info lease info = peer instance info . get lease info (  )  ;  if  (  system . current time millis (  )   >   ( lease info . get renewal timestamp (  )   +   ( lease info . get duration in secs (  )  * 1000 )  )   +   ( 2 * 60 * 1000 )  )   {  continue ;   }  peer host name = peer instance info . get host name (  )  ;  logger . info ( "" trying to send heartbeat for the eureka server at  {  }  to make sure the ""  +  ""network channels are open"" peer host name )  ;  if  ( peer host name . equals ignore case ( new uri ( node . get service url (  )  )  . get host (  )  )  )   {  node . heartbeat ( peer instance info . get app name (  )  peer instance info . get id (  )  peer instance info null true )  ;   }   }   }  are all peer nodes primed = true ;   }  catch  (   throwable e )   {  logger . error ( "" could not contact  {  } "" peer host name e )  ;  try  {   thread . sleep ( prime   peer   nodes   retry   ms )  ;   }  catch  (   interrupted exception e1 )   {  logger . warn ( "" interrupted while priming : "" e1 )  ;  are all peer nodes primed = true ;   }   }   }   }  ",1733,3,prime,1,"[101, 150, 388, 442, 1392, 1537, 1700]"
6077,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,prime aws replicas,"private void   (  application info manager application info manager )  {  boolean are all peer nodes primed = false ;  while  (  ! are all peer nodes primed )   {   string peer host name = null ;  try  {   application eureka apps = this . get application ( application info manager . get info (  )  . get app name (  )  false )  ;  if  ( eureka apps  =  =  null )   {  are all peer nodes primed = true ;  logger . info ( "" no peers needed to prime . "" )  ;  return ;   }  for  (   peer eureka node node : peer eureka nodes . get peer eureka nodes (  )  )   {  for  (   instance info peer instance info : eureka apps . get instances (  )  )   {   lease info lease info = peer instance info . get lease info (  )  ;  if  (  system . current time millis (  )   >   ( lease info . get renewal timestamp (  )   +   ( lease info . get duration in secs (  )  * 1000 )  )   +   ( 2 * 60 * 1000 )  )   {  continue ;   }  peer host name = peer instance info . get host name (  )  ;  logger . info ( "" trying to send heartbeat for the eureka server at  {  }  to make sure the ""  +  ""network channels are open"" peer host name )  ;  if  ( peer host name . equals ignore case ( new uri ( node . get service url (  )  )  . get host (  )  )  )   {  node . heartbeat ( peer instance info . get app name (  )  peer instance info . get id (  )  peer instance info null true )  ;   }   }   }  are all peer nodes primed = true ;   }  catch  (   throwable e )   {  logger . error ( "" could not contact  {  } "" peer host name e )  ;  try  {   thread . sleep ( prime   peer   nodes   retry   ms )  ;   }  catch  (   interrupted exception e1 )   {  logger . warn ( "" interrupted while priming : "" e1 )  ;  are all peer nodes primed = true ;   }   }   }   }  ",1733,3,aws,2,[]
6078,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,prime aws replicas,"private void   (  application info manager application info manager )  {  boolean are all peer nodes primed = false ;  while  (  ! are all peer nodes primed )   {   string peer host name = null ;  try  {   application eureka apps = this . get application ( application info manager . get info (  )  . get app name (  )  false )  ;  if  ( eureka apps  =  =  null )   {  are all peer nodes primed = true ;  logger . info ( "" no peers needed to prime . "" )  ;  return ;   }  for  (   peer eureka node node : peer eureka nodes . get peer eureka nodes (  )  )   {  for  (   instance info peer instance info : eureka apps . get instances (  )  )   {   lease info lease info = peer instance info . get lease info (  )  ;  if  (  system . current time millis (  )   >   ( lease info . get renewal timestamp (  )   +   ( lease info . get duration in secs (  )  * 1000 )  )   +   ( 2 * 60 * 1000 )  )   {  continue ;   }  peer host name = peer instance info . get host name (  )  ;  logger . info ( "" trying to send heartbeat for the eureka server at  {  }  to make sure the ""  +  ""network channels are open"" peer host name )  ;  if  ( peer host name . equals ignore case ( new uri ( node . get service url (  )  )  . get host (  )  )  )   {  node . heartbeat ( peer instance info . get app name (  )  peer instance info . get id (  )  peer instance info null true )  ;   }   }   }  are all peer nodes primed = true ;   }  catch  (   throwable e )   {  logger . error ( "" could not contact  {  } "" peer host name e )  ;  try  {   thread . sleep ( prime   peer   nodes   retry   ms )  ;   }  catch  (   interrupted exception e1 )   {  logger . warn ( "" interrupted while priming : "" e1 )  ;  are all peer nodes primed = true ;   }   }   }   }  ",1733,3,replicas,3,[]
6079,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,register,@ override public void   ( final  instance info info final boolean is replication )  {  int lease duration =  lease . default   duration   in   secs ;  if  ( info . get lease info (  )   !  =  null && info . get lease info (  )  . get duration in secs (  ,255,1,register,1,[]
6080,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,renew,public boolean   ( final  string app name final  string id final boolean is replication )  {  if  ( super . renew ( app name id is replication )  )   {  replicate to peers (  action .  heartbeat app name id null null is replication )  ;  return true ;   }  return false ;   }  ,277,1,renew,1,[108]
6081,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,replicateasg info to replica nodes,"private void   ( final  string asg name final asg status new status final  peer eureka node node )  {   current request version . set (  version . v2 )  ;  try  {  node . status update ( asg name new status )  ;   }  catch  (   throwable e )   {  logger . error ( "" cannot replicate asg status information to  {  } "" node . get service url (  )  e )  ;   }   }  ",362,5,replicateasg,1,[]
6082,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,replicateasg info to replica nodes,"private void   ( final  string asg name final asg status new status final  peer eureka node node )  {   current request version . set (  version . v2 )  ;  try  {  node . status update ( asg name new status )  ;   }  catch  (   throwable e )   {  logger . error ( "" cannot replicate asg status information to  {  } "" node . get service url (  )  e )  ;   }   }  ",362,5,info,2,[294]
6083,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,replicateasg info to replica nodes,"private void   ( final  string asg name final asg status new status final  peer eureka node node )  {   current request version . set (  version . v2 )  ;  try  {  node . status update ( asg name new status )  ;   }  catch  (   throwable e )   {  logger . error ( "" cannot replicate asg status information to  {  } "" node . get service url (  )  e )  ;   }   }  ",362,5,to,3,[306]
6084,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,replicateasg info to replica nodes,"private void   ( final  string asg name final asg status new status final  peer eureka node node )  {   current request version . set (  version . v2 )  ;  try  {  node . status update ( asg name new status )  ;   }  catch  (   throwable e )   {  logger . error ( "" cannot replicate asg status information to  {  } "" node . get service url (  )  e )  ;   }   }  ",362,5,replica,4,[273]
6085,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,replicateasg info to replica nodes,"private void   ( final  string asg name final asg status new status final  peer eureka node node )  {   current request version . set (  version . v2 )  ;  try  {  node . status update ( asg name new status )  ;   }  catch  (   throwable e )   {  logger . error ( "" cannot replicate asg status information to  {  } "" node . get service url (  )  e )  ;   }   }  ",362,5,nodes,5,[]
6086,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,replicate instance actions to peers,"private void   (  action action  string app name  string id  instance info info  instance status new status  peer eureka node node )  {  try  {   instance info info from registry = null ;   current request version . set (  version . v2 )  ;  switch  ( action )   {  case  cancel: node . cancel ( app name id )  ;  break ;  case  heartbeat:  instance status overridden status = overridden instance status map . get ( id )  ;  info from registry = get instance by app and id ( app name id false )  ;  node . heartbeat ( app name id info from registry overridden status false )  ;  break ;  case  register: node . register ( info )  ;  break ;  case  status update: info from registry = get instance by app and id ( app name id false )  ;  node . status update ( app name id new status info from registry )  ;  break ;  case  delete status override: info from registry = get instance by app and id ( app name id false )  ;  node . delete status override ( app name id info from registry )  ;  break ;   }   }  catch  (  throwable t )   {  logger . error ( "" cannot replicate information to  {  }  for action  {  } "" node . get service url (  )  action . name (  )  t )  ;   }   }  ",1178,5,replicate,1,[1062]
6087,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,replicate instance actions to peers,"private void   (  action action  string app name  string id  instance info info  instance status new status  peer eureka node node )  {  try  {   instance info info from registry = null ;   current request version . set (  version . v2 )  ;  switch  ( action )   {  case  cancel: node . cancel ( app name id )  ;  break ;  case  heartbeat:  instance status overridden status = overridden instance status map . get ( id )  ;  info from registry = get instance by app and id ( app name id false )  ;  node . heartbeat ( app name id info from registry overridden status false )  ;  break ;  case  register: node . register ( info )  ;  break ;  case  status update: info from registry = get instance by app and id ( app name id false )  ;  node . status update ( app name id new status info from registry )  ;  break ;  case  delete status override: info from registry = get instance by app and id ( app name id false )  ;  node . delete status override ( app name id info from registry )  ;  break ;   }   }  catch  (  throwable t )   {  logger . error ( "" cannot replicate information to  {  }  for action  {  } "" node . get service url (  )  action . name (  )  t )  ;   }   }  ",1178,5,instance,2,"[61, 81, 146, 341, 388, 450, 688, 872]"
6088,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,replicate instance actions to peers,"private void   (  action action  string app name  string id  instance info info  instance status new status  peer eureka node node )  {  try  {   instance info info from registry = null ;   current request version . set (  version . v2 )  ;  switch  ( action )   {  case  cancel: node . cancel ( app name id )  ;  break ;  case  heartbeat:  instance status overridden status = overridden instance status map . get ( id )  ;  info from registry = get instance by app and id ( app name id false )  ;  node . heartbeat ( app name id info from registry overridden status false )  ;  break ;  case  register: node . register ( info )  ;  break ;  case  status update: info from registry = get instance by app and id ( app name id false )  ;  node . status update ( app name id new status info from registry )  ;  break ;  case  delete status override: info from registry = get instance by app and id ( app name id false )  ;  node . delete status override ( app name id info from registry )  ;  break ;   }   }  catch  (  throwable t )   {  logger . error ( "" cannot replicate information to  {  }  for action  {  } "" node . get service url (  )  action . name (  )  t )  ;   }   }  ",1178,5,actions,3,[]
6089,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,replicate instance actions to peers,"private void   (  action action  string app name  string id  instance info info  instance status new status  peer eureka node node )  {  try  {   instance info info from registry = null ;   current request version . set (  version . v2 )  ;  switch  ( action )   {  case  cancel: node . cancel ( app name id )  ;  break ;  case  heartbeat:  instance status overridden status = overridden instance status map . get ( id )  ;  info from registry = get instance by app and id ( app name id false )  ;  node . heartbeat ( app name id info from registry overridden status false )  ;  break ;  case  register: node . register ( info )  ;  break ;  case  status update: info from registry = get instance by app and id ( app name id false )  ;  node . status update ( app name id new status info from registry )  ;  break ;  case  delete status override: info from registry = get instance by app and id ( app name id false )  ;  node . delete status override ( app name id info from registry )  ;  break ;   }   }  catch  (  throwable t )   {  logger . error ( "" cannot replicate information to  {  }  for action  {  } "" node . get service url (  )  action . name (  )  t )  ;   }   }  ",1178,5,to,4,[1084]
6090,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,replicate instance actions to peers,"private void   (  action action  string app name  string id  instance info info  instance status new status  peer eureka node node )  {  try  {   instance info info from registry = null ;   current request version . set (  version . v2 )  ;  switch  ( action )   {  case  cancel: node . cancel ( app name id )  ;  break ;  case  heartbeat:  instance status overridden status = overridden instance status map . get ( id )  ;  info from registry = get instance by app and id ( app name id false )  ;  node . heartbeat ( app name id info from registry overridden status false )  ;  break ;  case  register: node . register ( info )  ;  break ;  case  status update: info from registry = get instance by app and id ( app name id false )  ;  node . status update ( app name id new status info from registry )  ;  break ;  case  delete status override: info from registry = get instance by app and id ( app name id false )  ;  node . delete status override ( app name id info from registry )  ;  break ;   }   }  catch  (  throwable t )   {  logger . error ( "" cannot replicate information to  {  }  for action  {  } "" node . get service url (  )  action . name (  )  t )  ;   }   }  ",1178,5,peers,5,[]
6091,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,replicate to peers,private void   (  action action  string app name  string id  instance info info  instance status new status boolean is replication )  {   stopwatch tracer = action . get timer (  )  . start (  )  ;  try  {  if  ( is replication )   {  number of replications last min . increment (  )  ;   }  if  ( peer eureka nodes  =  =   collections . empty   list || is replication )   {  return ;   }  for  (  final  peer eureka node node : peer eureka nodes . get peer eureka nodes (  )  )   {  if  ( peer eureka nodes . is this my url ( node . get service url (  )  )  )   {  continue ;   }  replicate instance actions to peers ( action app name id info new status node )  ;   }   }  finally  {  tracer . stop (  )  ;   }   }  ,717,3,replicate,1,[582]
6092,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,replicate to peers,private void   (  action action  string app name  string id  instance info info  instance status new status boolean is replication )  {   stopwatch tracer = action . get timer (  )  . start (  )  ;  try  {  if  ( is replication )   {  number of replications last min . increment (  )  ;   }  if  ( peer eureka nodes  =  =   collections . empty   list || is replication )   {  return ;   }  for  (  final  peer eureka node node : peer eureka nodes . get peer eureka nodes (  )  )   {  if  ( peer eureka nodes . is this my url ( node . get service url (  )  )  )   {  continue ;   }  replicate instance actions to peers ( action app name id info new status node )  ;   }   }  finally  {  tracer . stop (  )  ;   }   }  ,717,3,to,2,"[139, 609, 696]"
6093,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,replicate to peers,private void   (  action action  string app name  string id  instance info info  instance status new status boolean is replication )  {   stopwatch tracer = action . get timer (  )  . start (  )  ;  try  {  if  ( is replication )   {  number of replications last min . increment (  )  ;   }  if  ( peer eureka nodes  =  =   collections . empty   list || is replication )   {  return ;   }  for  (  final  peer eureka node node : peer eureka nodes . get peer eureka nodes (  )  )   {  if  ( peer eureka nodes . is this my url ( node . get service url (  )  )  )   {  continue ;   }  replicate instance actions to peers ( action app name id info new status node )  ;   }   }  finally  {  tracer . stop (  )  ;   }   }  ,717,3,peers,3,[612]
6094,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,run,@ override public void   (  )  {  update renewal threshold (  )  ;   }  ,72,1,run,1,[]
6095,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,schedule renewal threshold update task,private void   (  )  {  timer . schedule ( new  timer task (  )  {  @ override public void run (  )  {  update renewal threshold (  )  ;   }   }   server config . get renewal threshold update interval ms (  )  server config . get renewal threshold update interval ms (  )  )  ;   }  ,283,5,schedule,1,[32]
6096,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,schedule renewal threshold update task,private void   (  )  {  timer . schedule ( new  timer task (  )  {  @ override public void run (  )  {  update renewal threshold (  )  ;   }   }   server config . get renewal threshold update interval ms (  )  server config . get renewal threshold update interval ms (  )  )  ;   }  ,283,5,renewal,2,"[111, 167, 230]"
6097,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,schedule renewal threshold update task,private void   (  )  {  timer . schedule ( new  timer task (  )  {  @ override public void run (  )  {  update renewal threshold (  )  ;   }   }   server config . get renewal threshold update interval ms (  )  server config . get renewal threshold update interval ms (  )  )  ;   }  ,283,5,threshold,3,"[119, 175, 238]"
6098,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,schedule renewal threshold update task,private void   (  )  {  timer . schedule ( new  timer task (  )  {  @ override public void run (  )  {  update renewal threshold (  )  ;   }   }   server config . get renewal threshold update interval ms (  )  server config . get renewal threshold update interval ms (  )  )  ;   }  ,283,5,update,4,"[104, 185, 248]"
6099,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,schedule renewal threshold update task,private void   (  )  {  timer . schedule ( new  timer task (  )  {  @ override public void run (  )  {  update renewal threshold (  )  ;   }   }   server config . get renewal threshold update interval ms (  )  server config . get renewal threshold update interval ms (  )  )  ;   }  ,283,5,task,5,[54]
6100,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,should allow access,public boolean   (  )  {  return should allow access ( true )  ;   }  ,70,3,should,1,[33]
6101,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,should allow access,public boolean   (  )  {  return should allow access ( true )  ;   }  ,70,3,allow,2,[40]
6102,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,should allow access,public boolean   (  )  {  return should allow access ( true )  ;   }  ,70,3,access,3,[46]
6103,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,shutdown,"@ override public void   (  )  {  try  {   default monitor registry . get instance (  )  . unregister (  monitors . new object monitor ( this )  )  ;   }  catch  (   throwable t )   {  logger . error ( "" cannot shutdown monitor registry"" t )  ;   }  try  ",255,1,shutdown,1,[211]
6104,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,status update,@ override public void   ( final  string asg name final asg status new status final boolean is replication )  {  if  ( is replication )   {  return ;   }  for  (  final  peer eureka node node : peer eureka nodes . get peer eureka nodes (  )  )   {  replic,255,2,status,1,"[60, 71]"
6105,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,status update,@ override public void   ( final  string asg name final asg status new status final boolean is replication )  {  if  ( is replication )   {  return ;   }  for  (  final  peer eureka node node : peer eureka nodes . get peer eureka nodes (  )  )   {  replic,255,2,update,2,[]
6106,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,sync up,@ override public int   (  )  {  int count = 0 ;  for  ( int i = 0 ;   (  ( i  <  server config . get registry sync retries (  )  )  &&  ( count  =  =  0 )  )  ;  i +  +  )   {  if  ( i  >  0 )   {  try  {   thread . sleep ( server config . get registry s,255,2,sync,1,[111]
6107,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,sync up,@ override public int   (  )  {  int count = 0 ;  for  ( int i = 0 ;   (  ( i  <  server config . get registry sync retries (  )  )  &&  ( count  =  =  0 )  )  ;  i +  +  )   {  if  ( i  >  0 )   {  try  {   thread . sleep ( server config . get registry s,255,2,up,2,[]
6108,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,update renewal threshold,"private void   (  )  {  try  {   applications apps = eureka client . get applications (  )  ;  int count = 0 ;  for  (   application app : apps . get registered applications (  )  )   {  for  (   instance info instance : app . get instances (  )  )   {  if  ( this . is registerable ( instance )  )   {   +  + count ;   }   }   }  synchronized  ( lock )   {  if  (  ( count * 2 )   >   ( server config . get renewal percent threshold (  )  * number of renews per min threshold )  ||  (  ! this . is self preservation mode enabled (  )  )  )   {  this . expected number of renews per min = count * 2 ;  this . number of renews per min threshold =  ( int )  (  ( count * 2 )  * server config . get renewal percent threshold (  )  )  ;   }   }  logger . info ( "" current renewal threshold is :  {  } "" number of renews per min threshold )  ;   }  catch  (   throwable e )   {  logger . error ( "" cannot update renewal threshold"" e )  ;   }   }  ",942,3,update,1,[900]
6109,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,update renewal threshold,"private void   (  )  {  try  {   applications apps = eureka client . get applications (  )  ;  int count = 0 ;  for  (   application app : apps . get registered applications (  )  )   {  for  (   instance info instance : app . get instances (  )  )   {  if  ( this . is registerable ( instance )  )   {   +  + count ;   }   }   }  synchronized  ( lock )   {  if  (  ( count * 2 )   >   ( server config . get renewal percent threshold (  )  * number of renews per min threshold )  ||  (  ! this . is self preservation mode enabled (  )  )  )   {  this . expected number of renews per min = count * 2 ;  this . number of renews per min threshold =  ( int )  (  ( count * 2 )  * server config . get renewal percent threshold (  )  )  ;   }   }  logger . info ( "" current renewal threshold is :  {  } "" number of renews per min threshold )  ;   }  catch  (   throwable e )   {  logger . error ( "" cannot update renewal threshold"" e )  ;   }   }  ",942,3,renewal,2,"[408, 696, 768, 907]"
6110,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,update renewal threshold,"private void   (  )  {  try  {   applications apps = eureka client . get applications (  )  ;  int count = 0 ;  for  (   application app : apps . get registered applications (  )  )   {  for  (   instance info instance : app . get instances (  )  )   {  if  ( this . is registerable ( instance )  )   {   +  + count ;   }   }   }  synchronized  ( lock )   {  if  (  ( count * 2 )   >   ( server config . get renewal percent threshold (  )  * number of renews per min threshold )  ||  (  ! this . is self preservation mode enabled (  )  )  )   {  this . expected number of renews per min = count * 2 ;  this . number of renews per min threshold =  ( int )  (  ( count * 2 )  * server config . get renewal percent threshold (  )  )  ;   }   }  logger . info ( "" current renewal threshold is :  {  } "" number of renews per min threshold )  ;   }  catch  (   throwable e )   {  logger . error ( "" cannot update renewal threshold"" e )  ;   }   }  ",942,3,threshold,3,"[424, 467, 634, 712, 776, 824, 915]"
6111,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\rule\FirstMatchWinsCompositeRule.java, first match wins composite rule,public   (  instance status override rule .  .  .  rules )  {  this . rules = rules ;  this . default rule = new  always match instance status rule (  )  ;   list <  string >  rule names = new  array list <  >  ( rules . length  +  1 )  ;  for  ( int i = 0 ;  i  <  rules . length ;   +  + i )   {  rule names . add ( rules[i] . to string (  )  )  ;   }  rule names . add ( default rule . to string (  )  )  ;  composite rule name = rule names . to string (  )  ;   }  ,469,5,first,1,[]
6112,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\rule\FirstMatchWinsCompositeRule.java, first match wins composite rule,public   (  instance status override rule .  .  .  rules )  {  this . rules = rules ;  this . default rule = new  always match instance status rule (  )  ;   list <  string >  rule names = new  array list <  >  ( rules . length  +  1 )  ;  for  ( int i = 0 ;  i  <  rules . length ;   +  + i )   {  rule names . add ( rules[i] . to string (  )  )  ;   }  rule names . add ( default rule . to string (  )  )  ;  composite rule name = rule names . to string (  )  ;   }  ,469,5,match,2,[121]
6113,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\rule\FirstMatchWinsCompositeRule.java, first match wins composite rule,public   (  instance status override rule .  .  .  rules )  {  this . rules = rules ;  this . default rule = new  always match instance status rule (  )  ;   list <  string >  rule names = new  array list <  >  ( rules . length  +  1 )  ;  for  ( int i = 0 ;  i  <  rules . length ;   +  + i )   {  rule names . add ( rules[i] . to string (  )  )  ;   }  rule names . add ( default rule . to string (  )  )  ;  composite rule name = rule names . to string (  )  ;   }  ,469,5,wins,3,[]
6114,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\rule\FirstMatchWinsCompositeRule.java, first match wins composite rule,public   (  instance status override rule .  .  .  rules )  {  this . rules = rules ;  this . default rule = new  always match instance status rule (  )  ;   list <  string >  rule names = new  array list <  >  ( rules . length  +  1 )  ;  for  ( int i = 0 ;  i  <  rules . length ;   +  + i )   {  rule names . add ( rules[i] . to string (  )  )  ;   }  rule names . add ( default rule . to string (  )  )  ;  composite rule name = rule names . to string (  )  ;   }  ,469,5,composite,4,[411]
6115,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\rule\FirstMatchWinsCompositeRule.java, first match wins composite rule,public   (  instance status override rule .  .  .  rules )  {  this . rules = rules ;  this . default rule = new  always match instance status rule (  )  ;   list <  string >  rule names = new  array list <  >  ( rules . length  +  1 )  ;  for  ( int i = 0 ;  i  <  rules . length ;   +  + i )   {  rule names . add ( rules[i] . to string (  )  )  ;   }  rule names . add ( default rule . to string (  )  )  ;  composite rule name = rule names . to string (  )  ;   }  ,469,5,rule,5,"[37, 51, 70, 78, 102, 143, 176, 213, 266, 299, 318, 355, 382, 421, 433]"
6116,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\rule\FirstMatchWinsCompositeRule.java,apply,@ override public  status override result   (  instance info instance info  lease <  instance info >  existing lease boolean is replication )  {  for  ( int i = 0 ;  i  <  this . rules . length ;   +  + i )   {   status override result result = this . rul,255,1,apply,1,[]
6117,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\rule\FirstMatchWinsCompositeRule.java,to string,@ override public  string   (  )  {  return this . composite rule name ;   }  ,78,2,to,1,[]
6118,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\rule\FirstMatchWinsCompositeRule.java,to string,@ override public  string   (  )  {  return this . composite rule name ;   }  ,78,2,string,2,[19]
6119,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\rule\LeaseExistsRule.java,apply,@ override public  status override result   (  instance info instance info  lease <  instance info >  existing lease boolean is replication )  {  if  (  ! is replication )   {   instance info .  instance status existing status = null ;  if  ( existing lea,255,1,apply,1,[]
6120,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\rule\DownOrStartingRule.java,to string,@ override public  string   (  )  {  return  down or starting rule . class . get name (  )  ;   }  ,99,2,to,1,[]
6121,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\rule\DownOrStartingRule.java,to string,@ override public  string   (  )  {  return  down or starting rule . class . get name (  )  ;   }  ,99,2,string,2,[19]
6122,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\rule\OverrideExistsRule.java, override exists rule,public   (  map <  string  instance info .  instance status >  status overrides )  {  this . status overrides = status overrides ;   }  ,136,3,override,1,"[70, 100, 119]"
6123,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\rule\OverrideExistsRule.java, override exists rule,public   (  map <  string  instance info .  instance status >  status overrides )  {  this . status overrides = status overrides ;   }  ,136,3,exists,2,[]
6124,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\rule\OverrideExistsRule.java, override exists rule,public   (  map <  string  instance info .  instance status >  status overrides )  {  this . status overrides = status overrides ;   }  ,136,3,rule,3,[]
6125,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\rule\OverrideExistsRule.java,apply,@ override public  status override result   (  instance info instance info  lease <  instance info >  existing lease boolean is replication )  {   instance info .  instance status overridden = status overrides . get ( instance info . get id (  )  )  ;  if,255,1,apply,1,[]
6126,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\rule\OverrideExistsRule.java,to string,@ override public  string   (  )  {  return  override exists rule . class . get name (  )  ;   }  ,98,2,to,1,[]
6127,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\rule\OverrideExistsRule.java,to string,@ override public  string   (  )  {  return  override exists rule . class . get name (  )  ;   }  ,98,2,string,2,[19]
6128,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\ApplicationsResource.java, applications resource,public   (  )  {  this (  eureka server context holder . get instance (  )  . get server context (  )  )  ;   }  ,113,2,applications,1,[]
6129,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\ApplicationsResource.java, applications resource,public   (  )  {  this (  eureka server context holder . get instance (  )  . get server context (  )  )  ;   }  ,113,2,resource,2,[]
6130,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\ApplicationsResource.java,get application resource,"@ path ( "" { app id } "" )  public  application resource   ( @ path param ( ""version"" )   string version @ path param ( ""app id"" )   string app id )  {   current request version . set (  version . to enum ( version )  )  ;  return new  application resource",255,3,get,1,[]
6131,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\ApplicationsResource.java,get application resource,"@ path ( "" { app id } "" )  public  application resource   ( @ path param ( ""version"" )   string version @ path param ( ""app id"" )   string app id )  {   current request version . set (  version . to enum ( version )  )  ;  return new  application resource",255,3,application,2,"[35, 235]"
6132,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\ApplicationsResource.java,get application resource,"@ path ( "" { app id } "" )  public  application resource   ( @ path param ( ""version"" )   string version @ path param ( ""app id"" )   string app id )  {   current request version . set (  version . to enum ( version )  )  ;  return new  application resource",255,3,resource,3,"[47, 247]"
6133,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\ApplicationsResource.java,get container differential,"@ path ( ""delta"" )  @get public  response   ( @ path param ( ""version"" )   string version @ header param ( header   accept )   string accept header @ header param ( header   accept   encoding )   string accept encoding @ header param (  eureka accept . ht",255,3,get,1,[21]
6134,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\ApplicationsResource.java,get container differential,"@ path ( ""delta"" )  @get public  response   ( @ path param ( ""version"" )   string version @ header param ( header   accept )   string accept header @ header param ( header   accept   encoding )   string accept encoding @ header param (  eureka accept . ht",255,3,container,2,[]
6135,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\ApplicationsResource.java,get container differential,"@ path ( ""delta"" )  @get public  response   ( @ path param ( ""version"" )   string version @ header param ( header   accept )   string accept header @ header param ( header   accept   encoding )   string accept encoding @ header param (  eureka accept . ht",255,3,differential,3,[]
6136,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\ApplicationsResource.java,get containers,"@get public  response   ( @ path param ( ""version"" )   string version @ header param ( header   accept )   string accept header @ header param ( header   accept   encoding )   string accept encoding @ header param (  eureka accept . http   x   eureka   ac",255,2,get,1,[1]
6137,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\ApplicationsResource.java,get containers,"@get public  response   ( @ path param ( ""version"" )   string version @ header param ( header   accept )   string accept header @ header param ( header   accept   encoding )   string accept encoding @ header param (  eureka accept . http   x   eureka   ac",255,2,containers,2,[]
6138,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\rule\StatusOverrideResult.java, status override result,private   ( boolean matches  instance info .  instance status status )  {  this . matches = matches ;  this . status = status ;   }  ,133,3,status,1,"[55, 62, 110, 119]"
6139,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\rule\StatusOverrideResult.java, status override result,private   ( boolean matches  instance info .  instance status status )  {  this . matches = matches ;  this . status = status ;   }  ,133,3,override,2,[]
6140,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\rule\StatusOverrideResult.java, status override result,private   ( boolean matches  instance info .  instance status status )  {  this . matches = matches ;  this . status = status ;   }  ,133,3,result,3,[]
6141,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\rule\StatusOverrideResult.java,matches,public boolean   (  )  {  return matches ;   }  ,48,1,matches,1,[33]
6142,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\rule\StatusOverrideResult.java,matching status,public static  status override result   (  instance info .  instance status status )  {  return new  status override result ( true status )  ;   }  ,148,2,matching,1,[]
6143,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\rule\StatusOverrideResult.java,matching status,public static  status override result   (  instance info .  instance status status )  {  return new  status override result ( true status )  ;   }  ,148,2,status,2,"[15, 69, 76, 101, 131]"
6144,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\rule\StatusOverrideResult.java,status,public  instance info .  instance status   (  )  {  return status ;   }  ,73,1,status,1,"[34, 59]"
6145,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\AbstractVIPResource.java, abstractvip resource,  (  )  {  this (  eureka server context holder . get instance (  )  . get server context (  )  )  ;   }  ,106,2,abstractvip,1,[]
6146,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\AbstractVIPResource.java, abstractvip resource,  (  )  {  this (  eureka server context holder . get instance (  )  . get server context (  )  )  ;   }  ,106,2,resource,2,[]
6147,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\AbstractVIPResource.java,get vip response,"protected  response   (  string version  string entity name  string accept header  eureka accept eureka accept  key .  entity type entity type )  {  if  (  ! registry . should allow access ( false )  )   {  return  response . status (  response .  status . forbidden )  . build (  )  ;   }   current request version . set (  version . to enum ( version )  )  ;   key .  key type key type =  key .  key type . json ;  if  ( accept header  =  =  null ||  ! accept header . contains ( ""json"" )  )   {  key type =  key .  key type . xml ;   }   key cache key = new  key ( entity type entity name key type  current request version . get (  )  eureka accept )  ;   string pay load = response cache . get ( cache key )  ;  if  ( pay load  !  =  null )   {  logger . debug ( "" found:  {  } "" entity name )  ;  return  response . ok ( pay load )  . build (  )  ;   }  else  {  logger . debug ( "" not  found:  {  } "" entity name )  ;  return  response . status (  response .  status . not   found )  . build (  )  ;   }   }  ",1015,3,get,1,"[628, 694]"
6148,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\AbstractVIPResource.java,get vip response,"protected  response   (  string version  string entity name  string accept header  eureka accept eureka accept  key .  entity type entity type )  {  if  (  ! registry . should allow access ( false )  )   {  return  response . status (  response .  status . forbidden )  . build (  )  ;   }   current request version . set (  version . to enum ( version )  )  ;   key .  key type key type =  key .  key type . json ;  if  ( accept header  =  =  null ||  ! accept header . contains ( ""json"" )  )   {  key type =  key .  key type . xml ;   }   key cache key = new  key ( entity type entity name key type  current request version . get (  )  eureka accept )  ;   string pay load = response cache . get ( cache key )  ;  if  ( pay load  !  =  null )   {  logger . debug ( "" found:  {  } "" entity name )  ;  return  response . ok ( pay load )  . build (  )  ;   }  else  {  logger . debug ( "" not  found:  {  } "" entity name )  ;  return  response . status (  response .  status . not   found )  . build (  )  ;   }   }  ",1015,3,vip,2,[]
6149,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\AbstractVIPResource.java,get vip response,"protected  response   (  string version  string entity name  string accept header  eureka accept eureka accept  key .  entity type entity type )  {  if  (  ! registry . should allow access ( false )  )   {  return  response . status (  response .  status . forbidden )  . build (  )  ;   }   current request version . set (  version . to enum ( version )  )  ;   key .  key type key type =  key .  key type . json ;  if  ( accept header  =  =  null ||  ! accept header . contains ( ""json"" )  )   {  key type =  key .  key type . xml ;   }   key cache key = new  key ( entity type entity name key type  current request version . get (  )  eureka accept )  ;   string pay load = response cache . get ( cache key )  ;  if  ( pay load  !  =  null )   {  logger . debug ( "" found:  {  } "" entity name )  ;  return  response . ok ( pay load )  . build (  )  ;   }  else  {  logger . debug ( "" not  found:  {  } "" entity name )  ;  return  response . status (  response .  status . not   found )  . build (  )  ;   }   }  ",1015,3,response,3,"[11, 215, 236, 677, 810, 933, 954]"
6150,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\ApplicationResource.java, application resource,  (  string app name  eureka server config server config  peer aware instance registry registry )  {  this . app name = app name . to upper case (  )  ;  this . server config = server config ;  this . registry = registry ;  this . response cache = registry . get response cache (  )  ;   }  ,291,2,application,1,[]
6151,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\ApplicationResource.java, application resource,  (  string app name  eureka server config server config  peer aware instance registry registry )  {  this . app name = app name . to upper case (  )  ;  this . server config = server config ;  this . registry = registry ;  this . response cache = registry . get response cache (  )  ;   }  ,291,2,resource,2,[]
6152,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\ApplicationResource.java,add instance,"@post @ consumes (  { ""application / json"" ""application / xml"" }  )  public  response   (  instance info info @ header param (  peer eureka node . header   replication )   string is replication )  {  logger . debug ( "" registering instance  {  }   ( repli",255,2,add,1,[]
6153,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\ApplicationResource.java,add instance,"@post @ consumes (  { ""application / json"" ""application / xml"" }  )  public  response   (  instance info info @ header param (  peer eureka node . header   replication )   string is replication )  {  logger . debug ( "" registering instance  {  }   ( repli",255,2,instance,2,"[91, 231]"
6154,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\ApplicationResource.java,get app name,public  string   (  )  {  return app name ;   }  ,49,3,get,1,[]
6155,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\ApplicationResource.java,get app name,public  string   (  )  {  return app name ;   }  ,49,3,app,2,[33]
6156,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\ApplicationResource.java,get app name,public  string   (  )  {  return app name ;   }  ,49,3,name,3,[37]
6157,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\ApplicationResource.java,get application,"@get public  response   ( @ path param ( ""version"" )   string version @ header param ( "" accept"" )  final  string accept header @ header param (  eureka accept . http   x   eureka   accept )   string eureka accept )  {  if  (  ! registry . should allow ac",255,2,get,1,[1]
6158,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\ApplicationResource.java,get application,"@get public  response   ( @ path param ( ""version"" )   string version @ header param ( "" accept"" )  final  string accept header @ header param (  eureka accept . http   x   eureka   accept )   string eureka accept )  {  if  (  ! registry . should allow ac",255,2,application,2,[]
6159,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\ApplicationResource.java,get instance info,"@ path ( "" { id } "" )  public  instance resource   ( @ path param ( ""id"" )   string id )  {  return new  instance resource ( this id server config registry )  ;   }  ",166,3,get,1,[]
6160,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\ApplicationResource.java,get instance info,"@ path ( "" { id } "" )  public  instance resource   ( @ path param ( ""id"" )   string id )  {  return new  instance resource ( this id server config registry )  ;   }  ",166,3,instance,2,"[31, 105]"
6161,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\ApplicationResource.java,get instance info,"@ path ( "" { id } "" )  public  instance resource   ( @ path param ( ""id"" )   string id )  {  return new  instance resource ( this id server config registry )  ;   }  ",166,3,info,3,[]
6162,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\ApplicationResource.java,get name, string   (  )  {  return app name ;   }  ,42,2,get,1,[]
6163,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\ApplicationResource.java,get name, string   (  )  {  return app name ;   }  ,42,2,name,2,[30]
6164,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\ApplicationResource.java,is blank,private boolean   (  string str )  {  return str  =  =  null || str . is empty (  )  ;   }  ,92,2,is,1,[70]
6165,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\ApplicationResource.java,is blank,private boolean   (  string str )  {  return str  =  =  null || str . is empty (  )  ;   }  ,92,2,blank,2,[]
6166,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\CurrentRequestVersion.java,get,public static  version   (  )  {  return current   req   version . get (  )  ;   }  ,84,1,get,1,[67]
6167,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\CurrentRequestVersion.java,set,public static void   (  version version )  {  current   req   version . set ( version )  ;   }  ,96,1,set,1,[72]
6168,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\DefaultServerCodecs.java, default server codecs,protected   (  codec wrapper full json codec  codec wrapper compact json codec  codec wrapper full xml codec  codec wrapper compact xml codec )  {  this . full json codec = full json codec ;  this . compact json codec = compact json codec ;  this . full xml codec = full xml codec ;  this . compact xml codec = compact xml codec ;   }  ,336,3,default,1,[]
6169,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\DefaultServerCodecs.java, default server codecs,protected   (  codec wrapper full json codec  codec wrapper compact json codec  codec wrapper full xml codec  codec wrapper compact xml codec )  {  this . full json codec = full json codec ;  this . compact json codec = compact json codec ;  this . full xml codec = full xml codec ;  this . compact xml codec = compact xml codec ;   }  ,336,3,server,2,[]
6170,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\DefaultServerCodecs.java, default server codecs,protected   (  codec wrapper full json codec  codec wrapper compact json codec  codec wrapper full xml codec  codec wrapper compact xml codec )  {  this . full json codec = full json codec ;  this . compact json codec = compact json codec ;  this . full xml codec = full xml codec ;  this . compact xml codec = compact xml codec ;   }  ,336,3,codecs,3,[]
6171,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\DefaultServerCodecs.java,build,public  server codecs   (  )  {  if  ( full json codec  =  =  null )   {  full json codec =  codec wrappers . get codec (  codec wrappers .  legacy jackson json . class )  ;   }  if  ( compact json codec  =  =  null )   {  compact json codec =  codec wrappers . get codec (  codec wrappers .  jackson json mini . class )  ;   }  if  ( full xml codec  =  =  null )   {  full xml codec =  codec wrappers . get codec (  codec wrappers . x stream xml . class )  ;   }  if  ( compact xml codec  =  =  null )   {  compact xml codec =  codec wrappers . get codec (  codec wrappers .  jackson xml mini . class )  ;   }  return new  default server codecs ( full json codec compact json codec full xml codec compact xml codec )  ;   }  ,726,1,build,1,[]
6172,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\DefaultServerCodecs.java,builder,public static  builder   (  )  {  return new  builder (  )  ;   }  ,67,1,builder,1,"[15, 46]"
6173,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\DefaultServerCodecs.java,get compact json codec,@ override public  codec wrapper   (  )  {  return compact json codec ;   }  ,77,4,get,1,[]
6174,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\DefaultServerCodecs.java,get compact json codec,@ override public  codec wrapper   (  )  {  return compact json codec ;   }  ,77,4,compact,2,[51]
6175,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\DefaultServerCodecs.java,get compact json codec,@ override public  codec wrapper   (  )  {  return compact json codec ;   }  ,77,4,json,3,[59]
6176,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\DefaultServerCodecs.java,get compact json codec,@ override public  codec wrapper   (  )  {  return compact json codec ;   }  ,77,4,codec,4,"[19, 64]"
6177,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\DefaultServerCodecs.java,get compact xml codecr,@ override public  codec wrapper   (  )  {  return compact xml codec ;   }  ,76,4,get,1,[]
6178,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\DefaultServerCodecs.java,get compact xml codecr,@ override public  codec wrapper   (  )  {  return compact xml codec ;   }  ,76,4,compact,2,[51]
6179,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\DefaultServerCodecs.java,get compact xml codecr,@ override public  codec wrapper   (  )  {  return compact xml codec ;   }  ,76,4,xml,3,[59]
6180,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\DefaultServerCodecs.java,get compact xml codecr,@ override public  codec wrapper   (  )  {  return compact xml codec ;   }  ,76,4,codecr,4,[]
6181,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\DefaultServerCodecs.java,get encoder,@ override public  encoder wrapper   (  key .  key type key type  eureka accept eureka accept )  {  switch  ( eureka accept )   {  case compact: return get encoder ( key type true )  ;  case full: default : return get encoder ( key type false )  ;   }   },255,2,get,1,"[152, 214]"
6182,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\DefaultServerCodecs.java,get encoder,@ override public  encoder wrapper   (  key .  key type key type  eureka accept eureka accept )  {  switch  ( eureka accept )   {  case compact: return get encoder ( key type true )  ;  case full: default : return get encoder ( key type false )  ;   }   },255,2,encoder,2,"[19, 156, 218]"
6183,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\DefaultServerCodecs.java,get full json,private static  codec wrapper   (  eureka server config server config )  {   codec wrapper codec =  codec wrappers . get codec ( server config . get json codec name (  )  )  ;  return codec  =  =  null  ?   codec wrappers . get codec (  codec wrappers .  legacy jackson json . class )  : codec ;   }  ,301,3,get,1,"[117, 145, 224]"
6184,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\DefaultServerCodecs.java,get full json,private static  codec wrapper   (  eureka server config server config )  {   codec wrapper codec =  codec wrappers . get codec ( server config . get json codec name (  )  )  ;  return codec  =  =  null  ?   codec wrappers . get codec (  codec wrappers .  legacy jackson json . class )  : codec ;   }  ,301,3,full,2,[]
6185,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\DefaultServerCodecs.java,get full json,private static  codec wrapper   (  eureka server config server config )  {   codec wrapper codec =  codec wrappers . get codec ( server config . get json codec name (  )  )  ;  return codec  =  =  null  ?   codec wrappers . get codec (  codec wrappers .  legacy jackson json . class )  : codec ;   }  ,301,3,json,3,"[149, 270]"
6186,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\DefaultServerCodecs.java,get full json codec,@ override public  codec wrapper   (  )  {  return full json codec ;   }  ,74,4,get,1,[]
6187,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\DefaultServerCodecs.java,get full json codec,@ override public  codec wrapper   (  )  {  return full json codec ;   }  ,74,4,full,2,[51]
6188,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\DefaultServerCodecs.java,get full json codec,@ override public  codec wrapper   (  )  {  return full json codec ;   }  ,74,4,json,3,[56]
6189,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\DefaultServerCodecs.java,get full json codec,@ override public  codec wrapper   (  )  {  return full json codec ;   }  ,74,4,codec,4,"[19, 61]"
6190,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\DefaultServerCodecs.java,get full xml,private static  codec wrapper   (  eureka server config server config )  {   codec wrapper codec =  codec wrappers . get codec ( server config . get xml codec name (  )  )  ;  return codec  =  =  null  ?   codec wrappers . get codec (  codec wrappers . x stream xml . class )  : codec ;   }  ,292,3,get,1,"[117, 145, 223]"
6191,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\DefaultServerCodecs.java,get full xml,private static  codec wrapper   (  eureka server config server config )  {   codec wrapper codec =  codec wrappers . get codec ( server config . get xml codec name (  )  )  ;  return codec  =  =  null  ?   codec wrappers . get codec (  codec wrappers . x stream xml . class )  : codec ;   }  ,292,3,full,2,[]
6192,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\DefaultServerCodecs.java,get full xml,private static  codec wrapper   (  eureka server config server config )  {   codec wrapper codec =  codec wrappers . get codec ( server config . get xml codec name (  )  )  ;  return codec  =  =  null  ?   codec wrappers . get codec (  codec wrappers . x stream xml . class )  : codec ;   }  ,292,3,xml,3,"[149, 262]"
6193,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\DefaultServerCodecs.java,get full xml codec,@ override public  codec wrapper   (  )  {  return full xml codec ;   }  ,73,4,get,1,[]
6194,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\DefaultServerCodecs.java,get full xml codec,@ override public  codec wrapper   (  )  {  return full xml codec ;   }  ,73,4,full,2,[51]
6195,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\DefaultServerCodecs.java,get full xml codec,@ override public  codec wrapper   (  )  {  return full xml codec ;   }  ,73,4,xml,3,[56]
6196,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\DefaultServerCodecs.java,get full xml codec,@ override public  codec wrapper   (  )  {  return full xml codec ;   }  ,73,4,codec,4,"[19, 60]"
6197,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\DefaultServerCodecs.java,with compact json codec,public  builder   (  codec wrapper compact json codec )  {  this . compact json codec = compact json codec ;  return this ;   }  ,129,4,with,1,[]
6198,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\DefaultServerCodecs.java,with compact json codec,public  builder   (  codec wrapper compact json codec )  {  this . compact json codec = compact json codec ;  return this ;   }  ,129,4,compact,2,"[35, 67, 88]"
6199,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\DefaultServerCodecs.java,with compact json codec,public  builder   (  codec wrapper compact json codec )  {  this . compact json codec = compact json codec ;  return this ;   }  ,129,4,json,3,"[43, 75, 96]"
6200,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\DefaultServerCodecs.java,with compact json codec,public  builder   (  codec wrapper compact json codec )  {  this . compact json codec = compact json codec ;  return this ;   }  ,129,4,codec,4,"[21, 48, 80, 101]"
6201,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\DefaultServerCodecs.java,with compact xml codec,public  builder   (  codec wrapper compact xml encoder )  {  this . compact xml codec = compact xml encoder ;  return this ;   }  ,130,4,with,1,[]
6202,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\DefaultServerCodecs.java,with compact xml codec,public  builder   (  codec wrapper compact xml encoder )  {  this . compact xml codec = compact xml encoder ;  return this ;   }  ,130,4,compact,2,"[35, 68, 88]"
6203,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\DefaultServerCodecs.java,with compact xml codec,public  builder   (  codec wrapper compact xml encoder )  {  this . compact xml codec = compact xml encoder ;  return this ;   }  ,130,4,xml,3,"[43, 76, 96]"
6204,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\DefaultServerCodecs.java,with compact xml codec,public  builder   (  codec wrapper compact xml encoder )  {  this . compact xml codec = compact xml encoder ;  return this ;   }  ,130,4,codec,4,"[21, 80]"
6205,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\DefaultServerCodecs.java,with eureka server config,public  builder   (  eureka server config config )  {  full json codec =  codec wrappers . get codec ( config . get json codec name (  )  )  ;  full xml codec =  codec wrappers . get codec ( config . get xml codec name (  )  )  ;  return this ;   }  ,250,4,with,1,[]
6206,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\DefaultServerCodecs.java,with eureka server config,public  builder   (  eureka server config config )  {  full json codec =  codec wrappers . get codec ( config . get json codec name (  )  )  ;  full xml codec =  codec wrappers . get codec ( config . get xml codec name (  )  )  ;  return this ;   }  ,250,4,eureka,2,[21]
6207,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\DefaultServerCodecs.java,with eureka server config,public  builder   (  eureka server config config )  {  full json codec =  codec wrappers . get codec ( config . get json codec name (  )  )  ;  full xml codec =  codec wrappers . get codec ( config . get xml codec name (  )  )  ;  return this ;   }  ,250,4,server,3,[28]
6208,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\DefaultServerCodecs.java,with eureka server config,public  builder   (  eureka server config config )  {  full json codec =  codec wrappers . get codec ( config . get json codec name (  )  )  ;  full xml codec =  codec wrappers . get codec ( config . get xml codec name (  )  )  ;  return this ;   }  ,250,4,config,4,"[35, 42, 103, 191]"
6209,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\DefaultServerCodecs.java,with full json codec,public  builder   (  codec wrapper full json codec )  {  this . full json codec = full json codec ;  return this ;   }  ,120,4,with,1,[]
6210,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\DefaultServerCodecs.java,with full json codec,public  builder   (  codec wrapper full json codec )  {  this . full json codec = full json codec ;  return this ;   }  ,120,4,full,2,"[35, 64, 82]"
6211,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\DefaultServerCodecs.java,with full json codec,public  builder   (  codec wrapper full json codec )  {  this . full json codec = full json codec ;  return this ;   }  ,120,4,json,3,"[40, 69, 87]"
6212,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\DefaultServerCodecs.java,with full json codec,public  builder   (  codec wrapper full json codec )  {  this . full json codec = full json codec ;  return this ;   }  ,120,4,codec,4,"[21, 45, 74, 92]"
6213,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\DefaultServerCodecs.java,with full xml codec,public  builder   (  codec wrapper full xml codec )  {  this . full xml codec = full xml codec ;  return this ;   }  ,117,4,with,1,[]
6214,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\DefaultServerCodecs.java,with full xml codec,public  builder   (  codec wrapper full xml codec )  {  this . full xml codec = full xml codec ;  return this ;   }  ,117,4,full,2,"[35, 63, 80]"
6215,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\DefaultServerCodecs.java,with full xml codec,public  builder   (  codec wrapper full xml codec )  {  this . full xml codec = full xml codec ;  return this ;   }  ,117,4,xml,3,"[40, 68, 85]"
6216,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\DefaultServerCodecs.java,with full xml codec,public  builder   (  codec wrapper full xml codec )  {  this . full xml codec = full xml codec ;  return this ;   }  ,117,4,codec,4,"[21, 44, 72, 89]"
6217,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\ASGResource.java,asg resource,public   (  )  {  this (  eureka server context holder . get instance (  )  . get server context (  )  )  ;   }  ,113,2,asg,1,[]
6218,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\ASGResource.java,asg resource,public   (  )  {  this (  eureka server context holder . get instance (  )  . get server context (  )  )  ;   }  ,113,2,resource,2,[]
6219,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\ASGResource.java,status update,"@put @ path ( "" { asg name }  / status"" )  public  response   ( @ path param ( ""asg name"" )   string asg name @ query param ( ""value"" )   string new status @ header param (  peer eureka node . header   replication )   string is replication )  {  if  ( aws",255,2,status,1,"[32, 149]"
6220,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\ASGResource.java,status update,"@put @ path ( "" { asg name }  / status"" )  public  response   ( @ path param ( ""asg name"" )   string asg name @ query param ( ""value"" )   string new status @ header param (  peer eureka node . header   replication )   string is replication )  {  if  ( aws",255,2,update,2,[]
6221,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\ASGResource.java,to enum,"public static asg status   (  string s )  {  for  (  asg status e : asg status . values (  )  )   {  if  ( e . name (  )  . equals ignore case ( s )  )   {  return e ;   }   }  throw new  runtime exception ( "" cannot find asg enum for the given string ""  +  s )  ;   }  ",270,2,to,1,[]
6222,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\ASGResource.java,to enum,"public static asg status   (  string s )  {  for  (  asg status e : asg status . values (  )  )   {  if  ( e . name (  )  . equals ignore case ( s )  )   {  return e ;   }   }  throw new  runtime exception ( "" cannot find asg enum for the given string ""  +  s )  ;   }  ",270,2,enum,2,[226]
6223,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\InstancesResource.java, instances resource,public   (  )  {  this (  eureka server context holder . get instance (  )  . get server context (  )  )  ;   }  ,113,2,instances,1,[]
6224,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\InstancesResource.java, instances resource,public   (  )  {  this (  eureka server context holder . get instance (  )  . get server context (  )  )  ;   }  ,113,2,resource,2,[]
6225,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\InstancesResource.java,get by id,"@get @ path ( "" { id } "" )  public  response   ( @ path param ( ""version"" )   string version @ path param ( ""id"" )   string id )  {   current request version . set (  version . to enum ( version )  )  ;   list <  instance info >  list = registry . get ins",255,3,get,1,"[1, 248]"
6226,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\InstancesResource.java,get by id,"@get @ path ( "" { id } "" )  public  response   ( @ path param ( ""version"" )   string version @ path param ( ""id"" )   string id )  {   current request version . set (  version . to enum ( version )  )  ;   list <  instance info >  list = registry . get ins",255,3,by,2,[]
6227,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\InstancesResource.java,get by id,"@get @ path ( "" { id } "" )  public  response   ( @ path param ( ""version"" )   string version @ path param ( ""id"" )   string id )  {   current request version . set (  version . to enum ( version )  )  ;   list <  instance info >  list = registry . get ins",255,3,id,3,"[18, 109, 124]"
6228,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\PeerReplicationResource.java, peer replication resource,public   (  )  {  this (  eureka server context holder . get instance (  )  . get server context (  )  )  ;   }  ,113,3,peer,1,[]
6229,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\PeerReplicationResource.java, peer replication resource,public   (  )  {  this (  eureka server context holder . get instance (  )  . get server context (  )  )  ;   }  ,113,3,replication,2,[]
6230,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\PeerReplicationResource.java, peer replication resource,public   (  )  {  this (  eureka server context holder . get instance (  )  . get server context (  )  )  ;   }  ,113,3,resource,3,[]
6231,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\PeerReplicationResource.java,batch replication,"@ path ( ""batch"" )  @post public  response   (  replication list replication list )  {  try  {   replication list response batch response = new  replication list response (  )  ;  for  (   replication instance instance info : replication list . get replic",255,2,batch,1,"[10, 123]"
6232,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\PeerReplicationResource.java,batch replication,"@ path ( ""batch"" )  @post public  response   (  replication list replication list )  {  try  {   replication list response batch response = new  replication list response (  )  ;  for  (   replication instance instance info : replication list . get replic",255,2,replication,2,"[48, 65, 97, 145, 189, 226]"
6233,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\PeerReplicationResource.java,create application resource, application resource   (  replication instance instance info )  {  return new  application resource ( instance info . get app name (  )  server config registry )  ;   }  ,171,3,create,1,[]
6234,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\PeerReplicationResource.java,create application resource, application resource   (  replication instance instance info )  {  return new  application resource ( instance info . get app name (  )  server config registry )  ;   }  ,171,3,application,2,"[1, 80]"
6235,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\PeerReplicationResource.java,create application resource, application resource   (  replication instance instance info )  {  return new  application resource ( instance info . get app name (  )  server config registry )  ;   }  ,171,3,resource,3,"[13, 92]"
6236,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\PeerReplicationResource.java,create instance resource, instance resource   (  replication instance instance info  application resource application resource )  {  return new  instance resource ( application resource instance info . get id (  )  server config registry )  ;   }  ,223,3,create,1,[]
6237,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\PeerReplicationResource.java,create instance resource, instance resource   (  replication instance instance info  application resource application resource )  {  return new  instance resource ( application resource instance info . get id (  )  server config registry )  ;   }  ,223,3,instance,2,"[1, 36, 45, 120, 161]"
6238,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\PeerReplicationResource.java,create instance resource, instance resource   (  replication instance instance info  application resource application resource )  {  return new  instance resource ( application resource instance info . get id (  )  server config registry )  ;   }  ,223,3,resource,3,"[10, 72, 93, 129, 152]"
6239,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\PeerReplicationResource.java,dispatch,private  replication instance response   (  replication instance instance info )  {   application resource application resource = create application resource ( instance info )  ;   instance resource resource = create instance resource ( instance info application resource )  ;   string last dirty timestamp = to string ( instance info . get last dirty timestamp (  )  )  ;   string overridden status = to string ( instance info . get overridden status (  )  )  ;   string instance status = to string ( instance info . get status (  )  )  ;   builder single response builder = new  builder (  )  ;  switch  ( instance info . get action (  )  )   {  case  register: single response builder = handle register ( instance info application resource )  ;  break ;  case  heartbeat: single response builder = handle heartbeat ( server config resource last dirty timestamp overridden status instance status )  ;  break ;  case  cancel: single response builder = handle cancel ( resource )  ;  break ;  case  status update: single response builder = handle status update ( instance info resource )  ;  break ;  case  delete status override: single response builder = handle delete status override ( instance info resource )  ;  break ;   }  return single response builder . build (  )  ;   }  ,1283,1,dispatch,1,[]
6240,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\PeerReplicationResource.java,handle cancel,private static  builder   (  instance resource resource )  {   response response = resource . cancel lease ( replication )  ;  return new  builder (  )  . set status code ( response . get status (  )  )  ;   }  ,211,2,handle,1,[]
6241,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\PeerReplicationResource.java,handle cancel,private static  builder   (  instance resource resource )  {   response response = resource . cancel lease ( replication )  ;  return new  builder (  )  . set status code ( response . get status (  )  )  ;   }  ,211,2,cancel,2,[94]
6242,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\PeerReplicationResource.java,handle delete status override,private static  builder   (  replication instance instance info  instance resource resource )  {   response response = resource . delete status update ( replication instance info . get status (  )  instance info . get last dirty timestamp (  )  . to string (  )  )  ;  return new  builder (  )  . set status code ( response . get status (  )  )  ;   }  ,353,4,handle,1,[]
6243,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\PeerReplicationResource.java,handle delete status override,private static  builder   (  replication instance instance info  instance resource resource )  {   response response = resource . delete status update ( replication instance info . get status (  )  instance info . get last dirty timestamp (  )  . to string (  )  )  ;  return new  builder (  )  . set status code ( response . get status (  )  )  ;   }  ,353,4,delete,2,[130]
6244,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\PeerReplicationResource.java,handle delete status override,private static  builder   (  replication instance instance info  instance resource resource )  {   response response = resource . delete status update ( replication instance info . get status (  )  instance info . get last dirty timestamp (  )  . to string (  )  )  ;  return new  builder (  )  . set status code ( response . get status (  )  )  ;   }  ,353,4,status,3,"[137, 185, 301, 330]"
6245,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\PeerReplicationResource.java,handle delete status override,private static  builder   (  replication instance instance info  instance resource resource )  {   response response = resource . delete status update ( replication instance info . get status (  )  instance info . get last dirty timestamp (  )  . to string (  )  )  ;  return new  builder (  )  . set status code ( response . get status (  )  )  ;   }  ,353,4,override,4,[]
6246,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\PeerReplicationResource.java,handle heartbeat,"private static  builder   (  eureka server config config  instance resource resource  string last dirty timestamp  string overridden status  string instance status )  {   response response = resource . renew lease ( replication overridden status instance status last dirty timestamp )  ;  int response status = response . get status (  )  ;   builder response builder = new  builder (  )  . set status code ( response status )  ;  if  ( ""false"" . equals ( config . get experimental ( ""bugfix . 934"" )  )  )   {  if  ( response status  =  =   status . ok . get status code (  )  && response . get entity (  )   !  =  null )   {  response builder . set response entity (  (  instance info ) response . get entity (  )  )  ;   }   }  else  {  if  (  ( response status  =  =   status . ok . get status code (  )  || response status  =  =   status . conflict . get status code (  )  )  && response . get entity (  )   !  =  null )   {  response builder . set response entity (  (  instance info ) response . get entity (  )  )  ;   }   }  return response builder ;   }  ",1065,2,handle,1,[]
6247,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\PeerReplicationResource.java,handle heartbeat,"private static  builder   (  eureka server config config  instance resource resource  string last dirty timestamp  string overridden status  string instance status )  {   response response = resource . renew lease ( replication overridden status instance status last dirty timestamp )  ;  int response status = response . get status (  )  ;   builder response builder = new  builder (  )  . set status code ( response status )  ;  if  ( ""false"" . equals ( config . get experimental ( ""bugfix . 934"" )  )  )   {  if  ( response status  =  =   status . ok . get status code (  )  && response . get entity (  )   !  =  null )   {  response builder . set response entity (  (  instance info ) response . get entity (  )  )  ;   }   }  else  {  if  (  ( response status  =  =   status . ok . get status code (  )  || response status  =  =   status . conflict . get status code (  )  )  && response . get entity (  )   !  =  null )   {  response builder . set response entity (  (  instance info ) response . get entity (  )  )  ;   }   }  return response builder ;   }  ",1065,2,heartbeat,2,[]
6248,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\PeerReplicationResource.java,handle register,private static  builder   (  replication instance instance info  application resource application resource )  {  application resource . add instance ( instance info . get instance info (  )  replication )  ;  return new  builder (  )  . set status code (  status . ok . get status code (  )  )  ;   }  ,302,2,handle,1,[]
6249,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\PeerReplicationResource.java,handle register,private static  builder   (  replication instance instance info  application resource application resource )  {  application resource . add instance ( instance info . get instance info (  )  replication )  ;  return new  builder (  )  . set status code (  status . ok . get status code (  )  )  ;   }  ,302,2,register,2,[]
6250,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\PeerReplicationResource.java,handle status update,private static  builder   (  replication instance instance info  instance resource resource )  {   response response = resource . status update ( instance info . get status (  )  replication to string ( instance info . get last dirty timestamp (  )  )  )  ;  return new  builder (  )  . set status code ( response . get status (  )  )  ;   }  ,343,3,handle,1,[]
6251,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\PeerReplicationResource.java,handle status update,private static  builder   (  replication instance instance info  instance resource resource )  {   response response = resource . status update ( instance info . get status (  )  replication to string ( instance info . get last dirty timestamp (  )  )  )  ;  return new  builder (  )  . set status code ( response . get status (  )  )  ;   }  ,343,3,status,2,"[130, 166, 291, 320]"
6252,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\PeerReplicationResource.java,handle status update,private static  builder   (  replication instance instance info  instance resource resource )  {   response response = resource . status update ( instance info . get status (  )  replication to string ( instance info . get last dirty timestamp (  )  )  )  ;  return new  builder (  )  . set status code ( response . get status (  )  )  ;   }  ,343,3,update,3,[137]
6253,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\PeerReplicationResource.java,to string,private static  < t >  string   ( t value )  {  if  ( value  =  =  null )   {  return null ;   }  return value . to string (  )  ;   }  ,136,2,to,1,[113]
6254,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\PeerReplicationResource.java,to string,private static  < t >  string   ( t value )  {  if  ( value  =  =  null )   {  return null ;   }  return value . to string (  )  ;   }  ,136,2,string,2,"[23, 116]"
6255,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\InstanceResource.java, instance resource,  (  application resource app  string id  eureka server config server config  peer aware instance registry registry )  {  this . app = app ;  this . id = id ;  this . server config = server config ;  this . registry = registry ;   }  ,234,2,instance,1,[89]
6256,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\InstanceResource.java, instance resource,  (  application resource app  string id  eureka server config server config  peer aware instance registry registry )  {  this . app = app ;  this . id = id ;  this . server config = server config ;  this . registry = registry ;   }  ,234,2,resource,2,[17]
6257,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\InstanceResource.java,cancel lease,"@delete public  response   ( @ header param (  peer eureka node . header   replication )   string is replication )  {  try  {  boolean is success = registry . cancel ( app . get name (  )  id ""true"" . equals ( is replication )  )  ;  if  ( is success )   ",255,2,cancel,1,[159]
6258,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\InstanceResource.java,cancel lease,"@delete public  response   ( @ header param (  peer eureka node . header   replication )   string is replication )  {  try  {  boolean is success = registry . cancel ( app . get name (  )  id ""true"" . equals ( is replication )  )  ;  if  ( is success )   ",255,2,lease,2,[]
6259,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\InstanceResource.java,delete status update,"@delete @ path ( ""status"" )  public  response   ( @ header param (  peer eureka node . header   replication )   string is replication @ query param ( ""value"" )   string new status value @ query param ( ""last dirty timestamp"" )   string last dirty timestam",255,3,delete,1,[1]
6260,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\InstanceResource.java,delete status update,"@delete @ path ( ""status"" )  public  response   ( @ header param (  peer eureka node . header   replication )   string is replication @ query param ( ""value"" )   string new status value @ query param ( ""last dirty timestamp"" )   string last dirty timestam",255,3,status,2,"[18, 173]"
6261,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\InstanceResource.java,delete status update,"@delete @ path ( ""status"" )  public  response   ( @ header param (  peer eureka node . header   replication )   string is replication @ query param ( ""value"" )   string new status value @ query param ( ""last dirty timestamp"" )   string last dirty timestam",255,3,update,3,[]
6262,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\InstanceResource.java,get instance info,"@get public  response   (  )  {   instance info app info = registry . get instance by app and id ( app . get name (  )  id )  ;  if  ( app info  !  =  null )   {  logger . debug ( "" found:  {  }   -   {  } "" app . get name (  )  id )  ;  return  response ",255,3,get,1,"[1, 70, 105, 214]"
6263,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\InstanceResource.java,get instance info,"@get public  response   (  )  {   instance info app info = registry . get instance by app and id ( app . get name (  )  id )  ;  if  ( app info  !  =  null )   {  logger . debug ( "" found:  {  }   -   {  } "" app . get name (  )  id )  ;  return  response ",255,3,instance,2,"[34, 74]"
6264,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\InstanceResource.java,get instance info,"@get public  response   (  )  {   instance info app info = registry . get instance by app and id ( app . get name (  )  id )  ;  if  ( app info  !  =  null )   {  logger . debug ( "" found:  {  }   -   {  } "" app . get name (  )  id )  ;  return  response ",255,3,info,3,"[43, 52, 139]"
6265,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\InstanceResource.java,renew lease,"@put public  response   ( @ header param (  peer eureka node . header   replication )   string is replication @ query param ( ""overriddenstatus"" )   string overridden status @ query param ( ""status"" )   string status @ query param ( ""last dirty timestamp""",255,2,renew,1,[]
6266,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\InstanceResource.java,renew lease,"@put public  response   ( @ header param (  peer eureka node . header   replication )   string is replication @ query param ( ""overriddenstatus"" )   string overridden status @ query param ( ""status"" )   string status @ query param ( ""last dirty timestamp""",255,2,lease,2,[]
6267,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\InstanceResource.java,status update,"@put @ path ( ""status"" )  public  response   ( @ query param ( ""value"" )   string new status @ header param (  peer eureka node . header   replication )   string is replication @ query param ( ""last dirty timestamp"" )   string last dirty timestamp )  {  t",255,2,status,1,"[15, 86]"
6268,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\InstanceResource.java,status update,"@put @ path ( ""status"" )  public  response   ( @ query param ( ""value"" )   string new status @ header param (  peer eureka node . header   replication )   string is replication @ query param ( ""last dirty timestamp"" )   string last dirty timestamp )  {  t",255,2,update,2,[]
6269,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\InstanceResource.java,update metadata,"@put @ path ( ""metadata"" )  public  response   ( @ context  uri info uri info )  {  try  {   instance info instance info = registry . get instance by app and id ( app . get name (  )  id )  ;  if  ( instance info  =  =  null )   {  logger . error ( "" cann",255,2,update,1,[]
6270,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\InstanceResource.java,update metadata,"@put @ path ( ""metadata"" )  public  response   ( @ context  uri info uri info )  {  try  {   instance info instance info = registry . get instance by app and id ( app . get name (  )  id )  ;  if  ( instance info  =  =  null )   {  logger . error ( "" cann",255,2,metadata,2,[15]
6271,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\InstanceResource.java,validate dirty timestamp,"private  response   (  long last dirty timestamp boolean is replication )  {   instance info app info = registry . get instance by app and id ( app . get name (  )  id false )  ;  if  ( app info  !  =  null )   {  if  (  ( last dirty timestamp  !  =  null )  &&  (  ! last dirty timestamp . equals ( app info . get last dirty timestamp (  )  )  )  )   {   object[] args =  { id app info . get last dirty timestamp (  )  last dirty timestamp is replication }  ;  if  ( last dirty timestamp  >  app info . get last dirty timestamp (  )  )   {  logger . debug ( "" time to sync  since the last dirty timestamp differs  - ""  +  ""  replication instance id :  {  }   registry :  {  }   incoming:  {  }   replication:  {  } "" args )  ;  return  response . status (  status . not   found )  . build (  )  ;   }  else if  ( app info . get last dirty timestamp (  )   >  last dirty timestamp )   {  if  ( is replication )   {  logger . debug ( "" time to sync  since the last dirty timestamp differs  - ""  +  ""  replication instance id :  {  }   registry :  {  }   incoming:  {  }   replication:  {  } "" args )  ;  return  response . status (  status . conflict )  . entity ( app info )  . build (  )  ;   }  else  {  return  response . ok (  )  . build (  )  ;   }   }   }   }  return  response . ok (  )  . build (  )  ;   }  ",1316,3,validate,1,[]
6272,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\InstanceResource.java,validate dirty timestamp,"private  response   (  long last dirty timestamp boolean is replication )  {   instance info app info = registry . get instance by app and id ( app . get name (  )  id false )  ;  if  ( app info  !  =  null )   {  if  (  ( last dirty timestamp  !  =  null )  &&  (  ! last dirty timestamp . equals ( app info . get last dirty timestamp (  )  )  )  )   {   object[] args =  { id app info . get last dirty timestamp (  )  last dirty timestamp is replication }  ;  if  ( last dirty timestamp  >  app info . get last dirty timestamp (  )  )   {  logger . debug ( "" time to sync  since the last dirty timestamp differs  - ""  +  ""  replication instance id :  {  }   registry :  {  }   incoming:  {  }   replication:  {  } "" args )  ;  return  response . status (  status . not   found )  . build (  )  ;   }  else if  ( app info . get last dirty timestamp (  )   >  last dirty timestamp )   {  if  ( is replication )   {  logger . debug ( "" time to sync  since the last dirty timestamp differs  - ""  +  ""  replication instance id :  {  }   registry :  {  }   incoming:  {  }   replication:  {  } "" args )  ;  return  response . status (  status . conflict )  . entity ( app info )  . build (  )  ;   }  else  {  return  response . ok (  )  . build (  )  ;   }   }   }   }  return  response . ok (  )  . build (  )  ;   }  ",1316,3,dirty,2,"[33, 228, 273, 320, 398, 425, 473, 513, 590, 834, 865, 964]"
6273,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\InstanceResource.java,validate dirty timestamp,"private  response   (  long last dirty timestamp boolean is replication )  {   instance info app info = registry . get instance by app and id ( app . get name (  )  id false )  ;  if  ( app info  !  =  null )   {  if  (  ( last dirty timestamp  !  =  null )  &&  (  ! last dirty timestamp . equals ( app info . get last dirty timestamp (  )  )  )  )   {   object[] args =  { id app info . get last dirty timestamp (  )  last dirty timestamp is replication }  ;  if  ( last dirty timestamp  >  app info . get last dirty timestamp (  )  )   {  logger . debug ( "" time to sync  since the last dirty timestamp differs  - ""  +  ""  replication instance id :  {  }   registry :  {  }   incoming:  {  }   replication:  {  } "" args )  ;  return  response . status (  status . not   found )  . build (  )  ;   }  else if  ( app info . get last dirty timestamp (  )   >  last dirty timestamp )   {  if  ( is replication )   {  logger . debug ( "" time to sync  since the last dirty timestamp differs  - ""  +  ""  replication instance id :  {  }   registry :  {  }   incoming:  {  }   replication:  {  } "" args )  ;  return  response . status (  status . conflict )  . entity ( app info )  . build (  )  ;   }  else  {  return  response . ok (  )  . build (  )  ;   }   }   }   }  return  response . ok (  )  . build (  )  ;   }  ",1316,3,timestamp,3,"[39, 234, 279, 326, 404, 431, 479, 519, 596, 840, 871, 970]"
6274,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\SecureVIPResource.java, securevip resource,public   (  )  {  this (  eureka server context holder . get instance (  )  . get server context (  )  )  ;   }  ,113,2,securevip,1,[]
6275,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\SecureVIPResource.java, securevip resource,public   (  )  {  this (  eureka server context holder . get instance (  )  . get server context (  )  )  ;   }  ,113,2,resource,2,[]
6276,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\SecureVIPResource.java,status update,"@get @ path ( "" { svip address } "" )  public  response   ( @ path param ( ""version"" )   string version @ path param ( ""svip address"" )   string svip address @ header param ( "" accept"" )  final  string accept header @ header param (  eureka accept . http  ",255,2,status,1,[]
6277,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\SecureVIPResource.java,status update,"@get @ path ( "" { svip address } "" )  public  response   ( @ path param ( ""version"" )   string version @ path param ( ""svip address"" )   string svip address @ header param ( "" accept"" )  final  string accept header @ header param (  eureka accept . http  ",255,2,update,2,[]
6278,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\ServerInfoResource.java, server info resource,public   (  )  {  this (  eureka server context holder . get instance (  )  . get server context (  )  )  ;   }  ,113,3,server,1,"[33, 82]"
6279,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\ServerInfoResource.java, server info resource,public   (  )  {  this (  eureka server context holder . get instance (  )  . get server context (  )  )  ;   }  ,113,3,info,2,[]
6280,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\ServerInfoResource.java, server info resource,public   (  )  {  this (  eureka server context holder . get instance (  )  . get server context (  )  )  ;   }  ,113,3,resource,3,[]
6281,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\ServerInfoResource.java,get overrides,"@get @ path ( ""statusoverrides"" )  public  response   (  )  throws  exception  {   map <  string  instance info .  instance status >  result = registry . overridden instance statuses snapshot (  )  ;   object mapper object mapper = new  object mapper (  )",255,2,get,1,[1]
6282,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\ServerInfoResource.java,get overrides,"@get @ path ( ""statusoverrides"" )  public  response   (  )  throws  exception  {   map <  string  instance info .  instance status >  result = registry . overridden instance statuses snapshot (  )  ;   object mapper object mapper = new  object mapper (  )",255,2,overrides,2,[21]
6283,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\VIPResource.java,vip resource,public   (  )  {  this (  eureka server context holder . get instance (  )  . get server context (  )  )  ;   }  ,113,2,vip,1,[]
6284,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\VIPResource.java,vip resource,public   (  )  {  this (  eureka server context holder . get instance (  )  . get server context (  )  )  ;   }  ,113,2,resource,2,[]
6285,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\VIPResource.java,status update,"@get @ path ( "" { vip address } "" )  public  response   ( @ path param ( ""version"" )   string version @ path param ( ""vip address"" )   string vip address @ header param ( "" accept"" )  final  string accept header @ header param (  eureka accept . http   x ",255,2,status,1,[]
6286,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\VIPResource.java,status update,"@get @ path ( "" { vip address } "" )  public  response   ( @ path param ( ""version"" )   string version @ path param ( ""vip address"" )   string vip address @ header param ( "" accept"" )  final  string accept header @ header param (  eureka accept . http   x ",255,2,update,2,[]
6287,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\StatusFilter.java,do filter,"public void   (  servlet request request  servlet response response  filter chain chain )  throws io exception   servlet exception  {   instance info my info =  application info manager . get instance (  )  . get info (  )  ;   instance status status = my info . get status (  )  ;  if  ( status  !  =   instance status . up && response instanceof  http servlet response )   {   http servlet response http respone =  (  http servlet response ) response ;  http respone . send error ( sc   temporary   redirect "" current node is currently not ready to serve requests  -  -  current status: ""  +  status  +  ""  -  try another ds node: "" )  ;   }  chain . do filter ( request response )  ;   }  ",692,2,do,1,[653]
6288,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\StatusFilter.java,do filter,"public void   (  servlet request request  servlet response response  filter chain chain )  throws io exception   servlet exception  {   instance info my info =  application info manager . get instance (  )  . get info (  )  ;   instance status status = my info . get status (  )  ;  if  ( status  !  =   instance status . up && response instanceof  http servlet response )   {   http servlet response http respone =  (  http servlet response ) response ;  http respone . send error ( sc   temporary   redirect "" current node is currently not ready to serve requests  -  -  current status: ""  +  status  +  ""  -  try another ds node: "" )  ;   }  chain . do filter ( request response )  ;   }  ",692,2,filter,2,"[69, 656]"
6289,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\ServerRequestAuthFilter.java,do filter,@ override public void   (  servlet request request  servlet response response  filter chain chain )  throws io exception   servlet exception  {  log auth ( request )  ;  chain . do filter ( request response )  ;   }  ,218,2,do,1,[179]
6290,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\ServerRequestAuthFilter.java,do filter,@ override public void   (  servlet request request  servlet response response  filter chain chain )  throws io exception   servlet exception  {  log auth ( request )  ;  chain . do filter ( request response )  ;   }  ,218,2,filter,2,"[80, 182]"
6291,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\ServerRequestAuthFilter.java,get header,protected  string   (  http servlet request request  string header key )  {   string value = request . get header ( header key )  ;  return  strings . is null or empty ( value )   ?  unknown : value ;   }  ,206,2,get,1,[103]
6292,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\ServerRequestAuthFilter.java,get header,protected  string   (  http servlet request request  string header key )  {   string value = request . get header ( header key )  ;  return  strings . is null or empty ( value )   ?  unknown : value ;   }  ,206,2,header,2,"[60, 107, 116]"
6293,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\ServerRequestAuthFilter.java,init,@ override public void   (  filter config filter config )  throws  servlet exception  {  if  ( server config  =  =  null )   {   eureka server context server context =  (  eureka server context ) filter config . get servlet context (  )  . get attribute (,255,1,init,1,[]
6294,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\ServerRequestAuthFilter.java,log auth,"protected void   (  servlet request request )  {  if  ( server config . should log identity headers (  )  )   {  if  ( request instanceof  http servlet request )   {   http servlet request http request =  (  http servlet request ) request ;   string client name = get header ( http request  abstract eureka identity . auth   name   header   key )  ;   string client version = get header ( http request  abstract eureka identity . auth   version   header   key )  ;   dynamic counter . increment (  monitor config . builder ( name   prefix  +  client name  +  "" - "" +  client version )  . build (  )  )  ;   }   }   }  ",618,2,log,1,[79]
6295,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\ServerRequestAuthFilter.java,log auth,"protected void   (  servlet request request )  {  if  ( server config . should log identity headers (  )  )   {  if  ( request instanceof  http servlet request )   {   http servlet request http request =  (  http servlet request ) request ;   string client name = get header ( http request  abstract eureka identity . auth   name   header   key )  ;   string client version = get header ( http request  abstract eureka identity . auth   version   header   key )  ;   dynamic counter . increment (  monitor config . builder ( name   prefix  +  client name  +  "" - "" +  client version )  . build (  )  )  ;   }   }   }  ",618,2,auth,2,"[318, 430]"
6296,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\StatusResource.java, status resource,public   (  )  {  this (  eureka server context holder . get instance (  )  . get server context (  )  )  ;   }  ,113,2,status,1,[]
6297,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\StatusResource.java, status resource,public   (  )  {  this (  eureka server context holder . get instance (  )  . get server context (  )  )  ;   }  ,113,2,resource,2,[]
6298,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\StatusResource.java,get current time as string,public static  string   (  )  {   simple date format format = new  simple date format ( date   format )  ;  return format . format ( new  date (  )  )  ;   }  ,159,5,get,1,[]
6299,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\StatusResource.java,get current time as string,public static  string   (  )  {   simple date format format = new  simple date format ( date   format )  ;  return format . format ( new  date (  )  )  ;   }  ,159,5,current,2,[]
6300,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\StatusResource.java,get current time as string,public static  string   (  )  {   simple date format format = new  simple date format ( date   format )  ;  return format . format ( new  date (  )  )  ;   }  ,159,5,time,3,[]
6301,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\StatusResource.java,get current time as string,public static  string   (  )  {   simple date format format = new  simple date format ( date   format )  ;  return format . format ( new  date (  )  )  ;   }  ,159,5,as,4,[]
6302,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\StatusResource.java,get current time as string,public static  string   (  )  {   simple date format format = new  simple date format ( date   format )  ;  return format . format ( new  date (  )  )  ;   }  ,159,5,string,5,[15]
6303,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\StatusResource.java,get status info,@get public  status info   (  )  {  return status util . get status info (  )  ;   }  ,86,3,get,1,"[1, 57]"
6304,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\StatusResource.java,get status info,@get public  status info   (  )  {  return status util . get status info (  )  ;   }  ,86,3,status,2,"[13, 43, 61]"
6305,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\StatusResource.java,get status info,@get public  status info   (  )  {  return status util . get status info (  )  ;   }  ,86,3,info,3,"[20, 68]"
6306,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\transport\EurekaServerHttpClients.java,create factory,public static  transport client factory   ( final  transport client factory delegate factory )  {  final  dns service impl dns service = new  dns service impl (  )  ;  return new  transport client factory (  )  {  @ override public  eureka http client new client (   eureka endpoint endpoint )  {  return new  redirecting eureka http client ( endpoint . get service url (  )  delegate factory dns service )  ;   }  @ override public void shutdown (  )  {  delegate factory . shutdown (  )  ;   }   }   ;   }  ,509,2,create,1,[]
6307,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\transport\EurekaServerHttpClients.java,create factory,public static  transport client factory   ( final  transport client factory delegate factory )  {  final  dns service impl dns service = new  dns service impl (  )  ;  return new  transport client factory (  )  {  @ override public  eureka http client new client (   eureka endpoint endpoint )  {  return new  redirecting eureka http client ( endpoint . get service url (  )  delegate factory dns service )  ;   }  @ override public void shutdown (  )  {  delegate factory . shutdown (  )  ;   }   }   ;   }  ,509,2,factory,2,"[32, 68, 85, 197, 385, 465]"
6308,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\transport\EurekaServerHttpClients.java,create remote region client,public static  eureka http client   (  eureka server config server config  eureka transport config transport config  server codecs server codecs  cluster resolver <  eureka endpoint >  cluster resolver )  {   jersey remote region client factory jersey factory = new  jersey remote region client factory ( server config server codecs cluster resolver . get region (  )  )  ;   transport client factory metrics factory =  metrics collecting eureka http client . create factory ( jersey factory )  ;   sessioned eureka http client client = new  sessioned eureka http client (  names . remote  retryable eureka http client . create factory (  names . remote transport config cluster resolver create factory ( metrics factory )   server status evaluators . legacy evaluator (  )  )  reconnect   interval   minutes * 60 * 1000 )  ;  return client ;   }  ,848,4,create,1,"[460, 621, 688]"
6309,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\transport\EurekaServerHttpClients.java,create remote region client,public static  eureka http client   (  eureka server config server config  eureka transport config transport config  server codecs server codecs  cluster resolver <  eureka endpoint >  cluster resolver )  {   jersey remote region client factory jersey factory = new  jersey remote region client factory ( server config server codecs cluster resolver . get region (  )  )  ;   transport client factory metrics factory =  metrics collecting eureka http client . create factory ( jersey factory )  ;   sessioned eureka http client client = new  sessioned eureka http client (  names . remote  retryable eureka http client . create factory (  names . remote transport config cluster resolver create factory ( metrics factory )   server status evaluators . legacy evaluator (  )  )  reconnect   interval   minutes * 60 * 1000 )  ;  return client ;   }  ,848,4,remote,2,"[216, 274, 582, 647]"
6310,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\transport\EurekaServerHttpClients.java,create remote region client,public static  eureka http client   (  eureka server config server config  eureka transport config transport config  server codecs server codecs  cluster resolver <  eureka endpoint >  cluster resolver )  {   jersey remote region client factory jersey factory = new  jersey remote region client factory ( server config server codecs cluster resolver . get region (  )  )  ;   transport client factory metrics factory =  metrics collecting eureka http client . create factory ( jersey factory )  ;   sessioned eureka http client client = new  sessioned eureka http client (  names . remote  retryable eureka http client . create factory (  names . remote transport config cluster resolver create factory ( metrics factory )   server status evaluators . legacy evaluator (  )  )  reconnect   interval   minutes * 60 * 1000 )  ;  return client ;   }  ,848,4,region,3,"[223, 281, 356]"
6311,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\transport\EurekaServerHttpClients.java,create remote region client,public static  eureka http client   (  eureka server config server config  eureka transport config transport config  server codecs server codecs  cluster resolver <  eureka endpoint >  cluster resolver )  {   jersey remote region client factory jersey factory = new  jersey remote region client factory ( server config server codecs cluster resolver . get region (  )  )  ;   transport client factory metrics factory =  metrics collecting eureka http client . create factory ( jersey factory )  ;   sessioned eureka http client client = new  sessioned eureka http client (  names . remote  retryable eureka http client . create factory (  names . remote transport config cluster resolver create factory ( metrics factory )   server status evaluators . legacy evaluator (  )  )  reconnect   interval   minutes * 60 * 1000 )  ;  return client ;   }  ,848,4,client,4,"[27, 230, 288, 386, 451, 521, 528, 564, 612, 834]"
6312,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\transport\EurekaServerHttpClients.java,new client,@ override public  eureka http client   (  eureka endpoint endpoint )  {  return new  redirecting eureka http client ( endpoint . get service url (  )  delegate factory dns service )  ;   }  ,191,2,new,1,[81]
6313,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\transport\EurekaServerHttpClients.java,new client,@ override public  eureka http client   (  eureka endpoint endpoint )  {  return new  redirecting eureka http client ( endpoint . get service url (  )  delegate factory dns service )  ;   }  ,191,2,client,2,"[31, 110]"
6314,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\transport\EurekaServerHttpClients.java,shutdown,@ override public void   (  )  {  delegate factory . shutdown (  )  ;   }  ,75,1,shutdown,1,[53]
6315,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\transport\JerseyRemoteRegionClientFactory.java, jersey remote region client factory,@ inject public   (  eureka server config server config  server codecs server codecs  string region )  {  this . server config = server config ;  this . server codecs = server codecs ;  this . region = region ;   }  ,216,5,jersey,1,[]
6316,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\transport\JerseyRemoteRegionClientFactory.java, jersey remote region client factory,@ inject public   (  eureka server config server config  server codecs server codecs  string region )  {  this . server config = server config ;  this . server codecs = server codecs ;  this . region = region ;   }  ,216,5,remote,2,[]
6317,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\transport\JerseyRemoteRegionClientFactory.java, jersey remote region client factory,@ inject public   (  eureka server config server config  server codecs server codecs  string region )  {  this . server config = server config ;  this . server codecs = server codecs ;  this . region = region ;   }  ,216,5,region,3,"[93, 193, 202]"
6318,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\transport\JerseyRemoteRegionClientFactory.java, jersey remote region client factory,@ inject public   (  eureka server config server config  server codecs server codecs  string region )  {  this . server config = server config ;  this . server codecs = server codecs ;  this . region = region ;   }  ,216,5,client,4,[]
6319,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\transport\JerseyRemoteRegionClientFactory.java, jersey remote region client factory,@ inject public   (  eureka server config server config  server codecs server codecs  string region )  {  this . server config = server config ;  this . server codecs = server codecs ;  this . region = region ;   }  ,216,5,factory,5,[]
6320,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\transport\JerseyRemoteRegionClientFactory.java,get or create jersey client,"private  eureka jersey client   (  string region  eureka endpoint endpoint )  {  if  ( jersey client  !  =  null )   {  return jersey client ;   }  synchronized  ( lock )   {  if  ( jersey client  =  =  null )   {   eureka jersey client builder client builder = new  eureka jersey client builder (  )  . with user agent ( "" java -  eureka client -  remote region"" )  . with encoder wrapper ( server codecs . get full json codec (  )  )  . with decoder wrapper ( server codecs . get full json codec (  )  )  . with connection timeout ( server config . get remote region connect timeout ms (  )  )  . with read timeout ( server config . get remote region read timeout ms (  )  )  . with max connections per host ( server config . get remote region total connections per host (  )  )  . with max total connections ( server config . get remote region total connections (  )  )  . with connection idle timeout ( server config . get remote region connection idle timeout seconds (  )  )  ;  if  ( endpoint . is secure (  )  )   {  client builder . with client name ( "" discovery -  remote region client - ""  +  region )  ;   }  else if  ( ""true"" . equals (  system . get property ( ""com . netflix . eureka . shouldssl connections use system socket factory"" )  )  )   {  client builder . with client name ( "" discovery -  remote region system secure client - ""  +  region )  . with systemssl configuration (  )  ;   }  else  {  client builder . with client name ( "" discovery -  remote region secure client - ""  +  region )  . with trust store file ( server config . get remote region trust store (  )  server config . get remote region trust store password (  )  )  ;   }  jersey client = client builder . build (  )  ;   apache http client4 discovery apache client = jersey client . get client (  )  ;  boolean enablegzip content encoding filter = server config . shouldg zip content from remote region (  )  ;  if  ( enablegzip content encoding filter )   {  discovery apache client . add filter ( new gzip content encoding filter ( false )  )  ;   }   string ip = null ;  try  {  ip =  inet address . get local host (  )  . get host address (  )  ;   }  catch  (   unknown host exception e )   {  logger . warn ( "" cannot find localhost ip"" e )  ;   }   eureka server identity identity = new  eureka server identity ( ip )  ;  discovery apache client . add filter ( new  eureka identity header filter ( identity )  )  ;   }   }  return jersey client ;   }  ",2454,5,get,1,"[408, 478, 551, 635, 728, 829, 923, 1161, 1560, 1612, 1778, 2098, 2121]"
6321,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\transport\JerseyRemoteRegionClientFactory.java,get or create jersey client,"private  eureka jersey client   (  string region  eureka endpoint endpoint )  {  if  ( jersey client  !  =  null )   {  return jersey client ;   }  synchronized  ( lock )   {  if  ( jersey client  =  =  null )   {   eureka jersey client builder client builder = new  eureka jersey client builder (  )  . with user agent ( "" java -  eureka client -  remote region"" )  . with encoder wrapper ( server codecs . get full json codec (  )  )  . with decoder wrapper ( server codecs . get full json codec (  )  )  . with connection timeout ( server config . get remote region connect timeout ms (  )  )  . with read timeout ( server config . get remote region read timeout ms (  )  )  . with max connections per host ( server config . get remote region total connections per host (  )  )  . with max total connections ( server config . get remote region total connections (  )  )  . with connection idle timeout ( server config . get remote region connection idle timeout seconds (  )  )  ;  if  ( endpoint . is secure (  )  )   {  client builder . with client name ( "" discovery -  remote region client - ""  +  region )  ;   }  else if  ( ""true"" . equals (  system . get property ( ""com . netflix . eureka . shouldssl connections use system socket factory"" )  )  )   {  client builder . with client name ( "" discovery -  remote region system secure client - ""  +  region )  . with systemssl configuration (  )  ;   }  else  {  client builder . with client name ( "" discovery -  remote region secure client - ""  +  region )  . with trust store file ( server config . get remote region trust store (  )  server config . get remote region trust store password (  )  )  ;   }  jersey client = client builder . build (  )  ;   apache http client4 discovery apache client = jersey client . get client (  )  ;  boolean enablegzip content encoding filter = server config . shouldg zip content from remote region (  )  ;  if  ( enablegzip content encoding filter )   {  discovery apache client . add filter ( new gzip content encoding filter ( false )  )  ;   }   string ip = null ;  try  {  ip =  inet address . get local host (  )  . get host address (  )  ;   }  catch  (   unknown host exception e )   {  logger . warn ( "" cannot find localhost ip"" e )  ;   }   eureka server identity identity = new  eureka server identity ( ip )  ;  discovery apache client . add filter ( new  eureka identity header filter ( identity )  )  ;   }   }  return jersey client ;   }  ",2454,5,or,2,"[1246, 1533, 1586, 1638, 1647]"
6322,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\transport\JerseyRemoteRegionClientFactory.java,get or create jersey client,"private  eureka jersey client   (  string region  eureka endpoint endpoint )  {  if  ( jersey client  !  =  null )   {  return jersey client ;   }  synchronized  ( lock )   {  if  ( jersey client  =  =  null )   {   eureka jersey client builder client builder = new  eureka jersey client builder (  )  . with user agent ( "" java -  eureka client -  remote region"" )  . with encoder wrapper ( server codecs . get full json codec (  )  )  . with decoder wrapper ( server codecs . get full json codec (  )  )  . with connection timeout ( server config . get remote region connect timeout ms (  )  )  . with read timeout ( server config . get remote region read timeout ms (  )  )  . with max connections per host ( server config . get remote region total connections per host (  )  )  . with max total connections ( server config . get remote region total connections (  )  )  . with connection idle timeout ( server config . get remote region connection idle timeout seconds (  )  )  ;  if  ( endpoint . is secure (  )  )   {  client builder . with client name ( "" discovery -  remote region client - ""  +  region )  ;   }  else if  ( ""true"" . equals (  system . get property ( ""com . netflix . eureka . shouldssl connections use system socket factory"" )  )  )   {  client builder . with client name ( "" discovery -  remote region system secure client - ""  +  region )  . with systemssl configuration (  )  ;   }  else  {  client builder . with client name ( "" discovery -  remote region secure client - ""  +  region )  . with trust store file ( server config . get remote region trust store (  )  server config . get remote region trust store password (  )  )  ;   }  jersey client = client builder . build (  )  ;   apache http client4 discovery apache client = jersey client . get client (  )  ;  boolean enablegzip content encoding filter = server config . shouldg zip content from remote region (  )  ;  if  ( enablegzip content encoding filter )   {  discovery apache client . add filter ( new gzip content encoding filter ( false )  )  ;   }   string ip = null ;  try  {  ip =  inet address . get local host (  )  . get host address (  )  ;   }  catch  (   unknown host exception e )   {  logger . warn ( "" cannot find localhost ip"" e )  ;   }   eureka server identity identity = new  eureka server identity ( ip )  ;  discovery apache client . add filter ( new  eureka identity header filter ( identity )  )  ;   }   }  return jersey client ;   }  ",2454,5,create,3,[]
6323,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\transport\JerseyRemoteRegionClientFactory.java,get or create jersey client,"private  eureka jersey client   (  string region  eureka endpoint endpoint )  {  if  ( jersey client  !  =  null )   {  return jersey client ;   }  synchronized  ( lock )   {  if  ( jersey client  =  =  null )   {   eureka jersey client builder client builder = new  eureka jersey client builder (  )  . with user agent ( "" java -  eureka client -  remote region"" )  . with encoder wrapper ( server codecs . get full json codec (  )  )  . with decoder wrapper ( server codecs . get full json codec (  )  )  . with connection timeout ( server config . get remote region connect timeout ms (  )  )  . with read timeout ( server config . get remote region read timeout ms (  )  )  . with max connections per host ( server config . get remote region total connections per host (  )  )  . with max total connections ( server config . get remote region total connections (  )  )  . with connection idle timeout ( server config . get remote region connection idle timeout seconds (  )  )  ;  if  ( endpoint . is secure (  )  )   {  client builder . with client name ( "" discovery -  remote region client - ""  +  region )  ;   }  else if  ( ""true"" . equals (  system . get property ( ""com . netflix . eureka . shouldssl connections use system socket factory"" )  )  )   {  client builder . with client name ( "" discovery -  remote region system secure client - ""  +  region )  . with systemssl configuration (  )  ;   }  else  {  client builder . with client name ( "" discovery -  remote region secure client - ""  +  region )  . with trust store file ( server config . get remote region trust store (  )  server config . get remote region trust store password (  )  )  ;   }  jersey client = client builder . build (  )  ;   apache http client4 discovery apache client = jersey client . get client (  )  ;  boolean enablegzip content encoding filter = server config . shouldg zip content from remote region (  )  ;  if  ( enablegzip content encoding filter )   {  discovery apache client . add filter ( new gzip content encoding filter ( false )  )  ;   }   string ip = null ;  try  {  ip =  inet address . get local host (  )  . get host address (  )  ;   }  catch  (   unknown host exception e )   {  logger . warn ( "" cannot find localhost ip"" e )  ;   }   eureka server identity identity = new  eureka server identity ( ip )  ;  discovery apache client . add filter ( new  eureka identity header filter ( identity )  )  ;   }   }  return jersey client ;   }  ",2454,5,jersey,4,"[16, 87, 127, 182, 223, 274, 1667, 1762, 2433]"
6324,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\transport\JerseyRemoteRegionClientFactory.java,get or create jersey client,"private  eureka jersey client   (  string region  eureka endpoint endpoint )  {  if  ( jersey client  !  =  null )   {  return jersey client ;   }  synchronized  ( lock )   {  if  ( jersey client  =  =  null )   {   eureka jersey client builder client builder = new  eureka jersey client builder (  )  . with user agent ( "" java -  eureka client -  remote region"" )  . with encoder wrapper ( server codecs . get full json codec (  )  )  . with decoder wrapper ( server codecs . get full json codec (  )  )  . with connection timeout ( server config . get remote region connect timeout ms (  )  )  . with read timeout ( server config . get remote region read timeout ms (  )  )  . with max connections per host ( server config . get remote region total connections per host (  )  )  . with max total connections ( server config . get remote region total connections (  )  )  . with connection idle timeout ( server config . get remote region connection idle timeout seconds (  )  )  ;  if  ( endpoint . is secure (  )  )   {  client builder . with client name ( "" discovery -  remote region client - ""  +  region )  ;   }  else if  ( ""true"" . equals (  system . get property ( ""com . netflix . eureka . shouldssl connections use system socket factory"" )  )  )   {  client builder . with client name ( "" discovery -  remote region system secure client - ""  +  region )  . with systemssl configuration (  )  ;   }  else  {  client builder . with client name ( "" discovery -  remote region secure client - ""  +  region )  . with trust store file ( server config . get remote region trust store (  )  server config . get remote region trust store password (  )  )  ;   }  jersey client = client builder . build (  )  ;   apache http client4 discovery apache client = jersey client . get client (  )  ;  boolean enablegzip content encoding filter = server config . shouldg zip content from remote region (  )  ;  if  ( enablegzip content encoding filter )   {  discovery apache client . add filter ( new gzip content encoding filter ( false )  )  ;   }   string ip = null ;  try  {  ip =  inet address . get local host (  )  . get host address (  )  ;   }  catch  (   unknown host exception e )   {  logger . warn ( "" cannot find localhost ip"" e )  ;   }   eureka server identity identity = new  eureka server identity ( ip )  ;  discovery apache client . add filter ( new  eureka identity header filter ( identity )  )  ;   }   }  return jersey client ;   }  ",2454,5,client,5,"[23, 94, 134, 189, 230, 245, 281, 339, 1025, 1047, 1090, 1264, 1286, 1343, 1421, 1443, 1493, 1674, 1683, 1728, 1753, 1769, 1782, 1972, 2341, 2440]"
6325,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\transport\JerseyRemoteRegionClientFactory.java,new client,@ override public  eureka http client   (  eureka endpoint endpoint )  {  return new  jersey application client ( get or create jersey client ( region endpoint )  . get client (  )  endpoint . get service url (  )   collections .  <  string  string > empt,255,2,new,1,[81]
6326,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\transport\JerseyRemoteRegionClientFactory.java,new client,@ override public  eureka http client   (  eureka endpoint endpoint )  {  return new  jersey application client ( get or create jersey client ( region endpoint )  . get client (  )  endpoint . get service url (  )   collections .  <  string  string > empt,255,2,client,2,"[31, 105, 135, 169]"
6327,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\transport\JerseyRemoteRegionClientFactory.java,shutdown,@ override public void   (  )  {  if  ( jersey client  !  =  null )   {  jersey client . destroy resources (  )  ;   }   }  ,124,1,shutdown,1,[]
6328,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\TaskDispatchers.java,create batching task dispatcher,public static  < id t >  task dispatcher < id t >    (  string id int max buffer size int workload size int worker count long max batching delay long congestion retry delay ms long network failure retry ms  task processor < t >  task processor )  {  final  acceptor executor < id t >  acceptor executor = new  acceptor executor <  >  ( id max buffer size workload size max batching delay congestion retry delay ms network failure retry ms )  ;  final  task executors < id t >  task executor =  task executors . batch executors ( id worker count task processor acceptor executor )  ;  return new  task dispatcher < id t >  (  )  {  @ override public void process (  id id  t task  long expiry time )  {  acceptor executor . process ( id task expiry time )  ;   }  @ override public void shutdown (  )  {  acceptor executor . shutdown (  )  ;  task executor . shutdown (  )  ;   }   }   ;   }  ,892,4,create,1,[]
6329,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\TaskDispatchers.java,create batching task dispatcher,public static  < id t >  task dispatcher < id t >    (  string id int max buffer size int workload size int worker count long max batching delay long congestion retry delay ms long network failure retry ms  task processor < t >  task processor )  {  final  acceptor executor < id t >  acceptor executor = new  acceptor executor <  >  ( id max buffer size workload size max batching delay congestion retry delay ms network failure retry ms )  ;  final  task executors < id t >  task executor =  task executors . batch executors ( id worker count task processor acceptor executor )  ;  return new  task dispatcher < id t >  (  )  {  @ override public void process (  id id  t task  long expiry time )  {  acceptor executor . process ( id task expiry time )  ;   }  @ override public void shutdown (  )  {  acceptor executor . shutdown (  )  ;  task executor . shutdown (  )  ;   }   }   ;   }  ,892,4,batching,2,"[130, 373]"
6330,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\TaskDispatchers.java,create batching task dispatcher,public static  < id t >  task dispatcher < id t >    (  string id int max buffer size int workload size int worker count long max batching delay long congestion retry delay ms long network failure retry ms  task processor < t >  task processor )  {  final  acceptor executor < id t >  acceptor executor = new  acceptor executor <  >  ( id max buffer size workload size max batching delay congestion retry delay ms network failure retry ms )  ;  final  task executors < id t >  task executor =  task executors . batch executors ( id worker count task processor acceptor executor )  ;  return new  task dispatcher < id t >  (  )  {  @ override public void process (  id id  t task  long expiry time )  {  acceptor executor . process ( id task expiry time )  ;   }  @ override public void shutdown (  )  {  acceptor executor . shutdown (  )  ;  task executor . shutdown (  )  ;   }   }   ;   }  ,892,4,task,3,"[25, 207, 229, 452, 477, 494, 545, 596, 674, 736, 842]"
6331,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\TaskDispatchers.java,create batching task dispatcher,public static  < id t >  task dispatcher < id t >    (  string id int max buffer size int workload size int worker count long max batching delay long congestion retry delay ms long network failure retry ms  task processor < t >  task processor )  {  final  acceptor executor < id t >  acceptor executor = new  acceptor executor <  >  ( id max buffer size workload size max batching delay congestion retry delay ms network failure retry ms )  ;  final  task executors < id t >  task executor =  task executors . batch executors ( id worker count task processor acceptor executor )  ;  return new  task dispatcher < id t >  (  )  {  @ override public void process (  id id  t task  long expiry time )  {  acceptor executor . process ( id task expiry time )  ;   }  @ override public void shutdown (  )  {  acceptor executor . shutdown (  )  ;  task executor . shutdown (  )  ;   }   }   ;   }  ,892,4,dispatcher,4,"[30, 601]"
6332,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\TaskDispatchers.java,create non batching task dispatcher,public static  < id t >  task dispatcher < id t >    (  string id int max buffer size int worker count long max batching delay long congestion retry delay ms long network failure retry ms  task processor < t >  task processor )  {  final  acceptor executor < id t >  acceptor executor = new  acceptor executor <  >  ( id max buffer size 1 max batching delay congestion retry delay ms network failure retry ms )  ;  final  task executors < id t >  task executor =  task executors . single item executors ( id worker count task processor acceptor executor )  ;  return new  task dispatcher < id t >  (  )  {  @ override public void process (  id id  t task  long expiry time )  {  acceptor executor . process ( id task expiry time )  ;   }  @ override public void shutdown (  )  {  acceptor executor . shutdown (  )  ;  task executor . shutdown (  )  ;   }   }   ;   }  ,868,5,create,1,[]
6333,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\TaskDispatchers.java,create non batching task dispatcher,public static  < id t >  task dispatcher < id t >    (  string id int max buffer size int worker count long max batching delay long congestion retry delay ms long network failure retry ms  task processor < t >  task processor )  {  final  acceptor executor < id t >  acceptor executor = new  acceptor executor <  >  ( id max buffer size 1 max batching delay congestion retry delay ms network failure retry ms )  ;  final  task executors < id t >  task executor =  task executors . single item executors ( id worker count task processor acceptor executor )  ;  return new  task dispatcher < id t >  (  )  {  @ override public void process (  id id  t task  long expiry time )  {  acceptor executor . process ( id task expiry time )  ;   }  @ override public void shutdown (  )  {  acceptor executor . shutdown (  )  ;  task executor . shutdown (  )  ;   }   }   ;   }  ,868,5,non,2,[]
6334,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\TaskDispatchers.java,create non batching task dispatcher,public static  < id t >  task dispatcher < id t >    (  string id int max buffer size int worker count long max batching delay long congestion retry delay ms long network failure retry ms  task processor < t >  task processor )  {  final  acceptor executor < id t >  acceptor executor = new  acceptor executor <  >  ( id max buffer size 1 max batching delay congestion retry delay ms network failure retry ms )  ;  final  task executors < id t >  task executor =  task executors . single item executors ( id worker count task processor acceptor executor )  ;  return new  task dispatcher < id t >  (  )  {  @ override public void process (  id id  t task  long expiry time )  {  acceptor executor . process ( id task expiry time )  ;   }  @ override public void shutdown (  )  {  acceptor executor . shutdown (  )  ;  task executor . shutdown (  )  ;   }   }   ;   }  ,868,5,batching,3,"[112, 343]"
6335,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\TaskDispatchers.java,create non batching task dispatcher,public static  < id t >  task dispatcher < id t >    (  string id int max buffer size int worker count long max batching delay long congestion retry delay ms long network failure retry ms  task processor < t >  task processor )  {  final  acceptor executor < id t >  acceptor executor = new  acceptor executor <  >  ( id max buffer size 1 max batching delay congestion retry delay ms network failure retry ms )  ;  final  task executors < id t >  task executor =  task executors . single item executors ( id worker count task processor acceptor executor )  ;  return new  task dispatcher < id t >  (  )  {  @ override public void process (  id id  t task  long expiry time )  {  acceptor executor . process ( id task expiry time )  ;   }  @ override public void shutdown (  )  {  acceptor executor . shutdown (  )  ;  task executor . shutdown (  )  ;   }   }   ;   }  ,868,5,task,4,"[25, 189, 211, 422, 447, 464, 521, 572, 650, 712, 818]"
6336,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\TaskDispatchers.java,create non batching task dispatcher,public static  < id t >  task dispatcher < id t >    (  string id int max buffer size int worker count long max batching delay long congestion retry delay ms long network failure retry ms  task processor < t >  task processor )  {  final  acceptor executor < id t >  acceptor executor = new  acceptor executor <  >  ( id max buffer size 1 max batching delay congestion retry delay ms network failure retry ms )  ;  final  task executors < id t >  task executor =  task executors . single item executors ( id worker count task processor acceptor executor )  ;  return new  task dispatcher < id t >  (  )  {  @ override public void process (  id id  t task  long expiry time )  {  acceptor executor . process ( id task expiry time )  ;   }  @ override public void shutdown (  )  {  acceptor executor . shutdown (  )  ;  task executor . shutdown (  )  ;   }   }   ;   }  ,868,5,dispatcher,5,"[30, 577]"
6337,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\TaskDispatchers.java,process,@ override public void   ( id id t task long expiry time )  {  acceptor executor . process ( id task expiry time )  ;   }  ,123,1,process,1,[83]
6338,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\TaskDispatchers.java,shutdown,@ override public void   (  )  {  acceptor executor . shutdown (  )  ;  task executor . shutdown (  )  ;   }  ,110,1,shutdown,1,"[54, 88]"
6339,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\AcceptorExecutor.java, acceptor executor,"  (  string id int max buffer size int max batching size long max batching delay long congestion retry delay ms long network failure retry ms )  {  this . max buffer size = max buffer size ;  this . max batching size = max batching size ;  this . max batching delay = max batching delay ;  this . traffic shaper = new  traffic shaper ( congestion retry delay ms network failure retry ms )  ;   thread group thread group = new  thread group ( ""eureka task executors"" )  ;  this . acceptor thread = new  thread ( thread group new  acceptor runner (  )  "" task acceptor - ""  +  id )  ;  this . acceptor thread . set daemon ( true )  ;  this . acceptor thread . start (  )  ;  final double[] percentiles =  { 50 . 0 95 . 0 99 . 0 99 . 5 }  ;  final  stats config stats config = new  stats config .  builder (  )  . with sample size ( 1000 )  . with percentiles ( percentiles )  . with publish std dev ( true )  . build (  )  ;  final  monitor config config =  monitor config . builder ( metric   replication   prefix  +  ""batch size"" )  . build (  )  ;  this . batch size metric = new  stats timer ( config stats config )  ;  try  {   monitors . register object ( id this )  ;   }  catch  (   throwable e )   {  logger . warn ( "" cannot register servo monitor for this object"" e )  ;   }   }  ",1289,2,acceptor,1,"[479, 529, 558, 591, 640]"
6340,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\AcceptorExecutor.java, acceptor executor,"  (  string id int max buffer size int max batching size long max batching delay long congestion retry delay ms long network failure retry ms )  {  this . max buffer size = max buffer size ;  this . max batching size = max batching size ;  this . max batching delay = max batching delay ;  this . traffic shaper = new  traffic shaper ( congestion retry delay ms network failure retry ms )  ;   thread group thread group = new  thread group ( ""eureka task executors"" )  ;  this . acceptor thread = new  thread ( thread group new  acceptor runner (  )  "" task acceptor - ""  +  id )  ;  this . acceptor thread . set daemon ( true )  ;  this . acceptor thread . start (  )  ;  final double[] percentiles =  { 50 . 0 95 . 0 99 . 0 99 . 5 }  ;  final  stats config stats config = new  stats config .  builder (  )  . with sample size ( 1000 )  . with percentiles ( percentiles )  . with publish std dev ( true )  . build (  )  ;  final  monitor config config =  monitor config . builder ( metric   replication   prefix  +  ""batch size"" )  . build (  )  ;  this . batch size metric = new  stats timer ( config stats config )  ;  try  {   monitors . register object ( id this )  ;   }  catch  (   throwable e )   {  logger . warn ( "" cannot register servo monitor for this object"" e )  ;   }   }  ",1289,2,executor,2,[455]
6341,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\AcceptorExecutor.java,append task holder,private void   (  task holder < id t >  task holder )  {  if  ( is full (  )  )   {  pending tasks . remove ( processing order . poll (  )  )  ;  queue overflows +  +  ;   }   task holder < id t >  previous task = pending tasks . put ( task holder . get id (  )  task holder )  ;  if  ( previous task  =  =  null )   {  processing order . add ( task holder . get id (  )  )  ;   }  else  {  overridden tasks +  +  ;   }   }  ,425,3,append,1,[]
6342,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\AcceptorExecutor.java,append task holder,private void   (  task holder < id t >  task holder )  {  if  ( is full (  )  )   {  pending tasks . remove ( processing order . poll (  )  )  ;  queue overflows +  +  ;   }   task holder < id t >  previous task = pending tasks . put ( task holder . get id (  )  task holder )  ;  if  ( previous task  =  =  null )   {  processing order . add ( task holder . get id (  )  )  ;   }  else  {  overridden tasks +  +  ;   }   }  ,425,3,task,2,"[18, 40, 93, 176, 207, 222, 236, 263, 296, 345, 402]"
6343,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\AcceptorExecutor.java,append task holder,private void   (  task holder < id t >  task holder )  {  if  ( is full (  )  )   {  pending tasks . remove ( processing order . poll (  )  )  ;  queue overflows +  +  ;   }   task holder < id t >  previous task = pending tasks . put ( task holder . get id (  )  task holder )  ;  if  ( previous task  =  =  null )   {  processing order . add ( task holder . get id (  )  )  ;   }  else  {  overridden tasks +  +  ;   }   }  ,425,3,holder,3,"[23, 45, 181, 241, 268, 350]"
6344,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\AcceptorExecutor.java,assign batch work,void   (  )  {  if  ( has enough tasks for next batch (  )  )   {  if  ( batch work requests . try acquire ( 1 )  )   {  long now =  system . current time millis (  )  ;  int len =  math . min ( max batching size processing order . size (  )  )  ;   list <  task holder < id t >  >  holders = new  array list <  >  ( len )  ;  while  ( holders . size (  )   <  len &&  ! processing order . is empty (  )  )   {  id id = processing order . poll (  )  ;   task holder < id t >  holder = pending tasks . remove ( id )  ;  if  ( holder . get expiry time (  )   >  now )   {  holders . add ( holder )  ;   }  else  {  expired tasks +  +  ;   }   }  if  ( holders . is empty (  )  )   {  batch work requests . release (  )  ;   }  else  {  batch size metric . record ( holders . size (  )   time unit . milliseconds )  ;  batch work queue . add ( holders )  ;   }   }   }   }  ,871,3,assign,1,[]
6345,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\AcceptorExecutor.java,assign batch work,void   (  )  {  if  ( has enough tasks for next batch (  )  )   {  if  ( batch work requests . try acquire ( 1 )  )   {  long now =  system . current time millis (  )  ;  int len =  math . min ( max batching size processing order . size (  )  )  ;   list <  task holder < id t >  >  holders = new  array list <  >  ( len )  ;  while  ( holders . size (  )   <  len &&  ! processing order . is empty (  )  )   {  id id = processing order . poll (  )  ;   task holder < id t >  holder = pending tasks . remove ( id )  ;  if  ( holder . get expiry time (  )   >  now )   {  holders . add ( holder )  ;   }  else  {  expired tasks +  +  ;   }   }  if  ( holders . is empty (  )  )   {  batch work requests . release (  )  ;   }  else  {  batch size metric . record ( holders . size (  )   time unit . milliseconds )  ;  batch work queue . add ( holders )  ;   }   }   }   }  ,871,3,batch,2,"[48, 73, 199, 682, 734, 816]"
6346,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\AcceptorExecutor.java,assign batch work,void   (  )  {  if  ( has enough tasks for next batch (  )  )   {  if  ( batch work requests . try acquire ( 1 )  )   {  long now =  system . current time millis (  )  ;  int len =  math . min ( max batching size processing order . size (  )  )  ;   list <  task holder < id t >  >  holders = new  array list <  >  ( len )  ;  while  ( holders . size (  )   <  len &&  ! processing order . is empty (  )  )   {  id id = processing order . poll (  )  ;   task holder < id t >  holder = pending tasks . remove ( id )  ;  if  ( holder . get expiry time (  )   >  now )   {  holders . add ( holder )  ;   }  else  {  expired tasks +  +  ;   }   }  if  ( holders . is empty (  )  )   {  batch work requests . release (  )  ;   }  else  {  batch size metric . record ( holders . size (  )   time unit . milliseconds )  ;  batch work queue . add ( holders )  ;   }   }   }   }  ,871,3,work,3,"[79, 688, 822]"
6347,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\AcceptorExecutor.java,assign single item work,void   (  )  {  if  (  ! processing order . is empty (  )  )   {  if  ( single item work requests . try acquire ( 1 )  )   {  long now =  system . current time millis (  )  ;  while  (  ! processing order . is empty (  )  )   {  id id = processing order . poll (  )  ;   task holder < id t >  holder = pending tasks . remove ( id )  ;  if  ( holder . get expiry time (  )   >  now )   {  single item work queue . add ( holder )  ;  return ;   }  expired tasks +  +  ;   }  single item work requests . release (  )  ;   }   }   }  ,530,4,assign,1,[]
6348,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\AcceptorExecutor.java,assign single item work,void   (  )  {  if  (  ! processing order . is empty (  )  )   {  if  ( single item work requests . try acquire ( 1 )  )   {  long now =  system . current time millis (  )  ;  while  (  ! processing order . is empty (  )  )   {  id id = processing order . poll (  )  ;   task holder < id t >  holder = pending tasks . remove ( id )  ;  if  ( holder . get expiry time (  )   >  now )   {  single item work queue . add ( holder )  ;  return ;   }  expired tasks +  +  ;   }  single item work requests . release (  )  ;   }   }   }  ,530,4,single,2,"[72, 388, 473]"
6349,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\AcceptorExecutor.java,assign single item work,void   (  )  {  if  (  ! processing order . is empty (  )  )   {  if  ( single item work requests . try acquire ( 1 )  )   {  long now =  system . current time millis (  )  ;  while  (  ! processing order . is empty (  )  )   {  id id = processing order . poll (  )  ;   task holder < id t >  holder = pending tasks . remove ( id )  ;  if  ( holder . get expiry time (  )   >  now )   {  single item work queue . add ( holder )  ;  return ;   }  expired tasks +  +  ;   }  single item work requests . release (  )  ;   }   }   }  ,530,4,item,3,"[79, 395, 480]"
6350,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\AcceptorExecutor.java,assign single item work,void   (  )  {  if  (  ! processing order . is empty (  )  )   {  if  ( single item work requests . try acquire ( 1 )  )   {  long now =  system . current time millis (  )  ;  while  (  ! processing order . is empty (  )  )   {  id id = processing order . poll (  )  ;   task holder < id t >  holder = pending tasks . remove ( id )  ;  if  ( holder . get expiry time (  )   >  now )   {  single item work queue . add ( holder )  ;  return ;   }  expired tasks +  +  ;   }  single item work requests . release (  )  ;   }   }   }  ,530,4,work,4,"[84, 400, 485]"
6351,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\AcceptorExecutor.java,drain acceptor queue,private void   (  )  {  while  (  ! acceptor queue . is empty (  )  )   {  append task holder ( acceptor queue . poll (  )  )  ;   }   }  ,138,3,drain,1,[]
6352,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\AcceptorExecutor.java,drain acceptor queue,private void   (  )  {  while  (  ! acceptor queue . is empty (  )  )   {  append task holder ( acceptor queue . poll (  )  )  ;   }   }  ,138,3,acceptor,2,"[36, 96]"
6353,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\AcceptorExecutor.java,drain acceptor queue,private void   (  )  {  while  (  ! acceptor queue . is empty (  )  )   {  append task holder ( acceptor queue . poll (  )  )  ;   }   }  ,138,3,queue,3,"[45, 105]"
6354,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\AcceptorExecutor.java,drain input queues,private void   (  )  throws  interrupted exception  {  do  {  drain reprocess queue (  )  ;  drain acceptor queue (  )  ;  if  (  ! is shutdown . get (  )  )   {  if  ( reprocess queue . is empty (  )  && acceptor queue . is empty (  )  && pending tasks . is empty (  )  )   {   task holder < id t >  task holder = acceptor queue . poll ( 10  time unit . milliseconds )  ;  if  ( task holder  !  =  null )   {  append task holder ( task holder )  ;   }   }   }   }  while  (  ! reprocess queue . is empty (  )  ||  ! acceptor queue . is empty (  )  || pending tasks . is empty (  )  )  ;   }  ,593,3,drain,1,"[62, 93]"
6355,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\AcceptorExecutor.java,drain input queues,private void   (  )  throws  interrupted exception  {  do  {  drain reprocess queue (  )  ;  drain acceptor queue (  )  ;  if  (  ! is shutdown . get (  )  )   {  if  ( reprocess queue . is empty (  )  && acceptor queue . is empty (  )  && pending tasks . is empty (  )  )   {   task holder < id t >  task holder = acceptor queue . poll ( 10  time unit . milliseconds )  ;  if  ( task holder  !  =  null )   {  append task holder ( task holder )  ;   }   }   }   }  while  (  ! reprocess queue . is empty (  )  ||  ! acceptor queue . is empty (  )  || pending tasks . is empty (  )  )  ;   }  ,593,3,input,2,[]
6356,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\AcceptorExecutor.java,drain input queues,private void   (  )  throws  interrupted exception  {  do  {  drain reprocess queue (  )  ;  drain acceptor queue (  )  ;  if  (  ! is shutdown . get (  )  )   {  if  ( reprocess queue . is empty (  )  && acceptor queue . is empty (  )  && pending tasks . is empty (  )  )   {   task holder < id t >  task holder = acceptor queue . poll ( 10  time unit . milliseconds )  ;  if  ( task holder  !  =  null )   {  append task holder ( task holder )  ;   }   }   }   }  while  (  ! reprocess queue . is empty (  )  ||  ! acceptor queue . is empty (  )  || pending tasks . is empty (  )  )  ;   }  ,593,3,queues,3,[]
6357,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\AcceptorExecutor.java,drain reprocess queue,private void   (  )  {  long now =  system . current time millis (  )  ;  while  (  ! reprocess queue . is empty (  )  &&  ! is full (  )  )   {   task holder < id t >  task holder = reprocess queue . poll last (  )  ;  id id = task holder . get id (  )  ;  if  ( task holder . get expiry time (  )   <  =  now )   {  expired tasks +  +  ;   }  else if  ( pending tasks . contains key ( id )  )   {  overridden tasks +  +  ;   }  else  {  pending tasks . put ( id task holder )  ;  processing order . add first ( id )  ;   }   }  if  ( is full (  )  )   {  queue overflows +  = reprocess queue . size (  )  ;  reprocess queue . clear (  )  ;   }   }  ,651,3,drain,1,[]
6358,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\AcceptorExecutor.java,drain reprocess queue,private void   (  )  {  long now =  system . current time millis (  )  ;  while  (  ! reprocess queue . is empty (  )  &&  ! is full (  )  )   {   task holder < id t >  task holder = reprocess queue . poll last (  )  ;  id id = task holder . get id (  )  ;  if  ( task holder . get expiry time (  )   <  =  now )   {  expired tasks +  +  ;   }  else if  ( pending tasks . contains key ( id )  )   {  overridden tasks +  +  ;   }  else  {  pending tasks . put ( id task holder )  ;  processing order . add first ( id )  ;   }   }  if  ( is full (  )  )   {  queue overflows +  = reprocess queue . size (  )  ;  reprocess queue . clear (  )  ;   }   }  ,651,3,reprocess,2,"[86, 183, 578, 610]"
6359,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\AcceptorExecutor.java,drain reprocess queue,private void   (  )  {  long now =  system . current time millis (  )  ;  while  (  ! reprocess queue . is empty (  )  &&  ! is full (  )  )   {   task holder < id t >  task holder = reprocess queue . poll last (  )  ;  id id = task holder . get id (  )  ;  if  ( task holder . get expiry time (  )   <  =  now )   {  expired tasks +  +  ;   }  else if  ( pending tasks . contains key ( id )  )   {  overridden tasks +  +  ;   }  else  {  pending tasks . put ( id task holder )  ;  processing order . add first ( id )  ;   }   }  if  ( is full (  )  )   {  queue overflows +  = reprocess queue . size (  )  ;  reprocess queue . clear (  )  ;   }   }  ,651,3,queue,3,"[96, 193, 557, 588, 620]"
6360,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\AcceptorExecutor.java,get acceptor queue size,"@ monitor ( name = metric   replication   prefix  +  ""acceptor queue size"" description = "" number of tasks waiting in the acceptor queue"" type =  data source type . gauge )  public long   (  )  {  return acceptor queue . size (  )  ;   }  ",239,4,get,1,[]
6361,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\AcceptorExecutor.java,get acceptor queue size,"@ monitor ( name = metric   replication   prefix  +  ""acceptor queue size"" description = "" number of tasks waiting in the acceptor queue"" type =  data source type . gauge )  public long   (  )  {  return acceptor queue . size (  )  ;   }  ",239,4,acceptor,2,"[54, 122, 204]"
6362,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\AcceptorExecutor.java,get acceptor queue size,"@ monitor ( name = metric   replication   prefix  +  ""acceptor queue size"" description = "" number of tasks waiting in the acceptor queue"" type =  data source type . gauge )  public long   (  )  {  return acceptor queue . size (  )  ;   }  ",239,4,queue,3,"[63, 131, 213]"
6363,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\AcceptorExecutor.java,get acceptor queue size,"@ monitor ( name = metric   replication   prefix  +  ""acceptor queue size"" description = "" number of tasks waiting in the acceptor queue"" type =  data source type . gauge )  public long   (  )  {  return acceptor queue . size (  )  ;   }  ",239,4,size,4,"[69, 221]"
6364,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\AcceptorExecutor.java,get pending job requests,"@ monitor ( name = metric   replication   prefix  +  ""pending job requests"" description = "" number of worker threads awaiting job assignment"" type =  data source type . gauge )  public long   (  )  {  return single item work requests . available permits (",255,4,get,1,[]
6365,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\AcceptorExecutor.java,get pending job requests,"@ monitor ( name = metric   replication   prefix  +  ""pending job requests"" description = "" number of worker threads awaiting job assignment"" type =  data source type . gauge )  public long   (  )  {  return single item work requests . available permits (",255,4,pending,2,[54]
6366,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\AcceptorExecutor.java,get pending job requests,"@ monitor ( name = metric   replication   prefix  +  ""pending job requests"" description = "" number of worker threads awaiting job assignment"" type =  data source type . gauge )  public long   (  )  {  return single item work requests . available permits (",255,4,job,3,"[62, 126]"
6367,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\AcceptorExecutor.java,get pending job requests,"@ monitor ( name = metric   replication   prefix  +  ""pending job requests"" description = "" number of worker threads awaiting job assignment"" type =  data source type . gauge )  public long   (  )  {  return single item work requests . available permits (",255,4,requests,4,"[66, 225]"
6368,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\AcceptorExecutor.java,get queue size,"@ monitor ( name = metric   replication   prefix  +  ""queue size"" description = "" task queue size"" type =  data source type . gauge )  public long   (  )  {  return pending tasks . size (  )  ;   }  ",199,3,get,1,[]
6369,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\AcceptorExecutor.java,get queue size,"@ monitor ( name = metric   replication   prefix  +  ""queue size"" description = "" task queue size"" type =  data source type . gauge )  public long   (  )  {  return pending tasks . size (  )  ;   }  ",199,3,queue,2,"[54, 87]"
6370,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\AcceptorExecutor.java,get queue size,"@ monitor ( name = metric   replication   prefix  +  ""queue size"" description = "" task queue size"" type =  data source type . gauge )  public long   (  )  {  return pending tasks . size (  )  ;   }  ",199,3,size,3,"[60, 93, 181]"
6371,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\AcceptorExecutor.java,get reprocess queue size,"@ monitor ( name = metric   replication   prefix  +  ""reprocess queue size"" description = "" number of tasks waiting in the reprocess queue"" type =  data source type . gauge )  public long   (  )  {  return reprocess queue . size (  )  ;   }  ",242,4,get,1,[]
6372,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\AcceptorExecutor.java,get reprocess queue size,"@ monitor ( name = metric   replication   prefix  +  ""reprocess queue size"" description = "" number of tasks waiting in the reprocess queue"" type =  data source type . gauge )  public long   (  )  {  return reprocess queue . size (  )  ;   }  ",242,4,reprocess,2,"[54, 123, 206]"
6373,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\AcceptorExecutor.java,get reprocess queue size,"@ monitor ( name = metric   replication   prefix  +  ""reprocess queue size"" description = "" number of tasks waiting in the reprocess queue"" type =  data source type . gauge )  public long   (  )  {  return reprocess queue . size (  )  ;   }  ",242,4,queue,3,"[64, 133, 216]"
6374,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\AcceptorExecutor.java,get reprocess queue size,"@ monitor ( name = metric   replication   prefix  +  ""reprocess queue size"" description = "" number of tasks waiting in the reprocess queue"" type =  data source type . gauge )  public long   (  )  {  return reprocess queue . size (  )  ;   }  ",242,4,size,4,"[70, 224]"
6375,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\AcceptorExecutor.java,has enough tasks for next batch,private boolean   (  )  {  if  ( processing order . is empty (  )  )   {  return false ;   }  if  ( pending tasks . size (  )   >  =  max buffer size )   {  return true ;   }   task holder < id t >  next holder = pending tasks . get ( processing order . peek (  )  )  ;  long delay =  system . current time millis (  )   -  next holder . get submit timestamp (  )  ;  return delay  >  =  max batching delay ;   }  ,414,6,has,1,[]
6376,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\AcceptorExecutor.java,has enough tasks for next batch,private boolean   (  )  {  if  ( processing order . is empty (  )  )   {  return false ;   }  if  ( pending tasks . size (  )   >  =  max buffer size )   {  return true ;   }   task holder < id t >  next holder = pending tasks . get ( processing order . peek (  )  )  ;  long delay =  system . current time millis (  )   -  next holder . get submit timestamp (  )  ;  return delay  >  =  max batching delay ;   }  ,414,6,enough,2,[]
6377,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\AcceptorExecutor.java,has enough tasks for next batch,private boolean   (  )  {  if  ( processing order . is empty (  )  )   {  return false ;   }  if  ( pending tasks . size (  )   >  =  max buffer size )   {  return true ;   }   task holder < id t >  next holder = pending tasks . get ( processing order . peek (  )  )  ;  long delay =  system . current time millis (  )   -  next holder . get submit timestamp (  )  ;  return delay  >  =  max batching delay ;   }  ,414,6,tasks,3,"[108, 221]"
6378,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\AcceptorExecutor.java,has enough tasks for next batch,private boolean   (  )  {  if  ( processing order . is empty (  )  )   {  return false ;   }  if  ( pending tasks . size (  )   >  =  max buffer size )   {  return true ;   }   task holder < id t >  next holder = pending tasks . get ( processing order . peek (  )  )  ;  long delay =  system . current time millis (  )   -  next holder . get submit timestamp (  )  ;  return delay  >  =  max batching delay ;   }  ,414,6,for,4,[]
6379,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\AcceptorExecutor.java,has enough tasks for next batch,private boolean   (  )  {  if  ( processing order . is empty (  )  )   {  return false ;   }  if  ( pending tasks . size (  )   >  =  max buffer size )   {  return true ;   }   task holder < id t >  next holder = pending tasks . get ( processing order . peek (  )  )  ;  long delay =  system . current time millis (  )   -  next holder . get submit timestamp (  )  ;  return delay  >  =  max batching delay ;   }  ,414,6,next,5,"[199, 324]"
6380,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\AcceptorExecutor.java,has enough tasks for next batch,private boolean   (  )  {  if  ( processing order . is empty (  )  )   {  return false ;   }  if  ( pending tasks . size (  )   >  =  max buffer size )   {  return true ;   }   task holder < id t >  next holder = pending tasks . get ( processing order . peek (  )  )  ;  long delay =  system . current time millis (  )   -  next holder . get submit timestamp (  )  ;  return delay  >  =  max batching delay ;   }  ,414,6,batch,6,[392]
6381,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\AcceptorExecutor.java,is full,private boolean   (  )  {  return pending tasks . size (  )   >  =  max buffer size ;   }  ,91,2,is,1,[]
6382,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\AcceptorExecutor.java,is full,private boolean   (  )  {  return pending tasks . size (  )   >  =  max buffer size ;   }  ,91,2,full,2,[]
6383,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\AcceptorExecutor.java,process,void   ( id id t task long expiry time )  {  acceptor queue . add ( new  task holder < id t >  ( id task expiry time )  )  ;  accepted tasks +  +  ;   }  ,154,1,process,1,[]
6384,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\AcceptorExecutor.java,reprocess,void   (  task holder < id t >  task holder  processing result processing result )  {  reprocess queue . add ( task holder )  ;  replayed tasks +  +  ;  traffic shaper . register failure ( processing result )  ;   }  ,217,1,reprocess,1,[87]
6385,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\AcceptorExecutor.java,request work item, blocking queue <  task holder < id t >  >    (  )  {  single item work requests . release (  )  ;  return single item work queue ;   }  ,137,3,request,1,[72]
6386,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\AcceptorExecutor.java,request work item, blocking queue <  task holder < id t >  >    (  )  {  single item work requests . release (  )  ;  return single item work queue ;   }  ,137,3,work,2,"[67, 119]"
6387,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\AcceptorExecutor.java,request work item, blocking queue <  task holder < id t >  >    (  )  {  single item work requests . release (  )  ;  return single item work queue ;   }  ,137,3,item,3,"[62, 114]"
6388,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\AcceptorExecutor.java,request work items, blocking queue <  list <  task holder < id t >  >  >    (  )  {  batch work requests . release (  )  ;  return batch work queue ;   }  ,136,3,request,1,[77]
6389,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\AcceptorExecutor.java,request work items, blocking queue <  list <  task holder < id t >  >  >    (  )  {  batch work requests . release (  )  ;  return batch work queue ;   }  ,136,3,work,2,"[72, 118]"
6390,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\AcceptorExecutor.java,request work items, blocking queue <  list <  task holder < id t >  >  >    (  )  {  batch work requests . release (  )  ;  return batch work queue ;   }  ,136,3,items,3,[]
6391,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\AcceptorExecutor.java,run,@ override public void   (  )  {  long schedule time = 0 ;  while  (  ! is shutdown . get (  )  )   {  try  {  drain input queues (  )  ;  int total items = processing order . size (  )  ;  long now =  system . current time millis (  )  ;  if  ( schedule ,255,1,run,1,[]
6392,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\AcceptorExecutor.java,shutdown,void   (  )  {  if  ( is shutdown . compare and set ( false true )  )   {  acceptor thread . interrupt (  )  ;   }   }  ,120,1,shutdown,1,[25]
6393,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\AcceptorExecutor.java,worker task queue size,"@ monitor ( name = metric   replication   prefix  +  ""available jobs"" description = "" number of jobs ready to be taken by the workers"" type =  data source type . gauge )  public long   (  )  {  return single item work queue . size (  )   +  batch work que",255,4,worker,1,[126]
6394,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\AcceptorExecutor.java,worker task queue size,"@ monitor ( name = metric   replication   prefix  +  ""available jobs"" description = "" number of jobs ready to be taken by the workers"" type =  data source type . gauge )  public long   (  )  {  return single item work queue . size (  )   +  batch work que",255,4,task,2,[]
6395,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\AcceptorExecutor.java,worker task queue size,"@ monitor ( name = metric   replication   prefix  +  ""available jobs"" description = "" number of jobs ready to be taken by the workers"" type =  data source type . gauge )  public long   (  )  {  return single item work queue . size (  )   +  batch work que",255,4,queue,3,[218]
6396,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\AcceptorExecutor.java,worker task queue size,"@ monitor ( name = metric   replication   prefix  +  ""available jobs"" description = "" number of jobs ready to be taken by the workers"" type =  data source type . gauge )  public long   (  )  {  return single item work queue . size (  )   +  batch work que",255,4,size,4,[226]
6397,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\TaskHolder.java, task holder,  ( id id t task long expiry time )  {  this . id = id ;  this . expiry time = expiry time ;  this . task = task ;  this . submit timestamp =  system . current time millis (  )  ;   }  ,185,2,task,1,"[12, 101, 108]"
6398,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\TaskHolder.java, task holder,  ( id id t task long expiry time )  {  this . id = id ;  this . expiry time = expiry time ;  this . task = task ;  this . submit timestamp =  system . current time millis (  )  ;   }  ,185,2,holder,2,[]
6399,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\TaskHolder.java,get expiry time,public long   (  )  {  return expiry time ;   }  ,49,3,get,1,[]
6400,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\TaskHolder.java,get expiry time,public long   (  )  {  return expiry time ;   }  ,49,3,expiry,2,[30]
6401,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\TaskHolder.java,get expiry time,public long   (  )  {  return expiry time ;   }  ,49,3,time,3,[37]
6402,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\TaskHolder.java,get id,public id   (  )  {  return id ;   }  ,38,2,get,1,[]
6403,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\TaskHolder.java,get id,public id   (  )  {  return id ;   }  ,38,2,id,2,"[7, 28]"
6404,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\TaskHolder.java,get submit timestamp,public long   (  )  {  return submit timestamp ;   }  ,54,3,get,1,[]
6405,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\TaskHolder.java,get submit timestamp,public long   (  )  {  return submit timestamp ;   }  ,54,3,submit,2,[30]
6406,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\TaskHolder.java,get submit timestamp,public long   (  )  {  return submit timestamp ;   }  ,54,3,timestamp,3,[37]
6407,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\TaskHolder.java,get task,public t   (  )  {  return task ;   }  ,39,2,get,1,[]
6408,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\TaskHolder.java,get task,public t   (  )  {  return task ;   }  ,39,2,task,2,[27]
6409,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\transport\JerseyReplicationClient.java, jersey replication client,public   (  eureka jersey client jersey client  string service url )  {  super ( jersey client . get client (  )  service url )  ;  this . jersey client = jersey client ;  this . jersey apache client = jersey client . get client (  )  ;   }  ,242,3,jersey,1,"[19, 33, 81, 139, 155, 179, 202]"
6410,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\transport\JerseyReplicationClient.java, jersey replication client,public   (  eureka jersey client jersey client  string service url )  {  super ( jersey client . get client (  )  service url )  ;  this . jersey client = jersey client ;  this . jersey apache client = jersey client . get client (  )  ;   }  ,242,3,replication,2,[]
6411,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\transport\JerseyReplicationClient.java, jersey replication client,public   (  eureka jersey client jersey client  string service url )  {  super ( jersey client . get client (  )  service url )  ;  this . jersey client = jersey client ;  this . jersey apache client = jersey client . get client (  )  ;   }  ,242,3,client,3,"[26, 40, 88, 101, 146, 162, 193, 209, 222]"
6412,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\transport\JerseyReplicationClient.java,add extra headers,"@ override protected void   (  builder web resource )  {  web resource . header (  peer eureka node . header   replication ""true"" )  ;   }  ",140,3,add,1,[]
6413,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\transport\JerseyReplicationClient.java,add extra headers,"@ override protected void   (  builder web resource )  {  web resource . header (  peer eureka node . header   replication ""true"" )  ;   }  ",140,3,extra,2,[]
6414,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\transport\JerseyReplicationClient.java,add extra headers,"@ override protected void   (  builder web resource )  {  web resource . header (  peer eureka node . header   replication ""true"" )  ;   }  ",140,3,headers,3,[]
6415,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\transport\JerseyReplicationClient.java,create replication client,"public static  jersey replication client   (  eureka server config config  server codecs server codecs  string service url )  {   string name =  jersey replication client . class . get simple name (  )   +  "": ""  +  service url +  ""apps / : "" ;   eureka jersey client jersey client ;  try  {   string hostname ;  try  {  hostname = new url ( service url )  . get host (  )  ;   }  catch  (   malformedurl exception e )   {  hostname = service url ;   }   string jersey client name = "" discovery -  peer node client - ""  +  hostname ;   eureka jersey client builder client builder = new  eureka jersey client builder (  )  . with client name ( jersey client name )  . with user agent ( "" java -  eureka client -  replication"" )  . with encoder wrapper ( server codecs . get full json codec (  )  )  . with decoder wrapper ( server codecs . get full json codec (  )  )  . with connection timeout ( config . get peer node connect timeout ms (  )  )  . with read timeout ( config . get peer node read timeout ms (  )  )  . with max connections per host ( config . get peer node total connections per host (  )  )  . with max total connections ( config . get peer node total connections (  )  )  . with connection idle timeout ( config . get peer node connection idle timeout seconds (  )  )  ;  if  ( service url . starts with ( ""https: /  / "" )  && ""true"" . equals (  system . get property ( ""com . netflix . eureka . shouldssl connections use system socket factory"" )  )  )   {  client builder . with systemssl configuration (  )  ;   }  jersey client = client builder . build (  )  ;   }  catch  (   throwable e )   {  throw new  runtime exception ( "" cannot  create new  replica  node :""  +  name e )  ;   }   string ip = null ;  try  {  ip =  inet address . get local host (  )  . get host address (  )  ;   }  catch  (   unknown host exception e )   {  logger . warn ( "" cannot find localhost ip"" e )  ;   }   apache http client4 jersey apache client = jersey client . get client (  )  ;  jersey apache client . add filter ( new  dynamicgzip content encoding filter ( config )  )  ;   eureka server identity identity = new  eureka server identity ( ip )  ;  jersey apache client . add filter ( new  eureka identity header filter ( identity )  )  ;  return new  jersey replication client ( jersey client service url )  ;   }  ",2327,3,create,1,[1659]
6416,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\transport\JerseyReplicationClient.java,create replication client,"public static  jersey replication client   (  eureka server config config  server codecs server codecs  string service url )  {   string name =  jersey replication client . class . get simple name (  )   +  "": ""  +  service url +  ""apps / : "" ;   eureka jersey client jersey client ;  try  {   string hostname ;  try  {  hostname = new url ( service url )  . get host (  )  ;   }  catch  (   malformedurl exception e )   {  hostname = service url ;   }   string jersey client name = "" discovery -  peer node client - ""  +  hostname ;   eureka jersey client builder client builder = new  eureka jersey client builder (  )  . with client name ( jersey client name )  . with user agent ( "" java -  eureka client -  replication"" )  . with encoder wrapper ( server codecs . get full json codec (  )  )  . with decoder wrapper ( server codecs . get full json codec (  )  )  . with connection timeout ( config . get peer node connect timeout ms (  )  )  . with read timeout ( config . get peer node read timeout ms (  )  )  . with max connections per host ( config . get peer node total connections per host (  )  )  . with max total connections ( config . get peer node total connections (  )  )  . with connection idle timeout ( config . get peer node connection idle timeout seconds (  )  )  ;  if  ( service url . starts with ( ""https: /  / "" )  && ""true"" . equals (  system . get property ( ""com . netflix . eureka . shouldssl connections use system socket factory"" )  )  )   {  client builder . with systemssl configuration (  )  ;   }  jersey client = client builder . build (  )  ;   }  catch  (   throwable e )   {  throw new  runtime exception ( "" cannot  create new  replica  node :""  +  name e )  ;   }   string ip = null ;  try  {  ip =  inet address . get local host (  )  . get host address (  )  ;   }  catch  (   unknown host exception e )   {  logger . warn ( "" cannot find localhost ip"" e )  ;   }   apache http client4 jersey apache client = jersey client . get client (  )  ;  jersey apache client . add filter ( new  dynamicgzip content encoding filter ( config )  )  ;   eureka server identity identity = new  eureka server identity ( ip )  ;  jersey apache client . add filter ( new  eureka identity header filter ( identity )  )  ;  return new  jersey replication client ( jersey client service url )  ;   }  ",2327,3,replication,2,"[22, 152, 712, 2270]"
6417,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\transport\JerseyReplicationClient.java,create replication client,"public static  jersey replication client   (  eureka server config config  server codecs server codecs  string service url )  {   string name =  jersey replication client . class . get simple name (  )   +  "": ""  +  service url +  ""apps / : "" ;   eureka jersey client jersey client ;  try  {   string hostname ;  try  {  hostname = new url ( service url )  . get host (  )  ;   }  catch  (   malformedurl exception e )   {  hostname = service url ;   }   string jersey client name = "" discovery -  peer node client - ""  +  hostname ;   eureka jersey client builder client builder = new  eureka jersey client builder (  )  . with client name ( jersey client name )  . with user agent ( "" java -  eureka client -  replication"" )  . with encoder wrapper ( server codecs . get full json codec (  )  )  . with decoder wrapper ( server codecs . get full json codec (  )  )  . with connection timeout ( config . get peer node connect timeout ms (  )  )  . with read timeout ( config . get peer node read timeout ms (  )  )  . with max connections per host ( config . get peer node total connections per host (  )  )  . with max total connections ( config . get peer node total connections (  )  )  . with connection idle timeout ( config . get peer node connection idle timeout seconds (  )  )  ;  if  ( service url . starts with ( ""https: /  / "" )  && ""true"" . equals (  system . get property ( ""com . netflix . eureka . shouldssl connections use system socket factory"" )  )  )   {  client builder . with systemssl configuration (  )  ;   }  jersey client = client builder . build (  )  ;   }  catch  (   throwable e )   {  throw new  runtime exception ( "" cannot  create new  replica  node :""  +  name e )  ;   }   string ip = null ;  try  {  ip =  inet address . get local host (  )  . get host address (  )  ;   }  catch  (   unknown host exception e )   {  logger . warn ( "" cannot find localhost ip"" e )  ;   }   apache http client4 jersey apache client = jersey client . get client (  )  ;  jersey apache client . add filter ( new  dynamicgzip content encoding filter ( config )  )  ;   eureka server identity identity = new  eureka server identity ( ip )  ;  jersey apache client . add filter ( new  eureka identity header filter ( identity )  )  ;  return new  jersey replication client ( jersey client service url )  ;   }  ",2327,3,client,3,"[34, 164, 261, 275, 469, 508, 550, 565, 601, 629, 650, 702, 1477, 1543, 1552, 1924, 1946, 1962, 1975, 2005, 2174, 2282, 2298]"
6418,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\transport\JerseyReplicationClient.java,is success,private static boolean   ( int status code )  {  return status code  >  =  200 && status code  <  300 ;   }  ,109,2,is,1,[]
6419,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\transport\JerseyReplicationClient.java,is success,private static boolean   ( int status code )  {  return status code  >  =  200 && status code  <  300 ;   }  ,109,2,success,2,[]
6420,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\transport\JerseyReplicationClient.java,send heart beat,"@ override public  eureka http response <  instance info >    (  string app name  string id  instance info info  instance status overridden status )  {   string url path = ""apps / ""  +  app name  +  ' / ' +  id ;   client response response = null ;  try  ",255,3,send,1,[]
6421,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\transport\JerseyReplicationClient.java,send heart beat,"@ override public  eureka http response <  instance info >    (  string app name  string id  instance info info  instance status overridden status )  {   string url path = ""apps / ""  +  app name  +  ' / ' +  id ;   client response response = null ;  try  ",255,3,heart,2,[]
6422,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\transport\JerseyReplicationClient.java,send heart beat,"@ override public  eureka http response <  instance info >    (  string app name  string id  instance info info  instance status overridden status )  {   string url path = ""apps / ""  +  app name  +  ' / ' +  id ;   client response response = null ;  try  ",255,3,beat,3,[]
6423,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\transport\JerseyReplicationClient.java,shutdown,@ override public void   (  )  {  super . shutdown (  )  ;  jersey client . destroy resources (  )  ;   }  ,107,1,shutdown,1,[42]
6424,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\transport\JerseyReplicationClient.java,status update,"@ override public  eureka http response <  void >    (  string asg name asg status new status )  {   client response response = null ;  try  {   string url path = ""asg / ""  +  asg name  +  "" / status"" ;  response = jersey apache client . resource ( servic",255,2,status,1,"[76, 87, 193]"
6425,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\transport\JerseyReplicationClient.java,status update,"@ override public  eureka http response <  void >    (  string asg name asg status new status )  {   client response response = null ;  try  {   string url path = ""asg / ""  +  asg name  +  "" / status"" ;  response = jersey apache client . resource ( servic",255,2,update,2,[]
6426,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\transport\JerseyReplicationClient.java,submit batch updates,@ override public  eureka http response <  replication list response >    (  replication list replication list )  {   client response response = null ;  try  {  response = jersey apache client . resource ( service url )  . path (  peer eureka node . batch,255,3,submit,1,[]
6427,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\transport\JerseyReplicationClient.java,submit batch updates,@ override public  eureka http response <  replication list response >    (  replication list replication list )  {   client response response = null ;  try  {  response = jersey apache client . resource ( service url )  . path (  peer eureka node . batch,255,3,batch,2,[250]
6428,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\transport\JerseyReplicationClient.java,submit batch updates,@ override public  eureka http response <  replication list response >    (  replication list replication list )  {   client response response = null ;  try  {  response = jersey apache client . resource ( service url )  . path (  peer eureka node . batch,255,3,updates,3,[]
6429,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\TrafficShaper.java, traffic shaper,  ( long congestion retry delay ms long network failure retry ms )  {  this . congestion retry delay ms =  math . min ( max   delay congestion retry delay ms )  ;  this . network failure retry ms =  math . min ( max   delay network failure retry ms )  ;   }  ,259,2,traffic,1,[]
6430,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\TrafficShaper.java, traffic shaper,  ( long congestion retry delay ms long network failure retry ms )  {  this . congestion retry delay ms =  math . min ( max   delay congestion retry delay ms )  ;  this . network failure retry ms =  math . min ( max   delay network failure retry ms )  ;   }  ,259,2,shaper,2,[]
6431,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\TrafficShaper.java,register failure,void   (  processing result processing result )  {  if  ( processing result  =  =   processing result .  congestion )   {  last congestion error =  system . current time millis (  )  ;   }  else if  ( processing result  =  =   processing result .  transient error )   {  last network failure =  system . current time millis (  )  ;   }   }  ,341,2,register,1,[]
6432,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\TrafficShaper.java,register failure,void   (  processing result processing result )  {  if  ( processing result  =  =   processing result .  congestion )   {  last congestion error =  system . current time millis (  )  ;   }  else if  ( processing result  =  =   processing result .  transient error )   {  last network failure =  system . current time millis (  )  ;   }   }  ,341,2,failure,2,[284]
6433,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\TrafficShaper.java,transmission delay,long   (  )  {  if  ( last congestion error  =  =   - 1 && last network failure  =  =   - 1 )   {  return 0 ;   }  long now =  system . current time millis (  )  ;  if  ( last congestion error  !  =   - 1 )   {  long congestion delay = now  -  last congestion error ;  if  ( congestion delay  >  =  0 && congestion delay  <  congestion retry delay ms )   {  return congestion retry delay ms  -  congestion delay ;   }  last congestion error =  - 1 ;   }  if  ( last network failure  !  =   - 1 )   {  long failure delay = now  -  last network failure ;  if  ( failure delay  >  =  0 && failure delay  <  network failure retry ms )   {  return network failure retry ms  -  failure delay ;   }  last network failure =  - 1 ;   }  return 0 ;   }  ,744,2,transmission,1,[]
6434,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\TrafficShaper.java,transmission delay,long   (  )  {  if  ( last congestion error  =  =   - 1 && last network failure  =  =   - 1 )   {  return 0 ;   }  long now =  system . current time millis (  )  ;  if  ( last congestion error  !  =   - 1 )   {  long congestion delay = now  -  last congestion error ;  if  ( congestion delay  >  =  0 && congestion delay  <  congestion retry delay ms )   {  return congestion retry delay ms  -  congestion delay ;   }  last congestion error =  - 1 ;   }  if  ( last network failure  !  =   - 1 )   {  long failure delay = now  -  last network failure ;  if  ( failure delay  >  =  0 && failure delay  <  network failure retry ms )   {  return network failure retry ms  -  failure delay ;   }  last network failure =  - 1 ;   }  return 0 ;   }  ,744,2,delay,2,"[228, 286, 315, 342, 382, 406, 514, 568, 594, 680]"
6435,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\TaskExecutors.java, batch worker runnable,  (  string worker name  atomic boolean is shutdown  task executor metrics metrics  task processor < t >  processor  acceptor executor < id t >  acceptor executor )  {  super ( worker name is shutdown metrics processor acceptor executor )  ;   }  ,247,3,batch,1,[]
6436,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\TaskExecutors.java, batch worker runnable,  (  string worker name  atomic boolean is shutdown  task executor metrics metrics  task processor < t >  processor  acceptor executor < id t >  acceptor executor )  {  super ( worker name is shutdown metrics processor acceptor executor )  ;   }  ,247,3,worker,2,"[12, 177]"
6437,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\TaskExecutors.java, batch worker runnable,  (  string worker name  atomic boolean is shutdown  task executor metrics metrics  task processor < t >  processor  acceptor executor < id t >  acceptor executor )  {  super ( worker name is shutdown metrics processor acceptor executor )  ;   }  ,247,3,runnable,3,[]
6438,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\TaskExecutors.java, single task worker runnable,  (  string worker name  atomic boolean is shutdown  task executor metrics metrics  task processor < t >  processor  acceptor executor < id t >  acceptor executor )  {  super ( worker name is shutdown metrics processor acceptor executor )  ;   }  ,247,4,single,1,[]
6439,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\TaskExecutors.java, single task worker runnable,  (  string worker name  atomic boolean is shutdown  task executor metrics metrics  task processor < t >  processor  acceptor executor < id t >  acceptor executor )  {  super ( worker name is shutdown metrics processor acceptor executor )  ;   }  ,247,4,task,2,"[53, 84]"
6440,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\TaskExecutors.java, single task worker runnable,  (  string worker name  atomic boolean is shutdown  task executor metrics metrics  task processor < t >  processor  acceptor executor < id t >  acceptor executor )  {  super ( worker name is shutdown metrics processor acceptor executor )  ;   }  ,247,4,worker,3,"[12, 177]"
6441,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\TaskExecutors.java, single task worker runnable,  (  string worker name  atomic boolean is shutdown  task executor metrics metrics  task processor < t >  processor  acceptor executor < id t >  acceptor executor )  {  super ( worker name is shutdown metrics processor acceptor executor )  ;   }  ,247,4,runnable,4,[]
6442,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\TaskExecutors.java, task executor metrics,"  (  string id )  {  final double[] percentiles =  { 50 . 0 95 . 0 99 . 0 99 . 5 }  ;  final  stats config stats config = new  stats config .  builder (  )  . with sample size ( 1000 )  . with percentiles ( percentiles )  . with publish std dev ( true )  . build (  )  ;  final  monitor config config =  monitor config . builder ( metric   replication   prefix  +  ""execution time"" )  . build (  )  ;  task waiting time for processing = new  stats timer ( config stats config )  ;  try  {   monitors . register object ( id this )  ;   }  catch  (   throwable e )   {  logger . warn ( "" cannot register servo monitor for this object"" e )  ;   }   }  ",649,3,task,1,[402]
6443,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\TaskExecutors.java, task executor metrics,"  (  string id )  {  final double[] percentiles =  { 50 . 0 95 . 0 99 . 0 99 . 5 }  ;  final  stats config stats config = new  stats config .  builder (  )  . with sample size ( 1000 )  . with percentiles ( percentiles )  . with publish std dev ( true )  . build (  )  ;  final  monitor config config =  monitor config . builder ( metric   replication   prefix  +  ""execution time"" )  . build (  )  ;  task waiting time for processing = new  stats timer ( config stats config )  ;  try  {   monitors . register object ( id this )  ;   }  catch  (   throwable e )   {  logger . warn ( "" cannot register servo monitor for this object"" e )  ;   }   }  ",649,3,executor,2,[]
6444,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\TaskExecutors.java, task executor metrics,"  (  string id )  {  final double[] percentiles =  { 50 . 0 95 . 0 99 . 0 99 . 5 }  ;  final  stats config stats config = new  stats config .  builder (  )  . with sample size ( 1000 )  . with percentiles ( percentiles )  . with publish std dev ( true )  . build (  )  ;  final  monitor config config =  monitor config . builder ( metric   replication   prefix  +  ""execution time"" )  . build (  )  ;  task waiting time for processing = new  stats timer ( config stats config )  ;  try  {   monitors . register object ( id this )  ;   }  catch  (   throwable e )   {  logger . warn ( "" cannot register servo monitor for this object"" e )  ;   }   }  ",649,3,metrics,3,[]
6445,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\TaskExecutors.java, task executors,"  (  worker runnable factory < id t >  worker runnable factory int worker count  atomic boolean is shutdown )  {  this . is shutdown = is shutdown ;  this . worker threads = new  array list <  >  (  )  ;   thread group thread group = new  thread group ( ""eureka task executors"" )  ;  for  ( int i = 0 ;  i  <  worker count ;  i +  +  )   {   worker runnable < id t >  runnable = worker runnable factory . create ( i )  ;   thread worker thread = new  thread ( thread group runnable runnable . get worker name (  )  )  ;  worker threads . add ( worker thread )  ;  worker thread . set daemon ( true )  ;  worker thread . start (  )  ;   }   }  ",643,2,task,1,[262]
6446,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\TaskExecutors.java, task executors,"  (  worker runnable factory < id t >  worker runnable factory int worker count  atomic boolean is shutdown )  {  this . is shutdown = is shutdown ;  this . worker threads = new  array list <  >  (  )  ;   thread group thread group = new  thread group ( ""eureka task executors"" )  ;  for  ( int i = 0 ;  i  <  worker count ;  i +  +  )   {   worker runnable < id t >  runnable = worker runnable factory . create ( i )  ;   thread worker thread = new  thread ( thread group runnable runnable . get worker name (  )  )  ;  worker threads . add ( worker thread )  ;  worker thread . set daemon ( true )  ;  worker thread . start (  )  ;   }   }  ",643,2,executors,2,[267]
6447,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\TaskExecutors.java, worker runnable,  (  string worker name  atomic boolean is shutdown  task executor metrics metrics  task processor < t >  processor  acceptor executor < id t >  task dispatcher )  {  this . worker name = worker name ;  this . is shutdown = is shutdown ;  this . metrics = metrics ;  this . processor = processor ;  this . task dispatcher = task dispatcher ;   }  ,347,2,worker,1,"[12, 174, 188]"
6448,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\TaskExecutors.java, worker runnable,  (  string worker name  atomic boolean is shutdown  task executor metrics metrics  task processor < t >  processor  acceptor executor < id t >  task dispatcher )  {  this . worker name = worker name ;  this . is shutdown = is shutdown ;  this . metrics = metrics ;  this . processor = processor ;  this . task dispatcher = task dispatcher ;   }  ,347,2,runnable,2,[]
6449,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\TaskExecutors.java,batch executors,"static  < id t >  task executors < id t >    ( final  string name int worker count final  task processor < t >  processor final  acceptor executor < id t >  acceptor executor )  {  final  atomic boolean is shutdown = new  atomic boolean (  )  ;  final  task executor metrics metrics = new  task executor metrics ( name )  ;  return new  task executors <  >  ( new  worker runnable factory < id t >  (  )  {  @ override public  worker runnable < id t >  create (  int idx )  {  return new  batch worker runnable <  >  ( "" task batching worker - ""  +  name  +  ' - ' +  idx is shutdown metrics processor acceptor executor )  ;   }   }   worker count is shutdown )  ;   }  ",670,2,batch,1,"[489, 526]"
6450,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\TaskExecutors.java,batch executors,"static  < id t >  task executors < id t >    ( final  string name int worker count final  task processor < t >  processor final  acceptor executor < id t >  acceptor executor )  {  final  atomic boolean is shutdown = new  atomic boolean (  )  ;  final  task executor metrics metrics = new  task executor metrics ( name )  ;  return new  task executors <  >  ( new  worker runnable factory < id t >  (  )  {  @ override public  worker runnable < id t >  create (  int idx )  {  return new  batch worker runnable <  >  ( "" task batching worker - ""  +  name  +  ' - ' +  idx is shutdown metrics processor acceptor executor )  ;   }   }   worker count is shutdown )  ;   }  ",670,2,executors,2,"[23, 342]"
6451,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\StatusInfo.java, builder,private   (  )  {  result = new  status info (  )  ;   }  ,58,1,builder,1,[]
6452,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\StatusInfo.java,add,public  builder   (  string key  string value )  {  if  ( result . application stats  =  =  null )   {  result . application stats = new  hash map <  string  string >  (  )  ;   }  result . application stats . put ( key value )  ;  return this ;   }  ,251,1,add,1,[]
6453,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\StatusInfo.java,build,"public  status info   (  )  {  if  ( result . instance info  =  =  null )   {  throw new  illegal state exception ( ""instance info can not be null"" )  ;   }  result . general stats . put ( ""server - uptime"" get up time (  )  )  ;  result . general stats . put ( ""environment""  configuration manager . get deployment context (  )  . get deployment environment (  )  )  ;   runtime runtime =  runtime . get runtime (  )  ;  int total mem =  ( int )  ( runtime . total memory (  )   /  1048576 )  ;  int free mem =  ( int )  ( runtime . free memory (  )   /  1048576 )  ;  int used percent =  ( int )  (  (  ( float ) total mem  -  free mem )   /   ( total mem )  * 100 . 0 )  ;  result . general stats . put ( ""num - of - cpus""  string . value of ( runtime . available processors (  )  )  )  ;  result . general stats . put ( ""total - avail - memory""  string . value of ( total mem )   +  ""mb"" )  ;  result . general stats . put ( ""current - memory - usage""  string . value of ( total mem  -  free mem )   +  ""mb""  +  ""  ( "" +  used percent +  ""% ) "" )  ;  return result ;   }  ",1076,1,build,1,[]
6454,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\StatusInfo.java,get application stats,public  map <  string  string >    (  )  {  return application stats ;   }  ,76,3,get,1,[]
6455,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\StatusInfo.java,get application stats,public  map <  string  string >    (  )  {  return application stats ;   }  ,76,3,application,2,[51]
6456,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\StatusInfo.java,get application stats,public  map <  string  string >    (  )  {  return application stats ;   }  ,76,3,stats,3,[63]
6457,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\StatusInfo.java,get current time as string,public static  string   (  )  {   simple date format format = new  simple date format ( date   format )  ;  return format . format ( new  date (  )  )  ;   }  ,159,5,get,1,[]
6458,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\StatusInfo.java,get current time as string,public static  string   (  )  {   simple date format format = new  simple date format ( date   format )  ;  return format . format ( new  date (  )  )  ;   }  ,159,5,current,2,[]
6459,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\StatusInfo.java,get current time as string,public static  string   (  )  {   simple date format format = new  simple date format ( date   format )  ;  return format . format ( new  date (  )  )  ;   }  ,159,5,time,3,[]
6460,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\StatusInfo.java,get current time as string,public static  string   (  )  {   simple date format format = new  simple date format ( date   format )  ;  return format . format ( new  date (  )  )  ;   }  ,159,5,as,4,[]
6461,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\StatusInfo.java,get current time as string,public static  string   (  )  {   simple date format format = new  simple date format ( date   format )  ;  return format . format ( new  date (  )  )  ;   }  ,159,5,string,5,[15]
6462,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\StatusInfo.java,get general stats,public  map <  string  string >    (  )  {  return general stats ;   }  ,72,3,get,1,[]
6463,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\StatusInfo.java,get general stats,public  map <  string  string >    (  )  {  return general stats ;   }  ,72,3,general,2,[51]
6464,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\StatusInfo.java,get general stats,public  map <  string  string >    (  )  {  return general stats ;   }  ,72,3,stats,3,[59]
6465,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\StatusInfo.java,get instance info,public  instance info   (  )  {  return instance info ;   }  ,61,3,get,1,[]
6466,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\StatusInfo.java,get instance info,public  instance info   (  )  {  return instance info ;   }  ,61,3,instance,2,"[8, 40]"
6467,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\StatusInfo.java,get instance info,public  instance info   (  )  {  return instance info ;   }  ,61,3,info,3,"[17, 49]"
6468,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\StatusInfo.java,get up time,"public static  string   (  )  {  long diff =  management factory . get runtimemx bean (  )  . get uptime (  )  ;  diff /  = 1000 * 60 ;  long minutes = diff % 60 ;  diff /  = 60 ;  long hours = diff % 24 ;  diff /  = 24 ;  long days = diff ;   string builder buf = new  string builder (  )  ;  if  ( days  =  =  1 )   {  buf . append ( ""1 day "" )  ;   }  else if  ( days  >  1 )   {  buf . append (  long . value of ( days )  . to string (  )  )  . append ( "" days "" )  ;   }   decimal format format = new  decimal format (  )  ;  format . set minimum integer digits ( 2 )  ;  buf . append ( format . format ( hours )  )  . append ( "":"" )  . append ( format . format ( minutes )  )  ;  return buf . to string (  )  ;   }  ",722,3,get,1,"[67, 94]"
6469,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\StatusInfo.java,get up time,"public static  string   (  )  {  long diff =  management factory . get runtimemx bean (  )  . get uptime (  )  ;  diff /  = 1000 * 60 ;  long minutes = diff % 60 ;  diff /  = 60 ;  long hours = diff % 24 ;  diff /  = 24 ;  long days = diff ;   string builder buf = new  string builder (  )  ;  if  ( days  =  =  1 )   {  buf . append ( ""1 day "" )  ;   }  else if  ( days  >  1 )   {  buf . append (  long . value of ( days )  . to string (  )  )  . append ( "" days "" )  ;   }   decimal format format = new  decimal format (  )  ;  format . set minimum integer digits ( 2 )  ;  buf . append ( format . format ( hours )  )  . append ( "":"" )  . append ( format . format ( minutes )  )  ;  return buf . to string (  )  ;   }  ",722,3,up,2,[98]
6470,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\StatusInfo.java,get up time,"public static  string   (  )  {  long diff =  management factory . get runtimemx bean (  )  . get uptime (  )  ;  diff /  = 1000 * 60 ;  long minutes = diff % 60 ;  diff /  = 60 ;  long hours = diff % 24 ;  diff /  = 24 ;  long days = diff ;   string builder buf = new  string builder (  )  ;  if  ( days  =  =  1 )   {  buf . append ( ""1 day "" )  ;   }  else if  ( days  >  1 )   {  buf . append (  long . value of ( days )  . to string (  )  )  . append ( "" days "" )  ;   }   decimal format format = new  decimal format (  )  ;  format . set minimum integer digits ( 2 )  ;  buf . append ( format . format ( hours )  )  . append ( "":"" )  . append ( format . format ( minutes )  )  ;  return buf . to string (  )  ;   }  ",722,3,time,3,"[74, 100]"
6471,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\StatusInfo.java,is healthy,public boolean   (  )  {  return is heathly . boolean value (  )  ;   }  ,73,2,is,1,[33]
6472,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\StatusInfo.java,is healthy,public boolean   (  )  {  return is heathly . boolean value (  )  ;   }  ,73,2,healthy,2,[]
6473,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\StatusInfo.java,new builder,public static  builder   (  )  {  return new  builder (  )  ;   }  ,67,2,new,1,[41]
6474,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\StatusInfo.java,new builder,public static  builder   (  )  {  return new  builder (  )  ;   }  ,67,2,builder,2,"[15, 46]"
6475,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\StatusInfo.java,with instance info,public  builder   (  instance info instance info )  {  result . instance info = instance info ;  return this ;   }  ,116,3,with,1,[]
6476,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\StatusInfo.java,with instance info,public  builder   (  instance info instance info )  {  result . instance info = instance info ;  return this ;   }  ,116,3,instance,2,"[21, 35, 64, 80]"
6477,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\StatusInfo.java,with instance info,public  builder   (  instance info instance info )  {  result . instance info = instance info ;  return this ;   }  ,116,3,info,3,"[30, 44, 73, 89]"
6478,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\MeasuredRate.java, measured rate,"public   ( long sample interval )  {  this . sample interval = sample interval ;  this . timer = new  timer ( "" eureka -  measure rate timer"" true )  ;  this . is active = false ;   }  ",185,2,measured,1,[]
6479,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\MeasuredRate.java, measured rate,"public   ( long sample interval )  {  this . sample interval = sample interval ;  this . timer = new  timer ( "" eureka -  measure rate timer"" true )  ;  this . is active = false ;   }  ",185,2,rate,2,[130]
6480,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\MeasuredRate.java,get count,public long   (  )  {  return last bucket . get (  )  ;   }  ,61,2,get,1,[44]
6481,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\MeasuredRate.java,get count,public long   (  )  {  return last bucket . get (  )  ;   }  ,61,2,count,2,[]
6482,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\MeasuredRate.java,increment,public void   (  )  {  current bucket . increment and get (  )  ;   }  ,71,1,increment,1,[40]
6483,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\MeasuredRate.java,run,"@ override public void   (  )  {  try  {  last bucket . set ( current bucket . get and set ( 0 )  )  ;   }  catch  (   throwable e )   {  logger . error ( "" cannot reset the  measured  rate"" e )  ;   }   }  ",207,1,run,1,[]
6484,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\MeasuredRate.java,start,"public synchronized void   (  )  {  if  (  ! is active )   {  timer . schedule ( new  timer task (  )  {  @ override public void run (  )  {  try  {  last bucket . set ( current bucket . get and set ( 0 )  )  ;   }  catch  (   throwable e )   {  logger . error ( "" cannot reset the  measured  rate"" e )  ;   }   }   }   sample interval sample interval )  ;  is active = true ;   }   }  ",386,1,start,1,[]
6485,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\MeasuredRate.java,stop,public synchronized void   (  )  {  if  ( is active )   {  timer . cancel (  )  ;  is active = false ;   }   }  ,112,1,stop,1,[]
6486,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\EurekaMonitors.java, eureka monitors,"private   (  string name  string description )  {  this . name = name ;  this . description = description ;   data center info dc info =  application info manager . get instance (  )  . get info (  )  . get data center info (  )  ;  if  ( dc info . get name (  )   =  =   name .  amazon )   {  my zone counter name =  (  (  amazon info ) dc info )  . get (  meta data key . availability zone )   +  "" . ""  +  name ;   }  else  {  my zone counter name = ""dcmaster . ""  +  name ;   }   }  ",487,2,eureka,1,[]
6487,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\EurekaMonitors.java, eureka monitors,"private   (  string name  string description )  {  this . name = name ;  this . description = description ;   data center info dc info =  application info manager . get instance (  )  . get info (  )  . get data center info (  )  ;  if  ( dc info . get name (  )   =  =   name .  amazon )   {  my zone counter name =  (  (  amazon info ) dc info )  . get (  meta data key . availability zone )   +  "" . ""  +  name ;   }  else  {  my zone counter name = ""dcmaster . ""  +  name ;   }   }  ",487,2,monitors,2,[]
6488,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\EurekaMonitors.java,get count,public long   (  )  {  return counter . get (  )  ;   }  ,57,2,get,1,[40]
6489,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\EurekaMonitors.java,get count,public long   (  )  {  return counter . get (  )  ;   }  ,57,2,count,2,[30]
6490,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\EurekaMonitors.java,get description,public  string   (  )  {  return description ;   }  ,52,2,get,1,[]
6491,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\EurekaMonitors.java,get description,public  string   (  )  {  return description ;   }  ,52,2,description,2,[33]
6492,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\EurekaMonitors.java,get name,public  string   (  )  {  return name ;   }  ,45,2,get,1,[]
6493,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\EurekaMonitors.java,get name,public  string   (  )  {  return name ;   }  ,45,2,name,2,[33]
6494,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\EurekaMonitors.java,get zone specific count,public long   (  )  {  return my zone counter . get (  )  ;   }  ,65,4,get,1,[48]
6495,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\EurekaMonitors.java,get zone specific count,public long   (  )  {  return my zone counter . get (  )  ;   }  ,65,4,zone,2,[33]
6496,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\EurekaMonitors.java,get zone specific count,public long   (  )  {  return my zone counter . get (  )  ;   }  ,65,4,specific,3,[]
6497,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\EurekaMonitors.java,get zone specific count,public long   (  )  {  return my zone counter . get (  )  ;   }  ,65,4,count,4,[38]
6498,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\EurekaMonitors.java,get zone specific name,public  string   (  )  {  return my zone counter name ;   }  ,61,4,get,1,[]
6499,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\EurekaMonitors.java,get zone specific name,public  string   (  )  {  return my zone counter name ;   }  ,61,4,zone,2,[36]
6500,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\EurekaMonitors.java,get zone specific name,public  string   (  )  {  return my zone counter name ;   }  ,61,4,specific,3,[]
6501,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\EurekaMonitors.java,get zone specific name,public  string   (  )  {  return my zone counter name ;   }  ,61,4,name,4,[49]
6502,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\EurekaMonitors.java,increment,public void   ( boolean is replication )  {  counter . increment and get (  )  ;  if  (  ! is replication )   {  my zone counter . increment and get (  )  ;   }   }  ,166,1,increment,1,"[55, 131]"
6503,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\EurekaMonitors.java,register all stats,public static void   (  )  {  for  (   eureka monitors c :  eureka monitors . values (  )  )   {   monitors . register object ( c . get name (  )  c )  ;   }   }  ,163,3,register,1,[110]
6504,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\EurekaMonitors.java,register all stats,public static void   (  )  {  for  (   eureka monitors c :  eureka monitors . values (  )  )   {   monitors . register object ( c . get name (  )  c )  ;   }   }  ,163,3,all,2,[]
6505,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\EurekaMonitors.java,register all stats,public static void   (  )  {  for  (   eureka monitors c :  eureka monitors . values (  )  )   {   monitors . register object ( c . get name (  )  c )  ;   }   }  ,163,3,stats,3,[]
6506,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\EurekaMonitors.java,shutdown,public static void   (  )  {  for  (   eureka monitors c :  eureka monitors . values (  )  )   {   default monitor registry . get instance (  )  . unregister (  monitors . new object monitor ( c . get name (  )  c )  )  ;   }   }  ,231,1,shutdown,1,[]
6507,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\StatusUtil.java, status util,public   (  eureka server context server )  {  this . my app name = server . get application info manager (  )  . get info (  )  . get app name (  )  ;  this . registry = server . get registry (  )  ;  this . peer eureka nodes = server . get peer eureka nodes (  )  ;  this . instance info = server . get application info manager (  )  . get info (  )  ;   }  ,360,2,status,1,[]
6508,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\StatusUtil.java, status util,public   (  eureka server context server )  {  this . my app name = server . get application info manager (  )  . get info (  )  . get app name (  )  ;  this . registry = server . get registry (  )  ;  this . peer eureka nodes = server . get peer eureka nodes (  )  ;  this . instance info = server . get application info manager (  )  . get info (  )  ;   }  ,360,2,util,2,[]
6509,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\StatusUtil.java,get status info,"public  status info   (  )  {   status info .  builder builder =  status info .  builder . new builder (  )  ;  int up replicas count = 0 ;   string builder up replicas = new  string builder (  )  ;   string builder down replicas = new  string builder (  )  ;   string builder replica host names = new  string builder (  )  ;  for  (   peer eureka node node : peer eureka nodes . get peer eureka nodes (  )  )   {  if  ( replica host names . length (  )   >  0 )   {  replica host names . append ( ""  "" )  ;   }  replica host names . append ( node . get service url (  )  )  ;  if  ( is replica available ( node . get service url (  )  )  )   {  up replicas . append ( node . get service url (  )  )  . append ( ' ' )  ;  up replicas count +  +  ;   }  else  {  down replicas . append ( node . get service url (  )  )  . append ( ' ' )  ;   }   }  builder . add ( ""registered - replicas"" replica host names . to string (  )  )  ;  builder . add ( ""available - replicas"" up replicas . to string (  )  )  ;  builder . add ( ""unavailable - replicas"" down replicas . to string (  )  )  ;  if  ( peer eureka nodes . get min number of available peers (  )   >   - 1 )   {  builder . is healthy ( up replicas count  >  =  peer eureka nodes . get min number of available peers (  )  )  ;   }  builder . with instance info ( this . instance info )  ;  return builder . build (  )  ;   }  ",1379,3,get,1,"[380, 550, 614, 676, 794, 1111, 1235]"
6510,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\StatusUtil.java,get status info,"public  status info   (  )  {   status info .  builder builder =  status info .  builder . new builder (  )  ;  int up replicas count = 0 ;   string builder up replicas = new  string builder (  )  ;   string builder down replicas = new  string builder (  )  ;   string builder replica host names = new  string builder (  )  ;  for  (   peer eureka node node : peer eureka nodes . get peer eureka nodes (  )  )   {  if  ( replica host names . length (  )   >  0 )   {  replica host names . append ( ""  "" )  ;   }  replica host names . append ( node . get service url (  )  )  ;  if  ( is replica available ( node . get service url (  )  )  )   {  up replicas . append ( node . get service url (  )  )  . append ( ' ' )  ;  up replicas count +  +  ;   }  else  {  down replicas . append ( node . get service url (  )  )  . append ( ' ' )  ;   }   }  builder . add ( ""registered - replicas"" replica host names . to string (  )  )  ;  builder . add ( ""available - replicas"" up replicas . to string (  )  )  ;  builder . add ( ""unavailable - replicas"" down replicas . to string (  )  )  ;  if  ( peer eureka nodes . get min number of available peers (  )   >   - 1 )   {  builder . is healthy ( up replicas count  >  =  peer eureka nodes . get min number of available peers (  )  )  ;   }  builder . with instance info ( this . instance info )  ;  return builder . build (  )  ;   }  ",1379,3,status,2,"[8, 32, 66]"
6511,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\StatusUtil.java,get status info,"public  status info   (  )  {   status info .  builder builder =  status info .  builder . new builder (  )  ;  int up replicas count = 0 ;   string builder up replicas = new  string builder (  )  ;   string builder down replicas = new  string builder (  )  ;   string builder replica host names = new  string builder (  )  ;  for  (   peer eureka node node : peer eureka nodes . get peer eureka nodes (  )  )   {  if  ( replica host names . length (  )   >  0 )   {  replica host names . append ( ""  "" )  ;   }  replica host names . append ( node . get service url (  )  )  ;  if  ( is replica available ( node . get service url (  )  )  )   {  up replicas . append ( node . get service url (  )  )  . append ( ' ' )  ;  up replicas count +  +  ;   }  else  {  down replicas . append ( node . get service url (  )  )  . append ( ' ' )  ;   }   }  builder . add ( ""registered - replicas"" replica host names . to string (  )  )  ;  builder . add ( ""available - replicas"" up replicas . to string (  )  )  ;  builder . add ( ""unavailable - replicas"" down replicas . to string (  )  )  ;  if  ( peer eureka nodes . get min number of available peers (  )   >   - 1 )   {  builder . is healthy ( up replicas count  >  =  peer eureka nodes . get min number of available peers (  )  )  ;   }  builder . with instance info ( this . instance info )  ;  return builder . build (  )  ;   }  ",1379,3,info,3,"[15, 39, 73, 1309, 1332]"
6512,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\StatusUtil.java,is replica available,"private boolean   (  string url )  {  try  {   application app = registry . get application ( my app name false )  ;  if  ( app  =  =  null )   {  return false ;   }  for  (   instance info info : app . get instances (  )  )   {  if  ( peer eureka nodes . is instanceurl ( url info )  )   {  return true ;   }   }   }  catch  (   throwable e )   {  logger . error ( "" could not determine if the replica is available "" e )  ;   }  return false ;   }  ",450,3,is,1,"[68, 256, 403]"
6513,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\StatusUtil.java,is replica available,"private boolean   (  string url )  {  try  {   application app = registry . get application ( my app name false )  ;  if  ( app  =  =  null )   {  return false ;   }  for  (   instance info info : app . get instances (  )  )   {  if  ( peer eureka nodes . is instanceurl ( url info )  )   {  return true ;   }   }   }  catch  (   throwable e )   {  logger . error ( "" could not determine if the replica is available "" e )  ;   }  return false ;   }  ",450,3,replica,2,[395]
6514,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\StatusUtil.java,is replica available,"private boolean   (  string url )  {  try  {   application app = registry . get application ( my app name false )  ;  if  ( app  =  =  null )   {  return false ;   }  for  (   instance info info : app . get instances (  )  )   {  if  ( peer eureka nodes . is instanceurl ( url info )  )   {  return true ;   }   }   }  catch  (   throwable e )   {  logger . error ( "" could not determine if the replica is available "" e )  ;   }  return false ;   }  ",450,3,available,3,[406]
6515,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\Version.java,to enum,public static  version   (  string v )  {  for  (   version version :  version . values (  )  )   {  if  ( version . name (  )  . equals ignore case ( v )  )   {  return version ;   }   }  return v2 ;   }  ,206,2,to,1,[]
6516,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\Version.java,to enum,public static  version   (  string v )  {  for  (   version version :  version . values (  )  )   {  if  ( version . name (  )  . equals ignore case ( v )  )   {  return version ;   }   }  return v2 ;   }  ,206,2,enum,2,[]
6517,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\V1AwareInstanceInfoConverter.java,get status,@ override public  string   (  instance info info )  {   version version =  current request version . get (  )  ;  if  ( version  =  =  null || version  =  =   version . v1 )   {   instance status status = info . get status (  )  ;  switch  ( status )   {,255,2,get,1,"[102, 213]"
6518,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\V1AwareInstanceInfoConverter.java,get status,@ override public  string   (  instance info info )  {   version version =  current request version . get (  )  ;  if  ( version  =  =  null || version  =  =   version . v1 )   {   instance status status = info . get status (  )  ;  switch  ( status )   {,255,2,status,2,"[190, 197, 217, 243]"
6519,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\AbstractTester.java, test peer aware instance registry,public   (  eureka server config server config  eureka client config client config  server codecs server codecs  eureka client eureka client )  {  super ( server config client config server codecs eureka client )  ;   }  ,221,5,test,1,[]
6520,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\AbstractTester.java, test peer aware instance registry,public   (  eureka server config server config  eureka client config client config  server codecs server codecs  eureka client eureka client )  {  super ( server config client config server codecs eureka client )  ;   }  ,221,5,peer,2,[]
6521,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\AbstractTester.java, test peer aware instance registry,public   (  eureka server config server config  eureka client config client config  server codecs server codecs  eureka client eureka client )  {  super ( server config client config server codecs eureka client )  ;   }  ,221,5,aware,3,[]
6522,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\AbstractTester.java, test peer aware instance registry,public   (  eureka server config server config  eureka client config client config  server codecs server codecs  eureka client eureka client )  {  super ( server config client config server codecs eureka client )  ;   }  ,221,5,instance,4,[]
6523,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\AbstractTester.java, test peer aware instance registry,public   (  eureka server config server config  eureka client config client config  server codecs server codecs  eureka client eureka client )  {  super ( server config client config server codecs eureka client )  ;   }  ,221,5,registry,5,[]
6524,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\AbstractTester.java,create local instance,protected static  instance info   (  string hostname )  {  return create local instance with status ( hostname  instance info .  instance status . up )  ;   }  ,160,3,create,1,[66]
6525,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\AbstractTester.java,create local instance,protected static  instance info   (  string hostname )  {  return create local instance with status ( hostname  instance info .  instance status . up )  ;   }  ,160,3,local,2,[73]
6526,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\AbstractTester.java,create local instance,protected static  instance info   (  string hostname )  {  return create local instance with status ( hostname  instance info .  instance status . up )  ;   }  ,160,3,instance,3,"[18, 79, 112, 129]"
6527,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\AbstractTester.java,create local instance with status,"private static  instance info   (  string hostname  instance info .  instance status status )  {   instance info .  builder instance builder =  instance info .  builder . new builder (  )  ;  instance builder . set instance id ( ""foo"" )  ;  instance builder . set app name ( local   region   app   name )  ;  instance builder . set host name ( hostname )  ;  instance builder . setip addr ( ""10 . 10 . 101 . 1"" )  ;  instance builder . set data center info ( get amazon info ( null hostname )  )  ;  instance builder . set lease info (  lease info .  builder . new builder (  )  . build (  )  )  ;  instance builder . set status ( status )  ;  return instance builder . build (  )  ;   }  ",689,5,create,1,[]
6528,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\AbstractTester.java,create local instance with status,"private static  instance info   (  string hostname  instance info .  instance status status )  {   instance info .  builder instance builder =  instance info .  builder . new builder (  )  ;  instance builder . set instance id ( ""foo"" )  ;  instance builder . set app name ( local   region   app   name )  ;  instance builder . set host name ( hostname )  ;  instance builder . setip addr ( ""10 . 10 . 101 . 1"" )  ;  instance builder . set data center info ( get amazon info ( null hostname )  )  ;  instance builder . set lease info (  lease info .  builder . new builder (  )  . build (  )  )  ;  instance builder . set status ( status )  ;  return instance builder . build (  )  ;   }  ",689,5,local,2,[275]
6529,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\AbstractTester.java,create local instance with status,"private static  instance info   (  string hostname  instance info .  instance status status )  {   instance info .  builder instance builder =  instance info .  builder . new builder (  )  ;  instance builder . set instance id ( ""foo"" )  ;  instance builder . set app name ( local   region   app   name )  ;  instance builder . set host name ( hostname )  ;  instance builder . setip addr ( ""10 . 10 . 101 . 1"" )  ;  instance builder . set data center info ( get amazon info ( null hostname )  )  ;  instance builder . set lease info (  lease info .  builder . new builder (  )  . build (  )  )  ;  instance builder . set status ( status )  ;  return instance builder . build (  )  ;   }  ",689,5,instance,3,"[16, 52, 69, 99, 124, 144, 192, 215, 241, 309, 359, 417, 500, 599, 651]"
6530,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\AbstractTester.java,create local instance with status,"private static  instance info   (  string hostname  instance info .  instance status status )  {   instance info .  builder instance builder =  instance info .  builder . new builder (  )  ;  instance builder . set instance id ( ""foo"" )  ;  instance builder . set app name ( local   region   app   name )  ;  instance builder . set host name ( hostname )  ;  instance builder . setip addr ( ""10 . 10 . 101 . 1"" )  ;  instance builder . set data center info ( get amazon info ( null hostname )  )  ;  instance builder . set lease info (  lease info .  builder . new builder (  )  . build (  )  )  ;  instance builder . set status ( status )  ;  return instance builder . build (  )  ;   }  ",689,5,with,4,[]
6531,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\AbstractTester.java,create local instance with status,"private static  instance info   (  string hostname  instance info .  instance status status )  {   instance info .  builder instance builder =  instance info .  builder . new builder (  )  ;  instance builder . set instance id ( ""foo"" )  ;  instance builder . set app name ( local   region   app   name )  ;  instance builder . set host name ( hostname )  ;  instance builder . setip addr ( ""10 . 10 . 101 . 1"" )  ;  instance builder . set data center info ( get amazon info ( null hostname )  )  ;  instance builder . set lease info (  lease info .  builder . new builder (  )  . build (  )  )  ;  instance builder . set status ( status )  ;  return instance builder . build (  )  ;   }  ",689,5,status,5,"[78, 85, 622, 631]"
6532,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\AbstractTester.java,create local out of service instance,protected static  instance info   (  string hostname )  {  return create local instance with status ( hostname  instance info .  instance status . out   of   service )  ;   }  ,176,6,create,1,[66]
6533,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\AbstractTester.java,create local out of service instance,protected static  instance info   (  string hostname )  {  return create local instance with status ( hostname  instance info .  instance status . out   of   service )  ;   }  ,176,6,local,2,[73]
6534,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\AbstractTester.java,create local out of service instance,protected static  instance info   (  string hostname )  {  return create local instance with status ( hostname  instance info .  instance status . out   of   service )  ;   }  ,176,6,out,3,[147]
6535,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\AbstractTester.java,create local out of service instance,protected static  instance info   (  string hostname )  {  return create local instance with status ( hostname  instance info .  instance status . out   of   service )  ;   }  ,176,6,of,4,[153]
6536,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\AbstractTester.java,create local out of service instance,protected static  instance info   (  string hostname )  {  return create local instance with status ( hostname  instance info .  instance status . out   of   service )  ;   }  ,176,6,service,5,[158]
6537,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\AbstractTester.java,create local out of service instance,protected static  instance info   (  string hostname )  {  return create local instance with status ( hostname  instance info .  instance status . out   of   service )  ;   }  ,176,6,instance,6,"[18, 79, 112, 129]"
6538,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\AbstractTester.java,create local starting instance,protected static  instance info   (  string hostname )  {  return create local instance with status ( hostname  instance info .  instance status . starting )  ;   }  ,166,4,create,1,[66]
6539,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\AbstractTester.java,create local starting instance,protected static  instance info   (  string hostname )  {  return create local instance with status ( hostname  instance info .  instance status . starting )  ;   }  ,166,4,local,2,[73]
6540,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\AbstractTester.java,create local starting instance,protected static  instance info   (  string hostname )  {  return create local instance with status ( hostname  instance info .  instance status . starting )  ;   }  ,166,4,starting,3,[147]
6541,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\AbstractTester.java,create local starting instance,protected static  instance info   (  string hostname )  {  return create local instance with status ( hostname  instance info .  instance status . starting )  ;   }  ,166,4,instance,4,"[18, 79, 112, 129]"
6542,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\AbstractTester.java,create remote apps,private static  application   (  )  {   application myapp = new  application ( remote   region   app   name )  ;   instance info instance info = create remote instance ( remote   region   instance   1   hostname )  ;  myapp . add instance ( instance info )  ;  return myapp ;   }  ,281,3,create,1,[145]
6543,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\AbstractTester.java,create remote apps,private static  application   (  )  {   application myapp = new  application ( remote   region   app   name )  ;   instance info instance info = create remote instance ( remote   region   instance   1   hostname )  ;  myapp . add instance ( instance info )  ;  return myapp ;   }  ,281,3,remote,2,"[79, 152, 170]"
6544,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\AbstractTester.java,create remote apps,private static  application   (  )  {   application myapp = new  application ( remote   region   app   name )  ;   instance info instance info = create remote instance ( remote   region   instance   1   hostname )  ;  myapp . add instance ( instance info )  ;  return myapp ;   }  ,281,3,apps,3,[]
6545,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\AbstractTester.java,create remote apps delta,private static  application   (  )  {   application myapp = new  application ( remote   region   app   name )  ;   instance info instance info = create remote instance ( remote   region   instance   1   hostname )  ;  myapp . add instance ( instance info )  ;  return myapp ;   }  ,281,4,create,1,[145]
6546,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\AbstractTester.java,create remote apps delta,private static  application   (  )  {   application myapp = new  application ( remote   region   app   name )  ;   instance info instance info = create remote instance ( remote   region   instance   1   hostname )  ;  myapp . add instance ( instance info )  ;  return myapp ;   }  ,281,4,remote,2,"[79, 152, 170]"
6547,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\AbstractTester.java,create remote apps delta,private static  application   (  )  {   application myapp = new  application ( remote   region   app   name )  ;   instance info instance info = create remote instance ( remote   region   instance   1   hostname )  ;  myapp . add instance ( instance info )  ;  return myapp ;   }  ,281,4,apps,3,[]
6548,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\AbstractTester.java,create remote apps delta,private static  application   (  )  {   application myapp = new  application ( remote   region   app   name )  ;   instance info instance info = create remote instance ( remote   region   instance   1   hostname )  ;  myapp . add instance ( instance info )  ;  return myapp ;   }  ,281,4,delta,4,[]
6549,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\AbstractTester.java,create remote instance,"protected static  instance info   (  string instance host name )  {   instance info .  builder instance builder =  instance info .  builder . new builder (  )  ;  instance builder . set app name ( remote   region   app   name )  ;  instance builder . set host name ( instance host name )  ;  instance builder . setip addr ( ""10 . 10 . 101 . 1"" )  ;  instance builder . set data center info ( get amazon info ( remote   zone instance host name )  )  ;  instance builder . set lease info (  lease info .  builder . new builder (  )  . build (  )  )  ;  return instance builder . build (  )  ;   }  ",596,3,create,1,[]
6550,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\AbstractTester.java,create remote instance,"protected static  instance info   (  string instance host name )  {   instance info .  builder instance builder =  instance info .  builder . new builder (  )  ;  instance builder . set app name ( remote   region   app   name )  ;  instance builder . set host name ( instance host name )  ;  instance builder . setip addr ( ""10 . 10 . 101 . 1"" )  ;  instance builder . set data center info ( get amazon info ( remote   zone instance host name )  )  ;  instance builder . set lease info (  lease info .  builder . new builder (  )  . build (  )  )  ;  return instance builder . build (  )  ;   }  ",596,3,remote,2,"[197, 410]"
6551,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\AbstractTester.java,create remote instance,"protected static  instance info   (  string instance host name )  {   instance info .  builder instance builder =  instance info .  builder . new builder (  )  ;  instance builder . set app name ( remote   region   app   name )  ;  instance builder . set host name ( instance host name )  ;  instance builder . setip addr ( ""10 . 10 . 101 . 1"" )  ;  instance builder . set data center info ( get amazon info ( remote   zone instance host name )  )  ;  instance builder . set lease info (  lease info .  builder . new builder (  )  . build (  )  )  ;  return instance builder . build (  )  ;   }  ",596,3,instance,3,"[18, 44, 70, 95, 115, 163, 232, 267, 292, 350, 424, 452, 558]"
6552,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\AbstractTester.java,get amazon info,"private static  amazon info   ( @ nullable  string availability zone  string instance host name )  {   amazon info .  builder az builder =  amazon info .  builder . new builder (  )  ;  az builder . add metadata (  amazon info .  meta data key . availability zone null  =  =  availability zone  ?  ""us - east - 1a"" : availability zone )  ;  az builder . add metadata (  amazon info .  meta data key . instance id instance host name )  ;  az builder . add metadata (  amazon info .  meta data key . ami id ""xxx"" )  ;  az builder . add metadata (  amazon info .  meta data key . instance type ""xxx"" )  ;  az builder . add metadata (  amazon info .  meta data key . local ipv4 ""xxx"" )  ;  az builder . add metadata (  amazon info .  meta data key . public ipv4 ""xxx"" )  ;  az builder . add metadata (  amazon info .  meta data key . public hostname instance host name )  ;  return az builder . build (  )  ;   }  ",910,3,get,1,[]
6553,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\AbstractTester.java,get amazon info,"private static  amazon info   ( @ nullable  string availability zone  string instance host name )  {   amazon info .  builder az builder =  amazon info .  builder . new builder (  )  ;  az builder . add metadata (  amazon info .  meta data key . availability zone null  =  =  availability zone  ?  ""us - east - 1a"" : availability zone )  ;  az builder . add metadata (  amazon info .  meta data key . instance id instance host name )  ;  az builder . add metadata (  amazon info .  meta data key . ami id ""xxx"" )  ;  az builder . add metadata (  amazon info .  meta data key . instance type ""xxx"" )  ;  az builder . add metadata (  amazon info .  meta data key . local ipv4 ""xxx"" )  ;  az builder . add metadata (  amazon info .  meta data key . public ipv4 ""xxx"" )  ;  az builder . add metadata (  amazon info .  meta data key . public hostname instance host name )  ;  return az builder . build (  )  ;   }  ",910,3,amazon,2,"[16, 103, 140, 215, 370, 467, 546, 632, 715, 799]"
6554,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\AbstractTester.java,get amazon info,"private static  amazon info   ( @ nullable  string availability zone  string instance host name )  {   amazon info .  builder az builder =  amazon info .  builder . new builder (  )  ;  az builder . add metadata (  amazon info .  meta data key . availability zone null  =  =  availability zone  ?  ""us - east - 1a"" : availability zone )  ;  az builder . add metadata (  amazon info .  meta data key . instance id instance host name )  ;  az builder . add metadata (  amazon info .  meta data key . ami id ""xxx"" )  ;  az builder . add metadata (  amazon info .  meta data key . instance type ""xxx"" )  ;  az builder . add metadata (  amazon info .  meta data key . local ipv4 ""xxx"" )  ;  az builder . add metadata (  amazon info .  meta data key . public ipv4 ""xxx"" )  ;  az builder . add metadata (  amazon info .  meta data key . public hostname instance host name )  ;  return az builder . build (  )  ;   }  ",910,3,info,3,"[23, 110, 147, 222, 377, 474, 553, 639, 722, 806]"
6555,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\AbstractTester.java,get data center info,protected  data center info   (  )  {  return new  data center info (  )  {  @ override public  name get name (  )  {  return  name .  my own ;   }   }   ;   }  ,161,4,get,1,[101]
6556,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\AbstractTester.java,get data center info,protected  data center info   (  )  {  return new  data center info (  )  {  @ override public  name get name (  )  {  return  name .  my own ;   }   }   ;   }  ,161,4,data,2,"[11, 51]"
6557,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\AbstractTester.java,get data center info,protected  data center info   (  )  {  return new  data center info (  )  {  @ override public  name get name (  )  {  return  name .  my own ;   }   }   ;   }  ,161,4,center,3,"[16, 56]"
6558,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\AbstractTester.java,get data center info,protected  data center info   (  )  {  return new  data center info (  )  {  @ override public  name get name (  )  {  return  name .  my own ;   }   }   ;   }  ,161,4,info,4,"[23, 63]"
6559,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\AbstractTester.java,get name,@ override public  name   (  )  {  return  name .  my own ;   }  ,65,2,get,1,[]
6560,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\AbstractTester.java,get name,@ override public  name   (  )  {  return  name .  my own ;   }  ,65,2,name,2,"[19, 43]"
6561,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\AbstractTester.java,get next server from eureka,@ override public  instance info   (  string virtual hostname boolean secure )  {  return null ;   }  ,102,5,get,1,[]
6562,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\AbstractTester.java,get next server from eureka,@ override public  instance info   (  string virtual hostname boolean secure )  {  return null ;   }  ,102,5,next,2,[]
6563,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\AbstractTester.java,get next server from eureka,@ override public  instance info   (  string virtual hostname boolean secure )  {  return null ;   }  ,102,5,server,3,[]
6564,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\AbstractTester.java,get next server from eureka,@ override public  instance info   (  string virtual hostname boolean secure )  {  return null ;   }  ,102,5,from,4,[]
6565,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\AbstractTester.java,get next server from eureka,@ override public  instance info   (  string virtual hostname boolean secure )  {  return null ;   }  ,102,5,eureka,5,[]
6566,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\AbstractTester.java,is lease expiration enabled,@ override public boolean   (  )  {  return false ;   }  ,57,4,is,1,[]
6567,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\AbstractTester.java,is lease expiration enabled,@ override public boolean   (  )  {  return false ;   }  ,57,4,lease,2,[]
6568,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\AbstractTester.java,is lease expiration enabled,@ override public boolean   (  )  {  return false ;   }  ,57,4,expiration,3,[]
6569,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\AbstractTester.java,is lease expiration enabled,@ override public boolean   (  )  {  return false ;   }  ,57,4,enabled,4,[]
6570,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\AbstractTester.java,make peer aware instance registry,protected  peer aware instance registry impl   (  eureka server config server config  eureka client config client config  server codecs server codecs  eureka client eureka client )  {  return new  test peer aware instance registry ( server config client config server codecs eureka client )  ;   }  ,299,5,make,1,[]
6571,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\AbstractTester.java,make peer aware instance registry,protected  peer aware instance registry impl   (  eureka server config server config  eureka client config client config  server codecs server codecs  eureka client eureka client )  {  return new  test peer aware instance registry ( server config client config server codecs eureka client )  ;   }  ,299,5,peer,2,"[11, 202]"
6572,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\AbstractTester.java,make peer aware instance registry,protected  peer aware instance registry impl   (  eureka server config server config  eureka client config client config  server codecs server codecs  eureka client eureka client )  {  return new  test peer aware instance registry ( server config client config server codecs eureka client )  ;   }  ,299,5,aware,3,"[16, 207]"
6573,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\AbstractTester.java,make peer aware instance registry,protected  peer aware instance registry impl   (  eureka server config server config  eureka client config client config  server codecs server codecs  eureka client eureka client )  {  return new  test peer aware instance registry ( server config client config server codecs eureka client )  ;   }  ,299,5,instance,4,"[22, 213]"
6574,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\AbstractTester.java,make peer aware instance registry,protected  peer aware instance registry impl   (  eureka server config server config  eureka client config client config  server codecs server codecs  eureka client eureka client )  {  return new  test peer aware instance registry ( server config client config server codecs eureka client )  ;   }  ,299,5,registry,5,"[31, 222]"
6575,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\AbstractTester.java,new mock remote server,protected  mock remote eureka server   (  )  {  return new  mock remote eureka server ( 0 remote region apps remote region apps delta )  ;   }  ,144,4,new,1,[55]
6576,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\AbstractTester.java,new mock remote server,protected  mock remote eureka server   (  )  {  return new  mock remote eureka server ( 0 remote region apps remote region apps delta )  ;   }  ,144,4,mock,2,"[11, 60]"
6577,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\AbstractTester.java,new mock remote server,protected  mock remote eureka server   (  )  {  return new  mock remote eureka server ( 0 remote region apps remote region apps delta )  ;   }  ,144,4,remote,3,"[16, 65, 90, 109]"
6578,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\AbstractTester.java,new mock remote server,protected  mock remote eureka server   (  )  {  return new  mock remote eureka server ( 0 remote region apps remote region apps delta )  ;   }  ,144,4,server,4,"[30, 79]"
6579,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\AbstractTester.java,populate remote registry at startup,private void   (  )  {   application myapp = create remote apps (  )  ;   application myapp delta = create remote apps delta (  )  ;  remote region apps . put ( remote   region   app   name myapp )  ;  remote region apps delta . put ( remote   region   app   name myapp delta )  ;   }  ,286,5,populate,1,[]
6580,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\AbstractTester.java,populate remote registry at startup,private void   (  )  {   application myapp = create remote apps (  )  ;   application myapp delta = create remote apps delta (  )  ;  remote region apps . put ( remote   region   app   name myapp )  ;  remote region apps delta . put ( remote   region   app   name myapp delta )  ;   }  ,286,5,remote,2,"[52, 107, 134, 161, 202, 235]"
6581,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\AbstractTester.java,populate remote registry at startup,private void   (  )  {   application myapp = create remote apps (  )  ;   application myapp delta = create remote apps delta (  )  ;  remote region apps . put ( remote   region   app   name myapp )  ;  remote region apps delta . put ( remote   region   app   name myapp delta )  ;   }  ,286,5,registry,3,[]
6582,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\AbstractTester.java,populate remote registry at startup,private void   (  )  {   application myapp = create remote apps (  )  ;   application myapp delta = create remote apps delta (  )  ;  remote region apps . put ( remote   region   app   name myapp )  ;  remote region apps delta . put ( remote   region   app   name myapp delta )  ;   }  ,286,5,at,4,"[4, 31, 48, 80, 103]"
6583,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\AbstractTester.java,populate remote registry at startup,private void   (  )  {   application myapp = create remote apps (  )  ;   application myapp delta = create remote apps delta (  )  ;  remote region apps . put ( remote   region   app   name myapp )  ;  remote region apps delta . put ( remote   region   app   name myapp delta )  ;   }  ,286,5,startup,5,[]
6584,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\AbstractTester.java,register instance locally,protected void   (  instance info remote instance )  {  registry . register ( remote instance 10000000 false )  ;  registered apps . add ( new  pair <  string  string >  ( local   region   app   name local   region   app   name )  )  ;   }  ,241,3,register,1,"[67, 115]"
6585,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\AbstractTester.java,register instance locally,protected void   (  instance info remote instance )  {  registry . register ( remote instance 10000000 false )  ;  registered apps . add ( new  pair <  string  string >  ( local   region   app   name local   region   app   name )  )  ;   }  ,241,3,instance,2,"[20, 41, 85]"
6586,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\AbstractTester.java,register instance locally,protected void   (  instance info remote instance )  {  registry . register ( remote instance 10000000 false )  ;  registered apps . add ( new  pair <  string  string >  ( local   region   app   name local   region   app   name )  )  ;   }  ,241,3,locally,3,[]
6587,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\AbstractTester.java,set up,"@ before public void   (  )  throws  exception  {   configuration manager . get config instance (  )  . clear property ( ""eureka . remote region . global . app white list"" )  ;   configuration manager . get config instance (  )  . set property ( ""eureka .",255,2,set,1,[231]
6588,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\AbstractTester.java,set up,"@ before public void   (  )  throws  exception  {   configuration manager . get config instance (  )  . clear property ( ""eureka . remote region . global . app white list"" )  ;   configuration manager . get config instance (  )  . set property ( ""eureka .",255,2,up,2,[]
6589,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\AbstractTester.java,tear down,"@ after public void   (  )  throws  exception  {  for  (   pair <  string  string >  registered app : registered apps )   {   system . out . println ( "" canceling application: ""  +  registered app . first (  )   +  "" from local registry . "" )  ;  registry",255,2,tear,1,[]
6590,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\AbstractTester.java,tear down,"@ after public void   (  )  throws  exception  {  for  (   pair <  string  string >  registered app : registered apps )   {   system . out . println ( "" canceling application: ""  +  registered app . first (  )   +  "" from local registry . "" )  ;  registry",255,2,down,2,[]
6591,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\AbstractTester.java,verify local instance status,"protected void   (  string id  instance info .  instance status status )  {   instance info instance info = registry . get application ( local   region   app   name )  . get by instance id ( id )  ;  assert that ( "" instance info with id ""  +  id  +  "" not found"" instance info is ( not null value (  )  )  )  ;  assert that ( "" invalid  instance info state"" instance info . get status (  )  is ( equal to ( status )  )  )  ;   }  ",431,4,verify,1,[]
6592,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\AbstractTester.java,verify local instance status,"protected void   (  string id  instance info .  instance status status )  {   instance info instance info = registry . get application ( local   region   app   name )  . get by instance id ( id )  ;  assert that ( "" instance info with id ""  +  id  +  "" not found"" instance info is ( not null value (  )  )  )  ;  assert that ( "" invalid  instance info state"" instance info . get status (  )  is ( equal to ( status )  )  )  ;   }  ",431,4,local,2,[137]
6593,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\AbstractTester.java,verify local instance status,"protected void   (  string id  instance info .  instance status status )  {   instance info instance info = registry . get application ( local   region   app   name )  . get by instance id ( id )  ;  assert that ( "" instance info with id ""  +  id  +  "" not found"" instance info is ( not null value (  )  )  )  ;  assert that ( "" invalid  instance info state"" instance info . get status (  )  is ( equal to ( status )  )  )  ;   }  ",431,4,instance,3,"[31, 48, 78, 92, 177, 216, 264, 338, 359]"
6594,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\AbstractTester.java,verify local instance status,"protected void   (  string id  instance info .  instance status status )  {   instance info instance info = registry . get application ( local   region   app   name )  . get by instance id ( id )  ;  assert that ( "" instance info with id ""  +  id  +  "" not found"" instance info is ( not null value (  )  )  )  ;  assert that ( "" invalid  instance info state"" instance info . get status (  )  is ( equal to ( status )  )  )  ;   }  ",431,4,status,4,"[57, 64, 379, 408]"
6595,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\JerseyReplicationClientTest.java,set up,"@ before public void   (  )  throws  exception  {  replication client =  jersey replication client . create replication client ( config server codecs ""http: /  / localhost:""  +  server mock rule . get http port (  )   +  "" / eureka / v2"" )  ;   }  ",248,2,set,1,[]
6596,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\JerseyReplicationClientTest.java,set up,"@ before public void   (  )  throws  exception  {  replication client =  jersey replication client . create replication client ( config server codecs ""http: /  / localhost:""  +  server mock rule . get http port (  )   +  "" / eureka / v2"" )  ;   }  ",248,2,up,2,[]
6597,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\JerseyReplicationClientTest.java,tear down,@ after public void   (  )  {  if  ( server mock client  !  =  null )   {  server mock client . reset (  )  ;   }   }  ,119,2,tear,1,[]
6598,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\JerseyReplicationClientTest.java,tear down,@ after public void   (  )  {  if  ( server mock client  !  =  null )   {  server mock client . reset (  )  ;   }   }  ,119,2,down,2,[]
6599,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\JerseyReplicationClientTest.java,test asg status update replication,"@ test public void   (  )  throws  exception  {  server mock client . when ( request (  )  . with method ( ""put"" )  . with header ( header (  peer eureka node . header   replication ""true"" )  )  . with path ( "" / eureka / v2 / asg / ""  +  instance info . ",255,5,test,1,[2]
6600,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\JerseyReplicationClientTest.java,test asg status update replication,"@ test public void   (  )  throws  exception  {  server mock client . when ( request (  )  . with method ( ""put"" )  . with header ( header (  peer eureka node . header   replication ""true"" )  )  . with path ( "" / eureka / v2 / asg / ""  +  instance info . ",255,5,asg,2,[227]
6601,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\JerseyReplicationClientTest.java,test asg status update replication,"@ test public void   (  )  throws  exception  {  server mock client . when ( request (  )  . with method ( ""put"" )  . with header ( header (  peer eureka node . header   replication ""true"" )  )  . with path ( "" / eureka / v2 / asg / ""  +  instance info . ",255,5,status,3,[]
6602,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\JerseyReplicationClientTest.java,test asg status update replication,"@ test public void   (  )  throws  exception  {  server mock client . when ( request (  )  . with method ( ""put"" )  . with header ( header (  peer eureka node . header   replication ""true"" )  )  . with path ( "" / eureka / v2 / asg / ""  +  instance info . ",255,5,update,4,[]
6603,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\JerseyReplicationClientTest.java,test asg status update replication,"@ test public void   (  )  throws  exception  {  server mock client . when ( request (  )  . with method ( ""put"" )  . with header ( header (  peer eureka node . header   replication ""true"" )  )  . with path ( "" / eureka / v2 / asg / ""  +  instance info . ",255,5,replication,5,[170]
6604,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\JerseyReplicationClientTest.java,test cancel replication,"@ test public void   (  )  throws  exception  {  server mock client . when ( request (  )  . with method ( ""delete"" )  . with header ( header (  peer eureka node . header   replication ""true"" )  )  . with path ( "" / eureka / v2 / apps / ""  +  instance inf",255,3,test,1,[2]
6605,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\JerseyReplicationClientTest.java,test cancel replication,"@ test public void   (  )  throws  exception  {  server mock client . when ( request (  )  . with method ( ""delete"" )  . with header ( header (  peer eureka node . header   replication ""true"" )  )  . with path ( "" / eureka / v2 / apps / ""  +  instance inf",255,3,cancel,2,[]
6606,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\JerseyReplicationClientTest.java,test cancel replication,"@ test public void   (  )  throws  exception  {  server mock client . when ( request (  )  . with method ( ""delete"" )  . with header ( header (  peer eureka node . header   replication ""true"" )  )  . with path ( "" / eureka / v2 / apps / ""  +  instance inf",255,3,replication,3,[173]
6607,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\JerseyReplicationClientTest.java,test delete status override replication,"@ test public void   (  )  throws  exception  {  server mock client . when ( request (  )  . with method ( ""delete"" )  . with header ( header (  peer eureka node . header   replication ""true"" )  )  . with path ( "" / eureka / v2 / apps / ""  +  instance inf",255,5,test,1,[2]
6608,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\JerseyReplicationClientTest.java,test delete status override replication,"@ test public void   (  )  throws  exception  {  server mock client . when ( request (  )  . with method ( ""delete"" )  . with header ( header (  peer eureka node . header   replication ""true"" )  )  . with path ( "" / eureka / v2 / apps / ""  +  instance inf",255,5,delete,2,[108]
6609,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\JerseyReplicationClientTest.java,test delete status override replication,"@ test public void   (  )  throws  exception  {  server mock client . when ( request (  )  . with method ( ""delete"" )  . with header ( header (  peer eureka node . header   replication ""true"" )  )  . with path ( "" / eureka / v2 / apps / ""  +  instance inf",255,5,status,3,[]
6610,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\JerseyReplicationClientTest.java,test delete status override replication,"@ test public void   (  )  throws  exception  {  server mock client . when ( request (  )  . with method ( ""delete"" )  . with header ( header (  peer eureka node . header   replication ""true"" )  )  . with path ( "" / eureka / v2 / apps / ""  +  instance inf",255,5,override,4,[]
6611,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\JerseyReplicationClientTest.java,test delete status override replication,"@ test public void   (  )  throws  exception  {  server mock client . when ( request (  )  . with method ( ""delete"" )  . with header ( header (  peer eureka node . header   replication ""true"" )  )  . with path ( "" / eureka / v2 / apps / ""  +  instance inf",255,5,replication,5,[173]
6612,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\JerseyReplicationClientTest.java,test heartbeat replication with no response body,"@ test public void   (  )  throws  exception  {  server mock client . when ( request (  )  . with method ( ""put"" )  . with header ( header (  peer eureka node . header   replication ""true"" )  )  . with path ( "" / eureka / v2 / apps / ""  +  instance info .",255,7,test,1,[2]
6613,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\JerseyReplicationClientTest.java,test heartbeat replication with no response body,"@ test public void   (  )  throws  exception  {  server mock client . when ( request (  )  . with method ( ""put"" )  . with header ( header (  peer eureka node . header   replication ""true"" )  )  . with path ( "" / eureka / v2 / apps / ""  +  instance info .",255,7,heartbeat,2,[]
6614,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\JerseyReplicationClientTest.java,test heartbeat replication with no response body,"@ test public void   (  )  throws  exception  {  server mock client . when ( request (  )  . with method ( ""put"" )  . with header ( header (  peer eureka node . header   replication ""true"" )  )  . with path ( "" / eureka / v2 / apps / ""  +  instance info .",255,7,replication,3,[170]
6615,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\JerseyReplicationClientTest.java,test heartbeat replication with no response body,"@ test public void   (  )  throws  exception  {  server mock client . when ( request (  )  . with method ( ""put"" )  . with header ( header (  peer eureka node . header   replication ""true"" )  )  . with path ( "" / eureka / v2 / apps / ""  +  instance info .",255,7,with,4,"[93, 118, 197]"
6616,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\JerseyReplicationClientTest.java,test heartbeat replication with no response body,"@ test public void   (  )  throws  exception  {  server mock client . when ( request (  )  . with method ( ""put"" )  . with header ( header (  peer eureka node . header   replication ""true"" )  )  . with path ( "" / eureka / v2 / apps / ""  +  instance info .",255,7,no,5,[154]
6617,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\JerseyReplicationClientTest.java,test heartbeat replication with no response body,"@ test public void   (  )  throws  exception  {  server mock client . when ( request (  )  . with method ( ""put"" )  . with header ( header (  peer eureka node . header   replication ""true"" )  )  . with path ( "" / eureka / v2 / apps / ""  +  instance info .",255,7,response,6,[]
6618,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\JerseyReplicationClientTest.java,test heartbeat replication with no response body,"@ test public void   (  )  throws  exception  {  server mock client . when ( request (  )  . with method ( ""put"" )  . with header ( header (  peer eureka node . header   replication ""true"" )  )  . with path ( "" / eureka / v2 / apps / ""  +  instance info .",255,7,body,7,[]
6619,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\JerseyReplicationClientTest.java,test heartbeat replication with response body,@ test public void   (  )  throws  exception  {   instance info remote info = new  instance info ( this . instance info )  ;  remote info . set status (  instance status . down )  ;  byte[] response body = to gzipped json ( remote info )  ;  server mock c,255,6,test,1,[2]
6620,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\JerseyReplicationClientTest.java,test heartbeat replication with response body,@ test public void   (  )  throws  exception  {   instance info remote info = new  instance info ( this . instance info )  ;  remote info . set status (  instance status . down )  ;  byte[] response body = to gzipped json ( remote info )  ;  server mock c,255,6,heartbeat,2,[]
6621,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\JerseyReplicationClientTest.java,test heartbeat replication with response body,@ test public void   (  )  throws  exception  {   instance info remote info = new  instance info ( this . instance info )  ;  remote info . set status (  instance status . down )  ;  byte[] response body = to gzipped json ( remote info )  ;  server mock c,255,6,replication,3,[]
6622,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\JerseyReplicationClientTest.java,test heartbeat replication with response body,@ test public void   (  )  throws  exception  {   instance info remote info = new  instance info ( this . instance info )  ;  remote info . set status (  instance status . down )  ;  byte[] response body = to gzipped json ( remote info )  ;  server mock c,255,6,with,4,[]
6623,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\JerseyReplicationClientTest.java,test heartbeat replication with response body,@ test public void   (  )  throws  exception  {   instance info remote info = new  instance info ( this . instance info )  ;  remote info . set status (  instance status . down )  ;  byte[] response body = to gzipped json ( remote info )  ;  server mock c,255,6,response,5,[190]
6624,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\JerseyReplicationClientTest.java,test heartbeat replication with response body,@ test public void   (  )  throws  exception  {   instance info remote info = new  instance info ( this . instance info )  ;  remote info . set status (  instance status . down )  ;  byte[] response body = to gzipped json ( remote info )  ;  server mock c,255,6,body,6,[199]
6625,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\JerseyReplicationClientTest.java,test registration replication,"@ test public void   (  )  throws  exception  {  server mock client . when ( request (  )  . with method ( ""post"" )  . with header ( header (  peer eureka node . header   replication ""true"" )  )  . with path ( "" / eureka / v2 / apps / ""  +  instance info ",255,3,test,1,[2]
6626,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\JerseyReplicationClientTest.java,test registration replication,"@ test public void   (  )  throws  exception  {  server mock client . when ( request (  )  . with method ( ""post"" )  . with header ( header (  peer eureka node . header   replication ""true"" )  )  . with path ( "" / eureka / v2 / apps / ""  +  instance info ",255,3,registration,2,[]
6627,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\JerseyReplicationClientTest.java,test registration replication,"@ test public void   (  )  throws  exception  {  server mock client . when ( request (  )  . with method ( ""post"" )  . with header ( header (  peer eureka node . header   replication ""true"" )  )  . with path ( "" / eureka / v2 / apps / ""  +  instance info ",255,3,replication,3,[171]
6628,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\JerseyReplicationClientTest.java,test status update replication,"@ test public void   (  )  throws  exception  {  server mock client . when ( request (  )  . with method ( ""put"" )  . with header ( header (  peer eureka node . header   replication ""true"" )  )  . with path ( "" / eureka / v2 / apps / ""  +  instance info .",255,4,test,1,[2]
6629,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\JerseyReplicationClientTest.java,test status update replication,"@ test public void   (  )  throws  exception  {  server mock client . when ( request (  )  . with method ( ""put"" )  . with header ( header (  peer eureka node . header   replication ""true"" )  )  . with path ( "" / eureka / v2 / apps / ""  +  instance info .",255,4,status,2,[]
6630,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\JerseyReplicationClientTest.java,test status update replication,"@ test public void   (  )  throws  exception  {  server mock client . when ( request (  )  . with method ( ""put"" )  . with header ( header (  peer eureka node . header   replication ""true"" )  )  . with path ( "" / eureka / v2 / apps / ""  +  instance info .",255,4,update,3,[]
6631,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\JerseyReplicationClientTest.java,test status update replication,"@ test public void   (  )  throws  exception  {  server mock client . when ( request (  )  . with method ( ""put"" )  . with header ( header (  peer eureka node . header   replication ""true"" )  )  . with path ( "" / eureka / v2 / apps / ""  +  instance info .",255,4,replication,4,[170]
6632,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\JerseyReplicationClientTest.java,to gzipped json,private static byte[]   (  instance info remote info )  throws io exception  {   byte array output stream bos = new  byte array output stream (  )  ;  gzip output stream gos = new gzip output stream ( bos )  ;   eureka jackson codec . get instance (  )  . write to ( remote info gos )  ;  gos . flush (  )  ;  return bos . to byte array (  )  ;   }  ,350,3,to,1,"[262, 323]"
6633,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\JerseyReplicationClientTest.java,to gzipped json,private static byte[]   (  instance info remote info )  throws io exception  {   byte array output stream bos = new  byte array output stream (  )  ;  gzip output stream gos = new gzip output stream ( bos )  ;   eureka jackson codec . get instance (  )  . write to ( remote info gos )  ;  gos . flush (  )  ;  return bos . to byte array (  )  ;   }  ,350,3,gzipped,2,[]
6634,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\JerseyReplicationClientTest.java,to gzipped json,private static byte[]   (  instance info remote info )  throws io exception  {   byte array output stream bos = new  byte array output stream (  )  ;  gzip output stream gos = new gzip output stream ( bos )  ;   eureka jackson codec . get instance (  )  . write to ( remote info gos )  ;  gos . flush (  )  ;  return bos . to byte array (  )  ;   }  ,350,3,json,3,[]
6635,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodesTest.java, testable peer eureka nodes,  (  peer aware instance registry registry  eureka server config server config )  {  super ( registry server config new  default eureka client config (  )  new  default server codecs ( server config )  mock (  application info manager . class )  )  ;   }  ,256,4,testable,1,[]
6636,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodesTest.java, testable peer eureka nodes,  (  peer aware instance registry registry  eureka server config server config )  {  super ( registry server config new  default eureka client config (  )  new  default server codecs ( server config )  mock (  application info manager . class )  )  ;   }  ,256,4,peer,2,[5]
6637,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodesTest.java, testable peer eureka nodes,  (  peer aware instance registry registry  eureka server config server config )  {  super ( registry server config new  default eureka client config (  )  new  default server codecs ( server config )  mock (  application info manager . class )  )  ;   }  ,256,4,eureka,3,"[44, 129]"
6638,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodesTest.java, testable peer eureka nodes,  (  peer aware instance registry registry  eureka server config server config )  {  super ( registry server config new  default eureka client config (  )  new  default server codecs ( server config )  mock (  application info manager . class )  )  ;   }  ,256,4,nodes,4,[]
6639,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodesTest.java,await next reload,boolean   ( long timeout  time unit time unit )  throws  interrupted exception  {  int last reload counter = reload counter . get (  )  ;  long end time =  system . current time millis (  )   +  time unit . to millis ( timeout )  ;  while  ( end time  >   system . current time millis (  )  && last reload counter  =  =  reload counter . get (  )  )   {   thread . sleep ( 10 )  ;   }  return last reload counter  !  =  reload counter . get (  )  ;   }  ,454,3,await,1,[]
6640,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodesTest.java,await next reload,boolean   ( long timeout  time unit time unit )  throws  interrupted exception  {  int last reload counter = reload counter . get (  )  ;  long end time =  system . current time millis (  )   +  time unit . to millis ( timeout )  ;  while  ( end time  >   system . current time millis (  )  && last reload counter  =  =  reload counter . get (  )  )   {   thread . sleep ( 10 )  ;   }  return last reload counter  !  =  reload counter . get (  )  ;   }  ,454,3,next,2,[]
6641,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodesTest.java,await next reload,boolean   ( long timeout  time unit time unit )  throws  interrupted exception  {  int last reload counter = reload counter . get (  )  ;  long end time =  system . current time millis (  )   +  time unit . to millis ( timeout )  ;  while  ( end time  >   system . current time millis (  )  && last reload counter  =  =  reload counter . get (  )  )   {   thread . sleep ( 10 )  ;   }  return last reload counter  !  =  reload counter . get (  )  ;   }  ,454,3,reload,3,"[92, 109, 299, 321, 398, 420]"
6642,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodesTest.java,create peer eureka node,"@ override protected  peer eureka node   (  string peer eureka node url )  {  if  ( peer eureka node by url . contains key ( peer eureka node url )  )   {  throw new  illegal state exception ( "" peer eureka node for url ""  +  peer eureka node url  +  "" is",255,4,create,1,[]
6643,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodesTest.java,create peer eureka node,"@ override protected  peer eureka node   (  string peer eureka node url )  {  if  ( peer eureka node by url . contains key ( peer eureka node url )  )   {  throw new  illegal state exception ( "" peer eureka node for url ""  +  peer eureka node url  +  "" is",255,4,peer,2,"[22, 51, 84, 125, 195, 226]"
6644,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodesTest.java,create peer eureka node,"@ override protected  peer eureka node   (  string peer eureka node url )  {  if  ( peer eureka node by url . contains key ( peer eureka node url )  )   {  throw new  illegal state exception ( "" peer eureka node for url ""  +  peer eureka node url  +  "" is",255,4,eureka,3,"[27, 56, 89, 130, 200, 231]"
6645,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodesTest.java,create peer eureka node,"@ override protected  peer eureka node   (  string peer eureka node url )  {  if  ( peer eureka node by url . contains key ( peer eureka node url )  )   {  throw new  illegal state exception ( "" peer eureka node for url ""  +  peer eureka node url  +  "" is",255,4,node,4,"[34, 63, 96, 137, 207, 238]"
6646,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodesTest.java,get peer node,private  peer eureka node   (  string peer eureka url )  {  for  (   peer eureka node node : peer eureka nodes . get peer eureka nodes (  )  )   {  if  ( node . get service url (  )  . equals ( peer eureka url )  )   {  return node ;   }   }  return null ;   }  ,262,3,get,1,"[113, 161]"
6647,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodesTest.java,get peer node,private  peer eureka node   (  string peer eureka url )  {  for  (   peer eureka node node : peer eureka nodes . get peer eureka nodes (  )  )   {  if  ( node . get service url (  )  . equals ( peer eureka url )  )   {  return node ;   }   }  return null ;   }  ,262,3,peer,2,"[9, 38, 69, 93, 117, 194]"
6648,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodesTest.java,get peer node,private  peer eureka node   (  string peer eureka url )  {  for  (   peer eureka node node : peer eureka nodes . get peer eureka nodes (  )  )   {  if  ( node . get service url (  )  . equals ( peer eureka url )  )   {  return node ;   }   }  return null ;   }  ,262,3,node,3,"[21, 81, 86, 105, 129, 154, 227]"
6649,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodesTest.java,resolve peer urls,@ override protected  list <  string >    (  )  {  return peer urls ref . get (  )  ;   }  ,91,3,resolve,1,[]
6650,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodesTest.java,resolve peer urls,@ override protected  list <  string >    (  )  {  return peer urls ref . get (  )  ;   }  ,91,3,peer,2,[58]
6651,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodesTest.java,resolve peer urls,@ override protected  list <  string >    (  )  {  return peer urls ref . get (  )  ;   }  ,91,3,urls,3,[63]
6652,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodesTest.java,test initial startup shutdown,@ test public void   (  )  throws  exception  {  peer eureka nodes . with peer urls ( peer   eureka   url   a )  ;  peer eureka nodes . start (  )  ;   peer eureka node peer node = get peer node ( peer   eureka   url   a )  ;  assert that ( peer node is (,255,4,test,1,[2]
6653,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodesTest.java,test initial startup shutdown,@ test public void   (  )  throws  exception  {  peer eureka nodes . with peer urls ( peer   eureka   url   a )  ;  peer eureka nodes . start (  )  ;   peer eureka node peer node = get peer node ( peer   eureka   url   a )  ;  assert that ( peer node is (,255,4,initial,2,[]
6654,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodesTest.java,test initial startup shutdown,@ test public void   (  )  throws  exception  {  peer eureka nodes . with peer urls ( peer   eureka   url   a )  ;  peer eureka nodes . start (  )  ;   peer eureka node peer node = get peer node ( peer   eureka   url   a )  ;  assert that ( peer node is (,255,4,startup,3,[]
6655,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodesTest.java,test initial startup shutdown,@ test public void   (  )  throws  exception  {  peer eureka nodes . with peer urls ( peer   eureka   url   a )  ;  peer eureka nodes . start (  )  ;   peer eureka node peer node = get peer node ( peer   eureka   url   a )  ;  assert that ( peer node is (,255,4,shutdown,4,[]
6656,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodesTest.java,test reload with no peer change,@ test public void   (  )  throws  exception  {  peer eureka nodes . with peer urls ( peer   eureka   url   a )  ;  peer eureka nodes . start (  )  ;   peer eureka node peer node = get peer node ( peer   eureka   url   a )  ;  assert that ( peer eureka no,255,6,test,1,[2]
6657,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodesTest.java,test reload with no peer change,@ test public void   (  )  throws  exception  {  peer eureka nodes . with peer urls ( peer   eureka   url   a )  ;  peer eureka nodes . start (  )  ;   peer eureka node peer node = get peer node ( peer   eureka   url   a )  ;  assert that ( peer eureka no,255,6,reload,2,[]
6658,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodesTest.java,test reload with no peer change,@ test public void   (  )  throws  exception  {  peer eureka nodes . with peer urls ( peer   eureka   url   a )  ;  peer eureka nodes . start (  )  ;   peer eureka node peer node = get peer node ( peer   eureka   url   a )  ;  assert that ( peer eureka no,255,6,with,3,[69]
6659,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodesTest.java,test reload with no peer change,@ test public void   (  )  throws  exception  {  peer eureka nodes . with peer urls ( peer   eureka   url   a )  ;  peer eureka nodes . start (  )  ;   peer eureka node peer node = get peer node ( peer   eureka   url   a )  ;  assert that ( peer eureka no,255,6,no,4,"[61, 128, 164, 174, 190, 253]"
6660,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodesTest.java,test reload with no peer change,@ test public void   (  )  throws  exception  {  peer eureka nodes . with peer urls ( peer   eureka   url   a )  ;  peer eureka nodes . start (  )  ;   peer eureka node peer node = get peer node ( peer   eureka   url   a )  ;  assert that ( peer eureka no,255,6,peer,5,"[49, 74, 86, 116, 152, 169, 185, 197, 241]"
6661,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodesTest.java,test reload with no peer change,@ test public void   (  )  throws  exception  {  peer eureka nodes . with peer urls ( peer   eureka   url   a )  ;  peer eureka nodes . start (  )  ;   peer eureka node peer node = get peer node ( peer   eureka   url   a )  ;  assert that ( peer eureka no,255,6,change,6,[]
6662,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodesTest.java,test reload with peer updates,@ test public void   (  )  throws  exception  {  peer eureka nodes . with peer urls ( peer   eureka   url   a )  ;  peer eureka nodes . start (  )  ;   peer eureka node peer nodea = get peer node ( peer   eureka   url   a )  ;  peer eureka nodes . with pe,255,5,test,1,[2]
6663,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodesTest.java,test reload with peer updates,@ test public void   (  )  throws  exception  {  peer eureka nodes . with peer urls ( peer   eureka   url   a )  ;  peer eureka nodes . start (  )  ;   peer eureka node peer nodea = get peer node ( peer   eureka   url   a )  ;  peer eureka nodes . with pe,255,5,reload,2,[]
6664,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodesTest.java,test reload with peer updates,@ test public void   (  )  throws  exception  {  peer eureka nodes . with peer urls ( peer   eureka   url   a )  ;  peer eureka nodes . start (  )  ;   peer eureka node peer nodea = get peer node ( peer   eureka   url   a )  ;  peer eureka nodes . with pe,255,5,with,3,"[69, 248]"
6665,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodesTest.java,test reload with peer updates,@ test public void   (  )  throws  exception  {  peer eureka nodes . with peer urls ( peer   eureka   url   a )  ;  peer eureka nodes . start (  )  ;   peer eureka node peer nodea = get peer node ( peer   eureka   url   a )  ;  peer eureka nodes . with pe,255,5,peer,4,"[49, 74, 86, 116, 152, 169, 186, 198, 228]"
6666,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodesTest.java,test reload with peer updates,@ test public void   (  )  throws  exception  {  peer eureka nodes . with peer urls ( peer   eureka   url   a )  ;  peer eureka nodes . start (  )  ;   peer eureka node peer nodea = get peer node ( peer   eureka   url   a )  ;  peer eureka nodes . with pe,255,5,updates,5,[]
6667,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodesTest.java,update peer eureka nodes,@ override protected void   (  list <  string >  new peer urls )  {  super . update peer eureka nodes ( new peer urls )  ;  reload counter . increment and get (  )  ;   }  ,172,4,update,1,[77]
6668,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodesTest.java,update peer eureka nodes,@ override protected void   (  list <  string >  new peer urls )  {  super . update peer eureka nodes ( new peer urls )  ;  reload counter . increment and get (  )  ;   }  ,172,4,peer,2,"[53, 84, 108]"
6669,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodesTest.java,update peer eureka nodes,@ override protected void   (  list <  string >  new peer urls )  {  super . update peer eureka nodes ( new peer urls )  ;  reload counter . increment and get (  )  ;   }  ,172,4,eureka,3,[89]
6670,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodesTest.java,update peer eureka nodes,@ override protected void   (  list <  string >  new peer urls )  {  super . update peer eureka nodes ( new peer urls )  ;  reload counter . increment and get (  )  ;   }  ,172,4,nodes,4,[96]
6671,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodesTest.java,with peer urls,void   (  string .  .  .  peer urls )  {  this . peer urls ref . set (  arrays . as list ( peer urls )  )  ;   }  ,114,3,with,1,[]
6672,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodesTest.java,with peer urls,void   (  string .  .  .  peer urls )  {  this . peer urls ref . set (  arrays . as list ( peer urls )  )  ;   }  ,114,3,peer,2,"[26, 49, 91]"
6673,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodesTest.java,with peer urls,void   (  string .  .  .  peer urls )  {  this . peer urls ref . set (  arrays . as list ( peer urls )  )  ;   }  ,114,3,urls,3,"[31, 54, 96]"
6674,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\protocol\JacksonEncodingTest.java,test replication instance encoding,@ test public void   (  )  throws  exception  {   replication instance replication instance =  cluster sample data . new replication instance (  )  ;   string json text = jackson codec . write to string ( replication instance )  ;   replication instance d,255,4,test,1,[2]
6675,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\protocol\JacksonEncodingTest.java,test replication instance encoding,@ test public void   (  )  throws  exception  {   replication instance replication instance =  cluster sample data . new replication instance (  )  ;   string json text = jackson codec . write to string ( replication instance )  ;   replication instance d,255,4,replication,2,"[50, 71, 121, 205, 233]"
6676,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\protocol\JacksonEncodingTest.java,test replication instance encoding,@ test public void   (  )  throws  exception  {   replication instance replication instance =  cluster sample data . new replication instance (  )  ;   string json text = jackson codec . write to string ( replication instance )  ;   replication instance d,255,4,instance,3,"[62, 83, 133, 217, 245]"
6677,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\protocol\JacksonEncodingTest.java,test replication instance encoding,@ test public void   (  )  throws  exception  {   replication instance replication instance =  cluster sample data . new replication instance (  )  ;   string json text = jackson codec . write to string ( replication instance )  ;   replication instance d,255,4,encoding,4,[]
6678,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\protocol\JacksonEncodingTest.java,test replication instance response encoding,@ test public void   (  )  throws  exception  {   replication instance response replication instance response =  cluster sample data . new replication instance response ( true )  ;   string json text = jackson codec . write to string ( replication instanc,255,5,test,1,[2]
6679,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\protocol\JacksonEncodingTest.java,test replication instance response encoding,@ test public void   (  )  throws  exception  {   replication instance response replication instance response =  cluster sample data . new replication instance response ( true )  ;   string json text = jackson codec . write to string ( replication instanc,255,5,replication,2,"[50, 80, 139, 236]"
6680,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\protocol\JacksonEncodingTest.java,test replication instance response encoding,@ test public void   (  )  throws  exception  {   replication instance response replication instance response =  cluster sample data . new replication instance response ( true )  ;   string json text = jackson codec . write to string ( replication instanc,255,5,instance,3,"[62, 92, 151]"
6681,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\protocol\JacksonEncodingTest.java,test replication instance response encoding,@ test public void   (  )  throws  exception  {   replication instance response replication instance response =  cluster sample data . new replication instance response ( true )  ;   string json text = jackson codec . write to string ( replication instanc,255,5,response,4,"[71, 101, 160]"
6682,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\protocol\JacksonEncodingTest.java,test replication instance response encoding,@ test public void   (  )  throws  exception  {   replication instance response replication instance response =  cluster sample data . new replication instance response ( true )  ;   string json text = jackson codec . write to string ( replication instanc,255,5,encoding,5,[]
6683,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\protocol\JacksonEncodingTest.java,test replication list encoding,@ test public void   (  )  throws  exception  {   replication list replication list = new  replication list (  )  ;  replication list . add replication instance (  cluster sample data . new replication instance (  )  )  ;   string json text = jackson code,255,4,test,1,[2]
6684,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\protocol\JacksonEncodingTest.java,test replication list encoding,@ test public void   (  )  throws  exception  {   replication list replication list = new  replication list (  )  ;  replication list . add replication instance (  cluster sample data . new replication instance (  )  )  ;   string json text = jackson code,255,4,replication,2,"[50, 67, 91, 117, 140, 190]"
6685,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\protocol\JacksonEncodingTest.java,test replication list encoding,@ test public void   (  )  throws  exception  {   replication list replication list = new  replication list (  )  ;  replication list . add replication instance (  cluster sample data . new replication instance (  )  )  ;   string json text = jackson code,255,4,list,3,"[62, 79, 103, 129]"
6686,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\protocol\JacksonEncodingTest.java,test replication list encoding,@ test public void   (  )  throws  exception  {   replication list replication list = new  replication list (  )  ;  replication list . add replication instance (  cluster sample data . new replication instance (  )  )  ;   string json text = jackson code,255,4,encoding,4,[]
6687,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\protocol\JacksonEncodingTest.java,test replication list response encoding,@ test public void   (  )  throws  exception  {   replication list response replication list response = new  replication list response (  )  ;  replication list response . add response (  cluster sample data . new replication instance response ( false )  ,255,5,test,1,[2]
6688,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\protocol\JacksonEncodingTest.java,test replication list response encoding,@ test public void   (  )  throws  exception  {   replication list response replication list response = new  replication list response (  )  ;  replication list response . add response (  cluster sample data . new replication instance response ( false )  ,255,5,replication,2,"[50, 76, 109, 144, 214]"
6689,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\protocol\JacksonEncodingTest.java,test replication list response encoding,@ test public void   (  )  throws  exception  {   replication list response replication list response = new  replication list response (  )  ;  replication list response . add response (  cluster sample data . new replication instance response ( false )  ,255,5,list,3,"[62, 88, 121, 156]"
6690,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\protocol\JacksonEncodingTest.java,test replication list response encoding,@ test public void   (  )  throws  exception  {   replication list response replication list response = new  replication list response (  )  ;  replication list response . add response (  cluster sample data . new replication instance response ( false )  ,255,5,response,4,"[67, 93, 126, 161, 176, 235]"
6691,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\protocol\JacksonEncodingTest.java,test replication list response encoding,@ test public void   (  )  throws  exception  {   replication list response replication list response = new  replication list response (  )  ;  replication list response . add response (  cluster sample data . new replication instance response ( false )  ,255,5,encoding,5,[]
6692,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodeTest.java,create peer eureka node,"private  peer eureka node   (  )  {   eureka server config config =  cluster sample data . new eureka server config (  )  ;  peer eureka node = new  peer eureka node ( registry ""test"" ""http: /  / test . host . com"" http replication client config batch   size max   batching   delay   ms  cluster sample data . retry   sleep   time   ms  cluster sample data . server   unavailable   sleep   time   ms )  ;  return peer eureka node ;   }  ",437,4,create,1,[]
6693,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodeTest.java,create peer eureka node,"private  peer eureka node   (  )  {   eureka server config config =  cluster sample data . new eureka server config (  )  ;  peer eureka node = new  peer eureka node ( registry ""test"" ""http: /  / test . host . com"" http replication client config batch   size max   batching   delay   ms  cluster sample data . retry   sleep   time   ms  cluster sample data . server   unavailable   sleep   time   ms )  ;  return peer eureka node ;   }  ",437,4,peer,2,"[9, 125, 149, 413]"
6694,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodeTest.java,create peer eureka node,"private  peer eureka node   (  )  {   eureka server config config =  cluster sample data . new eureka server config (  )  ;  peer eureka node = new  peer eureka node ( registry ""test"" ""http: /  / test . host . com"" http replication client config batch   size max   batching   delay   ms  cluster sample data . retry   sleep   time   ms  cluster sample data . server   unavailable   sleep   time   ms )  ;  return peer eureka node ;   }  ",437,4,eureka,3,"[14, 38, 95, 130, 154, 418]"
6695,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodeTest.java,create peer eureka node,"private  peer eureka node   (  )  {   eureka server config config =  cluster sample data . new eureka server config (  )  ;  peer eureka node = new  peer eureka node ( registry ""test"" ""http: /  / test . host . com"" http replication client config batch   size max   batching   delay   ms  cluster sample data . retry   sleep   time   ms  cluster sample data . server   unavailable   sleep   time   ms )  ;  return peer eureka node ;   }  ",437,4,node,4,"[21, 137, 161, 425]"
6696,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodeTest.java,expect request type,private  object   (  request type request type )  throws  interrupted exception  {   handled request handled request = http replication client . next handled request ( 60  time unit . seconds )  ;  assert that ( handled request is ( not null value (  )  )  )  ;  assert that ( handled request . get request type (  )  is ( equal to ( request type )  )  )  ;  return handled request . get data (  )  ;   }  ,406,3,expect,1,[]
6697,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodeTest.java,expect request type,private  object   (  request type request type )  throws  interrupted exception  {   handled request handled request = http replication client . next handled request ( 60  time unit . seconds )  ;  assert that ( handled request is ( not null value (  )  )  )  ;  assert that ( handled request . get request type (  )  is ( equal to ( request type )  )  )  ;  return handled request . get data (  )  ;   }  ,406,3,request,2,"[21, 34, 93, 109, 158, 220, 285, 299, 334, 374]"
6698,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodeTest.java,expect request type,private  object   (  request type request type )  throws  interrupted exception  {   handled request handled request = http replication client . next handled request ( 60  time unit . seconds )  ;  assert that ( handled request is ( not null value (  )  )  )  ;  assert that ( handled request . get request type (  )  is ( equal to ( request type )  )  )  ;  return handled request . get data (  )  ;   }  ,406,3,type,3,"[29, 42, 307, 342]"
6699,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodeTest.java,expect single batch request,private  replication instance   (  )  throws  interrupted exception  {   handled request handled request = http replication client . next handled request ( 30  time unit . seconds )  ;  assert that ( handled request is ( not null value (  )  )  )  ;  assert that ( handled request . get request type (  )  is ( equal to (  request type .  batch )  )  )  ;   object data = handled request . get data (  )  ;  assert that ( data is ( instance of (  replication list . class )  )  )  ;   list <  replication instance >  replications =  (  (  replication list ) data )  . get replication list (  )  ;  assert that ( replications . size (  )  is ( equal to ( 1 )  )  )  ;  return replications . get ( 0 )  ;   }  ,708,4,expect,1,[]
6700,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodeTest.java,expect single batch request,private  replication instance   (  )  throws  interrupted exception  {   handled request handled request = http replication client . next handled request ( 30  time unit . seconds )  ;  assert that ( handled request is ( not null value (  )  )  )  ;  assert that ( handled request . get request type (  )  is ( equal to (  request type .  batch )  )  )  ;   object data = handled request . get data (  )  ;  assert that ( data is ( instance of (  replication list . class )  )  )  ;   list <  replication instance >  replications =  (  (  replication list ) data )  . get replication list (  )  ;  assert that ( replications . size (  )  is ( equal to ( 1 )  )  )  ;  return replications . get ( 0 )  ;   }  ,708,4,single,2,[]
6701,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodeTest.java,expect single batch request,private  replication instance   (  )  throws  interrupted exception  {   handled request handled request = http replication client . next handled request ( 30  time unit . seconds )  ;  assert that ( handled request is ( not null value (  )  )  )  ;  assert that ( handled request . get request type (  )  is ( equal to (  request type .  batch )  )  )  ;   object data = handled request . get data (  )  ;  assert that ( data is ( instance of (  replication list . class )  )  )  ;   list <  replication instance >  replications =  (  (  replication list ) data )  . get replication list (  )  ;  assert that ( replications . size (  )  is ( equal to ( 1 )  )  )  ;  return replications . get ( 0 )  ;   }  ,708,4,batch,3,[339]
6702,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodeTest.java,expect single batch request,private  replication instance   (  )  throws  interrupted exception  {   handled request handled request = http replication client . next handled request ( 30  time unit . seconds )  ;  assert that ( handled request is ( not null value (  )  )  )  ;  assert that ( handled request . get request type (  )  is ( equal to (  request type .  batch )  )  )  ;   object data = handled request . get data (  )  ;  assert that ( data is ( instance of (  replication list . class )  )  )  ;   list <  replication instance >  replications =  (  (  replication list ) data )  . get replication list (  )  ;  assert that ( replications . size (  )  is ( equal to ( 1 )  )  )  ;  return replications . get ( 0 )  ;   }  ,708,4,request,4,"[81, 97, 146, 208, 273, 287, 323, 380]"
6703,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodeTest.java,set up,@ before public void   (  )  throws  exception  {  http replication client . with network status code ( 200 )  ;  http replication client . with batch reply ( 200 )  ;   }  ,173,2,set,1,[]
6704,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodeTest.java,set up,@ before public void   (  )  throws  exception  {  http replication client . with network status code ( 200 )  ;  http replication client . with batch reply ( 200 )  ;   }  ,173,2,up,2,[]
6705,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodeTest.java,tear down,@ after public void   (  )  throws  exception  {  if  ( peer eureka node  !  =  null )   {  peer eureka node . shut down (  )  ;   }   }  ,138,2,tear,1,[]
6706,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodeTest.java,tear down,@ after public void   (  )  throws  exception  {  if  ( peer eureka node  !  =  null )   {  peer eureka node . shut down (  )  ;   }   }  ,138,2,down,2,[116]
6707,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodeTest.java,test asg status update,@ test public void   (  )  throws  throwable  {  create peer eureka node (  )  . status update ( instance info . getasg name (  )  asg status . disabled )  ;   object new asg status = expect request type (  request type .  asg status update )  ;  assert t,255,4,test,1,[2]
6708,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodeTest.java,test asg status update,@ test public void   (  )  throws  throwable  {  create peer eureka node (  )  . status update ( instance info . getasg name (  )  asg status . disabled )  ;   object new asg status = expect request type (  request type .  asg status update )  ;  assert t,255,4,asg,2,"[116, 131, 171, 223]"
6709,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodeTest.java,test asg status update,@ test public void   (  )  throws  throwable  {  create peer eureka node (  )  . status update ( instance info . getasg name (  )  asg status . disabled )  ;   object new asg status = expect request type (  request type .  asg status update )  ;  assert t,255,4,status,3,"[81, 135, 175, 227]"
6710,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodeTest.java,test asg status update,@ test public void   (  )  throws  throwable  {  create peer eureka node (  )  . status update ( instance info . getasg name (  )  asg status . disabled )  ;   object new asg status = expect request type (  request type .  asg status update )  ;  assert t,255,4,update,4,"[88, 234]"
6711,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodeTest.java,test cancel batch replication,@ test public void   (  )  throws  exception  {  create peer eureka node (  )  . cancel ( instance info . get app name (  )  instance info . get id (  )  )  ;   replication instance replication instance = expect single batch request (  )  ;  assert that (,255,4,test,1,[2]
6712,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodeTest.java,test cancel batch replication,@ test public void   (  )  throws  exception  {  create peer eureka node (  )  . cancel ( instance info . get app name (  )  instance info . get id (  )  )  ;   replication instance replication instance = expect single batch request (  )  ;  assert that (,255,4,cancel,2,[81]
6713,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodeTest.java,test cancel batch replication,@ test public void   (  )  throws  exception  {  create peer eureka node (  )  . cancel ( instance info . get app name (  )  instance info . get id (  )  )  ;   replication instance replication instance = expect single batch request (  )  ;  assert that (,255,4,batch,3,[219]
6714,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodeTest.java,test cancel batch replication,@ test public void   (  )  throws  exception  {  create peer eureka node (  )  . cancel ( instance info . get app name (  )  instance info . get id (  )  )  ;   replication instance replication instance = expect single batch request (  )  ;  assert that (,255,4,replication,4,"[161, 182]"
6715,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodeTest.java,test delete status override batch replication,@ test public void   (  )  throws  throwable  {  create peer eureka node (  )  . delete status override ( instance info . get app name (  )  instance info . get id (  )  instance info )  ;   replication instance replication instance = expect single batch ,255,6,test,1,[2]
6716,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodeTest.java,test delete status override batch replication,@ test public void   (  )  throws  throwable  {  create peer eureka node (  )  . delete status override ( instance info . get app name (  )  instance info . get id (  )  instance info )  ;   replication instance replication instance = expect single batch ,255,6,delete,2,[81]
6717,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodeTest.java,test delete status override batch replication,@ test public void   (  )  throws  throwable  {  create peer eureka node (  )  . delete status override ( instance info . get app name (  )  instance info . get id (  )  instance info )  ;   replication instance replication instance = expect single batch ,255,6,status,3,[88]
6718,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodeTest.java,test delete status override batch replication,@ test public void   (  )  throws  throwable  {  create peer eureka node (  )  . delete status override ( instance info . get app name (  )  instance info . get id (  )  instance info )  ;   replication instance replication instance = expect single batch ,255,6,override,4,[95]
6719,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodeTest.java,test delete status override batch replication,@ test public void   (  )  throws  throwable  {  create peer eureka node (  )  . delete status override ( instance info . get app name (  )  instance info . get id (  )  instance info )  ;   replication instance replication instance = expect single batch ,255,6,batch,5,[249]
6720,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodeTest.java,test delete status override batch replication,@ test public void   (  )  throws  throwable  {  create peer eureka node (  )  . delete status override ( instance info . get app name (  )  instance info . get id (  )  instance info )  ;   replication instance replication instance = expect single batch ,255,6,replication,6,"[191, 212]"
6721,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodeTest.java,test heartbeat batch replication,@ test public void   (  )  throws  throwable  {  create peer eureka node (  )  . heartbeat ( instance info . get app name (  )  instance info . get id (  )  instance info null false )  ;   replication instance replication instance = expect single batch re,255,4,test,1,[2]
6722,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodeTest.java,test heartbeat batch replication,@ test public void   (  )  throws  throwable  {  create peer eureka node (  )  . heartbeat ( instance info . get app name (  )  instance info . get id (  )  instance info null false )  ;   replication instance replication instance = expect single batch re,255,4,heartbeat,2,[81]
6723,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodeTest.java,test heartbeat batch replication,@ test public void   (  )  throws  throwable  {  create peer eureka node (  )  . heartbeat ( instance info . get app name (  )  instance info . get id (  )  instance info null false )  ;   replication instance replication instance = expect single batch re,255,4,batch,3,[247]
6724,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodeTest.java,test heartbeat batch replication,@ test public void   (  )  throws  throwable  {  create peer eureka node (  )  . heartbeat ( instance info . get app name (  )  instance info . get id (  )  instance info null false )  ;   replication instance replication instance = expect single batch re,255,4,replication,4,"[189, 210]"
6725,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodeTest.java,test heartbeat replication failure,@ test public void   (  )  throws  throwable  {  http replication client . with network status code ( 200 200 )  ;  http replication client . with batch reply ( 404 )  ;  create peer eureka node (  )  . heartbeat ( instance info . get app name (  )  insta,255,4,test,1,[2]
6726,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodeTest.java,test heartbeat replication failure,@ test public void   (  )  throws  throwable  {  http replication client . with network status code ( 200 200 )  ;  http replication client . with batch reply ( 404 )  ;  create peer eureka node (  )  . heartbeat ( instance info . get app name (  )  insta,255,4,heartbeat,2,[203]
6727,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodeTest.java,test heartbeat replication failure,@ test public void   (  )  throws  throwable  {  http replication client . with network status code ( 200 200 )  ;  http replication client . with batch reply ( 404 )  ;  create peer eureka node (  )  . heartbeat ( instance info . get app name (  )  insta,255,4,replication,3,"[54, 121]"
6728,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodeTest.java,test heartbeat replication failure,@ test public void   (  )  throws  throwable  {  http replication client . with network status code ( 200 200 )  ;  http replication client . with batch reply ( 404 )  ;  create peer eureka node (  )  . heartbeat ( instance info . get app name (  )  insta,255,4,failure,4,[]
6729,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodeTest.java,test heartbeat with instance info from peer,@ test public void   (  )  throws  throwable  {   instance info instance info from peer =  cluster sample data . new instance info ( 2 )  ;  http replication client . with network status code ( 200 )  ;  http replication client . with batch reply ( 400 ) ,255,7,test,1,[2]
6730,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodeTest.java,test heartbeat with instance info from peer,@ test public void   (  )  throws  throwable  {   instance info instance info from peer =  cluster sample data . new instance info ( 2 )  ;  http replication client . with network status code ( 200 )  ;  http replication client . with batch reply ( 400 ) ,255,7,heartbeat,2,[]
6731,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodeTest.java,test heartbeat with instance info from peer,@ test public void   (  )  throws  throwable  {   instance info instance info from peer =  cluster sample data . new instance info ( 2 )  ;  http replication client . with network status code ( 200 )  ;  http replication client . with batch reply ( 400 ) ,255,7,with,3,"[167, 230]"
6732,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodeTest.java,test heartbeat with instance info from peer,@ test public void   (  )  throws  throwable  {   instance info instance info from peer =  cluster sample data . new instance info ( 2 )  ;  http replication client . with network status code ( 200 )  ;  http replication client . with batch reply ( 400 ) ,255,7,instance,4,"[50, 64, 117]"
6733,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodeTest.java,test heartbeat with instance info from peer,@ test public void   (  )  throws  throwable  {   instance info instance info from peer =  cluster sample data . new instance info ( 2 )  ;  http replication client . with network status code ( 200 )  ;  http replication client . with batch reply ( 400 ) ,255,7,info,5,"[59, 73, 126]"
6734,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodeTest.java,test heartbeat with instance info from peer,@ test public void   (  )  throws  throwable  {   instance info instance info from peer =  cluster sample data . new instance info ( 2 )  ;  http replication client . with network status code ( 200 )  ;  http replication client . with batch reply ( 400 ) ,255,7,from,6,[78]
6735,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodeTest.java,test heartbeat with instance info from peer,@ test public void   (  )  throws  throwable  {   instance info instance info from peer =  cluster sample data . new instance info ( 2 )  ;  http replication client . with network status code ( 200 )  ;  http replication client . with batch reply ( 400 ) ,255,7,peer,7,[83]
6736,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodeTest.java,test registration batch replication,@ test public void   (  )  throws  exception  {  create peer eureka node (  )  . register ( instance info )  ;   replication instance replication instance = expect single batch request (  )  ;  assert that ( replication instance . get action (  )  is ( eq,255,4,test,1,[2]
6737,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodeTest.java,test registration batch replication,@ test public void   (  )  throws  exception  {  create peer eureka node (  )  . register ( instance info )  ;   replication instance replication instance = expect single batch request (  )  ;  assert that ( replication instance . get action (  )  is ( eq,255,4,registration,2,[]
6738,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodeTest.java,test registration batch replication,@ test public void   (  )  throws  exception  {  create peer eureka node (  )  . register ( instance info )  ;   replication instance replication instance = expect single batch request (  )  ;  assert that ( replication instance . get action (  )  is ( eq,255,4,batch,3,[171]
6739,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodeTest.java,test registration batch replication,@ test public void   (  )  throws  exception  {  create peer eureka node (  )  . register ( instance info )  ;   replication instance replication instance = expect single batch request (  )  ;  assert that ( replication instance . get action (  )  is ( eq,255,4,replication,4,"[113, 134, 208]"
6740,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodeTest.java,test status update batch replication,@ test public void   (  )  throws  throwable  {  create peer eureka node (  )  . status update ( instance info . get app name (  )  instance info . get id (  )   instance status . down instance info )  ;   replication instance replication instance = expec,255,5,test,1,[2]
6741,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodeTest.java,test status update batch replication,@ test public void   (  )  throws  throwable  {  create peer eureka node (  )  . status update ( instance info . get app name (  )  instance info . get id (  )   instance status . down instance info )  ;   replication instance replication instance = expec,255,5,status,2,"[81, 171]"
6742,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodeTest.java,test status update batch replication,@ test public void   (  )  throws  throwable  {  create peer eureka node (  )  . status update ( instance info . get app name (  )  instance info . get id (  )   instance status . down instance info )  ;   replication instance replication instance = expec,255,5,update,3,[88]
6743,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodeTest.java,test status update batch replication,@ test public void   (  )  throws  throwable  {  create peer eureka node (  )  . status update ( instance info . get app name (  )  instance info . get id (  )   instance status . down instance info )  ;   replication instance replication instance = expec,255,5,batch,4,[]
6744,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodeTest.java,test status update batch replication,@ test public void   (  )  throws  throwable  {  create peer eureka node (  )  . status update ( instance info . get app name (  )  instance info . get id (  )   instance status . down instance info )  ;   replication instance replication instance = expec,255,5,replication,5,"[206, 227]"
6745,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableInstanceReplicationTask.java, testable instance replication task,  (  string peer node name  string app name  string id  action action int reply status code int network failures repeat count )  {  super ( peer node name action app name id )  ;  this . reply status code = reply status code ;  this . network failures repeat count = network failures repeat count ;   }  ,304,4,testable,1,[]
6746,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableInstanceReplicationTask.java, testable instance replication task,  (  string peer node name  string app name  string id  action action int reply status code int network failures repeat count )  {  super ( peer node name action app name id )  ;  this . reply status code = reply status code ;  this . network failures repeat count = network failures repeat count ;   }  ,304,4,instance,2,[]
6747,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableInstanceReplicationTask.java, testable instance replication task,  (  string peer node name  string app name  string id  action action int reply status code int network failures repeat count )  {  super ( peer node name action app name id )  ;  this . reply status code = reply status code ;  this . network failures repeat count = network failures repeat count ;   }  ,304,4,replication,3,[]
6748,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableInstanceReplicationTask.java, testable instance replication task,  (  string peer node name  string app name  string id  action action int reply status code int network failures repeat count )  {  super ( peer node name action app name id )  ;  this . reply status code = reply status code ;  this . network failures repeat count = network failures repeat count ;   }  ,304,4,task,4,[]
6749,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableInstanceReplicationTask.java,a replication task,public static  testable replication task builder   (  )  {  return new  testable replication task builder (  )  ;   }  ,119,3,a,1,"[9, 19, 30, 37, 76, 87, 94]"
6750,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableInstanceReplicationTask.java,a replication task,public static  testable replication task builder   (  )  {  return new  testable replication task builder (  )  ;   }  ,119,3,replication,2,"[24, 81]"
6751,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableInstanceReplicationTask.java,a replication task,public static  testable replication task builder   (  )  {  return new  testable replication task builder (  )  ;   }  ,119,3,task,3,"[36, 93]"
6752,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableInstanceReplicationTask.java,build,"public  testable instance replication task   (  )  {  return new  testable instance replication task ( ""peer node name#test"" app   name ""id#""  +  auto id +  +  action reply status code network failures repeat count )  ;   }  ",225,1,build,1,[]
6753,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableInstanceReplicationTask.java,execute,"@ override public  eureka http response <  void >    (  )  throws  throwable  {  if  ( triggered network failures  <  network failures repeat count )   {  triggered network failures +  +  ;  throw new io exception ( ""simulated network failure"" )  ;   }  r",255,1,execute,1,[]
6754,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableInstanceReplicationTask.java,get processing state,public  processing state   (  )  {  return processing state . get (  )  ;   }  ,79,3,get,1,[62]
6755,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableInstanceReplicationTask.java,get processing state,public  processing state   (  )  {  return processing state . get (  )  ;   }  ,79,3,processing,2,"[8, 43]"
6756,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableInstanceReplicationTask.java,get processing state,public  processing state   (  )  {  return processing state . get (  )  ;   }  ,79,3,state,3,"[19, 54]"
6757,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableInstanceReplicationTask.java,handle failure,@ override public void   ( int status code  object response entity )  throws  throwable  {  processing state . compare and set (  processing state .  pending  processing state .  failed )  ;   }  ,196,2,handle,1,[]
6758,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableInstanceReplicationTask.java,handle failure,@ override public void   ( int status code  object response entity )  throws  throwable  {  processing state . compare and set (  processing state .  pending  processing state .  failed )  ;   }  ,196,2,failure,2,[]
6759,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableInstanceReplicationTask.java,handle success,@ override public void   (  )  {  processing state . compare and set (  processing state .  pending  processing state .  finished )  ;   }  ,140,2,handle,1,[]
6760,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableInstanceReplicationTask.java,handle success,@ override public void   (  )  {  processing state . compare and set (  processing state .  pending  processing state .  finished )  ;   }  ,140,2,success,2,[]
6761,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableInstanceReplicationTask.java,with action,public  testable replication task builder   (  action action )  {  this . action = action ;  return this ;   }  ,112,2,with,1,[]
6762,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableInstanceReplicationTask.java,with action,public  testable replication task builder   (  action action )  {  this . action = action ;  return this ;   }  ,112,2,action,2,"[47, 54, 74, 83]"
6763,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableInstanceReplicationTask.java,with network failures,public  testable replication task builder   ( int network failures repeat count )  {  this . network failures repeat count = network failures repeat count ;  return this ;   }  ,177,3,with,1,[]
6764,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableInstanceReplicationTask.java,with network failures,public  testable replication task builder   ( int network failures repeat count )  {  this . network failures repeat count = network failures repeat count ;  return this ;   }  ,177,3,network,2,"[50, 93, 125]"
6765,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableInstanceReplicationTask.java,with network failures,public  testable replication task builder   ( int network failures repeat count )  {  this . network failures repeat count = network failures repeat count ;  return this ;   }  ,177,3,failures,3,"[58, 101, 133]"
6766,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableInstanceReplicationTask.java,with reply status code,public  testable replication task builder   ( int reply status code )  {  this . reply status code = reply status code ;  return this ;   }  ,141,4,with,1,[]
6767,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableInstanceReplicationTask.java,with reply status code,public  testable replication task builder   ( int reply status code )  {  this . reply status code = reply status code ;  return this ;   }  ,141,4,reply,2,"[50, 81, 101]"
6768,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableInstanceReplicationTask.java,with reply status code,public  testable replication task builder   ( int reply status code )  {  this . reply status code = reply status code ;  return this ;   }  ,141,4,status,3,"[56, 87, 107]"
6769,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableInstanceReplicationTask.java,with reply status code,public  testable replication task builder   ( int reply status code )  {  this . reply status code = reply status code ;  return this ;   }  ,141,4,code,4,"[63, 94, 114]"
6770,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\DefaultEurekaServerConfigTest.java,test get global app white list,"@ test public void   (  )  throws  exception  {   string whitelist app = ""myapp"" ;   configuration manager . get config instance (  )  . set property ( ""eureka . remote region . global . app white list"" whitelist app )  ;   default eureka server config co",255,6,test,1,[2]
6771,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\DefaultEurekaServerConfigTest.java,test get global app white list,"@ test public void   (  )  throws  exception  {   string whitelist app = ""myapp"" ;   configuration manager . get config instance (  )  . set property ( ""eureka . remote region . global . app white list"" whitelist app )  ;   default eureka server config co",255,6,get,2,[109]
6772,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\DefaultEurekaServerConfigTest.java,test get global app white list,"@ test public void   (  )  throws  exception  {   string whitelist app = ""myapp"" ;   configuration manager . get config instance (  )  . set property ( ""eureka . remote region . global . app white list"" whitelist app )  ;   default eureka server config co",255,6,global,3,[178]
6773,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\DefaultEurekaServerConfigTest.java,test get global app white list,"@ test public void   (  )  throws  exception  {   string whitelist app = ""myapp"" ;   configuration manager . get config instance (  )  . set property ( ""eureka . remote region . global . app white list"" whitelist app )  ;   default eureka server config co",255,6,app,4,"[67, 76, 187, 213]"
6774,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\DefaultEurekaServerConfigTest.java,test get global app white list,"@ test public void   (  )  throws  exception  {   string whitelist app = ""myapp"" ;   configuration manager . get config instance (  )  . set property ( ""eureka . remote region . global . app white list"" whitelist app )  ;   default eureka server config co",255,6,white,5,"[57, 191, 203]"
6775,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\DefaultEurekaServerConfigTest.java,test get global app white list,"@ test public void   (  )  throws  exception  {   string whitelist app = ""myapp"" ;   configuration manager . get config instance (  )  . set property ( ""eureka . remote region . global . app white list"" whitelist app )  ;   default eureka server config co",255,6,list,6,"[62, 197, 208]"
6776,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\DefaultEurekaServerConfigTest.java,test get region app white list,"@ test public void   (  )  throws  exception  {   string global white list app = ""myapp"" ;   string region white list app = ""myapp"" ;   configuration manager . get config instance (  )  . set property ( ""eureka . remote region . global . app white list"" g",255,6,test,1,[2]
6777,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\DefaultEurekaServerConfigTest.java,test get region app white list,"@ test public void   (  )  throws  exception  {   string global white list app = ""myapp"" ;   string region white list app = ""myapp"" ;   configuration manager . get config instance (  )  . set property ( ""eureka . remote region . global . app white list"" g",255,6,get,2,[160]
6778,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\DefaultEurekaServerConfigTest.java,test get region app white list,"@ test public void   (  )  throws  exception  {   string global white list app = ""myapp"" ;   string region white list app = ""myapp"" ;   configuration manager . get config instance (  )  . set property ( ""eureka . remote region . global . app white list"" g",255,6,region,3,"[100, 220]"
6779,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\DefaultEurekaServerConfigTest.java,test get region app white list,"@ test public void   (  )  throws  exception  {   string global white list app = ""myapp"" ;   string region white list app = ""myapp"" ;   configuration manager . get config instance (  )  . set property ( ""eureka . remote region . global . app white list"" g",255,6,app,4,"[75, 84, 118, 127, 238]"
6780,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\DefaultEurekaServerConfigTest.java,test get region app white list,"@ test public void   (  )  throws  exception  {   string global white list app = ""myapp"" ;   string region white list app = ""myapp"" ;   configuration manager . get config instance (  )  . set property ( ""eureka . remote region . global . app white list"" g",255,6,white,5,"[64, 107, 242]"
6781,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\DefaultEurekaServerConfigTest.java,test get region app white list,"@ test public void   (  )  throws  exception  {   string global white list app = ""myapp"" ;   string region white list app = ""myapp"" ;   configuration manager . get config instance (  )  . set property ( ""eureka . remote region . global . app white list"" g",255,6,list,6,"[70, 113, 248]"
6782,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\DefaultEurekaServerConfigTest.java,test remote region urls with name region,"@ test public void   (  )  throws  exception  {   string region1 = ""myregion1"" ;   string region1url = ""http: /  / local:888 / eee"" ;   configuration manager . get config instance (  )  . set property ( ""eureka . remote region urls with name"" region1  +  ",255,7,test,1,[2]
6783,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\DefaultEurekaServerConfigTest.java,test remote region urls with name region,"@ test public void   (  )  throws  exception  {   string region1 = ""myregion1"" ;   string region1url = ""http: /  / local:888 / eee"" ;   configuration manager . get config instance (  )  . set property ( ""eureka . remote region urls with name"" region1  +  ",255,7,remote,2,[213]
6784,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\DefaultEurekaServerConfigTest.java,test remote region urls with name region,"@ test public void   (  )  throws  exception  {   string region1 = ""myregion1"" ;   string region1url = ""http: /  / local:888 / eee"" ;   configuration manager . get config instance (  )  . set property ( ""eureka . remote region urls with name"" region1  +  ",255,7,region,3,"[57, 70, 90, 220, 243]"
6785,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\DefaultEurekaServerConfigTest.java,test remote region urls with name region,"@ test public void   (  )  throws  exception  {   string region1 = ""myregion1"" ;   string region1url = ""http: /  / local:888 / eee"" ;   configuration manager . get config instance (  )  . set property ( ""eureka . remote region urls with name"" region1  +  ",255,7,urls,4,[227]
6786,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\DefaultEurekaServerConfigTest.java,test remote region urls with name region,"@ test public void   (  )  throws  exception  {   string region1 = ""myregion1"" ;   string region1url = ""http: /  / local:888 / eee"" ;   configuration manager . get config instance (  )  . set property ( ""eureka . remote region urls with name"" region1  +  ",255,7,with,5,[232]
6787,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\DefaultEurekaServerConfigTest.java,test remote region urls with name region,"@ test public void   (  )  throws  exception  {   string region1 = ""myregion1"" ;   string region1url = ""http: /  / local:888 / eee"" ;   configuration manager . get config instance (  )  . set property ( ""eureka . remote region urls with name"" region1  +  ",255,7,name,6,[237]
6788,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\DefaultEurekaServerConfigTest.java,test remote region urls with name region,"@ test public void   (  )  throws  exception  {   string region1 = ""myregion1"" ;   string region1url = ""http: /  / local:888 / eee"" ;   configuration manager . get config instance (  )  . set property ( ""eureka . remote region urls with name"" region1  +  ",255,7,region,7,"[57, 70, 90, 220, 243]"
6789,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\DefaultEurekaServerConfigTest.java,test remote region urls with name regions,"@ test public void   (  )  throws  exception  {   string region1 = ""myregion1"" ;   string region1url = ""http: /  / local:888 / eee"" ;   string region2 = ""myregion2"" ;   string region2url = ""http: /  / local:888 / eee"" ;   configuration manager . get confi",255,7,test,1,[2]
6790,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\DefaultEurekaServerConfigTest.java,test remote region urls with name regions,"@ test public void   (  )  throws  exception  {   string region1 = ""myregion1"" ;   string region1url = ""http: /  / local:888 / eee"" ;   string region2 = ""myregion2"" ;   string region2url = ""http: /  / local:888 / eee"" ;   configuration manager . get confi",255,7,remote,2,[]
6791,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\DefaultEurekaServerConfigTest.java,test remote region urls with name regions,"@ test public void   (  )  throws  exception  {   string region1 = ""myregion1"" ;   string region1url = ""http: /  / local:888 / eee"" ;   string region2 = ""myregion2"" ;   string region2url = ""http: /  / local:888 / eee"" ;   configuration manager . get confi",255,7,region,3,"[57, 70, 90, 143, 156, 176]"
6792,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\DefaultEurekaServerConfigTest.java,test remote region urls with name regions,"@ test public void   (  )  throws  exception  {   string region1 = ""myregion1"" ;   string region1url = ""http: /  / local:888 / eee"" ;   string region2 = ""myregion2"" ;   string region2url = ""http: /  / local:888 / eee"" ;   configuration manager . get confi",255,7,urls,4,[]
6793,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\DefaultEurekaServerConfigTest.java,test remote region urls with name regions,"@ test public void   (  )  throws  exception  {   string region1 = ""myregion1"" ;   string region1url = ""http: /  / local:888 / eee"" ;   string region2 = ""myregion2"" ;   string region2url = ""http: /  / local:888 / eee"" ;   configuration manager . get confi",255,7,with,5,[]
6794,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\DefaultEurekaServerConfigTest.java,test remote region urls with name regions,"@ test public void   (  )  throws  exception  {   string region1 = ""myregion1"" ;   string region1url = ""http: /  / local:888 / eee"" ;   string region2 = ""myregion2"" ;   string region2url = ""http: /  / local:888 / eee"" ;   configuration manager . get confi",255,7,name,6,[]
6795,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\DefaultEurekaServerConfigTest.java,test remote region urls with name regions,"@ test public void   (  )  throws  exception  {   string region1 = ""myregion1"" ;   string region1url = ""http: /  / local:888 / eee"" ;   string region2 = ""myregion2"" ;   string region2url = ""http: /  / local:888 / eee"" ;   configuration manager . get confi",255,7,regions,7,[]
6796,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\ReplicationTaskProcessorTest.java,set up,"@ before public void   (  )  throws  exception  {  replication task processor = new  replication task processor ( ""peer id#test"" replication client )  ;   }  ",158,2,set,1,[]
6797,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\ReplicationTaskProcessorTest.java,set up,"@ before public void   (  )  throws  exception  {  replication task processor = new  replication task processor ( ""peer id#test"" replication client )  ;   }  ",158,2,up,2,[]
6798,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\ReplicationTaskProcessorTest.java,test batchable task congestion failure handling,@ test public void   (  )  throws  exception  {   testable instance replication task task = a replication task (  )  . build (  )  ;  replication client . with network status code ( 503 )  ;   processing result status = replication task processor . proces,255,6,test,1,"[2, 50]"
6799,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\ReplicationTaskProcessorTest.java,test batchable task congestion failure handling,@ test public void   (  )  throws  exception  {   testable instance replication task task = a replication task (  )  . build (  )  ;  replication client . with network status code ( 503 )  ;   processing result status = replication task processor . proces,255,6,batchable,2,[]
6800,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\ReplicationTaskProcessorTest.java,test batchable task congestion failure handling,@ test public void   (  )  throws  exception  {   testable instance replication task task = a replication task (  )  . build (  )  ;  replication client . with network status code ( 503 )  ;   processing result status = replication task processor . proces,255,6,task,3,"[80, 85, 106, 232]"
6801,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\ReplicationTaskProcessorTest.java,test batchable task congestion failure handling,@ test public void   (  )  throws  exception  {   testable instance replication task task = a replication task (  )  . build (  )  ;  replication client . with network status code ( 503 )  ;   processing result status = replication task processor . proces,255,6,congestion,4,[]
6802,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\ReplicationTaskProcessorTest.java,test batchable task congestion failure handling,@ test public void   (  )  throws  exception  {   testable instance replication task task = a replication task (  )  . build (  )  ;  replication client . with network status code ( 503 )  ;   processing result status = replication task processor . proces,255,6,failure,5,[]
6803,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\ReplicationTaskProcessorTest.java,test batchable task congestion failure handling,@ test public void   (  )  throws  exception  {   testable instance replication task task = a replication task (  )  . build (  )  ;  replication client . with network status code ( 503 )  ;   processing result status = replication task processor . proces,255,6,handling,6,[]
6804,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\ReplicationTaskProcessorTest.java,test batchable task list execution,@ test public void   (  )  throws  exception  {   testable instance replication task task = a replication task (  )  . build (  )  ;  replication client . with batch reply ( 200 )  ;  replication client . with network status code ( 200 )  ;   processing r,255,5,test,1,"[2, 50]"
6805,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\ReplicationTaskProcessorTest.java,test batchable task list execution,@ test public void   (  )  throws  exception  {   testable instance replication task task = a replication task (  )  . build (  )  ;  replication client . with batch reply ( 200 )  ;  replication client . with network status code ( 200 )  ;   processing r,255,5,batchable,2,[]
6806,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\ReplicationTaskProcessorTest.java,test batchable task list execution,@ test public void   (  )  throws  exception  {   testable instance replication task task = a replication task (  )  . build (  )  ;  replication client . with batch reply ( 200 )  ;  replication client . with network status code ( 200 )  ;   processing r,255,5,task,3,"[80, 85, 106]"
6807,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\ReplicationTaskProcessorTest.java,test batchable task list execution,@ test public void   (  )  throws  exception  {   testable instance replication task task = a replication task (  )  . build (  )  ;  replication client . with batch reply ( 200 )  ;  replication client . with network status code ( 200 )  ;   processing r,255,5,list,4,[]
6808,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\ReplicationTaskProcessorTest.java,test batchable task list execution,@ test public void   (  )  throws  exception  {   testable instance replication task task = a replication task (  )  . build (  )  ;  replication client . with batch reply ( 200 )  ;  replication client . with network status code ( 200 )  ;   processing r,255,5,execution,5,[]
6809,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\ReplicationTaskProcessorTest.java,test batchable task network failure handling,@ test public void   (  )  throws  exception  {   testable instance replication task task = a replication task (  )  . build (  )  ;  replication client . with network error ( 1 )  ;   processing result status = replication task processor . process (  col,255,6,test,1,"[2, 50]"
6810,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\ReplicationTaskProcessorTest.java,test batchable task network failure handling,@ test public void   (  )  throws  exception  {   testable instance replication task task = a replication task (  )  . build (  )  ;  replication client . with network error ( 1 )  ;   processing result status = replication task processor . process (  col,255,6,batchable,2,[]
6811,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\ReplicationTaskProcessorTest.java,test batchable task network failure handling,@ test public void   (  )  throws  exception  {   testable instance replication task task = a replication task (  )  . build (  )  ;  replication client . with network error ( 1 )  ;   processing result status = replication task processor . process (  col,255,6,task,3,"[80, 85, 106, 224]"
6812,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\ReplicationTaskProcessorTest.java,test batchable task network failure handling,@ test public void   (  )  throws  exception  {   testable instance replication task task = a replication task (  )  . build (  )  ;  replication client . with network error ( 1 )  ;   processing result status = replication task processor . process (  col,255,6,network,4,[160]
6813,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\ReplicationTaskProcessorTest.java,test batchable task network failure handling,@ test public void   (  )  throws  exception  {   testable instance replication task task = a replication task (  )  . build (  )  ;  replication client . with network error ( 1 )  ;   processing result status = replication task processor . process (  col,255,6,failure,5,[]
6814,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\ReplicationTaskProcessorTest.java,test batchable task network failure handling,@ test public void   (  )  throws  exception  {   testable instance replication task task = a replication task (  )  . build (  )  ;  replication client . with network error ( 1 )  ;   processing result status = replication task processor . process (  col,255,6,handling,6,[]
6815,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\ReplicationTaskProcessorTest.java,test batchable task network read time out handling,@ test public void   (  )  throws  exception  {   testable instance replication task task = a replication task (  )  . build (  )  ;  replication client . with readtime out ( 1 )  ;   processing result status = replication task processor . process (  coll,255,8,test,1,"[2, 50]"
6816,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\ReplicationTaskProcessorTest.java,test batchable task network read time out handling,@ test public void   (  )  throws  exception  {   testable instance replication task task = a replication task (  )  . build (  )  ;  replication client . with readtime out ( 1 )  ;   processing result status = replication task processor . process (  coll,255,8,batchable,2,[]
6817,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\ReplicationTaskProcessorTest.java,test batchable task network read time out handling,@ test public void   (  )  throws  exception  {   testable instance replication task task = a replication task (  )  . build (  )  ;  replication client . with readtime out ( 1 )  ;   processing result status = replication task processor . process (  coll,255,8,task,3,"[80, 85, 106, 223]"
6818,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\ReplicationTaskProcessorTest.java,test batchable task network read time out handling,@ test public void   (  )  throws  exception  {   testable instance replication task task = a replication task (  )  . build (  )  ;  replication client . with readtime out ( 1 )  ;   processing result status = replication task processor . process (  coll,255,8,network,4,[]
6819,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\ReplicationTaskProcessorTest.java,test batchable task network read time out handling,@ test public void   (  )  throws  exception  {   testable instance replication task task = a replication task (  )  . build (  )  ;  replication client . with readtime out ( 1 )  ;   processing result status = replication task processor . process (  coll,255,8,read,5,[160]
6820,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\ReplicationTaskProcessorTest.java,test batchable task network read time out handling,@ test public void   (  )  throws  exception  {   testable instance replication task task = a replication task (  )  . build (  )  ;  replication client . with readtime out ( 1 )  ;   processing result status = replication task processor . process (  coll,255,8,time,6,[164]
6821,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\ReplicationTaskProcessorTest.java,test batchable task network read time out handling,@ test public void   (  )  throws  exception  {   testable instance replication task task = a replication task (  )  . build (  )  ;  replication client . with readtime out ( 1 )  ;   processing result status = replication task processor . process (  coll,255,8,out,7,[169]
6822,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\ReplicationTaskProcessorTest.java,test batchable task network read time out handling,@ test public void   (  )  throws  exception  {   testable instance replication task task = a replication task (  )  . build (  )  ;  replication client . with readtime out ( 1 )  ;   processing result status = replication task processor . process (  coll,255,8,handling,8,[]
6823,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\ReplicationTaskProcessorTest.java,test batchable task permanent failure handling,@ test public void   (  )  throws  exception  {   testable instance replication task task = a replication task (  )  . build (  )  ;   instance info instance info from peer =  instance info generator . take one (  )  ;  replication client . with network s,255,6,test,1,"[2, 50]"
6824,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\ReplicationTaskProcessorTest.java,test batchable task permanent failure handling,@ test public void   (  )  throws  exception  {   testable instance replication task task = a replication task (  )  . build (  )  ;   instance info instance info from peer =  instance info generator . take one (  )  ;  replication client . with network s,255,6,batchable,2,[]
6825,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\ReplicationTaskProcessorTest.java,test batchable task permanent failure handling,@ test public void   (  )  throws  exception  {   testable instance replication task task = a replication task (  )  . build (  )  ;   instance info instance info from peer =  instance info generator . take one (  )  ;  replication client . with network s,255,6,task,3,"[80, 85, 106]"
6826,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\ReplicationTaskProcessorTest.java,test batchable task permanent failure handling,@ test public void   (  )  throws  exception  {   testable instance replication task task = a replication task (  )  . build (  )  ;   instance info instance info from peer =  instance info generator . take one (  )  ;  replication client . with network s,255,6,permanent,4,[]
6827,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\ReplicationTaskProcessorTest.java,test batchable task permanent failure handling,@ test public void   (  )  throws  exception  {   testable instance replication task task = a replication task (  )  . build (  )  ;   instance info instance info from peer =  instance info generator . take one (  )  ;  replication client . with network s,255,6,failure,5,[]
6828,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\ReplicationTaskProcessorTest.java,test batchable task permanent failure handling,@ test public void   (  )  throws  exception  {   testable instance replication task task = a replication task (  )  . build (  )  ;   instance info instance info from peer =  instance info generator . take one (  )  ;  replication client . with network s,255,6,handling,6,[]
6829,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\ReplicationTaskProcessorTest.java,test non batchable task congestion failure handling,@ test public void   (  )  throws  exception  {   testable instance replication task task = a replication task (  )  . with action (  action .  heartbeat )  . with reply status code ( 503 )  . build (  )  ;   processing result status = replication task pr,255,7,test,1,"[2, 50]"
6830,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\ReplicationTaskProcessorTest.java,test non batchable task congestion failure handling,@ test public void   (  )  throws  exception  {   testable instance replication task task = a replication task (  )  . with action (  action .  heartbeat )  . with reply status code ( 503 )  . build (  )  ;   processing result status = replication task pr,255,7,non,2,[]
6831,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\ReplicationTaskProcessorTest.java,test non batchable task congestion failure handling,@ test public void   (  )  throws  exception  {   testable instance replication task task = a replication task (  )  . with action (  action .  heartbeat )  . with reply status code ( 503 )  . build (  )  ;   processing result status = replication task pr,255,7,batchable,3,[]
6832,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\ReplicationTaskProcessorTest.java,test non batchable task congestion failure handling,@ test public void   (  )  throws  exception  {   testable instance replication task task = a replication task (  )  . with action (  action .  heartbeat )  . with reply status code ( 503 )  . build (  )  ;   processing result status = replication task pr,255,7,task,4,"[80, 85, 106, 248]"
6833,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\ReplicationTaskProcessorTest.java,test non batchable task congestion failure handling,@ test public void   (  )  throws  exception  {   testable instance replication task task = a replication task (  )  . with action (  action .  heartbeat )  . with reply status code ( 503 )  . build (  )  ;   processing result status = replication task pr,255,7,congestion,5,[]
6834,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\ReplicationTaskProcessorTest.java,test non batchable task congestion failure handling,@ test public void   (  )  throws  exception  {   testable instance replication task task = a replication task (  )  . with action (  action .  heartbeat )  . with reply status code ( 503 )  . build (  )  ;   processing result status = replication task pr,255,7,failure,6,[]
6835,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\ReplicationTaskProcessorTest.java,test non batchable task congestion failure handling,@ test public void   (  )  throws  exception  {   testable instance replication task task = a replication task (  )  . with action (  action .  heartbeat )  . with reply status code ( 503 )  . build (  )  ;   processing result status = replication task pr,255,7,handling,7,[]
6836,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\ReplicationTaskProcessorTest.java,test non batchable task execution,@ test public void   (  )  throws  exception  {   testable instance replication task task = a replication task (  )  . with action (  action .  heartbeat )  . with reply status code ( 200 )  . build (  )  ;   processing result status = replication task pr,255,5,test,1,"[2, 50]"
6837,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\ReplicationTaskProcessorTest.java,test non batchable task execution,@ test public void   (  )  throws  exception  {   testable instance replication task task = a replication task (  )  . with action (  action .  heartbeat )  . with reply status code ( 200 )  . build (  )  ;   processing result status = replication task pr,255,5,non,2,[]
6838,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\ReplicationTaskProcessorTest.java,test non batchable task execution,@ test public void   (  )  throws  exception  {   testable instance replication task task = a replication task (  )  . with action (  action .  heartbeat )  . with reply status code ( 200 )  . build (  )  ;   processing result status = replication task pr,255,5,batchable,3,[]
6839,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\ReplicationTaskProcessorTest.java,test non batchable task execution,@ test public void   (  )  throws  exception  {   testable instance replication task task = a replication task (  )  . with action (  action .  heartbeat )  . with reply status code ( 200 )  . build (  )  ;   processing result status = replication task pr,255,5,task,4,"[80, 85, 106, 248]"
6840,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\ReplicationTaskProcessorTest.java,test non batchable task execution,@ test public void   (  )  throws  exception  {   testable instance replication task task = a replication task (  )  . with action (  action .  heartbeat )  . with reply status code ( 200 )  . build (  )  ;   processing result status = replication task pr,255,5,execution,5,[]
6841,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\ReplicationTaskProcessorTest.java,test non batchable task network failure handling,@ test public void   (  )  throws  exception  {   testable instance replication task task = a replication task (  )  . with action (  action .  heartbeat )  . with network failures ( 1 )  . build (  )  ;   processing result status = replication task proce,255,7,test,1,"[2, 50]"
6842,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\ReplicationTaskProcessorTest.java,test non batchable task network failure handling,@ test public void   (  )  throws  exception  {   testable instance replication task task = a replication task (  )  . with action (  action .  heartbeat )  . with network failures ( 1 )  . build (  )  ;   processing result status = replication task proce,255,7,non,2,[]
6843,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\ReplicationTaskProcessorTest.java,test non batchable task network failure handling,@ test public void   (  )  throws  exception  {   testable instance replication task task = a replication task (  )  . with action (  action .  heartbeat )  . with network failures ( 1 )  . build (  )  ;   processing result status = replication task proce,255,7,batchable,3,[]
6844,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\ReplicationTaskProcessorTest.java,test non batchable task network failure handling,@ test public void   (  )  throws  exception  {   testable instance replication task task = a replication task (  )  . with action (  action .  heartbeat )  . with network failures ( 1 )  . build (  )  ;   processing result status = replication task proce,255,7,task,4,"[80, 85, 106, 245]"
6845,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\ReplicationTaskProcessorTest.java,test non batchable task network failure handling,@ test public void   (  )  throws  exception  {   testable instance replication task task = a replication task (  )  . with action (  action .  heartbeat )  . with network failures ( 1 )  . build (  )  ;   processing result status = replication task proce,255,7,network,5,[164]
6846,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\ReplicationTaskProcessorTest.java,test non batchable task network failure handling,@ test public void   (  )  throws  exception  {   testable instance replication task task = a replication task (  )  . with action (  action .  heartbeat )  . with network failures ( 1 )  . build (  )  ;   processing result status = replication task proce,255,7,failure,6,[172]
6847,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\ReplicationTaskProcessorTest.java,test non batchable task network failure handling,@ test public void   (  )  throws  exception  {   testable instance replication task task = a replication task (  )  . with action (  action .  heartbeat )  . with network failures ( 1 )  . build (  )  ;   processing result status = replication task proce,255,7,handling,7,[]
6848,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\ReplicationTaskProcessorTest.java,test non batchable task permanent failure handling,@ test public void   (  )  throws  exception  {   testable instance replication task task = a replication task (  )  . with action (  action .  heartbeat )  . with reply status code ( 406 )  . build (  )  ;   processing result status = replication task pr,255,7,test,1,"[2, 50]"
6849,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\ReplicationTaskProcessorTest.java,test non batchable task permanent failure handling,@ test public void   (  )  throws  exception  {   testable instance replication task task = a replication task (  )  . with action (  action .  heartbeat )  . with reply status code ( 406 )  . build (  )  ;   processing result status = replication task pr,255,7,non,2,[]
6850,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\ReplicationTaskProcessorTest.java,test non batchable task permanent failure handling,@ test public void   (  )  throws  exception  {   testable instance replication task task = a replication task (  )  . with action (  action .  heartbeat )  . with reply status code ( 406 )  . build (  )  ;   processing result status = replication task pr,255,7,batchable,3,[]
6851,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\ReplicationTaskProcessorTest.java,test non batchable task permanent failure handling,@ test public void   (  )  throws  exception  {   testable instance replication task task = a replication task (  )  . with action (  action .  heartbeat )  . with reply status code ( 406 )  . build (  )  ;   processing result status = replication task pr,255,7,task,4,"[80, 85, 106, 248]"
6852,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\ReplicationTaskProcessorTest.java,test non batchable task permanent failure handling,@ test public void   (  )  throws  exception  {   testable instance replication task task = a replication task (  )  . with action (  action .  heartbeat )  . with reply status code ( 406 )  . build (  )  ;   processing result status = replication task pr,255,7,permanent,5,[]
6853,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\ReplicationTaskProcessorTest.java,test non batchable task permanent failure handling,@ test public void   (  )  throws  exception  {   testable instance replication task task = a replication task (  )  . with action (  action .  heartbeat )  . with reply status code ( 406 )  . build (  )  ;   processing result status = replication task pr,255,7,failure,6,[]
6854,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\ReplicationTaskProcessorTest.java,test non batchable task permanent failure handling,@ test public void   (  )  throws  exception  {   testable instance replication task task = a replication task (  )  . with action (  action .  heartbeat )  . with reply status code ( 406 )  . build (  )  ;   processing result status = replication task pr,255,7,handling,7,[]
6855,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableHttpReplicationClient.java, handled request,public   (  request type request type  object data )  {  this . request type = request type ;  this . data = data ;   }  ,121,2,handled,1,[]
6856,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableHttpReplicationClient.java, handled request,public   (  request type request type  object data )  {  this . request type = request type ;  this . data = data ;   }  ,121,2,request,2,"[12, 25, 64, 79]"
6857,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableHttpReplicationClient.java,cancel,@ override public  eureka http response <  void >    (  string app name  string id )  {  handled requests . add ( new  handled request (  request type .  cancel id )  )  ;  return  eureka http response . status ( network status codes[call counter . get an,255,1,cancel,1,[154]
6858,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableHttpReplicationClient.java,delete status override,@ override public  eureka http response <  void >    (  string app name  string id  instance info info )  {  handled requests . add ( new  handled request (  request type .  delete status override null )  )  ;  return  eureka http response . status ( netw,255,3,delete,1,[174]
6859,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableHttpReplicationClient.java,delete status override,@ override public  eureka http response <  void >    (  string app name  string id  instance info info )  {  handled requests . add ( new  handled request (  request type .  delete status override null )  )  ;  return  eureka http response . status ( netw,255,3,status,2,"[181, 242]"
6860,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableHttpReplicationClient.java,delete status override,@ override public  eureka http response <  void >    (  string app name  string id  instance info info )  {  handled requests . add ( new  handled request (  request type .  delete status override null )  )  ;  return  eureka http response . status ( netw,255,3,override,3,"[2, 188]"
6861,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableHttpReplicationClient.java,get application,"@ override public  eureka http response <  application >    (  string app name )  {  throw new  illegal state exception ( ""method not supported"" )  ;   }  ",155,2,get,1,[]
6862,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableHttpReplicationClient.java,get application,"@ override public  eureka http response <  application >    (  string app name )  {  throw new  illegal state exception ( ""method not supported"" )  ;   }  ",155,2,application,2,[43]
6863,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableHttpReplicationClient.java,get applications,"@ override public  eureka http response <  applications >    (  string .  .  .  regions )  {  throw new  illegal state exception ( ""method not supported"" )  ;   }  ",164,2,get,1,[]
6864,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableHttpReplicationClient.java,get applications,"@ override public  eureka http response <  applications >    (  string .  .  .  regions )  {  throw new  illegal state exception ( ""method not supported"" )  ;   }  ",164,2,applications,2,[43]
6865,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableHttpReplicationClient.java,get data,public  object   (  )  {  return data ;   }  ,45,2,get,1,[]
6866,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableHttpReplicationClient.java,get data,public  object   (  )  {  return data ;   }  ,45,2,data,2,[33]
6867,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableHttpReplicationClient.java,get delta,"@ override public  eureka http response <  applications >    (  string .  .  .  regions )  {  throw new  illegal state exception ( ""method not supported"" )  ;   }  ",164,2,get,1,[]
6868,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableHttpReplicationClient.java,get delta,"@ override public  eureka http response <  applications >    (  string .  .  .  regions )  {  throw new  illegal state exception ( ""method not supported"" )  ;   }  ",164,2,delta,2,[]
6869,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableHttpReplicationClient.java,get instance,"@ override public  eureka http response <  instance info >    (  string app name  string id )  {  throw new  illegal state exception ( ""method not supported"" )  ;   }  ",168,2,get,1,[]
6870,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableHttpReplicationClient.java,get instance,"@ override public  eureka http response <  instance info >    (  string app name  string id )  {  throw new  illegal state exception ( ""method not supported"" )  ;   }  ",168,2,instance,2,[43]
6871,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableHttpReplicationClient.java,get request type,public  request type   (  )  {  return request type ;   }  ,59,3,get,1,[]
6872,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableHttpReplicationClient.java,get request type,public  request type   (  )  {  return request type ;   }  ,59,3,request,2,"[8, 39]"
6873,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableHttpReplicationClient.java,get request type,public  request type   (  )  {  return request type ;   }  ,59,3,type,3,"[16, 47]"
6874,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableHttpReplicationClient.java,get secure vip,"@ override public  eureka http response <  applications >    (  string secure vip address  string .  .  .  regions )  {  throw new  illegal state exception ( ""method not supported"" )  ;   }  ",191,3,get,1,[]
6875,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableHttpReplicationClient.java,get secure vip,"@ override public  eureka http response <  applications >    (  string secure vip address  string .  .  .  regions )  {  throw new  illegal state exception ( ""method not supported"" )  ;   }  ",191,3,secure,2,[71]
6876,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableHttpReplicationClient.java,get secure vip,"@ override public  eureka http response <  applications >    (  string secure vip address  string .  .  .  regions )  {  throw new  illegal state exception ( ""method not supported"" )  ;   }  ",191,3,vip,3,[78]
6877,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableHttpReplicationClient.java,get vip,"@ override public  eureka http response <  applications >    (  string vip address  string .  .  .  regions )  {  throw new  illegal state exception ( ""method not supported"" )  ;   }  ",184,2,get,1,[]
6878,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableHttpReplicationClient.java,get vip,"@ override public  eureka http response <  applications >    (  string vip address  string .  .  .  regions )  {  throw new  illegal state exception ( ""method not supported"" )  ;   }  ",184,2,vip,2,[71]
6879,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableHttpReplicationClient.java,next handled request,public  handled request   ( long timeout  time unit time unit )  throws  interrupted exception  {  return handled requests . poll ( timeout time unit )  ;   }  ,160,3,next,1,[]
6880,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableHttpReplicationClient.java,next handled request,public  handled request   ( long timeout  time unit time unit )  throws  interrupted exception  {  return handled requests . poll ( timeout time unit )  ;   }  ,160,3,handled,2,"[8, 106]"
6881,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableHttpReplicationClient.java,next handled request,public  handled request   ( long timeout  time unit time unit )  throws  interrupted exception  {  return handled requests . poll ( timeout time unit )  ;   }  ,160,3,request,3,"[16, 114]"
6882,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableHttpReplicationClient.java,register,@ override public  eureka http response <  void >    (  instance info info )  {  handled requests . add ( new  handled request (  request type .  register info )  )  ;  return  eureka http response . status ( network status codes[call counter . get and in,255,1,register,1,[146]
6883,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableHttpReplicationClient.java,send heart beat,@ override public  eureka http response <  instance info >    (  string app name  string id  instance info info  instance status overridden status )  {  handled requests . add ( new  handled request (  request type .  heartbeat instance info from peer )  ,255,3,send,1,[]
6884,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableHttpReplicationClient.java,send heart beat,@ override public  eureka http response <  instance info >    (  string app name  string id  instance info info  instance status overridden status )  {  handled requests . add ( new  handled request (  request type .  heartbeat instance info from peer )  ,255,3,heart,2,[218]
6885,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableHttpReplicationClient.java,send heart beat,@ override public  eureka http response <  instance info >    (  string app name  string id  instance info info  instance status overridden status )  {  handled requests . add ( new  handled request (  request type .  heartbeat instance info from peer )  ,255,3,beat,3,[223]
6886,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableHttpReplicationClient.java,status update,@ override public  eureka http response <  void >    (  string app name  string id  instance status new status  instance info info )  {  handled requests . add ( new  handled request (  request type .  status update new status )  )  ;  return  eureka http,255,2,status,1,"[93, 104, 202, 220]"
6887,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableHttpReplicationClient.java,status update,@ override public  eureka http response <  void >    (  string app name  string id  instance status new status  instance info info )  {  handled requests . add ( new  handled request (  request type .  status update new status )  )  ;  return  eureka http,255,2,update,2,[209]
6888,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableHttpReplicationClient.java,submit batch updates,@ override public  eureka http response <  replication list response >    (  replication list replication list )  {  if  ( read time out counter . get (  )   <  readtime out repeat count )   {  read time out counter . increment and get (  )  ;  throw new ,255,3,submit,1,[]
6889,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableHttpReplicationClient.java,submit batch updates,@ override public  eureka http response <  replication list response >    (  replication list replication list )  {  if  ( read time out counter . get (  )   <  readtime out repeat count )   {  read time out counter . increment and get (  )  ;  throw new ,255,3,batch,2,[]
6890,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableHttpReplicationClient.java,submit batch updates,@ override public  eureka http response <  replication list response >    (  replication list replication list )  {  if  ( read time out counter . get (  )   <  readtime out repeat count )   {  read time out counter . increment and get (  )  ;  throw new ,255,3,updates,3,[]
6891,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableHttpReplicationClient.java,with batch reply,public void   ( int batch status code )  {  this . batch status code = batch status code ;   }  ,96,3,with,1,[]
6892,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableHttpReplicationClient.java,with batch reply,public void   ( int batch status code )  {  this . batch status code = batch status code ;   }  ,96,3,batch,2,"[20, 51, 71]"
6893,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableHttpReplicationClient.java,with batch reply,public void   ( int batch status code )  {  this . batch status code = batch status code ;   }  ,96,3,reply,3,[]
6894,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableHttpReplicationClient.java,with instance info,public void   (  instance info instance info from peer )  {  this . instance info from peer = instance info from peer ;   }  ,125,3,with,1,[]
6895,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableHttpReplicationClient.java,with instance info,public void   (  instance info instance info from peer )  {  this . instance info from peer = instance info from peer ;   }  ,125,3,instance,2,"[17, 31, 68, 94]"
6896,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableHttpReplicationClient.java,with instance info,public void   (  instance info instance info from peer )  {  this . instance info from peer = instance info from peer ;   }  ,125,3,info,3,"[26, 40, 77, 103]"
6897,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableHttpReplicationClient.java,with network error,public void   ( int network failures repeat count )  {  this . network failures repeat count = network failures repeat count ;   }  ,132,3,with,1,[]
6898,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableHttpReplicationClient.java,with network error,public void   ( int network failures repeat count )  {  this . network failures repeat count = network failures repeat count ;   }  ,132,3,network,2,"[20, 63, 95]"
6899,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableHttpReplicationClient.java,with network error,public void   ( int network failures repeat count )  {  this . network failures repeat count = network failures repeat count ;   }  ,132,3,error,3,[]
6900,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableHttpReplicationClient.java,with network status code,public void   ( int .  .  .  network status codes )  {  this . network status codes = network status codes ;   }  ,114,4,with,1,[]
6901,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableHttpReplicationClient.java,with network status code,public void   ( int .  .  .  network status codes )  {  this . network status codes = network status codes ;   }  ,114,4,network,2,"[29, 63, 86]"
6902,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableHttpReplicationClient.java,with network status code,public void   ( int .  .  .  network status codes )  {  this . network status codes = network status codes ;   }  ,114,4,status,3,"[37, 71, 94]"
6903,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableHttpReplicationClient.java,with network status code,public void   ( int .  .  .  network status codes )  {  this . network status codes = network status codes ;   }  ,114,4,code,4,"[44, 78, 101]"
6904,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableHttpReplicationClient.java,with processing delay,public void   ( long processing delay  time unit time unit )  {  this . processing delay ms = time unit . to millis ( processing delay )  ;   }  ,145,3,with,1,[]
6905,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableHttpReplicationClient.java,with processing delay,public void   ( long processing delay  time unit time unit )  {  this . processing delay ms = time unit . to millis ( processing delay )  ;   }  ,145,3,processing,2,"[21, 72, 118]"
6906,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableHttpReplicationClient.java,with processing delay,public void   ( long processing delay  time unit time unit )  {  this . processing delay ms = time unit . to millis ( processing delay )  ;   }  ,145,3,delay,3,"[32, 83, 129]"
6907,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableHttpReplicationClient.java,with readtime out,public void   ( int readtime out repeat count )  {  this . readtime out repeat count = readtime out repeat count ;   }  ,120,3,with,1,[]
6908,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableHttpReplicationClient.java,with readtime out,public void   ( int readtime out repeat count )  {  this . readtime out repeat count = readtime out repeat count ;   }  ,120,3,readtime,2,"[20, 59, 87]"
6909,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableHttpReplicationClient.java,with readtime out,public void   ( int readtime out repeat count )  {  this . readtime out repeat count = readtime out repeat count ;   }  ,120,3,out,3,"[29, 68, 96]"
6910,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\RateLimitingFilterTest.java,set up,"@ before public void   (  )  throws  exception  {   rate limiting filter . reset (  )  ;   configuration manager . get config instance (  )  . set property ( ""eureka . rate limiter . privileged clients"" python   client )  ;   configuration manager . get c",255,2,set,1,"[77, 143]"
6911,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\RateLimitingFilterTest.java,set up,"@ before public void   (  )  throws  exception  {   rate limiting filter . reset (  )  ;   configuration manager . get config instance (  )  . set property ( ""eureka . rate limiter . privileged clients"" python   client )  ;   configuration manager . get c",255,2,up,2,[]
6912,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\RateLimitingFilterTest.java,test custom client shedding,@ test public void   (  )  throws  exception  {  when request ( full   fetch custom   client )  ;  filter . do filter ( request response filter chain )  ;  filter . do filter ( request response filter chain )  ;  verify ( filter chain times ( 2 )  )  . do,255,4,test,1,[2]
6913,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\RateLimitingFilterTest.java,test custom client shedding,@ test public void   (  )  throws  exception  {  when request ( full   fetch custom   client )  ;  filter . do filter ( request response filter chain )  ;  filter . do filter ( request response filter chain )  ;  verify ( filter chain times ( 2 )  )  . do,255,4,custom,2,[77]
6914,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\RateLimitingFilterTest.java,test custom client shedding,@ test public void   (  )  throws  exception  {  when request ( full   fetch custom   client )  ;  filter . do filter ( request response filter chain )  ;  filter . do filter ( request response filter chain )  ;  verify ( filter chain times ( 2 )  )  . do,255,4,client,3,[86]
6915,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\RateLimitingFilterTest.java,test custom client shedding,@ test public void   (  )  throws  exception  {  when request ( full   fetch custom   client )  ;  filter . do filter ( request response filter chain )  ;  filter . do filter ( request response filter chain )  ;  verify ( filter chain times ( 2 )  )  . do,255,4,shedding,4,[]
6916,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\RateLimitingFilterTest.java,test custom client throttling candidates counter,"@ test public void   (  )  throws  exception  {   configuration manager . get config instance (  )  . set property ( ""eureka . rate limiter . enabled"" false )  ;  when request ( full   fetch custom   client )  ;  filter . do filter ( request response filt",255,6,test,1,[2]
6917,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\RateLimitingFilterTest.java,test custom client throttling candidates counter,"@ test public void   (  )  throws  exception  {   configuration manager . get config instance (  )  . set property ( ""eureka . rate limiter . enabled"" false )  ;  when request ( full   fetch custom   client )  ;  filter . do filter ( request response filt",255,6,custom,2,[191]
6918,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\RateLimitingFilterTest.java,test custom client throttling candidates counter,"@ test public void   (  )  throws  exception  {   configuration manager . get config instance (  )  . set property ( ""eureka . rate limiter . enabled"" false )  ;  when request ( full   fetch custom   client )  ;  filter . do filter ( request response filt",255,6,client,3,[200]
6919,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\RateLimitingFilterTest.java,test custom client throttling candidates counter,"@ test public void   (  )  throws  exception  {   configuration manager . get config instance (  )  . set property ( ""eureka . rate limiter . enabled"" false )  ;  when request ( full   fetch custom   client )  ;  filter . do filter ( request response filt",255,6,throttling,4,[]
6920,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\RateLimitingFilterTest.java,test custom client throttling candidates counter,"@ test public void   (  )  throws  exception  {   configuration manager . get config instance (  )  . set property ( ""eureka . rate limiter . enabled"" false )  ;  when request ( full   fetch custom   client )  ;  filter . do filter ( request response filt",255,6,candidates,5,[]
6921,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\RateLimitingFilterTest.java,test custom client throttling candidates counter,"@ test public void   (  )  throws  exception  {   configuration manager . get config instance (  )  . set property ( ""eureka . rate limiter . enabled"" false )  ;  when request ( full   fetch custom   client )  ;  filter . do filter ( request response filt",255,6,counter,6,[]
6922,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\RateLimitingFilterTest.java,test privileged client always served,@ test public void   (  )  throws  exception  {  when request ( full   fetch python   client )  ;  filter . do filter ( request response filter chain )  ;  when request ( delta   fetch  eureka client identity . default   client   name )  ;  filter . do fi,255,5,test,1,[2]
6923,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\RateLimitingFilterTest.java,test privileged client always served,@ test public void   (  )  throws  exception  {  when request ( full   fetch python   client )  ;  filter . do filter ( request response filter chain )  ;  when request ( delta   fetch  eureka client identity . default   client   name )  ;  filter . do fi,255,5,privileged,2,[]
6924,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\RateLimitingFilterTest.java,test privileged client always served,@ test public void   (  )  throws  exception  {  when request ( full   fetch python   client )  ;  filter . do filter ( request response filter chain )  ;  when request ( delta   fetch  eureka client identity . default   client   name )  ;  filter . do fi,255,5,client,3,"[86, 193, 221]"
6925,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\RateLimitingFilterTest.java,test privileged client always served,@ test public void   (  )  throws  exception  {  when request ( full   fetch python   client )  ;  filter . do filter ( request response filter chain )  ;  when request ( delta   fetch  eureka client identity . default   client   name )  ;  filter . do fi,255,5,always,4,[]
6926,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\RateLimitingFilterTest.java,test privileged client always served,@ test public void   (  )  throws  exception  {  when request ( full   fetch python   client )  ;  filter . do filter ( request response filter chain )  ;  when request ( delta   fetch  eureka client identity . default   client   name )  ;  filter . do fi,255,5,served,5,[]
6927,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\RateLimitingFilterTest.java,test standard clients throttling enforceable,"@ test public void   (  )  throws  exception  {   configuration manager . get config instance (  )  . set property ( ""eureka . rate limiter . throttle standard clients"" true )  ;  when request ( full   fetch  eureka client identity . default   client   na",255,5,test,1,[2]
6928,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\RateLimitingFilterTest.java,test standard clients throttling enforceable,"@ test public void   (  )  throws  exception  {   configuration manager . get config instance (  )  . set property ( ""eureka . rate limiter . throttle standard clients"" true )  ;  when request ( full   fetch  eureka client identity . default   client   na",255,5,standard,2,[151]
6929,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\RateLimitingFilterTest.java,test standard clients throttling enforceable,"@ test public void   (  )  throws  exception  {   configuration manager . get config instance (  )  . set property ( ""eureka . rate limiter . throttle standard clients"" true )  ;  when request ( full   fetch  eureka client identity . default   client   na",255,5,clients,3,[160]
6930,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\RateLimitingFilterTest.java,test standard clients throttling enforceable,"@ test public void   (  )  throws  exception  {   configuration manager . get config instance (  )  . set property ( ""eureka . rate limiter . throttle standard clients"" true )  ;  when request ( full   fetch  eureka client identity . default   client   na",255,5,throttling,4,[]
6931,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\RateLimitingFilterTest.java,test standard clients throttling enforceable,"@ test public void   (  )  throws  exception  {   configuration manager . get config instance (  )  . set property ( ""eureka . rate limiter . throttle standard clients"" true )  ;  when request ( full   fetch  eureka client identity . default   client   na",255,5,enforceable,5,[]
6932,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\RateLimitingFilterTest.java,when request,"private void   (  string path  string client )  {  when ( request . get method (  )  )  . then return ( ""get"" )  ;  when ( request . get requesturi (  )  )  . then return ( path )  ;  when ( request . get header (  abstract eureka identity . auth   name   header   key )  )  . then return ( client )  ;   }  ",308,2,when,1,"[51, 116, 184]"
6933,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\RateLimitingFilterTest.java,when request,"private void   (  string path  string client )  {  when ( request . get method (  )  )  . then return ( ""get"" )  ;  when ( request . get requesturi (  )  )  . then return ( path )  ;  when ( request . get header (  abstract eureka identity . auth   name   header   key )  )  . then return ( client )  ;   }  ",308,2,request,2,"[58, 123, 137, 191]"
6934,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\mock\MockRemoteEurekaServer.java, mock remote eureka server,"public   ( int port  map <  string  application >  application map  map <  string  application >  application delta map )  {  this . application map = application map ;  this . application delta map = application delta map ;   servlet handler handler = new  apps resource handler (  )  ;   eureka server config server config = new  default eureka server config (  )  ;   eureka server context server context = mock (  eureka server context . class )  ;  when ( server context . get server config (  )  )  . then return ( server config )  ;  handler . add filter with mapping (  server request auth filter . class "" / *"" 1 )  . set filter ( new  server request auth filter ( server context )  )  ;  handler . add filter with mapping (  rate limiting filter . class "" / *"" 1 )  . set filter ( new  rate limiting filter ( server context )  )  ;  server = new  server ( port )  ;  server . add handler ( handler )  ;   system . out . println (  string . format ( "" created eureka server mock with applications map %s and applications delta map %s"" stringify app map ( application map )  stringify app map ( application delta map )  )  )  ;   }  ",1141,4,mock,1,"[410, 983]"
6935,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\mock\MockRemoteEurekaServer.java, mock remote eureka server,"public   ( int port  map <  string  application >  application map  map <  string  application >  application delta map )  {  this . application map = application map ;  this . application delta map = application delta map ;   servlet handler handler = new  apps resource handler (  )  ;   eureka server config server config = new  default eureka server config (  )  ;   eureka server context server context = mock (  eureka server context . class )  ;  when ( server context . get server config (  )  )  . then return ( server config )  ;  handler . add filter with mapping (  server request auth filter . class "" / *"" 1 )  . set filter ( new  server request auth filter ( server context )  )  ;  handler . add filter with mapping (  rate limiting filter . class "" / *"" 1 )  . set filter ( new  rate limiting filter ( server context )  )  ;  server = new  server ( port )  ;  server . add handler ( handler )  ;   system . out . println (  string . format ( "" created eureka server mock with applications map %s and applications delta map %s"" stringify app map ( application map )  stringify app map ( application delta map )  )  )  ;   }  ",1141,4,remote,2,[]
6936,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\mock\MockRemoteEurekaServer.java, mock remote eureka server,"public   ( int port  map <  string  application >  application map  map <  string  application >  application delta map )  {  this . application map = application map ;  this . application delta map = application delta map ;   servlet handler handler = new  apps resource handler (  )  ;   eureka server config server config = new  default eureka server config (  )  ;   eureka server context server context = mock (  eureka server context . class )  ;  when ( server context . get server config (  )  )  . then return ( server config )  ;  handler . add filter with mapping (  server request auth filter . class "" / *"" 1 )  . set filter ( new  server request auth filter ( server context )  )  ;  handler . add filter with mapping (  rate limiting filter . class "" / *"" 1 )  . set filter ( new  rate limiting filter ( server context )  )  ;  server = new  server ( port )  ;  server . add handler ( handler )  ;   system . out . println (  string . format ( "" created eureka server mock with applications map %s and applications delta map %s"" stringify app map ( application map )  stringify app map ( application delta map )  )  )  ;   }  ",1141,4,eureka,3,"[290, 340, 371, 418, 969]"
6937,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\mock\MockRemoteEurekaServer.java, mock remote eureka server,"public   ( int port  map <  string  application >  application map  map <  string  application >  application delta map )  {  this . application map = application map ;  this . application delta map = application delta map ;   servlet handler handler = new  apps resource handler (  )  ;   eureka server config server config = new  default eureka server config (  )  ;   eureka server context server context = mock (  eureka server context . class )  ;  when ( server context . get server config (  )  )  . then return ( server config )  ;  handler . add filter with mapping (  server request auth filter . class "" / *"" 1 )  . set filter ( new  server request auth filter ( server context )  )  ;  handler . add filter with mapping (  rate limiting filter . class "" / *"" 1 )  . set filter ( new  rate limiting filter ( server context )  )  ;  server = new  server ( port )  ;  server . add handler ( handler )  ;   system . out . println (  string . format ( "" created eureka server mock with applications map %s and applications delta map %s"" stringify app map ( application map )  stringify app map ( application delta map )  )  )  ;   }  ",1141,4,server,4,"[297, 311, 347, 378, 393, 425, 461, 482, 521, 578, 645, 674, 819, 843, 857, 877, 976]"
6938,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\mock\MockRemoteEurekaServer.java,after,@ override protected void   (  )  {  try  {  stop (  )  ;   }  catch  (   exception e )   {   assert . fail ( e . get message (  )  )  ;   }   }  ,146,1,after,1,[]
6939,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\mock\MockRemoteEurekaServer.java,before,@ override protected void   (  )  throws  throwable  {  start (  )  ;   }  ,75,1,before,1,[]
6940,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\mock\MockRemoteEurekaServer.java,get port,public int   (  )  {  return port ;   }  ,41,2,get,1,[]
6941,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\mock\MockRemoteEurekaServer.java,get port,public int   (  )  {  return port ;   }  ,41,2,port,2,[29]
6942,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\mock\MockRemoteEurekaServer.java,handle,@ override public void   (  string target  http servlet request request  http servlet response response int dispatch )  throws io exception   servlet exception  {  if  ( simulate not ready )   {  response . set status (  http servlet response . sc   forbi,255,1,handle,1,[]
6943,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\mock\MockRemoteEurekaServer.java,is sent delta,public boolean   (  )  {  return sent delta ;   }  ,51,3,is,1,[]
6944,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\mock\MockRemoteEurekaServer.java,is sent delta,public boolean   (  )  {  return sent delta ;   }  ,51,3,sent,2,[33]
6945,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\mock\MockRemoteEurekaServer.java,is sent delta,public boolean   (  )  {  return sent delta ;   }  ,51,3,delta,3,[38]
6946,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\mock\MockRemoteEurekaServer.java,send ok response with content,"private void   (  request request  http servlet response response  string content )  throws io exception  {  response . set content type ( ""application / json ;  charset = utf - 8"" )  ;  response . set status (  http servlet response . sc   ok )  ;  response . get output stream (  )  . write ( content . get bytes ( ""utf - 8"" )  )  ;  response . get output stream (  )  . flush (  )  ;  request . set handled ( true )  ;   system . out . println ( "" eureka resource mock  sent response for request path: ""  +  request . get path info (  )   +  "" with content"" +  content )  ;   }  ",582,5,send,1,[]
6947,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\mock\MockRemoteEurekaServer.java,send ok response with content,"private void   (  request request  http servlet response response  string content )  throws io exception  {  response . set content type ( ""application / json ;  charset = utf - 8"" )  ;  response . set status (  http servlet response . sc   ok )  ;  response . get output stream (  )  . write ( content . get bytes ( ""utf - 8"" )  )  ;  response . get output stream (  )  . flush (  )  ;  request . set handled ( true )  ;   system . out . println ( "" eureka resource mock  sent response for request path: ""  +  request . get path info (  )   +  "" with content"" +  content )  ;   }  ",582,5,ok,2,[241]
6948,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\mock\MockRemoteEurekaServer.java,send ok response with content,"private void   (  request request  http servlet response response  string content )  throws io exception  {  response . set content type ( ""application / json ;  charset = utf - 8"" )  ;  response . set status (  http servlet response . sc   ok )  ;  response . get output stream (  )  . write ( content . get bytes ( ""utf - 8"" )  )  ;  response . get output stream (  )  . flush (  )  ;  request . set handled ( true )  ;   system . out . println ( "" eureka resource mock  sent response for request path: ""  +  request . get path info (  )   +  "" with content"" +  content )  ;   }  ",582,5,response,3,"[48, 57, 109, 187, 225, 250, 336, 478]"
6949,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\mock\MockRemoteEurekaServer.java,send ok response with content,"private void   (  request request  http servlet response response  string content )  throws io exception  {  response . set content type ( ""application / json ;  charset = utf - 8"" )  ;  response . set status (  http servlet response . sc   ok )  ;  response . get output stream (  )  . write ( content . get bytes ( ""utf - 8"" )  )  ;  response . get output stream (  )  . flush (  )  ;  request . set handled ( true )  ;   system . out . println ( "" eureka resource mock  sent response for request path: ""  +  request . get path info (  )   +  "" with content"" +  content )  ;   }  ",582,5,with,4,[547]
6950,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\mock\MockRemoteEurekaServer.java,send ok response with content,"private void   (  request request  http servlet response response  string content )  throws io exception  {  response . set content type ( ""application / json ;  charset = utf - 8"" )  ;  response . set status (  http servlet response . sc   ok )  ;  response . get output stream (  )  . write ( content . get bytes ( ""utf - 8"" )  )  ;  response . get output stream (  )  . flush (  )  ;  request . set handled ( true )  ;   system . out . println ( "" eureka resource mock  sent response for request path: ""  +  request . get path info (  )   +  "" with content"" +  content )  ;   }  ",582,5,content,5,"[74, 124, 295, 552, 564]"
6951,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\mock\MockRemoteEurekaServer.java,simulate not ready,public void   ( boolean simulate not ready )  {  this . simulate not ready = simulate not ready ;   }  ,103,3,simulate,1,"[24, 56, 77]"
6952,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\mock\MockRemoteEurekaServer.java,simulate not ready,public void   ( boolean simulate not ready )  {  this . simulate not ready = simulate not ready ;   }  ,103,3,not,2,"[33, 65, 86]"
6953,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\mock\MockRemoteEurekaServer.java,simulate not ready,public void   ( boolean simulate not ready )  {  this . simulate not ready = simulate not ready ;   }  ,103,3,ready,3,"[37, 69, 90]"
6954,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\mock\MockRemoteEurekaServer.java,start,public void   (  )  throws  exception  {  server . start (  )  ;  port = server . get connectors (  ) [0] . get local port (  )  ;   }  ,136,1,start,1,[51]
6955,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\mock\MockRemoteEurekaServer.java,stop,public void   (  )  throws  exception  {  server . stop (  )  ;   }  ,69,1,stop,1,[51]
6956,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\mock\MockRemoteEurekaServer.java,stringify app map,"private static  string   (  map <  string  application >  application map )  {   string builder builder = new  string builder (  )  ;  for  (   map .  entry <  string  application >  entry : application map . entry set (  )  )   {   string entry as string =  string . format ( "" {  name : %s   instance count: %d  } "" entry . get key (  )  entry . get value (  )  . get instances (  )  . size (  )  )  ;  builder . append ( entry as string )  ;   }  return builder . to string (  )  ;   }  ",490,3,stringify,1,[]
6957,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\mock\MockRemoteEurekaServer.java,stringify app map,"private static  string   (  map <  string  application >  application map )  {   string builder builder = new  string builder (  )  ;  for  (   map .  entry <  string  application >  entry : application map . entry set (  )  )   {   string entry as string =  string . format ( "" {  name : %s   instance count: %d  } "" entry . get key (  )  entry . get value (  )  . get instances (  )  . size (  )  )  ;  builder . append ( entry as string )  ;   }  return builder . to string (  )  ;   }  ",490,3,app,2,"[43, 58, 168, 191, 415]"
6958,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\mock\MockRemoteEurekaServer.java,stringify app map,"private static  string   (  map <  string  application >  application map )  {   string builder builder = new  string builder (  )  ;  for  (   map .  entry <  string  application >  entry : application map . entry set (  )  )   {   string entry as string =  string . format ( "" {  name : %s   instance count: %d  } "" entry . get key (  )  entry . get value (  )  . get instances (  )  . size (  )  )  ;  builder . append ( entry as string )  ;   }  return builder . to string (  )  ;   }  ",490,3,map,3,"[28, 70, 144, 203]"
6959,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\mock\MockRemoteEurekaServer.java,to json,private  string   (  applications apps )  throws io exception  {  return new  eureka json jackson codec (  )  . get object mapper (  applications . class )  . write value as string ( apps )  ;   }  ,198,2,to,1,[]
6960,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\mock\MockRemoteEurekaServer.java,to json,private  string   (  applications apps )  throws io exception  {  return new  eureka json jackson codec (  )  . get object mapper (  applications . class )  . write value as string ( apps )  ;   }  ,198,2,json,2,[85]
6961,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\AwsInstanceRegistryTest.java, test aws instance registry,public   (  eureka server config server config  eureka client config client config  server codecs server codecs  eureka client eureka client )  {  super ( server config client config server codecs eureka client )  ;   }  ,221,4,test,1,[]
6962,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\AwsInstanceRegistryTest.java, test aws instance registry,public   (  eureka server config server config  eureka client config client config  server codecs server codecs  eureka client eureka client )  {  super ( server config client config server codecs eureka client )  ;   }  ,221,4,aws,2,[]
6963,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\AwsInstanceRegistryTest.java, test aws instance registry,public   (  eureka server config server config  eureka client config client config  server codecs server codecs  eureka client eureka client )  {  super ( server config client config server codecs eureka client )  ;   }  ,221,4,instance,3,[]
6964,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\AwsInstanceRegistryTest.java, test aws instance registry,public   (  eureka server config server config  eureka client config client config  server codecs server codecs  eureka client eureka client )  {  super ( server config client config server codecs eureka client )  ;   }  ,221,4,registry,4,[]
6965,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\AwsInstanceRegistryTest.java,create local up instance with asg,"private static  instance info   (  string hostname )  {   instance info .  builder instance builder =  instance info .  builder . new builder (  )  ;  instance builder . set app name ( local   region   app   name )  ;  instance builder . set host name ( hostname )  ;  instance builder . setip addr ( ""10 . 10 . 101 . 1"" )  ;  instance builder . set data center info ( get amazon info ( hostname )  )  ;  instance builder . set lease info (  lease info .  builder . new builder (  )  . build (  )  )  ;  instance builder . set status (  instance status . up )  ;  instance builder . setasg name ( ""asg - yo - ho"" )  ;  return instance builder . build (  )  ;   }  ",664,6,create,1,[]
6966,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\AwsInstanceRegistryTest.java,create local up instance with asg,"private static  instance info   (  string hostname )  {   instance info .  builder instance builder =  instance info .  builder . new builder (  )  ;  instance builder . set app name ( local   region   app   name )  ;  instance builder . set host name ( hostname )  ;  instance builder . setip addr ( ""10 . 10 . 101 . 1"" )  ;  instance builder . set data center info ( get amazon info ( hostname )  )  ;  instance builder . set lease info (  lease info .  builder . new builder (  )  . build (  )  )  ;  instance builder . set status (  instance status . up )  ;  instance builder . setasg name ( ""asg - yo - ho"" )  ;  return instance builder . build (  )  ;   }  ",664,6,local,2,[185]
6967,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\AwsInstanceRegistryTest.java,create local up instance with asg,"private static  instance info   (  string hostname )  {   instance info .  builder instance builder =  instance info .  builder . new builder (  )  ;  instance builder . set app name ( local   region   app   name )  ;  instance builder . set host name ( hostname )  ;  instance builder . setip addr ( ""10 . 10 . 101 . 1"" )  ;  instance builder . set data center info ( get amazon info ( hostname )  )  ;  instance builder . set lease info (  lease info .  builder . new builder (  )  . build (  )  )  ;  instance builder . set status (  instance status . up )  ;  instance builder . setasg name ( ""asg - yo - ho"" )  ;  return instance builder . build (  )  ;   }  ",664,6,up,3,[555]
6968,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\AwsInstanceRegistryTest.java,create local up instance with asg,"private static  instance info   (  string hostname )  {   instance info .  builder instance builder =  instance info .  builder . new builder (  )  ;  instance builder . set app name ( local   region   app   name )  ;  instance builder . set host name ( hostname )  ;  instance builder . setip addr ( ""10 . 10 . 101 . 1"" )  ;  instance builder . set data center info ( get amazon info ( hostname )  )  ;  instance builder . set lease info (  lease info .  builder . new builder (  )  . build (  )  )  ;  instance builder . set status (  instance status . up )  ;  instance builder . setasg name ( ""asg - yo - ho"" )  ;  return instance builder . build (  )  ;   }  ",664,6,instance,4,"[16, 58, 83, 103, 151, 219, 269, 327, 405, 504, 537, 564, 626]"
6969,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\AwsInstanceRegistryTest.java,create local up instance with asg,"private static  instance info   (  string hostname )  {   instance info .  builder instance builder =  instance info .  builder . new builder (  )  ;  instance builder . set app name ( local   region   app   name )  ;  instance builder . set host name ( hostname )  ;  instance builder . setip addr ( ""10 . 10 . 101 . 1"" )  ;  instance builder . set data center info ( get amazon info ( hostname )  )  ;  instance builder . set lease info (  lease info .  builder . new builder (  )  . build (  )  )  ;  instance builder . set status (  instance status . up )  ;  instance builder . setasg name ( ""asg - yo - ho"" )  ;  return instance builder . build (  )  ;   }  ",664,6,with,5,[]
6970,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\AwsInstanceRegistryTest.java,create local up instance with asg,"private static  instance info   (  string hostname )  {   instance info .  builder instance builder =  instance info .  builder . new builder (  )  ;  instance builder . set app name ( local   region   app   name )  ;  instance builder . set host name ( hostname )  ;  instance builder . setip addr ( ""10 . 10 . 101 . 1"" )  ;  instance builder . set data center info ( get amazon info ( hostname )  )  ;  instance builder . set lease info (  lease info .  builder . new builder (  )  . build (  )  )  ;  instance builder . set status (  instance status . up )  ;  instance builder . setasg name ( ""asg - yo - ho"" )  ;  return instance builder . build (  )  ;   }  ",664,6,asg,6,"[586, 598]"
6971,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\AwsInstanceRegistryTest.java,get amazon info,"private static  amazon info   (  string instance host name )  {   amazon info .  builder az builder =  amazon info .  builder . new builder (  )  ;  az builder . add metadata (  amazon info .  meta data key . availability zone ""us - east - 1a"" )  ;  az builder . add metadata (  amazon info .  meta data key . instance id instance host name )  ;  az builder . add metadata (  amazon info .  meta data key . ami id ""xxx"" )  ;  az builder . add metadata (  amazon info .  meta data key . instance type ""xxx"" )  ;  az builder . add metadata (  amazon info .  meta data key . local ipv4 ""xxx"" )  ;  az builder . add metadata (  amazon info .  meta data key . public ipv4 ""xxx"" )  ;  az builder . add metadata (  amazon info .  meta data key . public hostname instance host name )  ;  return az builder . build (  )  ;   }  ",819,3,get,1,[]
6972,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\AwsInstanceRegistryTest.java,get amazon info,"private static  amazon info   (  string instance host name )  {   amazon info .  builder az builder =  amazon info .  builder . new builder (  )  ;  az builder . add metadata (  amazon info .  meta data key . availability zone ""us - east - 1a"" )  ;  az builder . add metadata (  amazon info .  meta data key . instance id instance host name )  ;  az builder . add metadata (  amazon info .  meta data key . ami id ""xxx"" )  ;  az builder . add metadata (  amazon info .  meta data key . instance type ""xxx"" )  ;  az builder . add metadata (  amazon info .  meta data key . local ipv4 ""xxx"" )  ;  az builder . add metadata (  amazon info .  meta data key . public ipv4 ""xxx"" )  ;  az builder . add metadata (  amazon info .  meta data key . public hostname instance host name )  ;  return az builder . build (  )  ;   }  ",819,3,amazon,2,"[16, 66, 103, 178, 279, 376, 455, 541, 624, 708]"
6973,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\AwsInstanceRegistryTest.java,get amazon info,"private static  amazon info   (  string instance host name )  {   amazon info .  builder az builder =  amazon info .  builder . new builder (  )  ;  az builder . add metadata (  amazon info .  meta data key . availability zone ""us - east - 1a"" )  ;  az builder . add metadata (  amazon info .  meta data key . instance id instance host name )  ;  az builder . add metadata (  amazon info .  meta data key . ami id ""xxx"" )  ;  az builder . add metadata (  amazon info .  meta data key . instance type ""xxx"" )  ;  az builder . add metadata (  amazon info .  meta data key . local ipv4 ""xxx"" )  ;  az builder . add metadata (  amazon info .  meta data key . public ipv4 ""xxx"" )  ;  az builder . add metadata (  amazon info .  meta data key . public hostname instance host name )  ;  return az builder . build (  )  ;   }  ",819,3,info,3,"[23, 73, 110, 185, 286, 383, 462, 548, 631, 715]"
6974,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\AwsInstanceRegistryTest.java,get data center info,@ override protected  data center info   (  )  {  return get amazon info ( local   region   instance   1   hostname )  ;   }  ,126,4,get,1,[57]
6975,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\AwsInstanceRegistryTest.java,get data center info,@ override protected  data center info   (  )  {  return get amazon info ( local   region   instance   1   hostname )  ;   }  ,126,4,data,2,[22]
6976,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\AwsInstanceRegistryTest.java,get data center info,@ override protected  data center info   (  )  {  return get amazon info ( local   region   instance   1   hostname )  ;   }  ,126,4,center,3,[27]
6977,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\AwsInstanceRegistryTest.java,get data center info,@ override protected  data center info   (  )  {  return get amazon info ( local   region   instance   1   hostname )  ;   }  ,126,4,info,4,"[34, 68]"
6978,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\AwsInstanceRegistryTest.java,get next server from eureka,@ override public  instance info   (  string virtual hostname boolean secure )  {  return null ;   }  ,102,5,get,1,[]
6979,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\AwsInstanceRegistryTest.java,get next server from eureka,@ override public  instance info   (  string virtual hostname boolean secure )  {  return null ;   }  ,102,5,next,2,[]
6980,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\AwsInstanceRegistryTest.java,get next server from eureka,@ override public  instance info   (  string virtual hostname boolean secure )  {  return null ;   }  ,102,5,server,3,[]
6981,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\AwsInstanceRegistryTest.java,get next server from eureka,@ override public  instance info   (  string virtual hostname boolean secure )  {  return null ;   }  ,102,5,from,4,[]
6982,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\AwsInstanceRegistryTest.java,get next server from eureka,@ override public  instance info   (  string virtual hostname boolean secure )  {  return null ;   }  ,102,5,eureka,5,[]
6983,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\AwsInstanceRegistryTest.java,is lease expiration enabled,@ override public boolean   (  )  {  return false ;   }  ,57,4,is,1,[]
6984,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\AwsInstanceRegistryTest.java,is lease expiration enabled,@ override public boolean   (  )  {  return false ;   }  ,57,4,lease,2,[]
6985,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\AwsInstanceRegistryTest.java,is lease expiration enabled,@ override public boolean   (  )  {  return false ;   }  ,57,4,expiration,3,[]
6986,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\AwsInstanceRegistryTest.java,is lease expiration enabled,@ override public boolean   (  )  {  return false ;   }  ,57,4,enabled,4,[]
6987,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\AwsInstanceRegistryTest.java,make peer aware instance registry,@ override protected  peer aware instance registry impl   (  eureka server config server config  eureka client config client config  server codecs server codecs  eureka client eureka client )  {  return new  test aws instance registry ( server config clie,255,5,make,1,[]
6988,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\AwsInstanceRegistryTest.java,make peer aware instance registry,@ override protected  peer aware instance registry impl   (  eureka server config server config  eureka client config client config  server codecs server codecs  eureka client eureka client )  {  return new  test aws instance registry ( server config clie,255,5,peer,2,[22]
6989,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\AwsInstanceRegistryTest.java,make peer aware instance registry,@ override protected  peer aware instance registry impl   (  eureka server config server config  eureka client config client config  server codecs server codecs  eureka client eureka client )  {  return new  test aws instance registry ( server config clie,255,5,aware,3,[27]
6990,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\AwsInstanceRegistryTest.java,make peer aware instance registry,@ override protected  peer aware instance registry impl   (  eureka server config server config  eureka client config client config  server codecs server codecs  eureka client eureka client )  {  return new  test aws instance registry ( server config clie,255,5,instance,4,"[33, 217]"
6991,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\AwsInstanceRegistryTest.java,make peer aware instance registry,@ override protected  peer aware instance registry impl   (  eureka server config server config  eureka client config client config  server codecs server codecs  eureka client eureka client )  {  return new  test aws instance registry ( server config clie,255,5,registry,5,"[42, 226]"
6992,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\AwsInstanceRegistryTest.java,test overrides with asg enabled then disabled,@ test public void   (  )  {   instance info my instance = create local up instance with asg ( local   region   instance   1   hostname )  ;  register instance locally ( my instance )  ;  verify local instance status ( my instance . get id (  )   instance,255,7,test,1,[2]
6993,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\AwsInstanceRegistryTest.java,test overrides with asg enabled then disabled,@ test public void   (  )  {   instance info my instance = create local up instance with asg ( local   region   instance   1   hostname )  ;  register instance locally ( my instance )  ;  verify local instance status ( my instance . get id (  )   instance,255,7,overrides,2,[]
6994,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\AwsInstanceRegistryTest.java,test overrides with asg enabled then disabled,@ test public void   (  )  {   instance info my instance = create local up instance with asg ( local   region   instance   1   hostname )  ;  register instance locally ( my instance )  ;  verify local instance status ( my instance . get id (  )   instance,255,7,with,3,[84]
6995,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\AwsInstanceRegistryTest.java,test overrides with asg enabled then disabled,@ test public void   (  )  {   instance info my instance = create local up instance with asg ( local   region   instance   1   hostname )  ;  register instance locally ( my instance )  ;  verify local instance status ( my instance . get id (  )   instance,255,7,asg,4,[89]
6996,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\AwsInstanceRegistryTest.java,test overrides with asg enabled then disabled,@ test public void   (  )  {   instance info my instance = create local up instance with asg ( local   region   instance   1   hostname )  ;  register instance locally ( my instance )  ;  verify local instance status ( my instance . get id (  )   instance,255,7,enabled,5,[]
6997,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\AwsInstanceRegistryTest.java,test overrides with asg enabled then disabled,@ test public void   (  )  {   instance info my instance = create local up instance with asg ( local   region   instance   1   hostname )  ;  register instance locally ( my instance )  ;  verify local instance status ( my instance . get id (  )   instance,255,7,then,6,[]
6998,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\AwsInstanceRegistryTest.java,test overrides with asg enabled then disabled,@ test public void   (  )  {   instance info my instance = create local up instance with asg ( local   region   instance   1   hostname )  ;  register instance locally ( my instance )  ;  verify local instance status ( my instance . get id (  )   instance,255,7,disabled,7,[]
6999,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\InstanceRegistryTest.java,test apps hash code after refresh,"@ test public void   (  )  throws  interrupted exception  {   assert . assert equals ( ""up   1   "" registry . get applications from all remote regions (  )  . get apps hash code (  )  )  ;  register instance locally ( create local instance ( local   regio",255,6,test,1,[2]
7000,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\InstanceRegistryTest.java,test apps hash code after refresh,"@ test public void   (  )  throws  interrupted exception  {   assert . assert equals ( ""up   1   "" registry . get applications from all remote regions (  )  . get apps hash code (  )  )  ;  register instance locally ( create local instance ( local   regio",255,6,apps,2,[163]
7001,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\InstanceRegistryTest.java,test apps hash code after refresh,"@ test public void   (  )  throws  interrupted exception  {   assert . assert equals ( ""up   1   "" registry . get applications from all remote regions (  )  . get apps hash code (  )  )  ;  register instance locally ( create local instance ( local   regio",255,6,hash,3,[168]
7002,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\InstanceRegistryTest.java,test apps hash code after refresh,"@ test public void   (  )  throws  interrupted exception  {   assert . assert equals ( ""up   1   "" registry . get applications from all remote regions (  )  . get apps hash code (  )  )  ;  register instance locally ( create local instance ( local   regio",255,6,code,4,[173]
7003,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\InstanceRegistryTest.java,test apps hash code after refresh,"@ test public void   (  )  throws  interrupted exception  {   assert . assert equals ( ""up   1   "" registry . get applications from all remote regions (  )  . get apps hash code (  )  )  ;  register instance locally ( create local instance ( local   regio",255,6,after,5,[]
7004,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\InstanceRegistryTest.java,test apps hash code after refresh,"@ test public void   (  )  throws  interrupted exception  {   assert . assert equals ( ""up   1   "" registry . get applications from all remote regions (  )  . get apps hash code (  )  )  ;  register instance locally ( create local instance ( local   regio",255,6,refresh,6,[]
7005,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\InstanceRegistryTest.java,test eviction task compensation time,@ test public void   (  )  throws  exception  {  long eviction task period nanos = server config . get eviction interval timer in ms (  )  * 1000000 ;   abstract instance registry .  eviction task test task = spy ( registry . new  eviction task (  )  )  ;,255,5,test,1,"[2, 197]"
7006,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\InstanceRegistryTest.java,test eviction task compensation time,@ test public void   (  )  throws  exception  {  long eviction task period nanos = server config . get eviction interval timer in ms (  )  * 1000000 ;   abstract instance registry .  eviction task test task = spy ( registry . new  eviction task (  )  )  ;,255,5,eviction,2,"[54, 103, 183, 231]"
7007,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\InstanceRegistryTest.java,test eviction task compensation time,@ test public void   (  )  throws  exception  {  long eviction task period nanos = server config . get eviction interval timer in ms (  )  * 1000000 ;   abstract instance registry .  eviction task test task = spy ( registry . new  eviction task (  )  )  ;,255,5,task,3,"[63, 192, 202, 240]"
7008,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\InstanceRegistryTest.java,test eviction task compensation time,@ test public void   (  )  throws  exception  {  long eviction task period nanos = server config . get eviction interval timer in ms (  )  * 1000000 ;   abstract instance registry .  eviction task test task = spy ( registry . new  eviction task (  )  )  ;,255,5,compensation,4,[]
7009,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\InstanceRegistryTest.java,test eviction task compensation time,@ test public void   (  )  throws  exception  {  long eviction task period nanos = server config . get eviction interval timer in ms (  )  * 1000000 ;   abstract instance registry .  eviction task test task = spy ( registry . new  eviction task (  )  )  ;,255,5,time,5,[121]
7010,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\InstanceRegistryTest.java,test get apps delta from all remote regions,@ test public void   (  )  throws  exception  {  register instance locally ( create local instance ( local   region   instance   2   hostname )  )  ;  wait for delta to be retrieved (  )  ;   applications app delta = registry . get application deltas from,255,8,test,1,[2]
7011,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\InstanceRegistryTest.java,test get apps delta from all remote regions,@ test public void   (  )  throws  exception  {  register instance locally ( create local instance ( local   region   instance   2   hostname )  )  ;  wait for delta to be retrieved (  )  ;   applications app delta = registry . get application deltas from,255,8,get,2,[228]
7012,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\InstanceRegistryTest.java,test get apps delta from all remote regions,@ test public void   (  )  throws  exception  {  register instance locally ( create local instance ( local   region   instance   2   hostname )  )  ;  wait for delta to be retrieved (  )  ;   applications app delta = registry . get application deltas from,255,8,apps,3,[]
7013,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\InstanceRegistryTest.java,test get apps delta from all remote regions,@ test public void   (  )  throws  exception  {  register instance locally ( create local instance ( local   region   instance   2   hostname )  )  ;  wait for delta to be retrieved (  )  ;   applications app delta = registry . get application deltas from,255,8,delta,4,"[160, 209, 244]"
7014,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\InstanceRegistryTest.java,test get apps delta from all remote regions,@ test public void   (  )  throws  exception  {  register instance locally ( create local instance ( local   region   instance   2   hostname )  )  ;  wait for delta to be retrieved (  )  ;   applications app delta = registry . get application deltas from,255,8,from,5,[251]
7015,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\InstanceRegistryTest.java,test get apps delta from all remote regions,@ test public void   (  )  throws  exception  {  register instance locally ( create local instance ( local   region   instance   2   hostname )  )  ;  wait for delta to be retrieved (  )  ;   applications app delta = registry . get application deltas from,255,8,all,6,[70]
7016,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\InstanceRegistryTest.java,test get apps delta from all remote regions,@ test public void   (  )  throws  exception  {  register instance locally ( create local instance ( local   region   instance   2   hostname )  )  ;  wait for delta to be retrieved (  )  ;   applications app delta = registry . get application deltas from,255,8,remote,7,[]
7017,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\InstanceRegistryTest.java,test get apps delta from all remote regions,@ test public void   (  )  throws  exception  {  register instance locally ( create local instance ( local   region   instance   2   hostname )  )  ;  wait for delta to be retrieved (  )  ;   applications app delta = registry . get application deltas from,255,8,regions,8,[]
7018,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\InstanceRegistryTest.java,test get apps from all remote regions,"@ test public void   (  )  throws  exception  {   applications apps = registry . get applications from all remote regions (  )  ;   list <  application >  registered applications = apps . get registered applications (  )  ;   assert . assert equals ( "" ap",255,7,test,1,[2]
7019,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\InstanceRegistryTest.java,test get apps from all remote regions,"@ test public void   (  )  throws  exception  {   applications apps = registry . get applications from all remote regions (  )  ;   list <  application >  registered applications = apps . get registered applications (  )  ;   assert . assert equals ( "" ap",255,7,get,2,"[81, 188]"
7020,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\InstanceRegistryTest.java,test get apps from all remote regions,"@ test public void   (  )  throws  exception  {   applications apps = registry . get applications from all remote regions (  )  ;   list <  application >  registered applications = apps . get registered applications (  )  ;   assert . assert equals ( "" ap",255,7,apps,3,"[63, 181]"
7021,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\InstanceRegistryTest.java,test get apps from all remote regions,"@ test public void   (  )  throws  exception  {   applications apps = registry . get applications from all remote regions (  )  ;   list <  application >  registered applications = apps . get registered applications (  )  ;   assert . assert equals ( "" ap",255,7,from,4,[98]
7022,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\InstanceRegistryTest.java,test get apps from all remote regions,"@ test public void   (  )  throws  exception  {   applications apps = registry . get applications from all remote regions (  )  ;   list <  application >  registered applications = apps . get registered applications (  )  ;   assert . assert equals ( "" ap",255,7,all,5,[103]
7023,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\InstanceRegistryTest.java,test get apps from all remote regions,"@ test public void   (  )  throws  exception  {   applications apps = registry . get applications from all remote regions (  )  ;   list <  application >  registered applications = apps . get registered applications (  )  ;   assert . assert equals ( "" ap",255,7,remote,6,[107]
7024,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\InstanceRegistryTest.java,test get apps from all remote regions,"@ test public void   (  )  throws  exception  {   applications apps = registry . get applications from all remote regions (  )  ;   list <  application >  registered applications = apps . get registered applications (  )  ;   assert . assert equals ( "" ap",255,7,regions,7,[114]
7025,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\InstanceRegistryTest.java,test get apps from both regions,@ test public void   (  )  throws  exception  {  register instance locally ( create remote instance ( local   region   instance   2   hostname )  )  ;  register instance locally ( create local instance ( local   region   instance   1   hostname )  )  ;   ,255,6,test,1,[2]
7026,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\InstanceRegistryTest.java,test get apps from both regions,@ test public void   (  )  throws  exception  {  register instance locally ( create remote instance ( local   region   instance   2   hostname )  )  ;  register instance locally ( create local instance ( local   region   instance   1   hostname )  )  ;   ,255,6,get,2,[]
7027,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\InstanceRegistryTest.java,test get apps from both regions,@ test public void   (  )  throws  exception  {  register instance locally ( create remote instance ( local   region   instance   2   hostname )  )  ;  register instance locally ( create local instance ( local   region   instance   1   hostname )  )  ;   ,255,6,apps,3,[]
7028,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\InstanceRegistryTest.java,test get apps from both regions,@ test public void   (  )  throws  exception  {  register instance locally ( create remote instance ( local   region   instance   2   hostname )  )  ;  register instance locally ( create local instance ( local   region   instance   1   hostname )  )  ;   ,255,6,from,4,[]
7029,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\InstanceRegistryTest.java,test get apps from both regions,@ test public void   (  )  throws  exception  {  register instance locally ( create remote instance ( local   region   instance   2   hostname )  )  ;  register instance locally ( create local instance ( local   region   instance   1   hostname )  )  ;   ,255,6,both,5,[]
7030,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\InstanceRegistryTest.java,test get apps from both regions,@ test public void   (  )  throws  exception  {  register instance locally ( create remote instance ( local   region   instance   2   hostname )  )  ;  register instance locally ( create local instance ( local   region   instance   1   hostname )  )  ;   ,255,6,regions,6,[]
7031,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\InstanceRegistryTest.java,test get apps from local region only,@ test public void   (  )  throws  exception  {  register instance locally ( create local instance ( local   region   instance   1   hostname )  )  ;   applications apps = registry . get applications from local region only (  )  ;   list <  application > ,255,7,test,1,[2]
7032,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\InstanceRegistryTest.java,test get apps from local region only,@ test public void   (  )  throws  exception  {  register instance locally ( create local instance ( local   region   instance   1   hostname )  )  ;   applications apps = registry . get applications from local region only (  )  ;   list <  application > ,255,7,get,2,[183]
7033,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\InstanceRegistryTest.java,test get apps from local region only,@ test public void   (  )  throws  exception  {  register instance locally ( create local instance ( local   region   instance   1   hostname )  )  ;   applications apps = registry . get applications from local region only (  )  ;   list <  application > ,255,7,apps,3,[165]
7034,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\InstanceRegistryTest.java,test get apps from local region only,@ test public void   (  )  throws  exception  {  register instance locally ( create local instance ( local   region   instance   1   hostname )  )  ;   applications apps = registry . get applications from local region only (  )  ;   list <  application > ,255,7,from,4,[200]
7035,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\InstanceRegistryTest.java,test get apps from local region only,@ test public void   (  )  throws  exception  {  register instance locally ( create local instance ( local   region   instance   1   hostname )  )  ;   applications apps = registry . get applications from local region only (  )  ;   list <  application > ,255,7,local,5,"[67, 84, 101, 205]"
7036,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\InstanceRegistryTest.java,test get apps from local region only,@ test public void   (  )  throws  exception  {  register instance locally ( create local instance ( local   region   instance   1   hostname )  )  ;   applications apps = registry . get applications from local region only (  )  ;   list <  application > ,255,7,region,6,"[109, 211]"
7037,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\InstanceRegistryTest.java,test get apps from local region only,@ test public void   (  )  throws  exception  {  register instance locally ( create local instance ( local   region   instance   1   hostname )  )  ;   applications apps = registry . get applications from local region only (  )  ;   list <  application > ,255,7,only,7,[218]
7038,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\InstanceRegistryTest.java,test soft dep remote up,"@ test public void   (  )  throws  exception  {   assert . assert true ( "" registry access disallowed when remote region is up . "" registry . should allow access ( false )  )  ;   assert . assert true ( "" registry access disallowed when remote region is u",255,5,test,1,[2]
7039,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\InstanceRegistryTest.java,test soft dep remote up,"@ test public void   (  )  throws  exception  {   assert . assert true ( "" registry access disallowed when remote region is up . "" registry . should allow access ( false )  )  ;   assert . assert true ( "" registry access disallowed when remote region is u",255,5,soft,2,[]
7040,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\InstanceRegistryTest.java,test soft dep remote up,"@ test public void   (  )  throws  exception  {   assert . assert true ( "" registry access disallowed when remote region is up . "" registry . should allow access ( false )  )  ;   assert . assert true ( "" registry access disallowed when remote region is u",255,5,dep,3,[]
7041,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\InstanceRegistryTest.java,test soft dep remote up,"@ test public void   (  )  throws  exception  {   assert . assert true ( "" registry access disallowed when remote region is up . "" registry . should allow access ( false )  )  ;   assert . assert true ( "" registry access disallowed when remote region is u",255,5,remote,4,"[107, 237]"
7042,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\InstanceRegistryTest.java,test soft dep remote up,"@ test public void   (  )  throws  exception  {   assert . assert true ( "" registry access disallowed when remote region is up . "" registry . should allow access ( false )  )  ;   assert . assert true ( "" registry access disallowed when remote region is u",255,5,up,5,[124]
7043,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\InstanceRegistryTest.java,test status override set and removal,@ test public void   (  )  throws  exception  {   instance info seed = create local instance ( local   region   instance   1   hostname )  ;  seed . set last dirty timestamp ( 100l )  ;   instance info my instance1 = new  instance info ( seed )  ;  regist,255,6,test,1,[2]
7044,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\InstanceRegistryTest.java,test status override set and removal,@ test public void   (  )  throws  exception  {   instance info seed = create local instance ( local   region   instance   1   hostname )  ;  seed . set last dirty timestamp ( 100l )  ;   instance info my instance1 = new  instance info ( seed )  ;  regist,255,6,status,2,[]
7045,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\InstanceRegistryTest.java,test status override set and removal,@ test public void   (  )  throws  exception  {   instance info seed = create local instance ( local   region   instance   1   hostname )  ;  seed . set last dirty timestamp ( 100l )  ;   instance info my instance1 = new  instance info ( seed )  ;  regist,255,6,override,3,[]
7046,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\InstanceRegistryTest.java,test status override set and removal,@ test public void   (  )  throws  exception  {   instance info seed = create local instance ( local   region   instance   1   hostname )  ;  seed . set last dirty timestamp ( 100l )  ;   instance info my instance1 = new  instance info ( seed )  ;  regist,255,6,set,4,[149]
7047,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\InstanceRegistryTest.java,test status override set and removal,@ test public void   (  )  throws  exception  {   instance info seed = create local instance ( local   region   instance   1   hostname )  ;  seed . set last dirty timestamp ( 100l )  ;   instance info my instance1 = new  instance info ( seed )  ;  regist,255,6,and,5,[]
7048,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\InstanceRegistryTest.java,test status override set and removal,@ test public void   (  )  throws  exception  {   instance info seed = create local instance ( local   region   instance   1   hostname )  ;  seed . set last dirty timestamp ( 100l )  ;   instance info my instance1 = new  instance info ( seed )  ;  regist,255,6,removal,6,[]
7049,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\InstanceRegistryTest.java,test status override starting status,@ test public void   (  )  throws  exception  {   instance info my instance = create local instance ( local   region   instance   1   hostname )  ;  register instance locally ( my instance )  ;  verify local instance status ( my instance . get id (  )   i,255,5,test,1,[2]
7050,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\InstanceRegistryTest.java,test status override starting status,@ test public void   (  )  throws  exception  {   instance info my instance = create local instance ( local   region   instance   1   hostname )  ;  register instance locally ( my instance )  ;  verify local instance status ( my instance . get id (  )   i,255,5,status,2,[217]
7051,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\InstanceRegistryTest.java,test status override starting status,@ test public void   (  )  throws  exception  {   instance info my instance = create local instance ( local   region   instance   1   hostname )  ;  register instance locally ( my instance )  ;  verify local instance status ( my instance . get id (  )   i,255,5,override,3,[]
7052,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\InstanceRegistryTest.java,test status override starting status,@ test public void   (  )  throws  exception  {   instance info my instance = create local instance ( local   region   instance   1   hostname )  ;  register instance locally ( my instance )  ;  verify local instance status ( my instance . get id (  )   i,255,5,starting,4,[]
7053,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\InstanceRegistryTest.java,test status override starting status,@ test public void   (  )  throws  exception  {   instance info my instance = create local instance ( local   region   instance   1   hostname )  ;  register instance locally ( my instance )  ;  verify local instance status ( my instance . get id (  )   i,255,5,status,5,[217]
7054,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\InstanceRegistryTest.java,test status override with existing lease out of service,@ test public void   (  )  throws  exception  {   instance info my instance = create local out of service instance ( local   region   instance   1   hostname )  ;  register instance locally ( my instance )  ;  verify local instance status ( my instance . ,255,9,test,1,[2]
7055,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\InstanceRegistryTest.java,test status override with existing lease out of service,@ test public void   (  )  throws  exception  {   instance info my instance = create local out of service instance ( local   region   instance   1   hostname )  ;  register instance locally ( my instance )  ;  verify local instance status ( my instance . ,255,9,status,2,[232]
7056,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\InstanceRegistryTest.java,test status override with existing lease out of service,@ test public void   (  )  throws  exception  {   instance info my instance = create local out of service instance ( local   region   instance   1   hostname )  ;  register instance locally ( my instance )  ;  verify local instance status ( my instance . ,255,9,override,3,[]
7057,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\InstanceRegistryTest.java,test status override with existing lease out of service,@ test public void   (  )  throws  exception  {   instance info my instance = create local out of service instance ( local   region   instance   1   hostname )  ;  register instance locally ( my instance )  ;  verify local instance status ( my instance . ,255,9,with,4,[]
7058,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\InstanceRegistryTest.java,test status override with existing lease out of service,@ test public void   (  )  throws  exception  {   instance info my instance = create local out of service instance ( local   region   instance   1   hostname )  ;  register instance locally ( my instance )  ;  verify local instance status ( my instance . ,255,9,existing,5,[]
7059,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\InstanceRegistryTest.java,test status override with existing lease out of service,@ test public void   (  )  throws  exception  {   instance info my instance = create local out of service instance ( local   region   instance   1   hostname )  ;  register instance locally ( my instance )  ;  verify local instance status ( my instance . ,255,9,lease,6,[]
7060,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\InstanceRegistryTest.java,test status override with existing lease out of service,@ test public void   (  )  throws  exception  {   instance info my instance = create local out of service instance ( local   region   instance   1   hostname )  ;  register instance locally ( my instance )  ;  verify local instance status ( my instance . ,255,9,out,7,[91]
7061,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\InstanceRegistryTest.java,test status override with existing lease out of service,@ test public void   (  )  throws  exception  {   instance info my instance = create local out of service instance ( local   region   instance   1   hostname )  ;  register instance locally ( my instance )  ;  verify local instance status ( my instance . ,255,9,of,8,[95]
7062,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\InstanceRegistryTest.java,test status override with existing lease out of service,@ test public void   (  )  throws  exception  {   instance info my instance = create local out of service instance ( local   region   instance   1   hostname )  ;  register instance locally ( my instance )  ;  verify local instance status ( my instance . ,255,9,service,9,[98]
7063,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\InstanceRegistryTest.java,test status override with existing lease up,@ test public void   (  )  throws  exception  {   instance info my instance = create local instance ( local   region   instance   1   hostname )  ;  register instance locally ( my instance )  ;  verify local instance status ( my instance . get id (  )   i,255,7,test,1,[2]
7064,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\InstanceRegistryTest.java,test status override with existing lease up,@ test public void   (  )  throws  exception  {   instance info my instance = create local instance ( local   region   instance   1   hostname )  ;  register instance locally ( my instance )  ;  verify local instance status ( my instance . get id (  )   i,255,7,status,2,[217]
7065,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\InstanceRegistryTest.java,test status override with existing lease up,@ test public void   (  )  throws  exception  {   instance info my instance = create local instance ( local   region   instance   1   hostname )  ;  register instance locally ( my instance )  ;  verify local instance status ( my instance . get id (  )   i,255,7,override,3,[]
7066,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\InstanceRegistryTest.java,test status override with existing lease up,@ test public void   (  )  throws  exception  {   instance info my instance = create local instance ( local   region   instance   1   hostname )  ;  register instance locally ( my instance )  ;  verify local instance status ( my instance . get id (  )   i,255,7,with,4,[]
7067,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\InstanceRegistryTest.java,test status override with existing lease up,@ test public void   (  )  throws  exception  {   instance info my instance = create local instance ( local   region   instance   1   hostname )  ;  register instance locally ( my instance )  ;  verify local instance status ( my instance . get id (  )   i,255,7,existing,5,[]
7068,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\InstanceRegistryTest.java,test status override with existing lease up,@ test public void   (  )  throws  exception  {   instance info my instance = create local instance ( local   region   instance   1   hostname )  ;  register instance locally ( my instance )  ;  verify local instance status ( my instance . get id (  )   i,255,7,lease,6,[]
7069,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\InstanceRegistryTest.java,test status override with existing lease up,@ test public void   (  )  throws  exception  {   instance info my instance = create local instance ( local   region   instance   1   hostname )  ;  register instance locally ( my instance )  ;  verify local instance status ( my instance . get id (  )   i,255,7,up,7,[]
7070,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\InstanceRegistryTest.java,test status override with renew applied toa replica,@ test public void   (  )  throws  exception  {   instance info seed = create local instance ( local   region   instance   1   hostname )  ;  seed . set last dirty timestamp ( 100l )  ;   instance info my instance1 = new  instance info ( seed )  ;  regist,255,8,test,1,[2]
7071,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\InstanceRegistryTest.java,test status override with renew applied toa replica,@ test public void   (  )  throws  exception  {   instance info seed = create local instance ( local   region   instance   1   hostname )  ;  seed . set last dirty timestamp ( 100l )  ;   instance info my instance1 = new  instance info ( seed )  ;  regist,255,8,status,2,[]
7072,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\InstanceRegistryTest.java,test status override with renew applied toa replica,@ test public void   (  )  throws  exception  {   instance info seed = create local instance ( local   region   instance   1   hostname )  ;  seed . set last dirty timestamp ( 100l )  ;   instance info my instance1 = new  instance info ( seed )  ;  regist,255,8,override,3,[]
7073,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\InstanceRegistryTest.java,test status override with renew applied toa replica,@ test public void   (  )  throws  exception  {   instance info seed = create local instance ( local   region   instance   1   hostname )  ;  seed . set last dirty timestamp ( 100l )  ;   instance info my instance1 = new  instance info ( seed )  ;  regist,255,8,with,4,[]
7074,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\InstanceRegistryTest.java,test status override with renew applied toa replica,@ test public void   (  )  throws  exception  {   instance info seed = create local instance ( local   region   instance   1   hostname )  ;  seed . set last dirty timestamp ( 100l )  ;   instance info my instance1 = new  instance info ( seed )  ;  regist,255,8,renew,5,[]
7075,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\InstanceRegistryTest.java,test status override with renew applied toa replica,@ test public void   (  )  throws  exception  {   instance info seed = create local instance ( local   region   instance   1   hostname )  ;  seed . set last dirty timestamp ( 100l )  ;   instance info my instance1 = new  instance info ( seed )  ;  regist,255,8,applied,6,[]
7076,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\InstanceRegistryTest.java,test status override with renew applied toa replica,@ test public void   (  )  throws  exception  {   instance info seed = create local instance ( local   region   instance   1   hostname )  ;  seed . set last dirty timestamp ( 100l )  ;   instance info my instance1 = new  instance info ( seed )  ;  regist,255,8,toa,7,[]
7077,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\InstanceRegistryTest.java,test status override with renew applied toa replica,@ test public void   (  )  throws  exception  {   instance info seed = create local instance ( local   region   instance   1   hostname )  ;  seed . set last dirty timestamp ( 100l )  ;   instance info my instance1 = new  instance info ( seed )  ;  regist,255,8,replica,8,[]
7078,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\InstanceRegistryTest.java,wait for delta to be retrieved,"private void   (  )  throws  interrupted exception  {  int count = 0 ;   system . out . println ( "" sleeping up to 35 seconds to let the remote registry fetch delta . "" )  ;  while  ( count +  +   <  35 &&  ! mock remote eureka server . is sent delta (  )  )   {   thread . sleep ( 1000 )  ;   }  if  (  ! mock remote eureka server . is sent delta (  )  )   {   system . out . println ( "" waited for 35 seconds but remote server did not send delta"" )  ;   }   thread . sleep ( 2000 )  ;   }  ",492,6,wait,1,[389]
7079,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\InstanceRegistryTest.java,wait for delta to be retrieved,"private void   (  )  throws  interrupted exception  {  int count = 0 ;   system . out . println ( "" sleeping up to 35 seconds to let the remote registry fetch delta . "" )  ;  while  ( count +  +   <  35 &&  ! mock remote eureka server . is sent delta (  )  )   {   thread . sleep ( 1000 )  ;   }  if  (  ! mock remote eureka server . is sent delta (  )  )   {   system . out . println ( "" waited for 35 seconds but remote server did not send delta"" )  ;   }   thread . sleep ( 2000 )  ;   }  ",492,6,for,2,[396]
7080,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\InstanceRegistryTest.java,wait for delta to be retrieved,"private void   (  )  throws  interrupted exception  {  int count = 0 ;   system . out . println ( "" sleeping up to 35 seconds to let the remote registry fetch delta . "" )  ;  while  ( count +  +   <  35 &&  ! mock remote eureka server . is sent delta (  )  )   {   thread . sleep ( 1000 )  ;   }  if  (  ! mock remote eureka server . is sent delta (  )  )   {   system . out . println ( "" waited for 35 seconds but remote server did not send delta"" )  ;   }   thread . sleep ( 2000 )  ;   }  ",492,6,delta,3,"[159, 245, 342, 442]"
7081,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\InstanceRegistryTest.java,wait for delta to be retrieved,"private void   (  )  throws  interrupted exception  {  int count = 0 ;   system . out . println ( "" sleeping up to 35 seconds to let the remote registry fetch delta . "" )  ;  while  ( count +  +   <  35 &&  ! mock remote eureka server . is sent delta (  )  )   {   thread . sleep ( 1000 )  ;   }  if  (  ! mock remote eureka server . is sent delta (  )  )   {   system . out . println ( "" waited for 35 seconds but remote server did not send delta"" )  ;   }   thread . sleep ( 2000 )  ;   }  ",492,6,to,4,"[112, 126]"
7082,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\InstanceRegistryTest.java,wait for delta to be retrieved,"private void   (  )  throws  interrupted exception  {  int count = 0 ;   system . out . println ( "" sleeping up to 35 seconds to let the remote registry fetch delta . "" )  ;  while  ( count +  +   <  35 &&  ! mock remote eureka server . is sent delta (  )  )   {   thread . sleep ( 1000 )  ;   }  if  (  ! mock remote eureka server . is sent delta (  )  )   {   system . out . println ( "" waited for 35 seconds but remote server did not send delta"" )  ;   }   thread . sleep ( 2000 )  ;   }  ",492,6,be,5,[]
7083,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\InstanceRegistryTest.java,wait for delta to be retrieved,"private void   (  )  throws  interrupted exception  {  int count = 0 ;   system . out . println ( "" sleeping up to 35 seconds to let the remote registry fetch delta . "" )  ;  while  ( count +  +   <  35 &&  ! mock remote eureka server . is sent delta (  )  )   {   thread . sleep ( 1000 )  ;   }  if  (  ! mock remote eureka server . is sent delta (  )  )   {   system . out . println ( "" waited for 35 seconds but remote server did not send delta"" )  ;   }   thread . sleep ( 2000 )  ;   }  ",492,6,retrieved,6,[]
7084,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\ResponseCacheTest.java,set up,@ override @ before public void   (  )  throws  exception  {  super . set up (  )  ;   eureka server config server config = spy ( new  default eureka server config (  )  )  ;  do return ( true )  . when ( server config )  . disable transparent fallback to,255,2,set,1,[70]
7085,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\ResponseCacheTest.java,set up,@ override @ before public void   (  )  throws  exception  {  super . set up (  )  ;   eureka server config server config = spy ( new  default eureka server config (  )  )  ;  do return ( true )  . when ( server config )  . disable transparent fallback to,255,2,up,2,"[63, 74]"
7086,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\ResponseCacheTest.java,test invalidate,@ test public void   (  )  throws  exception  {   response cache impl cache =  (  response cache impl ) test registry . get response cache (  )  ;   key key = new  key (  key .  entity type .  application remote   region   app   name  key .  key type . js,255,2,test,1,"[2, 104]"
7087,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\ResponseCacheTest.java,test invalidate,@ test public void   (  )  throws  exception  {   response cache impl cache =  (  response cache impl ) test registry . get response cache (  )  ;   key key = new  key (  key .  entity type .  application remote   region   app   name  key .  key type . js,255,2,invalidate,2,[]
7088,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\ResponseCacheTest.java,test invalidate with multiple remote regions,@ test public void   (  )  throws  exception  {   response cache impl cache =  (  response cache impl ) test registry . get response cache (  )  ;   key key1 = new  key (  key .  entity type .  application remote   region   app   name  key .  key type . j,255,6,test,1,"[2, 104]"
7089,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\ResponseCacheTest.java,test invalidate with multiple remote regions,@ test public void   (  )  throws  exception  {   response cache impl cache =  (  response cache impl ) test registry . get response cache (  )  ;   key key1 = new  key (  key .  entity type .  application remote   region   app   name  key .  key type . j,255,6,invalidate,2,[]
7090,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\ResponseCacheTest.java,test invalidate with multiple remote regions,@ test public void   (  )  throws  exception  {   response cache impl cache =  (  response cache impl ) test registry . get response cache (  )  ;   key key1 = new  key (  key .  entity type .  application remote   region   app   name  key .  key type . j,255,6,with,3,[]
7091,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\ResponseCacheTest.java,test invalidate with multiple remote regions,@ test public void   (  )  throws  exception  {   response cache impl cache =  (  response cache impl ) test registry . get response cache (  )  ;   key key1 = new  key (  key .  entity type .  application remote   region   app   name  key .  key type . j,255,6,multiple,4,[]
7092,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\ResponseCacheTest.java,test invalidate with multiple remote regions,@ test public void   (  )  throws  exception  {   response cache impl cache =  (  response cache impl ) test registry . get response cache (  )  ;   key key1 = new  key (  key .  entity type .  application remote   region   app   name  key .  key type . j,255,6,remote,5,[206]
7093,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\ResponseCacheTest.java,test invalidate with multiple remote regions,@ test public void   (  )  throws  exception  {   response cache impl cache =  (  response cache impl ) test registry . get response cache (  )  ;   key key1 = new  key (  key .  entity type .  application remote   region   app   name  key .  key type . j,255,6,regions,6,[]
7094,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\ResponseCacheTest.java,test invalidate with remote region,@ test public void   (  )  throws  exception  {   response cache impl cache =  (  response cache impl ) test registry . get response cache (  )  ;   key key = new  key (  key .  entity type .  application remote   region   app   name  key .  key type . js,255,5,test,1,"[2, 104]"
7095,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\ResponseCacheTest.java,test invalidate with remote region,@ test public void   (  )  throws  exception  {   response cache impl cache =  (  response cache impl ) test registry . get response cache (  )  ;   key key = new  key (  key .  entity type .  application remote   region   app   name  key .  key type . js,255,5,invalidate,2,[]
7096,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\ResponseCacheTest.java,test invalidate with remote region,@ test public void   (  )  throws  exception  {   response cache impl cache =  (  response cache impl ) test registry . get response cache (  )  ;   key key = new  key (  key .  entity type .  application remote   region   app   name  key .  key type . js,255,5,with,3,[]
7097,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\ResponseCacheTest.java,test invalidate with remote region,@ test public void   (  )  throws  exception  {   response cache impl cache =  (  response cache impl ) test registry . get response cache (  )  ;   key key = new  key (  key .  entity type .  application remote   region   app   name  key .  key type . js,255,5,remote,4,[205]
7098,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\ResponseCacheTest.java,test invalidate with remote region,@ test public void   (  )  throws  exception  {   response cache impl cache =  (  response cache impl ) test registry . get response cache (  )  ;   key key = new  key (  key .  entity type .  application remote   region   app   name  key .  key type . js,255,5,region,5,[214]
7099,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\RemoteRegionSoftDependencyTest.java,new mock remote server,@ override protected  mock remote eureka server   (  )  {   mock remote eureka server server = super . new mock remote server (  )  ;  server . simulate not ready ( true )  ;  return server ;   }  ,197,4,new,1,[103]
7100,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\RemoteRegionSoftDependencyTest.java,new mock remote server,@ override protected  mock remote eureka server   (  )  {   mock remote eureka server server = super . new mock remote server (  )  ;  server . simulate not ready ( true )  ;  return server ;   }  ,197,4,mock,2,"[22, 60, 107]"
7101,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\RemoteRegionSoftDependencyTest.java,new mock remote server,@ override protected  mock remote eureka server   (  )  {   mock remote eureka server server = super . new mock remote server (  )  ;  server . simulate not ready ( true )  ;  return server ;   }  ,197,4,remote,3,"[27, 65, 112]"
7102,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\RemoteRegionSoftDependencyTest.java,new mock remote server,@ override protected  mock remote eureka server   (  )  {   mock remote eureka server server = super . new mock remote server (  )  ;  server . simulate not ready ( true )  ;  return server ;   }  ,197,4,server,4,"[41, 79, 86, 119, 135, 183]"
7103,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\RemoteRegionSoftDependencyTest.java,set up,@ override @ before public void   (  )  throws  exception  {  super . set up (  )  ;  do return ( 10 )  . when ( server config )  . get wait time in ms when sync empty (  )  ;  do return ( 1 )  . when ( server config )  . get registry sync retries (  )  ;,255,2,set,1,[70]
7104,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\RemoteRegionSoftDependencyTest.java,set up,@ override @ before public void   (  )  throws  exception  {  super . set up (  )  ;  do return ( 10 )  . when ( server config )  . get wait time in ms when sync empty (  )  ;  do return ( 1 )  . when ( server config )  . get registry sync retries (  )  ;,255,2,up,2,"[63, 74]"
7105,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\RemoteRegionSoftDependencyTest.java,test soft dep remote down,"@ test public void   (  )  throws  exception  {   assert . assert true ( "" registry access disallowed when remote region is down . "" registry . should allow access ( false )  )  ;   assert . assert false ( "" registry access allowed when remote region is d",255,5,test,1,[2]
7106,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\RemoteRegionSoftDependencyTest.java,test soft dep remote down,"@ test public void   (  )  throws  exception  {   assert . assert true ( "" registry access disallowed when remote region is down . "" registry . should allow access ( false )  )  ;   assert . assert false ( "" registry access allowed when remote region is d",255,5,soft,2,[]
7107,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\RemoteRegionSoftDependencyTest.java,test soft dep remote down,"@ test public void   (  )  throws  exception  {   assert . assert true ( "" registry access disallowed when remote region is down . "" registry . should allow access ( false )  )  ;   assert . assert false ( "" registry access allowed when remote region is d",255,5,dep,3,[]
7108,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\RemoteRegionSoftDependencyTest.java,test soft dep remote down,"@ test public void   (  )  throws  exception  {   assert . assert true ( "" registry access disallowed when remote region is down . "" registry . should allow access ( false )  )  ;   assert . assert false ( "" registry access allowed when remote region is d",255,5,remote,4,"[107, 237]"
7109,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\RemoteRegionSoftDependencyTest.java,test soft dep remote down,"@ test public void   (  )  throws  exception  {   assert . assert true ( "" registry access disallowed when remote region is down . "" registry . should allow access ( false )  )  ;   assert . assert false ( "" registry access allowed when remote region is d",255,5,down,5,[124]
7110,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\AbstractVIPResourceTest.java,get vip response,@ override protected  response   (  string version  string entity name  string accept header  eureka accept eureka accept  key .  entity type entity type )  {  return super . get vip response ( version entity name accept header eureka accept entity type ),255,3,get,1,[175]
7111,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\AbstractVIPResourceTest.java,get vip response,@ override protected  response   (  string version  string entity name  string accept header  eureka accept eureka accept  key .  entity type entity type )  {  return super . get vip response ( version entity name accept header eureka accept entity type ),255,3,vip,2,[179]
7112,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\AbstractVIPResourceTest.java,get vip response,@ override protected  response   (  string version  string entity name  string accept header  eureka accept eureka accept  key .  entity type entity type )  {  return super . get vip response ( version entity name accept header eureka accept entity type ),255,3,response,3,"[22, 183]"
7113,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\AbstractVIPResourceTest.java,set up,@ override @ before public void   (  )  throws  exception  {  super . set up (  )  ;   instance info generator instance infos =  instance info generator . new builder ( 6 1 )  . build (  )  ;  test application = instance infos . to applications (  )  . ge,255,2,set,1,[70]
7114,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\AbstractVIPResourceTest.java,set up,@ override @ before public void   (  )  throws  exception  {  super . set up (  )  ;   instance info generator instance infos =  instance info generator . new builder ( 6 1 )  . build (  )  ;  test application = instance infos . to applications (  )  . ge,255,2,up,2,"[63, 74]"
7115,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\AbstractVIPResourceTest.java,test full vip get,@ test public void   (  )  throws  exception  {   response response = resource . get vip response (  version . v2 . name (  )  vip name  media type . application   json  eureka accept . full  key .  entity type . vip )  ;   string json =  string . value o,255,4,test,1,[2]
7116,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\AbstractVIPResourceTest.java,test full vip get,@ test public void   (  )  throws  exception  {   response response = resource . get vip response (  version . v2 . name (  )  vip name  media type . application   json  eureka accept . full  key .  entity type . vip )  ;   string json =  string . value o,255,4,full,2,[186]
7117,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\AbstractVIPResourceTest.java,test full vip get,@ test public void   (  )  throws  exception  {   response response = resource . get vip response (  version . v2 . name (  )  vip name  media type . application   json  eureka accept . full  key .  entity type . vip )  ;   string json =  string . value o,255,4,vip,3,"[85, 127, 213]"
7118,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\AbstractVIPResourceTest.java,test full vip get,@ test public void   (  )  throws  exception  {   response response = resource . get vip response (  version . v2 . name (  )  vip name  media type . application   json  eureka accept . full  key .  entity type . vip )  ;   string json =  string . value o,255,4,get,4,[81]
7119,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\AbstractVIPResourceTest.java,test mini vip get,@ test public void   (  )  throws  exception  {   response response = resource . get vip response (  version . v2 . name (  )  vip name  media type . application   json  eureka accept . compact  key .  entity type . vip )  ;   string json =  string . valu,255,4,test,1,[2]
7120,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\AbstractVIPResourceTest.java,test mini vip get,@ test public void   (  )  throws  exception  {   response response = resource . get vip response (  version . v2 . name (  )  vip name  media type . application   json  eureka accept . compact  key .  entity type . vip )  ;   string json =  string . valu,255,4,mini,2,[]
7121,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\AbstractVIPResourceTest.java,test mini vip get,@ test public void   (  )  throws  exception  {   response response = resource . get vip response (  version . v2 . name (  )  vip name  media type . application   json  eureka accept . compact  key .  entity type . vip )  ;   string json =  string . valu,255,4,vip,3,"[85, 127, 216]"
7122,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\AbstractVIPResourceTest.java,test mini vip get,@ test public void   (  )  throws  exception  {   response response = resource . get vip response (  version . v2 . name (  )  vip name  media type . application   json  eureka accept . compact  key .  entity type . vip )  ;   string json =  string . valu,255,4,get,4,[81]
7123,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\ApplicationResourceTest.java,get id,@ override public  string   (  )  {  return null ;   }  ,56,2,get,1,[]
7124,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\ApplicationResourceTest.java,get id,@ override public  string   (  )  {  return null ;   }  ,56,2,id,2,[7]
7125,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\ApplicationResourceTest.java,get name,@ override public  name   (  )  {  return  name .  my own ;   }  ,65,2,get,1,[]
7126,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\ApplicationResourceTest.java,get name,@ override public  name   (  )  {  return  name .  my own ;   }  ,65,2,name,2,"[19, 43]"
7127,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\ApplicationResourceTest.java,set up,@ override @ before public void   (  )  throws  exception  {  super . set up (  )  ;   instance info generator instance infos =  instance info generator . new builder ( 6 1 )  . build (  )  ;  test application = instance infos . to applications (  )  . ge,255,2,set,1,[70]
7128,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\ApplicationResourceTest.java,set up,@ override @ before public void   (  )  throws  exception  {  super . set up (  )  ;   instance info generator instance infos =  instance info generator . new builder ( 6 1 )  . build (  )  ;  test application = instance infos . to applications (  )  . ge,255,2,up,2,"[63, 74]"
7129,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\ApplicationResourceTest.java,test bad registration,@ test public void   (  )  throws  exception  {   instance info instance info = spy (  instance info generator . take one (  )  )  ;  when ( instance info . get id (  )  )  . then return ( null )  ;   response response = application resource . add instanc,255,3,test,1,[2]
7130,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\ApplicationResourceTest.java,test bad registration,@ test public void   (  )  throws  exception  {   instance info instance info = spy (  instance info generator . take one (  )  )  ;  when ( instance info . get id (  )  )  . then return ( null )  ;   response response = application resource . add instanc,255,3,bad,2,[]
7131,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\ApplicationResourceTest.java,test bad registration,@ test public void   (  )  throws  exception  {   instance info instance info = spy (  instance info generator . take one (  )  )  ;  when ( instance info . get id (  )  )  . then return ( null )  ;   response response = application resource . add instanc,255,3,registration,3,[]
7132,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\ApplicationsResourceTest.java,set up,@ override @ before public void   (  )  throws  exception  {  super . set up (  )  ;   instance info generator instance infos =  instance info generator . new builder ( 20 6 )  . build (  )  ;  test applications = instance infos . to applications (  )  ; ,255,2,set,1,[70]
7133,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\ApplicationsResourceTest.java,set up,@ override @ before public void   (  )  throws  exception  {  super . set up (  )  ;   instance info generator instance infos =  instance info generator . new builder ( 20 6 )  . build (  )  ;  test applications = instance infos . to applications (  )  ; ,255,2,up,2,"[63, 74]"
7134,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\ApplicationResourceTest.java,test bad registration of data center info,"@ test public void   (  )  throws  exception  {  try  {   configuration manager . get config instance (  )  . set property ( ""eureka . experimental . registration . validation . data center info id"" ""true"" )  ;   instance info instance info = spy (  insta",255,7,test,1,[2]
7135,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\ApplicationResourceTest.java,test bad registration of data center info,"@ test public void   (  )  throws  exception  {  try  {   configuration manager . get config instance (  )  . set property ( ""eureka . experimental . registration . validation . data center info id"" ""true"" )  ;   instance info instance info = spy (  insta",255,7,bad,2,[]
7136,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\ApplicationResourceTest.java,test bad registration of data center info,"@ test public void   (  )  throws  exception  {  try  {   configuration manager . get config instance (  )  . set property ( ""eureka . experimental . registration . validation . data center info id"" ""true"" )  ;   instance info instance info = spy (  insta",255,7,registration,3,[150]
7137,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\ApplicationResourceTest.java,test bad registration of data center info,"@ test public void   (  )  throws  exception  {  try  {   configuration manager . get config instance (  )  . set property ( ""eureka . experimental . registration . validation . data center info id"" ""true"" )  ;   instance info instance info = spy (  insta",255,7,of,4,[]
7138,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\ApplicationResourceTest.java,test bad registration of data center info,"@ test public void   (  )  throws  exception  {  try  {   configuration manager . get config instance (  )  . set property ( ""eureka . experimental . registration . validation . data center info id"" ""true"" )  ;   instance info instance info = spy (  insta",255,7,data,5,[178]
7139,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\ApplicationResourceTest.java,test bad registration of data center info,"@ test public void   (  )  throws  exception  {  try  {   configuration manager . get config instance (  )  . set property ( ""eureka . experimental . registration . validation . data center info id"" ""true"" )  ;   instance info instance info = spy (  insta",255,7,center,6,[183]
7140,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\ApplicationResourceTest.java,test bad registration of data center info,"@ test public void   (  )  throws  exception  {  try  {   configuration manager . get config instance (  )  . set property ( ""eureka . experimental . registration . validation . data center info id"" ""true"" )  ;   instance info instance info = spy (  insta",255,7,info,7,"[190, 222, 236]"
7141,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\ApplicationsResourceTest.java,test full apps get gzip json header type,"@ test public void   (  )  throws  exception  {   response response = applications resource . get containers (  version . v2 . name (  )   media type . application   json ""gzip""  eureka accept . full . name (  )  null null )  ;  assert that ( response . g",255,8,test,1,[2]
7142,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\ApplicationsResourceTest.java,test full apps get gzip json header type,"@ test public void   (  )  throws  exception  {   response response = applications resource . get containers (  version . v2 . name (  )   media type . application   json ""gzip""  eureka accept . full . name (  )  null null )  ;  assert that ( response . g",255,8,full,2,[195]
7143,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\ApplicationsResourceTest.java,test full apps get gzip json header type,"@ test public void   (  )  throws  exception  {   response response = applications resource . get containers (  version . v2 . name (  )   media type . application   json ""gzip""  eureka accept . full . name (  )  null null )  ;  assert that ( response . g",255,8,apps,3,[]
7144,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\ApplicationsResourceTest.java,test full apps get gzip json header type,"@ test public void   (  )  throws  exception  {   response response = applications resource . get containers (  version . v2 . name (  )   media type . application   json ""gzip""  eureka accept . full . name (  )  null null )  ;  assert that ( response . g",255,8,get,4,[94]
7145,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\ApplicationsResourceTest.java,test full apps get gzip json header type,"@ test public void   (  )  throws  exception  {   response response = applications resource . get containers (  version . v2 . name (  )   media type . application   json ""gzip""  eureka accept . full . name (  )  null null )  ;  assert that ( response . g",255,8,gzip,5,[172]
7146,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\ApplicationsResourceTest.java,test full apps get gzip json header type,"@ test public void   (  )  throws  exception  {   response response = applications resource . get containers (  version . v2 . name (  )   media type . application   json ""gzip""  eureka accept . full . name (  )  null null )  ;  assert that ( response . g",255,8,json,6,[166]
7147,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\ApplicationsResourceTest.java,test full apps get gzip json header type,"@ test public void   (  )  throws  exception  {   response response = applications resource . get containers (  version . v2 . name (  )   media type . application   json ""gzip""  eureka accept . full . name (  )  null null )  ;  assert that ( response . g",255,8,header,7,[]
7148,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\ApplicationsResourceTest.java,test full apps get gzip json header type,"@ test public void   (  )  throws  exception  {   response response = applications resource . get containers (  version . v2 . name (  )   media type . application   json ""gzip""  eureka accept . full . name (  )  null null )  ;  assert that ( response . g",255,8,type,8,[145]
7149,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\ApplicationResourceTest.java,test full app get,@ test public void   (  )  throws  exception  {   response response = application resource . get application (  version . v2 . name (  )   media type . application   json  eureka accept . full . name (  )  )  ;   string json =  string . value of ( respons,255,4,test,1,[2]
7150,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\ApplicationResourceTest.java,test full app get,@ test public void   (  )  throws  exception  {   response response = application resource . get application (  version . v2 . name (  )   media type . application   json  eureka accept . full . name (  )  )  ;   string json =  string . value of ( respons,255,4,full,2,[188]
7151,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\ApplicationResourceTest.java,test full app get,@ test public void   (  )  throws  exception  {   response response = application resource . get application (  version . v2 . name (  )   media type . application   json  eureka accept . full . name (  )  )  ;   string json =  string . value of ( respons,255,4,app,3,"[70, 97, 152]"
7152,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\ApplicationResourceTest.java,test full app get,@ test public void   (  )  throws  exception  {   response response = application resource . get application (  version . v2 . name (  )   media type . application   json  eureka accept . full . name (  )  )  ;   string json =  string . value of ( respons,255,4,get,4,[93]
7153,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\ApplicationsResourceTest.java,test full apps get gzip xml header type,"@ test public void   (  )  throws  exception  {   response response = applications resource . get containers (  version . v2 . name (  )   media type . application   xml ""gzip""  eureka accept . full . name (  )  null null )  ;  assert that ( response . ge",255,8,test,1,[2]
7154,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\ApplicationsResourceTest.java,test full apps get gzip xml header type,"@ test public void   (  )  throws  exception  {   response response = applications resource . get containers (  version . v2 . name (  )   media type . application   xml ""gzip""  eureka accept . full . name (  )  null null )  ;  assert that ( response . ge",255,8,full,2,[194]
7155,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\ApplicationsResourceTest.java,test full apps get gzip xml header type,"@ test public void   (  )  throws  exception  {   response response = applications resource . get containers (  version . v2 . name (  )   media type . application   xml ""gzip""  eureka accept . full . name (  )  null null )  ;  assert that ( response . ge",255,8,apps,3,[]
7156,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\ApplicationsResourceTest.java,test full apps get gzip xml header type,"@ test public void   (  )  throws  exception  {   response response = applications resource . get containers (  version . v2 . name (  )   media type . application   xml ""gzip""  eureka accept . full . name (  )  null null )  ;  assert that ( response . ge",255,8,get,4,[94]
7157,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\ApplicationsResourceTest.java,test full apps get gzip xml header type,"@ test public void   (  )  throws  exception  {   response response = applications resource . get containers (  version . v2 . name (  )   media type . application   xml ""gzip""  eureka accept . full . name (  )  null null )  ;  assert that ( response . ge",255,8,gzip,5,[171]
7158,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\ApplicationsResourceTest.java,test full apps get gzip xml header type,"@ test public void   (  )  throws  exception  {   response response = applications resource . get containers (  version . v2 . name (  )   media type . application   xml ""gzip""  eureka accept . full . name (  )  null null )  ;  assert that ( response . ge",255,8,xml,6,[166]
7159,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\ApplicationsResourceTest.java,test full apps get gzip xml header type,"@ test public void   (  )  throws  exception  {   response response = applications resource . get containers (  version . v2 . name (  )   media type . application   xml ""gzip""  eureka accept . full . name (  )  null null )  ;  assert that ( response . ge",255,8,header,7,[]
7160,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\ApplicationsResourceTest.java,test full apps get gzip xml header type,"@ test public void   (  )  throws  exception  {   response response = applications resource . get containers (  version . v2 . name (  )   media type . application   xml ""gzip""  eureka accept . full . name (  )  null null )  ;  assert that ( response . ge",255,8,type,8,[145]
7161,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\ApplicationResourceTest.java,test good registration,"@ test public void   (  )  throws  exception  {   instance info no id info =  instance info generator . take one (  )  ;   response response = application resource . add instance ( no id info false  +  """" )  ;  assert that ( response . get status (  )  is",255,3,test,1,[2]
7162,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\ApplicationResourceTest.java,test good registration,"@ test public void   (  )  throws  exception  {   instance info no id info =  instance info generator . take one (  )  ;   response response = application resource . add instance ( no id info false  +  """" )  ;  assert that ( response . get status (  )  is",255,3,good,2,[]
7163,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\ApplicationResourceTest.java,test good registration,"@ test public void   (  )  throws  exception  {   instance info no id info =  instance info generator . take one (  )  ;   response response = application resource . add instance ( no id info false  +  """" )  ;  assert that ( response . get status (  )  is",255,3,registration,3,[]
7164,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\ApplicationsResourceTest.java,test full apps get json,@ test public void   (  )  throws  exception  {   response response = applications resource . get containers (  version . v2 . name (  )   media type . application   json null  eureka accept . full . name (  )  null null )  ;   string json =  string . val,255,5,test,1,[2]
7165,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\ApplicationsResourceTest.java,test full apps get json,@ test public void   (  )  throws  exception  {   response response = applications resource . get containers (  version . v2 . name (  )   media type . application   json null  eureka accept . full . name (  )  null null )  ;   string json =  string . val,255,5,full,2,[193]
7166,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\ApplicationsResourceTest.java,test full apps get json,@ test public void   (  )  throws  exception  {   response response = applications resource . get containers (  version . v2 . name (  )   media type . application   json null  eureka accept . full . name (  )  null null )  ;   string json =  string . val,255,5,apps,3,[]
7167,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\ApplicationsResourceTest.java,test full apps get json,@ test public void   (  )  throws  exception  {   response response = applications resource . get containers (  version . v2 . name (  )   media type . application   json null  eureka accept . full . name (  )  null null )  ;   string json =  string . val,255,5,get,4,[94]
7168,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\ApplicationsResourceTest.java,test full apps get json,@ test public void   (  )  throws  exception  {   response response = applications resource . get containers (  version . v2 . name (  )   media type . application   json null  eureka accept . full . name (  )  null null )  ;   string json =  string . val,255,5,json,5,"[166, 235]"
7169,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\ApplicationResourceTest.java,test mini app get,@ test public void   (  )  throws  exception  {   response response = application resource . get application (  version . v2 . name (  )   media type . application   json  eureka accept . compact . name (  )  )  ;   string json =  string . value of ( resp,255,4,test,1,[2]
7170,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\ApplicationResourceTest.java,test mini app get,@ test public void   (  )  throws  exception  {   response response = application resource . get application (  version . v2 . name (  )   media type . application   json  eureka accept . compact . name (  )  )  ;   string json =  string . value of ( resp,255,4,mini,2,[]
7171,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\ApplicationResourceTest.java,test mini app get,@ test public void   (  )  throws  exception  {   response response = application resource . get application (  version . v2 . name (  )   media type . application   json  eureka accept . compact . name (  )  )  ;   string json =  string . value of ( resp,255,4,app,3,"[70, 97, 152]"
7172,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\ApplicationResourceTest.java,test mini app get,@ test public void   (  )  throws  exception  {   response response = application resource . get application (  version . v2 . name (  )   media type . application   json  eureka accept . compact . name (  )  )  ;   string json =  string . value of ( resp,255,4,get,4,[93]
7173,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\ApplicationsResourceTest.java,test mini apps get,@ test public void   (  )  throws  exception  {   response response = applications resource . get containers (  version . v2 . name (  )   media type . application   json null  eureka accept . compact . name (  )  null null )  ;   string json =  string . ,255,4,test,1,[2]
7174,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\ApplicationsResourceTest.java,test mini apps get,@ test public void   (  )  throws  exception  {   response response = applications resource . get containers (  version . v2 . name (  )   media type . application   json null  eureka accept . compact . name (  )  null null )  ;   string json =  string . ,255,4,mini,2,[]
7175,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\ApplicationsResourceTest.java,test mini apps get,@ test public void   (  )  throws  exception  {   response response = applications resource . get containers (  version . v2 . name (  )   media type . application   json null  eureka accept . compact . name (  )  null null )  ;   string json =  string . ,255,4,apps,3,[]
7176,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\ApplicationsResourceTest.java,test mini apps get,@ test public void   (  )  throws  exception  {   response response = applications resource . get containers (  version . v2 . name (  )   media type . application   json null  eureka accept . compact . name (  )  null null )  ;   string json =  string . ,255,4,get,4,[94]
7177,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\InstanceResourceTest.java,set up,@ override @ before public void   (  )  throws  exception  {  super . set up (  )  ;  application resource = new  application resource ( test instance info . get app name (  )  server context . get server config (  )  server context . get registry (  )  ),255,2,set,1,[70]
7178,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\InstanceResourceTest.java,set up,@ override @ before public void   (  )  throws  exception  {  super . set up (  )  ;  application resource = new  application resource ( test instance info . get app name (  )  server context . get server config (  )  server context . get registry (  )  ),255,2,up,2,"[63, 74]"
7179,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\InstanceResourceTest.java,test status override delete is applied to registry,"@ test public void   (  )  throws  exception  {  registry . register ( test instance info false )  ;  registry . status update ( test instance info . get app name (  )  test instance info . get id (  )   instance status . out   of   service ""0"" false )  ;",255,8,test,1,"[2, 71, 129, 169]"
7180,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\InstanceResourceTest.java,test status override delete is applied to registry,"@ test public void   (  )  throws  exception  {  registry . register ( test instance info false )  ;  registry . status update ( test instance info . get app name (  )  test instance info . get id (  )   instance status . out   of   service ""0"" false )  ;",255,8,status,2,"[113, 213]"
7181,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\InstanceResourceTest.java,test status override delete is applied to registry,"@ test public void   (  )  throws  exception  {  registry . register ( test instance info false )  ;  registry . status update ( test instance info . get app name (  )  test instance info . get id (  )   instance status . out   of   service ""0"" false )  ;",255,8,override,3,[]
7182,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\InstanceResourceTest.java,test status override delete is applied to registry,"@ test public void   (  )  throws  exception  {  registry . register ( test instance info false )  ;  registry . status update ( test instance info . get app name (  )  test instance info . get id (  )   instance status . out   of   service ""0"" false )  ;",255,8,delete,4,[]
7183,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\InstanceResourceTest.java,test status override delete is applied to registry,"@ test public void   (  )  throws  exception  {  registry . register ( test instance info false )  ;  registry . status update ( test instance info . get app name (  )  test instance info . get id (  )   instance status . out   of   service ""0"" false )  ;",255,8,is,5,"[52, 63, 105]"
7184,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\InstanceResourceTest.java,test status override delete is applied to registry,"@ test public void   (  )  throws  exception  {  registry . register ( test instance info false )  ;  registry . status update ( test instance info . get app name (  )  test instance info . get id (  )   instance status . out   of   service ""0"" false )  ;",255,8,applied,6,[]
7185,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\InstanceResourceTest.java,test status override delete is applied to registry,"@ test public void   (  )  throws  exception  {  registry . register ( test instance info false )  ;  registry . status update ( test instance info . get app name (  )  test instance info . get id (  )   instance status . out   of   service ""0"" false )  ;",255,8,to,7,[]
7186,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\InstanceResourceTest.java,test status override delete is applied to registry,"@ test public void   (  )  throws  exception  {  registry . register ( test instance info false )  ;  registry . status update ( test instance info . get app name (  )  test instance info . get id (  )   instance status . out   of   service ""0"" false )  ;",255,8,registry,8,"[49, 102]"
7187,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\InstanceResourceTest.java,test status override delete is applied to registry and provided status is set,"@ test public void   (  )  throws  exception  {  registry . register ( test instance info false )  ;  registry . status update ( test instance info . get app name (  )  test instance info . get id (  )   instance status . out   of   service ""0"" false )  ;",255,13,test,1,"[2, 71, 129, 169]"
7188,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\InstanceResourceTest.java,test status override delete is applied to registry and provided status is set,"@ test public void   (  )  throws  exception  {  registry . register ( test instance info false )  ;  registry . status update ( test instance info . get app name (  )  test instance info . get id (  )   instance status . out   of   service ""0"" false )  ;",255,13,status,2,"[113, 213]"
7189,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\InstanceResourceTest.java,test status override delete is applied to registry and provided status is set,"@ test public void   (  )  throws  exception  {  registry . register ( test instance info false )  ;  registry . status update ( test instance info . get app name (  )  test instance info . get id (  )   instance status . out   of   service ""0"" false )  ;",255,13,override,3,[]
7190,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\InstanceResourceTest.java,test status override delete is applied to registry and provided status is set,"@ test public void   (  )  throws  exception  {  registry . register ( test instance info false )  ;  registry . status update ( test instance info . get app name (  )  test instance info . get id (  )   instance status . out   of   service ""0"" false )  ;",255,13,delete,4,[]
7191,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\InstanceResourceTest.java,test status override delete is applied to registry and provided status is set,"@ test public void   (  )  throws  exception  {  registry . register ( test instance info false )  ;  registry . status update ( test instance info . get app name (  )  test instance info . get id (  )   instance status . out   of   service ""0"" false )  ;",255,13,is,5,"[52, 63, 105]"
7192,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\InstanceResourceTest.java,test status override delete is applied to registry and provided status is set,"@ test public void   (  )  throws  exception  {  registry . register ( test instance info false )  ;  registry . status update ( test instance info . get app name (  )  test instance info . get id (  )   instance status . out   of   service ""0"" false )  ;",255,13,applied,6,[]
7193,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\InstanceResourceTest.java,test status override delete is applied to registry and provided status is set,"@ test public void   (  )  throws  exception  {  registry . register ( test instance info false )  ;  registry . status update ( test instance info . get app name (  )  test instance info . get id (  )   instance status . out   of   service ""0"" false )  ;",255,13,to,7,[]
7194,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\InstanceResourceTest.java,test status override delete is applied to registry and provided status is set,"@ test public void   (  )  throws  exception  {  registry . register ( test instance info false )  ;  registry . status update ( test instance info . get app name (  )  test instance info . get id (  )   instance status . out   of   service ""0"" false )  ;",255,13,registry,8,"[49, 102]"
7195,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\InstanceResourceTest.java,test status override delete is applied to registry and provided status is set,"@ test public void   (  )  throws  exception  {  registry . register ( test instance info false )  ;  registry . status update ( test instance info . get app name (  )  test instance info . get id (  )   instance status . out   of   service ""0"" false )  ;",255,13,and,9,[]
7196,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\InstanceResourceTest.java,test status override delete is applied to registry and provided status is set,"@ test public void   (  )  throws  exception  {  registry . register ( test instance info false )  ;  registry . status update ( test instance info . get app name (  )  test instance info . get id (  )   instance status . out   of   service ""0"" false )  ;",255,13,provided,10,[]
7197,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\InstanceResourceTest.java,test status override delete is applied to registry and provided status is set,"@ test public void   (  )  throws  exception  {  registry . register ( test instance info false )  ;  registry . status update ( test instance info . get app name (  )  test instance info . get id (  )   instance status . out   of   service ""0"" false )  ;",255,13,status,11,"[113, 213]"
7198,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\InstanceResourceTest.java,test status override delete is applied to registry and provided status is set,"@ test public void   (  )  throws  exception  {  registry . register ( test instance info false )  ;  registry . status update ( test instance info . get app name (  )  test instance info . get id (  )   instance status . out   of   service ""0"" false )  ;",255,13,is,12,"[52, 63, 105]"
7199,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\InstanceResourceTest.java,test status override delete is applied to registry and provided status is set,"@ test public void   (  )  throws  exception  {  registry . register ( test instance info false )  ;  registry . status update ( test instance info . get app name (  )  test instance info . get id (  )   instance status . out   of   service ""0"" false )  ;",255,13,set,13,[]
7200,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\InstanceResourceTest.java,test status override delete returns not found error code if instance not registered,"@ test public void   (  )  throws  exception  {   response response = instance resource . delete status update (  instance status . out   of   service . name (  )  ""false"" ""0"" )  ;  assert that ( response . get status (  )  is ( equal to (  status . not  ",255,13,test,1,[2]
7201,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\InstanceResourceTest.java,test status override delete returns not found error code if instance not registered,"@ test public void   (  )  throws  exception  {   response response = instance resource . delete status update (  instance status . out   of   service . name (  )  ""false"" ""0"" )  ;  assert that ( response . get status (  )  is ( equal to (  status . not  ",255,13,status,2,"[97, 123, 211, 241]"
7202,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\InstanceResourceTest.java,test status override delete returns not found error code if instance not registered,"@ test public void   (  )  throws  exception  {   response response = instance resource . delete status update (  instance status . out   of   service . name (  )  ""false"" ""0"" )  ;  assert that ( response . get status (  )  is ( equal to (  status . not  ",255,13,override,3,[]
7203,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\InstanceResourceTest.java,test status override delete returns not found error code if instance not registered,"@ test public void   (  )  throws  exception  {   response response = instance resource . delete status update (  instance status . out   of   service . name (  )  ""false"" ""0"" )  ;  assert that ( response . get status (  )  is ( equal to (  status . not  ",255,13,delete,4,[90]
7204,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\InstanceResourceTest.java,test status override delete returns not found error code if instance not registered,"@ test public void   (  )  throws  exception  {   response response = instance resource . delete status update (  instance status . out   of   service . name (  )  ""false"" ""0"" )  ;  assert that ( response . get status (  )  is ( equal to (  status . not  ",255,13,returns,5,[]
7205,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\InstanceResourceTest.java,test status override delete returns not found error code if instance not registered,"@ test public void   (  )  throws  exception  {   response response = instance resource . delete status update (  instance status . out   of   service . name (  )  ""false"" ""0"" )  ;  assert that ( response . get status (  )  is ( equal to (  status . not  ",255,13,not,6,[250]
7206,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\InstanceResourceTest.java,test status override delete returns not found error code if instance not registered,"@ test public void   (  )  throws  exception  {   response response = instance resource . delete status update (  instance status . out   of   service . name (  )  ""false"" ""0"" )  ;  assert that ( response . get status (  )  is ( equal to (  status . not  ",255,13,found,7,[]
7207,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\InstanceResourceTest.java,test status override delete returns not found error code if instance not registered,"@ test public void   (  )  throws  exception  {   response response = instance resource . delete status update (  instance status . out   of   service . name (  )  ""false"" ""0"" )  ;  assert that ( response . get status (  )  is ( equal to (  status . not  ",255,13,error,8,[]
7208,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\InstanceResourceTest.java,test status override delete returns not found error code if instance not registered,"@ test public void   (  )  throws  exception  {   response response = instance resource . delete status update (  instance status . out   of   service . name (  )  ""false"" ""0"" )  ;  assert that ( response . get status (  )  is ( equal to (  status . not  ",255,13,code,9,[]
7209,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\InstanceResourceTest.java,test status override delete returns not found error code if instance not registered,"@ test public void   (  )  throws  exception  {   response response = instance resource . delete status update (  instance status . out   of   service . name (  )  ""false"" ""0"" )  ;  assert that ( response . get status (  )  is ( equal to (  status . not  ",255,13,if,10,[]
7210,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\InstanceResourceTest.java,test status override delete returns not found error code if instance not registered,"@ test public void   (  )  throws  exception  {   response response = instance resource . delete status update (  instance status . out   of   service . name (  )  ""false"" ""0"" )  ;  assert that ( response . get status (  )  is ( equal to (  status . not  ",255,13,instance,11,"[70, 114]"
7211,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\InstanceResourceTest.java,test status override delete returns not found error code if instance not registered,"@ test public void   (  )  throws  exception  {   response response = instance resource . delete status update (  instance status . out   of   service . name (  )  ""false"" ""0"" )  ;  assert that ( response . get status (  )  is ( equal to (  status . not  ",255,13,not,12,[250]
7212,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\InstanceResourceTest.java,test status override delete returns not found error code if instance not registered,"@ test public void   (  )  throws  exception  {   response response = instance resource . delete status update (  instance status . out   of   service . name (  )  ""false"" ""0"" )  ;  assert that ( response . get status (  )  is ( equal to (  status . not  ",255,13,registered,13,[]
7213,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\InstanceResourceTest.java,test status override returns not found error code if instance not registered,"@ test public void   (  )  throws  exception  {   response response = instance resource . status update (  instance status . out   of   service . name (  )  ""false"" ""0"" )  ;  assert that ( response . get status (  )  is ( equal to (  status . not   found ",255,12,test,1,[2]
7214,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\InstanceResourceTest.java,test status override returns not found error code if instance not registered,"@ test public void   (  )  throws  exception  {   response response = instance resource . status update (  instance status . out   of   service . name (  )  ""false"" ""0"" )  ;  assert that ( response . get status (  )  is ( equal to (  status . not   found ",255,12,status,2,"[90, 116, 204, 234]"
7215,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\InstanceResourceTest.java,test status override returns not found error code if instance not registered,"@ test public void   (  )  throws  exception  {   response response = instance resource . status update (  instance status . out   of   service . name (  )  ""false"" ""0"" )  ;  assert that ( response . get status (  )  is ( equal to (  status . not   found ",255,12,override,3,[]
7216,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\InstanceResourceTest.java,test status override returns not found error code if instance not registered,"@ test public void   (  )  throws  exception  {   response response = instance resource . status update (  instance status . out   of   service . name (  )  ""false"" ""0"" )  ;  assert that ( response . get status (  )  is ( equal to (  status . not   found ",255,12,returns,4,[]
7217,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\InstanceResourceTest.java,test status override returns not found error code if instance not registered,"@ test public void   (  )  throws  exception  {   response response = instance resource . status update (  instance status . out   of   service . name (  )  ""false"" ""0"" )  ;  assert that ( response . get status (  )  is ( equal to (  status . not   found ",255,12,not,5,[243]
7218,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\InstanceResourceTest.java,test status override returns not found error code if instance not registered,"@ test public void   (  )  throws  exception  {   response response = instance resource . status update (  instance status . out   of   service . name (  )  ""false"" ""0"" )  ;  assert that ( response . get status (  )  is ( equal to (  status . not   found ",255,12,found,6,[249]
7219,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\InstanceResourceTest.java,test status override returns not found error code if instance not registered,"@ test public void   (  )  throws  exception  {   response response = instance resource . status update (  instance status . out   of   service . name (  )  ""false"" ""0"" )  ;  assert that ( response . get status (  )  is ( equal to (  status . not   found ",255,12,error,7,[]
7220,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\InstanceResourceTest.java,test status override returns not found error code if instance not registered,"@ test public void   (  )  throws  exception  {   response response = instance resource . status update (  instance status . out   of   service . name (  )  ""false"" ""0"" )  ;  assert that ( response . get status (  )  is ( equal to (  status . not   found ",255,12,code,8,[]
7221,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\InstanceResourceTest.java,test status override returns not found error code if instance not registered,"@ test public void   (  )  throws  exception  {   response response = instance resource . status update (  instance status . out   of   service . name (  )  ""false"" ""0"" )  ;  assert that ( response . get status (  )  is ( equal to (  status . not   found ",255,12,if,9,[]
7222,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\InstanceResourceTest.java,test status override returns not found error code if instance not registered,"@ test public void   (  )  throws  exception  {   response response = instance resource . status update (  instance status . out   of   service . name (  )  ""false"" ""0"" )  ;  assert that ( response . get status (  )  is ( equal to (  status . not   found ",255,12,instance,10,"[70, 107]"
7223,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\InstanceResourceTest.java,test status override returns not found error code if instance not registered,"@ test public void   (  )  throws  exception  {   response response = instance resource . status update (  instance status . out   of   service . name (  )  ""false"" ""0"" )  ;  assert that ( response . get status (  )  is ( equal to (  status . not   found ",255,12,not,11,[243]
7224,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\InstanceResourceTest.java,test status override returns not found error code if instance not registered,"@ test public void   (  )  throws  exception  {   response response = instance resource . status update (  instance status . out   of   service . name (  )  ""false"" ""0"" )  ;  assert that ( response . get status (  )  is ( equal to (  status . not   found ",255,12,registered,12,[]
7225,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\AwsAsgUtilTest.java,set up,"@ before public void   (  )  throws  exception  {   configuration manager . get config instance (  )  . set property ( ""eureka . aws access id"" ""fake id"" )  ;   configuration manager . get config instance (  )  . set property ( ""eureka . aws secret key"" """,255,2,set,1,"[104, 213]"
7226,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\AwsAsgUtilTest.java,set up,"@ before public void   (  )  throws  exception  {   configuration manager . get config instance (  )  . set property ( ""eureka . aws access id"" ""fake id"" )  ;   configuration manager . get config instance (  )  . set property ( ""eureka . aws secret key"" """,255,2,up,2,[]
7227,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\AwsAsgUtilTest.java,tear down,@ after public void   (  )  throws  exception  {   configuration manager . get config instance (  )  . clear (  )  ;   }  ,122,2,tear,1,[]
7228,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\AwsAsgUtilTest.java,tear down,@ after public void   (  )  throws  exception  {   configuration manager . get config instance (  )  . clear (  )  ;   }  ,122,2,down,2,[]
7229,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\AwsAsgUtilTest.java,test default asg status,@ test public void   (  )  {   assert . assert equals ( true aws asg util . isasg enabled ( instance info )  )  ;   }  ,119,4,test,1,[2]
7230,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\AwsAsgUtilTest.java,test default asg status,@ test public void   (  )  {   assert . assert equals ( true aws asg util . isasg enabled ( instance info )  )  ;   }  ,119,4,default,2,[]
7231,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\AwsAsgUtilTest.java,test default asg status,@ test public void   (  )  {   assert . assert equals ( true aws asg util . isasg enabled ( instance info )  )  ;   }  ,119,4,asg,3,"[65, 78]"
7232,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\AwsAsgUtilTest.java,test default asg status,@ test public void   (  )  {   assert . assert equals ( true aws asg util . isasg enabled ( instance info )  )  ;   }  ,119,4,status,4,[]
7233,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\PeerReplicationResourceTest.java,assert response entity exist,private static void   (  response http response )  {   replication list response entity =  (  replication list response ) http response . get entity (  )  ;  assert that ( entity is ( not null value (  )  )  )  ;   replication instance response replication response = entity . get response list (  )  . get ( 0 )  ;  assert that ( replication response . get response entity (  )  is ( not null value (  )  )  )  ;   }  ,419,4,assert,1,"[158, 317]"
7234,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\PeerReplicationResourceTest.java,assert response entity exist,private static void   (  response http response )  {   replication list response entity =  (  replication list response ) http response . get entity (  )  ;  assert that ( entity is ( not null value (  )  )  )  ;   replication instance response replication response = entity . get response list (  )  . get ( 0 )  ;  assert that ( replication response . get response entity (  )  is ( not null value (  )  )  )  ;   }  ,419,4,response,2,"[25, 39, 72, 111, 127, 236, 257, 281, 343, 358]"
7235,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\PeerReplicationResourceTest.java,assert response entity exist,private static void   (  response http response )  {   replication list response entity =  (  replication list response ) http response . get entity (  )  ;  assert that ( entity is ( not null value (  )  )  )  ;   replication instance response replication response = entity . get response list (  )  . get ( 0 )  ;  assert that ( replication response . get response entity (  )  is ( not null value (  )  )  )  ;   }  ,419,4,entity,3,"[81, 142, 172, 268, 367]"
7236,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\PeerReplicationResourceTest.java,assert response entity exist,private static void   (  response http response )  {   replication list response entity =  (  replication list response ) http response . get entity (  )  ;  assert that ( entity is ( not null value (  )  )  )  ;   replication instance response replication response = entity . get response list (  )  . get ( 0 )  ;  assert that ( replication response . get response entity (  )  is ( not null value (  )  )  )  ;   }  ,419,4,exist,4,[]
7237,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\PeerReplicationResourceTest.java,assert status,private static void   (  response http response int expected status code )  {   replication list response entity =  (  replication list response ) http response . get entity (  )  ;  assert that ( entity is ( not null value (  )  )  )  ;   replication instance response replication response = entity . get response list (  )  . get ( 0 )  ;  assert that ( replication response . get status code (  )  is ( equal to ( expected status code )  )  )  ;   }  ,454,2,assert,1,"[183, 342]"
7238,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\PeerReplicationResourceTest.java,assert status,private static void   (  response http response int expected status code )  {   replication list response entity =  (  replication list response ) http response . get entity (  )  ;  assert that ( entity is ( not null value (  )  )  )  ;   replication instance response replication response = entity . get response list (  )  . get ( 0 )  ;  assert that ( replication response . get status code (  )  is ( equal to ( expected status code )  )  )  ;   }  ,454,2,status,2,"[61, 383, 426]"
7239,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\PeerReplicationResourceTest.java,assert status is conflict,private static void   (  response http response )  {  assert status ( http response 409 )  ;   }  ,98,4,assert,1,[54]
7240,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\PeerReplicationResourceTest.java,assert status is conflict,private static void   (  response http response )  {  assert status ( http response 409 )  ;   }  ,98,4,status,2,[61]
7241,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\PeerReplicationResourceTest.java,assert status is conflict,private static void   (  response http response )  {  assert status ( http response 409 )  ;   }  ,98,4,is,3,[]
7242,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\PeerReplicationResourceTest.java,assert status is conflict,private static void   (  response http response )  {  assert status ( http response 409 )  ;   }  ,98,4,conflict,4,[]
7243,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\PeerReplicationResourceTest.java,assert status ok reply,private static void   (  response http response )  {  assert status ( http response 200 )  ;   }  ,98,4,assert,1,[54]
7244,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\PeerReplicationResourceTest.java,assert status ok reply,private static void   (  response http response )  {  assert status ( http response 200 )  ;   }  ,98,4,status,2,[61]
7245,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\PeerReplicationResourceTest.java,assert status ok reply,private static void   (  response http response )  {  assert status ( http response 200 )  ;   }  ,98,4,ok,3,[]
7246,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\PeerReplicationResourceTest.java,assert status ok reply,private static void   (  response http response )  {  assert status ( http response 200 )  ;   }  ,98,4,reply,4,[]
7247,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\PeerReplicationResourceTest.java,create application resource,@ override  application resource   (  replication instance instance info )  {  return application resource ;   }  ,114,3,create,1,[]
7248,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\PeerReplicationResourceTest.java,create application resource,@ override  application resource   (  replication instance instance info )  {  return application resource ;   }  ,114,3,application,2,"[12, 86]"
7249,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\PeerReplicationResourceTest.java,create application resource,@ override  application resource   (  replication instance instance info )  {  return application resource ;   }  ,114,3,resource,3,"[24, 98]"
7250,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\PeerReplicationResourceTest.java,create instance resource,@ override  instance resource   (  replication instance instance info  application resource application resource )  {  return instance resource ;   }  ,151,3,create,1,[]
7251,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\PeerReplicationResourceTest.java,create instance resource,@ override  instance resource   (  replication instance instance info  application resource application resource )  {  return instance resource ;   }  ,151,3,instance,2,"[12, 47, 56, 126]"
7252,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\PeerReplicationResourceTest.java,create instance resource,@ override  instance resource   (  replication instance instance info  application resource application resource )  {  return instance resource ;   }  ,151,3,resource,3,"[21, 83, 104, 135]"
7253,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\PeerReplicationResourceTest.java,set up,@ before public void   (  )  {  server context = mock (  eureka server context . class )  ;  when ( server context . get server config (  )  )  . then return ( mock (  eureka server config . class )  )  ;  peer replication resource = new  peer replication,255,2,set,1,[]
7254,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\PeerReplicationResourceTest.java,set up,@ before public void   (  )  {  server context = mock (  eureka server context . class )  ;  when ( server context . get server config (  )  )  . then return ( mock (  eureka server config . class )  )  ;  peer replication resource = new  peer replication,255,2,up,2,[]
7255,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\PeerReplicationResourceTest.java,test cancel batching,@ test public void   (  )  throws  exception  {  when ( instance resource . cancel lease ( any string (  )  )  )  . then return (  response . ok (  )  . build (  )  )  ;   replication list replication list = new  replication list ( new replication instanc,255,3,test,1,[2]
7256,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\PeerReplicationResourceTest.java,test cancel batching,@ test public void   (  )  throws  exception  {  when ( instance resource . cancel lease ( any string (  )  )  )  . then return (  response . ok (  )  . build (  )  )  ;   replication list replication list = new  replication list ( new replication instanc,255,3,cancel,2,[76]
7257,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\PeerReplicationResourceTest.java,test cancel batching,@ test public void   (  )  throws  exception  {  when ( instance resource . cancel lease ( any string (  )  )  )  . then return (  response . ok (  )  . build (  )  )  ;   replication list replication list = new  replication list ( new replication instanc,255,3,batching,3,[]
7258,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\PeerReplicationResourceTest.java,test conflict response returns the instance info in the response entity,@ test public void   (  )  throws  exception  {  when ( instance resource . renew lease ( any string (  )  any string (  )  any string (  )  any string (  )  )  )  . then return (  response . status (  status . conflict )  . entity ( instance info )  . bu,255,11,test,1,[2]
7259,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\PeerReplicationResourceTest.java,test conflict response returns the instance info in the response entity,@ test public void   (  )  throws  exception  {  when ( instance resource . renew lease ( any string (  )  any string (  )  any string (  )  any string (  )  )  )  . then return (  response . status (  status . conflict )  . entity ( instance info )  . bu,255,11,conflict,2,[211]
7260,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\PeerReplicationResourceTest.java,test conflict response returns the instance info in the response entity,@ test public void   (  )  throws  exception  {  when ( instance resource . renew lease ( any string (  )  any string (  )  any string (  )  any string (  )  )  )  . then return (  response . status (  status . conflict )  . entity ( instance info )  . bu,255,11,response,3,[181]
7261,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\PeerReplicationResourceTest.java,test conflict response returns the instance info in the response entity,@ test public void   (  )  throws  exception  {  when ( instance resource . renew lease ( any string (  )  any string (  )  any string (  )  any string (  )  )  )  . then return (  response . status (  status . conflict )  . entity ( instance info )  . bu,255,11,returns,4,[]
7262,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\PeerReplicationResourceTest.java,test conflict response returns the instance info in the response entity,@ test public void   (  )  throws  exception  {  when ( instance resource . renew lease ( any string (  )  any string (  )  any string (  )  any string (  )  )  )  . then return (  response . status (  status . conflict )  . entity ( instance info )  . bu,255,11,the,5,[166]
7263,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\PeerReplicationResourceTest.java,test conflict response returns the instance info in the response entity,@ test public void   (  )  throws  exception  {  when ( instance resource . renew lease ( any string (  )  any string (  )  any string (  )  any string (  )  )  )  . then return (  response . status (  status . conflict )  . entity ( instance info )  . bu,255,11,instance,6,"[56, 234]"
7264,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\PeerReplicationResourceTest.java,test conflict response returns the instance info in the response entity,@ test public void   (  )  throws  exception  {  when ( instance resource . renew lease ( any string (  )  any string (  )  any string (  )  any string (  )  )  )  . then return (  response . status (  status . conflict )  . entity ( instance info )  . bu,255,11,info,7,[243]
7265,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\PeerReplicationResourceTest.java,test conflict response returns the instance info in the response entity,@ test public void   (  )  throws  exception  {  when ( instance resource . renew lease ( any string (  )  any string (  )  any string (  )  any string (  )  )  )  . then return (  response . status (  status . conflict )  . entity ( instance info )  . bu,255,11,in,8,"[56, 97, 114, 131, 148, 234, 243]"
7266,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\PeerReplicationResourceTest.java,test conflict response returns the instance info in the response entity,@ test public void   (  )  throws  exception  {  when ( instance resource . renew lease ( any string (  )  any string (  )  any string (  )  any string (  )  )  )  . then return (  response . status (  status . conflict )  . entity ( instance info )  . bu,255,11,the,9,[166]
7267,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\PeerReplicationResourceTest.java,test conflict response returns the instance info in the response entity,@ test public void   (  )  throws  exception  {  when ( instance resource . renew lease ( any string (  )  any string (  )  any string (  )  any string (  )  )  )  . then return (  response . status (  status . conflict )  . entity ( instance info )  . bu,255,11,response,10,[181]
7268,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\PeerReplicationResourceTest.java,test conflict response returns the instance info in the response entity,@ test public void   (  )  throws  exception  {  when ( instance resource . renew lease ( any string (  )  any string (  )  any string (  )  any string (  )  )  )  . then return (  response . status (  status . conflict )  . entity ( instance info )  . bu,255,11,entity,11,[225]
7269,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\PeerReplicationResourceTest.java,test delete status override,@ test public void   (  )  throws  exception  {  when ( instance resource . delete status update ( any string (  )  any string (  )  any string (  )  )  )  . then return (  response . ok (  )  . build (  )  )  ;   replication instance replication instance,255,4,test,1,[2]
7270,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\PeerReplicationResourceTest.java,test delete status override,@ test public void   (  )  throws  exception  {  when ( instance resource . delete status update ( any string (  )  any string (  )  any string (  )  )  )  . then return (  response . ok (  )  . build (  )  )  ;   replication instance replication instance,255,4,delete,2,[76]
7271,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\PeerReplicationResourceTest.java,test delete status override,@ test public void   (  )  throws  exception  {  when ( instance resource . delete status update ( any string (  )  any string (  )  any string (  )  )  )  . then return (  response . ok (  )  . build (  )  )  ;   replication instance replication instance,255,4,status,3,[83]
7272,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\PeerReplicationResourceTest.java,test delete status override,@ test public void   (  )  throws  exception  {  when ( instance resource . delete status update ( any string (  )  any string (  )  any string (  )  )  )  . then return (  response . ok (  )  . build (  )  )  ;   replication instance replication instance,255,4,override,4,[]
7273,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\PeerReplicationResourceTest.java,test heartbeat,@ test public void   (  )  throws  exception  {  when ( instance resource . renew lease ( any string (  )  any string (  )  any string (  )  any string (  )  )  )  . then return (  response . ok (  )  . build (  )  )  ;   replication instance replication ,255,2,test,1,[2]
7274,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\PeerReplicationResourceTest.java,test heartbeat,@ test public void   (  )  throws  exception  {  when ( instance resource . renew lease ( any string (  )  any string (  )  any string (  )  any string (  )  )  )  . then return (  response . ok (  )  . build (  )  )  ;   replication instance replication ,255,2,heartbeat,2,[]
7275,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\PeerReplicationResourceTest.java,test register batching,@ test public void   (  )  throws  exception  {   replication list replication list = new  replication list ( new replication instance of (  action .  register instance info )  )  ;   response response = peer replication resource . batch replication ( rep,255,3,test,1,[2]
7276,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\PeerReplicationResourceTest.java,test register batching,@ test public void   (  )  throws  exception  {   replication list replication list = new  replication list ( new replication instance of (  action .  register instance info )  )  ;   response response = peer replication resource . batch replication ( rep,255,3,register,2,[151]
7277,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\PeerReplicationResourceTest.java,test register batching,@ test public void   (  )  throws  exception  {   replication list replication list = new  replication list ( new replication instance of (  action .  register instance info )  )  ;   response response = peer replication resource . batch replication ( rep,255,3,batching,3,[]
7278,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\PeerReplicationResourceTest.java,test status update,@ test public void   (  )  throws  exception  {  when ( instance resource . status update ( any string (  )  any string (  )  any string (  )  )  )  . then return (  response . ok (  )  . build (  )  )  ;   replication instance replication instance = new ,255,3,test,1,[2]
7279,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\PeerReplicationResourceTest.java,test status update,@ test public void   (  )  throws  exception  {  when ( instance resource . status update ( any string (  )  any string (  )  any string (  )  )  )  . then return (  response . ok (  )  . build (  )  )  ;   replication instance replication instance = new ,255,3,status,2,[76]
7280,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\PeerReplicationResourceTest.java,test status update,@ test public void   (  )  throws  exception  {  when ( instance resource . status update ( any string (  )  any string (  )  any string (  )  )  )  . then return (  response . ok (  )  . build (  )  )  ;   replication instance replication instance = new ,255,3,update,3,[83]
7281,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\AcceptorExecutorTest.java,set up,"@ before public void   (  )  throws  exception  {  acceptor executor = new  acceptor executor <  >  ( ""test"" max   buffer   size work   load   size max   batching   delay   ms server   unavailable   sleep   time   ms retry   sleep   time   ms )  ;   }  ",253,2,set,1,[]
7282,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\AcceptorExecutorTest.java,set up,"@ before public void   (  )  throws  exception  {  acceptor executor = new  acceptor executor <  >  ( ""test"" max   buffer   size work   load   size max   batching   delay   ms server   unavailable   sleep   time   ms retry   sleep   time   ms )  ;   }  ",253,2,up,2,[]
7283,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\AcceptorExecutorTest.java,tear down,@ after public void   (  )  throws  exception  {  acceptor executor . shutdown (  )  ;   }  ,92,2,tear,1,[]
7284,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\AcceptorExecutorTest.java,tear down,@ after public void   (  )  throws  exception  {  acceptor executor . shutdown (  )  ;   }  ,92,2,down,2,[74]
7285,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\AcceptorExecutorTest.java,test batch size is constrained by configured max size,"@ test public void   (  )  throws  exception  {  for  ( int i = 0 ;  i  <  =  max   buffer   size ;  i +  +  )   {  acceptor executor . process ( i "" task""  +  i  system . current time millis (  )   +  60 * 1000 )  ;   }   list <  task holder <  integer  ",255,9,test,1,[2]
7286,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\AcceptorExecutorTest.java,test batch size is constrained by configured max size,"@ test public void   (  )  throws  exception  {  for  ( int i = 0 ;  i  <  =  max   buffer   size ;  i +  +  )   {  acceptor executor . process ( i "" task""  +  i  system . current time millis (  )   +  60 * 1000 )  ;   }   list <  task holder <  integer  ",255,9,batch,2,[]
7287,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\AcceptorExecutorTest.java,test batch size is constrained by configured max size,"@ test public void   (  )  throws  exception  {  for  ( int i = 0 ;  i  <  =  max   buffer   size ;  i +  +  )   {  acceptor executor . process ( i "" task""  +  i  system . current time millis (  )   +  60 * 1000 )  ;   }   list <  task holder <  integer  ",255,9,size,3,[93]
7288,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\AcceptorExecutorTest.java,test batch size is constrained by configured max size,"@ test public void   (  )  throws  exception  {  for  ( int i = 0 ;  i  <  =  max   buffer   size ;  i +  +  )   {  acceptor executor . process ( i "" task""  +  i  system . current time millis (  )   +  60 * 1000 )  ;   }   list <  task holder <  integer  ",255,9,is,4,"[189, 224]"
7289,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\AcceptorExecutorTest.java,test batch size is constrained by configured max size,"@ test public void   (  )  throws  exception  {  for  ( int i = 0 ;  i  <  =  max   buffer   size ;  i +  +  )   {  acceptor executor . process ( i "" task""  +  i  system . current time millis (  )   +  60 * 1000 )  ;   }   list <  task holder <  integer  ",255,9,constrained,5,[]
7290,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\AcceptorExecutorTest.java,test batch size is constrained by configured max size,"@ test public void   (  )  throws  exception  {  for  ( int i = 0 ;  i  <  =  max   buffer   size ;  i +  +  )   {  acceptor executor . process ( i "" task""  +  i  system . current time millis (  )   +  60 * 1000 )  ;   }   list <  task holder <  integer  ",255,9,by,6,[]
7291,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\AcceptorExecutorTest.java,test batch size is constrained by configured max size,"@ test public void   (  )  throws  exception  {  for  ( int i = 0 ;  i  <  =  max   buffer   size ;  i +  +  )   {  acceptor executor . process ( i "" task""  +  i  system . current time millis (  )   +  60 * 1000 )  ;   }   list <  task holder <  integer  ",255,9,configured,7,[]
7292,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\AcceptorExecutorTest.java,test batch size is constrained by configured max size,"@ test public void   (  )  throws  exception  {  for  ( int i = 0 ;  i  <  =  max   buffer   size ;  i +  +  )   {  acceptor executor . process ( i "" task""  +  i  system . current time millis (  )   +  60 * 1000 )  ;   }   list <  task holder <  integer  ",255,9,max,8,[78]
7293,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\AcceptorExecutorTest.java,test batch size is constrained by configured max size,"@ test public void   (  )  throws  exception  {  for  ( int i = 0 ;  i  <  =  max   buffer   size ;  i +  +  )   {  acceptor executor . process ( i "" task""  +  i  system . current time millis (  )   +  60 * 1000 )  ;   }   list <  task holder <  integer  ",255,9,size,9,[93]
7294,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\AcceptorExecutorTest.java,test new task overrides old one,"@ test public void   (  )  throws  exception  {  acceptor executor . process ( 1 "" task1""  system . current time millis (  )   +  60 * 1000 )  ;  acceptor executor . process ( 1 "" task1 . 1""  system . current time millis (  )   +  60 * 1000 )  ;   task ho",255,6,test,1,[2]
7295,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\AcceptorExecutorTest.java,test new task overrides old one,"@ test public void   (  )  throws  exception  {  acceptor executor . process ( 1 "" task1""  system . current time millis (  )   +  60 * 1000 )  ;  acceptor executor . process ( 1 "" task1 . 1""  system . current time millis (  )   +  60 * 1000 )  ;   task ho",255,6,new,2,[]
7296,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\AcceptorExecutorTest.java,test new task overrides old one,"@ test public void   (  )  throws  exception  {  acceptor executor . process ( 1 "" task1""  system . current time millis (  )   +  60 * 1000 )  ;  acceptor executor . process ( 1 "" task1 . 1""  system . current time millis (  )   +  60 * 1000 )  ;   task ho",255,6,task,3,"[83, 180, 248]"
7297,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\AcceptorExecutorTest.java,test new task overrides old one,"@ test public void   (  )  throws  exception  {  acceptor executor . process ( 1 "" task1""  system . current time millis (  )   +  60 * 1000 )  ;  acceptor executor . process ( 1 "" task1 . 1""  system . current time millis (  )   +  60 * 1000 )  ;   task ho",255,6,overrides,4,[]
7298,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\AcceptorExecutorTest.java,test new task overrides old one,"@ test public void   (  )  throws  exception  {  acceptor executor . process ( 1 "" task1""  system . current time millis (  )   +  60 * 1000 )  ;  acceptor executor . process ( 1 "" task1 . 1""  system . current time millis (  )   +  60 * 1000 )  ;   task ho",255,6,old,5,[]
7299,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\AcceptorExecutorTest.java,test new task overrides old one,"@ test public void   (  )  throws  exception  {  acceptor executor . process ( 1 "" task1""  system . current time millis (  )   +  60 * 1000 )  ;  acceptor executor . process ( 1 "" task1 . 1""  system . current time millis (  )   +  60 * 1000 )  ;   task ho",255,6,one,6,[]
7300,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\AcceptorExecutorTest.java,test republished task is handled first,"@ test public void   (  )  throws  exception  {  acceptor executor . process ( 1 "" task1""  system . current time millis (  )   +  60 * 1000 )  ;  acceptor executor . process ( 2 "" task2""  system . current time millis (  )   +  60 * 1000 )  ;   task holder",255,6,test,1,[2]
7301,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\AcceptorExecutorTest.java,test republished task is handled first,"@ test public void   (  )  throws  exception  {  acceptor executor . process ( 1 "" task1""  system . current time millis (  )   +  60 * 1000 )  ;  acceptor executor . process ( 2 "" task2""  system . current time millis (  )   +  60 * 1000 )  ;   task holder",255,6,republished,2,[]
7302,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\AcceptorExecutorTest.java,test republished task is handled first,"@ test public void   (  )  throws  exception  {  acceptor executor . process ( 1 "" task1""  system . current time millis (  )   +  60 * 1000 )  ;  acceptor executor . process ( 2 "" task2""  system . current time millis (  )   +  60 * 1000 )  ;   task holder",255,6,task,3,"[83, 180, 244]"
7303,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\AcceptorExecutorTest.java,test republished task is handled first,"@ test public void   (  )  throws  exception  {  acceptor executor . process ( 1 "" task1""  system . current time millis (  )   +  60 * 1000 )  ;  acceptor executor . process ( 2 "" task2""  system . current time millis (  )   +  60 * 1000 )  ;   task holder",255,6,is,4,"[117, 214]"
7304,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\AcceptorExecutorTest.java,test republished task is handled first,"@ test public void   (  )  throws  exception  {  acceptor executor . process ( 1 "" task1""  system . current time millis (  )   +  60 * 1000 )  ;  acceptor executor . process ( 2 "" task2""  system . current time millis (  )   +  60 * 1000 )  ;   task holder",255,6,handled,5,[]
7305,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\AcceptorExecutorTest.java,test republished task is handled first,"@ test public void   (  )  throws  exception  {  acceptor executor . process ( 1 "" task1""  system . current time millis (  )   +  60 * 1000 )  ;  acceptor executor . process ( 2 "" task2""  system . current time millis (  )   +  60 * 1000 )  ;   task holder",255,6,first,6,[]
7306,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\AcceptorExecutorTest.java,test tasks are delay to maximize batch size,"@ test public void   (  )  throws  exception  {   blocking queue <  list <  task holder <  integer  string >  >  >  task queue = acceptor executor . request work items (  )  ;  acceptor executor . process ( 1 "" task1""  system . current time millis (  )   ",255,8,test,1,[2]
7307,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\AcceptorExecutorTest.java,test tasks are delay to maximize batch size,"@ test public void   (  )  throws  exception  {   blocking queue <  list <  task holder <  integer  string >  >  >  task queue = acceptor executor . request work items (  )  ;  acceptor executor . process ( 1 "" task1""  system . current time millis (  )   ",255,8,tasks,2,[]
7308,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\AcceptorExecutorTest.java,test tasks are delay to maximize batch size,"@ test public void   (  )  throws  exception  {   blocking queue <  list <  task holder <  integer  string >  >  >  task queue = acceptor executor . request work items (  )  ;  acceptor executor . process ( 1 "" task1""  system . current time millis (  )   ",255,8,are,3,[]
7309,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\AcceptorExecutorTest.java,test tasks are delay to maximize batch size,"@ test public void   (  )  throws  exception  {   blocking queue <  list <  task holder <  integer  string >  >  >  task queue = acceptor executor . request work items (  )  ;  acceptor executor . process ( 1 "" task1""  system . current time millis (  )   ",255,8,delay,4,[]
7310,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\AcceptorExecutorTest.java,test tasks are delay to maximize batch size,"@ test public void   (  )  throws  exception  {   blocking queue <  list <  task holder <  integer  string >  >  >  task queue = acceptor executor . request work items (  )  ;  acceptor executor . process ( 1 "" task1""  system . current time millis (  )   ",255,8,to,5,"[134, 143, 182, 191]"
7311,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\AcceptorExecutorTest.java,test tasks are delay to maximize batch size,"@ test public void   (  )  throws  exception  {   blocking queue <  list <  task holder <  integer  string >  >  >  task queue = acceptor executor . request work items (  )  ;  acceptor executor . process ( 1 "" task1""  system . current time millis (  )   ",255,8,maximize,6,[]
7312,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\AcceptorExecutorTest.java,test tasks are delay to maximize batch size,"@ test public void   (  )  throws  exception  {   blocking queue <  list <  task holder <  integer  string >  >  >  task queue = acceptor executor . request work items (  )  ;  acceptor executor . process ( 1 "" task1""  system . current time millis (  )   ",255,8,batch,7,[]
7313,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\AcceptorExecutorTest.java,test tasks are delay to maximize batch size,"@ test public void   (  )  throws  exception  {   blocking queue <  list <  task holder <  integer  string >  >  >  task queue = acceptor executor . request work items (  )  ;  acceptor executor . process ( 1 "" task1""  system . current time millis (  )   ",255,8,size,8,[]
7314,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\AcceptorExecutorTest.java,test tasks are dispatched to workers,"@ test public void   (  )  throws  exception  {  acceptor executor . process ( 1 "" task1""  system . current time millis (  )   +  60 * 1000 )  ;   task holder <  integer  string >  task holder = acceptor executor . request work item (  )  . poll ( 5  time",255,6,test,1,[2]
7315,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\AcceptorExecutorTest.java,test tasks are dispatched to workers,"@ test public void   (  )  throws  exception  {  acceptor executor . process ( 1 "" task1""  system . current time millis (  )   +  60 * 1000 )  ;   task holder <  integer  string >  task holder = acceptor executor . request work item (  )  . poll ( 5  time",255,6,tasks,2,[]
7316,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\AcceptorExecutorTest.java,test tasks are dispatched to workers,"@ test public void   (  )  throws  exception  {  acceptor executor . process ( 1 "" task1""  system . current time millis (  )   +  60 * 1000 )  ;   task holder <  integer  string >  task holder = acceptor executor . request work item (  )  . poll ( 5  time",255,6,are,3,[]
7317,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\AcceptorExecutorTest.java,test tasks are dispatched to workers,"@ test public void   (  )  throws  exception  {  acceptor executor . process ( 1 "" task1""  system . current time millis (  )   +  60 * 1000 )  ;   task holder <  integer  string >  task holder = acceptor executor . request work item (  )  . poll ( 5  time",255,6,dispatched,4,[]
7318,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\AcceptorExecutorTest.java,test tasks are dispatched to workers,"@ test public void   (  )  throws  exception  {  acceptor executor . process ( 1 "" task1""  system . current time millis (  )   +  60 * 1000 )  ;   task holder <  integer  string >  task holder = acceptor executor . request work item (  )  . poll ( 5  time",255,6,to,5,"[54, 63, 200, 209]"
7319,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\AcceptorExecutorTest.java,test tasks are dispatched to workers,"@ test public void   (  )  throws  exception  {  acceptor executor . process ( 1 "" task1""  system . current time millis (  )   +  60 * 1000 )  ;   task holder <  integer  string >  task holder = acceptor executor . request work item (  )  . poll ( 5  time",255,6,workers,6,[]
7320,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\AcceptorExecutorTest.java,test when buffer overflows oldest tasks are removed,"@ test public void   (  )  throws  exception  {  for  ( int i = 0 ;  i  <  =  max   buffer   size ;  i +  +  )   {  acceptor executor . process ( i "" task""  +  i  system . current time millis (  )   +  60 * 1000 )  ;   }   task holder <  integer  string >",255,8,test,1,[2]
7321,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\AcceptorExecutorTest.java,test when buffer overflows oldest tasks are removed,"@ test public void   (  )  throws  exception  {  for  ( int i = 0 ;  i  <  =  max   buffer   size ;  i +  +  )   {  acceptor executor . process ( i "" task""  +  i  system . current time millis (  )   +  60 * 1000 )  ;   }   task holder <  integer  string >",255,8,when,2,[]
7322,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\AcceptorExecutorTest.java,test when buffer overflows oldest tasks are removed,"@ test public void   (  )  throws  exception  {  for  ( int i = 0 ;  i  <  =  max   buffer   size ;  i +  +  )   {  acceptor executor . process ( i "" task""  +  i  system . current time millis (  )   +  60 * 1000 )  ;   }   task holder <  integer  string >",255,8,buffer,3,[84]
7323,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\AcceptorExecutorTest.java,test when buffer overflows oldest tasks are removed,"@ test public void   (  )  throws  exception  {  for  ( int i = 0 ;  i  <  =  max   buffer   size ;  i +  +  )   {  acceptor executor . process ( i "" task""  +  i  system . current time millis (  )   +  60 * 1000 )  ;   }   task holder <  integer  string >",255,8,overflows,4,[]
7324,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\AcceptorExecutorTest.java,test when buffer overflows oldest tasks are removed,"@ test public void   (  )  throws  exception  {  for  ( int i = 0 ;  i  <  =  max   buffer   size ;  i +  +  )   {  acceptor executor . process ( i "" task""  +  i  system . current time millis (  )   +  60 * 1000 )  ;   }   task holder <  integer  string >",255,8,oldest,5,[]
7325,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\AcceptorExecutorTest.java,test when buffer overflows oldest tasks are removed,"@ test public void   (  )  throws  exception  {  for  ( int i = 0 ;  i  <  =  max   buffer   size ;  i +  +  )   {  acceptor executor . process ( i "" task""  +  i  system . current time millis (  )   +  60 * 1000 )  ;   }   task holder <  integer  string >",255,8,tasks,6,[]
7326,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\AcceptorExecutorTest.java,test when buffer overflows oldest tasks are removed,"@ test public void   (  )  throws  exception  {  for  ( int i = 0 ;  i  <  =  max   buffer   size ;  i +  +  )   {  acceptor executor . process ( i "" task""  +  i  system . current time millis (  )   +  60 * 1000 )  ;   }   task holder <  integer  string >",255,8,are,7,[]
7327,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\AcceptorExecutorTest.java,test when buffer overflows oldest tasks are removed,"@ test public void   (  )  throws  exception  {  for  ( int i = 0 ;  i  <  =  max   buffer   size ;  i +  +  )   {  acceptor executor . process ( i "" task""  +  i  system . current time millis (  )   +  60 * 1000 )  ;   }   task holder <  integer  string >",255,8,removed,8,[]
7328,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\AcceptorExecutorTest.java,verify task holder,private static void   (  task holder <  integer  string >  task holder int id  string task )  {  assert that ( task holder is ( not null value (  )  )  )  ;  assert that ( task holder . get id (  )  is ( equal to ( id )  )  )  ;  assert that ( task holder . get task (  )  is ( equal to ( task )  )  )  ;   }  ,310,3,verify,1,[]
7329,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\AcceptorExecutorTest.java,verify task holder,private static void   (  task holder <  integer  string >  task holder int id  string task )  {  assert that ( task holder is ( not null value (  )  )  )  ;  assert that ( task holder . get id (  )  is ( equal to ( id )  )  )  ;  assert that ( task holder . get task (  )  is ( equal to ( task )  )  )  ;   }  ,310,3,task,2,"[25, 59, 86, 111, 172, 244, 262, 289]"
7330,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\AcceptorExecutorTest.java,verify task holder,private static void   (  task holder <  integer  string >  task holder int id  string task )  {  assert that ( task holder is ( not null value (  )  )  )  ;  assert that ( task holder . get id (  )  is ( equal to ( id )  )  )  ;  assert that ( task holder . get task (  )  is ( equal to ( task )  )  )  ;   }  ,310,3,holder,3,"[30, 64, 116, 177, 249]"
7331,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\ReplicationConcurrencyTest.java, mock server,"public   (  string app name  peer eureka nodes peer eureka nodes )  throws  exception  {   application info manager info manager = new  application info manager ( new  my data center instance config (  )  )  ;   default eureka server config server config =  mockito . spy ( new  default eureka server config (  )  )  ;   default eureka client config client config = new  default eureka client config (  )  ;   server codecs server codecs = new  default server codecs ( server config )  ;   eureka client eureka client =  mockito . mock (  eureka client . class )  ;   mockito . do return ( ""true"" )  . when ( server config )  . get experimental ( ""registry . registration . ignore if dirty timestamp is older"" )  ;  this . registry = new  peer aware instance registry impl ( server config client config server codecs eureka client )  ;  this . registry . init ( peer eureka nodes )  ;  this . application resource = new  application resource ( app name server config registry )  ;   eureka server context server context =  mockito . mock (  eureka server context . class )  ;   mockito . when ( server context . get server config (  )  )  . then return ( server config )  ;   mockito . when ( server context . get registry (  )  )  . then return ( registry )  ;  this . replication resource = new  peer replication resource ( server context )  ;   }  ",1351,2,mock,1,"[258, 521, 531, 568, 1023, 1033, 1078, 1176]"
7332,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\ReplicationConcurrencyTest.java, mock server,"public   (  string app name  peer eureka nodes peer eureka nodes )  throws  exception  {   application info manager info manager = new  application info manager ( new  my data center instance config (  )  )  ;   default eureka server config server config =  mockito . spy ( new  default eureka server config (  )  )  ;   default eureka client config client config = new  default eureka client config (  )  ;   server codecs server codecs = new  default server codecs ( server config )  ;   eureka client eureka client =  mockito . mock (  eureka client . class )  ;   mockito . do return ( ""true"" )  . when ( server config )  . get experimental ( ""registry . registration . ignore if dirty timestamp is older"" )  ;  this . registry = new  peer aware instance registry impl ( server config client config server codecs eureka client )  ;  this . registry . init ( peer eureka nodes )  ;  this . application resource = new  application resource ( app name server config registry )  ;   eureka server context server context =  mockito . mock (  eureka server context . class )  ;   mockito . when ( server context . get server config (  )  )  . then return ( server config )  ;   mockito . when ( server context . get registry (  )  )  . then return ( registry )  ;  this . replication resource = new  peer replication resource ( server context )  ;   }  ",1351,2,server,2,"[227, 241, 294, 410, 424, 453, 469, 609, 775, 803, 953, 990, 1005, 1048, 1095, 1116, 1155, 1193, 1326]"
7333,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\ReplicationConcurrencyTest.java,set up,@ before public void   (  )  throws  exception  {   instance info seed =  instance info generator . take one (  )  ;  id = seed . get id (  )  ;  app name = seed . get app name (  )  ;  instance1 =  instance info .  builder . new builder (  )  . set insta,255,2,set,1,[246]
7334,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\ReplicationConcurrencyTest.java,set up,@ before public void   (  )  throws  exception  {   instance info seed =  instance info generator . take one (  )  ;  id = seed . get id (  )  ;  app name = seed . get app name (  )  ;  instance1 =  instance info .  builder . new builder (  )  . set insta,255,2,up,2,[]
7335,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\ReplicationConcurrencyTest.java,test replication with registration and update on different servers,"@ test public void   (  )  throws  exception  {  server2 . application resource . add instance ( instance1 ""true"" )  ;   instance info new server2 sees = server2 . registry . get instance by app and id ( app name id )  ;  assert that ( new server2 sees . ",255,9,test,1,[2]
7336,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\ReplicationConcurrencyTest.java,test replication with registration and update on different servers,"@ test public void   (  )  throws  exception  {  server2 . application resource . add instance ( instance1 ""true"" )  ;   instance info new server2 sees = server2 . registry . get instance by app and id ( app name id )  ;  assert that ( new server2 sees . ",255,9,replication,2,[]
7337,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\ReplicationConcurrencyTest.java,test replication with registration and update on different servers,"@ test public void   (  )  throws  exception  {  server2 . application resource . add instance ( instance1 ""true"" )  ;   instance info new server2 sees = server2 . registry . get instance by app and id ( app name id )  ;  assert that ( new server2 sees . ",255,9,with,3,[]
7338,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\ReplicationConcurrencyTest.java,test replication with registration and update on different servers,"@ test public void   (  )  throws  exception  {  server2 . application resource . add instance ( instance1 ""true"" )  ;   instance info new server2 sees = server2 . registry . get instance by app and id ( app name id )  ;  assert that ( new server2 sees . ",255,9,registration,4,[]
7339,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\ReplicationConcurrencyTest.java,test replication with registration and update on different servers,"@ test public void   (  )  throws  exception  {  server2 . application resource . add instance ( instance1 ""true"" )  ;   instance info new server2 sees = server2 . registry . get instance by app and id ( app name id )  ;  assert that ( new server2 sees . ",255,9,and,5,[195]
7340,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\ReplicationConcurrencyTest.java,test replication with registration and update on different servers,"@ test public void   (  )  throws  exception  {  server2 . application resource . add instance ( instance1 ""true"" )  ;   instance info new server2 sees = server2 . registry . get instance by app and id ( app name id )  ;  assert that ( new server2 sees . ",255,9,update,6,[]
7341,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\ReplicationConcurrencyTest.java,test replication with registration and update on different servers,"@ test public void   (  )  throws  exception  {  server2 . application resource . add instance ( instance1 ""true"" )  ;   instance info new server2 sees = server2 . registry . get instance by app and id ( app name id )  ;  assert that ( new server2 sees . ",255,9,on,7,"[42, 68]"
7342,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\ReplicationConcurrencyTest.java,test replication with registration and update on different servers,"@ test public void   (  )  throws  exception  {  server2 . application resource . add instance ( instance1 ""true"" )  ;   instance info new server2 sees = server2 . registry . get instance by app and id ( app name id )  ;  assert that ( new server2 sees . ",255,9,different,8,[]
7343,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\ReplicationConcurrencyTest.java,test replication with registration and update on different servers,"@ test public void   (  )  throws  exception  {  server2 . application resource . add instance ( instance1 ""true"" )  ;   instance info new server2 sees = server2 . registry . get instance by app and id ( app name id )  ;  assert that ( new server2 sees . ",255,9,servers,9,[]
7344,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\RecordingProcessor.java,expect permanent errors,public void   ( int count )  throws  interrupted exception  {  for  ( int i = 0 ;  i  <  count ;  i +  +  )   {   processing result task = permanent error tasks . poll ( 5  time unit . seconds )  ;  assert that ( task is ( not null value (  )  )  )  ;   }   }  ,261,3,expect,1,[]
7345,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\RecordingProcessor.java,expect permanent errors,public void   ( int count )  throws  interrupted exception  {  for  ( int i = 0 ;  i  <  count ;  i +  +  )   {   processing result task = permanent error tasks . poll ( 5  time unit . seconds )  ;  assert that ( task is ( not null value (  )  )  )  ;   }   }  ,261,3,permanent,2,[139]
7346,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\RecordingProcessor.java,expect permanent errors,public void   ( int count )  throws  interrupted exception  {  for  ( int i = 0 ;  i  <  count ;  i +  +  )   {   processing result task = permanent error tasks . poll ( 5  time unit . seconds )  ;  assert that ( task is ( not null value (  )  )  )  ;   }   }  ,261,3,errors,3,[]
7347,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\RecordingProcessor.java,expect successes,public void   ( int count )  throws  interrupted exception  {  for  ( int i = 0 ;  i  <  count ;  i +  +  )   {   processing result task = completed tasks . poll ( 5  time unit . seconds )  ;  assert that ( task is ( not null value (  )  )  )  ;   }   }  ,255,2,expect,1,[]
7348,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\RecordingProcessor.java,expect successes,public void   ( int count )  throws  interrupted exception  {  for  ( int i = 0 ;  i  <  count ;  i +  +  )   {   processing result task = completed tasks . poll ( 5  time unit . seconds )  ;  assert that ( task is ( not null value (  )  )  )  ;   }   }  ,255,2,successes,2,[]
7349,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\RecordingProcessor.java,expect transient errors,public void   ( int count )  throws  interrupted exception  {  for  ( int i = 0 ;  i  <  count ;  i +  +  )   {   processing result task = transient error tasks . poll ( 5  time unit . seconds )  ;  assert that ( task is ( not null value (  )  )  )  ;   }   }  ,261,3,expect,1,[]
7350,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\RecordingProcessor.java,expect transient errors,public void   ( int count )  throws  interrupted exception  {  for  ( int i = 0 ;  i  <  count ;  i +  +  )   {   processing result task = transient error tasks . poll ( 5  time unit . seconds )  ;  assert that ( task is ( not null value (  )  )  )  ;   }   }  ,261,3,transient,2,[139]
7351,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\RecordingProcessor.java,expect transient errors,public void   ( int count )  throws  interrupted exception  {  for  ( int i = 0 ;  i  <  count ;  i +  +  )   {   processing result task = transient error tasks . poll ( 5  time unit . seconds )  ;  assert that ( task is ( not null value (  )  )  )  ;   }   }  ,261,3,errors,3,[]
7352,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\RecordingProcessor.java,permanent error task holder,public static  task holder <  integer  processing result >    ( int id )  {  return new  task holder <  >  ( id  processing result .  permanent error  system . current time millis (  )   +  60 * 1000 )  ;   }  ,210,4,permanent,1,[134]
7353,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\RecordingProcessor.java,permanent error task holder,public static  task holder <  integer  processing result >    ( int id )  {  return new  task holder <  >  ( id  processing result .  permanent error  system . current time millis (  )   +  60 * 1000 )  ;   }  ,210,4,error,2,[144]
7354,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\RecordingProcessor.java,permanent error task holder,public static  task holder <  integer  processing result >    ( int id )  {  return new  task holder <  >  ( id  processing result .  permanent error  system . current time millis (  )   +  60 * 1000 )  ;   }  ,210,4,task,3,"[15, 89]"
7355,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\RecordingProcessor.java,permanent error task holder,public static  task holder <  integer  processing result >    ( int id )  {  return new  task holder <  >  ( id  processing result .  permanent error  system . current time millis (  )   +  60 * 1000 )  ;   }  ,210,4,holder,4,"[20, 94]"
7356,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\RecordingProcessor.java,process,@ override public  processing result   (  list <  processing result >  tasks )  {  for  (   processing result task : tasks )   {  process ( task )  ;   }  return tasks . get ( 0 )  ;   }  ,188,1,process,1,"[19, 50, 92, 130]"
7357,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\RecordingProcessor.java,successful task holder,public static  task holder <  integer  processing result >    ( int id )  {  return new  task holder <  >  ( id  processing result .  success  system . current time millis (  )   +  60 * 1000 )  ;   }  ,202,3,successful,1,[]
7358,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\RecordingProcessor.java,successful task holder,public static  task holder <  integer  processing result >    ( int id )  {  return new  task holder <  >  ( id  processing result .  success  system . current time millis (  )   +  60 * 1000 )  ;   }  ,202,3,task,2,"[15, 89]"
7359,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\RecordingProcessor.java,successful task holder,public static  task holder <  integer  processing result >    ( int id )  {  return new  task holder <  >  ( id  processing result .  success  system . current time millis (  )   +  60 * 1000 )  ;   }  ,202,3,holder,3,"[20, 94]"
7360,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\RecordingProcessor.java,transient error task holder,public static  task holder <  integer  processing result >    ( int id )  {  return new  task holder <  >  ( id  processing result .  transient error  system . current time millis (  )   +  60 * 1000 )  ;   }  ,210,4,transient,1,[134]
7361,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\RecordingProcessor.java,transient error task holder,public static  task holder <  integer  processing result >    ( int id )  {  return new  task holder <  >  ( id  processing result .  transient error  system . current time millis (  )   +  60 * 1000 )  ;   }  ,210,4,error,2,[144]
7362,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\RecordingProcessor.java,transient error task holder,public static  task holder <  integer  processing result >    ( int id )  {  return new  task holder <  >  ( id  processing result .  transient error  system . current time millis (  )   +  60 * 1000 )  ;   }  ,210,4,task,3,"[15, 89]"
7363,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\RecordingProcessor.java,transient error task holder,public static  task holder <  integer  processing result >    ( int id )  {  return new  task holder <  >  ( id  processing result .  transient error  system . current time millis (  )   +  60 * 1000 )  ;   }  ,210,4,holder,4,"[20, 94]"
7364,C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\main\java\com\netflix\eureka\cluster\Jersey2PeerEurekaNodes.java, jersey peer eureka nodes,public   (  peer aware instance registry registry  eureka server config server config  eureka client config client config  server codecs server codecs  application info manager application info manager )  {  super ( registry server config client config server codecs application info manager )  ;   }  ,302,4,jersey,1,[]
7365,C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\main\java\com\netflix\eureka\cluster\Jersey2PeerEurekaNodes.java, jersey peer eureka nodes,public   (  peer aware instance registry registry  eureka server config server config  eureka client config client config  server codecs server codecs  application info manager application info manager )  {  super ( registry server config client config server codecs application info manager )  ;   }  ,302,4,peer,2,[12]
7366,C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\main\java\com\netflix\eureka\cluster\Jersey2PeerEurekaNodes.java, jersey peer eureka nodes,public   (  peer aware instance registry registry  eureka server config server config  eureka client config client config  server codecs server codecs  application info manager application info manager )  {  super ( registry server config client config server codecs application info manager )  ;   }  ,302,4,eureka,3,"[51, 87]"
7367,C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\main\java\com\netflix\eureka\cluster\Jersey2PeerEurekaNodes.java, jersey peer eureka nodes,public   (  peer aware instance registry registry  eureka server config server config  eureka client config client config  server codecs server codecs  application info manager application info manager )  {  super ( registry server config client config server codecs application info manager )  ;   }  ,302,4,nodes,4,[]
7368,C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\main\java\com\netflix\eureka\cluster\Jersey2PeerEurekaNodes.java,create peer eureka node,@ override protected  peer eureka node   (  string peer eureka node url )  {   http replication client replication client =  jersey2 replication client . create replication client ( server config server codecs peer eureka node url )  ;   string target hos,255,4,create,1,[154]
7369,C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\main\java\com\netflix\eureka\cluster\Jersey2PeerEurekaNodes.java,create peer eureka node,@ override protected  peer eureka node   (  string peer eureka node url )  {   http replication client replication client =  jersey2 replication client . create replication client ( server config server codecs peer eureka node url )  ;   string target hos,255,4,peer,2,"[22, 51, 210]"
7370,C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\main\java\com\netflix\eureka\cluster\Jersey2PeerEurekaNodes.java,create peer eureka node,@ override protected  peer eureka node   (  string peer eureka node url )  {   http replication client replication client =  jersey2 replication client . create replication client ( server config server codecs peer eureka node url )  ;   string target hos,255,4,eureka,3,"[27, 56, 215]"
7371,C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\main\java\com\netflix\eureka\cluster\Jersey2PeerEurekaNodes.java,create peer eureka node,@ override protected  peer eureka node   (  string peer eureka node url )  {   http replication client replication client =  jersey2 replication client . create replication client ( server config server codecs peer eureka node url )  ;   string target hos,255,4,node,4,"[34, 63, 222]"
7372,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\TaskDispatchersTest.java,await completion,void   (  )  throws  interrupted exception  {  assert that ( completion guard . try acquire ( 5  time unit . seconds )  is ( true )  )  ;   }  ,143,2,await,1,[]
7373,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\TaskDispatchersTest.java,await completion,void   (  )  throws  interrupted exception  {  assert that ( completion guard . try acquire ( 5  time unit . seconds )  is ( true )  )  ;   }  ,143,2,completion,2,[61]
7374,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\TaskDispatchersTest.java,lowest hit,int   (  )  {  return  collections . min ( thread hits . values (  )  )  ;   }  ,80,2,lowest,1,[]
7375,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\TaskDispatchersTest.java,lowest hit,int   (  )  {  return  collections . min ( thread hits . values (  )  )  ;   }  ,80,2,hit,2,[50]
7376,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\TaskDispatchersTest.java,process,@ override public  processing result   (  list <  boolean >  tasks )  {   thread current thread =  thread . current thread (  )  ;   integer current = thread hits . get ( current thread )  ;  if  ( current  =  =  null )   {  thread hits . put ( current th,255,1,process,1,[19]
7377,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\TaskDispatchersTest.java,reset to,void   ( int expected tasks )  {  completion guard = new  semaphore (  - expected tasks  +  1 )  ;   }  ,104,2,reset,1,[]
7378,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\TaskDispatchersTest.java,reset to,void   ( int expected tasks )  {  completion guard = new  semaphore (  - expected tasks  +  1 )  ;   }  ,104,2,to,2,[]
7379,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\TaskDispatchersTest.java,tear down,@ after public void   (  )  throws  exception  {  if  ( dispatcher  !  =  null )   {  dispatcher . shutdown (  )  ;   }   }  ,125,2,tear,1,[]
7380,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\TaskDispatchersTest.java,tear down,@ after public void   (  )  throws  exception  {  if  ( dispatcher  !  =  null )   {  dispatcher . shutdown (  )  ;   }   }  ,125,2,down,2,[103]
7381,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\TaskDispatchersTest.java,test batching dispatcher,"@ test public void   (  )  throws  exception  {  dispatcher =  task dispatchers . create batching task dispatcher ( ""test"" max   buffer   size work   load   size 1 max   batching   delay   ms server   unavailable   sleep   time   ms retry   sleep   time  ",255,3,test,1,"[2, 117]"
7382,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\TaskDispatchersTest.java,test batching dispatcher,"@ test public void   (  )  throws  exception  {  dispatcher =  task dispatchers . create batching task dispatcher ( ""test"" max   buffer   size work   load   size 1 max   batching   delay   ms server   unavailable   sleep   time   ms retry   sleep   time  ",255,3,batching,2,"[89, 170]"
7383,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\TaskDispatchersTest.java,test batching dispatcher,"@ test public void   (  )  throws  exception  {  dispatcher =  task dispatchers . create batching task dispatcher ( ""test"" max   buffer   size work   load   size 1 max   batching   delay   ms server   unavailable   sleep   time   ms retry   sleep   time  ",255,3,dispatcher,3,"[49, 68, 103]"
7384,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\TaskDispatchersTest.java,test single task dispatcher,"@ test public void   (  )  throws  exception  {  dispatcher =  task dispatchers . create non batching task dispatcher ( ""test"" max   buffer   size 1 max   batching   delay   ms server   unavailable   sleep   time   ms retry   sleep   time   ms processor )",255,4,test,1,"[2, 121]"
7385,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\TaskDispatchersTest.java,test single task dispatcher,"@ test public void   (  )  throws  exception  {  dispatcher =  task dispatchers . create non batching task dispatcher ( ""test"" max   buffer   size 1 max   batching   delay   ms server   unavailable   sleep   time   ms retry   sleep   time   ms processor )",255,4,single,2,[]
7386,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\TaskDispatchersTest.java,test single task dispatcher,"@ test public void   (  )  throws  exception  {  dispatcher =  task dispatchers . create non batching task dispatcher ( ""test"" max   buffer   size 1 max   batching   delay   ms server   unavailable   sleep   time   ms retry   sleep   time   ms processor )",255,4,task,3,"[63, 102]"
7387,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\TaskDispatchersTest.java,test single task dispatcher,"@ test public void   (  )  throws  exception  {  dispatcher =  task dispatchers . create non batching task dispatcher ( ""test"" max   buffer   size 1 max   batching   delay   ms server   unavailable   sleep   time   ms retry   sleep   time   ms processor )",255,4,dispatcher,4,"[49, 68, 107]"
7388,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\TaskDispatchersTest.java,test tasks are distributed across all worker threads,@ test public void   (  )  throws  exception  {  int thread count = 3 ;   counting task processor counting processor = new  counting task processor (  )  ;   task dispatcher <  integer  boolean >  dispatcher =  task dispatchers . create batching task disp,255,8,test,1,[2]
7389,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\TaskDispatchersTest.java,test tasks are distributed across all worker threads,@ test public void   (  )  throws  exception  {  int thread count = 3 ;   counting task processor counting processor = new  counting task processor (  )  ;   task dispatcher <  integer  boolean >  dispatcher =  task dispatchers . create batching task disp,255,8,tasks,2,[]
7390,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\TaskDispatchersTest.java,test tasks are distributed across all worker threads,@ test public void   (  )  throws  exception  {  int thread count = 3 ;   counting task processor counting processor = new  counting task processor (  )  ;   task dispatcher <  integer  boolean >  dispatcher =  task dispatchers . create batching task disp,255,8,are,3,[]
7391,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\TaskDispatchersTest.java,test tasks are distributed across all worker threads,@ test public void   (  )  throws  exception  {  int thread count = 3 ;   counting task processor counting processor = new  counting task processor (  )  ;   task dispatcher <  integer  boolean >  dispatcher =  task dispatchers . create batching task disp,255,8,distributed,4,[]
7392,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\TaskDispatchersTest.java,test tasks are distributed across all worker threads,@ test public void   (  )  throws  exception  {  int thread count = 3 ;   counting task processor counting processor = new  counting task processor (  )  ;   task dispatcher <  integer  boolean >  dispatcher =  task dispatchers . create batching task disp,255,8,across,5,[]
7393,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\TaskDispatchersTest.java,test tasks are distributed across all worker threads,@ test public void   (  )  throws  exception  {  int thread count = 3 ;   counting task processor counting processor = new  counting task processor (  )  ;   task dispatcher <  integer  boolean >  dispatcher =  task dispatchers . create batching task disp,255,8,all,6,[]
7394,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\TaskDispatchersTest.java,test tasks are distributed across all worker threads,@ test public void   (  )  throws  exception  {  int thread count = 3 ;   counting task processor counting processor = new  counting task processor (  )  ;   task dispatcher <  integer  boolean >  dispatcher =  task dispatchers . create batching task disp,255,8,worker,7,[]
7395,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\TaskDispatchersTest.java,test tasks are distributed across all worker threads,@ test public void   (  )  throws  exception  {  int thread count = 3 ;   counting task processor counting processor = new  counting task processor (  )  ;   task dispatcher <  integer  boolean >  dispatcher =  task dispatchers . create batching task disp,255,8,threads,8,[]
7396,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\TaskExecutorsTest.java,set up,@ before public void   (  )  throws  exception  {  when ( acceptor executor . request work item (  )  )  . then return ( task queue )  ;  when ( acceptor executor . request work items (  )  )  . then return ( task batch queue )  ;   }  ,236,2,set,1,[]
7397,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\TaskExecutorsTest.java,set up,@ before public void   (  )  throws  exception  {  when ( acceptor executor . request work item (  )  )  . then return ( task queue )  ;  when ( acceptor executor . request work items (  )  )  . then return ( task batch queue )  ;   }  ,236,2,up,2,[]
7398,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\TaskExecutorsTest.java,tear down,@ after public void   (  )  throws  exception  {  task executors . shutdown (  )  ;   }  ,89,2,tear,1,[]
7399,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\TaskExecutorsTest.java,tear down,@ after public void   (  )  throws  exception  {  task executors . shutdown (  )  ;   }  ,89,2,down,2,[71]
7400,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\TaskExecutorsTest.java,test batch processing with permanent error,"@ test public void   (  )  throws  exception  {  task executors =  task executors . batch executors ( ""test"" 1 processor acceptor executor )  ;   list <  task holder <  integer  processing result >  >  task holder batch = as list ( permanent error task ho",255,6,test,1,"[2, 103]"
7401,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\TaskExecutorsTest.java,test batch processing with permanent error,"@ test public void   (  )  throws  exception  {  task executors =  task executors . batch executors ( ""test"" 1 processor acceptor executor )  ;   list <  task holder <  integer  processing result >  >  task holder batch = as list ( permanent error task ho",255,6,batch,2,"[84, 214]"
7402,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\TaskExecutorsTest.java,test batch processing with permanent error,"@ test public void   (  )  throws  exception  {  task executors =  task executors . batch executors ( ""test"" 1 processor acceptor executor )  ;   list <  task holder <  integer  processing result >  >  task holder batch = as list ( permanent error task ho",255,6,processing,3,[178]
7403,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\TaskExecutorsTest.java,test batch processing with permanent error,"@ test public void   (  )  throws  exception  {  task executors =  task executors . batch executors ( ""test"" 1 processor acceptor executor )  ;   list <  task holder <  integer  processing result >  >  task holder batch = as list ( permanent error task ho",255,6,with,4,[]
7404,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\TaskExecutorsTest.java,test batch processing with permanent error,"@ test public void   (  )  throws  exception  {  task executors =  task executors . batch executors ( ""test"" 1 processor acceptor executor )  ;   list <  task holder <  integer  processing result >  >  task holder batch = as list ( permanent error task ho",255,6,permanent,5,[232]
7405,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\TaskExecutorsTest.java,test batch processing with permanent error,"@ test public void   (  )  throws  exception  {  task executors =  task executors . batch executors ( ""test"" 1 processor acceptor executor )  ;   list <  task holder <  integer  processing result >  >  task holder batch = as list ( permanent error task ho",255,6,error,6,[242]
7406,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\TaskExecutorsTest.java,test batch processing with transient error,"@ test public void   (  )  throws  exception  {  task executors =  task executors . batch executors ( ""test"" 1 processor acceptor executor )  ;   list <  task holder <  integer  processing result >  >  task holder batch = as list ( transient error task ho",255,6,test,1,"[2, 103]"
7407,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\TaskExecutorsTest.java,test batch processing with transient error,"@ test public void   (  )  throws  exception  {  task executors =  task executors . batch executors ( ""test"" 1 processor acceptor executor )  ;   list <  task holder <  integer  processing result >  >  task holder batch = as list ( transient error task ho",255,6,batch,2,"[84, 214]"
7408,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\TaskExecutorsTest.java,test batch processing with transient error,"@ test public void   (  )  throws  exception  {  task executors =  task executors . batch executors ( ""test"" 1 processor acceptor executor )  ;   list <  task holder <  integer  processing result >  >  task holder batch = as list ( transient error task ho",255,6,processing,3,[178]
7409,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\TaskExecutorsTest.java,test batch processing with transient error,"@ test public void   (  )  throws  exception  {  task executors =  task executors . batch executors ( ""test"" 1 processor acceptor executor )  ;   list <  task holder <  integer  processing result >  >  task holder batch = as list ( transient error task ho",255,6,with,4,[]
7410,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\TaskExecutorsTest.java,test batch processing with transient error,"@ test public void   (  )  throws  exception  {  task executors =  task executors . batch executors ( ""test"" 1 processor acceptor executor )  ;   list <  task holder <  integer  processing result >  >  task holder batch = as list ( transient error task ho",255,6,transient,5,[232]
7411,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\TaskExecutorsTest.java,test batch processing with transient error,"@ test public void   (  )  throws  exception  {  task executors =  task executors . batch executors ( ""test"" 1 processor acceptor executor )  ;   list <  task holder <  integer  processing result >  >  task holder batch = as list ( transient error task ho",255,6,error,6,[242]
7412,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\TaskExecutorsTest.java,test batch successful processing,"@ test public void   (  )  throws  exception  {  task executors =  task executors . batch executors ( ""test"" 1 processor acceptor executor )  ;  task batch queue . add ( as list ( successful task holder ( 1 )  successful task holder ( 2 )  )  )  ;  proces",255,4,test,1,"[2, 103]"
7413,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\TaskExecutorsTest.java,test batch successful processing,"@ test public void   (  )  throws  exception  {  task executors =  task executors . batch executors ( ""test"" 1 processor acceptor executor )  ;  task batch queue . add ( as list ( successful task holder ( 1 )  successful task holder ( 2 )  )  )  ;  proces",255,4,batch,2,"[84, 150]"
7414,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\TaskExecutorsTest.java,test batch successful processing,"@ test public void   (  )  throws  exception  {  task executors =  task executors . batch executors ( ""test"" 1 processor acceptor executor )  ;  task batch queue . add ( as list ( successful task holder ( 1 )  successful task holder ( 2 )  )  )  ;  proces",255,4,successful,3,"[180, 210]"
7415,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\TaskExecutorsTest.java,test batch successful processing,"@ test public void   (  )  throws  exception  {  task executors =  task executors . batch executors ( ""test"" 1 processor acceptor executor )  ;  task batch queue . add ( as list ( successful task holder ( 1 )  successful task holder ( 2 )  )  )  ;  proces",255,4,processing,4,[]
7416,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\TaskExecutorsTest.java,test single item processing with permanent error,"@ test public void   (  )  throws  exception  {  task executors =  task executors . single item executors ( ""test"" 1 processor acceptor executor )  ;   task holder <  integer  processing result >  task holder = permanent error task holder ( 1 )  ;  task q",255,7,test,1,"[2, 109]"
7417,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\TaskExecutorsTest.java,test single item processing with permanent error,"@ test public void   (  )  throws  exception  {  task executors =  task executors . single item executors ( ""test"" 1 processor acceptor executor )  ;   task holder <  integer  processing result >  task holder = permanent error task holder ( 1 )  ;  task q",255,7,single,2,[84]
7418,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\TaskExecutorsTest.java,test single item processing with permanent error,"@ test public void   (  )  throws  exception  {  task executors =  task executors . single item executors ( ""test"" 1 processor acceptor executor )  ;   task holder <  integer  processing result >  task holder = permanent error task holder ( 1 )  ;  task q",255,7,item,3,[91]
7419,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\TaskExecutorsTest.java,test single item processing with permanent error,"@ test public void   (  )  throws  exception  {  task executors =  task executors . single item executors ( ""test"" 1 processor acceptor executor )  ;   task holder <  integer  processing result >  task holder = permanent error task holder ( 1 )  ;  task q",255,7,processing,4,[176]
7420,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\TaskExecutorsTest.java,test single item processing with permanent error,"@ test public void   (  )  throws  exception  {  task executors =  task executors . single item executors ( ""test"" 1 processor acceptor executor )  ;   task holder <  integer  processing result >  task holder = permanent error task holder ( 1 )  ;  task q",255,7,with,5,[]
7421,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\TaskExecutorsTest.java,test single item processing with permanent error,"@ test public void   (  )  throws  exception  {  task executors =  task executors . single item executors ( ""test"" 1 processor acceptor executor )  ;   task holder <  integer  processing result >  task holder = permanent error task holder ( 1 )  ;  task q",255,7,permanent,6,[211]
7422,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\TaskExecutorsTest.java,test single item processing with permanent error,"@ test public void   (  )  throws  exception  {  task executors =  task executors . single item executors ( ""test"" 1 processor acceptor executor )  ;   task holder <  integer  processing result >  task holder = permanent error task holder ( 1 )  ;  task q",255,7,error,7,[221]
7423,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\TaskExecutorsTest.java,test single item processing with transient error,"@ test public void   (  )  throws  exception  {  task executors =  task executors . single item executors ( ""test"" 1 processor acceptor executor )  ;   task holder <  integer  processing result >  task holder = transient error task holder ( 1 )  ;  task q",255,7,test,1,"[2, 109]"
7424,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\TaskExecutorsTest.java,test single item processing with transient error,"@ test public void   (  )  throws  exception  {  task executors =  task executors . single item executors ( ""test"" 1 processor acceptor executor )  ;   task holder <  integer  processing result >  task holder = transient error task holder ( 1 )  ;  task q",255,7,single,2,[84]
7425,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\TaskExecutorsTest.java,test single item processing with transient error,"@ test public void   (  )  throws  exception  {  task executors =  task executors . single item executors ( ""test"" 1 processor acceptor executor )  ;   task holder <  integer  processing result >  task holder = transient error task holder ( 1 )  ;  task q",255,7,item,3,[91]
7426,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\TaskExecutorsTest.java,test single item processing with transient error,"@ test public void   (  )  throws  exception  {  task executors =  task executors . single item executors ( ""test"" 1 processor acceptor executor )  ;   task holder <  integer  processing result >  task holder = transient error task holder ( 1 )  ;  task q",255,7,processing,4,[176]
7427,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\TaskExecutorsTest.java,test single item processing with transient error,"@ test public void   (  )  throws  exception  {  task executors =  task executors . single item executors ( ""test"" 1 processor acceptor executor )  ;   task holder <  integer  processing result >  task holder = transient error task holder ( 1 )  ;  task q",255,7,with,5,[]
7428,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\TaskExecutorsTest.java,test single item processing with transient error,"@ test public void   (  )  throws  exception  {  task executors =  task executors . single item executors ( ""test"" 1 processor acceptor executor )  ;   task holder <  integer  processing result >  task holder = transient error task holder ( 1 )  ;  task q",255,7,transient,6,[211]
7429,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\TaskExecutorsTest.java,test single item processing with transient error,"@ test public void   (  )  throws  exception  {  task executors =  task executors . single item executors ( ""test"" 1 processor acceptor executor )  ;   task holder <  integer  processing result >  task holder = transient error task holder ( 1 )  ;  task q",255,7,error,7,[221]
7430,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\TaskExecutorsTest.java,test single item successful processing,"@ test public void   (  )  throws  exception  {  task executors =  task executors . single item executors ( ""test"" 1 processor acceptor executor )  ;  task queue . add ( successful task holder ( 1 )  )  ;  processor . expect successes ( 1 )  ;   }  ",249,5,test,1,"[2, 109]"
7431,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\TaskExecutorsTest.java,test single item successful processing,"@ test public void   (  )  throws  exception  {  task executors =  task executors . single item executors ( ""test"" 1 processor acceptor executor )  ;  task queue . add ( successful task holder ( 1 )  )  ;  processor . expect successes ( 1 )  ;   }  ",249,5,single,2,[84]
7432,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\TaskExecutorsTest.java,test single item successful processing,"@ test public void   (  )  throws  exception  {  task executors =  task executors . single item executors ( ""test"" 1 processor acceptor executor )  ;  task queue . add ( successful task holder ( 1 )  )  ;  processor . expect successes ( 1 )  ;   }  ",249,5,item,3,[91]
7433,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\TaskExecutorsTest.java,test single item successful processing,"@ test public void   (  )  throws  exception  {  task executors =  task executors . single item executors ( ""test"" 1 processor acceptor executor )  ;  task queue . add ( successful task holder ( 1 )  )  ;  processor . expect successes ( 1 )  ;   }  ",249,5,successful,4,[170]
7434,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\TaskExecutorsTest.java,test single item successful processing,"@ test public void   (  )  throws  exception  {  task executors =  task executors . single item executors ( ""test"" 1 processor acceptor executor )  ;  task queue . add ( successful task holder ( 1 )  )  ;  processor . expect successes ( 1 )  ;   }  ",249,5,processing,5,[]
7435,C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\main\java\com\netflix\eureka\Jersey2EurekaBootStrap.java, jersey eureka boot strap,public   (  discovery client discovery client )  {  super ( discovery client )  ;   }  ,87,4,jersey,1,[]
7436,C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\main\java\com\netflix\eureka\Jersey2EurekaBootStrap.java, jersey eureka boot strap,public   (  discovery client discovery client )  {  super ( discovery client )  ;   }  ,87,4,eureka,2,[]
7437,C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\main\java\com\netflix\eureka\Jersey2EurekaBootStrap.java, jersey eureka boot strap,public   (  discovery client discovery client )  {  super ( discovery client )  ;   }  ,87,4,boot,3,[]
7438,C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\main\java\com\netflix\eureka\Jersey2EurekaBootStrap.java, jersey eureka boot strap,public   (  discovery client discovery client )  {  super ( discovery client )  ;   }  ,87,4,strap,4,[]
7439,C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\main\java\com\netflix\eureka\Jersey2EurekaBootStrap.java,get peer eureka nodes,@ override protected  peer eureka nodes   (  peer aware instance registry registry  eureka server config eureka server config  eureka client config eureka client config  server codecs server codecs  application info manager application info manager )  {  ,255,4,get,1,[]
7440,C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\main\java\com\netflix\eureka\Jersey2EurekaBootStrap.java,get peer eureka nodes,@ override protected  peer eureka nodes   (  peer aware instance registry registry  eureka server config eureka server config  eureka client config eureka client config  server codecs server codecs  application info manager application info manager )  {  ,255,4,peer,2,"[22, 45]"
7441,C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\main\java\com\netflix\eureka\Jersey2EurekaBootStrap.java,get peer eureka nodes,@ override protected  peer eureka nodes   (  peer aware instance registry registry  eureka server config eureka server config  eureka client config eureka client config  server codecs server codecs  application info manager application info manager )  {  ,255,4,eureka,3,"[27, 84, 105, 127, 148]"
7442,C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\main\java\com\netflix\eureka\Jersey2EurekaBootStrap.java,get peer eureka nodes,@ override protected  peer eureka nodes   (  peer aware instance registry registry  eureka server config eureka server config  eureka client config eureka client config  server codecs server codecs  application info manager application info manager )  {  ,255,4,nodes,4,[34]
7443,C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\main\java\com\netflix\eureka\resources\EurekaServerContextBinder.java,configure,@ override protected void   (  )  {  bind factory ( new  eureka server context factory (  )  )  . to (  eureka server context . class )  ;   }  ,144,1,configure,1,[]
7444,C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\main\java\com\netflix\eureka\resources\EurekaServerContextBinder.java,provide,@ override public  eureka server context   (  )  {  return  eureka server context holder . get instance (  )  . get server context (  )  ;   }  ,144,1,provide,1,[]
7445,C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\main\java\com\netflix\eureka\transport\Jersey2DynamicGZIPContentEncodingFilter.java, jersey dynamicgzip content encoding filter,public   (  eureka server config config )  {  this . config = config ;   }  ,76,5,jersey,1,[]
7446,C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\main\java\com\netflix\eureka\transport\Jersey2DynamicGZIPContentEncodingFilter.java, jersey dynamicgzip content encoding filter,public   (  eureka server config config )  {  this . config = config ;   }  ,76,5,dynamicgzip,2,[]
7447,C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\main\java\com\netflix\eureka\transport\Jersey2DynamicGZIPContentEncodingFilter.java, jersey dynamicgzip content encoding filter,public   (  eureka server config config )  {  this . config = config ;   }  ,76,5,content,3,[]
7448,C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\main\java\com\netflix\eureka\transport\Jersey2DynamicGZIPContentEncodingFilter.java, jersey dynamicgzip content encoding filter,public   (  eureka server config config )  {  this . config = config ;   }  ,76,5,encoding,4,[]
7449,C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\main\java\com\netflix\eureka\transport\Jersey2DynamicGZIPContentEncodingFilter.java, jersey dynamicgzip content encoding filter,public   (  eureka server config config )  {  this . config = config ;   }  ,76,5,filter,5,[]
7450,C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\main\java\com\netflix\eureka\transport\Jersey2DynamicGZIPContentEncodingFilter.java,filter,@ override public void   (  client request context request context  client response context response context )  throws io exception  {   object content encoding = response context . get headers (  )  . get first (  http headers . content   encoding )  ;  ,255,1,filter,1,[]
7451,C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\main\java\com\netflix\eureka\transport\Jersey2DynamicGZIPContentEncodingFilter.java,has entity,private boolean   (  client request context request context )  {  return false ;   }  ,86,2,has,1,[]
7452,C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\main\java\com\netflix\eureka\transport\Jersey2DynamicGZIPContentEncodingFilter.java,has entity,private boolean   (  client request context request context )  {  return false ;   }  ,86,2,entity,2,[]
7453,C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\main\java\com\netflix\eureka\transport\Jersey2DynamicGZIPContentEncodingFilter.java,is compression enabled,private boolean   (  )  {  return config . should enable replicated request compression (  )  ;   }  ,101,3,is,1,[]
7454,C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\main\java\com\netflix\eureka\transport\Jersey2DynamicGZIPContentEncodingFilter.java,is compression enabled,private boolean   (  )  {  return config . should enable replicated request compression (  )  ;   }  ,101,3,compression,2,[76]
7455,C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\main\java\com\netflix\eureka\transport\Jersey2DynamicGZIPContentEncodingFilter.java,is compression enabled,private boolean   (  )  {  return config . should enable replicated request compression (  )  ;   }  ,101,3,enabled,3,[]
7456,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\StatusUtilTest.java,get mock instance infos," list <  instance info >    ( int size )  {   list <  instance info >  instances = new  array list <  >  (  )  ;  for  ( int i = 0 ;  i  <  size ;  i +  +  )   {   instance info mock instance = mock (  instance info . class )  ;  when ( mock instance . get host name (  )  )  . then return (  string . value of ( i )  )  ;  when ( mock instance . getip addr (  )  )  . then return (  string . value of ( i )  )  ;  when ( mock instance . get app name (  )  )  . then return ( ""stuff"" )  ;  instances . add ( mock instance )  ;   }  return instances ;   }  ",556,4,get,1,"[253, 347, 438]"
7457,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\StatusUtilTest.java,get mock instance infos," list <  instance info >    ( int size )  {   list <  instance info >  instances = new  array list <  >  (  )  ;  for  ( int i = 0 ;  i  <  size ;  i +  +  )   {   instance info mock instance = mock (  instance info . class )  ;  when ( mock instance . get host name (  )  )  . then return (  string . value of ( i )  )  ;  when ( mock instance . getip addr (  )  )  . then return (  string . value of ( i )  )  ;  when ( mock instance . get app name (  )  )  . then return ( ""stuff"" )  ;  instances . add ( mock instance )  ;   }  return instances ;   }  ",556,4,mock,2,"[178, 194, 237, 331, 422, 508]"
7458,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\StatusUtilTest.java,get mock instance infos," list <  instance info >    ( int size )  {   list <  instance info >  instances = new  array list <  >  (  )  ;  for  ( int i = 0 ;  i  <  size ;  i +  +  )   {   instance info mock instance = mock (  instance info . class )  ;  when ( mock instance . get host name (  )  )  . then return (  string . value of ( i )  )  ;  when ( mock instance . getip addr (  )  )  . then return (  string . value of ( i )  )  ;  when ( mock instance . get app name (  )  )  . then return ( ""stuff"" )  ;  instances . add ( mock instance )  ;   }  return instances ;   }  ",556,4,instance,3,"[9, 54, 71, 164, 183, 202, 242, 336, 427, 490, 513, 539]"
7459,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\StatusUtilTest.java,get mock instance infos," list <  instance info >    ( int size )  {   list <  instance info >  instances = new  array list <  >  (  )  ;  for  ( int i = 0 ;  i  <  size ;  i +  +  )   {   instance info mock instance = mock (  instance info . class )  ;  when ( mock instance . get host name (  )  )  . then return (  string . value of ( i )  )  ;  when ( mock instance . getip addr (  )  )  . then return (  string . value of ( i )  )  ;  when ( mock instance . get app name (  )  )  . then return ( ""stuff"" )  ;  instances . add ( mock instance )  ;   }  return instances ;   }  ",556,4,infos,4,[]
7460,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\StatusUtilTest.java,get mock nodes," list <  peer eureka node >    ( int size )  {   list <  peer eureka node >  nodes = new  array list <  >  (  )  ;  for  ( int i = 0 ;  i  <  size ;  i +  +  )   {   peer eureka node mock node = mock (  peer eureka node . class )  ;  when ( mock node . get service url (  )  )  . then return (  string . format ( ""http: /  / %d:8080 / v2"" i )  )  ;  nodes . add ( mock node )  ;   }  return nodes ;   }  ",404,3,get,1,[253]
7461,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\StatusUtilTest.java,get mock nodes," list <  peer eureka node >    ( int size )  {   list <  peer eureka node >  nodes = new  array list <  >  (  )  ;  for  ( int i = 0 ;  i  <  size ;  i +  +  )   {   peer eureka node mock node = mock (  peer eureka node . class )  ;  when ( mock node . get service url (  )  )  . then return (  string . format ( ""http: /  / %d:8080 / v2"" i )  )  ;  nodes . add ( mock node )  ;   }  return nodes ;   }  ",404,3,mock,2,"[183, 195, 241, 364]"
7462,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\StatusUtilTest.java,get mock nodes," list <  peer eureka node >    ( int size )  {   list <  peer eureka node >  nodes = new  array list <  >  (  )  ;  for  ( int i = 0 ;  i  <  size ;  i +  +  )   {   peer eureka node mock node = mock (  peer eureka node . class )  ;  when ( mock node . get service url (  )  )  . then return (  string . format ( ""http: /  / %d:8080 / v2"" i )  )  ;  nodes . add ( mock node )  ;   }  return nodes ;   }  ",404,3,nodes,3,"[77, 350, 391]"
7463,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\StatusUtilTest.java,get status util,"private  status util   ( int replicas int instances int minimum )  {   eureka server context mock eureka server context = mock (  eureka server context . class )  ;   list <  instance info >  mock instance infos = get mock instance infos ( instances )  ;   application mock application = mock (  application . class )  ;  when ( mock application . get instances (  )  )  . then return ( mock instance infos )  ;   application info manager mock app info manager = mock (  application info manager . class )  ;  when ( mock app info manager . get info (  )  )  . then return ( mock instance infos . get ( 0 )  )  ;  when ( mock eureka server context . get application info manager (  )  )  . then return ( mock app info manager )  ;   peer aware instance registry mock registry = mock (  peer aware instance registry . class )  ;  when ( mock registry . get application ( ""stuff"" false )  )  . then return ( mock application )  ;  when ( mock eureka server context . get registry (  )  )  . then return ( mock registry )  ;   list <  peer eureka node >  mock nodes = get mock nodes ( replicas )  ;   eureka transport config mock transport config = mock (  eureka transport config . class )  ;  when ( mock transport config . applications resolver use ip (  )  )  . then return ( false )  ;   eureka client config mock client config = mock (  eureka client config . class )  ;  when ( mock client config . get transport config (  )  )  . then return ( mock transport config )  ;   eureka server config mock server config = mock (  eureka server config . class )  ;  when ( mock server config . get health status min number of available peers (  )  )  . then return ( minimum )  ;   peer eureka nodes peer eureka nodes = new  peer eureka nodes ( mock registry mock server config mock client config null mock app info manager )  ;   peer eureka nodes spy peer eureka nodes = spy ( peer eureka nodes )  ;  when ( spy peer eureka nodes . get peer eureka nodes (  )  )  . then return ( mock nodes )  ;  when ( mock eureka server context . get peer eureka nodes (  )  )  . then return ( spy peer eureka nodes )  ;  return new  status util ( mock eureka server context )  ;   }  ",2169,3,get,1,"[214, 348, 541, 597, 650, 852, 965, 1065, 1403, 1591, 1931, 2031]"
7464,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\StatusUtilTest.java,get status util,"private  status util   ( int replicas int instances int minimum )  {   eureka server context mock eureka server context = mock (  eureka server context . class )  ;   list <  instance info >  mock instance infos = get mock instance infos ( instances )  ;   application mock application = mock (  application . class )  ;  when ( mock application . get instances (  )  )  . then return ( mock instance infos )  ;   application info manager mock app info manager = mock (  application info manager . class )  ;  when ( mock app info manager . get info (  )  )  . then return ( mock instance infos . get ( 0 )  )  ;  when ( mock eureka server context . get application info manager (  )  )  . then return ( mock app info manager )  ;   peer aware instance registry mock registry = mock (  peer aware instance registry . class )  ;  when ( mock registry . get application ( ""stuff"" false )  )  . then return ( mock application )  ;  when ( mock eureka server context . get registry (  )  )  . then return ( mock registry )  ;   list <  peer eureka node >  mock nodes = get mock nodes ( replicas )  ;   eureka transport config mock transport config = mock (  eureka transport config . class )  ;  when ( mock transport config . applications resolver use ip (  )  )  . then return ( false )  ;   eureka client config mock client config = mock (  eureka client config . class )  ;  when ( mock client config . get transport config (  )  )  . then return ( mock transport config )  ;   eureka server config mock server config = mock (  eureka server config . class )  ;  when ( mock server config . get health status min number of available peers (  )  )  . then return ( minimum )  ;   peer eureka nodes peer eureka nodes = new  peer eureka nodes ( mock registry mock server config mock client config null mock app info manager )  ;   peer eureka nodes spy peer eureka nodes = spy ( peer eureka nodes )  ;  when ( spy peer eureka nodes . get peer eureka nodes (  )  )  . then return ( mock nodes )  ;  when ( mock eureka server context . get peer eureka nodes (  )  )  . then return ( spy peer eureka nodes )  ;  return new  status util ( mock eureka server context )  ;   }  ",2169,3,status,2,"[9, 1602, 2118]"
7465,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\StatusUtilTest.java,get status util,"private  status util   ( int replicas int instances int minimum )  {   eureka server context mock eureka server context = mock (  eureka server context . class )  ;   list <  instance info >  mock instance infos = get mock instance infos ( instances )  ;   application mock application = mock (  application . class )  ;  when ( mock application . get instances (  )  )  . then return ( mock instance infos )  ;   application info manager mock app info manager = mock (  application info manager . class )  ;  when ( mock app info manager . get info (  )  )  . then return ( mock instance infos . get ( 0 )  )  ;  when ( mock eureka server context . get application info manager (  )  )  . then return ( mock app info manager )  ;   peer aware instance registry mock registry = mock (  peer aware instance registry . class )  ;  when ( mock registry . get application ( ""stuff"" false )  )  . then return ( mock application )  ;  when ( mock eureka server context . get registry (  )  )  . then return ( mock registry )  ;   list <  peer eureka node >  mock nodes = get mock nodes ( replicas )  ;   eureka transport config mock transport config = mock (  eureka transport config . class )  ;  when ( mock transport config . applications resolver use ip (  )  )  . then return ( false )  ;   eureka client config mock client config = mock (  eureka client config . class )  ;  when ( mock client config . get transport config (  )  )  . then return ( mock transport config )  ;   eureka server config mock server config = mock (  eureka server config . class )  ;  when ( mock server config . get health status min number of available peers (  )  )  . then return ( minimum )  ;   peer eureka nodes peer eureka nodes = new  peer eureka nodes ( mock registry mock server config mock client config null mock app info manager )  ;   peer eureka nodes spy peer eureka nodes = spy ( peer eureka nodes )  ;  when ( spy peer eureka nodes . get peer eureka nodes (  )  )  . then return ( mock nodes )  ;  when ( mock eureka server context . get peer eureka nodes (  )  )  . then return ( spy peer eureka nodes )  ;  return new  status util ( mock eureka server context )  ;   }  ",2169,3,util,3,"[16, 2125]"
7466,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\StatusUtilTest.java,test get status info healthy,@ test public void   (  )  {   status util status util = get status util ( 3 3 2 )  ;  assert true ( status util . get status info (  )  . is healthy (  )  )  ;   }  ,166,5,test,1,[2]
7467,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\StatusUtilTest.java,test get status info healthy,@ test public void   (  )  {   status util status util = get status util ( 3 3 2 )  ;  assert true ( status util . get status info (  )  . is healthy (  )  )  ;   }  ,166,5,get,2,"[57, 115]"
7468,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\StatusUtilTest.java,test get status info healthy,@ test public void   (  )  {   status util status util = get status util ( 3 3 2 )  ;  assert true ( status util . get status info (  )  . is healthy (  )  )  ;   }  ,166,5,status,3,"[31, 43, 61, 101, 119]"
7469,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\StatusUtilTest.java,test get status info healthy,@ test public void   (  )  {   status util status util = get status util ( 3 3 2 )  ;  assert true ( status util . get status info (  )  . is healthy (  )  )  ;   }  ,166,5,info,4,[126]
7470,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\StatusUtilTest.java,test get status info healthy,@ test public void   (  )  {   status util status util = get status util ( 3 3 2 )  ;  assert true ( status util . get status info (  )  . is healthy (  )  )  ;   }  ,166,5,healthy,5,[142]
7471,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\StatusUtilTest.java,test get status info unhealthy,@ test public void   (  )  {   status util status util = get status util ( 5 3 4 )  ;  assert false ( status util . get status info (  )  . is healthy (  )  )  ;   }  ,167,5,test,1,[2]
7472,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\StatusUtilTest.java,test get status info unhealthy,@ test public void   (  )  {   status util status util = get status util ( 5 3 4 )  ;  assert false ( status util . get status info (  )  . is healthy (  )  )  ;   }  ,167,5,get,2,"[57, 116]"
7473,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\StatusUtilTest.java,test get status info unhealthy,@ test public void   (  )  {   status util status util = get status util ( 5 3 4 )  ;  assert false ( status util . get status info (  )  . is healthy (  )  )  ;   }  ,167,5,status,3,"[31, 43, 61, 102, 120]"
7474,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\StatusUtilTest.java,test get status info unhealthy,@ test public void   (  )  {   status util status util = get status util ( 5 3 4 )  ;  assert false ( status util . get status info (  )  . is healthy (  )  )  ;   }  ,167,5,info,4,[127]
7475,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\StatusUtilTest.java,test get status info unhealthy,@ test public void   (  )  {   status util status util = get status util ( 5 3 4 )  ;  assert false ( status util . get status info (  )  . is healthy (  )  )  ;   }  ,167,5,unhealthy,5,[]
7476,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\StatusUtilTest.java,test get status info unset health,@ test public void   (  )  {   status util status util = get status util ( 5 3  - 1 )  ;   status info status info = status util . get status info (  )  ;  try  {  status info . is healthy (  )  ;   }  catch  (   null pointer exception e )   {  return ;  ,255,6,test,1,[2]
7477,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\StatusUtilTest.java,test get status info unset health,@ test public void   (  )  {   status util status util = get status util ( 5 3  - 1 )  ;   status info status info = status util . get status info (  )  ;  try  {  status info . is healthy (  )  ;   }  catch  (   null pointer exception e )   {  return ;  ,255,6,get,2,"[57, 131]"
7478,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\StatusUtilTest.java,test get status info unset health,@ test public void   (  )  {   status util status util = get status util ( 5 3  - 1 )  ;   status info status info = status util . get status info (  )  ;  try  {  status info . is healthy (  )  ;   }  catch  (   null pointer exception e )   {  return ;  ,255,6,status,3,"[31, 43, 61, 91, 103, 117, 135, 164]"
7479,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\StatusUtilTest.java,test get status info unset health,@ test public void   (  )  {   status util status util = get status util ( 5 3  - 1 )  ;   status info status info = status util . get status info (  )  ;  try  {  status info . is healthy (  )  ;   }  catch  (   null pointer exception e )   {  return ;  ,255,6,info,4,"[98, 110, 142, 171]"
7480,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\StatusUtilTest.java,test get status info unset health,@ test public void   (  )  {   status util status util = get status util ( 5 3  - 1 )  ;   status info status info = status util . get status info (  )  ;  try  {  status info . is healthy (  )  ;   }  catch  (   null pointer exception e )   {  return ;  ,255,6,unset,5,[]
7481,C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\StatusUtilTest.java,test get status info unset health,@ test public void   (  )  {   status util status util = get status util ( 5 3  - 1 )  ;   status info status info = status util . get status info (  )  ;  try  {  status info . is healthy (  )  ;   }  catch  (   null pointer exception e )   {  return ;  ,255,6,health,6,[181]
7482,C:\Users\User\Desktop\Thesis\eureka\eureka-examples\src\main\java\com\netflix\eureka\ExampleEurekaGovernatedService.java,configure,@ override protected void   (  )  {   dynamic property factory config instance = com . netflix . config .  dynamic property factory . get instance (  )  ;  bind (  dynamic property factory . class )  . to instance ( config instance )  ;  bind (  eureka in,255,1,configure,1,[]
7483,C:\Users\User\Desktop\Thesis\eureka\eureka-examples\src\main\java\com\netflix\eureka\ExampleEurekaGovernatedService.java,init,"private static  lifecycle injector   (  )  throws  exception  {   system . out . println ( "" creating injector for  example  service"" )  ;   lifecycle injector injector =  injector builder . from modules ( new  eureka module (  )  new  example service module (  )  )  . override with ( new  abstract module (  )  {  @ override protected void configure (  )  {   dynamic property factory config instance = com . netflix . config .  dynamic property factory . get instance (  )  ;  bind (  dynamic property factory . class )  . to instance ( config instance )  ;  bind (  eureka instance config . class )  . to (  my data center instance config . class )  ;   }   }   )  . create injector (  )  ;   system . out . println ( "" done creating the injector"" )  ;  return injector ;   }  ",781,1,init,1,[]
7484,C:\Users\User\Desktop\Thesis\eureka\eureka-examples\src\main\java\com\netflix\eureka\ExampleEurekaGovernatedService.java,main,"public static void   (  string[] args )  throws  exception  {   lifecycle injector injector = null ;  try  {  injector = init (  )  ;  injector . await termination (  )  ;   }  catch  (   exception e )   {   system . out . println ( "" error starting the sample service: ""  +  e )  ;  e . print stack trace (  )  ;   }  finally  {  if  ( injector  !  =  null )   {  injector . shutdown (  )  ;   }   }   }  ",406,1,main,1,[]
7485,C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\main\java\com\netflix\eureka\transport\Jersey2ReplicationClient.java, jersey replication client,public   (  eureka jersey2 client eureka jersey2 client  string service url )  {  super ( eureka jersey2 client . get client (  )  service url )  ;  this . eureka jersey2 client = eureka jersey2 client ;   }  ,209,3,jersey,1,"[19, 41, 97, 163, 187]"
7486,C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\main\java\com\netflix\eureka\transport\Jersey2ReplicationClient.java, jersey replication client,public   (  eureka jersey2 client eureka jersey2 client  string service url )  {  super ( eureka jersey2 client . get client (  )  service url )  ;  this . eureka jersey2 client = eureka jersey2 client ;   }  ,209,3,replication,2,[]
7487,C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\main\java\com\netflix\eureka\transport\Jersey2ReplicationClient.java, jersey replication client,public   (  eureka jersey2 client eureka jersey2 client  string service url )  {  super ( eureka jersey2 client . get client (  )  service url )  ;  this . eureka jersey2 client = eureka jersey2 client ;   }  ,209,3,client,3,"[27, 49, 105, 118, 171, 195]"
7488,C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\main\java\com\netflix\eureka\transport\Jersey2ReplicationClient.java,add extra headers,"@ override protected void   (  builder web resource )  {  web resource . header (  peer eureka node . header   replication ""true"" )  ;   }  ",140,3,add,1,[]
7489,C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\main\java\com\netflix\eureka\transport\Jersey2ReplicationClient.java,add extra headers,"@ override protected void   (  builder web resource )  {  web resource . header (  peer eureka node . header   replication ""true"" )  ;   }  ",140,3,extra,2,[]
7490,C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\main\java\com\netflix\eureka\transport\Jersey2ReplicationClient.java,add extra headers,"@ override protected void   (  builder web resource )  {  web resource . header (  peer eureka node . header   replication ""true"" )  ;   }  ",140,3,headers,3,[]
7491,C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\main\java\com\netflix\eureka\transport\Jersey2ReplicationClient.java,create replication client,"public static  jersey2 replication client   (  eureka server config config  server codecs server codecs  string service url )  {   string name =  jersey2 replication client . class . get simple name (  )   +  "": ""  +  service url +  ""apps / : "" ;   eureka jersey2 client jersey client ;  try  {   string hostname ;  try  {  hostname = new url ( service url )  . get host (  )  ;   }  catch  (   malformedurl exception e )   {  hostname = service url ;   }   string jersey client name = "" discovery -  peer node client - ""  +  hostname ;   eureka jersey2 client impl .  eureka jersey2 client builder client builder = new  eureka jersey2 client impl .  eureka jersey2 client builder (  )  . with client name ( jersey client name )  . with user agent ( "" java -  eureka client -  replication"" )  . with encoder wrapper ( server codecs . get full json codec (  )  )  . with decoder wrapper ( server codecs . get full json codec (  )  )  . with connection timeout ( config . get peer node connect timeout ms (  )  )  . with read timeout ( config . get peer node read timeout ms (  )  )  . with max connections per host ( config . get peer node total connections per host (  )  )  . with max total connections ( config . get peer node total connections (  )  )  . with connection idle timeout ( config . get peer node connection idle timeout seconds (  )  )  ;  if  ( service url . starts with ( ""https: /  / "" )  && ""true"" . equals (  system . get property ( ""com . netflix . eureka . shouldssl connections use system socket factory"" )  )  )   {  client builder . with systemssl configuration (  )  ;   }  jersey client = client builder . build (  )  ;   }  catch  (   throwable e )   {  throw new  runtime exception ( "" cannot  create new  replica  node :""  +  name e )  ;   }   string ip = null ;  try  {  ip =  inet address . get local host (  )  . get host address (  )  ;   }  catch  (   unknown host exception e )   {  logger . warn ( "" cannot find localhost ip"" e )  ;   }   client jersey apache client = jersey client . get client (  )  ;  jersey apache client . register ( new  jersey2 dynamicgzip content encoding filter ( config )  )  ;   eureka server identity identity = new  eureka server identity ( ip )  ;  jersey apache client . register ( new  eureka identity header filter ( identity )  )  ;  return new  jersey2 replication client ( jersey client service url )  ;   }  ",2384,3,create,1,[1724]
7492,C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\main\java\com\netflix\eureka\transport\Jersey2ReplicationClient.java,create replication client,"public static  jersey2 replication client   (  eureka server config config  server codecs server codecs  string service url )  {   string name =  jersey2 replication client . class . get simple name (  )   +  "": ""  +  service url +  ""apps / : "" ;   eureka jersey2 client jersey client ;  try  {   string hostname ;  try  {  hostname = new url ( service url )  . get host (  )  ;   }  catch  (   malformedurl exception e )   {  hostname = service url ;   }   string jersey client name = "" discovery -  peer node client - ""  +  hostname ;   eureka jersey2 client impl .  eureka jersey2 client builder client builder = new  eureka jersey2 client impl .  eureka jersey2 client builder (  )  . with client name ( jersey client name )  . with user agent ( "" java -  eureka client -  replication"" )  . with encoder wrapper ( server codecs . get full json codec (  )  )  . with decoder wrapper ( server codecs . get full json codec (  )  )  . with connection timeout ( config . get peer node connect timeout ms (  )  )  . with read timeout ( config . get peer node read timeout ms (  )  )  . with max connections per host ( config . get peer node total connections per host (  )  )  . with max total connections ( config . get peer node total connections (  )  )  . with connection idle timeout ( config . get peer node connection idle timeout seconds (  )  )  ;  if  ( service url . starts with ( ""https: /  / "" )  && ""true"" . equals (  system . get property ( ""com . netflix . eureka . shouldssl connections use system socket factory"" )  )  )   {  client builder . with systemssl configuration (  )  ;   }  jersey client = client builder . build (  )  ;   }  catch  (   throwable e )   {  throw new  runtime exception ( "" cannot  create new  replica  node :""  +  name e )  ;   }   string ip = null ;  try  {  ip =  inet address . get local host (  )  . get host address (  )  ;   }  catch  (   unknown host exception e )   {  logger . warn ( "" cannot find localhost ip"" e )  ;   }   client jersey apache client = jersey client . get client (  )  ;  jersey apache client . register ( new  jersey2 dynamicgzip content encoding filter ( config )  )  ;   eureka server identity identity = new  eureka server identity ( ip )  ;  jersey apache client . register ( new  eureka identity header filter ( identity )  )  ;  return new  jersey2 replication client ( jersey client service url )  ;   }  ",2384,3,replication,2,"[23, 154, 777, 2327]"
7493,C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\main\java\com\netflix\eureka\transport\Jersey2ReplicationClient.java,create replication client,"public static  jersey2 replication client   (  eureka server config config  server codecs server codecs  string service url )  {   string name =  jersey2 replication client . class . get simple name (  )   +  "": ""  +  service url +  ""apps / : "" ;   eureka jersey2 client jersey client ;  try  {   string hostname ;  try  {  hostname = new url ( service url )  . get host (  )  ;   }  catch  (   malformedurl exception e )   {  hostname = service url ;   }   string jersey client name = "" discovery -  peer node client - ""  +  hostname ;   eureka jersey2 client impl .  eureka jersey2 client builder client builder = new  eureka jersey2 client impl .  eureka jersey2 client builder (  )  . with client name ( jersey client name )  . with user agent ( "" java -  eureka client -  replication"" )  . with encoder wrapper ( server codecs . get full json codec (  )  )  . with decoder wrapper ( server codecs . get full json codec (  )  )  . with connection timeout ( config . get peer node connect timeout ms (  )  )  . with read timeout ( config . get peer node read timeout ms (  )  )  . with max connections per host ( config . get peer node total connections per host (  )  )  . with max total connections ( config . get peer node total connections (  )  )  . with connection idle timeout ( config . get peer node connection idle timeout seconds (  )  )  ;  if  ( service url . starts with ( ""https: /  / "" )  && ""true"" . equals (  system . get property ( ""com . netflix . eureka . shouldssl connections use system socket factory"" )  )  )   {  client builder . with systemssl configuration (  )  ;   }  jersey client = client builder . build (  )  ;   }  catch  (   throwable e )   {  throw new  runtime exception ( "" cannot  create new  replica  node :""  +  name e )  ;   }   string ip = null ;  try  {  ip =  inet address . get local host (  )  . get host address (  )  ;   }  catch  (   unknown host exception e )   {  logger . warn ( "" cannot find localhost ip"" e )  ;   }   client jersey apache client = jersey client . get client (  )  ;  jersey apache client . register ( new  jersey2 dynamicgzip content encoding filter ( config )  )  ;   eureka server identity identity = new  eureka server identity ( ip )  ;  jersey apache client . register ( new  eureka identity header filter ( identity )  )  ;  return new  jersey2 replication client ( jersey client service url )  ;   }  ",2384,3,client,3,"[35, 166, 264, 278, 472, 511, 554, 584, 599, 636, 666, 694, 715, 767, 1542, 1608, 1617, 1977, 1998, 2014, 2027, 2057, 2232, 2339, 2355]"
7494,C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\main\java\com\netflix\eureka\transport\Jersey2ReplicationClient.java,is success,private static boolean   ( int status code )  {  return status code  >  =  200 && status code  <  300 ;   }  ,109,2,is,1,[]
7495,C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\main\java\com\netflix\eureka\transport\Jersey2ReplicationClient.java,is success,private static boolean   ( int status code )  {  return status code  >  =  200 && status code  <  300 ;   }  ,109,2,success,2,[]
7496,C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\main\java\com\netflix\eureka\transport\Jersey2ReplicationClient.java,send heart beat,"@ override public  eureka http response <  instance info >    (  string app name  string id  instance info info  instance status overridden status )  {   string url path = ""apps / ""  +  app name  +  ' / ' +  id ;   response response = null ;  try  {   web",255,3,send,1,[]
7497,C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\main\java\com\netflix\eureka\transport\Jersey2ReplicationClient.java,send heart beat,"@ override public  eureka http response <  instance info >    (  string app name  string id  instance info info  instance status overridden status )  {   string url path = ""apps / ""  +  app name  +  ' / ' +  id ;   response response = null ;  try  {   web",255,3,heart,2,[]
7498,C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\main\java\com\netflix\eureka\transport\Jersey2ReplicationClient.java,send heart beat,"@ override public  eureka http response <  instance info >    (  string app name  string id  instance info info  instance status overridden status )  {   string url path = ""apps / ""  +  app name  +  ' / ' +  id ;   response response = null ;  try  {   web",255,3,beat,3,[]
7499,C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\main\java\com\netflix\eureka\transport\Jersey2ReplicationClient.java,shutdown,@ override public void   (  )  {  super . shutdown (  )  ;  eureka jersey2 client . destroy resources (  )  ;   }  ,115,1,shutdown,1,[42]
7500,C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\main\java\com\netflix\eureka\transport\Jersey2ReplicationClient.java,status update,"@ override public  eureka http response <  void >    (  string asg name asg status new status )  {   response response = null ;  try  {   string url path = ""asg / ""  +  asg name  +  "" / status"" ;  response = jersey client . target ( service url )  . path ",255,2,status,1,"[76, 87, 186]"
7501,C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\main\java\com\netflix\eureka\transport\Jersey2ReplicationClient.java,status update,"@ override public  eureka http response <  void >    (  string asg name asg status new status )  {   response response = null ;  try  {   string url path = ""asg / ""  +  asg name  +  "" / status"" ;  response = jersey client . target ( service url )  . path ",255,2,update,2,[]
7502,C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\main\java\com\netflix\eureka\transport\Jersey2ReplicationClient.java,submit batch updates,@ override public  eureka http response <  replication list response >    (  replication list replication list )  {   response response = null ;  try  {  response = jersey client . target ( service url )  . path (  peer eureka node . batch   url   path ) ,255,3,submit,1,[]
7503,C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\main\java\com\netflix\eureka\transport\Jersey2ReplicationClient.java,submit batch updates,@ override public  eureka http response <  replication list response >    (  replication list replication list )  {   response response = null ;  try  {  response = jersey client . target ( service url )  . path (  peer eureka node . batch   url   path ) ,255,3,batch,2,[234]
7504,C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\main\java\com\netflix\eureka\transport\Jersey2ReplicationClient.java,submit batch updates,@ override public  eureka http response <  replication list response >    (  replication list replication list )  {   response response = null ;  try  {  response = jersey client . target ( service url )  . path (  peer eureka node . batch   url   path ) ,255,3,updates,3,[]
7505,C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\test\java\com\netflix\eureka\transport\Jersey2ReplicationClientTest.java,set up,"@ before public void   (  )  throws  exception  {  replication client =  jersey2 replication client . create replication client ( config server codecs ""http: /  / localhost:""  +  server mock rule . get http port (  )   +  "" / eureka / v2"" )  ;   }  ",249,2,set,1,[]
7506,C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\test\java\com\netflix\eureka\transport\Jersey2ReplicationClientTest.java,set up,"@ before public void   (  )  throws  exception  {  replication client =  jersey2 replication client . create replication client ( config server codecs ""http: /  / localhost:""  +  server mock rule . get http port (  )   +  "" / eureka / v2"" )  ;   }  ",249,2,up,2,[]
7507,C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\test\java\com\netflix\eureka\transport\Jersey2ReplicationClientTest.java,tear down,@ after public void   (  )  {  if  ( server mock client  !  =  null )   {  server mock client . reset (  )  ;   }   }  ,119,2,tear,1,[]
7508,C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\test\java\com\netflix\eureka\transport\Jersey2ReplicationClientTest.java,tear down,@ after public void   (  )  {  if  ( server mock client  !  =  null )   {  server mock client . reset (  )  ;   }   }  ,119,2,down,2,[]
7509,C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\test\java\com\netflix\eureka\transport\Jersey2ReplicationClientTest.java,test asg status update replication,"@ test public void   (  )  throws  exception  {  server mock client . when ( request (  )  . with method ( ""put"" )  . with header ( header (  peer eureka node . header   replication ""true"" )  )  . with path ( "" / eureka / v2 / asg / ""  +  instance info . ",255,5,test,1,[2]
7510,C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\test\java\com\netflix\eureka\transport\Jersey2ReplicationClientTest.java,test asg status update replication,"@ test public void   (  )  throws  exception  {  server mock client . when ( request (  )  . with method ( ""put"" )  . with header ( header (  peer eureka node . header   replication ""true"" )  )  . with path ( "" / eureka / v2 / asg / ""  +  instance info . ",255,5,asg,2,[227]
7511,C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\test\java\com\netflix\eureka\transport\Jersey2ReplicationClientTest.java,test asg status update replication,"@ test public void   (  )  throws  exception  {  server mock client . when ( request (  )  . with method ( ""put"" )  . with header ( header (  peer eureka node . header   replication ""true"" )  )  . with path ( "" / eureka / v2 / asg / ""  +  instance info . ",255,5,status,3,[]
7512,C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\test\java\com\netflix\eureka\transport\Jersey2ReplicationClientTest.java,test asg status update replication,"@ test public void   (  )  throws  exception  {  server mock client . when ( request (  )  . with method ( ""put"" )  . with header ( header (  peer eureka node . header   replication ""true"" )  )  . with path ( "" / eureka / v2 / asg / ""  +  instance info . ",255,5,update,4,[]
7513,C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\test\java\com\netflix\eureka\transport\Jersey2ReplicationClientTest.java,test asg status update replication,"@ test public void   (  )  throws  exception  {  server mock client . when ( request (  )  . with method ( ""put"" )  . with header ( header (  peer eureka node . header   replication ""true"" )  )  . with path ( "" / eureka / v2 / asg / ""  +  instance info . ",255,5,replication,5,[170]
7514,C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\test\java\com\netflix\eureka\transport\Jersey2ReplicationClientTest.java,test cancel replication,"@ test public void   (  )  throws  exception  {  server mock client . when ( request (  )  . with method ( ""delete"" )  . with header ( header (  peer eureka node . header   replication ""true"" )  )  . with path ( "" / eureka / v2 / apps / ""  +  instance inf",255,3,test,1,[2]
7515,C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\test\java\com\netflix\eureka\transport\Jersey2ReplicationClientTest.java,test cancel replication,"@ test public void   (  )  throws  exception  {  server mock client . when ( request (  )  . with method ( ""delete"" )  . with header ( header (  peer eureka node . header   replication ""true"" )  )  . with path ( "" / eureka / v2 / apps / ""  +  instance inf",255,3,cancel,2,[]
7516,C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\test\java\com\netflix\eureka\transport\Jersey2ReplicationClientTest.java,test cancel replication,"@ test public void   (  )  throws  exception  {  server mock client . when ( request (  )  . with method ( ""delete"" )  . with header ( header (  peer eureka node . header   replication ""true"" )  )  . with path ( "" / eureka / v2 / apps / ""  +  instance inf",255,3,replication,3,[173]
7517,C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\test\java\com\netflix\eureka\transport\Jersey2ReplicationClientTest.java,test delete status override replication,"@ test public void   (  )  throws  exception  {  server mock client . when ( request (  )  . with method ( ""delete"" )  . with header ( header (  peer eureka node . header   replication ""true"" )  )  . with path ( "" / eureka / v2 / apps / ""  +  instance inf",255,5,test,1,[2]
7518,C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\test\java\com\netflix\eureka\transport\Jersey2ReplicationClientTest.java,test delete status override replication,"@ test public void   (  )  throws  exception  {  server mock client . when ( request (  )  . with method ( ""delete"" )  . with header ( header (  peer eureka node . header   replication ""true"" )  )  . with path ( "" / eureka / v2 / apps / ""  +  instance inf",255,5,delete,2,[108]
7519,C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\test\java\com\netflix\eureka\transport\Jersey2ReplicationClientTest.java,test delete status override replication,"@ test public void   (  )  throws  exception  {  server mock client . when ( request (  )  . with method ( ""delete"" )  . with header ( header (  peer eureka node . header   replication ""true"" )  )  . with path ( "" / eureka / v2 / apps / ""  +  instance inf",255,5,status,3,[]
7520,C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\test\java\com\netflix\eureka\transport\Jersey2ReplicationClientTest.java,test delete status override replication,"@ test public void   (  )  throws  exception  {  server mock client . when ( request (  )  . with method ( ""delete"" )  . with header ( header (  peer eureka node . header   replication ""true"" )  )  . with path ( "" / eureka / v2 / apps / ""  +  instance inf",255,5,override,4,[]
7521,C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\test\java\com\netflix\eureka\transport\Jersey2ReplicationClientTest.java,test delete status override replication,"@ test public void   (  )  throws  exception  {  server mock client . when ( request (  )  . with method ( ""delete"" )  . with header ( header (  peer eureka node . header   replication ""true"" )  )  . with path ( "" / eureka / v2 / apps / ""  +  instance inf",255,5,replication,5,[173]
7522,C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\test\java\com\netflix\eureka\transport\Jersey2ReplicationClientTest.java,test heartbeat replication with no response body,"@ test public void   (  )  throws  exception  {  server mock client . when ( request (  )  . with method ( ""put"" )  . with header ( header (  peer eureka node . header   replication ""true"" )  )  . with path ( "" / eureka / v2 / apps / ""  +  instance info .",255,7,test,1,[2]
7523,C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\test\java\com\netflix\eureka\transport\Jersey2ReplicationClientTest.java,test heartbeat replication with no response body,"@ test public void   (  )  throws  exception  {  server mock client . when ( request (  )  . with method ( ""put"" )  . with header ( header (  peer eureka node . header   replication ""true"" )  )  . with path ( "" / eureka / v2 / apps / ""  +  instance info .",255,7,heartbeat,2,[]
7524,C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\test\java\com\netflix\eureka\transport\Jersey2ReplicationClientTest.java,test heartbeat replication with no response body,"@ test public void   (  )  throws  exception  {  server mock client . when ( request (  )  . with method ( ""put"" )  . with header ( header (  peer eureka node . header   replication ""true"" )  )  . with path ( "" / eureka / v2 / apps / ""  +  instance info .",255,7,replication,3,[170]
7525,C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\test\java\com\netflix\eureka\transport\Jersey2ReplicationClientTest.java,test heartbeat replication with no response body,"@ test public void   (  )  throws  exception  {  server mock client . when ( request (  )  . with method ( ""put"" )  . with header ( header (  peer eureka node . header   replication ""true"" )  )  . with path ( "" / eureka / v2 / apps / ""  +  instance info .",255,7,with,4,"[93, 118, 197]"
7526,C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\test\java\com\netflix\eureka\transport\Jersey2ReplicationClientTest.java,test heartbeat replication with no response body,"@ test public void   (  )  throws  exception  {  server mock client . when ( request (  )  . with method ( ""put"" )  . with header ( header (  peer eureka node . header   replication ""true"" )  )  . with path ( "" / eureka / v2 / apps / ""  +  instance info .",255,7,no,5,[154]
7527,C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\test\java\com\netflix\eureka\transport\Jersey2ReplicationClientTest.java,test heartbeat replication with no response body,"@ test public void   (  )  throws  exception  {  server mock client . when ( request (  )  . with method ( ""put"" )  . with header ( header (  peer eureka node . header   replication ""true"" )  )  . with path ( "" / eureka / v2 / apps / ""  +  instance info .",255,7,response,6,[]
7528,C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\test\java\com\netflix\eureka\transport\Jersey2ReplicationClientTest.java,test heartbeat replication with no response body,"@ test public void   (  )  throws  exception  {  server mock client . when ( request (  )  . with method ( ""put"" )  . with header ( header (  peer eureka node . header   replication ""true"" )  )  . with path ( "" / eureka / v2 / apps / ""  +  instance info .",255,7,body,7,[]
7529,C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\test\java\com\netflix\eureka\transport\Jersey2ReplicationClientTest.java,test heartbeat replication with response body,@ test public void   (  )  throws  exception  {   instance info remote info = new  instance info ( this . instance info )  ;  remote info . set status (  instance status . down )  ;  byte[] response body = to gzipped json ( remote info )  ;  server mock c,255,6,test,1,[2]
7530,C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\test\java\com\netflix\eureka\transport\Jersey2ReplicationClientTest.java,test heartbeat replication with response body,@ test public void   (  )  throws  exception  {   instance info remote info = new  instance info ( this . instance info )  ;  remote info . set status (  instance status . down )  ;  byte[] response body = to gzipped json ( remote info )  ;  server mock c,255,6,heartbeat,2,[]
7531,C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\test\java\com\netflix\eureka\transport\Jersey2ReplicationClientTest.java,test heartbeat replication with response body,@ test public void   (  )  throws  exception  {   instance info remote info = new  instance info ( this . instance info )  ;  remote info . set status (  instance status . down )  ;  byte[] response body = to gzipped json ( remote info )  ;  server mock c,255,6,replication,3,[]
7532,C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\test\java\com\netflix\eureka\transport\Jersey2ReplicationClientTest.java,test heartbeat replication with response body,@ test public void   (  )  throws  exception  {   instance info remote info = new  instance info ( this . instance info )  ;  remote info . set status (  instance status . down )  ;  byte[] response body = to gzipped json ( remote info )  ;  server mock c,255,6,with,4,[]
7533,C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\test\java\com\netflix\eureka\transport\Jersey2ReplicationClientTest.java,test heartbeat replication with response body,@ test public void   (  )  throws  exception  {   instance info remote info = new  instance info ( this . instance info )  ;  remote info . set status (  instance status . down )  ;  byte[] response body = to gzipped json ( remote info )  ;  server mock c,255,6,response,5,[190]
7534,C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\test\java\com\netflix\eureka\transport\Jersey2ReplicationClientTest.java,test heartbeat replication with response body,@ test public void   (  )  throws  exception  {   instance info remote info = new  instance info ( this . instance info )  ;  remote info . set status (  instance status . down )  ;  byte[] response body = to gzipped json ( remote info )  ;  server mock c,255,6,body,6,[199]
7535,C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\test\java\com\netflix\eureka\transport\Jersey2ReplicationClientTest.java,test registration replication,"@ test public void   (  )  throws  exception  {  server mock client . when ( request (  )  . with method ( ""post"" )  . with header ( header (  peer eureka node . header   replication ""true"" )  )  . with path ( "" / eureka / v2 / apps / ""  +  instance info ",255,3,test,1,[2]
7536,C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\test\java\com\netflix\eureka\transport\Jersey2ReplicationClientTest.java,test registration replication,"@ test public void   (  )  throws  exception  {  server mock client . when ( request (  )  . with method ( ""post"" )  . with header ( header (  peer eureka node . header   replication ""true"" )  )  . with path ( "" / eureka / v2 / apps / ""  +  instance info ",255,3,registration,2,[]
7537,C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\test\java\com\netflix\eureka\transport\Jersey2ReplicationClientTest.java,test registration replication,"@ test public void   (  )  throws  exception  {  server mock client . when ( request (  )  . with method ( ""post"" )  . with header ( header (  peer eureka node . header   replication ""true"" )  )  . with path ( "" / eureka / v2 / apps / ""  +  instance info ",255,3,replication,3,[171]
7538,C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\test\java\com\netflix\eureka\transport\Jersey2ReplicationClientTest.java,test status update replication,"@ test public void   (  )  throws  exception  {  server mock client . when ( request (  )  . with method ( ""put"" )  . with header ( header (  peer eureka node . header   replication ""true"" )  )  . with path ( "" / eureka / v2 / apps / ""  +  instance info .",255,4,test,1,[2]
7539,C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\test\java\com\netflix\eureka\transport\Jersey2ReplicationClientTest.java,test status update replication,"@ test public void   (  )  throws  exception  {  server mock client . when ( request (  )  . with method ( ""put"" )  . with header ( header (  peer eureka node . header   replication ""true"" )  )  . with path ( "" / eureka / v2 / apps / ""  +  instance info .",255,4,status,2,[]
7540,C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\test\java\com\netflix\eureka\transport\Jersey2ReplicationClientTest.java,test status update replication,"@ test public void   (  )  throws  exception  {  server mock client . when ( request (  )  . with method ( ""put"" )  . with header ( header (  peer eureka node . header   replication ""true"" )  )  . with path ( "" / eureka / v2 / apps / ""  +  instance info .",255,4,update,3,[]
7541,C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\test\java\com\netflix\eureka\transport\Jersey2ReplicationClientTest.java,test status update replication,"@ test public void   (  )  throws  exception  {  server mock client . when ( request (  )  . with method ( ""put"" )  . with header ( header (  peer eureka node . header   replication ""true"" )  )  . with path ( "" / eureka / v2 / apps / ""  +  instance info .",255,4,replication,4,[170]
7542,C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\test\java\com\netflix\eureka\transport\Jersey2ReplicationClientTest.java,to gzipped json,private static byte[]   (  instance info remote info )  throws io exception  {   byte array output stream bos = new  byte array output stream (  )  ;  gzip output stream gos = new gzip output stream ( bos )  ;   eureka jackson codec . get instance (  )  . write to ( remote info gos )  ;  gos . flush (  )  ;  return bos . to byte array (  )  ;   }  ,350,3,to,1,"[262, 323]"
7543,C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\test\java\com\netflix\eureka\transport\Jersey2ReplicationClientTest.java,to gzipped json,private static byte[]   (  instance info remote info )  throws io exception  {   byte array output stream bos = new  byte array output stream (  )  ;  gzip output stream gos = new gzip output stream ( bos )  ;   eureka jackson codec . get instance (  )  . write to ( remote info gos )  ;  gos . flush (  )  ;  return bos . to byte array (  )  ;   }  ,350,3,gzipped,2,[]
7544,C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\test\java\com\netflix\eureka\transport\Jersey2ReplicationClientTest.java,to gzipped json,private static byte[]   (  instance info remote info )  throws io exception  {   byte array output stream bos = new  byte array output stream (  )  ;  gzip output stream gos = new gzip output stream ( bos )  ;   eureka jackson codec . get instance (  )  . write to ( remote info gos )  ;  gos . flush (  )  ;  return bos . to byte array (  )  ;   }  ,350,3,json,3,[]
7545,C:\Users\User\Desktop\Thesis\eureka\eureka-examples\src\main\java\com\netflix\eureka\ExampleEurekaClient.java,initialize application info manager,private static synchronized  application info manager   (  eureka instance config instance config )  {  if  ( application info manager  =  =  null )   {   instance info instance info = new  eureka config based instance info provider ( instance config )  . get (  )  ;  application info manager = new  application info manager ( instance config instance info )  ;   }  return application info manager ;   }  ,407,4,initialize,1,[]
7546,C:\Users\User\Desktop\Thesis\eureka\eureka-examples\src\main\java\com\netflix\eureka\ExampleEurekaClient.java,initialize application info manager,private static synchronized  application info manager   (  eureka instance config instance config )  {  if  ( application info manager  =  =  null )   {   instance info instance info = new  eureka config based instance info provider ( instance config )  . get (  )  ;  application info manager = new  application info manager ( instance config instance info )  ;   }  return application info manager ;   }  ,407,4,application,2,"[29, 110, 269, 301, 375]"
7547,C:\Users\User\Desktop\Thesis\eureka\eureka-examples\src\main\java\com\netflix\eureka\ExampleEurekaClient.java,initialize application info manager,private static synchronized  application info manager   (  eureka instance config instance config )  {  if  ( application info manager  =  =  null )   {   instance info instance info = new  eureka config based instance info provider ( instance config )  . get (  )  ;  application info manager = new  application info manager ( instance config instance info )  ;   }  return application info manager ;   }  ,407,4,info,3,"[41, 122, 164, 178, 219, 281, 313, 353, 387]"
7548,C:\Users\User\Desktop\Thesis\eureka\eureka-examples\src\main\java\com\netflix\eureka\ExampleEurekaClient.java,initialize application info manager,private static synchronized  application info manager   (  eureka instance config instance config )  {  if  ( application info manager  =  =  null )   {   instance info instance info = new  eureka config based instance info provider ( instance config )  . get (  )  ;  application info manager = new  application info manager ( instance config instance info )  ;   }  return application info manager ;   }  ,407,4,manager,4,"[46, 127, 286, 318, 392]"
7549,C:\Users\User\Desktop\Thesis\eureka\eureka-examples\src\main\java\com\netflix\eureka\ExampleEurekaClient.java,initialize eureka client,private static synchronized  eureka client   (  application info manager application info manager  eureka client config client config )  {  if  ( eureka client  =  =  null )   {  eureka client = new  discovery client ( application info manager client config )  ;   }  return eureka client ;   }  ,296,3,initialize,1,[]
7550,C:\Users\User\Desktop\Thesis\eureka\eureka-examples\src\main\java\com\netflix\eureka\ExampleEurekaClient.java,initialize eureka client,private static synchronized  eureka client   (  application info manager application info manager  eureka client config client config )  {  if  ( eureka client  =  =  null )   {  eureka client = new  discovery client ( application info manager client config )  ;   }  return eureka client ;   }  ,296,3,eureka,2,"[29, 99, 146, 179, 275]"
7551,C:\Users\User\Desktop\Thesis\eureka\eureka-examples\src\main\java\com\netflix\eureka\ExampleEurekaClient.java,initialize eureka client,private static synchronized  eureka client   (  application info manager application info manager  eureka client config client config )  {  if  ( eureka client  =  =  null )   {  eureka client = new  discovery client ( application info manager client config )  ;   }  return eureka client ;   }  ,296,3,client,3,"[36, 106, 120, 153, 186, 210, 244, 282]"
7552,C:\Users\User\Desktop\Thesis\eureka\eureka-examples\src\main\java\com\netflix\eureka\ExampleEurekaClient.java,main,public static void   (  string[] args )  {   example eureka client sample client = new  example eureka client (  )  ;   application info manager application info manager = initialize application info manager ( new  my data center instance config (  )  )  ;   eureka client client = initialize eureka client ( application info manager new  default eureka client config (  )  )  ;  sample client . send request to service using eureka ( client )  ;  eureka client . shutdown (  )  ;   }  ,486,1,main,1,[]
7553,C:\Users\User\Desktop\Thesis\eureka\eureka-examples\src\main\java\com\netflix\eureka\ExampleEurekaClient.java,send request to service using eureka,"public void   (  eureka client eureka client )  {   string vip address = ""sampleservice . mydomain . net"" ;   instance info next server info = null ;  try  {  next server info = eureka client . get next server from eureka ( vip address false )  ;   }  catch  (   exception e )   {   system . err . println ( "" cannot get an instance of example service to talk to from eureka"" )  ;   system . exit (  - 1 )  ;   }   system . out . println ( "" found an instance of example service to talk to from eureka: ""  +  next server info . getvip address (  )   +  "":"" +  next server info . get port (  )  )  ;   system . out . println ( ""health check url: ""  +  next server info . get health check url (  )  )  ;   system . out . println ( ""override: ""  +  next server info . get overridden status (  )  )  ;   socket s = new  socket (  )  ;  int server port = next server info . get port (  )  ;  try  {  s . connect ( new  inet socket address ( next server info . get host name (  )  server port )  )  ;   }  catch  (  io exception e )   {   system . err . println ( "" could not connect to the server :""  +  next server info . get host name (  )   +  "" at port "" +  server port )  ;   }  catch  (   exception e )   {   system . err . println ( "" could not connect to the server :""  +  next server info . get host name (  )   +  "" at port "" +  server port +  ""due to  exception "" +  e )  ;   }  try  {   string request = ""foo ""  +  new  date (  )  ;   system . out . println ( "" connected to server .   sending a sample request: ""  +  request )  ;   print stream out = new  print stream ( s . get output stream (  )  )  ;  out . println ( request )  ;   system . out . println ( "" waiting for server response .  . "" )  ;   buffered reader rd = new  buffered reader ( new  input stream reader ( s . get input stream (  )  )  )  ;   string str = rd . read line (  )  ;  if  ( str  !  =  null )   {   system . out . println ( "" received response from server: ""  +  str )  ;   system . out . println ( "" exiting the client .   demo over .  . "" )  ;   }  rd . close (  )  ;   }  catch  (  io exception e )   {  e . print stack trace (  )  ;   }   }  ",2135,6,send,1,[1493]
7554,C:\Users\User\Desktop\Thesis\eureka\eureka-examples\src\main\java\com\netflix\eureka\ExampleEurekaClient.java,send request to service using eureka,"public void   (  eureka client eureka client )  {   string vip address = ""sampleservice . mydomain . net"" ;   instance info next server info = null ;  try  {  next server info = eureka client . get next server from eureka ( vip address false )  ;   }  catch  (   exception e )   {   system . err . println ( "" cannot get an instance of example service to talk to from eureka"" )  ;   system . exit (  - 1 )  ;   }   system . out . println ( "" found an instance of example service to talk to from eureka: ""  +  next server info . getvip address (  )   +  "":"" +  next server info . get port (  )  )  ;   system . out . println ( ""health check url: ""  +  next server info . get health check url (  )  )  ;   system . out . println ( ""override: ""  +  next server info . get overridden status (  )  )  ;   socket s = new  socket (  )  ;  int server port = next server info . get port (  )  ;  try  {  s . connect ( new  inet socket address ( next server info . get host name (  )  server port )  )  ;   }  catch  (  io exception e )   {   system . err . println ( "" could not connect to the server :""  +  next server info . get host name (  )   +  "" at port "" +  server port )  ;   }  catch  (   exception e )   {   system . err . println ( "" could not connect to the server :""  +  next server info . get host name (  )   +  "" at port "" +  server port +  ""due to  exception "" +  e )  ;   }  try  {   string request = ""foo ""  +  new  date (  )  ;   system . out . println ( "" connected to server .   sending a sample request: ""  +  request )  ;   print stream out = new  print stream ( s . get output stream (  )  )  ;  out . println ( request )  ;   system . out . println ( "" waiting for server response .  . "" )  ;   buffered reader rd = new  buffered reader ( new  input stream reader ( s . get input stream (  )  )  )  ;   string str = rd . read line (  )  ;  if  ( str  !  =  null )   {   system . out . println ( "" received response from server: ""  +  str )  ;   system . out . println ( "" exiting the client .   demo over .  . "" )  ;   }  rd . close (  )  ;   }  catch  (  io exception e )   {  e . print stack trace (  )  ;   }   }  ",2135,6,request,2,"[1401, 1510, 1525, 1629]"
7555,C:\Users\User\Desktop\Thesis\eureka\eureka-examples\src\main\java\com\netflix\eureka\ExampleEurekaClient.java,send request to service using eureka,"public void   (  eureka client eureka client )  {   string vip address = ""sampleservice . mydomain . net"" ;   instance info next server info = null ;  try  {  next server info = eureka client . get next server from eureka ( vip address false )  ;   }  catch  (   exception e )   {   system . err . println ( "" cannot get an instance of example service to talk to from eureka"" )  ;   system . exit (  - 1 )  ;   }   system . out . println ( "" found an instance of example service to talk to from eureka: ""  +  next server info . getvip address (  )   +  "":"" +  next server info . get port (  )  )  ;   system . out . println ( ""health check url: ""  +  next server info . get health check url (  )  )  ;   system . out . println ( ""override: ""  +  next server info . get overridden status (  )  )  ;   socket s = new  socket (  )  ;  int server port = next server info . get port (  )  ;  try  {  s . connect ( new  inet socket address ( next server info . get host name (  )  server port )  )  ;   }  catch  (  io exception e )   {   system . err . println ( "" could not connect to the server :""  +  next server info . get host name (  )   +  "" at port "" +  server port )  ;   }  catch  (   exception e )   {   system . err . println ( "" could not connect to the server :""  +  next server info . get host name (  )   +  "" at port "" +  server port +  ""due to  exception "" +  e )  ;   }  try  {   string request = ""foo ""  +  new  date (  )  ;   system . out . println ( "" connected to server .   sending a sample request: ""  +  request )  ;   print stream out = new  print stream ( s . get output stream (  )  )  ;  out . println ( request )  ;   system . out . println ( "" waiting for server response .  . "" )  ;   buffered reader rd = new  buffered reader ( new  input stream reader ( s . get input stream (  )  )  )  ;   string str = rd . read line (  )  ;  if  ( str  !  =  null )   {   system . out . println ( "" received response from server: ""  +  str )  ;   system . out . println ( "" exiting the client .   demo over .  . "" )  ;   }  rd . close (  )  ;   }  catch  (  io exception e )   {  e . print stack trace (  )  ;   }   }  ",2135,6,to,3,"[352, 360, 479, 487, 1078, 1255, 1354, 1479]"
7556,C:\Users\User\Desktop\Thesis\eureka\eureka-examples\src\main\java\com\netflix\eureka\ExampleEurekaClient.java,send request to service using eureka,"public void   (  eureka client eureka client )  {   string vip address = ""sampleservice . mydomain . net"" ;   instance info next server info = null ;  try  {  next server info = eureka client . get next server from eureka ( vip address false )  ;   }  catch  (   exception e )   {   system . err . println ( "" cannot get an instance of example service to talk to from eureka"" )  ;   system . exit (  - 1 )  ;   }   system . out . println ( "" found an instance of example service to talk to from eureka: ""  +  next server info . getvip address (  )   +  "":"" +  next server info . get port (  )  )  ;   system . out . println ( ""health check url: ""  +  next server info . get health check url (  )  )  ;   system . out . println ( ""override: ""  +  next server info . get overridden status (  )  )  ;   socket s = new  socket (  )  ;  int server port = next server info . get port (  )  ;  try  {  s . connect ( new  inet socket address ( next server info . get host name (  )  server port )  )  ;   }  catch  (  io exception e )   {   system . err . println ( "" could not connect to the server :""  +  next server info . get host name (  )   +  "" at port "" +  server port )  ;   }  catch  (   exception e )   {   system . err . println ( "" could not connect to the server :""  +  next server info . get host name (  )   +  "" at port "" +  server port +  ""due to  exception "" +  e )  ;   }  try  {   string request = ""foo ""  +  new  date (  )  ;   system . out . println ( "" connected to server .   sending a sample request: ""  +  request )  ;   print stream out = new  print stream ( s . get output stream (  )  )  ;  out . println ( request )  ;   system . out . println ( "" waiting for server response .  . "" )  ;   buffered reader rd = new  buffered reader ( new  input stream reader ( s . get input stream (  )  )  )  ;   string str = rd . read line (  )  ;  if  ( str  !  =  null )   {   system . out . println ( "" received response from server: ""  +  str )  ;   system . out . println ( "" exiting the client .   demo over .  . "" )  ;   }  rd . close (  )  ;   }  catch  (  io exception e )   {  e . print stack trace (  )  ;   }   }  ",2135,6,service,4,"[80, 344, 471]"
7557,C:\Users\User\Desktop\Thesis\eureka\eureka-examples\src\main\java\com\netflix\eureka\ExampleEurekaClient.java,send request to service using eureka,"public void   (  eureka client eureka client )  {   string vip address = ""sampleservice . mydomain . net"" ;   instance info next server info = null ;  try  {  next server info = eureka client . get next server from eureka ( vip address false )  ;   }  catch  (   exception e )   {   system . err . println ( "" cannot get an instance of example service to talk to from eureka"" )  ;   system . exit (  - 1 )  ;   }   system . out . println ( "" found an instance of example service to talk to from eureka: ""  +  next server info . getvip address (  )   +  "":"" +  next server info . get port (  )  )  ;   system . out . println ( ""health check url: ""  +  next server info . get health check url (  )  )  ;   system . out . println ( ""override: ""  +  next server info . get overridden status (  )  )  ;   socket s = new  socket (  )  ;  int server port = next server info . get port (  )  ;  try  {  s . connect ( new  inet socket address ( next server info . get host name (  )  server port )  )  ;   }  catch  (  io exception e )   {   system . err . println ( "" could not connect to the server :""  +  next server info . get host name (  )   +  "" at port "" +  server port )  ;   }  catch  (   exception e )   {   system . err . println ( "" could not connect to the server :""  +  next server info . get host name (  )   +  "" at port "" +  server port +  ""due to  exception "" +  e )  ;   }  try  {   string request = ""foo ""  +  new  date (  )  ;   system . out . println ( "" connected to server .   sending a sample request: ""  +  request )  ;   print stream out = new  print stream ( s . get output stream (  )  )  ;  out . println ( request )  ;   system . out . println ( "" waiting for server response .  . "" )  ;   buffered reader rd = new  buffered reader ( new  input stream reader ( s . get input stream (  )  )  )  ;   string str = rd . read line (  )  ;  if  ( str  !  =  null )   {   system . out . println ( "" received response from server: ""  +  str )  ;   system . out . println ( "" exiting the client .   demo over .  . "" )  ;   }  rd . close (  )  ;   }  catch  (  io exception e )   {  e . print stack trace (  )  ;   }   }  ",2135,6,using,5,[]
7558,C:\Users\User\Desktop\Thesis\eureka\eureka-examples\src\main\java\com\netflix\eureka\ExampleEurekaClient.java,send request to service using eureka,"public void   (  eureka client eureka client )  {   string vip address = ""sampleservice . mydomain . net"" ;   instance info next server info = null ;  try  {  next server info = eureka client . get next server from eureka ( vip address false )  ;   }  catch  (   exception e )   {   system . err . println ( "" cannot get an instance of example service to talk to from eureka"" )  ;   system . exit (  - 1 )  ;   }   system . out . println ( "" found an instance of example service to talk to from eureka: ""  +  next server info . getvip address (  )   +  "":"" +  next server info . get port (  )  )  ;   system . out . println ( ""health check url: ""  +  next server info . get health check url (  )  )  ;   system . out . println ( ""override: ""  +  next server info . get overridden status (  )  )  ;   socket s = new  socket (  )  ;  int server port = next server info . get port (  )  ;  try  {  s . connect ( new  inet socket address ( next server info . get host name (  )  server port )  )  ;   }  catch  (  io exception e )   {   system . err . println ( "" could not connect to the server :""  +  next server info . get host name (  )   +  "" at port "" +  server port )  ;   }  catch  (   exception e )   {   system . err . println ( "" could not connect to the server :""  +  next server info . get host name (  )   +  "" at port "" +  server port +  ""due to  exception "" +  e )  ;   }  try  {   string request = ""foo ""  +  new  date (  )  ;   system . out . println ( "" connected to server .   sending a sample request: ""  +  request )  ;   print stream out = new  print stream ( s . get output stream (  )  )  ;  out . println ( request )  ;   system . out . println ( "" waiting for server response .  . "" )  ;   buffered reader rd = new  buffered reader ( new  input stream reader ( s . get input stream (  )  )  )  ;   string str = rd . read line (  )  ;  if  ( str  !  =  null )   {   system . out . println ( "" received response from server: ""  +  str )  ;   system . out . println ( "" exiting the client .   demo over .  . "" )  ;   }  rd . close (  )  ;   }  catch  (  io exception e )   {  e . print stack trace (  )  ;   }   }  ",2135,6,eureka,6,"[17, 31, 178, 215, 368, 495]"
7559,C:\Users\User\Desktop\Thesis\eureka\eureka-examples\src\main\java\com\netflix\eureka\ExampleEurekaService.java,initialize application info manager,private static synchronized  application info manager   (  eureka instance config instance config )  {  if  ( application info manager  =  =  null )   {   instance info instance info = new  eureka config based instance info provider ( instance config )  . get (  )  ;  application info manager = new  application info manager ( instance config instance info )  ;   }  return application info manager ;   }  ,407,4,initialize,1,[]
7560,C:\Users\User\Desktop\Thesis\eureka\eureka-examples\src\main\java\com\netflix\eureka\ExampleEurekaService.java,initialize application info manager,private static synchronized  application info manager   (  eureka instance config instance config )  {  if  ( application info manager  =  =  null )   {   instance info instance info = new  eureka config based instance info provider ( instance config )  . get (  )  ;  application info manager = new  application info manager ( instance config instance info )  ;   }  return application info manager ;   }  ,407,4,application,2,"[29, 110, 269, 301, 375]"
7561,C:\Users\User\Desktop\Thesis\eureka\eureka-examples\src\main\java\com\netflix\eureka\ExampleEurekaService.java,initialize application info manager,private static synchronized  application info manager   (  eureka instance config instance config )  {  if  ( application info manager  =  =  null )   {   instance info instance info = new  eureka config based instance info provider ( instance config )  . get (  )  ;  application info manager = new  application info manager ( instance config instance info )  ;   }  return application info manager ;   }  ,407,4,info,3,"[41, 122, 164, 178, 219, 281, 313, 353, 387]"
7562,C:\Users\User\Desktop\Thesis\eureka\eureka-examples\src\main\java\com\netflix\eureka\ExampleEurekaService.java,initialize application info manager,private static synchronized  application info manager   (  eureka instance config instance config )  {  if  ( application info manager  =  =  null )   {   instance info instance info = new  eureka config based instance info provider ( instance config )  . get (  )  ;  application info manager = new  application info manager ( instance config instance info )  ;   }  return application info manager ;   }  ,407,4,manager,4,"[46, 127, 286, 318, 392]"
7563,C:\Users\User\Desktop\Thesis\eureka\eureka-examples\src\main\java\com\netflix\eureka\ExampleEurekaService.java,initialize eureka client,private static synchronized  eureka client   (  application info manager application info manager  eureka client config client config )  {  if  ( eureka client  =  =  null )   {  eureka client = new  discovery client ( application info manager client config )  ;   }  return eureka client ;   }  ,296,3,initialize,1,[]
7564,C:\Users\User\Desktop\Thesis\eureka\eureka-examples\src\main\java\com\netflix\eureka\ExampleEurekaService.java,initialize eureka client,private static synchronized  eureka client   (  application info manager application info manager  eureka client config client config )  {  if  ( eureka client  =  =  null )   {  eureka client = new  discovery client ( application info manager client config )  ;   }  return eureka client ;   }  ,296,3,eureka,2,"[29, 99, 146, 179, 275]"
7565,C:\Users\User\Desktop\Thesis\eureka\eureka-examples\src\main\java\com\netflix\eureka\ExampleEurekaService.java,initialize eureka client,private static synchronized  eureka client   (  application info manager application info manager  eureka client config client config )  {  if  ( eureka client  =  =  null )   {  eureka client = new  discovery client ( application info manager client config )  ;   }  return eureka client ;   }  ,296,3,client,3,"[36, 106, 120, 153, 186, 210, 244, 282]"
7566,C:\Users\User\Desktop\Thesis\eureka\eureka-examples\src\main\java\com\netflix\eureka\ExampleEurekaService.java,main,public static void   (  string[] args )  {   dynamic property factory config instance = com . netflix . config .  dynamic property factory . get instance (  )  ;   application info manager application info manager = initialize application info manager ( new  my data center instance config (  )  )  ;   eureka client eureka client = initialize eureka client ( application info manager new  default eureka client config (  )  )  ;   example service base example service base = new  example service base ( application info manager eureka client config instance )  ;  try  {  example service base . start (  )  ;   }  finally  {  example service base . stop (  )  ;   }   }  ,672,1,main,1,[]
7567,C:\Users\User\Desktop\Thesis\eureka\eureka-server-governator\src\main\java\com\netflix\eureka\EurekaContextListener.java,context destroyed,public void   (  servlet context event servlet context event )  {   eureka monitors . shutdown (  )  ;   servlet context sc = servlet context event . get servlet context (  )  ;  sc . remove attribute (  eureka server context . class . get name (  )  )  ;  super . context destroyed ( servlet context event )  ;   }  ,317,2,context,1,"[25, 47, 113, 134, 162, 218, 265, 293]"
7568,C:\Users\User\Desktop\Thesis\eureka\eureka-server-governator\src\main\java\com\netflix\eureka\EurekaContextListener.java,context destroyed,public void   (  servlet context event servlet context event )  {   eureka monitors . shutdown (  )  ;   servlet context sc = servlet context event . get servlet context (  )  ;  sc . remove attribute (  eureka server context . class . get name (  )  )  ;  super . context destroyed ( servlet context event )  ;   }  ,317,2,destroyed,2,[273]
7569,C:\Users\User\Desktop\Thesis\eureka\eureka-server-governator\src\main\java\com\netflix\eureka\EurekaContextListener.java,context initialized,@ override public void   (  servlet context event servlet context event )  {  super . context initialized ( servlet context event )  ;   servlet context sc = servlet context event . get servlet context (  )  ;  sc . set attribute (  eureka server context ,255,2,context,1,"[36, 58, 86, 116, 145, 166, 194, 247]"
7570,C:\Users\User\Desktop\Thesis\eureka\eureka-server-governator\src\main\java\com\netflix\eureka\EurekaContextListener.java,context initialized,@ override public void   (  servlet context event servlet context event )  {  super . context initialized ( servlet context event )  ;   servlet context sc = servlet context event . get servlet context (  )  ;  sc . set attribute (  eureka server context ,255,2,initialized,2,[94]
7571,C:\Users\User\Desktop\Thesis\eureka\eureka-server-governator\src\main\java\com\netflix\eureka\EurekaContextListener.java,create injector,@ override protected  lifecycle injector   (  )  {   jsonx stream . get instance (  )  . register converter ( new v1 aware instance info converter (  )  x stream . priority   very   high )  ;   xmlx stream . get instance (  )  . register converter ( new v,255,2,create,1,[]
7572,C:\Users\User\Desktop\Thesis\eureka\eureka-server-governator\src\main\java\com\netflix\eureka\EurekaContextListener.java,create injector,@ override protected  lifecycle injector   (  )  {   jsonx stream . get instance (  )  . register converter ( new v1 aware instance info converter (  )  x stream . priority   very   high )  ;   xmlx stream . get instance (  )  . register converter ( new v,255,2,injector,2,[32]
7573,C:\Users\User\Desktop\Thesis\eureka\eureka-examples\src\main\java\com\netflix\eureka\ExampleServiceBase.java, example service base,@ inject public   (  application info manager application info manager  eureka client eureka client  dynamic property factory config instance )  {  this . application info manager = application info manager ;  this . eureka client = eureka client ;  this ,255,3,example,1,[]
7574,C:\Users\User\Desktop\Thesis\eureka\eureka-examples\src\main\java\com\netflix\eureka\ExampleServiceBase.java, example service base,@ inject public   (  application info manager application info manager  eureka client eureka client  dynamic property factory config instance )  {  this . application info manager = application info manager ;  this . eureka client = eureka client ;  this ,255,3,service,2,[]
7575,C:\Users\User\Desktop\Thesis\eureka\eureka-examples\src\main\java\com\netflix\eureka\ExampleServiceBase.java, example service base,@ inject public   (  application info manager application info manager  eureka client eureka client  dynamic property factory config instance )  {  this . application info manager = application info manager ;  this . eureka client = eureka client ;  this ,255,3,base,3,[]
7576,C:\Users\User\Desktop\Thesis\eureka\eureka-examples\src\main\java\com\netflix\eureka\ExampleServiceBase.java,process request,"private void   ( final  socket s )  {  try  {   buffered reader rd = new  buffered reader ( new  input stream reader ( s . get input stream (  )  )  )  ;   string line = rd . read line (  )  ;  if  ( line  !  =  null )   {   system . out . println ( "" received a request from the example client: ""  +  line )  ;   }   string response = ""bar ""  +  new  date (  )  ;   system . out . println ( "" sending the response to the client: ""  +  response )  ;   print stream out = new  print stream ( s . get output stream (  )  )  ;  out . println ( response )  ;   }  catch  (   throwable e )   {   system . err . println ( "" error processing requests"" )  ;   }  finally  {  if  ( s  !  =  null )   {  try  {  s . close (  )  ;   }  catch  (  io exception e )   {  e . print stack trace (  )  ;   }   }   }   }  ",804,2,process,1,[624]
7577,C:\Users\User\Desktop\Thesis\eureka\eureka-examples\src\main\java\com\netflix\eureka\ExampleServiceBase.java,process request,"private void   ( final  socket s )  {  try  {   buffered reader rd = new  buffered reader ( new  input stream reader ( s . get input stream (  )  )  )  ;   string line = rd . read line (  )  ;  if  ( line  !  =  null )   {   system . out . println ( "" received a request from the example client: ""  +  line )  ;   }   string response = ""bar ""  +  new  date (  )  ;   system . out . println ( "" sending the response to the client: ""  +  response )  ;   print stream out = new  print stream ( s . get output stream (  )  )  ;  out . println ( response )  ;   }  catch  (   throwable e )   {   system . err . println ( "" error processing requests"" )  ;   }  finally  {  if  ( s  !  =  null )   {  try  {  s . close (  )  ;   }  catch  (  io exception e )   {  e . print stack trace (  )  ;   }   }   }   }  ",804,2,request,2,"[263, 635]"
7578,C:\Users\User\Desktop\Thesis\eureka\eureka-examples\src\main\java\com\netflix\eureka\ExampleServiceBase.java,start,"@ post construct public void   (  )  {   system . out . println ( "" registering service to eureka with starting status"" )  ;  application info manager . set instance status (  instance info .  instance status . starting )  ;   system . out . println ( "" s",255,1,start,1,"[103, 211]"
7579,C:\Users\User\Desktop\Thesis\eureka\eureka-examples\src\main\java\com\netflix\eureka\ExampleServiceBase.java,stop,"@ pre destroy public void   (  )  {  if  ( eureka client  !  =  null )   {   system . out . println ( "" shutting down server .   demo over . "" )  ;  eureka client . shutdown (  )  ;   }   }  ",191,1,stop,1,[]
7580,C:\Users\User\Desktop\Thesis\eureka\eureka-examples\src\main\java\com\netflix\eureka\ExampleServiceBase.java,wait for registration with eureka,"private void   (  eureka client eureka client )  {   string vip address = config instance . get string property ( ""eureka . vip address"" ""sampleservice . mydomain . net"" )  . get (  )  ;   instance info next server info = null ;  while  ( next server info  =  =  null )   {  try  {  next server info = eureka client . get next server from eureka ( vip address false )  ;   }  catch  (   throwable e )   {   system . out . println ( "" waiting  .  .  .  verifying service registration with eureka  .  .  . "" )  ;  try  {   thread . sleep ( 10000 )  ;   }  catch  (   interrupted exception e1 )   {  e1 . print stack trace (  )  ;   }   }   }   }  ",645,5,wait,1,[434]
7581,C:\Users\User\Desktop\Thesis\eureka\eureka-examples\src\main\java\com\netflix\eureka\ExampleServiceBase.java,wait for registration with eureka,"private void   (  eureka client eureka client )  {   string vip address = config instance . get string property ( ""eureka . vip address"" ""sampleservice . mydomain . net"" )  . get (  )  ;   instance info next server info = null ;  while  ( next server info  =  =  null )   {  try  {  next server info = eureka client . get next server from eureka ( vip address false )  ;   }  catch  (   throwable e )   {   system . out . println ( "" waiting  .  .  .  verifying service registration with eureka  .  .  . "" )  ;  try  {   thread . sleep ( 10000 )  ;   }  catch  (   interrupted exception e1 )   {  e1 . print stack trace (  )  ;   }   }   }   }  ",645,5,for,2,[]
7582,C:\Users\User\Desktop\Thesis\eureka\eureka-examples\src\main\java\com\netflix\eureka\ExampleServiceBase.java,wait for registration with eureka,"private void   (  eureka client eureka client )  {   string vip address = config instance . get string property ( ""eureka . vip address"" ""sampleservice . mydomain . net"" )  . get (  )  ;   instance info next server info = null ;  while  ( next server info  =  =  null )   {  try  {  next server info = eureka client . get next server from eureka ( vip address false )  ;   }  catch  (   throwable e )   {   system . out . println ( "" waiting  .  .  .  verifying service registration with eureka  .  .  . "" )  ;  try  {   thread . sleep ( 10000 )  ;   }  catch  (   interrupted exception e1 )   {  e1 . print stack trace (  )  ;   }   }   }   }  ",645,5,registration,3,[470]
7583,C:\Users\User\Desktop\Thesis\eureka\eureka-examples\src\main\java\com\netflix\eureka\ExampleServiceBase.java,wait for registration with eureka,"private void   (  eureka client eureka client )  {   string vip address = config instance . get string property ( ""eureka . vip address"" ""sampleservice . mydomain . net"" )  . get (  )  ;   instance info next server info = null ;  while  ( next server info  =  =  null )   {  try  {  next server info = eureka client . get next server from eureka ( vip address false )  ;   }  catch  (   throwable e )   {   system . out . println ( "" waiting  .  .  .  verifying service registration with eureka  .  .  . "" )  ;  try  {   thread . sleep ( 10000 )  ;   }  catch  (   interrupted exception e1 )   {  e1 . print stack trace (  )  ;   }   }   }   }  ",645,5,with,4,[483]
7584,C:\Users\User\Desktop\Thesis\eureka\eureka-examples\src\main\java\com\netflix\eureka\ExampleServiceBase.java,wait for registration with eureka,"private void   (  eureka client eureka client )  {   string vip address = config instance . get string property ( ""eureka . vip address"" ""sampleservice . mydomain . net"" )  . get (  )  ;   instance info next server info = null ;  while  ( next server info  =  =  null )   {  try  {  next server info = eureka client . get next server from eureka ( vip address false )  ;   }  catch  (   throwable e )   {   system . out . println ( "" waiting  .  .  .  verifying service registration with eureka  .  .  . "" )  ;  try  {   thread . sleep ( 10000 )  ;   }  catch  (   interrupted exception e1 )   {  e1 . print stack trace (  )  ;   }   }   }   }  ",645,5,eureka,5,"[18, 32, 115, 302, 339, 488]"
7585,C:\Users\User\Desktop\Thesis\eureka\eureka-server-governator\src\main\java\com\netflix\eureka\EurekaInjectorCreator.java,configure servlets,"@ override protected void   (  )  {  filter ( "" / *"" )  . through (  status filter . class )  ;  filter ( "" / *"" )  . through (  server request auth filter . class )  ;  filter ( "" / v2 / apps"" "" / v2 / apps / *"" )  . through (  gzip encoding enforcing fi",255,2,configure,1,[]
7586,C:\Users\User\Desktop\Thesis\eureka\eureka-server-governator\src\main\java\com\netflix\eureka\EurekaInjectorCreator.java,configure servlets,"@ override protected void   (  )  {  filter ( "" / *"" )  . through (  status filter . class )  ;  filter ( "" / *"" )  . through (  server request auth filter . class )  ;  filter ( "" / v2 / apps"" "" / v2 / apps / *"" )  . through (  gzip encoding enforcing fi",255,2,servlets,2,[]
7587,C:\Users\User\Desktop\Thesis\eureka\eureka-server-governator\src\main\java\com\netflix\eureka\EurekaInjectorCreator.java,create injector,"public static  lifecycle injector   (  )  {  try  {  return  injector builder . from modules ( new  eureka module (  )  new  ec2 eureka server module (  )  new  provision debug module (  )  new  jersey servlet module (  )  {  @ override protected void configure servlets (  )  {  filter ( "" / *"" )  . through (  status filter . class )  ;  filter ( "" / *"" )  . through (  server request auth filter . class )  ;  filter ( "" / v2 / apps"" "" / v2 / apps / *"" )  . through (  gzip encoding enforcing filter . class )  ;   map <  string  string >  params = new  hash map <  string  string >  (  )  ;  params . put (  packages resource config . property   packages ""com . sun . jersey"" )  ;  params . put (  packages resource config . property   packages ""com . netflix"" )  ;  params . put ( ""com . sun . jersey . config . property .  web page content regex"" "" /  ( flex|images|js|css|jsp )  /  . *"" )  ;  params . put ( ""com . sun . jersey . spi . container .  container request filters"" ""com . sun . jersey . api . container . filter . gzip content encoding filter"" )  ;  params . put ( ""com . sun . jersey . spi . container .  container response filters"" ""com . sun . jersey . api . container . filter . gzip content encoding filter"" )  ;  filter ( "" / *"" )  . through (  guice container . class params )  ;  bind (  guice container . class )  . as eager singleton (  )  ;   }   }   )  . create injector (  )  ;   }  catch  (   exception e )   {  logger . error ( "" failed to create the injector"" e )  ;  e . print stack trace (  )  ;  throw new  runtime exception ( e )  ;   }   }  ",1580,2,create,1,"[1385, 1473]"
7588,C:\Users\User\Desktop\Thesis\eureka\eureka-server-governator\src\main\java\com\netflix\eureka\EurekaInjectorCreator.java,create injector,"public static  lifecycle injector   (  )  {  try  {  return  injector builder . from modules ( new  eureka module (  )  new  ec2 eureka server module (  )  new  provision debug module (  )  new  jersey servlet module (  )  {  @ override protected void configure servlets (  )  {  filter ( "" / *"" )  . through (  status filter . class )  ;  filter ( "" / *"" )  . through (  server request auth filter . class )  ;  filter ( "" / v2 / apps"" "" / v2 / apps / *"" )  . through (  gzip encoding enforcing filter . class )  ;   map <  string  string >  params = new  hash map <  string  string >  (  )  ;  params . put (  packages resource config . property   packages ""com . sun . jersey"" )  ;  params . put (  packages resource config . property   packages ""com . netflix"" )  ;  params . put ( ""com . sun . jersey . config . property .  web page content regex"" "" /  ( flex|images|js|css|jsp )  /  . *"" )  ;  params . put ( ""com . sun . jersey . spi . container .  container request filters"" ""com . sun . jersey . api . container . filter . gzip content encoding filter"" )  ;  params . put ( ""com . sun . jersey . spi . container .  container response filters"" ""com . sun . jersey . api . container . filter . gzip content encoding filter"" )  ;  filter ( "" / *"" )  . through (  guice container . class params )  ;  bind (  guice container . class )  . as eager singleton (  )  ;   }   }   )  . create injector (  )  ;   }  catch  (   exception e )   {  logger . error ( "" failed to create the injector"" e )  ;  e . print stack trace (  )  ;  throw new  runtime exception ( e )  ;   }   }  ",1580,2,injector,2,"[25, 61, 1392, 1484]"
7589,C:\Users\User\Desktop\Thesis\eureka\eureka-server\src\test\java\com\netflix\eureka\resources\EurekaClientServerRestIntegrationTest.java,accept,@ override public boolean   (  file dir  string name )  {  return war   pattern . matcher ( name )  . matches (  )  ;   }  ,123,1,accept,1,[]
7590,C:\Users\User\Desktop\Thesis\eureka\eureka-server\src\test\java\com\netflix\eureka\resources\EurekaClientServerRestIntegrationTest.java,create eureka server config,private static void   (  )  {  eureka server config = mock (  eureka server config . class )  ;  when ( eureka server config . get peer eureka nodes update interval ms (  )  )  . then return ( 1000 )  ;  when ( eureka server config . should sync when timestamp differs (  )  )  . then return ( true )  ;  when ( eureka server config . get max time for replication (  )  )  . then return ( 1000 )  ;  when ( eureka server config . get max elements in peer replication pool (  )  )  . then return ( 10 )  ;  when ( eureka server config . get min threads for peer replication (  )  )  . then return ( 1 )  ;  when ( eureka server config . get max threads for peer replication (  )  )  . then return ( 1 )  ;  when ( eureka server config . should batch replication (  )  )  . then return ( true )  ;  when ( eureka server config . get peer node total connections (  )  )  . then return ( 1 )  ;  when ( eureka server config . get peer node total connections per host (  )  )  . then return ( 1 )  ;  when ( eureka server config . get peer node connection idle timeout seconds (  )  )  . then return ( 1000 )  ;   }  ,1112,4,create,1,[]
7591,C:\Users\User\Desktop\Thesis\eureka\eureka-server\src\test\java\com\netflix\eureka\resources\EurekaClientServerRestIntegrationTest.java,create eureka server config,private static void   (  )  {  eureka server config = mock (  eureka server config . class )  ;  when ( eureka server config . get peer eureka nodes update interval ms (  )  )  . then return ( 1000 )  ;  when ( eureka server config . should sync when timestamp differs (  )  )  . then return ( true )  ;  when ( eureka server config . get max time for replication (  )  )  . then return ( 1000 )  ;  when ( eureka server config . get max elements in peer replication pool (  )  )  . then return ( 10 )  ;  when ( eureka server config . get min threads for peer replication (  )  )  . then return ( 1 )  ;  when ( eureka server config . get max threads for peer replication (  )  )  . then return ( 1 )  ;  when ( eureka server config . should batch replication (  )  )  . then return ( true )  ;  when ( eureka server config . get peer node total connections (  )  )  . then return ( 1 )  ;  when ( eureka server config . get peer node total connections per host (  )  )  . then return ( 1 )  ;  when ( eureka server config . get peer node connection idle timeout seconds (  )  )  . then return ( 1000 )  ;   }  ,1112,4,eureka,2,"[31, 62, 104, 136, 211, 312, 407, 513, 613, 713, 804, 899, 1003]"
7592,C:\Users\User\Desktop\Thesis\eureka\eureka-server\src\test\java\com\netflix\eureka\resources\EurekaClientServerRestIntegrationTest.java,create eureka server config,private static void   (  )  {  eureka server config = mock (  eureka server config . class )  ;  when ( eureka server config . get peer eureka nodes update interval ms (  )  )  . then return ( 1000 )  ;  when ( eureka server config . should sync when timestamp differs (  )  )  . then return ( true )  ;  when ( eureka server config . get max time for replication (  )  )  . then return ( 1000 )  ;  when ( eureka server config . get max elements in peer replication pool (  )  )  . then return ( 10 )  ;  when ( eureka server config . get min threads for peer replication (  )  )  . then return ( 1 )  ;  when ( eureka server config . get max threads for peer replication (  )  )  . then return ( 1 )  ;  when ( eureka server config . should batch replication (  )  )  . then return ( true )  ;  when ( eureka server config . get peer node total connections (  )  )  . then return ( 1 )  ;  when ( eureka server config . get peer node total connections per host (  )  )  . then return ( 1 )  ;  when ( eureka server config . get peer node connection idle timeout seconds (  )  )  . then return ( 1000 )  ;   }  ,1112,4,server,3,"[38, 69, 111, 218, 319, 414, 520, 620, 720, 811, 906, 1010]"
7593,C:\Users\User\Desktop\Thesis\eureka\eureka-server\src\test\java\com\netflix\eureka\resources\EurekaClientServerRestIntegrationTest.java,create eureka server config,private static void   (  )  {  eureka server config = mock (  eureka server config . class )  ;  when ( eureka server config . get peer eureka nodes update interval ms (  )  )  . then return ( 1000 )  ;  when ( eureka server config . should sync when timestamp differs (  )  )  . then return ( true )  ;  when ( eureka server config . get max time for replication (  )  )  . then return ( 1000 )  ;  when ( eureka server config . get max elements in peer replication pool (  )  )  . then return ( 10 )  ;  when ( eureka server config . get min threads for peer replication (  )  )  . then return ( 1 )  ;  when ( eureka server config . get max threads for peer replication (  )  )  . then return ( 1 )  ;  when ( eureka server config . should batch replication (  )  )  . then return ( true )  ;  when ( eureka server config . get peer node total connections (  )  )  . then return ( 1 )  ;  when ( eureka server config . get peer node total connections per host (  )  )  . then return ( 1 )  ;  when ( eureka server config . get peer node connection idle timeout seconds (  )  )  . then return ( 1000 )  ;   }  ,1112,4,config,4,"[45, 76, 118, 225, 326, 421, 527, 627, 727, 818, 913, 1017]"
7594,C:\Users\User\Desktop\Thesis\eureka\eureka-server\src\test\java\com\netflix\eureka\resources\EurekaClientServerRestIntegrationTest.java,expect instance info in registry,private static  instance info   (  instance info instance info )  {   eureka http response <  instance info >  query response = jersey eureka client . get instance ( instance info . get app name (  )  instance info . get id (  )  )  ;  assert that ( query response . get status code (  )  is ( equal to ( 200 )  )  )  ;  assert that ( query response . get entity (  )  is ( not null value (  )  )  )  ;  assert that ( query response . get entity (  )  . get id (  )  is ( equal to ( instance info . get id (  )  )  )  )  ;  return query response . get entity (  )  ;   }  ,572,5,expect,1,[]
7595,C:\Users\User\Desktop\Thesis\eureka\eureka-server\src\test\java\com\netflix\eureka\resources\EurekaClientServerRestIntegrationTest.java,expect instance info in registry,private static  instance info   (  instance info instance info )  {   eureka http response <  instance info >  query response = jersey eureka client . get instance ( instance info . get app name (  )  instance info . get id (  )  )  ;  assert that ( query response . get status code (  )  is ( equal to ( 200 )  )  )  ;  assert that ( query response . get entity (  )  is ( not null value (  )  )  )  ;  assert that ( query response . get entity (  )  . get id (  )  is ( equal to ( instance info . get id (  )  )  )  )  ;  return query response . get entity (  )  ;   }  ,572,5,instance,2,"[16, 35, 49, 94, 155, 166, 201, 483]"
7596,C:\Users\User\Desktop\Thesis\eureka\eureka-server\src\test\java\com\netflix\eureka\resources\EurekaClientServerRestIntegrationTest.java,expect instance info in registry,private static  instance info   (  instance info instance info )  {   eureka http response <  instance info >  query response = jersey eureka client . get instance ( instance info . get app name (  )  instance info . get id (  )  )  ;  assert that ( query response . get status code (  )  is ( equal to ( 200 )  )  )  ;  assert that ( query response . get entity (  )  is ( not null value (  )  )  )  ;  assert that ( query response . get entity (  )  . get id (  )  is ( equal to ( instance info . get id (  )  )  )  )  ;  return query response . get entity (  )  ;   }  ,572,5,info,3,"[25, 44, 58, 103, 175, 210, 492]"
7597,C:\Users\User\Desktop\Thesis\eureka\eureka-server\src\test\java\com\netflix\eureka\resources\EurekaClientServerRestIntegrationTest.java,expect instance info in registry,private static  instance info   (  instance info instance info )  {   eureka http response <  instance info >  query response = jersey eureka client . get instance ( instance info . get app name (  )  instance info . get id (  )  )  ;  assert that ( query response . get status code (  )  is ( equal to ( 200 )  )  )  ;  assert that ( query response . get entity (  )  is ( not null value (  )  )  )  ;  assert that ( query response . get entity (  )  . get id (  )  is ( equal to ( instance info . get id (  )  )  )  )  ;  return query response . get entity (  )  ;   }  ,572,5,in,4,"[16, 25, 35, 44, 49, 58, 94, 103, 155, 166, 175, 201, 210, 483, 492]"
7598,C:\Users\User\Desktop\Thesis\eureka\eureka-server\src\test\java\com\netflix\eureka\resources\EurekaClientServerRestIntegrationTest.java,expect instance info in registry,private static  instance info   (  instance info instance info )  {   eureka http response <  instance info >  query response = jersey eureka client . get instance ( instance info . get app name (  )  instance info . get id (  )  )  ;  assert that ( query response . get status code (  )  is ( equal to ( 200 )  )  )  ;  assert that ( query response . get entity (  )  is ( not null value (  )  )  )  ;  assert that ( query response . get entity (  )  . get id (  )  is ( equal to ( instance info . get id (  )  )  )  )  ;  return query response . get entity (  )  ;   }  ,572,5,registry,5,[]
7599,C:\Users\User\Desktop\Thesis\eureka\eureka-server\src\test\java\com\netflix\eureka\resources\EurekaClientServerRestIntegrationTest.java,find war,"private static  file   (  )  {   file dir = null ;  for  (   string candidate : eureka1   war   dirs )   {   file candidate file = new  file ( candidate )  ;  if  ( candidate file . exists (  )  )   {  dir = candidate file ;  break ;   }   }  if  ( dir  =  =  null )   {  throw new  illegal state exception ( "" no directory found at any in any pre - configured location: ""  +   arrays . to string ( eureka1   war   dirs )  )  ;   }   file[] war files = dir . list files ( new  filename filter (  )  {  @ override public boolean accept (   file dir   string name )  {  return war   pattern . matcher ( name )  . matches (  )  ;   }   }   )  ;  if  ( war files . length  =  =  0 )   {  throw new  illegal state exception ( "" war file not found in directory ""  +  dir )  ;   }  if  ( war files . length  >  1 )   {  throw new  illegal state exception ( "" multiple war files found in directory ""  +  dir  +  "": "" +   arrays . to string ( war files )  )  ;   }  return war files[0] ;   }  ",984,2,find,1,[]
7600,C:\Users\User\Desktop\Thesis\eureka\eureka-server\src\test\java\com\netflix\eureka\resources\EurekaClientServerRestIntegrationTest.java,find war,"private static  file   (  )  {   file dir = null ;  for  (   string candidate : eureka1   war   dirs )   {   file candidate file = new  file ( candidate )  ;  if  ( candidate file . exists (  )  )   {  dir = candidate file ;  break ;   }   }  if  ( dir  =  =  null )   {  throw new  illegal state exception ( "" no directory found at any in any pre - configured location: ""  +   arrays . to string ( eureka1   war   dirs )  )  ;   }   file[] war files = dir . list files ( new  filename filter (  )  {  @ override public boolean accept (   file dir   string name )  {  return war   pattern . matcher ( name )  . matches (  )  ;   }   }   )  ;  if  ( war files . length  =  =  0 )   {  throw new  illegal state exception ( "" war file not found in directory ""  +  dir )  ;   }  if  ( war files . length  >  1 )   {  throw new  illegal state exception ( "" multiple war files found in directory ""  +  dir  +  "": "" +   arrays . to string ( war files )  )  ;   }  return war files[0] ;   }  ",984,2,war,2,"[90, 409, 441, 575, 649, 723, 781, 861, 934, 964]"
7601,C:\Users\User\Desktop\Thesis\eureka\eureka-server\src\test\java\com\netflix\eureka\resources\EurekaClientServerRestIntegrationTest.java,inject eureka configuration,"private static void   (  )  throws  unknown host exception  {   string my host name =  inet address . get local host (  )  . get host name (  )  ;   string my service url = ""http: /  / ""  +  my host name  +  "":8080 / v2 / "" ;   system . set property ( ""eureka . region"" ""default"" )  ;   system . set property ( ""eureka . name"" ""eureka"" )  ;   system . set property ( ""eureka . vip address"" ""eureka . mydomain . net"" )  ;   system . set property ( ""eureka . port"" ""8080"" )  ;   system . set property ( ""eureka . prefer same zone"" ""false"" )  ;   system . set property ( ""eureka . should use dns"" ""false"" )  ;   system . set property ( ""eureka . should fetch registry"" ""false"" )  ;   system . set property ( ""eureka . service url . default zone"" my service url )  ;   system . set property ( ""eureka . service url . default . default zone"" my service url )  ;   system . set property ( ""eureka . aws access id"" ""fake   aws   access   id"" )  ;   system . set property ( ""eureka . aws secret key"" ""fake   aws   secret   key"" )  ;   system . set property ( ""eureka . number registry sync retries"" ""0"" )  ;   }  ",1105,3,inject,1,[]
7602,C:\Users\User\Desktop\Thesis\eureka\eureka-server\src\test\java\com\netflix\eureka\resources\EurekaClientServerRestIntegrationTest.java,inject eureka configuration,"private static void   (  )  throws  unknown host exception  {   string my host name =  inet address . get local host (  )  . get host name (  )  ;   string my service url = ""http: /  / ""  +  my host name  +  "":8080 / v2 / "" ;   system . set property ( ""eureka . region"" ""default"" )  ;   system . set property ( ""eureka . name"" ""eureka"" )  ;   system . set property ( ""eureka . vip address"" ""eureka . mydomain . net"" )  ;   system . set property ( ""eureka . port"" ""8080"" )  ;   system . set property ( ""eureka . prefer same zone"" ""false"" )  ;   system . set property ( ""eureka . should use dns"" ""false"" )  ;   system . set property ( ""eureka . should fetch registry"" ""false"" )  ;   system . set property ( ""eureka . service url . default zone"" my service url )  ;   system . set property ( ""eureka . service url . default . default zone"" my service url )  ;   system . set property ( ""eureka . aws access id"" ""fake   aws   access   id"" )  ;   system . set property ( ""eureka . aws secret key"" ""fake   aws   secret   key"" )  ;   system . set property ( ""eureka . number registry sync retries"" ""0"" )  ;   }  ",1105,3,eureka,2,"[253, 312, 328, 368, 391, 448, 502, 569, 634, 706, 790, 884, 967, 1052]"
7603,C:\Users\User\Desktop\Thesis\eureka\eureka-server\src\test\java\com\netflix\eureka\resources\EurekaClientServerRestIntegrationTest.java,inject eureka configuration,"private static void   (  )  throws  unknown host exception  {   string my host name =  inet address . get local host (  )  . get host name (  )  ;   string my service url = ""http: /  / ""  +  my host name  +  "":8080 / v2 / "" ;   system . set property ( ""eureka . region"" ""default"" )  ;   system . set property ( ""eureka . name"" ""eureka"" )  ;   system . set property ( ""eureka . vip address"" ""eureka . mydomain . net"" )  ;   system . set property ( ""eureka . port"" ""8080"" )  ;   system . set property ( ""eureka . prefer same zone"" ""false"" )  ;   system . set property ( ""eureka . should use dns"" ""false"" )  ;   system . set property ( ""eureka . should fetch registry"" ""false"" )  ;   system . set property ( ""eureka . service url . default zone"" my service url )  ;   system . set property ( ""eureka . service url . default . default zone"" my service url )  ;   system . set property ( ""eureka . aws access id"" ""fake   aws   access   id"" )  ;   system . set property ( ""eureka . aws secret key"" ""fake   aws   secret   key"" )  ;   system . set property ( ""eureka . number registry sync retries"" ""0"" )  ;   }  ",1105,3,configuration,3,[]
7604,C:\Users\User\Desktop\Thesis\eureka\eureka-server\src\test\java\com\netflix\eureka\resources\EurekaClientServerRestIntegrationTest.java,set up,@ before class public static void   (  )  throws  exception  {  inject eureka configuration (  )  ;  start server (  )  ;  create eureka server config (  )  ;  http client factory =  jersey eureka http client factory . new builder (  )  . with client name,255,2,set,1,[]
7605,C:\Users\User\Desktop\Thesis\eureka\eureka-server\src\test\java\com\netflix\eureka\resources\EurekaClientServerRestIntegrationTest.java,set up,@ before class public static void   (  )  throws  exception  {  inject eureka configuration (  )  ;  start server (  )  ;  create eureka server config (  )  ;  http client factory =  jersey eureka http client factory . new builder (  )  . with client name,255,2,up,2,[]
7606,C:\Users\User\Desktop\Thesis\eureka\eureka-server\src\test\java\com\netflix\eureka\resources\EurekaClientServerRestIntegrationTest.java,start server,"private static void   (  )  throws  exception  {   file war file = find war (  )  ;  server = new  server ( 8080 )  ;   web app context webapp = new  web app context (  )  ;  webapp . set context path ( "" / "" )  ;  webapp . set war ( war file . get absolute path (  )  )  ;  server . set handler ( webapp )  ;  server . start (  )  ;  eureka service url = ""http: /  / localhost:8080 / v2"" ;   }  ",396,2,start,1,[320]
7607,C:\Users\User\Desktop\Thesis\eureka\eureka-server\src\test\java\com\netflix\eureka\resources\EurekaClientServerRestIntegrationTest.java,start server,"private static void   (  )  throws  exception  {   file war file = find war (  )  ;  server = new  server ( 8080 )  ;   web app context webapp = new  web app context (  )  ;  webapp . set context path ( "" / "" )  ;  webapp . set war ( war file . get absolute path (  )  )  ;  server . set handler ( webapp )  ;  server . start (  )  ;  eureka service url = ""http: /  / localhost:8080 / v2"" ;   }  ",396,2,server,2,"[85, 99, 275, 311]"
7608,C:\Users\User\Desktop\Thesis\eureka\eureka-server\src\test\java\com\netflix\eureka\resources\EurekaClientServerRestIntegrationTest.java,tear down,@ after class public static void   (  )  throws  exception  {  remove eureka configuration (  )  ;  if  ( jersey replication client  !  =  null )   {  jersey replication client . shutdown (  )  ;   }  if  ( server  !  =  null )   {  server . stop (  )  ; ,255,2,tear,1,[]
7609,C:\Users\User\Desktop\Thesis\eureka\eureka-server\src\test\java\com\netflix\eureka\resources\EurekaClientServerRestIntegrationTest.java,tear down,@ after class public static void   (  )  throws  exception  {  remove eureka configuration (  )  ;  if  ( jersey replication client  !  =  null )   {  jersey replication client . shutdown (  )  ;   }  if  ( server  !  =  null )   {  server . stop (  )  ; ,255,2,down,2,[183]
7610,C:\Users\User\Desktop\Thesis\eureka\eureka-server\src\test\java\com\netflix\eureka\resources\EurekaClientServerRestIntegrationTest.java,test batch,@ test public void   (  )  throws  exception  {   instance info instance info = instance info it . next (  )  ;   replication instance replication instance =  replication instance . replication instance (  )  . with action (  action .  register )  . with ,255,2,test,1,[2]
7611,C:\Users\User\Desktop\Thesis\eureka\eureka-server\src\test\java\com\netflix\eureka\resources\EurekaClientServerRestIntegrationTest.java,test batch,@ test public void   (  )  throws  exception  {   instance info instance info = instance info it . next (  )  ;   replication instance replication instance =  replication instance . replication instance (  )  . with action (  action .  register )  . with ,255,2,batch,2,[]
7612,C:\Users\User\Desktop\Thesis\eureka\eureka-server\src\test\java\com\netflix\eureka\resources\EurekaClientServerRestIntegrationTest.java,test cancel for entry that does not exist,@ test public void   (  )  throws  exception  {   instance info instance info = instance info it . next (  )  ;   eureka http response <  void >  http response = jersey eureka client . cancel ( instance info . get app name (  )  instance info . get id (  ,255,8,test,1,[2]
7613,C:\Users\User\Desktop\Thesis\eureka\eureka-server\src\test\java\com\netflix\eureka\resources\EurekaClientServerRestIntegrationTest.java,test cancel for entry that does not exist,@ test public void   (  )  throws  exception  {   instance info instance info = instance info it . next (  )  ;   eureka http response <  void >  http response = jersey eureka client . cancel ( instance info . get app name (  )  instance info . get id (  ,255,8,cancel,2,[185]
7614,C:\Users\User\Desktop\Thesis\eureka\eureka-server\src\test\java\com\netflix\eureka\resources\EurekaClientServerRestIntegrationTest.java,test cancel for entry that does not exist,@ test public void   (  )  throws  exception  {   instance info instance info = instance info it . next (  )  ;   eureka http response <  void >  http response = jersey eureka client . cancel ( instance info . get app name (  )  instance info . get id (  ,255,8,for,3,[]
7615,C:\Users\User\Desktop\Thesis\eureka\eureka-server\src\test\java\com\netflix\eureka\resources\EurekaClientServerRestIntegrationTest.java,test cancel for entry that does not exist,@ test public void   (  )  throws  exception  {   instance info instance info = instance info it . next (  )  ;   eureka http response <  void >  http response = jersey eureka client . cancel ( instance info . get app name (  )  instance info . get id (  ,255,8,entry,4,[]
7616,C:\Users\User\Desktop\Thesis\eureka\eureka-server\src\test\java\com\netflix\eureka\resources\EurekaClientServerRestIntegrationTest.java,test cancel for entry that does not exist,@ test public void   (  )  throws  exception  {   instance info instance info = instance info it . next (  )  ;   eureka http response <  void >  http response = jersey eureka client . cancel ( instance info . get app name (  )  instance info . get id (  ,255,8,that,5,[]
7617,C:\Users\User\Desktop\Thesis\eureka\eureka-server\src\test\java\com\netflix\eureka\resources\EurekaClientServerRestIntegrationTest.java,test cancel for entry that does not exist,@ test public void   (  )  throws  exception  {   instance info instance info = instance info it . next (  )  ;   eureka http response <  void >  http response = jersey eureka client . cancel ( instance info . get app name (  )  instance info . get id (  ,255,8,does,6,[]
7618,C:\Users\User\Desktop\Thesis\eureka\eureka-server\src\test\java\com\netflix\eureka\resources\EurekaClientServerRestIntegrationTest.java,test cancel for entry that does not exist,@ test public void   (  )  throws  exception  {   instance info instance info = instance info it . next (  )  ;   eureka http response <  void >  http response = jersey eureka client . cancel ( instance info . get app name (  )  instance info . get id (  ,255,8,not,7,[]
7619,C:\Users\User\Desktop\Thesis\eureka\eureka-server\src\test\java\com\netflix\eureka\resources\EurekaClientServerRestIntegrationTest.java,test cancel for entry that does not exist,@ test public void   (  )  throws  exception  {   instance info instance info = instance info it . next (  )  ;   eureka http response <  void >  http response = jersey eureka client . cancel ( instance info . get app name (  )  instance info . get id (  ,255,8,exist,8,[]
7620,C:\Users\User\Desktop\Thesis\eureka\eureka-server\src\test\java\com\netflix\eureka\resources\EurekaClientServerRestIntegrationTest.java,test cancel for entry that exists,@ test public void   (  )  throws  exception  {   instance info instance info = instance info it . next (  )  ;  jersey eureka client . register ( instance info )  ;   eureka http response <  void >  http response = jersey eureka client . cancel ( instanc,255,6,test,1,[2]
7621,C:\Users\User\Desktop\Thesis\eureka\eureka-server\src\test\java\com\netflix\eureka\resources\EurekaClientServerRestIntegrationTest.java,test cancel for entry that exists,@ test public void   (  )  throws  exception  {   instance info instance info = instance info it . next (  )  ;  jersey eureka client . register ( instance info )  ;   eureka http response <  void >  http response = jersey eureka client . cancel ( instanc,255,6,cancel,2,[239]
7622,C:\Users\User\Desktop\Thesis\eureka\eureka-server\src\test\java\com\netflix\eureka\resources\EurekaClientServerRestIntegrationTest.java,test cancel for entry that exists,@ test public void   (  )  throws  exception  {   instance info instance info = instance info it . next (  )  ;  jersey eureka client . register ( instance info )  ;   eureka http response <  void >  http response = jersey eureka client . cancel ( instanc,255,6,for,3,[]
7623,C:\Users\User\Desktop\Thesis\eureka\eureka-server\src\test\java\com\netflix\eureka\resources\EurekaClientServerRestIntegrationTest.java,test cancel for entry that exists,@ test public void   (  )  throws  exception  {   instance info instance info = instance info it . next (  )  ;  jersey eureka client . register ( instance info )  ;   eureka http response <  void >  http response = jersey eureka client . cancel ( instanc,255,6,entry,4,[]
7624,C:\Users\User\Desktop\Thesis\eureka\eureka-server\src\test\java\com\netflix\eureka\resources\EurekaClientServerRestIntegrationTest.java,test cancel for entry that exists,@ test public void   (  )  throws  exception  {   instance info instance info = instance info it . next (  )  ;  jersey eureka client . register ( instance info )  ;   eureka http response <  void >  http response = jersey eureka client . cancel ( instanc,255,6,that,5,[]
7625,C:\Users\User\Desktop\Thesis\eureka\eureka-server\src\test\java\com\netflix\eureka\resources\EurekaClientServerRestIntegrationTest.java,test cancel for entry that exists,@ test public void   (  )  throws  exception  {   instance info instance info = instance info it . next (  )  ;  jersey eureka client . register ( instance info )  ;   eureka http response <  void >  http response = jersey eureka client . cancel ( instanc,255,6,exists,6,[]
7626,C:\Users\User\Desktop\Thesis\eureka\eureka-server\src\test\java\com\netflix\eureka\resources\EurekaClientServerRestIntegrationTest.java,test heartbeat,@ test public void   (  )  throws  exception  {   instance info instance info = instance info it . next (  )  ;  jersey eureka client . register ( instance info )  ;   eureka http response <  instance info >  heart beat response = jersey replication clien,255,2,test,1,[2]
7627,C:\Users\User\Desktop\Thesis\eureka\eureka-server\src\test\java\com\netflix\eureka\resources\EurekaClientServerRestIntegrationTest.java,test heartbeat,@ test public void   (  )  throws  exception  {   instance info instance info = instance info it . next (  )  ;  jersey eureka client . register ( instance info )  ;   eureka http response <  instance info >  heart beat response = jersey replication clien,255,2,heartbeat,2,[]
7628,C:\Users\User\Desktop\Thesis\eureka\eureka-server\src\test\java\com\netflix\eureka\resources\EurekaClientServerRestIntegrationTest.java,test missed heartbeat,@ test public void   (  )  throws  exception  {   instance info instance info = instance info it . next (  )  ;   eureka http response <  instance info >  heart beat response = jersey replication client . send heart beat ( instance info . get app name (  ,255,3,test,1,[2]
7629,C:\Users\User\Desktop\Thesis\eureka\eureka-server\src\test\java\com\netflix\eureka\resources\EurekaClientServerRestIntegrationTest.java,test missed heartbeat,@ test public void   (  )  throws  exception  {   instance info instance info = instance info it . next (  )  ;   eureka http response <  instance info >  heart beat response = jersey replication client . send heart beat ( instance info . get app name (  ,255,3,missed,2,[]
7630,C:\Users\User\Desktop\Thesis\eureka\eureka-server\src\test\java\com\netflix\eureka\resources\EurekaClientServerRestIntegrationTest.java,test missed heartbeat,@ test public void   (  )  throws  exception  {   instance info instance info = instance info it . next (  )  ;   eureka http response <  instance info >  heart beat response = jersey replication client . send heart beat ( instance info . get app name (  ,255,3,heartbeat,3,[]
7631,C:\Users\User\Desktop\Thesis\eureka\eureka-server\src\test\java\com\netflix\eureka\resources\EurekaClientServerRestIntegrationTest.java,test registration,@ test public void   (  )  throws  exception  {   instance info instance info = instance info it . next (  )  ;   eureka http response <  void >  http response = jersey eureka client . register ( instance info )  ;  assert that ( http response . get statu,255,2,test,1,[2]
7632,C:\Users\User\Desktop\Thesis\eureka\eureka-server\src\test\java\com\netflix\eureka\resources\EurekaClientServerRestIntegrationTest.java,test registration,@ test public void   (  )  throws  exception  {   instance info instance info = instance info it . next (  )  ;   eureka http response <  void >  http response = jersey eureka client . register ( instance info )  ;  assert that ( http response . get statu,255,2,registration,2,[]
7633,C:\Users\User\Desktop\Thesis\eureka\eureka-server\src\test\java\com\netflix\eureka\resources\EurekaClientServerRestIntegrationTest.java,test status override update and delete,@ test public void   (  )  throws  exception  {   instance info instance info = instance info it . next (  )  ;  jersey eureka client . register ( instance info )  ;   eureka http response <  void >  override update response = jersey eureka client . statu,255,6,test,1,[2]
7634,C:\Users\User\Desktop\Thesis\eureka\eureka-server\src\test\java\com\netflix\eureka\resources\EurekaClientServerRestIntegrationTest.java,test status override update and delete,@ test public void   (  )  throws  exception  {   instance info instance info = instance info it . next (  )  ;  jersey eureka client . register ( instance info )  ;   eureka http response <  void >  override update response = jersey eureka client . statu,255,6,status,2,[]
7635,C:\Users\User\Desktop\Thesis\eureka\eureka-server\src\test\java\com\netflix\eureka\resources\EurekaClientServerRestIntegrationTest.java,test status override update and delete,@ test public void   (  )  throws  exception  {   instance info instance info = instance info it . next (  )  ;  jersey eureka client . register ( instance info )  ;   eureka http response <  void >  override update response = jersey eureka client . statu,255,6,override,3,[200]
7636,C:\Users\User\Desktop\Thesis\eureka\eureka-server\src\test\java\com\netflix\eureka\resources\EurekaClientServerRestIntegrationTest.java,test status override update and delete,@ test public void   (  )  throws  exception  {   instance info instance info = instance info it . next (  )  ;  jersey eureka client . register ( instance info )  ;   eureka http response <  void >  override update response = jersey eureka client . statu,255,6,update,4,[209]
7637,C:\Users\User\Desktop\Thesis\eureka\eureka-server\src\test\java\com\netflix\eureka\resources\EurekaClientServerRestIntegrationTest.java,test status override update and delete,@ test public void   (  )  throws  exception  {   instance info instance info = instance info it . next (  )  ;  jersey eureka client . register ( instance info )  ;   eureka http response <  void >  override update response = jersey eureka client . statu,255,6,and,5,[]
7638,C:\Users\User\Desktop\Thesis\eureka\eureka-server\src\test\java\com\netflix\eureka\resources\EurekaClientServerRestIntegrationTest.java,test status override update and delete,@ test public void   (  )  throws  exception  {   instance info instance info = instance info it . next (  )  ;  jersey eureka client . register ( instance info )  ;   eureka http response <  void >  override update response = jersey eureka client . statu,255,6,delete,6,[]
7639,C:\Users\User\Desktop\Thesis\eureka\eureka-server-governator\src\main\java\com\netflix\eureka\guice\LocalDevEurekaServerModule.java,configure,@ override protected void   (  )  {  bind (  eureka server config . class )  . to (  default eureka server config . class )  . in (  scopes . singleton )  ;  bind (  peer eureka nodes . class )  . in (  scopes . singleton )  ;  bind (  peer aware instance,255,1,configure,1,[]
7640,C:\Users\User\Desktop\Thesis\eureka\eureka-server-governator\src\main\java\com\netflix\eureka\guice\LocalDevEurekaServerModule.java,equals,@ override public boolean   (  object obj )  {  return  local dev eureka server module . class . equals ( obj . get class (  )  )  ;   }  ,138,1,equals,1,[97]
7641,C:\Users\User\Desktop\Thesis\eureka\eureka-server-governator\src\main\java\com\netflix\eureka\guice\Ec2EurekaServerModule.java,equals,@ override public boolean   (  object obj )  {  return  ec2 eureka server module . class . equals ( obj . get class (  )  )  ;   }  ,132,1,equals,1,[91]
7642,C:\Users\User\Desktop\Thesis\eureka\eureka-server-governator\src\main\java\com\netflix\eureka\guice\LocalDevEurekaServerModule.java,hash code,@ override public int   (  )  {  return  local dev eureka server module . class . hash code (  )  ;   }  ,105,2,hash,1,[82]
7643,C:\Users\User\Desktop\Thesis\eureka\eureka-server-governator\src\main\java\com\netflix\eureka\guice\LocalDevEurekaServerModule.java,hash code,@ override public int   (  )  {  return  local dev eureka server module . class . hash code (  )  ;   }  ,105,2,code,2,[87]
7644,C:\Users\User\Desktop\Thesis\eureka\eureka-server-governator\src\main\java\com\netflix\eureka\guice\Ec2EurekaServerModule.java,hash code,@ override public int   (  )  {  return  ec2 eureka server module . class . hash code (  )  ;   }  ,99,2,hash,1,[76]
7645,C:\Users\User\Desktop\Thesis\eureka\eureka-server-governator\src\main\java\com\netflix\eureka\guice\Ec2EurekaServerModule.java,hash code,@ override public int   (  )  {  return  ec2 eureka server module . class . hash code (  )  ;   }  ,99,2,code,2,[81]
7646,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,create response,"private static  < t >  eureka http response < t >    ( t entity )  {  return an eureka http response ( 200 entity )  . headers (  http headers . content   type ""application / json"" )  . build (  )  ;   }  ",205,2,create,1,[]
7647,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,create response,"private static  < t >  eureka http response < t >    ( t entity )  {  return an eureka http response ( 200 entity )  . headers (  http headers . content   type ""application / json"" )  . build (  )  ;   }  ",205,2,response,2,"[35, 92]"
7648,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,get eureka client with basic authentication,protected  eureka http client   (  string user name  string password )  {  uri serviceuri =  uri builder . from uri ( get http server (  )  . get serviceuri (  )  )  . user info ( user name  +  ':'  +  password )  . build (  )  ;  return get eureka http client ( serviceuri )  ;   }  ,284,6,get,1,"[118, 142, 238]"
7649,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,get eureka client with basic authentication,protected  eureka http client   (  string user name  string password )  {  uri serviceuri =  uri builder . from uri ( get http server (  )  . get serviceuri (  )  )  . user info ( user name  +  ':'  +  password )  . build (  )  ;  return get eureka http client ( serviceuri )  ;   }  ,284,6,eureka,2,"[11, 242]"
7650,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,get eureka client with basic authentication,protected  eureka http client   (  string user name  string password )  {  uri serviceuri =  uri builder . from uri ( get http server (  )  . get serviceuri (  )  )  . user info ( user name  +  ':'  +  password )  . build (  )  ;  return get eureka http client ( serviceuri )  ;   }  ,284,6,client,3,"[23, 254]"
7651,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,get eureka client with basic authentication,protected  eureka http client   (  string user name  string password )  {  uri serviceuri =  uri builder . from uri ( get http server (  )  . get serviceuri (  )  )  . user info ( user name  +  ':'  +  password )  . build (  )  ;  return get eureka http client ( serviceuri )  ;   }  ,284,6,with,4,[]
7652,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,get eureka client with basic authentication,protected  eureka http client   (  string user name  string password )  {  uri serviceuri =  uri builder . from uri ( get http server (  )  . get serviceuri (  )  )  . user info ( user name  +  ':'  +  password )  . build (  )  ;  return get eureka http client ( serviceuri )  ;   }  ,284,6,basic,5,[]
7653,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,get eureka client with basic authentication,protected  eureka http client   (  string user name  string password )  {  uri serviceuri =  uri builder . from uri ( get http server (  )  . get serviceuri (  )  )  . user info ( user name  +  ':'  +  password )  . build (  )  ;  return get eureka http client ( serviceuri )  ;   }  ,284,6,authentication,6,[]
7654,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,get eureka http client,protected  eureka http client   (  )  {  return get eureka http client ( get http server (  )  . get serviceuri (  )  )  ;   }  ,128,4,get,1,"[48, 73, 97]"
7655,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,get eureka http client,protected  eureka http client   (  )  {  return get eureka http client ( get http server (  )  . get serviceuri (  )  )  ;   }  ,128,4,eureka,2,"[11, 52]"
7656,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,get eureka http client,protected  eureka http client   (  )  {  return get eureka http client ( get http server (  )  . get serviceuri (  )  )  ;   }  ,128,4,http,3,"[18, 59, 77]"
7657,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,get eureka http client,protected  eureka http client   (  )  {  return get eureka http client ( get http server (  )  . get serviceuri (  )  )  ;   }  ,128,4,client,4,"[23, 64]"
7658,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,get http server,protected  simple eureka http server   (  )  {  return http server ;   }  ,74,3,get,1,[]
7659,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,get http server,protected  simple eureka http server   (  )  {  return http server ;   }  ,74,3,http,2,"[25, 55]"
7660,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,get http server,protected  simple eureka http server   (  )  {  return http server ;   }  ,74,3,server,3,"[30, 60]"
7661,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,on http request,@ override public void   (  eureka http request request )  {  observed http requests . add ( request )  ;   }  ,111,3,on,1,[]
7662,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,on http request,@ override public void   (  eureka http request request )  {  observed http requests . add ( request )  ;   }  ,111,3,http,2,"[35, 71]"
7663,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,on http request,@ override public void   (  eureka http request request )  {  observed http requests . add ( request )  ;   }  ,111,3,request,3,"[40, 48, 76, 93]"
7664,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,set up,@ before public void   (  )  throws  exception  {  http server = new  simple eureka http server ( request handler transport event listener )  ;   }  ,149,2,set,1,[]
7665,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,set up,@ before public void   (  )  throws  exception  {  http server = new  simple eureka http server ( request handler transport event listener )  ;   }  ,149,2,up,2,[]
7666,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,tear down,@ after public void   (  )  throws  exception  {  http server . shutdown (  )  ;   }  ,86,2,tear,1,[]
7667,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,tear down,@ after public void   (  )  throws  exception  {  http server . shutdown (  )  ;   }  ,86,2,down,2,[68]
7668,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,test basic authentication,@ test public void   (  )  throws  exception  {   instance info instance =  instance info generator . take one (  )  ;  when ( request handler . register ( instance )  )  . then return (  eureka http response . status ( 204 )  )  ;   eureka http response ,255,3,test,1,[2]
7669,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,test basic authentication,@ test public void   (  )  throws  exception  {   instance info instance =  instance info generator . take one (  )  ;  when ( request handler . register ( instance )  )  . then return (  eureka http response . status ( 204 )  )  ;   eureka http response ,255,3,basic,2,[]
7670,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,test basic authentication,@ test public void   (  )  throws  exception  {   instance info instance =  instance info generator . take one (  )  ;  when ( request handler . register ( instance )  )  . then return (  eureka http response . status ( 204 )  )  ;   eureka http response ,255,3,authentication,3,[]
7671,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,test cancel request,@ test public void   (  )  throws  exception  {   instance info instance =  instance info generator . take one (  )  ;  when ( request handler . cancel ( instance . get app name (  )  instance . get id (  )  )  )  . then return (  eureka http response . s,255,3,test,1,[2]
7672,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,test cancel request,@ test public void   (  )  throws  exception  {   instance info instance =  instance info generator . take one (  )  ;  when ( request handler . cancel ( instance . get app name (  )  instance . get id (  )  )  )  . then return (  eureka http response . s,255,3,cancel,2,[145]
7673,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,test cancel request,@ test public void   (  )  throws  exception  {   instance info instance =  instance info generator . take one (  )  ;  when ( request handler . cancel ( instance . get app name (  )  instance . get id (  )  )  )  . then return (  eureka http response . s,255,3,request,3,[127]
7674,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,test get application instance request,@ test public void   (  )  throws  exception  {   instance info instance =  instance info generator . take one (  )  ;  when ( request handler . get instance ( instance . get app name (  )  instance . get id (  )  )  )  . then return ( create response ( i,255,5,test,1,[2]
7675,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,test get application instance request,@ test public void   (  )  throws  exception  {   instance info instance =  instance info generator . take one (  )  ;  when ( request handler . get instance ( instance . get app name (  )  instance . get id (  )  )  )  . then return ( create response ( i,255,5,get,2,"[145, 171, 201]"
7676,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,test get application instance request,@ test public void   (  )  throws  exception  {   instance info instance =  instance info generator . take one (  )  ;  when ( request handler . get instance ( instance . get app name (  )  instance . get id (  )  )  )  . then return ( create response ( i,255,5,application,3,[]
7677,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,test get application instance request,@ test public void   (  )  throws  exception  {   instance info instance =  instance info generator . take one (  )  ;  when ( request handler . get instance ( instance . get app name (  )  instance . get id (  )  )  )  . then return ( create response ( i,255,5,instance,4,"[50, 64, 76, 149, 160, 190]"
7678,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,test get application instance request,@ test public void   (  )  throws  exception  {   instance info instance =  instance info generator . take one (  )  ;  when ( request handler . get instance ( instance . get app name (  )  instance . get id (  )  )  )  . then return ( create response ( i,255,5,request,5,[127]
7679,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,test get applications request,@ test public void   (  )  throws  exception  {   applications apps =  instance info generator . new builder ( 2 1 )  . build (  )  . to applications (  )  ;  when ( request handler . get applications (  )  )  . then return ( create response ( apps )  )  ,255,4,test,1,[2]
7680,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,test get applications request,@ test public void   (  )  throws  exception  {   applications apps =  instance info generator . new builder ( 2 1 )  . build (  )  . to applications (  )  ;  when ( request handler . get applications (  )  )  . then return ( create response ( apps )  )  ,255,4,get,2,[184]
7681,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,test get applications request,@ test public void   (  )  throws  exception  {   applications apps =  instance info generator . new builder ( 2 1 )  . build (  )  . to applications (  )  ;  when ( request handler . get applications (  )  )  . then return ( create response ( apps )  )  ,255,4,applications,3,"[50, 137, 188]"
7682,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,test get applications request,@ test public void   (  )  throws  exception  {   applications apps =  instance info generator . new builder ( 2 1 )  . build (  )  . to applications (  )  ;  when ( request handler . get applications (  )  )  . then return ( create response ( apps )  )  ,255,4,request,4,[166]
7683,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,test get applications with remote region request,@ test public void   (  )  throws  exception  {   applications apps =  instance info generator . new builder ( 2 1 )  . build (  )  . to applications (  )  ;  when ( request handler . get applications ( remote   region )  )  . then return ( create respons,255,7,test,1,[2]
7684,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,test get applications with remote region request,@ test public void   (  )  throws  exception  {   applications apps =  instance info generator . new builder ( 2 1 )  . build (  )  . to applications (  )  ;  when ( request handler . get applications ( remote   region )  )  . then return ( create respons,255,7,get,2,[184]
7685,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,test get applications with remote region request,@ test public void   (  )  throws  exception  {   applications apps =  instance info generator . new builder ( 2 1 )  . build (  )  . to applications (  )  ;  when ( request handler . get applications ( remote   region )  )  . then return ( create respons,255,7,applications,3,"[50, 137, 188]"
7686,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,test get applications with remote region request,@ test public void   (  )  throws  exception  {   applications apps =  instance info generator . new builder ( 2 1 )  . build (  )  . to applications (  )  ;  when ( request handler . get applications ( remote   region )  )  . then return ( create respons,255,7,with,4,[]
7687,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,test get applications with remote region request,@ test public void   (  )  throws  exception  {   applications apps =  instance info generator . new builder ( 2 1 )  . build (  )  . to applications (  )  ;  when ( request handler . get applications ( remote   region )  )  . then return ( create respons,255,7,remote,5,[203]
7688,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,test get applications with remote region request,@ test public void   (  )  throws  exception  {   applications apps =  instance info generator . new builder ( 2 1 )  . build (  )  . to applications (  )  ;  when ( request handler . get applications ( remote   region )  )  . then return ( create respons,255,7,region,6,[212]
7689,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,test get applications with remote region request,@ test public void   (  )  throws  exception  {   applications apps =  instance info generator . new builder ( 2 1 )  . build (  )  . to applications (  )  ;  when ( request handler . get applications ( remote   region )  )  . then return ( create respons,255,7,request,7,[166]
7690,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,test get delta request,@ test public void   (  )  throws  exception  {   applications delta =  instance info generator . new builder ( 2 1 )  . build (  )  . take delta ( 2 )  ;  when ( request handler . get delta (  )  )  . then return ( create response ( delta )  )  ;   eurek,255,4,test,1,[2]
7691,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,test get delta request,@ test public void   (  )  throws  exception  {   applications delta =  instance info generator . new builder ( 2 1 )  . build (  )  . take delta ( 2 )  ;  when ( request handler . get delta (  )  )  . then return ( create response ( delta )  )  ;   eurek,255,4,get,2,[181]
7692,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,test get delta request,@ test public void   (  )  throws  exception  {   applications delta =  instance info generator . new builder ( 2 1 )  . build (  )  . take delta ( 2 )  ;  when ( request handler . get delta (  )  )  . then return ( create response ( delta )  )  ;   eurek,255,4,delta,3,"[63, 140, 185, 234]"
7693,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,test get delta request,@ test public void   (  )  throws  exception  {   applications delta =  instance info generator . new builder ( 2 1 )  . build (  )  . take delta ( 2 )  ;  when ( request handler . get delta (  )  )  . then return ( create response ( delta )  )  ;   eurek,255,4,request,4,[163]
7694,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,test get delta with remote region request,@ test public void   (  )  throws  exception  {   applications delta =  instance info generator . new builder ( 2 1 )  . build (  )  . take delta ( 2 )  ;  when ( request handler . get delta ( remote   region )  )  . then return ( create response ( delta ,255,7,test,1,[2]
7695,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,test get delta with remote region request,@ test public void   (  )  throws  exception  {   applications delta =  instance info generator . new builder ( 2 1 )  . build (  )  . take delta ( 2 )  ;  when ( request handler . get delta ( remote   region )  )  . then return ( create response ( delta ,255,7,get,2,[181]
7696,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,test get delta with remote region request,@ test public void   (  )  throws  exception  {   applications delta =  instance info generator . new builder ( 2 1 )  . build (  )  . take delta ( 2 )  ;  when ( request handler . get delta ( remote   region )  )  . then return ( create response ( delta ,255,7,delta,3,"[63, 140, 185, 249]"
7697,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,test get delta with remote region request,@ test public void   (  )  throws  exception  {   applications delta =  instance info generator . new builder ( 2 1 )  . build (  )  . take delta ( 2 )  ;  when ( request handler . get delta ( remote   region )  )  . then return ( create response ( delta ,255,7,with,4,[]
7698,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,test get delta with remote region request,@ test public void   (  )  throws  exception  {   applications delta =  instance info generator . new builder ( 2 1 )  . build (  )  . take delta ( 2 )  ;  when ( request handler . get delta ( remote   region )  )  . then return ( create response ( delta ,255,7,remote,5,[193]
7699,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,test get delta with remote region request,@ test public void   (  )  throws  exception  {   applications delta =  instance info generator . new builder ( 2 1 )  . build (  )  . take delta ( 2 )  ;  when ( request handler . get delta ( remote   region )  )  . then return ( create response ( delta ,255,7,region,6,[202]
7700,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,test get delta with remote region request,@ test public void   (  )  throws  exception  {   applications delta =  instance info generator . new builder ( 2 1 )  . build (  )  . take delta ( 2 )  ;  when ( request handler . get delta ( remote   region )  )  . then return ( create response ( delta ,255,7,request,7,[163]
7701,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,test get instance request,@ test public void   (  )  throws  exception  {   instance info instance =  instance info generator . take one (  )  ;  when ( request handler . get instance ( instance . get id (  )  )  )  . then return ( create response ( instance )  )  ;   eureka http ,255,4,test,1,[2]
7702,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,test get instance request,@ test public void   (  )  throws  exception  {   instance info instance =  instance info generator . take one (  )  ;  when ( request handler . get instance ( instance . get id (  )  )  )  . then return ( create response ( instance )  )  ;   eureka http ,255,4,get,2,"[145, 171]"
7703,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,test get instance request,@ test public void   (  )  throws  exception  {   instance info instance =  instance info generator . take one (  )  ;  when ( request handler . get instance ( instance . get id (  )  )  )  . then return ( create response ( instance )  )  ;   eureka http ,255,4,instance,3,"[50, 64, 76, 149, 160, 224]"
7704,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,test get instance request,@ test public void   (  )  throws  exception  {   instance info instance =  instance info generator . take one (  )  ;  when ( request handler . get instance ( instance . get id (  )  )  )  . then return ( create response ( instance )  )  ;   eureka http ,255,4,request,4,[127]
7705,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,test get secure vip request,@ test public void   (  )  throws  exception  {   applications vip apps =  instance info generator . new builder ( 1 2 )  . build (  )  . to applications (  )  ;   string secure vip address = vip apps . get registered applications (  )  . get ( 0 )  . get,255,5,test,1,[2]
7706,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,test get secure vip request,@ test public void   (  )  throws  exception  {   applications vip apps =  instance info generator . new builder ( 1 2 )  . build (  )  . to applications (  )  ;   string secure vip address = vip apps . get registered applications (  )  . get ( 0 )  . get,255,5,get,2,"[203, 239, 252]"
7707,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,test get secure vip request,@ test public void   (  )  throws  exception  {   applications vip apps =  instance info generator . new builder ( 1 2 )  . build (  )  . to applications (  )  ;   string secure vip address = vip apps . get registered applications (  )  . get ( 0 )  . get,255,5,secure,3,[171]
7708,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,test get secure vip request,@ test public void   (  )  throws  exception  {   applications vip apps =  instance info generator . new builder ( 1 2 )  . build (  )  . to applications (  )  ;   string secure vip address = vip apps . get registered applications (  )  . get ( 0 )  . get,255,5,vip,4,"[63, 178, 192]"
7709,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,test get secure vip request,@ test public void   (  )  throws  exception  {   applications vip apps =  instance info generator . new builder ( 1 2 )  . build (  )  . to applications (  )  ;   string secure vip address = vip apps . get registered applications (  )  . get ( 0 )  . get,255,5,request,5,[]
7710,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,test get secure vip with remote region request,@ test public void   (  )  throws  exception  {   applications vip apps =  instance info generator . new builder ( 1 2 )  . build (  )  . to applications (  )  ;   string secure vip address = vip apps . get registered applications (  )  . get ( 0 )  . get,255,8,test,1,[2]
7711,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,test get secure vip with remote region request,@ test public void   (  )  throws  exception  {   applications vip apps =  instance info generator . new builder ( 1 2 )  . build (  )  . to applications (  )  ;   string secure vip address = vip apps . get registered applications (  )  . get ( 0 )  . get,255,8,get,2,"[203, 239, 252]"
7712,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,test get secure vip with remote region request,@ test public void   (  )  throws  exception  {   applications vip apps =  instance info generator . new builder ( 1 2 )  . build (  )  . to applications (  )  ;   string secure vip address = vip apps . get registered applications (  )  . get ( 0 )  . get,255,8,secure,3,[171]
7713,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,test get secure vip with remote region request,@ test public void   (  )  throws  exception  {   applications vip apps =  instance info generator . new builder ( 1 2 )  . build (  )  . to applications (  )  ;   string secure vip address = vip apps . get registered applications (  )  . get ( 0 )  . get,255,8,vip,4,"[63, 178, 192]"
7714,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,test get secure vip with remote region request,@ test public void   (  )  throws  exception  {   applications vip apps =  instance info generator . new builder ( 1 2 )  . build (  )  . to applications (  )  ;   string secure vip address = vip apps . get registered applications (  )  . get ( 0 )  . get,255,8,with,5,[]
7715,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,test get secure vip with remote region request,@ test public void   (  )  throws  exception  {   applications vip apps =  instance info generator . new builder ( 1 2 )  . build (  )  . to applications (  )  ;   string secure vip address = vip apps . get registered applications (  )  . get ( 0 )  . get,255,8,remote,6,[]
7716,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,test get secure vip with remote region request,@ test public void   (  )  throws  exception  {   applications vip apps =  instance info generator . new builder ( 1 2 )  . build (  )  . to applications (  )  ;   string secure vip address = vip apps . get registered applications (  )  . get ( 0 )  . get,255,8,region,7,[]
7717,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,test get secure vip with remote region request,@ test public void   (  )  throws  exception  {   applications vip apps =  instance info generator . new builder ( 1 2 )  . build (  )  . to applications (  )  ;   string secure vip address = vip apps . get registered applications (  )  . get ( 0 )  . get,255,8,request,8,[]
7718,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,test get vip request,@ test public void   (  )  throws  exception  {   applications vip apps =  instance info generator . new builder ( 1 2 )  . build (  )  . to applications (  )  ;   string vip address = vip apps . get registered applications (  )  . get ( 0 )  . get instan,255,4,test,1,[2]
7719,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,test get vip request,@ test public void   (  )  throws  exception  {   applications vip apps =  instance info generator . new builder ( 1 2 )  . build (  )  . to applications (  )  ;   string vip address = vip apps . get registered applications (  )  . get ( 0 )  . get instan,255,4,get,2,"[196, 232, 245]"
7720,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,test get vip request,@ test public void   (  )  throws  exception  {   applications vip apps =  instance info generator . new builder ( 1 2 )  . build (  )  . to applications (  )  ;   string vip address = vip apps . get registered applications (  )  . get ( 0 )  . get instan,255,4,vip,3,"[63, 171, 185]"
7721,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,test get vip request,@ test public void   (  )  throws  exception  {   applications vip apps =  instance info generator . new builder ( 1 2 )  . build (  )  . to applications (  )  ;   string vip address = vip apps . get registered applications (  )  . get ( 0 )  . get instan,255,4,request,4,[]
7722,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,test get vip with remote region request,@ test public void   (  )  throws  exception  {   applications vip apps =  instance info generator . new builder ( 1 2 )  . build (  )  . to applications (  )  ;   string vip address = vip apps . get registered applications (  )  . get ( 0 )  . get instan,255,7,test,1,[2]
7723,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,test get vip with remote region request,@ test public void   (  )  throws  exception  {   applications vip apps =  instance info generator . new builder ( 1 2 )  . build (  )  . to applications (  )  ;   string vip address = vip apps . get registered applications (  )  . get ( 0 )  . get instan,255,7,get,2,"[196, 232, 245]"
7724,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,test get vip with remote region request,@ test public void   (  )  throws  exception  {   applications vip apps =  instance info generator . new builder ( 1 2 )  . build (  )  . to applications (  )  ;   string vip address = vip apps . get registered applications (  )  . get ( 0 )  . get instan,255,7,vip,3,"[63, 171, 185]"
7725,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,test get vip with remote region request,@ test public void   (  )  throws  exception  {   applications vip apps =  instance info generator . new builder ( 1 2 )  . build (  )  . to applications (  )  ;   string vip address = vip apps . get registered applications (  )  . get ( 0 )  . get instan,255,7,with,4,[]
7726,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,test get vip with remote region request,@ test public void   (  )  throws  exception  {   applications vip apps =  instance info generator . new builder ( 1 2 )  . build (  )  . to applications (  )  ;   string vip address = vip apps . get registered applications (  )  . get ( 0 )  . get instan,255,7,remote,5,[]
7727,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,test get vip with remote region request,@ test public void   (  )  throws  exception  {   applications vip apps =  instance info generator . new builder ( 1 2 )  . build (  )  . to applications (  )  ;   string vip address = vip apps . get registered applications (  )  . get ( 0 )  . get instan,255,7,region,6,[]
7728,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,test get vip with remote region request,@ test public void   (  )  throws  exception  {   applications vip apps =  instance info generator . new builder ( 1 2 )  . build (  )  . to applications (  )  ;   string vip address = vip apps . get registered applications (  )  . get ( 0 )  . get instan,255,7,request,7,[]
7729,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,test heartbeat request,"@ test public void   (  )  throws  exception  {   instance info instance =  instance info generator . take one (  )  ;   instance info updated = new  instance info .  builder ( instance )  . set host name ( ""another . host"" )  . build (  )  ;  when ( requ",255,3,test,1,[2]
7730,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,test heartbeat request,"@ test public void   (  )  throws  exception  {   instance info instance =  instance info generator . take one (  )  ;   instance info updated = new  instance info .  builder ( instance )  . set host name ( ""another . host"" )  . build (  )  ;  when ( requ",255,3,heartbeat,2,[]
7731,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,test heartbeat request,"@ test public void   (  )  throws  exception  {   instance info instance =  instance info generator . take one (  )  ;   instance info updated = new  instance info .  builder ( instance )  . set host name ( ""another . host"" )  . build (  )  ;  when ( requ",255,3,request,3,[]
7732,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,test register request,@ test public void   (  )  throws  exception  {   instance info instance =  instance info generator . take one (  )  ;  when ( request handler . register ( instance )  )  . then return (  eureka http response . status ( 204 )  )  ;   eureka http response ,255,3,test,1,[2]
7733,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,test register request,@ test public void   (  )  throws  exception  {   instance info instance =  instance info generator . take one (  )  ;  when ( request handler . register ( instance )  )  . then return (  eureka http response . status ( 204 )  )  ;   eureka http response ,255,3,register,2,[145]
7734,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,test register request,@ test public void   (  )  throws  exception  {   instance info instance =  instance info generator . take one (  )  ;  when ( request handler . register ( instance )  )  . then return (  eureka http response . status ( 204 )  )  ;   eureka http response ,255,3,request,3,[127]
7735,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,test status update delete request,@ test public void   (  )  throws  exception  {   instance info instance =  instance info generator . take one (  )  ;  when ( request handler . delete status override ( instance . get app name (  )  instance . get id (  )  null )  )  . then return (  eur,255,5,test,1,[2]
7736,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,test status update delete request,@ test public void   (  )  throws  exception  {   instance info instance =  instance info generator . take one (  )  ;  when ( request handler . delete status override ( instance . get app name (  )  instance . get id (  )  null )  )  . then return (  eur,255,5,status,2,[152]
7737,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,test status update delete request,@ test public void   (  )  throws  exception  {   instance info instance =  instance info generator . take one (  )  ;  when ( request handler . delete status override ( instance . get app name (  )  instance . get id (  )  null )  )  . then return (  eur,255,5,update,3,[]
7738,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,test status update delete request,@ test public void   (  )  throws  exception  {   instance info instance =  instance info generator . take one (  )  ;  when ( request handler . delete status override ( instance . get app name (  )  instance . get id (  )  null )  )  . then return (  eur,255,5,delete,4,[145]
7739,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,test status update delete request,@ test public void   (  )  throws  exception  {   instance info instance =  instance info generator . take one (  )  ;  when ( request handler . delete status override ( instance . get app name (  )  instance . get id (  )  null )  )  . then return (  eur,255,5,request,5,[127]
7740,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,test status update request,@ test public void   (  )  throws  exception  {   instance info instance =  instance info generator . take one (  )  ;  when ( request handler . status update ( instance . get app name (  )  instance . get id (  )   instance status . out   of   service nu,255,4,test,1,[2]
7741,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,test status update request,@ test public void   (  )  throws  exception  {   instance info instance =  instance info generator . take one (  )  ;  when ( request handler . status update ( instance . get app name (  )  instance . get id (  )   instance status . out   of   service nu,255,4,status,2,"[145, 225]"
7742,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,test status update request,@ test public void   (  )  throws  exception  {   instance info instance =  instance info generator . take one (  )  ;  when ( request handler . status update ( instance . get app name (  )  instance . get id (  )   instance status . out   of   service nu,255,4,update,3,[152]
7743,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,test status update request,@ test public void   (  )  throws  exception  {   instance info instance =  instance info generator . take one (  )  ;  when ( request handler . status update ( instance . get app name (  )  instance . get id (  )   instance status . out   of   service nu,255,4,request,4,[127]
7744,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,verify response ok with entity,private static void   (  instance info original  eureka http response <  instance info >  http response )  {  assert that ( http response . get status code (  )  is ( equal to ( 200 )  )  )  ;  assert that ( http response . get entity (  )  is ( not null value (  )  )  )  ;  assert that (  eureka entity comparators . equal ( http response . get entity (  )  original )  is ( true )  )  ;   }  ,395,5,verify,1,[]
7745,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,verify response ok with entity,private static void   (  instance info original  eureka http response <  instance info >  http response )  {  assert that ( http response . get status code (  )  is ( equal to ( 200 )  )  )  ;  assert that ( http response . get entity (  )  is ( not null value (  )  )  )  ;  assert that (  eureka entity comparators . equal ( http response . get entity (  )  original )  is ( true )  )  ;   }  ,395,5,response,2,"[61, 95, 129, 213, 332]"
7746,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,verify response ok with entity,private static void   (  instance info original  eureka http response <  instance info >  http response )  {  assert that ( http response . get status code (  )  is ( equal to ( 200 )  )  )  ;  assert that ( http response . get entity (  )  is ( not null value (  )  )  )  ;  assert that (  eureka entity comparators . equal ( http response . get entity (  )  original )  is ( true )  )  ;   }  ,395,5,ok,3,[]
7747,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,verify response ok with entity,private static void   (  instance info original  eureka http response <  instance info >  http response )  {  assert that ( http response . get status code (  )  is ( equal to ( 200 )  )  )  ;  assert that ( http response . get entity (  )  is ( not null value (  )  )  )  ;  assert that (  eureka entity comparators . equal ( http response . get entity (  )  original )  is ( true )  )  ;   }  ,395,5,with,4,[]
7748,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,verify response ok with entity,private static void   (  instance info original  eureka http response <  instance info >  http response )  {  assert that ( http response . get status code (  )  is ( equal to ( 200 )  )  )  ;  assert that ( http response . get entity (  )  is ( not null value (  )  )  )  ;  assert that (  eureka entity comparators . equal ( http response . get entity (  )  original )  is ( true )  )  ;   }  ,395,5,entity,5,"[228, 298, 347]"
7749,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java, discovery client resource,  (  discovery client rule builder builder )  {  this . registration enabled = builder . registration enabled ;  this . registry fetch enabled = builder . registry fetch enabled ;  this . port resolver callable = builder . port resolver callable ;  this . eureka http server = builder . eureka http server ;  this . instance = builder . instance ;  this . remote regions = builder . remote regions ;  this . vip fetch = builder . vip fetch ;  this . user name = builder . user name ;  this . password = builder . password ;   }  ,529,3,discovery,1,[5]
7750,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java, discovery client resource,  (  discovery client rule builder builder )  {  this . registration enabled = builder . registration enabled ;  this . registry fetch enabled = builder . registry fetch enabled ;  this . port resolver callable = builder . port resolver callable ;  this . eureka http server = builder . eureka http server ;  this . instance = builder . instance ;  this . remote regions = builder . remote regions ;  this . vip fetch = builder . vip fetch ;  this . user name = builder . user name ;  this . password = builder . password ;   }  ,529,3,client,2,[15]
7751,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java, discovery client resource,  (  discovery client rule builder builder )  {  this . registration enabled = builder . registration enabled ;  this . registry fetch enabled = builder . registry fetch enabled ;  this . port resolver callable = builder . port resolver callable ;  this . eureka http server = builder . eureka http server ;  this . instance = builder . instance ;  this . remote regions = builder . remote regions ;  this . vip fetch = builder . vip fetch ;  this . user name = builder . user name ;  this . password = builder . password ;   }  ,529,3,resource,3,[]
7752,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java,after,@ override protected void   (  )  {  if  ( client  !  =  null )   {  client . shutdown (  )  ;   }  for  (   discovery client resource resource : forked discovery client resources )   {  resource . after (  )  ;   }  for  (   string property : system   pr,255,1,after,1,[198]
7753,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java,await cache update,"public boolean   ( long timeout  time unit unit )  throws  interrupted exception  {  final  count down latch latch = new  count down latch ( 1 )  ;   object event listener = new  object (  )  {  @ subscribe public void consume (   cache refreshed event event )  {  latch . count down (  )  ;   }   }   ;  try  {  get event bus (  )  . register subscriber ( event listener )  ;   }  catch  (   invalid subscriber exception e )   {  throw new  illegal state exception ( "" unexpected error during subscriber registration"" e )  ;   }  try  {  return latch . await ( timeout unit )  ;   }  finally  {  get event bus (  )  . unregister subscriber ( event listener )  ;   }   }  ",672,3,await,1,[554]
7754,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java,await cache update,"public boolean   ( long timeout  time unit unit )  throws  interrupted exception  {  final  count down latch latch = new  count down latch ( 1 )  ;   object event listener = new  object (  )  {  @ subscribe public void consume (   cache refreshed event event )  {  latch . count down (  )  ;   }   }   ;  try  {  get event bus (  )  . register subscriber ( event listener )  ;   }  catch  (   invalid subscriber exception e )   {  throw new  illegal state exception ( "" unexpected error during subscriber registration"" e )  ;   }  try  {  return latch . await ( timeout unit )  ;   }  finally  {  get event bus (  )  . unregister subscriber ( event listener )  ;   }   }  ",672,3,cache,2,[231]
7755,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java,await cache update,"public boolean   ( long timeout  time unit unit )  throws  interrupted exception  {  final  count down latch latch = new  count down latch ( 1 )  ;   object event listener = new  object (  )  {  @ subscribe public void consume (   cache refreshed event event )  {  latch . count down (  )  ;   }   }   ;  try  {  get event bus (  )  . register subscriber ( event listener )  ;   }  catch  (   invalid subscriber exception e )   {  throw new  illegal state exception ( "" unexpected error during subscriber registration"" e )  ;   }  try  {  return latch . await ( timeout unit )  ;   }  finally  {  get event bus (  )  . unregister subscriber ( event listener )  ;   }   }  ",672,3,update,3,[]
7756,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java,basic authentication,"public  discovery client rule builder   (  string user name  string password )  {   preconditions . check not null ( user name ""http basic authentication user name is null"" )  ;   preconditions . check not null ( password ""http basic authentication password is null"" )  ;  this . user name = user name ;  this . password = password ;  return this ;   }  ",354,2,basic,1,"[133, 228]"
7757,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java,basic authentication,"public  discovery client rule builder   (  string user name  string password )  {   preconditions . check not null ( user name ""http basic authentication user name is null"" )  ;   preconditions . check not null ( password ""http basic authentication password is null"" )  ;  this . user name = user name ;  this . password = password ;  return this ;   }  ",354,2,authentication,2,"[139, 234]"
7758,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java,bind property,private static void   (  string property name  string value )  {  system   property   tracker . add ( property name )  ;   configuration manager . get config instance (  )  . set property ( property name value )  ;   }  ,220,2,bind,1,[]
7759,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java,bind property,private static void   (  string property name  string value )  {  system   property   tracker . add ( property name )  ;   configuration manager . get config instance (  )  . set property ( property name value )  ;   }  ,220,2,property,2,"[32, 75, 102, 179, 190]"
7760,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java,build,public  discovery client resource   (  )  {  return new  discovery client resource ( this )  ;   }  ,100,1,build,1,[]
7761,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java,clear discovery client config,"public static void   (  )  {   configuration manager . get config instance (  )  . clear property ( ""eureka . client . refresh . interval"" )  ;   configuration manager . get config instance (  )  . clear property ( ""eureka . registration . enabled"" )  ;   configuration manager . get config instance (  )  . clear property ( ""eureka . fetch remote regions registry"" )  ;   configuration manager . get config instance (  )  . clear property ( ""eureka . myregion . availability zones"" )  ;   configuration manager . get config instance (  )  . clear property ( ""eureka . service url . default"" )  ;   }  ",602,4,clear,1,"[83, 198, 308, 425, 542]"
7762,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java,clear discovery client config,"public static void   (  )  {   configuration manager . get config instance (  )  . clear property ( ""eureka . client . refresh . interval"" )  ;   configuration manager . get config instance (  )  . clear property ( ""eureka . registration . enabled"" )  ;   configuration manager . get config instance (  )  . clear property ( ""eureka . fetch remote regions registry"" )  ;   configuration manager . get config instance (  )  . clear property ( ""eureka . myregion . availability zones"" )  ;   configuration manager . get config instance (  )  . clear property ( ""eureka . service url . default"" )  ;   }  ",602,4,discovery,2,[]
7763,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java,clear discovery client config,"public static void   (  )  {   configuration manager . get config instance (  )  . clear property ( ""eureka . client . refresh . interval"" )  ;   configuration manager . get config instance (  )  . clear property ( ""eureka . registration . enabled"" )  ;   configuration manager . get config instance (  )  . clear property ( ""eureka . fetch remote regions registry"" )  ;   configuration manager . get config instance (  )  . clear property ( ""eureka . myregion . availability zones"" )  ;   configuration manager . get config instance (  )  . clear property ( ""eureka . service url . default"" )  ;   }  ",602,4,client,3,[110]
7764,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java,clear discovery client config,"public static void   (  )  {   configuration manager . get config instance (  )  . clear property ( ""eureka . client . refresh . interval"" )  ;   configuration manager . get config instance (  )  . clear property ( ""eureka . registration . enabled"" )  ;   configuration manager . get config instance (  )  . clear property ( ""eureka . fetch remote regions registry"" )  ;   configuration manager . get config instance (  )  . clear property ( ""eureka . myregion . availability zones"" )  ;   configuration manager . get config instance (  )  . clear property ( ""eureka . service url . default"" )  ;   }  ",602,4,config,4,"[31, 59, 146, 174, 256, 284, 373, 401, 490, 518]"
7765,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java,connect with,public  discovery client rule builder   (  simple eureka http server eureka http server )  {  this . eureka http server = eureka http server ;  return this ;   }  ,163,2,connect,1,[]
7766,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java,connect with,public  discovery client rule builder   (  simple eureka http server eureka http server )  {  this . eureka http server = eureka http server ;  return this ;   }  ,163,2,with,2,[]
7767,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java,consume,@ subscribe public void   (  cache refreshed event event )  {  latch . count down (  )  ;   }  ,95,1,consume,1,[]
7768,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java,create application manager,"private  application info manager   (  )  {  if  ( application manager  =  =  null )   {   eureka instance config instance config = new  my data center instance config ( eureka   test   namespace )  {  @ override public  string get appname (  )  {  return ""discovery client test"" ;   }  @ override public int get lease renewal interval in seconds (  )  {  return 1 ;   }   }   ;  application manager = new  application info manager ( instance config )  ;   }  return application manager ;   }  ",494,3,create,1,[]
7769,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java,create application manager,"private  application info manager   (  )  {  if  ( application manager  =  =  null )   {   eureka instance config instance config = new  my data center instance config ( eureka   test   namespace )  {  @ override public  string get appname (  )  {  return ""discovery client test"" ;   }  @ override public int get lease renewal interval in seconds (  )  {  return 1 ;   }   }   ;  application manager = new  application info manager ( instance config )  ;   }  return application manager ;   }  ",494,3,application,2,"[9, 51, 380, 407, 467]"
7770,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java,create application manager,"private  application info manager   (  )  {  if  ( application manager  =  =  null )   {   eureka instance config instance config = new  my data center instance config ( eureka   test   namespace )  {  @ override public  string get appname (  )  {  return ""discovery client test"" ;   }  @ override public int get lease renewal interval in seconds (  )  {  return 1 ;   }   }   ;  application manager = new  application info manager ( instance config )  ;   }  return application manager ;   }  ",494,3,manager,3,"[26, 63, 392, 424, 479]"
7771,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java,create eureka client config,"private  eureka client config   (  )  throws  exception  {  uri serviceuri ;  if  ( port resolver callable  !  =  null )   {  serviceuri = new uri ( ""http: /  / localhost:""  +  port resolver callable . call (  )   +  "" / eureka / v2 / "" )  ;   }  else if  ( eureka http server  !  =  null )   {  serviceuri = eureka http server . get serviceuri (  )  ;   }  else  {  throw new  illegal state exception ( "" either port or  eureka http server must be configured"" )  ;   }  if  ( user name  !  =  null )   {  serviceuri =  uri builder . from uri ( serviceuri )  . user info ( user name  +  ':'  +  password )  . build (  )  ;   }  bind property ( eureka   test   namespace  +  ""service url . default"" serviceuri . to string (  )  )  ;  if  ( remote regions  !  =  null &&  ! remote regions . is empty (  )  )   {   string builder regions = new  string builder (  )  ;  for  (   string region : remote regions )   {  regions . append ( ' ' )  . append ( region )  ;   }  bind property ( eureka   test   namespace  +  ""fetch remote regions registry"" regions . substring ( 1 )  )  ;   }  bind property ( eureka   test   namespace  +  ""registration . enabled""  boolean . to string ( registration enabled )  )  ;  bind property ( eureka   test   namespace  +  ""appinfo . initial . replicate . time""  integer . to string ( 0 )  )  ;  bind property ( eureka   test   namespace  +  ""appinfo . replicate . interval""  integer . to string ( 1 )  )  ;  bind property ( eureka   test   namespace  +  ""should fetch registry""  boolean . to string ( registry fetch enabled )  )  ;  bind property ( eureka   test   namespace  +  ""client . refresh . interval""  integer . to string ( 1 )  )  ;  if  ( vip fetch  !  =  null )   {  bind property ( eureka   test   namespace  +  ""registry refresh single vip address"" vip fetch )  ;   }  return new  default eureka client config ( eureka   test   namespace )  ;   }  ",1891,4,create,1,[]
7772,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java,create eureka client config,"private  eureka client config   (  )  throws  exception  {  uri serviceuri ;  if  ( port resolver callable  !  =  null )   {  serviceuri = new uri ( ""http: /  / localhost:""  +  port resolver callable . call (  )   +  "" / eureka / v2 / "" )  ;   }  else if  ( eureka http server  !  =  null )   {  serviceuri = eureka http server . get serviceuri (  )  ;   }  else  {  throw new  illegal state exception ( "" either port or  eureka http server must be configured"" )  ;   }  if  ( user name  !  =  null )   {  serviceuri =  uri builder . from uri ( serviceuri )  . user info ( user name  +  ':'  +  password )  . build (  )  ;   }  bind property ( eureka   test   namespace  +  ""service url . default"" serviceuri . to string (  )  )  ;  if  ( remote regions  !  =  null &&  ! remote regions . is empty (  )  )   {   string builder regions = new  string builder (  )  ;  for  (   string region : remote regions )   {  regions . append ( ' ' )  . append ( region )  ;   }  bind property ( eureka   test   namespace  +  ""fetch remote regions registry"" regions . substring ( 1 )  )  ;   }  bind property ( eureka   test   namespace  +  ""registration . enabled""  boolean . to string ( registration enabled )  )  ;  bind property ( eureka   test   namespace  +  ""appinfo . initial . replicate . time""  integer . to string ( 0 )  )  ;  bind property ( eureka   test   namespace  +  ""appinfo . replicate . interval""  integer . to string ( 1 )  )  ;  bind property ( eureka   test   namespace  +  ""should fetch registry""  boolean . to string ( registry fetch enabled )  )  ;  bind property ( eureka   test   namespace  +  ""client . refresh . interval""  integer . to string ( 1 )  )  ;  if  ( vip fetch  !  =  null )   {  bind property ( eureka   test   namespace  +  ""registry refresh single vip address"" vip fetch )  ;   }  return new  default eureka client config ( eureka   test   namespace )  ;   }  ",1891,4,eureka,2,"[9, 221, 258, 309, 422, 644, 983, 1098, 1222, 1341, 1454, 1579, 1724, 1832, 1855]"
7773,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java,create eureka client config,"private  eureka client config   (  )  throws  exception  {  uri serviceuri ;  if  ( port resolver callable  !  =  null )   {  serviceuri = new uri ( ""http: /  / localhost:""  +  port resolver callable . call (  )   +  "" / eureka / v2 / "" )  ;   }  else if  ( eureka http server  !  =  null )   {  serviceuri = eureka http server . get serviceuri (  )  ;   }  else  {  throw new  illegal state exception ( "" either port or  eureka http server must be configured"" )  ;   }  if  ( user name  !  =  null )   {  serviceuri =  uri builder . from uri ( serviceuri )  . user info ( user name  +  ':'  +  password )  . build (  )  ;   }  bind property ( eureka   test   namespace  +  ""service url . default"" serviceuri . to string (  )  )  ;  if  ( remote regions  !  =  null &&  ! remote regions . is empty (  )  )   {   string builder regions = new  string builder (  )  ;  for  (   string region : remote regions )   {  regions . append ( ' ' )  . append ( region )  ;   }  bind property ( eureka   test   namespace  +  ""fetch remote regions registry"" regions . substring ( 1 )  )  ;   }  bind property ( eureka   test   namespace  +  ""registration . enabled""  boolean . to string ( registration enabled )  )  ;  bind property ( eureka   test   namespace  +  ""appinfo . initial . replicate . time""  integer . to string ( 0 )  )  ;  bind property ( eureka   test   namespace  +  ""appinfo . replicate . interval""  integer . to string ( 1 )  )  ;  bind property ( eureka   test   namespace  +  ""should fetch registry""  boolean . to string ( registry fetch enabled )  )  ;  bind property ( eureka   test   namespace  +  ""client . refresh . interval""  integer . to string ( 1 )  )  ;  if  ( vip fetch  !  =  null )   {  bind property ( eureka   test   namespace  +  ""registry refresh single vip address"" vip fetch )  ;   }  return new  default eureka client config ( eureka   test   namespace )  ;   }  ",1891,4,client,3,"[16, 1610, 1839]"
7774,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java,create eureka client config,"private  eureka client config   (  )  throws  exception  {  uri serviceuri ;  if  ( port resolver callable  !  =  null )   {  serviceuri = new uri ( ""http: /  / localhost:""  +  port resolver callable . call (  )   +  "" / eureka / v2 / "" )  ;   }  else if  ( eureka http server  !  =  null )   {  serviceuri = eureka http server . get serviceuri (  )  ;   }  else  {  throw new  illegal state exception ( "" either port or  eureka http server must be configured"" )  ;   }  if  ( user name  !  =  null )   {  serviceuri =  uri builder . from uri ( serviceuri )  . user info ( user name  +  ':'  +  password )  . build (  )  ;   }  bind property ( eureka   test   namespace  +  ""service url . default"" serviceuri . to string (  )  )  ;  if  ( remote regions  !  =  null &&  ! remote regions . is empty (  )  )   {   string builder regions = new  string builder (  )  ;  for  (   string region : remote regions )   {  regions . append ( ' ' )  . append ( region )  ;   }  bind property ( eureka   test   namespace  +  ""fetch remote regions registry"" regions . substring ( 1 )  )  ;   }  bind property ( eureka   test   namespace  +  ""registration . enabled""  boolean . to string ( registration enabled )  )  ;  bind property ( eureka   test   namespace  +  ""appinfo . initial . replicate . time""  integer . to string ( 0 )  )  ;  bind property ( eureka   test   namespace  +  ""appinfo . replicate . interval""  integer . to string ( 1 )  )  ;  bind property ( eureka   test   namespace  +  ""should fetch registry""  boolean . to string ( registry fetch enabled )  )  ;  bind property ( eureka   test   namespace  +  ""client . refresh . interval""  integer . to string ( 1 )  )  ;  if  ( vip fetch  !  =  null )   {  bind property ( eureka   test   namespace  +  ""registry refresh single vip address"" vip fetch )  ;   }  return new  default eureka client config ( eureka   test   namespace )  ;   }  ",1891,4,config,4,"[23, 449, 1846]"
7775,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java,fork,"public  discovery client rule builder   (  )  {   discovery client rule builder builder = new  discovery client rule builder (  )  {  @ override public  discovery client resource build (  )  {   discovery client resource client resource = super . build (  )  ;  try  {  client resource . before (  )  ;   }  catch  (   throwable e )   {  throw new  illegal state exception ( "" unexpected error during forking the client resource"" e )  ;   }  forked discovery client resources . add ( client resource )  ;  return client resource ;   }   }   ;  return builder . with instance info ( instance )  . connect with ( eureka http server )  . with port resolver ( port resolver callable )  . with registration ( registration enabled )  . with registry fetch ( registry fetch enabled )  . with remote regions ( remote regions . to array ( new  string[remote regions . size (  ) ] )  )  ;   }  ",884,1,fork,1,"[401, 442]"
7776,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java,get application info manager,public  application info manager   (  )  {  return application info manager ;   }  ,83,4,get,1,[]
7777,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java,get application info manager,public  application info manager   (  )  {  return application info manager ;   }  ,83,4,application,2,"[8, 51]"
7778,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java,get application info manager,public  application info manager   (  )  {  return application info manager ;   }  ,83,4,info,3,"[20, 63]"
7779,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java,get application info manager,public  application info manager   (  )  {  return application info manager ;   }  ,83,4,manager,4,"[25, 68]"
7780,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java,get appname,"@ override public  string   (  )  {  return ""discovery client test"" ;   }  ",75,2,get,1,[]
7781,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java,get appname,"@ override public  string   (  )  {  return ""discovery client test"" ;   }  ",75,2,appname,2,[]
7782,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java,get client,public  eureka client   (  )  {  if  ( client  =  =  null )   {  try  {  application info manager = create application manager (  )  ;   eureka client config client config = create eureka client config (  )  ;   jersey1 discovery client optional args optional args = new  jersey1 discovery client optional args (  )  ;  event bus = new  event bus impl (  )  ;  optional args . set event bus ( event bus )  ;  client = new  discovery client ( application info manager client config optional args )  ;   }  catch  (   exception e )   {  throw new  runtime exception ( e )  ;   }   }  return client ;   }  ,603,2,get,1,[]
7783,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java,get client,public  eureka client   (  )  {  if  ( client  =  =  null )   {  try  {  application info manager = create application manager (  )  ;   eureka client config client config = create eureka client config (  )  ;   jersey1 discovery client optional args optional args = new  jersey1 discovery client optional args (  )  ;  event bus = new  event bus impl (  )  ;  optional args . set event bus ( event bus )  ;  client = new  discovery client ( application info manager client config optional args )  ;   }  catch  (   exception e )   {  throw new  runtime exception ( e )  ;   }   }  return client ;   }  ,603,2,client,2,"[15, 39, 144, 158, 188, 230, 290, 409, 433, 467, 589]"
7784,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java,get event bus,public  event bus   (  )  {  if  ( client  =  =  null )   {  get client (  )  ;   }  return event bus ;   }  ,109,3,get,1,[61]
7785,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java,get event bus,public  event bus   (  )  {  if  ( client  =  =  null )   {  get client (  )  ;   }  return event bus ;   }  ,109,3,event,2,"[8, 92]"
7786,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java,get event bus,public  event bus   (  )  {  if  ( client  =  =  null )   {  get client (  )  ;   }  return event bus ;   }  ,109,3,bus,3,"[14, 98]"
7787,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java,get lease renewal interval in seconds,@ override public int   (  )  {  return 1 ;   }  ,49,6,get,1,[]
7788,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java,get lease renewal interval in seconds,@ override public int   (  )  {  return 1 ;   }  ,49,6,lease,2,[]
7789,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java,get lease renewal interval in seconds,@ override public int   (  )  {  return 1 ;   }  ,49,6,renewal,3,[]
7790,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java,get lease renewal interval in seconds,@ override public int   (  )  {  return 1 ;   }  ,49,6,interval,4,[]
7791,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java,get lease renewal interval in seconds,@ override public int   (  )  {  return 1 ;   }  ,49,6,in,5,[18]
7792,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java,get lease renewal interval in seconds,@ override public int   (  )  {  return 1 ;   }  ,49,6,seconds,6,[]
7793,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java,get my instance info,public  instance info   (  )  {  return create application manager (  )  . get info (  )  ;   }  ,97,4,get,1,[75]
7794,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java,get my instance info,public  instance info   (  )  {  return create application manager (  )  . get info (  )  ;   }  ,97,4,my,2,[]
7795,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java,get my instance info,public  instance info   (  )  {  return create application manager (  )  . get info (  )  ;   }  ,97,4,instance,3,[8]
7796,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java,get my instance info,public  instance info   (  )  {  return create application manager (  )  . get info (  )  ;   }  ,97,4,info,4,"[17, 79]"
7797,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java,get name,@ override public  name   (  )  {  return  name .  my own ;   }  ,65,2,get,1,[]
7798,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java,get name,@ override public  name   (  )  {  return  name .  my own ;   }  ,65,2,name,2,"[19, 43]"
7799,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java,new builder,public static  discovery client rule builder   (  )  {  return new  discovery client rule builder (  )  ;   }  ,111,2,new,1,[63]
7800,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java,new builder,public static  discovery client rule builder   (  )  {  return new  discovery client rule builder (  )  ;   }  ,111,2,builder,2,"[37, 90]"
7801,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java,new instance info builder,"public static  instance info .  builder   ( int renewal interval in secs )  {   instance info .  builder builder =  instance info .  builder . new builder (  )  ;  builder . setip addr ( ""10 . 10 . 101 . 00"" )  ;  builder . set host name ( "" hosttt"" )  ;  builder . set app name ( "" eureka test app - ""  +  uuid . randomuuid (  )  )  ;  builder . set data center info ( new  data center info (  )  {  @ override public  name get name (  )  {  return  name .  my own ;   }   }   )  ;  builder . set lease info (  lease info .  builder . new builder (  )  . set renewal interval in secs ( renewal interval in secs )  . build (  )  )  ;  return builder ;   }  ",657,4,new,1,"[50, 143, 370, 536, 562, 589]"
7802,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java,new instance info builder,"public static  instance info .  builder   ( int renewal interval in secs )  {   instance info .  builder builder =  instance info .  builder . new builder (  )  ;  builder . setip addr ( ""10 . 10 . 101 . 00"" )  ;  builder . set host name ( "" hosttt"" )  ;  builder . set app name ( "" eureka test app - ""  +  uuid . randomuuid (  )  )  ;  builder . set data center info ( new  data center info (  )  {  @ override public  name get name (  )  {  return  name .  my own ;   }   }   )  ;  builder . set lease info (  lease info .  builder . new builder (  )  . set renewal interval in secs ( renewal interval in secs )  . build (  )  )  ;  return builder ;   }  ",657,4,instance,2,"[15, 80, 116]"
7803,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java,new instance info builder,"public static  instance info .  builder   ( int renewal interval in secs )  {   instance info .  builder builder =  instance info .  builder . new builder (  )  ;  builder . setip addr ( ""10 . 10 . 101 . 00"" )  ;  builder . set host name ( "" hosttt"" )  ;  builder . set app name ( "" eureka test app - ""  +  uuid . randomuuid (  )  )  ;  builder . set data center info ( new  data center info (  )  {  @ override public  name get name (  )  {  return  name .  my own ;   }   }   )  ;  builder . set lease info (  lease info .  builder . new builder (  )  . set renewal interval in secs ( renewal interval in secs )  . build (  )  )  ;  return builder ;   }  ",657,4,info,3,"[24, 89, 125, 363, 387, 504, 518]"
7804,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java,new instance info builder,"public static  instance info .  builder   ( int renewal interval in secs )  {   instance info .  builder builder =  instance info .  builder . new builder (  )  ;  builder . setip addr ( ""10 . 10 . 101 . 00"" )  ;  builder . set host name ( "" hosttt"" )  ;  builder . set app name ( "" eureka test app - ""  +  uuid . randomuuid (  )  )  ;  builder . set data center info ( new  data center info (  )  {  @ override public  name get name (  )  {  return  name .  my own ;   }   }   )  ;  builder . set lease info (  lease info .  builder . new builder (  )  . set renewal interval in secs ( renewal interval in secs )  . build (  )  )  ;  return builder ;   }  ",657,4,builder,4,"[32, 97, 105, 133, 147, 164, 214, 256, 337, 484, 526, 540, 642]"
7805,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java,setup discovery client,public static  eureka client   (  instance info client instance info )  {   default eureka client config config = new  default eureka client config (  )  ;   application info manager application info manager = new  application info manager ( new  my data center instance config (  )  client instance info )  ;   discovery manager . get instance (  )  . set eureka client config ( config )  ;   eureka client client = new  discovery client ( application info manager config )  ;  return client ;   }  ,500,3,setup,1,[]
7806,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java,setup discovery client,public static  eureka client   (  instance info client instance info )  {   default eureka client config config = new  default eureka client config (  )  ;   application info manager application info manager = new  application info manager ( new  my data center instance config (  )  client instance info )  ;   discovery manager . get instance (  )  . set eureka client config ( config )  ;   eureka client client = new  discovery client ( application info manager config )  ;  return client ;   }  ,500,3,discovery,2,"[312, 422]"
7807,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java,setup discovery client,public static  eureka client   (  instance info client instance info )  {   default eureka client config config = new  default eureka client config (  )  ;   application info manager application info manager = new  application info manager ( new  my data center instance config (  )  client instance info )  ;   discovery manager . get instance (  )  . set eureka client config ( config )  ;   eureka client client = new  discovery client ( application info manager config )  ;  return client ;   }  ,500,3,client,3,"[22, 48, 91, 134, 284, 364, 401, 408, 432, 486]"
7808,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java,setup discovery client config,"public static void   ( int server port  string path )  {   configuration manager . get config instance (  )  . set property ( ""eureka . should fetch registry"" ""true"" )  ;   configuration manager . get config instance (  )  . set property ( ""eureka . response cache auto expiration in seconds"" ""10"" )  ;   configuration manager . get config instance (  )  . set property ( ""eureka . client . refresh . interval"" client   refresh   rate )  ;   configuration manager . get config instance (  )  . set property ( ""eureka . registration . enabled"" ""false"" )  ;   configuration manager . get config instance (  )  . set property ( ""eureka . fetch remote regions registry"" remote   region )  ;   configuration manager . get config instance (  )  . set property ( ""eureka . myregion . availability zones"" remote   zone )  ;   configuration manager . get config instance (  )  . set property ( ""eureka . service url . default"" ""http: /  / localhost:""  +  server port  +  path )  ;   }  ",977,4,setup,1,[]
7809,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java,setup discovery client config,"public static void   ( int server port  string path )  {   configuration manager . get config instance (  )  . set property ( ""eureka . should fetch registry"" ""true"" )  ;   configuration manager . get config instance (  )  . set property ( ""eureka . response cache auto expiration in seconds"" ""10"" )  ;   configuration manager . get config instance (  )  . set property ( ""eureka . client . refresh . interval"" client   refresh   rate )  ;   configuration manager . get config instance (  )  . set property ( ""eureka . registration . enabled"" ""false"" )  ;   configuration manager . get config instance (  )  . set property ( ""eureka . fetch remote regions registry"" remote   region )  ;   configuration manager . get config instance (  )  . set property ( ""eureka . myregion . availability zones"" remote   zone )  ;   configuration manager . get config instance (  )  . set property ( ""eureka . service url . default"" ""http: /  / localhost:""  +  server port  +  path )  ;   }  ",977,4,discovery,2,[]
7810,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java,setup discovery client config,"public static void   ( int server port  string path )  {   configuration manager . get config instance (  )  . set property ( ""eureka . should fetch registry"" ""true"" )  ;   configuration manager . get config instance (  )  . set property ( ""eureka . response cache auto expiration in seconds"" ""10"" )  ;   configuration manager . get config instance (  )  . set property ( ""eureka . client . refresh . interval"" client   refresh   rate )  ;   configuration manager . get config instance (  )  . set property ( ""eureka . registration . enabled"" ""false"" )  ;   configuration manager . get config instance (  )  . set property ( ""eureka . fetch remote regions registry"" remote   region )  ;   configuration manager . get config instance (  )  . set property ( ""eureka . myregion . availability zones"" remote   zone )  ;   configuration manager . get config instance (  )  . set property ( ""eureka . service url . default"" ""http: /  / localhost:""  +  server port  +  path )  ;   }  ",977,4,client,3,"[382, 411]"
7811,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java,setup discovery client config,"public static void   ( int server port  string path )  {   configuration manager . get config instance (  )  . set property ( ""eureka . should fetch registry"" ""true"" )  ;   configuration manager . get config instance (  )  . set property ( ""eureka . response cache auto expiration in seconds"" ""10"" )  ;   configuration manager . get config instance (  )  . set property ( ""eureka . client . refresh . interval"" client   refresh   rate )  ;   configuration manager . get config instance (  )  . set property ( ""eureka . registration . enabled"" ""false"" )  ;   configuration manager . get config instance (  )  . set property ( ""eureka . fetch remote regions registry"" remote   region )  ;   configuration manager . get config instance (  )  . set property ( ""eureka . myregion . availability zones"" remote   zone )  ;   configuration manager . get config instance (  )  . set property ( ""eureka . service url . default"" ""http: /  / localhost:""  +  server port  +  path )  ;   }  ",977,4,config,4,"[59, 87, 173, 201, 305, 333, 442, 470, 558, 586, 689, 717, 818, 846]"
7812,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java,setup injector,public static  eureka client   (  instance info client instance info )  {   default eureka client config config = new  default eureka client config (  )  ;   discovery manager . get instance (  )  . set eureka client config ( config )  ;   eureka client client = new  discovery client ( client instance info config )  ;   application info manager . get instance (  )  . init component ( new  my data center instance config (  )  )  ;  return client ;   }  ,456,2,setup,1,[]
7813,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java,setup injector,public static  eureka client   (  instance info client instance info )  {   default eureka client config config = new  default eureka client config (  )  ;   discovery manager . get instance (  )  . set eureka client config ( config )  ;   eureka client client = new  discovery client ( client instance info config )  ;   application info manager . get instance (  )  . init component ( new  my data center instance config (  )  )  ;  return client ;   }  ,456,2,injector,2,[]
7814,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java,with instance info,public  discovery client rule builder   (  instance info instance )  {  this . instance = instance ;  return this ;   }  ,121,3,with,1,[]
7815,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java,with instance info,public  discovery client rule builder   (  instance info instance )  {  this . instance = instance ;  return this ;   }  ,121,3,instance,2,"[43, 57, 79, 90]"
7816,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java,with instance info,public  discovery client rule builder   (  instance info instance )  {  this . instance = instance ;  return this ;   }  ,121,3,info,3,[52]
7817,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java,with port resolver,public  discovery client rule builder   (  callable <  integer >  port resolver callable )  {  this . port resolver callable = port resolver callable ;  return this ;   }  ,172,3,with,1,[]
7818,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java,with port resolver,public  discovery client rule builder   (  callable <  integer >  port resolver callable )  {  this . port resolver callable = port resolver callable ;  return this ;   }  ,172,3,port,2,"[66, 102, 127]"
7819,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java,with port resolver,public  discovery client rule builder   (  callable <  integer >  port resolver callable )  {  this . port resolver callable = port resolver callable ;  return this ;   }  ,172,3,resolver,3,"[71, 107, 132]"
7820,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java,with registration,public  discovery client rule builder   ( boolean enabled )  {  this . registration enabled = enabled ;  return this ;   }  ,124,2,with,1,[]
7821,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java,with registration,public  discovery client rule builder   ( boolean enabled )  {  this . registration enabled = enabled ;  return this ;   }  ,124,2,registration,2,[71]
7822,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java,with registry fetch,public  discovery client rule builder   ( boolean enabled )  {  this . registry fetch enabled = enabled ;  return this ;   }  ,126,3,with,1,[]
7823,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java,with registry fetch,public  discovery client rule builder   ( boolean enabled )  {  this . registry fetch enabled = enabled ;  return this ;   }  ,126,3,registry,2,[71]
7824,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java,with registry fetch,public  discovery client rule builder   ( boolean enabled )  {  this . registry fetch enabled = enabled ;  return this ;   }  ,126,3,fetch,3,[80]
7825,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java,with remote regions,public  discovery client rule builder   (  string .  .  .  remote regions )  {  if  ( this . remote regions  =  =  null )   {  this . remote regions = new  array list <  >  (  )  ;   }   collections . add all ( this . remote regions remote regions )  ;  return this ;   }  ,273,3,with,1,[]
7826,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java,with remote regions,public  discovery client rule builder   (  string .  .  .  remote regions )  {  if  ( this . remote regions  =  =  null )   {  this . remote regions = new  array list <  >  (  )  ;   }   collections . add all ( this . remote regions remote regions )  ;  return this ;   }  ,273,3,remote,2,"[59, 93, 134, 218, 233]"
7827,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java,with remote regions,public  discovery client rule builder   (  string .  .  .  remote regions )  {  if  ( this . remote regions  =  =  null )   {  this . remote regions = new  array list <  >  (  )  ;   }   collections . add all ( this . remote regions remote regions )  ;  return this ;   }  ,273,3,regions,3,"[66, 100, 141, 225, 240]"
7828,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java,with vip fetch,public  discovery client rule builder   (  string vip fetch )  {  this . vip fetch = vip fetch ;  return this ;   }  ,117,3,with,1,[]
7829,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java,with vip fetch,public  discovery client rule builder   (  string vip fetch )  {  this . vip fetch = vip fetch ;  return this ;   }  ,117,3,vip,2,"[50, 73, 85]"
7830,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java,with vip fetch,public  discovery client rule builder   (  string vip fetch )  {  this . vip fetch = vip fetch ;  return this ;   }  ,117,3,fetch,3,"[54, 77, 89]"
7831,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\ClusterSampleData.java,new eureka server config,public static  eureka server config   (  )  {   eureka server config config = mock (  eureka server config . class )  ;  when ( config . get peer eureka nodes update interval ms (  )  )  . then return (  ( int ) eureka   nodes   update   interval   ms )  ;  when ( config . should sync when timestamp differs (  )  )  . then return ( true )  ;  when ( config . get max time for replication (  )  )  . then return (  ( int ) replication   expiry   time   ms )  ;  when ( config . get max elements in peer replication pool (  )  )  . then return ( 10 )  ;  when ( config . get max elements in status replication pool (  )  )  . then return ( 10 )  ;  when ( config . get max threads for peer replication (  )  )  . then return ( 1 )  ;  when ( config . get max threads for status replication (  )  )  . then return ( 1 )  ;  return config ;   }  ,844,4,new,1,[]
7832,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\ClusterSampleData.java,new eureka server config,public static  eureka server config   (  )  {   eureka server config config = mock (  eureka server config . class )  ;  when ( config . get peer eureka nodes update interval ms (  )  )  . then return (  ( int ) eureka   nodes   update   interval   ms )  ;  when ( config . should sync when timestamp differs (  )  )  . then return ( true )  ;  when ( config . get max time for replication (  )  )  . then return (  ( int ) replication   expiry   time   ms )  ;  when ( config . get max elements in peer replication pool (  )  )  . then return ( 10 )  ;  when ( config . get max elements in status replication pool (  )  )  . then return ( 10 )  ;  when ( config . get max threads for peer replication (  )  )  . then return ( 1 )  ;  when ( config . get max threads for status replication (  )  )  . then return ( 1 )  ;  return config ;   }  ,844,4,eureka,2,"[15, 48, 86, 146, 212]"
7833,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\ClusterSampleData.java,new eureka server config,public static  eureka server config   (  )  {   eureka server config config = mock (  eureka server config . class )  ;  when ( config . get peer eureka nodes update interval ms (  )  )  . then return (  ( int ) eureka   nodes   update   interval   ms )  ;  when ( config . should sync when timestamp differs (  )  )  . then return ( true )  ;  when ( config . get max time for replication (  )  )  . then return (  ( int ) replication   expiry   time   ms )  ;  when ( config . get max elements in peer replication pool (  )  )  . then return ( 10 )  ;  when ( config . get max elements in status replication pool (  )  )  . then return ( 10 )  ;  when ( config . get max threads for peer replication (  )  )  . then return ( 1 )  ;  when ( config . get max threads for status replication (  )  )  . then return ( 1 )  ;  return config ;   }  ,844,4,server,3,"[22, 55, 93]"
7834,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\ClusterSampleData.java,new eureka server config,public static  eureka server config   (  )  {   eureka server config config = mock (  eureka server config . class )  ;  when ( config . get peer eureka nodes update interval ms (  )  )  . then return (  ( int ) eureka   nodes   update   interval   ms )  ;  when ( config . should sync when timestamp differs (  )  )  . then return ( true )  ;  when ( config . get max time for replication (  )  )  . then return (  ( int ) replication   expiry   time   ms )  ;  when ( config . get max elements in peer replication pool (  )  )  . then return ( 10 )  ;  when ( config . get max elements in status replication pool (  )  )  . then return ( 10 )  ;  when ( config . get max threads for peer replication (  )  )  . then return ( 1 )  ;  when ( config . get max threads for status replication (  )  )  . then return ( 1 )  ;  return config ;   }  ,844,4,config,4,"[29, 62, 69, 100, 128, 265, 352, 470, 562, 656, 742, 830]"
7835,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\ClusterSampleData.java,new instance info,public static  instance info   ( int index )  {   iterator <  instance info >  instance generator =  instance info generator . new builder ( 10 10 )  . with meta data ( true )  . build (  )  . service iterator (  )  ;  for  ( int i = 0 ;  i  <  index ;  i +  +  )   {  instance generator . next (  )  ;   }  return instance generator . next (  )  ;   }  ,354,3,new,1,[127]
7836,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\ClusterSampleData.java,new instance info,public static  instance info   ( int index )  {   iterator <  instance info >  instance generator =  instance info generator . new builder ( 10 10 )  . with meta data ( true )  . build (  )  . service iterator (  )  ;  for  ( int i = 0 ;  i  <  index ;  i +  +  )   {  instance generator . next (  )  ;   }  return instance generator . next (  )  ;   }  ,354,3,instance,2,"[15, 62, 79, 101, 269, 315]"
7837,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\ClusterSampleData.java,new instance info,public static  instance info   ( int index )  {   iterator <  instance info >  instance generator =  instance info generator . new builder ( 10 10 )  . with meta data ( true )  . build (  )  . service iterator (  )  ;  for  ( int i = 0 ;  i  <  index ;  i +  +  )   {  instance generator . next (  )  ;   }  return instance generator . next (  )  ;   }  ,354,3,info,3,"[24, 71, 110]"
7838,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\ClusterSampleData.java,new replication instance,public static  replication instance   (  )  {  return new replication instance of (  action .  register new instance info ( 0 )  )  ;   }  ,139,3,new,1,"[54, 104]"
7839,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\ClusterSampleData.java,new replication instance,public static  replication instance   (  )  {  return new replication instance of (  action .  register new instance info ( 0 )  )  ;   }  ,139,3,replication,2,"[15, 58]"
7840,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\ClusterSampleData.java,new replication instance,public static  replication instance   (  )  {  return new replication instance of (  action .  register new instance info ( 0 )  )  ;   }  ,139,3,instance,3,"[27, 70, 108]"
7841,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\ClusterSampleData.java,new replication instance of,"public static  replication instance   (  action action  instance info instance )  {  switch  ( action )   {  case  register: return new  replication instance ( instance . get app name (  )  instance . get id (  )   system . current time millis (  )  null instance . get status (  )  . name (  )  instance action )  ;  case  cancel: return new  replication instance ( instance . get app name (  )  instance . get id (  )   system . current time millis (  )  null null null action )  ;  case  heartbeat: return new  replication instance ( instance . get app name (  )  instance . get id (  )   system . current time millis (  )   instance status . out   of   service . name (  )  instance . get status (  )  . name (  )  instance action )  ;  case  status update: return new  replication instance ( instance . get app name (  )  instance . get id (  )   system . current time millis (  )   instance status . out   of   service . name (  )  null null action )  ;  case  delete status override: return new  replication instance ( instance . get app name (  )  instance . get id (  )   system . current time millis (  )   instance status . out   of   service . name (  )  null null action )  ;   }  throw new  illegal state exception ( "" unexpected action ""  +  action )  ;   }  ",1274,4,new,1,"[132, 339, 509, 769, 998, 1200]"
7842,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\ClusterSampleData.java,new replication instance of,"public static  replication instance   (  action action  instance info instance )  {  switch  ( action )   {  case  register: return new  replication instance ( instance . get app name (  )  instance . get id (  )   system . current time millis (  )  null instance . get status (  )  . name (  )  instance action )  ;  case  cancel: return new  replication instance ( instance . get app name (  )  instance . get id (  )   system . current time millis (  )  null null null action )  ;  case  heartbeat: return new  replication instance ( instance . get app name (  )  instance . get id (  )   system . current time millis (  )   instance status . out   of   service . name (  )  instance . get status (  )  . name (  )  instance action )  ;  case  status update: return new  replication instance ( instance . get app name (  )  instance . get id (  )   system . current time millis (  )   instance status . out   of   service . name (  )  null null action )  ;  case  delete status override: return new  replication instance ( instance . get app name (  )  instance . get id (  )   system . current time millis (  )   instance status . out   of   service . name (  )  null null action )  ;   }  throw new  illegal state exception ( "" unexpected action ""  +  action )  ;   }  ",1274,4,replication,2,"[15, 137, 344, 514, 774, 1003]"
7843,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\ClusterSampleData.java,new replication instance of,"public static  replication instance   (  action action  instance info instance )  {  switch  ( action )   {  case  register: return new  replication instance ( instance . get app name (  )  instance . get id (  )   system . current time millis (  )  null instance . get status (  )  . name (  )  instance action )  ;  case  cancel: return new  replication instance ( instance . get app name (  )  instance . get id (  )   system . current time millis (  )  null null null action )  ;  case  heartbeat: return new  replication instance ( instance . get app name (  )  instance . get id (  )   system . current time millis (  )   instance status . out   of   service . name (  )  instance . get status (  )  . name (  )  instance action )  ;  case  status update: return new  replication instance ( instance . get app name (  )  instance . get id (  )   system . current time millis (  )   instance status . out   of   service . name (  )  null null action )  ;  case  delete status override: return new  replication instance ( instance . get app name (  )  instance . get id (  )   system . current time millis (  )   instance status . out   of   service . name (  )  null null action )  ;   }  throw new  illegal state exception ( "" unexpected action ""  +  action )  ;   }  ",1274,4,instance,3,"[27, 56, 70, 149, 160, 190, 255, 296, 356, 367, 397, 526, 537, 567, 628, 678, 719, 786, 797, 827, 888, 1015, 1026, 1056, 1117]"
7844,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\ClusterSampleData.java,new replication instance of,"public static  replication instance   (  action action  instance info instance )  {  switch  ( action )   {  case  register: return new  replication instance ( instance . get app name (  )  instance . get id (  )   system . current time millis (  )  null instance . get status (  )  . name (  )  instance action )  ;  case  cancel: return new  replication instance ( instance . get app name (  )  instance . get id (  )   system . current time millis (  )  null null null action )  ;  case  heartbeat: return new  replication instance ( instance . get app name (  )  instance . get id (  )   system . current time millis (  )   instance status . out   of   service . name (  )  instance . get status (  )  . name (  )  instance action )  ;  case  status update: return new  replication instance ( instance . get app name (  )  instance . get id (  )   system . current time millis (  )   instance status . out   of   service . name (  )  null null action )  ;  case  delete status override: return new  replication instance ( instance . get app name (  )  instance . get id (  )   system . current time millis (  )   instance status . out   of   service . name (  )  null null action )  ;   }  throw new  illegal state exception ( "" unexpected action ""  +  action )  ;   }  ",1274,4,of,4,"[652, 912, 1141]"
7845,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\ClusterSampleData.java,new replication instance response,public static  replication instance response   ( boolean with instance info )  {  return new  replication instance response ( 200 with instance info  ?  new instance info ( 1 )  : null )  ;   }  ,195,4,new,1,"[89, 153]"
7846,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\ClusterSampleData.java,new replication instance response,public static  replication instance response   ( boolean with instance info )  {  return new  replication instance response ( 200 with instance info  ?  new instance info ( 1 )  : null )  ;   }  ,195,4,replication,2,"[15, 94]"
7847,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\ClusterSampleData.java,new replication instance response,public static  replication instance response   ( boolean with instance info )  {  return new  replication instance response ( 200 with instance info  ?  new instance info ( 1 )  : null )  ;   }  ,195,4,instance,3,"[27, 62, 106, 135, 157]"
7848,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\ClusterSampleData.java,new replication instance response,public static  replication instance response   ( boolean with instance info )  {  return new  replication instance response ( 200 with instance info  ?  new instance info ( 1 )  : null )  ;   }  ,195,4,response,4,"[36, 115]"
7849,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\SimpleEurekaHttpServerResource.java,after,@ override protected void   (  )  {  if  ( eureka http server  !  =  null )   {  eureka http server . shutdown (  )  ;   }   }  ,128,1,after,1,[]
7850,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\SimpleEurekaHttpServerResource.java,before,@ override protected void   (  )  throws  throwable  {  eureka http server = new  simple eureka http server ( request handler )  ;   }  ,136,1,before,1,[]
7851,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\SimpleEurekaHttpServerResource.java,get eureka http server,public  simple eureka http server   (  )  {  return eureka http server ;   }  ,78,4,get,1,[]
7852,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\SimpleEurekaHttpServerResource.java,get eureka http server,public  simple eureka http server   (  )  {  return eureka http server ;   }  ,78,4,eureka,2,"[15, 52]"
7853,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\SimpleEurekaHttpServerResource.java,get eureka http server,public  simple eureka http server   (  )  {  return eureka http server ;   }  ,78,4,http,3,"[22, 59]"
7854,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\SimpleEurekaHttpServerResource.java,get eureka http server,public  simple eureka http server   (  )  {  return eureka http server ;   }  ,78,4,server,4,"[27, 64]"
7855,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\SimpleEurekaHttpServerResource.java,get request handler,public  eureka http client   (  )  {  return request handler ;   }  ,68,3,get,1,[]
7856,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\SimpleEurekaHttpServerResource.java,get request handler,public  eureka http client   (  )  {  return request handler ;   }  ,68,3,request,2,[45]
7857,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\SimpleEurekaHttpServerResource.java,get request handler,public  eureka http client   (  )  {  return request handler ;   }  ,68,3,handler,3,[53]
7858,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpRequest.java, eureka http request,public   (  string request method uri requesturi  map <  string  string >  headers )  {  this . request method = request method ;  this . requesturi = requesturi ;  this . headers =  collections . unmodifiable map ( new  hash map <  string  string >  ( headers )  )  ;   }  ,274,3,eureka,1,[]
7859,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpRequest.java, eureka http request,public   (  string request method uri requesturi  map <  string  string >  headers )  {  this . request method = request method ;  this . requesturi = requesturi ;  this . headers =  collections . unmodifiable map ( new  hash map <  string  string >  ( headers )  )  ;   }  ,274,3,http,2,[]
7860,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpRequest.java, eureka http request,public   (  string request method uri requesturi  map <  string  string >  headers )  {  this . request method = request method ;  this . requesturi = requesturi ;  this . headers =  collections . unmodifiable map ( new  hash map <  string  string >  ( headers )  )  ;   }  ,274,3,request,3,"[19, 38, 96, 113, 138, 151]"
7861,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpRequest.java,get headers,public  map <  string  string >    (  )  {  return headers ;   }  ,66,2,get,1,[]
7862,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpRequest.java,get headers,public  map <  string  string >    (  )  {  return headers ;   }  ,66,2,headers,2,[51]
7863,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpRequest.java,get request method,public  string   (  )  {  return request method ;   }  ,55,3,get,1,[]
7864,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpRequest.java,get request method,public  string   (  )  {  return request method ;   }  ,55,3,request,2,[33]
7865,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpRequest.java,get request method,public  string   (  )  {  return request method ;   }  ,55,3,method,3,[41]
7866,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpRequest.java,get requesturi,public uri   (  )  {  return requesturi ;   }  ,47,2,get,1,[]
7867,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpRequest.java,get requesturi,public uri   (  )  {  return requesturi ;   }  ,47,2,requesturi,2,[29]
7868,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\util\DiagnosticClient.java,main,"public static void   (  string[] args )  throws  interrupted exception  {   string discoveryurl = args[0] ;  long start time =  system . current time millis (  )  ;   eureka server config server config = new  default eureka server config ( ""eureka . "" )  ;   jersey replication client client =  jersey replication client . create replication client ( server config new  default server codecs ( server config )  discoveryurl )  ;   applications applications = client . get applications (  )  . get entity (  )  ;   system . out . println ( "" applications count = ""  +  applications . get registered applications (  )  . size (  )  )  ;   system . out . println ( "" instance count = ""  +  count instances ( applications )  )  ;  while  ( true )   {  long delay =  system . current time millis (  )   -  start time ;  if  ( delay  >  =  30000 )   {   system . out . println ( "" processing delay exceeds 30sec ;  we may be out of sync"" )  ;   }  else  {  long wait time = 30 * 1000  -  delay ;   system . out . println ( "" waiting ""  +  wait time  /  1000  +  ""sec before next fetch .  .  . "" )  ;   thread . sleep ( 15 * 1000 )  ;   }  start time =  system . current time millis (  )  ;   applications delta = client . get delta (  )  . get entity (  )  ;   applications merged =  eureka entity functions . merge applications ( applications delta )  ;  if  ( merged . get apps hash code (  )  . equals ( delta . get apps hash code (  )  )  )   {   system . out . println ( "" hash codes match: ""  +  delta . get apps hash code (  )   +  "" ( delta count = "" +  count instances ( delta )  +  ' ) ' )  ;  applications = merged ;   }  else  {   system . out . println ( ""error: hash codes do not match  ( ""  +  delta . get apps hash code (  )   +  "" ( delta )   !  =  "" +  merged . get apps hash code (  )  +  ""  ( merged )   !  =  "" +  applications . get apps hash code (  )  +  "" ( old apps ) "" +  "" ( delta count = "" +  count instances ( delta )  +  ' ) ' )  ;  applications = client . get applications (  )  . get entity (  )  ;   }   }   }  ",2038,1,main,1,[]
7869,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\util\InstanceInfoGenerator.java, instance info generator,"  (  instance info generator builder builder )  {  this . instance count = builder . instance count ;  this . app names = builder . app names ;  this . zone = builder . zone  =  =  null  ?  ""us - east - 1c"" : builder . zone ;  this . tagged id = builder . tagged id ;  this . with meta data = builder . include meta data ;  this . include asg = builder . include asg ;  this . use instance id = builder . use instance id ;   }  ",428,3,instance,1,"[5, 58, 85, 381, 409]"
7870,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\util\InstanceInfoGenerator.java, instance info generator,"  (  instance info generator builder builder )  {  this . instance count = builder . instance count ;  this . app names = builder . app names ;  this . zone = builder . zone  =  =  null  ?  ""us - east - 1c"" : builder . zone ;  this . tagged id = builder . tagged id ;  this . with meta data = builder . include meta data ;  this . include asg = builder . include asg ;  this . use instance id = builder . use instance id ;   }  ",428,3,info,2,[14]
7871,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\util\InstanceInfoGenerator.java, instance info generator,"  (  instance info generator builder builder )  {  this . instance count = builder . instance count ;  this . app names = builder . app names ;  this . zone = builder . zone  =  =  null  ?  ""us - east - 1c"" : builder . zone ;  this . tagged id = builder . tagged id ;  this . with meta data = builder . include meta data ;  this . include asg = builder . include asg ;  this . use instance id = builder . use instance id ;   }  ",428,3,generator,3,[19]
7872,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\util\InstanceInfoGenerator.java, instance info generator builder,public   ( int instance count  string .  .  .  app names )  {  this . instance count = instance count ;  this . app names = app names ;   }  ,141,4,instance,1,"[15, 70, 87]"
7873,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\util\InstanceInfoGenerator.java, instance info generator builder,public   ( int instance count  string .  .  .  app names )  {  this . instance count = instance count ;  this . app names = app names ;   }  ,141,4,info,2,[]
7874,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\util\InstanceInfoGenerator.java, instance info generator builder,public   ( int instance count  string .  .  .  app names )  {  this . instance count = instance count ;  this . app names = app names ;   }  ,141,4,generator,3,[]
7875,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\util\InstanceInfoGenerator.java, instance info generator builder,public   ( int instance count  string .  .  .  app names )  {  this . instance count = instance count ;  this . app names = app names ;   }  ,141,4,builder,4,[]
7876,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\util\InstanceInfoGenerator.java,build,public  instance info generator   (  )  {  return new  instance info generator ( this )  ;   }  ,96,1,build,1,[]
7877,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\util\InstanceInfoGenerator.java,first,public  instance info   (  )  {  return take ( 0 )  ;   }  ,59,1,first,1,[]
7878,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\util\InstanceInfoGenerator.java,generate instance info,"private  instance info   ( int app index int app instance id boolean use instance id )  {   string app name = app names[app index] ;   string host name = ""instance""  +  app instance id  +  ' . ' +  app name +  "" . com"" ;   string private hostname = ""ip - 10 . 0""  +  app index  +  "" . "" +  app instance id +  "" . compute . internal"" ;   string public ip = ""20 . 0 . ""  +  app index  +  ' . ' +  app instance id ;   string private ip = ""192 . 168 . ""  +  app index  +  ' . ' +  app instance id ;   string instance id =  string . format ( ""i - %04d%04d"" app index app instance id )  ;  if  ( tagged id )   {  instance id = instance id  +  '   '  +  app name ;   }   amazon info data center info =  amazon info .  builder . new builder (  )  . add metadata (  meta data key . account id ""test account id"" )  . add metadata (  meta data key . ami id  string . format ( ""ami - %04d%04d"" app index app instance id )  )  . add metadata (  meta data key . availability zone zone )  . add metadata (  meta data key . instance id instance id )  . add metadata (  meta data key . instance type ""m2 . xlarge"" )  . add metadata (  meta data key . local hostname private hostname )  . add metadata (  meta data key . local ipv4 private ip )  . add metadata (  meta data key . public hostname host name )  . add metadata (  meta data key . public ipv4 public ip )  . build (  )  ;   string unsecureurl = ""http: /  / ""  +  host name  +  "":8080"" ;   string secureurl = ""https: /  / ""  +  host name  +  "":8081"" ;  long now =  system . current time millis (  )  ;   lease info lease info =  lease info .  builder . new builder (  )  . set duration in secs ( 3 * renew   interval )  . set renewal interval in secs ( renew   interval )  . set service up timestamp ( now  -  renew   interval )  . set registration timestamp ( now )  . set eviction timestamp ( now  +  3 * renew   interval )  . set renewal timestamp ( now  +  renew   interval )  . build (  )  ;   builder builder = use instance id  ?   instance info .  builder . new builder (  )  . set instance id ( instance id )  :  instance info .  builder . new builder (  )  ;  builder . set action type (  action type . added )  . set app group name ( app name  +  "" group"" )  . set app name ( app name )  . set host name ( host name )  . setip addr ( public ip )  . set port ( 8080 )  . set secure port ( 8081 )  . enable port (  port type . secure true )  . set health check urls ( "" / healthcheck"" unsecureurl  +  "" / healthcheck"" secureurl  +  "" / healthcheck"" )  . set home page url ( "" / homepage"" unsecureurl  +  "" / homepage"" )  . set status page url ( "" / status"" unsecureurl  +  "" / status"" )  . set lease info ( lease info )  . set status (  instance status . up )  . setvip address ( app name  +  "":8080"" )  . set securevip address ( app name  +  "":8081"" )  . set data center info ( data center info )  . set last updated timestamp (  system . current time millis (  )   -  100 )  . set last dirty timestamp (  system . current time millis (  )   -  100 )  . set is coordinating discovery server ( true )  . enable port (  port type . unsecure true )  ;  if  ( include asg )   {  builder . setasg name ( app name  +  ""asg"" )  ;   }  if  ( with meta data )   {  builder . add ( ""app key""  +  app index  integer . to string ( app instance id )  )  ;   }  return builder . build (  )  ;   }  ",3336,3,generate,1,[]
7879,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\util\InstanceInfoGenerator.java,generate instance info,"private  instance info   ( int app index int app instance id boolean use instance id )  {   string app name = app names[app index] ;   string host name = ""instance""  +  app instance id  +  ' . ' +  app name +  "" . com"" ;   string private hostname = ""ip - 10 . 0""  +  app index  +  "" . "" +  app instance id +  "" . compute . internal"" ;   string public ip = ""20 . 0 . ""  +  app index  +  ' . ' +  app instance id ;   string private ip = ""192 . 168 . ""  +  app index  +  ' . ' +  app instance id ;   string instance id =  string . format ( ""i - %04d%04d"" app index app instance id )  ;  if  ( tagged id )   {  instance id = instance id  +  '   '  +  app name ;   }   amazon info data center info =  amazon info .  builder . new builder (  )  . add metadata (  meta data key . account id ""test account id"" )  . add metadata (  meta data key . ami id  string . format ( ""ami - %04d%04d"" app index app instance id )  )  . add metadata (  meta data key . availability zone zone )  . add metadata (  meta data key . instance id instance id )  . add metadata (  meta data key . instance type ""m2 . xlarge"" )  . add metadata (  meta data key . local hostname private hostname )  . add metadata (  meta data key . local ipv4 private ip )  . add metadata (  meta data key . public hostname host name )  . add metadata (  meta data key . public ipv4 public ip )  . build (  )  ;   string unsecureurl = ""http: /  / ""  +  host name  +  "":8080"" ;   string secureurl = ""https: /  / ""  +  host name  +  "":8081"" ;  long now =  system . current time millis (  )  ;   lease info lease info =  lease info .  builder . new builder (  )  . set duration in secs ( 3 * renew   interval )  . set renewal interval in secs ( renew   interval )  . set service up timestamp ( now  -  renew   interval )  . set registration timestamp ( now )  . set eviction timestamp ( now  +  3 * renew   interval )  . set renewal timestamp ( now  +  renew   interval )  . build (  )  ;   builder builder = use instance id  ?   instance info .  builder . new builder (  )  . set instance id ( instance id )  :  instance info .  builder . new builder (  )  ;  builder . set action type (  action type . added )  . set app group name ( app name  +  "" group"" )  . set app name ( app name )  . set host name ( host name )  . setip addr ( public ip )  . set port ( 8080 )  . set secure port ( 8081 )  . enable port (  port type . secure true )  . set health check urls ( "" / healthcheck"" unsecureurl  +  "" / healthcheck"" secureurl  +  "" / healthcheck"" )  . set home page url ( "" / homepage"" unsecureurl  +  "" / homepage"" )  . set status page url ( "" / status"" unsecureurl  +  "" / status"" )  . set lease info ( lease info )  . set status (  instance status . up )  . setvip address ( app name  +  "":8080"" )  . set securevip address ( app name  +  "":8081"" )  . set data center info ( data center info )  . set last updated timestamp (  system . current time millis (  )   -  100 )  . set last dirty timestamp (  system . current time millis (  )   -  100 )  . set is coordinating discovery server ( true )  . enable port (  port type . unsecure true )  ;  if  ( include asg )   {  builder . setasg name ( app name  +  ""asg"" )  ;   }  if  ( with meta data )   {  builder . add ( ""app key""  +  app index  integer . to string ( app instance id )  )  ;   }  return builder . build (  )  ;   }  ",3336,3,instance,2,"[9, 49, 73, 155, 173, 294, 399, 481, 504, 566, 607, 621, 896, 1008, 1020, 1069, 1964, 1981, 2032, 2046, 2064, 2688, 3275]"
7880,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\util\InstanceInfoGenerator.java,generate instance info,"private  instance info   ( int app index int app instance id boolean use instance id )  {   string app name = app names[app index] ;   string host name = ""instance""  +  app instance id  +  ' . ' +  app name +  "" . com"" ;   string private hostname = ""ip - 10 . 0""  +  app index  +  "" . "" +  app instance id +  "" . compute . internal"" ;   string public ip = ""20 . 0 . ""  +  app index  +  ' . ' +  app instance id ;   string private ip = ""192 . 168 . ""  +  app index  +  ' . ' +  app instance id ;   string instance id =  string . format ( ""i - %04d%04d"" app index app instance id )  ;  if  ( tagged id )   {  instance id = instance id  +  '   '  +  app name ;   }   amazon info data center info =  amazon info .  builder . new builder (  )  . add metadata (  meta data key . account id ""test account id"" )  . add metadata (  meta data key . ami id  string . format ( ""ami - %04d%04d"" app index app instance id )  )  . add metadata (  meta data key . availability zone zone )  . add metadata (  meta data key . instance id instance id )  . add metadata (  meta data key . instance type ""m2 . xlarge"" )  . add metadata (  meta data key . local hostname private hostname )  . add metadata (  meta data key . local ipv4 private ip )  . add metadata (  meta data key . public hostname host name )  . add metadata (  meta data key . public ipv4 public ip )  . build (  )  ;   string unsecureurl = ""http: /  / ""  +  host name  +  "":8080"" ;   string secureurl = ""https: /  / ""  +  host name  +  "":8081"" ;  long now =  system . current time millis (  )  ;   lease info lease info =  lease info .  builder . new builder (  )  . set duration in secs ( 3 * renew   interval )  . set renewal interval in secs ( renew   interval )  . set service up timestamp ( now  -  renew   interval )  . set registration timestamp ( now )  . set eviction timestamp ( now  +  3 * renew   interval )  . set renewal timestamp ( now  +  renew   interval )  . build (  )  ;   builder builder = use instance id  ?   instance info .  builder . new builder (  )  . set instance id ( instance id )  :  instance info .  builder . new builder (  )  ;  builder . set action type (  action type . added )  . set app group name ( app name  +  "" group"" )  . set app name ( app name )  . set host name ( host name )  . setip addr ( public ip )  . set port ( 8080 )  . set secure port ( 8081 )  . enable port (  port type . secure true )  . set health check urls ( "" / healthcheck"" unsecureurl  +  "" / healthcheck"" secureurl  +  "" / healthcheck"" )  . set home page url ( "" / homepage"" unsecureurl  +  "" / homepage"" )  . set status page url ( "" / status"" unsecureurl  +  "" / status"" )  . set lease info ( lease info )  . set status (  instance status . up )  . setvip address ( app name  +  "":8080"" )  . set securevip address ( app name  +  "":8081"" )  . set data center info ( data center info )  . set last updated timestamp (  system . current time millis (  )   -  100 )  . set last dirty timestamp (  system . current time millis (  )   -  100 )  . set is coordinating discovery server ( true )  . enable port (  port type . unsecure true )  ;  if  ( include asg )   {  builder . setasg name ( app name  +  ""asg"" )  ;   }  if  ( with meta data )   {  builder . add ( ""app key""  +  app index  integer . to string ( app instance id )  )  ;   }  return builder . build (  )  ;   }  ",3336,3,info,3,"[18, 671, 688, 703, 1553, 1564, 1578, 1990, 2073, 2651, 2664, 2823, 2842]"
7881,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\util\InstanceInfoGenerator.java,has next,@ override public boolean   (  )  {  return returned  <  instance count ;   }  ,79,2,has,1,[]
7882,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\util\InstanceInfoGenerator.java,has next,@ override public boolean   (  )  {  return returned  <  instance count ;   }  ,79,2,next,2,[]
7883,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\util\InstanceInfoGenerator.java,new builder,public static  instance info generator builder   ( int instance count  string .  .  .  app names )  {  return new  instance info generator builder ( instance count app names )  ;   }  ,184,2,new,1,[110]
7884,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\util\InstanceInfoGenerator.java,new builder,public static  instance info generator builder   ( int instance count  string .  .  .  app names )  {  return new  instance info generator builder ( instance count app names )  ;   }  ,184,2,builder,2,"[39, 139]"
7885,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\util\InstanceInfoGenerator.java,next,"@ override public  instance info   (  )  {  if  (  ! has next (  )  )   {  throw new  no such element exception ( ""no more  instance info elements"" )  ;   }   instance info to return = generate instance info ( current app app instance ids[current app] use",255,1,next,1,[57]
7886,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\util\InstanceInfoGenerator.java,remove,"@ override public void   (  )  {  throw new  illegal state exception ( ""method not supported"" )  ;   }  ",104,1,remove,1,[]
7887,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\util\InstanceInfoGenerator.java,service iterator,"public  iterator <  instance info >    (  )  {  return new  iterator <  instance info >  (  )  {  private int returned ;  private final int[] app instance ids = new int[app names . length] ;  private int current app ;  @ override public boolean has next (  )  {  return returned  <  instance count ;   }  @ override public  instance info next (  )  {  if  (  ! has next (  )  )   {  throw new  no such element exception ( ""no more  instance info elements"" )  ;   }   instance info to return = generate instance info ( current app app instance ids[current app] use instance id )  ;  app instance ids[current app] +  +  ;  current app =  ( current app  +  1 )  % app names . length ;  returned +  +  ;  return to return ;   }  @ override public void remove (  )  {  throw new  illegal state exception ( ""method not supported"" )  ;   }   }   ;   }  ",846,2,service,1,[]
7888,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\util\InstanceInfoGenerator.java,service iterator,"public  iterator <  instance info >    (  )  {  return new  iterator <  instance info >  (  )  {  private int returned ;  private final int[] app instance ids = new int[app names . length] ;  private int current app ;  @ override public boolean has next (  )  {  return returned  <  instance count ;   }  @ override public  instance info next (  )  {  if  (  ! has next (  )  )   {  throw new  no such element exception ( ""no more  instance info elements"" )  ;   }   instance info to return = generate instance info ( current app app instance ids[current app] use instance id )  ;  app instance ids[current app] +  +  ;  current app =  ( current app  +  1 )  % app names . length ;  returned +  +  ;  return to return ;   }  @ override public void remove (  )  {  throw new  illegal state exception ( ""method not supported"" )  ;   }   }   ;   }  ",846,2,iterator,2,"[8, 60]"
7889,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\util\InstanceInfoGenerator.java,take,public  instance info   ( int idx )  {  return to instance list (  )  . get ( idx )  ;   }  ,92,1,take,1,[]
7890,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\util\InstanceInfoGenerator.java,take delta,public  applications   ( int count )  {  if  ( current it  =  =  null )   {  current it = service iterator (  )  ;  all applications = new  applications (  )  ;   }   list <  instance info >  instance batch = new  array list <  instance info >  (  )  ;  for  ( int i = 0 ;  i  <  count ;  i +  +  )   {   instance info next = current it . next (  )  ;  next . set action type (  action type . added )  ;  instance batch . add ( next )  ;   }   applications next batch =  eureka entity functions . to applications ( to application map ( instance batch )  )  ;  all applications = merge applications ( all applications next batch )  ;  next batch . set apps hash code ( all applications . get apps hash code (  )  )  ;  return next batch ;   }  ,743,2,take,1,[]
7891,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\util\InstanceInfoGenerator.java,take delta,public  applications   ( int count )  {  if  ( current it  =  =  null )   {  current it = service iterator (  )  ;  all applications = new  applications (  )  ;   }   list <  instance info >  instance batch = new  array list <  instance info >  (  )  ;  for  ( int i = 0 ;  i  <  count ;  i +  +  )   {   instance info next = current it . next (  )  ;  next . set action type (  action type . added )  ;  instance batch . add ( next )  ;   }   applications next batch =  eureka entity functions . to applications ( to application map ( instance batch )  )  ;  all applications = merge applications ( all applications next batch )  ;  next batch . set apps hash code ( all applications . get apps hash code (  )  )  ;  return next batch ;   }  ,743,2,delta,2,[]
7892,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\util\InstanceInfoGenerator.java,take one,public static  instance info   (  )  {  return new builder ( 1 1 )  . with meta data ( true )  . build (  )  . service iterator (  )  . next (  )  ;   }  ,154,2,take,1,[]
7893,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\util\InstanceInfoGenerator.java,take one,public static  instance info   (  )  {  return new builder ( 1 1 )  . with meta data ( true )  . build (  )  . service iterator (  )  . next (  )  ;   }  ,154,2,one,2,[]
7894,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\util\InstanceInfoGenerator.java,to applications,public  applications   (  )  {   map <  string  application >  apps by name = new  hash map <  >  (  )  ;   iterator <  instance info >  it = service iterator (  )  ;  while  ( it . has next (  )  )   {   instance info instance info = it . next (  )  ;   application instance app = apps by name . get ( instance info . get app name (  )  )  ;  if  ( instance app  =  =  null )   {  instance app = new  application ( instance info . get app name (  )  )  ;  apps by name . put ( instance info . get app name (  )  instance app )  ;   }  instance app . add instance ( instance info )  ;   }   applications applications = new  applications (  )  ;  for  (   application app : apps by name . values (  )  )   {  applications . add application ( app )  ;   }  applications . shuffle instances ( false )  ;  applications . set apps hash code ( applications . get reconcile hash code (  )  )  ;  applications . set version ( 1l )  ;  return applications ;   }  ,954,2,to,1,"[113, 155]"
7895,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\util\InstanceInfoGenerator.java,to applications,public  applications   (  )  {   map <  string  application >  apps by name = new  hash map <  >  (  )  ;   iterator <  instance info >  it = service iterator (  )  ;  while  ( it . has next (  )  )   {   instance info instance info = it . next (  )  ;   application instance app = apps by name . get ( instance info . get app name (  )  )  ;  if  ( instance app  =  =  null )   {  instance app = new  application ( instance info . get app name (  )  )  ;  apps by name . put ( instance info . get app name (  )  instance app )  ;   }  instance app . add instance ( instance info )  ;   }   applications applications = new  applications (  )  ;  for  (   application app : apps by name . values (  )  )   {  applications . add application ( app )  ;   }  applications . shuffle instances ( false )  ;  applications . set apps hash code ( applications . get reconcile hash code (  )  )  ;  applications . set version ( 1l )  ;  return applications ;   }  ,954,2,applications,2,"[8, 591, 604, 624, 708, 755, 802, 838, 889, 934]"
7896,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\util\InstanceInfoGenerator.java,to instance list,public  list <  instance info >    (  )  {   list <  instance info >  result = new  array list <  >  ( instance count )  ;   iterator <  instance info >  it = service iterator (  )  ;  while  ( it . has next (  )  )   {   instance info instance info = it . next (  )  ;  result . add ( instance info )  ;   }  return result ;   }  ,331,3,to,1,"[130, 172]"
7897,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\util\InstanceInfoGenerator.java,to instance list,public  list <  instance info >    (  )  {   list <  instance info >  result = new  array list <  >  ( instance count )  ;   iterator <  instance info >  it = service iterator (  )  ;  while  ( it . has next (  )  )   {   instance info instance info = it . next (  )  ;  result . add ( instance info )  ;   }  return result ;   }  ,331,3,instance,2,"[16, 53, 103, 137, 222, 236, 286]"
7898,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\util\InstanceInfoGenerator.java,to instance list,public  list <  instance info >    (  )  {   list <  instance info >  result = new  array list <  >  ( instance count )  ;   iterator <  instance info >  it = service iterator (  )  ;  while  ( it . has next (  )  )   {   instance info instance info = it . next (  )  ;  result . add ( instance info )  ;   }  return result ;   }  ,331,3,list,3,"[8, 45, 90]"
7899,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\util\InstanceInfoGenerator.java,with asg,public  instance info generator builder   ( boolean include asg )  {  this . include asg = include asg ;  return this ;   }  ,125,2,with,1,[]
7900,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\util\InstanceInfoGenerator.java,with asg,public  instance info generator builder   ( boolean include asg )  {  this . include asg = include asg ;  return this ;   }  ,125,2,asg,2,"[60, 85, 99]"
7901,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\util\InstanceInfoGenerator.java,with meta data,public  instance info generator builder   ( boolean include meta data )  {  this . include meta data = include meta data ;  return this ;   }  ,143,3,with,1,[]
7902,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\util\InstanceInfoGenerator.java,with meta data,public  instance info generator builder   ( boolean include meta data )  {  this . include meta data = include meta data ;  return this ;   }  ,143,3,meta,2,"[60, 91, 111]"
7903,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\util\InstanceInfoGenerator.java,with meta data,public  instance info generator builder   ( boolean include meta data )  {  this . include meta data = include meta data ;  return this ;   }  ,143,3,data,3,"[65, 96, 116]"
7904,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\util\InstanceInfoGenerator.java,with tagged id,public  instance info generator builder   ( boolean tagged id )  {  this . tagged id = tagged id ;  return this ;   }  ,119,3,with,1,[]
7905,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\util\InstanceInfoGenerator.java,with tagged id,public  instance info generator builder   ( boolean tagged id )  {  this . tagged id = tagged id ;  return this ;   }  ,119,3,tagged,2,"[52, 75, 87]"
7906,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\util\InstanceInfoGenerator.java,with tagged id,public  instance info generator builder   ( boolean tagged id )  {  this . tagged id = tagged id ;  return this ;   }  ,119,3,id,3,"[59, 82, 94]"
7907,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\util\InstanceInfoGenerator.java,with use instance id,public  instance info generator builder   ( boolean use instance id )  {  this . use instance id = use instance id ;  return this ;   }  ,137,4,with,1,[]
7908,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\util\InstanceInfoGenerator.java,with use instance id,public  instance info generator builder   ( boolean use instance id )  {  this . use instance id = use instance id ;  return this ;   }  ,137,4,use,2,"[52, 81, 99]"
7909,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\util\InstanceInfoGenerator.java,with use instance id,public  instance info generator builder   ( boolean use instance id )  {  this . use instance id = use instance id ;  return this ;   }  ,137,4,instance,3,"[8, 56, 85, 103]"
7910,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\util\InstanceInfoGenerator.java,with use instance id,public  instance info generator builder   ( boolean use instance id )  {  this . use instance id = use instance id ;  return this ;   }  ,137,4,id,4,"[65, 94, 112]"
7911,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\util\InstanceInfoGenerator.java,with zone,public  instance info generator builder   (  string zone )  {  this . zone = zone ;  return this ;   }  ,104,2,with,1,[]
7912,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\util\InstanceInfoGenerator.java,with zone,public  instance info generator builder   (  string zone )  {  this . zone = zone ;  return this ;   }  ,104,2,zone,2,"[52, 70, 77]"
7913,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\util\ApplicationFunctions.java,application names,public static  set <  string >    (  applications applications )  {   set <  string >  names = new  hash set <  string >  (  )  ;  for  (   application application : applications . get registered applications (  )  )   {  names . add ( application . get name (  )  )  ;   }  return names ;   }  ,295,2,application,1,"[37, 50, 140, 152, 166, 196, 236]"
7914,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\util\ApplicationFunctions.java,application names,public static  set <  string >    (  applications applications )  {   set <  string >  names = new  hash set <  string >  (  )  ;  for  (   application application : applications . get registered applications (  )  )   {  names . add ( application . get name (  )  )  ;   }  return names ;   }  ,295,2,names,2,"[87, 222, 282]"
7915,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\util\ApplicationFunctions.java,copy of,public static  application   (  application application )  {   application copy = new  application ( application . get name (  )  )  ;  for  (   instance info instance : application . get instances (  )  )   {  copy . add instance ( instance )  ;   }  return copy ;   }  ,271,2,copy,1,"[75, 211, 259]"
7916,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\util\ApplicationFunctions.java,copy of,public static  application   (  application application )  {   application copy = new  application ( application . get name (  )  )  ;  for  (   instance info instance : application . get instances (  )  )   {  copy . add instance ( instance )  ;   }  return copy ;   }  ,271,2,of,2,[]
7917,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\util\ApplicationFunctions.java,count instances,public static int   (  applications applications )  {  int count = 0 ;  for  (   application application : applications . get registered applications (  )  )   {  count +  = application . get instances (  )  . size (  )  ;   }  return count ;   }  ,248,2,count,1,"[59, 163, 235]"
7918,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\util\ApplicationFunctions.java,count instances,public static int   (  applications applications )  {  int count = 0 ;  for  (   application application : applications . get registered applications (  )  )   {  count +  = application . get instances (  )  . size (  )  ;   }  return count ;   }  ,248,2,instances,2,[192]
7919,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\util\ApplicationFunctions.java,merge,public static  applications   (  applications first  applications second )  {   set <  string >  first names = application names ( first )  ;   set <  string >  second names = application names ( second )  ;   set <  string >  all names = new  hash set <  string >  ( first names )  ;  all names . add all ( second names )  ;   applications merged = new  applications (  )  ;  for  (   string app name : all names )   {  if  ( first names . contains ( app name )  )   {  if  ( second names . contains ( app name )  )   {  merged . add application ( merge ( first . get registered applications ( app name )  second . get registered applications ( app name )  )  )  ;   }  else  {  merged . add application ( copy of ( first . get registered applications ( app name )  )  )  ;   }   }  else  {  merged . add application ( copy of ( second . get registered applications ( app name )  )  )  ;   }   }  return update meta ( merged )  ;   }  ,936,1,merge,1,"[341, 522, 549, 680, 793, 919]"
7920,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\util\ApplicationFunctions.java,to application map,public static  map <  string  application >    (  list <  instance info >  instances )  {   map <  string  application >  application map = new  hash map <  string  application >  (  )  ;  for  (   instance info instance : instances )   {   string app name = instance . get app name (  )  ;   application application = application map . get ( app name )  ;  if  ( application  =  =  null )   {  application map . put ( app name application = new  application ( app name )  )  ;   }  application . add instance ( instance )  ;   }  return application map ;   }  ,561,3,to,1,[]
7921,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\util\ApplicationFunctions.java,to application map,public static  map <  string  application >    (  list <  instance info >  instances )  {   map <  string  application >  application map = new  hash map <  string  application >  (  )  ;  for  (   instance info instance : instances )   {   string app name = instance . get app name (  )  ;   application application = application map . get ( app name )  ;  if  ( application  =  =  null )   {  application map . put ( app name application = new  application ( app name )  )  ;   }  application . add instance ( instance )  ;   }  return application map ;   }  ,561,3,application,2,"[30, 107, 122, 165, 293, 305, 319, 364, 395, 428, 447, 483, 538]"
7922,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\util\ApplicationFunctions.java,to application map,public static  map <  string  application >    (  list <  instance info >  instances )  {   map <  string  application >  application map = new  hash map <  string  application >  (  )  ;  for  (   instance info instance : instances )   {   string app name = instance . get app name (  )  ;   application application = application map . get ( app name )  ;  if  ( application  =  =  null )   {  application map . put ( app name application = new  application ( app name )  )  ;   }  application . add instance ( instance )  ;   }  return application map ;   }  ,561,3,map,3,"[15, 92, 134, 150, 331, 407, 550]"
7923,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\util\ApplicationFunctions.java,to applications,public static  applications   (  map <  string  application >  application map )  {   applications applications = new  applications (  )  ;  for  (   application application : application map . values (  )  )   {  applications . add application ( application )  ;   }  return update meta ( applications )  ;   }  ,313,2,to,1,[]
7924,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\util\ApplicationFunctions.java,to applications,public static  applications   (  map <  string  application >  application map )  {   applications applications = new  applications (  )  ;  for  (   application application : application map . values (  )  )   {  applications . add application ( application )  ;   }  return update meta ( applications )  ;   }  ,313,2,applications,2,"[15, 86, 99, 119, 214, 290]"
7925,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\util\ApplicationFunctions.java,update meta,public static  applications   (  applications applications )  {  applications . set version ( 1l )  ;  applications . set apps hash code ( applications . get reconcile hash code (  )  )  ;  return applications ;   }  ,217,2,update,1,[]
7926,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\util\ApplicationFunctions.java,update meta,public static  applications   (  applications applications )  {  applications . set version ( 1l )  ;  applications . set apps hash code ( applications . get reconcile hash code (  )  )  ;  return applications ;   }  ,217,2,meta,2,[]
7927,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\test\java\com\netflix\discovery\util\InstanceInfoGeneratorTest.java,test instance info stream,"@ test public void   (  )  throws  exception  {   iterator <  instance info >  it =  instance info generator . new builder ( 4 ""app1"" ""app2"" )  . build (  )  . service iterator (  )  ;  assert that ( it . next (  )  . get app name (  )  is ( equal to ( ""a",255,4,test,1,[2]
7928,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\test\java\com\netflix\discovery\util\InstanceInfoGeneratorTest.java,test instance info stream,"@ test public void   (  )  throws  exception  {   iterator <  instance info >  it =  instance info generator . new builder ( 4 ""app1"" ""app2"" )  . build (  )  . service iterator (  )  ;  assert that ( it . next (  )  . get app name (  )  is ( equal to ( ""a",255,4,instance,2,"[62, 85]"
7929,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\test\java\com\netflix\discovery\util\InstanceInfoGeneratorTest.java,test instance info stream,"@ test public void   (  )  throws  exception  {   iterator <  instance info >  it =  instance info generator . new builder ( 4 ""app1"" ""app2"" )  . build (  )  . service iterator (  )  ;  assert that ( it . next (  )  . get app name (  )  is ( equal to ( ""a",255,4,info,3,"[71, 94]"
7930,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\test\java\com\netflix\discovery\util\InstanceInfoGeneratorTest.java,test instance info stream,"@ test public void   (  )  throws  exception  {   iterator <  instance info >  it =  instance info generator . new builder ( 4 ""app1"" ""app2"" )  . build (  )  . service iterator (  )  ;  assert that ( it . next (  )  . get app name (  )  is ( equal to ( ""a",255,4,stream,4,[]
7931,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\test\java\com\netflix\discovery\shared\transport\SimpleEurekaHttpServerTest.java,get eureka http client,"@ override protected  eureka http client   ( uri serviceuri )  {   preconditions . check state ( eureka http client  =  =  null "" eureka http client has been already created"" )  ;  http client factory =  jersey eureka http client factory . new builder (  ",255,4,get,1,[]
7932,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\test\java\com\netflix\discovery\shared\transport\SimpleEurekaHttpServerTest.java,get eureka http client,"@ override protected  eureka http client   ( uri serviceuri )  {   preconditions . check state ( eureka http client  =  =  null "" eureka http client has been already created"" )  ;  http client factory =  jersey eureka http client factory . new builder (  ",255,4,eureka,2,"[22, 97, 130, 211]"
7933,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\test\java\com\netflix\discovery\shared\transport\SimpleEurekaHttpServerTest.java,get eureka http client,"@ override protected  eureka http client   ( uri serviceuri )  {   preconditions . check state ( eureka http client  =  =  null "" eureka http client has been already created"" )  ;  http client factory =  jersey eureka http client factory . new builder (  ",255,4,http,3,"[29, 104, 137, 181, 218]"
7934,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\test\java\com\netflix\discovery\shared\transport\SimpleEurekaHttpServerTest.java,get eureka http client,"@ override protected  eureka http client   ( uri serviceuri )  {   preconditions . check state ( eureka http client  =  =  null "" eureka http client has been already created"" )  ;  http client factory =  jersey eureka http client factory . new builder (  ",255,4,client,4,"[34, 109, 142, 186, 223]"
7935,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\test\java\com\netflix\discovery\shared\transport\SimpleEurekaHttpServerTest.java,tear down,@ override @ after public void   (  )  throws  exception  {  http client factory . shutdown (  )  ;  super . tear down (  )  ;   }  ,132,2,tear,1,[109]
7936,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\test\java\com\netflix\discovery\shared\transport\SimpleEurekaHttpServerTest.java,tear down,@ override @ after public void   (  )  throws  exception  {  http client factory . shutdown (  )  ;  super . tear down (  )  ;   }  ,132,2,down,2,"[87, 114]"
7937,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\SimpleEurekaHttpServer.java, simple eureka http server,"public   (  eureka http client request handler  eureka transport event listener event listener )  throws io exception  {  this . request handler = request handler ;  this . event listener = event listener ;  this . http server =  http server . create ( new  inet socket address ( 0 )  1 )  ;  http server . create context ( "" / v2"" create eurekav2 handle (  )  )  ;  http server . set executor ( null )  ;  http server . start (  )  ;   }  ",440,4,simple,1,[]
7938,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\SimpleEurekaHttpServer.java, simple eureka http server,"public   (  eureka http client request handler  eureka transport event listener event listener )  throws io exception  {  this . request handler = request handler ;  this . event listener = event listener ;  this . http server =  http server . create ( new  inet socket address ( 0 )  1 )  ;  http server . create context ( "" / v2"" create eurekav2 handle (  )  )  ;  http server . set executor ( null )  ;  http server . start (  )  ;   }  ",440,4,eureka,2,"[12, 48, 339]"
7939,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\SimpleEurekaHttpServer.java, simple eureka http server,"public   (  eureka http client request handler  eureka transport event listener event listener )  throws io exception  {  this . request handler = request handler ;  this . event listener = event listener ;  this . http server =  http server . create ( new  inet socket address ( 0 )  1 )  ;  http server . create context ( "" / v2"" create eurekav2 handle (  )  )  ;  http server . set executor ( null )  ;  http server . start (  )  ;   }  ",440,4,http,3,"[19, 215, 230, 293, 367, 407]"
7940,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\SimpleEurekaHttpServer.java, simple eureka http server,"public   (  eureka http client request handler  eureka transport event listener event listener )  throws io exception  {  this . request handler = request handler ;  this . event listener = event listener ;  this . http server =  http server . create ( new  inet socket address ( 0 )  1 )  ;  http server . create context ( "" / v2"" create eurekav2 handle (  )  )  ;  http server . set executor ( null )  ;  http server . start (  )  ;   }  ",440,4,server,4,"[220, 235, 298, 372, 412]"
7941,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\SimpleEurekaHttpServer.java,create eurekav handle,"private  http handler   (  )  {  return new  http handler (  )  {  @ override public void handle (   http exchange http exchange )  throws io exception  {  if  ( event listener  !  =  null )   {  event listener . on http request ( map to eureka http request ( http exchange )  )  ;   }  try  {   string method = http exchange . get request method (  )  ;   string path = http exchange . get requesturi (  )  . get path (  )  ;  if  ( path . starts with ( "" / v2 / apps"" )  )   {  if  ( ""get"" . equals ( method )  )   {  handle appsget ( http exchange )  ;   }  else if  ( ""post"" . equals ( method )  )   {  handle apps post ( http exchange )  ;   }  else if  ( ""put"" . equals ( method )  )   {  handle apps put ( http exchange )  ;   }  else if  ( ""delete"" . equals ( method )  )   {  handle apps delete ( http exchange )  ;   }  else  {  http exchange . send response headers (  http servlet response . sc   not   found 0 )  ;   }   }  else if  ( path . starts with ( "" / v2 / vips"" )  )   {  handle vipsget ( http exchange )  ;   }  else if  ( path . starts with ( "" / v2 / svips"" )  )   {  handle secure vipsget ( http exchange )  ;   }  else if  ( path . starts with ( "" / v2 / instances"" )  )   {  handle instanceget ( http exchange )  ;   }   }  catch  (   exception e )   {  logger . error ( "" http server error"" e )  ;  http exchange . send response headers ( 500 0 )  ;   }  http exchange . close (  )  ;   }   }   ;   }  ",1431,3,create,1,[]
7942,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\SimpleEurekaHttpServer.java,create eurekav handle,"private  http handler   (  )  {  return new  http handler (  )  {  @ override public void handle (   http exchange http exchange )  throws io exception  {  if  ( event listener  !  =  null )   {  event listener . on http request ( map to eureka http request ( http exchange )  )  ;   }  try  {   string method = http exchange . get request method (  )  ;   string path = http exchange . get requesturi (  )  . get path (  )  ;  if  ( path . starts with ( "" / v2 / apps"" )  )   {  if  ( ""get"" . equals ( method )  )   {  handle appsget ( http exchange )  ;   }  else if  ( ""post"" . equals ( method )  )   {  handle apps post ( http exchange )  ;   }  else if  ( ""put"" . equals ( method )  )   {  handle apps put ( http exchange )  ;   }  else if  ( ""delete"" . equals ( method )  )   {  handle apps delete ( http exchange )  ;   }  else  {  http exchange . send response headers (  http servlet response . sc   not   found 0 )  ;   }   }  else if  ( path . starts with ( "" / v2 / vips"" )  )   {  handle vipsget ( http exchange )  ;   }  else if  ( path . starts with ( "" / v2 / svips"" )  )   {  handle secure vipsget ( http exchange )  ;   }  else if  ( path . starts with ( "" / v2 / instances"" )  )   {  handle instanceget ( http exchange )  ;   }   }  catch  (   exception e )   {  logger . error ( "" http server error"" e )  ;  http exchange . send response headers ( 500 0 )  ;   }  http exchange . close (  )  ;   }   }   ;   }  ",1431,3,eurekav,2,[]
7943,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\SimpleEurekaHttpServer.java,create eurekav handle,"private  http handler   (  )  {  return new  http handler (  )  {  @ override public void handle (   http exchange http exchange )  throws io exception  {  if  ( event listener  !  =  null )   {  event listener . on http request ( map to eureka http request ( http exchange )  )  ;   }  try  {   string method = http exchange . get request method (  )  ;   string path = http exchange . get requesturi (  )  . get path (  )  ;  if  ( path . starts with ( "" / v2 / apps"" )  )   {  if  ( ""get"" . equals ( method )  )   {  handle appsget ( http exchange )  ;   }  else if  ( ""post"" . equals ( method )  )   {  handle apps post ( http exchange )  ;   }  else if  ( ""put"" . equals ( method )  )   {  handle apps put ( http exchange )  ;   }  else if  ( ""delete"" . equals ( method )  )   {  handle apps delete ( http exchange )  ;   }  else  {  http exchange . send response headers (  http servlet response . sc   not   found 0 )  ;   }   }  else if  ( path . starts with ( "" / v2 / vips"" )  )   {  handle vipsget ( http exchange )  ;   }  else if  ( path . starts with ( "" / v2 / svips"" )  )   {  handle secure vipsget ( http exchange )  ;   }  else if  ( path . starts with ( "" / v2 / instances"" )  )   {  handle instanceget ( http exchange )  ;   }   }  catch  (   exception e )   {  logger . error ( "" http server error"" e )  ;  http exchange . send response headers ( 500 0 )  ;   }  http exchange . close (  )  ;   }   }   ;   }  ",1431,3,handle,3,"[14, 50, 90, 520, 607, 695, 785, 994, 1093, 1203]"
7944,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\SimpleEurekaHttpServer.java,get query param,"private static  string   (  http exchange http exchange  string query param )  {   string query = http exchange . get requesturi (  )  . get query (  )  ;  if  ( query  !  =  null )   {  for  (   string part : query . split ( ""&"" )  )   {   string[] key value = part . split ( "" = "" )  ;  if  ( key value . length  >  1 && key value[0] . equals ( query param )  )   {  return key value[1] ;   }   }   }  return null ;   }  ",423,3,get,1,"[114, 137]"
7945,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\SimpleEurekaHttpServer.java,get query param,"private static  string   (  http exchange http exchange  string query param )  {   string query = http exchange . get requesturi (  )  . get query (  )  ;  if  ( query  !  =  null )   {  for  (   string part : query . split ( ""&"" )  )   {   string[] key value = part . split ( "" = "" )  ;  if  ( key value . length  >  1 && key value[0] . equals ( query param )  )   {  return key value[1] ;   }   }   }  return null ;   }  ",423,3,query,2,"[64, 90, 141, 162, 210, 347]"
7946,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\SimpleEurekaHttpServer.java,get query param,"private static  string   (  http exchange http exchange  string query param )  {   string query = http exchange . get requesturi (  )  . get query (  )  ;  if  ( query  !  =  null )   {  for  (   string part : query . split ( ""&"" )  )   {   string[] key value = part . split ( "" = "" )  ;  if  ( key value . length  >  1 && key value[0] . equals ( query param )  )   {  return key value[1] ;   }   }   }  return null ;   }  ",423,3,param,3,"[70, 353]"
7947,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\SimpleEurekaHttpServer.java,get server port,public int   (  )  {  return http server . get address (  )  . get port (  )  ;   }  ,85,3,get,1,"[43, 63]"
7948,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\SimpleEurekaHttpServer.java,get server port,public int   (  )  {  return http server . get address (  )  . get port (  )  ;   }  ,85,3,server,2,[34]
7949,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\SimpleEurekaHttpServer.java,get server port,public int   (  )  {  return http server . get address (  )  . get port (  )  ;   }  ,85,3,port,3,[67]
7950,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\SimpleEurekaHttpServer.java,get serviceuri,"public uri   (  )  {  try  {  return new uri ( ""http: /  / localhost:""  +  get server port (  )   +  "" / v2 / "" )  ;   }  catch  (  uri syntax exception e )   {  throw new  illegal state exception ( "" cannot parse service uri"" e )  ;   }   }  ",243,2,get,1,[75]
7951,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\SimpleEurekaHttpServer.java,get serviceuri,"public uri   (  )  {  try  {  return new uri ( ""http: /  / localhost:""  +  get server port (  )   +  "" / v2 / "" )  ;   }  catch  (  uri syntax exception e )   {  throw new  illegal state exception ( "" cannot parse service uri"" e )  ;   }   }  ",243,2,serviceuri,2,[]
7952,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\SimpleEurekaHttpServer.java,handle,@ override public void   (  http exchange http exchange )  throws io exception  {  if  ( event listener  !  =  null )   {  event listener . on http request ( map to eureka http request ( http exchange )  )  ;   }  try  {   string method = http exchange . ,255,1,handle,1,[]
7953,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\SimpleEurekaHttpServer.java,handle apps delete,"private void   (  http exchange http exchange )  throws io exception  {   eureka http response <  ?  >  http response ;   string path = http exchange . get requesturi (  )  . get path (  )  ;   matcher matcher ;  if  (  ( matcher =  pattern . compile ( "" / v2 / apps /  ( [^ / ] +  )  /  ( [^ / ] +  ) "" )  . matcher ( path )  )  . matches (  )  )   {  http response = request handler . cancel ( matcher . group ( 1 )  matcher . group ( 2 )  )  ;   }  else if  (  ( matcher =  pattern . compile ( "" / v2 / apps /  ( [^ / ] +  )  /  ( [^ / ] +  )  / status"" )  . matcher ( path )  )  . matches (  )  )   {  http response = request handler . delete status override ( matcher . group ( 1 )  matcher . group ( 2 )  null )  ;   }  else  {  http exchange . send response headers (  http servlet response . sc   not   found 0 )  ;  return ;   }  map response ( http exchange http response )  ;   }  ",892,3,handle,1,"[377, 630]"
7954,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\SimpleEurekaHttpServer.java,handle apps delete,"private void   (  http exchange http exchange )  throws io exception  {   eureka http response <  ?  >  http response ;   string path = http exchange . get requesturi (  )  . get path (  )  ;   matcher matcher ;  if  (  ( matcher =  pattern . compile ( "" / v2 / apps /  ( [^ / ] +  )  /  ( [^ / ] +  ) "" )  . matcher ( path )  )  . matches (  )  )   {  http response = request handler . cancel ( matcher . group ( 1 )  matcher . group ( 2 )  )  ;   }  else if  (  ( matcher =  pattern . compile ( "" / v2 / apps /  ( [^ / ] +  )  /  ( [^ / ] +  )  / status"" )  . matcher ( path )  )  . matches (  )  )   {  http response = request handler . delete status override ( matcher . group ( 1 )  matcher . group ( 2 )  null )  ;   }  else  {  http exchange . send response headers (  http servlet response . sc   not   found 0 )  ;  return ;   }  map response ( http exchange http response )  ;   }  ",892,3,apps,2,"[262, 506]"
7955,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\SimpleEurekaHttpServer.java,handle apps delete,"private void   (  http exchange http exchange )  throws io exception  {   eureka http response <  ?  >  http response ;   string path = http exchange . get requesturi (  )  . get path (  )  ;   matcher matcher ;  if  (  ( matcher =  pattern . compile ( "" / v2 / apps /  ( [^ / ] +  )  /  ( [^ / ] +  ) "" )  . matcher ( path )  )  . matches (  )  )   {  http response = request handler . cancel ( matcher . group ( 1 )  matcher . group ( 2 )  )  ;   }  else if  (  ( matcher =  pattern . compile ( "" / v2 / apps /  ( [^ / ] +  )  /  ( [^ / ] +  )  / status"" )  . matcher ( path )  )  . matches (  )  )   {  http response = request handler . delete status override ( matcher . group ( 1 )  matcher . group ( 2 )  null )  ;   }  else  {  http exchange . send response headers (  http servlet response . sc   not   found 0 )  ;  return ;   }  map response ( http exchange http response )  ;   }  ",892,3,delete,3,[640]
7956,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\SimpleEurekaHttpServer.java,handle appsget,"private void   (  http exchange http exchange )  throws io exception  {   eureka http response <  ?  >  http response ;   string path = http exchange . get requesturi (  )  . get path (  )  ;   matcher matcher ;  if  ( path . matches ( "" / v2 / apps[ / ] ? "" )  )   {   string regions = get query param ( http exchange ""regions"" )  ;  http response = regions  =  =  null  ?  request handler . get applications (  )  : request handler . get applications ( regions )  ;   }  else if  ( path . matches ( "" / v2 / apps / delta[ / ] ? "" )  )   {   string regions = get query param ( http exchange ""regions"" )  ;  http response = regions  =  =  null  ?  request handler . get delta (  )  : request handler . get delta ( regions )  ;   }  else if  (  ( matcher =  pattern . compile ( "" / v2 / apps /  ( [^ / ] +  )  /  ( [^ / ] +  ) "" )  . matcher ( path )  )  . matches (  )  )   {  http response = request handler . get instance ( matcher . group ( 1 )  matcher . group ( 2 )  )  ;   }  else  {  http exchange . send response headers (  http servlet response . sc   not   found 0 )  ;  return ;   }  if  ( http response  =  =  null )   {  http response =  eureka http response . an eureka http response (  http servlet response . sc   not   found )  . build (  )  ;   }  map response ( http exchange http response )  ;   }  ",1319,2,handle,1,"[383, 426, 656, 692, 901]"
7957,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\SimpleEurekaHttpServer.java,handle appsget,"private void   (  http exchange http exchange )  throws io exception  {   eureka http response <  ?  >  http response ;   string path = http exchange . get requesturi (  )  . get path (  )  ;   matcher matcher ;  if  ( path . matches ( "" / v2 / apps[ / ] ? "" )  )   {   string regions = get query param ( http exchange ""regions"" )  ;  http response = regions  =  =  null  ?  request handler . get applications (  )  : request handler . get applications ( regions )  ;   }  else if  ( path . matches ( "" / v2 / apps / delta[ / ] ? "" )  )   {   string regions = get query param ( http exchange ""regions"" )  ;  http response = regions  =  =  null  ?  request handler . get delta (  )  : request handler . get delta ( regions )  ;   }  else if  (  ( matcher =  pattern . compile ( "" / v2 / apps /  ( [^ / ] +  )  /  ( [^ / ] +  ) "" )  . matcher ( path )  )  . matches (  )  )   {  http response = request handler . get instance ( matcher . group ( 1 )  matcher . group ( 2 )  )  ;   }  else  {  http exchange . send response headers (  http servlet response . sc   not   found 0 )  ;  return ;   }  if  ( http response  =  =  null )   {  http response =  eureka http response . an eureka http response (  http servlet response . sc   not   found )  . build (  )  ;   }  map response ( http exchange http response )  ;   }  ",1319,2,appsget,2,[]
7958,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\SimpleEurekaHttpServer.java,handle apps post,"private void   (  http exchange http exchange )  throws io exception  {   eureka http response <  ?  >  http response ;   string path = http exchange . get requesturi (  )  . get path (  )  ;  if  ( path . matches ( "" / v2 / apps /  ( [^ / ] +  )  (  /  )  ? "" )  )   {   instance info instance = decoder . decode ( http exchange . get request body (  )   instance info . class )  ;  http response = request handler . register ( instance )  ;   }  else  {  http exchange . send response headers (  http servlet response . sc   not   found 0 )  ;  return ;   }  map response ( http exchange http response )  ;   }  ",614,3,handle,1,[408]
7959,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\SimpleEurekaHttpServer.java,handle apps post,"private void   (  http exchange http exchange )  throws io exception  {   eureka http response <  ?  >  http response ;   string path = http exchange . get requesturi (  )  . get path (  )  ;  if  ( path . matches ( "" / v2 / apps /  ( [^ / ] +  )  (  /  )  ? "" )  )   {   instance info instance = decoder . decode ( http exchange . get request body (  )   instance info . class )  ;  http response = request handler . register ( instance )  ;   }  else  {  http exchange . send response headers (  http servlet response . sc   not   found 0 )  ;  return ;   }  map response ( http exchange http response )  ;   }  ",614,3,apps,2,[225]
7960,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\SimpleEurekaHttpServer.java,handle apps post,"private void   (  http exchange http exchange )  throws io exception  {   eureka http response <  ?  >  http response ;   string path = http exchange . get requesturi (  )  . get path (  )  ;  if  ( path . matches ( "" / v2 / apps /  ( [^ / ] +  )  (  /  )  ? "" )  )   {   instance info instance = decoder . decode ( http exchange . get request body (  )   instance info . class )  ;  http response = request handler . register ( instance )  ;   }  else  {  http exchange . send response headers (  http servlet response . sc   not   found 0 )  ;  return ;   }  map response ( http exchange http response )  ;   }  ",614,3,post,3,[]
7961,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\SimpleEurekaHttpServer.java,handle apps put,"private void   (  http exchange http exchange )  throws io exception  {   eureka http response <  ?  >  http response ;   string path = http exchange . get requesturi (  )  . get path (  )  ;   matcher matcher ;  if  (  ( matcher =  pattern . compile ( "" / v2 / apps /  ( [^ / ] +  )  /  ( [^ / ] +  ) "" )  . matcher ( path )  )  . matches (  )  )   {   string overriddenstatus = get query param ( http exchange ""overriddenstatus"" )  ;  http response = request handler . send heart beat ( matcher . group ( 1 )  matcher . group ( 2 )  null overriddenstatus  =  =  null  ?  null :  instance status . value of ( overriddenstatus )  )  ;   }  else if  (  ( matcher =  pattern . compile ( "" / v2 / apps /  ( [^ / ] +  )  /  ( [^ / ] +  )  / status"" )  . matcher ( path )  )  . matches (  )  )   {   string new status = get query param ( http exchange ""value"" )  ;  http response = request handler . status update ( matcher . group ( 1 )  matcher . group ( 2 )  new status  =  =  null  ?  null :  instance status . value of ( new status )  null )  ;   }  else  {  http exchange . send response headers (  http servlet response . sc   not   found 0 )  ;  return ;   }  map response ( http exchange http response )  ;   }  ",1216,3,handle,1,"[461, 885]"
7962,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\SimpleEurekaHttpServer.java,handle apps put,"private void   (  http exchange http exchange )  throws io exception  {   eureka http response <  ?  >  http response ;   string path = http exchange . get requesturi (  )  . get path (  )  ;   matcher matcher ;  if  (  ( matcher =  pattern . compile ( "" / v2 / apps /  ( [^ / ] +  )  /  ( [^ / ] +  ) "" )  . matcher ( path )  )  . matches (  )  )   {   string overriddenstatus = get query param ( http exchange ""overriddenstatus"" )  ;  http response = request handler . send heart beat ( matcher . group ( 1 )  matcher . group ( 2 )  null overriddenstatus  =  =  null  ?  null :  instance status . value of ( overriddenstatus )  )  ;   }  else if  (  ( matcher =  pattern . compile ( "" / v2 / apps /  ( [^ / ] +  )  /  ( [^ / ] +  )  / status"" )  . matcher ( path )  )  . matches (  )  )   {   string new status = get query param ( http exchange ""value"" )  ;  http response = request handler . status update ( matcher . group ( 1 )  matcher . group ( 2 )  new status  =  =  null  ?  null :  instance status . value of ( new status )  null )  ;   }  else  {  http exchange . send response headers (  http servlet response . sc   not   found 0 )  ;  return ;   }  map response ( http exchange http response )  ;   }  ",1216,3,apps,2,"[262, 694]"
7963,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\SimpleEurekaHttpServer.java,handle apps put,"private void   (  http exchange http exchange )  throws io exception  {   eureka http response <  ?  >  http response ;   string path = http exchange . get requesturi (  )  . get path (  )  ;   matcher matcher ;  if  (  ( matcher =  pattern . compile ( "" / v2 / apps /  ( [^ / ] +  )  /  ( [^ / ] +  ) "" )  . matcher ( path )  )  . matches (  )  )   {   string overriddenstatus = get query param ( http exchange ""overriddenstatus"" )  ;  http response = request handler . send heart beat ( matcher . group ( 1 )  matcher . group ( 2 )  null overriddenstatus  =  =  null  ?  null :  instance status . value of ( overriddenstatus )  )  ;   }  else if  (  ( matcher =  pattern . compile ( "" / v2 / apps /  ( [^ / ] +  )  /  ( [^ / ] +  )  / status"" )  . matcher ( path )  )  . matches (  )  )   {   string new status = get query param ( http exchange ""value"" )  ;  http response = request handler . status update ( matcher . group ( 1 )  matcher . group ( 2 )  new status  =  =  null  ?  null :  instance status . value of ( new status )  null )  ;   }  else  {  http exchange . send response headers (  http servlet response . sc   not   found 0 )  ;  return ;   }  map response ( http exchange http response )  ;   }  ",1216,3,put,3,[]
7964,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\SimpleEurekaHttpServer.java,handle instanceget,"private void   (  http exchange http exchange )  throws io exception  {   matcher matcher =  pattern . compile ( "" / v2 / instances /  ( [^ / ] +  ) "" )  . matcher ( http exchange . get requesturi (  )  . get path (  )  )  ;  if  ( matcher . matches (  )  )   {  map response ( http exchange request handler . get instance ( matcher . group ( 1 )  )  )  ;   }  else  {  http exchange . send response headers (  http servlet response . sc   not   found 0 )  ;   }   }  ",468,2,handle,1,[300]
7965,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\SimpleEurekaHttpServer.java,handle instanceget,"private void   (  http exchange http exchange )  throws io exception  {   matcher matcher =  pattern . compile ( "" / v2 / instances /  ( [^ / ] +  ) "" )  . matcher ( http exchange . get requesturi (  )  . get path (  )  )  ;  if  ( matcher . matches (  )  )   {  map response ( http exchange request handler . get instance ( matcher . group ( 1 )  )  )  ;   }  else  {  http exchange . send response headers (  http servlet response . sc   not   found 0 )  ;   }   }  ",468,2,instanceget,2,[]
7966,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\SimpleEurekaHttpServer.java,handle secure vipsget,"private void   (  http exchange http exchange )  throws io exception  {   matcher matcher =  pattern . compile ( "" / v2 / svips /  ( [^ / ] +  ) "" )  . matcher ( http exchange . get requesturi (  )  . get path (  )  )  ;  if  ( matcher . matches (  )  )   {   string regions = get query param ( http exchange ""regions"" )  ;   eureka http response <  applications >  http response = regions  =  =  null  ?  request handler . get secure vip ( matcher . group ( 1 )  )  : request handler . get secure vip ( matcher . group ( 1 )  regions )  ;  map response ( http exchange http response )  ;   }  else  {  http exchange . send response headers (  http servlet response . sc   not   found 0 )  ;   }   }  ",701,3,handle,1,"[414, 477]"
7967,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\SimpleEurekaHttpServer.java,handle secure vipsget,"private void   (  http exchange http exchange )  throws io exception  {   matcher matcher =  pattern . compile ( "" / v2 / svips /  ( [^ / ] +  ) "" )  . matcher ( http exchange . get requesturi (  )  . get path (  )  )  ;  if  ( matcher . matches (  )  )   {   string regions = get query param ( http exchange ""regions"" )  ;   eureka http response <  applications >  http response = regions  =  =  null  ?  request handler . get secure vip ( matcher . group ( 1 )  )  : request handler . get secure vip ( matcher . group ( 1 )  regions )  ;  map response ( http exchange http response )  ;   }  else  {  http exchange . send response headers (  http servlet response . sc   not   found 0 )  ;   }   }  ",701,3,secure,2,"[428, 491]"
7968,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\SimpleEurekaHttpServer.java,handle secure vipsget,"private void   (  http exchange http exchange )  throws io exception  {   matcher matcher =  pattern . compile ( "" / v2 / svips /  ( [^ / ] +  ) "" )  . matcher ( http exchange . get requesturi (  )  . get path (  )  )  ;  if  ( matcher . matches (  )  )   {   string regions = get query param ( http exchange ""regions"" )  ;   eureka http response <  applications >  http response = regions  =  =  null  ?  request handler . get secure vip ( matcher . group ( 1 )  )  : request handler . get secure vip ( matcher . group ( 1 )  regions )  ;  map response ( http exchange http response )  ;   }  else  {  http exchange . send response headers (  http servlet response . sc   not   found 0 )  ;   }   }  ",701,3,vipsget,3,[]
7969,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\SimpleEurekaHttpServer.java,handle vipsget,"private void   (  http exchange http exchange )  throws io exception  {   matcher matcher =  pattern . compile ( "" / v2 / vips /  ( [^ / ] +  ) "" )  . matcher ( http exchange . get requesturi (  )  . get path (  )  )  ;  if  ( matcher . matches (  )  )   {   string regions = get query param ( http exchange ""regions"" )  ;   eureka http response <  applications >  http response = regions  =  =  null  ?  request handler . get vip ( matcher . group ( 1 )  )  : request handler . get vip ( matcher . group ( 1 )  regions )  ;  map response ( http exchange http response )  ;   }  else  {  http exchange . send response headers (  http servlet response . sc   not   found 0 )  ;   }   }  ",686,2,handle,1,"[413, 469]"
7970,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\SimpleEurekaHttpServer.java,handle vipsget,"private void   (  http exchange http exchange )  throws io exception  {   matcher matcher =  pattern . compile ( "" / v2 / vips /  ( [^ / ] +  ) "" )  . matcher ( http exchange . get requesturi (  )  . get path (  )  )  ;  if  ( matcher . matches (  )  )   {   string regions = get query param ( http exchange ""regions"" )  ;   eureka http response <  applications >  http response = regions  =  =  null  ?  request handler . get vip ( matcher . group ( 1 )  )  : request handler . get vip ( matcher . group ( 1 )  regions )  ;  map response ( http exchange http response )  ;   }  else  {  http exchange . send response headers (  http servlet response . sc   not   found 0 )  ;   }   }  ",686,2,vipsget,2,[]
7971,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\SimpleEurekaHttpServer.java,map response,private  < t > void   (  http exchange http exchange  eureka http response < t >  response )  throws io exception  {  for  (   map .  entry <  string  string >  header entry : response . get headers (  )  . entry set (  )  )   {  http exchange . get response headers (  )  . add ( header entry . get key (  )  header entry . get value (  )  )  ;   }  if  ( response . get status code (  )   /  100  !  =  2 )   {  http exchange . send response headers ( response . get status code (  )  0 )  ;  return ;   }  t entity = response . get entity (  )  ;  byte[] body = null ;  if  ( entity  !  =  null )   {   byte array output stream bos = new  byte array output stream (  )  ;  encoder . encode ( entity bos )  ;  body = bos . to byte array (  )  ;   }  http exchange . send response headers ( response . get status code (  )  body  =  =  null  ?  0 : body . length )  ;  if  ( body  !  =  null )   {   output stream response stream = http exchange . get response body (  )  ;  try  {  response stream . write ( body )  ;  response stream . flush (  )  ;   }  finally  {  response stream . close (  )  ;   }   }   }  ,1115,2,map,1,[127]
7972,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\SimpleEurekaHttpServer.java,map response,private  < t > void   (  http exchange http exchange  eureka http response < t >  response )  throws io exception  {  for  (   map .  entry <  string  string >  header entry : response . get headers (  )  . entry set (  )  )   {  http exchange . get response headers (  )  . add ( header entry . get key (  )  header entry . get value (  )  )  ;   }  if  ( response . get status code (  )   /  100  !  =  2 )   {  http exchange . send response headers ( response . get status code (  )  0 )  ;  return ;   }  t entity = response . get entity (  )  ;  byte[] body = null ;  if  ( entity  !  =  null )   {   byte array output stream bos = new  byte array output stream (  )  ;  encoder . encode ( entity bos )  ;  body = bos . to byte array (  )  ;   }  http exchange . send response headers ( response . get status code (  )  body  =  =  null  ?  0 : body . length )  ;  if  ( body  !  =  null )   {   output stream response stream = http exchange . get response body (  )  ;  try  {  response stream . write ( body )  ;  response stream . flush (  )  ;   }  finally  {  response stream . close (  )  ;   }   }   }  ,1115,2,response,2,"[66, 82, 176, 250, 357, 435, 454, 520, 773, 792, 915, 953, 984, 1021, 1070]"
7973,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\SimpleEurekaHttpServer.java,map to eureka http request,private  eureka http request   (  http exchange http exchange )  {   headers exchange headers = http exchange . get request headers (  )  ;   map <  string  string >  headers = new  hash map <  >  (  )  ;  for  (   string key : exchange headers . key set (  )  )   {  headers . put ( key exchange headers . get first ( key )  )  ;   }  return new  eureka http request ( http exchange . get request method (  )  http exchange . get requesturi (  )  headers )  ;   }  ,466,5,map,1,"[142, 187]"
7974,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\SimpleEurekaHttpServer.java,map to eureka http request,private  eureka http request   (  http exchange http exchange )  {   headers exchange headers = http exchange . get request headers (  )  ;   map <  string  string >  headers = new  hash map <  >  (  )  ;  for  (   string key : exchange headers . key set (  )  )   {  headers . put ( key exchange headers . get first ( key )  )  ;   }  return new  eureka http request ( http exchange . get request method (  )  http exchange . get requesturi (  )  headers )  ;   }  ,466,5,to,2,[]
7975,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\SimpleEurekaHttpServer.java,map to eureka http request,private  eureka http request   (  http exchange http exchange )  {   headers exchange headers = http exchange . get request headers (  )  ;   map <  string  string >  headers = new  hash map <  >  (  )  ;  for  (   string key : exchange headers . key set (  )  )   {  headers . put ( key exchange headers . get first ( key )  )  ;   }  return new  eureka http request ( http exchange . get request method (  )  http exchange . get requesturi (  )  headers )  ;   }  ,466,5,eureka,3,"[9, 348]"
7976,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\SimpleEurekaHttpServer.java,map to eureka http request,private  eureka http request   (  http exchange http exchange )  {   headers exchange headers = http exchange . get request headers (  )  ;   map <  string  string >  headers = new  hash map <  >  (  )  ;  for  (   string key : exchange headers . key set (  )  )   {  headers . put ( key exchange headers . get first ( key )  )  ;   }  return new  eureka http request ( http exchange . get request method (  )  http exchange . get requesturi (  )  headers )  ;   }  ,466,5,http,4,"[16, 34, 48, 96, 355, 370, 411]"
7977,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\SimpleEurekaHttpServer.java,map to eureka http request,private  eureka http request   (  http exchange http exchange )  {   headers exchange headers = http exchange . get request headers (  )  ;   map <  string  string >  headers = new  hash map <  >  (  )  ;  for  (   string key : exchange headers . key set (  )  )   {  headers . put ( key exchange headers . get first ( key )  )  ;   }  return new  eureka http request ( http exchange . get request method (  )  http exchange . get requesturi (  )  headers )  ;   }  ,466,5,request,5,"[21, 116, 360, 390, 431]"
7978,C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\SimpleEurekaHttpServer.java,shutdown,public void   (  )  {  http server . stop ( 0 )  ;   }  ,56,1,shutdown,1,[]
