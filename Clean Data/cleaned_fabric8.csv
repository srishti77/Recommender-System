ProjectName,methodName,methodBody
C:\Users\User\Desktop\Thesis\fabric8\components\cxf-utils\src\main\java\io\fabric8\utils\cxf\ExceptionResponseMapper.java,from response,"override public  exception   (  response response )  {  try  {   object entity = response . get entity (  ) ;  string message = "" no message""; if  ( entity instanceof  input stream )   {   input stream input stream =  (  input stream ) entity; message =  i o helpers . read fully ( input stream ) ;  }  else if  ( "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-agent\src\main\java\io\fabric8\agent\Agent.java,agentmain,public string args final  instrumentation instrumentation )  throws  exception  {   jvm agent . agentmain ( args instrumentation ) ;  apm agent . agentmain ( args instrumentation ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-agent\src\main\java\io\fabric8\agent\Agent.java,premain,public string args  instrumentation instrumentation )  throws  exception  {   jvm agent . premain ( args instrumentation ) ;  apm agent . premain ( args instrumentation ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\cxf-utils\src\main\java\io\fabric8\utils\cxf\WebClients.java,configure authorization,public web client web client  string username  string authorization type  string authorization )  {   h t t p conduit conduit =  web client . get config ( web client )  . get http conduit (  ) ; if  (  strings . is not blank ( username )  )   {  conduit . get authorization (  )  . set user name ( username ) ;  }  if  (  strings . is not blank ( authorization type )  &&  strings . is not blank ( authorization )  )   {  conduit . get authorization (  )  . set user name ( username ) ; conduit . get authorization (  )  . set authorization type ( authorization type ) ; conduit . get authorization (  )  . set authorization ( authorization ) ;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-agent\src\main\java\io\fabric8\agent\AgentLauncher.java,load agent,"public string pid  string args )  throws  i o exception  {   virtual machine vm; try  {  vm =  virtual machine . attach ( pid ) ;  }  catch  (   attach not supported exception x )   {   i o exception ioe = new  i o exception ( x . get message (  )  ) ; ioe . init cause ( x ) ; throw ioe;  }  try  {   string agent =  agent launcher . class . get protection domain (  )  . get code source (  )  . get location (  )  . get path (  ) ;  system . err . println ( "" trying to load agent ""  +  agent ) ; vm . load agent ( agent args ) ;  system . out . println ( "" agent successfully loaded"" ) ;  }  catch  (   agent load exception x )   {   i o exception ioe = new  i o exception ( x . get message (  )  ) ; ioe . init cause ( x ) ; throw ioe;  }  catch  (   agent initialization exception x )   {   i o exception ioe = new  i o exception ( x . get message (  )  ) ; ioe . init cause ( x ) ; throw ioe;  }  finally  {  if  ( vm  !  =  null )   {  vm . detach (  ) ;  }   }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-agent\src\main\java\io\fabric8\agent\AgentLauncher.java,main,"public string[] args )  {  if  ( args . length  >  0 )   {  try  {   system . err . println ( "" attaching  fabric8  agent to process: ""  +  args[0] ) ;  string options = """"; for  ( int i = 1; i  <  args . length; i +  +  )   {  options +  = args[i]; if  ( i  <   ( args . length  -  1 )  )   {  options +  = "" "";  }   }  load agent ( args[0] options ) ;  }  catch  (   throwable e )   {  e . print stack trace (  ) ;  }   }  else  {   system . err . println ( "" usage is ""  +   agent launcher . class . get name (  )   +  "" pid"" ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\cxf-utils\src\main\java\io\fabric8\utils\cxf\WebClients.java,configure ca cert,"public web client web client  string ca cert data  file ca cert file )  {  try  {   key store trust store = create trust store ( ca cert data ca cert file ) ;  trust manager factory trust manager factory =  trust manager factory . get instance (  trust manager factory . get default algorithm (  )  ) ; trust manager factory . init ( trust store ) ;  trust manager[] trust managers = trust manager factory . get trust managers (  ) ;  h t t p conduit conduit =  web client . get config ( web client )  . get http conduit (  ) ;  t l s client parameters params = conduit . get tls client parameters (  ) ; if  ( params  =  =  null )   {  params = new  t l s client parameters (  ) ; conduit . set tls client parameters ( params ) ;  }   trust manager[] existing trust managers = params . get trust managers (  ) ; if  ( existing trust managers  !  =  null && existing trust managers . length  >  0 )   {   list <  trust manager >  list = new  array list <  >  (  ) ; list . add all (  arrays . as list ( existing trust managers )  ) ; list . add all (  arrays . as list ( trust managers )  ) ; trust managers = list . to array ( new  trust manager[list . size (  ) ] ) ;  }  params . set trust managers ( trust managers ) ;  }  catch  (   exception e )   {   l o g . error ( "" could not create trust manager for ""  +  ca cert file e ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\cxf-utils\src\main\java\io\fabric8\utils\cxf\WebClients.java,configure client cert,"public web client web client  string client cert data  file client cert file  string client key data  file client key file  string client key algo char[] client key password )  {  try  {   key store key store = create key store ( client cert data client cert file client key data client key file client key algo client key password ) ;  key manager factory key manager factory =  key manager factory . get instance (  key manager factory . get default algorithm (  )  ) ; key manager factory . init ( key store client key password ) ;  key manager[] key managers = key manager factory . get key managers (  ) ;  h t t p conduit conduit =  web client . get config ( web client )  . get http conduit (  ) ;  t l s client parameters params = conduit . get tls client parameters (  ) ; if  ( params  =  =  null )   {  params = new  t l s client parameters (  ) ; conduit . set tls client parameters ( params ) ;  }   key manager[] existing key managers = params . get key managers (  ) ; if  ( existing key managers  !  =  null && existing key managers . length  >  0 )   {   list <  key manager >  list = new  array list <  >  (  ) ; list . add all (  arrays . as list ( existing key managers )  ) ; list . add all (  arrays . as list ( key managers )  ) ; key managers = list . to array ( new  key manager[list . size (  ) ] ) ;  }  params . set key managers ( key managers ) ;  }  catch  (   exception e )   {   l o g . error ( "" could not create key manager for ""  +  client cert file  +  ""  ( "" +  client key file +  "" ) "" e ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\cxf-utils\src\main\java\io\fabric8\utils\cxf\WebClients.java,configure user and password,public web client web client  string username  string password )  {  if  (  strings . is not blank ( username )  &&  strings . is not blank ( password )  )   {   h t t p conduit conduit =  web client . get config ( web client )  . get http conduit (  ) ; conduit . get authorization (  )  . set user name ( username ) ; conduit . get authorization (  )  . set password ( password ) ;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\cxf-utils\src\main\java\io\fabric8\utils\cxf\WebClients.java,create key store,"public key store   (  string client cert data  file client cert file  string client key data  file client key file  string client key algo char[] client key password )  throws  exception  {  try  (  input stream cert input stream = get input stream from data or file ( client cert data client cert file )  )  {   certificate factory cert factory =  certificate factory . get instance ( "" x509"" ) ;  x509 certificate cert =  (  x509 certificate ) cert factory . generate certificate ( cert input stream ) ;  input stream key input stream = get input stream from data or file ( client key data client key file ) ;  p e m reader reader = new  p e m reader ( key input stream ) ;  r s a private crt key spec key spec = new  p k c s1 encoded key spec ( reader . get der bytes (  )  )  . get key spec (  ) ;  key factory kf =  key factory . get instance ( client key algo ) ;  r s a private key priv key =  (  r s a private key ) kf . generate private ( key spec ) ;  key store key store =  key store . get instance ( "" j k s"" ) ; key store . load ( null client key password ) ;  string alias = cert . get subject x500 principal (  )  . get name (  ) ; key store . set key entry ( alias priv key client key password new  certificate[] { cert }  ) ; return key store;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\cxf-utils\src\main\java\io\fabric8\utils\cxf\WebClients.java,create private token filter,"public client request filter   ( final  string private token )  {   client request filter interceptor = new  client request filter (  )  {  @ override public void filter (   client request context request context )  throws  i o exception  {  request context . get headers (  )  . add ( "" p r i v a t e -  t o k e n"" private token ) ;  }   }  ; return interceptor;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\cxf-utils\src\main\java\io\fabric8\utils\cxf\WebClients.java,create providers,public list <  object >    (  )  {   list <  object >  providers = new  array list <  object >  (  ) ;  annotations[] annotations to use =  jackson jaxb json provider .  d e f a u l t _  a n n o t a t i o n s;  object mapper object mapper = create object mapper (  ) ; providers . add ( new  jackson jaxb json provider ( object mapper annotations to use )  ) ; providers . add ( new  exception response mapper (  )  ) ; return providers;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\cxf-utils\src\main\java\io\fabric8\utils\cxf\WebClients.java,create trust store,"public key store   (  string ca cert data  file ca cert file )  throws  exception  {  try  (  input stream pem input stream = get input stream from data or file ( ca cert data ca cert file )  )  {   certificate factory cert factory =  certificate factory . get instance ( "" x509"" ) ;  x509 certificate cert =  (  x509 certificate ) cert factory . generate certificate ( pem input stream ) ;  key store trust store =  key store . get instance ( "" j k s"" ) ; trust store . load ( null ) ;  string alias = cert . get subject x500 principal (  )  . get name (  ) ; trust store . set certificate entry ( alias cert ) ; return trust store;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\cxf-utils\src\main\java\io\fabric8\utils\cxf\WebClients.java,disable host name checks,"public web client web client )  {   h t t p conduit conduit =  web client . get config ( web client )  . get http conduit (  ) ;  t l s client parameters params = conduit . get tls client parameters (  ) ; if  ( params  =  =  null )   {  params = new  t l s client parameters (  ) ; conduit . set tls client parameters ( params ) ;  }   l o g . debug ( "" disabling host name checks"" ) ; params . set hostname verifier ( new  hostname verifier (  )  {  @ override public boolean verify (   string s   s s l session ssl session )  {  return true;  }   }   ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\cxf-utils\src\main\java\io\fabric8\utils\cxf\WebClients.java,disable ssl checks,public web client web client )  {   h t t p conduit conduit =  web client . get config ( web client )  . get http conduit (  ) ;  t l s client parameters params = conduit . get tls client parameters (  ) ; if  ( params  =  =  null )   {  params = new  t l s client parameters (  ) ; conduit . set tls client parameters ( params ) ;  }  params . set trust managers ( new  trust manager[] { new  trust everything s s l trust manager (  )  }  ) ; params . set disable c n check ( true ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\cxf-utils\src\main\java\io\fabric8\utils\cxf\WebClients.java,enable digest authenticaion type,public web client web client )  {   h t t p conduit conduit =  web client . get config ( web client )  . get http conduit (  ) ; conduit . set auth supplier ( new  digest auth supplier (  )  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\cxf-utils\src\main\java\io\fabric8\utils\cxf\WebClients.java,filter,"override public void   (  client request context request context )  throws  i o exception  {  request context . get headers (  )  . add ( "" p r i v a t e -  t o k e n"" private token ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\cxf-utils\src\main\java\io\fabric8\utils\cxf\WebClients.java,get input stream from data or file,public input stream   (  string data  file file )  throws  file not found exception  {  if  ( data  !  =  null )   {  return new  base64 decoder stream ( new  byte array input stream ( data . get bytes (  )  )  ) ;  }  if  ( file  !  =  null )   {  return new  file input stream ( file ) ;  }  return null;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\cxf-utils\src\main\java\io\fabric8\utils\cxf\WebClients.java,verify,override public boolean   (  string s  s s l session ssl session )  {  return true;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-agent\src\test\java\io\fabric8\testApp\TestApp.java,check enabled metrics,"protected m bean server m bean server =  management factory . get platform m bean server (  ) ; if  ( m bean server  !  =  null )   {  if  ( m bean server . is registered (  a g e n t _  m b e a n _  n a m e )  )   {  if  ( enabled agent . compare and set ( false true )  )   {  try  {  m bean server . invoke (  a g e n t _  m b e a n _  n a m e ""start metrics"" new  object[0] new  string[0] ) ;  system . out . println ( "" enabled agent metrics ""  +   a g e n t _  m b e a n _  n a m e ) ;  }  catch  (   exception e )   {   system . out . println ( "" failed to invoke the mbean: ""  +   a g e n t _  m b e a n _  n a m e ) ; e . print stack trace (  ) ;  }   }   }   }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-agent\src\test\java\io\fabric8\testApp\TestApp.java,main,"public string args[] )  throws  exception  {  try  {   system . err . println ( "" r u n n i n g  .  .  . "" ) ; check enabled metrics (  ) ; final int  c o u n t = 20; for  ( int i = 0; i  <   c o u n t; i +  +  )   {   test load test load = new  test load (  ) ; pool . submit ( test load ) ;  }   test load test load = new  test load ( 1000 ) ; pool . submit ( test load ) ;  }  catch  (   throwable e )   {  e . print stack trace (  ) ;  }   system . err . println ( "" w a i t i n g  f o r  l o a d  t o  c o m p l e t e  .  .  . "" ) ; pool . await termination ( 5  time unit .  m i n u t e s ) ;  system . err . println ( "" s t o p p e d"" ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-agent\src\test\java\io\fabric8\testApp\TestLoad.java,test load,public iterations )  {  this .  m a x _  i t e r a t i o n s = max iterations;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-agent\src\test\java\io\fabric8\testApp\TestLoad.java,do something else,public and get (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-agent\src\test\java\io\fabric8\testApp\TestLoad.java,get count,public
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-agent\src\test\java\io\fabric8\testApp\TestLoad.java,load,public test values value )  {  load1 ( value ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-agent\src\test\java\io\fabric8\testApp\TestLoad.java,load,public test values value )  {  sleep ( 100 ) ; load2 ( value ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-agent\src\test\java\io\fabric8\testApp\TestLoad.java,load,public test values value )  {  sleep ( 10 ) ; count . increment and get (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-agent\src\test\java\io\fabric8\testApp\TestLoad.java,run,"public m a x _  i t e r a t i o n s; i +  +  )   {  for  (   test values value :  test values . values (  )  )   {   system . out . println (  thread . current thread (  )  . get name (  )   +  "" running #""  +  i ) ; load ( value ) ; if  ( i % 2  =  =  0 )   {  do something else (  ) ;  }   }   }   system . out . println (  thread . current thread (  )  . get name (  )   +  "" done"" ) ; done . set ( true ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-agent\src\test\java\io\fabric8\testApp\TestLoad.java,sleep,private time )  {  try  {   thread . sleep ( sleep time ) ;  }  catch  (   interrupted exception e )   {   }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-agent\src\test\java\io\fabric8\testApp\TestThreadFactory.java,test thread factory,public string prefix )  {  this . prefix = prefix;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-agent\src\test\java\io\fabric8\testApp\TestThreadFactory.java,new thread,"override public  thread   (  runnable task )  {   string name = prefix  +  "" - ""  +  counter +  + ; return new  thread ( task name ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmAgentLauncher.java,load agent,"public string pid  string args )  throws  i o exception  {   virtual machine vm; try  {  vm =  virtual machine . attach ( pid ) ;  }  catch  (   attach not supported exception x )   {   i o exception ioe = new  i o exception ( x . get message (  )  ) ; ioe . init cause ( x ) ; throw ioe;  }  try  {   string agent =  apm agent launcher . class . get protection domain (  )  . get code source (  )  . get location (  )  . get path (  ) ;  system . err . println ( "" trying to load agent ""  +  agent ) ; vm . load agent ( agent args ) ;  system . out . println ( "" agent successfully loaded"" ) ;  }  catch  (   agent load exception x )   {   i o exception ioe = new  i o exception ( x . get message (  )  ) ; ioe . init cause ( x ) ; throw ioe;  }  catch  (   agent initialization exception x )   {   i o exception ioe = new  i o exception ( x . get message (  )  ) ; ioe . init cause ( x ) ; throw ioe;  }  finally  {  if  ( vm  !  =  null )   {  vm . detach (  ) ;  }   }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmAgentLauncher.java,main,"public string[] args )  {  if  ( args . length  >  0 )   {  try  {   system . err . println ( "" attaching to process: ""  +  args[0] ) ;  string options = """"; for  ( int i = 1; i  <  args . length; i +  +  )   {  options +  = args[i]; if  ( i  <   ( args . length  -  1 )  )   {  options +  = "" "";  }   }  load agent ( args[0] options ) ;  }  catch  (   throwable e )   {  e . print stack trace (  ) ;  }   }  else  {   system . err . println ( "" usage is ""  +   apm agent launcher . class . get name (  )   +  "" pid"" ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmConfiguration.java,apm configuration,"to black list ( ""java"" ) ; add to black list ( ""com . sun"" ) ; add to black list ( ""sun"" ) ; add to black list ( ""$ proxy"" ) ; add to black list ( "" by c g l i b$$"" ) ; add to black list ( ""io . fabric8 . apmagent"" ) ; add to black list ( ""org . apache . camel . spring . remoting"" ) ; add to black list ( ""org . jolokia"" ) ; add to black list ( ""org . springframework"" ) ; add to black list ( ""org . eclipse"" ) ; add to black list ( ""org . apache . xbean"" ) ; add to black list ( ""org . slf4j"" ) ; add to black list ( ""org . omg"" ) ; add to black list ( ""com . apple"" ) ; add to black list ( ""oracle"" ) ; add to black list ( ""org . apache . log4j"" ) ; add to black list ( ""org . objectweb . asm"" ) ; add to black list ( ""org . apache . commons"" ) ; add to black list ( ""org . apache . jasper"" ) ; add to black list ( ""jrockit"" ) ; add to black list ( ""org . json"" ) ; add to black list ( ""org . fusesource . hawtbuf"" ) ; add to black list ( ""com . intellij"" ) ; add to black list ( ""org . w3c . dom"" ) ; add to black list ( ""com . codahale"" ) ; add to white list ( ""io . fabric8 . test app"" ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmConfiguration.java,add change listener,public apm configuration change listener change listener )  {  change listeners . add ( change listener ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmConfiguration.java,add to black list,"override public void   (  string s )  {   filter item filter item = new  filter item (  ) ;  string[] class and method = s . split ( ""@"" ) ; filter item . set class name ( class and method[0] ) ; if  ( class and method . length  >  1 )   {  filter item . set method name ( class and method[1] ) ;  }  black filter list . ad"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmConfiguration.java,add to white list,"override public void   (  string s )  {   filter item filter item = new  filter item (  ) ;  string[] class and method = s . split ( ""@"" ) ; filter item . set class name ( class and method[0] ) ; if  ( class and method . length  >  1 )   {  filter item . set method name ( class and method[1] ) ;  }  white filter list . ad"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmConfiguration.java,convert,private object   (  object value  class type )  throws  exception  {   property editor editor =  property editor manager . find editor ( type ) ; if  ( editor  !  =  null )   {  editor . set as text ( value . to string (  )  ) ; return editor . get value (  ) ;  }  if  ( type  =  =   u r i . class )   {  return new  u r i ( value . to string (  )  ) ;  }  return null;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmConfiguration.java,find setter method,"private method   (  string name )  {   string method name = ""set""  +  name . substring ( 0 1 )  . to upper case (  )   +  name . substring ( 1 ) ;  method[] methods =  apm configuration . class . get methods (  ) ; for  (   method method : methods )   {   class params[] = method . get parameter types (  ) ; if  ( method . get name (  )  . equals ( method name )  && params . length  =  =  1 )   {  return method;  }   }  return null;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmConfiguration.java,fire configuration changed,private apm configuration change listener apm configuration change listener : this . change listeners )   {  apm configuration change listener . configuration changed (  ) ;  }  reset changed (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmConfiguration.java,get black list,override public  string   (  )  {  return get list as string ( black filter list ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmConfiguration.java,get list as string,"private string   (  list <  filter item >  list )  {   string result = """"; if  ( list  !  =  null &&  ! list . is empty (  )  )   {  for  ( int i = 0; i  <  list . size (  ) ; i +  +  )   {   filter item filter item = list . get ( i ) ; result +  = filter item . get class name (  ) ;  string method name = filter item . get method name (  ) ; if  ( method name  !  =  null && method name . length (  )   >  0 )   {  result +  = ""@""  +  method name;  }  if  ( i  <   ( list . size (  )   -  1 )  )   {  result +  = "" "";  }   }   }  return result;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmConfiguration.java,get method metric depth,public metric depth;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmConfiguration.java,get sampling interval,public interval;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmConfiguration.java,get strategy,public string   (  )  {  return strategy . name (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmConfiguration.java,get strategy impl,public s t r a t e g y   (  )  {  return strategy;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmConfiguration.java,get thread metric depth,public metric depth;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmConfiguration.java,get white list,override public  string   (  )  {  return get list as string ( white filter list ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmConfiguration.java,initalize from properties,public properties properties )  {  for  (   map .  entry entry : properties . entry set (  )  )   {  if  ( entry . get key (  )   !  =  null && entry . get value (  )   !  =  null )   {  set property ( entry . get key (  )  . to string (  )  entry . get value (  )  . to string (  )  ) ;  }   }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmConfiguration.java,initialize list,"private string str  list <  filter item >  list )  {   string[] split = str . split ( "" "" ) ; for  (   string s : split )   {   filter item filter item = new  filter item (  ) ;  string[] class and method = s . split ( ""@"" ) ; filter item . set class name ( class and method[0] ) ; if  ( class and method . length  >  1 )   {  filter item . set method name ( class and method[1] ) ;  }  list . add ( filter item ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmConfiguration.java,is async transformation,override public boolean   (  )  {  return async transformation;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmConfiguration.java,is audit,public string class name  string method name )  {  return is white listed ( class name method name )  ||  ! is black listed ( class name method name ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmConfiguration.java,is auto start metrics,public start metrics;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmConfiguration.java,is black listed,public string class name  string method name )  {  for  (   filter item item : black filter list )   {  if  ( item . matches ( class name method name true )  )   {  return true;  }   }  return false;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmConfiguration.java,is debug,override public boolean   (  )  {  return debug;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmConfiguration.java,is filter changed,public changed;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmConfiguration.java,is method metric depth changed,public metric depth changed;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmConfiguration.java,is start jolokia agent,public jolokia agent;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmConfiguration.java,is strategy changed,public changed;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmConfiguration.java,is thread metric depth changed,public metric depth changed;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmConfiguration.java,is trace,override public boolean   (  )  {  return trace;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmConfiguration.java,is use platform m bean server,public platform m bean server;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmConfiguration.java,is verify classes,public classes;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmConfiguration.java,is white listed,public string class name  string method name )  {  for  (   filter item item : white filter list )   {  if  ( item . matches ( class name method name false )  )   {  return true;  }   }  return false;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmConfiguration.java,remove change listener,public apm configuration change listener change listener )  {  change listeners . remove ( change listener ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmConfiguration.java,reset changed,private changed = false; method metric depth changed = false; thread metric depth changed = false; strategy changed = false;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmConfiguration.java,set async transformation,override public void   ( boolean async transformation )  {  this . async transformation = async transformation;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmConfiguration.java,set auto start metrics,public start metrics )  {  this . auto start metrics = auto start metrics;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmConfiguration.java,set black list,override public void   (  string black list )  {  this . black filter list = new  array list <  >  (  ) ; initialize list ( black list this . black filter list ) ; filter changed = true; fire configuration changed (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmConfiguration.java,set debug,override public void   ( boolean debug )  {  this . debug = debug;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmConfiguration.java,set method metric depth,public metric depth )  {  this . method metric depth = method metric depth; this . method metric depth changed = true; fire configuration changed (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmConfiguration.java,set property,"private string name  object value )  {  try  {   method setter = find setter method ( name ) ; if  ( setter  !  =  null )   {  if  ( value  =  =  null || value . get class (  )  . equals ( setter . get parameter types (  ) [0] )  )   {  setter . invoke ( this value ) ;  }  else  {  setter . invoke ( this convert ( value setter . get parameter types (  ) [0] )  ) ;  }   }   }  catch  (   throwable e )   {  logger . warn ( "" failed to set property: ""  +  e . get message (  )  e ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmConfiguration.java,set sampling interval,public interval )  {  this . sampling interval = sampling interval;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmConfiguration.java,set start jolokia agent,public jolokia agent )  {  this . start jolokia agent = start jolokia agent;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmConfiguration.java,set strategy,public string name )  {   s t r a t e g y new strategy =  s t r a t e g y . get strategy ( name ) ; if  (  ! this . strategy . equals ( new strategy )  )   {  this . strategy =  s t r a t e g y . get strategy ( name ) ; this . strategy changed = true; fire configuration changed (  ) ;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmConfiguration.java,set thread metric depth,public metric depth )  {  this . thread metric depth = thread metric depth; this . thread metric depth changed = true; fire configuration changed (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmConfiguration.java,set trace,override public void   ( boolean trace )  {  this . trace = trace;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmConfiguration.java,set use platform m bean server,public platform m bean server )  {  this . use platform m bean server = use platform m bean server;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmConfiguration.java,set verify classes,public classes )  {  this . verify classes = verify classes;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmConfiguration.java,set white list,override public void   (  string white list )  {  white filter list = new  array list <  >  (  ) ; initialize list ( white list this . white filter list ) ; filter changed = true; fire configuration changed (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmAgent.java,apm agent,private agent context = new  apm agent context ( this ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmAgent.java,agentmain,"public string args final  instrumentation instrumentation )  throws  exception  {  try  {   apm agent agent =  apm agent .  i n s t a n c e; if  ( agent . initialize ( instrumentation args )  )   {  if  ( agent . get configuration (  )  . is start jolokia agent (  )  )   {   jvm agent . agentmain ( args instrumentation ) ;  }   }   }  catch  (   exception e )   {   l o g . error ( "" failed in agentmain due ""  +  e . get message (  )  e ) ; throw e;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmAgent.java,configuration changed,override public void   (  )  {  if  ( started . get (  )  )   {  if  ( configuration . is method metric depth changed (  )  )   {  apm agent context . method metrics depth changed (  ) ;  }  if  ( configuration . is thread metric depth changed (  )  )   {  apm agent context . thread metrics depth changed (  ) ;  }  if  ( configura
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmAgent.java,enter method,public string method name )  {  if  (  i n s t a n c e . started . get (  )  )   {   i n s t a n c e . apm agent context . enter method (  thread . current thread (  )  method name false ) ;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmAgent.java,exit method,public string method name )  {  if  (  i n s t a n c e . started . get (  )  )   {   i n s t a n c e . apm agent context . exit method (  thread . current thread (  )  method name false ) ;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmAgent.java,get all methods,public list <  string >    (  )  {  if  ( is initialized (  )  )   {  return apm agent context . get all methods (  ) ;  }  return  collections .  e m p t y _  l i s t;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmAgent.java,get configuration,public apm configuration   (  )  {  return configuration;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmAgent.java,get thread metrics,public list <  thread metrics >    (  )  {  if  ( is initialized (  )  )   {  return apm agent context . get thread metrics (  ) ;  }  return  collections .  e m p t y _  l i s t;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmAgent.java,get transformed methods,public list <  string >    (  )  {  if  ( is initialized (  )  )   {  return apm agent context . get transformed methods (  ) ;  }  return  collections .  e m p t y _  l i s t;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmAgent.java,initialize,"public instrumentation instrumentation  string args )  throws  exception  {  boolean result; if  (  ( result = initialized . compare and set ( false true )  )  )   {  this . instrumentation = instrumentation;  property utils . set properties ( configuration args ) ; configuration . add change listener ( this ) ; apm agent context . initialize (  ) ;  apm configuration .  s t r a t e g y the strategy = configuration . get strategy impl (  ) ; switch  ( the strategy )   {  case  t r a c e: this . strategy = new  trace strategy ( apm agent context instrumentation ) ;  l o g . debug ( "" using  trace strategy"" ) ; break; default : this . strategy = new  sampling strategy ( apm agent context ) ;  l o g . debug ( "" using  sampling strategy"" ) ;  }  this . strategy . initialize (  ) ;  thread cleanup = new  thread (  )  {  @ override public void run (  )  {  try  {   apm agent apm agent =  apm agent .  i n s t a n c e; apm agent . shut down (  ) ;  }  catch  (  exception e )   {   l o g . warn ( "" failed to run shutdown hook due ""  +  e . get message (  )  e ) ;  }   }   }  ;  runtime . get runtime (  )  . add shutdown hook ( cleanup ) ;  }  return result;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmAgent.java,is initialized,public
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmAgent.java,is started,override public boolean   (  )  {  return started . get (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmAgent.java,premain,"public string args  instrumentation instrumentation )  throws  exception  {  try  {   apm agent agent =  apm agent .  i n s t a n c e; if  ( agent . initialize ( instrumentation args )  )   {  if  ( agent . get configuration (  )  . is start jolokia agent (  )  )   {   jvm agent . premain ( args instrumentation ) ;  }  if  ( agent . get configuration (  )  . is auto start metrics (  )  )   {  agent . start metrics (  ) ;  }   }   }  catch  (   exception e )   {   l o g . error ( "" failed in premain due ""  +  e . get message (  )  e ) ; throw e;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmAgent.java,run,"override public void   (  )  {  try  {   apm agent apm agent =  apm agent .  i n s t a n c e; apm agent . shut down (  ) ;  }  catch  (   exception e )   {   l o g . warn ( "" failed to run shutdown hook due ""  +  e . get message (  )  e ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmAgent.java,shut down,"public and set ( true false )  )   {  stop metrics (  ) ; configuration . remove change listener ( this ) ; apm agent context . shut down (  ) ; try  {   strategy s = this . strategy; if  ( s  !  =  null )   {  s . shut down (  ) ;  }   }  catch  (   throwable e )   {   l o g . warn ( "" failed to shutdown due ""  +  e . get message (  )  e ) ;  }   }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmAgent.java,start metrics,"public initialized (  )  && started . compare and set ( false true )  )   {  apm agent context . start (  ) ; try  {   strategy s = this . strategy; if  ( s  !  =  null )   {  s . start (  ) ;  }   }  catch  (   throwable e )   {   l o g . warn ( "" failed to start strategy due ""  +  e . get message (  )   +  "" .   this exception is ignored . "" e ) ;  }   }  else  {   l o g . debug ( "" metrics already started"" ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmAgent.java,stop metrics,"public and set ( true false )  )   {  try  {   strategy s = this . strategy; if  ( s  !  =  null )   {  s . stop (  ) ;  }   }  catch  (   throwable e )   {   l o g . warn ( "" failed to stop strategy due ""  +  e . get message (  )   +  "" .   this exception is ignored . "" e ) ;  }  apm agent context . stop (  ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ClassInfo.java,add method,public string name  string description )  {   method description method description = new  method description ( get class name (  )  name description ) ; all methods . put if absent ( method description . get method signature (  )  method description ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ClassInfo.java,add transformed method,public string   (  string name  string description )  {   string key =  method description . get method signature ( name description ) ;  method description method description = all methods . get ( key ) ; assert  ( method description  !  =  null ) ; transformed methods . put if absent ( key method description ) ; return key;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ClassInfo.java,get all method names,public set <  string >    (  )  {   set <  string >  set = new  hash set <  >  (  ) ; for  (   method description method description : all methods . values (  )  )   {  set . add ( method description . get method name (  )  ) ;  }  return set;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ClassInfo.java,get all transformed method names,public set <  string >    (  )  {   set <  string >  set = new  hash set <  >  (  ) ; for  (   method description method description : transformed methods . values (  )  )   {  set . add ( method description . get method name (  )  ) ;  }  return set;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ClassInfo.java,get class loader,public class loader   (  )  {  return class loader;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ClassInfo.java,get class name,public string   (  )  {  return class name;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ClassInfo.java,get original,public
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ClassInfo.java,get original class,public class   (  )  {  return original class;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ClassInfo.java,get transformed,public
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ClassInfo.java,get transformed method descriptions,public collection <  method description >    (  )  {   array list <  method description >  result = new  array list <  >  (  ) ; result . add all ( transformed methods . values (  )  ) ; return result;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ClassInfo.java,is can transform,public transform;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ClassInfo.java,is transformed,public
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ClassInfo.java,remove transformed method,public string full method name )  {  transformed methods . remove ( full method name ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ClassInfo.java,reset transformed,public methods . clear (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ClassInfo.java,set can transform,public transform )  {  this . can transform = can transform;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ClassInfo.java,set class loader,public class loader class loader )  {  this . class loader = class loader;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ClassInfo.java,set class name,"public string class name )  {  this . class name = class name  !  =  null  ?  class name . replace ( "" / "" "" . "" )  : null;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ClassInfo.java,set original,public
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ClassInfo.java,set original class,public class original class )  {  this . original class = original class;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ClassInfo.java,set transformed,public
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\FilterItem.java,get class name,public string   (  )  {  return class name;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\FilterItem.java,get method name,public string   (  )  {  return method name;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\FilterItem.java,matches,public string class name  string method boolean match if no filter method )  {  boolean result = matches ( class name ) ; if  ( result )   {  result = false; if  ( method  =  =  null || method . is empty (  )  )   {  if  ( get method name (  )   =  =  null || get method name (  )  . is empty (  )  )   {  result = true;  }   }  else if  ( get method name (  )   !  =  null &&  ! get method name (  )  . is empty (  )  )   {  result = method . matches ( get method name (  )  ) ;  }  else  {  result = match if no filter method;  }   }  return result;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\FilterItem.java,set class name,public string class name )  {  this . class name = class name; if  ( class name  !  =  null )   {  this . class name = class name . replace ( ' / ' ' . ' ) ;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\FilterItem.java,set method name,public string method name )  {  this . method name = method name;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ApmAgentContext.java,apm agent context,public apm agent agent )  {  this . apm agent = agent; this . configuration = agent . get configuration (  ) ; this . monitored method metrics = new  monitored method metrics ( this ) ; this . monitored method metrics . set monitor size ( configuration . get method metric depth (  )  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ApmAgentContext.java,build delta list,public list <  class info >    (  )  {   list <  class info >  result = new  array list <  >  (  ) ; for  (   class info class info : all methods . values (  )  )   {  if  ( class info . is transformed (  )  )   {  if  ( configuration . is audit ( class info . get class name (  )  )  )   {  boolean retransform = false;  set <  string >  transformed method names = class info . get all transformed method names (  ) ; for  (   string method name : transformed method names )   {  if  (  ! configuration . is audit ( class info . get class name (  )  method name )  )   {  retransform = true; break;  }   }  if  (  ! retransform )   {   set <  string >  all method names = class info . get all method names (  ) ; for  (   string method name : all method names )   {  if  (  ! transformed method names . contains ( method name )  && configuration . is audit ( class info . get class name (  )  method name )  )   {  retransform = true; break;  }   }   }  if  ( retransform )   {  result . add ( class info ) ;  }   }  else  {  result . add ( class info ) ;  }   }  else if  ( configuration . is audit ( class info . get class name (  )  )  )   {  if  ( class info . is can transform (  )  )   {  result . add ( class info ) ;  }   }   }  return result;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ApmAgentContext.java,compare,override public int   (  thread metrics thread metrics1  thread metrics thread metrics2 )  {  return  ( int )  ( thread metrics2 . get cpu time (  )   -  thread metrics1 . get cpu time (  )  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ApmAgentContext.java,do house keeping,"void house keeping . compare and set ( true false )  )   {  try  {   list <  thread metrics >  thread metrics list = get thread metrics (  ) ; for  (   thread metrics tm : thread metrics list )   {  if  ( tm . is dead (  )  )   {  tm . destroy (  ) ; thread metrics map . remove ( tm . get thread (  )  ) ;  }   }  monitored method metrics . calculate method metrics ( get method metrics (  )  ) ; for  (   thread metrics thread metrics : thread metrics list )   {  thread metrics . calculate method metrics (  ) ;  }   }  catch  (   throwable e )   {   l o g . warn ( "" error during housekeeping due ""  +  e . get message (  )   +  "" .   this exception is ignored . "" e ) ;  }   }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ApmAgentContext.java,enter method,public thread current thread  string full method name boolean always active )  {  if  ( is initialized (  )  )   {   thread metrics thread metrics = thread metrics map . get ( current thread ) ; if  ( thread metrics  =  =  null )   {  thread metrics = new  thread metrics ( this current thread ) ; thread metrics map . put ( current thread thread metrics ) ;  }  thread metrics . enter ( full method name always active ) ;  method metrics method metrics = method metrics map . get ( full method name ) ; if  ( method metrics  =  =  null )   {  method metrics = new  method metrics ( full method name ) ; method metrics . set active ( is monitor by default (  )  ) ; method metrics map . put if absent ( full method name method metrics ) ;  }   }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ApmAgentContext.java,exit method,public thread current thread  string method name boolean always active )  {  if  ( is initialized (  )  )   {   thread metrics thread metrics = thread metrics map . get ( current thread ) ; long elapsed =  - 1; if  ( thread metrics  !  =  null )   {  elapsed = thread metrics . exit ( method name always active ) ;  }  if  ( elapsed  >  =  0 )   {   method metrics method metrics = method metrics map . get ( method name ) ; if  ( method metrics  !  =  null )   {  method metrics . update ( elapsed ) ;  }   }  do house keeping (  ) ;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ApmAgentContext.java,get all methods,"public list <  string >    (  )  {   list <  string >  result = new  array list <  >  (  ) ; for  (   class info class info : all methods . values (  )  )   {  for  (   string method name : class info . get all method names (  )  )   {  result . add ( class info . get class name (  )   +  ""@""  +  method name ) ;  }   }  return result;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ApmAgentContext.java,get class info,public class info   (  string class name )  {   string key = class name . replace ( ' / ' ' . ' ) ;  class info result = all methods . get ( key ) ; if  ( result  =  =  null )   {   class info class info = new  class info (  ) ; class info . set class name ( key ) ; result = all methods . put if absent ( key class info ) ; if  ( result  =  =  null )   {  result = class info;  }   }  return result;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ApmAgentContext.java,get configuration,public apm configuration   (  )  {  return configuration;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ApmAgentContext.java,get m bean server,private m bean server   (  )  {  if  ( m bean server  =  =  null )   {  if  ( configuration . is use platform m bean server (  )  )   {  m bean server =  management factory . get platform m bean server (  ) ;  }  else  {  m bean server =  jolokia m bean server util . get jolokia m bean server (  ) ;  }   }  return m bean server;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ApmAgentContext.java,get method metrics,public list <  ?  extends  method metrics >    (  )  {  return  method metrics . sorted metrics ( method metrics map . values (  )  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ApmAgentContext.java,get thread metrics,public list <  thread metrics >    (  )  {   list <  thread metrics >  result = new  array list <  >  ( thread metrics map . values (  )  ) ;  collections . sort ( result new  comparator <  thread metrics >  (  )  {  @ override public int compare (   thread metrics thread metrics1   thread metrics thread metrics2 )  {  return  ( int )  ( thread metrics2 . get cpu time (  )   -  thread metrics1 . get cpu time (  )  ) ;  }   }   ) ; return result;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ApmAgentContext.java,get transformed methods,"public list <  string >    (  )  {   list <  string >  result = new  array list <  >  (  ) ; for  (   class info class info : all methods . values (  )  )   {  for  (   string method name : class info . get all transformed method names (  )  )   {  result . add ( class info . get class name (  )   +  ""@""  +  method name ) ;  }   }  return result;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ApmAgentContext.java,initialize,"public and set ( false true )  )   {  try  {  agent object name = new  object name (  d e f a u l t _  d o m a i n ""type"" ""apm agent"" ) ; register m bean ( agent object name apm agent ) ; configuration object name = new  object name (  d e f a u l t _  d o m a i n ""type"" ""configuration"" ) ; register m bean ( configuration object name configuration ) ;  }  catch  (   throwable e )   {   l o g . warn ( "" failed to register  apm agent mbeans with m bean server due ""  +  e . get message (  )  e ) ;  }   }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ApmAgentContext.java,is initialized,public
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ApmAgentContext.java,is monitor by default,public by default;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ApmAgentContext.java,method metrics depth changed,public method metrics . set monitor size ( configuration . get method metric depth (  )  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ApmAgentContext.java,register m bean,protected object instance   (  object name object name  object object )  throws  instance already exists exception   m bean registration exception   not compliant m bean exception  {   m bean server server = get m bean server (  ) ; if  ( server  !  =  null &&  ! server . is registered ( object name )  )   {  return server . register m bean ( object object name ) ;  }  return null;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ApmAgentContext.java,register method metrics m bean,"void string thread name long thread id int rank  method metrics proxy thread metrics )  {  try  {   string thread identity = thread name  +  ""[""  +  thread id +  ""]"";  object name object name = new  object name (  d e f a u l t _  d o m a i n  +  "":""  +  ""type =  thread context metrics"" +  "" thread name = "" +   object name . quote ( thread identity )  +  "" rank = "" +   object name . quote ( ""rank""  +  rank )  ) ; register m bean ( object name thread metrics ) ; object name map . put ( thread metrics object name ) ;  }  catch  (   throwable e )   {   l o g . warn ( "" failed to register mbean ""  +  thread metrics . to string (  )   +  "" due "" +  e . get message (  )  +  "" .   this exception is ignored . "" e ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ApmAgentContext.java,remove,private method description method description )  {  method metrics map . remove ( method description . get full method name (  )  ) ; for  (   thread metrics thread metrics : thread metrics map . values (  )  )   {  thread metrics . remove ( method description . get full method name (  )  ) ;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ApmAgentContext.java,reset all,public class info class info )  {   collection <  method description >  list = class info . get transformed method descriptions (  ) ; for  (   method description method description : list )   {  remove ( method description ) ;  }  class info . reset transformed (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ApmAgentContext.java,reset methods,public class info class info )  {   collection <  method description >  list = class info . get transformed method descriptions (  ) ; for  (   method description method description : list )   {  if  (  ! configuration . is audit ( class info . get class name (  )  method description . get method name (  )  )  )   {  remove ( method description ) ;  }   }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ApmAgentContext.java,run,override public void   (  )  {  while  ( started . get (  )  )   {  try  {   thread . sleep (  h o u s e _  k e e p i n g _  t i m e ) ; do house keeping . set ( true ) ;  }  catch  (   throwable e )   {   }   }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ApmAgentContext.java,set active,public string full method name boolean flag )  {  if  ( is initialized (  )  )   {  for  (   thread metrics thread metrics : thread metrics map . values (  )  )   {  thread metrics . set active ( full method name flag ) ;  }   method metrics method metrics = method metrics map . get ( full method name ) ; if  ( method metrics  !  =  null )   {  method metrics . set active ( flag ) ;  }   }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ApmAgentContext.java,set monitor by default,public by default )  {  this . monitor by default = monitor by default;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ApmAgentContext.java,shut down,public and set ( true false )  )   {  stop (  ) ; unregister m bean ( configuration object name ) ; unregister m bean ( agent object name ) ; if  ( jolokia server  !  =  null )   {  jolokia server . stop (  ) ; jolokia server = null;  }  m bean server = null;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ApmAgentContext.java,start,"public and set ( false true )  )   {  background thread = new  thread ( new  runnable (  )  {  @ override public void run (  )  {  while  ( started . get (  )  )   {  try  {   thread . sleep (  h o u s e _  k e e p i n g _  t i m e ) ; do house keeping . set ( true ) ;  }  catch  (   throwable e )   {   }   }   }   }   "" fabric8 -  apm agent -  background thread"" ) ; background thread . set daemon ( true ) ; background thread . start (  ) ;  }   }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ApmAgentContext.java,stop,public and set ( true false )  )   {  for  (   object name object name : object name map . values (  )  )   {  unregister m bean ( object name ) ;  }  object name map . clear (  ) ; method metrics map . clear (  ) ; thread metrics map . clear (  ) ;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ApmAgentContext.java,thread metrics depth changed,public thread metrics thread metrics : thread metrics map . values (  )  )   {  thread metrics . set monitor size ( configuration . get thread metric depth (  )  ) ;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ApmAgentContext.java,unregister m bean,"protected object name object name )  {   m bean server bean server = get m bean server (  ) ; if  ( object name  !  =  null && bean server  !  =  null && bean server . is registered ( object name )  )   {  try  {  bean server . unregister m bean ( object name ) ;  }  catch  (   throwable e )   {   l o g . warn ( "" failed to unregister ""  +  object name  +  "" due "" +  e . get message (  )  +  "" .   this exception is ignored . "" e ) ;  }   }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ApmAgentContext.java,unregister method metrics m bean,void method metrics proxy method metrics )  {   object name object name = object name map . remove ( method metrics ) ; unregister m bean ( object name ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\MethodDescription.java,method description,"string class name  string method name  string description )  {  this . class name = class name . replace ( ' / ' ' . ' ) ; this . method name = method name . replace ( ' / ' ' . ' ) ; this . description = description; this . method signature = get method signature ( method name description ) ; this . full method name = this . class name  +  ""@""  +  this . method signature;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MethodMetricsProxy.java,getth percentile,override public double   (  )  {   method metrics mm = this . method metrics; return mm  !  =  null  ?  mm . get50th percentile (  )  : 0;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MethodMetricsProxy.java,getth percentile,override public double   (  )  {   method metrics mm = this . method metrics; return mm  !  =  null  ?  mm . get75th percentile (  )  : 0;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MethodMetricsProxy.java,getth percentile,override public double   (  )  {   method metrics mm = this . method metrics; return mm  !  =  null  ?  mm . get95th percentile (  )  : 0;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MethodMetricsProxy.java,getth percentile,override public double   (  )  {   method metrics mm = this . method metrics; return mm  !  =  null  ?  mm . get98th percentile (  )  : 0;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MethodMetricsProxy.java,getth percentile,override public double   (  )  {   method metrics mm = this . method metrics; return mm  !  =  null  ?  mm . get999th percentile (  )  : 0;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MethodMetricsProxy.java,getth percentile,override public double   (  )  {   method metrics mm = this . method metrics; return mm  !  =  null  ?  mm . get99th percentile (  )  : 0;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MethodMetricsProxy.java,get count,override public long   (  )  {   method metrics mm = this . method metrics; return mm  !  =  null  ?  mm . get count (  )  : 0;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MethodMetricsProxy.java,get fifteen minute rate,override public double   (  )  {   method metrics mm = this . method metrics; return mm  !  =  null  ?  mm . get fifteen minute rate (  )  : 0;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MethodMetricsProxy.java,get five minute rate,override public double   (  )  {   method metrics mm = this . method metrics; return mm  !  =  null  ?  mm . get five minute rate (  )  : 0;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MethodMetricsProxy.java,get load,override public double   (  )  {   method metrics mm = this . method metrics; return mm  !  =  null  ?  mm . get load (  )  : 0;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MethodMetricsProxy.java,get max,override public double   (  )  {   method metrics mm = this . method metrics; return mm  !  =  null  ?  mm . get max (  )  : 0;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MethodMetricsProxy.java,get mean,override public double   (  )  {   method metrics mm = this . method metrics; return mm  !  =  null  ?  mm . get mean (  )  : 0;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MethodMetricsProxy.java,get mean rate,override public double   (  )  {   method metrics mm = this . method metrics; return mm  !  =  null  ?  mm . get mean rate (  )  : 0;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MethodMetricsProxy.java,get min,override public double   (  )  {   method metrics mm = this . method metrics; return mm  !  =  null  ?  mm . get min (  )  : 0;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MethodMetricsProxy.java,get name,"override public  string   (  )  {   method metrics mm = this . method metrics; return mm  !  =  null  ?  mm . get name (  )  : """";  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MethodMetricsProxy.java,get one minute rate,override public double   (  )  {   method metrics mm = this . method metrics; return mm  !  =  null  ?  mm . get one minute rate (  )  : 0;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MethodMetricsProxy.java,get percentage,override public int   (  )  {   method metrics mm = this . method metrics; return mm  !  =  null  ?  mm . get percentage (  )  : 0;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MethodMetricsProxy.java,get std dev,override public double   (  )  {   method metrics mm = this . method metrics; return mm  !  =  null  ?  mm . get std dev (  )  : 0;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MethodMetricsProxy.java,set method metrics,void method metrics method metrics )  {  this . method metrics = method metrics;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MethodMetricsProxy.java,to string,"override public  string   (  )  {   method metrics mm = this . method metrics; return mm  !  =  null  ?  mm . to string (  )  : "" empty method metrics proxy"";  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MethodMetricsProxy.java,values,override public long[]   (  )  {   method metrics mm = this . method metrics; return mm  !  =  null  ?  mm . values (  )  : new long[0];  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\MethodDescription.java,get class name,public string   (  )  {  return class name;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\MethodDescription.java,get description,public string   (  )  {  return description;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\MethodDescription.java,get full method name,public string   (  )  {  return full method name;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\MethodDescription.java,get method name,public string   (  )  {  return method name;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\MethodDescription.java,get method signature,public string   (  )  {  return method signature;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MethodMetrics.java,method metrics,public string name )  {  this . name = name; this . timer = new  timer (  ) ; this . rate factor =  time unit .  s e c o n d s . to seconds ( 1 ) ; this . duration factor = 1 . 0  /   time unit .  m i l l i s e c o n d s . to nanos ( 1 ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MethodMetrics.java,compare,override public int   (  method metrics method metrics1  method metrics method metrics2 )  {  return  ( int )  (  ( int ) method metrics2 . get load (  )   -   ( int ) method metrics1 . get load (  )  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MethodMetrics.java,getth percentile,public snapshot (  )  . get median (  )  * duration factor;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MethodMetrics.java,getth percentile,public snapshot (  )  . get75th percentile (  )  * duration factor;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MethodMetrics.java,getth percentile,public snapshot (  )  . get95th percentile (  )  * duration factor;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MethodMetrics.java,getth percentile,public snapshot (  )  . get98th percentile (  )  * duration factor;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MethodMetrics.java,getth percentile,public snapshot (  )  . get999th percentile (  )  * duration factor;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MethodMetrics.java,getth percentile,public snapshot (  )  . get99th percentile (  )  * duration factor;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MethodMetrics.java,get count,public count (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MethodMetrics.java,get fifteen minute rate,public fifteen minute rate (  )  * rate factor;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MethodMetrics.java,get five minute rate,public five minute rate (  )  * rate factor;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MethodMetrics.java,get load,public snapshot (  )  . size (  )  * get mean (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MethodMetrics.java,get max,public snapshot (  )  . get max (  )  * duration factor;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MethodMetrics.java,get mean,public snapshot (  )  . get mean (  )  * duration factor;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MethodMetrics.java,get mean rate,public mean rate (  )  * rate factor;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MethodMetrics.java,get min,public snapshot (  )  . get min (  )  * duration factor;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MethodMetrics.java,get name,public string   (  )  {  return name;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MethodMetrics.java,get one minute rate,public one minute rate (  )  * rate factor;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MethodMetrics.java,get percentage,public
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MethodMetrics.java,get std dev,public snapshot (  )  . get std dev (  )  * duration factor;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MethodMetrics.java,is active,public
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MethodMetrics.java,set active,public
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MethodMetrics.java,set percentage,public
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MethodMetrics.java,sorted metrics,public list <  ?  extends  method metrics >    (  collection <  ?  extends  method metrics >  collection )  {   array list <  ?  extends  method metrics >  list = new  array list <  >  ( collection ) ;  collections . sort ( list new  comparator <  method metrics >  (  )  {  @ override public int compare (   method metrics method metrics1   method metrics method metrics2 )  {  return  ( int )  (  ( int ) method metrics2 . get load (  )   -   ( int ) method metrics1 . get load (  )  ) ;  }   }   ) ; int total load = 0; for  (   method metrics m : list )   {  total load +  = m . get load (  ) ;  }  for  (   method metrics m : list )   {  int percentage =  ( int )  (  ( m . get load (  )  * 100 )   /  total load ) ; m . set percentage ( percentage ) ;  }  return list;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MethodMetrics.java,to string,"public string   (  )  {  return "" method metrics:""  +  get name (  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MethodMetrics.java,update,public time unit .  n a n o s e c o n d s ) ;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MethodMetrics.java,values,public snapshot (  )  . get values (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MonitoredThreadMethodMetrics.java,monitored thread method metrics,thread thread  apm agent context apm agent context )  {  super ( apm agent context ) ; this . thread = thread;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MonitoredThreadMethodMetrics.java,create proxy,override protected  thread context method metrics proxy   ( int rank )  {   thread context method metrics proxy result = new  thread context method metrics proxy (  ) ; result . set thread ( thread ) ; apm agent context . register method metrics m bean ( thread . get name (  )  thread . get id (  )  rank result
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MonitoredMethodMetrics.java,monitored method metrics,apm agent context apm agent context )  {  this . apm agent context = apm agent context;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MonitoredMethodMetrics.java,calculate method metrics,public list <  ?  extends  method metrics >  method metrics list )  {  if  ( method metrics list . size (  )   <  proxy list . size (  )  )   {  set monitor size ( method metrics list . size (  )  ) ;  }  if  ( method metrics list . size (  )   >  proxy list . size (  )  && proxy list . size (  )   <  monitor size )   {  int extra = monitor size  -  proxy list . size (  ) ; if  ( extra  >  0 )   {  for  ( int i = 0; i  <  extra; i +  +  )   {  proxy list . add ( create proxy ( proxy list . size (  )  )  ) ;  }   }   }  for  ( int i = 0; i  <  method metrics list . size (  )  && i  <  proxy list . size (  ) ; i +  +  )   {   method metrics proxy method metrics proxy = proxy list . get ( i ) ; if  ( method metrics proxy  !  =  null )   {  method metrics proxy . set method metrics ( method metrics list . get ( i )  ) ;  }   }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MonitoredMethodMetrics.java,create proxy,protected method metrics proxy   ( int rank )  {   method metrics proxy result = new  method metrics proxy (  ) ; apm agent context . register method metrics m bean ( rank result ) ; return result;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MonitoredMethodMetrics.java,destroy,protected method metrics proxy method metrics proxy : proxy list )   {  apm agent context . unregister method metrics m bean ( method metrics proxy ) ;  }  proxy list . clear (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MonitoredMethodMetrics.java,get monitor size,public size;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MonitoredMethodMetrics.java,set monitor size,public size )  {  this . monitor size = monitor size; while  ( proxy list . size (  )   >  monitor size )   {   method metrics proxy method metrics proxy = proxy list . get ( proxy list . size (  )   -  1 ) ; proxy list . remove ( proxy list . size (  )   -  1 ) ; apm agent context . unregister method metrics m bean ( method metrics proxy ) ;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ThreadContextMethodMetrics.java,thread context method metrics,public thread thread  atomic reference <  thread context method metrics stack >  stack ref  string name )  {  super ( name ) ; this . thread = thread; this . stack ref = stack ref;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ThreadContextMethodMetrics.java,get thread id,public id (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ThreadContextMethodMetrics.java,get thread name,public string   (  )  {  return thread . get name (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ThreadContextMethodMetrics.java,on enter,public context = timer . time (  ) ; stack ref . get (  )  . push ( this ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ThreadContextMethodMetrics.java,on exit,public thread context method metrics last = stack ref . get (  )  . pop (  ) ; if  ( last  =  =  this )   {  result = timer context . stop (  ) ;  }  else  {  while  ( last  !  =  null && last  !  =  this )   {  result = last . timer context . stop (  ) ; last = stack ref . get (  )  . pop (  ) ;  }  if  ( last  =  =  this )   {  result = timer context . stop (  ) ;  }   }  return result;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ThreadContextMethodMetrics.java,to string,"public string   (  )  {  return "" thread context method metrics:""  +  get name (  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ThreadContextMethodMetricsProxy.java,get thread,public thread   (  )  {  return thread;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ThreadContextMethodMetricsProxy.java,get thread id,override public long   (  )  {   thread t = thread; return t  !  =  null  ?  t . get id (  )  :  - 1;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ThreadContextMethodMetricsProxy.java,get thread name,"override public  string   (  )  {   thread t = thread; return t  !  =  null  ?  t . get name (  )  : ""  n o t  s e t"";  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ThreadContextMethodMetricsProxy.java,set thread,public thread thread )  {  this . thread = thread;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ThreadMetrics.java,thread metrics,public apm agent context apm agent context  thread thread )  {  this . method stack ref = new  atomic reference <  >  ( new  thread context method metrics stack (  )  ) ; this . apm agent context = apm agent context; this . thread m x bean =  management factory . get thread m x bean (  ) ; this . thread info = thread m x bean . get thread info ( thread . get id (  )  ) ; this . thread = thread;  apm configuration configuration = apm agent context . get configuration (  ) ; this . monitored thread method metrics = new  monitored thread method metrics ( thread apm agent context ) ; this . monitored thread method metrics . set monitor size ( configuration . get thread metric depth (  )  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ThreadMetrics.java,calculate method metrics,public list <  thread context method metrics >  list =  (  list <  thread context method metrics >  )  method metrics . sorted metrics ( this . methods . values (  )  ) ; monitored thread method metrics . calculate method metrics ( list ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ThreadMetrics.java,destroy,public thread method metrics . destroy (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ThreadMetrics.java,enter,public string method name boolean always active )  {   thread context method metrics thread context method metrics = methods . get ( method name ) ; if  ( thread context method metrics  =  =  null )   {  thread context method metrics = new  thread context method metrics ( thread this . method stack ref method name ) ; thread context method metrics . set active ( apm agent context . is monitor by default (  )  ) ; methods . put if absent ( method name thread context method metrics ) ;  }  if  ( always active || thread context method metrics . is active (  )  )   {  thread context method metrics . on enter (  ) ;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ThreadMetrics.java,exit,public string method name boolean always active )  {  long result =  - 1;  thread context method metrics thread context method metrics = methods . get ( method name ) ; if  ( thread context method metrics  !  =  null )   {  if  ( always active || thread context method metrics . is active (  )  )   {  result = thread context method metrics . on exit (  ) ;  }   }  else  {  method stack ref . set ( new  thread context method metrics stack (  )  ) ;  }  return result;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ThreadMetrics.java,get cpu time,public m x bean . get thread cpu time ( thread . get id (  )  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ThreadMetrics.java,get name,"public string   (  )  {  return thread . get name (  )   +  ""[""  +  thread . get id (  )  +  ""]"";  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ThreadMetrics.java,get thread,thread   (  )  {  return thread;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ThreadMetrics.java,get thread info,public thread info   (  )  {  return thread info;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ThreadMetrics.java,get user time,public m x bean . get thread user time ( thread . get id (  )  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ThreadMetrics.java,is active,public string method name )  {   thread context method metrics thread context method metrics = methods . get ( method name ) ; return thread context method metrics  !  =  null  ?  thread context method metrics . is active (  )  : false;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ThreadMetrics.java,is dead,public alive (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ThreadMetrics.java,remove,public thread context method metrics   (  string full method name )  {   thread context method metrics result = methods . remove ( full method name ) ; return result;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ThreadMetrics.java,set active,public string method name boolean flag )  {   thread context method metrics thread context method metrics = methods . get ( method name ) ; if  ( thread context method metrics  !  =  null )   {  thread context method metrics . set active ( flag ) ;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ThreadMetrics.java,set monitor size,public size )  {  monitored thread method metrics . set monitor size ( monitor size ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ThreadMetrics.java,to string,"public string   (  )  {  return "" thread metrics:""  +  get name (  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ThreadContextMethodMetricsStack.java,thread context method metrics stack,thread context method metrics[2];  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ThreadContextMethodMetricsStack.java,pop,thread context method metrics   (  )  {  final  thread context method metrics result = stack[ -  - pointer]; stack[pointer] = null; return result;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ThreadContextMethodMetricsStack.java,push,thread context method metrics   (  thread context method metrics value )  {  if  ( pointer  +  1  >  =  stack . length )   {  resize stack ( stack . length * 2 ) ;  }  stack[pointer +  + ] = value; return value;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ThreadContextMethodMetricsStack.java,resize stack,private capacity )  {   thread context method metrics[] new stack = new  thread context method metrics[new capacity];  system . arraycopy ( stack 0 new stack 0  math . min ( pointer new capacity )  ) ; stack = new stack;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ThreadContextMethodMetricsStack.java,to string,"public string   (  )  {   string builder result = new  string builder ( ""["" ) ; for  ( int i = 0; i  <  pointer; i +  +  )   {  if  ( i  >  0 )   {  result . append ( ""  "" ) ;  }  result . append ( stack[i] . get name (  )  ) ;  }  result . append ( ']' ) ; return result . to string (  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\strategy\sampling\SamplingStrategy.java,sampling strategy,public apm agent context context )  {  this . context = context; this . configuration = context . get configuration (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\strategy\sampling\SamplingStrategy.java,add measurement,private thread thread  stack trace element[] stack trace elements )  {  if  ( thread  !  =  null && thread . is alive (  )  && stack trace elements  !  =  null && stack trace elements . length  >  0 )   {   stack trace element top of stack = stack trace elements[0];  string current method = get current method ( top of stack ) ; if  ( configuration . is audit ( top of stack . get class name (  )  top of stack . get method name (  )  )  )   {   string last method = current methods . put ( thread . get id (  )  current method ) ; if  ( last method  =  =  null )   {  context . enter method ( thread current method true ) ;  }  else if  (  ! last method . equals ( current method )  )   {  context . exit method ( thread last method true ) ;  }  else  {   }   }   }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\strategy\sampling\SamplingStrategy.java,cleanup,private list <  thread info >  remove list = null;  thread m x bean thread m x bean =  management factory . get thread m x bean (  ) ; for  (   long id : current methods . key set (  )  )   {   thread info thread info = thread m x bean . get thread info ( id ) ; if  ( thread info  !  =  null )   {  if  ( thread info . get thread state (  )   =  =   thread .  state .  t e r m i n a t e d )   {  if  ( remove list  =  =  null )   {  remove list = new  array list <  >  (  ) ;  }  remove list . add ( thread info ) ;  }   }   }  if  ( remove list  !  =  null )   {  for  (   thread info thread info : remove list )   {  current methods . remove ( thread info . get thread id (  )  ) ;  }   }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\strategy\sampling\SamplingStrategy.java,get current method,"private string   (  stack trace element top of stack )  {   string builder string builder = new  string builder ( top of stack . get class name (  )  . length (  )   +  top of stack . get method name (  )  . length (  )   +  1 ) ; string builder . append ( top of stack . get class name (  )  )  . append ( "" . "" )  . append ( top of stack . get method name (  )  ) ; return string builder . to string (  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\strategy\sampling\SamplingStrategy.java,initialize,"override public void   (  )  throws  exception  {  if  ( initialized . compare and set ( false true )  )   {  sampling thread = new  thread ( this "" fabric8 -  apm agent -  sampling strategy"" ) ; sampling thread . set daemon ( true ) ; configuration . add change listener ( this ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\strategy\sampling\SamplingStrategy.java,run,override public void   (  )  {  long last time = 0; while  ( started . get (  )  )   {  try  {  for  (   map .  entry <  thread  stack trace element[] >  thread entry :  thread . get all stack traces (  )  . entry set (  )  )   {  if  ( thread entry . get key (  )   !  =   thread . current thread (  )  )   {  add measurement ( thread entry . g
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\strategy\sampling\SamplingStrategy.java,shut down,override public void   (  )  throws  exception  {  if  ( initialized . compare and set ( true false )  )   {  configuration . remove change listener ( this ) ; sampling thread = null;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\strategy\sampling\SamplingStrategy.java,start,override public void   (  )  throws  exception  {  if  ( started . compare and set ( false true )  )   {  initialize (  ) ; sampling thread . start (  ) ;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\strategy\sampling\SamplingStrategy.java,stop,override public void   (  )  throws  exception  {  if  ( started . compare and set ( true false )  )   {   }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\strategy\trace\ApmClassVisitor.java,apm class visitor,public trace strategy trace strategy  class visitor cv  class info class info )  {  super (  a s m5 cv ) ; this . trace strategy = trace strategy; this . class info = class info;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\strategy\trace\ApmClassVisitor.java,can profile method,"private string method name  string method descriptor )  {  if  ( method descriptor  !  =  null )   {   type[] parameter types =  type . get argument types ( method descriptor ) ; if  ( method name . equals ( "" < init > "" )  || method name . equals ( "" < clinit > "" )  )   {  return false;  }  if  ( method name . starts with ( ""is"" )  || method name . starts with ( ""get"" )  &&  ( parameter types  =  =  null || parameter types . length  =  =  0 )  )   {  return false;  }  return  !  ( method name . starts with ( ""set"" )  && parameter types  !  =  null && parameter types . length  =  =  1 ) ;  }  return false;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\strategy\trace\ApmClassVisitor.java,get description,"private string   (  string desc )  {   type[] parameter types =  type . get argument types ( desc ) ;  string result; if  ( parameter types  =  =  null || parameter types . length  =  =  0 )   {  result = "" (  ) "";  }  else  {  result = "" ( ""; for  ( int i = 0; i  <  parameter types . length; i +  +  )   {  result +  = parameter types[i] . get class name (  ) ; if  (  ( i  +  1 )   <  parameter types . length )   {  result +  = "" "";  }   }  result +  = "" ) "";  }   type type =  type . get return type ( desc ) ; if  ( type  =  =  null )   {  result +  = "" void"";  }  else  {  result +  = "" ""  +  type . get class name (  ) ;  }  return result;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\strategy\trace\ApmClassVisitor.java,visit,public string name  string signature  string super name  string[] interfaces )  {  super . visit ( version access name signature super name interfaces ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\strategy\trace\ApmClassVisitor.java,visit method,"public method visitor   ( int access  string name  string desc  string signature  string[] exceptions )  {  try  {   string method description = get description ( desc ) ; class info . add method ( name method description ) ; if  ( can profile method ( name desc )  && trace strategy . is audit ( class info . get class name (  )  name )  )   {   method visitor mv = super . visit method ( access name desc signature exceptions ) ;  apm method visitor method visitor = new  apm method visitor ( mv class info . get class name (  )  name  +  method description ) ; class info . add transformed method ( name method description ) ; return method visitor;  }   }  catch  (   throwable e )   {  e . print stack trace (  ) ;  l o g . error ( "" failed to visit method ""  +  name e ) ;  }  return super . visit method ( access name desc signature exceptions ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\strategy\trace\TraceStrategy.java,trace strategy,public apm agent context context  instrumentation instrumentation )  {  this . context = context; this . configuration = context . get configuration (  ) ; this . instrumentation = instrumentation;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\strategy\trace\TraceStrategy.java,configuration changed,override public void   (  )  {  if  ( started . get (  )  )   {  if  ( configuration . is filter changed (  )  )   {   list <  class info >  deltas = context . build delta list (  ) ; if  ( deltas  !  =  null &&  ! deltas . is empty (  )  )   {  for  (   class info class info : deltas )   {  if  ( configuration . is async transformatio
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\strategy\trace\TraceStrategy.java,get context,public apm agent context   (  )  {  return context;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\strategy\trace\TraceStrategy.java,get instrumentation,public instrumentation   (  )  {  return instrumentation;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\strategy\trace\TraceStrategy.java,initialize,override public void   (  )  throws  exception  {  if  ( initialized . compare and set ( false true )  )   {  configuration . add change listener ( this ) ;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\strategy\trace\TraceStrategy.java,instrument application,"private file not found exception   unmodifiable class exception  {  if  (  ! instrumentation . is retransform classes supported (  )  )   {  throw new  unmodifiable class exception (  ) ;  }  instrumentation . add transformer ( this true ) ; for  (   class <  ?  >  c : instrumentation . get all loaded classes (  )  )   {  if  ( is instrument class ( c )  )   {  if  ( configuration . is async transformation (  )  )   {  try  {  blocking queue . put ( c ) ;  }  catch  (   interrupted exception e )   {   thread . current thread (  )  . interrupt (  ) ; break;  }   }  else  {  try  {  instrumentation . retransform classes ( new  class[] { c }  ) ;  }  catch  (   throwable e )   {   l o g . error ( "" could not transform ""  +  c . get name (  )  e ) ;  }   }   }   }  if  ( configuration . is async transformation (  )  &&  ! blocking queue . is empty (  )  )   {  start transform thread (  ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\strategy\trace\TraceStrategy.java,is audit,public string class name  string method name )  {  return configuration . is audit ( class name method name ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\strategy\trace\TraceStrategy.java,is instrument class,"private class c )  {  if  (  ! instrumentation . is modifiable class ( c )  )   {   l o g . trace ( "" n o  i n s t r u m e n t:  class  {  }  is not modifiable"" c . get name (  )  ) ; return false;  }  if  (  ! configuration . is audit ( c . get name (  )  )  )   {   l o g . trace ( "" n o  i n s t r u m e n t:  class  {  }  is blacklisted"" c . get name (  )  ) ; return false;  }  if  ( c . is array (  )  || c . is annotation (  )  || c . is interface (  ) || c . is primitive (  ) || c . is synthetic (  ) || c . is enum (  )  )   {   l o g . trace ( "" n o  i n s t r u m e n t:  class  {  }  is an array  primitive  annotation or enum etc . "" c . get name (  )  ) ; return false;  }  return true;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\strategy\trace\TraceStrategy.java,run,override public void   (  )  {  while  ( initialized . get (  )  &&  ! blocking queue . is empty (  )  )   {  try  {   class <  ?  >  a class = blocking queue . take (  ) ; if  ( a class  !  =  null )   {  if  ( is instrument class ( a class )  )   {  try  {  instrumentation . retransform classes ( new  class[] { a class }  ) ;  }  catch  (  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\strategy\trace\TraceStrategy.java,set context,public apm agent context context )  {  this . context = context; this . configuration = context . get configuration (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\strategy\trace\TraceStrategy.java,set instrumentation,public instrumentation instrumentation )  {  this . instrumentation = instrumentation;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\strategy\trace\TraceStrategy.java,shut down,override public void   (  )  {  if  ( initialized . compare and set ( true false )  )   {  stop (  ) ; configuration . remove change listener ( this ) ; instrumentation . remove transformer ( this ) ;  thread t = transform thread; transform thread = null; if  ( t  !  =  null &&  ! t . is interrupted (  )  )   {  t . int
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\strategy\trace\TraceStrategy.java,start,override public void   (  )  throws  exception  {  if  ( started . compare and set ( false true )  )   {  initialize (  ) ; instrument application (  ) ;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\strategy\trace\TraceStrategy.java,start transform thread,"private async transformation (  )  && transform thread  =  =  null )   {  transform thread = new  thread ( new  runnable (  )  {  @ override public void run (  )  {  while  ( initialized . get (  )  &&  ! blocking queue . is empty (  )  )   {  try  {   class <  ?  >  a class = blocking queue . take (  ) ; if  ( a class  !  =  null )   {  if  ( is instrument class ( a class )  )   {  try  {  instrumentation . retransform classes ( new  class[] { a class }  ) ;  }  catch  (   throwable e )   {   l o g . error ( "" could not transform ""  +  a class . get name (  )  e ) ;  }   }   }   }  catch  (   interrupted exception e )   {  shut down (  ) ;  }   }   }   }   ) ; transform thread . set daemon ( true ) ; transform thread . start (  ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\strategy\trace\TraceStrategy.java,stop,override public void   (  )  {  if  ( started . compare and set ( true false )  )   {   }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\strategy\trace\TraceStrategy.java,transform,override public byte[]   (  class loader loader  string class name  class <  ?  >  class being redefined  protection domain protection domain byte[] classfile buffer )  throws  illegal class format exception  {  byte[] buffer = null;  class info class info = context . get class info ( class nam
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\strategy\trace\TraceStrategy.java,verify class,"private string class name byte[] transformed )  {  boolean result = true; if  ( configuration . is verify classes (  )  )   {   string writer sw = new  string writer (  ) ;  print writer pw = new  print writer ( sw ) ;  check class adapter . verify ( new  class reader ( transformed )  false pw ) ; if  ( sw . to string (  )  . length (  )   !  =  0 )   {  result = false;  l o g . error ( "" failed to transform class: ""  +  class name ) ;  l o g . error ( sw . to string (  )  ) ;  }   }  return result;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\strategy\trace\ApmMethodVisitor.java,apm method visitor,"public method visitor mv  string class name  string method name )  {  super (  a s m5 mv ) ; this . full method name = class name  +  ""@""  +  method name;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\strategy\trace\ApmMethodVisitor.java,visit code,"override public void   (  )  {  super . visit code (  ) ; super . visit ldc insn ( full method name ) ; super . visit method insn (  i n v o k e s t a t i c ""io / fabric8 / apmagent /  apm agent"" ""enter method"" "" (  ljava / lang /  string; )  v"" false ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\strategy\trace\ApmMethodVisitor.java,visit insn,"override public void   ( int opcode )  {  if  (  ( opcode  >  =   i r e t u r n && opcode  <  =   r e t u r n )  || opcode  =  =   a t h r o w )   {  super . visit ldc insn ( full method name ) ; super . visit method insn (  i n v o k e s t a t i c ""io / fabric8 / apmagent /  apm agent"" ""exit method"" "" (  ljava / lang /  string; )  v"" false ) ;  }  su"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\utils\PropertyUtils.java,add fields,private object target  class start class  class <  object >  stop class  linked hash map <  string  object >  map )  {  if  ( start class  !  =  stop class )   {  add fields ( target start class . get superclass (  )  stop class map ) ;  }   field[] fields = start class . get declared fields (  ) ; for  (   field field : fields )   {  if  (  modifier . is static ( field . get modifiers (  )  )  ||  modifier . is transient ( field . get modifiers (  )  )  ||  modifier . is private ( field . get modifiers (  )  )  )   {  continue;  }  try  {  field . set accessible ( true ) ;  object o = field . get ( target ) ; if  ( o  !  =  null && o . get class (  )  . is array (  )  )   {  try  {  o =  arrays . as list (  (  object[] ) o ) ;  }  catch  (   exception e )   {   }   }  map . put ( field . get name (  )  o ) ;  }  catch  (   exception e )   {  e . print stack trace (  ) ;  }   }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\utils\PropertyUtils.java,convert,"private object   (  object value  class to )  {  if  ( value  =  =  null )   {  if  ( boolean . class . is assignable from ( to )  )   {  return  boolean .  f a l s e;  }  return null;  }  if  ( to . is assignable from ( value . get class (  )  )  )   {  return to . cast ( value ) ;  }  if  ( to . is assignable from (  string[] . class )  )   {  return  string array converter . convert to string array ( value ) ;  }   type conversion support .  converter converter =  type conversion support . lookup converter ( value . get class (  )  to ) ; if  ( converter  !  =  null )   {  return converter . convert ( value ) ;  }  else  {  throw new  illegal argument exception ( "" cannot convert from ""  +  value . get class (  )   +  "" to "" +  to +  "" with value "" +  value ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\utils\PropertyUtils.java,convert to string,"public string   (  object value  class to )  {  if  ( value  =  =  null )   {  return null;  }  if  ( value instanceof  string )   {  return  (  string ) value;  }  if  (  string[] . class . is instance ( value )  )   {   string[] array =  (  string[] ) value; return  string array converter . convert to string ( array ) ;  }   type conversion support .  converter converter =  type conversion support . lookup converter ( value . get class (  )   string . class ) ; if  ( converter  !  =  null )   {  return  (  string ) converter . convert ( value ) ;  }  else  {  throw new  illegal argument exception ( "" cannot convert from ""  +  value . get class (  )   +  "" to "" +  to +  "" with value "" +  value ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\utils\PropertyUtils.java,extract properties,"public map <  string  object >    (  map props  string option prefix )  {  if  ( props  =  =  null )   {  throw new  illegal argument exception ( ""props was null . "" ) ;  }   hash map <  string  object >  rc = new  hash map <  string  object >  ( props . size (  )  ) ; for  (  iterator <  ?  >  iter = props . key set (  )  . iterator (  ) ; iter . has next (  ) ;  )   {   string name =  (  string ) iter . next (  ) ; if  ( name . starts with ( option prefix )  )   {   object value = props . get ( name ) ; name = name . substring ( option prefix . length (  )  ) ; rc . put ( name value ) ; iter . remove (  ) ;  }   }  return rc;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\utils\PropertyUtils.java,find setter method,"private method   (  class clazz  string name )  {  name = ""set""  +   character . to upper case ( name . char at ( 0 )  )   +  name . substring ( 1 ) ;  method[] methods = clazz . get methods (  ) ; for  (   method method : methods )   {   class <  ?  >  params[] = method . get parameter types (  ) ; if  ( method . get name (  )  . equals ( name )  && params . length  =  =  1 )   {  return method;  }   }  return null;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\utils\PropertyUtils.java,get properties,"public object target  map props  string option prefix )  {  boolean rc = false; if  ( target  =  =  null )   {  throw new  illegal argument exception ( ""target was null . "" ) ;  }  if  ( props  =  =  null )   {  throw new  illegal argument exception ( ""props was null . "" ) ;  }  if  ( option prefix  =  =  null )   {  option prefix = """";  }   class <  ?  >  clazz = target . get class (  ) ;  method[] methods = clazz . get methods (  ) ; for  (   method method : methods )   {   string name = method . get name (  ) ;  class <  ?  >  type = method . get return type (  ) ;  class <  ?  >  params[] = method . get parameter types (  ) ; if  (  ( name . starts with ( ""is"" )  || name . starts with ( ""get"" )  )  && params . length  =  =  0 && type  !  =  null )   {  try  {   object value = method . invoke ( target ) ; if  ( value  =  =  null )   {  continue;  }   string str value = convert to string ( value type ) ; if  ( str value  =  =  null )   {  continue;  }  if  ( name . starts with ( ""get"" )  )   {  name = name . substring ( 3 4 )  . to lower case (  locale .  e n g l i s h )   +  name . substring ( 4 ) ;  }  else  {  name = name . substring ( 2 3 )  . to lower case (  locale .  e n g l i s h )   +  name . substring ( 3 ) ;  }  props . put ( option prefix  +  name str value ) ; rc = true;  }  catch  (   exception ignore )   {   }   }   }  return rc;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\utils\PropertyUtils.java,set properties,"public object target  map props )  {  boolean rc = false; if  ( target  =  =  null )   {  throw new  illegal argument exception ( ""target was null . "" ) ;  }  if  ( props  =  =  null )   {  throw new  illegal argument exception ( ""props was null . "" ) ;  }  for  (  iterator <  ?  >  iter = props . entry set (  )  . iterator (  ) ; iter . has next (  ) ;  )   {   map .  entry <  ?   ?  >  entry =  (  map .  entry <  ?   ?  >  ) iter . next (  ) ; if  ( set property ( target  (  string ) entry . get key (  )  entry . get value (  )  )  )   {  iter . remove (  ) ; rc = true;  }   }  return rc;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\utils\PropertyUtils.java,set property,public object target  string name  object value )  {  try  {   class <  ?  >  clazz = target . get class (  ) ;  method setter = find setter method ( clazz name ) ; if  ( setter  =  =  null )   {  return false;  }  if  ( value  =  =  null || value . get class (  )   =  =  setter . get parameter types (  ) [0] )   {  setter . invoke ( target value ) ;  }  else  {  setter . invoke ( target convert ( value setter . get parameter types (  ) [0] )  ) ;  }  return true;  }  catch  (   exception e )   {  e . print stack trace (  ) ; return false;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\utils\PropertyUtils.java,simple name,"public string   (  class clazz )  {   string name = clazz . get name (  ) ; int p = name . last index of ( "" . "" ) ; if  ( p  >  =  0 )   {  name = name . substring ( p  +  1 ) ;  }  return name;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\utils\PropertyUtils.java,to string,"public string   (  object target  class stop class  map <  string  object >  override fields )  {   linked hash map <  string  object >  map = new  linked hash map <  string  object >  (  ) ; add fields ( target target . get class (  )  stop class map ) ; if  ( override fields  !  =  null )   {  for  (   string key : override fields . key set (  )  )   {   object value = override fields . get ( key ) ; map . put ( key value ) ;  }   }   string buffer buffer = new  string buffer ( simple name ( target . get class (  )  )  ) ; buffer . append ( ""  { "" ) ;  set <  map .  entry <  string  object >  >  entry set = map . entry set (  ) ; boolean first = true; for  (   map .  entry <  string  object >  entry : entry set )   {   object value = entry . get value (  ) ;  object key = entry . get key (  ) ; if  ( first )   {  first = false;  }  else  {  buffer . append ( ""  "" ) ;  }  buffer . append ( key ) ; buffer . append ( ""  =  "" ) ; buffer . append ( value ) ;  }  buffer . append ( "" } "" ) ; return buffer . to string (  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\utils\StringArrayConverter.java,convert to string,"public string   (  string[] value )  {  if  ( value  =  =  null || value . length  =  =  0 )   {  return null;  }   string buffer result = new  string buffer (  string . value of ( value[0] )  ) ; for  ( int i = 1; i  <  value . length; i +  +  )   {  result . append ( "" "" )  . append ( value[i] ) ;  }  return result . to string (  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\utils\StringArrayConverter.java,convert to string array,"public string[]   (  object value )  {  if  ( value  =  =  null )   {  return null;  }   string text = value . to string (  ) ; if  ( text  =  =  null || text . length (  )   =  =  0 )   {  return null;  }   string tokenizer stok = new  string tokenizer ( text "" "" ) ; final  list <  string >  list = new  array list <  string >  (  ) ; while  ( stok . has more tokens (  )  )   {  list . add ( stok . next token (  )  ) ;  }   string[] array = list . to array ( new  string[list . size (  ) ] ) ; return array;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\utils\TypeConversionSupport.java,conversion key,public class <  ?  >  from  class <  ?  >  to )  {  this . from = from; this . to = to; this . hash code = from . hash code (  )  ^  ( to . hash code (  )   <  <  1 ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\test\java\io\fabric8\testApp\TestThreadFactory.java,test thread factory,public string prefix )  {  this . prefix = prefix;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\test\java\io\fabric8\testApp\TestThreadFactory.java,new thread,"override public  thread   (  runnable task )  {   string name = prefix  +  "" - ""  +  counter +  + ; return new  thread ( task name ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\test\java\io\fabric8\testApp\TestLoad.java,test load,public iterations )  {  this .  m a x _  i t e r a t i o n s = max iterations;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\test\java\io\fabric8\testApp\TestLoad.java,do something else,public and get (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\test\java\io\fabric8\testApp\TestLoad.java,get count,public
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\test\java\io\fabric8\testApp\TestLoad.java,load,public test values value )  {  load1 ( value ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\test\java\io\fabric8\testApp\TestLoad.java,load,public test values value )  {  sleep ( 100 ) ; load2 ( value ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\test\java\io\fabric8\testApp\TestLoad.java,load,public test values value )  {  sleep ( 10 ) ; count . increment and get (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\test\java\io\fabric8\testApp\TestLoad.java,run,"public m a x _  i t e r a t i o n s; i +  +  )   {  for  (   test values value :  test values . values (  )  )   {   system . out . println (  thread . current thread (  )  . get name (  )   +  "" running #""  +  i ) ; load ( value ) ; if  ( i % 2  =  =  0 )   {  do something else (  ) ;  }   }   }   system . out . println (  thread . current thread (  )  . get name (  )   +  "" done"" ) ; done . set ( true ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\test\java\io\fabric8\testApp\TestLoad.java,sleep,private time )  {  try  {   thread . sleep ( sleep time ) ;  }  catch  (   interrupted exception e )   {   }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\test\java\io\fabric8\testApp\TestApp.java,check enabled metrics,"protected m bean server m bean server =  management factory . get platform m bean server (  ) ; if  ( m bean server  !  =  null )   {  if  ( m bean server . is registered (  a g e n t _  m b e a n _  n a m e )  )   {  if  ( enabled agent . compare and set ( false true )  )   {  try  {  m bean server . invoke (  a g e n t _  m b e a n _  n a m e ""start metrics"" new  object[0] new  string[0] ) ;  system . out . println ( "" enabled agent metrics ""  +   a g e n t _  m b e a n _  n a m e ) ;  }  catch  (   exception e )   {   system . out . println ( "" failed to invoke the mbean: ""  +   a g e n t _  m b e a n _  n a m e ) ; e . print stack trace (  ) ;  }   }   }   }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\test\java\io\fabric8\testApp\TestApp.java,main,"public string args[] )  throws  exception  {  try  {   system . err . println ( "" r u n n i n g  .  .  . "" ) ; check enabled metrics (  ) ; final int  c o u n t = 20; for  ( int i = 0; i  <   c o u n t; i +  +  )   {   test load test load = new  test load (  ) ; pool . submit ( test load ) ;  }   test load test load = new  test load ( 1000 ) ; pool . submit ( test load ) ;  }  catch  (   throwable e )   {  e . print stack trace (  ) ;  }   system . err . println ( "" w a i t i n g  f o r  l o a d  t o  c o m p l e t e  .  .  . "" ) ; pool . await termination ( 5  time unit .  m i n u t e s ) ;  system . err . println ( "" s t o p p e d"" ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\await\SessionServicesAreReady.java,session services are ready,public kubernetes client kubernetes client  session session  configuration configuration )  {  this . session = session; this . kubernetes client = kubernetes client; this . configuration = configuration;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\await\SessionServicesAreReady.java,call,"override public  boolean   (  )  throws  exception  {  boolean result = true;  list <  service >  services = kubernetes client . services (  )  . in namespace ( session . get namespace (  )  )  . list (  )  . get items (  ) ; if  ( services . is empty (  )  )   {  result = false; session . get logger (  )  . warn ( "" no services ar"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\await\SessionServicesAreReady.java,filter services,private list <  service >    (  list <  service >  services  list <  string >  selected ids )  {  if  ( selected ids  !  =  null &&  ! selected ids . is empty (  )  )   {   list <  service >  result = new  array list <  >  (  ) ; for  (   service s : services )   {   string sid = get name ( s ) ; if  ( selected ids . contains ( sid )  )   {  result . add ( s ) ;  }   }  return result;  }  else  {  return services;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\await\SessionServicesAreReady.java,is endpoint available,"private service s )  {   string service status = null; boolean result = false;  string sid = get name ( s ) ;  string namespace = session . get namespace (  ) ;  endpoints endpoints = kubernetes client . endpoints (  )  . in namespace ( namespace )  . with name ( sid )  . get (  ) ;  service spec spec = s . get spec (  ) ; if  ( endpoints  !  =  null && spec  !  =  null )   {   list <  endpoint subset >  subsets = endpoints . get subsets (  ) ; if  ( subsets  !  =  null )   {  for  (   endpoint subset subset : subsets )   {   list <  endpoint address >  addresses = subset . get addresses (  ) ; if  ( addresses  !  =  null )   {  for  (   endpoint address address : addresses )   {   string ip = address . get ip (  ) ;  string addr = ip;  list <  service port >  ports = spec . get ports (  ) ; for  (   service port port : ports )   {   integer port number = port . get port (  ) ; if  ( port number  !  =  null && port number  >  0 )   {  if  ( configuration . is wait for service connection enabled (  )  )   {  try  (  socket socket = new  socket (  )  )  {  socket . connect ( new  inet socket address ( ip port number )   ( int ) configuration . get wait for service connection timeout (  )  ) ; service status = "" service: ""  +  sid  +  "" is ready .   provider:"" +  addr +  "" . ""; return true;  }  catch  (   exception e )   {  service status = "" service: ""  +  sid  +  "" is not ready !  in namespace "" +  namespace +  "" .   error: "" +  e . get message (  ) ;  }  finally  {  session . get logger (  )  . warn ( service status ) ;  }   }  else  {  service status = "" service: ""  +  sid  +  "" is ready .   not testing connecting to it !  .   provider:"" +  addr +  "" . ""; session . get logger (  )  . warn ( service status ) ; return true;  }   }   }   }   }   }   }   }  session . get logger (  )  . warn ( "" service: ""  +  sid  +  "" has no valid endpoints"" ) ; return result;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\await\WaitStrategy.java,wait strategy,public callable <  boolean >  condition long timeout long poll interval )  {  this . condition = condition; this . timeout = timeout; this . poll interval = poll interval;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\await\WaitStrategy.java,await,public exception  {  long start =  system . current time millis (  ) ; while  (  !  thread . interrupted (  )  &&  system . current time millis (  )   -  start  <  =  timeout )   {  try  {  if  ( condition . call (  )  )   {  return true;  }  else  {   thread . sleep ( poll interval ) ;  }   }  catch  (   interrupted exception e )   {   thread . current thread (  )  . interrupt (  ) ;  }   }  return false;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\await\CompositeCondition.java,composite condition,public callable <  boolean >  .  .  .  callables )  {  this . callable list =  arrays . as list ( callables ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\await\CompositeCondition.java,call,override public  boolean   (  )  throws  exception  {  boolean result = true; for  ( int i = 0; i  <  callable list . size (  )  && result; i +  +  )   {  result = result && callable list . get ( i )  . call (  ) ;  }  return result;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\await\SessionPodsAreReady.java,session pods are ready,public kubernetes client kubernetes client  session session )  {  this . session = session; this . kubernetes client = kubernetes client;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\await\SessionPodsAreReady.java,call,"override public  boolean   (  )  throws  exception  {  boolean result = true;  list <  pod >  pods = not null list ( kubernetes client . pods (  )  . in namespace ( session . get namespace (  )  )  . list (  )  . get items (  )  ) ; if  ( pods . is empty (  )  )   {  result = false; session . get logger (  )  . warn ( "" no pods are avail"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\await\SessionPodsAreReady.java,find log files,private sorted map <  string  file >    (  file log dir  string name )  {   sorted map <  string  file >  answer = new  tree map <  >  (  ) ;  file[] files = log dir . list files (  ) ; if  ( files  !  =  null )   {  for  (   file file : files )   {   string file name = file . get name (  ) ; if  ( file name . ends with (  log helpers .  l o g _  f i l e _  p o s t f i x )  )   {  file name =  strings . strip suffix ( file name  log helpers .  l o g _  f i l e _  p o s t f i x ) ; if  ( file name . starts with ( name )  )   {  answer . put ( file name file ) ;  }   }   }   }  return answer;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\Configuration.java,find config resource,"public u r l   (  string resource name )  {  return resource name . starts with ( "" / "" )   ?   configuration . class . get resource ( resource name )  :  configuration . class . get resource ( "" / ""  +  resource name ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\Configuration.java,find namespace for environment,"private string   (  string environment  map <  string  string >  map  kubernetes client kubernetes client  string develop namespace boolean fail on missing environment namespace )  {   string namespace = null; if  (  !  strings . is null or blank ( environment )  )   {  namespace =  environments . namespace for environment ( kubernetes client environment develop namespace ) ; if  (  strings . is not blank ( namespace )  )   {  return namespace;  }   string basedir =  system . get property ( ""basedir"" "" . "" ) ;  file folder = new  file ( basedir ) ;  project config project config =  project configs . find from folder ( folder ) ; if  ( project config  !  =  null )   {   linked hash map <  string  string >  environments = project config . get environments (  ) ; if  ( environments  !  =  null )   {  namespace = environments . get ( environment ) ;  }   }   string key = environment . to lower case (  )   +  "" . namespace""; if  (  strings . is null or blank ( namespace )  )   {  namespace = get string property ( key map null ) ;  }  if  (  strings . is null or blank ( namespace )  )   {  if  ( fail on missing environment namespace )   {  throw new  illegal state exception ( "" a fabric8 environment '""  +  environment  +  ""' has been specified  but no matching namespace was found in the fabric8 . yml file or '"" +  key +  ""' system property"" ) ;  }  else  {  return develop namespace;  }   }   }  return namespace;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\Configuration.java,from map,"public configuration   (  map <  string  string >  map  kubernetes client test kubernetes client )  {   configuration configuration = new  configuration (  ) ; try  {  configuration . master url = get string property (  k u b e r n e t e s _  m a s t e r map  f a l l b a c k _  c o n f i g . get master url (  )  ) ; configuration . environment = get string property (  f a b r i c8 _  e n v i r o n m e n t map null ) ; configuration . environment init enabled = get boolean property (  e n v i r o n m e n t _  i n i t _  e n a b l e d map true ) ; configuration . environment config url = get kubernetes configuration url ( map ) ; configuration . environment dependencies =  strings . split and trim as list ( get string property (  e n v i r o n m e n t _  d e p e n d e n c i e s map """" )  ""\\s + "" ) ; configuration . namespace lazy create enabled = get boolean property (  n a m e s p a c e _  l a z y _  c r e a t e _  e n a b l e d map  d e f a u l t _  n a m e s p a c e _  l a z y _  c r e a t e _  e n a b l e d ) ; configuration . properties = map;  string existing namespace = get string property (  n a m e s p a c e _  t o _  u s e map null ) ; configuration . session id =  u u i d . random u u i d (  )  . to string (  ) ; configuration . namespace cleanup confirmation enabled = get boolean property (  n a m e s p a c e _  c l e a n u p _  c o n f i r m _  e n a b l e d map false ) ; configuration . delete all resources on exit = get boolean property (  n a m e s p a c e _  d e l e t e _  a l l _  r e s o u r c e s _  o n _  e x i t map false ) ; configuration . namespace cleanup timeout = get long property (  n a m e s p a c e _  c l e a n u p _  t i m e o u t map  d e f a u l t _  n a m e s p a c e _  c l e a n u p _  t i m e o u t ) ; configuration . wait timeout = get long property (  w a i t _  t i m e o u t map  d e f a u l t _  w a i t _  t i m e o u t ) ; configuration . wait poll interval = get long property (  w a i t _  p o l l _  i n t e r v a l map  d e f a u l t _  w a i t _  p o l l _  i n t e r v a l ) ; configuration . wait for service list =  strings . split and trim as list ( get string property (  w a i t _  f o r _  s e r v i c e _  l i s t map """" )  ""\\s + "" ) ; configuration . wait for service connection enabled = get boolean property (  w a i t _  f o r _  s e r v i c e _  c o n n e c t i o n _  e n a b l e d map  d e f a u l t _  w a i t _  f o r _  s e r v i c e _  c o n n e c t i o n _  e n a b l e d ) ; configuration . wait for service connection timeout = get long property (  w a i t _  f o r _  s e r v i c e _  c o n n e c t i o n _  t i m e o u t map  d e f a u l t _  n a m e s p a c e _  c l e a n u p _  t i m e o u t ) ; configuration . ansi logger enabled = get boolean property (  a n s i _  l o g g e r _  e n a b l e d map true ) ; configuration . kubernetes domain = get string property (  k u b e r n e t e s _  d o m a i n map """" ) ; configuration . gofabric8 enabled = get boolean property (  g o f a b r i c8 _  e n a b l e d map false ) ; configuration . create namespace for test = get boolean property (  c r e a t e _  n a m e s p a c e _  f o r _  t e s t map false ) ;  kubernetes client kubernetes client = get or create kubernetes client ( configuration test kubernetes client ) ; boolean fail on missing environment namespace = get boolean property (  f a i l _  o n _  m i s s i n g _  e n v i r o n m e n t _  n a m e s p a c e map false ) ;  string default develop namespace = existing namespace; if  (  strings . is null or blank ( default develop namespace )  )   {  default develop namespace = kubernetes client . get namespace (  ) ;  }   string develop namespace = get string property (  d e v e l o p m e n t _  n a m e s p a c e map default develop namespace ) ; configuration . kubernetes client = kubernetes client;  string environment namespace = find namespace for environment ( configuration . environment map kubernetes client develop namespace fail on missing environment namespace ) ;  string provided namespace = select namespace ( environment namespace existing namespace ) ; if  ( configuration . create namespace for test )   {  configuration . namespace =  n a m e s p a c e _  p r e f i x  +  configuration . session id;  }  else  {   string namespace =  strings . is not blank ( provided namespace )   ?  provided namespace : develop namespace; ; if  (  strings . is null or blank ( namespace )  )   {  namespace = kubernetes client . get namespace (  ) ; if  (  strings . is null or blank ( namespace )  )   {  namespace =  kubernetes helper . default namespace (  ) ;  }   }  configuration . namespace = namespace;  }  configuration . namespace cleanup enabled = get boolean property (  n a m e s p a c e _  c l e a n u p _  e n a b l e d map  strings . is null or blank ( provided namespace )  ) ;  }  catch  (   throwable t )   {  if  ( t instanceof  runtime exception )   {  throw  (  runtime exception ) t;  }  else  {  throw new  runtime exception ( t ) ;  }   }  return configuration;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\Configuration.java,get boolean property,private boolean   (  string name  map <  string  string >  map  boolean default value )  {  if  ( map . contains key ( name )  )   {  return  boolean . parse boolean ( map . get ( name )  ) ;  }  else  {  return  utils . get system property or env var ( name default value ) ;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\Configuration.java,get environment,public string   (  )  {  return environment;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\Configuration.java,get environment config url,public u r l   (  )  {  return environment config url;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\Configuration.java,get environment dependencies,public list <  string >    (  )  {  return environment dependencies;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\Configuration.java,get gofabric enabled,public boolean   (  )  {  return gofabric8 enabled;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\Configuration.java,get kubernetes client,public kubernetes client   (  )  {  return kubernetes client;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\Configuration.java,get kubernetes configuration url,"private u r l   (  map <  string  string >  map )  throws  malformed u r l exception  {  if  ( map . contains key (  e n v i r o n m e n t _  c o n f i g _  u r l )  )   {  return new  u r l ( map . get (  e n v i r o n m e n t _  c o n f i g _  u r l )  ) ;  }  else if  ( map . contains key (  e n v i r o n m e n t _  c o n f i g _  r e s o u r c e _  n a m e )  )   {   string resource name = map . get (  e n v i r o n m e n t _  c o n f i g _  r e s o u r c e _  n a m e ) ; return find config resource ( resource name ) ;  }  else if  (  strings . is not blank (  utils . get system property or env var (  e n v i r o n m e n t _  c o n f i g _  u r l """" )  )  )   {  return new  u r l (  utils . get system property or env var (  e n v i r o n m e n t _  c o n f i g _  u r l """" )  ) ;  }  else  {   string default value = "" / ""  +   d e f a u l t _  c o n f i g _  f i l e _  n a m e;  string resource name =  utils . get system property or env var (  e n v i r o n m e n t _  c o n f i g _  r e s o u r c e _  n a m e default value ) ;  u r l answer = find config resource ( resource name ) ; if  ( answer  =  =  null )   {   }  return answer;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\Configuration.java,get kubernetes domain,public string   (  )  {  return kubernetes domain;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\Configuration.java,get long property,private long   (  string name  map <  string  string >  map  long default value )  {  if  ( map . contains key ( name )  )   {  return  long . parse long ( map . get ( name )  ) ;  }  else  {  return  long . parse long (  utils . get system property or env var ( name  string . value of ( default value )  )  ) ;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\Configuration.java,get master url,public string   (  )  {  return master url;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\Configuration.java,get namespace,public string   (  )  {  return namespace;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\Configuration.java,get namespace cleanup timeout,public cleanup timeout;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\Configuration.java,get or create kubernetes client,protected kubernetes client   (  configuration config  kubernetes client test kubernetes client )  {  if  ( test kubernetes client  =  =  null )   {  if  (  !  strings . is null or blank ( config . get master url (  )  )  )   {  test kubernetes client = new  default kubernetes client ( new  config builder (  )  . with master url ( config . get master url (  )  )  . with namespace ( config . get namespace (  )  )  . build (  )  ) ;  }  else  {  test kubernetes client = new  default kubernetes client ( new  config builder (  )  . with namespace ( config . get namespace (  )  )  . build (  )  ) ;  }   }  return test kubernetes client;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\Configuration.java,get properties,public map <  string  string >    (  )  {  return properties;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\Configuration.java,get session id,public string   (  )  {  return session id;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\Configuration.java,get string property,private string   (  string name  map <  string  string >  map  string default value )  {  if  ( map . contains key ( name )  )   {  return map . get ( name ) ;  }  else  {  return  utils . get system property or env var ( name default value ) ;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\Configuration.java,get wait for service connection timeout,public for service connection timeout;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\Configuration.java,get wait for service list,public list <  string >    (  )  {  return wait for service list;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\Configuration.java,get wait poll interval,public poll interval;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\Configuration.java,get wait timeout,public timeout;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\Configuration.java,is ansi logger enabled,public logger enabled;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\Configuration.java,is create namespace for test,public namespace for test;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\Configuration.java,is delete all resources on exit,public all resources on exit;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\Configuration.java,is environment init enabled,public init enabled;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\Configuration.java,is namespace cleanup confirmation enabled,public cleanup confirmation enabled;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\Configuration.java,is namespace cleanup enabled,public cleanup enabled;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\Configuration.java,is namespace lazy create enabled,public lazy create enabled;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\Configuration.java,is use go fabric,public enabled  !  =  null && gofabric8 enabled . boolean value (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\Configuration.java,is wait for service connection enabled,public for service connection enabled;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\Configuration.java,reset fallback config,static f a l l b a c k _  c o n f i g = new  config builder (  )  . build (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\Configuration.java,select namespace,"private string   (  string environment  string explicit )  {  if  ( environment  =  =  null && explicit  =  =  null )   {  return null;  }  else if  ( environment  !  =  null && explicit  =  =  null )   {  return environment;  }  else if  ( environment  =  =  null && explicit  !  =  null )   {  return explicit;  }  else if  ( environment . equals ( explicit )  )   {  return environment;  }  else  {  throw new  illegal state exception ( "" different namespace values have been specified via environment:""  +  environment  +  "" and explicitly:"" +  explicit +  "" . "" ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\ClientCreator.java,create client,public observes  configuration config )  {  kubernetes producer . set ( config . get kubernetes client (  )  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\Configurer.java,configure,public observes  arquillian descriptor arquillian descriptor )  {   map <  string  string >  config = arquillian descriptor . extension (  e x t e n s i o n _  n a m e )  . get extension properties (  ) ; configuration producer . set (  configuration . from map ( config null )  ) ; configure protocol handlers ( config ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\Configurer.java,configure protocol handlers,"private map <  string  string >  conf )  {   set <  string >  handlers = new  linked hash set <  >  (  ) ; handlers . add all (  strings . split and trim as list (  system . get property (  j a v a _  p r o t o c o l _  h a n d l e r """" )  "" "" )  ) ; handlers . add all (  strings . split and trim as list ( conf . contains key (  p r o t o c o l _  h a n d l e r s )   ?  conf . get (  p r o t o c o l _  h a n d l e r s )  :  d e f a u l t _  m a v e n _  p r o t o c o l _  h a n d l e r "" "" )  ) ;  system . set property (  j a v a _  p r o t o c o l _  h a n d l e r  strings . join ( handlers "" "" )  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\enricher\ClientResourceProvider.java,can provide,override public boolean   (  class <  ?  >  type )  {  return  kubernetes client . class . is assignable from ( type ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\enricher\ClientResourceProvider.java,lookup,"override public  object   (  arquillian resource resource  annotation .  .  .  qualifiers )  {   kubernetes client client = this . kubernetes client . get (  ) ; if  ( client  =  =  null )   {  throw new  illegal state exception ( "" unable to inject  kubernetes client into test . "" ) ;  }  return client; "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\enricher\ControllerResourceProvider.java,can provide,override public boolean   (  class <  ?  >  type )  {  return  controller . class . is assignable from ( type ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\enricher\ControllerResourceProvider.java,lookup,"override public  object   (  arquillian resource resource  annotation .  .  .  qualifiers )  {   controller controller = this . controller instance . get (  ) ; if  ( controller  =  =  null )   {  throw new  illegal state exception ( "" unable to inject  kubernetes controller into test . "" ) ;  }  return "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\ControllerCreator.java,create controller,public observes  kubernetes client client )  {  kubernetes controller producer . set ( new  controller ( client )  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\DependencyResolver.java,dependency resolver,public string path to pom file boolean rethrow excpetions )  {  this . path to pom file = path to pom file; this . rethrow excpetions = rethrow excpetions;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\DependencyResolver.java,has kubernetes json,private file f )  throws  i o exception  {  try  (  file input stream fis = new  file input stream ( f ) ; jar input stream jis = new  jar input stream ( fis )  )  {  for  (  jar entry entry = jis . get next jar entry (  ) ; entry  !  =  null; entry = jis . get next jar entry (  )  )   {  if  ( entry . get name (  )  . equals (  d e f a u l t _  c o n f i g _  f i l e _  n a m e )  )   {  return true;  }   }   }  return false;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\DependencyResolver.java,resolve,"public list <  string >    (  session session )  throws  i o exception  {   list <  string >  dependencies = new  array list <  >  (  ) ; try  {   file[] files =  maven . resolver (  )  . load pom from file ( path to pom file )  . import test dependencies (  )  . resolve (  )  . without transitivity (  )  . as file (  ) ; for  (   file f : files )   {  if  ( f . get name (  )  . ends with ( ""jar"" )  && has kubernetes json ( f )  )   {   path dir =  files . create temp directory ( session . get id (  )  ) ; try  (  file input stream fis = new  file input stream ( f ) ; jar input stream jis = new  jar input stream ( fis )  )  {   zips . unzip ( new  file input stream ( f )  dir . to file (  )  ) ;  file json path = dir . resolve (  d e f a u l t _  c o n f i g _  f i l e _  n a m e )  . to file (  ) ; if  ( json path . exists (  )  )   {  dependencies . add ( json path . to u r i (  )  . to string (  )  ) ;  }   }   }  else if  ( f . get name (  )  . ends with ( "" . json"" )  )   {  dependencies . add ( f . to u r i (  )  . to string (  )  ) ;  }   }   }  catch  (   exception e )   {  if  ( rethrow excpetions )   {  throw e;  }  else  {  session . get logger (  )  . warn ( "" skipping maven project dependencies .   caused by:""  +  e . get message (  )  ) ;  }   }  return dependencies;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\enricher\JolokiaClientsProvider.java,can provide,override public boolean   (  class <  ?  >  type )  {  return  jolokia clients . class . is assignable from ( type ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\enricher\JolokiaClientsProvider.java,lookup,override public  object   (  arquillian resource resource  annotation .  .  .  qualifiers )  {   kubernetes client client = this . client instance . get (  ) ;  jolokia clients jolokia clients = new  jolokia clients ( client ) ; return jolokia clients;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\enricher\J4pClientProvider.java,can provide,override public boolean   (  class <  ?  >  type )  {  return  j4p client . class . is assignable from ( type ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\enricher\J4pClientProvider.java,lookup,override public  object   (  arquillian resource resource  annotation .  .  .  qualifiers )  {   kubernetes client client = this . client instance . get (  ) ;  session session = this . session instance . get (  ) ;  jolokia clients jolokia clients = new  jolokia clients ( client ) ;  string service name = ge
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\enricher\EnricherUtils.java,get labels,static map <  string  string >    (  annotation .  .  .  qualifiers )  {   hash map <  string  string >  rc = new  hash map <  string  string >  (  ) ; for  (   annotation annotation : qualifiers )   {  if  ( annotation instanceof  with label )   {   with label l =  (  with label ) annotation; rc . put ( l . name (  )  l . value (  )  ) ;  }  else if  ( annotation instanceof  with labels )   {   with labels ls =  (  with labels ) annotation; for  (   with label l : ls . value (  )  )   {  rc . put ( l . name (  )  l . value (  )  ) ;  }   }   }  return rc;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\enricher\EnricherUtils.java,get pod name,static string   (  annotation .  .  .  qualifiers )  {  for  (   annotation annotation : qualifiers )   {  if  ( annotation instanceof  pod name )   {  return  (  (  pod name ) annotation )  . value (  ) ;  }   }  return null;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\enricher\EnricherUtils.java,get replication controller name,static string   (  annotation .  .  .  qualifiers )  {  for  (   annotation annotation : qualifiers )   {  if  ( annotation instanceof  replication controller name )   {  return  (  (  replication controller name ) annotation )  . value (  ) ;  }   }  return null;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\enricher\EnricherUtils.java,get service name,static string   (  annotation .  .  .  qualifiers )  {  for  (   annotation annotation : qualifiers )   {  if  ( annotation instanceof  service name )   {  return  (  (  service name ) annotation )  . value (  ) ;  }   }  return null;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\enricher\PodListResourceProvider.java,can provide,override public boolean   (  class <  ?  >  type )  {  return  pod list . class . is assignable from ( type ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\enricher\PodListResourceProvider.java,lookup,override public  object   (  arquillian resource resource  annotation .  .  .  qualifiers )  {   kubernetes client client = this . client instance . get (  ) ;  session session = session instance . get (  ) ;  map <  string  string >  labels = get labels ( qualifiers ) ; if  ( labels . is empty (  )  )   {  return clie
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\enricher\ReplicationControllerListResourceProvider.java,can provide,override public boolean   (  class <  ?  >  type )  {  return  replication controller list . class . is assignable from ( type ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\enricher\ReplicationControllerListResourceProvider.java,lookup,override public  object   (  arquillian resource resource  annotation .  .  .  qualifiers )  {   kubernetes client client = this . client instance . get (  ) ;  session session = session instance . get (  ) ;  map <  string  string >  labels = get labels ( qualifiers ) ; if  ( labels . is empty (  )  )   {  return clie
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\enricher\ReplicationControllerResourceProvider.java,can provide,override public boolean   (  class <  ?  >  type )  {  return  replication controller . class . is assignable from ( type ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\enricher\ReplicationControllerResourceProvider.java,lookup,override public  object   (  arquillian resource resource  annotation .  .  .  qualifiers )  {   kubernetes client client = this . client instance . get (  ) ;  session session = session instance . get (  ) ;  string name = get replication controller name ( qualifiers ) ; return client . replication contr
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\enricher\PodResourceProvider.java,can provide,override public boolean   (  class <  ?  >  type )  {  return  pod . class . is assignable from ( type ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\enricher\PodResourceProvider.java,lookup,override public  object   (  arquillian resource resource  annotation .  .  .  qualifiers )  {   kubernetes client client = this . client instance . get (  ) ;  session session = session instance . get (  ) ;  string name = get pod name ( qualifiers ) ; if  ( name  !  =  null )   {  return client . pods (  )  . in names
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\enricher\ServiceListResourceProvider.java,can provide,override public boolean   (  class <  ?  >  type )  {  return  service list . class . is assignable from ( type ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\enricher\ServiceListResourceProvider.java,lookup,override public  object   (  arquillian resource resource  annotation .  .  .  qualifiers )  {   kubernetes client client = this . client instance . get (  ) ;  session session = session instance . get (  ) ;  map <  string  string >  labels = get labels ( qualifiers ) ; if  ( labels . is empty (  )  )   {  return clie
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\enricher\ServiceResourceProvider.java,can provide,override public boolean   (  class <  ?  >  type )  {  return  service . class . is assignable from ( type ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\enricher\ServiceResourceProvider.java,lookup,override public  object   (  arquillian resource resource  annotation .  .  .  qualifiers )  {   kubernetes client client = this . client instance . get (  ) ;  session session = session instance . get (  ) ;  string name = get service name ( qualifiers ) ; return client . services (  )  . in namespace ( session
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\enricher\SessionResourceProvider.java,can provide,override public boolean   (  class <  ?  >  type )  {  return  session . class . is assignable from ( type ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\enricher\SessionResourceProvider.java,lookup,override public  object   (  arquillian resource arquillian resource  annotation .  .  .  annotations )  {  return session instance . get (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\event\Stop.java,stop,public session session )  {  super ( session ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\event\Start.java,start,public session session )  {  super ( session ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\log\AnsiLogger.java,error,override public void   (  string msg )  {   system . out . println ( ansi (  )  . fg (  r e d )  . a ( msg )  . reset (  )  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\log\AnsiLogger.java,info,override public void   (  string msg )  {   system . out . println ( msg ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\log\AnsiLogger.java,status,override public void   (  string msg )  {   system . out . println ( ansi (  )  . fg (  g r e e n )  . a ( msg )  . reset (  )  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\log\AnsiLogger.java,warn,override public void   (  string msg )  {   system . out . println ( ansi (  )  . fg (  y e l l o w )  . a ( msg )  . reset (  )  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\log\LoggerFactory.java,create logger,public observes  configuration configuration )  {  if  ( configuration . is ansi logger enabled (  )  )   {  logger poducer . set ( new  ansi logger (  )  ) ;  }  else  {  logger poducer . set ( new  simple logger (  )  ) ;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\Session.java,session,public string id  string namespace  logger logger )  {  this . id = id; this . logger = logger; this . namespace = namespace;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\Session.java,destroy,"void destroying  session:""  +  id ) ;  system . out . flush (  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\Session.java,get base dir,"public file   (  )  {  if  ( basedir  =  =  null )   {  basedir = new  file (  system . get property ( ""basedir"" "" . "" )  ) ;  }  return basedir;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\Session.java,get failed,public atomic integer   (  )  {  return failed;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\Session.java,get id,public string   (  )  {  return id;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\Session.java,get logger,public logger   (  )  {  return logger;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\Session.java,get namespace,public string   (  )  {  return namespace;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\Session.java,get passed,public atomic integer   (  )  {  return passed;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\Session.java,get skiped,public atomic integer   (  )  {  return skiped;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\Session.java,init,"void initializing  session:""  +  id ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\log\SimpleLogger.java,error,override public void   (  string msg )  {   system . out . println ( msg ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\log\SimpleLogger.java,info,override public void   (  string msg )  {   system . out . println ( msg ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\log\SimpleLogger.java,status,override public void   (  string msg )  {   system . out . println ( msg ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\log\SimpleLogger.java,warn,override public void   (  string msg )  {   system . out . println ( msg ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\SessionEvent.java,get session,public session   (  )  {  return session;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\ShutdownHook.java,shutdown hook,public kubernetes client client  controller controller  configuration configuration  session session  list <  kubernetes list >  kube configs )  {  this . client = client; this . controller = controller; this . configuration = configuration; this . session = session; this . kube configs = kube configs;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\ShutdownHook.java,run,"override public void   (  )  {  session . get logger (  )  . warn ( "" shutdown hook cleaning up the integration test ! "" ) ; try  {  cleanup session ( client controller configuration session kube configs  constants .  a b o r t e d _  s t a t u s ) ;  }  catch  (   multi exception e )   {  session . get logger (  )  . w"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\TestListener.java,start,"public observes ( precedence =  integer .  m i n _  v a l u e )   before test lifecycle event event  kubernetes client client  session session )  {   string pkg = event . get test class (  )  . get java class (  )  . get package (  )  . get name (  ) ;  string class name = event . get test class (  )  . get java class (  )  . get simple name (  ) ;  string method name = event . get test method (  )  . get name (  ) ;  config maps . update config map test status ( client session trim name ( pkg class name method name )  "" r u n n i n g"" ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\TestListener.java,stop,public observes ( precedence =  integer .  m i n _  v a l u e )   after test lifecycle event event  test result result  kubernetes client client  session session )  {   string pkg = event . get test class (  )  . get java class (  )  . get package (  )  . get name (  ) ;  string class name = event . get test class (  )  . get java class (  )  . get simple name (  ) ;  string method name = event . get test method (  )  . get name (  ) ;  config maps . update config map test status ( client session trim name ( pkg class name method name )  result . get status (  )  . name (  )  ) ; switch  ( result . get status (  )  )   {  case  p a s s e d: session . get passed (  )  . increment and get (  ) ; break; case  f a i l e d: session . get failed (  )  . increment and get (  ) ; break; case  s k i p p e d: session . get skiped (  )  . increment and get (  ) ;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\TestListener.java,trim name,"static string   (  string package name  string class name  string method name )  {   string builder sb = new  string builder (  ) ; sb . append ( trim package ( package name )  )  . append ( "" . "" )  . append ( class name )  . append ( "" . "" )  . append ( method name ) ;  string result = sb . to string (  ) ; int prefix length =  annotations .  tests .  t e s t _  c a s e _  s t a t u s . length (  ) ; if  ( prefix length  +  result . length (  )   >   m a x _  a n n o t a t i o n _  k e y _  l e n g t h )   {  result = result . substring ( prefix length  +  result . length (  )   -   m a x _  a n n o t a t i o n _  k e y _  l e n g t h ) ;  }  if  ( result . char at ( 0 )   =  =  ' . ' )   {  result = result . substring ( 1 ) ;  }  return result;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\TestListener.java,trim package,"static string   (  string pkg )  {   string builder sb = new  string builder (  ) ; boolean first = true; for  (   string part : pkg . split ( ""\\ . "" )  )   {  if  ( first )   {  first = false;  }  else  {  sb . append ( "" . "" ) ;  }  sb . append ( part . substring ( 0 1 )  ) ;  }  return sb . to string (  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\SessionListener.java,add config,"protected list <  kubernetes list >  kube configs  object dto  controller controller  configuration configuration  logger log  string namespace  string source name )  {  dto = expand template ( controller configuration log namespace source name dto ) ; if  ( dto instanceof  kubernetes list )   {  kube configs . add (  (  kubernetes list ) dto ) ;  }  else if  ( dto instanceof  has metadata )   {   kubernetes list wrapped item = new  kubernetes list builder (  )  . with items (  (  has metadata ) dto )  . build (  ) ; kube configs . add ( wrapped item ) ;  }  else  {  throw new  illegal argument exception ( "" unsupported object type in ""  +  source name  +  "" .   class: "" +   ( dto  !  =  null  ?  dto . get class (  )  . get name (  )  : ""null object"" )  ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\SessionListener.java,add registry to image name if not present,public iterable <  has metadata >  items  string registry )  throws  exception  {  if  ( items  !  =  null )   {  for  (   has metadata item : items )   {  if  ( item instanceof  kubernetes list )   {   kubernetes list list =  (  kubernetes list ) item; add registry to image name if not present ( list . get items (  )  registry ) ;  }  else if  ( item instanceof  template )   {   template template =  (  template ) item; add registry to image name if not present ( template . get objects (  )  registry ) ;  }  else if  ( item instanceof  pod )   {   list <  container >  containers =  (  (  pod ) item )  . get spec (  )  . get containers (  ) ; prefix registry if not present ( containers registry ) ;  }  else if  ( item instanceof  replication controller )   {   list <  container >  containers =  (  (  replication controller ) item )  . get spec (  )  . get template (  )  . get spec (  )  . get containers (  ) ; prefix registry if not present ( containers registry ) ;  }  else if  ( item instanceof  replica set )   {   list <  container >  containers =  (  (  replica set ) item )  . get spec (  )  . get template (  )  . get spec (  )  . get containers (  ) ; prefix registry if not present ( containers registry ) ;  }  else if  ( item instanceof  deployment config )   {   list <  container >  containers =  (  (  deployment config ) item )  . get spec (  )  . get template (  )  . get spec (  )  . get containers (  ) ; prefix registry if not present ( containers registry ) ;  }  else if  ( item instanceof  deployment )   {   list <  container >  containers =  (  (  deployment ) item )  . get spec (  )  . get template (  )  . get spec (  )  . get containers (  ) ; prefix registry if not present ( containers registry ) ;  }   }   }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\SessionListener.java,apply configuration,"private kubernetes client client  controller controller  configuration configuration  session session  list <  kubernetes list >  kube configs )  throws  exception  {   logger log = session . get logger (  ) ;  map <  integer  callable <  boolean >  >  conditions = new  tree map <  >  (  ) ;  callable <  boolean >  session pods ready = new  session pods are ready ( client session ) ;  callable <  boolean >  services ready = new  session services are ready ( client session configuration ) ;  set <  has metadata >  entities = new  tree set <  >  ( new  has metadata comparator (  )  ) ; for  (   kubernetes list c : kube configs )   {  entities . add all ( enhance ( session configuration c )  . get items (  )  ) ;  }  if  ( contains image stream resources ( entities )  )   {   }  else  {   string registry = get local docker registry (  ) ; if  (  strings . is not blank ( registry )  )   {  log . status ( "" adapting resources to pull images from registry: ""  +  registry ) ; add registry to image name if not present ( entities registry ) ;  }  else  {  log . status ( "" no local fabric8 docker registry found"" ) ;  }   }   list <  object >  items = new  array list <  >  (  ) ; items . add all ( entities ) ;  collections . sort ( items new  comparator <  object >  (  )  {  @ override public int compare (   object left   object right )  {  if  ( left instanceof  service )   {  return  - 1;  }  else if  ( right instanceof  service )   {  return 1;  }  else  {  return 0;  }   }   }   ) ; boolean is openshift = client . is adaptable (  open shift client . class ) ;  string namespace = session . get namespace (  ) ;  string route domain = null; if  (  strings . is not blank ( configuration . get kubernetes domain (  )  )  )   {  route domain = configuration . get kubernetes domain (  ) ;  }  preprocess environment ( client controller configuration session ) ;  set <  has metadata >  extra entities = new  tree set <  >  ( new  has metadata comparator (  )  ) ; for  (   object entity : items )   {  if  ( entity instanceof  pod )   {   pod pod =  (  pod ) entity; log . status ( "" applying pod:""  +  get name ( pod )  ) ;  set <  secret >  secrets = generate secrets ( client session pod . get metadata (  )  ) ;  string service account name = pod . get spec (  )  . get service account name (  ) ; if  (  strings . is not blank ( service account name )  )   {  generate service account ( client session secrets service account name ) ;  }  controller . apply pod ( pod session . get id (  )  ) ; conditions . put ( 1 session pods ready ) ;  }  else if  ( entity instanceof  service )   {   service service =  (  service ) entity;  string service name = get name ( service ) ; log . status ( "" applying service:""  +  service name ) ; controller . apply service ( service session . get id (  )  ) ; conditions . put ( 2 services ready ) ; if  ( is openshift )   {   route route =  routes . create route for service ( route domain namespace service log ) ; if  ( route  !  =  null )   {  log . status ( "" applying route for:""  +  service name ) ; controller . apply route ( route ""route for ""  +  service name ) ; extra entities . add ( route ) ;  }   }   }  else if  ( entity instanceof  replication controller )   {   replication controller replication controller =  (  replication controller ) entity; log . status ( "" applying replication controller:""  +  get name ( replication controller )  ) ;  set <  secret >  secrets = generate secrets ( client session replication controller . get spec (  )  . get template (  )  . get metadata (  )  ) ;  string service account name = replication controller . get spec (  )  . get template (  )  . get spec (  )  . get service account name (  ) ; if  (  strings . is not blank ( service account name )  )   {  generate service account ( client session secrets service account name ) ;  }  controller . apply replication controller ( replication controller session . get id (  )  ) ; conditions . put ( 1 session pods ready ) ;  }  else if  ( entity instanceof  replica set || entity instanceof  deployment || entity instanceof  deployment config )   {  log . status ( "" applying ""  +  entity . get class (  )  . get simple name (  )   +  "" . "" ) ; controller . apply ( entity session . get id (  )  ) ; conditions . put ( 1 session pods ready ) ;  }  else if  ( entity instanceof  o auth client )   {   o auth client oc =  (  o auth client ) entity;  object meta metadata =  kubernetes helper . get or create metadata ( oc ) ;  string name = metadata . get name (  ) ; if  ( is openshift )   {   open shift client open shift client = client . adapt (  open shift client . class ) ;  o auth client current = open shift client . o auth clients (  )  . with name ( name )  . get (  ) ; boolean create = false; if  ( current  =  =  null )   {  current = oc; create = true;  }  boolean updated = false;  list <  string >  redirect u r is = current . get redirect u r is (  ) ;  string namespace suffix = "" - ""  +  namespace;  string redirect uri = ""http: /  / ""  +  name  +  namespace suffix; if  (  strings . is not blank ( route domain )  )   {  redirect uri +  = "" . ""  +   strings . strip prefix ( route domain "" . "" ) ;  }  if  (  ! redirect u r is . contains ( redirect uri )  )   {  redirect u r is . add ( redirect uri ) ; updated = true;  }  current . set redirect u r is ( redirect u r is ) ; log . status ( "" applying  o auth client:""  +  name ) ; controller . set support o auth clients ( true ) ; if  ( create )   {  open shift client . o auth clients (  )  . create ( current ) ;  }  else  {  if  ( updated )   {  open shift client . o auth clients (  )  . with name ( name )  . delete (  ) ; current . get metadata (  )  . set resource version ( null ) ; open shift client . o auth clients (  )  . create ( current ) ;  }   }   }   }  else if  ( entity instanceof  has metadata )   {  log . status ( "" applying ""  +  entity . get class (  )  . get simple name (  )   +  "":"" +   kubernetes helper . get name (  (  has metadata ) entity )  ) ; controller . apply ( entity session . get id (  )  ) ;  }  else if  ( entity  !  =  null )   {  log . status ( "" applying ""  +  entity . get class (  )  . get simple name (  )   +  "" . "" ) ; controller . apply ( entity session . get id (  )  ) ;  }   }  entities . add all ( extra entities ) ; if  (  ! conditions . is empty (  )  )   {   callable <  boolean >  composite condition = new  composite condition ( conditions . values (  )  ) ;  wait strategy wait strategy = new  wait strategy ( composite condition configuration . get wait timeout (  )  configuration . get wait poll interval (  )  ) ; if  (  ! wait strategy . await (  )  )   {  log . error ( "" timed out waiting for pods / services ! "" ) ; return false;  }  else  {  log . status ( "" all pods / services are currently 'running' ! "" ) ;  }   }  else  {  log . warn ( "" no pods / services / replication controllers defined in the configuration ! "" ) ;  }  return true;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\SessionListener.java,call,override public  u r l   (  )  throws  exception  {  return new  u r l ( dependency ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\SessionListener.java,clear test result directories,"private session session )  {   files . recursive delete ( new  file ( session . get base dir (  )  ""target / test - pod - status"" )  ) ;  files . recursive delete ( new  file ( session . get base dir (  )  ""target / test - pod - logs"" )  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\SessionListener.java,compare,override public int   (  object left  object right )  {  if  ( left instanceof  service )   {  return  - 1;  }  else if  ( right instanceof  service )   {  return 1;  }  else  {  return 0;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\SessionListener.java,contains image stream resources,private iterable <  has metadata >  entities )  {  if  ( entities  !  =  null )   {  for  (   has metadata entity : entities )   {  if  ( entity instanceof  image stream )   {  return true;  }   }   }  return false;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\SessionListener.java,create u r l,protected u r l   ( final  string dependency )  throws  exception  {  return  u r ls . do with maven u r l handler factory ( new  callable <  u r l >  (  )  {  @ override public  u r l call (  )  throws  exception  {  return new  u r l ( dependency ) ;  }   }   ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\SessionListener.java,enhance,"private kubernetes list   ( final  session session  configuration configuration  kubernetes list kubernetes list )  {  if  ( configuration  =  =  null || configuration . get properties (  )   =  =  null ||  ! configuration . get properties (  )  . contains key (  constants .  k u b e r n e t e s _  m o d e l _  p r o c e s s o r _  c l a s s )  )   {  return kubernetes list;  }   string processor class name = configuration . get properties (  )  . get (  constants .  k u b e r n e t e s _  m o d e l _  p r o c e s s o r _  c l a s s ) ; try  {  final  object instance =  session listener . class . get class loader (  )  . load class ( processor class name )  . new instance (  ) ;  kubernetes list builder builder = new  kubernetes list builder ( kubernetes list ) ;  (  (  visitable ) builder )  . accept ( new  visitor (  )  {  @ override public void visit (   object o )  {  for  (   method m : find methods ( instance o . get class (  )  )  )   {   named named = m . get annotation (  named . class ) ; if  ( named  !  =  null &&  !  strings . is null or blank ( named . value (  )  )  )   {   string object name = o instanceof  object meta  ?  get name (  (  object meta ) o )  : get name (  (  has metadata ) o ) ; if  (  ! named . value (  )  . equals ( object name )  )   {  session . get logger (  )  . warn ( "" named method:""  +  m . get name (  )   +  "" with name:"" +  named . value (  )  +  "" doesn't match: "" +  object name +  ""  ignoring"" ) ; return;  }   }  try  {  m . invoke ( instance o ) ;  }  catch  (   illegal access exception e )   {   }  catch  (   invocation target exception e )   {  session . get logger (  )  . error ( "" error invoking visitor method:""  +  m . get name (  )   +  "" on:"" +  instance +  ""with argument:"" +  o ) ;  }   }   }   }   ) ; return builder . build (  ) ;  }  catch  (   exception e )   {  session . get logger (  )  . warn ( "" failed to load processor class:""  +  processor class name  +  "" .   ignoring"" ) ; return kubernetes list;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\SessionListener.java,expand template,"protected object   (  controller controller  configuration configuration  logger log  string namespace  string source name  object dto )  {  if  ( dto instanceof  template )   {   template template =  (  template ) dto;  kubernetes helper . set namespace ( template namespace ) ;  string parameter name prefix = """"; override template parameters ( template configuration . get properties (  )  parameter name prefix ) ; log . status ( "" applying template in namespace ""  +  namespace ) ; controller . install template ( template source name ) ; dto = controller . process template ( template source name ) ; if  ( dto  =  =  null )   {  throw new  illegal argument exception ( "" failed to process  template ! "" ) ;  }   }  return dto;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\SessionListener.java,find methods,private set <  method >    (  object instance  class argument type )  {   set <  method >  result = new  linked hash set <  >  (  ) ; for  (   method m : instance . get class (  )  . get declared methods (  )  )   {  if  ( m . get parameter types (  )  . length  =  =  1 && m . get parameter types (  ) [0] . is assignable from ( argument type )  )   {  result . add ( m ) ;  }   }  return result;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\SessionListener.java,generate secrets,private set <  secret >    (  kubernetes client client  session session  object meta meta )  {   set <  secret >  secrets = new  hash set <  >  (  ) ;  map <  string  string >  annotations = meta . get annotations (  ) ; if  ( annotations  !  =  null &&  ! annotations . is empty (  )  )   {  for  (   map .  entry <  string  string >  entry : annotations . entry set (  )  )   {   string key = entry . get key (  ) ;  string value = entry . get value (  ) ; if  (  secret keys . is secret key ( key )  )   {   secret keys key type =  secret keys . from value ( key ) ; for  (   string name :  secrets . get names ( value )  )   {   map <  string  string >  data = new  hash map <  >  (  ) ;  secret secret = null; try  {  secret = client . secrets (  )  . in namespace ( session . get namespace (  )  )  . with name ( name )  . get (  ) ;  }  catch  (   exception e )   {   }  if  ( secret  =  =  null )   {  for  (   string c :  secrets . get contents ( value name )  )   {  data . put ( c key type . generate (  )  ) ;  }  secret = client . secrets (  )  . in namespace ( session . get namespace (  )  )  . create new (  )  . with new metadata (  )  . with name ( name )  . end metadata (  )  . with data ( data )  . done (  ) ; secrets . add ( secret ) ;  }   }   }   }   }  return secrets;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\SessionListener.java,generate service account,"private kubernetes client client  session session  set <  secret >  secrets  string service account name )  {   list <  object reference >  secret refs = new  array list <  >  (  ) ; for  (   secret secret : secrets )   {  secret refs . add ( new  object reference builder (  )  . with namespace ( session . get namespace (  )  )  . with name (  kubernetes helper . get name ( secret )  )  . build (  )  ) ;  }   security context constraints security context constraints = client . security context constraints (  )  . with name ( session . get namespace (  )  )  . get (  ) ; if  ( security context constraints  =  =  null )   {  client . security context constraints (  )  . create new (  )  . with new metadata (  )  . with name ( session . get namespace (  )  )  . end metadata (  )  . with allow host dir volume plugin ( true )  . with allow privileged container ( true )  . with new run as user (  )  . with type ( "" run as any"" )  . end run as user (  )  . with new se linux context (  )  . with type ( "" run as any"" )  . end se linux context (  )  . with users ( ""system:serviceaccount:""  +  session . get namespace (  )   +  "":"" +  service account name )  . done (  ) ;  }   service account service account = client . service accounts (  )  . in namespace ( session . get namespace (  )  )  . with name ( service account name )  . get (  ) ; if  ( service account  =  =  null )   {  client . service accounts (  )  . in namespace ( session . get namespace (  )  )  . create new (  )  . with new metadata (  )  . with name ( service account name )  . end metadata (  )  . with secrets ( secret refs )  . done (  ) ;  }  else  {  client . service accounts (  )  . in namespace ( session . get namespace (  )  )  . with name ( service account name )  . replace ( new  service account builder ( service account )  . with new metadata (  )  . with name ( service account name )  . end metadata (  )  . add to secrets ( secret refs . to array ( new  object reference[secret refs . size (  ) ] )  )  . build (  )  ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\SessionListener.java,get local docker registry,"private string   (  )  {  if  (  strings . is not blank (  system . getenv (  constants .  f a b r i c8 _  d o c k e r _  r e g i s t r y _  s e r v i c e _  h o s t )  )  )   {  return  system . getenv (  constants .  f a b r i c8 _  d o c k e r _  r e g i s t r y _  s e r v i c e _  h o s t )   +  "":""  +   system . getenv (  constants .  f a b r i c8 _  d o c k e r _  r e g i s t r y _  s e r v i c e _  p o r t ) ;  }  return null;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\SessionListener.java,has registry,"public string image name )  {  if  ( image name  =  =  null )   {  throw new  null pointer exception ( "" image name must not be null"" ) ;  }   pattern tag pattern =  pattern . compile ( ""^ (  .  +  ?  )  (  ? :: ( [^: / ] +  )  )  ? $"" ) ;  matcher matcher = tag pattern . matcher ( image name ) ; if  (  ! matcher . matches (  )  )   {  throw new  illegal argument exception ( image name  +  "" is not a proper image name  ( [registry / ][repo][:port]"" ) ;  }   string rest = matcher . group ( 1 ) ;  string[] parts = rest . split ( ""\\s* / \\s*"" ) ;  string part = parts[0]; return part . contains ( "" . "" )  || part . contains ( "":"" ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\SessionListener.java,load dependency,"protected logger log  list <  kubernetes list >  kube configs  file file  controller controller  configuration configuration  logger logger  string namespace )  throws  i o exception  {  if  ( file . is file (  )  )   {  log . info ( "" loading file ""  +  file ) ;  object content; if  ( file . get name (  )  . ends with ( "" . yaml"" )  || file . get name (  )  . ends with ( "" . yml"" )  )   {  content = load yaml ( file ) ;  }  else  {  content = load json ( file ) ;  }  add config ( kube configs content controller configuration log namespace file . get path (  )  ) ;  }  else  {   file[] children = file . list files (  ) ; if  ( children  !  =  null )   {  for  (   file child : children )   {   string name = child . get name (  )  . to lower case (  ) ; if  ( name . ends with ( "" . json"" )  || name . ends with ( "" . yaml"" )  || name . ends with ( "" . yml"" )  )   {  load dependency ( log kube configs child controller configuration log namespace ) ;  }   }   }   }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\SessionListener.java,prefix registry if not present,"private list <  container >  containers  string registry )  {  for  (   container container : containers )   {  if  (  ! has registry ( container . get image (  )  )  )   {  container . set image ( registry  +  "" / ""  +  container . get image (  )  ) ;  }   }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\SessionListener.java,preprocess environment,"protected kubernetes client client  controller controller  configuration configuration  session session )  {  if  ( configuration . is use go fabric8 (  )  )   {   logger logger = session . get logger (  ) ;  commands . assert command ( logger ""oc"" ""project"" session . get namespace (  )  ) ;  commands . assert command ( logger ""gofabric8"" ""deploy"" "" - y"" "" -  - console = false"" "" -  - templates = false"" ) ;  commands . assert command ( logger ""gofabric8"" ""secrets"" "" - y"" ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\SessionListener.java,start,"public observes  start event  kubernetes client client  controller controller  configuration configuration )  throws  exception  {   objects . require non null ( client "" kubernetes client most not be null ! "" ) ;  session session = event . get session (  ) ; final  logger log = session . get logger (  ) ;  string namespace = session . get namespace (  ) ;  system . set property (  constants .  k u b e r n e t e s _  n a m e s p a c e namespace ) ; log . status ( "" using  kubernetes at: ""  +  client . get master url (  )  ) ; log . status ( "" creating kubernetes resources inside namespace: ""  +  namespace ) ; log . info ( ""if you use  open shift then type this switch namespaces: oc project ""  +  namespace ) ; log . info ( ""if you use kubernetes then type this to switch namespaces: kubectl namespace ""  +  namespace ) ; clear test result directories ( session ) ; controller . set namespace ( namespace ) ; controller . set throw exception on error ( true ) ; controller . set recreate mode ( true ) ; controller . set ignore running o auth clients ( true ) ; if  ( configuration . is create namespace for test (  )  )   {  create namespace ( client controller session ) ;  }  else  {   string namespace to use = configuration . get namespace (  ) ; check namespace ( client controller session configuration ) ; update config map status ( client session  constants .  r u n n i n g _  s t a t u s ) ; namespace = namespace to use; controller . set namespace ( namespace ) ;  }   list <  kubernetes list >  kube configs = new  linked list <  >  (  ) ; shutdown hook = new  shutdown hook ( client controller configuration session kube configs ) ;  runtime . get runtime (  )  . add shutdown hook ( shutdown hook ) ; try  {   u r l config url = configuration . get environment config url (  ) ;  list <  string >  dependencies =  ! configuration . get environment dependencies (  )  . is empty (  )   ?  configuration . get environment dependencies (  )  : resolver . resolve ( session ) ; if  ( configuration . is environment init enabled (  )  )   {  for  (   string dependency : dependencies )   {  log . info ( "" found dependency: ""  +  dependency ) ; load dependency ( log kube configs dependency controller configuration namespace ) ;  }   open shift client open shift client = controller . get open shift client or null (  ) ; if  ( config url  =  =  null )   {   string resource name = ""kubernetes . yml""; if  ( open shift client  !  =  null && open shift client . supports open shift a p i group (  open shift a p i groups .  i m a g e )  && open shift client . supports open shift a p i group (  open shift a p i groups .  r o u t e )  )   {  resource name = ""openshift . yml"";  }  config url = find config resource ( "" /  m e t a -  i n f / fabric8 / ""  +  resource name ) ;  }  if  ( config url  !  =  null )   {  log . status ( "" applying kubernetes configuration from: ""  +  config url ) ;  string config text = read as string ( config url ) ;  object dto = null;  string config path = config url . get path (  ) ; if  ( config path . ends with ( "" . yml"" )  || config path . ends with ( "" . yaml"" )  )   {  dto = load yaml ( config text  kubernetes resource . class ) ;  }  else  {  dto = load json ( config text ) ;  }  dto = expand template ( controller configuration log namespace config url . to string (  )  dto ) ;  kubernetes list kube list =  kubernetes helper . as kubernetes list ( dto ) ;  list <  has metadata >  items = kube list . get items (  ) ; kube configs . add ( kube list ) ;  }  if  ( open shift client  !  =  null && open shift client . supports open shift a p i group (  open shift a p i groups .  i m a g e )  )   {   file target dir = new  file (  system . get property ( ""basedir"" "" . "" )   +  "" / target"" ) ; if  ( target dir . exists (  )  && target dir . is directory (  )  )   {   file[] files = target dir . list files (  ) ; if  ( files  !  =  null )   {  for  (   file file : files )   {  if  ( file . get name (  )  . ends with ( "" - is . yml"" )  )   {  load dependency ( log kube configs file . to u r i (  )  . to u r l (  )  . to string (  )  controller configuration namespace ) ;  }   }   }   }   }   }  if  (  ! configuration . is environment init enabled (  )  || apply configuration ( client controller configuration session kube configs )  )   {  display session status ( client session ) ;  }  else  {  throw new  illegal state exception ( "" failed to apply kubernetes configuration . "" ) ;  }   }  catch  (   exception e )   {  try  {  cleanup session ( client controller configuration session kube configs  constants .  e r r o r _  s t a t u s ) ;  }  catch  (   multi exception me )   {  throw e;  }  finally  {  if  ( shutdown hook  !  =  null )   {   runtime . get runtime (  )  . remove shutdown hook ( shutdown hook ) ;  }   }  throw new  runtime exception ( e ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\SessionListener.java,stop,public observes  stop event  kubernetes client client  controller controller  configuration configuration  list <  kubernetes list >  kube configs )  throws  exception  {  try  {   session session = event . get session (  ) ; cleanup session ( client controller configuration session kube configs  util . get session status ( session )  ) ;  }  finally  {  if  ( shutdown hook  !  =  null )   {   runtime . get runtime (  )  . remove shutdown hook ( shutdown hook ) ;  }   }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\SessionListener.java,visit,override public void   (  object o )  {  for  (   method m : find methods ( instance o . get class (  )  )  )   {   named named = m . get annotation (  named . class ) ; if  ( named  !  =  null &&  !  strings . is null or blank ( named . value (  )  )  )   {   string object name = o instanceof  object meta  ?  get name (  (  object me
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\SuiteListener.java,start,public observes ( precedence = 100 )   before suite event  configuration configuration  logger logger )  {  session = new  session ( configuration . get session id (  )  configuration . get namespace (  )  logger ) ; session . init (  ) ; session producer . set ( session ) ; control event . fire ( new  start ( session )  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\SuiteListener.java,stop,public observes ( precedence =  - 100 )   after suite event  logger logger )  {  control event . fire ( new  stop ( session )  ) ; session . destroy (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\KubernetesExtension.java,get client creator,private class   (  )  {   class creator class = null;  string creator class name =  system . get property (  constants .  c l i e n t _  c r e a t o r _  c l a s s _  n a m e ) ; try  {  if  (  strings . is not blank ( creator class name )  )  creator class =  kubernetes extension . class . get class loader (  )  . load class ( creator class name ) ;  }  catch  (   throwable t )   {   }  return creator class  !  =  null  ?  creator class :  client creator . class;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\KubernetesExtension.java,register,override public void   (  extension builder builder )  {  builder . observer (  configuration . class )  . observer (  configurer . class )  . observer ( get client creator (  )  )  . observer (  controller creator . class )  . observer (  logger factory . class )  . observer (  suite listener . class )  . observer (  test lis
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\utils\ConfigMaps.java,create config map annotations,"private map <  string  string >    (  session session  string status )  {   map <  string  string >  annotations = new  hash map <  >  (  ) ;  file dir =  util . get project base dir ( session ) ;  string git url =  util . find git url ( session dir ) ; annotations . put (  annotations .  tests .  s e s s i o n _  i d session . get id (  )  ) ; annotations . put (  annotations .  tests .  t e s t _  s e s s i o n _  s t a t u s status ) ; if  (  strings . is not blank ( git url )  )   {  annotations . put (  annotations .  builds .  g i t _  u r l git url ) ;  }   file pom properties = new  file ( dir ""target / maven - archiver / pom . properties"" ) ; if  ( pom properties . is file (  )  )   {  try  {   properties properties = new  properties (  ) ; properties . load ( new  file input stream ( pom properties )  ) ;  map <  string  string >  map =  properties helper . to map ( properties ) ; for  (   map .  entry <  string  string >  entry : map . entry set (  )  )   {   string key = entry . get key (  ) ;  string value = entry . get value (  ) ; if  (  strings . is not blank ( key )  &&  strings . is not blank ( value )  )   {  annotations . put (  annotations .  project .  p r e f i x  +  key value ) ;  }   }   }  catch  (   i o exception e )   {  session . get logger (  )  . warn ( "" failed to load ""  +  pom properties  +  "" file to annotate the namespace: "" +  e ) ;  }   }  return annotations;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\utils\ConfigMaps.java,update config map status,"public config map   (  kubernetes client client final  session session final  string status )  {  try  {   config map config map = new  config map builder (  )  . with new metadata (  )  . with name (  f a b r i c8 _  a r q u i l l i a n )  . add to annotations ( create config map annotations ( session status )  )  . end metadata (  )  . build (  ) ; return client . config maps (  )  . in namespace ( session . get namespace (  )  )  . with name (  f a b r i c8 _  a r q u i l l i a n )  . create or replace ( config map ) ;  }  catch  (   exception e )   {   l o g . warn ( ""failed to update  config map ""  +   f a b r i c8 _  a r q u i l l i a n  +  "" .  "" +  e e ) ; return null;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\utils\ConfigMaps.java,update config map test status,"public config map   (  kubernetes client client final  session session final  string test final  string status )  {  try  {  return client . config maps (  )  . in namespace ( session . get namespace (  )  )  . with name (  f a b r i c8 _  a r q u i l l i a n )  . edit (  )  . add to data ( test status )  . done (  ) ;  }  catch  (   exception e )   {   l o g . warn ( ""failed to update  config map ""  +   f a b r i c8 _  a r q u i l l i a n  +  "" .  "" +  e e ) ; return null;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\utils\Commands.java,assert command,"public logger logger  string .  .  .  command array )  {   string command text =  strings . join (  arrays . as list ( command array )  "" "" ) ; logger . info ( "" invoking command: ""  +  command text ) ; try  {   process process =  runtime . get runtime (  )  . exec ( command array ) ; process output ( logger process . get input stream (  )  true ) ; process output ( logger process . get error stream (  )  false ) ; int status = process . wait for (  ) ; assert equals ( ""status code of: ""  +  command text 0 status ) ;  }  catch  (   exception e )   {  throw new  assertion error ( "" failed to invoke: ""  +  command text  +  ""\n"" +  e e ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\utils\Commands.java,process output,"protected logger logger  input stream input stream boolean error )  throws  i o exception  {   buffered reader reader = new  buffered reader ( new  input stream reader ( input stream )  ) ; try  {  while  ( true )   {   string line = reader . read line (  ) ; if  ( line  =  =  null )  break; if  ( error )   {  logger . error ( line ) ;  }  else  {  logger . info ( line ) ;  }   }   }  catch  (   exception e )   {  logger . error ( "" failed to process ""  +   ( error  ?  ""stderr"" : ""stdout"" )   +  "": "" +  e ) ; throw e;  }  finally  {   closeables . close quietly ( reader ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\utils\Routes.java,create route for service,"public route   (  string route domain postfix  string namespace  service service  logger log )  {   route route = null;  string id =  kubernetes helper . get name ( service ) ; if  (  strings . is not blank ( id )  && should create route for service ( log service id )  )   {  route = new  route (  ) ;  string route id = id;  kubernetes helper . set name ( route namespace route id ) ;  route spec route spec = new  route spec (  ) ;  route target reference object ref = new  route target reference builder (  )  . with name ( id )  . build (  ) ; route spec . set to ( object ref ) ; if  (  strings . is not blank ( route domain postfix )  )   {   string host =  strings . strip suffix (  strings . strip suffix ( id "" - service"" )  "" . "" ) ;  string namespace suffix = "" - ""  +  namespace; route spec . set host ( host  +  namespace suffix  +  "" . "" +   strings . strip prefix ( route domain postfix "" . "" )  ) ;  }  route . set spec ( route spec ) ;  string json = null; try  {  json =  kubernetes helper . to json ( route ) ;  }  catch  (   json processing exception e )   {  json = e . get message (  )   +  "" .  object: ""  +  route;  }   }  return route;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\utils\Routes.java,should create route for service,"protected logger log  service service  string id )  {  if  ( ""kubernetes"" . equals ( id )  || ""kubernetes - ro"" . equals ( id )  )   {  return false;  }   set <  integer >  ports =  kubernetes helper . get ports ( service ) ; if  ( ports . size (  )   =  =  1 )   {  return true;  }  else  {  log . info ( "" not generating route for service ""  +  id  +  "" as only single port services are supported .   has ports: "" +  ports ) ; return false;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\utils\Namespaces.java,check namespace,"public kubernetes client client  controller controller final  session session  configuration configuration )  {  boolean exists = controller . check namespace ( session . get namespace (  )  ) ; if  ( exists )   {  return;  }  if  ( configuration . is namespace lazy create enabled (  )  )   {  create namespace ( client controller session ) ;  }  else  {  throw new  illegal state exception ( "" namespace ""  +  session . get namespace (  )   +  "" doesn't exists"" ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\utils\Namespaces.java,create namespace,"public kubernetes client client  controller controller  session session )  {   string new namespace = session . get namespace (  ) ;  map <  string  string >  labels = new  hash map <  >  (  ) ; labels . put ( ""project"" client . get namespace (  )  ) ; labels . put ( ""provider"" ""fabric8"" ) ; labels . put ( ""component"" ""integration test"" ) ; labels . put ( ""framework"" ""arquillian"" ) ; controller . apply namespace ( new namespace labels ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\utils\SecretKeys.java,secret keys,string value )  {  this . value = value;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\utils\SecretKeys.java,from value,public secret keys   (  string v )  {  return map . get ( v ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\utils\URLs.java,create u r l stream handler,override public  u r l stream handler   (  string protocol )  {   u r l stream handler answer = custom factory . create u r l stream handler ( protocol ) ; if  ( answer  =  =  null && old factory  !  =  null )   {  answer = old factory . create u r l stream handler ( protocol ) ;  }  return answer;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\utils\URLs.java,do with custom u r l handler factory,public t >  t   ( final  u r l stream handler factory custom factory  callable <  t >  block )  throws  exception  {  final  u r l stream handler factory old factory = get u r l stream handler factory (  ) ; try  {   u r l stream handler factory new factory = new  u r l stream handler factory (  )  {  @ override public  u r l stream handler create u r l stream handler (   string protocol )  {   u r l stream handler answer = custom factory . create u r l stream handler ( protocol ) ; if  ( answer  =  =  null && old factory  !  =  null )   {  answer = old factory . create u r l stream handler ( protocol ) ;  }  return answer;  }   }  ; set u r l stream handler factory ( new factory ) ; return block . call (  ) ;  }  finally  {  set u r l stream handler factory ( old factory ) ;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\utils\URLs.java,do with maven u r l handler factory,"public t >  t   (  callable <  t >  block )  throws  exception  {   u r l stream handler factory factory = new  u r l stream handler factory (  )  {  @ override public  u r l stream handler create u r l stream handler (   string protocol )  {  if  ( protocol . equals ( ""mvn"" )  )   {  return new org . ops4j . pax . url . mvn .  handler (  ) ;  }  return null;  }   }  ; return do with custom u r l handler factory ( factory block ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\utils\URLs.java,get u r l stream handler factory,"static u r l stream handler factory   (  )  {   string field name = ""factory"";  class <  u r l >  clazz =  u r l . class; try  {   field field = clazz . get declared field ( field name ) ; field . set accessible ( true ) ; return  (  u r l stream handler factory ) field . get ( null ) ;  }  catch  (   no such field exception e )   {   l o g . error ( "" could not find field ""  +  field name  +  "" in class "" +  clazz . get name (  )  +  "" .  "" +  e e ) ;  }  catch  (   illegal access exception e )   {   l o g . error ( "" could not access field ""  +  field name  +  "" in class "" +  clazz . get name (  )  +  "" .  "" +  e e ) ;  }  return null;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\utils\URLs.java,set u r l stream handler factory,"static u r l stream handler factory new factory )  {   string field name = ""factory"";  class <  u r l >  clazz =  u r l . class; try  {   field field = clazz . get declared field ( field name ) ; field . set accessible ( true ) ;  u r l stream handler factory old value =  (  u r l stream handler factory ) field . get ( null ) ; if  ( old value  !  =  null )   {  field . set ( null null ) ;  }   }  catch  (   no such field exception e )   {   l o g . error ( "" could not find field ""  +  field name  +  "" in class "" +  clazz . get name (  )  +  "" .  "" +  e e ) ;  }  catch  (   illegal access exception e )   {   l o g . error ( "" could not access field ""  +  field name  +  "" in class "" +  clazz . get name (  )  +  "" .  "" +  e e ) ;  }  if  ( new factory  !  =  null )   {   u r l . set u r l stream handler factory ( new factory ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\utils\Secrets.java,get contents,"public list <  string >    (  string str  string name )  {   list <  string >  result = new  array list <  >  (  ) ;  matcher matcher =  f o l d e r _  p a t t e r n . matcher ( str ) ; while  ( matcher . find (  )  )   {   string candidate = matcher . group (  f o l d e r _  g r o u p ) ; if  ( name . equals ( candidate )  )   {   string content = matcher . group (  c o n t e n t _  g r o u p ) ; if  (  strings . is not blank ( content )  )   {  for  (   string s : content . split ( ""[  ] + "" )  )   {  result . add ( s ) ;  }   }   }   }  return result;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\utils\Secrets.java,get names,public list <  string >    (  string str )  {   matcher matcher =  f o l d e r _  p a t t e r n . matcher ( str ) ;  list <  string >  result = new  array list <  >  (  ) ; while  ( matcher . find (  )  )   {  result . add ( matcher . group (  f o l d e r _  g r o u p )  ) ;  }  return result;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\utils\Util.java,cleanup all matching,"public kubernetes client client  session session  list <  throwable >  errors  list <  kubernetes list >  kube configs )  throws  multi exception  {   string session namespace = session . get namespace (  ) ; session . get logger (  )  . info ( "" removing provisioned resources in namespace ""  +  session namespace ) ; for  ( int i = 0; i  <  10; i +  +  )   {  for  (   kubernetes list list : kube configs )   {   list <  has metadata >  items = list . get items (  ) ; if  ( items  !  =  null )   {  for  (   has metadata item : items )   {  cleanup item ( client session item errors ) ;  }   }   }   }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\utils\Util.java,cleanup all resources,"public kubernetes client client  session session  list <  throwable >  errors )  throws  multi exception  {   string session namespace = session . get namespace (  ) ; session . get logger (  )  . info ( "" removing all resources in namespace ""  +  session namespace ) ; for  ( int i = 0; i  <  10; i +  +  )   {   open shift client open shift client = new  controller ( client )  . get open shift client or null (  ) ; if  ( open shift client  !  =  null )   {  try  {  open shift client . deployment configs (  )  . in namespace ( session namespace )  . delete (  ) ;  }  catch  (   kubernetes client exception e )   {  errors . add ( e ) ;  }  try  {  open shift client . routes (  )  . in namespace ( session namespace )  . delete (  ) ;  }  catch  (   kubernetes client exception e )   {  errors . add ( e ) ;  }   }  try  {  client . extensions (  )  . deployments (  )  . in namespace ( session namespace )  . delete (  ) ;  }  catch  (   kubernetes client exception e )   {  errors . add ( e ) ;  }  try  {  client . extensions (  )  . replica sets (  )  . in namespace ( session namespace )  . delete (  ) ;  }  catch  (   kubernetes client exception e )   {  errors . add ( e ) ;  }  try  {  client . replication controllers (  )  . in namespace ( session namespace )  . delete (  ) ;  }  catch  (   kubernetes client exception e )   {  errors . add ( e ) ;  }  try  {  client . pods (  )  . in namespace ( session namespace )  . delete (  ) ;  }  catch  (   kubernetes client exception e )   {  errors . add ( e ) ;  }  try  {  client . extensions (  )  . ingresses (  )  . in namespace ( session namespace )  . delete (  ) ;  }  catch  (   kubernetes client exception e )   {  errors . add ( e ) ;  }  try  {  client . services (  )  . in namespace ( session namespace )  . delete (  ) ;  }  catch  (   kubernetes client exception e )   {  errors . add ( e ) ;  }  try  {  client . security context constraints (  )  . with name ( session namespace )  . delete (  ) ;  }  catch  (   kubernetes client exception e )   {  errors . add ( e ) ;  }   list <  pod >  filtered pods = not null list ( client . pods (  )  . in namespace ( session namespace )  . list (  )  . get items (  )  ) ; if  ( filtered pods . is empty (  )  )   {  return;  }  else  {  try  {   thread . sleep ( 1000 ) ;  }  catch  (   interrupted exception e )   {  e . print stack trace (  ) ;  }   }   }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\utils\Util.java,cleanup item,private kubernetes client client  session session  has metadata item  list <  throwable >  errors )  {   string session namespace = session . get namespace (  ) ;  kubernetes helper . get or create metadata ( item )  . set namespace ( session namespace ) ; client . resource ( item )  . in namespace ( session namespace )  . cascading ( true )  . delete (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\utils\Util.java,cleanup session,"public kubernetes client client  controller controller  configuration configuration  session session  list <  kubernetes list >  kube configs  string status )  throws  multi exception  {  if  ( configuration . is namespace cleanup enabled (  )  )   {  wait until we can destroy namespace ( session ) ;  list <  throwable >  errors = new  array list <  >  (  ) ; if  ( configuration . is delete all resources on exit (  )  )   {  cleanup all resources ( client session errors ) ;  }  else  {  cleanup all matching ( client session errors kube configs ) ;  }  if  ( configuration . is create namespace for test (  )  )   {  try  {  controller . delete namespace ( session . get namespace (  )  ) ;  }  catch  (   exception e )   {  errors . add ( e ) ;  }   }   list <  throwable >  exceptions = new  array list <  >  (  ) ; for  (   throwable exception : errors )   {  if  ( exception instanceof  kubernetes client exception )   {  if  (  (  (  kubernetes client exception ) exception )  . get code (  )   =  =  403 )   {  session . get logger (  )  . warn ( exception . get message (  )  ) ; continue;  }   }  exceptions . add ( exception ) ;  }  if  (  ! exceptions . is empty (  )  )   {  throw new  multi exception ( "" error while cleaning up session . "" exceptions ) ;  }   }  else  {   config maps . update config map status ( client session status ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\utils\Util.java,display session status,"public kubernetes client client  session session )  throws  multi exception  {  if  ( client  =  =  null )   {  session . get logger (  )  . warn ( "" no  kubernetes client for session: ""  +  session . get id (  )  ) ; return;  }  if  ( client . is adaptable (  open shift client . class )  )   {   open shift client o client = client . adapt (  open shift client . class ) ;  list <  deployment config >  deployment configs = o client . deployment configs (  )  . in namespace ( session . get namespace (  )  )  . list (  )  . get items (  ) ; if  ( deployment configs  =  =  null )   {  throw new  multi exception ( "" no deployment configs found in namespace""  +  session . get namespace (  )  ) ;  }  for  (   deployment config deployment config : deployment configs )   {  session . get logger (  )  . info ( "" deployment config:""  +   kubernetes helper . get name ( deployment config )  ) ;  }   }  else  {   list <  deployment >  deployments = client . extensions (  )  . deployments (  )  . in namespace ( session . get namespace (  )  )  . list (  )  . get items (  ) ; if  ( deployments  =  =  null )   {  throw new  multi exception ( "" no deployments found in namespace""  +  session . get namespace (  )  ) ;  }  for  (   deployment deployment : deployments )   {  session . get logger (  )  . info ( "" deployment:""  +   kubernetes helper . get name ( deployment )  ) ;  }   }   list <  pod >  pods = client . pods (  )  . in namespace ( session . get namespace (  )  )  . list (  )  . get items (  ) ; if  ( pods  =  =  null )   {  throw new  multi exception ( "" no pods found in namespace""  +  session . get namespace (  )  ) ;  }  for  (   pod pod : pods )   {  session . get logger (  )  . info ( "" pod:""  +   kubernetes helper . get name ( pod )   +  ""  status:"" +  pod . get status (  )  ) ;  }   list <  service >  svcs = client . services (  )  . in namespace ( session . get namespace (  )  )  . list (  )  . get items (  ) ; if  ( svcs  =  =  null )   {  throw new  multi exception ( "" no services found in namespace""  +  session . get namespace (  )  ) ;  }  for  (   service service : svcs )   {  session . get logger (  )  . info ( "" service:""  +   kubernetes helper . get name ( service )   +  ""  i p:"" +  get portal i p ( service )  +  ""  port:"" +  get ports ( service )  ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\utils\Util.java,find git url,"public string   (  session session  file dir )  {  try  {  return  git helpers . extract git url ( dir ) ;  }  catch  (   i o exception e )   {  session . get logger (  )  . warn ( "" could not detect git url from directory: ""  +  dir  +  "" .  "" +  e ) ; return null;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\utils\Util.java,get project base dir,"public file   (  session session )  {   string basedir =  system . get property ( ""basedir"" "" . "" ) ; return new  file ( basedir ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\utils\Util.java,get session status,"public string   (  session session )  {  if  ( session . get failed (  )  . get (  )   >  0 )   {  return "" f a i l e d"";  }  else  {  return "" p a s s e d"";  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\utils\Util.java,read as string,public string   (  u r l url )  {  try  {  return  i o helpers . read fully ( url ) ;  }  catch  (   i o exception e )   {  throw new  runtime exception ( e ) ;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\utils\Util.java,wait until we can destroy namespace,"protected session session )  {  final  logger log = session . get logger (  ) ;  string confirm destroy =  systems . get env var or system property (  constants .  n a m e s p a c e _  c l e a n u p _  c o n f i r m _  e n a b l e d ""false"" ) ; if  (  objects . equal ( confirm destroy ""true"" )  )   {  show errors before pause ( session ) ;  system . out . println (  ) ;  system . out . println ( "" waiting to destroy the namespace . "" ) ;  system . out . println ( "" please type: [ q] to terminate the namespace . "" ) ; while  ( true )   {  try  {  int ch =  system . in . read (  ) ; if  ( ch  <  0 || ch  =  =  ' q' )   {   system . out . println ( ""\n stopping .  .  . "" ) ; break;  }  else  {   system . out . println ( "" found character: ""  +   character . to string (  ( char ) ch )  ) ;  }   }  catch  (   i o exception e )   {  log . warn ( "" failed to read from input .  ""  +  e ) ; break;  }   }   }  else  {   string timeout text =  systems . get env var or system property (  constants .  n a m e s p a c e _  c l e a n u p _  t i m e o u t ""0"" ) ;  long timeout = null; if  (  strings . is not blank ( timeout text )  )   {  try  {  timeout =  long . parse long ( timeout text ) ;  }  catch  (   number format exception e )   {  log . warn ( "" failed to parse timeout value '""  +  timeout text  +  ""' for $ constants .  n a m e s p a c e _  c l e a n u p _  t i m e o u t .  "" +  e ) ;  }   }  if  ( timeout  !  =  null && timeout  >  0 l )   {  show errors before pause ( session ) ;  system . out . println (  ) ;  system . out . println ( "" sleeping for ""  +  timeout  +  "" seconds until destroying the namespace"" ) ; try  {   thread . sleep ( timeout * 1000 ) ;  }  catch  (   interrupted exception e )   {  log . info ( "" interupted sleeping to  g c the namespace: ""  +  e ) ;  }   }   }   system . out . println ( "" now destroying the  fabric8  arquillian test case namespace"" ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\test\java\io\fabric8\arquillian\DependencyResolverTest.java,test resolution of pom with no deps,"test public void   (  )  throws  i o exception  {   session session = new  session ( ""test - session"" ""test - session - 123"" new  ansi logger (  )  ) ;  dependency resolver resolver = new  dependency resolver (  dependency resolver . class . get resource ( "" / test - pom . xml"" )  . get file (  )  true ) ;  assert . as"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\test\java\io\fabric8\arquillian\kubernetes\ShowConfiguration.java,main,"public string[] args )  {   string environment key = ""testing""; if  ( args . length  >  0 )   {  environment key = args[0];  }   map <  string  string >  map = new  hash map <  >  (  ) ; map . put (  f a b r i c8 _  e n v i r o n m e n t environment key ) ;  configuration configuration =  configuration . from map ( map new  default kubernetes client (  )  ) ;  system . out . println ( "" namespace: ""  +  configuration . get namespace (  )  ) ;  system . out . println ( ""is environment init enabled: ""  +  configuration . is environment init enabled (  )  ) ;  system . out . println ( ""is namespace lazy create enabled: ""  +  configuration . is namespace lazy create enabled (  )  ) ;  system . out . println ( ""is namespace cleanup enabled: ""  +  configuration . is namespace cleanup enabled (  )  ) ;  system . out . println ( ""is create namespace for test: ""  +  configuration . is create namespace for test (  )  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\test\java\io\fabric8\arquillian\kubernetes\ConfigurationTest.java,get kubernetes client,"public kubernetes client   (  )  {  if  ( kubernetes client  =  =  null )   {  kubernetes client = server . get kubernetes client (  ) ;  }  assert not null ( "" no  kubernetes client was created by the mock ! "" kubernetes client ) ; return kubernetes client;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\test\java\io\fabric8\arquillian\kubernetes\ConfigurationTest.java,set kubernetes client,public kubernetes client kubernetes client )  {  this . kubernetes client = kubernetes client;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\test\java\io\fabric8\arquillian\kubernetes\ConfigurationTest.java,set up,before public void   (  )  {   system . get properties (  )  . remove (  k u b e r n e t e s _  m a s t e r ) ;  system . get properties (  )  . remove (  k u b e r n e t e s _  d o m a i n ) ;  system . get properties (  )  . remove (  k u b e r n e t e s _  n a m e s p a c e ) ;  system . get properties (  )  . remove (  f a b r i c8 _  e n v i r o n m e n t ) ;  system . get properties (  )  . re
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\test\java\io\fabric8\arquillian\kubernetes\ConfigurationTest.java,tear down,after public void   (  )  {  set up (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\test\java\io\fabric8\arquillian\kubernetes\ConfigurationTest.java,test config with system properties,"test public void   (  )  {   string expcted master = ""http: /  / expected . master:80"";  string expected namespace = ""expected . namespace"";  string expected domain = ""expected . domain"";  string expected config url = ""http: /  / expected . env . config / kubernetes . json"";  system . set property (  k u b e"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\test\java\io\fabric8\arquillian\kubernetes\ConfigurationTest.java,test config with system properties and config map,"test public void   (  )  {   string expcted master = ""http: /  / expected . master:80"";  string expected namespace = ""expected . namespace"";  string expected domain = ""expected . domain"";  string expected config url = ""http: /  / expected . env . config / kubernetes . json"";  system . set property (  k u b e"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\test\java\io\fabric8\arquillian\kubernetes\ConfigurationTest.java,test environment key but no config map,"test public void   (  )  {   string dev namespace = ""myproject"";  string environment key = ""testing"";  string test namespace = dev namespace;  map <  string  string >  data = new  hash map <  >  (  ) ; data . put ( ""staging"" "" name:  staging\n""  +  "" namespace: myproject - staging\n""  +  "" order: 0"" ) ; "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\test\java\io\fabric8\arquillian\kubernetes\ConfigurationTest.java,test environment key but no config map local only,"ignore public void   (  )  {   string dev namespace = ""myproject"";  string environment key = ""testing"";  string test namespace = dev namespace;  map <  string  string >  data = new  hash map <  >  (  ) ; data . put ( ""staging"" "" name:  staging\n""  +  "" namespace: myproject - staging\n""  +  "" order: 0"" ) "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\test\java\io\fabric8\arquillian\kubernetes\ConfigurationTest.java,test fail if environment namespace not found from config map,"test ( expected =  illegal state exception . class )  public void   (  )  {   string dev namespace = ""myproject"";  string environment key = ""testing"";  map <  string  string >  data = new  hash map <  >  (  ) ; data . put ( ""staging"" "" name:  staging\n""  +  "" namespace: myproject - staging\n""  +  "" order: 0"""
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\test\java\io\fabric8\arquillian\kubernetes\ConfigurationTest.java,test fallback to clients defaults,"test public void   (  )  {   string file = get class (  )  . get resource ( "" / test - kubeconfig"" )  . get file (  ) ;  system . set property (  config .  k u b e r n e t e s _  k u b e c o n f i g _  f i l e file ) ;  configuration . reset fallback config (  ) ;  configuration config =  configuration . from map ( new  hash map <  string  string > "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\test\java\io\fabric8\arquillian\kubernetes\ConfigurationTest.java,test missing environment namespace,"test ( expected =  illegal state exception . class )  public void   (  )  {   map <  string  string >  map = new  hash map <  >  (  ) ; map . put (  f a b r i c8 _  e n v i r o n m e n t ""testing"" ) ; map . put (  f a i l _  o n _  m i s s i n g _  e n v i r o n m e n t _  n a m e s p a c e ""true"" ) ;  configuration . from map ( map get kubernetes client (  )  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\test\java\io\fabric8\arquillian\kubernetes\ConfigurationTest.java,test namespace conflict,"test ( expected =  illegal state exception . class )  public void   (  )  {   map <  string  string >  map = new  hash map <  >  (  ) ; map . put (  n a m e s p a c e _  t o _  u s e ""namesapce1"" ) ; map . put (  f a b r i c8 _  e n v i r o n m e n t ""testing"" ) ; map . put ( ""testing . namespace"" ""namespace2"" ) ;  configuration . from map ( map get ku"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\test\java\io\fabric8\arquillian\kubernetes\ConfigurationTest.java,test namespace found from config map,"test public void   (  )  {   string dev namespace = ""myproject"";  string environment key = ""testing"";  string test namespace = ""myproject - testing"";  map <  string  string >  data = new  hash map <  >  (  ) ; data . put ( environment key "" name:  testing\n""  +  "" namespace: ""  +  test namespace  +  ""\n"" + "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\test\java\io\fabric8\arquillian\kubernetes\ConfigurationTest.java,test namespace not found from config map,"ignore public void   (  )  {   string dev namespace = ""myproject"";  string environment key = ""testing"";  string test namespace = dev namespace;  map <  string  string >  data = new  hash map <  >  (  ) ; data . put ( ""staging"" "" name:  staging\n""  +  "" namespace: myproject - staging\n""  +  "" order: 0"" ) "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\test\java\io\fabric8\arquillian\kubernetes\ConfigurationTest.java,test with config map,"test public void   (  )  {   string expcted master = ""http: /  / expected . master:80"";  string expected namespace = ""expected . namespace"";  string expected domain = ""expected . domain"";  string expected config url = ""http: /  / expected . env . config / kubernetes . json"";  map <  string  string >  map = "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\test\java\io\fabric8\arquillian\PodInjection.java,test pod list injection,"test public void   (  )  {  assert not null ( pod list ) ; assert equals ( 1 pod list . get items (  )  . size (  )  ) ; assert equals ( ""test - pod"" pod list . get items (  )  . get ( 0 )  . get metadata (  )  . get name (  )  ) ; assert not null ( pod ) ; assert equals ( ""test - pod"" pod . get metadata (  )  . get name (  )  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\test\java\io\fabric8\arquillian\ServiceInjection.java,test pod list injection,"test public void   (  )  {  assert not null ( service list ) ; assert equals ( 1 service list . get items (  )  . size (  )  ) ; assert equals ( ""test - service"" service list . get items (  )  . get ( 0 )  . get metadata (  )  . get name (  )  ) ; assert not null ( service ) ; assert equals ( ""test - service"" service . get metadata (  ) "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\test\java\io\fabric8\arquillian\ReplicationControllerInjection.java,test pod list injection,"test public void   (  )  {  assert not null ( controller list ) ; assert equals ( 1 controller list . get items (  )  . size (  )  ) ; assert equals ( ""test - controller"" controller list . get items (  )  . get ( 0 )  . get metadata (  )  . get name (  )  ) ; assert not null ( controller ) ; assert equals ( ""test - controller"" con"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\test\java\io\fabric8\arquillian\server\mock\ServerMockTestSuite.java,set up class,"before class public static void   (  )  throws  i o exception  {   m o c k . expect (  )  . with path ( "" / oapi / v1 / projects"" )  . and return ( 200 new  project list builder (  )  . with items ( new  project builder (  )  . with new metadata (  )  . with name ( ""arquillian"" )  . and (  )  . build (  )  )  . build (  )  )  . always (  ) ;  m o c k . expe"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\test\java\io\fabric8\arquillian\ResourceInjection.java,test cliett injection,test public void   (  )  {  assert not null ( client ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\test\java\io\fabric8\arquillian\ResourceInjection.java,test session injection,test public void   (  )  {  assert not null ( session ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\test\java\io\fabric8\arquillian\utils\SecretsTest.java,test get names,"test public void   (  )  {   list <  string >  result =  secrets . get names ( ""one two"" ) ; assert true ( result . contains ( ""one"" )  ) ; assert true ( result . contains ( ""two"" )  ) ; result =  secrets . get names ( ""one  two"" ) ; assert true ( result . contains ( ""one"" )  ) ; assert true ( result . contains ( ""two"" )  ) ; re"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\BaseBean.java,base bean,public string name  type bean type  annotation .  .  .  annotations )  {  this . name = name; this . bean type = bean type;  set <  type >  all types = new  linked hash set <  >  (  ) ; all types . add ( bean type ) ; for  (  type t =  types . super class of ( bean type ) ;  ! all types . contains (  object . class )  && t  !  =  null; t =  types . super class of ( t )  )   {  all types . add ( t ) ;  }  types =  collections . unmodifiable set ( all types ) ; qualifiers =  collections . unmodifiable set ( new  hash set <  >  (  arrays . as list ( annotations )  )  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\BaseBean.java,get bean class,override public  class <  ?  >    (  )  {  return  types . as class ( bean type ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\BaseBean.java,get id,override public  string   (  )  {  return get name (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\BaseBean.java,get injection points,override public  set <  injection point >    (  )  {  return  collections . empty set (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\BaseBean.java,get name,override public  string   (  )  {  return name;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\BaseBean.java,get qualifiers,override public  set <  annotation >    (  )  {  return qualifiers;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\BaseBean.java,get scope,override public  class <  ?  extends  annotation >    (  )  {  return  application scoped . class;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\BaseBean.java,get stereotypes,override public  set <  class <  ?  extends  annotation >  >    (  )  {  return  collections . empty set (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\BaseBean.java,get types,override public  set <  type >    (  )  {  return types;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\BaseBean.java,is alternative,override public boolean   (  )  {  return false;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\BaseBean.java,is nullable,override public boolean   (  )  {  return false;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\ProducerBean.java,producer bean,public string name  type type  producer <  x >  producer  annotation .  .  .  annotations )  {  super ( name type annotations ) ; this . producer = producer;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\ProducerBean.java,create,"override public  x   (  creational context <  x >  creational context )  {  if  ( producer  =  =  null )   {  throw new  illegal state exception ( "" no producer has been specified"" ) ;  }  return producer . produce ( creational context ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\ProducerBean.java,destroy,override public void   (  x instance  creational context <  x >  creational context )  {  producer . dispose ( instance ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\ProducerBean.java,equals,override public boolean   (  object o )  {  if  ( this  =  =  o )  return true; if  ( o  =  =  null || get class (  )   !  =  o . get class (  )  )  return false;  producer bean that =  (  producer bean ) o; if  ( get id (  )   !  =  null  ?   ! get id (  )  . equals ( that . get id (  )  )  : that . get id (  )   !  =  null )  return false; if  ( g
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\ProducerBean.java,get producer,public producer <  x >    (  )  {  return producer;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\ProducerBean.java,get scope,override public  class <  ?  extends  annotation >    (  )  {  return  dependent . class;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\ProducerBean.java,hash code,override public int   (  )  {  int result = get id (  )   !  =  null  ?  get id (  )  . hash code (  )  : 0; result = 31 * result  +   ( get bean class (  )   !  =  null  ?  get bean class (  )  . hash code (  )  : 0 ) ; return result;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\KubernetesClientBean.java,kubernetes client bean,"public client"" ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\KubernetesClientBean.java,create,override public  kubernetes client   (  creational context <  kubernetes client >  creational context )  {  return new  default kubernetes client (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\ServiceBean.java,key,private string service name  string service protocol  string service port  string service path  string service alias  boolean service endpoint  boolean service external  type type  producer producer )  {  this . service name = service name; this . service protocol = service protocol; this . service path = service path; this . service alias = service alias; this . service port = service port; this . service endpoint = service endpoint; this . service external = service external; this . type = type; this . producer = producer;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\ServiceBean.java,service bean,private string service name  string service protocol  string service port  string service path  string service alias  type type  producer <  x >  producer  boolean service endpoint  boolean service external )  {  super ( service alias type producer  qualifiers . create ( service name service protocol service port service path service endpoint service external )  ) ; this . service name = service name; this . service protocol = service protocol; this . service port = service port; this . service path = service path; this . service alias = service alias; this . service endpoint = service endpoint; this . service external = service external;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\ServiceBean.java,any bean,public s >  service bean <  s >    (  string id  string protocol  string port  string path  boolean endpoint  boolean external  type type )  {  for  (   map .  entry <  key  service bean >  entry :  b e a n s . entry set (  )  )   {   key key = entry . get key (  ) ; if  (  objects . equal ( key . service name id )  &&  objects . equal ( key . service protocol protocol )  &&  objects . equal ( key . service port port ) &&  objects . equal ( key . service path path ) &&  objects . equal ( key . service endpoint endpoint ) &&  objects . equal ( key . service external external ) &&  objects . equal ( key . type type )  )   {  return entry . get value (  ) ;  }   }  return get bean ( id protocol port path null endpoint external type ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\KubernetesClientBean.java,destroy,override public void   (  kubernetes client instance  creational context <  kubernetes client >  creational context )  {  instance . close (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\ServiceUrlBean.java,key,private string service name  string service protocol  string service port  string service path  string service alias  boolean service endpoint  boolean service external )  {  this . service name = service name; this . service protocol = service protocol; this . service port = service port; this . service path = service path; this . service alias = service alias; this . service endpoint = service endpoint; this . service external = service external;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\ServiceUrlBean.java,service url bean,private string service name  string service protocol  string service port  string service path  string service alias  boolean service endpoint  boolean service external )  {  super ( service alias  string . class service endpoint  ?  new  first endpoint producer ( service name service protocol service port )  : new  service url producer ( service name service protocol service port service path service external )   qualifiers . create ( service name service protocol service port service path service endpoint service external )  ) ; this . service name = service name; this . service protocol = service protocol; this . service port = service port; this . service path = service path; this . service alias = service alias; this . service endpoint = service endpoint; this . service external = service external;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\ServiceUrlBean.java,any bean,public service url bean   (  string id  string protocol  string port  string path  boolean endpoint  boolean external )  {  for  (   map .  entry <  key  service url bean >  entry :  b e a n s . entry set (  )  )   {   key key = entry . get key (  ) ; if  (  objects . equal ( key . service name id )  &&  objects . equal ( key . service protocol protocol )  &&  objects . equal ( key . service port port ) &&  objects . equal ( key . service path path ) &&  objects . equal ( key . service endpoint endpoint ) &&  objects . equal ( key . service external external )  )   {  return entry . get value (  ) ;  }   }  return get bean ( id protocol port path null endpoint external ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\ServiceUrlBean.java,equals,override public boolean   (  object o )  {  if  ( this  =  =  o )  return true; if  ( o  =  =  null || get class (  )   !  =  o . get class (  )  )  return false;  key key =  (  key ) o; if  ( service name  !  =  null  ?   ! service name . equals ( key . service name )  : key . service name  !  =  null )  return false; if  ( servic
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\ServiceUrlBean.java,get bean,public service url bean   (  string name  string protocol  string port  string path  string alias  boolean endpoint  boolean external )  {   string service alias = alias  !  =  null  ?  alias :  utils . to alias ( name protocol port path endpoint external  s u f f i x ) ;  key key = new  key ( name protocol port path service alias endpoint external ) ; if  (  b e a n s . contains key ( key )  )   {  return  b e a n s . get ( key ) ;  }   service url bean bean = new  service url bean ( name protocol port path service alias endpoint external ) ;  b e a n s . put ( key bean ) ; return bean;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\ServiceUrlBean.java,get beans,public collection <  service url bean >    (  )  {  return  b e a n s . values (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\ServiceUrlBean.java,get service alias,public string   (  )  {  return service alias;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\ServiceUrlBean.java,get service endpoint,public boolean   (  )  {  return service endpoint;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\ServiceUrlBean.java,get service external,public boolean   (  )  {  return service external;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\ServiceUrlBean.java,get service name,public string   (  )  {  return service name;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\ServiceUrlBean.java,get service path,public string   (  )  {  return service path;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\ServiceUrlBean.java,get service port,public string   (  )  {  return service port;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\ServiceUrlBean.java,get service protocol,public string   (  )  {  return service protocol;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\ServiceUrlBean.java,hash code,override public int   (  )  {  int result = service name  !  =  null  ?  service name . hash code (  )  : 0; result = 31 * result  +   ( service protocol  !  =  null  ?  service protocol . hash code (  )  : 0 ) ; result = 31 * result  +   ( service port  !  =  null  ?  service port . hash code (  )  : 0 ) ; result = 31 * re
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\ServiceUrlBean.java,to string,"override public  string   (  )  {  return "" service url bean[""  +  ""service name = '""  +  service name  +  '\'' +  ""  service protocol = '"" +  service protocol +  '\'' +  ""  service port = '"" +  service port +  '\'' +  ']';  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\ConfigurationBean.java,configuration bean,private string configuration id  type type )  {  super ( configuration id  +   s u f f i x type new  configuration producer ( configuration id  types . as class ( type )  )  new  configuration qualifier ( configuration id )  ) ; this . configuration id = configuration id;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\ConfigurationBean.java,key,private string configuration id  type type )  {  this . configuration id = configuration id; this . type = type;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\ConfigurationBean.java,equals,override public boolean   (  object o )  {  if  ( this  =  =  o )  return true; if  ( o  =  =  null || get class (  )   !  =  o . get class (  )  )  return false;  key key =  (  key ) o; if  ( configuration id  !  =  null  ?   ! configuration id . equals ( key . configuration id )  : key . configuration id  !  =  null )  return f
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\ConfigurationBean.java,get bean,public configuration bean   (  string configuration id  type type )  {   key key = new  key ( configuration id type ) ; if  (  b e a n s . contains key ( key )  )   {  return  b e a n s . get ( key ) ;  }   configuration bean bean = new  configuration bean ( configuration id type ) ;  b e a n s . put ( key bean ) ; return bean;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\ConfigurationBean.java,get beans,public collection <  configuration bean >    (  )  {  return  b e a n s . values (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\ConfigurationBean.java,get configuration id,public string   (  )  {  return configuration id;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\ConfigurationBean.java,hash code,override public int   (  )  {  int result = configuration id  !  =  null  ?  configuration id . hash code (  )  : 0; result = 31 * result  +   ( type  !  =  null  ?  type . hash code (  )  : 0 ) ; return result;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\eager\EagerCDIExtension.java,after deployment validation,public observes  after deployment validation event  bean manager bean manager )  {   annotation literal <  eager >  annotation literal = new  annotation literal <  eager >  (  )  {   }  ;  set <  bean <  ?  >  >  beans = bean manager . get beans (  object . class annotation literal ) ; for  (   bean <  ?  >  bean : beans )   {   class <  ?  >  bean class = bean . get bean class (  ) ; if  ( bean class . is annotation present (  application scoped . class )  || bean class . is annotation present (  singleton . class )  )   {  bean manager . get reference ( bean bean . get bean class (  )  bean manager . create creational context ( bean )  )  . to string (  ) ;  }   }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\FactoryMethodContext.java,factory method context,public bean bean  type source type  type return type  annotated method factory method )  {  this . bean = bean; this . source type = source type; this . return type = return type; this . factory method = factory method;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\FactoryMethodContext.java,collect dependencies,private set <  factory method context >    (  factory method context item  set <  factory method context >  all )  {   set <  factory method context >  dependencies = new  linked hash set <  >  (  ) ; for  (   factory method context candidate : all )   {  if  ( item . get source type (  )  . equals ( candidate . get return type (  )  )  )   {  dependencies . add ( candidate ) ;  }   }  return dependencies;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\FactoryMethodContext.java,get bean,public bean   (  )  {  return bean;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\FactoryMethodContext.java,get factory method,public annotated method   (  )  {  return factory method;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\FactoryMethodContext.java,get return type,public type   (  )  {  return return type;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\FactoryMethodContext.java,get source type,public type   (  )  {  return source type;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\FactoryMethodContext.java,sort,public set <  factory method context >    (  set <  factory method context >  items )  {   set <  factory method context >  sorted = new  linked hash set <  >  (  ) ;  set <  factory method context >  visited = new  linked hash set <  >  (  ) ; for  (   factory method context e : items )   {  visit ( e items visited sorted ) ;  }  return sorted;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\FactoryMethodContext.java,visit,private factory method context item  set <  factory method context >  all  set <  factory method context >  visited  set <  factory method context >  sorted )  {  if  (  ! visited . add ( item )  )   {  return;  }  for  (   factory method context t : collect dependencies ( item all )  )   {  visit ( t all visited sorted ) ;  }  sorted . add ( item ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\DelegatingInjectionPoint.java,delegating injection point,public injection point delegate )  {  this . delegate = delegate;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\DelegatingInjectionPoint.java,get annotated,public annotated   (  )  {  return delegate . get annotated (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\DelegatingInjectionPoint.java,get bean,public bean <  ?  >    (  )  {  return delegate . get bean (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\DelegatingInjectionPoint.java,get member,public member   (  )  {  return delegate . get member (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\DelegatingInjectionPoint.java,get qualifiers,public set <  annotation >    (  )  {  return delegate . get qualifiers (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\DelegatingInjectionPoint.java,get type,public type   (  )  {  return delegate . get type (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\DelegatingInjectionPoint.java,is delegate,public delegate (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\DelegatingInjectionPoint.java,is transient,public transient (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\ServiceUrlCollectionBean.java,key,private string service id  string service protocol  string service port  string service path  string service alias  boolean service endpoint  boolean service external  type service collection type )  {  this . service id = service id; this . service protocol = service protocol; this . service port = service port; this . service path = service path; this . service alias = service alias; this . service endpoint = service endpoint; this . service external = service external; this . service collection type = service collection type;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\ServiceUrlCollectionBean.java,service url collection bean,private string service name  string service protocol  string service port  string service path  string service alias  boolean service endpoint  boolean service external  type service collection type )  {  super ( service alias service collection type new  service endpoints producer ( service name service protocol service port )   qualifiers . create ( service name service protocol service port service path service endpoint service external )  ) ; this . service name = service name; this . service protocol = service protocol; this . service port = service port; this . service path = service path; this . service alias = service alias; this . service endpoint = service endpoint; this . service external = service external; this . service collection type = service collection type;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\ServiceUrlCollectionBean.java,any bean,public service url collection bean   (  string id  string protocol  string port  string path  boolean endpoint  boolean external  type collection type )  {  for  (   map .  entry <  key  service url collection bean >  entry :  b e a n s . entry set (  )  )   {   key key = entry . get key (  ) ; if  (  objects . equal ( key . service id id )  &&  objects . equal ( key . service protocol protocol )  &&  objects . equal ( key . service port port ) &&  objects . equal ( key . service path path ) &&  objects . equal ( key . service endpoint endpoint ) &&  objects . equal ( key . service external external )  )   {  return entry . get value (  ) ;  }   }  return get bean ( id protocol port path null endpoint external collection type ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\ServiceUrlCollectionBean.java,equals,override public boolean   (  object o )  {  if  ( this  =  =  o )  return true; if  ( o  =  =  null || get class (  )   !  =  o . get class (  )  )  return false;  key key =  (  key ) o; if  ( service id  !  =  null  ?   ! service id . equals ( key . service id )  : key . service id  !  =  null )  return false; if  ( service protoco
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\ServiceUrlCollectionBean.java,get bean,public service url collection bean   (  string name  string protocol  string port  string path  string alias  boolean endpoint  boolean external  type collection type )  {   string service alias = alias  !  =  null  ?  alias :  utils . to alias ( name protocol port path endpoint external  s u f f i x ) ;  key key = new  key ( name protocol port path service alias endpoint external collection type ) ; if  (  b e a n s . contains key ( key )  )   {  return  b e a n s . get ( key ) ;  }   service url collection bean bean = new  service url collection bean ( name protocol port path service alias endpoint external collection type ) ;  b e a n s . put ( key bean ) ; return bean;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\ServiceUrlCollectionBean.java,get beans,public collection <  service url collection bean >    (  )  {  return  b e a n s . values (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\ServiceUrlCollectionBean.java,get service alias,public string   (  )  {  return service alias;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\ServiceUrlCollectionBean.java,get service collection type,public type   (  )  {  return service collection type;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\ServiceUrlCollectionBean.java,get service endpoint,public boolean   (  )  {  return service endpoint;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\ServiceUrlCollectionBean.java,get service external,public boolean   (  )  {  return service external;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\ServiceUrlCollectionBean.java,get service name,public string   (  )  {  return service name;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\ServiceUrlCollectionBean.java,get service path,public string   (  )  {  return service path;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\ServiceUrlCollectionBean.java,get service port,public string   (  )  {  return service port;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\ServiceUrlCollectionBean.java,get service protocol,public string   (  )  {  return service protocol;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\ServiceUrlCollectionBean.java,hash code,override public int   (  )  {  int result = service id  !  =  null  ?  service id . hash code (  )  : 0; result = 31 * result  +   ( service protocol  !  =  null  ?  service protocol . hash code (  )  : 0 ) ; result = 31 * result  +   ( service port  !  =  null  ?  service port . hash code (  )  : 0 ) ; result = 31 * result
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\ServiceUrlCollectionBean.java,is service endpoint,public boolean   (  )  {  return service endpoint;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\ServiceUrlCollectionBean.java,to string,"override public  string   (  )  {  return "" service url bean[""  +  ""service name = '""  +  service name  +  '\'' +  ""  service protocol = '"" +  service protocol +  '\'' +  ""  service port = '"" +  service port +  '\'' +  ']';  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\Fabric8Extension.java,after discovery,public observes  after bean discovery event  bean manager bean manager )  {   kubernetes holder . use bean manager ( bean manager ) ; if  ( bean manager . get beans (  kubernetes client . class )  . is empty (  )  )   {  event . add bean ( new  kubernetes client bean (  )  ) ;  }   list <  factory method context >  reverse factories = new  array list <  >  (  factory method context . sort ( factories )  ) ;  collections . reverse ( reverse factories ) ; for  (  final  factory method context factory method context : reverse factories )   {   service bean . do with ( factory method context . get return type (  )  new  service bean .  callback (  )  {  @ override public  service bean apply (   service bean bean )  {   string service id = bean . get service name (  ) ;  string service protocol = or ( bean . get service protocol (  )  get factory method protocol ( factory method context . get factory method (  )  . get java member (  )  )  ) ;  string service port = or ( bean . get service port (  )  get factory method port ( factory method context . get factory method (  )  . get java member (  )  )  ) ;  string service path = or ( bean . get service path (  )  get factory method path ( factory method context . get factory method (  )  . get java member (  )  )  ) ;  boolean service external = bean . get service external (  ) ;  boolean service endpoint = bean . get service endpoint (  ) ; if  (  !  string . class . equals ( factory method context . get source type (  )  )  )   {   service bean . get bean ( service id service protocol service port service path null service endpoint service external factory method context . get source type (  )  ) ;  }  return bean . with producer ( new  factory method producer ( factory method context . get bean (  )  factory method context . get factory method (  )  service id service protocol service port service path )  ) ;  }   }   ) ;  }  for  (   service url bean bean :  service url bean . get beans (  )  )   {  event . add bean ( bean ) ;  }  for  (   service url collection bean bean :  service url collection bean . get beans (  )  )   {  event . add bean ( bean ) ;  }  for  (   service bean bean :  service bean . get beans (  )  )   {  if  ( bean . get producer (  )   !  =  null )   {  event . add bean ( bean ) ;  }   }  for  (   configuration bean b :  configuration bean . get beans (  )  )   {  event . add bean ( b ) ;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\Fabric8Extension.java,apply,override public  service bean   (  service bean bean )  {   string service id = bean . get service name (  ) ;  string service protocol = or ( bean . get service protocol (  )  get factory method protocol ( factory method context . get factory method (  )  . get java member (  )  )  ) ;  string service port = or ( bean . ge
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\Fabric8Extension.java,get qualifiers,override public  set <  annotation >    (  )  {   set <  annotation >  qualifiers = new  linked hash set <  >  ( super . get qualifiers (  )  ) ; qualifiers . add ( new  endpoint qualifier ( false )  ) ; return  collections . unmodifiable set ( qualifiers ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\Fabric8Extension.java,get source type,private t >  type   (  annotated method <  t >  method )  {  for  (   annotated parameter <  t >  parameter : method . get parameters (  )  )   {  if  ( parameter . is annotation present (  service name . class )  )   {  return parameter . get base type (  ) ;  }   }  return  string . class;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\Fabric8Extension.java,is configuration injection point,private injection point injection point )  {   set <  annotation >  qualifiers = injection point . get qualifiers (  ) ; for  (   annotation annotation : qualifiers )   {  if  ( annotation . annotation type (  )  . is assignable from (  configuration . class )  )   {  return true;  }   }  return false;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\Fabric8Extension.java,is generic of,private type type  type raw  type argument )  {  if  ( type instanceof  parameterized type )   {   parameterized type p =  (  parameterized type ) type; return p . get raw type (  )   !  =  null && p . get raw type (  )  . equals ( raw )  && p . get actual type arguments (  )  . length  =  =  1 &&  ( p . get actual type arguments (  ) [0] . equals ( argument )  || argument  =  =  null ) ;  }  else if  ( type instanceof  class )   {  return argument  =  =  null && type . equals ( raw ) ;  }  else  {  return false;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\Fabric8Extension.java,is service injection point,public injection point injection point )  {   set <  annotation >  qualifiers = injection point . get qualifiers (  ) ; for  (   annotation annotation : qualifiers )   {  if  ( annotation . annotation type (  )  . is assignable from (  service name . class )  )   {  return true;  }   }  return false;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\Fabric8Extension.java,on injection point,public t  x > void   ( @ observes  process injection point <  t  x >  event  bean manager bean manager )  {  final  injection point injection point = event . get injection point (  ) ; if  ( is service injection point ( injection point )  )   {   annotated annotated = injection point . get annotated (  ) ;  service name name = annotated . get annotation (  service name . class ) ;  protocol protocol = annotated . get annotation (  protocol . class ) ;  port name port = annotated . get annotation (  port name . class ) ;  path path = annotated . get annotation (  path . class ) ;  alias alias = annotated . get annotation (  alias . class ) ;  endpoint endpoint = annotated . get annotation (  endpoint . class ) ;  external external = annotated . get annotation (  external . class ) ;  string service name = name . value (  ) ;  string service protocol = protocol  !  =  null  ?  protocol . value (  )  : null;  string service port = port  !  =  null  ?  port . value (  )  : null;  string service path = path  !  =  null  ?  path . value (  )  : null;  string service alias = alias  !  =  null  ?  alias . value (  )  : null;  boolean service external = external  !  =  null  ?  external . value (  )  : false;  boolean service endpoint = endpoint  !  =  null  ?  endpoint . value (  )  : false;  type type = annotated . get base type (  ) ; if  ( type instanceof  parameterized type &&  instance . class . equals (  (  (  parameterized type ) type )  . get raw type (  )  )  )   {  type =  (  (  parameterized type ) type )  . get actual type arguments (  ) [0];  }  if  ( type . equals (  string . class )  )   {   service url bean . get bean ( service name service protocol service port service path service alias service endpoint service external ) ;  }  else if  ( is generic of ( type  list . class  string . class )  )   {   service url collection bean . get bean ( service name service protocol service port service path service alias service endpoint service external  types .  l i s t _  o f _  s t r i n g s ) ;  }  else if  ( is generic of ( type  list . class null )  )   {   }  else if  ( is generic of ( type  set . class  string . class )  )   {   service url collection bean . get bean ( service name service protocol service port service path service alias service endpoint service external  types .  s e t _  o f _  s t r i n g s ) ;  }  else if  ( is generic of ( type  set . class null )  )   {   }  else if  ( type instanceof  class )   {   service bean . get bean ( service name service protocol service port service path service alias service endpoint service external type ) ;  }  else  {  throw new  runtime exception (  string . format (  i n j e c t i o n _  p o i n t _  u n k n o w n _  t y p e injection point . get bean (  )  . get bean class (  )  type )  ) ;  }  if  ( protocol  =  =  null )   {  set default protocol ( event ) ;  }  if  ( port  =  =  null )   {  set default port ( event ) ;  }  if  ( path  =  =  null )   {  set default path ( event ) ;  }  if  ( endpoint  =  =  null )   {  set default endpoint ( event ) ;  }  if  ( external  =  =  null )   {  set default external ( event ) ;  }   }  else if  ( is configuration injection point ( injection point )  )   {   annotated annotated = injection point . get annotated (  ) ;  configuration configuration = annotated . get annotation (  configuration . class ) ;  type type = injection point . get type (  ) ;  string configuration id = configuration . value (  ) ;  configuration bean . get bean ( configuration id type ) ;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\Fabric8Extension.java,on managed bean,public x > void   ( final @ observes  process managed bean <  x >  event )  {  for  (  final  annotated method <  ?  >  method : event . get annotated bean class (  )  . get methods (  )  )   {  final  factory factory = method . get annotation (  factory . class ) ; if  ( factory  !  =  null )   {  final  type source type = get source type ( method ) ; final  type return type = method . get java member (  )  . get return type (  ) ; factories . add ( new  factory method context ( event . get bean (  )  source type return type method )  ) ;  }   }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\Fabric8Extension.java,process annotated type,public r > void   ( @ observes  process annotated type <  r >  pat  bean manager bean manager )  {   annotated type type = pat . get annotated type (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\Fabric8Extension.java,set default endpoint,private t  x > void   (  process injection point <  t  x >  event )  {  event . set injection point ( new  delegating injection point ( event . get injection point (  )  )  {  @ override public  set <  annotation >  get qualifiers (  )  {   set <  annotation >  qualifiers = new  linked hash set <  >  ( super . get qualifiers (  )  ) ; qualifiers . add ( new  endpoint qualifier ( false )  ) ; return  collections . unmodifiable set ( qualifiers ) ;  }   }   ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\Fabric8Extension.java,set default external,private t  x > void   (  process injection point <  t  x >  event )  {  event . set injection point ( new  delegating injection point ( event . get injection point (  )  )  {  @ override public  set <  annotation >  get qualifiers (  )  {   set <  annotation >  qualifiers = new  linked hash set <  >  ( super . get qualifiers (  )  ) ; qualifiers . add ( new  external qualifier ( false )  ) ; return  collections . unmodifiable set ( qualifiers ) ;  }   }   ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\Fabric8Extension.java,set default path,"private t  x > void   (  process injection point <  t  x >  event )  {  event . set injection point ( new  delegating injection point ( event . get injection point (  )  )  {  @ override public  set <  annotation >  get qualifiers (  )  {   set <  annotation >  qualifiers = new  linked hash set <  >  ( super . get qualifiers (  )  ) ; qualifiers . add ( new  path qualifier ( """" )  ) ; return  collections . unmodifiable set ( qualifiers ) ;  }   }   ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\Fabric8Extension.java,set default port,"private t  x > void   (  process injection point <  t  x >  event )  {  event . set injection point ( new  delegating injection point ( event . get injection point (  )  )  {  @ override public  set <  annotation >  get qualifiers (  )  {   set <  annotation >  qualifiers = new  linked hash set <  >  ( super . get qualifiers (  )  ) ; qualifiers . add ( new  port qualifier ( """" )  ) ; return  collections . unmodifiable set ( qualifiers ) ;  }   }   ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\Fabric8Extension.java,set default protocol,"private t  x > void   (  process injection point <  t  x >  event )  {  event . set injection point ( new  delegating injection point ( event . get injection point (  )  )  {  @ override public  set <  annotation >  get qualifiers (  )  {   set <  annotation >  qualifiers = new  linked hash set <  >  ( super . get qualifiers (  )  ) ; qualifiers . add ( new  protocol qualifier ( """" )  ) ; return  collections . unmodifiable set ( qualifiers ) ;  }   }   ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\producers\FactoryMethodProducer.java,factory method producer,public bean <  t >  bean  annotated method <  x >  factory method  string point name  string point protocol  string point port  string point path )  {  this . bean = bean; this . factory method = factory method; this . point name = point name; this . point protocol = point protocol; this . point port = point port; this . point path = point path;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\producers\FactoryMethodProducer.java,get configuration,private object   (  string service id  type type  creational context context )  {  try  {  return  bean provider . get contextual reference (  types . as class ( type )  new  configuration qualifier ( service id )  ) ;  }  catch  (   illegal state exception e )   {  return  configuration bean . get bean ( service id type )  . get producer (  )  . produce ( context ) ;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\producers\FactoryMethodProducer.java,get endpoint list,"private list <  string >    (  string service id  string service protocol  string service port  string service path  boolean service external  creational context context )  {  final  boolean service endpoint = true; try  {  return  bean provider . get contextual reference (  list . class  qualifiers . create ( service id service protocol service port service path service endpoint service external )  ) ;  }  catch  (   illegal state exception e )   {   producer <  string >  producer =  service url bean . any bean ( service id service protocol service port service path service endpoint service external )  . get producer (  ) ; if  ( producer  !  =  null )   {  return  service url collection bean . any bean ( service id service protocol service port service path service endpoint service external  types .  l i s t _  o f _  s t r i n g s )  . get producer (  )  . produce ( context ) ;  }  else  {  throw new  illegal state exception ( "" could not find producer for endpoints of service:""  +  service id  +  "" protocol:"" +  service protocol ) ;  }   }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\producers\FactoryMethodProducer.java,get injection points,override public  set <  injection point >    (  )  {  return  collections . empty set (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\producers\FactoryMethodProducer.java,get service bean,"private object   (  string service id  string service protocol  string service port  string service path  boolean service external  boolean service endpoint  type service type  creational context context )  {  try  {  return  bean provider . get contextual reference (  types . as class ( service type )   qualifiers . create ( service id service protocol service port service path service endpoint service external )  ) ;  }  catch  (   illegal state exception e )   {   producer producer =  service bean . any bean ( service id service protocol service port service path service endpoint service external service type )  . get producer (  ) ; if  ( producer  !  =  null )   {  return producer . produce ( context ) ;  }  else  {  throw new  illegal state exception ( "" could not find producer for service:""  +  service id  +  "" type:"" +  service type +  "" protocol:"" +  service protocol ) ;  }   }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\producers\FactoryMethodProducer.java,get service url,"private string   (  string service id  string service protocol  string service port  string service path  boolean service endpoint  boolean service external  creational context context )  {  try  {  return  bean provider . get contextual reference (  string . class  qualifiers . create ( service id service protocol service port service path service endpoint service external )  ) ;  }  catch  (   illegal state exception e )   {   producer <  string >  producer =  service url bean . any bean ( service id service protocol service port service path service endpoint service external )  . get producer (  ) ; if  ( producer  !  =  null )   {  return  service url bean . any bean ( service id service protocol service port service path service endpoint service external )  . get producer (  )  . produce ( context ) ;  }  else  {  throw new  illegal state exception ( "" could not find producer for service:""  +  service id  +  "" protocol:"" +  service protocol ) ;  }   }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\producers\FactoryMethodProducer.java,produce,override public  t   (  creational context <  t >  ctx )  {   list <  object >  arguments = new  array list <  >  (  ) ; for  (   annotated parameter <  x >  parameter : factory method . get parameters (  )  )   {   type type = parameter . get base type (  ) ;  service name parameter service name = parameter . get annotation ( 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\producers\ConfigurationProducer.java,configuration producer,public string configuration id  class <  t >  type )  {  this . type = type; this . configuration id = configuration id;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\producers\ConfigurationProducer.java,get injection points,override public  set <  injection point >    (  )  {  return  collections . empty set (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\producers\ConfigurationProducer.java,produce,"override public  t   (  creational context <  t >  ctx )  {  if  ( configuration id  =  =  null )   {  throw new  illegal argument exception ( "" no service id has been specified . "" ) ;  }  try  {   t bean = type . new instance (  ) ; for  (   field f : type . get declared fields (  )  )   {   config property config pro"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\producers\ConfigurationProducer.java,to env,"private string   (  string str )  {  return str . to upper case (  )  . replace all ( "" - "" "" _ "" ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\KubernetesHolder.java,get bean manager,private bean manager   (  )  {  try  {  return  c d i . current (  )  . get bean manager (  ) ;  }  catch  (   throwable t )   {  return  b e a n _  m a n a g e r . get (  ) ;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\KubernetesHolder.java,get client,"public kubernetes client   (  )  {  if  ( client  !  =  null )   {  return client;  }   bean manager bean manager = get bean manager (  ) ; if  ( bean manager  !  =  null )   {   set <  bean <  ?  >  >  beans = bean manager . get beans (  kubernetes client . class ) ; if  ( beans . is empty (  )  )   {  throw new  illegal state exception ( "" could not find client beans ! "" ) ;  }  else  {   creational context ctx = bean manager . create creational context ( null ) ; client =  (  kubernetes client ) bean manager . get reference ( beans . iterator (  )  . next (  )   kubernetes client . class ctx ) ;  }   }  else  {  client = new  default kubernetes client (  ) ;  }  return client;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\KubernetesHolder.java,use bean manager,public bean manager bean manager )  {   b e a n _  m a n a g e r . set ( bean manager ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\producers\FirstEndpointProducer.java,first endpoint producer,public string service id  string service protocol  string service port )  {  this . service id = service id; this . service protocol = service protocol; this . service port = service port;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\producers\FirstEndpointProducer.java,get injection points,override public  set <  injection point >    (  )  {  return  collections . empty set (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\producers\FirstEndpointProducer.java,produce,"override public  string   (  creational context <  string >  ctx )  {  if  ( service id  =  =  null )   {  throw new  illegal argument exception ( "" no service id has been specified . "" ) ;  }   list <  string >  endpoints =  services . to service endpoint url ( service id service protocol service port ) ; if  ( "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\producers\ServiceEndpointsProducer.java,service endpoints producer,public string service id  string service protocol  string service port )  {  this . service id = service id; this . service protocol = service protocol; this . service port = service port;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\producers\ServiceEndpointsProducer.java,get injection points,override public  set <  injection point >    (  )  {  return  collections . empty set (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\producers\ServiceEndpointsProducer.java,produce,"override public  list <  string >    (  creational context <  list <  string >  >  ctx )  {  if  ( service id  =  =  null )   {  throw new  illegal argument exception ( "" no service id has been specified . "" ) ;  }  return  services . to service endpoint url ( service id service protocol service port ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\producers\ServiceUrlProducer.java,service url producer,public string service id  string service protocol  string service port name  string service path  boolean service external )  {  this . service id = service id; this . service protocol = service protocol; this . service port name = service port name; this . service path = service path; this . service external = service external;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\producers\ServiceUrlProducer.java,get injection points,override public  set <  injection point >    (  )  {  return  collections . empty set (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\producers\ServiceUrlProducer.java,produce,"override public  string   (  creational context <  string >  ctx )  {  if  ( service id  =  =  null )   {  throw new  illegal argument exception ( "" no service id has been specified . "" ) ;  }  return  services . to service url ( service id service protocol service port name service path service externa"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\qualifiers\ConfigurationQualifier.java,configuration qualifier,public string value )  {  this . value = value;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\qualifiers\ConfigurationQualifier.java,value,override public  string   (  )  {  return value;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\qualifiers\EndpointQualifier.java,endpoint qualifier,public
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\qualifiers\EndpointQualifier.java,value,override public boolean   (  )  {  return value;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\qualifiers\PortQualifier.java,port qualifier,public string name )  {  this . name = name;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\qualifiers\PortQualifier.java,value,override public  string   (  )  {  return name;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\qualifiers\ExternalQualifier.java,external qualifier,public
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\qualifiers\ExternalQualifier.java,value,override public boolean   (  )  {  return value;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\qualifiers\ProtocolQualifier.java,protocol qualifier,public string id )  {  this . id = id;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\qualifiers\ProtocolQualifier.java,value,override public  string   (  )  {  return id;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\qualifiers\PathQualifier.java,path qualifier,public string id )  {  this . id = id;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\qualifiers\PathQualifier.java,value,override public  string   (  )  {  return id;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\qualifiers\Qualifiers.java,create,"public annotation[]   (  string service id  string protocol  string port  string path  boolean endpoint  boolean external )  {  if  ( service id  =  =  null )   {  throw new  illegal argument exception ( "" service  id cannot be null . "" ) ;  }   list <  annotation >  qualifiers = new  array list <  >  (  ) ; qualifiers . add ( new  service name qualifier ( service id )  ) ; if  (  !  strings . is null or blank ( protocol )  )   {  qualifiers . add ( new  protocol qualifier ( protocol )  ) ;  }  else  {  qualifiers . add ( new  protocol qualifier ( """" )  ) ;  }  if  (  !  strings . is null or blank ( port )  )   {  qualifiers . add ( new  port qualifier ( port )  ) ;  }  else  {  qualifiers . add ( new  port qualifier ( """" )  ) ;  }  if  (  !  strings . is null or blank ( path )  )   {  qualifiers . add ( new  path qualifier ( path )  ) ;  }  else  {  qualifiers . add ( new  path qualifier ( """" )  ) ;  }  qualifiers . add ( new  endpoint qualifier ( endpoint )  ) ; qualifiers . add ( new  external qualifier ( external )  ) ; return qualifiers . to array ( new  annotation[qualifiers . size (  ) ] ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\qualifiers\ServiceNameQualifier.java,service name qualifier,public string id )  {  this . id = id;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\qualifiers\ServiceNameQualifier.java,value,override public  string   (  )  {  return id;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\Types.java,as class,public class   (  type type )  {  if  ( type instanceof  class )   {  return  (  (  class ) type ) ;  }  else if  ( type instanceof  parameterized type )   {  return as class (  (  (  parameterized type ) type )  . get raw type (  )  ) ;  }  else  {  return null;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\Types.java,generic type,public type   ( final  type raw final  type .  .  .  arguments )  {  return new  parameterized type (  )  {  @ override public  type[] get actual type arguments (  )  {  return arguments;  }  @ override public  type get raw type (  )  {  return raw;  }  @ override public  type get owner type (  )  {  return null;  }   }  ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\Types.java,get actual type arguments,override public  type[]   (  )  {  return arguments;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\Types.java,get owner type,override public  type   (  )  {  return null;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\Types.java,get raw type,override public  type   (  )  {  return raw;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\Types.java,super class of,public type   (  type type )  {  if  ( type instanceof  class )   {  return  (  (  class ) type )  . get superclass (  ) ;  }  else if  ( type instanceof  parameterized type )   {  return super class of (  (  (  parameterized type ) type )  . get raw type (  )  ) ;  }  else  {  return null;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\Services.java,to service endpoint url,"public list <  string >    (  string service id  string service protocol  string service port )  {   list <  string >  endpoints = new  array list <  >  (  ) ;  kubernetes client client =  kubernetes holder . get client (  ) ;  string namespace = client . get namespace (  ) ;  string actual protocol = service protocol  !  =  null  ?  service protocol :  d e f a u l t _  p r o t o;  endpoints item =  kubernetes holder . get client (  )  . endpoints (  )  . in namespace ( namespace )  . with name ( service id )  . get (  ) ; if  ( item  !  =  null )   {  for  (   endpoint subset subset : item . get subsets (  )  )   {  for  (   endpoint address address : subset . get addresses (  )  )   {  for  (   endpoint port endpoint port : subset . get ports (  )  )   {  if  ( service port  =  =  null || service port . equals ( endpoint port . get name (  )  )  )   {  endpoints . add ( actual protocol  +  "": /  / ""  +  address . get ip (  )  +  "":"" +  endpoint port . get port (  )  ) ;  }   }   }   }   }  return endpoints;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\Services.java,to service url,public string   (  string service name  string service protocol  string service port name  string service path boolean service external )  {   kubernetes client client =  kubernetes holder . get client (  ) ;  string service namespace = client . get namespace (  ) ;  string actual protocol =  strings . is null or blank ( service protocol )   ?   d e f a u l t _  p r o t o : service protocol; return  u r l utils . path join (  kubernetes helper . get service u r l ( client service name service namespace actual protocol service port name service external )  service path ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\Utils.java,get factory method path,static string   (  method method )  {  for  (   annotation[] annotations : method . get parameter annotations (  )  )   {   boolean has service name = false;  string path = null; for  (   annotation annotation : annotations )   {  if  ( annotation . annotation type (  )  . equals (  service name . class )  )   {  has service name = true;  }  else if  ( annotation . annotation type (  )  . equals (  path . class )  )   {  path = read annotation value ( annotation . to string (  )  ) ;  }  if  ( has service name && path  !  =  null )   {  return path;  }   }   }  return null;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\Utils.java,get factory method port,static string   (  method method )  {  for  (   annotation[] annotations : method . get parameter annotations (  )  )   {   boolean has service name = false;  string port = null; for  (   annotation annotation : annotations )   {  if  ( annotation . annotation type (  )  . equals (  service name . class )  )   {  has service name = true;  }  else if  ( annotation . annotation type (  )  . equals (  port name . class )  )   {  port = read annotation value ( annotation . to string (  )  ) ;  }  if  ( has service name && port  !  =  null )   {  return port;  }   }   }  return null;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\Utils.java,get factory method protocol,static string   (  method method )  {  for  (   annotation[] annotations : method . get parameter annotations (  )  )   {   boolean has service name = false;  string protocol = null; for  (   annotation annotation : annotations )   {  if  ( annotation . annotation type (  )  . equals (  service name . class )  )   {  has service name = true;  }  else if  ( annotation . annotation type (  )  . equals (  protocol . class )  )   {  protocol = read annotation value ( annotation . to string (  )  ) ;  }  if  ( has service name && protocol  !  =  null )   {  return protocol;  }   }   }  return null;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\Utils.java,or,public string   (  string .  .  .  candidates )  {  for  (   string candidate : candidates )   {  if  (  strings . is not blank ( candidate )  )   {  return candidate;  }   }  return null;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\Utils.java,read annotation value,"static string   (  string annotation )  {   string result = annotation; try  {  result = result . substring ( result . index of ( ""value = "" )   +  6 ) ; result = result . substring ( 0 result . last index of ( "" ) "" )  ) ;  }  catch  (   exception e )   {  return null;  }  return result;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\Utils.java,to alias,"public string   (  string service name  string service protocol  string service port  string service path  boolean endpoint  boolean external  string suffix )  {   string builder sb = new  string builder (  ) ; if  ( external )   {  sb . append ( ""external"" ) ;  }  else  {  sb . append ( ""internal"" ) ;  }  sb . append ( "" - "" ) ; if  ( endpoint )   {  sb . append ( ""endpoint"" ) ;  }  else  {  sb . append ( ""service"" ) ;  }  sb . append ( "" - "" )  . append ( service name ) ; if  (  strings . is not blank ( service protocol )  )   {  sb . append ( "" - "" )  . append ( service protocol ) ;  }  else  {  sb . append ( "" - "" )  . append ( ""tcp"" ) ;  }  if  (  strings . is not blank ( service port )  )   {  sb . append ( "" - "" )  . append ( service protocol ) ;  }  else  {  sb . append ( "" - "" )  . append ( ""single"" ) ;  }  if  (  strings . is not blank ( service path )  )   {  sb . append ( "" - "" )  . append ( service path ) ;  }  else  {  sb . append ( "" - "" )  . append ( ""root"" ) ;  }  sb . append ( "" - "" )  . append ( suffix ) ; return sb . to string (  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\deltaspike\DeltaspikeTestBase.java,create deployment,"deployment public static  web archive   (  )  {  return  shrink wrap . create (  web archive . class )  . add as web inf resource (  empty asset .  i n s t a n c e  archive paths . create ( ""beans . xml"" )  )  . add as libraries (  maven . resolver (  )  . load pom from file ( ""pom . xml"" )  . resolve ( ""org . apache . deltaspike . core:d"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\deltaspike\DeltaspikeTestBase.java,get delta spike holders,public class[]   (  )  {  return new  class <  ?  > [] {  window context producer . class  window context quota handler cache . class  default window context quota handler . class  window context quota handler . class  window bean holder . class  window id holder . class  conversation bean holder . class  view access bean holder . class  view access bean access history . class  view access view history . class } ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\MockConfigurer.java,configure,"public m o c k . expect (  )  . get (  )  . with path ( "" / api / v1 / namespaces / cdi / services / service1"" )  . and return ( 200 new  service builder (  )  . with new metadata (  )  . with name ( ""service1"" )  . end metadata (  )  . with new spec (  )  . add new port (  )  . with protocol ( "" t c p"" )  . with port ( 80 )  . with new target port ( 9090 )  . end port (  )  . with cluster i p ( ""172 . 30 . 17 . 2"" )  . end spec (  )  . build (  )  )  . always (  ) ;  m o c k . expect (  )  . get (  )  . with path ( "" / api / v1 / namespaces / cdi / services / service2"" )  . and return ( 200 new  service builder (  )  . with new metadata (  )  . with name ( ""service2"" )  . end metadata (  )  . with new spec (  )  . add new port (  )  . with protocol ( "" t c p"" )  . with port ( 80 )  . with new target port ( 8080 )  . end port (  )  . with cluster i p ( ""172 . 30 . 17 . 2"" )  . end spec (  )  . build (  )  )  . always (  ) ;  m o c k . expect (  )  . get (  )  . with path ( "" / api / v1 / namespaces / cdi / services / service3"" )  . and return ( 200 new  service builder (  )  . with new metadata (  )  . with name ( ""service3"" )  . end metadata (  )  . with new spec (  )  . add new port (  )  . with protocol ( "" t c p"" )  . with port ( 443 )  . with new target port ( 443 )  . end port (  )  . with cluster i p ( ""172 . 30 . 17 . 2"" )  . end spec (  )  . build (  )  )  . always (  ) ;  m o c k . expect (  )  . get (  )  . with path ( "" / api / v1 / namespaces / cdi / services / multiport"" )  . and return ( 200 new  service builder (  )  . with new metadata (  )  . with name ( ""multiport"" )  . end metadata (  )  . with new spec (  )  . add new port (  )  . with name ( ""port1"" )  . with protocol ( "" t c p"" )  . with port ( 8081 )  . with new target port ( 8081 )  . end port (  )  . add new port (  )  . with name ( ""port2"" )  . with protocol ( "" t c p"" )  . with port ( 8082 )  . with new target port ( 8082 )  . end port (  )  . add new port (  )  . with name ( ""port3"" )  . with protocol ( "" t c p"" )  . with port ( 8083 )  . with new target port ( 8083 )  . end port (  )  . with cluster i p ( ""172 . 30 . 17 . 2"" )  . end spec (  )  . build (  )  )  . always (  ) ;  endpoints service1 endpoints = new  endpoints builder (  )  . with new metadata (  )  . with name ( ""service1"" )  . with namespace ( ""default"" )  . end metadata (  )  . add new subset (  )  . add new port (  )  . with name ( ""port"" )  . with port ( 8080 )  . end port (  )  . add new address (  )  . with ip ( ""10 . 0 . 0 . 1"" )  . end address (  )  . end subset (  )  . add new subset (  )  . add new port (  )  . with name ( ""port"" )  . with port ( 8080 )  . end port (  )  . add new address (  )  . with ip ( ""10 . 0 . 0 . 2"" )  . end address (  )  . end subset (  )  . build (  ) ;  endpoints service2 endpoints a = new  endpoints builder (  )  . with new metadata (  )  . with name ( ""service2"" )  . with namespace ( ""default"" )  . end metadata (  )  . add new subset (  )  . add new port (  )  . with name ( ""port"" )  . with port ( 8080 )  . end port (  )  . add new address (  )  . with ip ( ""10 . 0 . 0 . 1"" )  . end address (  )  . end subset (  )  . add new subset (  )  . add new port (  )  . with name ( ""port"" )  . with port ( 8080 )  . end port (  )  . add new address (  )  . with ip ( ""10 . 0 . 0 . 2"" )  . end address (  )  . end subset (  )  . build (  ) ;  endpoints service2 endpoints b = new  endpoints builder (  )  . with new metadata (  )  . with name ( ""service2"" )  . with namespace ( ""default"" )  . end metadata (  )  . add new subset (  )  . add new port (  )  . with name ( ""port"" )  . with port ( 8080 )  . end port (  )  . add new address (  )  . with ip ( ""10 . 0 . 0 . 1"" )  . end address (  )  . end subset (  )  . build (  ) ;  endpoints multi port endpoint = new  endpoints builder (  )  . with new metadata (  )  . with name ( ""multiport"" )  . with namespace ( ""default"" )  . end metadata (  )  . add new subset (  )  . add new address (  )  . with ip ( ""172 . 30 . 17 . 2"" )  . end address (  )  . add new port ( ""port1"" 8081 "" t c p"" )  . add new port ( ""port2"" 8082 "" t c p"" )  . add new port ( ""port3"" 8083 "" t c p"" )  . end subset (  )  . build (  ) ;  m o c k . expect (  )  . with path ( "" / api / v1 / namespaces / cdi / endpoints / service1"" )  . and return ( 200 service1 endpoints )  . always (  ) ;  m o c k . expect (  )  . with path ( "" / api / v1 / namespaces / cdi / endpoints / service2"" )  . and return ( 200 service2 endpoints a )  . once (  ) ;  m o c k . expect (  )  . with path ( "" / api / v1 / namespaces / cdi / endpoints / service2"" )  . and return ( 200 service2 endpoints b )  . always (  ) ;  m o c k . expect (  )  . with path ( "" / api / v1 / namespaces / cdi / endpoints / multiport"" )  . and return ( 200 multi port endpoint )  . always (  ) ;  string master url =  m o c k . get server (  )  . url ( "" / "" )  . to string (  ) ;  system . set property (  config .  k u b e r n e t e s _  m a s t e r _  s y s t e m _  p r o p e r t y master url ) ;  system . set property (  config .  k u b e r n e t e s _  n a m e s p a c e _  s y s t e m _  p r o p e r t y ""cdi"" ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\ConfigBean.java,get property,public string   (  )  {  return property;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\external\ExtensionExternalTest.java,create deployment,deployment public static  web archive   (  )  {  return  shrink wrap . create (  web archive . class )  . add classes (  string to u r l . class  u r l to connection . class  nesting factory bean . class  simple bean . class  url bean . class )  . add classes (  deltaspike test base . get delta spike holders (  )  )  . add as web
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\external\ExtensionExternalTest.java,set up class,"before class public static void   (  )  throws  exception  {   system . set property ( "" c o n f i g1 _  t e s t"" ""value1"" ) ;  system . set property ( "" c o n f i g2 _  t e s t"" ""value2"" ) ;  system . set property ( "" s e r v i c e1 _  s o u r c e _  p r o t o c o l"" ""http"" ) ;  system . set property ( "" s e r v i c e1 _  t a r g e t _  p r o t o c o l"" ""https"" ) ;"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\external\ExtensionExternalTest.java,test alias,"test public void   (  )  {   set <  bean <  ?  >  >  beans =  c d i . current (  )  . get bean manager (  )  . get beans ( ""cool - id"" ) ;  assert . assert not null ( beans ) ;  assert . assert equals ( 1 beans . size (  )  ) ;  assert . assert equals (  u r l . class beans . iterator (  )  . next (  )  . get bean class (  )  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\external\ExtensionExternalTest.java,test client injection,test public void   (  )  {   assert . assert not null ( client ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\external\ExtensionExternalTest.java,test config injection,"test public void   (  )  {   assert . assert not null ( simple bean ) ;  assert . assert equals ( ""value1"" simple bean . get config1 (  )  . get property (  )  ) ;  assert . assert equals ( ""value2"" simple bean . get config2 (  )  . get property (  )  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\external\ExtensionExternalTest.java,test factory,"test public void   (  )  {   assert . assert not null ( url bean ) ;  assert . assert not null ( url bean . get service3 (  )  ) ;  assert . assert not null ( url bean . get service1 (  )  ) ;  assert . assert true ( url bean . get service1 (  )  . to string (  )  . starts with ( ""http"" )  ) ;  assert . assert true ( url bean . get service3 (  ) "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\external\ExtensionExternalTest.java,test multiport,"test public void   (  )  {   assert . assert not null ( simple bean ) ;  assert . assert true ( simple bean . get multiport default (  )  . ends with ( ""8081"" )  ) ;  assert . assert true ( simple bean . get multiport2 (  )  . ends with ( ""8082"" )  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\external\ExtensionExternalTest.java,test nesting factories,test public void   (  )  {   assert . assert not null ( nesting factory bean ) ;  assert . assert not null ( nesting factory bean . get service1 (  )  ) ;  assert . assert not null ( nesting factory bean . get service2 (  )  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\external\ExtensionExternalTest.java,test protocol,"test public void   (  )  {   assert . assert not null ( simple bean ) ;  assert . assert true ( simple bean . get url (  )  . starts with ( ""tcp: /  / "" )  ) ;  assert . assert true ( simple bean . get test url (  )  . starts with ( ""tst: /  / "" )  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\external\ExtensionExternalTest.java,test protocol overide,"test public void   (  )  {   assert . assert true ( simple bean . get test url (  )  . starts with ( ""tst"" )  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\external\ExtensionExternalTest.java,test service injection,test public void   (  )  {   assert . assert not null ( simple bean ) ;  assert . assert not null ( simple bean . get optional url (  )  ) ;  assert . assert not null ( simple bean . get url (  )  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\external\ExtensionExternalTest.java,test with path,"test public void   (  )  {   assert . assert true ( simple bean . get test url with path (  )  . ends with ( "" / some path"" )  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\internal\brokenfactory\BrokenFactoryInternalTest.java,create instance,void class type )  {   weld container weld = new  weld (  )  . disable discovery (  )  . extensions ( new  fabric8 extension (  )  )  . bean classes (  my factory . class  my bean . class )  . initialize (  ) ;  creational context ctx = weld . get bean manager (  )  . create creational context ( null ) ; for  (   bean bean : weld . get bean manager (  )  . get beans ( type )  )   {  weld . get bean manager (  )  . get reference ( bean type ctx ) ;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\internal\brokenfactory\BrokenFactoryInternalTest.java,set up class,before class public static void   (  )  {   mock configurer . configure (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\internal\brokenfactory\BrokenFactoryInternalTest.java,test service injection,"test public void   (  )  {  expected exception . expect (  throwable message matcher . has message (  core matchers . starts with ( "" failed to process @ factory annotated method"" )  )  ) ; create instance (  my bean . class ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\internal\brokenfactory\MyFactory.java,create,factory @ service name private  u r i   ( @ service name  string url  object o1  object o2 )  throws  u r i syntax exception  {  return new  u r i ( url ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\internal\endpoints\ServiceInstanceWithEndpoint.java,get service,public string   (  )  {  return service;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\internal\endpoints\EndpointsInternalTest.java,clean up,after class public static void   (  )  {  if  ( weld  !  =  null )   {  weld . shutdown (  ) ;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\internal\endpoints\EndpointsInternalTest.java,create instance,static t >  t   (  class <  t >  type )  {   creational context ctx = weld . get bean manager (  )  . create creational context ( null ) ; for  (   bean bean : weld . get bean manager (  )  . get beans ( type )  )   {  return  (  t ) weld . get bean manager (  )  . get reference ( bean type ctx ) ;  }  return null;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\internal\endpoints\EndpointsInternalTest.java,set up class,before class public static void   (  )  {   mock configurer . configure (  ) ; weld = new  weld (  )  . disable discovery (  )  . extensions ( new  fabric8 extension (  )  )  . bean classes (  random endpoint to url . class  service list instance with endpoint . class  service instance with endpoint . class  service lis
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\internal\endpoints\EndpointsInternalTest.java,test changing endpoints,"test public void   (  )  {   service list instance with endpoint2 obj = create instance (  service list instance with endpoint2 . class ) ;  list <  string >  endpoints = new  array list <  >  ( obj . get service (  )  . get (  )  ) ;  assert . assert true ( endpoints . contains ( ""tcp: /  / 10 . 0 . 0 . 1:8080"" )  ) ;  assert . assert"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\internal\endpoints\EndpointsInternalTest.java,test service instance with endpoint,"test public void   (  )  {   service instance with endpoint obj = create instance (  service instance with endpoint . class ) ;  assert . assert true ( obj . get service (  )  . equals ( ""tcp: /  / 10 . 0 . 0 . 1:8080"" )  || obj . get service (  )  . contains ( ""tcp: /  / 10 . 0 . 0 . 2:8080"" )  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\internal\endpoints\EndpointsInternalTest.java,test service instance with factory and multiple endpoints,test public void   (  )  {   service instance using factory and endpoints obj = create instance (  service instance using factory and endpoints . class ) ;  assert . assert not null ( obj . get service (  )  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\internal\endpoints\EndpointsInternalTest.java,test service instance with multi port endpoint,"test public void   (  )  {   service instance with multi port endpoint obj = create instance (  service instance with multi port endpoint . class ) ;  assert . assert equals ( ""http: /  / 172 . 30 . 17 . 2:8082"" obj . get service (  )  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\internal\endpoints\ServiceInstanceUsingFactoryAndEndpoints.java,get service,public u r l   (  )  {  return service;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\internal\endpoints\EndpointsInternalTest.java,test service list instance with endpoint,"test public void   (  )  {   service list instance with endpoint obj = create instance (  service list instance with endpoint . class ) ;  assert . assert equals ( 2 obj . get service (  )  . get (  )  . size (  )  ) ;  assert . assert true ( obj . get service (  )  . get (  )  . contains ( ""tcp: /  / 10 . 0 . 0 . 1:8080"" )  ) ;  assert . asser"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\internal\endpoints\EndpointsInternalTest.java,test service list without endpoint,"test public void   (  )  {   service list without endpoint obj = create instance (  service list without endpoint . class ) ;  assert . assert equals ( 2 obj . get service (  )  . size (  )  ) ;  assert . assert true ( obj . get service (  )  . contains ( ""tcp: /  / 10 . 0 . 0 . 1:8080"" )  ) ;  assert . assert true ( obj . get service (  ) "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\internal\endpoints\ServiceListWithoutEndpoint.java,get service,public list <  string >    (  )  {  return service;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\internal\endpoints\ServiceListInstanceWithEndpoint.java,get service,public instance <  list <  string >  >    (  )  {  return service;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\internal\endpoints\ServiceInstanceWithMultiPortEndpoint.java,get service,public string   (  )  {  return service;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\NestingFactoryBean.java,get service,public u r l connection   (  )  {  return service1;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\NestingFactoryBean.java,get service,public u r l connection   (  )  {  return service2;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\internal\endpoints\ServiceListInstanceWithEndpoint2.java,get service,public instance <  list <  string >  >    (  )  {  return service;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\internal\ExtensionInternalTest.java,create deployment,deployment public static  web archive   (  )  {  return  shrink wrap . create (  web archive . class )  . add classes (  string to u r l . class  u r l to connection . class  nesting factory bean . class  simple bean . class  url bean . class )  . add classes (  deltaspike test base . get delta spike holders (  )  )  . add as web
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\internal\ExtensionInternalTest.java,set up class,"before class public static void   (  )  throws  exception  {   system . set property ( "" c o n f i g1 _  t e s t"" ""value1"" ) ;  system . set property ( "" c o n f i g2 _  t e s t"" ""value2"" ) ;  system . set property ( "" s e r v i c e1 _  s o u r c e _  p r o t o c o l"" ""http"" ) ;  system . set property ( "" s e r v i c e1 _  t a r g e t _  p r o t o c o l"" ""https"" ) ;"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\internal\ExtensionInternalTest.java,test alias,"test public void   (  )  {   set <  bean <  ?  >  >  beans =  c d i . current (  )  . get bean manager (  )  . get beans ( ""cool - id"" ) ;  assert . assert not null ( beans ) ;  assert . assert equals ( 1 beans . size (  )  ) ;  assert . assert equals (  u r l . class beans . iterator (  )  . next (  )  . get bean class (  )  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\internal\ExtensionInternalTest.java,test client injection,test public void   (  )  {   assert . assert not null ( client ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\internal\ExtensionInternalTest.java,test config injection,"test public void   (  )  {   assert . assert not null ( simple bean ) ;  assert . assert equals ( ""value1"" simple bean . get config1 (  )  . get property (  )  ) ;  assert . assert equals ( ""value2"" simple bean . get config2 (  )  . get property (  )  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\internal\ExtensionInternalTest.java,test factory,"test public void   (  )  {   assert . assert not null ( url bean ) ;  assert . assert not null ( url bean . get service3 (  )  ) ;  assert . assert not null ( url bean . get service1 (  )  ) ;  assert . assert true ( url bean . get service1 (  )  . to string (  )  . starts with ( ""http"" )  ) ;  assert . assert true ( url bean . get service3 (  ) "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\internal\ExtensionInternalTest.java,test multiport,"test public void   (  )  {   assert . assert not null ( simple bean ) ;  assert . assert true ( simple bean . get multiport default (  )  . ends with ( ""8081"" )  ) ;  assert . assert true ( simple bean . get multiport2 (  )  . ends with ( ""8082"" )  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\internal\ExtensionInternalTest.java,test nesting factories,test public void   (  )  {   assert . assert not null ( nesting factory bean ) ;  assert . assert not null ( nesting factory bean . get service1 (  )  ) ;  assert . assert not null ( nesting factory bean . get service2 (  )  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\internal\ExtensionInternalTest.java,test protocol,"test public void   (  )  {   assert . assert not null ( simple bean ) ;  assert . assert true ( simple bean . get url (  )  . starts with ( ""tcp: /  / "" )  ) ;  assert . assert true ( simple bean . get test url (  )  . starts with ( ""tst: /  / "" )  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\internal\ExtensionInternalTest.java,test protocol overide,"test public void   (  )  {   assert . assert true ( simple bean . get test url (  )  . starts with ( ""tst"" )  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\internal\ExtensionInternalTest.java,test service injection,test public void   (  )  {   assert . assert not null ( simple bean ) ;  assert . assert not null ( simple bean . get optional url (  )  ) ;  assert . assert not null ( simple bean . get url (  )  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\SimpleBean.java,get config,public config bean   (  )  {  return config1;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\SimpleBean.java,get config,public config bean   (  )  {  return config2;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\SimpleBean.java,get multiport,public string   (  )  {  return multiport2;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\SimpleBean.java,get multiport default,public string   (  )  {  return multiport default;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\SimpleBean.java,get optional url,public string   (  )  {  return optional url . get (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\SimpleBean.java,get test url,public string   (  )  {  return test url;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\SimpleBean.java,get test url with path,public string   (  )  {  return test url with path;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\SimpleBean.java,get url,public string   (  )  {  return url;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\nonamespace\NoNamespaceTest.java,create instance,void class type )  {   weld container weld = new  weld (  )  . disable discovery (  )  . extensions ( new  fabric8 extension (  )  )  . bean classes (  my bean . class )  . initialize (  ) ;  creational context ctx = weld . get bean manager (  )  . create creational context ( null ) ; for  (   bean bean : weld . get bean manager (  )  . get beans ( type )  )   {  weld . get bean manager (  )  . get reference ( bean type ctx ) ;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\nonamespace\NoNamespaceTest.java,set up class,before class public static void   (  )  {   mock configurer . configure (  ) ;  system . clear property (  config .  k u b e r n e t e s _  n a m e s p a c e _  s y s t e m _  p r o p e r t y ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\nonamespace\NoNamespaceTest.java,test service injection,"test public void   (  )  {   kubernetes client client = new  default kubernetes client (  ) ;  string namespace = client . get namespace (  ) ;  assume . assume true (  strings . is null or blank ( namespace )  ) ; expected exception . expect (  throwable message matcher . has message (  core matchers . equal to ( "" no"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\ProtocolConfig.java,get source protocol,public string   (  )  {  return source protocol;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\ProtocolConfig.java,get target protocol,public string   (  )  {  return target protocol;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\URLToConnection.java,to url connection,factory @ service name public  u r l connection   ( @ service name  u r l service )  throws  i o exception  {  return service . open connection (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\UrlBean.java,get config,public config bean   (  )  {  return config1;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\UrlBean.java,get config,public config bean   (  )  {  return config2;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\UrlBean.java,get service,public u r l   (  )  {  return service1;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\UrlBean.java,get service,public u r l   (  )  {  return service3;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\UrlBean.java,set config,public config bean config1 )  {  this . config1 = config1;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\UrlBean.java,set config,public config bean config2 )  {  this . config2 = config2;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\StringToURL.java,to url,"factory @ service name public  u r l   ( @ protocol ( ""http"" )  @ service name  string service @ configuration  protocol config protocol config )  throws  malformed u r l exception  {  return new  u r l ( service ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\WeldJUnitRunner.java,weld j unit runner,public class <  object >  klass )  throws  initialization error  {  super ( klass ) ; this . klass = klass; this . weld = new  weld (  ) ; this . container = weld . initialize (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\WeldJUnitRunner.java,create test,override protected  object   (  )  throws  exception  {  return container . instance (  )  . select ( klass )  . get (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\BeanValidationAnnotationIntrospector.java,bean validation annotation introspector,public type factory type factory )  {  this . type factory =  ( type factory  =  =  null )   ?   type factory . default instance (  )  : type factory;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\BeanValidationAnnotationIntrospector.java,find field,protected field   (  string field name  class <  ?  >  declaring class )  {  try  {  return declaring class . get declared field ( field name ) ;  }  catch  (   no such field exception e )   {   class <  ?  >  superclass = declaring class . get superclass (  ) ; if  ( superclass  !  =  null && superclass  !  =  declaring class )   {  return find field ( field name superclass ) ;  }  else  {  return null;  }   }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\BeanValidationAnnotationIntrospector.java,has ignore marker,"override public boolean   (  annotated member m )  {   member member = m . get member (  ) ; int modifiers = member . get modifiers (  ) ; if  (  modifier . is transient ( modifiers )  )   {  if  (  l o g . is loggable (  level .  f i n e )  )   {   l o g . fine ( "" ignoring transient member ""  +  m ) ;  }  return true;  }  else if "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\BeanValidationAnnotationIntrospector.java,has required marker,override public  boolean   (  annotated member m )  {   not null annotation = m . get annotation (  not null . class ) ; if  ( annotation  =  =  null )   {  return null;  }  return  boolean .  t r u e;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\BeanValidationAnnotationIntrospector.java,version,"override public  version   (  )  {  return new  version ( 1 1 0 """" ""cxf"" ""json - schema - mbean"" ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\BeanValidationAnnotationModule.java,bean validation annotation module,public
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\BeanValidationAnnotationModule.java,setup module,override public void   (  setup context context )  {   bean validation annotation introspector introspector = new  bean validation annotation introspector ( context . get type factory (  )  ) ; context . insert annotation introspector ( introspector ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\EnableJMXFeature.java,initialize,override public void   (  bus bus )  {   list <  server >  servers = new  array list <  server >  (  ) ;  server registry server registry = bus . get extension (  server registry . class ) ; servers . add all ( server registry . get servers (  )  ) ; for  (  iterator <  server >  iter = servers . iterator (  ) ; iter . has next ( 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\EnableJMXFeature.java,initialize provider,override protected void   (  interceptor provider provider  bus bus )  {  if  ( provider instanceof  endpoint )   {   endpoint impl endpoint impl =  (  endpoint impl ) provider;  list <  feature >  features = endpoint impl . get active features (  ) ; if  ( features  =  =  null )   {  features = new  array list
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\FourSpacePrettyPrinter.java,four space pretty printer,public indenter =  lf4 spaces indenter .  i n s t a n c e;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\FourSpacePrettyPrinter.java,is inline,override public boolean   (  )  {  return false;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\FourSpacePrettyPrinter.java,write indentation,override public void   (  json generator jg int level )  throws  i o exception   json generation exception  {  jg . write raw (  s y s _  l f ) ; if  ( level  >  0 )   {  level = level * 4; while  ( level  >  spacecount )   {  jg . write raw ( spaces 0 spacecount ) ; level -  = spaces . length;  }  jg . write raw ( spa
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\IgnorePropertiesBackedByTransientFields.java,ignore properties backed by transient fields,public visibility checker <  ?  >  default checker )  {  this . default checker = default checker;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\IgnorePropertiesBackedByTransientFields.java,cast to properties backed by transient fields,"protected ignore properties backed by transient fields   (  object value )  {  if  ( value instanceof  ignore properties backed by transient fields )   {  return  (  ignore properties backed by transient fields ) value;  }  else  {  if  ( value  !  =  null )   {  if  ( value instanceof  visibility checker <  ?  >  )   {  return new  ignore properties backed by transient fields (  (  visibility checker <  ?  >  ) value ) ;  }   l o g . warning ( "" could not convert value to ""  +  "" ignore properties backed by transient fields as was ""  +  value . get class (  )  . get name (  )   +  "" "" +  value ) ;  }  return null;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\IgnorePropertiesBackedByTransientFields.java,find field,protected field   (  string field name  class <  ?  >  declaring class )  {  try  {  return declaring class . get declared field ( field name ) ;  }  catch  (   no such field exception e )   {   class <  ?  >  superclass = declaring class . get superclass (  ) ; if  ( superclass  !  =  null && superclass  !  =  declaring class )   {  return find field ( field name superclass ) ;  }  else  {  return null;  }   }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\IgnorePropertiesBackedByTransientFields.java,get getter field name,protected string   (  string method name )  {  return  introspector . decapitalize ( method name . substring ( 3 )  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\IgnorePropertiesBackedByTransientFields.java,get is getter field name,protected string   (  string method name )  {  return  introspector . decapitalize ( method name . substring ( 2 )  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\IgnorePropertiesBackedByTransientFields.java,is creator visible,override public boolean   (  member m )  {  return default checker . is creator visible ( m ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\IgnorePropertiesBackedByTransientFields.java,is field visible,override public boolean   (  field f )  {  return default checker . is field visible ( f ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\IgnorePropertiesBackedByTransientFields.java,is getter method ret itself visible,"protected method method  class <  ?  >  declaring class )  {  if  ( method  !  =  null && method . get return type (  )  . get name (  )  . equals ( declaring class . get name (  )  )  )   {  if  (  l o g . is loggable (  level .  f i n e )  )   {   l o g . fine ( "" ignoring getter ""  +  method  +  "" due to return same type as declaring class itself"" ) ;  }  return false;  }  return true;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\IgnorePropertiesBackedByTransientFields.java,is getter method with field visible,"protected object method  string field name  class <  ?  >  declaring class )  {   field field = find field ( field name declaring class ) ; if  ( field  !  =  null )   {  int field modifiers = field . get modifiers (  ) ; if  (  modifier . is transient ( field modifiers )  )   {  if  (  l o g . is loggable (  level .  f i n e )  )   {   l o g . fine ( "" ignoring getter ""  +  method  +  "" due to transient field called "" +  field name ) ;  }  return false;  }   }  return true;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\IgnorePropertiesBackedByTransientFields.java,is getter visible,override public boolean   (  method method )  {  boolean answer = default checker . is getter visible ( method ) ; if  ( answer )   {  answer = is getter method with field visible ( method get getter field name ( method . get name (  )  )  method . get declaring class (  )  )  && is getter method ret itself visible
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\IgnorePropertiesBackedByTransientFields.java,is is getter visible,override public boolean   (  method method )  {  boolean answer = default checker . is is getter visible ( method ) ; if  ( answer )   {  answer = is getter method with field visible ( method get is getter field name ( method . get name (  )  )  method . get declaring class (  )  )  && is getter method ret itself vis
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\IgnorePropertiesBackedByTransientFields.java,is setter visible,override public boolean   (  method m )  {  return default checker . is setter visible ( m ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\IgnorePropertiesBackedByTransientFields.java,with,override public  ignore properties backed by transient fields   (  json auto detect .  visibility v )  {  return cast to properties backed by transient fields ( default checker . with ( v )  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\IgnorePropertiesBackedByTransientFields.java,with creator visibility,override public  ignore properties backed by transient fields   (  json auto detect .  visibility v )  {  return cast to properties backed by transient fields ( default checker . with creator visibility ( v )  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\IgnorePropertiesBackedByTransientFields.java,with field visibility,override public  ignore properties backed by transient fields   (  json auto detect .  visibility v )  {  return cast to properties backed by transient fields ( default checker . with field visibility ( v )  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\IgnorePropertiesBackedByTransientFields.java,with getter visibility,override public  ignore properties backed by transient fields   (  json auto detect .  visibility v )  {  return cast to properties backed by transient fields ( default checker . with getter visibility ( v )  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\IgnorePropertiesBackedByTransientFields.java,with is getter visibility,override public  ignore properties backed by transient fields   (  json auto detect .  visibility v )  {  return cast to properties backed by transient fields ( default checker . with is getter visibility ( v )  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\IgnorePropertiesBackedByTransientFields.java,with setter visibility,override public  ignore properties backed by transient fields   (  json auto detect .  visibility v )  {  return cast to properties backed by transient fields ( default checker . with setter visibility ( v )  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\IgnorePropertiesBackedByTransientFields.java,with visibility,override public  ignore properties backed by transient fields   (  property accessor method  json auto detect .  visibility v )  {  return cast to properties backed by transient fields ( default checker . with visibility ( method v )  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\JsonSchemaLookup.java,get mapper,public object mapper   (  )  {  return mapper;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\JsonSchemaLookup.java,get schema for class,"public string   (  class <  ?  >  clazz )  {   l o g . info ( "" looking up schema for ""  +  clazz . get canonical name (  )  ) ;  string name = clazz . get name (  ) ; try  {   object writer writer = mapper . writer (  )  . with ( new  four space pretty printer (  )  ) ;  json schema generator jsg = new  json schema generator ( mapper ) ;  json schema json schema = jsg . generate schema ( clazz ) ; return writer . write value as string ( json schema ) ;  }  catch  (   exception e )   {   l o g . log (  level .  f i n e s t "" failed to generate  j s o n schema for class ""  +  name e ) ; return """";  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\JsonSchemaLookup.java,get singleton,public json schema lookup   (  )  {  if  ( singleton  =  =  null )   {  new  json schema lookup (  )  . init (  ) ;  }  return singleton;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\ManagedApiFeature.java,handle event,override public void   (  event arg0  abstract service factory bean arg1  object .  .  .  arg2 )  {  if  ( arg0 . equals (  event .  s e r v e r _  c r e a t e d )  &&  ( arg2[0] instanceof  server )  )   {   server server =  (  server ) arg2[0]; initialize ( server bus ) ;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\ManagedApiFeature.java,initialize,override public void   ( final  bus bus )  {   factory bean listener manager factory bean listener manager = bus . get extension (  factory bean listener manager . class ) ; if  ( factory bean listener manager  =  =  null )   {  factory bean listener manager = new  factory bean listener manager ( bus ) ;  }  f
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\ManagedApiFeature.java,initialize provider,override protected void   (  interceptor provider provider final  bus bus )  {  if  ( provider instanceof  endpoint )   {   endpoint impl endpoint impl =  (  endpoint impl ) provider;  list <  feature >  features = endpoint impl . get active features (  ) ; if  ( features  =  =  null )   {  features = new  arr
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\JsonSchemaLookup.java,init,"public l o g . log (  level .  i n f o "" creating  json schema lookup instance"" ) ; try  {  if  ( mapper  =  =  null )   {  mapper = new  object mapper (  ) ; mapper . set visibility ( new  ignore properties backed by transient fields ( mapper . get visibility checker (  )  )  ) ;  jaxb annotation module module1 = new  jaxb annotation module (  ) ; mapper . register module ( module1 ) ;  bean validation annotation module module2 = new  bean validation annotation module (  ) ; mapper . register module ( module2 ) ;  }  singleton = this;  }  catch  (   exception e )   {   l o g . log (  level .  w a r n i n g "" exception during initialization: "" e ) ; throw new  runtime exception ( e ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\JsonSchemaLookup.java,set mapper,public object mapper mapper )  {  this . mapper = mapper;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\SwaggerFeature.java,handle event,override public void   (  event arg0  abstract service factory bean arg1  object .  .  .  arg2 )  {  if  ( arg0 . equals (  event .  s e r v e r _  c r e a t e d )  &&  ( arg2[0] instanceof  server )  )   {   server server =  (  server ) arg2[0]; if  ( server . get endpoint (  )  . get endpoint info (  )  . get binding (  )  . get binding id
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\SwaggerFeature.java,initialize provider,override protected void   (  interceptor provider provider final  bus bus )  {  if  (  !  ( provider instanceof  endpoint )  )   {   factory bean listener manager factory bean listener manager = bus . get extension (  factory bean listener manager . class ) ; if  ( factory bean listener manager  =  =  null
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\ManagedApi.java,managed api,public bus b  endpoint ep  server s )  {  bus = b; endpoint = ep; server = s;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\ManagedApi.java,find class,"private class <  ?  >    (  string cls name )  {  if  (  ! is w s d l (  )  )   {   set <  class <  ?  >  >  resource types = get r e s t resource types (  ) ; if  ( resource types  !  =  null )   {  try  {  for  (   class <  ?  >  cls : resource types )   {  if  ( cls . get name (  )  . ends with ( cls name )  )   {  return cls;  }   }   }  catch  (   throwable e )   {   l o g . log (  level .  w a r n i n g ""find class failed . "" e ) ;  }   }   }  else  {  for  (   service info service info : endpoint . get service (  )  . get service infos (  )  )   {  for  (   binding info binding info : service info . get bindings (  )  )   {  for  (   binding operation info boi : binding info . get operations (  )  )   {  if  ( boi . get input (  )   !  =  null && boi . get input (  )  . get message parts (  )   !  =  null )   {  for  (   message part info mpi : boi . get input (  )  . get message parts (  )  )   {   class <  ?  >  part class = mpi . get type class (  ) ; if  ( part class  !  =  null && part class . get name (  )  . ends with ( cls name )  )   {  return part class;  }   }   }  if  ( boi . get output (  )   !  =  null && boi . get output (  )  . get message parts (  )   !  =  null )   {  for  (   message part info mpi : boi . get output (  )  . get message parts (  )  )   {   class <  ?  >  part class = mpi . get type class (  ) ; if  ( part class  !  =  null && part class . get name (  )  . ends with ( cls name )  )   {  return part class;  }   }   }   }   }   }   }  return null;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\ManagedApi.java,get address,"managed attribute ( description = "" address  attribute"" currency time limit = 60 )  public  string   (  )  {  return endpoint . get endpoint info (  )  . get address (  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\ManagedApi.java,get begin indention with return,"private string   ( int n )  {  return "" { ""  +  get eol (  )   +  get indention ( n ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\ManagedApi.java,get begin indention with return for list,"private string   ( int n )  {  return ""[""  +  get eol (  )   +  get indention ( n ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\ManagedApi.java,get configuration admin,"private configuration admin   (  )  {  try  {  if  ( is in o s gi (  )  &&  ( configuration admin  =  =  null )  )   {   bundle context bundle context =  framework util . get bundle (  managed api . class )  . get bundle context (  ) ; if  ( bundle context  !  =  null )   {   service reference service reference = bundle context . get service reference (  configuration admin . class . get name (  )  ) ; if  ( service reference  !  =  null )   {  configuration admin =  (  configuration admin ) bundle context . get service ( service reference ) ;  }   }   }   }  catch  (   exception e )   {   l o g . log (  level .  w a r n i n g ""get configuration admin failed . "" e ) ;  }  return configuration admin;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\ManagedApi.java,get end indention with return,"private string   ( int n )  {  return get eol (  )   +  get indention ( n )   +  "" } "";  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\ManagedApi.java,get end indention with return for list,"private string   ( int n )  {  return get eol (  )   +  get indention ( n )   +  ""]"";  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\ManagedApi.java,get eol,"private string   (  )  {  if  ( eol  =  =  null )   {  return ""\n"";  }  else  {  return this . eol;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\ManagedApi.java,get indention,"private string   ( int n )  {   string ret = """"; for  ( int i = 0; i  <  n; i +  +  )   {  ret = ret  +   i n d e n t i o n;  }  return ret;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\ManagedApi.java,get j s o n schema,"managed operation ( description = ""get the  j s o n schema from a given endpoint"" currency time limit = 60 )  public  string   (  )  {   string ret = """"; if  (  ! is w s d l (  )  )   {   set <  class <  ?  >  >  resource types = get r e s t resource types (  ) ; if  ( resource types  !  =  null )   {  try  {  ret = ret  +  get begin ind"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\ManagedApi.java,get j s o n schema for class,"managed operation ( description = ""get the  j s o n schema from a given class"" currency time limit = 60 )  public  string   (  string cls name )  {   string ret = """"; if  (  ! is w s d l (  )  )   {   set <  class <  ?  >  >  resource types = get r e s t resource types (  ) ; if  ( resource types  !  =  null )   {  try  {  ret = ret  +  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\ManagedApi.java,get j s o n schema for operation,"managed operation ( description = ""get the  j s o n schema from a given soap endpoint for a given operation"" currency time limit = 60 )  public  string   (  string operation name )  {  if  (  ! is w s d l (  )  )   {  return null;  }   string ret = """"; for  (   service info service info : endpoint . get se"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\ManagedApi.java,get object name,"public object name   (  )  throws  j m exception  {   string bus id = bus . get id (  ) ;  string builder buffer = new  string builder (  ) ; buffer . append (  d o m a i n _  n a m e )  . append ( ':' ) ; buffer . append (  management constants .  b u s _  i d _  p r o p )  . append ( ' = ' )  . append ( bus id )  . append ( ' ' ) ; buffer . append (  management constants .  t y p e _  p r o p )  . append ( ' = ' )  . append ( "" bus .  service .  endpoint "" ) ;  string service name =  (  string ) endpoint . get (  s e r v i c e _  n a m e ) ; if  (  string utils . is empty ( service name )  )   {  service name = endpoint . get service (  )  . get name (  )  . to string (  ) ;  }  service name =  object name . quote ( service name ) ; buffer . append (  management constants .  s e r v i c e _  n a m e _  p r o p )  . append ( ' = ' )  . append ( service name )  . append ( ' ' ) ;  string endpoint name =  (  string ) endpoint . get (  e n d p o i n t _  n a m e ) ; if  (  string utils . is empty ( endpoint name )  )   {  endpoint name = endpoint . get endpoint info (  )  . get name (  )  . get local part (  ) ;  }  endpoint name =  object name . quote ( endpoint name ) ; buffer . append (  management constants .  p o r t _  n a m e _  p r o p )  . append ( ' = ' )  . append ( endpoint name )  . append ( ' ' ) ; buffer . append (  management constants .  i n s t a n c e _  i d _  p r o p )  . append ( ' = ' )  . append ( endpoint . hash code (  )  ) ; return new  object name ( buffer . to string (  )  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\ManagedApi.java,get package name by name space u r i,"managed operation ( description = ""get the package name for a given namespace  u r i"" currency time limit = 60 )  public  string   (  string name space u r i )  {  return  package utils . get package name by name space u r i ( name space u r i ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\ManagedApi.java,get r e s t resource types,private set <  class <  ?  >  >    (  )  {   j a x r s service factory bean service factory =  (  j a x r s service factory bean ) endpoint . get (  j a x r s service factory bean . class . get name (  )  ) ;  list <  class resource info >  list = service factory . get class resource info (  ) ; return  resource utils . get all request response types ( list false )  . get all types (  )  . key set (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\ManagedApi.java,get servlet context,"managed attribute ( description = "" the cxf servlet context"" currency time limit = 60 )  public  string   (  )  {  if  (  ! is in o s gi (  )  )   {   l o g . log (  level .  f i n e "" not  in  o s gi . "" ) ; return get singleton cxf servlet context (  ) ;  }   string ret = "" / cxf""; if  ( get configuration admin (  )   !  =  null )   {  try"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\ManagedApi.java,get singleton cxf servlet context,"public string   (  )  {  if  ( singleton cxf servlet context  =  =  null )   {  singleton cxf servlet context =  system . getenv ( "" c x f _  s e r v l e t _  c o n t e x t"" ) ; if  ( singleton cxf servlet context  =  =  null )   {  singleton cxf servlet context =  system . get property ( "" c x f _  s e r v l e t _  c o n t e x t"" ) ; if  ( singleton cxf servlet context  =  =  null )   {  singleton cxf servlet context = "" / cxf"";  }   }   }  return singleton cxf servlet context;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\ManagedApi.java,get state,"managed attribute ( description = "" server  state"" )  public  string   (  )  {  return state . to string (  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\ManagedApi.java,is in o s gi,private framework util . get bundle (  managed api . class )   !  =  null )   {  return true;  }  return false;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\ManagedApi.java,is swagger,"managed attribute ( description = ""if the endpoint has swagger doc or not"" currency time limit = 60 )  public boolean   (  )  {  if  (  ! is w a d l (  )  )   {  return false;  }   list <  feature >  features = server . get endpoint (  )  . get active features (  ) ; if  ( features  !  =  null )   {  for  (   feature featur"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\ManagedApi.java,is w a d l,"managed attribute ( description = ""if the endpoint has  w a d l doc or not"" currency time limit = 60 )  public boolean   (  )  {  if  ( endpoint . get endpoint info (  )  . get binding (  )  . get binding id (  )  . equals ( ""http: /  / apache . org / cxf / binding / jaxrs"" )  )   {  return true;  }  return false;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\ManagedApi.java,is w s d l,"managed attribute ( description = ""if the endpoint has wsdl doc or not"" currency time limit = 60 )  public boolean   (  )  {  return  ! is w a d l (  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\ManagedApi.java,json to xml,"managed operation ( description = ""get xml payload from json payload"" currency time limit = 60 )  public  string   (  string json text  string pojo type )  {   object mapper object mapper = new  object mapper (  ) ;  string writer sw = new  string writer (  ) ; try  {   object pojo = object mapper . read"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\ManagedApi.java,reformat indent,"private string   (  string input int start indent )  {   string ret = """";  buffered reader reader = new  buffered reader ( new  string reader ( input )  ) ; try  {   string one line; while  (  ( one line = reader . read line (  )  )   !  =  null )   {  ret = ret  +  get indention ( start indent )   +  one line +  get eol (  ) ;  }   }  catch  (   i o exception e )   {   l o g . log (  level .  w a r n i n g ""reformat indent failed . "" e ) ;  }  return ret;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\ManagedApi.java,rollback colon,"private string   (  string input )  {   string ret = input; if  ( ret . ends with ( "" "" )  )   {  ret = ret . substring ( 0 ret . length (  )   -  1 ) ;  }  return ret;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\ManagedApi.java,rollback eol,private string   (  string input )  {   string ret = input; if  ( ret . ends with ( get eol (  )  )  )   {  ret = ret . substring ( 0 ret . length (  )   -  get eol (  )  . length (  )  ) ;  }  return ret;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\ManagedApi.java,set singleton cxf servlet context,public string singleton cxf servlet context )  {   managed api . singleton cxf servlet context = singleton cxf servlet context;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\ManagedApi.java,start server,public server s )  {  if  ( server . equals ( s )  )   {  state =  state .  s t a r t e d;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\ManagedApi.java,stop server,public server s )  {  if  ( server . equals ( s )  )   {  state =  state .  s t o p p e d;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\Book.java,book,public string name long id )  {  this . name = name; this . id = id;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\Book.java,clone state,p u t public void   (  book book )  {  id = book . get id (  ) ; name = book . get name (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\Book.java,get id,public
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\Book.java,get name,public string   (  )  {  return name;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\Book.java,retrieve state,g e t public  book   (  )  {  return this;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\Book.java,set id,public
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\Book.java,set name,public string n )  {  name = n;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\Book2.java,book,public string name long id )  {  this . name = name; this . id = id;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\Book2.java,get bookid,public
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\Book2.java,get bookname,public string   (  )  {  return name;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\Book2.java,get id,public
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\Book2.java,get name,public string   (  )  {  return name;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\Book2.java,init from context,"g e t @ path ( ""rc"" )  @ produces ( ""application / xml"" )  public  book2   (  )  {   multivalued map <  string  string >  params = uri info . get query parameters (  ) ; id =  long . value of ( params . get first ( ""bookid"" )  ) ; name = params . get first ( ""bookname"" ) ; return this;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\Book2.java,init from query bean,"g e t @ path ( ""rc / bean"" )  @ produces ( ""application / xml"" )  public  book2   ( @ bean param  query bean bean )  {  id = bean . get bookid (  ) ; name = bean . get bookname (  ) ; return this;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\Book2.java,init from query bean,"g e t @ path ( ""rc / bean2"" )  @ produces ( ""application / xml"" )  public  book2   (  )  {  id = query bean . get bookid (  ) ; name = query bean . get bookname (  ) ; return this;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\Book2.java,set bookid,"query param ( ""bookid"" )  public void   ( long i )  {  this . id = i;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\Book2.java,set bookname,"query param ( ""bookname"" )  public void   (  string bookname )  {  this . name = bookname;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\Book2.java,set id,public
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\Book2.java,set name,public string n )  {  name = n;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\Books.java,books,public book b )  {  books . add ( b ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\Books.java,get book,public book   (  )  {  return books . size (  )   =  =  0  ?  null : books . get ( 0 ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStoreSpring.java,book store spring,public
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStoreSpring.java,convert book,"p o s t @ path ( ""books / convert"" )  @ consumes (  { ""application / xml"" ""application / json"" ""application / vnd . example - com . foo + json"" }  )  @ produces (  { ""application / xml"" ""application / vnd . example - com . foo + json"" }  )  public  book   (  book2 book )  {   book b = new  book (  ) ; b . set id ( book . get id (  )  ) "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStoreSpring.java,convert book,"p u t @ path ( ""books / convert2 /  { id } "" )  @ consumes (  { ""application / xml"" ""application / json"" ""application / jettison"" }  )  @ produces ( ""application / xml"" )  public  book   (  book2 book )  {  return convert book ( book ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStoreSpring.java,echo book,"p o s t @ path ( ""depth"" )  @ produces (  { ""application / xml"" ""application / json"" }  )  @ consumes (  { ""application / xml"" ""application / json"" }  )  public  book   (  book book )  {  return book;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStoreSpring.java,get book aegis,"g e t @ path ( ""books / aegis"" )  @ produces (  { ""application / html;q = 1 . 0"" ""application / xml;q = 0 . 5"" ""application / json;q = 0 . 5"" }  )  public  book   (  )  {   book b = new  book (  ) ; b . set id ( 124 ) ; b . set name ( "" c x f in  action  -  2"" ) ; return b;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStoreSpring.java,get book as json list,"g e t @ path ( "" / books / list /  { id } "" )  public  books   ( @ path param ( ""id"" )   long id )  {  return new  books ( books . get ( id )  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStoreSpring.java,get book by encoded id,"g e t @ path ( ""id =  { id } "" )  public  book   ( @ path param ( ""id"" )   string id )  {   string[] values = id . split ( ""\\ + "" ) ;  string builder b = new  string builder (  ) ; b . append ( values[0] )  . append ( values[1] ) ; return books . get (  long . value of ( b . to string (  )  )  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStoreSpring.java,get book by id,"g e t @ path ( "" / books /  { id } "" )  @ produces (  { ""application / json"" ""application / vnd . example - com . foo + json"" }  )  public  book   ( @ path param ( ""id"" )   long id )  {  return books . get ( id ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStoreSpring.java,get book by query,"g e t @ path ( "" / booksquery"" )  public  book   ( @ query param ( ""id"" )   string id )  {  if  (  ! post construct called )   {  throw new  runtime exception (  ) ;  }   string[] values = id . split ( ""\\ + "" ) ;  string builder b = new  string builder (  ) ; b . append ( values[0] )  . append ( values[1] ) ; return books . get"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStoreSpring.java,get book by uri info,"g e t @ path ( "" / bookinfo"" )  public  book   (  )  throws  exception  {   multivalued map <  string  string >  params = ui . get query parameters (  ) ;  string id = params . get first ( ""param1"" )   +  params . get first ( ""param2"" ) ; return books . get (  long . value of ( id )  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStoreSpring.java,get book web ex,"g e t @ path ( "" / books / webex"" )  public  books   (  )  {  throw new  web application exception ( new  runtime exception ( "" book web exception"" )  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStoreSpring.java,get book web ex,"g e t @ path ( "" / books / webex2"" )  public  books   (  )  {  throw new  internal server error exception ( new  runtime exception ( "" book web exception"" )  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStoreSpring.java,get book with semicoln,"g e t @ path ( "" / semicolon { id } "" )  @ produces ( ""application / xml"" )  public  book   ( @ path param ( ""id"" )   string name )  {  return new  book ( name 333 l ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStoreSpring.java,get book with semicoln and matrix param,"g e t @ path ( "" / semicolon2 { id } "" )  @ produces ( ""application / xml"" )  public  book   ( @ path param ( ""id"" )   string name @ matrix param ( ""a"" )   string matrix param )  {  return new  book ( name  +  matrix param 333 l ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStoreSpring.java,get book x s l t,"g e t @ path ( ""books / xslt /  { id } "" )  @ produces (  { ""text / html"" ""application / xhtml + xml"" ""application / xml"" }  )  public  book   ( @ path param ( ""id"" )  long id @ query param ( ""name"" )   string name @ matrix param ( ""name2"" )   string name2 )  {   book b = new  book (  ) ; b . set id ( 999 ) ; b . set name ( "" c x f in"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStoreSpring.java,get book xml,"g e t @ path ( "" / bookstore / books /  { id } "" )  @ produces ( ""application / xml"" )  public  book   ( @ path param ( ""id"" )   long id )  {  return books . get ( id ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStoreSpring.java,get default book,g e t public  book   (  )  {  return books . get ( main id ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStoreSpring.java,init,"final book book = new  book (  ) ; book . set id ( main id ) ; book . set name ( "" c x f in  action"" ) ; books . put ( book . get id (  )  book ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStoreSpring.java,post construct,post construct public void   (  )  {  post construct called = true;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStoreSpring.java,post dom book,"p o s t @ path ( ""depth - dom"" )  @ consumes (  { ""application / xml"" }  )  public void   (  d o m source source )  {   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStoreSpring.java,post get book xsi type,"p o s t @ path ( "" / books / xsitype"" )  @ produces ( ""application / xml"" )  @ consumes ( ""application / xml"" )  public  book   (  book book )  {  return book;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStoreSpring.java,post source book,"p o s t @ path ( ""depth - source"" )  @ consumes (  { ""application / xml"" }  )  public void   (  source source )  {  try  {   stax utils . copy ( source new  byte array output stream (  )  ) ;  }  catch  (   depth exceeded stax exception ex )   {  throw new  web application exception ( 413 ) ;  }  catch  (   exception ex )   { "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\RestJsonSchemaJMXTest.java,connect to m bserver,private i o exception  {  jmx server u r l = jmx server u r l  =  =  null  ?   d e f a u l t _  j m x s e r v i c e _  u r l : jmx server u r l;  j m x service u r l url = new  j m x service u r l ( jmx server u r l ) ;  j m x connector jmxc =  j m x connector factory . connect ( url null ) ; mbsc = jmxc . get m bean server connection (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\RestJsonSchemaJMXTest.java,get endpoint object name,"private object name   (  )  throws  malformed object name exception   null pointer exception  {   string builder buffer = new  string builder (  ) ;  string service name = "" { http: /  / jaxrs . endpoint . cxf . fabric8 . io /  }  book store"";  string port name = "" book store""; buffer . append (  managed api .  d o m a i n _  n a m e  +  "":type =  bus .  service .  endpoint "" ) ; buffer . append (  management constants .  s e r v i c e _  n a m e _  p r o p  +  "" = \""""  +  service name +  ""\"" "" ) ; buffer . append (  management constants .  p o r t _  n a m e _  p r o p  +  "" = \""""  +  port name +  ""\"" *"" ) ; return new  object name ( buffer . to string (  )  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\RestJsonSchemaJMXTest.java,invoke endpoint,"private string   (  string operation  string operation para )  throws  exception  {   object name endpoint name = null;  object name query endpoint name;  string ret = """";  object[] jmx para = null;  string[] jmx sig = null; if  ( operation para  !  =  null )   {  jmx para = new  object[] { operation para } ; jmx sig = new  string[] {  string . class . get name (  )  } ;  }  else  {  jmx para = new  object[0]; jmx sig = new  string[0];  }  query endpoint name = get endpoint object name (  ) ;  set <  object name >  endpoint names =  cast utils . cast ( mbsc . query names ( query endpoint name null )  ) ;  iterator <  object name >  it = endpoint names . iterator (  ) ; if  ( it . has next (  )  )   {  endpoint name = it . next (  ) ; ret =  (  string ) mbsc . invoke ( endpoint name operation jmx para jmx sig ) ;  l o g . info ( ""invoke endpoint ""  +  endpoint name  +  "" operation "" +  operation +  "" succeed ! "" ) ;  }  return ret;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\RestJsonSchemaJMXTest.java,parse json,private string json )  throws  exception  {   json parser parser = new  json factory (  )  . create parser ( json ) ; while  ( parser . next token (  )   !  =  null )   {   }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\RestJsonSchemaJMXTest.java,set up,"before public void   (  )  {   spring bus factory bf = new  spring bus factory (  ) ;  bus bus = bf . create bus ( "" / io / fabric8 / cxf / endpoint / jaxrs / jmx - enable . xml"" ) ;  bus factory . set default bus ( bus ) ;  j a x r s server factory bean sf = new  j a x r s server factory bean (  ) ; sf . set resource classes (  book st"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\RestJsonSchemaJMXTest.java,tear down,after public void   (  )  {  if  ( local server  !  =  null )   {  local server . stop (  ) ;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\RestJsonSchemaJMXTest.java,test json schema,"test public void   (  )  throws  exception  {   string json = """"; try  {  connect to m bserver (  ) ; json = invoke endpoint ( ""get j s o n schema"" null ) ; parse json ( json ) ; json = invoke endpoint ( ""get j s o n schema for class"" ""io . fabric8 . cxf . endpoint . jaxrs .  book"" ) ; parse json ( json ) ;  }  catch  (   t"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,bad book,"public string s )  {  throw new  runtime exception ( "" the bad book"" ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,book info,public book b )  {  this . name = b . get name (  ) ; this . id = b . get id (  ) ; if  ( id  =  =  0 )   {  id = 124;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,book info,public book b )  {  super ( b ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,book not returned exception,public string error message )  {  super ( error message ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,streaming output impl,public early )  {  this . fail early = fail early;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,add binary book,"p o s t @ path ( "" / binarybooks"" )  @ produces ( ""text / xml"" )  @ consumes ( ""application / octet - stream"" )  public  response   ( long[] book )  {  return  response . ok ( book )  . build (  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,add book,"p o s t @ path ( "" / booksinfo"" )  @ produces ( ""text / xml"" )  @ consumes ( ""application / xml"" )  public  response   ( @ xml java type adapter (  book info adapter . class )   book info book info )  {  return  response . ok ( book info . as book (  )  )  . build (  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,add book,"p o s t @ path ( "" / books2"" )  @ produces ( ""text / xml"" )  @ consumes ( ""application / xml"" )  public  book   (  book book )  {  return new  book ( "" book echo"" book . get id (  )   +  1 ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,add book custom failure,"p o s t @ path ( "" / books / customstatus"" )  @ produces ( ""application / xml"" )  @ consumes ( ""text / xml"" )  public  book   (  book book @ context  http servlet response response )  {  response . set status ( 233 ) ; response . add header ( "" custom header"" "" custom value"" ) ; book . set id ( 888 ) ; return book; "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,as book,public book   (  )  {   book b = new  book (  ) ; b . set id ( id ) ; b . set name ( name ) ; return b;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,check book,"g e t @ path ( ""books / check /  { id } "" )  @ produces ( ""text / plain"" )  public boolean   ( @ path param ( ""id"" )   long id )  {  return books . contains key ( id ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,check book,"p o s t @ path ( ""books / check2"" )  @ produces ( ""text / plain"" )  @ consumes ( ""text / plain"" )  public  boolean   (  long id )  {  return books . contains key ( id ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,check book malformed m t,"g e t @ path ( ""books / check / malformedmt /  { id } "" )  @ produces ( ""text / plain"" )  public  response   ( @ path param ( ""id"" )   long id @ context  message context mc )  {  mc . put ( ""org . apache . cxf . jaxrs . media type check . strict"" false ) ; return  response . ok ( books . contains key ( id )  )  . type ( ""text"" )  . b"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,create book,"p u t @ path ( "" / books /  { id } "" )  public  response   ( @ path param ( ""id"" )   long id )  {   book b = books . get ( id ) ;  response r; if  ( b  =  =  null )   {   book new book = new  book (  ) ; new book . set id ( id ) ; r =  response . ok ( new book )  . build (  ) ;  }  else  {  r =  response . not modified (  )  . build (  ) ;  }  return r;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,delete body book,"d e l e t e @ path ( "" / deletebody"" )  @ produces ( ""application / xml"" )  @ consumes ( ""application / xml"" )  public  book   (  book book )  {  return book;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,delete book,"d e l e t e @ path ( "" / books /  { book id }  / "" )  public  response   ( @ path param ( ""book id"" )   string id )  {   book b = books . get (  long . parse long ( id )  ) ;  response r; if  ( b  !  =  null )   {  r =  response . ok (  )  . build (  ) ;  }  else  {  r =  response . not modified (  )  . build (  ) ;  }  return r;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,delete with query,"d e l e t e @ path ( "" / books / id"" )  public  response   ( @ query param ( ""value"" )  @ default value ( "" - 1"" )  int id )  {  if  ( id  !  =  123 )   {  throw new  web application exception (  ) ;  }   book b = books . get ( new  long ( id )  ) ;  response r; if  ( b  !  =  null )   {  r =  response . ok (  )  . build (  ) ;  }  else  {  r =  respons"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,echo book id,"p o s t @ path ( "" / booksplain"" )  @ consumes ( ""text / plain"" )  @ produces ( ""text / plain"" )  public  long   ( long the book id )  {  return new  long ( the book id ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,echo book name and header,"p o s t @ path ( "" / booksecho"" )  @ consumes ( ""text / plain"" )  @ produces ( ""text / plain"" )  public  response   ( @ header param ( "" custom header"" )   string header value  string name )  {  return  response . ok (  )  . entity ( name )  . header ( "" custom header"" header value )  . build (  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,echo book name and header,"p o s t @ path ( "" / booksecho2"" )  @ consumes ( ""text / plain"" )  @ produces ( ""text / plain"" )  public  response   (  string name )  {  return echo book name and header ( http headers . get request header ( "" custom header"" )  . get ( 0 )  name ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,echo book name and header,"p o s t @ path ( "" / booksecho3"" )  @ consumes ( ""text / plain"" )  @ produces ( ""text / plain"" )  public  response   (  string name )  {  return echo book name and header ( http headers . get request header ( ""customheader"" )  . get ( 0 )  name ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,echo through book store sub,"path ( "" / bookstoresub"" )  public  book store   (  )  {  return this;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,emptypost,"p o s t @ path ( "" "" )  public void emptypost (  )  {   string uri = ui . get absolute path (  )  . to string (  ) ; if  ( uri . ends with ( "" / "" )  )   {  throw new  web application exception ( 400 ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,emptypost no path,p o s t public void   (  )  {  emptypost (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,fail early in write,"g e t @ path ( "" / books / fail - early"" )  @ produces ( ""application / bar"" )  public  streaming output   (  )  {  return new  streaming output impl ( true ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,get with text,"p o s t @ path ( ""post401"" )  public  response   (  )  throws  exception  {  return  response . status ( 401 )  . entity ( "" this is 401"" )  . build (  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,get badly quoted header,"g e t @ path ( ""badlyquotedheaders"" )  public  response   ( @ query param ( ""type"" )  int t )  {   response .  response builder rb =  response . ok (  ) ; switch  ( t )   {  case 0: rb . header ( "" some header0"" ""\""some text"" ) ; break; case 1: rb . header ( "" some header1"" ""\""some text  some more text with"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,get bean param book,"g e t @ path ( "" / beanparam /  { id } "" )  @ produces ( ""application / xml"" )  public  book   ( @ bean param  book bean bean )  {  long id = bean . get id (  )   +  bean . get id2 (  )   +  bean . get id3 (  ) ; return books . get ( id ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,get bean param book,"g e t @ path ( "" / beanparam2 /  { id } "" )  @ produces ( ""application / xml"" )  public  book   (  )  {  return get bean param book ( the book bean ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,get book array,"p o s t @ path ( "" / array"" )  @ produces ( ""application / xml"" )  @ consumes ( ""application / xml"" )  public  book[]   (  book[] bs )  throws  exception  {  if  ( bs  =  =  null || bs . length  !  =  2 )   {  throw new  runtime exception (  ) ;  }  return bs;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,get book as object,"g e t @ path ( ""object"" )  public  object   (  )  {  return new  book ( "" book as  object"" 125 l ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,get book collection,"g e t @ path ( "" / collections"" )  @ produces (  { ""application / xml"" ""application / json"" }  )  public  list <  book >    (  )  throws  exception  {  return new  array list <  book >  ( books . values (  )  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,get book desciption http response,"g e t @ path ( "" / httpresponse"" )  public void   ( @ context  http servlet response response )  {  response . set content type ( ""text / plain"" ) ; try  {  response . get output stream (  )  . write ( "" good  book"" . get bytes (  )  ) ;  }  catch  (   i o exception ex )   {  throw new  web application exception ( ex ) ;  }   } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,get book from query,"g e t @ path ( ""name - in - query"" )  @ produces ( ""application / xml"" )  @ x m l instruction ( "" <  !  d o c t y p e  something  s y s t e m 'my . dtd' >  <  ? xmlstylesheet href = 'common . css'  ?  > "" )  @ x s i schema location ( ""book . xsd"" )  public  book   ( @ query param ( ""name"" )   string name )  {  return new  book ( name 321 l ) ;"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,get book index as double array,"g e t @ path ( "" / bookindexdoublearray"" )  @ produces ( ""text / plain"" )  public double[]   (  )  {  return new double[] { 1 2 3 } ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,get book index as int array,"g e t @ path ( "" / bookindexintarray"" )  @ produces ( ""text / plain"" )  public int[]   (  )  {  return new int[] { 1 2 3 } ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,get book list array,"g e t @ path ( "" / booklist"" )  public  list <  string >    (  )  {  return  collections . singleton list ( "" good book"" ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,get book name,"g e t @ path ( "" / booknames / 123"" )  @ produces ( ""application / bar"" )  public byte[]   (  )  {   long l =  long . parse long ( ""123"" ) ; return books . get ( l )  . get name (  )  . get bytes (  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,get book redirect,"g e t @ path ( "" / redirect"" )  public  response   ( @ query param ( ""redirect"" )   boolean done @ query param ( ""sameuri"" )   boolean sameuri )  {  if  ( done  =  =  null )   {   string uri = sameuri . equals (  boolean .  t r u e )   ?  ui . get absolute path builder (  )  . query param ( ""redirect"" ""true"" )  . build (  )  . to strin"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,get book redirect rel,"g e t @ path ( "" / redirect / relative"" )  public  response   ( @ query param ( ""redirect"" )   boolean done @ query param ( ""loop"" )  boolean loop )  {  if  ( done  =  =  null )   {  if  ( loop )   {  return  response . status ( 303 )  . header ( "" location"" ""relative ? loop = true"" )  . build (  ) ;  }  else  {  return  respons"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,get book string array,"g e t @ path ( "" / bookarray"" )  public  string[]   (  )  {  return new  string[] { "" good book"" } ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,get book sub resource instance r c,"path ( "" / booksubresource / instance / context"" )  public  book2   ( @ context  resource context rc )  {  return  (  (  resource context impl ) rc )  . init resource ( book2 sub ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,get book sub resource r c,"path ( "" / booksubresource / context"" )  public  book2   (  )  {  return resource context . get resource (  book2 . class ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,get buffered book,"g e t @ path ( "" / books / buffer"" )  @ produces ( ""application / bar"" )  public  input stream   (  )  {  return get class (  )  . get resource as stream ( ""resources / expected _ get _ book123 . txt"" ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,get custom book test,"g e t @ path ( "" / customtext"" )  @ produces ( ""text / custom"" )  public  string   (  )  {  return "" good book"";  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,get default book,"g e t @ path ( "" / default"" )  @ produces ( ""application / xml"" )  public  book   (  )  {  return new  book ( default name default id ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,get empty book,"g e t @ path ( ""emptybook"" )  @ produces (  { ""application / xml"" ""application / json"" }  )  public  book   (  )  {  return null;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,get empty book nullable,"g e t @ path ( ""emptybook / nillable"" )  @ produces (  { ""application / xml"" ""application / json"" }  )  @ nullable public  book   (  )  {  return null;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,get id,public
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,get id,public
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,get id,public
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,get name,public string   (  )  {  return name;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,get options,"o p t i o n s @ path ( "" / options"" )  public  response   (  )  throws  exception  {  return  response . ok (  )  . header ( "" allow"" "" p o s t"" )  . header ( "" allow"" "" p u t"" )  . header ( "" allow"" "" g e t"" )  . header ( "" allow"" "" d e l e t e"" )  . build (  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,get quoted header,"g e t @ path ( ""quotedheaders"" )  public  response   (  )  {  return  response . ok (  )  . header ( "" some header1"" ""\""some text  some more text\"""" )  . header ( "" some header2"" ""\""some text\"""" )  . header ( "" some header2"" ""\""quoted text\"""" )  . header ( "" some header2"" ""\""even more text\"""" )  . header ( "" so"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,get size,public object arg0  class <  ?  >  arg1  type arg2  annotation[] arg3  media type arg4 )  {  return  - 1;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,get timetable,"g e t @ path ( ""timetable"" )  public  calendar   (  )  {  return new  gregorian calendar (  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,get with complex path,"g e t @ path ( ""all chars but a -  b / :@ ! $&' (  ) * +  ; =  -  .  _ ~"" )  public  book   (  )  {  return new  book ( "" encoded  path"" 125 l ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,handle null book,"p o s t @ path ( "" / books / null"" )  @ produces ( ""application / xml"" )  @ consumes ( ""application / xml"" )  public  book   ( @ nullable  book book )  {  if  ( book  !  =  null )   {  throw new  web application exception ( 400 ) ;  }  return new  book ( "" default  book"" 222 l ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,infault,"g e t @ path ( "" "" )  public  response infault (  )  {  throw new  runtime exception (  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,infault,"g e t @ path ( "" "" )  public  response infault2 (  )  {  throw new  runtime exception (  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,is readable,public class <  ?  >  arg0  type arg1  annotation[] arg2  media type arg3 )  {  return double[] . class . is assignable from ( arg0 ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,is writeable,public class <  ?  >  arg0  type arg1  annotation[] arg2  media type arg3 )  {  return double[] . class . is assignable from ( arg0 ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,marshal,override public  book   (  book info v )  throws  exception  {  return new  book ( v . get name (  )  v . get id (  )  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,oneway request,"p o s t @ path ( "" / oneway"" )  @ oneway public void   (  )  {  if  (  !  phase interceptor chain . get current message (  )  . get exchange (  )  . is one way (  )  )   {  throw new  web application exception (  ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,outfault,"g e t @ path ( "" "" )  public  response outfault (  )  {  return  response . ok (  )  . build (  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,post book get collection,"p o s t @ path ( "" / collection book"" )  @ produces (  { ""application / xml"" ""application / json"" }  )  @ consumes (  { ""application / xml"" ""application / json"" }  )  public  list <  book >    (  book book )  throws  exception  {   list <  book >  list = new  array list <  book >  (  ) ; list . add ( book ) ; return list;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,post collection get book,"p o s t @ path ( "" / collections3"" )  @ produces (  { ""application / xml"" ""application / json"" }  )  @ consumes (  { ""application / xml"" ""application / json"" }  )  public  book   (  list <  book >  bs )  throws  exception  {  if  ( bs  =  =  null || bs . size (  )   !  =  2 )   {  throw new  runtime exception (  ) ;  }  return bs . "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,post empty form,"p o s t @ path ( "" / emptyform"" )  @ produces ( ""text / plain"" )  @ consumes (  media type .  a p p l i c a t i o n _  f o r m _  u r l e n c o d e d )  public  string   ( javax . ws . rs . core .  form form )  {  if  (  ! form . as map (  )  . is empty (  )  )   {  throw new  web application exception ( 400 ) ;  }  return ""empty form"";  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,read from,"public object   (  class <  object >  arg0  type arg1  annotation[] arg2  media type arg3  multivalued map <  string  string >  arg4  input stream arg5 )  throws  i o exception   web application exception  {   string[] string arr =  i o utils . read string from stream ( arg5 )  . split ( "" "" ) ; double[] int arr = new double[string arr . length]; for  ( int i = 0; i  <  string arr . length; i +  +  )   {  int arr[i] =  double . value of ( string arr[i] ) ;  }  return int arr;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,set complex cookies,"g e t @ path ( ""setcookies"" )  public  response   (  )  {  return  response . ok (  )  . header ( "" set -  cookie"" ""bar . com . anoncart = 107894933471602436;  domain =  . bar . com;""  +  ""  expires =  thu  01 -  oct - 2020 23:44:22  g m t;  path =  / "" )  . build (  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,set id,"path param ( ""id"" )  public void   ( long id )  {  this . id = id;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,set id,"query param ( ""id2"" )  public void   ( long id2 )  {  this . id2 = id2;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,set two cookies,"g e t @ path ( ""setmanycookies"" )  public  response   (  )  {  return  response . ok (  )  . header ( "" set -  cookie"" "" j s e s s i o n i d = 0475 f7 f30 a26 e5 b0 c15 d69;  path =  / "" )  . header ( "" set -  cookie"" "" c o o k i e t w o = dummy;  expires =  sat  20 -  nov - 2010 19:11:32  g m t;  path =  / "" )  . header ( "" set -  cookie"" "" c o o k i e t w o = du"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,set uri info,"context public void   (  uri info ui )  {   string id3 value = ui . get query parameters (  )  . get first ( ""id3"" ) ; if  ( id3 value  !  =  null )   {  this . id3 =  long . value of ( id3 value ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,temp redirect and set cookies,"g e t @ path ( ""tempredirect"" )  public  response   (  )  {   u r i uri =  uri builder . from path ( ""whatever / redirection"" )  . query param ( ""css1"" ""http: /  / bar"" )  . build (  ) ; return  response . temporary redirect ( uri )  . header ( "" set -  cookie"" ""a = b"" )  . header ( "" set -  cookie"" ""c = d"" )  . build (  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,throw exception,"g e t @ path ( ""webappexception"" )  public  book   (  )  {   response response =  response . server error (  )  . entity ( "" this is a  web application exception"" )  . build (  ) ; throw new  web application exception ( response ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,throw exception x m l,"g e t @ path ( ""webappexception x m l"" )  public  book   (  )  {   response response =  response . status ( 406 )  . type ( ""application / xml"" )  . entity ( "" <  book >  < name >  exception <  / name >  < id > 999 <  / id >  <  /  book > "" )  . build (  ) ; throw new  web application exception ( response ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,unmarshal,override public  book info   (  book b )  throws  exception  {  return new  book info ( b ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,unsupported content type,"p o s t @ path ( "" / unsupportedcontenttype"" )  @ consumes ( ""application / xml"" )  public  string   (  )  {  throw new  illegal state exception ( "" this op is not expected to be invoked"" ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,update book,"p u t @ path ( "" / bookswithdom / "" )  public  d o m source   (  d o m source ds )  {  return ds;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,update book j s o n,"p u t @ path ( "" / bookswithjson / "" )  @ consumes ( ""application / json"" )  public  response   (  book book )  {   book b = books . get ( book . get id (  )  ) ;  response r; if  ( b  !  =  null )   {  r =  response . ok ( book )  . build (  ) ;  }  else  {  r =  response . not modified (  )  . build (  ) ;  }  return r;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,write,"public output stream output )  throws  i o exception   web application exception  {  if  ( fail early )   {  throw new  web application exception (  response . status ( 410 )  . header ( ""content - type"" ""text / plain"" )  . entity ( "" this is supposed to go on the wire"" )  . build (  )  ) ;  }  else  {  output . write ( "" this is not supposed to go on the wire"" . get bytes (  )  ) ; throw new  web application exception ( 410 ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,write to,"public object arg0  class <  ?  >  arg1  type arg2  annotation[] arg3  media type arg4  multivalued map <  string  object >  arg5  output stream arg6 )  throws  i o exception   web application exception  {  double[] arr =  ( double[] ) arg0;  string builder sb = new  string builder (  ) ; for  ( int i = 0; i  <  arr . length; i +  +  )   {  sb . append (  double . to string ( arr[i] )  ) ; if  ( i  +  1  <  arr . length )   {  sb . append ( "" "" ) ;  }   }  arg6 . write ( sb . to string (  )  . get bytes (  )  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,write to stream and fail,"g e t @ path ( "" / books / fail - late"" )  @ produces ( ""application / bar"" )  public  streaming output   (  )  {  return new  streaming output impl ( false ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,wrong parameter type,"g e t @ path ( ""exceptionduringconstruction"" )  public void   ( @ query param ( ""p"" )   bad book p )  {  throw new  illegal state exception ( "" this op is not expected to be invoked"" ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxws\JsonSchemaJMXTest.java,connect to m bserver,private i o exception  {  jmx server u r l = jmx server u r l  =  =  null  ?   d e f a u l t _  j m x s e r v i c e _  u r l : jmx server u r l;  j m x service u r l url = new  j m x service u r l ( jmx server u r l ) ;  j m x connector jmxc =  j m x connector factory . connect ( url null ) ; mbsc = jmxc . get m bean server connection (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxws\JsonSchemaJMXTest.java,get endpoint object name,"private object name   (  )  throws  malformed object name exception   null pointer exception  {   string builder buffer = new  string builder (  ) ;  string service name = "" { http: /  / apache . org / hello _ world / services }  s o a p service"";  string port name = "" soap port""; buffer . append (  managed api .  d o m a i n _  n a m e  +  "":type =  bus .  service .  endpoint "" ) ; buffer . append (  management constants .  s e r v i c e _  n a m e _  p r o p  +  "" = \""""  +  service name +  ""\"" "" ) ; buffer . append (  management constants .  p o r t _  n a m e _  p r o p  +  "" = \""""  +  port name +  ""\"" *"" ) ; return new  object name ( buffer . to string (  )  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxws\JsonSchemaJMXTest.java,invoke endpoint,"private string   (  string operation  string operation para )  throws  exception  {   object name endpoint name = null;  object name query endpoint name;  string ret = """";  object[] jmx para = null;  string[] jmx sig = null; if  ( operation para  !  =  null )   {  jmx para = new  object[] { operation para } ; jmx sig = new  string[] {  string . class . get name (  )  } ;  }  else  {  jmx para = new  object[0]; jmx sig = new  string[0];  }  query endpoint name = get endpoint object name (  ) ;  set <  object name >  endpoint names =  cast utils . cast ( mbsc . query names ( query endpoint name null )  ) ;  iterator <  object name >  it = endpoint names . iterator (  ) ; if  ( it . has next (  )  )   {  endpoint name = it . next (  ) ; ret =  (  string ) mbsc . invoke ( endpoint name operation jmx para jmx sig ) ;  l o g . info ( ""invoke endpoint ""  +  endpoint name  +  "" operation "" +  operation +  "" succeed ! "" ) ;  }  return ret;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxws\JsonSchemaJMXTest.java,parse json,private string json )  throws  exception  {   json parser parser = new  json factory (  )  . create parser ( json ) ; while  ( parser . next token (  )   !  =  null )   {   }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxws\JsonSchemaJMXTest.java,test j m x get json schema,"test public void   (  )  throws  exception  {   spring bus factory bf = new  spring bus factory (  ) ;  bus bus = bf . create bus ( "" / io / fabric8 / cxf / endpoint / jaxws / jmx - enable . xml"" ) ;  bus factory . set default bus ( bus ) ;  string json = """"; try  {  connect to m bserver (  ) ; json = invoke endpoint ( ""get j"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\main\java\io\fabric8\devops\ProjectConfig.java,add link,public string name  string url )  {  if  ( links  =  =  null )   {  links = new  tree map <  >  (  ) ;  }  links . put ( name url ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\main\java\io\fabric8\devops\ProjectConfig.java,get build name,public string   (  )  {  return build name;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\main\java\io\fabric8\devops\ProjectConfig.java,get build parameters,public map <  string  string >    (  )  {  return build parameters;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\main\java\io\fabric8\devops\ProjectConfig.java,get chat room,public string   (  )  {  return chat room;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\main\java\io\fabric8\devops\ProjectConfig.java,get code review,public boolean   (  )  {  return code review;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\main\java\io\fabric8\devops\ProjectConfig.java,get environments,public linked hash map <  string  string >    (  )  {  return environments;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\main\java\io\fabric8\devops\ProjectConfig.java,get issue project name,public string   (  )  {  return issue project name;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\main\java\io\fabric8\devops\ProjectConfig.java,get link,public string   (  string name )  {  if  ( links  !  =  null )   {  return links . get ( name ) ;  }  return null;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\main\java\io\fabric8\devops\ProjectConfig.java,get links,public map <  string  string >    (  )  {  return links;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\main\java\io\fabric8\devops\ProjectConfig.java,get pipeline,public string   (  )  {  return pipeline;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\main\java\io\fabric8\devops\ProjectConfig.java,get use local flow,public boolean   (  )  {  return use local flow;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\main\java\io\fabric8\devops\ProjectConfig.java,has code review,public review  !  =  null && code review . boolean value (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\main\java\io\fabric8\devops\ProjectConfig.java,is empty,json ignore public boolean   (  )  {  return code review  =  =  null &&  strings . is null or blank ( chat room )  &&  strings . is null or blank ( issue project name )  &&  strings . is null or blank ( pipeline )  &&  maps . is null or empty ( build parameters )  &&  maps . is null or empty ( environments )  && use loc
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\main\java\io\fabric8\devops\ProjectConfig.java,is use local flow,public local flow  !  =  null && use local flow . boolean value (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\main\java\io\fabric8\devops\ProjectConfig.java,set build name,public string build name )  {  this . build name = build name;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\main\java\io\fabric8\devops\ProjectConfig.java,set build parameters,public map <  string  string >  build parameters )  {  this . build parameters = build parameters;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\main\java\io\fabric8\devops\ProjectConfig.java,set chat room,public string chat room )  {  this . chat room = chat room;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\main\java\io\fabric8\devops\ProjectConfig.java,set code review,public boolean code review )  {  this . code review = code review;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\main\java\io\fabric8\devops\ProjectConfig.java,set environments,public linked hash map <  string  string >  environments )  {  this . environments = environments;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\main\java\io\fabric8\devops\ProjectConfig.java,set issue project name,public string issue project name )  {  this . issue project name = issue project name;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\main\java\io\fabric8\devops\ProjectConfig.java,set links,public map <  string  string >  links )  {  this . links = links;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\main\java\io\fabric8\devops\ProjectConfig.java,set pipeline,public string pipeline )  {  this . pipeline = pipeline;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\main\java\io\fabric8\devops\ProjectConfig.java,set use local flow,public boolean use local flow )  {  this . use local flow = use local flow;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\main\java\io\fabric8\devops\ProjectConfig.java,to string,"override public  string   (  )  {  return "" project config { ""  +  ""flow = ""  +  pipeline  +  ""  chat room = '"" +  chat room +  '\'' +  ""  build name = '"" +  build name +  '\'' +  ""  issue project name = '"" +  issue project name +  '\'' +  ' } ';  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf-plugins\src\main\java\io\fabric8\cxf\maven\Java2SwaggerJsonMojo.java,execute,"public mojo execution exception  {   list <  class <  ?  >  >  resource classes = load resource classes (  ) ;  list <  object >  resource objects = new  array list <  object >  (  ) ; for  (   class <  ?  >  resource class : resource classes )   {  try  {  resource objects . add ( resource class . new instance (  )  ) ;  }  catch  (   instantiation exception e )   {  throw new  mojo execution exception ( e . get message (  )  e ) ;  }  catch  (   illegal access exception e )   {  throw new  mojo execution exception ( e . get message (  )  e ) ;  }   }   thread . current thread (  )  . set context class loader ( get class loader (  )  ) ;  list <  feature >  features = new  array list <  feature >  (  ) ; features . add ( new  swagger feature (  )  ) ;  j a x r s server factory bean server fac bean = new  j a x r s server factory bean (  ) ; server fac bean . set address ( address ) ; server fac bean . set service beans ( resource objects ) ; server fac bean . set features ( features ) ;  server server = server fac bean . create (  ) ;  input stream in = null; try  {   string server address = server . get endpoint (  )  . get endpoint info (  )  . get address (  ) ;  string api docs = server address  +  "" / swagger . json"";  u r l url = new  u r l ( api docs ) ; in = url . open stream (  ) ;  string res = get string from input stream ( in ) ; generate json ( resource classes res ) ;  }  catch  (   exception e )   {  throw new  mojo execution exception ( e . get message (  )  e ) ;  }  finally  {  server . stop (  ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf-plugins\src\main\java\io\fabric8\cxf\maven\Java2SwaggerJsonMojo.java,generate json,"private list <  class <  ?  >  >  resource classes  string swagger )  throws  mojo execution exception  {  if  ( output file  =  =  null && project  !  =  null )   {   string name = null; if  ( output file name  !  =  null )   {  name = output file name;  }  else if  ( resource classes . size (  )   =  =  1 )   {  name = resource classes . get ( 0 )  . get simple name (  ) ;  }  else  {  name = ""application"";  }  output file =  ( project . get build (  )  . get directory (  )   +  "" / generated / json / ""  +  name +  "" . "" +  output file extension )  . replace ( "" / ""  file . separator ) ;  }   buffered writer writer = null; try  {   file utils . mk dir ( new  file ( output file )  . get parent file (  )  ) ; writer = new  buffered writer ( new  file writer ( output file )  ) ; writer . write ( swagger ) ;  }  catch  (   i o exception e )   {  throw new  mojo execution exception ( e . get message (  )  e ) ;  }  finally  {  try  {  if  ( writer  !  =  null )   {  writer . close (  ) ;  }   }  catch  (   i o exception e )   {  throw new  mojo execution exception ( e . get message (  )  e ) ;  }   }  if  ( attach swagger && output file  !  =  null )   {   file json file = new  file ( output file ) ; if  ( json file . exists (  )  )   {  if  ( classifier  !  =  null )   {  project helper . attach artifact ( project ""json"" classifier json file ) ;  }  else  {  project helper . attach artifact ( project ""json"" json file ) ;  }   }   }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf-plugins\src\main\java\io\fabric8\cxf\maven\Java2SwaggerJsonMojo.java,get class loader,private class loader   (  )  throws  mojo execution exception  {  if  ( resource class loader  =  =  null )   {  try  {   list <  ?  >  runtime classpath elements = project . get runtime classpath elements (  ) ;  u r l[] runtime urls = new  u r l[runtime classpath elements . size (  ) ]; for  ( int i = 0; i  <  runtime classpath elements . size (  ) ; i +  +  )   {   string element =  (  string ) runtime classpath elements . get ( i ) ; runtime urls[i] = new  file ( element )  . to u r i (  )  . to u r l (  ) ;  }  resource class loader = new  u r l class loader ( runtime urls  thread . current thread (  )  . get context class loader (  )  ) ;  }  catch  (   exception e )   {  throw new  mojo execution exception ( e . get message (  )  e ) ;  }   }  return resource class loader;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf-plugins\src\main\java\io\fabric8\cxf\maven\Java2SwaggerJsonMojo.java,get string from input stream,private string   (  input stream in )  throws  exception  {   byte array output stream bos = new  byte array output stream (  ) ; int c = 0; while  (  ( c = in . read (  )  )   !  =   - 1 )   {  bos . write ( c ) ;  }  in . close (  ) ; bos . close (  ) ; return bos . to string (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf-plugins\src\main\java\io\fabric8\cxf\maven\Java2SwaggerJsonMojo.java,load resource classes,private list <  class <  ?  >  >    (  )  throws  mojo execution exception  {   list <  class <  ?  >  >  resource classes = new  array list <  class <  ?  >  >  ( class resource names . size (  )  ) ; for  (   string class name : class resource names )   {  try  {  resource classes . add ( get class loader (  )  . load class ( class name )  ) ;  }  catch  (   exception e )   {  throw new  mojo execution exception ( e . get message (  )  e ) ;  }   }  return resource classes;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\main\java\io\fabric8\devops\ProjectConfigs.java,configure properties,"public project config config  map map )  {   class <  ?  extends  project config >  clazz = config . get class (  ) ;  bean info bean info = null; try  {  bean info =  introspector . get bean info ( clazz ) ;  }  catch  (   introspection exception e )   {   l o g . warn ( "" could not introspect ""  +  clazz . get name (  )   +  "" .  "" +  e e ) ;  }  if  ( bean info  !  =  null )   {   property descriptor[] property descriptors = bean info . get property descriptors (  ) ; for  (   property descriptor descriptor : property descriptors )   {   method write method = descriptor . get write method (  ) ; if  ( write method  !  =  null )   {   string name = descriptor . get name (  ) ;  object value = map . get ( name ) ; if  ( value  !  =  null )   {   object safe value = null;  class <  ?  >  property type = descriptor . get property type (  ) ; if  ( property type . is instance ( value )  )   {  safe value = value;  }  else  {   property editor editor = descriptor . create property editor ( config ) ; if  ( editor  =  =  null )   {  editor =  property editor manager . find editor ( property type ) ;  }  if  ( editor  !  =  null )   {   string text = value . to string (  ) ; editor . set as text ( text ) ; safe value = editor . get value (  ) ;  }  else  {   l o g . warn ( "" cannot update property ""  +  name  +  "" with value "" +  value +  "" of type "" +  property type . get name (  )  +  "" on "" +  clazz . get name (  )  ) ;  }   }  if  ( safe value  !  =  null )   {  try  {  write method . invoke ( config safe value ) ;  }  catch  (   exception e )   {   l o g . warn ( "" failed to set property ""  +  name  +  "" with value "" +  value +  "" on "" +  clazz . get name (  )  +  "" "" +  config +  "" .  "" +  e e ) ;  }   }   }   }   }   }   string flow = null;  object flow value = map . get ( ""pipeline"" ) ; if  ( flow value  =  =  null )   {  flow value = map . get ( ""flow"" ) ;  }  if  ( flow value  !  =  null )   {  flow = flow value . to string (  ) ;  }  config . set pipeline ( flow ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\main\java\io\fabric8\devops\ProjectConfigs.java,create object mapper,public object mapper   (  )  {  return new  object mapper ( new  y a m l factory (  )  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\main\java\io\fabric8\devops\ProjectConfigs.java,default environments,"public project config config  string namespace )  {  if  ( config  !  =  null )   {   string build name = config . get build name (  ) ; if  (  strings . is not blank ( build name )  &&  maps . is null or empty ( config . get environments (  )  )  )   {   string default environments text =  systems . get env var or system property ( "" f a b r i c8 _  d e f a u l t _  e n v i r o n m e n t s"" "" testing = $ { namespace }  - testing  staging = $ { namespace }  - staging  production = $ { namespace }  - prod"" ) ;  string text =  strings . replace all without regex ( default environments text ""$ { build name } "" build name ) ; text =  strings . replace all without regex ( text ""$ { namespace } "" namespace ) ;  linked hash map <  string  string >  environments =  maps . parse map ( text ) ; config . set environments ( environments ) ;  }   }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\main\java\io\fabric8\devops\ProjectConfigs.java,find from folder,public project config   (  file folder )  {  if  ( folder . is directory (  )  )   {   file project config file = new  file ( folder  f i l e _  n a m e ) ; if  ( project config file  !  =  null && project config file . exists (  )  && project config file . is file (  )  )   {  return load from folder ( folder ) ;  }   file parent file = folder . get parent file (  ) ; if  ( parent file  !  =  null )   {  return find from folder ( parent file ) ;  }   }  return new  project config (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\main\java\io\fabric8\devops\ProjectConfigs.java,has config file,public file folder )  {   file project config file = new  file ( folder  f i l e _  n a m e ) ; return project config file  !  =  null && project config file . exists (  )  && project config file . is file (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\main\java\io\fabric8\devops\ProjectConfigs.java,load from folder,"public project config   (  file folder )  {   file project config file = new  file ( folder  f i l e _  n a m e ) ; if  ( project config file  !  =  null && project config file . exists (  )  && project config file . is file (  )  )   {   l o g . debug ( "" parsing fabric8 devops project configuration from: ""  +  project config file . get name (  )  ) ; try  {  return  project configs . parse project config ( project config file ) ;  }  catch  (   i o exception e )   {   l o g . warn ( "" failed to parse ""  +  project config file  +  "" .  "" +  e e ) ;  }   }  return new  project config (  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\main\java\io\fabric8\devops\ProjectConfigs.java,load from url,"public project config   (  u r l url )  {   input stream input = null; try  {  input = url . open stream (  ) ;  }  catch  (   file not found exception e )   {   l o g . info ( "" no fabric8 . yml at  u r l: ""  +  url ) ;  }  catch  (   i o exception e )   {   l o g . warn ( "" failed to open fabric8 . yml file at  u r l: ""  +  url  +  "" .  "" +  e e ) ;  }  if  ( input  !  =  null )   {  try  {   l o g . info ( "" parsing ""  +   project configs .  f i l e _  n a m e  +  "" from "" +  url ) ; return  project configs . parse project config ( input ) ;  }  catch  (   i o exception e )   {   l o g . warn ( "" failed to parse ""  +   project configs .  f i l e _  n a m e  +  "" from "" +  url +  "" .  "" +  e e ) ;  }   }  return null;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\main\java\io\fabric8\devops\ProjectConfigs.java,parse project config,public project config   (  string yaml )  throws  i o exception  {  return parse yaml ( yaml  project config . class ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\main\java\io\fabric8\devops\ProjectConfigs.java,parse yaml,private t >  t   (  string yaml  class <  t >  clazz )  throws  i o exception  {   object mapper mapper = create object mapper (  ) ; return mapper . read value ( yaml clazz ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\main\java\io\fabric8\devops\ProjectConfigs.java,parse yaml values,static t >  list <  t >    (  file file  class <  t >  clazz )  throws  i o exception  {   object mapper mapper = create object mapper (  ) ;  mapping iterator <  t >  iter = mapper . reader for ( clazz )  . read values ( file ) ;  list <  t >  answer = new  array list <  >  (  ) ; while  ( iter . has next (  )  )   {  answer . add ( iter . next (  )  ) ;  }  return answer;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\main\java\io\fabric8\devops\ProjectConfigs.java,save config,public project config config  file file )  throws  i o exception  {  create object mapper (  )  . write value ( file config ) ; return true;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\main\java\io\fabric8\devops\ProjectConfigs.java,save to folder,"public file basedir  project config config boolean overwrite if exists )  throws  i o exception  {   file file = new  file ( basedir  project configs .  f i l e _  n a m e ) ; if  ( file . exists (  )  )   {  if  (  ! overwrite if exists )   {   l o g . warn ( "" not generating ""  +  file  +  "" as it already exists"" ) ; return false;  }   }  return save config ( config file ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\main\java\io\fabric8\devops\ProjectConfigs.java,to yaml,public string   (  object dto )  throws  json processing exception  {   object mapper mapper = create object mapper (  ) ; return mapper . write value as string ( dto ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\main\java\io\fabric8\devops\ProjectRepositories.java,create build name,public string   (  string username  string repo name )  {  return repo name;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\main\java\io\fabric8\devops\ProjectRepositories.java,load project repositories,public list <  project repository >    (  file yaml file )  throws  i o exception  {  if  ( yaml file . exists (  )  && yaml file . is file (  )  )   {  return parse yaml values ( yaml file  project repository . class ) ;  }  else  {  return new  array list <  >  (  ) ;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\test\java\io\fabric8\devops\ConfigureTest.java,test configuration,"test public void   (  )  throws  exception  {   project config config = new  project config (  ) ; config . set code review ( true ) ;  map map = new  hash map (  ) ; map . put ( ""code review"" false ) ;  project configs . configure properties ( config map ) ; assert that ( config . get code review (  )  )  . described"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\test\java\io\fabric8\devops\ProjectRepositoryTest.java,test parse yaml,"test public void   (  )  throws  exception  {   string basedir =  system . get property ( ""basedir"" "" . "" ) ;  file file = new  file ( basedir ""src / test / resources / projects . yml"" ) ; assert that ( file )  . exists (  ) ;  list <  project repository >  projects =  project repositories . load project repositori"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\test\java\io\fabric8\devops\YamlTest.java,test generate yaml,"test public void   (  )  throws  exception  {   project config config = new  project config (  ) ; config . set pipeline ( ""maven /  deploy . groovy"" ) ; config . set chat room ( ""myroom"" ) ; config . set code review ( true ) ; config . set issue project name ( "" t h i n g"" ) ; config . add link ( "" room"" ""http: /  / lets"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\test\java\io\fabric8\devops\YamlTest.java,test parse yaml,"test public void   (  )  throws  exception  {   string basedir =  system . get property ( ""basedir"" "" . "" ) ;  file file = new  file ( basedir ""src / test / resources / fabric8 . yml"" ) ; assert that ( file )  . exists (  ) ;  project config config =  project configs . parse project config ( file ) ;  system . out . pr"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\main\java\io\fabric8\devops\ProjectRepository.java,extract organisation and user from url,"protected strings . is not blank ( url )  )   {   string text =  strings . strip suffix ( url "" .  / "" ) ; text =  strings . strip suffix ( text "" . git"" ) ; text =  strings . strip suffix ( text "" / "" ) ;  string[] split = text . split ( "" / "" ) ; if  ( split  !  =  null && split . length  >  1 )   {  if  (  strings . is null or blank ( user )  )   {  user = split[split . length  -  2];  }  if  (  strings . is null or blank ( repo name )  )   {  repo name = split[split . length  -  1];  }   }   }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\main\java\io\fabric8\devops\ProjectRepository.java,get git url,"public string   (  )  {  if  (  strings . is null or blank ( git url )  &&  strings . is not blank ( url )  )   {  if  ( is git hub project (  )  )   {  git url = url  +  "" . git"";  }   }  return git url;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\main\java\io\fabric8\devops\ProjectRepository.java,get kind,public string   (  )  {  return kind;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\main\java\io\fabric8\devops\ProjectRepository.java,get repo name,public string   (  )  {  if  ( repo name  =  =  null )   {  extract organisation and user from url (  ) ;  }  return repo name;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\main\java\io\fabric8\devops\ProjectRepository.java,get url,public string   (  )  {  return url;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\main\java\io\fabric8\devops\ProjectRepository.java,get user,public string   (  )  {  if  ( user  =  =  null )   {  extract organisation and user from url (  ) ;  }  return user;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\main\java\io\fabric8\devops\ProjectRepository.java,is git hub project,public objects . equals ( get kind (  )   kinds .  g i t h u b ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\main\java\io\fabric8\devops\ProjectRepository.java,set git url,public string git url )  {  this . git url = git url;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\main\java\io\fabric8\devops\ProjectRepository.java,set kind,public string kind )  {  this . kind = kind;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\main\java\io\fabric8\devops\ProjectRepository.java,set repo name,public string repo name )  {  this . repo name = repo name;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\main\java\io\fabric8\devops\ProjectRepository.java,set url,public string url )  {  this . url = url;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\main\java\io\fabric8\devops\ProjectRepository.java,set user,public string user )  {  this . user = user;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\main\java\io\fabric8\devops\ProjectRepository.java,to string,"override public  string   (  )  {  return "" project repository { ""  +  ""kind = '""  +  kind  +  '\'' +  ""  user = '"" +  get user (  )  +  '\'' +  ""  repo name = '"" +  get repo name (  )  +  '\'' +  ""  url = '"" +  url +  '\'' +  ' } ';  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnectors.java,create dev ops connector,"public dev ops connector   (  project repository project )  {   dev ops connector connector = new  dev ops connector (  ) ; connector . set git url ( project . get git url (  )  ) ;  string repo name = project . get repo name (  ) ; connector . set repo name ( repo name ) ;  string username = project . get user (  ) ; connector . set username ( username ) ;  string build name =  project repositories . create build name ( username repo name ) ; if  ( project . is git hub project (  )  )   {   string url = project . get url (  ) ; if  (  strings . is not blank ( url )  )   {  connector . set issue tracker url (  u r l utils . path join ( url ""issues"" )  ) ; connector . set team url (  u r l utils . path join ( url ""graphs / contributors"" )  ) ; connector . set releases url (  u r l utils . path join ( url ""tags"" )  ) ; connector . set repository browse link ( url ) ;  }   project config config =  project configs . load from url (  u r l utils . path join ( url ""blob / master / fabric8 . yml"" )  ) ; if  ( config  =  =  null )   {  config = new  project config (  ) ; config . set pipeline ( ""maven /  deploy . groovy"" ) ;  }  config . set build name ( build name ) ; connector . set project config ( config ) ; connector . set register web hooks ( false ) ;  system . out . println ( "" created config ""  +  config . get build name (  )   +  "" with flow "" +  config . get pipeline (  )  ) ;  }  return connector;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\Environments.java,ensure environment added,"public config map environments config map  string key  string label  string namespace )  {  boolean answer = false;  map <  string  string >  data = new  linked hash map <  >  (  ) ;  map <  string  string >  old data = environments config map . get data (  ) ; if  ( old data  !  =  null )   {  data . put all ( old data ) ; environments config map . set data ( data ) ;  }   string yaml = data . get ( key ) ; if  (  strings . is null or blank ( yaml )  )   {  yaml = ""name: ""  +  label  +  ""\nnamespace: "" +  namespace +  ""\norder: "" +  data . size (  ) ; data . put ( key yaml ) ; answer = true;  }  if  ( answer )   {  environments config map . set data ( data ) ;  }  return answer;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\Environments.java,get or create environments,"public config map   (  kubernetes client client )  {   config map answer = null; try  {  answer = client . config maps (  )  . in namespace ( client . get namespace (  )  )  . with name (  e n v i r o n m e n t s _  c o n f i g _  m a p _  n a m e )  . get (  ) ;  }  catch  (   exception e )   {   l o g . info ( "" failed to find  config map ""  +  client . get namespace (  )   +  "" . "" +   e n v i r o n m e n t s _  c o n f i g _  m a p _  n a m e +  "" .  "" +  e e ) ;  }  if  ( answer  =  =  null ||  kubernetes helper . get name ( answer )   =  =  null )   {  answer = new  config map builder (  )  . with new metadata (  )  . with name (  e n v i r o n m e n t s _  c o n f i g _  m a p _  n a m e )  . add to labels ( ""kind"" ""environments"" )  . add to labels ( ""provider"" ""fabric8 . io"" )  . end metadata (  )  . build (  ) ;  }  return answer;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\WebHooks.java,create gogs webhook,"public git repo client repo client  logger log  string gogs user  string repo name  string webhook url  string webhook secret )  throws  json processing exception  {  if  ( repo client  =  =  null )   {  log . info ( "" cannot create  gogs webhooks as no  gogs service could be found or created"" ) ; return false;  }   string gogs address = repo client . get address (  ) ; log . info ( "" querying webhooks in gogs at address: ""  +  gogs address  +  "" for user "" +  gogs user +  "" repo name: "" +  repo name ) ;  repository d t o repository = repo client . get repository ( gogs user repo name ) ; if  ( repository  =  =  null )   {  log . info ( "" no repository found for user: ""  +  gogs user  +  "" repo: "" +  repo name +  "" so cannot create any web hooks"" ) ;  }   list <  web hook d t o >  webhooks = repo client . get webhooks ( gogs user repo name ) ; for  (   web hook d t o webhook : webhooks )   {   string url = null;  webhook config config = webhook . get config (  ) ; if  ( config  !  =  null )   {  url = config . get url (  ) ; if  (  objects . equal ( webhook url url )  )   {  log . info ( "" already has webhook for: ""  +  url  +  "" so not creating again"" ) ; return false;  }  log . info ( "" ignoring webhook ""  +  url  +  "" from: "" +  to json ( config )  ) ;  }   }   create webhook d t o create webhook = new  create webhook d t o (  ) ; create webhook . set type ( ""gogs"" ) ;  webhook config config = create webhook . get config (  ) ; config . set url ( webhook url ) ; config . set secret ( webhook secret ) ;  web hook d t o webhook = repo client . create webhook ( gogs user repo name create webhook ) ; if  ( log . is debug enabled (  )  )   {  log . debug ( "" got created web hook: ""  +  to json ( webhook )  ) ;  }  log . info ( "" created webhook for ""  +  webhook url  +  "" for user: "" +  gogs user +  "" repo name: "" +  repo name +  "" on gogs  u r l: "" +  gogs address ) ; return true;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\test\java\io\fabric8\devops\connector\DevOpsConnectorExample.java,main,"public string[] args )  throws  exception  {   dev ops connector devops = new  dev ops connector (  ) ; devops . set basedir ( new  file ( "" .  / "" )  ) ; devops . set git url ( ""some u r l"" ) ; devops . execute (  ) ;  system . out . println ( "" finished"" ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\test\java\io\fabric8\devops\connector\RemoveBuildParameterTest.java,test remove build parameter test,"test public void   (  )  throws  exception  {   string template = load jenkins build template (  l o g ) ; assert that ( template )  . is not empty (  ) ;  string transformed = remove build parameter (  l o g template "" g i t _  u r l"" ) ; transformed = remove build parameter (  l o g transformed "" v e r s i o n _  p r e f i x"" ) ;"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\test\java\io\fabric8\devops\connector\UpdateEnviromentConfigMap.java,main,"public string .  .  .  args )  {  try  {   kubernetes client kube = new  default kubernetes client (  ) ;  system . out . println ( "" using namespace ""  +  kube . get namespace (  )   +  "" on master: "" +  kube . get master url (  )  ) ;  map <  string  string >  environments = new  hash map <  >  (  ) ; environments . put ( "" testing2"" ""default - testing"" ) ; environments . put ( "" staging2"" ""default - staging"" ) ;  dev ops connector connector = new  dev ops connector (  ) ;  string console url = ""http: /  / fabric8 . vagrant . f8 / "";  map <  string  string >  annotations = new  hash map <  >  (  ) ;  system . out . println ( "" starting to create / update the environment  config map with ""  +  environments ) ; connector . update environment config map ( environments kube annotations console url ) ;  system . out . println ( "" now trying a second time ! "" ) ; connector . update environment config map ( environments kube annotations console url ) ;  system . out . println ( "" worked !  !  ! "" ) ;  }  catch  (   exception e )   {   system . out . println ( "" f a i l e d: ""  +  e ) ; e . print stack trace (  ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,add build parameter,"public string   (  logger log  string template  string parameter name  string parameter value  string description )  {  try  {   document doc = parse xml text ( template ) ;  element root element = doc . get document element (  ) ;  node list parameter defs = root element . get elements by tag name ( ""parameter definitions"" ) ; if  ( parameter defs  !  =  null && parameter defs . get length (  )   >  0 )   {   node param def node = parameter defs . item ( 0 ) ;  element string param def =  dom helper . add child element ( param def node ""hudson . model .  string parameter definition"" ) ;  dom helper . add child element ( string param def ""name"" parameter name ) ;  dom helper . add child element ( string param def ""default value"" parameter value ) ; if  (  strings . is not blank ( description )  )   {   dom helper . add child element ( string param def ""description"" description ) ;  }  return  dom helper . to xml ( doc ) ;  }  else  {  log . warn ( "" could not find the  < parameter definitions >  to add the build parameter name ""  +  parameter name  +  "" with value: "" +  parameter value ) ;  }   }  catch  (   exception e )   {  log . error ( "" failed to add the build parameter from the  jenkins  x m l .  ""  +  e e ) ;  }  return template;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,add jenkins scm trigger,"protected string jenkins job url )  {  if  (  strings . is null or blank ( jenkins job template )  )   {  get log (  )  . warn ( "" cannot add  s c m trigger to jenkins job at ""  +  jenkins job url  +  "" as there is no cached template"" ) ;  }  else if  (  ! local jenkins flow )   {  get log (  )  . info ( "" not adding an  s c m trigger to jenkins job at ""  +  jenkins job url  +  "" as it is not using a local  jenkinsfile"" ) ;  }  else  {  get log (  )  . info ( "" adding adding an  s c m trigger to jenkins job at ""  +  jenkins job url ) ;  string template = null; try  {  template = jenkins job template;  document doc = parse xml text ( template ) ;  element root element = doc . get document element (  ) ;  element trigger element = null;  node list triggers = root element . get elements by tag name ( ""triggers"" ) ; if  ( triggers  =  =  null || triggers . get length (  )   =  =  0 )   {  trigger element =  dom helper . add child element ( root element ""triggers"" ) ;  }  else  {  trigger element =  (  element ) triggers . item ( 0 ) ;  }   string host name =  git utils . get git host name ( git url ) ; get log (  )  . info ( ""using git host: ""  +  host name ) ; if  (  objects . equal ( ""github . com"" host name )  )   {   element github trigger =  dom helper . first child ( trigger element ""com . cloudbees . jenkins .  git hub push trigger"" ) ; if  ( github trigger  =  =  null )   {  github trigger =  dom helper . add child element ( trigger element ""com . cloudbees . jenkins .  git hub push trigger"" ) ; github trigger . set attribute ( ""plugin"" ""github@1 . 14 . 0"" ) ;  dom helper . add child element ( github trigger ""spec"" ) ;  }   }   element scm trigger =  dom helper . add child element ( trigger element ""hudson . triggers .  s c m trigger"" ) ;  dom helper . add child element ( scm trigger ""spec"" ""* * * * * "" ) ;  dom helper . add child element ( scm trigger ""ignore post commit hooks"" ""false"" ) ; template =  dom helper . to xml ( doc ) ;  }  catch  (   exception e )   {  get log (  )  . warn ( "" failed to add the  s c m trigger to jenkins job at ""  +  jenkins job url  +  "" .   reason: "" +  e e ) ; template = null;  }  if  (  strings . is not blank ( template )  )   {  post jenkins build ( jenkins job name template false ) ;  }   }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,add link,public string label  string url )  {  if  ( project config  =  =  null )   {  project config = new  project config (  ) ;  }  project config . add link ( label url ) ; modified config = true;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,annotation link,"protected map <  string  string >  annotations  string annotation prefix  string issue tracker url  string issue tracker label )  {  if  (  strings . is not blank ( issue tracker url )  )   {  annotations . put ( annotation prefix  +  ""url"" issue tracker url ) ; annotations . put ( annotation prefix  +  ""label"" issue tracker label ) ; add link ( issue tracker label issue tracker url ) ; return true;  }  else  {  return false;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,around read from,override public  object   (  reader interceptor context interceptor context )  throws  i o exception   web application exception  {   input stream in = interceptor context . get input stream (  ) ;  buffered reader reader = new  buffered reader ( new  input stream reader ( in )  ) ;  string builder rec
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,create controller,protected controller   (  )  {   controller controller = new  controller ( get kubernetes (  )  ) ; controller . set namespace ( namespace ) ; controller . set throw exception on error ( true ) ; controller . set recreate mode ( recreate mode ) ; return controller;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,create gerrit repo,"protected string repo name  string gerrit user  string gerrit pwd  string gerrit git initial commit  string gerrit git repo description )  throws  exception  {  if  (  strings . is null or blank ( gerrit user )  )   {  gerrit user = ""admin"";  }  if  (  strings . is null or blank ( gerrit pwd )  )   {  gerrit pwd = ""secret"";  }  log . info ( "" a  gerrit git repo will be created for this name : ""  +  repo name ) ;  string gerrit address =  kubernetes helper . get service u r l ( kubernetes  service names .  g e r r i t namespace ""http"" true ) ; log . info ( "" found gerrit address: ""  +  gerrit address  +  "" for namespace: "" +  namespace +  "" on  kubernetes address: "" +  kubernetes . get master url (  )  ) ; if  (  strings . is null or blank ( gerrit address )  )   {  throw new  exception ( "" no address for service ""  +   service names .  g e r r i t  +  "" in namespace: "" +  namespace +  "" on  kubernetes address: "" +  kubernetes . get master url (  )  ) ;  }   closeable http client httpclient =  http clients . create default (  ) ;  closeable http client httpclient post =  http clients . create default (  ) ;  string  g e r r i t _  u r l = gerrit address  +  "" / a / projects / ""  +  repo name;  http get httpget = new  http get (  g e r r i t _  u r l ) ;  system . out . println ( "" requesting : ""  +  httpget . get u r i (  )  ) ; try  {   http response response = httpclient . execute ( httpget ) ;  system . out . println ( response . get status line (  )  ) ; if  ( response . get status line (  )  . get status code (  )   =  =   http status .  s c _  u n a u t h o r i z e d )   {   header auth header = response . get first header (  a u t h .  w w w _  a u t h ) ;  system . out . println ( ""auth header  =  ""  +  auth header ) ;  digest scheme digest scheme = new  digest scheme (  ) ; digest scheme . process challenge ( auth header ) ;  username password credentials creds = new  username password credentials ( gerrit user gerrit pwd ) ; httpget . add header ( digest scheme . authenticate ( creds httpget null )  ) ;  http post http post = new  http post (  g e r r i t _  u r l ) ; http post . add header ( digest scheme . authenticate ( creds http post null )  ) ; http post . add header ( "" content -  type"" ""application / json"" ) ;  create repository d t o create repo d t o = new  create repository d t o (  ) ; create repo d t o . set description ( gerrit git repo description ) ; create repo d t o . set name ( repo name ) ; create repo d t o . set create _ empty _ commit (  boolean . value of ( gerrit git initial commit )  ) ;  object mapper mapper = new  object mapper (  ) ;  string json = mapper . write value as string ( create repo d t o ) ;  http entity entity = new  string entity ( json ) ; http post . set entity ( entity ) ;  response handler <  string >  response handler = new  basic response handler (  ) ;  string response body = httpclient post . execute ( http post response handler ) ;  system . out . println ( ""response body : ""  +  response body ) ;  }   }  catch  (   malformed challenge exception e )   {  e . print stack trace (  ) ;  }  catch  (   authentication exception e )   {  e . print stack trace (  ) ;  }  catch  (   connect exception e )   {   system . out . println ( "" gerrit  server is not responding"" ) ;  }  catch  (   http response exception e )   {   system . out . println ( "" response from  gerrit  server : ""  +  e . get message (  )  ) ; throw new  exception ( "" repository ""  +  repo name  +  "" already exists  ! "" ) ;  }  finally  {  httpclient . close (  ) ; httpclient post . close (  ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,create jenkins job,"protected string   (  string build name  string jenkins job url )  {   string answer = null; if  ( project config  !  =  null )   {   string flow = project config . get pipeline (  ) ;  string flow git url value = null; boolean local flow = false;  string project git url = this . git url; if  (  strings . is not blank ( flow )  )   {  flow git url value = this . flow git url;  }  else if  ( project config . is use local flow (  )  )   {  flow =  project configs .  l o c a l _  f l o w _  f i l e _  n a m e; flow git url value = project git url; local flow = true;  }  else  {  get log (  )  . info ( "" not creating  jenkins job as no pipeline defined for project configuration ! "" ) ;  }  this . local jenkins flow = local flow;  string version prefix =  systems . get system property or env var ( "" v e r s i o n _  p r e f i x"" "" v e r s i o n _  p r e f i x"" ""1 . 0"" ) ; if  (  strings . is not blank ( flow )  &&  strings . is not blank ( project git url )  &&  strings . is not blank ( flow git url value )  )   {   string template = load jenkins build template ( get log (  )  ) ; if  (  strings . is not blank ( template )  )   {  if  (  strings . is not blank ( git source secret name )  )   {  template = add build parameter ( get log (  )  template "" s o u r c e _  s e c r e t"" git source secret name "" name of the  kubernetes  secret required to clone the git repository"" ) ;  }  template = template . replace ( ""$ {  f l o w _  p a t h } "" flow ) ; template = template . replace ( ""$ {  f l o w _  g i t _  u r l } "" flow git url value ) ; template = template . replace ( ""$ {  g i t _  u r l } "" project git url ) ; template = template . replace ( ""$ {  v e r s i o n _  p r e f i x } "" version prefix ) ; if  ( local flow )   {  template = remove build parameter ( get log (  )  template "" g i t _  u r l"" ) ;  }  post jenkins build ( build name template true ) ; answer = template;  }   }  add project secret (  ) ;  }  return answer;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,create jenkins webhook,"protected string jenkins job url )  {  if  (  strings . is not blank ( jenkins job url )  )   {   string jenkins web hook =  u r l utils . path join ( jenkins job url "" / build"" ) ;  map <  string  string >  build parameters = get build parameters (  ) ; if  (  ! build parameters . is empty (  )  )   {   string postfix = """"; for  (   map .  entry <  string  string >  entry : build parameters . entry set (  )  )   {  if  ( postfix . length (  )   >  0 )   {  postfix +  = ""&"";  }  postfix +  = entry . get key (  )   +  "" = ""  +  entry . get value (  ) ;  }  jenkins web hook +  = "" with parameters ? ""  +  postfix;  }  boolean created = create webhook ( jenkins web hook this . secret ) ; if  (  ! created )   {  add jenkins scm trigger ( jenkins job url ) ;  }  if  ( trigger jenkins job ||  ! created )   {  trigger jenkins web hook ( jenkins job url jenkins web hook this . secret ) ;  }   }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,create lets chat,"protected lets chat client   (  )  {  if  (  ! letschat enabled )   {  return null;  }   kubernetes client kubernetes = get kubernetes (  ) ;  lets chat client lets chat =  lets chat kubernetes . create lets chat ( kubernetes ) ; if  ( lets chat  =  =  null )   {  get log (  )  . warn ( "" no letschat service availble n kubernetes ""  +  namespace  +  "" on address: "" +  kubernetes . get master url (  )  ) ; return null;  }  if  (  ! lets chat . is valid (  )  )   {  get log (  )  . warn ( "" no $""  +   lets chat kubernetes .  l e t s c h a t _  h u b o t _  t o k e n  +  "" environment variable defined so  lets chat support is disabled"" ) ; return null;  }  return lets chat;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,create taiga,protected taiga client   (  )  {  if  (  ! taiga enabled )   {  return null;  }   taiga client taiga =  taiga kubernetes . create taiga ( get kubernetes (  )  namespace ) ; if  ( taiga  !  =  null )   {  taiga . set auto create projects ( taiga auto create ) ;  }  return taiga;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,create taiga project,"protected project d t o   (  taiga client taiga )  {  if  ( taiga  !  =  null )   {  if  (  strings . is null or blank ( taiga project name )  )   {  get log (  )  . info ( "" not creating  taiga project as no `fabric8 . tagia project name` property specified"" ) ; return null;  }  if  (  strings . is null or blank ( taiga project slug )  )   {  get log (  )  . info ( "" not creating  taiga project as no `fabric8 . taiga project slug` property specified"" ) ; return null;  }  get log (  )  . info ( "" about to create  taiga project ""  +  taiga project name  +  "" with slug: "" +  taiga project slug ) ; return taiga . get or create project ( taiga project name taiga project slug ) ;  }  return null;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,create taiga webhook,"protected taiga client taiga  project d t o project )  {  if  ( taiga  !  =  null && project  !  =  null )   {   long project id = project . get id (  ) ;  module d t o module = taiga . module for project ( project id  taiga module .  g o g s ) ; if  ( module  !  =  null )   {   string webhook secret = module . get secret (  ) ;  string webhook = taiga . get public webhook url ( module ) ; if  (  strings . is not blank ( webhook secret )  &&  strings . is not blank ( webhook )  )   {  create webhook ( webhook webhook secret ) ;  }  else  {  get log (  )  . warn ( "" could not create webhook for  taiga .   missing module data for url: ""  +  webhook  +  "" secret: "" +  webhook secret ) ;  }   }  else  {  get log (  )  . warn ( "" no module for gogs so cannot create  taiga webhook"" ) ;  }   }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,create webhook,"protected string url  string webhook secret )  {  try  {   git repo client git repo client = get git repo client (  ) ;  web hooks . create gogs webhook ( git repo client get log (  )  username repo name url webhook secret ) ; return true;  }  catch  (   exception e )   {  get log (  )  . error ( "" failed to create webhook ""  +  url  +  "" on repository "" +  repo name +  "" .   reason: "" +  e e ) ; return false;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,evaluate room expression,"protected string   (  string room expresion )  {  if  (  strings . is not blank ( room expresion )  )   {   string namespace =  kubernetes helper . default namespace (  ) ;  string answer = room expresion; answer = replace expression ( answer ""namespace"" namespace ) ; answer = replace expression ( answer ""repo name"" repo name ) ; answer = replace expression ( answer ""username"" username ) ; return answer;  }  else  {  return null;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,execute,"public exception  {  load config file (  ) ;  kubernetes client kubernetes = get kubernetes (  ) ;  string name = project name; if  (  strings . is null or blank ( name )  )   {  if  ( project config  !  =  null )   {  name = project config . get build name (  ) ;  }  if  (  strings . is null or blank ( name )  )   {  name = jenkins job;  }  if  (  strings . is null or blank ( name )  )   {  name =  project repositories . create build name ( username repo name ) ; if  ( project config  !  =  null )   {  project config . set build name ( name ) ;  }   }   }  if  (  strings . is null or blank ( project name )  )   {  project name = name;  }   map <  string  string >  labels = new  hash map <  >  (  ) ; labels . put ( ""user"" username ) ; labels . put ( ""repo"" repo name ) ; get log (  )  . info ( ""build name ""  +  name ) ; taiga = null; taiga project = null; try  {  taiga = create taiga (  ) ; taiga project = create taiga project ( taiga ) ;  }  catch  (   exception e )   {  get log (  )  . error ( "" failed to load or lazily create the  taiga project: ""  +  e e ) ;  }  get log (  )  . info ( ""taiga ""  +  taiga ) ;  lets chat client letschat = null; try  {  letschat = create lets chat (  ) ;  }  catch  (   exception e )   {  get log (  )  . error ( "" failed to load or lazily create the  lets chat client: ""  +  e e ) ;  }  get log (  )  . info ( ""letschat ""  +  letschat ) ; if  ( project config  !  =  null && project config . has code review (  )  )   {  try  {  create gerrit repo ( repo name gerrit user gerrit pwd gerrit git initial commit gerrit git repo desription ) ;  }  catch  (   exception e )   {  get log (  )  . error ( "" failed to create  gerrit git repo : ""  +  e e ) ;  }   }   map <  string  string >  annotations = new  hash map <  >  (  ) ; jenkins job url = null;  string jenkins url = null; try  {  jenkins url = get jenkins service url ( true ) ; if  (  strings . is not blank ( jenkins url )  )   {  if  (  strings . is not blank ( jenkins monitor view )  )   {   string url =  u r l utils . path join ( jenkins url "" / view"" jenkins monitor view ) ; annotation link ( annotations ""fabric8 . link . jenkins . monitor / "" url "" monitor"" ) ;  }  if  (  strings . is not blank ( jenkins pipeline view )  )   {   string url =  u r l utils . path join ( jenkins url "" / view"" jenkins pipeline view ) ; annotation link ( annotations ""fabric8 . link . jenkins . pipeline / "" url "" pipeline"" ) ;  }  if  (  strings . is not blank ( name )  )   {  jenkins job url =  u r l utils . path join ( jenkins url "" / job"" name ) ; annotation link ( annotations ""fabric8 . link . jenkins . job / "" jenkins job url "" job"" ) ;  }   }   }  catch  (   exception e )   {  get log (  )  . warn ( "" could not find the  jenkins  u r l ! : ""  +  e e ) ;  }  get log (  )  . info ( ""jenkins ""  +  jenkins url ) ; if  (  ! annotation link ( annotations ""fabric8 . link . issues / "" issue tracker url issue tracker label )  )   {   string taiga link = get project page link ( taiga taiga project this . taiga project link page ) ; annotation link ( annotations ""fabric8 . link . taiga / "" taiga link taiga project link label ) ;  }  if  (  ! annotation link ( annotations ""fabric8 . link . team / "" team url team label )  )   {   string taiga team link = get project page link ( taiga taiga project this . taiga team link page ) ; annotation link ( annotations ""fabric8 . link . taiga . team / "" taiga team link taiga team link label ) ;  }  annotation link ( annotations ""fabric8 . link . releases / "" releases url releases label ) ;  string chat room link = get chat room link ( letschat ) ; annotation link ( annotations ""fabric8 . link . letschat . room / "" chat room link letschat room link label ) ; annotation link ( annotations ""fabric8 . link . repository . browse / "" repository browse link repository browse label ) ;  project configs . default environments ( project config namespace ) ;  string console url = get service url (  service names .  f a b r i c8 _  c o n s o l e namespace fabric8 console namespace ) ; if  ( project config  !  =  null )   {   map <  string  string >  environments = project config . get environments (  ) ; update environment config map ( environments kubernetes annotations console url ) ;  }  add link ( "" git"" get git url (  )  ) ;  controller controller = create controller (  ) ;  open shift client open shift client = controller . get open shift client or jenkinshift (  ) ;  build config build config = null; if  ( open shift client  !  =  null )   {  try  {  build config = open shift client . build configs (  )  . with name ( project name )  . get (  ) ;  }  catch  (   exception e )   {  log . error ( "" failed to load build config for ""  +  namespace  +  "" / "" +  project name +  "" .  "" +  e e ) ;  }  log . info ( "" loaded build config for ""  +  namespace  +  "" / "" +  project name +  "" "" +  build config ) ;  }  boolean found existing git url = false; if  ( build config  !  =  null )   {   build config spec spec = build config . get spec (  ) ; if  ( spec  !  =  null )   {   build source source = spec . get source (  ) ; if  ( source  !  =  null )   {   git build source git = source . get git (  ) ; if  ( git  !  =  null )   {  git url = git . get uri (  ) ; log . info ( "" loaded existing  build config git url: ""  +  git url ) ; found existing git url = true;  }   local object reference source secret = source . get source secret (  ) ; if  ( source secret  !  =  null )   {  git source secret name = source secret . get name (  ) ;  }   }   }  if  (  ! found existing git url )   {  log . warn ( "" could not find a git url in the loaded  build config: ""  +  build config ) ;  }  log . info ( "" loaded git source secret name: ""  +  git source secret name ) ;  }  log . info ( ""git url is: ""  +  git url ) ; if  ( build config  =  =  null )   {  build config = new  build config (  ) ;  }   object meta metadata = get or create metadata ( build config ) ; metadata . set name ( project name ) ; metadata . set labels ( labels ) ; put annotations ( metadata annotations ) ;  map <  string  string >  current annotations = metadata . get annotations (  ) ; if  (  ! current annotations . contains key (  annotations .  builds .  g i t _  c l o n e _  u r l )  )   {  current annotations . put (  annotations .  builds .  g i t _  c l o n e _  u r l git url ) ;  }   string local git url = get local git url (  ) ; if  (  ! current annotations . contains key (  annotations .  builds .  l o c a l _  g i t _  c l o n e _  u r l )  &&  strings . is not blank ( local git url )  )   {  current annotations . put (  annotations .  builds .  l o c a l _  g i t _  c l o n e _  u r l local git url ) ;  }  if  (  strings . is not blank ( local git url )  )   {  git url = local git url;  }   builds . configure default build config ( build config name git url found existing git url build image stream build image tag s2i custom builder image secret jenkins url ) ; try  {  get log (  )  . info ( "" about to apply build config: ""  +  new  j s o n object (  kubernetes helper . to json ( build config )  )  . to string ( 4 )  ) ; controller . apply build config ( build config ""maven"" ) ; get log (  )  . info ( "" created build configuration for ""  +  name  +  "" in namespace: "" +  controller . get namespace (  )  +  "" at "" +  kubernetes . get master url (  )  ) ;  }  catch  (   exception e )   {  get log (  )  . error ( "" failed to create  build config for ""  +   kubernetes helper . to json ( build config )   +  "" .  "" +  e e ) ;  }  this . jenkins job name = name; if  ( is register web hooks (  )  )   {  register web hooks (  ) ; get log (  )  . info ( ""webhooks done"" ) ;  }  if  ( modified config )   {  if  ( basedir  =  =  null )   {  get log (  )  . error ( "" could not save updated ""  +   project configs .  f i l e _  n a m e  +  "" due to missing basedir"" ) ;  }  else  {  try  {   project configs . save to folder ( basedir project config true ) ; get log (  )  . info ( "" updated ""  +   project configs .  f i l e _  n a m e ) ;  }  catch  (   i o exception e )   {  get log (  )  . error ( "" could not save updated ""  +   project configs .  f i l e _  n a m e  +  "": "" +  e e ) ;  }   }   }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,exists xml u r l,"protected string url text )  {   http u r l connection connection = null; try  {   u r l url = new  u r l ( url text ) ; connection =  (  http u r l connection ) url . open connection (  ) ; connection . set request method ( "" g e t"" ) ; connection . set request property ( "" accept"" ""application / xml"" ) ; int response code = connection . get response code (  ) ; get log (  )  . info ( "" checking  u r l exists got response code ""  +  response code  +  "" on url "" +  url text ) ; if  ( response code  >  =  200 && response code  <  300 )   {  return true;  }   }  catch  (   throwable e )   {   }  return false;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,get basedir,public file   (  )  {  return basedir;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,get branch,public string   (  )  {  return branch;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,get build image stream,public string   (  )  {  return build image stream;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,get build image tag,public string   (  )  {  return build image tag;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,get build parameters,"protected map <  string  string >    (  )  {   map <  string  string >  answer = new  hash map <  >  (  ) ; if  ( project config  !  =  null )   {   string flow = project config . get pipeline (  ) ; if  ( flow  !  =  null &&  strings . is not blank ( git url )  )   {  answer . put ( "" g i t _  u r l"" git url ) ;  }   map <  string  string >  parameters = project config . get build parameters (  ) ; if  ( parameters  !  =  null )   {  answer . put all ( parameters ) ;  }  if  (  ! answer . contains key ( "" v e r s i o n _  p r e f i x"" )  )   {  answer . put ( "" v e r s i o n _  p r e f i x"" ""1 . 0"" ) ;  }   }  return answer;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,get chat room link,"protected string   (  lets chat client letschat )  {  if  ( letschat  !  =  null )   {  try  {   string url = letschat . get address (  ) ;  string slug = evaluate room expression ( letschat room expression ) ; if  (  strings . is not blank ( url )  &&  strings . is not blank ( slug )  )   {   room d t o room = letschat . get or create room ( slug ) ; if  ( room  !  =  null )   {   string room id = room . get id (  ) ; if  (  strings . is not blank ( room id )  )   {  return  u r l utils . path join ( url "" / # !  / room / ""  +  room id ) ;  }   }   }   }  catch  (   exception e )   {  get log (  )  . error ( "" failed to get the link to the chat room: ""  +  e e ) ;  }   }  return null;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,get fabric console namespace,public string   (  )  {  return fabric8 console namespace;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,get full name,public string   (  )  {  return full name;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,get git repo client,public git repo client   (  )  {  if  ( git repo client  =  =  null )   {  git repo client =  git repo kubernetes . create git repo client ( get kubernetes (  )  username password ) ; if  ( git repo client  !  =  null )   {  if  (  strings . is null or blank ( username )  )   {  username = git repo client . get username (  ) ;  }  if  (  strings . is null or blank ( password )  )   {  password = git repo client . get password (  ) ;  }   }   }  return git repo client;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,get git url,public string   (  )  {  return git url;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,get issue tracker label,public string   (  )  {  return issue tracker label;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,get issue tracker url,public string   (  )  {  return issue tracker url;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,get jenkins job,public string   (  )  {  return jenkins job;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,get jenkins monitor view,public string   (  )  {  return jenkins monitor view;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,get jenkins namespace,public string   (  )  {  return jenkins namespace;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,get jenkins pipeline view,public string   (  )  {  return jenkins pipeline view;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,get jenkins service url,protected string   ( boolean external url )  {  return get service url (  service names .  j e n k i n s external url namespace jenkins namespace ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,get kubernetes,public kubernetes client   (  )  {  if  ( kubernetes  =  =  null )   {   config config = new  config builder (  )  . with namespace ( namespace )  . build (  ) ; kubernetes = new  default kubernetes client ( config ) ;  }  return kubernetes;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,get letschat room expression,public string   (  )  {  return letschat room expression;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,get letschat room link label,public string   (  )  {  return letschat room link label;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,get local git url,protected string   (  )  {  return local git url;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,get log,public logger   (  )  {  return log;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,get namespace,public string   (  )  {  return namespace;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,get password,public string   (  )  {  return password;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,get project config,public project config   (  )  {  return project config;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,get project name,public string   (  )  {  return project name;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,get project page link,"protected string   (  taiga client taiga  project d t o taiga project  string project relative page )  {  if  ( taiga  !  =  null && taiga project  !  =  null )   {  try  {   string url = taiga . get address (  ) ;  string slug = taiga project . get slug (  ) ; if  (  strings . is null or blank ( slug )  )   {  slug = taiga project slug;  }   string user name = taiga . get username (  ) ; if  (  strings . is null or blank ( slug )  )   {  slug = user name  +  "" - ""  +  taiga project name;  }  if  (  strings . is not blank ( url )  &&  strings . is not blank ( slug )  &&  strings . is not blank ( project relative page )  )   {  return  u r l utils . path join ( url "" / project / "" slug  +  "" / "" project relative page ) ;  }   }  catch  (   exception e )   {  get log (  )  . error ( "" failed to get project page link for ""  +  project relative page  +  "" : "" +  e e ) ;  }   }  return null;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,get releases label,public string   (  )  {  return releases label;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,get releases url,public string   (  )  {  return releases url;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,get repo name,public string   (  )  {  return repo name;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,get repository browse label,public string   (  )  {  return repository browse label;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,get repository browse link,public string   (  )  {  return repository browse link;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,get secret,public string   (  )  {  return secret;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,get service url,"private string   (  string service name boolean service external  string .  .  .  namespaces )  {   list <  string >  namespace list = new  array list <  >  (  arrays . as list ( namespaces )  ) ;  string[] defaults =  {  kubernetes helper . default namespace (  )  ""default"" } ; for  (   string default namespace : defaults )   {  if  ( namespace list . contains ( default namespace )  )   {  namespace list . add ( default namespace ) ;  }   }  for  (   string namespace : namespace list )   {  try  {  return  kubernetes helper . get service u r l ( get kubernetes (  )  service name namespace ""http"" service external ) ;  }  catch  (   exception e )   {   }   }  return null;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,get taiga project link label,public string   (  )  {  return taiga project link label;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,get taiga project link page,public string   (  )  {  return taiga project link page;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,get taiga project name,public string   (  )  {  return taiga project name;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,get taiga project slug,public string   (  )  {  return taiga project slug;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,get taiga team link label,public string   (  )  {  return taiga team link label;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,get taiga team link page,public string   (  )  {  return taiga team link page;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,get team label,public string   (  )  {  return team label;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,get team url,public string   (  )  {  return team url;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,get username,public string   (  )  {  return username;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,is letschat enabled,public enabled;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,is recreate mode,public mode;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,is register web hooks,public web hooks;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,is taiga auto create,public auto create;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,is taiga enabled,public enabled;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,is trigger jenkins job,public jenkins job;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,is try load config file from remote git,public load config file from remote git;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,load config file,"protected config  =  =  null )   {   git repo client git repo = get git repo client (  ) ; boolean has local config = false; if  ( basedir  !  =  null && basedir . is directory (  )  )   {  project config =  project configs . load from folder ( basedir ) ; if  (  ! project config . is empty (  )  ||  project configs . has config file ( basedir )  )   {  has local config = true;  }   }  if  (  ! has local config && try load config file from remote git &&  strings . is not blank ( repo name ) && git repo  !  =  null )   {  try  {   input stream input = git repo . get raw file ( username repo name branch  project configs .  f i l e _  n a m e ) ; if  ( input  !  =  null )   {  try  {  get log (  )  . info ( "" parsing ""  +   project configs .  f i l e _  n a m e  +  "" from the git repo "" +  repo name +  "" user "" +  username +  "" in branch "" +  branch ) ; project config =  project configs . parse project config ( input ) ;  }  catch  (   i o exception e )   {  get log (  )  . warn ( "" failed to parse ""  +   project configs .  f i l e _  n a m e  +  "" from the repo "" +  repo name +  "" for user "" +  username +  "" branch: "" +  branch +  "" .  "" +  e e ) ;  }   }   }  catch  (   exception e )   {  get log (  )  . warn ( "" failed to load ""  +   project configs .  f i l e _  n a m e  +  "" from the repo "" +  repo name +  "" for user "" +  username +  "" branch: "" +  branch +  "" .  "" +  e e ) ;  }   }   }  if  ( project config  !  =  null )   {   string chat room = project config . get chat room (  ) ; if  (  strings . is not blank ( chat room )  )   {  get log (  )  . info ( "" found chat room: ""  +  chat room ) ; letschat room expression = chat room;  }   string issue project name = project config . get issue project name (  ) ; if  (  strings . is not blank ( issue project name )  )   {  taiga project name = issue project name;  }   }  else  {  get log (  )  . info ( "" no fabric8 . yml file found for ""  +  basedir ) ;  }  if  (  strings . is null or blank ( git url )  )   {  try  {  git url =  git helpers . extract git url ( basedir ) ;  }  catch  (   i o exception e )   {  get log (  )  . warn ( "" could not load git  u r l from directory: ""  +  e e ) ;  }   }  if  (  strings . is null or blank ( taiga project name )  )   {  taiga project name = repo name;  }  if  (  strings . is null or blank ( taiga project slug )  )   {  taiga project slug = taiga project name;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,load jenkins build template,"public string   (  logger log )  {   string template = null;  string template name = ""jenkins build config . xml"";  u r l url =  dev ops connector . class . get resource ( template name ) ; if  ( url  =  =  null )   {  log . error ( "" could not load ""  +  template name  +  "" on the classpath ! "" ) ;  }  else  {  try  {  template =  i o helpers . load fully ( url ) ;  }  catch  (   i o exception e )   {  log . error ( "" failed to load template ""  +  template name  +  "" from "" +  url +  "" .  "" +  e e ) ;  }   }  return template;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,parse last build json,"protected json node   (  string url text )  {   http u r l connection connection = null;  string message = null; try  {   u r l url = new  u r l ( url text ) ; connection =  (  http u r l connection ) url . open connection (  ) ; connection . set request method ( "" g e t"" ) ; connection . set request property ( "" content -  type"" ""application / json"" ) ; int status = connection . get response code (  ) ; message = connection . get response message (  ) ; get log (  )  . info ( "" got response code from  u r l: ""  +  url  +  "" "" +  status +  "" message: "" +  message ) ; if  ( status  !  =  200 ||  strings . is null or blank ( message )  )   {  get log (  )  . debug ( "" failed to load  u r l ""  +  url  +  "" .   status: "" +  status +  "" message: "" +  message ) ;  }  else  {   object mapper object mapper = new  object mapper (  ) ; return object mapper . reader (  )  . read tree ( message ) ;  }   }  catch  (   exception e )   {  get log (  )  . debug ( "" failed to load  u r l ""  +  url text  +  "" .  "" +  e e ) ;  }  finally  {  if  ( connection  !  =  null )   {  connection . disconnect (  ) ;  }   }  return null;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,parse xml text,protected document   (  string template )  throws  parser configuration exception   s a x exception   i o exception  {   document builder document builder =  document builder factory . new instance (  )  . new document builder (  ) ; return document builder . parse ( new  input source ( new  string reader ( template )  )  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,post jenkins build,"protected string job name  string xml boolean create )  {   string address = get service url (  service names .  j e n k i n s false namespace jenkins namespace ) ; if  (  strings . is not blank ( address )  )   {   string job url =  u r l utils . path join ( address "" / job"" job name ""config . xml"" ) ; if  ( create &&  ! exists xml u r l ( job url )  )   {  job url =  u r l utils . path join ( address "" / create item"" )   +  "" ? name = ""  +  job name;  }  get log (  )  . info ( "" p o s t i n g the jenkins job to: ""  +  job url ) ; get log (  )  . debug ( "" jenkins  x m l: ""  +  xml ) ;  http u r l connection connection = null; try  {   u r l url = new  u r l ( job url ) ; connection =  (  http u r l connection ) url . open connection (  ) ; connection . set request method ( "" p o s t"" ) ; connection . set request property ( "" content -  type"" ""text / xml"" ) ; connection . set do output ( true ) ;  output stream writer out = new  output stream writer ( connection . get output stream (  )  ) ; out . write ( xml ) ; out . close (  ) ; int status = connection . get response code (  ) ;  string message = connection . get response message (  ) ; get log (  )  . info ( "" got response code from  jenkins: ""  +  status  +  "" message: "" +  message ) ; if  ( status  !  =  200 )   {  get log (  )  . error ( "" failed to register job ""  +  job name  +  "" on "" +  job url +  "" .   status: "" +  status +  "" message: "" +  message ) ;  }   }  catch  (   exception e )   {  get log (  )  . error ( "" failed to register jenkins on ""  +  job url  +  "" .  "" +  e e ) ;  }  finally  {  if  ( connection  !  =  null )   {  connection . disconnect (  ) ;  }   }   }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,put annotations,private object meta metadata  map <  string  string >  annotations )  {   map <  string  string >  current = metadata . get annotations (  ) ; if  ( current  =  =  null )   {  current = new  hash map <  >  (  ) ;  }  for  (   map .  entry <  string  string >  entry : annotations . entry set (  )  )   {   string key = entry . get key (  ) ;  string value = entry . get value (  ) ; current . put ( key value ) ;  }  metadata . set annotations ( current ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,register web hooks,"public strings . is not blank ( jenkins job name )  )   {  jenkins job template = create jenkins job ( jenkins job name jenkins job url ) ; get log (  )  . info ( ""created jenkins job"" ) ;  }  if  (  strings . is not blank ( jenkins job url )  &&  strings . is not blank ( jenkins job name )  )   {  create jenkins webhook ( jenkins job url ) ;  }  if  ( taiga  !  =  null && taiga project  !  =  null )   {  create taiga webhook ( taiga taiga project ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,remove build parameter,"public string   (  logger log  string template  string parameter name )  {  try  {   document doc = parse xml text ( template ) ;  element root element = doc . get document element (  ) ;  node list string defs = root element . get elements by tag name ( ""hudson . model .  string parameter definition"" ) ; if  ( string defs  !  =  null )   {  for  ( int i = 0  size = string defs . get length (  ) ; i  <  size; i +  +  )   {   node item = string defs . item ( i ) ; if  ( item instanceof  element )   {   element element =  (  element ) item;  element name =  dom helper . first child ( element ""name"" ) ; if  ( name  !  =  null )   {   string text content = name . get text content (  ) ; if  ( text content  !  =  null )   {  if  ( parameter name . equals ( text content . trim (  )  )  )   {   node parameter definitions = item . get parent node (  ) ;  node parameters definition property = parameter definitions  !  =  null  ?  parameter definitions . get parent node (  )  : null;  dom helper . detach ( item ) ; if  (  dom helper . first child element ( parameter definitions )   =  =  null )   {   dom helper . detach ( parameter definitions ) ;  }  if  (  dom helper . first child element ( parameters definition property )   =  =  null )   {   dom helper . detach ( parameters definition property ) ;  }  return  dom helper . to xml ( doc ) ;  }   }   }   }   }   }   }  catch  (   exception e )   {  log . error ( "" failed to remove the build parameter from the  jenkins  x m l .  ""  +  e e ) ;  }  return template;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,replace expression,"protected string   (  string text  string key  string value )  {  if  (  strings . is not blank ( key )  &&  strings . is not blank ( value )  )   {   string replace = ""$ { ""  +  key  +  "" } ""; return text . replace ( replace value ) ;  }  else  {  return text;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,set basedir,public file basedir )  {  this . basedir = basedir;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,set branch,public string branch )  {  this . branch = branch;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,set build image stream,public string build image stream )  {  this . build image stream = build image stream;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,set build image tag,public string build image tag )  {  this . build image tag = build image tag;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,set fabric console namespace,public string fabric8 console namespace )  {  this . fabric8 console namespace = fabric8 console namespace;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,set full name,public string full name )  {  this . full name = full name;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,set git repo client,public git repo client git repo client )  {  this . git repo client = git repo client;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,set git url,public string git url )  {  this . git url = git url;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,set issue tracker label,public string issue tracker label )  {  this . issue tracker label = issue tracker label;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,set issue tracker url,public string issue tracker url )  {  this . issue tracker url = issue tracker url;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,set jenkins job,public string jenkins job )  {  this . jenkins job = jenkins job;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,set jenkins monitor view,public string jenkins monitor view )  {  this . jenkins monitor view = jenkins monitor view;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,set jenkins namespace,public string jenkins namespace )  {  this . jenkins namespace = jenkins namespace;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,set jenkins pipeline view,public string jenkins pipeline view )  {  this . jenkins pipeline view = jenkins pipeline view;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,set kubernetes,public kubernetes client kubernetes )  {  this . kubernetes = kubernetes;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,set letschat enabled,public enabled )  {  this . letschat enabled = letschat enabled;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,set letschat room expression,public string letschat room expression )  {  this . letschat room expression = letschat room expression;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,set letschat room link label,public string letschat room link label )  {  this . letschat room link label = letschat room link label;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,set local git url,public string local git url )  {  this . local git url = local git url;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,set log,public logger log )  {  this . log = log;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,set namespace,public string namespace )  {  this . namespace = namespace;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,set password,public string password )  {  this . password = password;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,set project config,public project config project config )  {  this . project config = project config;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,set project name,public string project name )  {  this . project name = project name;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,set recreate mode,public mode )  {  this . recreate mode = recreate mode;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,set register web hooks,public web hooks )  {  this . register web hooks = register web hooks;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,set releases label,public string releases label )  {  this . releases label = releases label;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,set releases url,public string releases url )  {  this . releases url = releases url;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,set repo name,public string repo name )  {  this . repo name = repo name;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,set repository browse label,public string repository browse label )  {  this . repository browse label = repository browse label;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,set repository browse link,public string repository browse link )  {  this . repository browse link = repository browse link;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,set secret,public string secret )  {  this . secret = secret;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,set taiga auto create,public auto create )  {  this . taiga auto create = taiga auto create;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,set taiga enabled,public enabled )  {  this . taiga enabled = taiga enabled;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,set taiga project link label,public string taiga project link label )  {  this . taiga project link label = taiga project link label;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,set taiga project link page,public string taiga project link page )  {  this . taiga project link page = taiga project link page;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,set taiga project name,public string taiga project name )  {  this . taiga project name = taiga project name;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,set taiga project slug,public string taiga project slug )  {  this . taiga project slug = taiga project slug;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,set taiga team link label,public string taiga team link label )  {  this . taiga team link label = taiga team link label;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,set taiga team link page,public string taiga team link page )  {  this . taiga team link page = taiga team link page;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,set team label,public string team label )  {  this . team label = team label;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,set team url,public string team url )  {  this . team url = team url;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,set trigger jenkins job,public jenkins job )  {  this . trigger jenkins job = trigger jenkins job;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,set try load config file from remote git,public load config file from remote git )  {  this . try load config file from remote git = try load config file from remote git;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,set username,public string username )  {  this . username = username;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,to string,"override public  string   (  )  {  return "" dev ops connector { ""  +  ""git url = '""  +  git url  +  '\'' +  ""  basedir = "" +  basedir +  ""  username = '"" +  username +  '\'' +  ""  branch = '"" +  branch +  '\'' +  ""  repo name = '"" +  repo name +  '\'' +  ' } ';  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,trigger jenkins web hook,"protected string job url  string trigger url  string secret )  {   string last build =  u r l utils . path join ( job url "" / last build / api / json"" ) ;  json node last build json = parse last build json ( last build ) ;  json node building = null; if  ( last build json  !  =  null && last build json . is object (  )  )   {  building = last build json . get ( ""building"" ) ; if  ( building  !  =  null && building . is boolean (  )  )   {  if  ( building . boolean value (  )  )   {  get log (  )  . info ( "" build is already running so lets not trigger another one ! "" ) ; return;  }   }   }  get log (  )  . info ( "" got last build  j s o n: ""  +  last build json  +  "" building: "" +  building ) ; get log (  )  . info ( "" triggering  jenkins webhook: ""  +  trigger url ) ;  string json = "" {  } "";  http u r l connection connection = null; try  {   u r l url = new  u r l ( trigger url ) ; connection =  (  http u r l connection ) url . open connection (  ) ; connection . set request method ( "" p o s t"" ) ; connection . set request property ( "" content -  type"" ""application / json"" ) ; connection . set do output ( true ) ;  output stream writer out = new  output stream writer ( connection . get output stream (  )  ) ; out . write ( json ) ; out . close (  ) ; int status = connection . get response code (  ) ;  string message = connection . get response message (  ) ; get log (  )  . info ( "" got response code from  jenkins: ""  +  status  +  "" message: "" +  message ) ; if  ( status  !  =  200 )   {  get log (  )  . error ( "" failed to trigger job ""  +  trigger url  +  "" .   status: "" +  status +  "" message: "" +  message ) ;  }   }  catch  (   exception e )   {  get log (  )  . error ( "" failed to trigger jenkins on ""  +  trigger url  +  "" .  "" +  e e ) ;  }  finally  {  if  ( connection  !  =  null )   {  connection . disconnect (  ) ;  }   }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,update environment config map,"public map <  string  string >  environments  kubernetes client kubernetes  map <  string  string >  annotations  string console url )  {  if  ( environments  !  =  null &&  ! environments . is empty (  )  )   {   string name =  environments .  e n v i r o n m e n t s _  c o n f i g _  m a p _  n a m e; get log (  )  . info ( "" ensuring  config map ""  +  name  +  "" is populated with enviroments: "" +  environments ) ;  config map environments config map =  environments . get or create environments ( kubernetes ) ; boolean updated env config map = false; for  (   map .  entry <  string  string >  entry : environments . entry set (  )  )   {   string label = entry . get key (  ) ;  string value = entry . get value (  ) ;  string key = value; annotations . put ( ""fabric8 . link . environment . ""  +  key  +  "" / label"" label ) ; if  (  strings . is not blank ( console url )  )   {   string environment link =  u r l utils . path join ( console url "" / kubernetes / pods ? namespace = ""  +  value ) ; annotations . put ( ""fabric8 . link . environment . ""  +  key  +  "" / url"" environment link ) ; add link ( label environment link ) ;  }   string data key = label . to lower case (  )  . replace ( ' ' ' - ' ) ; boolean updated =  environments . ensure environment added ( environments config map data key label value ) ; updated env config map = updated || updated env config map;  }  if  ( updated env config map )   {   string ns = kubernetes . get namespace (  ) ; get log (  )  . info ( "" updating  config map ""  +  name  +  "" with data: "" +  environments config map . get data (  )  ) ; if  (  kubernetes helper . get resource version ( environments config map )   =  =  null )   {  kubernetes . config maps (  )  . in namespace ( ns )  . create ( environments config map ) ;  }  else  {  try  {  kubernetes . config maps (  )  . in namespace ( ns )  . with name ( name )  . replace ( environments config map ) ;  }  catch  (   exception e )   {  get log (  )  . error ( "" failed to update the  environment  config map with data: ""  +  environments  +  "" .   reason: "" +  e e ) ;  }   }   }  else  {  get log (  )  . info ( "" no need to update  config map ""  +  name  +  "" as already has data: "" +  environments config map . get data (  )  ) ;  }   }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-jgroups\src\main\java\io\fabric8\jgroups\KubernetesDiscovery.java,discovery request received,public address sender  string logical _ name  physical address physical _ addr )  {  super . discovery request received ( sender logical _ name physical _ addr ) ; if  ( physical _ addr  !  =  null )   {  if  (  ! kubernetes hosts . contains ( physical _ addr )  )  dynamic _ hosts . add if absent ( physical _ addr ) ;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-jgroups\src\main\java\io\fabric8\jgroups\KubernetesDiscovery.java,down,public object   (  event evt )  {   object retval = super . down ( evt ) ; switch  ( evt . get type (  )  )   {  case  event .  v i e w _  c h a n g e: for  (   address logical _ addr : members )   {   physical address physical _ addr =  (  physical address ) down _ prot . down ( new  event (  event .  g e t _  p h y s i c a l _  a d d r e s s logical _ addr )  ) ; if  ( physical _ addr  !  =  null &&  ! kubernetes hosts . contains ( physical _ addr )  )   {  dynamic _ hosts . add if absent ( physical _ addr ) ;  }   }  break; case  event .  s e t _  p h y s i c a l _  a d d r e s s:  tuple <  address  physical address >  tuple =  (  tuple <  address  physical address >  ) evt . get arg (  ) ;  physical address physical _ addr = tuple . get val2 (  ) ; if  ( physical _ addr  !  =  null &&  ! kubernetes hosts . contains ( physical _ addr )  )  dynamic _ hosts . add if absent ( physical _ addr ) ; break;  }  return retval;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-jgroups\src\main\java\io\fabric8\jgroups\KubernetesDiscovery.java,filter pods,private list <  pod >    (  list <  pod >  pods  filter <  pod >  pod filter )  {   list <  pod >  result = new  array list <  >  (  ) ; for  (   pod pod : pods )   {  if  ( pod filter . matches ( pod )  )   {  result . add ( pod ) ;  }   }  return result;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-jgroups\src\main\java\io\fabric8\jgroups\KubernetesDiscovery.java,find kubernetes hosts,"public list <  physical address >    (  )  {   list <  physical address >  addresses = new  array list <  >  (  ) ;  map <  string  string >  labels =  collections . singleton map (  constants .  j g r o u p s _  c l u s t e r _  n a m e cluster _ name ) ; for  (   pod pod : client . pods (  )  . with labels ( labels )  . list (  )  . get items (  )  )   {   list <  container >  containers =  kubernetes helper . get containers ( pod ) ; for  (   container container : containers )   {  for  (   container port port : container . get ports (  )  )   {  if  (  constants .  j g r o u p s _  t c p _  p o r t . equals ( port . get name (  )  )  )   {  try  {   string ip = pod . get status (  )  . get pod i p (  ) ; if  ( ip  !  =  null )   {  addresses . add ( new  ip address ( ip port . get container port (  )  )  ) ;  }   }  catch  (   exception ex )   {   l o g g e r . warn ( "" failed to create  address  {  }  . "" pod . get status (  )  . get pod i p (  )  ) ;  }   }   }   }   }  return addresses;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-jgroups\src\main\java\io\fabric8\jgroups\KubernetesDiscovery.java,find members,override public void   (  list <  address >  members boolean initial _ discovery  responses responses )  {  kubernetes hosts = find kubernetes hosts (  ) ;  physical address physical _ addr =  (  physical address ) down ( new  event (  event .  g e t _  p h y s i c a l _  a d d r e s s local _ addr )  ) ;  ping data data = new  p
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-jgroups\src\main\java\io\fabric8\jgroups\KubernetesDiscovery.java,init,override public void   (  )  throws  exception  {  super . init (  ) ; if  (  !  strings . is null or blank ( address )  )   {  client = new  default kubernetes client ( new  config builder (  )  . with master url ( address )  . build (  )  ) ;  }  else  {  client = new  default kubernetes client (  ) ;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-jgroups\src\main\java\io\fabric8\jgroups\KubernetesDiscovery.java,is dynamic,override public boolean   (  )  {  return true;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-checks\src\main\java\io\fabric8\karaf\checks\Check.java,check,public string name  string long description )  {  this . name = name; this . long description = long description;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-checks\src\main\java\io\fabric8\karaf\checks\Check.java,get long description,public string   (  )  {  return long description;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-checks\src\main\java\io\fabric8\karaf\checks\Check.java,get name,public string   (  )  {  return name;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-checks\src\main\java\io\fabric8\karaf\checks\Check.java,long description,public check   (  string long description )  {  this . long description = long description; return this;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-checks\src\main\java\io\fabric8\karaf\checks\Check.java,name,public check   (  string name )  {  this . name = name; return this;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-checks\src\main\java\io\fabric8\karaf\checks\Check.java,set long description,public string long description )  {  this . long description = long description;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-checks\src\main\java\io\fabric8\karaf\checks\Check.java,set name,public string name )  {  this . name = name;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-checks\src\main\java\io\fabric8\karaf\checks\internal\AbstractChecker.java,abstract checker,public framework util . get bundle ( get class (  )  ) ; bundle context = bundle . get bundle context (  ) ; system bundle = bundle context . get bundle ( 0 ) ; system bundle context = system bundle . get bundle context (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-blueprint\src\main\java\io\fabric8\karaf\blueprint\Fabric8PropertyEvaluator.java,fabric property evaluator,public atomic reference <  >  (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-blueprint\src\main\java\io\fabric8\karaf\blueprint\Fabric8PropertyEvaluator.java,bind resolver,protected placeholder resolver resolver )  {  this . resolver . set ( resolver ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-blueprint\src\main\java\io\fabric8\karaf\blueprint\Fabric8PropertyEvaluator.java,evaluate,override public  string   (  string key  dictionary <  string  string >  dictionary )  {   placeholder resolver res = resolver . get (  ) ;  string value = null; if  ( res  !  =  null )   {  value = res . resolve ( key ) ;  }  return value  !  =  null  ?  value : dictionary . get ( key ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-blueprint\src\main\java\io\fabric8\karaf\blueprint\Fabric8PropertyEvaluator.java,unbind resolver,protected placeholder resolver resolver )  {  this . resolver . compare and set ( resolver null ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-checks\src\main\java\io\fabric8\karaf\checks\internal\BundleState.java,check bundle,"override protected  check   (  bundle bundle )  {  if  (  ! is active ( bundle )  &&  ! is fragment ( bundle )  )   {  return new  check ( ""bundle - state"" "" bundle ""  +  bundle . get bundle id (  )   +  "" is not started"" ) ;  }  return null;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-checks\src\main\java\io\fabric8\karaf\checks\internal\BlueprintState.java,blueprint state,public context . register service (  blueprint listener . class this null ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-checks\src\main\java\io\fabric8\karaf\checks\internal\BlueprintState.java,blueprint event,override public void   (  blueprint event event )  {  states . put ( event . get bundle (  )  . get bundle id (  )  event ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-checks\src\main\java\io\fabric8\karaf\checks\internal\BlueprintState.java,check bundle,"override public  check   (  bundle bundle )  {   blueprint event event = states . get ( bundle . get bundle id (  )  ) ; if  ( event  !  =  null && event . get type (  )   !  =   blueprint event .  c r e a t e d && is active ( bundle )  )   {  return new  check ( ""blueprint - state"" "" blueprint bundle ""  +  bundle . get bundle"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-checks\src\main\java\io\fabric8\karaf\checks\internal\BlueprintState.java,get state,"private string   (  blueprint event blueprint event )  {  switch  ( blueprint event . get type (  )  )   {  case  blueprint event .  c r e a t i n g: return "" c r e a t i n g""; case  blueprint event .  c r e a t e d: return "" c r e a t e d""; case  blueprint event .  d e s t r o y i n g: return "" d e s t r o y i n g""; case  blueprint event .  d e s t r o y e d: return "" d e s t r o y e d""; case  blueprint event .  f a i l u r e: return "" f a i l u r e""; case  blueprint event .  g r a c e _  p e r i o d: return "" g r a c e _  p e r i o d""; case  blueprint event .  w a i t i n g: return "" w a i t i n g""; default : return "" u n k n o w n"";  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-checks\src\main\java\io\fabric8\karaf\checks\internal\BootFeaturesState.java,boot features installed,"private bundle bundle )  {  if  ( bundle . get version (  )  . get major (  )   <  4 )   {   file file = bundle . get bundle context (  )  . get data file ( "" features service state . properties"" ) ; if  (  ! file . exists (  )  )   {  return false;  }   properties props = new  properties (  ) ; try  (  input stream is = new  file input stream ( file )  )  {  props . load ( is ) ;  }  catch  (   i o exception e )   {  return false;  }  return  boolean . parse boolean (  (  string ) props . get ( ""boot features installed"" )  ) ;  }  else  {   service reference <  ?  >  ref = bundle context . get service reference ( ""org . apache . karaf . features .  boot finished"" ) ; return ref  !  =  null;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-checks\src\main\java\io\fabric8\karaf\checks\internal\BootFeaturesState.java,do check,"override protected  list <  check >    (  )  {  for  (   bundle bundle : system bundle context . get bundles (  )  )   {  if  ( ""org . apache . karaf . features . core"" . equals ( bundle . get symbolic name (  )  )  )   {  if  (  ! boot features installed ( bundle )  )   {  return  collections . singleton list ( new  check ( ""boot - "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-checks\src\main\java\io\fabric8\karaf\checks\internal\FrameworkState.java,do check,"override protected  list <  check >    (  )  {  int bsl =  integer . parse int (  system . get property (  constants .  f r a m e w o r k _  b e g i n n i n g _  s t a r t l e v e l )  ) ; int sl = system bundle . adapt (  framework start level . class )  . get start level (  ) ; if  ( sl  <  bsl )   {  return  collections . singleton list ( new  check ( """
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-checks\src\main\java\io\fabric8\karaf\checks\internal\CamelState.java,camel state,public server = new  service tracker <  >  ( bundle context  m bean server . class null ) ; this . mbean server . open (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-checks\src\main\java\io\fabric8\karaf\checks\internal\CamelState.java,do check,"override protected  list <  check >    (  )  {   m bean server server = this . mbean server . get service (  ) ; if  ( server  !  =  null )   {  try  {   list <  check >  checks = new  array list <  >  (  ) ;  set <  object name >  contexts = server . query names ( new  object name ( ""org . apache . camel:type = context *"" )  null ) ; fo"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-checks\src\main\java\io\fabric8\karaf\checks\internal\HealthCheckServlet.java,health check servlet,public copy on write array list <  health checker >  checkers )  {  this . checkers = checkers;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-checks\src\main\java\io\fabric8\karaf\checks\internal\HealthCheckServlet.java,do get,override protected void   (  http servlet request req  http servlet response resp )  throws  servlet exception   i o exception  {   list <  check >  checks = new  array list <  >  (  ) ; for  (   health checker checker : checkers )   {  checks . add all ( checker . get failing health checks (  )  ) ;  }  if  ( check
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-checks\src\main\java\io\fabric8\karaf\checks\internal\ChecksService.java,checks service,public framework state (  )  ) ; bind ( new  bundle state (  )  ) ; bind ( new  boot features state (  )  ) ; try  {  bind ( new  blueprint state (  )  ) ;  }  catch  (   throwable t )   {   }  try  {  bind ( new  scr state (  )  ) ;  }  catch  (   throwable t )   {   }  try  {  bind ( new  war state (  )  ) ;  }  catch  (   throwable t )   {   }  bind ( new  camel state (  )  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-checks\src\main\java\io\fabric8\karaf\checks\internal\ChecksService.java,activate,activate void   (  map <  string  ?  >  configuration )  throws  servlet exception   namespace exception  {  http service . register servlet ( readiness check path new  readiness check servlet ( readiness checkers )  null null ) ; http service . register servlet ( health check path new  health check
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-checks\src\main\java\io\fabric8\karaf\checks\internal\ChecksService.java,bind,private object checker )  {  if  ( checker instanceof  readiness checker )   {  bind readiness checkers (  (  readiness checker ) checker ) ;  }  if  ( checker instanceof  health checker )   {  bind health checkers (  (  health checker ) checker ) ;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-checks\src\main\java\io\fabric8\karaf\checks\internal\ChecksService.java,bind health checkers,void health checker value )  {  health checkers . add ( value ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-checks\src\main\java\io\fabric8\karaf\checks\internal\ChecksService.java,bind http service,void http service http service )  {  this . http service = http service;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-checks\src\main\java\io\fabric8\karaf\checks\internal\ChecksService.java,bind readiness checkers,void readiness checker value )  {  readiness checkers . add ( value ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-checks\src\main\java\io\fabric8\karaf\checks\internal\ChecksService.java,deactivate,deactivate void   (  )  {  http service . unregister ( readiness check path ) ; http service . unregister ( health check path ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-checks\src\main\java\io\fabric8\karaf\checks\internal\ChecksService.java,unbind health checkers,void health checker value )  {  health checkers . remove ( value ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-checks\src\main\java\io\fabric8\karaf\checks\internal\ChecksService.java,unbind http service,void http service service )  {  this . http service = null;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-checks\src\main\java\io\fabric8\karaf\checks\internal\ChecksService.java,unbind readiness checkers,void readiness checker value )  {  readiness checkers . remove ( value ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-checks\src\main\java\io\fabric8\karaf\checks\internal\ScrState.java,scr state,public service tracker <  >  ( bundle context  scr service . class null ) ; tracker . open (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-checks\src\main\java\io\fabric8\karaf\checks\internal\ScrState.java,check bundle,"override protected  check   (  bundle bundle )  {  if  ( bundle . get headers (  )  . get ( "" service -  component"" )   =  =  null )   {  return null;  }   scr service svc = tracker . get service (  ) ; if  ( svc  =  =  null )   {  return new  check ( ""scr - state"" "" no  scr service found"" ) ;  }   component[] components = sv"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-checks\src\main\java\io\fabric8\karaf\checks\internal\ScrState.java,get state,"private string   ( int state )  {  switch  ( state )   {  case  (  component .  s t a t e _  d i s a b l e d ) : return ""disabled""; case  (  component .  s t a t e _  e n a b l i n g ) : return ""enabling""; case  (  component .  s t a t e _  e n a b l e d ) : return ""enabled""; case  (  component .  s t a t e _  u n s a t i s f i e d ) : return ""unsatisfied""; case  (  component .  s t a t e _  a c t i v a t i n g ) : return ""activating""; case  (  component .  s t a t e _  a c t i v e ) : return ""active""; case  (  component .  s t a t e _  r e g i s t e r e d ) : return ""registered""; case  (  component .  s t a t e _  f a c t o r y ) : return ""factory""; case  (  component .  s t a t e _  d e a c t i v a t i n g ) : return ""deactivating""; case  (  component .  s t a t e _  d i s a b l i n g ) : return ""disabling""; case  (  component .  s t a t e _  d i s p o s i n g ) : return ""disposing""; case  (  component .  s t a t e _  d i s p o s e d ) : return ""disposed""; default : return ""unknown: ""  +  state;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-checks\src\main\java\io\fabric8\karaf\checks\internal\ReadinessCheckServlet.java,readiness check servlet,public copy on write array list <  readiness checker >  readiness checkers )  {  this . checkers = readiness checkers;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-checks\src\main\java\io\fabric8\karaf\checks\internal\ReadinessCheckServlet.java,do get,override protected void   (  http servlet request req  http servlet response resp )  throws  servlet exception   i o exception  {   list <  check >  checks = new  array list <  >  (  ) ; for  (   readiness checker checker : checkers )   {  checks . add all ( checker . get failing readiness checks (  )  ) ;  }  if 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-checks\src\main\java\io\fabric8\karaf\checks\internal\WarState.java,war state,public context . register service (  web listener . class this null ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-checks\src\main\java\io\fabric8\karaf\checks\internal\WarState.java,check bundle,"override public  check   (  bundle bundle )  {   web event event = states . get ( bundle . get bundle id (  )  ) ; if  ( event  !  =  null && event . get type (  )   !  =   web event .  d e p l o y e d && is active ( bundle )  )   {  return new  check ( ""war - state"" "" war bundle ""  +  bundle . get bundle id (  )   +  "" is in state "" + "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-checks\src\main\java\io\fabric8\karaf\checks\internal\WarState.java,get state,"private string   (  web event web event )  {  switch  ( web event . get type (  )  )   {  case  web event .  d e p l o y e d: return "" d e p l o y e d""; case  web event .  d e p l o y i n g: return "" d e p l o y i n g""; case  web event .  f a i l e d: return "" f a i l e d""; case  web event .  u n d e p l o y e d: return "" u n d e p l o y e d""; case  web event .  u n d e p l o y i n g: return "" u n d e p l o y i n g""; case  web event .  w a i t i n g: return "" w a i t i n g""; default : return "" u n k n o w n"";  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-checks\src\main\java\io\fabric8\karaf\checks\internal\WarState.java,web event,override public void   (  web event event )  {  states . put ( event . get bundle (  )  . get bundle id (  )  event ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-cm\src\main\java\io\fabric8\karaf\cm\KubernetesConfigAdminBridge.java,kubernetes config admin bridge,public f a b r i c8 _  c m _  b r i d g e _  e n a b l e d _  d e f a u l t; this . lock = new  object (  ) ; this . config admin = new  atomic reference <  >  (  ) ; this . kubernetes client = new  atomic reference <  >  (  ) ; this . config merge =  f a b r i c8 _  c o n f i g _  m e r g e _  d e f a u l t; this . config meta =  f a b r i c8 _  c o n f i g _  m e t a _  d e f a u l t; this . config watch =  f a b r i c8 _  c o n f i g _  w a t c h _  d e f a u l t; this . watch = null; this . pid label =  f a b r i c8 _  p i d _  l a b e l _  d e f a u l t; this . filters = null;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-cm\src\main\java\io\fabric8\karaf\cm\KubernetesConfigAdminBridge.java,activate,activate void   (  )  {  enabled = get system property or env var (  f a b r i c8 _  c m _  b r i d g e _  e n a b l e d enabled ) ; pid label = get system property or env var (  f a b r i c8 _  p i d _  l a b e l pid label ) ; config merge = get system property or env var (  f a b r i c8 _  c o n f i g _  m e r g e config merge ) ; config meta = get system property
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-cm\src\main\java\io\fabric8\karaf\cm\KubernetesConfigAdminBridge.java,bind config admin,protected configuration admin service )  {  this . config admin . set ( service ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-cm\src\main\java\io\fabric8\karaf\cm\KubernetesConfigAdminBridge.java,bind kubernetes client,protected kubernetes client service )  {  this . kubernetes client . set ( service ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-cm\src\main\java\io\fabric8\karaf\cm\KubernetesConfigAdminBridge.java,deactivate,deactivate void   (  )  {  if  ( watch  !  =  null )   {  watch . close (  ) ;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-cm\src\main\java\io\fabric8\karaf\cm\KubernetesConfigAdminBridge.java,delete config,"private config map map )  {   string pid = map . get metadata (  )  . get labels (  )  . get ( pid label ) ;  string[] p = parse pid ( pid ) ; try  {   map <  string  string >  config map data = map . get data (  ) ;  configuration config = get configuration ( config admin . get (  )  pid p[0] p[1] ) ; if  ( config map data  !  =  null )   {  boolean merge = config map data . contains key (  f a b r i c8 _  c o n f i g _  m e r g e )   ?   boolean . value of ( config map data . get (  f a b r i c8 _  c o n f i g _  m e r g e )  )  : config merge; if  (  ! merge )   {   l o g g e r . debug ( "" delete configuration  {  } "" config . get pid (  )  ) ; config . delete (  ) ;  }   }   }  catch  (   exception e )   {   l o g g e r . warn ( """" e ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-cm\src\main\java\io\fabric8\karaf\cm\KubernetesConfigAdminBridge.java,event received,override public void   (  action action  config map map )  {  synchronized  ( lock )   {  switch  ( action )   {  case  a d d e d: case  m o d i f i e d: update config ( map ) ; break; case  d e l e t e d: case  e r r o r: delete config ( map ) ; break;  }   }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-cm\src\main\java\io\fabric8\karaf\cm\KubernetesConfigAdminBridge.java,get config map list,private config map list   (  )  {   kubernetes client client = kubernetes client . get (  ) ; if  ( client  !  =  null )   {   filter watch list deletable <  config map  config map list  boolean  watch  watcher <  config map >  >  config maps selector = client . config maps (  )  . with label ( pid label ) ; for  (   string key : filters . key set (  )  )   {  config maps selector . with label in ( key filters . get ( key )  . to array ( new  string[filters . get ( key )  . size (  ) ] )  ) ;  }  return config maps selector . list (  ) ;  }  else  {  return null;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-cm\src\main\java\io\fabric8\karaf\cm\KubernetesConfigAdminBridge.java,get configuration,"private configuration   (  configuration admin config admin  string fabric8pid  string pid  string factory pid )  throws  exception  {   string filter = "" ( ""  +   f a b r i c8 _  p i d  +  "" = "" +  fabric8pid +  "" ) "";  configuration[] old configuration = config admin . list configurations ( filter ) ; if  ( old configuration  !  =  null && old configuration . length  >  0 )   {  return old configuration[0];  }  else  {   configuration new configuration; if  ( factory pid  !  =  null )   {  new configuration = config admin . create factory configuration ( pid null ) ;  }  else  {  new configuration = config admin . get configuration ( pid null ) ; new configuration . set bundle location ( "" ? "" ) ;  }  return new configuration;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-cm\src\main\java\io\fabric8\karaf\cm\KubernetesConfigAdminBridge.java,parse pid,private string[]   (  string pid )  {   string factory pid = null; int n = pid . index of ( ' - ' ) ; if  ( n  >  0 )   {  factory pid = pid . substring ( n  +  1 ) ; pid = pid . substring ( 0 n ) ;  }  return new  string[] { pid factory pid } ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-cm\src\main\java\io\fabric8\karaf\cm\KubernetesConfigAdminBridge.java,should update,private hashtable <  string  object >  config adm cfg  hashtable <  string  object >  config map cfg )  {  if  ( config adm cfg  =  =  null )   {  return true;  }  for  (   map .  entry <  string  object >  entry : config map cfg . entry set (  )  )   {  if  (  f a b r i c8 _  m e t a _  k e y s . contains ( entry . get key (  )  )  )   {  continue;  }   object value = config adm cfg . get ( entry . get key (  )  ) ; if  ( value  =  =  null )   {  return true;  }  if  (  ! value . equals ( entry . get value (  )  )  )   {  return true;  }   }  return false;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-cm\src\main\java\io\fabric8\karaf\cm\KubernetesConfigAdminBridge.java,unbind config admin,protected configuration admin service )  {  this . config admin . compare and set ( service null ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-cm\src\main\java\io\fabric8\karaf\cm\KubernetesConfigAdminBridge.java,unbind kubernetes client,protected kubernetes client service )  {  this . kubernetes client . compare and set ( service null ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-cm\src\main\java\io\fabric8\karaf\cm\KubernetesConfigAdminBridge.java,update config,"private config map map )  {   long ver =  long . parse long ( map . get metadata (  )  . get resource version (  )  ) ;  string pid = map . get metadata (  )  . get labels (  )  . get ( pid label ) ;  string[] p = parse pid ( pid ) ; try  {  final  configuration config = get configuration ( config admin . get (  )  pid p[0] p[1] ) ; final  map <  string  string >  config map data = map . get data (  ) ; if  ( config map data  =  =  null )   {   l o g g e r . debug ( "" ignoring configuration pid =  {  }    ( empty ) "" config . get pid (  )  ) ; return;  }  final  dictionary <  string  object >  props = config . get properties (  ) ; final  hashtable <  string  object >  config adm cfg = props  !  =  null  ?  new  hashtable <  string  object >  (  )  : null;  hashtable <  string  object >  config map cfg = new  hashtable <  >  (  ) ;  string pid cfg = config map data . get (  f a b r i c8 _  c o n f i g _  p i d _  c f g ) ; if  ( pid cfg  =  =  null )   {  pid cfg = pid  +  "" . cfg"";  }   string cfg string = config map data . get ( pid cfg ) ; if  (  utils . is not null or empty ( cfg string )  )   {  java . util .  properties cfg = new java . util .  properties (  ) ; cfg . load ( new  string reader ( cfg string )  ) ; for  (   map .  entry <  object  object >  entry : cfg . entry set (  )  )   {  config map cfg . put (  (  string ) entry . get key (  )  entry . get value (  )  ) ;  }   }  else  {  for  (   map .  entry <  string  string >  entry : map . get data (  )  . entry set (  )  )   {  config map cfg . put ( entry . get key (  )  entry . get value (  )  ) ;  }   }  boolean meta = config map data . contains key (  f a b r i c8 _  c o n f i g _  m e t a )   ?   boolean . value of ( config map data . get (  f a b r i c8 _  c o n f i g _  m e t a )  )  : config meta; boolean merge = config map data . contains key (  f a b r i c8 _  c o n f i g _  m e r g e )   ?   boolean . value of ( config map data . get (  f a b r i c8 _  c o n f i g _  m e r g e )  )  : config merge; if  ( config adm cfg  !  =  null )   {   long old ver =  (  long ) props . get (  f a b r i c8 _  k8 s _  m e t a _  r e s o u r c e _  v e r s i o n ) ; if  ( old ver  !  =  null &&  ( old ver  >  =  ver )  )   {   l o g g e r . debug ( "" ignoring configuration pid =  {  }   old version =  {  }  new version =  {  }   ( no changes ) "" config . get pid (  )  old ver ver ) ; return;  }  for  (  enumeration <  string >  e = props . keys (  ) ; e . has more elements (  ) ;  )   {   string key = e . next element (  ) ;  object val = props . get ( key ) ; config adm cfg . put ( key val ) ;  }   }  if  ( should update ( config adm cfg config map cfg )  )   {   l o g g e r . debug ( "" updating configuration pid =  {  } "" config . get pid (  )  ) ; if  ( meta )   {  config map cfg . put (  f a b r i c8 _  p i d pid ) ; config map cfg . put (  f a b r i c8 _  k8 s _  m e t a _  r e s o u r c e _  v e r s i o n ver ) ; config map cfg . put (  f a b r i c8 _  k8 s _  m e t a _  n a m e map . get metadata (  )  . get name (  )  ) ; config map cfg . put (  f a b r i c8 _  k8 s _  m e t a _  n a m e s p a c e map . get metadata (  )  . get namespace (  )  ) ;  }  if  ( merge && config adm cfg  !  =  null )   {  for  (   map .  entry <  string  object >  entry : config map cfg . entry set (  )  )   {  if  (  !  c m _  m e t a _  k e y s . contains ( entry . get key (  )  )  )   {  config adm cfg . put ( entry . get key (  )  entry . get value (  )  ) ;  }   }  config map cfg = config adm cfg;  }  config . update ( config map cfg ) ;  }  else  {   l o g g e r . debug ( "" ignoring configuration pid =  {  }   ( no changes ) "" config . get pid (  )  ) ;  }   }  catch  (   exception e )   {   l o g g e r . warn ( """" e ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-cm\src\main\java\io\fabric8\karaf\cm\KubernetesConfigAdminBridge.java,watch config map list,"private watch )   {   kubernetes client client = kubernetes client . get (  ) ; if  ( client  !  =  null )   {   filter watch list deletable <  config map  config map list  boolean  watch  watcher <  config map >  >  config maps selector = client . config maps (  )  . with label ( pid label ) ; for  (   string key : filters . key set (  )  )   {  config maps selector . with label in ( key filters . get ( key )  . to array ( new  string[filters . get ( key )  . size (  ) ] )  ) ;  }  watch = config maps selector . watch ( this ) ;  }  else  {  throw new  runtime exception ( "" kubernetes client not set"" ) ;  }   }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-cm\src\test\java\io\fabric8\karaf\cm\KubernetesConfigAdminBridgeTest.java,test aand,"test public void   (  )  {   system . set property ( ""fabric8 . pid . filters"" ""app name =  a database . name = my . oracle . datasource"" ) ;  kubernetes mock server plain server = new  kubernetes mock server ( false ) ; plain server . expect (  )  . get (  )  . with path ( "" / api / v1 / namespaces / test / configmaps ? labe"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-cm\src\test\java\io\fabric8\karaf\cm\KubernetesConfigAdminBridgeTest.java,test and or,"test public void   (  )  {   system . set property ( ""fabric8 . pid . filters"" ""app name =  a; b database . name = my . oracle . datasource"" ) ;  kubernetes mock server plain server = new  kubernetes mock server ( false ) ; plain server . expect (  )  . get (  )  . with path ( "" / api / v1 / namespaces / test / configmaps ? la"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-cm\src\test\java\io\fabric8\karaf\cm\KubernetesConfigAdminBridgeTest.java,test or,"test public void   (  )  {   system . set property ( ""fabric8 . pid . filters"" ""app name =  a; b"" ) ;  kubernetes mock server plain server = new  kubernetes mock server ( false ) ; plain server . expect (  )  . get (  )  . with path ( "" / api / v1 / namespaces / test / configmaps ? label selector = karaf . pid app name%20in%"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-cm\src\main\java\io\fabric8\karaf\cm\PlaceholderResolverConfigurationPlugin.java,placeholder resolver configuration plugin,public atomic reference <  >  (  ) ; this . enabled =  f a b r i c8 _  c o n f i g _  p l u g i n _  e n a b l e d _  d e f a u l t;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-cm\src\main\java\io\fabric8\karaf\cm\PlaceholderResolverConfigurationPlugin.java,activate,"activate void   (  )  {  enabled = get system property or env var (  f a b r i c8 _  c o n f i g _  p l u g i n _  e n a b l e d enabled ) ;  l o g g e r . debug ( "" configuration update is  {  } "" enabled  ?  "" e n a b l e d"" : "" d i s a b l e d"" ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-cm\src\main\java\io\fabric8\karaf\cm\PlaceholderResolverConfigurationPlugin.java,bind resolver,protected placeholder resolver resolver )  {  this . resolver . set ( resolver ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-cm\src\main\java\io\fabric8\karaf\cm\PlaceholderResolverConfigurationPlugin.java,modify configuration,override public void   (  service reference <  ?  >  reference  dictionary <  string  object >  dictionary )  {   placeholder resolver res = resolver . get (  ) ; if  ( enabled && res  !  =  null )   {  res . replace all ( dictionary ) ;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-cm\src\main\java\io\fabric8\karaf\cm\PlaceholderResolverConfigurationPlugin.java,unbind resolver,protected placeholder resolver resolver )  {  this . resolver . compare and set ( resolver null ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-core\src\main\java\io\fabric8\karaf\core\properties\function\KubernetesPropertiesFunction.java,kubernetes properties function,"public client = new  atomic reference <  >  (  ) ; this . kubernetes resources = new  hash map <  >  (  ) ; this . kubernetes resources . put ( ""secret""  kubernetes support . secrets resource (  )  ) ; this . kubernetes resources . put ( ""map""  kubernetes support . config map resource (  )  ) ; this . kubernetes resources . put ( ""configmap""  kubernetes support . config map resource (  )  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-core\src\main\java\io\fabric8\karaf\core\properties\function\KubernetesPropertiesFunction.java,apply,"override public  string   (  string remainder )  {   string value = null; final  string[] items = remainder . split ( "":"" ) ; final  kubernetes client client = kubernetes client . get (  ) ; if  ( client  !  =  null && items . length  =  =  2 )   {   string[] tokens = items[1] . split ( "" / "" ) ; if  ( tokens . len"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-core\src\main\java\io\fabric8\karaf\core\properties\function\KubernetesPropertiesFunction.java,bind kubernetes client,protected kubernetes client kubernetes client )  {  this . kubernetes client . set ( kubernetes client ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-core\src\main\java\io\fabric8\karaf\core\properties\function\KubernetesPropertiesFunction.java,get name,override public  string   (  )  {  return  f u n c t i o n _  n a m e;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-core\src\main\java\io\fabric8\karaf\core\properties\function\KubernetesPropertiesFunction.java,unbind kubernetes client,protected kubernetes client kubernetes client )  {  this . kubernetes client . compare and set ( kubernetes client null ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-core\src\main\java\io\fabric8\karaf\core\properties\function\EnvPropertiesFunction.java,apply,"override public  string   (  string remainder )  {   string key = remainder;  string default value = null; if  ( remainder . contains ( "":"" )  )   {  key =  support . before ( remainder "":"" ) ; default value =  support . after ( remainder "":"" ) ;  }   string value =  system . getenv ( key ) ; return value  !  =  nu"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-core\src\main\java\io\fabric8\karaf\core\properties\function\EnvPropertiesFunction.java,get name,override public  string   (  )  {  return  f u n c t i o n _  n a m e;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-core\src\main\java\io\fabric8\karaf\core\properties\function\KubernetesSupport.java,secrets resource,"public api =  utils . get system property or env var (  f a b r i c8 _  k8 s _  s e c r e t _  a p i _  e n a b l e d false ) ; this . paths = new  array list <  >  (  ) ;  string secret paths =  utils . get system property or env var (  f a b r i c8 _  k8 s _  s e c r e t _  p a t h s ) ; if  (  utils . is not null or empty ( secret paths )  )   {  for  (   string path : secret paths . split ( "" "" )  )   {  this . paths . add (  paths . get ( path )  ) ;  }   }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-core\src\main\java\io\fabric8\karaf\core\properties\function\KubernetesSupport.java,config map resource,public resource   (  )  {  return new  config map resource (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-core\src\main\java\io\fabric8\karaf\core\properties\function\KubernetesSupport.java,get,override public  string   (  kubernetes client client  string name  string key )  {   string value = null; for  (   path path : this . paths )   {   path secret path = path . resolve ( name )  . resolve ( key ) ; if  (  files . exists ( secret path )  &&  files . is regular file ( secret path )  )   {  try  {  value = n
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-core\src\main\java\io\fabric8\karaf\core\properties\function\KubernetesSupport.java,get data,override  map <  string  string >    (  kubernetes client client  string name )  {   config map resource = client . config maps (  )  . with name ( name )  . get (  ) ; return  ( resource  !  =  null )   ?  resource . get data (  )  : null;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-core\src\main\java\io\fabric8\karaf\core\properties\function\KubernetesSupport.java,secrets resource,public resource   (  )  {  return new  secrets resource (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-core\src\main\java\io\fabric8\karaf\core\properties\function\ServiceHostPropertiesFunction.java,apply,"override public  string   (  string remainder )  {   string key = remainder;  string default value = null; if  ( remainder . contains ( "":"" )  )   {  key =  support . before ( remainder "":"" ) ; default value =  support . after ( remainder "":"" ) ;  }  if  ( key  !  =  null )   {  key = key . to upper case (  locale .  e n g l i"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-core\src\main\java\io\fabric8\karaf\core\properties\function\ServiceHostPropertiesFunction.java,get name,override public  string   (  )  {  return  f u n c t i o n _  n a m e;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-core\src\main\java\io\fabric8\karaf\core\properties\function\SysPropertiesFunction.java,apply,"override public  string   (  string remainder )  {   string key = remainder;  string default value = null; if  ( remainder . contains ( "":"" )  )   {  key =  support . before ( remainder "":"" ) ; default value =  support . after ( remainder "":"" ) ;  }   string value =  system . get property ( key ) ; return value "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-core\src\main\java\io\fabric8\karaf\core\properties\function\SysPropertiesFunction.java,get name,override public  string   (  )  {  return  f u n c t i o n _  n a m e;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-core\src\main\java\io\fabric8\karaf\core\properties\function\ServicePropertiesFunction.java,apply,"override public  string   (  string remainder )  {   string key = remainder;  string default value = null; if  ( remainder . contains ( "":"" )  )   {  key =  support . before ( remainder "":"" ) ; default value =  support . after ( remainder "":"" ) ;  }  if  ( key  !  =  null )   {  key = key . to upper case (  locale .  e n g l i"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-core\src\main\java\io\fabric8\karaf\core\properties\function\ServicePropertiesFunction.java,get name,override public  string   (  )  {  return  f u n c t i o n _  n a m e;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-core\src\main\java\io\fabric8\karaf\core\properties\function\ServicePortPropertiesFunction.java,apply,"override public  string   (  string remainder )  {   string key = remainder;  string default value = null; if  ( remainder . contains ( "":"" )  )   {  key =  support . before ( remainder "":"" ) ; default value =  support . after ( remainder "":"" ) ;  }  if  ( key  !  =  null )   {  key = key . to upper case (  locale .  e n g l i"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-core\src\main\java\io\fabric8\karaf\core\properties\function\ServicePortPropertiesFunction.java,get name,override public  string   (  )  {  return  f u n c t i o n _  n a m e;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-core\src\main\java\io\fabric8\karaf\core\Support.java,acquire string builder,public string builder   (  string value )  {   string builder sb = acquire string builder (  ) ; sb . set length ( 0 ) ; sb . append ( value ) ; return sb;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-core\src\main\java\io\fabric8\karaf\core\Support.java,after,public string   (  string text  string after )  {  if  (  ! text . contains ( after )  )   {  return null;  }  return text . substring ( text . index of ( after )   +  after . length (  )  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-core\src\main\java\io\fabric8\karaf\core\Support.java,before,public string   (  string text  string before )  {  if  (  ! text . contains ( before )  )   {  return null;  }  return text . substring ( 0 text . index of ( before )  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-core\src\main\java\io\fabric8\karaf\core\Support.java,create str substitutor,public str substitutor   (  string prefix  string suffix  str lookup <  string >  lookup )  {   str substitutor substitutor = new  str substitutor (  ) ; substitutor . set enable substitution in variables ( true ) ; substitutor . set variable prefix ( prefix ) ; substitutor . set variable suffix ( suffix ) ; substitutor . set variable resolver ( lookup ) ; return substitutor;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-core\src\main\java\io\fabric8\karaf\core\properties\PlaceholderResolverImpl.java,placeholder resolver impl,public copy on write array list <  >  (  ) ; this . substitutor =  support . create str substitutor ( get system property or env var (  p l a c e h o l d e r _  p r e f i x  d e f a u l t _  p l a c e h o l d e r _  p r e f i x )  get system property or env var (  p l a c e h o l d e r _  s u f f i x  d e f a u l t _  p l a c e h o l d e r _  s u f f i x )  new  str lookup <  string >  (  )  {  @ override public  string lookup (   string value )  {  return resolve ( value ) ;  }   }   ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-core\src\main\java\io\fabric8\karaf\core\properties\PlaceholderResolverImpl.java,bind function,protected properties function function )  {  functions . add if absent ( function ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-core\src\main\java\io\fabric8\karaf\core\properties\PlaceholderResolverImpl.java,find function,private properties function   (  string name )  {  for  (   properties function fun : functions )   {  if  ( name . equals ( fun . get name (  )  )  )   {  return fun;  }   }  return null;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-core\src\main\java\io\fabric8\karaf\core\properties\PlaceholderResolverImpl.java,lookup,override public  string   (  string value )  {  return resolve ( value ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-core\src\main\java\io\fabric8\karaf\core\properties\PlaceholderResolverImpl.java,replace,override public  string   (  string value )  {  return substitutor . replace ( value ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-core\src\main\java\io\fabric8\karaf\core\properties\PlaceholderResolverImpl.java,replace all,override public boolean   (  map <  string  object >  dictionary )  {  int replaced count = 0; for  (   string key : dictionary . key set (  )  )   {  final  object val = dictionary . get ( key ) ; if  ( val instanceof  string )   {   string builder sb =  support . acquire string builder (  (  string ) val ) ; if  ( su
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-core\src\main\java\io\fabric8\karaf\core\properties\PlaceholderResolverImpl.java,replace in,override public boolean   (  string builder value )  {  return substitutor . replace in ( value ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-core\src\main\java\io\fabric8\karaf\core\properties\PlaceholderResolverImpl.java,resolve,"override public  string   (  string value )  {   string[] resolvers =  support . before ( value "":"" )  . split ( ""\\ + "" ) ;  string remainder =  support . after ( value "":"" ) ; for  (   string resolver : resolvers )   {   properties function function = find function ( resolver ) ; if  ( function  =  =  null )   { "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-core\src\main\java\io\fabric8\karaf\core\properties\PlaceholderResolverImpl.java,unbind function,protected properties function function )  {  functions . remove ( function ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-itests\src\test\java\io\fabric8\karaf\itests\FeatureInstallationTest.java,config,"configuration public  option[]   (  )  throws  u r i syntax exception   malformed u r l exception  {  return new  option[] { karaf distribution configuration (  )  . framework url ( get karaf minimal url (  )  )  . name ( "" apache  karaf"" )  . unpack directory ( new  file ( ""target / exam"" )  )  configure security (  ) "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-itests\src\test\java\io\fabric8\karaf\itests\FeatureInstallationTest.java,test fabric karaf blueprint,"test public void   (  )  throws  exception  {  features service . add repository ( get features file (  )  . to u r i (  )  ) ; features service . install feature ( ""fabric8 - karaf - blueprint"" ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-itests\src\test\java\io\fabric8\karaf\itests\FeatureInstallationTest.java,test fabric karaf checks,"test public void   (  )  throws  exception  {  features service . add repository ( get features file (  )  . to u r i (  )  ) ; features service . install feature ( ""fabric8 - karaf - checks"" ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-itests\src\test\java\io\fabric8\karaf\itests\FeatureInstallationTest.java,test fabric karaf cm,"ignore @ test public void   (  )  throws  exception  {  features service . add repository ( get features file (  )  . to u r i (  )  ) ; features service . install feature ( ""fabric8 - karaf - cm"" ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-core\src\test\java\io\fabric8\karaf\core\properties\PlaceholderResolverTest.java,map,"public hash map <  >  (  ) ; map . put ( ""prop1"" ""hello1"" ) ; map . put ( ""prop2"" ""world1"" ) ; map . put ( ""prop3"" ""10"" ) ; map . put ( ""prop4"" ""20"" ) ; map . put ( ""prop5"" ""nested"" ) ; map . put ( ""prop6"" ""$[map1:prop6]"" ) ; map . put ( ""prop7"" ""$[map1:prop8]"" ) ; map . put ( ""prop8"" ""$[map1:prop7]"" ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-core\src\test\java\io\fabric8\karaf\core\properties\PlaceholderResolverTest.java,map,"public hash map <  >  (  ) ; map . put ( ""prop1"" ""hello2"" ) ; map . put ( ""prop2"" ""world2"" ) ; map . put ( ""prop - nested"" ""hello nested world ! "" ) ; map . put ( ""prop - recursive - 1"" ""$[prop - recursive - 2]"" ) ; map . put ( ""prop - recursive - 2"" ""$[prop - recursive - 3]"" ) ; map . put ( ""prop - recursive - 3"" ""recursive - 3"" ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-core\src\test\java\io\fabric8\karaf\core\properties\PlaceholderResolverTest.java,apply,override public  string   (  string remainder )  {  return map . get ( remainder ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-core\src\test\java\io\fabric8\karaf\core\properties\PlaceholderResolverTest.java,get name,"public string   (  )  {  return ""map2"";  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-core\src\test\java\io\fabric8\karaf\core\properties\PlaceholderResolverTest.java,set up,before public void   (  )  {  resolver = new  placeholder resolver impl (  ) ; resolver . bind function ( new  map1 (  )  ) ; resolver . bind function ( new  map2 (  )  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-core\src\test\java\io\fabric8\karaf\core\properties\PlaceholderResolverTest.java,tes infinite loop ping pong,"test ( expected =  illegal state exception . class )  public void   (  )  {  resolver . replace ( ""$[map1:prop7]"" ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-core\src\test\java\io\fabric8\karaf\core\properties\PlaceholderResolverTest.java,tes infinite loop simple,"test ( expected =  illegal state exception . class )  public void   (  )  {  resolver . replace ( ""$[map1:prop6]"" ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-core\src\test\java\io\fabric8\karaf\core\properties\PlaceholderResolverTest.java,test no replace,"test public void   (  )  {   assert . assert equals ( ""$[map1:no replace]"" resolver . replace ( ""$[map1:no replace]"" )  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-core\src\test\java\io\fabric8\karaf\core\properties\PlaceholderResolverTest.java,test replace,"test public void   (  )  {   assert . assert equals ( ""hello1 world2"" resolver . replace ( ""$[map1:prop1] $[map2:prop2]"" )  ) ;  assert . assert equals ( ""hello2 world1"" resolver . replace ( ""$[map2:prop1] $[map1:prop2]"" )  ) ;  assert . assert equals ( ""hello nested world ! "" resolver . replace ( """
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-core\src\test\java\io\fabric8\karaf\core\properties\PlaceholderResolverTest.java,test replace all,"test public void   (  )  {   map <  string  object >  map = new  hash map <  >  (  ) ; map . put ( ""key1"" ""$[map1:prop1] $[map2:prop2]"" ) ; map . put ( ""key2"" ""$[map2:prop1] $[map1:prop2]"" ) ; map . put ( ""key3"" ""$[map2:prop - $[map1:prop5]]"" ) ; map . put ( ""key4"" 1 ) ; map . put ( ""key5"" ""no replace"" ) ;  ass"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-core\src\test\java\io\fabric8\karaf\core\properties\PlaceholderResolverTest.java,test resolve,"test public void   (  )  {   assert . assert equals ( ""hello1"" resolver . resolve ( ""map1:prop1"" )  ) ;  assert . assert equals ( ""hello2"" resolver . resolve ( ""map2:prop1"" )  ) ;  assert . assert null ( resolver . resolve ( ""map1:no replace"" )  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-itests\src\test\java\io\fabric8\karaf\itests\ServiceTest.java,config,"configuration public  option[]   (  )  throws  u r i syntax exception   malformed u r l exception  {  return new  option[] { karaf distribution configuration (  )  . framework url ( get karaf minimal url (  )  )  . name ( "" apache  karaf"" )  . unpack directory ( new  file ( ""target / exam"" )  )  configure security (  ) "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-itests\src\test\java\io\fabric8\karaf\itests\ServiceTest.java,probe configuration,"probe builder public  test probe builder   (  test probe builder probe )  {  probe . set header (  constants .  d y n a m i c i m p o r t _  p a c k a g e ""* org . apache . felix . service . *;status = provisional"" ) ; return probe;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-itests\src\test\java\io\fabric8\karaf\itests\ServiceTest.java,test service availability,test public void   (  )  throws  exception  {   assert . assert not null ( placeholder resolver ) ;  assert . assert true ( placeholder resolver instanceof  placeholder resolver impl ) ;  assert . assert not null ( property evaluator ) ;  assert . assert true ( property evaluator instanceof  fabric8 p
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-itests\src\test\java\io\fabric8\karaf\itests\TestBase.java,get features file,static file   (  )  throws  u r i syntax exception  {   string features xml =  system . get property (  f e a t u r e s _  x m l ) ;  assert . assert not null ( features xml ) ;  file features file = new  file ( features xml ) ;  assert . assert not null ( features file . exists (  )  ) ; return features file;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-itests\src\test\java\io\fabric8\karaf\itests\TestBase.java,get features url,static u r l   (  )  throws  u r i syntax exception   malformed u r l exception  {  return get features file (  )  . to u r i (  )  . to u r l (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-itests\src\test\java\io\fabric8\karaf\itests\TestBase.java,get karaf minimal url,"static maven artifact url reference   (  )  {  return  core options . maven (  )  . group id ( ""org . apache . karaf"" )  . artifact id ( ""apache - karaf - minimal"" )  . version as in project (  )  . type ( ""tar . gz"" ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-profiles\src\main\java\io\fabric8\profiles\ProfilesHelpers.java,merge,public json node   (  json node target  json node source )  {  if  ( target  =  =  null )   {  return source;  }  if  ( target . is array (  )  && source . is array (  )  )   {   array node copy =  (  array node ) target . deep copy (  ) ; for  (   json node n : source )   {  if  (  ( n . is textual (  )  &&  d e l e t e d . equals ( n . text value (  )  )  )  )   {  copy =  json node factory . instance . array node (  ) ;  }  else  {  copy . add ( n ) ;  }   }  return copy;  }  else if  ( target . is object (  )  && source . is object (  )  )   {   object node copy =  (  object node ) target . deep copy (  ) ; if  ( source . get (  d e l e t e d )   !  =  null )   {  copy =  json node factory . instance . object node (  ) ;  }  else  {   iterator <  string >  iterator = source . field names (  ) ; while  ( iterator . has next (  )  )   {   string key = iterator . next (  ) ; if  (  !  d e l e t e d . equals ( key )  )   {   json node value = source . get ( key ) ; if  (  ( value . is textual (  )  &&  d e l e t e d . equals ( value . text value (  )  )  )  )   {  copy . remove ( key ) ;  }  else  {   json node original = target . get ( key ) ; value = merge ( original value ) ; copy . set ( key value ) ;  }   }   }   }  return copy;  }  else  {  return source;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-profiles\src\main\java\io\fabric8\profiles\ProfilesHelpers.java,read json file,public json node   (  path path )  throws  i o exception  {  try  (  input stream is =  files . new input stream ( path )  )  {  return  j s o n _  m a p p e r . read tree ( is ) ;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-profiles\src\main\java\io\fabric8\profiles\ProfilesHelpers.java,read properties file,public properties   (  path path )  throws  i o exception  {   properties properties = new  properties (  ) ; try  (  input stream is =  files . new input stream ( path )  )  {  properties . load ( is ) ;  }  return properties;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-profiles\src\main\java\io\fabric8\profiles\ProfilesHelpers.java,read yaml file,public json node   (  path path )  throws  i o exception  {  try  (  input stream is =  files . new input stream ( path )  )  {  return  y a m l _  m a p p e r . read tree ( is ) ;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-profiles\src\main\java\io\fabric8\profiles\ProfilesHelpers.java,recusively collect file listing,public array list <  string >  rc  path base  path directory )  throws  i o exception  {  try  (  directory stream <  path >  directory stream =  files . new directory stream ( directory )  )  {  for  (   path path : directory stream )   {  if  (  files . is directory ( path )  )   {  recusively collect file listing ( rc base path ) ;  }  else  {  rc . add ( base . relativize ( path )  . to string (  )  ) ;  }   }   }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-profiles\src\main\java\io\fabric8\profiles\ProfilesHelpers.java,to bytes,public properties properties )  throws  i o exception  {  try  (  byte array output stream os = new  byte array output stream (  )  )  {  properties . store ( os null ) ; return os . to byte array (  ) ;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-profiles\src\main\java\io\fabric8\profiles\ProfilesHelpers.java,to json bytes,public json node yaml )  throws  i o exception  {  return  j s o n _  m a p p e r . write value as bytes ( yaml ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-profiles\src\main\java\io\fabric8\profiles\ProfilesHelpers.java,to yaml bytes,public json node yaml )  throws  i o exception  {  return  y a m l _  m a p p e r . write value as bytes ( yaml ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-profiles\src\main\java\io\fabric8\profiles\Profiles.java,profiles,public path repository )  {  this . repository = repository;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-profiles\src\main\java\io\fabric8\profiles\Profiles.java,collect profile names,"private array list <  string >  target  string profile name )  throws  i o exception  {  if  ( target . contains ( profile name )  )   {  return;  }   path path = get profile path ( profile name ) ; if  (  !  files . exists ( path )  )   {  throw new  i o exception ( "" profile directory does not exists: ""  +  path ) ;  }   properties props = new  properties (  ) ;  path agent properties = path . resolve ( ""io . fabric8 . agent . properties"" ) ; if  (  files . exists ( agent properties )  )   {  props = read properties file ( agent properties ) ;  }   string parents = props . get property ( ""attribute . parents"" ""default"" . equals ( profile name )   ?  """" : ""default"" ) ; for  (   string parent : parents . split ( "" "" )  )   {  parent = parent . trim (  ) ; if  (  ! parent . is empty (  )  )   {  collect profile names ( target parent ) ;  }   }  target . add ( profile name ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-profiles\src\main\java\io\fabric8\profiles\Profiles.java,get profile path,"private path   (  string profile name )  {  return repository . resolve ( profile name . replace all ( "" - "" "" / "" )   +  "" . profile"" ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-profiles\src\main\java\io\fabric8\profiles\Profiles.java,list files,private array list <  string >    (  string profile name )  throws  i o exception  {   array list <  string >  rc = new  array list <  >  (  ) ;  path dir = get profile path ( profile name ) ; recusively collect file listing ( rc dir dir ) ; return rc;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-profiles\src\main\java\io\fabric8\profiles\Profiles.java,materialize,"public path target  string .  .  .  profile names )  throws  i o exception  {   array list <  string >  profile search order = new  array list <  >  (  ) ; for  (   string profile name : profile names )   {  collect profile names ( profile search order profile name ) ;  }   hash set <  string >  files = new  hash set <  >  (  ) ; for  (   string profile name : profile search order )   {  files . add all ( list files ( profile name )  ) ;  }   system . out . println ( ""profile search order""  +  profile search order ) ;  system . out . println ( ""files: ""  +  files ) ; for  (   string file : files )   {  try  (  input stream is = materialize file ( file profile search order )  )  {   files . copy ( is target . resolve ( file )   standard copy option .  r e p l a c e _  e x i s t i n g ) ;  }   }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-profiles\src\main\java\io\fabric8\profiles\Profiles.java,materialize file,"private input stream   (  string file name  array list <  string >  profile search order )  throws  i o exception  {  if  ( file name . ends with ( "" . properties"" )  )   {   properties properties = new  properties (  ) ; for  (   string profile : profile search order )   {   path path = get profile path ( profile )  . resolve ( file name ) ; if  (  files . exists ( path )  )   {   profiles helpers . merge ( properties read properties file ( path )  ) ;  }   }  return new  byte array input stream ( to bytes ( properties )  ) ;  }  else if  ( file name . ends with ( "" . json"" )  )   {   json node node = null; for  (   string profile : profile search order )   {   path path = get profile path ( profile )  . resolve ( file name ) ; if  (  files . exists ( path )  )   {  node =  profiles helpers . merge ( node read json file ( path )  ) ;  }   }  return new  byte array input stream ( to json bytes ( node )  ) ;  }  else if  ( file name . ends with ( "" . yml"" )  )   {   json node node = null; for  (   string profile : profile search order )   {   path path = get profile path ( profile )  . resolve ( file name ) ; if  (  files . exists ( path )  )   {  node =  profiles helpers . merge ( node read yaml file ( path )  ) ;  }   }  return new  byte array input stream ( to yaml bytes ( node )  ) ;  }  else  {   path last = null; for  (   string profile : profile search order )   {   path path = get profile path ( profile )  . resolve ( file name ) ; if  (  files . exists ( path )  )   {  last = path;  }   }  return  files . new input stream ( last ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-profiles\src\test\java\io\fabric8\profiles\TestHelpers.java,copy,public input stream is  output stream os )  throws  i o exception  {  byte data[] = new byte[1024 * 4]; int c; while  (  ( c = is . read ( data )  )   >  =  0 )   {  os . write ( data 0 c ) ;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-profiles\src\test\java\io\fabric8\profiles\TestHelpers.java,read text file,public string   (  path p )  throws  i o exception  {  try  (  input stream is =  files . new input stream ( p )  )  {  try  (  byte array output stream os = new  byte array output stream (  )  )  {  copy ( is os ) ; return new  string ( os . to byte array (  )   standard charsets .  u t f _ 8 ) ;  }   }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-profiles\src\test\java\io\fabric8\profiles\TestHelpers.java,recusive delete if exists,static path p )  throws  i o exception  {  if  (  files . is directory ( p )  )   {  try  (  directory stream <  path >  directory stream =  files . new directory stream ( p )  )  {  for  (   path path : directory stream )   {  recusive delete if exists ( path ) ;  }   }   }   files . delete if exists ( p ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-profiles\src\test\java\io\fabric8\profiles\ProfilesTest.java,basic test,"test public void   (  )  throws  i o exception  {   path target =  p r o j e c t _  b a s e _  d i r . resolve ( ""target / test - data / materialize1"" ) ; recusive delete if exists ( target ) ;  files . create directories ( target ) ;  path repository =  p r o j e c t _  b a s e _  d i r . resolve ( ""src / test / profiles"" ) ; new  profiles ( "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\IniFileUtils.java,parse ini file,"public map <  string  properties >    (  file file )  throws  i o exception  {   map <  string  properties >  answer = new  hash map <  >  (  ) ;  string section = null;  properties properties = new  properties (  ) ; try  (  buffered reader reader = new  buffered reader ( new  file reader ( file )  )  )  {  while  ( true )   {   string line = reader . read line (  ) ; if  ( line  =  =  null )   {  break;  }  if  ( line . trim (  )  . length (  )   =  =  0 )   {  continue;  }  if  ( line . starts with ( ""["" )  )   {  line = line . trim (  ) ; if  (  ! line . ends with ( ""]"" )  )   {   l o g . warn ( "" invalid section header in file: ""  +  file  +  "" .   line: "" +  line ) ; continue;  }  section = line . substring ( 1 line . length (  )   -  1 ) ; properties = answer . get ( section ) ; if  ( properties  =  =  null )   {  properties = new  properties (  ) ; answer . put ( section properties ) ;  }   }  else  {   string[] parts = line . split ( "" = "" 2 ) ; if  ( parts  =  =  null && parts . length  !  =  2 )   {   l o g . warn ( "" invalid property in section: ""  +  section  +  "" file: "" +  file +  "" .   line: "" +  line ) ; continue;  }   string key = parts[0] . trim (  ) ;  string value = parts[1] . trim (  ) ; properties . set property ( key value ) ;  }   }   }  return answer;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\BuildConfigHelper.java,create git project results,public build config build config  string full name  string html url  string remote url  string clone url )  {  this . build config = build config; this . full name = full name; this . html url = html url; this . remote url = remote url; this . clone url = clone url;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\BuildConfigHelper.java,create and apply build config,"public build config   (  kubernetes client kubernetes client  string namespace  string project name  string clone url  map <  string  string >  annotations )  {   build config build config = create build config ( kubernetes client namespace project name clone url annotations ) ;  controller controller = new  controller ( kubernetes client ) ; controller . set namespace ( namespace ) ; controller . apply build config ( build config ""from project ""  +  project name ) ; return build config;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\BuildConfigHelper.java,create build config,"public build config   (  kubernetes client kubernetes client  string namespace  string project name  string clone url  map <  string  string >  annotations )  {   l o g . info ( "" creating a  build config for namespace: ""  +  namespace  +  "" project: "" +  project name ) ;  string jenkins url = null; try  {  jenkins url = get jenkins service url ( kubernetes client namespace ) ;  }  catch  (   exception e )   {   }   build config build config =  builds . create default build config ( project name clone url jenkins url ) ;  map <  string  string >  current annotations =  kubernetes helper . get or create annotations ( build config ) ; current annotations . put all ( annotations ) ; return build config;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\BuildConfigHelper.java,get build config,public build config   (  )  {  return build config;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\BuildConfigHelper.java,get build config console u r l,"public string   (  kubernetes client kubernetes  string console namespace  build config build config )  {   string name = get name ( build config ) ;  string namespace = get namespace ( build config ) ; if  (  strings . is null or blank ( namespace )  )   {  namespace = console namespace;  }   string console u r l = get fabric8 console service url ( kubernetes namespace ) ; if  (  strings . is not blank ( console u r l )  )   {  if  (  strings . is not blank ( name )  )   {  return  u r l utils . path join ( console u r l ""workspaces"" namespace ""projects"" name ) ;  }  return  u r l utils . path join ( console u r l ""workspaces"" namespace ) ;  }  return null;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\BuildConfigHelper.java,get clone url,public string   (  )  {  return clone url;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\BuildConfigHelper.java,get fabric console service url,"private string   (  kubernetes client kubernetes  string namespace )  {  return  kubernetes helper . get service u r l ( kubernetes  service names .  f a b r i c8 _  c o n s o l e namespace ""http"" true ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\BuildConfigHelper.java,get full name,public string   (  )  {  return full name;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\BuildConfigHelper.java,get html url,public string   (  )  {  return html url;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\BuildConfigHelper.java,get jenkins service url,"private string   (  kubernetes client kubernetes  string namespace )  {  return  kubernetes helper . get service u r l ( kubernetes  service names .  j e n k i n s namespace ""http"" true ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\BuildConfigHelper.java,get remote url,public string   (  )  {  return remote url;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\BuildConfigHelper.java,import new git project,"public create git project results   (  kubernetes client kubernetes client  user details user details  file basedir  string namespace  string project name  string origin  string message boolean apply boolean use local git address )  throws  git a p i exception   json processing exception  {   git utils . disable ssl certificate checks (  ) ;  init command init command =  git . init (  ) ; init command . set directory ( basedir ) ;  git git = init command . call (  ) ;  l o g . info ( "" initialised an empty git configuration repo at  {  } "" basedir . get absolute path (  )  ) ;  person ident person ident = user details . create person ident (  ) ;  string user = user details . get user (  ) ;  string address = user details . get address (  ) ;  string internal address = user details . get internal address (  ) ;  string branch = user details . get branch (  ) ;  git repo client repo client = user details . create repo client (  ) ;  create repository d t o create repository = new  create repository d t o (  ) ; create repository . set name ( project name ) ;  string full name = null;  repository d t o repository = repo client . create repository ( create repository ) ; if  ( repository  !  =  null )   {  if  (  l o g . is debug enabled (  )  )   {   l o g . debug ( "" got repository: ""  +  to json ( repository )  ) ;  }  full name = repository . get full name (  ) ;  }  if  (  strings . is null or blank ( full name )  )   {  full name = user  +  "" / ""  +  project name;  }   string html url =  u r l utils . path join ( resolve to root ( address )  user project name ) ;  string local clone url =  u r l utils . path join ( resolve to root ( internal address )  user project name  +  "" . git"" ) ;  string clone url = html url  +  "" . git"";  string default clone url = clone url; if  ( use local git address &&  strings . is not blank ( internal address )  )   {  default clone url = local clone url;  }   git utils . configure branch ( git branch origin default clone url ) ;  git utils . add dummy file to empty folders ( basedir ) ;  l o g . info ( "" about to git commit and push to: ""  +  default clone url  +  "" and remote name "" +  origin ) ;  git utils . do add commit and push files ( git user details person ident branch origin message true ) ;  map <  string  string >  annotations = new  hash map <  >  (  ) ; annotations . put (  annotations .  builds .  g i t _  c l o n e _  u r l clone url ) ; annotations . put (  annotations .  builds .  l o c a l _  g i t _  c l o n e _  u r l local clone url ) ;  build config build config; if  ( apply )   {  build config = create and apply build config ( kubernetes client namespace project name default clone url annotations ) ;  }  else  {  build config = create build config ( kubernetes client namespace project name default clone url annotations ) ;  }  return new  create git project results ( build config full name html url local clone url clone url ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\BuildConfigHelper.java,resolve to root,"protected string   (  string address )  {  if  ( address  !  =  null )   {  final  matcher matcher =  g i t h u b _  a p i _  u r l _  p a t t e r n . matcher ( address ) ; if  ( matcher . find (  )  )   {  return  string . format ( ""%s%s"" matcher . group ( ""proto"" )  matcher . group ( ""domain"" )  ) ;  }   }  return address;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\BuildConfigHelper.java,to string,"override public  string   (  )  {  return "" create git project results { ""  +  ""full name = '""  +  full name  +  '\'' +  ""  html url = '"" +  html url +  '\'' +  ""  remote url = '"" +  remote url +  '\'' +  ""  clone url = '"" +  clone url +  '\'' +  ' } ';  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\GitUtils.java,add dummy file to empty folders,"public file dir )  {  if  ( dir  !  =  null && dir . is directory (  )  )   {   file[] children = dir . list files (  ) ; if  ( children  =  =  null || children . length  =  =  0 )   {   file dummy file = new  file ( dir "" . gitkeep"" ) ; try  {   i o helpers . write fully ( dummy file "" this file is only here to avoid git removing empty folders\n once there are files in this folder feel free to delete this file ! "" ) ;  }  catch  (   i o exception e )   {   l o g . warn ( "" failed to write file ""  +  dummy file  +  "" .  "" +  e e ) ;  }   }  else  {  for  (   file child : children )   {  if  ( child . is directory (  )  )   {  add dummy file to empty folders ( child ) ;  }   }   }   }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\GitUtils.java,add files,public git git  file .  .  .  files )  throws  git a p i exception   i o exception  {   file root dir = get root git directory ( git ) ; for  (   file file : files )   {   string relative path = get file pattern ( root dir file ) ; git . add (  )  . add filepattern ( relative path )  . call (  ) ;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\GitUtils.java,build https from s s h u r l,"private string   (  string remote u r l )  {   matcher matcher =  g i t h u b _  g i t _  u r l _  p a t t e r n . matcher ( remote u r l ) ; if  ( matcher . find (  )  )   {  return remote u r l . replace all (  g i t s s h _  r e g e x ""https: /  / $2 / $3"" ) ;  }  else  {  return remote u r l;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\GitUtils.java,configure,"override protected void   (  open ssh config .  host host  session session )  {  session . set config ( "" strict host key checking"" ""no"" ) ;  user info user info = new  credentials provider user info ( session provider ) ; session . set user info ( user info ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\GitUtils.java,configure branch,"public git git  string branch  string origin  string remote repository )  {  if  (  !  strings . is null or blank ( branch )  )   {   stored config config = git . get repository (  )  . get config (  ) ; config . set string ( ""branch"" branch ""remote"" origin ) ; config . set string ( ""branch"" branch ""merge"" ""refs / heads / ""  +  branch ) ; config . set string ( ""remote"" origin ""url"" remote repository ) ; config . set string ( ""remote"" origin ""fetch"" "" + refs / heads / *:refs / remotes / ""  +  origin  +  "" / *"" ) ; try  {  config . save (  ) ;  }  catch  (   i o exception e )   {   l o g . error ( "" failed to save the git configuration to ""  +  git . get repository (  )  . get directory (  )   +  "" with branch "" +  branch +  "" on "" +  origin +  "" remote repo: "" +  remote repository +  "" due: "" +  e . get message (  )  +  "" .   this exception is ignored . "" e ) ;  }   }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\GitUtils.java,configure command,"public c extends  git command > void   (  transport command <  c  ?  >  command  credentials provider credentials provider final  file ssh private key final  file ssh public key )  {   l o g . info ( "" using ""  +  credentials provider ) ; if  ( ssh private key  !  =  null )   {  final  credentials provider provider = credentials provider; command . set transport config callback ( new  transport config callback (  )  {  @ override public void configure (   transport transport )  {  if  ( transport instanceof  ssh transport )   {   ssh transport ssh transport =  (  ssh transport ) transport;  ssh session factory ssh session factory = new  jsch config session factory (  )  {  @ override protected void configure (   open ssh config .  host host   session session )  {  session . set config ( "" strict host key checking"" ""no"" ) ;  user info user info = new  credentials provider user info ( session provider ) ; session . set user info ( user info ) ;  }  @ override protected  j sch create default j sch (   f s fs )  throws  j sch exception  {   j sch jsch = super . create default j sch ( fs ) ; jsch . remove all identity (  ) ;  string absolute path = ssh private key . get absolute path (  ) ; if  (  l o g . is debug enabled (  )  )   {   l o g . debug ( "" adding identity private key: ""  +  ssh private key  +  "" public key: "" +  ssh public key ) ;  }  if  ( ssh public key  !  =  null )   {  jsch . add identity ( absolute path ssh public key . get absolute path (  )  null ) ;  }  else  {  jsch . add identity ( absolute path ) ;  }  return jsch;  }   }  ; ssh transport . set ssh session factory ( ssh session factory ) ;  }   }   }   ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\GitUtils.java,create default j sch,"override protected  j sch   (  f s fs )  throws  j sch exception  {   j sch jsch = super . create default j sch ( fs ) ; jsch . remove all identity (  ) ;  string absolute path = ssh private key . get absolute path (  ) ; if  (  l o g . is debug enabled (  )  )   {   l o g . debug ( "" adding identity private key: ""  +  ssh privat"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\GitUtils.java,disable ssl certificate checks,"public l o g . info ( "" trusting all  s s l certificates"" ) ; try  {   s s l context context =  s s l context . get instance ( "" t l s"" ) ; context . init ( null new  trust manager[] { new  trust everything s s l trust manager (  )  }  new java . security .  secure random (  )  ) ;  https u r l connection . set default s s l socket factory ( context . get socket factory (  )  ) ;  https u r l connection . set default hostname verifier ( new  hostname verifier (  )  {  public boolean verify (   string s   s s l session ssl session )  {  return true;  }   }   ) ;  }  catch  (   no such algorithm exception e )   {   l o g . warn ( "" failed to bypass certificate check"" e ) ;  }  catch  (   key management exception e )   {   l o g . warn ( "" failed to bypass certificate check"" e ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\GitUtils.java,do add commit and push files,"public git git  user details user details  person ident person ident  string branch  string origin  string message boolean push on commit int push retries )  throws  git a p i exception  {  git . add (  )  . add filepattern ( "" . "" )  . call (  ) ; do commit and push ( git message user details person ident branch origin push on commit push retries ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\GitUtils.java,do commit and push,"public rev commit   (  git git  string message  user details user details  person ident author  string branch  string origin boolean push on commit int push retries )  throws  git a p i exception  {   commit command commit = git . commit (  )  . set all ( true )  . set message ( message ) ; if  ( author  !  =  null )   {  commit = commit . set author ( author ) ;  }   rev commit answer = commit . call (  ) ; if  (  l o g . is debug enabled (  )  )   {   l o g . debug ( "" committed ""  +  answer . get id (  )   +  "" "" +  answer . get full message (  )  ) ;  }  if  ( push on commit )   {   git a p i exception exception = null; for  ( int i = 1; i  <  =  push retries; i +  +  )   {  try  {  if  ( i  >  1 )   {  try  {   thread . sleep ( 700 ) ;  }  catch  (   interrupted exception e )   {   }   l o g . info ( "" retrying git push attempt ""  +  i ) ;  }   push command push = git . push (  ) ; configure command ( push user details ) ;  iterable <  push result >  results = push . set remote ( origin )  . call (  ) ; for  (   push result result : results )   {  if  (  l o g . is debug enabled (  )  )   {   l o g . debug ( "" pushed ""  +  result . get messages (  )   +  "" "" +  result . get u r i (  )  +  "" branch: "" +  branch +  "" updates: "" +  to string ( result . get remote updates (  )  )  ) ;  }   }  return answer;  }  catch  (   git a p i exception e )   {  if  ( exception  =  =  null )   {  exception = e;  }   l o g . error ( "" failed to git push attempt ""  +  i  +  "" with "" +  e e ) ;  }   }  if  ( exception  !  =  null )   {  throw exception;  }   }  return answer;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\GitUtils.java,find repository,public repository   (  file base dir )  throws  i o exception  {   file git folder = io . fabric8 . utils .  git helpers . find git folder ( base dir ) ; if  ( git folder  =  =  null )   {  return null;  }   file repository builder builder = new  file repository builder (  ) ;  repository repository = builder . read environment (  )  . set git dir ( git folder )  . build (  ) ; return repository;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\GitUtils.java,get commit date,public date   (  rev commit commit )  {  if  ( commit  =  =  null )   {  return new  date ( 0 ) ;  }  return new  date ( commit . get commit time (  )  * 1000 l ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\GitUtils.java,get file pattern,public string   (  file root dir  file file )  throws  i o exception  {   string relative path =  files . get relative path ( root dir file ) ; if  ( relative path . starts with (  file . separator )  )   {  relative path = relative path . substring ( 1 ) ;  }  return relative path . replace (  file . separator char ' / ' ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\GitUtils.java,get git host name,"public string   (  string git url )  {  try  {   u r i uri = new  u r i ( git url ) ; return uri . get host (  ) ;  }  catch  (   u r i syntax exception e )   {   }   string[] split = git url . split ( "":"" ) ; if  ( split . length  >  1 )   {   string prefix = split[0]; int idx = prefix . index of ( '@' ) ; if  ( idx  >  =  0 )   {  return prefix . substring ( idx  +  1 ) ;  }  else  {  return prefix;  }   }  return null;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\GitUtils.java,get git protocol,"public string   (  string git url )  {  try  {   u r i uri = new  u r i ( git url ) ; return uri . get scheme (  ) ;  }  catch  (   u r i syntax exception e )   {   }   string[] split = git url . split ( "":"" ) ; if  ( split . length  >  1 )   {   string prefix = split[0]; int idx = prefix . index of ( '@' ) ; if  ( idx  >  =  0 )   {  return ""ssh"";  }   }  return null;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\GitUtils.java,get remote as https u r l,"public string   (  repository repository  string remote name )  {  if  ( repository  !  =  null )   {   stored config config = repository . get config (  ) ; if  ( config  !  =  null )   {   string remote u r l = config . get string ( ""remote"" remote name ""url"" ) ; return build https from s s h u r l ( remote u r l ) ;  }   }  return null;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\GitUtils.java,get remote u r l,"public string   (  repository repository  string remote name )  {  if  ( repository  !  =  null )   {   stored config config = repository . get config (  ) ; if  ( config  !  =  null )   {   string remote u r l = """"; return config . get string ( ""remote"" remote name ""url"" ) ;  }   }  return null;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\GitUtils.java,get root git directory,public file   (  git git )  {  return git . get repository (  )  . get directory (  )  . get parent file (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\GitUtils.java,parse git config,"public map <  string  properties >    (  )  throws  i o exception  {   string home dir =  system . get property ( ""user . home"" "" . "" ) ;  file file = new  file ( home dir "" . gitconfig"" ) ; if  ( file . exists (  )  && file . is file (  )  )   {  return  ini file utils . parse ini file ( file ) ;  }  else  {  return new  hash map <  >  (  ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\GitUtils.java,to string,"public string   (  collection <  remote ref update >  updates )  {   string builder builder = new  string builder (  ) ; for  (   remote ref update update : updates )   {  if  ( builder . length (  )   >  0 )   {  builder . append ( "" "" ) ;  }  builder . append ( update . get message (  )   +  "" ""  +  update . get remote name (  )  +  "" "" +  update . get new object id (  )  ) ;  }  return builder . to string (  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\GitUtils.java,verify,public string s  s s l session ssl session )  {  return true;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\test\java\io\fabric8\project\support\GitHubCloneUrlTest.java,shouldreturnurlasitis,"test public void   (  )  {   string expected = ""https: /  / gogs . vgrant . f8"";  string address = ""https: /  / gogs . vgrant . f8"";  string actual =  build config helper . resolve to root ( address ) ; assert equals ( expected actual ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\test\java\io\fabric8\project\support\GitHubCloneUrlTest.java,shouldreturnurlwithoutapi,"test public void   (  )  {   string expected = ""https: /  / github . com"";  string address = ""https: /  / api . github . com"";  string actual =  build config helper . resolve to root ( address ) ; assert equals ( expected actual ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\UserDetails.java,user details,public string address  string internal address  string user  string password  string email )  {  this . internal address = internal address; this . user = user; this . password = password; this . address = address; this . email = email;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\UserDetails.java,create anonymous details,"public user details   (  )  {   string dummy password = """"; return new  user details ( address internal address user dummy password email ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\UserDetails.java,create credentials provider,"public credentials provider   (  )  {  return new  username password credentials provider ( user password )  {  @ override public boolean is interactive (  )  {  return false;  }  @ override public  string to string (  )  {  return "" username password credentials provider { user: ""  +  get user (  )   +  ""  password length: "" +   (  strings . is null or blank ( password )   ?  0 : password . length (  )  )  +  "" } "";  }   }  ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\UserDetails.java,create person ident,public person ident   (  )  {  return new  person ident ( user email ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\UserDetails.java,create repo client,"public git repo client   (  )  {   l o g . info ( ""creating git repository client at: ""  +  internal address ) ; return new  git repo client ( internal address user password ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\UserDetails.java,get address,public string   (  )  {  return address;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\UserDetails.java,get branch,public string   (  )  {  return branch;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\UserDetails.java,get email,public string   (  )  {  return email;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\UserDetails.java,get internal address,public string   (  )  {  return internal address;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\UserDetails.java,get password,public string   (  )  {  return password;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\UserDetails.java,get ssh private key,public file   (  )  {  return ssh private key;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\UserDetails.java,get ssh public key,public file   (  )  {  return ssh public key;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\UserDetails.java,get user,public string   (  )  {  return user;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\UserDetails.java,is interactive,override public boolean   (  )  {  return false;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\UserDetails.java,set address,public string address )  {  this . address = address;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\UserDetails.java,set branch,public string branch )  {  this . branch = branch;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\UserDetails.java,set password,public string password )  {  this . password = password;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\UserDetails.java,set ssh private key,public file ssh private key )  {  this . ssh private key = ssh private key;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\UserDetails.java,set ssh public key,public file ssh public key )  {  this . ssh public key = ssh public key;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\UserDetails.java,set user,public string user )  {  this . user = user;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\UserDetails.java,to string,"override public  string   (  )  {  return "" username password credentials provider { user: ""  +  get user (  )   +  ""  password length: "" +   (  strings . is null or blank ( password )   ?  0 : password . length (  )  )  +  "" } "";  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\test\java\io\fabric8\project\support\GitUtilsTest.java,assert git protocol,"public string git url  string expected )  {   string actual =  git utils . get git protocol ( git url ) ; assert that ( actual )  . described as ( ""get git protocol: ""  +  git url )  . is equal to ( expected ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\test\java\io\fabric8\project\support\GitUtilsTest.java,assert host name,"public string git url  string expected host name )  {   string actual =  git utils . get git host name ( git url ) ; assert that ( actual )  . described as ( ""get git host name: ""  +  git url )  . is equal to ( expected host name ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\test\java\io\fabric8\project\support\GitUtilsTest.java,assert repos,"private repository   (  )  throws  i o exception  {   file basedir = new  file (  system . get property ( ""basedir"" "" . "" )  ) ;  repository repository =  git utils . find repository ( basedir ) ; assert not null ( "" should find a repository"" repository ) ; return repository;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\test\java\io\fabric8\project\support\GitUtilsTest.java,test get repository https as u r l with remote name,"test public void   (  )  throws  exception  {   pattern  g i t h u b _  h t t p s _  u r l _  p a t t e r n =  pattern . compile ( ""^https: /  / github\\ . com /  (  ?  < user > [a - z0 - 9] (  ? : -  ? [a - z0 - 9] )  { 0 38 }  )  /  . * ? $"" ) ;  repository repository = assert repos (  ) ;  string url =  git utils . get remote as https u r l ( repository ""origin"""
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\test\java\io\fabric8\project\support\GitUtilsTest.java,test get repository https u r l,"test public void   (  )  throws  exception  {   pattern  g i t h u b _  h t t p s _  u r l _  p a t t e r n =  pattern . compile ( ""^https: /  / github\\ . com /  (  ?  < user > [a - z0 - 9] (  ? : -  ? [a - z0 - 9] )  { 0 38 }  )  /  . * ? $"" ) ;  repository repository = assert repos (  ) ;  string url =  git utils . get remote as https u r l ( repository ) ;  system"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\test\java\io\fabric8\project\support\GitUtilsTest.java,test get repository u r l,"test public void   (  )  throws  exception  {   repository repository = assert repos (  ) ;  string url =  git utils . get remote u r l ( repository ) ;  system . out . println ( "" found git repository  u r l: ""  +  url ) ; assert that ( url )  . is not empty (  )  . contains ( "" . git"" ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\test\java\io\fabric8\project\support\GitUtilsTest.java,test git host name,"test public void   (  )  throws  exception  {  assert host name ( ""ssh: /  / user@server / project . git"" ""server"" ) ; assert host name ( ""user@cheese:project . git"" ""cheese"" ) ; assert host name ( ""git@github . com:fabric8 - quickstarts / spring - boot - webmvc . git"" ""github . com"" ) ; assert host name"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\test\java\io\fabric8\project\support\GitUtilsTest.java,test git protocol,"test public void   (  )  throws  exception  {  assert git protocol ( ""ssh: /  / user@server / project . git"" ""ssh"" ) ; assert git protocol ( ""user@cheese:project . git"" ""ssh"" ) ; assert git protocol ( ""git@github . com:fabric8 - quickstarts / spring - boot - webmvc . git"" ""ssh"" ) ; assert git protocol ( "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\test\java\io\fabric8\project\support\IniFileUtilsTest.java,test parse git config,"test public void   (  )  throws  exception  {   file basedir = new  file (  system . get property ( ""basedir"" "" . "" )  ) ;  file file = new  file ( basedir ""src / test / resources / sample . gitconfig"" ) ; assert that ( file )  . is file (  )  . exists (  ) ;  map <  string  properties >  map =  ini file utils . parse ini file ( "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\forge\NewProjectFormData.java,new project form data,public string named  string archetype filter  string jenkins file filter )  {  this . named = named; this . archetype filter = archetype filter; this . jenkins file filter = jenkins file filter;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\forge\NewProjectFormData.java,get archetype filter,public string   (  )  {  return archetype filter;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\forge\NewProjectFormData.java,get jenkins file filter,public string   (  )  {  return jenkins file filter;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\forge\NewProjectFormData.java,get named,public string   (  )  {  return named;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\forge\NewProjectFormData.java,get type,public string   (  )  {  return type;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\forge\NewProjectFormData.java,set archetype filter,public string archetype filter )  {  this . archetype filter = archetype filter;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\forge\NewProjectFormData.java,set jenkins file filter,public string jenkins file filter )  {  this . jenkins file filter = jenkins file filter;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\forge\NewProjectFormData.java,set named,public string named )  {  this . named = named;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\forge\NewProjectFormData.java,set type,public string type )  {  this . type = type;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\ConsoleTests.java,wait until logged in,"public web driver facade facade  string user name  string password )  {   string namespace = facade . get namespace (  ) ; facade . sleep (  millis . seconds ( 5 )  ) ; for  ( int i = 0; i  <  5; i +  +  )   {  try  {  facade . until is displayed ( input username by ) ;  }  catch  (   throwable e )   {  facade . log warn ( "" trying to reload the browser ! "" ) ; facade . get driver (  )  . navigate (  )  . refresh (  ) ;  }   }  facade . form (  )  . clear and send keys ( input username by user name )  . clear and send keys ( input password by password )  . submit (  ) ; facade . log info ( "" logged in  -  waiting for the browser initialise the web app"" ) ; facade . sleep (  millis . seconds ( 5 )  ) ; facade . log info ( "" logged in ! "" ) ; for  ( int i = 0; i  <  5; i +  +  )   {  try  {  facade . until is enabled ( namespace select by ) ;  }  catch  (   throwable e )   {  facade . log warn ( "" trying to reload the browser ! "" ) ; facade . get driver (  )  . navigate (  )  . refresh (  ) ;  }   }  facade . until selected by visible text ( namespace select by namespace ) ; facade . sleep (  millis . seconds ( 10 )  ) ; facade . log info ( "" viewing namespace: ""  +  namespace ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\FormFacade.java,form facade,public web driver facade facade )  {  super ( facade ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\FormFacade.java,apply,"override public  boolean   (  web driver driver )  {  log wait ( """"  +  input values  +  "" on "" +  driver . get current url (  )  ) ;  web element submit element = null; for  (   input value input value : input values )   {  submit element = input value . do input (  ) ; if  ( submit element  =  =  null )   {  log info ( "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\FormFacade.java,clear and send keys,public form facade   (  by by  string value )  {  input values . add ( new  input value ( get facade (  )  by value )  ) ; return this;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\FormFacade.java,complete combo box,public form facade   (  by by  string value )  {  input values . add ( new  combo complete input value ( get facade (  )  by value )  ) ; return this;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\FormFacade.java,submit,"public facade (  )  . until ( "" form inputs: ""  +  input values new  expected condition <  boolean >  (  )  {  @ override public  boolean apply (   web driver driver )  {  log wait ( """"  +  input values  +  "" on "" +  driver . get current url (  )  ) ;  web element submit element = null; for  (   input value input value : input values )   {  submit element = input value . do input (  ) ; if  ( submit element  =  =  null )   {  log info ( "" missing ""  +  input value  +  """" ) ; return false;  }   }  if  ( submit by  =  =  null && submit element  =  =  null )   {  fail ( "" no input fields submitted yet"" ) ; return false;  }  else  {  get facade (  )  . sleep (  millis . seconds ( 5 )  ) ; if  ( submit by  !  =  null )   {  get facade (  )  . until is enabled ( submit by ) ; submit element = get facade (  )  . find optional element ( submit by ) ; if  ( submit element  =  =  null )   {  log warn ( "" could not find submit button ""  +  submit by  +  """" ) ; return false;  }  else  {  if  (  ! submit element . is displayed (  )  ||  ! submit element . is enabled (  )  )   {  log warn ( "" submit button ""  +  submit by  +  "" not enabled and visible"" ) ; return false;  }  log info ( "" submitting form: ""  +  input values  +  "" on "" +  submit element +  """" ) ; submit element . click (  ) ;  }   }  else  {  log info ( "" submitting form: ""  +  input values  +  "" on "" +  submit element +  """" ) ; submit element . submit (  ) ;  }  return true;  }   }   }   ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\FormFacade.java,submit button,public form facade   (  by submit by )  {  this . submit by = submit by; return this;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\inputs\ComboCompleteInputValue.java,combo complete input value,public web driver facade facade  by by  string value )  {  super ( facade by value ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\inputs\ComboCompleteInputValue.java,do input,override public  web element   (  )  {  final  web driver facade facade = get facade (  ) ; final  by first by = get by (  ) ; facade . sleep (  millis . seconds ( 2 )  ) ;  web element element = facade . find optional element ( first by ) ; if  ( element  =  =  null )   {  return null;  }  super . do input on element ( elem
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\inputs\ComboCompleteInputValue.java,to string,"override public  string   (  )  {  return "" combo complete input value { ""  +  ""by = ""  +  get by (  )   +  ""  value = '"" +  get value (  )  +  '\'' +  ' } ';  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\forge\ProjectsPage.java,projects page,"public web driver facade facade )  {  super ( facade ) ;  console tests . wait until logged in ( facade ) ; start url = get driver (  )  . get current url (  ) ; build configs url = relative url ( start url "" / kubernetes"" "" / kubernetes / build configs"" ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\forge\ProjectsPage.java,create project,"public new project form data form )  {  go to projects page (  ) ;  web driver facade facade = get facade (  ) ; facade . until link clicked ( create project by ) ;  by next button =  by . xpath ( "" /  / button[@ng - click = 'execute (  ) ']"" ) ; facade . set default timeout in seconds ( 60 * 9 ) ;  string named = form . get named (  ) ; facade . form (  )  . clear and send keys (  by . xpath ( "" /  / input[@ng - model = 'entity . named']"" )  named )  . submit button ( next button )  . submit (  ) ; facade . form (  )  . complete combo box (  by . xpath ( "" /  / label[text (  )   =  ' archetype'] / following::input[@type = 'text']"" )  form . get archetype filter (  )  )  . submit button ( next button )  . submit (  ) ; until next wizard page ( facade next button ) ; facade . form (  )  . submit button ( next button )  . submit (  ) ; until next wizard page ( facade next button ) ; facade . form (  )  . complete combo box (  by . xpath ( "" /  / label[text (  )   =  ' flow'] / following::input[@type = 'text']"" )  form . get jenkins file filter (  )  )  . submit button ( next button )  . submit (  ) ; facade . until is displayed (  by . xpath ( "" /  / a[@href = ' / forge / repos' and text (  )  = ' done']"" )  ) ; log info ( "" created project: ""  +  named ) ; go to projects page (  ) ; facade . until is displayed (  by . partial link text ( named )  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\forge\ProjectsPage.java,get create project by,public by   (  )  {  return create project by;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\forge\ProjectsPage.java,get gogs email,public string   (  )  {  return gogs email;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\forge\ProjectsPage.java,get gogs password,public string   (  )  {  return gogs password;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\forge\ProjectsPage.java,get gogs user name,public string   (  )  {  return gogs user name;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\forge\ProjectsPage.java,get sign in by,public by   (  )  {  return sign in by;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\forge\ProjectsPage.java,go to projects page,"public web driver facade facade = get facade (  ) ; facade . until link clicked loop ( projects link by build configs url ) ; facade . until one of ( sign in by create project by ) ;  web element sign in = facade . find optional element ( sign in by ) ; if  ( sign in  !  =  null && sign in . is displayed (  )  )   {  log info ( "" waiting for signin button to be clicked"" ) ; facade . until link clicked ( sign in by ) ; sign into gogs (  ) ;  }  else  {  log info ( "" sign in button not present"" ) ;  }  log wait ( ""button: ""  +  create project by  +  """" ) ; facade . until is enabled ( create project by ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\forge\ProjectsPage.java,relative url,"protected string   (  string url  string trim path  string new path )  {  int idx = url . index of ( trim path ) ; if  ( idx  <  0 )   {  fail ( "" the  u r l `""  +  url  +  ""` does not include path `"" +  trim path +  ""`"" ) ;  }  return url . substring ( 0 idx )   +  new path;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\forge\ProjectsPage.java,set gogs user name,public string gogs user name )  {  this . gogs user name = gogs user name;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\forge\ProjectsPage.java,sign into gogs,"protected facade (  )  . form (  )  . clear and send keys (  by . id ( ""git username"" )  gogs user name )  . clear and send keys (  by . id ( ""git password"" )  gogs password )  . clear and send keys (  by . id ( ""git email"" )  gogs email )  . submit button (  by . xpath ( "" /  / button[@ng - click = 'do login (  ) ']"" )  )  . submit (  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\forge\ProjectsPage.java,until next wizard page,protected web driver facade facade  by next button )  {  facade . sleep (  millis . seconds ( 5 )  ) ; facade . until is enabled ( next button ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\inputs\InputValue.java,input value,public web driver facade facade  by by  string value )  {  super ( facade ) ; this . by = by; this . value = value;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\inputs\InputValue.java,do input,"public web element   (  )  {   web element element = get facade (  )  . find optional element ( by ) ; if  ( element  !  =  null )   {  for  ( int i = 0; i  <  10; i +  +  )   {  try  {  do input on element ( element ) ; return element;  }  catch  (   stale element reference exception e )   {  log warn ( "" caught: ""  +  e ) ; get facade (  )  . sleep (  millis . seconds ( 5 )  ) ;  }   }  log warn ( "" failed to perform input on ""  +  by  +  "" to due repeated  stale element reference exception ! "" ) ;  }  return null;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\inputs\InputValue.java,do input on element,protected web element element )  {  element . clear (  ) ; element . send keys ( value ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\inputs\InputValue.java,get by,public by   (  )  {  return by;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\inputs\InputValue.java,get value,public string   (  )  {  return value;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\inputs\InputValue.java,to string,"override public  string   (  )  {  return "" input value { ""  +  ""by = ""  +  by  +  ""  value = '"" +  value +  '\'' +  ' } ';  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\SeleniumTests.java,assert web driver for service,"public t >  t   (  kubernetes client client  string namespace  string service name  web driver driver  function <  web driver facade  t >  block )  throws  exception  {  try  {   web driver facade facade = new  web driver facade ( driver client namespace ) ; facade . navigate to service ( service name ) ;  t apply = block . apply ( facade ) ;  string property =  systems . get env var or system property (  w a i t _  a f t e r _  s e l e n i u m ) ; if  ( property  !  =  null )   {  long millis = 0; try  {  millis =  long . parse long ( property ) ;  }  catch  (   number format exception e )   {  log warn ( "" env var  /  system property ""  +   w a i t _  a f t e r _  s e l e n i u m  +  "" is not a long value: "" +  property +  "" .  "" +  e e ) ;  }  if  ( millis  >  0 )   {  log info ( "" sleeping for ""  +  millis  +  "" millis before tearning down the test case"" ) ; try  {   thread . sleep ( millis ) ;  }  catch  (   interrupted exception e )   {   }   }   }  return apply;  }  catch  (   exception e )   {  log error ( "" failed with exception: "" e ) ; throw e;  }  finally  {  driver . quit (  ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\SeleniumTests.java,create web driver,"public web driver   (  )  {   web driver answer = do create web driver (  ) ; log info ( "" using  web driver implementation: ""  +  answer ) ; return answer;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\SeleniumTests.java,do create web driver,"protected web driver   (  )  {   string driver name =  systems . get env var or system property (  f a b r i c8 _  w e b d r i v e r _  n a m e ) ; if  ( driver name  !  =  null )   {  driver name = driver name . to lower case (  ) ; if  ( driver name . equals ( ""chrome"" )  )   {  return new  chrome driver (  ) ;  }  else if  ( driver name . equals ( ""edge"" )  )   {  return new  edge driver (  ) ;  }  else if  ( driver name . equals ( ""firefox"" )  )   {  return new  firefox driver (  ) ;  }  else if  ( driver name . equals ( ""htmlunit"" )  )   {  return new  html unit driver (  ) ;  }  else if  ( driver name . equals ( ""internetexplorer"" )  || driver name . equals ( ""ie"" )  )   {  return new  internet explorer driver (  ) ;  }  else if  ( driver name . equals ( ""opera"" )  )   {  return new  opera driver (  ) ;  }  else if  ( driver name . equals ( ""phantomjs"" )  )   {  return new  phantom j s driver (  ) ;  }  else if  ( driver name . equals ( ""safari"" )  )   {  return new  safari driver (  ) ;  }  else if  ( driver name . equals ( ""htmlunit"" )  )   {  return new  html unit driver (  ) ;  }   }  return new  chrome driver (  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\SeleniumTests.java,log click,"public string message )  {   system . out . println ( "" c l i c k: ""  +  message ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\SeleniumTests.java,log error,"public string message  throwable e )  {   system . out . println ( "" e r r o r: ""  +  message  +  e ) ; e . print stack trace (  ) ;  throwable cause = e . get cause (  ) ; if  ( cause  !  =  null && cause  !  =  e )   {  log error ( "" caused by: "" cause ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\SeleniumTests.java,log info,"public string message )  {   system . out . println ( "" i n f o: ""  +  message ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\SeleniumTests.java,log input,"public string message )  {   system . out . println ( "" i n p u t: ""  +  message ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\SeleniumTests.java,log submit,"public string message )  {   system . out . println ( "" s u b m i t: ""  +  message ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\SeleniumTests.java,log wait,"public string message )  {   system . out . println ( "" w a i t i n g: ""  +  message ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\SeleniumTests.java,log warn,"public string message  throwable e )  {   system . out . println ( "" w a r n: ""  +  message  +  e ) ; e . print stack trace (  ) ;  throwable cause = e . get cause (  ) ; if  ( cause  !  =  null && cause  !  =  e )   {  log warn ( "" caused by: "" cause ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\LogSupport.java,log support,public web driver driver )  {  this . driver = driver;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\LogSupport.java,get driver,public web driver   (  )  {  return driver;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\support\NameGenerator.java,generate name,public string   (  )  {  int char count = chars . length (  ) ; long value =  system . current time millis (  ) ;  string builder buffer = new  string builder (  ) ; while  ( value  >  0 l )   {  int digit =  ( int )  ( value % char count ) ; value =  ( value  -  digit )   /  char count; buffer . append ( chars . char at ( digit )  ) ;  }  return buffer . reverse (  )  . to string (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\PageSupport.java,page support,public web driver facade facade )  {  super ( facade . get driver (  )  ) ; this . facade = facade;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\PageSupport.java,get facade,public web driver facade   (  )  {  return facade;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\support\Versions.java,get version,"public string   (  string name )  {   string answer = get versions (  )  . get property ( name ) ; assert not null ( "" missing version value in file ""  +  versions file . get path (  )   +  "" for key `"" +  name +  ""`"" name ) ; return answer;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\support\Versions.java,get versions,"public properties   (  )  {  if  ( versions  =  =  null )   {  versions = new  properties (  ) ;  string basedir =  system . get property ( ""basedir"" "" . "" ) ; versions file = new  file ( basedir ""target / test - classes / versions . properties"" ) ; assert true ( "" versions file does not exist: ""  +  versions file . get path (  )  versions file . exists (  )  && versions file . is file (  )  ) ; try  {  versions . load ( new  file input stream ( versions file )  ) ;  }  catch  (   i o exception e )   {  throw new  assertion error ( "" failed to load ""  +  versions file . get path (  )   +  "" .  "" +  e e ) ;  }   }  return versions;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-spring-boot\src\main\java\io\fabric8\spring\boot\AbstractServiceRegistar.java,create alias,"private string   (  string name  class type  string protocol  string port  boolean external )  {   string builder sb = new  string builder (  ) ; sb . append ( type . get name (  )  )  . append ( "" - "" )  . append ( name ) ; if  (  strings . is not blank ( protocol )  )   {  sb . append ( "" - "" )  . append ( protocol ) ;  }  if  (  strings . is not blank ( port )  )   {  sb . append ( "" - "" )  . append ( port ) ;  }  if  ( external )   {  sb . append ( "" - external"" ) ;  }  return sb . to string (  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-spring-boot\src\main\java\io\fabric8\spring\boot\AbstractServiceRegistar.java,create converter bean,"private s  t >  bean definition holder   (  class type  string method name  class <  s >  source type  class <  t >  target type )  {   bean definition builder builder =  bean definition builder . generic bean definition (  factory converter . class ) ;  string bean name = type . get name (  )   +  "" . ""  +  method name; builder . add property value ( ""name"" method name ) ; builder . add property value ( ""type"" type . get canonical name (  )  ) ; builder . add property value ( ""source type"" source type . get canonical name (  )  ) ; builder . add property value ( ""target type"" target type . get canonical name (  )  ) ; builder . set autowire mode (  autowire .  b y _  t y p e . value (  )  ) ; return new  bean definition holder ( builder . get bean definition (  )  bean name ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-spring-boot\src\main\java\io\fabric8\spring\boot\AbstractServiceRegistar.java,create service definition,"private bean definition holder   (  service service  string alias  string protocol  string port  class type )  {   bean definition builder builder =  bean definition builder . generic bean definition (  kubernetes service factory bean . class ) ; builder . add property value ( ""name"" alias ) ; builder . add property value ( ""service"" service ) ; builder . add property value ( ""port"" port ) ; builder . add property value ( ""type"" type . get canonical name (  )  ) ; builder . set autowire mode (  autowire .  b y _  t y p e . value (  )  ) ; builder . get bean definition (  )  . add qualifier ( new  autowire candidate qualifier (  service name . class  kubernetes helper . get name ( service )  )  ) ; builder . get bean definition (  )  . add qualifier ( new  autowire candidate qualifier (  protocol . class protocol )  ) ; builder . get bean definition (  )  . add qualifier ( new  autowire candidate qualifier (  port name . class port  !  =  null  ?  port : """" )  ) ; return new  bean definition holder ( builder . get bean definition (  )  alias ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-spring-boot\src\main\java\io\fabric8\spring\boot\condition\OnInsideKubernetesCondition.java,get match outcome,"override public  condition outcome   (  condition context context  annotated type metadata metadata )  {  for  (   string variable :  r e q u i r e d _  e n v _  v a r i a b l e s )   {  if  (  strings . is null or blank (  system . getenv (  )  . get ( variable )  )  )   {  return  condition outcome . no match ( "" environment variab"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\WebDriverFacade.java,web driver facade,public web driver driver  kubernetes client client  string namespace )  {  super ( driver ) ; this . driver = driver; this . client = client; this . namespace = namespace;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\WebDriverFacade.java,apply,"override public  boolean   (  web driver driver )  {  for  (   by by : bys )   {   web element element = find optional element ( by ) ; if  ( element  !  =  null && element . is displayed (  )  && element . is enabled (  )  )   {  log info ( "" found ""  +  element  +  "" for "" +  by +  """" ) ; return true;  }   }  log info ( """
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\WebDriverFacade.java,assert current url starts with,"public string expected url )  {   string current url = get driver (  )  . get current url (  ) ; boolean answer = current url  !  =  null && current url . starts with ( expected url ) ; if  (  ! answer )   {  fail ( "" current  u r l `""  +  current url  +  ""` does not start with `"" +  expected url +  ""`"" ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\WebDriverFacade.java,clear and send keys,public web element   (  by by  string text )  {   web element field = find optional element ( by ) ; if  ( field  !  =  null )   {  field . clear (  ) ; field . send keys ( text ) ;  }  return field;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\WebDriverFacade.java,current url starts with,"public string expected url )  {   string current url = get driver (  )  . get current url (  ) ; boolean answer = current url  !  =  null && current url . starts with ( expected url ) ; if  (  ! answer )   {  log warn ( "" current  u r l `""  +  current url  +  ""` does not start with `"" +  expected url +  ""`"" ) ;  }  return answer;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\WebDriverFacade.java,find optional element,"public web element   (  web element element  by by )  {  try  {  return element . find element ( by ) ;  }  catch  (   no such element exception e )   {  return null;  }  catch  (   throwable e )   {  log error ( "" failed to find ""  +  by e ) ; return null;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\WebDriverFacade.java,form,public form facade   (  )  {  return new  form facade ( this ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\WebDriverFacade.java,get client,public kubernetes client   (  )  {  return client;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\WebDriverFacade.java,get default timeout in seconds,public timeout in seconds;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\WebDriverFacade.java,get facade,override public  web driver facade   (  )  {  return this;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\WebDriverFacade.java,get namespace,public string   (  )  {  return namespace;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\WebDriverFacade.java,get service url,"public string   (  string service name )  {   string url =  kubernetes helper . get service u r l ( client service name namespace ""http"" true ) ; assert not null ( "" no external  service  u r l could be found for namespace: ""  +  namespace  +  "" and name: "" +  service name url ) ; assert true ( "" no external  service  u r l could be found for namespace: ""  +  namespace  +  "" and name: "" +  service name  strings . is not blank ( url )  ) ; log info ( "" service ""  +  service name  +  "" in namespace: "" +  namespace +  ""  u r l  =  "" +  url ) ; return url;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\WebDriverFacade.java,navigate to service,public string   (  string service name )  {   string url = get service url ( service name ) ;  web driver driver = get driver (  ) ; driver . navigate (  )  . to ( url ) ; return url;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\WebDriverFacade.java,set default timeout in seconds,public timeout in seconds )  {  this . default timeout in seconds = default timeout in seconds;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\WebDriverFacade.java,sleep,public thread . sleep ( millis ) ;  }  catch  (   interrupted exception e )   {   }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\WebDriverFacade.java,to string,"override public  string   (  )  {  return ""element . is enabled (  ) "";  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\WebDriverFacade.java,until,public string message long timeout in seconds  expected condition <  boolean >  condition )  {  return new  web driver wait ( get driver (  )  timeout in seconds )  . with message ( message )  . until ( condition ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\WebDriverFacade.java,until element predicate,"public in seconds final  by by final  function <  web element  boolean >  element predicate )  {   string message = """"  +  by  +  "" matches "" +  element predicate; return until ( message timeout in seconds new  expected condition <  boolean >  (  )  {  public  boolean apply (   web driver driver )  {   web element element = find optional element ( by ) ; if  ( element  =  =  null )   {  log wait ( """"  +  by  +  """" ) ; return false;  }  else  {   boolean value = element predicate . apply ( element ) ; if  ( value  !  =  null && value . boolean value (  )  )   {  log info ( """"  +  by  +  "" matches "" +  element predicate +  """" ) ; return true;  }  else  {  log wait ( """"  +  by  +  "" matches "" +  element predicate +  """" ) ; return false;  }   }   }   }   ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\WebDriverFacade.java,until is displayed,"public in seconds final  by by )  {  return until element predicate ( timeout in seconds by new  function <  web element  boolean >  (  )  {  @ override public  string to string (  )  {  return ""element . is displayed (  ) "";  }  @ override public  boolean apply (   web element element )  {  return element . is displayed (  ) ;  }   }   ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\WebDriverFacade.java,until is enabled,"public in seconds final  by by )  {  return until element predicate ( timeout in seconds by new  function <  web element  boolean >  (  )  {  @ override public  string to string (  )  {  return ""element . is enabled (  ) "";  }  @ override public  boolean apply (   web element element )  {  return element . is enabled (  ) ;  }   }   ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\WebDriverFacade.java,until link clicked,"public in seconds final  by by )  {   string message = ""click link ""  +  by; return until ( message timeout in seconds new  expected condition <  boolean >  (  )  {  public  boolean apply (   web driver driver )  {   web element link = find optional element ( by ) ; if  ( link  !  =  null )   {  log info ( "" clicking link: ""  +  by  +  """" ) ; link . click (  ) ; log info ( "" clicked link: ""  +  by  +  "" now"" ) ; return true;  }  else  {  log info ( "" not found link ""  +  by  +  """" ) ; return false;  }   }   }   ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\WebDriverFacade.java,until link clicked loop,"public by by  string expected url )  {  for  ( int i = 0; i  <  10; i +  +  )   {  until link clicked ( by ) ; sleep (  millis . seconds ( 10 )  ) ; if  ( current url starts with ( expected url )  )   {  break;  }  else  {  log warn ( ""lets try re - clicking link: ""  +  by ) ;  }   }  assert current url starts with ( expected url ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\WebDriverFacade.java,until one of,"public by .  .  .  bys )  {  final  list <  by >  by list =  arrays . as list ( bys ) ;  string message = "" one of these is available: ""  +  by list; until ( message default timeout in seconds new  expected condition <  boolean >  (  )  {  @ override public  boolean apply (   web driver driver )  {  for  (   by by : bys )   {   web element element = find optional element ( by ) ; if  ( element  !  =  null && element . is displayed (  )  && element . is enabled (  )  )   {  log info ( "" found ""  +  element  +  "" for "" +  by +  """" ) ; return true;  }   }  log info ( "" still not found any of ""  +  by list  +  """" ) ; return false;  }   }   ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\WebDriverFacade.java,until selected by visible text,"public in seconds final  by by final  string value )  {   string message = ""select ""  +  by  +  "" with value: "" +  value; return new  web driver wait ( get driver (  )  timeout in seconds )  . with message ( message )  . until ( new  expected condition <  boolean >  (  )  {  @ override public  boolean apply (   web driver web driver )  {   web element element = find optional element ( by ) ; if  ( element  !  =  null && element . is enabled (  )  )   {   select select = new  select ( element ) ; try  {  select . select by visible text ( value ) ; log info ( """"  +  by  +  "" select "" +  select +  "" selected value: "" +  value ) ; return true;  }  catch  (   no such element exception e )   {  log wait ( """"  +  by  +  "" select "" +  select +  "" does not yet have value: "" +  value ) ; return false;  }   }  else  {  log wait ( """"  +  by  +  "" not enabled"" ) ; return false;  }   }   }   ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-spring-boot\src\main\java\io\fabric8\spring\boot\converters\FactoryConverter.java,convert,override public  object   (  object o  type descriptor type descriptor  type descriptor type descriptor1 )  {  try  {  final  object factory = bean factory . get bean ( type ) ; final  method method = factory . get class (  )  . get declared method ( name source type ) ; return  (  t ) method . invoke ( fact
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-spring-boot\src\main\java\io\fabric8\spring\boot\converters\FactoryConverter.java,get convertible types,override public  set <  convertible pair >    (  )  {  return  collections . singleton ( new  convertible pair ( source type target type )  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-spring-boot\src\main\java\io\fabric8\spring\boot\converters\FactoryConverter.java,get name,public string   (  )  {  return name;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-spring-boot\src\main\java\io\fabric8\spring\boot\converters\FactoryConverter.java,get source type,public class <  s >    (  )  {  return source type;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-spring-boot\src\main\java\io\fabric8\spring\boot\converters\FactoryConverter.java,get target type,public class <  s >    (  )  {  return target type;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-spring-boot\src\main\java\io\fabric8\spring\boot\converters\FactoryConverter.java,get type,public class <  ?  >    (  )  {  return type;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-spring-boot\src\main\java\io\fabric8\spring\boot\converters\FactoryConverter.java,set bean factory,override public void   (  bean factory bean factory )  throws  beans exception  {  this . bean factory = bean factory;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-spring-boot\src\main\java\io\fabric8\spring\boot\converters\FactoryConverter.java,set name,public string name )  {  this . name = name;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-spring-boot\src\main\java\io\fabric8\spring\boot\converters\FactoryConverter.java,set source type,public class <  s >  source type )  {  this . source type = source type;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-spring-boot\src\main\java\io\fabric8\spring\boot\converters\FactoryConverter.java,set target type,public class <  s >  target type )  {  this . target type = target type;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-spring-boot\src\main\java\io\fabric8\spring\boot\converters\FactoryConverter.java,set type,public class <  ?  >  type )  {  this . type = type;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-spring-boot\src\main\java\io\fabric8\spring\boot\condition\OnKubernetesAvailableCondition.java,get match outcome,"override public  condition outcome   (  condition context context  annotated type metadata metadata )  {   condition outcome outcome = inside . get match outcome ( context metadata ) ; if  ( outcome . is match (  )  )   {  return  condition outcome . no match ( "" inside condition match . "" ) ;  }  else  {  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-spring-boot\src\main\java\io\fabric8\spring\boot\converters\CoverterServiceConfiguration.java,conversion service,bean @ conditional on missing bean (  conversion service . class )  public  conversion service   (  set <  generic converter >  generic converters )  {   conversion service factory bean bean = new  conversion service factory bean (  ) ; bean . set converters ( generic converters ) ; bean . after properties
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-spring-boot\src\main\java\io\fabric8\spring\boot\converters\CoverterServiceConfiguration.java,service converter,bean  service converter   (  kubernetes client client )  {   service converter converter = new  service converter (  ) ; converter . set kubernetes client ( client ) ; return converter;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-spring-boot\src\main\java\io\fabric8\spring\boot\external\ExternalServiceRegistrar.java,get service,override public  service   (  string service name )  {  if  ( kubernetes client  =  =  null )   {  kubernetes client = bean factory . get bean (  kubernetes client . class ) ;  }  return kubernetes client . services (  )  . with name ( service name )  . get (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-spring-boot\src\main\java\io\fabric8\spring\boot\external\ExternalServiceRegistrar.java,set bean factory,override public void   (  bean factory bean factory )  throws  beans exception  {  this . bean factory = bean factory;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-spring-boot\src\main\java\io\fabric8\spring\boot\converters\ServiceConverter.java,convert,override public  object   (  object o  type descriptor source type  type descriptor target type )  {   service source =  (  service ) o;  string service protocol = get protocol of service ( source ) ;  string service port = get port of service ( source ) ;  string str = get service u r l ( kubernetes client
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-spring-boot\src\main\java\io\fabric8\spring\boot\converters\ServiceConverter.java,get convertible types,override public  set <  convertible pair >    (  )  {  return new  linked hash set <  >  (  arrays . as list ( new  convertible pair (  service . class  string . class )  new  convertible pair (  service . class  u r l . class )  )  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-spring-boot\src\main\java\io\fabric8\spring\boot\converters\ServiceConverter.java,get kubernetes client,public kubernetes client   (  )  {  return kubernetes client;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-spring-boot\src\main\java\io\fabric8\spring\boot\converters\ServiceConverter.java,get port of service,private string   (  service service )  {   string port = null; if  ( service . get additional properties (  )  . contains key (  p o r t )  )   {   object port property = service . get additional properties (  )  . get (  p o r t ) ; if  ( port property instanceof  string )   {  port =  (  string ) port property;  }   }  return port;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-spring-boot\src\main\java\io\fabric8\spring\boot\converters\ServiceConverter.java,get protocol of service,private string   (  service service )  {   string protocol =  d e f a u l t _  p r o t o c o l; if  ( service . get additional properties (  )  . contains key (  p r o t o c o l )  )   {   object protocol property = service . get additional properties (  )  . get (  p r o t o c o l ) ; if  ( protocol property instanceof  string )   {  protocol =  (  string ) protocol property;  }   }  return protocol;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-spring-boot\src\main\java\io\fabric8\spring\boot\converters\ServiceConverter.java,get service u r l,"public string   (  kubernetes client client  service srv  string service protocol  string service port name )  {   string service name =  kubernetes helper . get name ( srv ) ;  string service proto = service protocol  !  =  null  ?  service protocol :  kubernetes services . service to protocol ( service name service port name ) ; if  (  strings . is null or blank ( service port name )  &&  kubernetes helper . is open shift ( client )  )   {   open shift client open shift client = client . adapt (  open shift client . class ) ;  route list route list = open shift client . routes (  )  . list (  ) ; for  (   route route : route list . get items (  )  )   {  if  ( route . get spec (  )  . get to (  )  . get name (  )  . equals ( service name )  )   {  return  ( service proto  +  "": /  / ""  +  route . get spec (  )  . get host (  )  )  . to lower case (  ) ;  }   }   }   service port port =  kubernetes helper . find service port by name ( srv service port name ) ; if  ( port  =  =  null )   {  throw new  runtime exception ( "" couldn't find port: ""  +  service port name  +  "" for service:"" +  service name ) ;  }   string cluster i p = srv . get spec (  )  . get cluster i p (  ) ; if  ( "" none"" . equals ( cluster i p )  )   {  throw new  illegal state exception ( "" service ""  +  service name  +  "" is head - less .   search for endpoints instead . "" ) ;  }  return  ( service proto  +  "": /  / ""  +  cluster i p +  "":"" +  port . get port (  )  )  . to lower case (  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-spring-boot\src\main\java\io\fabric8\spring\boot\converters\ServiceConverter.java,is service external,private boolean   (  service service )  {   boolean external = false; if  ( service . get additional properties (  )  . contains key (  e x t e r n a l )  )   {   object external property = service . get additional properties (  )  . get (  e x t e r n a l ) ; if  ( external property instanceof  boolean )   {  external =  (  boolean ) external property;  }   }  return external;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-spring-boot\src\main\java\io\fabric8\spring\boot\converters\ServiceConverter.java,set kubernetes client,public kubernetes client kubernetes client )  {  this . kubernetes client = kubernetes client;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-spring-boot\src\main\java\io\fabric8\spring\boot\Fabric8Application.java,main,public string[] args )  {   spring application . run (  fabric8 application . class args ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-spring-boot\src\main\java\io\fabric8\spring\boot\KubernetesClientConfiguration.java,kubernetes client,"bean public  kubernetes client   (  )  {   l o g g e r . debug ( "" trying to init  {  }  by auto - configuration . ""  kubernetes client . class . get simple name (  )  ) ; return new  default kubernetes client (  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-spring-boot\src\test\java\io\fabric8\spring\boot\external\ApplicationExternalTest.java,set up class,"before class public static void   (  )  throws  exception  {   system . set property ( "" s e r v i c e1 _  p r o t o c o l"" ""https"" ) ;  system . set property ( "" s e r v i c e2 _  p r o t o c o l"" ""https"" ) ;  system . set property ( "" s e r v i c e3 _  p r o t o c o l"" ""https"" ) ;  mock configurer . configure (  ) ;  system . set property (  kubern"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-spring-boot\src\test\java\io\fabric8\spring\boot\external\ApplicationExternalTest.java,test multiport,"test public void   (  )  {   assert . assert not null ( multiport ) ;  assert . assert true ( multiport . ends with ( ""8081"" )  ) ;  assert . assert not null ( multiport2 ) ;  assert . assert true ( multiport2 . ends with ( ""8082"" )  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-spring-boot\src\test\java\io\fabric8\spring\boot\external\ApplicationExternalTest.java,test spring boot,test public void   (  )  {   assert . assert not null ( client ) ;  assert . assert not null ( service1 ) ;  assert . assert not null ( service2 ) ;  assert . assert not null ( service3 ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-spring-boot\src\main\java\io\fabric8\spring\boot\KubernetesServiceFactoryBean.java,get conversion service,public conversion service   (  )  {  return conversion service;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-spring-boot\src\main\java\io\fabric8\spring\boot\KubernetesServiceFactoryBean.java,get name,public string   (  )  {  return name;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-spring-boot\src\main\java\io\fabric8\spring\boot\KubernetesServiceFactoryBean.java,get object,override public  object   (  )  throws  exception  {  if  ( type . equals (  service . class )  )   {  return service;  }  else  {  return conversion service . convert ( service type ) ;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-spring-boot\src\main\java\io\fabric8\spring\boot\KubernetesServiceFactoryBean.java,get object type,override public  class <  ?  >    (  )  {  return type;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-spring-boot\src\main\java\io\fabric8\spring\boot\KubernetesServiceFactoryBean.java,get port,public string   (  )  {  return port;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-spring-boot\src\main\java\io\fabric8\spring\boot\KubernetesServiceFactoryBean.java,get service,public service   (  )  {  return service;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-spring-boot\src\main\java\io\fabric8\spring\boot\KubernetesServiceFactoryBean.java,get type,public class <  ?  >    (  )  {  return type;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-spring-boot\src\main\java\io\fabric8\spring\boot\KubernetesServiceFactoryBean.java,is singleton,override public boolean   (  )  {  return true;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-spring-boot\src\main\java\io\fabric8\spring\boot\KubernetesServiceFactoryBean.java,set conversion service,"autowired @ qualifier ( ""conversion service"" )  public void   (  conversion service conversion service )  {  this . conversion service = conversion service;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-spring-boot\src\main\java\io\fabric8\spring\boot\KubernetesServiceFactoryBean.java,set name,public string name )  {  this . name = name;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-spring-boot\src\main\java\io\fabric8\spring\boot\KubernetesServiceFactoryBean.java,set port,public string port )  {  this . port = port;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-spring-boot\src\main\java\io\fabric8\spring\boot\KubernetesServiceFactoryBean.java,set service,public service service )  {  this . service = service;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-spring-boot\src\main\java\io\fabric8\spring\boot\KubernetesServiceFactoryBean.java,set type,public class <  ?  >  type )  {  this . type = type;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-spring-boot\src\main\java\io\fabric8\spring\boot\internal\InternalServiceRegistar.java,get service,override public  service   (  string service name )  {   map <  string  string >  env =  system . getenv (  ) ;  string prefix = service name . to upper case (  ) ;  string service host = env . get ( prefix  +   h o s t _  s u f f i x ) ;  string default port name = prefix  +   s e r v i c e _  p o r t;  string named port prefix = default
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-spring-boot\src\test\java\io\fabric8\spring\boot\internal\MockConfigurer.java,configure,"public service service1 = new  service builder (  )  . with new metadata (  )  . with name ( ""service1"" )  . end metadata (  )  . with new spec (  )  . add new port (  )  . with protocol ( "" t c p"" )  . with port ( 80 )  . with new target port ( 9090 )  . end port (  )  . end spec (  )  . build (  ) ;  service service2 = new  service builder (  )  . with new metadata (  )  . with name ( ""service2"" )  . end metadata (  )  . with new spec (  )  . add new port (  )  . with protocol ( "" t c p"" )  . with port ( 80 )  . with new target port ( 8080 )  . end port (  )  . end spec (  )  . build (  ) ;  service service3 = new  service builder (  )  . with new metadata (  )  . with name ( ""service3"" )  . end metadata (  )  . with new spec (  )  . add new port (  )  . with protocol ( "" t c p"" )  . with port ( 443 )  . with new target port ( 443 )  . end port (  )  . with cluster i p ( ""172 . 30 . 17 . 2"" )  . end spec (  )  . build (  ) ;  service multiport = new  service builder (  )  . with new metadata (  )  . with name ( ""multiport"" )  . end metadata (  )  . with new spec (  )  . add new port (  )  . with name ( ""port1"" )  . with protocol ( "" t c p"" )  . with port ( 8081 )  . with new target port ( 8081 )  . end port (  )  . add new port (  )  . with name ( ""port2"" )  . with protocol ( "" t c p"" )  . with port ( 8082 )  . with new target port ( 8082 )  . end port (  )  . add new port (  )  . with name ( ""port3"" )  . with protocol ( "" t c p"" )  . with port ( 8083 )  . with new target port ( 8083 )  . end port (  )  . with cluster i p ( ""172 . 30 . 17 . 2"" )  . end spec (  )  . build (  ) ;  m o c k . expect (  )  . get (  )  . with path ( "" / api / v1 / namespaces / default / services / service1"" )  . and return ( 200 service1 )  . always (  ) ;  m o c k . expect (  )  . get (  )  . with path ( "" / api / v1 / namespaces / default / services / service2"" )  . and return ( 200 service2 )  . always (  ) ;  m o c k . expect (  )  . get (  )  . with path ( "" / api / v1 / namespaces / default / services / service3"" )  . and return ( 200 service3 )  . always (  ) ;  m o c k . expect (  )  . get (  )  . with path ( "" / api / v1 / namespaces / default / services / multiport"" )  . and return ( 200 multiport )  . always (  ) ;  m o c k . expect (  )  . get (  )  . with path ( "" / api / v1 / namespaces / default / services"" )  . and return ( 200 new  service list builder (  )  . with items ( service1 service2 service3 multiport )  . build (  )  )  . always (  ) ;  m o c k . expect (  )  . get (  )  . with path ( "" / api / v1 / namespaces / default / endpoints"" )  . and return ( 200 new  endpoints list builder (  )  . build (  )  )  . always (  ) ;  m o c k . expect (  )  . get (  )  . with path ( "" / oapi / v1 / namespaces / default / routes"" )  . and return ( 200 new  route builder (  )  . build (  )  )  . always (  ) ;  string master url =  m o c k . get server (  )  . url ( "" / "" )  . to string (  ) ;  system . set property (  config .  k u b e r n e t e s _  m a s t e r _  s y s t e m _  p r o p e r t y master url ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-spring-boot\src\test\java\io\fabric8\spring\boot\external\MockConfigurer.java,configure,"public service service1 = new  service builder (  )  . with new metadata (  )  . with name ( ""service1"" )  . end metadata (  )  . with new spec (  )  . add new port (  )  . with protocol ( "" t c p"" )  . with port ( 80 )  . with new target port ( 9090 )  . end port (  )  . end spec (  )  . build (  ) ;  service service2 = new  service builder (  )  . with new metadata (  )  . with name ( ""service2"" )  . end metadata (  )  . with new spec (  )  . add new port (  )  . with protocol ( "" t c p"" )  . with port ( 80 )  . with new target port ( 8080 )  . end port (  )  . end spec (  )  . build (  ) ;  service service3 = new  service builder (  )  . with new metadata (  )  . with name ( ""service3"" )  . end metadata (  )  . with new spec (  )  . add new port (  )  . with protocol ( "" t c p"" )  . with port ( 443 )  . with new target port ( 443 )  . end port (  )  . with cluster i p ( ""172 . 30 . 17 . 2"" )  . end spec (  )  . build (  ) ;  service multiport = new  service builder (  )  . with new metadata (  )  . with name ( ""multiport"" )  . end metadata (  )  . with new spec (  )  . add new port (  )  . with name ( ""port1"" )  . with protocol ( "" t c p"" )  . with port ( 8081 )  . with new target port ( 8081 )  . end port (  )  . add new port (  )  . with name ( ""port2"" )  . with protocol ( "" t c p"" )  . with port ( 8082 )  . with new target port ( 8082 )  . end port (  )  . add new port (  )  . with name ( ""port3"" )  . with protocol ( "" t c p"" )  . with port ( 8083 )  . with new target port ( 8083 )  . end port (  )  . with cluster i p ( ""172 . 30 . 17 . 2"" )  . end spec (  )  . build (  ) ;  m o c k . expect (  )  . get (  )  . with path ( "" / api / v1 / namespaces / default / services / service1"" )  . and return ( 200 service1 )  . always (  ) ;  m o c k . expect (  )  . get (  )  . with path ( "" / api / v1 / namespaces / default / services / service2"" )  . and return ( 200 service2 )  . always (  ) ;  m o c k . expect (  )  . get (  )  . with path ( "" / api / v1 / namespaces / default / services / service3"" )  . and return ( 200 service3 )  . always (  ) ;  m o c k . expect (  )  . get (  )  . with path ( "" / api / v1 / namespaces / default / services / multiport"" )  . and return ( 200 multiport )  . always (  ) ;  m o c k . expect (  )  . get (  )  . with path ( "" / api / v1 / namespaces / default / services"" )  . and return ( 200 new  service list builder (  )  . with items ( service1 service2 service3 multiport )  . build (  )  )  . always (  ) ;  m o c k . expect (  )  . get (  )  . with path ( "" / api / v1 / namespaces / default / endpoints"" )  . and return ( 200 new  endpoints list builder (  )  . build (  )  )  . always (  ) ;  m o c k . expect (  )  . get (  )  . with path ( "" / oapi / v1 / namespaces / default / routes"" )  . and return ( 200 new  route builder (  )  . build (  )  )  . always (  ) ;  string master url =  m o c k . get server (  )  . url ( "" / "" )  . to string (  ) ;  system . set property (  config .  k u b e r n e t e s _  m a s t e r _  s y s t e m _  p r o p e r t y master url ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-spring-boot\src\test\java\io\fabric8\spring\boot\internal\ApplicationInternalTest.java,set up class,"before class public static void   (  )  throws  exception  {   system . set property ( "" s e r v i c e1 _  p r o t o c o l"" ""https"" ) ;  system . set property ( "" s e r v i c e2 _  p r o t o c o l"" ""https"" ) ;  system . set property ( "" s e r v i c e3 _  p r o t o c o l"" ""https"" ) ;  mock configurer . configure (  ) ;  system . set property (  kubern"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-spring-boot\src\test\java\io\fabric8\spring\boot\internal\ApplicationInternalTest.java,test multiport,"test public void   (  )  {   assert . assert not null ( multiport ) ;  assert . assert true ( multiport . ends with ( ""8081"" )  ) ;  assert . assert not null ( multiport2 ) ;  assert . assert true ( multiport2 . ends with ( ""8082"" )  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-spring-boot\src\test\java\io\fabric8\spring\boot\internal\ApplicationInternalTest.java,test spring boot,test public void   (  )  {   assert . assert not null ( client ) ;  assert . assert not null ( service1 ) ;  assert . assert not null ( service2 ) ;  assert . assert not null ( service3 ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-spring-boot\src\test\java\io\fabric8\spring\boot\URLToConnection.java,to url connection,"factory @ service name public  u r l connection   ( @ service name  service srv )  throws  i o exception  {   u r l url = new  u r l ( ""http: /  / ""  +  srv . get spec (  )  . get cluster i p (  )   +  "":"" +  srv . get spec (  )  . get ports (  )  . iterator (  )  . next (  )  . get port (  )  ) ; return url . open connection (  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Arrays.java,join,public string   (  string separator  object .  .  .  values )  {   string builder builder = new  string builder (  ) ; boolean first = true; if  ( values  !  =  null )   {  for  (   object value : values )   {  if  ( first )   {  first = false;  }  else  {  builder . append ( separator ) ;  }  builder . append ( value ) ;  }   }  return builder . to string (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Asserts.java,assert assertion error,"public assertion error   (  block block )  throws  exception  {   assertion error answer = null; try  {  block . invoke (  ) ;  }  catch  (   assertion error e )   {  answer = e;  system . out . println ( "" caught expected assertion failure: ""  +  e ) ;  }  catch  (   exception e )   {  throw e;  }  if  ( answer  =  =  null )   {  throw new  assertion error ( "" expected an assertion error from block: ""  +  block ) ;  }   asserts .  l o g . info ( "" caught expected assertion failure: ""  +  answer ) ; return answer;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Asserts.java,assert exception,"public exception   (  block block )  throws  exception  {   exception answer = null; try  {  block . invoke (  ) ;  }  catch  (   exception e )   {  answer = e;  system . out . println ( "" caught expected assertion failure: ""  +  e ) ;  }  if  ( answer  =  =  null )   {  throw new  assertion error ( "" expected an  exception from block: ""  +  block ) ;  }   asserts .  l o g . info ( "" caught expected assertion failure: ""  +  answer ) ; return answer;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Asserts.java,assert for period,public ms  block block )  throws  exception  {  long end =  system . current time millis (  )   +  timeout ms; while  ( true )   {  if  (  system . current time millis (  )   >  end )   {  break;  }  try  {  block . invoke (  ) ;  }  catch  (   assertion error e )   {  if  ( is verbose wait message (  )  )   {  e . print stack trace (  ) ;  }  throw e;  }  catch  (   throwable e )   {  if  ( is verbose wait message (  )  )   {  e . print stack trace (  ) ;  }  throw new  assertion error ( e ) ;  }  try  {   thread . sleep ( 1000 ) ;  }  catch  (   interrupted exception e )   {  e . print stack trace (  ) ;  }   }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Asserts.java,assert wait for,public block block )  throws  exception  {  assert wait for ( 30 * 1000 block ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Asserts.java,is verbose wait message,"protected string value =  system . getenv ( "" f a b r i c8 _  v e r b o s e _  a s s e r t"" ) ; return value  !  =  null && value . equals ignore case ( ""true"" ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\AvailablePortFinder.java,available,"public illegal argument exception  {  if  ( port  <  current min port . get (  )  || port  >   m a x _  p o r t _  n u m b e r )   {  throw new  illegal argument exception ( "" invalid start current min port: ""  +  port ) ;  }   server socket ss = null;  datagram socket ds = null; try  {  ss = new  server socket ( port ) ; ss . set reuse address ( true ) ; ds = new  datagram socket ( port ) ; ds . set reuse address ( true ) ; return true;  }  catch  (   i o exception e )   {   }  finally  {  if  ( ds  !  =  null )   {  ds . close (  ) ;  }  if  ( ss  !  =  null )   {  try  {  ss . close (  ) ;  }  catch  (   i o exception e )   {   }   }   }  return false;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\AvailablePortFinder.java,get next available,"public port )  {  if  ( from port  <  current min port . get (  )  || from port  >   m a x _  p o r t _  n u m b e r )   {  throw new  illegal argument exception ( "" from port number not in valid range: ""  +  from port ) ;  }  for  ( int i = from port; i  <  =   m a x _  p o r t _  n u m b e r; i +  +  )   {  if  ( available ( i )  )   {   l o g . info ( ""get next available (  {  }  )   -  >   {  } "" from port i ) ; return i;  }   }  throw new  no such element exception ( "" could not find an available port above ""  +  from port ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\AvailablePortFinder.java,run,public l o c k . close (  ) ;  }  catch  (   exception ex )   {   }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Base64Encoder.java,decode,"public data )  {  if  ( e data  =  =  null )   {  throw new  illegal argument exception ( "" cannot decode null"" ) ;  }  byte[] clean e data = e data . clone (  ) ; int clean e length = 0; for  (  byte an e data : e data )   {  if  ( an e data  <  256 &&  c o d e s[an e data]  <  64 )   {  clean e data[clean e length +  + ] = an e data;  }   }  int d length =  ( clean e length  /  4 )  * 3; switch  ( clean e length % 4 )   {  case 3: d length +  = 2; break; case 2: d length +  + ; break;  }  byte[] d data = new byte[d length]; int d index = 0; for  ( int i = 0; i  <  e data . length; i +  = 4 )   {  if  (  ( i  +  3 )   >  e data . length )   {  throw new  illegal argument exception ( ""byte array is not a valid com . sun . syndication . io . impl .  base64 encoding"" ) ;  }  int e1 =  c o d e s[clean e data[i]]; int e2 =  c o d e s[clean e data[i  +  1]]; int e3 =  c o d e s[clean e data[i  +  2]]; int e4 =  c o d e s[clean e data[i  +  3]]; d data[d index +  + ] =  ( byte )  (  ( e1  <  <  2 )  |  ( e2  >  >  4 )  ) ; if  ( d index  <  d data . length )   {  d data[d index +  + ] =  ( byte )  (  ( e2  <  <  4 )  |  ( e3  >  >  2 )  ) ;  }  if  ( d index  <  d data . length )   {  d data[d index +  + ] =  ( byte )  (  ( e3  <  <  6 )  |  ( e4 )  ) ;  }   }  return d data;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Base64Encoder.java,encode,"public data )  {  if  ( d data  =  =  null )   {  throw new  illegal argument exception ( "" cannot encode null"" ) ;  }  byte[] e data = new byte[ (  ( d data . length  +  2 )   /  3 )  * 4]; int e index = 0; for  ( int i = 0; i  <  d data . length; i +  = 3 )   {  int d1; int d2 = 0; int d3 = 0; int e1; int e2; int e3; int e4; int pad = 0; d1 = d data[i]; if  (  ( i  +  1 )   <  d data . length )   {  d2 = d data[i  +  1]; if  (  ( i  +  2 )   <  d data . length )   {  d3 = d data[i  +  2];  }  else  {  pad = 1;  }   }  else  {  pad = 2;  }  e1 =  a l p h a s e t[ ( d1 &  i6 o2 )   >  >  2]; e2 =  a l p h a s e t[ ( d1 &  o6 i2 )   <  <  4 |  ( d2 &  i4 o4 )   >  >  4]; e3 =  a l p h a s e t[ ( d2 &  o4 i4 )   <  <  2 |  ( d3 &  i2 o6 )   >  >  6]; e4 =  a l p h a s e t[ ( d3 &  o2 i6 ) ]; e data[e index +  + ] =  ( byte ) e1; e data[e index +  + ] =  ( byte ) e2; e data[e index +  + ] =  ( pad  <  2 )   ?   ( byte ) e3 :  ( byte ) ' = '; e data[e index +  + ] =  ( pad  <  1 )   ?   ( byte ) e4 :  ( byte ) ' = ';  }  return e data;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Base64Encoder.java,main,"public string[] args )  throws  exception  {   string s = ""\n p g rpdi b4b wxucz0ia h r0c dov l3d3dy53 my5vcmcv m tk5 o s94a h rtb c i +  v2 uncm ugc h jvc g9za w5n i dxh i ghy\n""  +  "" z w y9 imh0d h a6 ly93d3cu z29v z2xl lm nvb s9jb3 jwb3 jhd g uvc29md hdhcm vfc h jpbm npc gxlcy5od g1s ij5z\n""  +  ""b21l i gd1a w rlb glu z x mg p c9h pn rv i ghlb h ag y3 vy yi b0a g ugc h jv ymxlb s bv zi b jbn rlcm5ld c bzb2 z0d2 fy\n"" +  "" z s b0a g f0 i gluc3 rhb gxz i gl0c2 vs zi b3a x rob3 v0 i h rlb gxpbmcge w91 l c bvci bi z whhdm vz i g jh z gx5 i g9u\n"" +  "" y2 uga x qg z2 v0cy bvbi b5b3 vy i g nvb x b1d g vy li b x z sd2 z s bi z w vu i ghl y x jpbmcg y s bsb3 qgb2 yg y29tc gxh\n"" +  ""a w50cy bh ym91d c b0a glz i gxhd g vse s bhbm qga x qgc2 vlb x mgd g8g ym ug z2 v0d glu zy b3b3 jz z s4g v2 ugd ghp\n"" +  ""bmsga x qncy bpb x bvcn rhbn qgd ghhd c b5b3 ugcm v0 y wlu i g nvbn ryb2wgb2 yge w91ci bjb21wd x rlci bhbm qg\n"" +  ""d ghhd c b0a g vy z s bi z s bzb21l i g ns z w fy i h n0 y w5k y x jkcy bpbi bvd x iga w5kd x n0cnku i exld c b1cy brbm93\n"" +  "" i glm i hlvd s b0a gluay b0a g vz z s bnd wlk z wxpbm vz i g fy z s b1c2 vmd wwgb3 iga w yge w91 i ghhdm ugc3 vn z2 vz\n"" +  ""d glvbn mgd g8ga w1wcm92 z s b0a g vt lgo8 yn ig lz4 k p g jy i c8 +  sm9u y x ro y w4g um9z z w5i z x jn cjxici av pgo8\n"" +  "" l2 rpdj4 k\n"";  system . out . println ( decode ( s )  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\ChecksumUtils.java,checksum,public input stream is )  throws  i o exception  {  try  {   c r c32 crc = new  c r c32 (  ) ; byte[] buffer = new byte[8192]; int l; while  (  ( l = is . read ( buffer )  )   >  0 )   {  crc . update ( buffer 0 l ) ;  }  return crc . get value (  ) ;  }  finally  {  if  ( is  !  =  null )   {  try  {  is . close (  ) ;  }  catch  (   i o exception e )   {   }   }   }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\ChecksumUtils.java,checksum file,public file file )  throws  i o exception  {  return checksum ( new  file input stream ( file )  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\ChecksumUtils.java,load installed checksum cache,"public map <  file  long >    (  file dir )  {   map <  file  long >  answer = new  hash map <  file  long >  (  ) ;  file cache file = new  file ( dir  f o l d e r _  c h e c k s u m _  c a c h e ) ; if  ( cache file . exists (  )  && cache file . is file (  )  )   {   properties properties = new  properties (  ) ; try  {  properties . load ( new  file reader ( cache file )  ) ;  }  catch  (   i o exception e )   {   l o g . warn ( "" failed to load checksum cache file ""  +  cache file  +  "" .  "" +  e e ) ;  }   set <  map .  entry <  object  object >  >  entries = properties . entry set (  ) ; for  (   map .  entry <  object  object >  entry : entries )   {   object key = entry . get key (  ) ; if  ( key  !  =  null )   {   string key text = key . to string (  ) ;  object value = entry . get value (  ) ; if  ( value  !  =  null )   {   string value text = value . to string (  ) ; try  {  long number =  long . parse long ( value text ) ; answer . put ( new  file ( dir key text )  number ) ;  }  catch  (   number format exception e )   {   l o g . warn ( "" failed to parse checksum '""  +  value text  +  ""' in "" +  cache file +  "" .  "" +  e e ) ;  }   }   }   }   }  return answer;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\ChecksumUtils.java,save installed checksum cache,"public file dir  map <  file  long >  checksums )  throws  i o exception  {   file cache file = new  file ( dir  f o l d e r _  c h e c k s u m _  c a c h e ) ;  properties properties = new  properties (  ) ;  set <  map .  entry <  file  long >  >  entries = checksums . entry set (  ) ; for  (   map .  entry <  file  long >  entry : entries )   {  properties . put ( entry . get key (  )  . get name (  )  """"  +  entry . get value (  )  ) ;  }  properties . store ( new  file writer ( cache file )  "" updated on ""  +  new  date (  )  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\ClassLoaders.java,with context class loader,public t >  t   (  class loader class loader  callable <  t >  callable )  throws  exception  {   class loader old class loader =  thread . current thread (  )  . get context class loader (  ) ; try  {   thread . current thread (  )  . set context class loader ( class loader ) ; return callable . call (  ) ;  }  finally  {   thread . current thread (  )  . set context class loader ( old class loader ) ;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Closeables.java,close quietly,public reader closeable )  {  if  ( closeable  !  =  null )   {  try  {  closeable . close (  ) ;  }  catch  (   exception ex )   {   }   }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Collectors.java,collectors,public collector <  t >  .  .  .  collectors )  {  super (  ) ; this . collectors . add all (  arrays . as list ( collectors )  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Collectors.java,add collection,public collection <  t >  items )  {  collectors . add ( new  collector <  t >  (  )  {  @ override public  collection <  t >  get collection (  )  {  return items;  }   }   ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Collectors.java,add collector,public collector <  t >  collector )  {  collectors . add ( collector ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Collectors.java,get collection,override public  collection <  t >    (  )  {  return items;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Dictionaries.java,read string,public string   (  dictionary dictionary  string key  string default value )  {   object obj = dictionary . get ( key ) ; if  ( obj  =  =  null )   {  return default value;  }  else if  ( obj instanceof  string )   {  return  (  string ) obj;  }  else  {  return  string . value of ( obj ) ;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\CompositeFilter.java,composite filter,public collection <  filter <  t >  >  filters )  {  this . filters = filters;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\CompositeFilter.java,is empty,public empty (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\CompositeFilter.java,matches,override public boolean   (  t t )  {  for  (   filter <  t >  filter : filters )   {  if  ( filter . matches ( t )  )   {  return true;  }   }  return false;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\CompositeFilter.java,to string,"override public  string   (  )  {  return "" compsite filter""  +  filters;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\DataStoreUtils.java,strip suffix,public string   (  string value  string suffix )  {  if  ( value . ends with ( suffix )  )   {  return value . substring ( 0 value . length (  )   -  suffix . length (  )  ) ;  }  else  {  return value;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\DataStoreUtils.java,substitute checksum,"public string   (  string key )  {   input stream is = null; try  {   u r l url = new  u r l ( key . substring ( ""checksum:"" . length (  )  )  ) ; is = url . open stream (  ) ; return  string . value of (  checksum utils . checksum ( is )  ) ;  }  catch  (   exception ex )   {  return ""0"";  }  finally  {   closeables . close quietly ( is ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\DataStoreUtils.java,substitute profile property,"public string   (  string key  map <  string  map <  string  string >  >  configs )  {   string pid = key . substring ( ""profile:"" . length (  )  key . index of ( "" / "" )  ) ;  string property key = key . substring ( key . index of ( "" / "" )   +  1 ) ;  map <  string  string >  target props = configs . get ( pid ) ; if  ( target props  !  =  null && target props . contains key ( property key )  )   {  return target props . get ( property key ) ;  }  else  {  return key;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\DataStoreUtils.java,to bytes,public map <  string  string >  source )  {  return to bytes ( to properties ( source )  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\DataStoreUtils.java,to map,public map <  string  string >    ( byte[] source )  {  return to map ( to properties ( source )  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\DataStoreUtils.java,to properties,"public properties   (  string source )  {   properties rc = new  properties (  ) ; try  {  rc . load ( new  string reader ( source )  ) ;  }  catch  (   i o exception ex )   {  throw new  illegal argument exception ( "" cannot load properties from: ""  +  source ex ) ;  }  return rc;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\DataStoreUtils.java,to string,"public string   (  properties source )  {   string writer writer = new  string writer (  ) ; try  {  source . store ( writer null ) ;  }  catch  (   i o exception ex )   {  throw new  illegal argument exception ( "" cannot store properties"" ex ) ;  }  return writer . to string (  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\DataStoreUtils.java,to string properties,public properties   (  map <  string  ?  >  source )  {   properties rc = new  properties (  ) ; for  (   map .  entry <  string  ?  >  entry : source . entry set (  )  )   {   object value = entry . get value (  ) ; if  ( value  !  =  null )   {  rc . put ( entry . get key (  )  value . to string (  )  ) ;  }   }  return rc;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\CountingMap.java,count,public string key )  {   integer answer = key to count . get ( key ) ; return answer  =  =  null  ?  0 : answer;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\CountingMap.java,decrement,public string key )  {  int count = count ( key )   -  1; if  ( count  <  =  0 )   {  key to count . remove ( key ) ; return 0;  }  else  {  set count ( key count ) ; return count;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\CountingMap.java,decrement all,public list <  string >  keys )  {  for  (   string key : keys )   {  decrement ( key ) ;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\CountingMap.java,increment,public string key )  {  int count = count ( key )   +  1; set count ( key count ) ; return count;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\CountingMap.java,increment all,public iterable <  string >  keys )  {  for  (   string key : keys )   {  increment ( key ) ;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\CountingMap.java,key set,public set <  string >    (  )  {  return key to count . key set (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\CountingMap.java,set count,public string key int value )  {  key to count . put ( key value ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\CountingMap.java,to string,"override public  string   (  )  {  return "" counting map { ""  +  key to count  +  ' } ';  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\CountingMap.java,total,public integer value : key to count . values (  )  )   {  if  ( value  !  =  null )   {  answer +  = value;  }   }  return answer;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\DomHelper.java,add child element,public element   (  node parent  string element name  string text content )  {   element element = add child element ( parent element name ) ; element . set text content ( text content ) ; return element;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\DomHelper.java,detach,public node node )  {  if  ( node  !  =  null )   {   node parent node = node . get parent node (  ) ; if  ( parent node  !  =  null )   {  parent node . remove child ( node ) ;  }   }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\DomHelper.java,first child,public element   (  element element  string name )  {   node list nodes = element . get child nodes (  ) ; if  ( nodes  !  =  null )   {  for  ( int i = 0  size = nodes . get length (  ) ; i  <  size; i +  +  )   {   node item = nodes . item ( i ) ; if  ( item instanceof  element )   {   element child element =  (  element ) item; if  ( name . equals ( child element . get tag name (  )  )  )   {  return child element;  }   }   }   }  return null;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\DomHelper.java,first child element,public element   (  node node )  {  if  ( node  !  =  null )   {   node list nodes = node . get child nodes (  ) ; for  ( int i = 0  size = nodes . get length (  ) ; i  <  size; i +  +  )   {   node item = nodes . item ( i ) ; if  ( item instanceof  element )   {  return  (  element ) item;  }   }   }  return null;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\DomHelper.java,first child text content,public string   (  element element  string name )  {   element child =  dom helper . first child ( element name ) ; if  ( child  !  =  null )   {  return child . get text content (  ) ;  }  return null;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\DomHelper.java,get transformer,public transformer   (  )  throws  transformer configuration exception  {  if  ( transformer  =  =  null )   {  transformer = get transformer factory (  )  . new transformer (  ) ;  }  return transformer;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\DomHelper.java,get transformer factory,public transformer factory   (  )  {  if  ( transformer factory  =  =  null )   {  transformer factory =  transformer factory . new instance (  ) ;  }  return transformer factory;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\DomHelper.java,remove children,public element element )  {  while  ( true )   {   node child = element . get first child (  ) ; if  ( child  =  =  null )   {  return;  }  element . remove child ( child ) ;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\DomHelper.java,remove next sibling text,public element element )  {  while  ( true )   {   node sibling = element . get next sibling (  ) ; if  ( sibling instanceof  text )   {  detach ( sibling ) ;  }  else  {  break;  }   }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\DomHelper.java,remove previous sibling text,public element element )  {  while  ( true )   {   node sibling = element . get previous sibling (  ) ; if  ( sibling instanceof  text )   {  detach ( sibling ) ;  }  else  {  break;  }   }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\DomHelper.java,replace with,public node old node  node new node )  {   node parent node = old node . get parent node (  ) ; if  ( parent node  !  =  null )   {  parent node . replace child ( new node old node ) ;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\DomHelper.java,save,public document document  file file )  throws  file not found exception   transformer exception  {   transformer transformer = get transformer (  ) ; transformer . transform ( new  d o m source ( document )  new  stream result ( new  file output stream ( file )  )  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\DomHelper.java,set transformer,public transformer transformer )  {   dom helper . transformer = transformer;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\DomHelper.java,set transformer factory,public transformer factory transformer factory )  {   dom helper . transformer factory = transformer factory;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\DomHelper.java,to xml,public string   (  document document )  throws  transformer exception  {   transformer transformer = get transformer (  ) ;  string writer buffer = new  string writer (  ) ; transformer . transform ( new  d o m source ( document )  new  stream result ( buffer )  ) ; return buffer . to string (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\ExecParseUtils.java,is double quoted,"protected string input )  {  if  ( input  =  =  null || input . trim (  )  . length (  )   =  =  0 )   {  return false;  }  return input . matches ( "" ( ^""  +   q u o t e _  c h a r  +  "" { 2 }  ( [^"" +   q u o t e _  c h a r +  ""] +  ) "" +   q u o t e _  c h a r +  "" { 2 }  ) "" ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\ExecParseUtils.java,is single quoted,"protected string input )  {  if  ( input  =  =  null || input . trim (  )  . length (  )   =  =  0 )   {  return false;  }  return input . matches ( "" ( ^""  +   q u o t e _  c h a r  +  "" { 1 }  ( [^"" +   q u o t e _  c h a r +  ""] +  ) "" +   q u o t e _  c h a r +  "" { 1 }  ) "" ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\ExecParseUtils.java,split to white space separated tokens,"public list <  string >    (  string input )  {  if  ( input  =  =  null )   {  return new  array list <  string >  (  ) ;  }   string tokenizer tokenizer = new  string tokenizer ( input . trim (  )   q u o t e _  c h a r  +   w h i t e s p a c e true ) ;  list <  string >  tokens = new  array list <  string >  (  ) ;  string builder quoted text = new  string builder (  ) ; while  ( tokenizer . has more tokens (  )  )   {   string token = tokenizer . next token (  ) ; if  (  q u o t e _  c h a r . equals ( token )  )   {  quoted text . append (  q u o t e _  c h a r ) ;  string buffer = quoted text . to string (  ) ; if  ( is single quoted ( buffer )  || is double quoted ( buffer )  )   {  tokens . add ( buffer . substring ( 1 buffer . length (  )   -  1 )  ) ; quoted text = new  string builder (  ) ;  }   }  else if  (  w h i t e s p a c e . equals ( token )  )   {  if  ( quoted text . length (  )   >  0 )   {  quoted text . append (  w h i t e s p a c e ) ;  }   }  else  {  if  ( quoted text . length (  )   >  0 )   {  quoted text . append ( token ) ;  }  else  {  tokens . add ( token ) ;  }   }   }  if  ( quoted text . length (  )   >  0 )   {  throw new  illegal argument exception ( "" invalid quoting found in args ""  +  quoted text ) ;  }  return tokens;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\FabricVersionUtils.java,get release version,"public string   (  )  {  if  ( version  !  =  null )   {  return version;  }   input stream is = null; try  {   properties p = new  properties (  ) ; is =  fabric version utils . class . get resource as stream ( "" /  m e t a -  i n f / maven / io . fabric8 / fabric - utils / pom . properties"" ) ; if  ( is  !  =  null )   {  p . load ( is ) ; version = p . get property ( ""version"" """" ) ;  }   }  catch  (   exception e )   {   }  finally  {  if  ( is  !  =  null )   {   i o helpers . close ( is ) ;  }   }  if  ( version  =  =  null )   {   package a package =  fabric version utils . class . get package (  ) ; if  ( a package  !  =  null )   {  version = a package . get implementation version (  ) ; if  ( version  =  =  null )   {  version = a package . get specification version (  ) ;  }   }   }  if  ( version  =  =  null )   {  version = """";  }  return version;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\FileChangeInfo.java,file change info,public
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\FabricValidations.java,is valid container name,public string container name )  {  return container name  !  =  null &&  ! container name . is empty (  )  &&  a l l o w e d _  c o n t a i n e r _  n a m e s _  p a t t e r n . matcher ( container name )  . matches (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\FabricValidations.java,is valid name,deprecated public static boolean   (  string container name )  {  return is valid container name ( container name ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\FileChangeInfo.java,equals,override public boolean   (  object o )  {  if  ( this  =  =  o )  return true; if  ( o  =  =  null || get class (  )   !  =  o . get class (  )  )  return false;  file change info that =  (  file change info ) o; if  ( checksum  !  =  that . checksum )  return false; if  ( length  !  =  that . length )  return false; retur
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\FabricValidations.java,is valid profile name,public string name )  {  return name  !  =  null &&  ! name . is empty (  )  &&  a l l o w e d _  p r o f i l e _  n a m e s _  p a t t e r n . matcher ( name )  . matches (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\FileChangeInfo.java,get checksum,public
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\FabricValidations.java,validate container name,"public string container name )  {  if  (  ! is valid container name ( container name )  )   {  throw new  illegal argument exception ( "" container name '""  +  container name  +  ""' is invalid .   container name must be: lower - case letters  numbers  and  _  or  -  characters"" ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\FabricValidations.java,validate container names,public list <  string >  container names )  {  if  ( container names  !  =  null &&  ! container names . is empty (  )  )   {  for  (   string container name : container names )   {  validate container name ( container name ) ;  }   }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\FabricValidations.java,validate profile name,"public string profile name )  {  if  (  ! is valid profile name ( profile name )  )   {  throw new  illegal argument exception ( "" profile name '""  +  profile name  +  ""' is invalid .   profile name must be: lower - case letters  numbers  and  .   _  or  -  characters"" ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\FabricValidations.java,validate profile names,public collection <  string >  profile names )  {  if  ( profile names  !  =  null &&  ! profile names . is empty (  )  )   {  for  (   string profile name : profile names )  validate profile name ( profile name ) ;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\FileChangeInfo.java,get length,public
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\FileChangeInfo.java,hash code,override public int   (  )  {  int result =  ( int )  ( length ^  ( length  >  >  >  32 )  ) ; result = 31 * result  +   ( int )  ( checksum ^  ( checksum  >  >  >  32 )  ) ; return result;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\FileChangeInfo.java,new instance,public file change info   (  file file )  throws  i o exception  {  if  ( file  !  =  null && file . is file (  )  && file . exists (  )  )   {  long checksum =  checksum utils . checksum file ( file ) ; return new  file change info ( file . length (  )  checksum ) ;  }  else  {  return null;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Files.java,download cycle exception,public string s )  {  super ( s ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Files.java,assert directory exists,"public file file )  {  assert exists ( file ) ; if  (  ! file . is directory (  )  )   {  throw new  illegal argument exception ( file  +  "" is not a directory ! "" ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Files.java,assert exists,"public file file )  {  if  (  ! file . exists (  )  )   {  throw new  illegal argument exception ( file  +  "" does not exist"" ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Files.java,assert file exists,"public file file )  {  assert exists ( file ) ; if  (  ! file . is file (  )  )   {  throw new  illegal argument exception ( file  +  "" is not a file ! "" ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Files.java,copy,public input stream is  output stream os )  throws  i o exception  {  try  {  byte[] buffer = new byte[ b u f f e r _  s i z e]; int len; for  ( ; ;  )   {  len = is . read ( buffer ) ; if  ( len  >  0 )   {  os . write ( buffer 0 len ) ;  }  else  {  break;  }   }   }  finally  {   closeables . close quietly ( is ) ;  closeables . close quietly ( os ) ;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Files.java,create temp file,"public file   (  string path )  throws  i o exception  {   file data dir = new  file ( path ) ;  file tmp dir = new  file ( data dir ""tmp"" ) ; if  (  ! tmp dir . exists (  )  &&  ! tmp dir . mkdirs (  )  )   {  throw new  i o exception ( "" failed to create tmp dir:""  +  tmp dir . get absolute path (  )  ) ;  }  return  file . create temp file (  string . value of ( last tmp file id . increment and get (  )  )  "" . tmp"" tmp dir ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Files.java,find recursive,public set <  file >    (  file file  filter <  file >  filter )  {   set <  file >  files = new  hash set <  >  (  ) ; find recursive ( file filter files ) ; return files;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Files.java,get extension,"public string   (  string filename )  {  if  ( filename  =  =  null )   {  return null;  }  int index = filename . last index of ( "" . "" ) ; if  ( index  =  =   - 1 )   {  return """";  }  else  {  return filename . substring ( index  +  1 ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Files.java,get file extension,public string   (  file file )  {   string file name = file . get name (  ) ; if  ( file name  !  =  null )   {  int idx = file name . last index of ( ' . ' ) ; if  ( idx  >  1 )   {   string answer = file name . substring ( idx  +  1 ) ; if  ( answer . length (  )   >  0 )   {  return answer;  }   }   }  return null;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Files.java,get file name,public string   (  string path )  {  if  ( path  !  =  null )   {  return new  file ( path )  . get name (  ) ;  }  return null;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Files.java,get relative path,public string   (  file root dir  file file )  throws  i o exception  {   string root path = root dir . get canonical path (  ) ;  string full path = file . get canonical path (  ) ; if  ( full path . starts with ( root path )  )   {  return full path . substring ( root path . length (  )  ) ;  }  else  {  return full path;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Files.java,guess media type,"public string   (  string file name )  {  if  ( file name . ends with ( "" . xml"" )  )   {  return ""application / xml"";  }  if  ( file name . ends with ( "" . wadl"" )  )   {  return ""application / wadl + xml"";  }  if  ( file name . ends with ( "" . wsdl"" )  )   {  return ""application / wsdl + xml"";  }  if  ( file name . ends with ( "" . xsd"" )  )   {  return ""application / xsd + xml"";  }  if  ( file name . ends with ( "" . json"" )  )   {  return ""application / json"";  }  if  ( file name . ends with ( "" . html"" )  || file name . ends with ( "" . htm"" )  )   {  return ""application / html"";  }  if  ( file name . ends with ( "" . properties"" )  )   {  return ""text / x - java - properties"";  }  if  ( file name . ends with ( "" . jpg"" )  || file name . ends with ( "" . jpeg"" )  )   {  return ""image / jpeg"";  }  if  ( file name . ends with ( "" . png"" )  )   {  return ""image / png"";  }  if  ( file name . ends with ( "" . gif"" )  )   {  return ""image / gif"";  }  if  ( file name . ends with ( "" . svg"" )  )   {  return ""image / svg + xml"";  }  return ""text / plain"";  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Files.java,init windows os,"private string os name =  system . get property ( ""os . name"" )  . to lower case (  locale .  u s ) ; return os name . contains ( ""windows"" ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Files.java,is directory,public file file )  {  return file  !  =  null && file . exists (  )  && file . is directory (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Files.java,is file,public file file )  {  return file  !  =  null && file . exists (  )  && file . is file (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Files.java,is windows,public os;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Files.java,normalize path,public string   (  string path char from char to )  {  return path . replace ( from to ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Files.java,read bytes,"public input stream in )  throws  i o exception  {   byte array output stream bos = null; if  ( in  =  =  null )   {  throw new  file not found exception ( "" no  input stream specified"" ) ;  }  try  {  bos = new  byte array output stream (  ) ; byte[] buffer = new byte[ b u f f e r _  s i z e]; int remaining; while  (  ( remaining = in . read ( buffer )  )   >  0 )   {  bos . write ( buffer 0 remaining ) ;  }  return bos . to byte array (  ) ;  }  finally  {   closeables . close quietly ( in ) ;  closeables . close quietly ( bos ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Files.java,read lines,public list <  string >    (  file file )  throws  i o exception  {   buffered reader reader = new  buffered reader ( new  file reader ( file )  ) ;  list <  string >  answer = new  array list <  string >  (  ) ; try  {  while  ( true )   {   string line = reader . read line (  ) ; if  ( line  !  =  null )   {  answer . add ( line ) ;  }  else  {  break;  }   }   }  finally  {  reader . close (  ) ;  }  return answer;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Files.java,recursive delete,public file file  file filter filter )  {  if  ( filter  =  =  null || filter . accept ( file )  )   {  if  ( file . is directory (  )  )   {   file[] files = file . list files (  ) ; if  ( files  !  =  null )   {  for  (   file child : files )   {  recursive delete ( child filter ) ;  }   }  files = file . list files (  ) ; if  ( files  =  =  null || files . length  =  =  0 )   {  file . delete (  ) ;  }   }  else  {  file . delete (  ) ;  }   }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Files.java,recursive list,public set <  file >    (  file root  filename filter filter )  {   set <  file >  result = new  hash set <  >  (  ) ; if  ( root  !  =  null )   {  result . add ( root ) ; if  ( root . is directory (  )  )   {  for  (   file child : root . list files ( filter )  )   {  result . add all ( recursive list ( child filter )  ) ;  }   }   }  return result;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Files.java,strip leading separator,"public string   (  string name )  {  if  ( name  =  =  null )   {  return null;  }  while  ( name . starts with ( "" / "" )  || name . starts with (  file . separator )  )   {  name = name . substring ( 1 ) ;  }  return name;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Files.java,to string,public string   (  file file )  throws  i o exception  {  return to string ( file null ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Files.java,url to file,"public file   (  u r l url  string temp file prefix  string temp file postfix )  throws  i o exception  {   linked hash set <  u r l >  original =  a c t i v e _  d o w n l o a d s . get (  ) ;  linked hash set <  u r l >  downloads = original; if  ( downloads  =  =  null )   {  downloads = new  linked hash set <  u r l >  (  ) ;  a c t i v e _  d o w n l o a d s . set ( downloads ) ;  }  try  {  if  ( downloads . contains ( url )  )   {  throw new  download cycle exception ( "" download cycle detected: ""  +  downloads ) ;  }  downloads . add ( url ) ; try  {   string file name = url . get file (  ) ;  file file = new  file ( file name ) ; if  (  ! file . exists (  )  )   {  file =  file . create temp file ( temp file prefix temp file postfix ) ;  input stream in = url . open stream (  ) ;  i o helpers . write to ( file in ) ;  }  return file;  }  finally  {  downloads . remove ( url ) ;  }   }  finally  {  if  ( original  =  =  null )   {   a c t i v e _  d o w n l o a d s . remove (  ) ;  }   }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Files.java,write lines,public file file  list <  string >  lines )  throws  i o exception  {   print writer writer = new  print writer ( new  file writer ( file )  ) ; try  {  for  (   string line : lines )   {  writer . println ( line ) ;  }   }  finally  {  writer . close (  ) ;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Files.java,write to file,"public file file byte[] content )  throws  i o exception  {   file output stream fos = null; try  {  if  ( file  =  =  null )   {  throw new  file not found exception ( "" no file specified . "" ) ;  }  else if  (  ! file . exists (  )  &&  ! file . get parent file (  )  . exists (  )  &&  ! file . get parent file (  )  . mkdirs (  )  )   {  throw new  file not found exception ( "" could not find or create file:""  +  file . get name (  )  ) ;  }  fos = new  file output stream ( file ) ; fos . write ( content ) ;  }  finally  {   closeables . close quietly ( fos ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Functions.java,apply,override public  t   (  t value )  {  return value;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Functions.java,chop length,"public function <  string  string >    ( final int max len )  {  return new  function <  string  string >  (  )  {  @ override public  string to string (  )  {  return ""chop length ( ""  +  max len  +  "" ) "";  }  @ override public  string apply (   string value )  {  if  ( value  =  =  null )   {  return null;  }  if  ( value . length (  )   >  max len )   {  return value . substring ( 0 max len ) ;  }  return value;  }   }  ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Functions.java,noop,"public t >  function <  t  t >    (  )  {  return new  function <  t  t >  (  )  {  @ override public  string to string (  )  {  return ""noop function (  ) "";  }  @ override public  t apply (   t value )  {  return value;  }   }  ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Functions.java,to string,"override public  string   (  )  {  return ""noop function (  ) "";  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Filters.java,composite filter,public t >  filter <  t >    (  list <  filter <  t >  >  filters )  {  if  ( filters . size (  )   =  =  0 )   {  return false filter (  ) ;  }  else if  ( filters . size (  )   =  =  1 )   {  return filters . get ( 0 ) ;  }  else  {  return new  composite filter <  t >  ( filters ) ;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Filters.java,contains any string,public filter <  string >    (  string .  .  .  text values )  {   list <  filter <  string >  >  filters = new  array list <  >  (  ) ; for  (   string text : text values )   {  filters . add ( contains string ( text )  ) ;  }  return composite filter ( filters ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Filters.java,contains string,"public filter <  string >    ( final  string text )  {  return new  filter <  string >  (  )  {  public boolean matches (   string t )  {  return t  !  =  null && t . index of ( text )   >  =  0;  }  @ override public  string to string (  )  {  return "" contains ( ""  +  text  +  "" ) "";  }   }  ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Filters.java,create string filter,"public filter <  string >    ( final  string text )  {  if  ( text . starts with ( "" ! "" )  )   {   string remaining = text . substring ( 1 ) ; return not ( create string filter ( remaining )  ) ;  }  else  {  if  ( text  =  =  null || text . length (  )   =  =  0 || text . starts with ( ""*"" )  )   {  return true filter (  ) ;  }  else  {  if  ( text . ends with ( ""*"" )  )   {  final  string prefix = text . substring ( 0 text . length (  )   -  1 ) ; return new  filter <  string >  (  )  {  public boolean matches (   string s )  {  return s . starts with ( prefix ) ;  }  @ override public  string to string (  )  {  return "" starts with ( ""  +  prefix  +  "" ) "";  }   }  ;  }  else  {  return new  filter <  string >  (  )  {  public boolean matches (   string s )  {  return text . equals ( s ) ;  }  @ override public  string to string (  )  {  return "" equals ( ""  +  text  +  "" ) "";  }   }  ;  }   }   }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Filters.java,create string filters,public filter <  string >    (  iterable <  string >  patterns )  {   list <  filter <  string >  >  filters = new  array list <  >  (  ) ; for  (   string pattern : patterns )   {   filter <  string >  filter = create string filter ( pattern ) ; filters . add ( filter ) ;  }  return or ( filters ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Filters.java,false filter,"public t >  filter <  t >    (  )  {  return new  filter <  t >  (  )  {  public boolean matches (   t t )  {  return false;  }  @ override public  string to string (  )  {  return "" false filter"";  }   }  ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Filters.java,filter,public t >  list <  t >    (  iterable <  t >  values  filter <  t >  filter )  {   list <  t >  answer = new  array list <  t >  (  ) ; if  ( values  !  =  null )   {  for  (   t value : values )   {  if  ( filter . matches ( value )  )   {  answer . add ( value ) ;  }   }   }  return answer;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Filters.java,is empty,public t > boolean   (  filter <  t >  filter )  {  boolean empty = false; if  ( filter instanceof  composite filter )   {   composite filter <  t >  composite filter =  (  composite filter <  t >  ) filter; empty = composite filter . is empty (  ) ;  }  return empty;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Filters.java,match random element,public t >  t   (  list <  t >  list )  {  int size = list . size (  ) ; if  ( size  <  1 )   {  return null;  }  else if  ( size  =  =  1 )   {  return list . get ( 0 ) ;  }  else  {  while  ( true )   {  int index =  ( int )  math . round (  math . random (  )  * size ) ; if  ( index  >  =  0 && index  <  size )   {  return list . get ( index ) ;  }   }   }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Filters.java,matches,public string s )  {  return text . equals ( s ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Filters.java,not,"public t >  filter <  t >    ( final  filter <  t >  filter )  {  return new  filter <  t >  (  )  {  public boolean matches (   t t )  {  return  ! filter . matches ( t ) ;  }  @ override public  string to string (  )  {  return "" not ( ""  +  filter  +  "" ) "";  }   }  ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Filters.java,or,"public t >  filter <  t >    ( final  list <  filter <  t >  >  filters )  {  return new  filter <  t >  (  )  {  public boolean matches (   t t )  {  for  (   filter filter : filters )   {  if  ( filter  !  =  null && filter . matches ( t )  )   {  return true;  }   }  return false;  }  @ override public  string to string (  )  {  return "" or filter""  +   arrays . as list ( filters ) ;  }   }  ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Filters.java,to string,"override public  string   (  )  {  return "" equals ( ""  +  text  +  "" ) "";  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Filters.java,true filter,"public t >  filter <  t >    (  )  {  return new  filter <  t >  (  )  {  public boolean matches (   t t )  {  return true;  }  @ override public  string to string (  )  {  return "" true filter"";  }   }  ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\GitHelpers.java,extract git url,"public string   (  string config text )  {   string remote = null;  string last url = null;  string first url = null;  buffered reader reader = new  buffered reader ( new  string reader ( config text )  ) ;  map <  string  string >  remote urls = new  hash map <  >  (  ) ; while  ( true )   {   string line = null; try  {  line = reader . read line (  ) ;  }  catch  (   i o exception e )   {   }  if  ( line  =  =  null )   {  break;  }  if  ( line . starts with ( ""[remote "" )  )   {   string[] parts = line . split ( ""\"""" ) ; if  ( parts . length  >  1 )   {  remote = parts[1];  }   }  else if  ( line . starts with ( ""["" )  )   {  remote = null;  }  else if  ( remote  !  =  null && line . length (  )   >  0 &&  character . is whitespace ( line . char at ( 0 )  )  )   {   string trimmed = line . trim (  ) ; if  ( trimmed . starts with ( ""url "" )  )   {   string[] parts = trimmed . split ( "" = "" 2 ) ; if  ( parts . length  >  1 )   {  last url = parts[1] . trim (  ) ; if  ( first url  =  =  null )   {  first url = last url;  }  remote urls . put ( remote last url ) ;  }   }   }   }   string answer = null; if  ( remote urls . size (  )   =  =  1 )   {  return last url;  }  else if  ( remote urls . size (  )   >  1 )   {  answer = remote urls . get ( ""origin"" ) ; if  ( answer  =  =  null )   {  answer = first url;  }   }  return answer;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\GitHelpers.java,find git folder,"public file   (  file basedir )  {   file git dir = new  file ( basedir "" . git"" ) ; if  ( git dir . exists (  )  && git dir . is directory (  )  )   {  return git dir;  }   file parent = basedir . get parent file (  ) ; if  ( parent  !  =  null )   {  return find git folder ( parent ) ;  }  return null;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\HostUtils.java,choose address,"private inet address   (  string preferred )  throws  unknown host exception  {   set <  inet address >  addresses = get addresses (  ) ; if  ( preferred  !  =  null &&  ! preferred . is empty (  )  )   {  try  {   inet address preferred address =  inet address . get by name ( preferred ) ; if  ( addresses  !  =  null && addresses . contains ( preferred address )  )   {   l o g . info ( ""preferred address is ""  +  preferred address . get host address (  )   +  "" for host "" +  preferred address . get host name (  )  ) ; return preferred address;  }   }  catch  (   unknown host exception e )   {   }  for  (   inet address address : addresses )   {  if  ( preferred . equals ( address . get host name (  )  )  )   {  return address;  }   }   string buffer host name buffer = new  string buffer (  ) ; for  (   inet address address : addresses )   {  if  ( host name buffer . length (  )   >  0 )   {  host name buffer . append ( ""  "" ) ;  }  host name buffer . append ( address . get host name (  )   +  "" / ""  +  address . get host address (  )  ) ;  }   l o g . warn ( "" could not find network address for preferred '""  +  preferred  +  ""' when the addresses were: "" +  host name buffer ) ;  }  if  ( addresses . contains (  inet address . get local host (  )  )  )   {  return  inet address . get local host (  ) ;  }  else if  ( addresses  !  =  null &&  ! addresses . is empty (  )  )   {  return addresses . to array ( new  inet address[addresses . size (  ) ] ) [0];  }  else  {  return  inet address . get local host (  ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\HostUtils.java,get addresses,public set <  inet address >    (  )  {   set <  inet address >  all addresses = new  linked hash set <  inet address >  (  ) ;  map <  string  set <  inet address >  >  interface address map = get network interface addresses (  ) ; for  (   map .  entry <  string  set <  inet address >  >  entry : interface address map . entry set (  )  )   {   set <  inet address >  addresses = entry . get value (  ) ; if  (  ! addresses . is empty (  )  )   {  for  (   inet address address : addresses )   {  all addresses . add ( address ) ;  }   }   }  return all addresses;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\HostUtils.java,get local host name,public string   (  )  throws  unknown host exception  {   string preffered =  system . get property (  p r e f e r e d _  a d d r e s s _  p r o p e r t y _  n a m e ) ; return choose address ( preffered )  . get host name (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\HostUtils.java,get local ip,public string   (  )  throws  unknown host exception  {   string preffered =  system . get property (  p r e f e r e d _  a d d r e s s _  p r o p e r t y _  n a m e ) ; return choose address ( preffered )  . get host address (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\HostUtils.java,get network interface addresses,"public map <  string  set <  inet address >  >    (  )  {   map <  string  set <  inet address >  >  interface address map = new  tree map <  string  set <  inet address >  >  (  ) ; try  {   enumeration ifaces =  network interface . get network interfaces (  ) ; while  ( ifaces . has more elements (  )  )   {   network interface iface =  (  network interface ) ifaces . next element (  ) ; if  ( iface . is up (  )  &&  ! iface . is loopback (  )  )   {   string name = iface . get name (  ) ;  enumeration <  inet address >  iface adresses = iface . get inet addresses (  ) ; while  ( iface adresses . has more elements (  )  )   {   inet address ia = iface adresses . next element (  ) ; if  (  ! ia . is loopback address (  )  && ia . get host address (  )  . index of ( "":"" )   =  =   - 1 )   {   set <  inet address >  addresses = interface address map . get ( name ) ; if  ( addresses  =  =  null )   {  addresses = new  linked hash set <  inet address >  (  ) ;  }  addresses . add ( ia ) ; interface address map . put ( name addresses ) ;  }   }   }   }   }  catch  (   socket exception ex )   {   }  return interface address map;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\IOHelpers.java,close,public closeable .  .  .  closeables )  {  for  (   closeable c : closeables )   {  try  {  if  ( c  !  =  null )   {  c . close (  ) ;  }   }  catch  (   i o exception e )   {   }   }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\IOHelpers.java,copy,public reader reader  writer writer )  throws  i o exception  {  try  {  char[] buffer = new char[8192]; int len; for  ( ; ;  )   {  len = reader . read ( buffer ) ; if  ( len  >  0 )   {  writer . write ( buffer 0 len ) ;  }  else  {  writer . flush (  ) ; break;  }   }   }  finally  {  close ( reader writer ) ;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\IOHelpers.java,load fully,public string   (  u r l url )  throws  i o exception  {   byte array output stream baos = new  byte array output stream (  ) ; byte[] buf = new byte[4096]; int l;  input stream is = url . open stream (  ) ; try  {  while  (  ( l = is . read ( buf )  )   >  =  0 )   {  baos . write ( buf 0 l ) ;  }   }  finally  {  is . close (  ) ;  }  return baos . to string (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\IOHelpers.java,read fully,public string   (  reader r )  throws  i o exception  {   string writer w = new  string writer (  ) ; try  {  copy ( r w ) ; return w . to string (  ) ;  }  finally  {  close ( r w ) ;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\IOHelpers.java,read lines,public list <  string >    (  file file )  throws  i o exception  {   list <  string >  overrides = new  array list <  string >  (  ) ; if  ( file . exists (  )  )   {   input stream is = new  file input stream ( file ) ; try  {   buffered reader reader = new  buffered reader ( new  input stream reader ( is )  ) ;  string line = null; while  (  ( line = reader . read line (  )  )   !  =  null )   {  overrides . add ( line ) ;  }   }  finally  {  is . close (  ) ;  }   }  return overrides;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\IOHelpers.java,write fully,public file file  string content )  throws  i o exception  {  if  ( content  =  =  null )   {  file . delete (  ) ;  }  else  {   reader r = new  string reader ( content ) ;  writer w = new  buffered writer ( new  output stream writer ( new  file output stream ( file )  )  ) ; try  {  copy ( r w ) ;  }  finally  {  close ( r w ) ;  }   }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\IOHelpers.java,write lines,public file file  list <  string >  lines )  throws  i o exception  {   output stream os = new  file output stream ( file ) ; try  {   buffered writer writer = new  buffered writer ( new  output stream writer ( os )  ) ; for  (   string over : lines )   {  writer . write ( over ) ; writer . new line (  ) ;  }  writer . close (  ) ;  }  finally  {  os . close (  ) ;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\IOHelpers.java,write to,public output stream output stream  input stream in int buffer size boolean close )  throws  i o exception  {   buffered output stream out = new  buffered output stream ( output stream buffer size ) ;  buffered input stream buffered in = new  buffered input stream ( in buffer size ) ; while  ( true )   {  int b = buffered in . read (  ) ; if  ( b  >  =  0 )   {  out . write ( b ) ;  }  else  {  in . close (  ) ; if  ( close )   {  out . close (  ) ;  }  else  {  out . flush (  ) ;  }  return;  }   }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\JMXUtils.java,register m bean,public object bean  m bean server m bean server  object name object name )  throws  exception  {  if  (  ! m bean server . is registered ( object name )  )   {  m bean server . register m bean ( bean object name ) ;  }  else  {  unregister m bean ( m bean server object name ) ; m bean server . register m bean ( bean object name ) ;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\JMXUtils.java,unregister m bean,public m bean server m bean server  object name object name )  throws  exception  {  if  ( m bean server . is registered ( object name )  )   {  m bean server . unregister m bean ( object name ) ;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\KubernetesServiceNotFoundException.java,kubernetes service not found exception,"public string service name  string missing environment variable )  {  super ( "" service ""  +  service name  +  "" not found .   missing environment variable $"" +  missing environment variable ) ; this . service name = service name; this . missing environment variable = missing environment variable;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\KubernetesServiceNotFoundException.java,get missing environment variable,public string   (  )  {  return missing environment variable;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\KubernetesServiceNotFoundException.java,get service name,public string   (  )  {  return service name;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\json\JsonWriter.java,write,"public writer writer  object value )  throws  i o exception  {  if  ( value instanceof  map )   {  write object ( writer  (  map ) value ) ;  }  else if  ( value instanceof  collection )   {  write array ( writer  (  collection ) value ) ;  }  else if  ( value instanceof  number )   {  write number ( writer  (  number ) value ) ;  }  else if  ( value instanceof  string )   {  write string ( writer  (  string ) value ) ;  }  else if  ( value instanceof  boolean )   {  write boolean ( writer  (  boolean ) value ) ;  }  else if  ( value  =  =  null )   {  write null ( writer ) ;  }  else  {  throw new  illegal argument exception ( "" unsupported value: ""  +  value ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\json\JsonWriter.java,write array,private writer writer  collection <  ?  >  value )  throws  i o exception  {  writer . append ( '[' ) ; boolean first = true; for  (   object obj : value )   {  if  (  ! first )   {  writer . append ( ' ' ) ;  }  else  {  first = false;  }  write ( writer obj ) ;  }  writer . append ( ']' ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\json\JsonWriter.java,write boolean,private writer writer  boolean value )  throws  i o exception  {  writer . append (  boolean . to string ( value )  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\json\JsonWriter.java,write null,"private writer writer )  throws  i o exception  {  writer . append ( ""null"" ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\json\JsonWriter.java,write number,private writer writer  number value )  throws  i o exception  {  writer . append ( value . to string (  )  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\json\JsonWriter.java,write object,private writer writer  map <  ?   ?  >  value )  throws  i o exception  {  writer . append ( ' { ' ) ; boolean first = true; for  (   map .  entry entry : value . entry set (  )  )   {  if  (  ! first )   {  writer . append ( ' ' ) ;  }  else  {  first = false;  }  write string ( writer  (  string ) entry . get key (  )  ) ; writer . append ( ':' ) ; write ( writer entry . get value (  )  ) ;  }  writer . append ( ' } ' ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\json\JsonWriter.java,write string,"private writer writer  string value )  throws  i o exception  {  writer . append ( '""' ) ; for  ( int i = 0; i  <  value . length (  ) ; i +  +  )   {  char c = value . char at ( i ) ; switch  ( c )   {  case '\""': case '\\': case '\b': case '\f': case '\n': case '\r': case '\t': writer . append ( '\\' ) ; writer . append ( c ) ; break; default : if  ( c  <  ' ' ||  ( c  >  =  '\u0080' && c  <  '\u00a0' )  ||  ( c  >  =  '\u2000' && c  <  '\u2100' )  )   {   string s =  integer . to hex string ( c ) ; writer . append ( '\\' ) ; writer . append ( 'u' ) ; for  ( int j = s . length (  ) ; j  <  4; j +  +  )   {  writer . append ( '0' ) ;  }  writer . append ( s ) ;  }  else  {  writer . append ( c ) ;  }  break;  }   }  writer . append ( '""' ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Lists.java,is null or empty,public t > boolean   (  list <  t >  list )  {  return list  =  =  null || list . is empty (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Lists.java,mutable list,public t >  list <  t >    (  list <  t >  optional list )  {  if  ( optional list  =  =  null )   {  return new  array list <  >  (  ) ;  }  else  {  return new  array list <  >  ( optional list ) ;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Lists.java,new array list,public t >  list <  t >    (  t .  .  .  items )  {   list <  t >  answer = new  array list <  >  ( items . length ) ; for  (   t item : items )   {  answer . add ( item ) ;  }  return answer;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Lists.java,not null list,public t >  list <  t >    (  list <  t >  list )  {  if  ( list  =  =  null )   {  return  collections .  e m p t y _  l i s t;  }  else  {  return list;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\json\JsonReader.java,json reader,reader reader )  {  this . reader = reader; recorder = new  string builder (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\json\JsonReader.java,end of text,private
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\json\JsonReader.java,error,"private i o exception   (  string message )  {  return new  i o exception ( message  +  "" at ""  +  line +  "":"" +  column ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\json\JsonReader.java,expected,"private i o exception   (  string expected )  {  if  ( end of text (  )  )   {  return error ( "" unexpected end of input"" ) ;  }  return error ( "" expected ""  +  expected ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\json\JsonReader.java,is digit,private
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\json\JsonReader.java,is hex digit,private a' && ch  <  =  ' f';  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\json\JsonReader.java,is white space,private
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\json\JsonReader.java,parse,"public object   (  )  throws  i o exception  {  read (  ) ; skip white space (  ) ;  object result = read value (  ) ; skip white space (  ) ; if  (  ! end of text (  )  )   {  throw error ( "" unexpected character"" ) ;  }  return result;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\json\JsonReader.java,read,"private i o exception  {  if  ( end of text (  )  )   {  throw error ( "" unexpected end of input"" ) ;  }  column +  + ; if  ( current  =  =  '\n' )   {  line +  + ; column = 0;  }  current = reader . read (  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\json\JsonReader.java,read and append char,private i o exception  {  if  ( current  !  =  ch )   {  return false;  }  recorder . append ( ch ) ; read (  ) ; return true;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\json\JsonReader.java,read and append digit,private i o exception  {  if  (  ! is digit ( current )  )   {  return false;  }  recorder . append (  ( char ) current ) ; read (  ) ; return true;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\json\JsonReader.java,read array,"private collection <  ?  >    (  )  throws  i o exception  {  read (  ) ;  collection <  object >  array = new  array list <  object >  (  ) ; skip white space (  ) ; if  ( read char ( ']' )  )   {  return array;  }  do  {  skip white space (  ) ; array . add ( read value (  )  ) ; skip white space (  ) ;  }  while  ( read char ( ' ' )  ) ; if  (  ! read char ( ']' )  )   {  throw expected ( ""' ' or ']'"" ) ;  }  return array;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\json\JsonReader.java,read char,private i o exception  {  if  ( current  !  =  ch )   {  return false;  }  read (  ) ; return true;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\KubernetesServices.java,service to host,"public string   (  string service name )  {   string host env var = to service host environment variable ( service name ) ;  string answer =  systems . get env var or system property ( host env var """" ) ; if  (  strings . is null or blank ( answer )  )   {  throw new  kubernetes service not found exception ( service name host env var ) ;  }  else  {  return answer;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\KubernetesServices.java,service to host and port,"public string   (  string service name  string port name )  {   string host = service to host ( service name ) ;  string port = service to port ( service name port name ) ; return host  +  "":""  +  port;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\KubernetesServices.java,service to host or blank,"public string   (  string service name )  {  return  systems . get env var or system property ( to service host environment variable ( service name )  """" ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\KubernetesServices.java,service to port,"public string   (  string service name  string port name )  {   string port env var = to service port environment variable ( service name port name ) ;  string answer =  systems . get env var or system property ( port env var """" ) ; if  (  strings . is null or blank ( answer )  )   {  throw new  kubernetes service not found exception ( service name port env var ) ;  }  return answer;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\KubernetesServices.java,service to port or blank,"public string   (  string service name  string port name )  {   string env var name = to service port environment variable ( service name port name ) ; return  systems . get env var or system property ( env var name """" ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\KubernetesServices.java,service to protocol,"public string   (  string service name  string service port )  {  return  systems . get env var or system property ( to env variable ( service name  +   p o r t _  s u f f i x  +  "" _ "" +  service port +   p r o t o _  s u f f i x )   d e f a u l t _  p r o t o ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\KubernetesServices.java,to env variable,"public string   (  string service name )  {  return service name . to upper case (  )  . replace all ( "" - "" "" _ "" ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\KubernetesServices.java,to service host environment variable,public string   (  string service name )  {  return to env variable ( service name  +   h o s t _  s u f f i x ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\KubernetesServices.java,to service port environment variable,"public string   (  string service name  string port name )  {   string name = service name  +   p o r t _  s u f f i x  +   (  strings . is not blank ( port name )   ?  "" _ ""  +  port name : """" ) ; return to env variable ( name ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\json\JsonReader.java,read escape,"private i o exception  {  read (  ) ; switch  ( current )   {  case '""': case ' / ': case '\\': recorder . append (  ( char ) current ) ; break; case 'b': recorder . append ( '\b' ) ; break; case 'f': recorder . append ( '\f' ) ; break; case 'n': recorder . append ( '\n' ) ; break; case 'r': recorder . append ( '\r' ) ; break; case 't': recorder . append ( '\t' ) ; break; case 'u': char[] hex chars = new char[4]; for  ( int i = 0; i  <  4; i +  +  )   {  read (  ) ; if  (  ! is hex digit ( current )  )   {  throw expected ( ""hexadecimal digit"" ) ;  }  hex chars[i] =  ( char ) current;  }  recorder . append (  ( char )  integer . parse int (  string . value of ( hex chars )  16 )  ) ; break; default : throw expected ( ""valid escape sequence"" ) ;  }  read (  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\json\JsonReader.java,read exponent,"private i o exception  {  if  (  ! read and append char ( 'e' )  &&  ! read and append char ( ' e' )  )   {  return false;  }  if  (  ! read and append char ( ' + ' )  )   {  read and append char ( ' - ' ) ;  }  if  (  ! read and append digit (  )  )   {  throw expected ( ""digit"" ) ;  }  while  ( read and append digit (  )  )   {   }  return true;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\json\JsonReader.java,read false,private boolean   (  )  throws  i o exception  {  read (  ) ; read required char ( 'a' ) ; read required char ( 'l' ) ; read required char ( 's' ) ; read required char ( 'e' ) ; return  boolean .  f a l s e;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\json\JsonReader.java,read fraction,"private i o exception  {  if  (  ! read and append char ( ' . ' )  )   {  return false;  }  if  (  ! read and append digit (  )  )   {  throw expected ( ""digit"" ) ;  }  while  ( read and append digit (  )  )   {   }  return true;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\json\JsonReader.java,read name,"private string   (  )  throws  i o exception  {  if  ( current  !  =  '""' )   {  throw expected ( ""name"" ) ;  }  read string (  ) ; return recorder . to string (  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\json\JsonReader.java,read null,private object   (  )  throws  i o exception  {  read (  ) ; read required char ( 'u' ) ; read required char ( 'l' ) ; read required char ( 'l' ) ; return null;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\json\JsonReader.java,read number,"private number   (  )  throws  i o exception  {  recorder . set length ( 0 ) ; read and append char ( ' - ' ) ; int first digit = current; if  (  ! read and append digit (  )  )   {  throw expected ( ""digit"" ) ;  }  if  ( first digit  !  =  '0' )   {  while  ( read and append digit (  )  )   {   }   }  read fraction (  ) ; read exponent (  ) ; return  double . parse double ( recorder . to string (  )  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\json\JsonReader.java,read object,"private map <  string  object >    (  )  throws  i o exception  {  read (  ) ;  map <  string  object >  object = new  hash map <  string  object >  (  ) ; skip white space (  ) ; if  ( read char ( ' } ' )  )   {  return object;  }  do  {  skip white space (  ) ;  string name = read name (  ) ; skip white space (  ) ; if  (  ! read char ( ':' )  )   {  throw expected ( ""':'"" ) ;  }  skip white space (  ) ; object . put ( name read value (  )  ) ; skip white space (  ) ;  }  while  ( read char ( ' ' )  ) ; if  (  ! read char ( ' } ' )  )   {  throw expected ( ""' ' or ' } '"" ) ;  }  return object;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\json\JsonReader.java,read required char,"private i o exception  {  if  (  ! read char ( ch )  )   {  throw expected ( ""'""  +  ch  +  ""'"" ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\json\JsonReader.java,read string,"private string   (  )  throws  i o exception  {  read (  ) ; recorder . set length ( 0 ) ; while  ( current  !  =  '""' )   {  if  ( current  =  =  '\\' )   {  read escape (  ) ;  }  else if  ( current  <  0x20 )   {  throw expected ( ""valid string character"" ) ;  }  else  {  recorder . append (  ( char ) current ) ; read (  ) ;  }   }  read (  ) ; return recorder . to string (  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\json\JsonReader.java,read true,private boolean   (  )  throws  i o exception  {  read (  ) ; read required char ( 'r' ) ; read required char ( 'u' ) ; read required char ( 'e' ) ; return  boolean .  t r u e;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\json\JsonReader.java,read value,"private object   (  )  throws  i o exception  {  switch  ( current )   {  case 'n': return read null (  ) ; case 't': return read true (  ) ; case 'f': return read false (  ) ; case '""': return read string (  ) ; case '[': return read array (  ) ; case ' { ': return read object (  ) ; case ' - ': case '0': case '1': case '2': case '3': case '4': case '5': case '6': case '7': case '8': case '9': return read number (  ) ; default : throw expected ( ""value"" ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\json\JsonReader.java,skip white space,private i o exception  {  while  ( is white space ( current )  &&  ! end of text (  )  )   {  read (  ) ;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\LoggingOutputStream.java,logging output stream,public logger logger )  {  this . logger = logger;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\LoggingOutputStream.java,close,public
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\LoggingOutputStream.java,create buffer,protected byte array output stream   (  )  {  return new  byte array output stream ( buffer size ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\LoggingOutputStream.java,flush,public byte array (  ) ; if  ( bytes . length  >  0 )   {   string text = new  string ( bytes ) ; log message ( text ) ; buffer = create buffer (  ) ;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\LoggingOutputStream.java,log message,protected string text )  {  if  ( text . length (  )   >  0 )   {  logger . info ( text ) ;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\LoggingOutputStream.java,write,"public i o exception  {  if  ( closed )   {  throw new  i o exception ( "" stream is closed"" ) ;  }  char ch =  ( char ) b; if  ( ch  =  =  '\n' )   {  flush (  ) ;  }  else  {  buffer . write ( b ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\MultiException.java,multi exception,public string message  collection <  throwable >  causes )  {  super ( message ) ; this . causes . add all ( causes ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\MultiException.java,add cause,public throwable e )  {  causes . add ( e ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\MultiException.java,get causes,public throwable[]   (  )  {  return causes . to array ( new  throwable[causes . size (  ) ] ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\MultiException.java,print stack trace,override public void   (  print writer out )  {  super . print stack trace ( out ) ; for  (   throwable t : causes )   {  t . print stack trace ( out ) ;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\MultiException.java,throw if,"public string message  list <  throwable >  throwables )  throws  multi exception  {  if  ( throwables  !  =  null &&  ! throwables . is empty (  )  )   {   string builder sb = new  string builder ( message ) ; sb . append ( "":"" ) ; for  (   throwable t : throwables )   {  sb . append ( ""\n\t"" ) ; sb . append ( t . get message (  )  ) ;  }  throw new  multi exception ( sb . to string (  )  throwables ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\MultiException.java,throw if causes,public multi exception  {  if  (  ! causes . is empty (  )  )   {  throw this;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Manifests.java,p r o j e c t a t t r i b u t e s,string value )  {  this . value = value;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Manifests.java,get manifest,public manifest   (  file file )  throws  i o exception  {   jar file jar = new  jar file ( file ) ; try  {  return jar . get manifest (  ) ;  }  finally  {  jar . close (  ) ;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Manifests.java,get manifest entry,public string   (  manifest manifest  string attribute name )  throws  i o exception  {  if  ( manifest  !  =  null )   {  return manifest . get main attributes (  )  . get value ( attribute name ) ;  }  return null;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Manifests.java,get manifest entry map,"public map <  attribute  string >    (  manifest manifest  class <  ?  extends  attribute >  attribute enum )  {   map <  attribute  string >  result = new  hash map <  attribute  string >  (  ) ;  attributes main attributes = manifest . get main attributes (  ) ; for  (   attribute attribute name : attribute enum . get enum constants (  )  )   {  if  ( main attributes . get value ( attribute name . value (  )  )   !  =  null &&  ! main attributes . get value ( attribute name . value (  )  )  . contains ( ""$ { "" )  )   {  result . put ( attribute name main attributes . get value ( attribute name . value (  )  )  ) ;  }   }  return result;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Manifests.java,get manifest from current jar,"public manifest   (  class <  ?  >  the clazz )  throws  i o exception  {   string jar path = the clazz . get protection domain (  )  . get code source (  )  . get location (  )  . get path (  ) ;  manifest manifest = null; if  ( jar path . ends with ( "" / "" )  )   {   string manifest path = jar path  +   jar file .  m a n i f e s t _  n a m e; manifest = new  manifest ( new  file ( manifest path )  . to u r i (  )  . to u r l (  )  . open stream (  )  ) ;  }  else  {  manifest =  manifests . get manifest ( new  file ( jar path )  ) ;  }  return manifest;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Millis.java,days,public
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Millis.java,hours,public
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Millis.java,minutes,public
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Millis.java,seconds,public
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\NullArgumentException.java,null argument exception,public string msg )  {  super ( msg ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\NullArgumentException.java,validate not empty,public object[] array to check  string argument name )  throws  null argument exception  {  validate not null ( array to check argument name ) ; if  ( array to check . length  =  =  0 )   {  throw new  null argument exception ( argument name  +   i s _  e m p t y ) ;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\NullArgumentException.java,validate not empty content,"public string[] array to check boolean trim  string argument name )  throws  null argument exception  {  validate not empty ( array to check argument name ) ; for  ( int i = 0; i  <  array to check . length; i +  +  )   {  validate not empty ( array to check[i] array to check[i]  +  ""[""  +  i +  ""]"" ) ; if  ( trim )   {  validate not empty ( array to check[i] . trim (  )  array to check[i]  +  ""[""  +  i +  ""]"" ) ;  }   }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\NullArgumentException.java,validate not null,public object obj  string object name )  throws  null argument exception  {  if  ( obj  =  =  null )   {  throw new  null argument exception ( object name  +   i s _  n u l l ) ;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Maps.java,boolean value,public map <  string  ?  >  map  string key boolean default value )  {   object obj = map . get ( key ) ; if  ( obj  =  =  null )   {  return default value;  }  else if  ( obj instanceof  boolean )   {   boolean value =  (  boolean ) obj; return value . boolean value (  ) ;  }  else  {   string text = obj . to string (  ) ; return  boolean . parse boolean ( text ) ;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Maps.java,integer value,public integer   (  map <  string  ?  >  map  string key  integer default value )  {   object obj = map . get ( key ) ; if  ( obj instanceof  integer )   {  return  (  integer ) obj;  }  else if  ( obj instanceof  number )   {   number number =  (  number ) obj; return number . int value (  ) ;  }  else if  ( obj  !  =  null )   {   string text = obj . to string (  ) ; if  (  strings . is not blank ( text )  )   {  return  integer . parse int ( text ) ;  }   }  return default value;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Maps.java,is null or empty,public map map )  {  return map  =  =  null || map . is empty (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Maps.java,list value,public list   (  map <  string  object >  map  string key )  {   object value = null; if  ( map  !  =  null )   {  value = map . get ( key ) ;  }  if  ( value instanceof  list )   {  return  (  list ) value;  }  else if  ( value instanceof  object[] )   {  return java . util .  arrays . as list (  (  object[] ) value ) ;  }  else if  ( value  !  =  null )   {   list list = new  array list (  ) ; list . add ( value ) ; return list;  }  return null;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Maps.java,long value,public long   (  map <  string  ?  >  map  string key  long default value )  {   object obj = map . get ( key ) ; if  ( obj instanceof  long )   {  return  (  long ) obj;  }  else if  ( obj instanceof  number )   {   number number =  (  number ) obj; return number . long value (  ) ;  }  else if  ( obj  !  =  null )   {   string text = obj . to string (  ) ; if  (  strings . is not blank ( text )  )   {  return  long . parse long ( text ) ;  }   }  return default value;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Maps.java,nested value as string,public string   (  map <  string  object >  map  string .  .  .  names )  {  int last idx = names . length  -  1; for  ( int i = 0; i  <  last idx; i +  +  )   {  if  ( map  =  =  null )   {  return null;  }  map =  (  map <  string  object >  ) value ( map names[i] null ) ;  }  return value as string ( map names[last idx] ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Maps.java,parse map,"public linked hash map <  string  string >    (  string text )  {   linked hash map <  string  string >  answer = new  linked hash map <  >  (  ) ; if  (  strings . is not blank ( text )  )   {   string[] entries = text . split ( "" "" ) ; if  ( entries  !  =  null )   {  for  (   string entry : entries )   {   string[] values = entry . split ( "" = "" 2 ) ; if  ( values  !  =  null && values . length  =  =  2 )   {  answer . put ( values[0] values[1] ) ;  }   }   }   }  return answer;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Maps.java,put all,public k  v > void   (  map <  k  v >  output  map <  k  v >  input  k .  .  .  keys )  {  for  (   k key : keys )   {   v value = input . get ( key ) ; if  ( value  !  =  null )   {  output . put ( key value ) ;  }   }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Maps.java,set string values,"public map map  string key  string[] values )  {  if  ( values  !  =  null )   {   string text =  arrays . join ( "" "" values ) ; map . put ( key text ) ;  }  else  {  map . remove ( key ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Maps.java,set value,public map map  string key  object value )  {  if  ( value  !  =  null )   {  map . put ( key value ) ;  }  else  {  map . remove ( key ) ;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Maps.java,string value,public string   (  map map  string key  string default value )  {   object obj = map . get ( key ) ; if  ( obj  =  =  null )   {  return default value;  }  else if  ( obj instanceof  string )   {  return  (  string ) obj;  }  else  {  return  string . value of ( obj ) ;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Maps.java,string values,"public string[]   (  map map  string key )  {   object obj = map . get ( key ) ; if  ( obj instanceof  string[] )   {  return  (  string[] ) obj;  }  else if  ( obj instanceof  string )   {   string text =  (  string ) obj; return text . split ( "" "" ) ;  }  return null;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Maps.java,value,public object   (  map <  string  object >  map  string key  object default value )  {   object obj = map . get ( key ) ; if  ( obj  =  =  null )   {  return default value;  }  else  {  return obj;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Maps.java,value as string,public string   (  map <  string  object >  map  string key )  {  if  ( map  !  =  null )   {   object value = value or null ( map key ) ; if  ( value  !  =  null )   {  return value . to string (  ) ;  }   }  return null;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Maps.java,value or null,protected object   (  map <  string  object >  map  string key )  {  return value ( map key null ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Objects.java,assert not null,"public object value  string name )  {  if  ( value  =  =  null )   {  throw new  assertion error ( name  +  "" must be specified"" ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Objects.java,compare,public t extends  comparable <  t >  > int   (  list <  t >  a  list <  t >  b )  {  if  ( a  =  =  b )   {  return 0;  }  else if  ( a  =  =  null )   {  return  - 1;  }  else if  ( b  =  =  null )   {  return 1;  }  int size = a . size (  ) ; int answer = size  -  b . size (  ) ; if  ( answer  =  =  0 )   {  for  ( int i = 0; i  <  size; i +  +  )   {  answer = compare ( a . get ( i )  b . get ( i )  ) ; if  ( answer  !  =  0 )   {  break;  }   }   }  return answer;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Objects.java,equal,public object a  object b )  {  if  ( a  =  =  b )   {  return true;  }  else  {  return a  !  =  null && b  !  =  null && a . equals ( b ) ;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Objects.java,hash code,public object .  .  .  objects )  {  int answer =  s e e d; for  (   object object : objects )   {  answer* =  o d d _  p r i m e _  n u m b e r; int object hash =  ( object  !  =  null )   ?  object . hash code (  )  : 0; answer +  = object hash;  }  return answer;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Objects.java,not null,"public object value  string name )  {  if  ( value  =  =  null )   {  throw new  illegal argument exception ( name  +  "" must be specified"" ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\ObjectUtils.java,to bytes,"public object object )  {  byte[] result = null; if  ( object instanceof byte[] )   {  return  ( byte[] ) object;  }   byte array output stream baos = new  byte array output stream (  ) ;  object output stream oos = null; try  {  oos = new  object output stream ( baos ) ; oos . write object ( object ) ; result = baos . to byte array (  ) ;  }  catch  (   i o exception e )   {   l o g g e r . error ( "" failed to serialize object  {  }  . "" object e ) ;  }  finally  {  if  ( oos  !  =  null )   {  try  {  oos . close (  ) ;  }  catch  (   i o exception e )   {   }   }  if  ( baos  !  =  null )   {  try  {  baos . close (  ) ;  }  catch  (   i o exception e )   {   }   }   }  return result;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Pair.java,pair,public a first  b second )  {  this . first = first; this . second = second;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Pair.java,equals,override public boolean   (  object o )  {  if  ( this  =  =  o )  return true; if  ( o  =  =  null || get class (  )   !  =  o . get class (  )  )  return false;  pair pair =  (  pair ) o; if  ( first  !  =  null  ?   ! first . equals ( pair . first )  : pair . first  !  =  null )  return false; if  ( second  !  =  null  ?   ! second . 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Pair.java,get first,public a   (  )  {  return first;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Pair.java,get second,public b   (  )  {  return second;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Pair.java,hash code,override public int   (  )  {  int result = first  !  =  null  ?  first . hash code (  )  : 0; result = 31 * result  +   ( second  !  =  null  ?  second . hash code (  )  : 0 ) ; return result;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Pair.java,to string,"override public  string   (  )  {  return "" pair ( ""  +  first  +  ""  "" +  second +  "" ) "";  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\PasswordEncoder.java,decode,public string   (  string s )  throws  illegal argument exception  {  return should decode password ( s )   ?   base64 encoder . decode ( s . substring (  p r e f i x . length (  )  )  )  : s;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\PasswordEncoder.java,encode,public string   (  string s )  {  return should encode password ( s )   ?   p r e f i x  +   base64 encoder . encode ( s )  : s;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\PasswordEncoder.java,should decode password,"private string s )  {  if  (  boolean . parse boolean (  system . get property ( ""zookeeper . password . encode"" ""true"" )  )  )   {  return s . starts with (  p r e f i x ) ;  }  else  {  return false;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\PasswordEncoder.java,should encode password,"private string s )  {  if  (  boolean . parse boolean (  system . get property ( ""zookeeper . password . encode"" ""true"" )  )  )   {  return  ! s . starts with (  p r e f i x ) ;  }  else  {  return false;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\PatchUtils.java,append version range,public string   (  string url  string range )  {  return url  +   o v e r r i d e _  r a n g e  +  range;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\PatchUtils.java,extract url,public string   (  string override )  {  return override . split (  o v e r r i d e _  r a n g e ) [0];  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\PatchUtils.java,extract version range,public string   (  string override )  {  return override . contains (  o v e r r i d e _  r a n g e )   ?  override . split (  o v e r r i d e _  r a n g e ) [1] : null;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Ports.java,extract port,public string address )  {   pattern p =  pattern . compile (  p o r t _  p a t t e r n ) ;  matcher m = p . matcher ( address ) ; if  ( m . find (  )  )   {   string match = m . group (  )  . substring ( 1 ) ; return  integer . parse int ( match ) ;  }  return 0;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Ports.java,find free local port,"public set <  integer >  used ports int from port int to port boolean check if available )  {  for  ( int port = from port; port  <  to port; port +  +  )   {  if  ( check if available &&  ! is port free ( port )  )   {  continue;  }  else if  (  ! used ports . contains ( port )  )   {  return port;  }   }  throw new  runtime exception ( "" no port available within range"" ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Ports.java,find port,public map <  string  list <  integer >  >  used ports  string ip int port )  {   list <  integer >  ports = used ports . get ( ip ) ; if  ( ports  =  =  null )   {  ports = new  array list <  integer >  (  ) ; used ports . put ( ip ports ) ;  }  for  ( ; ;  )   {  if  (  ! ports . contains ( port )  )   {  ports . add ( port ) ; return port;  }  port +  + ;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Ports.java,find used ports,public set <  integer >    ( int from port int to port )  {   set <  integer >  used ports = new  hash set <  integer >  (  ) ; for  ( int port = from port; port  <  =  to port; port +  +  )   {  if  (  ! is port free ( port )  )   {  used ports . add ( port ) ;  }   }  return used ports;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Ports.java,is port free,"public m i n _  p o r t _  n u m b e r || port  >   m a x _  p o r t _  n u m b e r )   {  throw new  illegal argument exception ( "" invalid start port: ""  +  port ) ;  }   server socket ss = null;  datagram socket ds = null; try  {  ss = new  server socket ( port ) ; ss . set reuse address ( true ) ; ds = new  datagram socket ( port ) ; ds . set reuse address ( true ) ; return true;  }  catch  (   i o exception e )   {   }  finally  {  if  ( ds  !  =  null )   {  ds . close (  ) ;  }  if  ( ss  !  =  null )   {  try  {  ss . close (  ) ;  }  catch  (   i o exception e )   {   }   }   }  return false;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Ports.java,map port to range,public string minimum port  string maximum port )  {  int min = 0; int max = 0; if  ( minimum port  !  =  null )   {  try  {  min =  integer . parse int ( minimum port ) ;  }  catch  (   number format exception e )   {  min = 0;  }   }  if  ( maximum port  !  =  null )   {  try  {  max =  integer . parse int ( maximum port ) ;  }  catch  (   number format exception e )   {  max = 0;  }   }  return map port to range ( port min max ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\SerialExecutorService.java,serial executor service,public executor target  string label )  {  this . target = target; this . label = label;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\SerialExecutorService.java,await termination,override public boolean   ( long timeout  time unit unit )  throws  interrupted exception  {  return terminated latch . await ( timeout unit ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\SerialExecutorService.java,drain,synchronized boolean .  t r u e ) ; try  {  boolean drained = false; while  (  ! drained )   {   runnable runnable = local queue . poll (  ) ; if  ( runnable  =  =  null )   {  runnable = external queue . poll (  ) ;  }  if  ( runnable  =  =  null )   {  drained = true;  }  else  {  try  {  runnable . run (  ) ;  }  catch  (   throwable e )   {   thread thread =  thread . current thread (  ) ; thread . get uncaught exception handler (  )  . uncaught exception ( thread e ) ;  }   }   }   }  finally  {  draining . remove (  ) ; triggered . set ( false ) ; if  (  ! external queue . is empty (  )  )   {  trigger drain (  ) ;  }   }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\SerialExecutorService.java,execute,"override public void   (  runnable runnable )  {  if  ( runnable  =  =  null )  throw new  null pointer exception ( ""runnable cannot be null"" ) ; if  ( shutdown . get (  )  )  throw new  rejected execution exception ( ""shutdown"" ) ; if  ( is draining (  )  )   {  local queue . add ( runnable ) ;  }  else  {  exter"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\SerialExecutorService.java,execute and drain,"public runnable runnable )  {  if  ( runnable  =  =  null )  throw new  null pointer exception ( ""runnable cannot be null"" ) ; if  ( shutdown . get (  )  )  throw new  rejected execution exception ( ""shutdown"" ) ; if  ( is draining (  )  )   {  runnable . run (  ) ;  }  else  {  external queue . add ( runnable ) ; drain (  ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\SerialExecutorService.java,get label,public string   (  )  {  return label;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\SerialExecutorService.java,get target,public executor   (  )  {  return target;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\PublicPortMapper.java,open shift s p i,"public map <  string  string >  envs =  system . getenv (  ) ; for  (   map .  entry <  string  string >  entry : envs . entry set (  )  )   {   string key = entry . get key (  ) ;  string public port = entry . get value (  ) ; if  ( key . starts with ( "" o p e n s h i f t _ "" )  && key . ends with ( "" _  p r o x y _  p o r t"" )  )   {   string prefix =  strings . strip suffix ( key "" _  p r o x y _  p o r t"" ) ;  string private port = envs . get ( prefix  +  "" _  p o r t"" ) ; if  ( private port  =  =  null )   {  private port = envs . get ( prefix ) ;  }  if  ( private port  !  =  null )   {  try  {  ports . put ( new  integer ( private port )  new  integer ( public port )  ) ;  }  catch  (   number format exception ignore )   {   }   }   }   }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\SerialExecutorService.java,is draining,public boolean .  t r u e;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\SerialExecutorService.java,is shutdown,override public boolean   (  )  {  return shutdown . get (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\SerialExecutorService.java,is terminated,override public boolean   (  )  {  return terminated . get (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\PublicPortMapper.java,create,"private s p i   (  )  {   class mapper class =  default s p i . class;  string mapper class name =  system . get property (  public port mapper . class . get name (  )  ) ; try  {  if  ( mapper class name  !  =  null )   {  mapper class name = mapper class name . trim (  ) ; if  ( mapper class name . equals ( ""default"" )  )   {  mapper class name =  default s p i . class . get name (  ) ;  }  if  ( mapper class name . equals ( ""openshift"" )  )   {  mapper class name =  open shift s p i . class . get name (  ) ;  }  try  {  mapper class =  public port mapper . class . get class loader (  )  . load class ( mapper class name ) ;  }  catch  (   class not found exception e )   {  mapper class =  thread . current thread (  )  . get context class loader (  )  . load class ( mapper class name ) ;  }   }  return  (  s p i ) mapper class . new instance (  ) ;  }  catch  (   exception e )   {  throw new  runtime exception ( e ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\PublicPortMapper.java,get public port,static port )  {  return create (  )  . get public port ( local port ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\SerialExecutorService.java,run,override public void   (  )  {  terminated . set ( true ) ; terminated latch . count down (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\SerialExecutorService.java,set label,public string label )  {  this . label = label;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\SerialExecutorService.java,set target,public executor target )  {  this . target = target;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\SerialExecutorService.java,shutdown,override public void   (  )  {  if  ( shutdown . compare and set ( false true )  )   {  external queue . add ( new  runnable (  )  {  @ override public void run (  )  {  terminated . set ( true ) ; terminated latch . count down (  ) ;  }   }   ) ; trigger drain (  ) ;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\SerialExecutorService.java,shutdown now,override public  list <  runnable >    (  )  {  shutdown (  ) ; return  collections .  e m p t y _  l i s t;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\SerialExecutorService.java,to string,override public  string   (  )  {  return label;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\SerialExecutorService.java,trigger drain,protected and set ( false true )  )   {  target . execute ( drain task ) ;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\PropertiesHelper.java,find properties with prefix,public map <  string  string >    (  properties properties  string prefix  function <  string  string >  key transformer )  {   map <  string  string >  answer = new  hash map <  >  (  ) ;  set <  map .  entry <  object  object >  >  entries = properties . entry set (  ) ; for  (   map .  entry <  object  object >  entry : entries )   {   object value = entry . get value (  ) ;  object key = entry . get key (  ) ; if  ( key instanceof  string && value  !  =  null )   {   string key text = key . to string (  ) ; if  ( key text . starts with ( prefix )  )   {   string new key = key text . substring ( prefix . length (  )  ) ; if  ( key transformer  !  =  null )   {  new key = key transformer . apply ( new key ) ;  }  answer . put ( new key value . to string (  )  ) ;  }   }   }  return answer;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\PropertiesHelper.java,get integer,public integer   (  properties properties  string key  integer default value )  {   object value = properties . get ( key ) ; if  ( value instanceof  string )   {  return  integer . parse int ( value . to string (  )  ) ;  }  else if  ( value instanceof  long )   {  return  (  integer ) value;  }  else if  ( value instanceof  number )   {   number number =  (  number ) value; return number . int value (  ) ;  }  return default value;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\PropertiesHelper.java,get integer value,public map <  string  string >  map  string key int default value )  {   properties properties = new  properties (  ) ; properties . put all ( map ) ; return get integer ( properties key default value ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\PropertiesHelper.java,get long,public long   (  properties properties  string key  long default value )  {   object value = properties . get ( key ) ; if  ( value instanceof  string )   {  return  long . parse long ( value . to string (  )  ) ;  }  else if  ( value instanceof  long )   {  return  (  long ) value;  }  else if  ( value instanceof  number )   {   number number =  (  number ) value; return number . long value (  ) ;  }  return default value;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\PropertiesHelper.java,get long value,public map <  string  string >  map  string key long default value )  {   properties properties = new  properties (  ) ; properties . put all ( map ) ; return get long ( properties key default value ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\PropertiesHelper.java,to map,public map <  string  string >    (  properties properties )  {   map <  string  string >  answer = new  hash map <  >  (  ) ; if  ( properties  !  =  null )   {   set <  map .  entry <  object  object >  >  entries = properties . entry set (  ) ; for  (   map .  entry <  object  object >  entry : entries )   {   object value = entry . get value (  ) ;  object key = entry . get key (  ) ; if  ( key  !  =  null && value  !  =  null )   {  answer . put ( key . to string (  )  value . to string (  )  ) ;  }   }   }  return answer;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Processes.java,apply,"override public  void   (  string line )  {   l o g . debug ( "" error ""  +  prefix  +  message +  "": "" +  line ) ; return null;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Processes.java,get docker container ids,"public list <  string >    (  )  {   string commands = ""docker ps  - q"";  string message = ""output of command: ""  +  commands;  l o g . debug ( "" executing commands: ""  +  message ) ; final  list <  string >  answer = new  array list <  >  (  ) ; try  {   process process =  runtime . get runtime (  )  . exec ( commands ) ;  function <  string  void >  fn = new  function <  string  void >  (  )  {  @ override public  void apply (   string line )  {  if  (  strings . is not blank ( line )  )   {  answer . add ( line . trim (  )  ) ;  }  return null;  }   }  ; process output ( process . get input stream (  )  fn message ) ; process errors ( process . get error stream (  )  message ) ;  }  catch  (   exception e )   {   l o g . error ( "" failed to execute process ""  +  ""stdin""  +  "" for ""  +  message  +  "": "" +  e e ) ;  }  return answer;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Processes.java,get java process ids,"public list <  long >    (  string .  .  .  class name filter )  {   string commands = ""jps  - l"";  string message = commands;  l o g . debug ( "" executing commands: ""  +  message ) ;  list <  long >  answer = new  array list <  long >  (  ) ;  filter <  string >  filter =  filters . contains any string ( class name filter ) ; try  {   process process =  runtime . get runtime (  )  . exec ( commands ) ; parse processes ( process . get input stream (  )  answer message filter null ) ; process errors ( process . get error stream (  )  message ) ;  }  catch  (   exception e )   {   l o g . error ( "" failed to execute process ""  +  ""stdin""  +  "" for ""  +  message  +  "": "" +  e e ) ;  }  return answer;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Processes.java,get process ids,public list <  long >    (  )  {  if  ( is windows )   {  return get process ids windows (  ) ;  }  else  {  return get process ids unix (  ) ;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Processes.java,get process ids unix,"private list <  long >    (  )  {   string commands = ""ps  - e"";  string message = commands;  l o g . debug ( "" executing commands: ""  +  message ) ;  list <  long >  answer = new  array list <  long >  (  ) ; try  {   process process =  runtime . get runtime (  )  . exec ( commands ) ; parse processes ( process . get input stream (  )  answer message  filters .  <  string > true filter (  )  null ) ; process errors ( process . get error stream (  )  message ) ;  }  catch  (   exception e )   {   l o g . error ( "" failed to execute process ""  +  ""stdin""  +  "" for ""  +  message  +  "": "" +  e e ) ;  }  return answer;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Processes.java,get process ids windows,"private list <  long >    (  )  {   string commands = ""tasklist  /  n h"";  string message = commands;  l o g . debug ( "" executing commands: ""  +  message ) ;  list <  long >  answer = new  array list <  long >  (  ) ; try  {   process process =  runtime . get runtime (  )  . exec ( commands ) ; parse processes ( process . get input stream (  )  answer message  filters .  <  string > true filter (  )   functions . chop length ( 50 )  ) ; process errors ( process . get error stream (  )  message ) ;  }  catch  (   exception e )   {   l o g . error ( "" failed to execute process ""  +  ""stdin""  +  "" for ""  +  message  +  "": "" +  e e ) ;  }  return answer;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Processes.java,is process alive,public list <  long >  process ids = get process ids (  ) ; if  ( process ids . is empty (  )  )   {  return true;  }  return process ids . contains ( pid ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Processes.java,kill docker container,"public string container id )  {   system . out . println ( "" killing  docker container ""  +  container id ) ;  l o g . warn ( "" w a r n i n g:  killing  docker container ""  +  container id ) ;  string commands = ""docker kill ""  +  container id;  string message = commands;  l o g . debug ( "" executing commands: ""  +  message ) ; final  list <  string >  answer = new  array list <  >  (  ) ;  process process = null; try  {  process =  runtime . get runtime (  )  . exec ( commands ) ; process input ( process . get input stream (  )  commands ) ; process errors ( process . get error stream (  )  commands ) ;  }  catch  (   exception e )   {   l o g . error ( "" failed to execute process ""  +  ""stdin""  +  "" for ""  +  message  +  "": "" +  e e ) ;  }  return process  !  =  null  ?  process . exit value (  )  :  - 1;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Processes.java,kill docker containers,public thread ( new  runnable (  )  {  @ override public void run (  )  {  int count = 0;  list <  string >  ids = get docker container ids (  ) ; for  (   string id : ids )   {  if  ( kill docker container ( id )   =  =  0 )   {  count +  + ;  }   }   }   }   )  . run (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Processes.java,kill java processes,"public string .  .  .  class name filters )  {  int count = 0;  list <  long >  java process ids = get java process ids ( class name filters ) ; for  (   long process id : java process ids )   {   system . out . println ( "" w a r n i n g:  killing  java process ""  +  process id ) ;  l o g . warn ( "" killing  java process ""  +  process id ) ; kill process ( process id "" - 9"" ) ; count +  + ;  }  return count;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Processes.java,kill process,"public long pid  string params )  {  if  ( pid  =  =  null ||  ! is process alive ( pid )  )   {  return 0;  }  if  ( is windows )   {  if  ( "" - 9"" . equals ( params )  )   {  params = "" /  f"";  }  return kill process windows ( pid params ) ;  }  else  {  return kill process unix ( pid params ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Processes.java,kill process unix,"protected long pid  string params )  {   string commands = ""kill ""  +   ( params  !  =  null  ?  params  +  "" "" : """" )   +  pid;  process process = null;  runtime runtime =  runtime . get runtime (  ) ;  l o g . debug ( "" executing commands: ""  +  commands ) ; try  {  process = runtime . exec ( commands ) ; process input ( process . get input stream (  )  commands ) ; process errors ( process . get error stream (  )  commands ) ;  }  catch  (   exception e )   {   l o g . error ( "" failed to execute process ""  +  ""stdin""  +  "" for ""  +  commands  +  "": "" +  e e ) ;  }  try  {  return process  !  =  null  ?  process . wait for (  )  : 1;  }  catch  (   interrupted exception e )   {   string message = format ( "" interrupted while waiting for 'kill %d ' command to finish"" pid ) ; throw new  runtime exception ( message e ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Processes.java,kill process windows,"protected long pid  string params )  {   string commands = ""taskkill ""  +   ( params  !  =  null  ?  params  +  "" "" : """" )   +  "" /  p i d "" +  pid;  process process = null;  runtime runtime =  runtime . get runtime (  ) ;  l o g . debug ( "" executing commands: ""  +  commands ) ; try  {  process = runtime . exec ( commands ) ; process input ( process . get input stream (  )  commands ) ; process errors ( process . get error stream (  )  commands ) ;  }  catch  (   exception e )   {   l o g . error ( "" failed to execute process ""  +  ""stdin""  +  "" for ""  +  commands  +  "": "" +  e e ) ;  }  try  {  return process  !  =  null  ?  process . wait for (  )  : 1;  }  catch  (   interrupted exception e )   {   string message = format ( "" interrupted while waiting for 'taskkill  /  p i d %d ' command to finish"" pid ) ; throw new  runtime exception ( message e ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Processes.java,parse processes,"protected input stream input stream  list <  long >  answer  string message  filter <  string >  line filter  function <  string  string >  pre function )  throws  exception  {   buffered reader reader = new  buffered reader ( new  input stream reader ( input stream )  ) ; try  {  while  ( true )   {   string line = reader . read line (  ) ; if  ( line  =  =  null )  break; if  ( pre function  !  =  null )   {  line = pre function . apply ( line ) ;  }  if  ( line filter . matches ( line )  )   {   string tokenizer tokenizer = new  string tokenizer ( line ) ; boolean found = false; while  ( tokenizer . has more tokens (  )  &&  ! found )   {   string pid text = tokenizer . next token (  ) ; try  {  long pid =  long . parse long ( pid text ) ; answer . add ( pid ) ; found = true;  }  catch  (   number format exception e )   {   l o g . debug ( "" could not parse pid ""  +  pid text  +  "" from command: "" +  message ) ;  }   }   }   }   }  catch  (   exception e )   {   l o g . debug ( "" failed to process stdin for ""  +  message  +  "": "" +  e e ) ; throw e;  }  finally  {   closeables . close quietly ( reader ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Processes.java,process errors,"protected input stream input stream  string message )  throws  exception  {  read process output ( input stream ""stderr for "" message ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Processes.java,process input,"protected input stream input stream  string message )  throws  exception  {  read process output ( input stream ""stdout for "" message ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Processes.java,process output,"protected input stream input stream  function <  string  void >  function  string errror message )  throws  i o exception  {   buffered reader reader = new  buffered reader ( new  input stream reader ( input stream )  ) ; try  {  while  ( true )   {   string line = reader . read line (  ) ; if  ( line  =  =  null )  break; function . apply ( line ) ;  }   }  catch  (   exception e )   {   l o g . error ( "" failed to process ""  +  errror message  +  "": "" +  e e ) ; throw e;  }  finally  {   closeables . close quietly ( reader ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Processes.java,read process output,"protected input stream input stream final  string prefix final  string message )  throws  exception  {   function <  string  void >  function = new  function <  string  void >  (  )  {  @ override public  void apply (   string line )  {   l o g . debug ( "" error ""  +  prefix  +  message +  "": "" +  line ) ; return null;  }   }  ; process output ( input stream function prefix  +  message ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Processes.java,run,override public void   (  )  {  int count = 0;  list <  string >  ids = get docker container ids (  ) ; for  (   string id : ids )   {  if  ( kill docker container ( id )   =  =  0 )   {  count +  + ;  }   }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\ssl\AllCertificatesTrustManager.java,get accepted issuers,public x509 certificate[]   (  )  {  return  e m p t y _  c e r t s;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\ShutdownTracker.java,attempt retain,public and increment (  )   =  =  0 || stopping . get (  )  )   {  retained . get and decrement (  ) ; return false;  }  else  {  return true;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\ShutdownTracker.java,invoke,override public  object   (  object proxy  method method  object[] args )  throws  throwable  {  retain (  ) ; try  {  return method . invoke ( target args ) ;  }  catch  (   invocation target exception e )   {  throw e . get cause (  ) ;  }  finally  {  release (  ) ;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\ShutdownTracker.java,mbean proxy,"public standard m bean   (  object target )  throws  not compliant m bean exception  {   class <  ?  >  target class = target . get class (  ) ;  string target class name = target class . get simple name (  ) ; for  (   class clazz : target class . get interfaces (  )  )   {  if  ( clazz . get simple name (  )  . equals ( target class name  +  "" m bean"" )  || clazz . get simple name (  )  . equals ( target class name  +  "" m x bean"" )  )   {  return new  standard m bean ( proxy ( target )  clazz ) ;  }   }  throw new  not compliant m bean exception (  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\ShutdownTracker.java,proxy,public object   ( final  object target )  {   class <  ?  >  target class = target . get class (  ) ; return  proxy . new proxy instance ( target class . get class loader (  )  target class . get interfaces (  )  new  invocation handler (  )  {  @ override public  object invoke (   object proxy   method method   object[] args )  throws  throwable  {  retain (  ) ; try  {  return method . invoke ( target args ) ;  }  catch  (   invocation target exception e )   {  throw e . get cause (  ) ;  }  finally  {  release (  ) ;  }   }   }   ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\ShutdownTracker.java,release,"public and get (  )   =  =  0 )   {  if  (  ! stopping . get (  )  )   {  throw new  illegal state exception ( "" unbalanced calls to release detected . "" ) ;  }  else  {  if  ( on stop callback  !  =  null )   {  on stop callback . run (  ) ; on stop callback = null;  }   }   }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\ShutdownTracker.java,retain,public retain (  )  )   {  throw new  shutdown exception (  ) ;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\ShutdownTracker.java,run,override public void   (  )  {  latch . count down (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\ShutdownTracker.java,shutdown,public runnable on stop callback )  throws  shutdown exception  {  if  ( stopping . compare and set ( false true )  )   {  this . on stop callback = on stop callback; release (  ) ;  }  else  {  throw new  shutdown exception (  ) ;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\ShutdownTracker.java,stop,public shutdown exception   interrupted exception  {  final  count down latch latch = new  count down latch ( 1 ) ; shutdown ( new  runnable (  )  {  @ override public void run (  )  {  latch . count down (  ) ;  }   }   ) ; latch . await (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\ShutdownTracker.java,use,public t >  t   (  callable <  t >  callable )  throws  exception  {  retain (  ) ; try  {  return callable . call (  ) ;  }  finally  {  retained . decrement and get (  ) ;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\ssl\TrustEverythingSSLTrustManager.java,get accepted issuers,public x509 certificate[]   (  )  {  return null;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\ssl\TrustEverythingSSLTrustManager.java,get trusting s s l socket factory,"public s s l socket factory   (  )  {  if  ( socket factory  !  =  null )  return socket factory;  trust manager[] trust managers = new  trust manager[] { new  trust everything s s l trust manager (  )  } ;  s s l context sc; try  {  sc =  s s l context . get instance ( "" s s l"" ) ; sc . init ( null trust managers null ) ;  }  catch  (   general security exception e )   {  throw new  runtime exception ( "" this is a  b u g"" e ) ;  }  socket factory = sc . get socket factory (  ) ; return socket factory;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\ssl\TrustEverythingSSLTrustManager.java,trust all s s l certificates,public https u r l connection connection )  {  get trusting s s l socket factory (  ) ; connection . set s s l socket factory ( socket factory ) ; connection . set hostname verifier ( new  hostname verifier (  )  {  public boolean verify (   string s   s s l session ssl session )  {  return true;  }   }   ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\ssl\TrustEverythingSSLTrustManager.java,trust all s s l certificates universally,public trusting s s l socket factory (  ) ;  https u r l connection . set default s s l socket factory ( socket factory ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\ssl\TrustEverythingSSLTrustManager.java,verify,public string s  s s l session ssl session )  {  return true;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Strings.java,apply,override public  string   (  string key )  {  if  ( key  !  =  null )   {  return key . replace ( ' . ' ' _ ' )  . replace ( ' ' ' _ ' ) ;  }  return null;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Strings.java,convert to camel case,public string   (  string text  string separator )  {   string buffer buffer = new  string buffer (  ) ;  string[] words = text . split ( separator ) ; boolean first = true; for  (   string word : words )   {  if  ( first )   {  buffer . append ( word ) ; first = false;  }  else  {  if  ( word . length (  )   >  0 )   {  buffer . append (  character . to upper case ( word . char at ( 0 )  )  ) ; if  ( word . length (  )   >  1 )   {  buffer . append ( word . substring ( 1 )  ) ;  }   }   }   }  return buffer . to string (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Strings.java,default if empty,public string   (  string value  string default value )  {  return not empty ( value )   ?  value : default value;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Strings.java,empty if null,"public string   (  string value )  {  if  ( value  =  =  null )   {  return """";  }  else  {  return value;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Strings.java,first non blank,public string   (  string .  .  .  values )  {  for  (   string value : values )   {  if  ( not empty ( value )  )   {  return value;  }   }  return null;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Strings.java,is not blank,public string text )  {  return  ! is null or blank ( text ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Strings.java,is null or blank,public string value )  {  return value  =  =  null || value . length (  )   =  =  0 || value . trim (  )  . length (  )   =  =  0;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Strings.java,join,public string   ( final  string separator  object .  .  .  objects )  {   string buffer buffer = new  string buffer (  ) ; boolean first = true; for  (   object object : objects )   {  if  ( first )   {  first = false;  }  else  {  buffer . append ( separator ) ;  }  buffer . append ( object ) ;  }  return buffer . to string (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Strings.java,join not null,public string   ( final  string separator  object .  .  .  objects )  {   string buffer buffer = new  string buffer (  ) ; boolean first = true; for  (   object object : objects )   {  if  ( object  =  =  null )  continue; if  ( first )   {  first = false;  }  else  {  buffer . append ( separator ) ;  }  buffer . append ( object ) ;  }  return buffer . to string (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Strings.java,not empty,public string text )  {  return text  !  =  null && text . length (  )   >  0;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Strings.java,null if empty,public string   (  string value )  {  if  ( value  =  =  null || value . length (  )   =  =  0 )   {  return null;  }  else  {  return value;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Strings.java,parse delimited string,"public list <  string >    (  string value  string delim boolean trim )  {  if  ( value  =  =  null )   {  value = """";  }   list <  string >  list = new  array list (  ) ; int  c h a r = 1; int  d e l i m i t e r = 2; int  s t a r t q u o t e = 4; int  e n d q u o t e = 8;  string buffer sb = new  string buffer (  ) ; int expecting =  (  c h a r |  d e l i m i t e r |  s t a r t q u o t e ) ; boolean is escaped = false; for  ( int i = 0; i  <  value . length (  ) ; i +  +  )   {  char c = value . char at ( i ) ; boolean is delimiter =  ( delim . index of ( c )   >  =  0 ) ; if  (  ! is escaped &&  ( c  =  =  '\\' )  )   {  is escaped = true; continue;  }  if  ( is escaped )   {  sb . append ( c ) ;  }  else if  ( is delimiter &&  (  ( expecting &  d e l i m i t e r )   >  0 )  )   {  if  ( trim )   {  list . add ( sb . to string (  )  . trim (  )  ) ;  }  else  {  list . add ( sb . to string (  )  ) ;  }  sb . delete ( 0 sb . length (  )  ) ; expecting =  (  c h a r |  d e l i m i t e r |  s t a r t q u o t e ) ;  }  else if  (  ( c  =  =  '""' )  &&  (  ( expecting &  s t a r t q u o t e )   >  0 )  )   {  sb . append ( c ) ; expecting =  c h a r |  e n d q u o t e;  }  else if  (  ( c  =  =  '""' )  &&  (  ( expecting &  e n d q u o t e )   >  0 )  )   {  sb . append ( c ) ; expecting =  (  c h a r |  s t a r t q u o t e |  d e l i m i t e r ) ;  }  else if  (  ( expecting &  c h a r )   >  0 )   {  sb . append ( c ) ;  }  else  {  throw new  illegal argument exception ( "" invalid delimited string: ""  +  value ) ;  }  is escaped = false;  }  if  ( sb . length (  )   >  0 )   {  if  ( trim )   {  list . add ( sb . to string (  )  . trim (  )  ) ;  }  else  {  list . add ( sb . to string (  )  ) ;  }   }  return list;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Strings.java,replace all without regex,public string   (  string text  string from  string to )  {  if  ( text  =  =  null )   {  return null;  }  int idx = 0; while  ( true )   {  idx = text . index of ( from idx ) ; if  ( idx  >  =  0 )   {  text = text . substring ( 0 idx )   +  to  +  text . substring ( idx  +  from . length (  )  ) ; idx +  = to . length (  ) ;  }  else  {  break;  }   }  return text;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Strings.java,rpad,public string   (  string delimiter  string str int max )  {  for  ( int i = 1; i  <  =  max; i +  +  )   {  str = str . concat ( delimiter ) ;  }  return str;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Strings.java,rpad by max size,public string   (  string delimiter  string str int max )  {  int len = max  -  str . length (  ) ; for  ( int i = 1; i  <  =  len; i +  +  )   {  str = str . concat ( delimiter ) ;  }  return str;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Strings.java,split and trim as list,public list <  string >    (  string text  string sep )  {   array list <  string >  answer = new  array list <  string >  (  ) ; if  ( text  !  =  null && text . length (  )   >  0 )   {  for  (   string v : text . split ( sep )  )   {   string trim = v . trim (  ) ; if  ( trim . length (  )   >  0 )   {  answer . add ( trim ) ;  }   }   }  return answer;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Strings.java,split as list,public list <  string >    (  string text  string delimiter )  {   list <  string >  answer = new  array list <  string >  (  ) ; if  ( text  !  =  null && text . length (  )   >  0 )   {  answer . add all (  arrays . as list ( text . split ( delimiter )  )  ) ;  }  return answer;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Strings.java,split camel case,public string   (  string text  string separator )  {   string builder buffer = new  string builder (  ) ; char last = ' a'; for  (  char c : text . to char array (  )  )   {  if  (  character . is lower case ( last )  &&  character . is upper case ( c )  )   {  buffer . append ( separator ) ;  }  buffer . append ( c ) ; last = c;  }  return buffer . to string (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Strings.java,strip prefix,public string   (  string value  string suffix )  {  if  (  ! value . starts with ( suffix )  )   {  return value;  }  else  {  return value . substring ( suffix . length (  )  ) ;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Strings.java,strip suffix,public string   (  string value  string suffix )  {  if  (  ! value . ends with ( suffix )  )   {  return value;  }  else  {  return value . substring ( 0 value . length (  )   -  suffix . length (  )  ) ;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Strings.java,to environment variable function,"public function <  string  string >    (  )  {  return new  function <  string  string >  (  )  {  @ override public  string to string (  )  {  return ""to environment variable function (  ) "";  }  @ override public  string apply (   string key )  {  if  ( key  !  =  null )   {  return key . replace ( ' . ' ' _ ' )  . replace ( ' ' ' _ ' ) ;  }  return null;  }   }  ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Strings.java,to lower case function,"public function <  string  string >    (  )  {  return new  function <  string  string >  (  )  {  @ override public  string to string (  )  {  return ""to lower case function (  ) "";  }  @ override public  string apply (   string value )  {  if  ( value  !  =  null )   {  return value . to lower case (  ) ;  }  return null;  }   }  ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Strings.java,to string,"override public  string   (  )  {  return ""to environment variable function (  ) "";  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Strings.java,to upper case function,"public function <  string  string >    (  )  {  return new  function <  string  string >  (  )  {  @ override public  string to string (  )  {  return ""to upper case function (  ) "";  }  @ override public  string apply (   string value )  {  if  ( value  !  =  null )   {  return value . to upper case (  ) ;  }  return null;  }   }  ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Strings.java,unquote,"public string   (  string text )  {  if  ( text  !  =  null && text . starts with ( ""\"""" )  && text . ends with ( ""\"""" )  )   {  return text . substring ( 1 text . length (  )   -  1 ) ;  }  else  {  return text;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Systems.java,get env var,"public string   (  string env var name  string default value )  {   string env var = null; try  {  env var =  system . getenv ( env var name ) ;  }  catch  (   exception e )   {   l o g . warn ( "" failed to look up environment variable $""  +  env var name  +  "" .  "" +  e e ) ;  }  if  (  strings . is not blank ( env var )  )   {  return env var;  }  else  {  return default value;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Systems.java,get env var or system property,public boolean   ( final  string name final  boolean default value )  {   string result = get env var or system property ( name default value . to string (  )  ) ; return  boolean . parse boolean ( result ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Systems.java,get service env var prefix,"protected string   (  string service name )  {  return service name . to upper case (  )  . replace ( ' - ' ' _ ' )   +  "" _  s e r v i c e"";  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Systems.java,get service host and port,"public string   (  string service name  string default host  string default port )  {   string service env var prefix = get service env var prefix ( service name ) ;  string host env var = service env var prefix  +  "" _  h o s t"";  string port env var = service env var prefix  +  "" _  p o r t"";  string host =  systems . get env var or system property ( host env var host env var default host ) ;  string port =  systems . get env var or system property ( port env var port env var default port ) ;  string answer = host  +  "":""  +  port;  l o g . info ( "" connecting to service ""  +  service name  +  "" on "" +  answer +  "" from $"" +  host env var +  "" and $"" +  port env var ) ; return answer;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Systems.java,get system property or env var,"public string   (  string system property  string env var name  string default value )  {   string answer = null; try  {  answer =  system . get property ( system property ) ;  }  catch  (   exception e )   {   l o g . warn ( "" failed to look up environment variable $""  +  env var name  +  "" .  "" +  e e ) ;  }  if  (  strings . is null or blank ( answer )  )   {  answer =  system . getenv ( env var name ) ;  }  if  (  strings . is not blank ( answer )  )   {  return answer;  }  else  {  return default value;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Systems.java,has env var or system property,public string env var name )  {  return get env var or system property ( env var name )   !  =  null;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\TablePrinter.java,column,"public string header )  {  this . header = header; this . header text = ""[""  +  header  +  ""]""; ensure width ( header text . length (  )  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\TablePrinter.java,as text,public string   (  )  {   byte array output stream out = new  byte array output stream (  ) ; print ( new  print stream ( out )  ) ; return new  string ( out . to byte array (  )  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\TablePrinter.java,as text lines,"public list <  string >    (  )  {   string text = as text (  ) ;  list <  string >  list = new  array list <  >  (  ) ;  string tokenizer iter = new  string tokenizer ( text ""\n"" ) ; while  ( iter . has more tokens (  )  )   {  list . add ( iter . next token (  )  ) ;  }  return list;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\TablePrinter.java,column,"public column   ( int index )  {  if  ( index  <  0 )   {  throw new  illegal argument exception ( ""index must be  >  =  0"" ) ;  }  synchronized  ( columns )   {   column answer = null; if  ( index  <  columns . size (  )  )   {  answer = columns . get ( index ) ;  }  if  ( answer  =  =  null )   {  answer = new  column ( """" ) ; columns . add ( answer ) ;  }  return answer;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\TablePrinter.java,columns,public string .  .  .  headers )  {  for  (   string header : headers )   {  column ( header ) ;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\TablePrinter.java,ensure width,public
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\TablePrinter.java,get header,public string   (  )  {  return header;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\TablePrinter.java,get header flags,public string   (  )  {  return header flags;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\TablePrinter.java,get row flags,public string   (  )  {  return row flags;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\TablePrinter.java,get width,public
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\URLUtils.java,decode,"public string   (  string url )  {  if  ( url  =  =  null )   {  return null;  }   string builder decoded = new  string builder (  ) ; int pos = 0; while  ( pos  <  url . length (  )  )   {  char ch = url . char at ( pos ) ; if  ( ch  =  =  '%' )   {  if  ( pos  +  2  <  url . length (  )  )   {   string hex str = url . substring ( pos  +  1 pos  +  3 ) ; char hex char =  ( char )  integer . parse int ( hex str 16 ) ; decoded . append ( hex char ) ; pos +  = 3;  }  else  {  throw new  illegal state exception ( ""'%' escape must be followed by two hex digits"" ) ;  }   }  else  {  decoded . append ( ch ) ; pos +  + ;  }   }  return decoded . to string (  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\URLUtils.java,path join,"public string   (  string .  .  .  strings )  {   string builder buffer = new  string builder (  ) ; for  (   string string : strings )   {  if  ( string  =  =  null )   {  continue;  }  if  ( buffer . length (  )   >  0 )   {  boolean buffer ends with separator = buffer . to string (  )  . ends with ( "" / "" ) ; boolean string starts with separator = string . starts with ( "" / "" ) ; if  ( buffer ends with separator )   {  if  ( string starts with separator )   {  string = string . substring ( 1 ) ;  }   }  else  {  if  (  ! string starts with separator )   {  buffer . append ( "" / "" ) ;  }   }   }  buffer . append ( string ) ;  }  return buffer . to string (  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\URLUtils.java,prepare for authentication,"public u r l connection   ( final  u r l connection connection )  {   null argument exception . validate not null ( connection ""url connection cannot be null"" ) ; if  ( connection . get u r l (  )  . get user info (  )   !  =  null )   {   string decoded user info = decode ( connection . get u r l (  )  . get user info (  )  ) ;  string base64 encoded = io . fabric8 . utils .  base64 encoder . encode ( decoded user info ) ; base64 encoded = base64 encoded . replace all ( ""\n"" """" ) ; connection . set request property ( "" authorization"" "" basic ""  +  base64 encoded ) ;  }  return connection;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\URLUtils.java,prepare for s s l,"public u r l connection   ( final  u r l connection connection )  {   null argument exception . validate not null ( connection ""url connection cannot be null"" ) ;  u r l connection conn = connection; if  ( conn instanceof  jar u r l connection )   {  try  {  conn =  (  (  jar u r l connection ) connection )  . get jar file u r l (  )  . open connection (  ) ; conn . connect (  ) ;  }  catch  (   i o exception e )   {  throw new  runtime exception ( "" could not prepare connection for  h t t p s . "" e ) ;  }   }  if  ( conn instanceof  https u r l connection )   {  try  {   s s l context ctx =  s s l context . get instance ( "" s s lv3"" ) ; ctx . init ( null new  trust manager[] { new  all certificates trust manager (  )  }  null ) ;  (  (  https u r l connection ) conn )  . set s s l socket factory ( ctx . get socket factory (  )  ) ;  }  catch  (   key management exception e )   {  throw new  runtime exception ( "" could not prepare connection for  h t t p s . "" e ) ;  }  catch  (   no such algorithm exception e )   {  throw new  runtime exception ( "" could not prepare connection for  h t t p s . "" e ) ;  }   }  return connection;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\URLUtils.java,prepare input stream,public input stream   ( final  u r l url final boolean accept any certificate )  throws  i o exception  {  final  u r l connection conn = url . open connection (  ) ; prepare for authentication ( conn ) ; if  ( accept any certificate )   {  prepare for s s l ( conn ) ;  }  return conn . get input stream (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\URLUtils.java,url path join,"public string   (  string first  string second )  {  if  (  strings . is null or blank ( second )  )   {  return first;  }  if  ( first . ends with ( "" / "" )  )   {  if  ( second . starts with ( "" / "" )  )   {  return first  +  second . substring ( 1 ) ;  }  else  {  return first  +  second;  }   }  else  {  if  ( second . starts with ( "" / "" )  )   {  return first  +  second;  }  else  {  return first  +  "" / ""  +  second;  }   }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\ThreadFactory.java,thread factory,public string name )  {  this . name = name;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\ThreadFactory.java,new thread,"override public  thread   (  runnable r )  {  return new  thread ( r name  +  "" #""  +  counter . increment and get (  )  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\XmlUtils.java,get child elements,public list <  element >    ( final  element element )  {  final  list <  element >  elements = new  array list <  element >  (  ) ; final  node list childs = element . get child nodes (  ) ; for  ( int i = 0; i  <  childs . get length (  ) ; i +  +  )   {   node child = childs . item ( i ) ; if  ( child instanceof  element )   {  elements . add (  (  element ) child ) ;  }   }  return elements;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\XmlUtils.java,get element,"public element   ( final  element element final  string path )  {   null argument exception . validate not null ( element "" element "" ) ;  null argument exception . validate not null ( path "" element path"" ) ;  element current = element;  string tokenizer st = new  string tokenizer ( path "" / "" false ) ; while  ( st . has more tokens (  )  && current  !  =  null )   {  final  string token = st . next token (  ) ; final  node list childs = current . get child nodes (  ) ; current = null; for  ( int i = 0; i  <  childs . get length (  ) ; i +  +  )   {  final  node child = childs . item ( i ) ; if  ( child instanceof  element && child . get node name (  )  . equals ( token )  )   {  current =  (  element ) child;  }   }   }  return current;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\XmlUtils.java,get elements,"public list <  element >    ( final  element element final  string path )  {   null argument exception . validate not null ( element "" element"" ) ;  null argument exception . validate not null ( path "" element path"" ) ;  string last element;  element parent; if  ( path . contains ( "" / "" )  )   {  parent = get element ( element path . substring ( 0 path . last index of ( "" / "" )  )  ) ; last element = path . substring ( path . last index of ( "" / "" )   +  1 ) ;  }  else  {  parent = element; last element = path;  }   list <  element >  elements = null; if  ( parent  !  =  null )   {   node list node list = parent . get elements by tag name ( last element ) ; if  ( node list  !  =  null )   {  elements = new  array list <  element >  (  ) ; for  ( int i = 0; i  <  node list . get length (  ) ; i +  +  )   {  elements . add (  (  element ) node list . item ( i )  ) ;  }   }   }  return elements;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\XmlUtils.java,get text content,public string   ( final  node node )  {  switch  ( node . get node type (  )  )   {  case  node .  e l e m e n t _  n o d e: case  node .  a t t r i b u t e _  n o d e: case  node .  e n t i t y _  n o d e: case  node .  e n t i t y _  r e f e r e n c e _  n o d e: case  node .  d o c u m e n t _  f r a g m e n t _  n o d e: return merge text content ( node . get child nodes (  )  ) ; case  node .  t e x t _  n o d e: case  node .  c d a t a _  s e c t i o n _  n o d e: case  node .  c o m m e n t _  n o d e: case  node .  p r o c e s s i n g _  i n s t r u c t i o n _  n o d e: return node . get node value (  ) ; case  node .  d o c u m e n t _  n o d e: case  node .  d o c u m e n t _  t y p e _  n o d e: case  node .  n o t a t i o n _  n o d e: default : return null;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\XmlUtils.java,get text content of element,"public string   ( final  element element final  string path )  {   null argument exception . validate not null ( element "" element"" ) ;  null argument exception . validate not null ( "" element path"" path ) ;  string tokenizer st = new  string tokenizer ( path "" / "" false ) ;  element current element = element; while  ( st . has more tokens (  )  )   {  final  string child name = st . next token (  ) ; if  ( child name . ends with ( ""]"" )  )   {  int start pos = child name . index of ( ""["" ) ; int end pos = child name . index of ( ""]"" ) ;  node list children = current element . get elements by tag name ( child name . substring ( 0 start pos )  ) ; int num children = children . get length (  ) ; int index;  string numbers = child name . substring ( start pos  +  1 end pos ) ; if  ( ""last"" . equals ( numbers )  )   {  index = num children  -  1;  }  else  {  index =  integer . parse int ( numbers ) ;  }  if  ( index  >  num children )   {  throw new  illegal argument exception ( ""index of ""  +  index  +  "" is larger than the number of child nodes  ( "" +  num children +  "" ) "" ) ;  }  current element =  (  element ) children . item ( index ) ;  }  else  {  final  node list parent = current element . get elements by tag name ( child name ) ; if  ( parent  !  =  null )   {  current element =  (  element ) parent . item ( 0 ) ;  }   }  if  ( null  =  =  current element )   {  return null;  }   }  return get text content ( current element ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\XmlUtils.java,merge text content,private string   ( final  node list nodes )  {   string buffer buf = new  string buffer (  ) ; for  ( int i = 0; i  <  nodes . get length (  ) ; i +  +  )   {   node n = nodes . item ( i ) ; final  string text; switch  ( n . get node type (  )  )   {  case  node .  c o m m e n t _  n o d e: case  node .  p r o c e s s i n g _  i n s t r u c t i o n _  n o d e: text = null; break; default : text = get text content ( n ) ; break;  }  if  ( text  !  =  null )   {  buf . append ( text ) ;  }   }  return buf . to string (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\XmlUtils.java,parse doc,"public document   ( final  input stream is )  throws  parser configuration exception   s a x exception   i o exception  {  try  {   buffered input stream in = new  buffered input stream ( is ) ;  document builder factory factory =  document builder factory . new instance (  ) ; factory . set feature ( ""http: /  / xml . org / sax / features / external - general - entities"" false ) ; factory . set feature ( ""http: /  / xml . org / sax / features / external - parameter - entities"" false ) ; factory . set feature ( ""http: /  / apache . org / xml / features / disallow - doctype - decl"" true ) ;  document builder builder = factory . new document builder (  ) ;  input source source = new  input source ( in ) ; return builder . parse ( source ) ;  }  finally  {  is . close (  ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\XPathBuilder.java,get x path,public x path   (  )  {  if  ( xpath  =  =  null )   {  xpath = get x path factory (  )  . new x path (  ) ;  }  return xpath;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\XPathBuilder.java,get x path factory,public x path factory   (  )  {  if  ( xpath factory  =  =  null )   {  xpath factory =  x path factory . new instance (  ) ;  }  return xpath factory;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\XPathBuilder.java,set x path,public x path xpath )  {  this . xpath = xpath;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\XPathBuilder.java,set x path factory,public x path factory xpath factory )  {  this . xpath factory = xpath factory;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\XPathBuilder.java,xpath,public x path facade   (  string xpath )  throws  x path expression exception  {   x path expression expression = get x path (  )  . compile ( xpath ) ; return new  x path facade ( this xpath expression ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\XmlHelper.java,create namespace finder,protected xml namespace finder   (  )  {   xml namespace finder finder = new  xml namespace finder (  ) ; if  ( factory  !  =  null )   {  finder . set factory ( factory ) ;  }  return finder;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\XmlHelper.java,get factory,public s a x parser factory   (  )  {  return factory;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\XmlHelper.java,get namespaces,public set <  string >    (  input source source )  throws  parser configuration exception   s a x exception   i o exception  {   xml namespace finder finder = create namespace finder (  ) ;  set <  string >  answer = finder . parse contents ( source ) ; if  ( factory  =  =  null )   {  factory = finder . get factory (  ) ;  }  return answer;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\XmlHelper.java,has namespace,public set <  string >  namespaces  string .  .  .  namespace u ris )  {  if  ( namespaces  !  =  null )   {  for  (   string namespace u ri : namespace u ris )   {  if  ( namespaces . contains ( namespace u ri )  )   {  return true;  }   }   }  return false;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\XmlHelper.java,set factory,public s a x parser factory factory )  {   xml helper . factory = factory;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Zips.java,copy,static input stream is  output stream os )  throws  i o exception  {  try  {  byte[] b = new byte[4096]; int l = is . read ( b ) ; while  ( l  >  =  0 )   {  os . write ( b 0 l ) ; l = is . read ( b ) ;  }   }  finally  {   closeables . close quietly ( os ) ;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Zips.java,create zip file,"public logger log  file source dir  file output zip file  file filter filter )  throws  i o exception  {  output zip file . get parent file (  )  . mkdirs (  ) ;  output stream os = new  file output stream ( output zip file ) ;  zip output stream zos = new  zip output stream ( os ) ; try  {   string path = """"; zip directory ( log source dir zos path filter ) ;  }  finally  {   closeables . close quietly ( zos ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Zips.java,matches,protected file filter filter  file f )  {  return filter  =  =  null || filter . accept ( f ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Zips.java,unzip,public input stream in  file to dir )  throws  i o exception  {   zip input stream zis = new  zip input stream ( new  buffered input stream ( in )  ) ; try  {   zip entry entry = zis . get next entry (  ) ; while  ( entry  !  =  null )   {  if  (  ! entry . is directory (  )  )   {   string entry name = entry . get name (  ) ;  file to file = new  file ( to dir entry name ) ; to file . get parent file (  )  . mkdirs (  ) ;  output stream os = new  file output stream ( to file ) ; try  {  try  {  copy ( zis os ) ;  }  finally  {  zis . close entry (  ) ;  }   }  finally  {   closeables . close quietly ( os ) ;  }   }  entry = zis . get next entry (  ) ;  }   }  finally  {  close quietly ( zis ) ;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Zips.java,zip directory,"public logger log  file directory  zip output stream zos  string path  file filter filter )  throws  i o exception  {   file[] dir list = directory . list files (  ) ; byte[] read buffer = new byte[8192]; int bytes in = 0; if  ( dir list  !  =  null )   {  for  (   file f : dir list )   {  if  ( f . is directory (  )  )   {   string prefix = path  +  f . get name (  )   +  "" / ""; if  ( matches ( filter f )  )   {  zos . put next entry ( new  zip entry ( prefix )  ) ; zip directory ( log f zos prefix filter ) ;  }   }  else  {   string entry = path  +  f . get name (  ) ; if  ( matches ( filter f )  )   {   file input stream fis = new  file input stream ( f ) ; try  {   zip entry an entry = new  zip entry ( entry ) ; zos . put next entry ( an entry ) ; bytes in = fis . read ( read buffer ) ; while  ( bytes in  !  =   - 1 )   {  zos . write ( read buffer 0 bytes in ) ; bytes in = fis . read ( read buffer ) ;  }   }  finally  {  fis . close (  ) ;  }  if  ( log . is debug enabled (  )  )   {  log . debug ( ""zipping file ""  +  entry ) ;  }   }   }  zos . close entry (  ) ;  }   }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\XmlNamespaceFinder.java,create parser,"protected s a x parser   (  s a x parser factory parser factory )  throws  parser configuration exception   s a x exception  {  parser factory . set namespace aware ( true ) ; final  s a x parser parser = parser factory . new s a x parser (  ) ; final  x m l reader reader = parser . get x m l reader (  ) ; try  {  reader . set feature ( ""http: /  / xml . org / sax / features / validation"" false ) ; reader . set feature ( ""http: /  / apache . org / xml / features / nonvalidating / load - external - dtd"" false ) ;  }  catch  (   s a x not recognized exception e )   {   }  catch  (   s a x not supported exception e )   {   }  return parser;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\XmlNamespaceFinder.java,get factory,public s a x parser factory   (  )  {  return factory;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\XmlNamespaceFinder.java,get namespaces,public set <  string >    (  )  {  return namespaces;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\XmlNamespaceFinder.java,parse contents,"public set <  string >    (  input source contents )  throws  i o exception   parser configuration exception   s a x exception  {  namespaces . clear (  ) ; if  ( factory  =  =  null )   {  factory =  s a x parser factory . new instance (  ) ;  }  if  ( factory  !  =  null )   {   s a x parser parser = create parser ( factory ) ; contents . set system id ( "" / "" ) ; parser . parse ( contents this ) ;  }  return namespaces;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\XmlNamespaceFinder.java,set factory,public s a x parser factory factory )  {  this . factory = factory;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\XmlNamespaceFinder.java,start element,override public void   (  string uri  string local name  string q name  attributes attributes )  throws  s a x exception  {  super . start element ( uri local name q name attributes ) ; if  (  ! namespace found )   {  if  ( uri  !  =  null && uri . length (  )   >  0 )   {  namespaces . add ( uri ) ;  }   }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\XPathFacade.java,x path facade,public x path builder builder  string xpath text  x path expression expression )  {  this . builder = builder; this . xpath text = xpath text; this . expression = expression;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\XPathFacade.java,element,public element   (  object item )  throws  x path expression exception  {   node node = node ( item ) ; if  ( node instanceof  element )   {  return  (  element ) node;  }  return null;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\XPathFacade.java,element text content,public string   (  object item )  throws  x path expression exception  {   element element = element ( item ) ; if  ( element  !  =  null )   {  return element . get text content (  ) ;  }  return null;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\XPathFacade.java,elements,public list <  element >    (  object item )  throws  x path expression exception  {   list <  element >  answer = new  array list <  element >  (  ) ;  object value = expression . evaluate ( item  x path constants .  n o d e s e t ) ; if  ( value instanceof  node list )   {   node list node list =  (  node list ) value; for  ( int i = 0  size = node list . get length (  ) ; i  <  size; i +  +  )   {   node node = node list . item ( i ) ; if  ( node instanceof  element )   {  answer . add (  (  element ) node ) ;  }   }   }  else if  ( value instanceof  element )   {  answer . add (  (  element ) value ) ;  }  return answer;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\XPathFacade.java,get builder,public x path builder   (  )  {  return builder;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\XPathFacade.java,get expression,public x path expression   (  )  {  return expression;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\XPathFacade.java,get xpath text,public string   (  )  {  return xpath text;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\XPathFacade.java,node,public node   (  object item )  throws  x path expression exception  {   object answer = expression . evaluate ( item  x path constants .  n o d e ) ; if  ( answer instanceof  node )   {  return  (  node ) answer;  }  return null;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\XPathFacade.java,nodes,public list <  node >    (  object item )  throws  x path expression exception  {   list <  node >  answer = new  array list <  node >  (  ) ;  object value = expression . evaluate ( item  x path constants .  n o d e s e t ) ; if  ( value instanceof  node list )   {   node list node list =  (  node list ) value; for  ( int i = 0  size = node list . get length (  ) ; i  <  size; i +  +  )   {   node node = node list . item ( i ) ; if  ( node  !  =  null )   {  answer . add ( node ) ;  }   }   }  else if  ( value instanceof  node )   {  answer . add (  (  node ) value ) ;  }  return answer;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\XPathFacade.java,to string,"override public  string   (  )  {  return "" x path facade ( ""  +  xpath text  +  "" ) "";  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\Base64EncoderTest.java,decode test,"test public void   (  )  {   assert . assert equals ( """"  base64 encoder . decode ( """" )  ) ;  assert . assert equals ( ""f""  base64 encoder . decode ( "" zg =  = "" )  ) ;  assert . assert equals ( ""fo""  base64 encoder . decode ( "" zm8 = "" )  ) ;  assert . assert equals ( ""foo""  base64 encoder . decode ( "" zm9v"" )  ) ;  assert . assert e"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\Base64EncoderTest.java,encode test,"test public void   (  )  {   assert . assert equals ( """"  base64 encoder . encode ( """" )  ) ;  assert . assert equals ( "" zg =  = ""  base64 encoder . encode ( ""f"" )  ) ;  assert . assert equals ( "" zm8 = ""  base64 encoder . encode ( ""fo"" )  ) ;  assert . assert equals ( "" zm9v""  base64 encoder . encode ( ""foo"" )  ) ;  assert . assert e"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\ChecksumUtilsTest.java,checksum test,"test public void   (  )  throws  i o exception  {   input stream stream = new  byte array input stream ( "" the quick brown fox jumps over the lazy dog"" . get bytes ( "" u t f - 8"" )  ) ;  assert . assert equals ( 0x414fa339  checksum utils . checksum ( stream )  ) ; stream = new  byte array input stream ( """" . get"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\ArraysTest.java,join test,"test public void   (  )  {   assert . assert equals ( "" a  b  c  d  e""  arrays . join ( "" "" "" a"" "" b"" "" c"" "" d"" "" e"" )  ) ;  assert . assert equals ( ""1:2:3:4:5""  arrays . join ( "":"" 1 2 3 4 5 )  ) ;  assert . assert equals ( ""1 . 1;2; c;4;5 . 5""  arrays . join ( "";"" 1 . 1d 2 "" c"" 4 5 . 5f )  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\CollectorsTest.java,assert collection contains,private collection <  string >  collection  string .  .  .  expected )  {  assert not null ( collection ) ; assert equals ( expected . length collection . size (  )  ) ; for  (   string element : expected )   {  assert true ( collection . contains ( element )  ) ;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\CollectorsTest.java,create collector,private collector <  string >    ( final  string .  .  .  elements )  {  return new  collector <  string >  (  )  {  @ override public  collection <  string >  get collection (  )  {  return  arrays . as list ( elements ) ;  }   }  ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\CollectorsTest.java,get collection,override public  collection <  string >    (  )  {  return  arrays . as list ( elements ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\CollectorsTest.java,test add collection,"test public void   (  )  {   collectors <  string >  collectors = new  collectors <  string >  (  ) ; collectors . add collection (  arrays . as list ( ""a"" ""b"" ""c"" )  ) ; collectors . add collection (  arrays . as list ( ""b"" ""d"" ""e"" )  ) ;  collection <  string >  result = collectors . get collection (  ) ; assert collecti"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\CollectorsTest.java,test get collection,"test public void   (  )  {   collectors <  string >  collectors = new  collectors <  string >  ( create collector ( ""a"" ""b"" ""c"" )  create collector ( ""b"" ""d"" ""e"" )  ) ;  collection <  string >  result = collectors . get collection (  ) ; assert collection contains ( result ""a"" ""b"" ""c"" ""d"" ""e"" ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\FabricValidationsTest.java,test container with invalid prefix,"test ( expected =  illegal argument exception . class )  public void   (  )  {  validate container name ( "" -  - container"" ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\FabricValidationsTest.java,test container with invalid prefix,"test ( expected =  illegal argument exception . class )  public void   (  )  {  validate container name ( "" _ container"" ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\FabricValidationsTest.java,test container with upper case,"test ( expected =  illegal argument exception . class )  public void   (  )  {  validate container name ( "" my container"" ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\FabricValidationsTest.java,test profile with invalid prefix,"test ( expected =  illegal argument exception . class )  public void   (  )  {  validate profile name ( "" -  - profile"" ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\FabricValidationsTest.java,test profile with invalid prefix,"test ( expected =  illegal argument exception . class )  public void   (  )  {  validate profile name ( "" _ profile"" ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\FabricValidationsTest.java,test profile with upper case,"test ( expected =  illegal argument exception . class )  public void   (  )  {  validate profile name ( "" my profile"" ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\FabricValidationsTest.java,test valid container names,"test public void   (  )  {  assert true ( is valid container name ( ""c"" )  ) ; assert true ( is valid container name ( ""c1"" )  ) ; assert true ( is valid container name ( ""c - 1"" )  ) ; assert true ( is valid container name ( ""c _ 1"" )  ) ; assert true ( is valid container name ( ""1container"" )  ) ; assert true ( is valid conta"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\FabricValidationsTest.java,test valid profile names,"test public void   (  )  {  assert true ( is valid profile name ( ""c"" )  ) ; assert true ( is valid profile name ( ""c1"" )  ) ; assert true ( is valid profile name ( ""c - 1"" )  ) ; assert true ( is valid profile name ( ""c _ 1"" )  ) ; assert true ( is valid profile name ( ""1container"" )  ) ; assert true ( is valid profile name ( ""co"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\FilesTest.java,normalize path test,"test public void   (  )  {   assert . assert equals ( "" / some / path""  files . normalize path ( ""\\some\\path"" '\\' ' / ' )  ) ;  assert . assert equals ( "" / some / path""  files . normalize path ( "" / some / path"" '\\' ' / ' )  ) ;  assert . assert equals ( ""\\some\\path""  files . normalize path ( "" / some / path"" ' / ' '\"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\FilesTest.java,to string test,"test public void   (  )  throws  i o exception  {  final  string test string = "" this is a test string""; final  input stream stream = new  byte array input stream ( test string . get bytes ( "" u t f - 8"" )  ) ;  assert . assert equals ( test string  files . to string ( stream )  ) ; stream . reset (  ) ;  assert . ass"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\KubernetesServicesTest.java,find service host and port,"test public void   (  )  throws  exception  {   string expected host = ""dummy . acme . com"";  string expected port = ""8080""; set env var system property (  kubernetes services . to service host environment variable ( service name )  expected host ) ; set env var system property (  kubernetes services . t"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\KubernetesServicesTest.java,retur default value when not found,"test public void   (  )  throws  exception  {   string default value = ""wine:beer"";  string actual =  kubernetes services . service to host and port ( service not exist name service port default value ) ; assert that ( actual )  . is equal to ( default value ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\KubernetesServicesTest.java,set env var system property,protected string name  string value )  {   system . set property ( name value ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\KubernetesServicesTest.java,throw exception when not found,"test public void   (  )  throws  exception  {  try  {   string actual =  kubernetes services . service to host and port ( service not exist name service port ) ; fail ( "" should have thrown  kubernetes service not found exception as we should not have found a host and port: ""  +  actual ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\MapTest.java,test string values,"test public void   (  )  throws  exception  {   map map = new  hash map (  ) ; map . put ( ""foo"" ""a b c"" ) ; assert array equals ( null  maps . string values ( map ""does not exist"" )  ) ; assert array equals ( new  string[] { ""a"" ""b"" ""c"" }   maps . string values ( map ""foo"" )  ) ;  maps . set string values ( map ""doe"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\PasswordEncoderTest.java,test decode,"test public void   (  )  {  assert equals ( "" u xdlcn r5""  password encoder . decode ( "" u xdlcn r5"" )  ) ; assert equals ( "" qwerty""  password encoder . decode (  password encoder .  p r e f i x  +  "" u xdlcn r5"" )  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\PasswordEncoderTest.java,test disable pw encoder,"test public void   (  )  {   system . set property ( ""zookeeper . password . encode"" ""false"" ) ; assert equals ( "" u xdlcn r5""  password encoder . decode ( "" u xdlcn r5"" )  ) ; assert equals (  password encoder .  p r e f i x  +  "" u xdlcn r5""  password encoder . decode (  password encoder .  p r e f i x  +  "" u xdlcn r5"" )  ) ; ass"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\PasswordEncoderTest.java,test encode,"test public void   (  )  {  assert equals (  password encoder .  p r e f i x  +  "" u xdlcn r5""  password encoder . encode ( "" qwerty"" )  ) ; assert equals (  password encoder .  p r e f i x  +  "" qwerty""  password encoder . encode (  password encoder .  p r e f i x  +  "" qwerty"" )  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\PatchUtilsTest.java,do assert extract,"private string override  string url  string range )  {  assert equals ( "" should extract  u r l"" url extract url ( override )  ) ; assert equals ( "" should extract version range"" range extract version range ( override )  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\PatchUtilsTest.java,test extract url and range,"test public void   (  )  {   string url = append version range ( ""mvn:io . fabric8 . test / test / 1 . 0 . 0"" ""[1 . 0 . 0 1 . 1 . 0 ) "" ) ; assert equals ( ""mvn:io . fabric8 . test / test / 1 . 0 . 0;range = [1 . 0 . 0 1 . 1 . 0 ) "" url ) ; do assert extract ( url ""mvn:io . fabric8 . test / test / 1 . 0 . 0"" ""[1 . 0 . 0 1 . 1 . 0 ) "" ) ; do assert"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\PathJoinTest.java,assert join paths,"private string expected  string .  .  .  strings )  {   string actual =  u r l utils . path join ( strings ) ; assert equals ( "" join strings: ""  +   arrays . as list ( strings )  expected actual ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\PathJoinTest.java,test join paths,"test public void   (  )  throws  exception  {  assert join paths ( ""http: /  / localhost:8080 / job / cheese / 12 / wfapi / describe"" ""http: /  / localhost:8080 / "" ""job / cheese / 12 / "" "" / wfapi / describe"" ) ; assert join paths ( ""http: /  / localhost:8080 / job / cheese / 12 / wfapi / describe"" ""http: /  / localh"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\PortsTest.java,test extract ssh url,"test public void   (  )  {   assert . assert equals ( 2181  ports . extract port ( ""istation:2181"" )  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\PortsTest.java,test port in range,test public void   (  )  {   assert . assert equals ( 8080  ports . map port to range ( 8080 8000 9000 )  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\PortsTest.java,test port map with greater maximum,test public void   (  )  {   assert . assert equals ( 8080  ports . map port to range ( 8080 0 9000 )  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\PortsTest.java,test port map with lower minimum,test public void   (  )  {   assert . assert equals ( 8080  ports . map port to range ( 8080 8000 0 )  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\PortsTest.java,test port map with no range,test public void   (  )  {   assert . assert equals ( 8080  ports . map port to range ( 8080 0 0 )  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\PortsTest.java,test port out of narrow range,test public void   (  )  {   assert . assert equals ( 13080  ports . map port to range ( 8080 10000 15000 )  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\PortsTest.java,test port out of range,test public void   (  )  {   assert . assert equals ( 18080  ports . map port to range ( 8080 10000 19000 )  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\PortsTest.java,test port out of range with no upper limit,test public void   (  )  {   assert . assert equals ( 18080  ports . map port to range ( 8080 10000 0 )  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\PropertiesHelperTest.java,get long test,"test public void   (  )  {   assert . assert true (  properties helper . get long ( properties "" s t r i n g _  v a l u e"" 1l )   =  =  1234567890l ) ;  assert . assert true (  properties helper . get long ( properties "" l o n g _  v a l u e"" 1l )   =  =  1234567891l ) ;  assert . assert true (  properties helper . get long ( properties "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\PropertiesHelperTest.java,get long value test,"test public void   (  )  {   assert . assert true (  properties helper . get long value ( properties "" s t r i n g _  v a l u e"" 1l )   =  =  1234567890l ) ;  assert . assert true (  properties helper . get long value ( properties "" l o n g _  v a l u e"" 1l )   =  =  1234567891l ) ;  assert . assert true (  properties helper . get long va"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\PropertiesHelperTest.java,get long value test,"test public void   (  )  {  final  map <  string  string >  map = new  hash map <  string  string >  (  ) ; map . put ( "" s t r i n g _  v a l u e"" ""1234567890"" ) ;  assert . assert true (  properties helper . get long value ( map "" s t r i n g _  v a l u e"" 1l )   =  =  1234567890l ) ;  assert . assert true (  properties helper . get long value"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\SerialExecutorServiceTest.java,run,override public void   (  )  {  data[0] +  + ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\PropertiesHelperTest.java,init,"before public void   (  )  {  properties = new  properties (  ) ; properties . put ( "" s t r i n g _  v a l u e"" ""1234567890"" ) ; properties . put ( "" i n t _  v a l u e"" 1234567890 ) ; properties . put ( "" d o u b l e _  v a l u e"" 1234567895 . 4d ) ; properties . put ( "" l o n g _  v a l u e"" 1234567891l ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\SerialExecutorServiceTest.java,test basic usage,test public void   (  )  throws  interrupted exception  {   serial executor service executor = new  serial executor service (  ) ; final long data[] = new long[] { 0 } ; for  ( int i = 0; i  <  10000; i +  +  )   {  final int id = i; executor . execute ( new  runnable (  )  {  @ override public void run (  )  {  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\URLUtilsTest.java,test url path join,"test public void   (  )  throws  exception  {  assert equals ( ""http: /  / foo . com / bar""  u r l utils . url path join ( ""http: /  / foo . com / "" ""bar"" )  ) ; assert equals ( ""http: /  / foo . com / bar""  u r l utils . url path join ( ""http: /  / foo . com"" ""bar"" )  ) ; assert equals ( ""http: /  / foo . com / bar""  u r l utils . url path j"
C:\Users\User\Desktop\Thesis\fabric8\components\gerrit-api\src\main\java\io\fabric8\gerrit\GitApi.java,create repository,"p o s t @ path ( ""projects /  { repo } "" )  public  repository d t o   ( @ path param ( ""repo"" )   string repo  create repository d t o dto ) ; "
C:\Users\User\Desktop\Thesis\fabric8\components\gerrit-api\src\main\java\io\fabric8\gerrit\GitApi.java,get repository,"g e t @ path ( ""projects /  { repo } "" )  public  project info d t o   ( @ path param ( ""repo"" )   string repo ) ; "
C:\Users\User\Desktop\Thesis\fabric8\components\gerrit-api\src\main\java\io\fabric8\gerrit\CreateRepositoryDTO.java,get description,public string   (  )  {  return description;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gerrit-api\src\main\java\io\fabric8\gerrit\CreateRepositoryDTO.java,get name,public string   (  )  {  return name;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gerrit-api\src\main\java\io\fabric8\gerrit\CreateRepositoryDTO.java,is createemptycommit,public
C:\Users\User\Desktop\Thesis\fabric8\components\gerrit-api\src\main\java\io\fabric8\gerrit\CreateRepositoryDTO.java,set createemptycommit,public
C:\Users\User\Desktop\Thesis\fabric8\components\gerrit-api\src\main\java\io\fabric8\gerrit\CreateRepositoryDTO.java,set description,public string description )  {  this . description = description;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gerrit-api\src\main\java\io\fabric8\gerrit\CreateRepositoryDTO.java,set name,public string name )  {  this . name = name;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\StringsTest.java,default if empty test,"test public void   (  )  {  assert equals ( "" some text""  strings . default if empty ( "" some text"" ""default"" )  ) ; assert equals ( "" ""  strings . default if empty ( "" "" ""default"" )  ) ; assert equals ( ""default""  strings . default if empty ( """" ""default"" )  ) ; assert equals ( ""default""  strings . default if"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\StringsTest.java,empty if null test,"test public void   (  )  {  assert equals ( "" some text""  strings . empty if null ( "" some text"" )  ) ; assert equals ( "" ""  strings . empty if null ( "" "" )  ) ; assert equals ( """"  strings . empty if null ( """" )  ) ; assert equals ( """"  strings . empty if null ( null )  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\StringsTest.java,is not blank test,"test public void   (  )  {   assert . assert false (  strings . is not blank ( null )  ) ;  assert . assert false (  strings . is not blank ( """" )  ) ;  assert . assert false (  strings . is not blank ( "" "" )  ) ;  assert . assert false (  strings . is not blank ( "" "" )  ) ;  assert . assert true (  strings . is not blank ( ""foobar"" )  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\StringsTest.java,is null or blank test,"test public void   (  )  {   assert . assert true (  strings . is null or blank ( null )  ) ;  assert . assert true (  strings . is null or blank ( """" )  ) ;  assert . assert true (  strings . is null or blank ( "" "" )  ) ;  assert . assert true (  strings . is null or blank ( "" "" )  ) ;  assert . assert false (  strings . is null or blank ( ""fo"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\StringsTest.java,join not null test,"test public void   (  )  {  assert equals ( ""a b 3 d 1 . 2 f""  strings . join not null ( "" "" ""a"" ""b"" 3 ""d"" 1 . 2d ""f"" null )  ) ; assert equals ( ""a b 3d1 . 2f""  strings . join not null ( """" ""a"" "" b "" 3 ""d"" 1 . 2d ""f"" null )  ) ; assert equals ( """"  strings . join not null ( """" )  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\StringsTest.java,join test,"test public void   (  )  {  assert equals ( ""a b 3 d 1 . 2 f null""  strings . join ( "" "" ""a"" ""b"" 3 ""d"" 1 . 2d ""f"" null )  ) ; assert equals ( ""a b 3d1 . 2fnull""  strings . join ( """" ""a"" "" b "" 3 ""d"" 1 . 2d ""f"" null )  ) ; assert equals ( """"  strings . join ( """" )  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\StringsTest.java,not empty test,"test public void   (  )  {   assert . assert true (  strings . not empty ( "" some text"" )  ) ;  assert . assert true (  strings . not empty ( "" "" )  ) ;  assert . assert false (  strings . not empty ( """" )  ) ;  assert . assert false (  strings . not empty ( null )  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\StringsTest.java,null if empty test,"test public void   (  )  {   assert . assert not null (  strings . null if empty ( "" some text"" )  ) ;  assert . assert not null (  strings . null if empty ( "" "" )  ) ;  assert . assert null (  strings . null if empty ( """" )  ) ;  assert . assert null (  strings . null if empty ( null )  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\StringsTest.java,parse delimited string test,"test public void   (  )  {   list <  string >  list =  strings . parse delimited string ( ""a b 3  d  some space  f"" "" "" ) ;  assert . assert true ( list . size (  )   =  =  6 ) ; assert equals ( ""a"" list . get ( 0 )  ) ; assert equals ( ""b"" list . get ( 1 )  ) ; assert equals ( ""3"" list . get ( 2 )  ) ; assert equals ( ""d"" list . g"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\StringsTest.java,split and trim as list test,"test public void   (  )  {   list <  string >  list =  strings . split and trim as list ( "" a   b   c   d "" "" "" ) ;  assert . assert true ( list . size (  )   =  =  4 ) ; assert equals ( ""a"" list . get ( 0 )  ) ; assert equals ( ""b"" list . get ( 1 )  ) ; assert equals ( ""c"" list . get ( 2 )  ) ; assert equals ( ""d"" list . get ( 3 )  ) ; li"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\StringsTest.java,split as list test,"test public void   (  )  {   list <  string >  list =  strings . split as list ( ""a b  c  d"" "" "" ) ;  assert . assert true ( list . size (  )   =  =  4 ) ; assert equals ( ""a"" list . get ( 0 )  ) ; assert equals ( ""b"" list . get ( 1 )  ) ; assert equals ( "" c "" list . get ( 2 )  ) ; assert equals ( ""d"" list . get ( 3 )  ) ; list =  strings . "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\StringsTest.java,test camel case,"test public void   (  )  throws  exception  {  assert equals ( ""foo bar whatnot""  strings . convert to camel case ( ""foo - bar - whatnot"" "" - "" )  ) ; assert equals ( ""foo bar whatnot""  strings . convert to camel case ( ""foo -  - bar - whatnot"" "" - "" )  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\StringsTest.java,test replace all without regex,"test public void   (  )  throws  exception  {  assert equals ( ""bar - 123 - bar - bar""  strings . replace all without regex ( ""foo - 123 - foo - foo"" ""foo"" ""bar"" )  ) ; assert equals ( "" - barbar - ""  strings . replace all without regex ( "" - foofoo - "" ""foo"" ""bar"" )  ) ; assert equals ( ""foo  {  { ' {  { ' }  }  bar  {  { ' {  { ' } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\StringsTest.java,to string test,"test public void   (  )  {  assert equals ( ""foobar""  strings . to string ( ""foobar"" )  ) ; assert equals ( ""12345""  strings . to string ( 12345 )  ) ; assert equals ( ""null""  strings . to string ( null )  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\StringsTest.java,unquote test,"test public void   (  )  {  assert equals ( ""foobar""  strings . unquote ( ""\""foobar\"""" )  ) ; assert equals ( ""\""foobar\""""  strings . unquote ( ""\""\""foobar\""\"""" )  ) ; assert equals ( ""'foobar'""  strings . unquote ( ""'foobar'"" )  ) ;  assert . assert null (  strings . unquote ( null )  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\gerrit-api\src\main\java\io\fabric8\gerrit\ProjectInfoDTO.java,get branches,public map <  string  string >    (  )  {  return branches;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gerrit-api\src\main\java\io\fabric8\gerrit\ProjectInfoDTO.java,get description,public string   (  )  {  return description;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gerrit-api\src\main\java\io\fabric8\gerrit\ProjectInfoDTO.java,get id,public string   (  )  {  return id;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gerrit-api\src\main\java\io\fabric8\gerrit\ProjectInfoDTO.java,get name,public string   (  )  {  return name;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gerrit-api\src\main\java\io\fabric8\gerrit\ProjectInfoDTO.java,get parent,public string   (  )  {  return parent;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gerrit-api\src\main\java\io\fabric8\gerrit\ProjectInfoDTO.java,get state,public project state   (  )  {  return state;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gerrit-api\src\main\java\io\fabric8\gerrit\ProjectInfoDTO.java,get web links,public list <  web link info >    (  )  {  return web links;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gerrit-api\src\main\java\io\fabric8\gerrit\ProjectInfoDTO.java,set branches,public map <  string  string >  branches )  {  this . branches = branches;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gerrit-api\src\main\java\io\fabric8\gerrit\ProjectInfoDTO.java,set description,public string description )  {  this . description = description;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gerrit-api\src\main\java\io\fabric8\gerrit\ProjectInfoDTO.java,set id,public string id )  {  this . id = id;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gerrit-api\src\main\java\io\fabric8\gerrit\ProjectInfoDTO.java,set name,public string name )  {  this . name = name;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gerrit-api\src\main\java\io\fabric8\gerrit\ProjectInfoDTO.java,set parent,public string parent )  {  this . parent = parent;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gerrit-api\src\main\java\io\fabric8\gerrit\ProjectInfoDTO.java,set state,public project state state )  {  this . state = state;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gerrit-api\src\main\java\io\fabric8\gerrit\ProjectInfoDTO.java,set web links,public list <  web link info >  web links )  {  this . web links = web links;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gerrit-api\src\main\java\io\fabric8\gerrit\WebLinkInfo.java,web link info,public string name  string url )  {  this . name = name; this . url = url;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gerrit-api\src\main\java\io\fabric8\gerrit\RepositoryDTO.java,get description,public string   (  )  {  return description;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gerrit-api\src\main\java\io\fabric8\gerrit\RepositoryDTO.java,get id,public string   (  )  {  return id;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gerrit-api\src\main\java\io\fabric8\gerrit\RepositoryDTO.java,get name,public string   (  )  {  return name;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gerrit-api\src\main\java\io\fabric8\gerrit\RepositoryDTO.java,get parent,public string   (  )  {  return parent;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gerrit-api\src\main\java\io\fabric8\gerrit\RepositoryDTO.java,get state,public string   (  )  {  return state;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gerrit-api\src\main\java\io\fabric8\gerrit\RepositoryDTO.java,set description,public string description )  {  this . description = description;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gerrit-api\src\main\java\io\fabric8\gerrit\RepositoryDTO.java,set id,public string id )  {  this . id = id;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gerrit-api\src\main\java\io\fabric8\gerrit\RepositoryDTO.java,set name,public string name )  {  this . name = name;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gerrit-api\src\main\java\io\fabric8\gerrit\RepositoryDTO.java,set parent,public string parent )  {  this . parent = parent;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gerrit-api\src\main\java\io\fabric8\gerrit\RepositoryDTO.java,set state,public string state )  {  this . state = state;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\CreateWebhookDTO.java,get active,public boolean   (  )  {  return active;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\CreateWebhookDTO.java,get config,public webhook config   (  )  {  return config;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\CreateWebhookDTO.java,get events,public list <  string >    (  )  {  return events;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\CreateWebhookDTO.java,get name,public string   (  )  {  return name;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\CreateWebhookDTO.java,get type,public string   (  )  {  return type;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\CreateWebhookDTO.java,set active,public boolean active )  {  this . active = active;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\CreateWebhookDTO.java,set config,public webhook config config )  {  this . config = config;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\CreateWebhookDTO.java,set events,public list <  string >  events )  {  this . events = events;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\CreateWebhookDTO.java,set name,public string name )  {  this . name = name;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\CreateWebhookDTO.java,set type,public string type )  {  this . type = type;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\CreateRepositoryDTO.java,get auto init,public boolean   (  )  {  return auto init;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\CreateRepositoryDTO.java,get description,public string   (  )  {  return description;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\CreateRepositoryDTO.java,get gitignore template,public string   (  )  {  return gitignore template;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\CreateRepositoryDTO.java,get has downloads,public boolean   (  )  {  return has downloads;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\CreateRepositoryDTO.java,get has issues,public boolean   (  )  {  return has issues;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\CreateRepositoryDTO.java,get has wiki,public boolean   (  )  {  return has wiki;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\CreateRepositoryDTO.java,get homepage,public string   (  )  {  return homepage;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\CreateRepositoryDTO.java,get license template,public string   (  )  {  return license template;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\CreateRepositoryDTO.java,get name,public string   (  )  {  return name;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\CreateRepositoryDTO.java,get private repository,public boolean   (  )  {  return private repository;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\CreateRepositoryDTO.java,get team id,public number   (  )  {  return team id;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\CreateRepositoryDTO.java,set auto init,public boolean auto init )  {  this . auto init = auto init;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\CreateRepositoryDTO.java,set description,public string description )  {  this . description = description;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\CreateRepositoryDTO.java,set gitignore template,public string gitignore template )  {  this . gitignore template = gitignore template;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\CreateRepositoryDTO.java,set has downloads,public boolean has downloads )  {  this . has downloads = has downloads;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\CreateRepositoryDTO.java,set has issues,public boolean has issues )  {  this . has issues = has issues;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\CreateRepositoryDTO.java,set has wiki,public boolean has wiki )  {  this . has wiki = has wiki;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\CreateRepositoryDTO.java,set homepage,public string homepage )  {  this . homepage = homepage;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\CreateRepositoryDTO.java,set license template,public string license template )  {  this . license template = license template;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\CreateRepositoryDTO.java,set name,public string name )  {  this . name = name;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\CreateRepositoryDTO.java,set private repository,public boolean private repository )  {  this . private repository = private repository;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\CreateRepositoryDTO.java,set team id,public number team id )  {  this . team id = team id;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\EntitySupport.java,get id,public long   (  )  {  return id;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\EntitySupport.java,set id,public long id )  {  this . id = id;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\DtoSupport.java,get additional properties,json any getter public  map <  string  object >    (  )  {  return this . additional properties;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\DtoSupport.java,set additional property,json any setter public void   (  string name  object value )  {  this . additional properties . put ( name value ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\GitRepoClientSupport.java,git repo client support,public string address  string username )  {  this . username = username; this . address = address; this . password = null;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\GitRepoClientSupport.java,call,override public  repository d t o   (  )  throws  exception  {  return get api (  )  . get organisation repository ( organisation repo ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\GitRepoClientSupport.java,create repository,public repository d t o   (  create repository d t o create repository )  {  return get api (  )  . create repository ( create repository ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\GitRepoClient.java,git repo client,public string address  string username  string password )  {  super ( address username password ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\GitRepoClient.java,create web client,override protected  <  t >  t   (  class <  t >  client type )  {   list <  object >  providers =  web clients . create providers (  ) ;  web client web client =  web client . create ( address providers ) ; disable ssl checks ( web client ) ; configure user and password ( web client username password ) ; return  j a x r s
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\GitRepoTokenClient.java,git repo token client,public string address  string username  string authorization type  string authorization )  {  super ( address username ) ; this . authorization type = authorization type; this . authorization = authorization;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\GitRepoTokenClient.java,create web client,override protected  <  t >  t   (  class <  t >  client type )  {   list <  object >  providers =  web clients . create providers (  ) ;  web client web client =  web client . create ( address providers ) ; disable ssl checks ( web client ) ; configure authorization ( web client username authorization type authori
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\GitRepoKubernetes.java,create git repo client,"public git repo client   (  kubernetes client kubernetes  string user name  string password )  {  if  (  strings . is null or blank ( user name )  )   {  user name =  systems . get env var or system property (  j e n k i n s _  g o g s _  u s e r ""gogsadmin"" ) ;  }  if  (  strings . is null or blank ( password )  )   {  password =  systems . get env var or system property (  j e n k i n s _  g o g s _  p a s s w o r d "" red hat$1"" ) ;  }   string namespace =  kubernetes helper . default namespace (  ) ;  string address; try  {  address =  kubernetes helper . get service u r l ( kubernetes  service names .  g o g s namespace ""http"" true ) ; if  (  strings . is null or blank ( address )  )   {   l o g . warn ( "" no  gogs service could be found in kubernetes ""  +  namespace  +  "" on address: "" +  kubernetes . get master url (  )  ) ; return null;  }   }  catch  (   illegal argument exception e )   {   l o g . warn ( "" no  gogs service could be found in kubernetes ""  +  namespace  +  "" on address: "" +  kubernetes . get master url (  )  ) ; return null;  }   l o g . info ( "" logging into  gogs at ""  +  address  +  "" as user "" +  user name ) ; return new  git repo client ( address user name password ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\PermissionsDTO.java,get admin,public boolean   (  )  {  return admin;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\PermissionsDTO.java,get pull,public boolean   (  )  {  return pull;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\PermissionsDTO.java,get push,public boolean   (  )  {  return push;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\PermissionsDTO.java,set admin,public boolean admin )  {  this . admin = admin;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\PermissionsDTO.java,set pull,public boolean pull )  {  this . pull = pull;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\PermissionsDTO.java,set push,public boolean push )  {  this . push = push;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\OrganisationDTO.java,get avatar url,public string   (  )  {  return avatar url;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\OrganisationDTO.java,get description,public string   (  )  {  return description;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\OrganisationDTO.java,get login,public string   (  )  {  return login;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\OrganisationDTO.java,get name,public string   (  )  {  return name;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\OrganisationDTO.java,get url,public string   (  )  {  return url;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\OrganisationDTO.java,set avatar url,public string avatar url )  {  this . avatar url = avatar url;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\OrganisationDTO.java,set description,public string description )  {  this . description = description;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\OrganisationDTO.java,set login,public string login )  {  this . login = login;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\OrganisationDTO.java,set name,public string name )  {  this . name = name;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\OrganisationDTO.java,set url,public string url )  {  this . url = url;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\OwnerDTO.java,get avatar url,public string   (  )  {  return avatar url;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\OwnerDTO.java,get email,public string   (  )  {  return email;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\OwnerDTO.java,get events url,public string   (  )  {  return events url;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\OwnerDTO.java,get followers url,public string   (  )  {  return followers url;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\OwnerDTO.java,get followings url,public string   (  )  {  return followings url;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\OwnerDTO.java,get full name,public string   (  )  {  return full name;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\OwnerDTO.java,get gists url,public string   (  )  {  return gists url;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\OwnerDTO.java,get gravatar id,public string   (  )  {  return gravatar id;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\OwnerDTO.java,get html url,public string   (  )  {  return html url;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\OwnerDTO.java,get login,public string   (  )  {  return login;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\OwnerDTO.java,get organisationss url,public string   (  )  {  return organisationss url;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\OwnerDTO.java,get received events url,public string   (  )  {  return received events url;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\OwnerDTO.java,get repos url,public string   (  )  {  return repos url;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\OwnerDTO.java,get site admin,public boolean   (  )  {  return site admin;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\OwnerDTO.java,get starred url,public string   (  )  {  return starred url;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\OwnerDTO.java,get subscriptions url,public string   (  )  {  return subscriptions url;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\OwnerDTO.java,get type,public string   (  )  {  return type;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\OwnerDTO.java,get url,public string   (  )  {  return url;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\OwnerDTO.java,get username,public string   (  )  {  return username;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\OwnerDTO.java,set avatar url,public string avatar url )  {  this . avatar url = avatar url;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\OwnerDTO.java,set email,public string email )  {  this . email = email;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\OwnerDTO.java,set events url,public string events url )  {  this . events url = events url;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\OwnerDTO.java,set followers url,public string followers url )  {  this . followers url = followers url;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\OwnerDTO.java,set followings url,public string followings url )  {  this . followings url = followings url;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\OwnerDTO.java,set full name,public string full name )  {  this . full name = full name;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\OwnerDTO.java,set gists url,public string gists url )  {  this . gists url = gists url;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\OwnerDTO.java,set gravatar id,public string gravatar id )  {  this . gravatar id = gravatar id;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\OwnerDTO.java,set html url,public string html url )  {  this . html url = html url;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\OwnerDTO.java,set login,public string login )  {  this . login = login;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\OwnerDTO.java,set organisationss url,public string organisationss url )  {  this . organisationss url = organisationss url;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\OwnerDTO.java,set received events url,public string received events url )  {  this . received events url = received events url;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\OwnerDTO.java,set repos url,public string repos url )  {  this . repos url = repos url;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\OwnerDTO.java,set site admin,public boolean site admin )  {  this . site admin = site admin;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\OwnerDTO.java,set starred url,public string starred url )  {  this . starred url = starred url;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\OwnerDTO.java,set subscriptions url,public string subscriptions url )  {  this . subscriptions url = subscriptions url;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\OwnerDTO.java,set type,public string type )  {  this . type = type;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\OwnerDTO.java,set url,public string url )  {  this . url = url;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\OwnerDTO.java,set username,public string username )  {  this . username = username;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\WebhookConfig.java,get content type,public string   (  )  {  return content type;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\WebhookConfig.java,get secret,public string   (  )  {  return secret;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\WebhookConfig.java,get url,public string   (  )  {  return url;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\WebhookConfig.java,set content type,public string content type )  {  this . content type = content type;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\WebhookConfig.java,set secret,public string secret )  {  this . secret = secret;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\WebhookConfig.java,set url,public string url )  {  this . url = url;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\RepositoryDTO.java,get clone url,public string   (  )  {  return clone url;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\RepositoryDTO.java,get description,public string   (  )  {  return description;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\RepositoryDTO.java,get fork,public boolean   (  )  {  return fork;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\RepositoryDTO.java,get full name,public string   (  )  {  return full name;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\RepositoryDTO.java,get html url,public string   (  )  {  return html url;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\RepositoryDTO.java,get name,public string   (  )  {  return name;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\RepositoryDTO.java,get owner,public owner d t o   (  )  {  return owner;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\RepositoryDTO.java,get permissions,public permissions d t o   (  )  {  return permissions;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\RepositoryDTO.java,get private repository,public boolean   (  )  {  return private repository;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\RepositoryDTO.java,get ssh url,public string   (  )  {  return ssh url;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\RepositoryDTO.java,get url,public string   (  )  {  return url;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\RepositoryDTO.java,set clone url,public string clone url )  {  this . clone url = clone url;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\RepositoryDTO.java,set description,public string description )  {  this . description = description;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\RepositoryDTO.java,set fork,public boolean fork )  {  this . fork = fork;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\RepositoryDTO.java,set full name,public string full name )  {  this . full name = full name;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\RepositoryDTO.java,set html url,public string html url )  {  this . html url = html url;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\RepositoryDTO.java,set name,public string name )  {  this . name = name;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\RepositoryDTO.java,set owner,public owner d t o owner )  {  this . owner = owner;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\RepositoryDTO.java,set permissions,public permissions d t o permissions )  {  this . permissions = permissions;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\RepositoryDTO.java,set private repository,public boolean private repository )  {  this . private repository = private repository;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\RepositoryDTO.java,set ssh url,public string ssh url )  {  this . ssh url = ssh url;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\RepositoryDTO.java,set url,public string url )  {  this . url = url;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\WebHookDTO.java,get active,public boolean   (  )  {  return active;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\WebHookDTO.java,get config,public webhook config   (  )  {  return config;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\WebHookDTO.java,get created at,public string   (  )  {  return created at;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\WebHookDTO.java,get events,public list <  string >    (  )  {  return events;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\WebHookDTO.java,get name,public string   (  )  {  return name;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\WebHookDTO.java,get ping url,public string   (  )  {  return ping url;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\WebHookDTO.java,get test url,public string   (  )  {  return test url;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\WebHookDTO.java,get updated at,public string   (  )  {  return updated at;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\WebHookDTO.java,get url,public string   (  )  {  return url;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\WebHookDTO.java,set active,public boolean active )  {  this . active = active;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\WebHookDTO.java,set config,public webhook config config )  {  this . config = config;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\WebHookDTO.java,set created at,public string created at )  {  this . created at = created at;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\WebHookDTO.java,set events,public list <  string >  events )  {  this . events = events;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\WebHookDTO.java,set name,public string name )  {  this . name = name;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\WebHookDTO.java,set ping url,public string ping url )  {  this . ping url = ping url;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\WebHookDTO.java,set test url,public string test url )  {  this . test url = test url;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\WebHookDTO.java,set updated at,public string updated at )  {  this . updated at = updated at;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\WebHookDTO.java,set url,public string url )  {  this . url = url;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\WebHookDTO.java,to string,"override public  string   (  )  {  return "" web hook d t o { ""  +  ""url = '""  +  url  +  '\'' +  ""  test url = '"" +  test url +  '\'' +  ""  ping url = '"" +  ping url +  '\'' +  ""  name = '"" +  name +  '\'' +  ""  created at = '"" +  created at +  '\'' +  ""  config = "" +  config +  ""  active = "" +  active +  ""  events = "" +  events +  "
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateWebhookDTO.java,get active,public boolean   (  )  {  return active;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateWebhookDTO.java,get config,public webhook config   (  )  {  return config;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateWebhookDTO.java,get events,public list <  string >    (  )  {  return events;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateWebhookDTO.java,get name,public string   (  )  {  return name;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateWebhookDTO.java,get type,public string   (  )  {  return type;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateWebhookDTO.java,set active,public boolean active )  {  this . active = active;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateWebhookDTO.java,set config,public webhook config config )  {  this . config = config;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateWebhookDTO.java,set events,public list <  string >  events )  {  this . events = events;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateWebhookDTO.java,set name,public string name )  {  this . name = name;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateWebhookDTO.java,set type,public string type )  {  this . type = type;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateGroupDTO.java,get description,public string   (  )  {  return description;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateGroupDTO.java,get lfs enabled,public boolean   (  )  {  return lfs enabled;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateGroupDTO.java,get name,public string   (  )  {  return name;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateGroupDTO.java,get path,public string   (  )  {  return path;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateGroupDTO.java,get request access enabled,public boolean   (  )  {  return request access enabled;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateGroupDTO.java,get visibility level,public integer   (  )  {  return visibility level;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateGroupDTO.java,set description,public string description )  {  this . description = description;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateGroupDTO.java,set lfs enabled,public boolean lfs enabled )  {  this . lfs enabled = lfs enabled;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateGroupDTO.java,set name,public string name )  {  this . name = name;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateGroupDTO.java,set path,public string path )  {  this . path = path;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateGroupDTO.java,set request access enabled,public boolean request access enabled )  {  this . request access enabled = request access enabled;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateGroupDTO.java,set visibility level,public integer visibility level )  {  this . visibility level = visibility level;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateGroupDTO.java,to string,"override public  string   (  )  {  return "" create group d t o { ""  +  ""name = '""  +  name  +  '\'' +  ""  path = '"" +  path +  '\'' +  ' } ';  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\GitlabClient.java,gitlab client,public string address  string username  string password )  {  super ( address username password ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\GitlabClient.java,create group,"p o s t @ path ( ""group"" )  public  group d t o   (  create group d t o dto )  {  return get api (  )  . create group ( dto ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\GitlabClient.java,create web client,override protected  <  t >  t   (  class <  t >  client type )  {   list <  object >  providers =  web clients . create providers (  ) ; if  (  strings . is not blank ( private token )  )   {  providers . add ( create private token filter ( private token )  ) ;  }   web client web client =  web client . create ( address providers ) ;
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\GitlabClient.java,get group issues,"g e t @ path ( ""groups /  { group id }  / issues"" )  public  list <  issue d t o >    (  long group id )  {  return get api (  )  . get group issues ( group id ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\GitlabClient.java,get groups,"g e t @ path ( ""groups"" )  public  list <  group d t o >    (  )  {  return get api (  )  . get groups (  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\GitlabClient.java,get issues,"g e t @ path ( ""issues"" )  public  list <  issue d t o >    (  )  {  return get api (  )  . get issues (  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\GitlabClient.java,get namespaces,"g e t @ path ( ""namespaces"" )  public  list <  namespace d t o >    (  )  {  return get api (  )  . get namespaces (  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\GitlabClient.java,get project,"g e t @ path ( ""projects /  { project id } "" )  public  list <  project d t o >    (  long project id )  {  return get api (  )  . get project ( project id ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\GitlabClient.java,get project issue,"g e t @ path ( ""projects /  { project id }  / issues"" )  public  list <  issue d t o >    (  long project id )  {  return get api (  )  . get project issue ( project id ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\GitlabClient.java,get projects,"g e t @ path ( ""projects"" )  public  list <  project d t o >    (  )  {  return get api (  )  . get projects (  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateProjectDTO.java,create project d t o,public id  string name )  {  this . user id = user id; this . name = name;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateProjectDTO.java,get builds enabled,public boolean   (  )  {  return builds enabled;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateProjectDTO.java,get container registry enabled,public boolean   (  )  {  return container registry enabled;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateProjectDTO.java,get description,public string   (  )  {  return description;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateProjectDTO.java,get import url,public string   (  )  {  return import url;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateProjectDTO.java,get issues enabled,public boolean   (  )  {  return issues enabled;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateProjectDTO.java,get lfs enabled,public boolean   (  )  {  return lfs enabled;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateProjectDTO.java,get merge requests enabled,public boolean   (  )  {  return merge requests enabled;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateProjectDTO.java,get name,public string   (  )  {  return name;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateProjectDTO.java,get namespace id,public id;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateProjectDTO.java,get only allow merge if all discussions are resolved,public boolean   (  )  {  return only allow merge if all discussions are resolved;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateProjectDTO.java,get only allow merge if build succeeds,public boolean   (  )  {  return only allow merge if build succeeds;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateProjectDTO.java,get path,public string   (  )  {  return path;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateProjectDTO.java,get public builds,public boolean   (  )  {  return public builds;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateProjectDTO.java,get public project,public boolean   (  )  {  return public project;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateProjectDTO.java,get request access enabled,public boolean   (  )  {  return request access enabled;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateProjectDTO.java,get shared runners enabled,public boolean   (  )  {  return shared runners enabled;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateProjectDTO.java,get snippets enabled,public boolean   (  )  {  return snippets enabled;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateProjectDTO.java,get user id,public id;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateProjectDTO.java,get visibility level,public integer   (  )  {  return visibility level;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateProjectDTO.java,get wiki enabled,public boolean   (  )  {  return wiki enabled;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateProjectDTO.java,set builds enabled,public boolean builds enabled )  {  this . builds enabled = builds enabled;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateProjectDTO.java,set container registry enabled,public boolean container registry enabled )  {  this . container registry enabled = container registry enabled;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateProjectDTO.java,set description,public string description )  {  this . description = description;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateProjectDTO.java,set import url,public string import url )  {  this . import url = import url;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateProjectDTO.java,set issues enabled,public boolean issues enabled )  {  this . issues enabled = issues enabled;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateProjectDTO.java,set lfs enabled,public boolean lfs enabled )  {  this . lfs enabled = lfs enabled;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateProjectDTO.java,set merge requests enabled,public boolean merge requests enabled )  {  this . merge requests enabled = merge requests enabled;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateProjectDTO.java,set name,public string name )  {  this . name = name;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateProjectDTO.java,set namespace id,public id )  {  this . namespace id = namespace id;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateProjectDTO.java,set only allow merge if all discussions are resolved,public boolean only allow merge if all discussions are resolved )  {  this . only allow merge if all discussions are resolved = only allow merge if all discussions are resolved;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateProjectDTO.java,set only allow merge if build succeeds,public boolean only allow merge if build succeeds )  {  this . only allow merge if build succeeds = only allow merge if build succeeds;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateProjectDTO.java,set path,public string path )  {  this . path = path;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateProjectDTO.java,set public builds,public boolean public builds )  {  this . public builds = public builds;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateProjectDTO.java,set public project,public boolean public project )  {  this . public project = public project;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateProjectDTO.java,set request access enabled,public boolean request access enabled )  {  this . request access enabled = request access enabled;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateProjectDTO.java,set shared runners enabled,public boolean shared runners enabled )  {  this . shared runners enabled = shared runners enabled;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateProjectDTO.java,set snippets enabled,public boolean snippets enabled )  {  this . snippets enabled = snippets enabled;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateProjectDTO.java,set user id,public id )  {  this . user id = user id;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateProjectDTO.java,set visibility level,public integer visibility level )  {  this . visibility level = visibility level;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateProjectDTO.java,set wiki enabled,public boolean wiki enabled )  {  this . wiki enabled = wiki enabled;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateProjectDTO.java,to string,"override public  string   (  )  {  return "" create project d t o { ""  +  ""user id = ""  +  user id  +  ""  name = '"" +  name +  '\'' +  ""  namespace id = "" +  namespace id +  ""  description = '"" +  description +  '\'' +  ' } ';  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\GitlabClientSupport.java,gitlab client support,public string address  string username )  {  this . username = username; this . address = address; this . password = null;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\GroupDTO.java,get description,public string   (  )  {  return description;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\GroupDTO.java,get name,public string   (  )  {  return name;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\GroupDTO.java,get path,public string   (  )  {  return path;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\GroupDTO.java,set description,public string description )  {  this . description = description;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\GroupDTO.java,set name,public string name )  {  this . name = name;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\GroupDTO.java,set path,public string path )  {  this . path = path;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\GroupDTO.java,to string,"override public  string   (  )  {  return "" group d t o { ""  +  ""path = '""  +  path  +  '\'' +  ""  name = '"" +  name +  '\'' +  ' } ';  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\GitlabKubernetes.java,create git repo client,"public gitlab client   (  kubernetes client kubernetes  string user name  string password )  {  if  (  strings . is null or blank ( user name )  )   {  user name =  systems . get env var or system property (  j e n k i n s _  g o g s _  u s e r ""gogsadmin"" ) ;  }  if  (  strings . is null or blank ( password )  )   {  password =  systems . get env var or system property (  j e n k i n s _  g o g s _  p a s s w o r d "" red hat$1"" ) ;  }   string namespace =  kubernetes helper . default namespace (  ) ;  string address; try  {  address =  kubernetes helper . get service u r l ( kubernetes  service names .  g i t l a b namespace ""http"" true ) ; if  (  strings . is null or blank ( address )  )   {   l o g . warn ( "" no  gitlab service could be found in kubernetes ""  +  namespace  +  "" on address: "" +  kubernetes . get master url (  )  ) ; return null;  }   }  catch  (   illegal argument exception e )   {   l o g . warn ( "" no  gitlab service could be found in kubernetes ""  +  namespace  +  "" on address: "" +  kubernetes . get master url (  )  ) ; return null;  }   l o g . info ( "" logging into  gitlab at ""  +  address  +  "" as user "" +  user name ) ; return new  gitlab client ( address user name password ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\GitlabTokenClient.java,gitlab token client,public string address  string username  string authorization type  string authorization )  {  super ( address username ) ; this . authorization type = authorization type; this . authorization = authorization;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\GitlabTokenClient.java,create web client,override protected  <  t >  t   (  class <  t >  client type )  {   list <  object >  providers =  web clients . create providers (  ) ;  web client web client =  web client . create ( address providers ) ; disable ssl checks ( web client ) ; configure authorization ( web client username authorization type authori
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\NamespaceDTO.java,get kind,public string   (  )  {  return kind;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\NamespaceDTO.java,get path,public string   (  )  {  return path;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\NamespaceDTO.java,is group,"json ignore public boolean   (  )  {  return  objects . equal ( ""group"" kind ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\NamespaceDTO.java,is user,"json ignore public boolean   (  )  {  return  objects . equal ( ""user"" kind ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\NamespaceDTO.java,set kind,public string kind )  {  this . kind = kind;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\NamespaceDTO.java,set path,public string path )  {  this . path = path;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\NamespaceDTO.java,to string,"override public  string   (  )  {  return "" namespace d t o { ""  +  ""path = '""  +  path  +  '\'' +  ""  kind = '"" +  kind +  '\'' +  ' } ';  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\MilestoneDTO.java,get created at,public date   (  )  {  return created at;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\MilestoneDTO.java,get description,public string   (  )  {  return description;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\MilestoneDTO.java,get due date,public date   (  )  {  return due date;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\MilestoneDTO.java,get iid,public integer   (  )  {  return iid;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\MilestoneDTO.java,get project id,public integer   (  )  {  return project id;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\MilestoneDTO.java,get state,public string   (  )  {  return state;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\MilestoneDTO.java,get title,public string   (  )  {  return title;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\MilestoneDTO.java,get updated at,public date   (  )  {  return updated at;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\MilestoneDTO.java,set created at,public date created at )  {  this . created at = created at;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\MilestoneDTO.java,set description,public string description )  {  this . description = description;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\MilestoneDTO.java,set due date,public date due date )  {  this . due date = due date;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\MilestoneDTO.java,set iid,public integer iid )  {  this . iid = iid;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\MilestoneDTO.java,set project id,public integer project id )  {  this . project id = project id;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\MilestoneDTO.java,set state,public string state )  {  this . state = state;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\MilestoneDTO.java,set title,public string title )  {  this . title = title;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\MilestoneDTO.java,set updated at,public date updated at )  {  this . updated at = updated at;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\MilestoneDTO.java,to string,"override public  string   (  )  {  return "" milestone d t o { ""  +  ""iid = ""  +  iid  +  ""  state = '"" +  state +  '\'' +  ""  title = '"" +  title +  '\'' +  ' } ';  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\IssueDTO.java,get assignee,public user d t o   (  )  {  return assignee;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\IssueDTO.java,get author,public user d t o   (  )  {  return author;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\IssueDTO.java,get confidential,public boolean   (  )  {  return confidential;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\IssueDTO.java,get created at,public date   (  )  {  return created at;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\IssueDTO.java,get description,public string   (  )  {  return description;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\IssueDTO.java,get due date,public date   (  )  {  return due date;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\IssueDTO.java,get iid,public integer   (  )  {  return iid;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\IssueDTO.java,get labels,public string[]   (  )  {  return labels;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\IssueDTO.java,get milestone,public milestone d t o   (  )  {  return milestone;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\IssueDTO.java,get project id,public integer   (  )  {  return project id;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\IssueDTO.java,get state,public string   (  )  {  return state;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\IssueDTO.java,get subscribed,public boolean   (  )  {  return subscribed;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\IssueDTO.java,get title,public string   (  )  {  return title;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\IssueDTO.java,get updated at,public date   (  )  {  return updated at;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\IssueDTO.java,get web url,public string   (  )  {  return web url;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\IssueDTO.java,set assignee,public user d t o assignee )  {  this . assignee = assignee;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\IssueDTO.java,set author,public user d t o author )  {  this . author = author;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\IssueDTO.java,set confidential,public boolean confidential )  {  this . confidential = confidential;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\IssueDTO.java,set created at,public date created at )  {  this . created at = created at;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\IssueDTO.java,set description,public string description )  {  this . description = description;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\IssueDTO.java,set due date,public date due date )  {  this . due date = due date;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\IssueDTO.java,set iid,public integer iid )  {  this . iid = iid;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\IssueDTO.java,set labels,public string[] labels )  {  this . labels = labels;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\IssueDTO.java,set milestone,public milestone d t o milestone )  {  this . milestone = milestone;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\IssueDTO.java,set project id,public integer project id )  {  this . project id = project id;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\IssueDTO.java,set state,public string state )  {  this . state = state;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\IssueDTO.java,set subscribed,public boolean subscribed )  {  this . subscribed = subscribed;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\IssueDTO.java,set title,public string title )  {  this . title = title;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\IssueDTO.java,set updated at,public date updated at )  {  this . updated at = updated at;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\IssueDTO.java,set web url,public string web url )  {  this . web url = web url;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\IssueDTO.java,to string,"override public  string   (  )  {  return "" issue d t o { ""  +  ""iid = ""  +  iid  +  ""  title = '"" +  title +  '\'' +  ' } ';  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,get archived,public boolean   (  )  {  return archived;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,get avatar url,public string   (  )  {  return avatar url;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,get builds enabled,public boolean   (  )  {  return builds enabled;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,get container registry enabled,public boolean   (  )  {  return container registry enabled;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,get created at,public date   (  )  {  return created at;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,get creator id,public integer   (  )  {  return creator id;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,get default branch,public string   (  )  {  return default branch;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,get description,public string   (  )  {  return description;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,get forks count,public integer   (  )  {  return forks count;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,get http url to repo,public string   (  )  {  return http url to repo;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,get issues enabled,public boolean   (  )  {  return issues enabled;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,get last activity at,public date   (  )  {  return last activity at;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,get merge requests enabled,public boolean   (  )  {  return merge requests enabled;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,get name,public string   (  )  {  return name;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,get name with namespace,public string   (  )  {  return name with namespace;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,get namespace,public namespace d t o   (  )  {  return namespace;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,get only allow merge if all discussions are resolved,public boolean   (  )  {  return only allow merge if all discussions are resolved;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,get only allow merge if build succeeds,public boolean   (  )  {  return only allow merge if build succeeds;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,get open issues count,public integer   (  )  {  return open issues count;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,get owner,public user d t o   (  )  {  return owner;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,get path,public string   (  )  {  return path;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,get path with namespace,public string   (  )  {  return path with namespace;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,get public builds,public boolean   (  )  {  return public builds;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,get public repo,public boolean   (  )  {  return public repo;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,get request access enabled,public boolean   (  )  {  return request access enabled;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,get runners token,public string   (  )  {  return runners token;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,get shared runners enabled,public boolean   (  )  {  return shared runners enabled;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,get shared with groups,public string[]   (  )  {  return shared with groups;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,get snippets enabled,public boolean   (  )  {  return snippets enabled;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,get ssh url to repo,public string   (  )  {  return ssh url to repo;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,get star count,public integer   (  )  {  return star count;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,get tag list,public string[]   (  )  {  return tag list;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,get visibility level,public integer   (  )  {  return visibility level;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,get web url,public string   (  )  {  return web url;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,get wiki enabled,public boolean   (  )  {  return wiki enabled;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,set archived,public boolean archived )  {  this . archived = archived;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,set avatar url,public string avatar url )  {  this . avatar url = avatar url;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,set builds enabled,public boolean builds enabled )  {  this . builds enabled = builds enabled;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,set container registry enabled,public boolean container registry enabled )  {  this . container registry enabled = container registry enabled;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,set created at,public date created at )  {  this . created at = created at;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,set creator id,public integer creator id )  {  this . creator id = creator id;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,set default branch,public string default branch )  {  this . default branch = default branch;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,set description,public string description )  {  this . description = description;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,set forks count,public integer forks count )  {  this . forks count = forks count;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,set http url to repo,public string http url to repo )  {  this . http url to repo = http url to repo;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,set issues enabled,public boolean issues enabled )  {  this . issues enabled = issues enabled;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,set last activity at,public date last activity at )  {  this . last activity at = last activity at;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,set merge requests enabled,public boolean merge requests enabled )  {  this . merge requests enabled = merge requests enabled;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,set name,public string name )  {  this . name = name;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,set name with namespace,public string name with namespace )  {  this . name with namespace = name with namespace;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,set namespace,public namespace d t o namespace )  {  this . namespace = namespace;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,set only allow merge if all discussions are resolved,public boolean only allow merge if all discussions are resolved )  {  this . only allow merge if all discussions are resolved = only allow merge if all discussions are resolved;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,set only allow merge if build succeeds,public boolean only allow merge if build succeeds )  {  this . only allow merge if build succeeds = only allow merge if build succeeds;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,set open issues count,public integer open issues count )  {  this . open issues count = open issues count;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,set owner,public user d t o owner )  {  this . owner = owner;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,set path,public string path )  {  this . path = path;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,set path with namespace,public string path with namespace )  {  this . path with namespace = path with namespace;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,set public builds,public boolean public builds )  {  this . public builds = public builds;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,set public repo,public boolean public repo )  {  this . public repo = public repo;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,set request access enabled,public boolean request access enabled )  {  this . request access enabled = request access enabled;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,set runners token,public string runners token )  {  this . runners token = runners token;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,set shared runners enabled,public boolean shared runners enabled )  {  this . shared runners enabled = shared runners enabled;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,set shared with groups,public string[] shared with groups )  {  this . shared with groups = shared with groups;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,set snippets enabled,public boolean snippets enabled )  {  this . snippets enabled = snippets enabled;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,set ssh url to repo,public string ssh url to repo )  {  this . ssh url to repo = ssh url to repo;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,set star count,public integer star count )  {  this . star count = star count;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,set tag list,public string[] tag list )  {  this . tag list = tag list;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,set visibility level,public integer visibility level )  {  this . visibility level = visibility level;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,set web url,public string web url )  {  this . web url = web url;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,set wiki enabled,public boolean wiki enabled )  {  this . wiki enabled = wiki enabled;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,to string,"override public  string   (  )  {  return "" project d t o { ""  +  ""path = '""  +  path  +  '\'' +  ""  name = '"" +  name +  '\'' +  ""  web url = '"" +  web url +  '\'' +  ' } ';  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\WebhookConfig.java,get content type,public string   (  )  {  return content type;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\WebhookConfig.java,get secret,public string   (  )  {  return secret;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\WebhookConfig.java,get url,public string   (  )  {  return url;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\WebhookConfig.java,set content type,public string content type )  {  this . content type = content type;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\WebhookConfig.java,set secret,public string secret )  {  this . secret = secret;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\WebhookConfig.java,set url,public string url )  {  this . url = url;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\UserDTO.java,get avatar url,public string   (  )  {  return avatar url;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\UserDTO.java,get name,public string   (  )  {  return name;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\UserDTO.java,get state,public string   (  )  {  return state;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\UserDTO.java,get username,public string   (  )  {  return username;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\UserDTO.java,get web url,public string   (  )  {  return web url;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\UserDTO.java,set avatar url,public string avatar url )  {  this . avatar url = avatar url;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\UserDTO.java,set name,public string name )  {  this . name = name;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\UserDTO.java,set state,public string state )  {  this . state = state;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\UserDTO.java,set username,public string username )  {  this . username = username;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\UserDTO.java,set web url,public string web url )  {  this . web url = web url;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\UserDTO.java,to string,"override public  string   (  )  {  return "" user d t o { ""  +  ""username = '""  +  username  +  '\'' +  ""  name = '"" +  name +  '\'' +  ' } ';  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\WebHookDTO.java,get active,public boolean   (  )  {  return active;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\WebHookDTO.java,get config,public webhook config   (  )  {  return config;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\WebHookDTO.java,get created at,public string   (  )  {  return created at;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\WebHookDTO.java,get events,public list <  string >    (  )  {  return events;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\WebHookDTO.java,get name,public string   (  )  {  return name;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\WebHookDTO.java,get ping url,public string   (  )  {  return ping url;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\WebHookDTO.java,get test url,public string   (  )  {  return test url;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\WebHookDTO.java,get updated at,public string   (  )  {  return updated at;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\WebHookDTO.java,get url,public string   (  )  {  return url;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\WebHookDTO.java,set active,public boolean active )  {  this . active = active;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\WebHookDTO.java,set config,public webhook config config )  {  this . config = config;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\WebHookDTO.java,set created at,public string created at )  {  this . created at = created at;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\WebHookDTO.java,set events,public list <  string >  events )  {  this . events = events;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\WebHookDTO.java,set name,public string name )  {  this . name = name;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\WebHookDTO.java,set ping url,public string ping url )  {  this . ping url = ping url;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\WebHookDTO.java,set test url,public string test url )  {  this . test url = test url;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\WebHookDTO.java,set updated at,public string updated at )  {  this . updated at = updated at;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\WebHookDTO.java,set url,public string url )  {  this . url = url;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\WebHookDTO.java,to string,"override public  string   (  )  {  return "" web hook d t o { ""  +  ""url = '""  +  url  +  '\'' +  ""  test url = '"" +  test url +  '\'' +  ""  ping url = '"" +  ping url +  '\'' +  ""  name = '"" +  name +  '\'' +  ""  created at = '"" +  created at +  '\'' +  ""  config = "" +  config +  ""  active = "" +  active +  ""  events = "" +  events +  "
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\test\java\io\fabric8\repo\git\Example.java,main,"public string[] args )  {  if  ( args . length  <  3 )   {   system . out . println ( "" usage: address user name password"" ) ; return;  }   string address = args[0];  string user name = args[1];  string password = args[2]; try  {   git repo client client = new  git repo client ( address user name password ) ;  list <  repository d t o >  repository d t os = client . list repositories (  ) ;  system . out . println ( "" got repositories: ""  +  to json ( repository d t os )  ) ;  }  catch  (   exception e )   {   system . out . println ( "" caught: ""  +  e ) ; e . print stack trace (  ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\test\java\io\fabric8\repo\git\GetFileFromGit.java,main,"public string[] args )  {  if  ( args . length  <  4 )   {   system . out . println ( "" usage: user name password repo file [branch]"" ) ; return;  }   string address = ""http: /  / ""  +   systems . get env var or system property ( "" g o g s _  s e r v i c e _  h o s t"" ""gogs . vagrant . f8"" ) ;  string user name = args[0];  string password = args[1];  string repo = args[2];  string path = args[3];  string branch = ""master""; if  ( args . length  >  4 )   {  branch = args[4];  }  try  {   system . out . println ( "" logging into git repo at ""  +  address  +  "" with user "" +  user name +  "" to find file: "" +  path ) ;  git repo client client = new  git repo client ( address user name password ) ;  input stream input = client . get raw file ( user name repo branch path ) ; if  ( input  =  =  null )   {   system . out . println ( "" no such file: ""  +  path  +  "" in branch "" +  branch +  "" for user: "" +  user name ) ;  }  else  {   string text =  i o helpers . read fully ( input ) ;  system . out . println ( "" file found ! "" ) ;  system . out . println (  ) ;  system . out . println ( text ) ;  system . out . println (  ) ;  }  path = "" does not exist . garbage"";  system . out . println ( "" now trying file that does not exist: ""  +  path ) ; input = client . get raw file ( user name repo branch path ) ; if  ( input  =  =  null )   {   system . out . println ( "" correctly found no file ! "" ) ;  }  else  {   system . out . println ( "" w h o a h found content: ""  +   i o helpers . read fully ( input )  ) ;  }   }  catch  (   exception e )   {   system . out . println ( "" caught: ""  +  e ) ; e . print stack trace (  ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\test\java\io\fabric8\repo\git\JsonTest.java,test create repository,"test public void   (  )  throws  exception  {   create repository d t o dto = new  create repository d t o (  ) ; dto . set name ( ""foo"" ) ; dto . set description ( ""some description"" ) ; dto . set team id ( 1234 ) ; dto . set has wiki ( true ) ; dto . set private repository ( true ) ; dto . set license template ( ""some"
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\test\java\io\fabric8\repo\gitlab\Example.java,main,"public string[] args )  {  if  ( args . length  <  3 )   {   system . out . println ( "" usage: address user name private token"" ) ; return;  }   string address = args[0];  string user name = args[1];  string private token = args[2]; try  {   gitlab client client = new  gitlab client ( address user name ) ; client . set private token ( private token ) ;  list <  group d t o >  groups = client . get groups (  ) ;  system . out . println ( "" found ""  +  groups . size (  )   +  "" group ( s ) "" ) ; for  (   group d t o group : groups )   {   system . out . println ( """"  +  group ) ;  }   list <  project d t o >  projects = client . get projects (  ) ;  system . out . println ( "" found ""  +  groups . size (  )   +  "" group ( s ) "" ) ; for  (   project d t o project : projects )   {   system . out . println ( """"  +  project ) ;  }  if  ( projects . size (  )   >  0 )   {   project d t o project = projects . get ( 0 ) ;  long id = project . get id (  ) ; if  ( id  !  =  null )   {   }   }   }  catch  (   exception e )   {   system . out . println ( "" caught: ""  +  e ) ; e . print stack trace (  ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-resteasy\src\test\java\io\fabric8\repo\git\resteasy\Example.java,create object mapper,public object mapper   (  )  {   object mapper mapper = new  object mapper (  ) ; mapper . enable (  serialization feature .  i n d e n t _  o u t p u t ) ; return mapper;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-resteasy\src\test\java\io\fabric8\repo\git\resteasy\Example.java,main,"public string[] args )  {  if  ( args . length  <  3 )   {   system . out . println ( "" usage: address user name password"" ) ; return;  }   string address = args[0];  string user name = args[1];  string password = args[2]; try  {   resteasy git repo client client = new  resteasy git repo client ( address user name password ) ;  list <  repository d t o >  repository d t os = client . list repositories (  ) ;  system . out . println ( "" got repositories: ""  +  to json ( repository d t os )  ) ;  }  catch  (   exception e )   {   system . out . println ( "" caught: ""  +  e ) ; e . print stack trace (  ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-resteasy\src\test\java\io\fabric8\repo\git\resteasy\Example.java,to json,public string   (  object dto )  throws  json processing exception  {   object mapper mapper = create object mapper (  ) ; return mapper . write value as string ( dto ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-resteasy\src\main\java\io\fabric8\repo\git\resteasy\ResteasyGitRepoClient.java,resteasy git repo client,public string address  string username  string password )  {  super ( address username password ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-resteasy\src\main\java\io\fabric8\repo\git\resteasy\ResteasyGitRepoClient.java,create web client,protected t >  t   (  class <  t >  client type )  {   string address = get address (  ) ;  resteasy provider factory provider factory =  resteasy provider factory . get instance (  ) ; provider factory . register (  resteasy jackson2 provider . class ) ; provider factory . register (  jackson2 jsonp interceptor . class ) ; provider factory . register (  string text star . class ) ; provider factory . register (  default text plain . class ) ; provider factory . register (  file provider . class ) ; provider factory . register (  input stream provider . class ) ; provider factory . register ( new  authenticator (  )  ) ; provider factory . register ( client type ) ;  resteasy client builder builder = new  resteasy client builder (  ) ; builder . provider factory ( provider factory ) ; builder . connection pool size ( 3 ) ;  client client = builder . build (  ) ;  resteasy web target target =  (  resteasy web target ) client . target ( address ) ; return target . proxy ( client type ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-resteasy\src\main\java\io\fabric8\repo\git\resteasy\ResteasyGitRepoClient.java,create with context class loader,public resteasy git repo client   (  string address  string username  string password )  {   thread . current thread (  )  . set context class loader (  resteasy git repo client . class . get class loader (  )  ) ; return new  resteasy git repo client ( address username password ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-resteasy\src\main\java\io\fabric8\repo\git\resteasy\ResteasyGitRepoClient.java,filter,"public client request context request context )  throws  i o exception  {   multivalued map <  string  object >  headers = request context . get headers (  ) ; final  string basic authentication = get basic authentication (  ) ; headers . add ( "" authorization"" basic authentication ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-resteasy\src\main\java\io\fabric8\repo\git\resteasy\ResteasyGitRepoClient.java,get basic authentication,"private string   (  )  {   string token = get username (  )   +  "":""  +  get password (  ) ; try  {  return "" basic ""  +   datatype converter . print base64 binary ( token . get bytes ( "" u t f - 8"" )  ) ;  }  catch  (   unsupported encoding exception ex )   {  throw new  illegal state exception ( "" cannot encode with  u t f - 8"" ex ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\hubot-api\src\main\java\io\fabric8\hubot\NoopHubotRestApi.java,notify,"override public  string   (  string room @ form param ( ""message"" )   string message )  {  return null;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\hubot-api\src\main\java\io\fabric8\hubot\HubotNotifier.java,hubot notifier,public string hubot url  string username  string password  string room expression )  {  this . hubot url = hubot url; this . username = username; this . password = password; this . room expression = room expression;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\hubot-api\src\main\java\io\fabric8\hubot\HubotNotifier.java,create web client,protected t >  t   (  class <  t >  client type  string hubot url )  {   list <  object >  providers = create providers (  ) ;  web client web client =  web client . create ( hubot url providers ) ; disable ssl checks ( web client ) ; configure user and password ( web client username password ) ; return  j a x r s client factory . from client ( web client client type ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\hubot-api\src\main\java\io\fabric8\hubot\HubotNotifier.java,get hubot rest api,protected hubot rest api   (  )  {  if  ( api  =  =  null )   {   string url = get hubot url (  ) ; if  (  strings . is not blank ( url )  )   {  api = create web client (  hubot rest api . class url ) ;  }  else  {  api = new  noop hubot rest api (  ) ;  }   }  return api;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\hubot-api\src\main\java\io\fabric8\hubot\HubotNotifier.java,get hubot url,"public string   (  )  {  if  (  ! initalised )   {  initalised = true; if  ( hubot url  =  =  null && hubot url holder  !  =  null )   {  hubot url = hubot url holder . get (  ) ;  }  if  (  strings . is not blank ( hubot url )  )   {   l o g . info ( "" starting  hubot notifier using address: ""  +  hubot url ) ;  }  else  {   l o g . warn ( "" no kubernetes service found for ""  +   h u b o t _  s e r v i c e _  n a m e  +  "" so chat messages just going to logs instead"" ) ;  }   }  return hubot url;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\hubot-api\src\main\java\io\fabric8\hubot\HubotNotifier.java,notify build,"public string namespace  string build config  string message )  {   string room = room expression . replace ( ""$ { namespace } "" namespace )  . replace ( ""$ { build config } "" build config ) ; notify room ( room message ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\hubot-api\src\main\java\io\fabric8\hubot\HubotNotifier.java,notify room,"public string room  string message )  {  log messages . notify ( room message ) ; try  {  get hubot rest api (  )  . notify ( room message ) ;  }  catch  (   throwable e )   {   l o g . error ( "" failed to notify hubot room: ""  +  room  +  "" with message: "" +  message +  "" .   reason: "" +  e ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\hubot-api\src\main\java\io\fabric8\hubot\LoggingHubotRestApi.java,notify,"override public  string   (  string room @ form param ( ""message"" )   string message )  {   string category = ""hubot . ""  +  room;  logger logger =  logger factory . get logger ( category ) ; logger . info ( message ) ; return null;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\hubot-api\src\main\java\io\fabric8\hubot\HubotRestApi.java,notify,"p o s t @ path ( "" / hubot /   /  { room } "" )  @ consumes ( ""application / x - www - form - urlencoded"" )   string notify ( @ path param ( ""room"" )   string room @ form param ( ""message"" )   string message ) ; "
C:\Users\User\Desktop\Thesis\fabric8\components\hubot-api\src\test\java\io\fabric8\hubot\MockConfigurer.java,configure,"public m o c k . expect (  )  . get (  )  . with path ( "" / api / v1 / namespaces / default / services / hubot"" )  . and return ( 200 new  service builder (  )  . with new metadata (  )  . with name ( ""hubot"" )  . end metadata (  )  . with new spec (  )  . add new port (  )  . with protocol ( "" t c p"" )  . with port ( 80 )  . with new target port ( 8080 )  . end port (  )  . with cluster i p ( ""172 . 30 . 17 . 2"" )  . end spec (  )  . build (  )  )  . always (  ) ;  string master url =  m o c k . get server (  )  . url ( "" / "" )  . to string (  ) ;  system . set property (  config .  k u b e r n e t e s _  m a s t e r _  s y s t e m _  p r o p e r t y master url ) ;  system . set property (  config .  k u b e r n e t e s _  n a m e s p a c e _  s y s t e m _  p r o p e r t y ""cdi"" ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\hubot-api\src\test\java\io\fabric8\hubot\HubotTest.java,create deployment,"deployment public static  web archive   (  )  {  return  deltaspike test base . create deployment (  )  . add classes (  deltaspike test base . get delta spike holders (  )  )  . add classes (  hubot rest api . class  hubot notifier . class  default config property producer . class )  . add as web inf resource ( "" m e t a -  i"
C:\Users\User\Desktop\Thesis\fabric8\components\hubot-api\src\test\java\io\fabric8\hubot\HubotTest.java,set up,before class public static void   (  )  {   mock configurer . configure (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\hubot-api\src\test\java\io\fabric8\hubot\HubotTest.java,test service injection,test public void   (  )  {   assert . assert not null ( notifier ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\hubot-api\src\test\java\io\fabric8\hubot\Main.java,main,"public string[] args )  {  if  ( args . length  <  2 )   {   system . out . println ( "" usage: room messages"" ) ; return;  }   string room = args[0];  string builder buffer = new  string builder (  ) ; for  ( int i = 1; i  <  args . length; i +  +  )   {   string arg = args[i]; if  ( i  >  1 )   {  buffer . append ( "" "" ) ;  }  buffer . append ( arg ) ;  }   string message = buffer . to string (  ) ; try  {   string hubot url =  systems . get service host and port (  hubot notifier .  h u b o t _  s e r v i c e _  n a m e ""hubot - webhook . fabric8 . local"" ""80"" ) ;  string username =  systems . get env var or system property ( "" h u b o t _  u s e r n a m e"" """" ) ;  string password =  systems . get env var or system property ( "" h u b o t _  p a s s w o r d"" """" ) ;  string room expression =  systems . get env var or system property ( "" h u b o t _  b u i l d _  r o o m""  hubot notifier .  d e f a u l t _  r o o m _  e x p r e s s i o n ) ;  system . out . println ( "" logging into hubot web hook with user ""  +  username  +  "" at  u r l: "" +  hubot url ) ;  hubot notifier notifier = new  hubot notifier ( hubot url username password room expression ) ; notifier . notify room ( room message ) ;  }  catch  (   exception e )   {   system . out . println ( "" caught: ""  +  e ) ; e . print stack trace (  ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\jaxrs-utils\src\main\java\io\fabric8\utils\jaxrs\JAXRSClients.java,handle by returning null,public t >  t   (  callable <  t >  callable )  {  try  {  return callable . call (  ) ;  }  catch  (   web application exception e )   {  if  ( e . get response (  )  . get status (  )   =  =  404 )   {  return null;  }  else  {  throw e;  }   }  catch  (   exception e )   {  throw new  web application exception ( e ) ;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\jaxrs-utils\src\main\java\io\fabric8\utils\jaxrs\AuthorizationHeaderFilter.java,filter,"override public void   (  client request context request context )  throws  i o exception  {  if  (  strings . is not blank ( authorization header )  )   {   multivalued map <  string  object >  headers = request context . get headers (  ) ; headers . put ( "" authorization""  collections .  <  object > singleton li"
C:\Users\User\Desktop\Thesis\fabric8\components\jaxrs-utils\src\main\java\io\fabric8\utils\jaxrs\AuthorizationHeaderFilter.java,get authorization header,public string   (  )  {  return authorization header;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\jaxrs-utils\src\main\java\io\fabric8\utils\jaxrs\AuthorizationHeaderFilter.java,set authorization header,public string authorization header )  {  this . authorization header = authorization header;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\jaxrs-utils\src\main\java\io\fabric8\utils\jaxrs\JsonHelper.java,create object mapper,public object mapper   (  )  {   object mapper mapper = new  object mapper (  ) ; mapper . enable (  serialization feature .  i n d e n t _  o u t p u t ) ; return mapper;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\jaxrs-utils\src\main\java\io\fabric8\utils\jaxrs\JsonHelper.java,to json,public string   (  object dto )  throws  json processing exception  {   object mapper mapper = create object mapper (  ) ; return mapper . write value as string ( dto ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\jenkins-assertions\src\main\java\io\fabric8\testing\jenkins\JenkinsAsserts.java,assert create jenkins job,"public jenkins server jenkins server  string xml  string job name )  {  try  {  jenkins server . create job ( job name xml ) ;  }  catch  (   i o exception e )   {  fail ( "" failed to create  jenkins job ""  +  job name  +  "" for  x m l `"" +  xml +  ""` .  "" +  e e ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\jenkins-assertions\src\main\java\io\fabric8\testing\jenkins\JenkinsAsserts.java,assert job exists,"public job with details   (  jenkins server jenkins  string job name )  {   job with details job = try find job ( jenkins job name ) ; if  ( job  !  =  null )   {  return job;  }  fail ( "" no job found called `""  +  job name  +  ""` for jenkins at "" +  jenkins ) ; return job;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\jenkins-assertions\src\main\java\io\fabric8\testing\jenkins\JenkinsAsserts.java,assert job has build,"public build   (  jenkins server jenkins  string job name )  {   job with details job = assert job exists ( jenkins job name ) ;  build last build = job . get last build (  ) ; assert not null ( "" no last build for job `""  +  job name  +  ""`"" last build ) ; return last build;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\jenkins-assertions\src\main\java\io\fabric8\testing\jenkins\JenkinsAsserts.java,assert job last build is successful,"public millis final  jenkins server jenkins final  string job name )  throws  exception  {   asserts . assert wait for ( time millis new  block (  )  {  @ override public void invoke (  )  throws  exception  {   job with details job = assert job exists ( jenkins job name ) ;  build last build = job . get last build (  ) ; assert not null ( "" no last build for job `""  +  job name  +  ""`"" last build ) ;  system . out . println ( "" last build of `""  +  job name  +  ""` at "" +  last build . get url (  )  ) ;  build last successful build = job . get last successful build (  ) ; assert not null ( "" no last successful build for job `""  +  job name  +  ""` at: "" +  last build . get url (  )  last successful build ) ; assert equals ( "" last successful build number was not the last build number: ""  +  last build . get url (  )  last build . get number (  )  last successful build . get number (  )  ) ;  system . out . println ( "" successful build of `""  +  job name  +  ""` at "" +  last successful build . get url (  )  ) ;  }   }   ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\jenkins-assertions\src\main\java\io\fabric8\testing\jenkins\JenkinsAsserts.java,assert job path exists,"public job with details   (  jenkins server jenkins  string .  .  .  job path )  throws  i o exception  {   job with details job = find job path ( jenkins job path ) ; assert not null ( "" could not find  jenkins  job: ""  +  full job path ( job path )  job ) ;  l o g . info ( "" found job ""  +  job . get url (  )  ) ; return job;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\jenkins-assertions\src\main\java\io\fabric8\testing\jenkins\JenkinsAsserts.java,assert job xml,"public string   (  jenkins server jenkins server  string job name )  {  try  {  return jenkins server . get job xml ( job name ) ;  }  catch  (   i o exception e )   {  fail ( "" failed to find  x m l for  jenkins job ""  +  job name  +  "" .  "" +  e e ) ; return null;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\jenkins-assertions\src\main\java\io\fabric8\testing\jenkins\JenkinsAsserts.java,assert job xml document,"public document   (  jenkins server jenkins  string job name )  {   jenkins asserts . assert job exists ( jenkins job name ) ;  string xml; try  {  xml = jenkins . get job xml ( job name ) ;  }  catch  (   i o exception e )   {  throw new  assertion error ( "" failed to load job  x m l for ""  +  job name  +  "" due to "" +  e e ) ;  }  try  {  return  xml utils . parse doc ( xml ) ;  }  catch  (   exception e )   {  throw new  assertion error ( "" failed to load parse  x m l for ""  +  job name  +  "" due to "" +  e e ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\jenkins-assertions\src\main\java\io\fabric8\testing\jenkins\JenkinsAsserts.java,assert trigger job path,"public queue reference   (  jenkins server jenkins  string .  .  .  job path )  throws  i o exception  {   job with details job with details = assert job path exists ( jenkins job path ) ;  queue reference build = job with details . build ( true ) ; assert not null ( "" no build reference for job ""  +  full job path ( job path )  build  !  =  null ) ; return build;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\jenkins-assertions\src\main\java\io\fabric8\testing\jenkins\JenkinsAsserts.java,assert wait for job path exists,"public job with details   ( final  jenkins server jenkins long time millis  string .  .  .  job path )  throws  exception  {  final  atomic reference <  job with details >  holder = new  atomic reference <  >  ( null ) ;  l o g . info ( "" waiting for  jenkins job ""  +  full job path ( job path )  ) ;  asserts . assert wait for ( time millis new  block (  )  {  @ override public void invoke (  )  throws  exception  {  holder . set ( assert job path exists ( jenkins job path )  ) ;  }   }   ) ; return holder . get (  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\jenkins-assertions\src\main\java\io\fabric8\testing\jenkins\JenkinsAsserts.java,assert wait for job path not exist,"public jenkins server jenkins long time millis  string .  .  .  job path )  throws  exception  {  final  string full path = full job path ( job path ) ;  l o g . info ( "" waiting for  jenkins job to no longer exist ""  +  full path ) ;  asserts . assert wait for ( time millis new  block (  )  {  @ override public void invoke (  )  throws  exception  {  assert true ( "" jenkins job ""  +  full path  +  "" should not exist"" find job path ( jenkins job path )   =  =  null ) ;  }   }   ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\jenkins-assertions\src\main\java\io\fabric8\testing\jenkins\JenkinsAsserts.java,assert wait for no running builds,"public jenkins server jenkins long time millis )  throws  exception  {   l o g . info ( "" waiting for no running  jenkins jobs"" ) ;  asserts . assert wait for ( time millis new  block (  )  {  @ override public void invoke (  )  throws  exception  {   list <  queue item >  items = jenkins . get queue (  )  . get items (  ) ; assert true ( "" waiting for build queue to be empty but has ""  +  items . size (  )  items . is empty (  )  ) ;  }   }   ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\jenkins-assertions\src\main\java\io\fabric8\testing\jenkins\JenkinsAsserts.java,create jenkins pipeline job xml,"public string   (  string jenkinsfile )  {  return "" <  ? xml version = \""1 . 0\"" encoding = \"" u t f - 8\"" ?  >  < org . jenkinsci . plugins . workflow . job .  workflow job plugin = \""workflow - job@1 . 15\"" > \n""  +  ""  < keep dependencies > false <  / keep dependencies > \n""  +  ""  < properties /  > \n"" +  ""  < definition class = \""org . jenkinsci . plugins . workflow . cps .  cps flow definition\"" plugin = \""workflow - cps@1 . 15\"" > \n"" +  ""  < script > ""  +  jenkinsfile  +  "" <  / script > \n"" +  ""  < sandbox > false <  / sandbox > \n"" +  ""  <  / definition > \n"" +  ""  < triggers /  > \n"" +  "" <  / org . jenkinsci . plugins . workflow . job .  workflow job > "";  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\jenkins-assertions\src\main\java\io\fabric8\testing\jenkins\JenkinsAsserts.java,create jenkins server,public jenkins server   (  string url )  throws  u r i syntax exception  {  return new  jenkins server ( new  u r i ( url )  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\jenkins-assertions\src\main\java\io\fabric8\testing\jenkins\JenkinsAsserts.java,delete all current jobs,"public jenkins server jenkins )  throws  i o exception  {  int number of attempts = 2; for  ( int i = 1; i  <  number of attempts; i +  +  )   {  if  ( i  >  1 )   {  try  {   thread . sleep ( 2000 ) ;  }  catch  (   interrupted exception e )   {   }   }   map <  string  job >  jobs = jenkins . get jobs (  ) ;  set <  map .  entry <  string  job >  >  entries = jobs . entry set (  ) ; for  (   map .  entry <  string  job >  entry : entries )   {   string job name = entry . get key (  ) ;  job job = entry . get value (  ) ;  l o g . info ( "" deleting job ""  +  job name ) ; try  {  jenkins . delete job ( job name true ) ;  }  catch  (   i o exception e )   {   l o g . warn ( "" failed to delete job: ""  +  job name  +  "" .  "" +  e e ) ;  }   }  if  ( number of jobs ( jenkins )   =  =  0 )   {  return;  }   }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\jenkins-assertions\src\main\java\io\fabric8\testing\jenkins\JenkinsAsserts.java,display jobs,"public jenkins server jenkins  map <  string  job >  jobs  string indent )  throws  i o exception  {   set <  map .  entry <  string  job >  >  entries = jobs . entry set (  ) ; for  (   map .  entry <  string  job >  entry : entries )   {   string job name = entry . get key (  ) ;  job job = entry . get value (  ) ;  string suffix = """";  job with details details = job . details (  ) ; if  ( details  !  =  null )   {   build last build = details . get last build (  ) ; if  ( last build  !  =  null )   {   build with details build details = last build . details (  ) ; if  ( build details  !  =  null )   {   string build id = build details . get id (  ) ; if  ( build id  !  =  null )   {  suffix = "": #""  +  build id;  }   }   }   }   system . out . println ( indent  +  job name  +  suffix ) ;  optional <  folder job >  optional = jenkins . get folder job ( job ) ; if  ( optional . is present (  )  )   {   folder job folder job = optional . get (  ) ;  map <  string  job >  children = folder job . get jobs (  ) ; display jobs ( jenkins children indent  +   i n d e n t ) ;  }   }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\jenkins-assertions\src\main\java\io\fabric8\testing\jenkins\JenkinsAsserts.java,find job path,public job with details   (  jenkins server jenkins  string .  .  .  job path )  throws  i o exception  {   folder job folder = null; for  ( int i = 0  size = job path . length; i  <  size; i +  +  )   {   string path = job path[i]; if  ( size  =  =  1 && i  =  =  0 )   {  return jenkins . get job ( path ) ;  }  if  ( folder  =  =  null )   {   job with details job details = jenkins . get job ( path ) ; if  ( job details  =  =  null )   {  return null;  }   job job = new  job ( job details . get name (  )  job details . get url (  )  ) ;  optional <  folder job >  optional = jenkins . get folder job ( job ) ; if  (  ! optional . is present (  )  )   {  return null;  }  folder = optional . get (  ) ; continue;  }   job job = folder . get job ( path ) ; if  ( job  =  =  null )   {  return null;  }  if  ( i  =  =  size  -  1 )   {  return job . details (  ) ;  }  else  {   optional <  folder job >  optional = jenkins . get folder job ( job ) ; if  (  ! optional . is present (  )  )   {  return null;  }  folder = optional . get (  ) ;  }   }  return null;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\jenkins-assertions\src\main\java\io\fabric8\testing\jenkins\JenkinsAsserts.java,full job path,"public string   (  string[] job path )  {  return  strings . join ( "" / "" job path ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\jenkins-assertions\src\main\java\io\fabric8\testing\jenkins\JenkinsAsserts.java,invoke,"override public void   (  )  throws  exception  {  assert true ( "" jenkins job ""  +  full path  +  "" should not exist"" find job path ( jenkins job path )   =  =  null ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\jenkins-assertions\src\main\java\io\fabric8\testing\jenkins\JenkinsAsserts.java,number of jobs,public jenkins server jenkins )  throws  i o exception  {  return jenkins . get jobs (  )  . size (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\jenkins-assertions\src\main\java\io\fabric8\testing\jenkins\JenkinsAsserts.java,try find job,"protected job with details   (  jenkins server jenkins  string job name )  {  for  ( int i = 0; i  <  15; i +  +  )   {  try  {  return jenkins . get job ( job name ) ;  }  catch  (   i o exception e )   {   l o g . info ( "" caught: ""  +  e e ) ; try  {   thread . sleep ( 2000 ) ;  }  catch  (   interrupted exception e1 )   {   }   }   }  return null;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\jenkins-assertions\src\main\java\io\fabric8\testing\jenkins\JenkinsTestMain.java,log error,"public string message  throwable e )  {   system . out . println ( "" e r r o r: ""  +  message  +  e ) ; e . print stack trace (  ) ;  throwable cause = e . get cause (  ) ; if  ( cause  !  =  null && cause  !  =  e )   {  log error ( "" caused by: "" cause ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\jenkins-assertions\src\main\java\io\fabric8\testing\jenkins\JenkinsTestMain.java,main,"public string[] args )  {  if  ( args . length  =  =  0 )   {   system . out . println ( "" usage: [jenkins server url] [job name]"" ) ; return;  }   string jenkins url = ""http: /  / jenkins . vagrant . f8 / "";  string job = null; if  ( args . length  >  0 )   {  jenkins url = args[0];  }  if  ( args . length  >  1 )   {  job = args[1];  }  try  {   jenkins server jenkins =  jenkins asserts . create jenkins server ( jenkins url ) ;  map <  string  job >  jobs = jenkins . get jobs (  ) ;  set <  map .  entry <  string  job >  >  entries = jobs . entry set (  ) ; for  (   map .  entry <  string  job >  entry : entries )   {   system . out . println ( "" job ""  +  entry . get key (  )   +  ""  =  "" +  entry . get value (  )  ) ;  }  if  ( job  !  =  null )   {   jenkins asserts . assert job last build is successful ( jenkins job ) ;  }   }  catch  (   exception e )   {  log error ( e . get message (  )  e ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\Assertions.java,as instance of,public t >  t   (  object value  class <  t >  clazz )  {  assert that ( value )  . is instance of ( clazz ) ; return clazz . cast ( value ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\Assertions.java,assert big decimal,public big decimal assert   (  object value )  {   big decimal typed value = as instance of ( value  big decimal . class ) ; return  (  big decimal assert ) assert that ( typed value ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\Assertions.java,assert boolean,public boolean assert   (  object value )  {   boolean typed value = as instance of ( value  boolean . class ) ; return  (  boolean assert ) assert that ( typed value ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\Assertions.java,assert byte,public byte assert   (  object value )  {   byte typed value = as instance of ( value  byte . class ) ; return  (  byte assert ) assert that ( typed value ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\Assertions.java,assert character,public character assert   (  object value )  {   character typed value = as instance of ( value  character . class ) ; return  (  character assert ) assert that ( typed value ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\Assertions.java,assert date,public date assert   (  object value )  {   date typed value = as instance of ( value  date . class ) ; return  (  date assert ) assert that ( typed value ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\Assertions.java,assert double,public double assert   (  object value )  {   double typed value = as instance of ( value  double . class ) ; return  (  double assert ) assert that ( typed value ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\Assertions.java,assert float,public float assert   (  object value )  {   float typed value = as instance of ( value  float . class ) ; return  (  float assert ) assert that ( typed value ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\Assertions.java,assert integer,public integer assert   (  object value )  {   integer typed value = as instance of ( value  integer . class ) ; return  (  integer assert ) assert that ( typed value ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\Assertions.java,assert j s o n array,public j s o n array assert   (  object value )  {   j s o n array typed value = as instance of ( value  j s o n array . class ) ; return new  j s o n array assert ( typed value ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\Assertions.java,assert j s o n object,public j s o n object assert   (  object value )  {   j s o n object typed value = as instance of ( value  j s o n object . class ) ; return new  j s o n object assert ( typed value ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\Assertions.java,assert list,public list assert   (  object value )  {   list typed value = as instance of ( value  list . class ) ; return  (  list assert ) assert that ( typed value ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\Assertions.java,assert long,public long assert   (  object value )  {   long typed value = as instance of ( value  long . class ) ; return  (  long assert ) assert that ( typed value ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\Assertions.java,assert map,public map assert   (  object value )  {   map typed value = as instance of ( value  map . class ) ; return  (  map assert ) assert that ( typed value ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\Assertions.java,assert short,public short assert   (  object value )  {   short typed value = as instance of ( value  short . class ) ; return  (  short assert ) assert that ( typed value ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\Assertions.java,assert string,public string assert   (  object value )  {   string typed value = as instance of ( value  string . class ) ; return  (  string assert ) assert that ( typed value ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\Assertions.java,assert that,public jolokia assert   (  j4p client client )  {  return new  jolokia assert ( client ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\support\JolokiaHelpers.java,as number,protected number   (  object value )  {  if  ( value instanceof  number )   {  return  (  number ) value;  }  else  {  return null;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\support\JolokiaHelpers.java,convert jolokia to java type,public object   (  class <  ?  >  clazz  object value )  throws  i o exception  {  if  ( clazz . is array (  )  )   {  if  ( value instanceof  j s o n array )   {   j s o n array json array =  (  j s o n array ) value;  object[] java array =  (  object[] )  array . new instance ( clazz . get component type (  )  json array . size (  )  ) ; int idx = 0; for  (   object element : json array )   {   array . set ( java array idx +  +  convert jolokia to java type ( clazz . get component type (  )  element )  ) ;  }  return java array;  }  else  {  return null;  }   }  else if  (  string . class . equals ( clazz )  )   {  return  ( value  !  =  null )   ?  value . to string (  )  : null;  }  else if  ( clazz . equals (  byte . class )  || clazz . equals ( byte . class )  )   {   number number = as number ( value ) ; return number  !  =  null  ?  number . byte value (  )  : null;  }  else if  ( clazz . equals (  short . class )  || clazz . equals ( short . class )  )   {   number number = as number ( value ) ; return number  !  =  null  ?  number . short value (  )  : null;  }  else if  ( clazz . equals (  integer . class )  || clazz . equals ( int . class )  )   {   number number = as number ( value ) ; return number  !  =  null  ?  number . int value (  )  : null;  }  else if  ( clazz . equals (  long . class )  || clazz . equals ( long . class )  )   {   number number = as number ( value ) ; return number  !  =  null  ?  number . long value (  )  : null;  }  else if  ( clazz . equals (  float . class )  || clazz . equals ( float . class )  )   {   number number = as number ( value ) ; return number  !  =  null  ?  number . float value (  )  : null;  }  else if  ( clazz . equals (  double . class )  || clazz . equals ( double . class )  )   {   number number = as number ( value ) ; return number  !  =  null  ?  number . double value (  )  : null;  }  else if  ( value instanceof  j s o n object )   {   j s o n object json object =  (  j s o n object ) value; if  (  !  j s o n object . class . is assignable from ( clazz )  )   {   string json = json object . to j s o n string (  ) ; return get object mapper (  )  . reader for ( clazz )  . read value ( json ) ;  }   }  return value;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\support\JolokiaHelpers.java,get object mapper,public object mapper   (  )  {  return object mapper;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\support\JolokiaHelpers.java,set object mapper,public object mapper object mapper )  {   jolokia helpers . object mapper = object mapper;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JSONArrayAssert.java,j s o n array assert,public j s o n array actual )  {  super ( actual ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JSONArrayAssert.java,assert big decimal,public big decimal assert   ( int index )  {   object value = value ( index ) ; return  assertions . assert big decimal ( value ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JSONArrayAssert.java,assert boolean,public boolean assert   ( int index )  {   object value = value ( index ) ; return  assertions . assert boolean ( value ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JSONArrayAssert.java,assert byte,public byte assert   ( int index )  {   object value = value ( index ) ; return  assertions . assert byte ( value ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JSONArrayAssert.java,assert date,public date assert   ( int index )  {   object value = value ( index ) ; return  assertions . assert date ( value ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JSONArrayAssert.java,assert double,public double assert   ( int index )  {   object value = value ( index ) ; return  assertions . assert double ( value ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JSONArrayAssert.java,assert float,public float assert   ( int index )  {   object value = value ( index ) ; return  assertions . assert float ( value ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JSONArrayAssert.java,assert integer,public integer assert   ( int index )  {   object value = value ( index ) ; return  assertions . assert integer ( value ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JSONArrayAssert.java,assert j s o n array,public j s o n array assert   ( int index )  {   object value = value ( index ) ; return  assertions . assert j s o n array ( value ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JSONArrayAssert.java,assert j s o n object,public j s o n object assert   ( int index )  {   object value = value ( index ) ; return  assertions . assert j s o n object ( value ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JSONArrayAssert.java,assert list,public list assert   ( int index )  {   object value = value ( index ) ; return  assertions . assert list ( value ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JSONArrayAssert.java,assert long,public long assert   ( int index )  {   object value = value ( index ) ; return  assertions . assert long ( value ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JSONArrayAssert.java,assert map,public map assert   ( int index )  {   object value = value ( index ) ; return  assertions . assert map ( value ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JSONArrayAssert.java,assert object,public object assert   ( int index )  {   object value = value ( index ) ; return  (  object assert ) assert that ( value ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JSONArrayAssert.java,assert short,public short assert   ( int index )  {   object value = value ( index ) ; return  assertions . assert short ( value ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JSONArrayAssert.java,assert size,"public integer assert   (  )  {  return  (  integer assert ) assert that ( get (  )  . size (  )  )  . as ( ""size"" ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JSONArrayAssert.java,assert string,public string assert   ( int index )  {   object value = value ( index ) ; return  assertions . assert string ( value ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JSONArrayAssert.java,get,public j s o n array   (  )  {  return  (  j s o n array ) actual;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JSONArrayAssert.java,value,"public object   ( int index )  {   j s o n array array = get (  ) ; assert that ( array . size (  )  )  . as ( ""size of array"" )  . is greater than ( index ) ; return array . get ( index ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JSONObjectAssert.java,j s o n object assert,public j s o n object actual )  {  super ( actual ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JSONObjectAssert.java,assert big decimal,public big decimal assert   (  string key )  {   object value = value ( key ) ; return  assertions . assert big decimal ( value ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JSONObjectAssert.java,assert boolean,public boolean assert   (  string key )  {   object value = value ( key ) ; return  assertions . assert boolean ( value ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JSONObjectAssert.java,assert byte,public byte assert   (  string key )  {   object value = value ( key ) ; return  assertions . assert byte ( value ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JSONObjectAssert.java,assert character,public character assert   (  string key )  {   object value = value ( key ) ; return  assertions . assert character ( value ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JSONObjectAssert.java,assert date,public date assert   (  string key )  {   object value = value ( key ) ; return  assertions . assert date ( value ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JSONObjectAssert.java,assert double,public double assert   (  string key )  {   object value = value ( key ) ; return  assertions . assert double ( value ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JSONObjectAssert.java,assert float,public float assert   (  string key )  {   object value = value ( key ) ; return  assertions . assert float ( value ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JSONObjectAssert.java,assert integer,public integer assert   (  string key )  {   object value = value ( key ) ; return  assertions . assert integer ( value ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JSONObjectAssert.java,assert j s o n array,public j s o n array assert   (  string key )  {   object value = value ( key ) ; return  assertions . assert j s o n array ( value ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JSONObjectAssert.java,assert j s o n object,public j s o n object assert   (  string key )  {   object value = value ( key ) ; return  assertions . assert j s o n object ( value ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JSONObjectAssert.java,assert list,public list assert   (  string key )  {   object value = value ( key ) ; return  assertions . assert list ( value ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JSONObjectAssert.java,assert long,public long assert   (  string key )  {   object value = value ( key ) ; return  assertions . assert long ( value ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JSONObjectAssert.java,assert map,public map assert   (  string key )  {   object value = value ( key ) ; return  assertions . assert map ( value ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JSONObjectAssert.java,assert object,public object assert   (  string key )  {   object value = value ( key ) ; return  (  object assert ) assert that ( value ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JSONObjectAssert.java,assert short,public short assert   (  string key )  {   object value = value ( key ) ; return  assertions . assert short ( value ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JSONObjectAssert.java,assert size,"public integer assert   (  )  {  return  (  integer assert ) assert that ( get (  )  . size (  )  )  . as ( ""size"" ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JSONObjectAssert.java,assert string,public string assert   (  string key )  {   object value = value ( key ) ; return  assertions . assert string ( value ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JSONObjectAssert.java,get,public j s o n object   (  )  {  return actual;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JSONObjectAssert.java,value,public object   (  string key )  {   j s o n object value = get (  ) ; assert that ( value . size (  )  )  . is greater than ( 0 ) ; return value . get ( key ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JolokiaAssert.java,jolokia assert,public j4p client client )  {  super ( client  jolokia assert . class ) ; this . client = client;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JolokiaAssert.java,attribute,public object assert <  ?  >    (  string mbean  string attribute )  throws  j4p exception   malformed object name exception  {   object value = attribute value ( mbean attribute ) ; return  (  object assert <  ?  >  ) assert that ( value ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JolokiaAssert.java,attribute value,public object   (  string mbean  string attribute )  throws  malformed object name exception   j4p exception  {   object name object name = new  object name ( mbean ) ;  j4p response <  j4p read request >  results = client . execute ( new  j4p read request ( object name attribute )  ) ; return results . get value (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JolokiaAssert.java,big decimal attribute,public big decimal assert   (  string mbean  string attribute )  throws  malformed object name exception   j4p exception  {   object value = attribute value ( mbean attribute ) ; return  assertions . assert big decimal ( value ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JolokiaAssert.java,big decimal operation,public big decimal assert   (  string mbean  string operation  object .  .  .  arguments )  throws  malformed object name exception   j4p exception  {   object value = operation result ( mbean operation arguments ) ; return  assertions . assert big decimal ( value ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JolokiaAssert.java,boolean attribute,public boolean assert   (  string mbean  string attribute )  throws  malformed object name exception   j4p exception  {   object value = attribute value ( mbean attribute ) ; return  assertions . assert boolean ( value ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JolokiaAssert.java,boolean operation,public boolean assert   (  string mbean  string operation  object .  .  .  arguments )  throws  malformed object name exception   j4p exception  {   object value = operation result ( mbean operation arguments ) ; return  assertions . assert boolean ( value ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JolokiaAssert.java,byte attribute,public byte assert   (  string mbean  string attribute )  throws  malformed object name exception   j4p exception  {   object value = attribute value ( mbean attribute ) ; return  assertions . assert byte ( value ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JolokiaAssert.java,byte operation,public byte assert   (  string mbean  string operation  object .  .  .  arguments )  throws  malformed object name exception   j4p exception  {   object value = operation result ( mbean operation arguments ) ; return  assertions . assert byte ( value ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JolokiaAssert.java,character attribute,public character assert   (  string mbean  string attribute )  throws  malformed object name exception   j4p exception  {   object value = attribute value ( mbean attribute ) ; return  assertions . assert character ( value ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JolokiaAssert.java,character operation,public character assert   (  string mbean  string operation  object .  .  .  arguments )  throws  malformed object name exception   j4p exception  {   object value = operation result ( mbean operation arguments ) ; return  assertions . assert character ( value ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JolokiaAssert.java,date attribute,public date assert   (  string mbean  string attribute )  throws  malformed object name exception   j4p exception  {   object value = attribute value ( mbean attribute ) ; return  assertions . assert date ( value ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JolokiaAssert.java,date operation,public date assert   (  string mbean  string operation  object .  .  .  arguments )  throws  malformed object name exception   j4p exception  {   object value = operation result ( mbean operation arguments ) ; return  assertions . assert date ( value ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JolokiaAssert.java,double attribute,public double assert   (  string mbean  string attribute )  throws  malformed object name exception   j4p exception  {   object value = attribute value ( mbean attribute ) ; return  assertions . assert double ( value ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JolokiaAssert.java,double operation,public double assert   (  string mbean  string operation  object .  .  .  arguments )  throws  malformed object name exception   j4p exception  {   object value = operation result ( mbean operation arguments ) ; return  assertions . assert double ( value ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JolokiaAssert.java,float attribute,public float assert   (  string mbean  string attribute )  throws  malformed object name exception   j4p exception  {   object value = attribute value ( mbean attribute ) ; return  assertions . assert float ( value ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JolokiaAssert.java,float operation,public float assert   (  string mbean  string operation  object .  .  .  arguments )  throws  malformed object name exception   j4p exception  {   object value = operation result ( mbean operation arguments ) ; return  assertions . assert float ( value ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JolokiaAssert.java,integer attribute,public integer assert   (  string mbean  string attribute )  throws  malformed object name exception   j4p exception  {   object value = attribute value ( mbean attribute ) ; return  assertions . assert integer ( value ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JolokiaAssert.java,integer operation,public integer assert   (  string mbean  string operation  object .  .  .  arguments )  throws  malformed object name exception   j4p exception  {   object value = operation result ( mbean operation arguments ) ; return  assertions . assert integer ( value ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JolokiaAssert.java,json array attribute,public j s o n array assert   (  string mbean  string attribute )  throws  malformed object name exception   j4p exception  {   object value = attribute value ( mbean attribute ) ; return  assertions . assert j s o n array ( value ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JolokiaAssert.java,json array operation,public j s o n array assert   (  string mbean  string operation  object .  .  .  arguments )  throws  malformed object name exception   j4p exception  {   object value = operation result ( mbean operation arguments ) ; return  assertions . assert j s o n array ( value ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JolokiaAssert.java,json object attribute,public j s o n object assert   (  string mbean  string attribute )  throws  malformed object name exception   j4p exception  {   object value = attribute value ( mbean attribute ) ; return  assertions . assert j s o n object ( value ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JolokiaAssert.java,json object operation,public j s o n object assert   (  string mbean  string operation  object .  .  .  arguments )  throws  malformed object name exception   j4p exception  {   object value = operation result ( mbean operation arguments ) ; return  assertions . assert j s o n object ( value ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JolokiaAssert.java,list attribute,public list assert   (  string mbean  string attribute )  throws  malformed object name exception   j4p exception  {   object value = attribute value ( mbean attribute ) ; return  assertions . assert list ( value ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JolokiaAssert.java,list operation,public list assert   (  string mbean  string operation  object .  .  .  arguments )  throws  malformed object name exception   j4p exception  {   object value = operation result ( mbean operation arguments ) ; return  assertions . assert list ( value ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JolokiaAssert.java,long attribute,public long assert   (  string mbean  string attribute )  throws  malformed object name exception   j4p exception  {   object value = attribute value ( mbean attribute ) ; return  assertions . assert long ( value ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JolokiaAssert.java,long operation,public long assert   (  string mbean  string operation  object .  .  .  arguments )  throws  malformed object name exception   j4p exception  {   object value = operation result ( mbean operation arguments ) ; return  assertions . assert long ( value ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JolokiaAssert.java,map attribute,public map assert   (  string mbean  string attribute )  throws  malformed object name exception   j4p exception  {   object value = attribute value ( mbean attribute ) ; return  assertions . assert map ( value ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JolokiaAssert.java,map operation,public map assert   (  string mbean  string operation  object .  .  .  arguments )  throws  malformed object name exception   j4p exception  {   object value = operation result ( mbean operation arguments ) ; return  assertions . assert map ( value ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JolokiaAssert.java,operation,public object assert <  ?  >    (  string mbean  string operation  object .  .  .  arguments )  throws  j4p exception   malformed object name exception  {   object value = operation result ( mbean operation arguments ) ; return  (  object assert <  ?  >  ) assert that ( value ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JolokiaAssert.java,operation result,protected object   (  string mbean  string operation  object .  .  .  arguments )  throws  malformed object name exception   j4p exception  {   object name object name = new  object name ( mbean ) ;  j4p response <  j4p exec request >  results = client . execute ( new  j4p exec request ( object name operation arguments )  ) ; return results . get value (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JolokiaAssert.java,short attribute,public short assert   (  string mbean  string attribute )  throws  malformed object name exception   j4p exception  {   object value = attribute value ( mbean attribute ) ; return  assertions . assert short ( value ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JolokiaAssert.java,short operation,public short assert   (  string mbean  string operation  object .  .  .  arguments )  throws  malformed object name exception   j4p exception  {   object value = operation result ( mbean operation arguments ) ; return  assertions . assert short ( value ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JolokiaAssert.java,string attribute,public string assert   (  string mbean  string attribute )  throws  malformed object name exception   j4p exception  {   object value = attribute value ( mbean attribute ) ; return  assertions . assert string ( value ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JolokiaAssert.java,string operation,public string assert   (  string mbean  string operation  object .  .  .  arguments )  throws  malformed object name exception   j4p exception  {   object value = operation result ( mbean operation arguments ) ; return  assertions . assert string ( value ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\test\java\io\fabric8\jolokia\assertions\ExampleTest.java,init,"before public void   (  )  {   jvm agent . agentmain ( """" null ) ; client =  j4p client . url ( ""http: /  / localhost:8778 / jolokia"" )  . connection timeout ( 3000 )  . build (  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\test\java\io\fabric8\jolokia\assertions\ExampleTest.java,invoke,override public void   (  )  throws  exception  {  dump all threads . assert j s o n object ( bad index ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\test\java\io\fabric8\jolokia\assertions\ExampleTest.java,test double attribute,"test public void   (  )  throws  exception  {  assert that ( client )  . double attribute ( ""java . lang:type =  operating system"" "" system cpu load"" )  . is greater than or equal to ( 0 . 0 ) ; assert assertion error ( new  block (  )  {  @ override public void invoke (  )  throws  exception  {  assert that ( clien"
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\test\java\io\fabric8\jolokia\assertions\ExampleTest.java,test json array operation,"test public void   (  )  throws  exception  {  final  j s o n array assert dump all threads = assert that ( client )  . json array operation ( ""java . lang:type =  threading"" ""dump all threads"" true true ) ; dump all threads . assert size (  )  . is greater than ( 1 ) ; int size = dump all threads . get (  )  . size (  ) ;"
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\test\java\io\fabric8\jolokia\assertions\ExampleTest.java,test operation not null result,"test public void   (  )  throws  exception  {  assert that ( client )  . operation ( ""java . lang:type =  threading"" ""dump all threads"" true true )  . is not null (  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\test\java\io\fabric8\jolokia\assertions\ExampleTest.java,test operation null result,"test public void   (  )  throws  exception  {  assert that ( client )  . operation ( ""java . util . logging:type =  logging"" ""get logger level"" ""io . fabric8 . jolokia . assertions"" )  . is null (  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\support\JolokiaInvocationHandler.java,jolokia invocation handler,public j4p client jolokia  object name object name  class <  ?  >  interface class )  {  this . jolokia = jolokia; this . object name = object name; this . interface class = interface class;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\support\JolokiaInvocationHandler.java,execute method name,"protected string   (  method method )  {   string name = method . get name (  ) ;  class <  ?  > [] parameter types = method . get parameter types (  ) ; if  ( method count ( interface class name )   >  1 )   {   string builder buffer = new  string builder ( name ) ; buffer . append ( "" ( "" ) ; boolean first = true; for  (   class <  ?  >  parameter type : parameter types )   {  if  ( first )   {  first = false;  }  else  {  buffer . append ( "" "" ) ;  }  buffer . append ( parameter type . get canonical name (  )  ) ;  }  buffer . append ( "" ) "" ) ; return buffer . to string (  ) ;  }  return name;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\support\JolokiaInvocationHandler.java,getter attribute name,"protected string   (  method method )  {   string name = method . get name (  ) ; int length = name . length (  ) ;  class <  ?  > [] parameter types = method . get parameter types (  ) ;  class <  ?  >  return type = method . get return type (  ) ; if  ( parameter types . length  =  =  0 &&  !  void . class . equals ( return type )  )   {  boolean returns bool = return type . equals (  boolean . class )  || return type . equals ( boolean . class ) ; if  ( name . starts with ( ""get"" )  && length  >  3 )   {  return name . substring ( 3 ) ;  }  else if  ( returns bool && name . starts with ( ""is"" )  && length  >  2 )   {  return name . substring ( 2 ) ;  }   }  return null;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\support\JolokiaInvocationHandler.java,invoke,"public object   (  object proxy  method method  object[] args )  throws  throwable  {   string name = method . get name (  ) ;  string attribute;  abtract j4p m bean request request; if  (  ( attribute = getter attribute name ( method )  )   !  =  null )   {  request = new  j4p read request ( object name attribute ) ;  }  else if  (  ( attribute = setter attribute name ( method )  )   !  =  null )   {  request = new  j4p write request ( object name attribute args[0] ) ;  }  else  {  name = execute method name ( method ) ; if  ( args  =  =  null | method . get parameter types (  )  . length  =  =  0 )   {  request = new  j4p exec request ( object name name ) ;  }  else  {  request = new  j4p exec request ( object name name args ) ;  }   }  try  {  request . set preferred http method ( "" p o s t"" ) ;  j4p response response = jolokia . execute ( request ) ;  object value = response . get value (  ) ; return  jolokia helpers . convert jolokia to java type ( method . get return type (  )  value ) ;  }  catch  (   j4p exception e )   {   list <  object >  args list = args  =  =  null  ?  null :  arrays . as list ( args ) ;  l o g . warn ( "" failed to invoke ""  +  object name  +  "" method: "" +  name +  "" with arguments: "" +  args list +  "" .  "" +  e e ) ; throw e;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\support\JolokiaInvocationHandler.java,method count,protected class <  ?  >  clazz  string name )  {  int answer = 0;  method[] declared methods = clazz . get declared methods (  ) ; for  (   method method : declared methods )   {  if  ( name . equals ( method . get name (  )  )  )   {  answer +  + ;  }   }  if  (  ! clazz . equals (  object . class )  )   {   class <  ?  >  superclass = clazz . get superclass (  ) ; if  ( superclass  !  =  null &&  ! superclass . equals (  object . class )  )   {  answer +  = method count ( superclass name ) ;  }   }  return answer;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\support\JolokiaInvocationHandler.java,new proxy instance,public t >  t   (  j4p client jolokia  object name object name  class <  t >  interface class )  {  return  (  t )  proxy . new proxy instance ( interface class . get class loader (  )  new  class[] { interface class }  new  jolokia invocation handler ( jolokia object name interface class )  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\support\JolokiaInvocationHandler.java,setter attribute name,"protected string   (  method method )  {   class <  ?  > [] parameter types = method . get parameter types (  ) ; if  ( parameter types . length  =  =  1 )   {   string name = method . get name (  ) ; int name length = name . length (  ) ; if  ( name . starts with ( ""set"" )  && name length  >  3 )   {  return name . substring ( 3 ) ;  }   }  return null;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\builders\ListEnvVarBuilder.java,build,public list <  env var >    (  )  {  return env vars;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\builds\BuildFinishedEvent.java,build finished event,public string uid  build build boolean loading  string build link )  {  this . uid = uid; this . build = build; this . loading = loading; this . build link = build link;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\builds\BuildFinishedEvent.java,get build,public build   (  )  {  return build;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\builds\BuildFinishedEvent.java,get build link,public string   (  )  {  return build link;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\builders\ListEnvVarBuilder.java,with env var,public string name  string value )  {  if  (  strings . is not blank ( name )  && value  !  =  null )   {   env var env var = new  env var (  ) ; env var . set name ( name ) ; env var . set value ( value ) ; env vars . add ( env var ) ;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\builds\BuildFinishedEvent.java,get config name,public string   (  )  {  return  builds . get build config name ( build ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\builds\BuildFinishedEvent.java,get namespace,public string   (  )  {  return  builds . get namespace ( build ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\builds\BuildFinishedEvent.java,get status,public string   (  )  {  return build . get status (  )  . get phase (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\builds\BuildFinishedEvent.java,get uid,public string   (  )  {  return uid;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\builds\BuildFinishedEvent.java,is loading,public
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\builds\Builds.java,configure default build config,"public build config   (  build config build config  string name  string git url boolean found existing git url  string build image stream  string build image tag  string s2i custom builder image  string secret  string jenkins url )  {   build config spec spec = build config . get spec (  ) ; if  ( spec  =  =  null )   {  spec = new  build config spec (  ) ; build config . set spec ( spec ) ;  }  if  (  ! found existing git url &&  strings . is not blank ( git url )  )   {   build source source = spec . get source (  ) ; if  ( source  =  =  null )   {  source = new  build source (  ) ; spec . set source ( source ) ;  }  source . set type ( "" git"" ) ;  git build source git = source . get git (  ) ; if  ( git  =  =  null )   {  git = new  git build source (  ) ; source . set git ( git ) ;  }  git . set uri ( git url ) ;  }  if  (  strings . is not blank ( build image stream )  &&  strings . is not blank ( build image tag )  )   {   build strategy strategy = spec . get strategy (  ) ; if  ( strategy  =  =  null )   {  strategy = new  build strategy (  ) ; spec . set strategy ( strategy ) ;  }  strategy . set type ( "" jenkins pipeline"" ) ;  jenkins pipeline build strategy build strategy = strategy . get jenkins pipeline strategy (  ) ; if  ( build strategy  =  =  null )   {  build strategy = new  jenkins pipeline build strategy (  ) ; strategy . set jenkins pipeline strategy ( build strategy ) ;  }   list env var builder env builder = new  list env var builder (  ) ; if  (  strings . is not blank ( jenkins url )  )   {  env builder . with env var ( "" b a s e _  u r i"" jenkins url ) ;  }  build strategy . set jenkinsfile path ( "" jenkinsfile"" ) ;  }   list <  build trigger policy >  triggers = spec . get triggers (  ) ; if  ( triggers  =  =  null )   {  triggers = new  array list <  >  (  ) ;  }  if  ( triggers . is empty (  )  )   {  triggers . add ( new  build trigger policy builder (  )  . with type ( "" git hub"" )  . with new github (  )  . with secret ( secret )  . end github (  )  . build (  )  ) ; triggers . add ( new  build trigger policy builder (  )  . with type ( "" generic"" )  . with new generic (  )  . with secret ( secret )  . end generic (  )  . build (  )  ) ; spec . set triggers ( triggers ) ;  }  return build config;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\builds\Builds.java,create console build link,"public string   (  string fabric console external url  string build name )  {  return  u r l utils . path join ( fabric console external url ""kubernetes / builds"" build name ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\builds\Builds.java,create default build config,public build config   (  string name  string git url  string jenkins url )  {   build config build config = new  build config (  ) ; get or create metadata ( build config )  . set name ( name ) ; boolean found existing git url = false; return configure default build config ( build config name git url found existing git url jenkins url ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\builds\Builds.java,get build config name,"public string   (  build build )  {  if  ( build  !  =  null )   {   map <  string  object >  metadata = get metadata ( build ) ;  object labels = metadata . get ( ""labels"" ) ; if  ( labels instanceof  map )   {   map <  string  object >  label map =  (  map <  string  object >  ) labels; return get string ( label map ""buildconfig"" ) ;  }   }  return null;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\builds\Builds.java,get creation timestamp,public string   (  build build )  {   string answer = null; if  ( build  !  =  null )   {   object meta metadata = build . get metadata (  ) ; if  ( metadata  !  =  null )   {  return metadata . get creation timestamp (  ) ;  }   }  return answer;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\builds\Builds.java,get creation timestamp date,public date   (  build build )  {   string time = get creation timestamp ( build ) ; if  ( time  !  =  null )   {  return  kubernetes helper . parse date ( time ) ;  }  return null;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\builds\Builds.java,get metadata,"public map <  string  object >    (  build config build )  {  if  ( build  !  =  null )   {   map <  string  object >  additional properties = build . get additional properties (  ) ; if  ( additional properties  !  =  null )   {   object metadata = additional properties . get ( ""metadata"" ) ; if  ( metadata instanceof  map )   {  return  (  map <  string  object >  ) metadata;  }   }   }  return  collections .  e m p t y _  m a p;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\builds\Builds.java,get name,"public string   (  build build )  {   string answer = null; if  ( build  !  =  null )   {   map <  string  object >  metadata = get metadata ( build ) ; answer = get string ( metadata ""name"" ) ; if  (  strings . is null or blank ( answer )  )   {  answer = build . get metadata (  )  . get name (  ) ;  }   }  return answer;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\builds\Builds.java,get namespace,"public string   (  build build )  {   string answer = null; if  ( build  !  =  null )   {   map <  string  object >  metadata = get metadata ( build ) ; answer = get string ( metadata ""namespace"" ) ; if  (  strings . is null or blank ( answer )  )   {  answer = build . get metadata (  )  . get namespace (  ) ;  }   }  return answer;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\builds\Builds.java,get string,protected string   (  map <  string  object >  metadata  string name )  {   object answer = metadata . get ( name ) ; if  ( answer  !  =  null )   {  return answer . to string (  ) ;  }  return null;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\builds\Builds.java,get uid,"public string   (  build build )  {   string answer = null; if  ( build  !  =  null )   {  answer = build . get metadata (  )  . get uid (  ) ; if  (  strings . is null or blank ( answer )  )   {   map <  string  object >  metadata = get metadata ( build ) ; answer = get string ( metadata ""uid"" ) ; if  (  strings . is null or blank ( answer )  )   {  answer = get string ( metadata ""id"" ) ;  }  if  (  strings . is null or blank ( answer )  )   {  answer = get string ( metadata ""name"" ) ;  }   }  if  (  strings . is null or blank ( answer )  )   {  answer = build . get metadata (  )  . get name (  ) ;  }   }  return answer;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\builds\Builds.java,is cancelled,public string status )  {  return  objects . equal (  status .  c a n c e l l e d status ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\builds\Builds.java,is completed,public string status )  {  return  objects . equal (  status .  c o m p l e t e status ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\builds\Builds.java,is failed,public string status )  {  if  ( status  !  =  null )   {  return status . starts with (  status .  f a i l )  || status . starts with (  status .  e r r o r ) ;  }  return false;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\builds\Builds.java,is finished,public string status )  {  return is completed ( status )  || is failed ( status )  || is cancelled ( status ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\builds\Links.java,get fabric console link,"public string   (  )  {   string answer =  system . getenv ( "" f a b r i c8 _  c o n s o l e"" ) ; if  (  strings . is null or blank ( answer )  )   {  answer =  d e f a u l t _  f a b r i c8 _  c o n s o l e;  }  return answer;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\builds\BuildWatcher.java,build watcher,public open shift client client  build listener build listener  string namespace  string fabric8 console link )  {  this . client = client; this . build listener = build listener; this . namespace = namespace; this . fabric8 console link = fabric8 console link;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\builds\BuildWatcher.java,build polled,"protected build build )  {   string status = build . get status (  )  . get phase (  ) ; if  ( status  !  =  null )   {  if  (  builds . is finished ( status )  )   {   string uid =  builds . get uid ( build ) ; if  (  strings . is null or blank ( uid )  )   {   l o g . warn ( "" ignoring bad build which has no  u i d: ""  +  build ) ;  }  else  {  if  ( seen build ids . add ( uid )  )   {   string name =  builds . get name ( build ) ;  string build link =  builds . create console build link ( this . fabric8 console link name ) ;  build finished event event = new  build finished event ( uid build loading build link ) ; build listener . on build finished ( event ) ;  }   }   }   }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\builds\BuildWatcher.java,join,public object lock = new  object (  ) ; while  ( true )   {  synchronized  ( lock )   {  try  {  lock . wait (  ) ;  }  catch  (   interrupted exception e )   {   }   }   }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\builds\BuildWatcher.java,poll,public build = false;  build list build list = client . builds (  )  . in namespace ( namespace )  . list (  ) ; if  ( build list  !  =  null )   {   list <  build >  items = build list . get items (  ) ; if  ( items  !  =  null )   {  for  (   build build : items )   {  build polled ( build ) ; found build = true;  }   }   }  if  ( found build )   {  loading = false;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\builds\BuildWatcher.java,run,override public void   (  )  {  poll (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\builds\BuildWatcher.java,schedule,public timer task   (  timer timer long delay )  {   timer task task = new  timer task (  )  {  @ override public void run (  )  {  poll (  ) ;  }   }  ; timer . schedule ( task delay delay ) ; return task;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\environments\Environments.java,environments,public string namespace  map <  string  environment >  environments )  {  this . namespace = namespace; this . environments = environments;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\environments\Environments.java,find space namespace,"public string   (  kubernetes client kubernetes client  string namespace )  {  try  {   config map config map = kubernetes client . config maps (  )  . in namespace ( namespace )  . with name (  s p a c e _  l i n k _  c o n f i g m a p _  n a m e )  . get (  ) ; if  ( config map  !  =  null )   {   map <  string  string >  data = config map . get data (  ) ; if  ( data  !  =  null )   {   string answer = data . get ( ""space"" ) ; if  (  strings . is not blank ( answer )  )   {  return answer;  }   }   }   }  catch  (   exception e )   {   l o g . warn ( "" failed to lookup  space  link  config map ""  +  namespace  +  "" / "" +   s p a c e _  l i n k _  c o n f i g m a p _  n a m e +  "" .  "" +  e e ) ;  }  int idx = namespace . last index of ( ' - ' ) ; if  ( idx  >  0 )   {  return namespace . substring ( 0 idx ) ;  }  return namespace;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\environments\Environments.java,get default namespace,protected string   (  kubernetes client kubernetes client  string namespace )  {  if  (  strings . is null or blank ( namespace )  )   {  namespace = kubernetes client . get namespace (  ) ; if  (  strings . is null or blank ( namespace )  )   {  namespace =  kubernetes helper . default namespace (  ) ;  }   }  return namespace;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\environments\Environments.java,get environment,public environment   (  string environment key )  {  return environments . get ( environment key ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\environments\Environments.java,get environment set,public sorted set <  environment >    (  )  {  return new  tree set <  >  ( environments . values (  )  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\environments\Environments.java,get environments,public map <  string  environment >    (  )  {  return environments;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\environments\Environments.java,get namespace,public string   (  )  {  return namespace;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\environments\Environments.java,load,private environments   (  config map config map  string namespace )  {   map <  string  environment >  environment map = new  hash map <  >  (  ) ; if  ( config map  !  =  null )   {   map <  string  string >  data = config map . get data (  ) ; if  ( data  !  =  null )   {   set <  map .  entry <  string  string >  >  entries = data . entry set (  ) ; for  (   map .  entry <  string  string >  entry : entries )   {   string key = entry . get key (  ) ;  string yaml = entry . get value (  ) ;  environment environment = parse environment ( key yaml ) ; if  ( environment  !  =  null )   {  environment map . put ( key environment ) ;  }   }   }   }  return new  environments ( namespace environment map ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\environments\Environments.java,namespace for environment,public string   (  kubernetes client kubernetes client  string environment key  string namespace )  {   environments environments =  environments . load ( kubernetes client namespace ) ;  environment environment = environments . get environment ( environment key ) ; if  ( environment  =  =  null )   {  environment = environments . get environment ( environment key . to lower case (  )  ) ;  }   string answer = null; if  ( environment  !  =  null )   {  answer = environment . get namespace (  ) ;  }  return answer;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\environments\Environments.java,parse environment,"private environment   (  string key  string yaml )  {  try  {  return  kubernetes helper . load yaml ( yaml  environment . class ) ;  }  catch  (   i o exception e )   {   l o g . warn ( "" failed to parse environment  y a m l for ""  +  key  +  "" .   reason: "" +  e +  "" .   y a m l: "" +  yaml e ) ; return null;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\environments\Environment.java,compare to,override public int   (  environment that )  {  int answer = this . order (  )   -  that . order (  ) ; if  ( answer  =  =  0 )   {  answer = this . name . compare to ( that . name ) ;  }  return answer;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\environments\Environment.java,get cluster a pi server,public string   (  )  {  return cluster a pi server;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\environments\Environment.java,get key,public string   (  )  {  return key;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\environments\Environment.java,get name,public string   (  )  {  return name;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\environments\Environment.java,get namespace,public string   (  )  {  return namespace;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\environments\Environment.java,get order,public integer   (  )  {  return order;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\environments\Environment.java,order,public value (  )  :  integer .  m a x _  v a l u e;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\environments\Environment.java,set cluster a pi server,public string cluster a pi server )  {  this . cluster a pi server = cluster a pi server;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\environments\Environment.java,set key,public string key )  {  this . key = key;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\environments\Environment.java,set name,public string name )  {  this . name = name;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\environments\Environment.java,set namespace,public string namespace )  {  this . namespace = namespace;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\environments\Environment.java,set order,public integer order )  {  this . order = order;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\environments\Environment.java,to string,"override public  string   (  )  {  return "" environment { ""  +  ""name = '""  +  name  +  '\'' +  ""  namespace = '"" +  namespace +  '\'' +  ' } ';  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\extensions\Configs.java,current user name,"public string   (  )  {   config config = parse configs (  ) ; if  ( config  !  =  null )   {   context context = get current context ( config ) ; if  ( context  !  =  null )   {   string user = context . get user (  ) ; if  ( user  !  =  null )   {   string[] parts = user . split ( "" / "" ) ; if  ( parts  !  =  null && parts . length  >  0 )   {  return parts[0];  }  return user;  }   }   }  return null;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\extensions\Configs.java,get cluster,public cluster   (  config config  context context )  {   cluster cluster = null; if  ( config  !  =  null && context  !  =  null )   {   string cluster name = context . get cluster (  ) ; if  ( cluster name  !  =  null )   {   list <  named cluster >  clusters = config . get clusters (  ) ; if  ( clusters  !  =  null )   {  for  (   named cluster named cluster : clusters )   {  if  (  objects . equal ( cluster name named cluster . get name (  )  )  )   {  cluster = named cluster . get cluster (  ) ;  }   }   }   }   }  return cluster;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\extensions\Configs.java,get current context,public context   (  config config )  {   string context name = config . get current context (  ) ; if  ( context name  !  =  null )   {   list <  named context >  contexts = config . get contexts (  ) ; if  ( contexts  !  =  null )   {  for  (   named context context : contexts )   {  if  (  objects . equal ( context name context . get name (  )  )  )   {  return context . get context (  ) ;  }   }   }   }  return null;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\extensions\Configs.java,get kubernetes config file,"public file   (  )  {   string file =  system . get property (  k u b e r n e t e s _  c o n f i g _  f i l e _  p r o p e r t y ) ; if  ( file  !  =  null )   {  return new  file ( file ) ;  }  file =  system . getenv (  k u b e r n e t e s _  c o n f i g _  f i l e _  e n v _  v a r ) ; if  ( file  !  =  null )   {  return new  file ( file ) ;  }   string home dir =  system . get property ( ""user . home"" "" . "" ) ; return new  file ( home dir "" . kube / config"" ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\extensions\Configs.java,get user auth info,public auth info   (  config config  context context )  {   auth info auth info = null; if  ( config  !  =  null && context  !  =  null )   {   string user = context . get user (  ) ; if  ( user  !  =  null )   {   list <  named auth info >  users = config . get users (  ) ; if  ( users  !  =  null )   {  for  (   named auth info named auth info : users )   {  if  (  objects . equal ( user named auth info . get name (  )  )  )   {  auth info = named auth info . get user (  ) ;  }   }   }   }   }  return auth info;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\extensions\Configs.java,get user token,public string   (  config config  context context )  {   auth info auth info = get user auth info ( config context ) ; if  ( auth info  !  =  null )   {  return auth info . get token (  ) ;  }  return null;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\extensions\Configs.java,parse configs,public config   (  )  {   file file = get kubernetes config file (  ) ; if  ( file . exists (  )  && file . is file (  )  )   {  try  {  return  kubernetes helper . load yaml ( file  config . class ) ;  }  catch  (   i o exception e )   {  e . print stack trace (  ) ;  }   }  return null;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesNames.java,convert to kubernetes name,public string   (  string text boolean allow dots )  {   string lower = text . to lower case (  ) ;  string builder builder = new  string builder (  ) ; boolean started = false; char last ch = ' '; for  ( int i = 0  last = lower . length (  )   -  1; i  <  =  last; i +  +  )   {  char ch = lower . char at ( i ) ; boolean digit = ch  >  =  '0' && ch  <  =  '9'; if  ( digit && builder . length (  )   =  =  0 )   {  builder . append (  d i g i t _  p r e f i x ) ;  }  if  (  !  ( ch  >  =  'a' && ch  <  =  'z' )  &&  ! digit )   {  if  ( ch  =  =  ' / ' )   {  ch = ' . ';  }  else if  ( ch  !  =  ' . ' && ch  !  =  ' - ' )   {  ch = ' - ';  }  if  (  ! allow dots && ch  =  =  ' . ' )   {  ch = ' - ';  }  if  (  ! started || last ch  =  =  ' - ' || last ch  =  =  ' . ' || i  =  =  last )   {  continue;  }   }  builder . append ( ch ) ; started = true; last ch = ch;  }  return builder . to string (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\extensions\Templates.java,add template object,public template template  has metadata object )  {   list <  has metadata >  objects = template . get objects (  ) ; objects . add ( object ) ; template . set objects ( objects ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\extensions\Templates.java,combine parameters,protected list <  parameter >  parameters  list <  parameter >  other parameters )  {  if  ( other parameters  !  =  null && other parameters . size (  )   >  0 )   {   map <  string  parameter >  map = new  hash map <  >  (  ) ; for  (   parameter parameter : parameters )   {  map . put ( parameter . get name (  )  parameter ) ;  }  for  (   parameter other parameter : other parameters )   {   string name = other parameter . get name (  ) ;  parameter original = map . get ( name ) ; if  ( original  =  =  null )   {  parameters . add ( other parameter ) ;  }  else  {  if  (  strings . is not blank ( original . get value (  )  )  )   {  original . set value ( other parameter . get value (  )  ) ;  }   }   }   }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\extensions\Templates.java,combine templates,public object   (  kubernetes list kubernetes list  list <  has metadata >  items )  {   template template = null; for  (   has metadata item : items )   {  if  ( item instanceof  template )   {   template a template =  (  template ) item; if  ( template  =  =  null )   {  template = a template;  }  else  {  template = combine templates ( template a template ) ;  }   }   }  if  ( template  !  =  null )   {  for  (   has metadata item : items )   {  if  (  !  ( item instanceof  template )  )   {  add template object ( template item ) ;  }   }   list <  has metadata >  objects = template . get objects (  ) ; return template;  }  else  {  return kubernetes list;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\extensions\Templates.java,override template parameters,"public template template  map <  string  string >  properties  string property name prefix )  {   list <  parameter >  parameters = template . get parameters (  ) ; if  ( parameters  !  =  null && properties  !  =  null )   {  boolean missing property = false; for  (   parameter parameter : parameters )   {   string parameter name = parameter . get name (  ) ;  string name = property name prefix  +  parameter name;  string property value = properties . get ( name ) ; if  (  strings . is not blank ( property value )  )   {   l o g . info ( "" overriding template parameter ""  +  name  +  "" with value: "" +  property value ) ; parameter . set value ( property value ) ;  }  else  {  missing property = true;  l o g . info ( "" no property defined for template parameter: ""  +  name ) ;  }   }  if  ( missing property )   {   l o g . debug ( ""current properties ""  +  new  tree set <  >  ( properties . key set (  )  )  ) ;  }   }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\extensions\Templates.java,process templates locally,"public kubernetes list   (  template entity boolean fail on missing parameter value )  throws  i o exception  {   list <  has metadata >  objects = null; if  ( entity  !  =  null )   {  objects = entity . get objects (  ) ; if  ( objects  =  =  null || objects . is empty (  )  )   {  return null;  }   }   list <  parameter >  parameters = entity  !  =  null  ?  entity . get parameters (  )  : null; if  ( parameters  !  =  null &&  ! parameters . is empty (  )  )   {   string json = "" { \""kind\"": \"" list\""  \""api version\"": \""""  +   kubernetes helper . default api version  +  ""\"" \n"" +  "" \""items\"": "" +   kubernetes helper . to json ( objects )  +  ""  } ""; for  ( int i = 0; i  <  5; i +  +  )   {  for  (   parameter parameter : parameters )   {   string name = parameter . get name (  ) ;  string regex = ""$ { ""  +  name  +  "" } "";  string value = parameter . get value (  ) ; if  (  strings . is null or blank ( value )  )   {  if  ( fail on missing parameter value )   {  throw new  illegal argument exception ( "" no value available for parameter name: ""  +  name ) ;  }  else  {  value = """";  }   }  json =  strings . replace all without regex ( json regex value ) ;  }   }  return  o b j e c t _  m a p p e r . reader for (  kubernetes list . class )  . read value ( json ) ;  }  else  {   kubernetes list answer = new  kubernetes list (  ) ; answer . set items ( objects ) ; return answer;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,controller,public kubernetes client kubernetes client )  {  this . kubernetes client = kubernetes client;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,apply,"public object dto  string source name )  throws  exception  {  if  ( dto instanceof  list )   {   list list =  (  list ) dto; for  (   object element : list )   {  if  ( dto  =  =  element )   {   l o g . warn ( "" found recursive nested object for ""  +  dto  +  "" of class: "" +  dto . get class (  )  . get name (  )  ) ; continue;  }  apply ( element source name ) ;  }   }  else if  ( dto instanceof  kubernetes list )   {  apply list (  (  kubernetes list ) dto source name ) ;  }  else if  ( dto  !  =  null )   {  apply entity ( dto source name ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,apply build config,"public build config entity  string source name )  {   open shift client open shift client = get open shift client or jenkinshift (  ) ; if  ( open shift client  !  =  null )   {   string id = get name ( entity ) ;  objects . not null ( id "" no name for ""  +  entity  +  "" "" +  source name ) ;  string namespace =  kubernetes helper . get namespace ( entity ) ; if  (  strings . is null or blank ( namespace )  )   {  namespace = get namespace (  ) ;  }  apply namespace ( namespace ) ;  build config old = open shift client . build configs (  )  . in namespace ( namespace )  . with name ( id )  . get (  ) ; if  ( is running ( old )  )   {  if  (  user configuration compare . config equal ( entity old )  )   {   l o g . info ( "" build config has not changed so not doing anything"" ) ;  }  else  {  if  ( is recreate mode (  )  )   {   l o g . info ( "" deleting  build config: ""  +  id ) ; open shift client . build configs (  )  . in namespace ( namespace )  . with name ( id )  . delete (  ) ; do create build config ( entity namespace source name ) ;  }  else  {   l o g . info ( "" updating  build config from ""  +  source name ) ; try  {   string resource version =  kubernetes helper . get resource version ( old ) ;  object meta metadata =  kubernetes helper . get or create metadata ( entity ) ; metadata . set namespace ( namespace ) ; metadata . set resource version ( resource version ) ;  object answer = open shift client . build configs (  )  . in namespace ( namespace )  . with name ( id )  . replace ( entity ) ; log generated entity ( "" updated  build config: "" namespace entity answer ) ;  }  catch  (   exception e )   {  on apply error ( "" failed to update  build config from ""  +  source name  +  "" .  "" +  e +  "" .  "" +  entity e ) ;  }   }   }   }  else  {  if  (  ! is allow create (  )  )   {   l o g . warn ( "" creation disabled so not creating  build config from ""  +  source name  +  "" namespace "" +  namespace +  "" name "" +  get name ( entity )  ) ;  }  else  {  do create build config ( entity namespace source name ) ;  }   }   }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,apply entity,"public object dto  string source name )  throws  exception  {  if  ( dto instanceof  pod )   {  apply pod (  (  pod ) dto source name ) ;  }  else if  ( dto instanceof  replication controller )   {  apply replication controller (  (  replication controller ) dto source name ) ;  }  else if  ( dto instanceof  service )   {  apply service (  (  service ) dto source name ) ;  }  else if  ( dto instanceof  namespace )   {  apply namespace (  (  namespace ) dto ) ;  }  else if  ( dto instanceof  route )   {  apply route (  (  route ) dto source name ) ;  }  else if  ( dto instanceof  build config )   {  apply build config (  (  build config ) dto source name ) ;  }  else if  ( dto instanceof  deployment config )   {   deployment config resource =  (  deployment config ) dto;  open shift client open shift client = get open shift client or null (  ) ; if  ( open shift client  !  =  null && open shift client . supports open shift a p i group (  open shift a p i groups .  a p p s )  )   {  apply resource ( resource source name open shift client . deployment configs (  )  ) ;  }  else  {   l o g . warn ( "" not connected to  open shift cluster so cannot apply entity ""  +  dto ) ;  }   }  else if  ( dto instanceof  policy binding )   {  apply policy binding (  (  policy binding ) dto source name ) ;  }  else if  ( dto instanceof  role binding )   {  apply role binding (  (  role binding ) dto source name ) ;  }  else if  ( dto instanceof  role )   {   role resource =  (  role ) dto;  open shift client open shift client = get open shift client or null (  ) ; if  ( open shift client  !  =  null && open shift client . supports open shift a p i group (  open shift a p i groups .  a u t h o r i z a t i o n )  )   {  apply resource ( resource source name open shift client . roles (  )  ) ;  }  else  {   l o g . warn ( "" not connected to  open shift cluster so cannot apply entity ""  +  dto ) ;  }   }  else if  ( dto instanceof  image stream )   {  apply image stream (  (  image stream ) dto source name ) ;  }  else if  ( dto instanceof  o auth client )   {  apply o auth client (  (  o auth client ) dto source name ) ;  }  else if  ( dto instanceof  template )   {  apply template (  (  template ) dto source name ) ;  }  else if  ( dto instanceof  service account )   {  apply service account (  (  service account ) dto source name ) ;  }  else if  ( dto instanceof  secret )   {  apply secret (  (  secret ) dto source name ) ;  }  else if  ( dto instanceof  config map )   {  apply resource (  (  config map ) dto source name kubernetes client . config maps (  )  ) ;  }  else if  ( dto instanceof  daemon set )   {  apply resource (  (  daemon set ) dto source name kubernetes client . extensions (  )  . daemon sets (  )  ) ;  }  else if  ( dto instanceof  deployment )   {  apply resource (  (  deployment ) dto source name kubernetes client . extensions (  )  . deployments (  )  ) ;  }  else if  ( dto instanceof  replica set )   {  apply resource (  (  replica set ) dto source name kubernetes client . extensions (  )  . replica sets (  )  ) ;  }  else if  ( dto instanceof  stateful set )   {  apply resource (  (  stateful set ) dto source name kubernetes client . apps (  )  . stateful sets (  )  ) ;  }  else if  ( dto instanceof  ingress )   {  apply resource (  (  ingress ) dto source name kubernetes client . extensions (  )  . ingresses (  )  ) ;  }  else if  ( dto instanceof  persistent volume claim )   {  apply persistent volume claim (  (  persistent volume claim ) dto source name ) ;  }  else if  ( dto instanceof  has metadata )   {   has metadata entity =  (  has metadata ) dto; try  {   string namespace = get namespace (  ) ;  string resource namespace = get namespace ( entity ) ; if  (  strings . is not blank ( namespace )  &&  strings . is null or blank ( resource namespace )  )   {  get or create metadata ( entity )  . set namespace ( namespace ) ;  }   l o g . info ( "" applying ""  +  get kind ( entity )   +  "" "" +  get name ( entity )  +  "" from "" +  source name ) ; kubernetes client . resource ( entity )  . in namespace ( namespace )  . create or replace (  ) ;  }  catch  (   exception e )   {  on apply error ( "" failed to create ""  +  get kind ( entity )   +  "" from "" +  source name +  "" .  "" +  e e ) ;  }   }  else  {  throw new  illegal argument exception ( "" unknown entity type ""  +  dto ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,apply image stream,"public image stream entity  string source name )  {   open shift client open shift client = get open shift client or null (  ) ; if  ( open shift client  !  =  null && open shift client . supports open shift a p i group (  open shift a p i groups .  i m a g e )  )   {   string kind = get kind ( entity ) ;  string name = get name ( entity ) ;  string namespace = get namespace (  ) ; try  {   resource <  image stream  doneable image stream >  resource = open shift client . image streams (  )  . in namespace ( namespace )  . with name ( name ) ;  image stream old = resource . get (  ) ; if  ( old  =  =  null )   {   l o g . info ( "" creating ""  +  kind  +  "" "" +  name +  "" from "" +  source name ) ; resource . create ( entity ) ;  }  else  {   l o g . info ( "" updating ""  +  kind  +  "" "" +  name +  "" from "" +  source name ) ; copy all image stream tags ( entity old ) ; resource . replace ( old ) ;  }  open shift client . resource ( entity )  . in namespace ( namespace )  . apply (  ) ;  }  catch  (   exception e )   {  on apply error ( "" failed to create ""  +  kind  +  "" from "" +  source name +  "" .  "" +  e e ) ;  }   }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,apply json,"public string   (  input stream json )  throws  exception  {   object dto = load json ( json ) ; apply ( dto "" r e s t call"" ) ; return """";  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,apply list,public kubernetes list list  string source name )  throws  exception  {   list <  has metadata >  entities = list . get items (  ) ; if  ( entities  !  =  null )   {  for  (   object entity : entities )   {  apply entity ( entity source name ) ;  }   }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,apply namespace,"public namespace entity )  {   string namespace = get or create metadata ( entity )  . get name (  ) ;  l o g . info ( "" using namespace: ""  +  namespace ) ;  string name = get name ( entity ) ;  objects . not null ( name "" no name for ""  +  entity ) ;  namespace old = kubernetes client . namespaces (  )  . with name ( name )  . get (  ) ; if  (  ! is running ( old )  )   {  try  {   object answer = kubernetes client . namespaces (  )  . create ( entity ) ; log generated entity ( "" created namespace: "" namespace entity answer ) ; return true;  }  catch  (   exception e )   {  on apply error ( "" failed to create namespace: ""  +  name  +  "" due "" +  e . get message (  )  e ) ;  }   }  return false;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,apply o auth client,"public o auth client entity  string source name )  {   open shift client open shift client = get open shift client or null (  ) ; if  ( open shift client  !  =  null && open shift client . supports open shift a p i group (  open shift a p i groups .  o a u t h )  )   {  if  ( support o auth clients )   {   string id = get name ( entity ) ;  objects . not null ( id "" no name for ""  +  entity  +  "" "" +  source name ) ; if  ( is services only mode (  )  )   {   l o g . debug ( "" only processing  services right now so ignoring  o auth client: ""  +  id ) ; return;  }   o auth client old = open shift client . o auth clients (  )  . with name ( id )  . get (  ) ; if  ( is running ( old )  )   {  if  ( is ignore running o auth clients (  )  )   {   l o g . info ( "" not updating the  o auth client which are shared across namespaces as its already running"" ) ; return;  }  if  (  user configuration compare . config equal ( entity old )  )   {   l o g . info ( "" o auth client has not changed so not doing anything"" ) ;  }  else  {  if  ( is recreate mode (  )  )   {  open shift client . o auth clients (  )  . with name ( id )  . delete (  ) ; do create o auth client ( entity source name ) ;  }  else  {  try  {   object answer = open shift client . o auth clients (  )  . with name ( id )  . replace ( entity ) ;  l o g . info ( "" updated  o auth client result: ""  +  answer ) ;  }  catch  (   exception e )   {  on apply error ( "" failed to update  o auth client from ""  +  source name  +  "" .  "" +  e +  "" .  "" +  entity e ) ;  }   }   }   }  else  {  if  (  ! is allow create (  )  )   {   l o g . warn ( "" creation disabled so not creating an  o auth client from ""  +  source name  +  "" name "" +  get name ( entity )  ) ;  }  else  {  do create o auth client ( entity source name ) ;  }   }   }   }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,apply persistent volume claim,"public persistent volume claim entity  string source name )  throws  exception  {  boolean always recreate = true;  string namespace = get namespace (  ) ;  string id = get name ( entity ) ;  objects . not null ( id "" no name for ""  +  entity  +  "" "" +  source name ) ; if  ( is services only mode (  )  )   {   l o g . debug ( "" only processing  services right now so ignoring  persistent volume claim: ""  +  id ) ; return;  }   persistent volume claim old = kubernetes client . persistent volume claims (  )  . in namespace ( namespace )  . with name ( id )  . get (  ) ; if  ( is running ( old )  )   {  if  (  user configuration compare . config equal ( entity old )  )   {   l o g . info ( "" persistent volume claim has not changed so not doing anything"" ) ;  }  else  {  if  ( always recreate || is recreate mode (  )  )   {  if  (  ! is recreate mode (  )  && is ignore bound persistent volume claims (  )  && is bound ( old )  )   {   l o g . warn ( "" persistent volume claim ""  +  id  +  "" in namespace "" +  namespace +  "" is already bound and will not be replaced with the new one from "" +  source name ) ;  }  else  {   l o g . info ( "" deleting  persistent volume claim from namespace ""  +  namespace  +  "" with name "" +  id ) ; kubernetes client . persistent volume claims (  )  . in namespace ( namespace )  . with name ( id )  . delete (  ) ;  l o g . info ( "" deleted  persistent volume claim from namespace ""  +  namespace  +  "" with name "" +  id ) ; do create persistent volume claim ( entity namespace source name ) ;  }   }  else  {   l o g . info ( "" updating a  persistent volume claim from ""  +  source name ) ; try  {   object answer = kubernetes client . persistent volume claims (  )  . in namespace ( namespace )  . with name ( id )  . replace ( entity ) ; log generated entity ( "" updated  persistent volume claim: "" namespace entity answer ) ;  }  catch  (   exception e )   {  on apply error ( "" failed to update  persistent volume claim from ""  +  source name  +  "" .  "" +  e +  "" .  "" +  entity e ) ;  }   }   }   }  else  {  if  (  ! is allow create (  )  )   {   l o g . warn ( "" creation disabled so not creating a  persistent volume claim from ""  +  source name  +  "" namespace "" +  namespace +  "" name "" +  get name ( entity )  ) ;  }  else  {  do create persistent volume claim ( entity namespace source name ) ;  }   }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,apply pod,"public pod pod  string source name )  throws  exception  {   string namespace = get namespace (  ) ;  string id = get name ( pod ) ;  objects . not null ( id "" no name for ""  +  pod  +  "" "" +  source name ) ; if  ( is services only mode (  )  )   {   l o g . debug ( "" only processing  services right now so ignoring  pod: ""  +  namespace  +  "":"" +  id ) ; return;  }   pod old = kubernetes client . pods (  )  . in namespace ( namespace )  . with name ( id )  . get (  ) ; if  ( is running ( old )  )   {  if  (  user configuration compare . config equal ( pod old )  )   {   l o g . info ( "" pod has not changed so not doing anything"" ) ;  }  else  {  if  ( is recreate mode (  )  )   {   l o g . info ( "" deleting  pod: ""  +  id ) ; kubernetes client . pods (  )  . in namespace ( namespace )  . with name ( id )  . delete (  ) ; do create pod ( pod namespace source name ) ;  }  else  {   l o g . info ( "" updating a  pod from ""  +  source name  +  "" namespace "" +  namespace +  "" name "" +  get name ( pod )  ) ; try  {   object answer = kubernetes client . pods (  )  . in namespace ( namespace )  . with name ( id )  . replace ( pod ) ;  l o g . info ( "" updated  pod result: ""  +  answer ) ;  }  catch  (   exception e )   {  on apply error ( "" failed to update  pod from ""  +  source name  +  "" .  "" +  e +  "" .  "" +  pod e ) ;  }   }   }   }  else  {  if  (  ! is allow create (  )  )   {   l o g . warn ( "" creation disabled so not creating a pod from ""  +  source name  +  "" namespace "" +  namespace +  "" name "" +  get name ( pod )  ) ;  }  else  {  do create pod ( pod namespace source name ) ;  }   }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,apply policy binding,"public policy binding entity  string source name )  {   open shift client open shift client = get open shift client or jenkinshift (  ) ; if  ( open shift client  !  =  null )   {   string id = get name ( entity ) ;  objects . not null ( id "" no name for ""  +  entity  +  "" "" +  source name ) ;  string namespace =  kubernetes helper . get namespace ( entity ) ; if  (  strings . is null or blank ( namespace )  )   {  namespace = get namespace (  ) ;  }  apply namespace ( namespace ) ;  policy binding old = open shift client . policy bindings (  )  . in namespace ( namespace )  . with name ( id )  . get (  ) ; if  ( is running ( old )  )   {  if  (  user configuration compare . config equal ( entity old )  )   {   l o g . info ( "" policy binding has not changed so not doing anything"" ) ;  }  else  {  if  ( is recreate mode (  )  )   {   l o g . info ( "" deleting  policy binding: ""  +  id ) ; open shift client . policy bindings (  )  . in namespace ( namespace )  . with name ( id )  . delete (  ) ; do create policy binding ( entity namespace source name ) ;  }  else  {   l o g . info ( "" updating  policy binding from ""  +  source name ) ; try  {   string resource version =  kubernetes helper . get resource version ( old ) ;  object meta metadata =  kubernetes helper . get or create metadata ( entity ) ; metadata . set namespace ( namespace ) ; metadata . set resource version ( resource version ) ;  object answer = open shift client . policy bindings (  )  . in namespace ( namespace )  . with name ( id )  . replace ( entity ) ; log generated entity ( "" updated  policy binding: "" namespace entity answer ) ;  }  catch  (   exception e )   {  on apply error ( "" failed to update  policy binding from ""  +  source name  +  "" .  "" +  e +  "" .  "" +  entity e ) ;  }   }   }   }  else  {  if  (  ! is allow create (  )  )   {   l o g . warn ( "" creation disabled so not creating  policy binding from ""  +  source name  +  "" namespace "" +  namespace +  "" name "" +  get name ( entity )  ) ;  }  else  {  do create policy binding ( entity namespace source name ) ;  }   }   }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,apply project request,"public project request entity )  {   string namespace = get or create metadata ( entity )  . get name (  ) ;  l o g . info ( "" using project: ""  +  namespace ) ;  string name = get name ( entity ) ;  objects . not null ( name "" no name for ""  +  entity ) ;  open shift client openshift client = get open shift client or null (  ) ; if  ( openshift client  =  =  null ||  ! openshift client . supports open shift a p i group (  open shift a p i groups .  p r o j e c t )  )   {   l o g . warn ( "" cannot check for  project ""  +  namespace  +  "" as not running against  open shift ! "" ) ; return false;  }  boolean exists = check namespace ( name ) ; if  (  ! exists )   {  try  {   object answer = openshift client . projectrequests (  )  . create ( entity ) ; log generated entity ( "" created  project request: "" namespace entity answer ) ; return true;  }  catch  (   exception e )   {  on apply error ( "" failed to create  project request: ""  +  name  +  "" due "" +  e . get message (  )  e ) ;  }   }  return false;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,apply replication controller,"public replication controller replication controller  string source name )  throws  exception  {   string namespace = get namespace (  ) ;  string id = get name ( replication controller ) ;  objects . not null ( id "" no name for ""  +  replication controller  +  "" "" +  source name ) ; if  ( is services only mode (  )  )   {   l o g . debug ( "" only processing  services right now so ignoring  replication controller: ""  +  namespace  +  "":"" +  id ) ; return;  }   replication controller old = kubernetes client . replication controllers (  )  . in namespace ( namespace )  . with name ( id )  . get (  ) ; if  ( is running ( old )  )   {  if  (  user configuration compare . config equal ( replication controller old )  )   {   l o g . info ( "" replication controller has not changed so not doing anything"" ) ;  }  else  {   replication controller spec new spec = replication controller . get spec (  ) ;  replication controller spec old spec = old . get spec (  ) ; if  ( rolling upgrade )   {   l o g . info ( "" rolling upgrade of the  replication controller: ""  +  namespace  +  "" / "" +  id ) ; if  ( rolling upgrade preserve scale && new spec  !  =  null && old spec  !  =  null )   {   integer replicas = old spec . get replicas (  ) ; if  ( replicas  !  =  null )   {  new spec . set replicas ( replicas ) ;  }   }   l o g . info ( ""rolling upgrade preserve scale ""  +  rolling upgrade preserve scale  +  "" new replicas is "" +   ( new spec  !  =  null  ?  new spec . get replicas (  )  : "" < null > "" )  ) ; kubernetes client . replication controllers (  )  . in namespace ( namespace )  . with name ( id )  . rolling (  )  . replace ( replication controller ) ;  }  else if  ( is recreate mode (  )  )   {   l o g . info ( "" deleting  replication controller: ""  +  id ) ; kubernetes client . replication controllers (  )  . in namespace ( namespace )  . with name ( id )  . delete (  ) ; do create replication controller ( replication controller namespace source name ) ;  }  else  {   l o g . info ( "" updating  replication controller from ""  +  source name  +  "" namespace "" +  namespace +  "" name "" +  get name ( replication controller )  ) ; try  {   object answer = kubernetes client . replication controllers (  )  . in namespace ( namespace )  . with name ( id )  . replace ( replication controller ) ; log generated entity ( "" updated replication controller: "" namespace replication controller answer ) ; if  ( delete pods on replication controller update )   {  kubernetes client . pods (  )  . in namespace ( namespace )  . with labels ( new spec . get selector (  )  )  . delete (  ) ;  l o g . info ( "" deleting any pods for the replication controller to ensure they use the new configuration"" ) ;  }  else  {   l o g . info ( "" warning not deleted any pods so they could well be running with the old configuration ! "" ) ;  }   }  catch  (   exception e )   {  on apply error ( "" failed to update  replication controller from ""  +  source name  +  "" .  "" +  e +  "" .  "" +  replication controller e ) ;  }   }   }   }  else  {  if  (  ! is allow create (  )  )   {   l o g . warn ( "" creation disabled so not creating a  replication controller from ""  +  source name  +  "" namespace "" +  namespace +  "" name "" +  get name ( replication controller )  ) ;  }  else  {  do create replication controller ( replication controller namespace source name ) ;  }   }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,apply resource,"public t extends  has metadata  l  d > void   (  t resource  string source name  mixed operation <  t  l  d  ?  extends  resource <  t  d >  >  resources )  throws  exception  {   string namespace = get namespace (  ) ;  string resource namespace = get namespace ( resource ) ; if  (  strings . is not blank ( namespace )  &&  strings . is null or blank ( resource namespace )  )   {  get or create metadata ( resource )  . set namespace ( namespace ) ;  }   string id = get name ( resource ) ;  string kind = get kind ( resource ) ;  objects . not null ( id "" no name for ""  +  resource  +  "" "" +  source name ) ; if  ( is services only mode (  )  )   {   l o g . debug ( "" ignoring ""  +  kind  +  "": "" +  namespace +  "":"" +  id ) ; return;  }   t old = resources . in namespace ( namespace )  . with name ( id )  . get (  ) ; if  ( is running ( old )  )   {  if  (  user configuration compare . config equal ( resource old )  )   {   l o g . info ( kind  +  "" has not changed so not doing anything"" ) ;  }  else  {  if  ( is recreate mode (  )  )   {   l o g . info ( "" deleting ""  +  kind  +  "": "" +  id ) ; resources . in namespace ( namespace )  . with name ( id )  . delete (  ) ; do create resource ( resource namespace source name resources ) ;  }  else  {   l o g . info ( "" updating ""  +  kind  +  "" from "" +  source name ) ; try  {   object answer = resources . in namespace ( namespace )  . with name ( id )  . replace ( resource ) ; log generated entity ( "" updated ""  +  kind  +  "": "" namespace resource answer ) ;  }  catch  (   exception e )   {  on apply error ( "" failed to update ""  +  kind  +  "" from "" +  source name +  "" .  "" +  e +  "" .  "" +  resource e ) ;  }   }   }   }  else  {  if  (  ! is allow create (  )  )   {   l o g . warn ( "" creation disabled so not creating a ""  +  kind  +  "" from "" +  source name +  "" namespace "" +  namespace +  "" name "" +  get name ( resource )  ) ;  }  else  {  do create resource ( resource namespace source name resources ) ;  }   }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,apply role binding,"public role binding entity  string source name )  {   open shift client open shift client = get open shift client or jenkinshift (  ) ; if  ( open shift client  !  =  null )   {   string id = get name ( entity ) ;  objects . not null ( id "" no name for ""  +  entity  +  "" "" +  source name ) ;  string namespace =  kubernetes helper . get namespace ( entity ) ; if  (  strings . is null or blank ( namespace )  )   {  namespace = get namespace (  ) ;  }  apply namespace ( namespace ) ;  role binding old = open shift client . role bindings (  )  . in namespace ( namespace )  . with name ( id )  . get (  ) ; if  ( is running ( old )  )   {  if  (  user configuration compare . config equal ( entity old )  )   {   l o g . info ( "" role binding has not changed so not doing anything"" ) ;  }  else  {  if  ( is recreate mode (  )  )   {   l o g . info ( "" deleting  role binding: ""  +  id ) ; open shift client . role bindings (  )  . in namespace ( namespace )  . with name ( id )  . delete (  ) ; do create role binding ( entity namespace source name ) ;  }  else  {   l o g . info ( "" updating  role binding from ""  +  source name ) ; try  {   string resource version =  kubernetes helper . get resource version ( old ) ;  object meta metadata =  kubernetes helper . get or create metadata ( entity ) ; metadata . set namespace ( namespace ) ; metadata . set resource version ( resource version ) ;  object answer = open shift client . role bindings (  )  . in namespace ( namespace )  . with name ( id )  . replace ( entity ) ; log generated entity ( "" updated  role binding: "" namespace entity answer ) ;  }  catch  (   exception e )   {  on apply error ( "" failed to update  role binding from ""  +  source name  +  "" .  "" +  e +  "" .  "" +  entity e ) ;  }   }   }   }  else  {  if  (  ! is allow create (  )  )   {   l o g . warn ( "" creation disabled so not creating  role binding from ""  +  source name  +  "" namespace "" +  namespace +  "" name "" +  get name ( entity )  ) ;  }  else  {  do create role binding ( entity namespace source name ) ;  }   }   }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,apply route,"public route entity  string source name )  {   open shift client open shift client = get open shift client or null (  ) ; if  ( open shift client  !  =  null && open shift client . supports open shift a p i group (  open shift a p i groups .  r o u t e )  )   {   string id = get name ( entity ) ;  objects . not null ( id "" no name for ""  +  entity  +  "" "" +  source name ) ;  string namespace =  kubernetes helper . get namespace ( entity ) ; if  (  strings . is null or blank ( namespace )  )   {  namespace = get namespace (  ) ;  }   route route = open shift client . routes (  )  . in namespace ( namespace )  . with name ( id )  . get (  ) ; if  ( route  =  =  null )   {  try  {   l o g . info ( "" creating  route ""  +  namespace  +  "":"" +  id +  "" "" +   kubernetes helper . summary text ( entity )  ) ; open shift client . routes (  )  . in namespace ( namespace )  . create ( entity ) ;  }  catch  (   exception e )   {  on apply error ( "" failed to create  route from ""  +  source name  +  "" .  "" +  e +  "" .  "" +  entity e ) ;  }   }   }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,apply secret,"public secret secret  string source name )  throws  exception  {   string namespace = get namespace ( secret ) ;  string id = get name ( secret ) ;  objects . not null ( id "" no name for ""  +  secret  +  "" "" +  source name ) ; if  ( is services only mode (  )  )   {   l o g . debug ( "" only processing  services right now so ignoring  secrets: ""  +  id ) ; return;  }   secret old = kubernetes client . secrets (  )  . in namespace ( namespace )  . with name ( id )  . get (  ) ; if  ( is running ( old )  )   {  if  (  user configuration compare . config equal ( secret old )  )   {   l o g . info ( "" secret has not changed so not doing anything"" ) ; return;  }  else  {  if  ( is recreate mode (  )  )   {  kubernetes client . secrets (  )  . in namespace ( namespace )  . with name ( id )  . delete (  ) ; do create secret ( secret namespace source name ) ;  }  else  {   l o g . info ( "" updating a  secret from ""  +  source name ) ; try  {   object answer = kubernetes client . secrets (  )  . in namespace ( namespace )  . with name ( id )  . replace ( secret ) ; log generated entity ( "" updated  secret:"" namespace secret answer ) ;  }  catch  (   exception e )   {  on apply error ( "" failed to update secret from ""  +  source name  +  "" .  "" +  e +  "" .  "" +  secret e ) ;  }   }   }   }  else  {  if  (  ! is allow create (  )  )   {   l o g . warn ( "" creation disabled so not creating a  secret from ""  +  source name  +  "" namespace "" +  namespace +  "" name "" +  get name ( secret )  ) ;  }  else  {  do create secret ( secret namespace source name ) ;  }   }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,apply service,"public service service  string source name )  throws  exception  {   string namespace = get namespace (  ) ;  string id = get name ( service ) ;  objects . not null ( id "" no name for ""  +  service  +  "" "" +  source name ) ; if  ( is ignore service mode (  )  )   {   l o g . debug ( "" ignoring  service: ""  +  namespace  +  "":"" +  id ) ; return;  }   service old = kubernetes client . services (  )  . in namespace ( namespace )  . with name ( id )  . get (  ) ; if  ( is running ( old )  )   {  if  (  user configuration compare . config equal ( service old )  )   {   l o g . info ( "" service has not changed so not doing anything"" ) ;  }  else  {  if  ( is recreate mode (  )  )   {   l o g . info ( "" deleting  service: ""  +  id ) ; kubernetes client . services (  )  . in namespace ( namespace )  . with name ( id )  . delete (  ) ; do create service ( service namespace source name ) ;  }  else  {   l o g . info ( "" updating a  service from ""  +  source name ) ; try  {   object answer = kubernetes client . services (  )  . in namespace ( namespace )  . with name ( id )  . replace ( service ) ; log generated entity ( "" updated  service: "" namespace service answer ) ;  }  catch  (   exception e )   {  on apply error ( "" failed to update  service from ""  +  source name  +  "" .  "" +  e +  "" .  "" +  service e ) ;  }   }   }   }  else  {  if  (  ! is allow create (  )  )   {   l o g . warn ( "" creation disabled so not creating a  service from ""  +  source name  +  "" namespace "" +  namespace +  "" name "" +  get name ( service )  ) ;  }  else  {  do create service ( service namespace source name ) ;  }   }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,apply service account,"public service account service account  string source name )  throws  exception  {   string namespace = get namespace (  ) ;  string id = get name ( service account ) ;  objects . not null ( id "" no name for ""  +  service account  +  "" "" +  source name ) ; if  ( is services only mode (  )  )   {   l o g . debug ( "" only processing  services right now so ignoring  service account: ""  +  id ) ; return;  }   service account old = kubernetes client . service accounts (  )  . in namespace ( namespace )  . with name ( id )  . get (  ) ; if  ( is running ( old )  )   {  if  (  user configuration compare . config equal ( service account old )  )   {   l o g . info ( "" service account has not changed so not doing anything"" ) ;  }  else  {  if  ( is recreate mode (  )  )   {  kubernetes client . service accounts (  )  . in namespace ( namespace )  . with name ( id )  . delete (  ) ; do create service account ( service account namespace source name ) ;  }  else  {   l o g . info ( "" updating a  service account from ""  +  source name ) ; try  {   object answer = kubernetes client . service accounts (  )  . in namespace ( namespace )  . with name ( id )  . replace ( service account ) ; log generated entity ( "" updated  service account: "" namespace service account answer ) ;  }  catch  (   exception e )   {  on apply error ( "" failed to update  service account from ""  +  source name  +  "" .  "" +  e +  "" .  "" +  service account e ) ;  }   }   }   }  else  {  if  (  ! is allow create (  )  )   {   l o g . warn ( "" creation disabled so not creating a  service account from ""  +  source name  +  "" namespace "" +  namespace +  "" name "" +  get name ( service account )  ) ;  }  else  {  do create service account ( service account namespace source name ) ;  }   }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,apply template,public object   (  template entity  string source name )  throws  exception  {  install template ( entity source name ) ; return process template ( entity source name ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,apply yaml,"public string   (  file yaml )  throws  exception  {   string json = convert yaml to json ( yaml ) ;  object dto = load json ( json ) ; apply ( dto "" r e s t call"" ) ; return """";  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,check namespace,public string namespace name )  {  if  (  strings . is null or blank ( namespace name )  )   {  return false;  }   open shift client openshift client = get open shift client or null (  ) ; if  ( openshift client  !  =  null && openshift client . supports open shift a p i group (  open shift a p i groups .  p r o j e c t )  )   {  return openshift client . projects (  )  . list (  )  . get items (  )  . stream (  )  . map ( project  -  >  project . get metadata (  )  . get name (  )  )  . any match (  predicate . is equal ( namespace name )  ) ;  }  else  {  return kubernetes client . namespaces (  )  . with name ( namespace name )  . get (  )   !  =  null;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,convert yaml to json,private string   (  file yaml file )  throws  file not found exception  {   yaml yaml = new  yaml (  ) ;  file input stream fstream = new  file input stream ( yaml file ) ;  map <  string  object >  map =  (  map <  string  object >  ) yaml . load ( fstream ) ;  j s o n object json object = new  j s o n object ( map ) ; return json object . to string (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,copy all image stream tags,protected image stream from  image stream to )  {   image stream spec to spec = to . get spec (  ) ; if  ( to spec  =  =  null )   {  to spec = new  image stream spec (  ) ; to . set spec ( to spec ) ;  }   list <  tag reference >  to tags = to spec . get tags (  ) ; if  ( to tags  =  =  null )   {  to tags = new  array list <  >  (  ) ; to spec . set tags ( to tags ) ;  }   image stream spec from spec = from . get spec (  ) ; if  ( from spec  !  =  null )   {   list <  tag reference >  from tags = from spec . get tags (  ) ; if  ( from tags  !  =  null )   {  for  (   tag reference tag : from tags )   {  remove tag by name ( to tags tag . get name (  )  ) ;  }  for  (   tag reference tag : from tags )   {  to tags . add ( tag ) ;  }   }   }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,delete namespace,public string namespace name )  {  if  (  ! check namespace ( namespace name )  )   {  return false;  }   open shift client openshift client = get open shift client or null (  ) ; if  ( openshift client  !  =  null && openshift client . supports open shift a p i group (  open shift a p i groups .  p r o j e c t )  )   {  return openshift client . projects (  )  . with name ( namespace name )  . delete (  ) ;  }  else  {  return kubernetes client . namespaces (  )  . with name ( namespace name )  . delete (  ) ;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,do create build config,"public build config entity  string namespace  string source name )  {   open shift client open shift client = get open shift client or jenkinshift (  ) ; if  ( open shift client  !  =  null )   {  try  {  open shift client . build configs (  )  . in namespace ( namespace )  . create ( entity ) ;  }  catch  (   exception e )   {  on apply error ( "" failed to create  build config from ""  +  source name  +  "" .  "" +  e e ) ;  }   }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,do create o auth client,"protected o auth client entity  string source name )  {   open shift client open shift client = get open shift client or null (  ) ; if  ( open shift client  !  =  null && open shift client . supports open shift a p i group (  open shift a p i groups .  o a u t h )  )   {   object result = null; try  {  result = open shift client . o auth clients (  )  . create ( entity ) ;  }  catch  (   exception e )   {  on apply error ( "" failed to create  o auth client from ""  +  source name  +  "" .  "" +  e +  "" .  "" +  entity e ) ;  }   }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,do create persistent volume claim,"protected persistent volume claim entity  string namespace  string source name )  {   l o g . info ( "" creating a  persistent volume claim from ""  +  source name  +  "" namespace "" +  namespace +  "" name "" +  get name ( entity )  ) ; try  {   object answer; if  (  strings . is not blank ( namespace )  )   {  answer = kubernetes client . persistent volume claims (  )  . in namespace ( namespace )  . create ( entity ) ;  }  else  {  answer = kubernetes client . persistent volume claims (  )  . in namespace ( get namespace (  )  )  . create ( entity ) ;  }  log generated entity ( "" created  persistent volume claim: "" namespace entity answer ) ;  }  catch  (   exception e )   {  on apply error ( "" failed to create  persistent volume claim from ""  +  source name  +  "" .  "" +  e +  "" .  "" +  entity e ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,do create pod,"protected pod pod  string namespace  string source name )  {   l o g . info ( "" creating a  pod from ""  +  source name  +  "" namespace "" +  namespace +  "" name "" +  get name ( pod )  ) ; try  {   pod spec pod spec = pod . get spec (  ) ; if  ( pod spec  !  =  null )   {  validate pod spec ( pod spec namespace ) ;  }   object answer; if  (  strings . is not blank ( namespace )  )   {  answer = kubernetes client . pods (  )  . in namespace ( namespace )  . create ( pod ) ;  }  else  {  answer = kubernetes client . pods (  )  . in namespace ( get namespace (  )  )  . create ( pod ) ;  }   l o g . info ( "" created  pod result: ""  +  answer ) ;  }  catch  (   exception e )   {  on apply error ( "" failed to create  pod from ""  +  source name  +  "" .  "" +  e +  "" .  "" +  pod e ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,do create policy binding,"public policy binding entity  string namespace  string source name )  {   open shift client open shift client = get open shift client or jenkinshift (  ) ; if  ( open shift client  !  =  null )   {  try  {  open shift client . policy bindings (  )  . in namespace ( namespace )  . create ( entity ) ;  }  catch  (   exception e )   {  on apply error ( "" failed to create  policy binding from ""  +  source name  +  "" .  "" +  e e ) ;  }   }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,do create replication controller,"protected replication controller replication controller  string namespace  string source name )  {   l o g . info ( "" creating a  replication controller from ""  +  source name  +  "" namespace "" +  namespace +  "" name "" +  get name ( replication controller )  ) ; try  {   replication controller spec spec = replication controller . get spec (  ) ; if  ( spec  !  =  null )   {   pod template spec template = spec . get template (  ) ; if  ( template  !  =  null )   {   pod spec pod spec = template . get spec (  ) ; validate pod spec ( pod spec namespace ) ;  }   }   object answer; if  (  strings . is not blank ( namespace )  )   {  answer = kubernetes client . replication controllers (  )  . in namespace ( namespace )  . create ( replication controller ) ;  }  else  {  answer = kubernetes client . replication controllers (  )  . in namespace ( get namespace (  )  )  . create ( replication controller ) ;  }  log generated entity ( "" created  replication controller: "" namespace replication controller answer ) ;  }  catch  (   exception e )   {  on apply error ( "" failed to create  replication controller from ""  +  source name  +  "" .  "" +  e +  "" .  "" +  replication controller e ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,do create resource,"protected t extends  has metadata  l  d > void   (  t resource  string namespace  string source name  mixed operation <  t  l  d  ?  extends  resource <  t  d >  >  resources )  throws  exception  {   string kind = get kind ( resource ) ;  l o g . info ( "" creating a ""  +  kind  +  "" from "" +  source name +  "" namespace "" +  namespace +  "" name "" +  get name ( resource )  ) ; try  {   object answer; if  (  strings . is not blank ( namespace )  )   {  answer = resources . in namespace ( namespace )  . create ( resource ) ;  }  else  {  answer = resources . in namespace ( get namespace (  )  )  . create ( resource ) ;  }  log generated entity ( "" created ""  +  kind  +  "": "" namespace resource answer ) ;  }  catch  (   exception e )   {  on apply error ( "" failed to create ""  +  kind  +  "" from "" +  source name +  "" .  "" +  e +  "" .  "" +  resource e ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,do create role binding,"public role binding entity  string namespace  string source name )  {   open shift client open shift client = get open shift client or jenkinshift (  ) ; if  ( open shift client  !  =  null )   {  try  {  open shift client . role bindings (  )  . in namespace ( namespace )  . create ( entity ) ;  }  catch  (   exception e )   {  on apply error ( "" failed to create  role binding from ""  +  source name  +  "" .  "" +  e e ) ;  }   }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,do create secret,"protected secret secret  string namespace  string source name )  {   l o g . info ( "" creating a  secret from ""  +  source name  +  "" namespace "" +  namespace +  "" name "" +  get name ( secret )  ) ; try  {   object answer; if  (  strings . is not blank ( namespace )  )   {  answer = kubernetes client . secrets (  )  . in namespace ( namespace )  . create ( secret ) ;  }  else  {  answer = kubernetes client . secrets (  )  . in namespace ( get namespace (  )  )  . create ( secret ) ;  }  log generated entity ( "" created  secret: "" namespace secret answer ) ;  }  catch  (   exception e )   {  on apply error ( "" failed to create  secret from ""  +  source name  +  "" .  "" +  e +  "" .  "" +  secret e ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,do create service,"protected service service  string namespace  string source name )  {   l o g . info ( "" creating a  service from ""  +  source name  +  "" namespace "" +  namespace +  "" name "" +  get name ( service )  ) ; try  {   object answer; if  (  strings . is not blank ( namespace )  )   {  answer = kubernetes client . services (  )  . in namespace ( namespace )  . create ( service ) ;  }  else  {  answer = kubernetes client . services (  )  . in namespace ( get namespace (  )  )  . create ( service ) ;  }  log generated entity ( "" created  service: "" namespace service answer ) ;  }  catch  (   exception e )   {  on apply error ( "" failed to create  service from ""  +  source name  +  "" .  "" +  e +  "" .  "" +  service e ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,do create service account,"protected service account service account  string namespace  string source name )  {   l o g . info ( "" creating a  service account from ""  +  source name  +  "" namespace "" +  namespace +  "" name "" +  get name ( service account )  ) ; try  {   object answer; if  (  strings . is not blank ( namespace )  )   {  answer = kubernetes client . service accounts (  )  . in namespace ( namespace )  . create ( service account ) ;  }  else  {  answer = kubernetes client . service accounts (  )  . in namespace ( get namespace (  )  )  . create ( service account ) ;  }  log generated entity ( "" created  service account: "" namespace service account answer ) ;  }  catch  (   exception e )   {  on apply error ( "" failed to create  service account from ""  +  source name  +  "" .  "" +  e +  "" .  "" +  service account e ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,do create template,"protected template entity  string namespace  string source name )  {   open shift client open shift client = get open shift client or null (  ) ; if  ( open shift client  !  =  null && open shift client . supports open shift a p i group (  open shift a p i groups .  t e m p l a t e )  )   {   l o g . info ( "" creating a  template from ""  +  source name  +  "" namespace "" +  namespace +  "" name "" +  get name ( entity )  ) ; try  {   object answer = open shift client . templates (  )  . in namespace ( namespace )  . create ( entity ) ; log generated entity ( "" created  template: "" namespace entity answer ) ;  }  catch  (   exception e )   {  on apply error ( "" failed to  template entity from ""  +  source name  +  "" .  "" +  e +  "" .  "" +  entity e ) ;  }   }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,get basedir,public file   (  )  {  return basedir;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,get log json dir,public file   (  )  {  return log json dir;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,get namespace,protected string   (  has metadata entity )  {   string answer =  kubernetes helper . get namespace ( entity ) ; if  (  strings . is null or blank ( answer )  )   {  answer = get namespace (  ) ;  }  apply namespace ( answer ) ; return answer;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,get open shift client or jenkinshift,"public open shift client   (  )  {   open shift client open shift client = get open shift client or null (  ) ; if  ( open shift client  =  =  null )   {   string jenkinshift url =  systems . get env var ( "" j e n k i n s h i f t _  u r l"" ""http: /  / jenkinshift / "" ) ;  l o g . debug ( "" using jenknshift  u r l: ""  +  jenkinshift url ) ; open shift client =  kubernetes helper . create jenkinshift open shift client ( jenkinshift url ) ;  }  return open shift client;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,get open shift client or null,public open shift client   (  )  {   open shift client open shift client = null; if  ( kubernetes client instanceof  open shift client )   {  open shift client =  (  open shift client ) kubernetes client;  }  if  ( open shift client  =  =  null )   {  try  {  open shift client = kubernetes client . adapt (  open shift client . class ) ;  }  catch  (   kubernetes client exception e )   {   }  catch  (   open shift not available exception e )   {   }   }  return open shift client;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,install template,"public template entity  string source name )  {   open shift client open shift client = get open shift client or null (  ) ; if  ( open shift client  =  =  null ||  ! open shift client . supports open shift a p i group (  open shift a p i groups .  t e m p l a t e )  )   {  return;  }  if  (  ! is process templates locally (  )  )   {   string namespace = get namespace (  ) ;  string id = get name ( entity ) ;  objects . not null ( id "" no name for ""  +  entity  +  "" "" +  source name ) ;  template old = open shift client . templates (  )  . in namespace ( namespace )  . with name ( id )  . get (  ) ; if  ( is running ( old )  )   {  if  (  user configuration compare . config equal ( entity old )  )   {   l o g . info ( "" template has not changed so not doing anything"" ) ;  }  else  {  boolean recreate mode = is recreate mode (  ) ; recreate mode = true; if  ( recreate mode )   {  open shift client . templates (  )  . in namespace ( namespace )  . with name ( id )  . delete (  ) ; do create template ( entity namespace source name ) ;  }  else  {   l o g . info ( "" updating a  template from ""  +  source name ) ; try  {   object answer = open shift client . templates (  )  . in namespace ( namespace )  . with name ( id )  . replace ( entity ) ;  l o g . info ( "" updated  template: ""  +  answer ) ;  }  catch  (   exception e )   {  on apply error ( "" failed to update  template from ""  +  source name  +  "" .  "" +  e +  "" .  "" +  entity e ) ;  }   }   }   }  else  {  if  (  ! is allow create (  )  )   {   l o g . warn ( "" creation disabled so not creating a  template from ""  +  source name  +  "" namespace "" +  namespace +  "" name "" +  get name ( entity )  ) ;  }  else  {  do create template ( entity namespace source name ) ;  }   }   }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,is allow create,public create;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,is bound,"protected persistent volume claim claim )  {  return claim  !  =  null && claim . get status (  )   !  =  null && "" bound"" . equals ( claim . get status (  )  . get phase (  )  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,is delete pods on replication controller update,public pods on replication controller update;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,is fail on missing parameter value,public on missing parameter value;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,is ignore bound persistent volume claims,public bound persistent volume claims;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,is ignore running o auth clients,public running o auth clients;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,is ignore service mode,public service mode;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,is process templates locally,public templates locally;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,is recreate mode,public mode;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,is require secrets created before replication controllers,public secrets created before replication controllers;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,is rolling upgrade,public upgrade;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,is rolling upgrade preserve scale,public upgrade preserve scale;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,is running,protected has metadata entity )  {  return entity  !  =  null;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,is services only mode,public only mode;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,is support o auth clients,public o auth clients;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,is throw exception on error,public exception on error;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,log generated entity,"protected string message  string namespace  has metadata entity  object result )  {  if  ( log json dir  !  =  null )   {   file namespace dir = new  file ( log json dir namespace ) ; namespace dir . mkdirs (  ) ;  string kind = get kind ( entity ) ;  string name =  kubernetes helper . get name ( entity ) ; if  (  strings . is not blank ( kind )  )   {  name = kind . to lower case (  )   +  "" - ""  +  name;  }  if  (  strings . is null or blank ( name )  )   {   l o g . warn ( "" no name for the entity ""  +  entity ) ;  }  else  {   string file name = name  +  "" . json"";  file file = new  file ( namespace dir file name ) ; if  ( file . exists (  )  )   {  int idx = 1; while  ( true )   {  file name = name  +  "" - ""  +  idx +  +  +  "" . json""; file = new  file ( namespace dir file name ) ; if  (  ! file . exists (  )  )   {  break;  }   }   }   string text; if  ( result instanceof  string )   {  text = result . to string (  ) ;  }  else  {  try  {  text =  kubernetes helper . to json ( result ) ;  }  catch  (   json processing exception e )   {   l o g . warn ( "" cannot convert ""  +  result  +  "" to  j s o n: "" +  e e ) ; if  ( result  !  =  null )   {  text = result . to string (  ) ;  }  else  {  text = ""null"";  }   }   }  try  {   i o helpers . write fully ( file text ) ;  object file location = file; if  ( basedir  !  =  null )   {   string path =  files . get relative path ( basedir file ) ; if  ( path  !  =  null )   {  file location =  strings . strip prefix ( path "" / "" ) ;  }   }   l o g . info ( message  +  file location ) ;  }  catch  (   i o exception e )   {   l o g . warn ( "" failed to write to file ""  +  file  +  "" .  "" +  e e ) ;  }  return;  }   }   l o g . info ( message  +  result ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,on apply error,protected string message  exception e )  {   l o g . error ( message e ) ; if  ( throw exception on error )   {  throw new  runtime exception ( message e ) ;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,print summary,"protected object kube resource )  throws  i o exception  {  if  ( kube resource  !  =  null )   {   l o g . debug ( "" ""  +  kube resource . get class (  )  . get simple name (  )   +  "" "" +  kube resource ) ;  }  if  ( kube resource instanceof  template )   {   template template =  (  template ) kube resource;  string id = get name ( template ) ;  l o g . info ( ""  template ""  +  id  +  "" "" +  summary text ( template )  ) ; print summary ( template . get objects (  )  ) ; return;  }   list <  has metadata >  list = to item list ( kube resource ) ; for  (   has metadata object : list )   {  if  ( object  !  =  null )   {  if  ( object  =  =  list )   {   l o g . debug ( "" ignoring recursive list ""  +  list ) ; continue;  }  else if  ( object instanceof  list )   {  print summary ( object ) ;  }  else  {   string kind = object . get class (  )  . get simple name (  ) ;  string id = get object id ( object ) ;  l o g . info ( "" ""  +  kind  +  "" "" +  id +  "" "" +  summary text ( object )  ) ;  }   }   }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,process template,"public object   (  template entity  string source name )  {  try  {  return  templates . process templates locally ( entity fail on missing parameter value ) ;  }  catch  (   i o exception e )   {  on apply error ( "" failed to process template ""  +  source name  +  "" .  "" +  e +  "" .  "" +  entity e ) ; return null;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,remove tag by name,private list <  tag reference >  tags  string tag name )  {   list <  tag reference >  remove tags = new  array list <  >  (  ) ; for  (   tag reference tag : tags )   {  if  (  objects . equal ( tag name tag . get name (  )  )  )   {  remove tags . add ( tag ) ;  }   }  tags . remove all ( remove tags ) ; return remove tags . size (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,set allow create,public create )  {  this . allow create = allow create;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,set basedir,public file basedir )  {  this . basedir = basedir;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,set delete pods on replication controller update,public pods on replication controller update )  {  this . delete pods on replication controller update = delete pods on replication controller update;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,set fail on missing parameter value,public on missing parameter value )  {  this . fail on missing parameter value = fail on missing parameter value;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,set ignore bound persistent volume claims,public bound persistent volume claims )  {  this . ignore bound persistent volume claims = ignore bound persistent volume claims;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,set ignore running o auth clients,public running o auth clients )  {  this . ignore running o auth clients = ignore running o auth clients;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,set ignore service mode,public service mode )  {  this . ignore service mode = ignore service mode;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,set log json dir,public file log json dir )  {  this . log json dir = log json dir;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,set namespace,public string namespace )  {  this . namesapce = namespace;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,set process templates locally,public templates locally )  {  this . process templates locally = process templates locally;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,set recreate mode,public mode )  {  this . recreate mode = recreate mode;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,set require secrets created before replication controllers,public secrets created before replication controllers )  {  this . require secrets created before replication controllers = require secrets created before replication controllers;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,set rolling upgrade,public upgrade )  {  this . rolling upgrade = rolling upgrade;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,set rolling upgrade preserve scale,public upgrade preserve scale )  {  this . rolling upgrade preserve scale = rolling upgrade preserve scale;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,set services only mode,public only mode )  {  this . services only mode = services only mode;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,set support o auth clients,public o auth clients )  {  this . support o auth clients = support o auth clients;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,set throw exception on error,public exception on error )  {  this . throw exception on error = throw exception on error;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,validate pod spec,protected pod spec pod spec  string namespace )  {  if  ( require secrets created before replication controllers )   {   list <  volume >  volumes = pod spec . get volumes (  ) ; if  ( volumes  !  =  null )   {  for  (   volume volume : volumes )   {   secret volume source secret = volume . get secret (  ) ; if  ( secret  !  =  null )   {   string secret name = secret . get secret name (  ) ; if  (  strings . is not blank ( secret name )  )   {   kubernetes helper . validate secret exists ( kubernetes client namespace secret name ) ;  }   }   }   }   }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\Pipeline.java,pipeline,public pipeline kind kind  string job name )  {  this . kind = kind; this . job name = job name;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\Pipeline.java,get configuration,public pipeline configuration   (  )  {  if  ( configuration  =  =  null )   {  configuration = new  pipeline configuration (  ) ;  }  return configuration;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\Pipeline.java,get job name,public string   (  )  {  return job name;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\Pipeline.java,get kind,public pipeline kind   (  )  {  return kind;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\Pipeline.java,is cd,public pipeline kind .  c d;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\Pipeline.java,is ci,public pipeline kind .  c i;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\Pipeline.java,is developer,public pipeline kind .  developer;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\Pipeline.java,set configuration,public pipeline configuration configuration )  {  this . configuration = configuration;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\JobEnvironment.java,create,"public job environment   (  map <  string  string >  map )  throws  introspection exception  {   job environment answer = new  job environment (  ) ;  bean info bean info =  introspector . get bean info (  job environment . class ) ;  property descriptor[] property descriptors = bean info . get property descriptors (  ) ; if  ( property descriptors  !  =  null )   {  for  (   property descriptor property descriptor : property descriptors )   {   string name = property descriptor . get name (  ) ;  string env var name = property name to environment variable name ( name ) ;  string value = map . get ( env var name ) ; if  ( value  =  =  null )   {  continue;  }   property editor property editor = property descriptor . create property editor ( answer ) ; if  ( property editor  =  =  null )   {   method write method = property descriptor . get write method (  ) ; if  ( write method  =  =  null )   {   l o g . warn ( "" no  property editor or  write method for property: ""  +  name ) ; continue;  }   class <  ?  > [] parameter types = write method . get parameter types (  ) ; if  ( parameter types . length  =  =  0 ||  ! parameter types[0] . equals (  string . class )  )   {   l o g . warn ( "" write method for property: ""  +  name  +  "" does not take a  string and there is no  property editor ! "" ) ; continue;  }  try  {  write method . invoke ( answer value ) ;  }  catch  (   exception e )   {   l o g . warn ( "" failed to set property ""  +  name  +  "" due to: "" +  e e ) ;  }   }  else  {  property editor . set as text ( value ) ;  }   }   }  return answer;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\JobEnvironment.java,get branch name,public string   (  )  {  return branch name;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\JobEnvironment.java,get build display name,public string   (  )  {  return build display name;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\JobEnvironment.java,get build id,public string   (  )  {  return build id;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\JobEnvironment.java,get build number,public string   (  )  {  return build number;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\JobEnvironment.java,get build tag,public string   (  )  {  return build tag;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\JobEnvironment.java,get build url,public string   (  )  {  return build url;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\JobEnvironment.java,get git url,public string   (  )  {  return git url;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\JobEnvironment.java,get jenkins url,public string   (  )  {  return jenkins url;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\JobEnvironment.java,get job base name,public string   (  )  {  return job base name;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\JobEnvironment.java,get job display url,public string   (  )  {  return job display url;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\JobEnvironment.java,get job name,public string   (  )  {  return job name;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\JobEnvironment.java,get job url,public string   (  )  {  return job url;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\JobEnvironment.java,property name to environment variable name,"private string   (  string name )  {  return  strings . split camel case ( name "" _ "" )  . to upper case (  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\JobEnvironment.java,set branch name,public string branch name )  {  this . branch name = branch name;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\JobEnvironment.java,set build display name,public string build display name )  {  this . build display name = build display name;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\JobEnvironment.java,set build id,public string build id )  {  this . build id = build id;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\JobEnvironment.java,set build number,public string build number )  {  this . build number = build number;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\JobEnvironment.java,set build tag,public string build tag )  {  this . build tag = build tag;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\JobEnvironment.java,set build url,public string build url )  {  this . build url = build url;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\JobEnvironment.java,set git url,public string git url )  {  this . git url = git url;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\JobEnvironment.java,set jenkins url,public string jenkins url )  {  this . jenkins url = jenkins url;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\JobEnvironment.java,set job base name,public string job base name )  {  this . job base name = job base name;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\JobEnvironment.java,set job display url,public string job display url )  {  this . job display url = job display url;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\JobEnvironment.java,set job name,public string job name )  {  this . job name = job name;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\JobEnvironment.java,set job url,public string job url )  {  this . job url = job url;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\JobEnvironment.java,to string,"override public  string   (  )  {  return "" job environment { ""  +  ""build id = '""  +  build id  +  '\'' +  ""  job name = '"" +  job name +  '\'' +  ""  git url = '"" +  git url +  '\'' +  ' } ';  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,jenkin shift client,public config config )  throws  kubernetes client exception  {  super ( config ) ; update http client ( config ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,add objects to item array,"suppress warnings ( ""unchecked"" )  protected static void   (  list destination list  object object )  throws  i o exception  {  if  ( object instanceof  kubernetes list )   {   kubernetes list kubernetes list =  (  kubernetes list ) object;  list <  has metadata >  items = kubernetes list . get items (  ) "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,append summary text,"protected string builder buffer  pod spec pod spec )  {  if  ( pod spec  !  =  null )   {   list <  container >  containers = pod spec . get containers (  ) ; if  ( containers  !  =  null )   {  for  (   container container : containers )   {   string image = container . get image (  ) ; append text ( buffer ""image: ""  +  image ) ;  }   }   }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,append text,"protected string builder buffer  string text )  {  if  ( buffer . length (  )   >  0 )   {  buffer . append ( ""  "" ) ;  }  buffer . append ( text ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,as kubernetes list,public kubernetes list   (  object dto )  throws  i o exception  {  if  ( dto instanceof  kubernetes list )   {  return  (  kubernetes list ) dto;  }  else  {   kubernetes list answer = new  kubernetes list (  ) ;  list <  has metadata >  items = to item list ( dto ) ; answer . set items ( items ) ; return answer;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,combine json,public object   (  object .  .  .  objects )  throws  i o exception  {   kubernetes list list = find or create list ( objects ) ;  list <  has metadata >  items = list . get items (  ) ; if  ( items  =  =  null )   {  items = new  array list <  >  (  ) ; list . set items ( items ) ;  }  for  (   object object : objects )   {  if  ( object  !  =  list )   {  add objects to item array ( items object ) ;  }   }   kubernetes list full list = new  kubernetes list (  ) ; full list . set items ( items ) ; move services to front of array ( items ) ; remove duplicates ( items ) ;  object answer =  templates . combine templates ( full list ) ; items = to item list ( answer ) ; remove duplicates ( items ) ; return answer;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,compare,override public int   (  s r v record a  s r v record b )  {  int ret =  integer . compare ( b . get priority (  )  a . get priority (  )  ) ; if  ( ret  =  =  0 )   {  ret =  integer . compare ( b . get weight (  )  a . get weight (  )  ) ;  }  return ret;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,container name to pod id,public string   (  string container name )  {  return container name;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,create http client,"private ok http client   ( final  config config )  {  try  {   ok http client .  builder http client builder = new  ok http client .  builder (  ) ; http client builder . follow redirects ( true ) ; http client builder . follow ssl redirects ( true ) ; if  ( config . is trust certs (  )  )   {  http client builder . hostname verifier ( new  hostname verifier (  )  {  @ override public boolean verify (   string s   s s l session ssl session )  {  return true;  }   }   ) ;  }  if  ( is not null or empty ( config . get username (  )  )  && is not null or empty ( config . get password (  )  )  )   {  http client builder . add interceptor ( new  interceptor (  )  {  @ override public  response intercept (   chain chain )  throws  i o exception  {   request auth req = chain . request (  )  . new builder (  )  . add header ( "" authorization""  credentials . basic ( config . get username (  )  config . get password (  )  )  )  . build (  ) ; return chain . proceed ( auth req ) ;  }   }   ) ;  }  else if  ( config . get oauth token (  )   !  =  null )   {  http client builder . add interceptor ( new  interceptor (  )  {  @ override public  response intercept (   chain chain )  throws  i o exception  {   request auth req = chain . request (  )  . new builder (  )  . add header ( "" authorization"" "" bearer ""  +  config . get oauth token (  )  )  . build (  ) ; return chain . proceed ( auth req ) ;  }   }   ) ;  }   logger req logger =  logger factory . get logger (  http logging interceptor . class ) ; if  ( req logger . is trace enabled (  )  )   {   http logging interceptor logging interceptor = new  http logging interceptor (  ) ; logging interceptor . set level (  http logging interceptor .  level .  b o d y ) ; http client builder . add network interceptor ( logging interceptor ) ;  }  if  ( config . get connection timeout (  )   >  0 )   {  http client builder . connect timeout ( config . get connection timeout (  )   time unit .  m i l l i s e c o n d s ) ;  }  if  ( config . get request timeout (  )   >  0 )   {  http client builder . read timeout ( config . get request timeout (  )   time unit .  m i l l i s e c o n d s ) ;  }  if  ( config . get user agent (  )   !  =  null &&  ! config . get user agent (  )  . is empty (  )  )   {  http client builder . add network interceptor ( new  interceptor (  )  {  @ override public  response intercept (   chain chain )  throws  i o exception  {   request agent = chain . request (  )  . new builder (  )  . header ( "" user -  agent"" config . get user agent (  )  )  . build (  ) ; return chain . proceed ( agent ) ;  }   }   ) ;  }  return http client builder . build (  ) ;  }  catch  (   exception e )   {  throw  kubernetes client exception . launder throwable ( e ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,create int or string,public int or string   (  string name or number )  {  if  ( is null or blank ( name or number )  )   {  return null;  }  else  {   int or string answer = new  int or string (  ) ;  integer int val = null; try  {  int val =  integer . parse int ( name or number ) ;  }  catch  (   exception e )   {   }  if  ( int val  !  =  null )   {  answer . set int val ( int val ) ; answer . set kind (  i n t o r s t r i n g _  k i n d _  i n t ) ;  }  else  {  answer . set str val ( name or number ) ; answer . set kind (  i n t o r s t r i n g _  k i n d _  s t r i n g ) ;  }  return answer;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,create jenkinshift config,private config   (  string jenkinshift url )  {   config config = new  config (  ) ; config . set master url ( jenkinshift url ) ; return config;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,create jenkinshift open shift client,public open shift client   (  string jenkinshift url )  {   config config = create jenkinshift config ( jenkinshift url ) ;  jenkin shift client jenkin shift client = new  jenkin shift client ( config ) ; jenkin shift client . update http client ( config ) ; return jenkin shift client;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\Pipelines.java,get pipeline,public pipeline   (  kubernetes client kubernetes client  string namespace  job environment job environment )  throws  introspection exception  {   pipeline configuration configuration =  pipeline configuration . load pipeline configuration ( kubernetes client namespace ) ; return configuration . get pipeline ( job environment ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,create namespace service filter,"public filter <  service >    ( final  string namespace )  {  if  ( is null or blank ( namespace )  )   {  return  filters .  <  service > true filter (  ) ;  }  else  {  return new  filter <  service >  (  )  {  public  string to string (  )  {  return "" namespace service filter ( ""  +  namespace  +  "" ) "";  }  public boolean matches (   service entity )  {  return  objects . equal ( namespace get namespace ( entity . get metadata (  )  )  ) ;  }   }  ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,create pod annotation filter,"public filter <  pod >    ( final  map <  string  string >  annotation selector )  {  if  ( annotation selector  =  =  null || annotation selector . is empty (  )  )   {  return  filters .  <  pod > true filter (  ) ;  }  else  {  return new  filter <  pod >  (  )  {  public  string to string (  )  {  return "" pod annotation filter ( ""  +  annotation selector  +  "" ) "";  }  public boolean matches (   pod entity )  {  return filter labels ( annotation selector entity . get metadata (  )  . get annotations (  )  ) ;  }   }  ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,create pod filter,"public filter <  pod >    ( final  map <  string  string >  label selector )  {  if  ( label selector  =  =  null || label selector . is empty (  )  )   {  return  filters .  <  pod > true filter (  ) ;  }  else  {  return new  filter <  pod >  (  )  {  public  string to string (  )  {  return "" pod filter ( ""  +  label selector  +  "" ) "";  }  public boolean matches (   pod entity )  {  return filter labels ( label selector entity . get metadata (  )  . get labels (  )  ) ;  }   }  ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,create replication controller filter,"public filter <  replication controller >    ( final  map <  string  string >  label selector )  {  if  ( label selector  =  =  null || label selector . is empty (  )  )   {  return  filters .  <  replication controller > true filter (  ) ;  }  else  {  return new  filter <  replication controller >  (  )  {  public  string to string (  )  {  return "" replication controller filter ( ""  +  label selector  +  "" ) "";  }  public boolean matches (   replication controller entity )  {  return filter labels ( label selector entity . get metadata (  )  . get labels (  )  ) ;  }   }  ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,create service filter,"public filter <  service >    ( final  map <  string  string >  label selector )  {  if  ( label selector  =  =  null || label selector . is empty (  )  )   {  return  filters .  <  service > true filter (  ) ;  }  else  {  return new  filter <  service >  (  )  {  public  string to string (  )  {  return "" service filter ( ""  +  label selector  +  "" ) "";  }  public boolean matches (   service entity )  {  return filter labels ( label selector entity . get metadata (  )  . get labels (  )  ) ;  }   }  ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,create yaml object mapper,public object mapper   (  )  {   object mapper object mapper = new  object mapper ( new  y a m l factory (  )  ) ; object mapper . set serialization inclusion (  json include .  include .  n o n _  e m p t y ) ; return object mapper;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,default namespace,public string   (  )  {  return  c o n f i g . get namespace (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,filter labels,public map <  string  string >  filter labels  map <  string  string >  labels )  {  if  ( labels  =  =  null )   {  return false;  }   set <  map .  entry <  string  string >  >  entries = filter labels . entry set (  ) ; for  (   map .  entry <  string  string >  entry : entries )   {   string key = entry . get key (  ) ;  string expected value = entry . get value (  ) ;  string actual value = labels . get ( key ) ; if  (  !  objects . equal ( expected value actual value )  )   {  return false;  }   }  return true;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,filter matches id or labels,public string text filter  string id  map <  string  string >  labels )  {   string text = to labels string ( labels ) ; boolean result =  ( text  !  =  null && text . contains ( text filter )  )  ||  ( id  !  =  null && id . contains ( text filter )  ) ; if  (  ! result )   {   map <  string  string >  selector map = to labels map ( text filter ) ; if  (  ! selector map . is empty (  )  && labels  !  =  null &&  ! labels . is empty (  )  )   {  result = true; for  (   map .  entry <  string  string >  entry : selector map . entry set (  )  )   {   string value = labels . get ( entry . get key (  )  ) ; if  ( value  =  =  null ||  ! value . matches ( entry . get value (  )  )  )   {  result = false; break;  }   }   }   }  return result;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,find config resource,private u r l   (  string resource name )  {  return  kubernetes helper . class . get resource ( resource name ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,find container port,public container port   (  pod pod  integer port number )  {   list <  container >  containers =  kubernetes helper . get containers ( pod ) ; for  (   container container : containers )   {   list <  container port >  ports = container . get ports (  ) ; for  (   container port port : ports )   {  if  (  objects . equal ( port number port . get container port (  )  )  )   {  return port;  }   }   }  return null;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,find container port by name,public container port   (  pod pod  string name )  {   list <  container >  containers =  kubernetes helper . get containers ( pod ) ; for  (   container container : containers )   {   list <  container port >  ports = container . get ports (  ) ; for  (   container port port : ports )   {  if  (  objects . equal ( name port . get name (  )  )  )   {  return port;  }   }   }  return null;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,find container port by number or name,public container port   (  pod pod  string number or name )  {   integer port number = to optional number ( number or name ) ; if  ( port number  !  =  null )   {  return find container port ( pod port number ) ;  }  else  {  return find container port by name ( pod number or name ) ;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,find kubernetes resources on classpath,"public list <  has metadata >    (  controller controller )  throws  i o exception  {   string resource name = ""kubernetes . yml"";  open shift client open shift client = controller . get open shift client or null (  ) ; if  ( open shift client  !  =  null && open shift client . supports open shift a p i group (  open shift a p i groups .  i m a g e )  && open shift client . supports open shift a p i group (  open shift a p i groups .  r o u t e )  )   {  resource name = ""openshift . yml"";  }   u r l config url = find config resource ( "" /  m e t a -  i n f / fabric8 / ""  +  resource name ) ; if  ( config url  =  =  null )   {  config url = find config resource ( ""kubernetes . json"" ) ;  }  if  ( config url  !  =  null )   {   string config text =  i o helpers . load fully ( config url ) ;  object dto = null;  string config path = config url . get path (  ) ; if  ( config path . ends with ( "" . yml"" )  || config path . ends with ( "" . yaml"" )  )   {  dto = load yaml ( config text  kubernetes resource . class ) ;  }  else  {  dto = load json ( config text ) ;  }   kubernetes list kube list =  kubernetes helper . as kubernetes list ( dto ) ;  list <  has metadata >  items = kube list . get items (  ) ; return items;  }  else  {  return new  array list <  >  (  ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,find or create list,protected kubernetes list   (  object[] objects )  {   kubernetes list list = null; for  (   object object : objects )   {  if  ( object instanceof  kubernetes list )   {  list =  (  kubernetes list ) object; break;  }   }  if  ( list  =  =  null )   {  list = new  kubernetes list (  ) ;  }  return list;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,find service port by name,public service port   (  service service  string port name )  {  if  (  strings . is null or blank ( port name )  )   {  return service . get spec (  )  . get ports (  )  . iterator (  )  . next (  ) ;  }  for  (   service port service port : service . get spec (  )  . get ports (  )  )   {  if  (  objects . equal ( service port . get name (  )  port name )  )   {  return service port;  }   }  return null;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,get additional property map,"suppress warnings ( ""unchecked"" )  protected static  map <  string  object >    (  map <  string  object >  additional properties  string name )  {  if  ( additional properties  !  =  null )   {   object value = additional properties . get ( name ) ; if  ( value instanceof  map )   {  return  (  map <  string  obje"
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,get additional property text,protected string   (  map <  string  object >  additional properties  string name )  {  if  ( additional properties  !  =  null )   {   object value = additional properties . get ( name ) ; if  ( value  !  =  null )   {  return value . to string (  ) ;  }   }  return null;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,get container env var,public string   (  container container  string env var name )  {  if  ( container  !  =  null )   {   list <  env var >  env = container . get env (  ) ; if  ( env  !  =  null )   {  for  (   env var env var : env )   {  if  (  objects . equal ( env var name env var . get name (  )  )  )   {  return env var . get value (  ) ;  }   }   }   }  return null;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,get container ports,"suppress warnings ( ""unchecked"" )  public static  set <  integer >    (  service service )  {   set <  integer >  answer =  collections .  e m p t y _  s e t;  string id = get name ( service ) ;  service spec spec = service . get spec (  ) ; if  ( spec  !  =  null )   {   list <  service port >  service ports = spec . get ports (  ) ;  ob"
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,get container ports strings,"suppress warnings ( ""unchecked"" )  public static  set <  string >    (  service service )  {   set <  string >  answer =  collections .  e m p t y _  s e t;  string id = get name ( service ) ;  service spec spec = service . get spec (  ) ; if  ( spec  !  =  null )   {   list <  service port >  service ports = spec . get ports (  ) ;  obje"
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,get containers,"suppress warnings ( ""unchecked"" )  public static  list <  container >    (  pod template spec pod template spec )  {  if  ( pod template spec  !  =  null )   {  return get containers ( pod template spec . get spec (  )  ) ;  }  return  collections .  e m p t y _  l i s t;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,get current containers,"suppress warnings ( ""unchecked"" )  public static  map <  string  container status >    (  pod status pod status )  {  if  ( pod status  !  =  null )   {   list <  container status >  container statuses = pod status . get container statuses (  ) ;  map <  string  container status >  info = new  hashtable <  >  ( container s"
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,get docker ip,"public string   (  )  {   string url = resolve docker host (  ) ; int idx = url . index of ( "": /  / "" ) ; if  ( idx  >  0 )   {  url = url . substring ( idx  +  3 ) ;  }  idx = url . index of ( "":"" ) ; if  ( idx  >  0 )   {  url = url . substring ( 0 idx ) ;  }  return url;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,get filtered pod map,public map <  string  pod >    (  kubernetes client kubernetes  string namespace  filter <  pod >  filter )  {  return to filtered pod map ( kubernetes . pods (  )  . in namespace ( namespace )  . list (  )  filter ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,get host,public string   (  pod pod )  {  if  ( pod  !  =  null )   {   pod status current state = pod . get status (  ) ; if  ( current state  !  =  null )   {  return current state . get host i p (  ) ;  }   }  return null;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,get kind,"public string   (  has metadata entity )  {  if  ( entity  !  =  null )   {  if  ( entity instanceof  kubernetes list )   {  return "" list"";  }  else  {  return entity . get class (  )  . get simple name (  ) ;  }   }  else  {  return null;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,get labels,"suppress warnings ( ""unchecked"" )  public static  map <  string  string >    (  has metadata entity )  {  if  ( entity  !  =  null )   {  return get labels ( entity . get metadata (  )  ) ;  }  return  collections .  e m p t y _  m a p;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,get metadata,"protected map <  string  object >    (  map <  string  object >  additional properties boolean create )  {   map <  string  object >  answer = get additional property map ( additional properties ""metadata"" ) ; if  ( answer  =  =  null )   {  answer = new  linked hash map <  >  (  ) ; if  ( create )   {  additional properties . put ( ""metadata"" answer ) ;  }   }  return answer;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,get name,public string   (  has metadata entity )  {  if  ( entity  !  =  null )   {  return get name ( entity . get metadata (  )  ) ;  }  else  {  return null;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,get namespace,public string   (  kubernetes client kubernetes client )  {   string answer = kubernetes client . get namespace (  ) ; if  (  strings . is null or blank ( answer )  )   {  answer = default namespace (  ) ;  }  return answer;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,get object id,public string   (  object object )  {  if  ( object instanceof  has metadata )   {  return get name (  (  has metadata ) object ) ;  }  else  {  return object  !  =  null  ?  object . to string (  )  : null;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,get or create annotations,public map <  string  string >    (  has metadata entity )  {   object meta metadata = get or create metadata ( entity ) ;  map <  string  string >  answer = metadata . get annotations (  ) ; if  ( answer  =  =  null )   {  answer = new  linked hash map <  >  (  ) ; metadata . set annotations ( answer ) ;  }  return answer;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,get or create labels,public map <  string  string >    (  has metadata entity )  {   object meta metadata = get or create metadata ( entity ) ;  map <  string  string >  answer = metadata . get labels (  ) ; if  ( answer  =  =  null )   {  answer = new  linked hash map <  >  (  ) ; metadata . set labels ( answer ) ;  }  return answer;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,get or create metadata,public object meta   (  has metadata entity )  {   object meta metadata = entity . get metadata (  ) ; if  ( metadata  =  =  null )   {  metadata = new  object meta (  ) ; entity . set metadata ( metadata ) ;  }  return metadata;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,get or create spec,public service spec   (  service entity )  {   service spec spec = entity . get spec (  ) ; if  ( spec  =  =  null )   {  spec = new  service spec (  ) ; entity . set spec ( spec ) ;  }  return spec;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,get pod env var,public string   (  pod pod  string env var name )  {  if  ( pod  !  =  null )   {   pod spec spec = pod . get spec (  ) ; if  ( spec  !  =  null )   {   list <  container >  containers = spec . get containers (  ) ; if  ( containers  !  =  null )   {  for  (   container container : containers )   {   string answer = get container env var ( container env var name ) ; if  (  strings . is not blank ( answer )  )   {  return answer;  }   }   }   }   }  return null;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,get pod map,public map <  string  pod >    (  kubernetes client kubernetes  string namespace )  {   pod list pods = null; try  {  pods = kubernetes . pods (  )  . in namespace ( namespace )  . list (  ) ;  }  catch  (   kubernetes client exception e )   {  if  ( e . get code (  )   =  =  404 )   {   }  else  {  throw e;  }   }  return to pod map ( pods ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,get pod status,"public pod status type   (  pod pod )  {   string text = get pod status text ( pod ) ; if  (  strings . is not blank ( text )  )   {  text = text . to lower case (  ) ; if  ( text . starts with ( ""run"" )  )   {  return  pod status type .  o k;  }  else if  ( text . starts with ( ""wait"" )  )   {  return  pod status type .  w a i t;  }  else  {  return  pod status type .  e r r o r;  }   }  return  pod status type .  w a i t;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,get pod status text,public string   (  pod pod )  {  if  ( pod  !  =  null )   {   pod status pod status = pod . get status (  ) ; if  ( pod status  !  =  null )   {  return pod status . get phase (  ) ;  }   }  return null;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,get pods for replication controller,"suppress warnings ( ""unchecked"" )  public static  list <  pod >    (  replication controller replication controller  iterable <  pod >  pods )  {   replication controller spec replication controller spec = replication controller . get spec (  ) ; if  ( replication controller spec  =  =  null )   {   l o g . war"
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,get pods for service,public list <  pod >    (  service service  iterable <  pod >  pods )  {   map <  string  string >  selector = get selector ( service ) ;  filter <  pod >  pod filter =  kubernetes helper . create pod filter ( selector ) ; return  filters . filter ( pods pod filter ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,get portal i p,public string   (  service entity )  {   string answer = null; if  ( entity  !  =  null )   {   service spec spec = get or create spec ( entity ) ; return spec . get cluster i p (  ) ;  }  return answer;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,get ports,public set <  integer >    (  service entity )  {   set <  integer >  answer = new  hash set <  >  (  ) ; if  ( entity  !  =  null )   {   service spec spec = get or create spec ( entity ) ; for  (   service port port : spec . get ports (  )  )   {  answer . add ( port . get port (  )  ) ;  }   }  return answer;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,get qualified name,"public string   (  has metadata entity )  {  if  ( entity  !  =  null )   {  return """"  +  get namespace ( entity )   +  "" / "" +  get name ( entity ) ;  }  else  {  return null;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,get replication controller map,public map <  string  replication controller >    (  kubernetes client kubernetes  string namespace )  {  return to replication controller map ( kubernetes . replication controllers (  )  . in namespace ( namespace )  . list (  )  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,get resource version,public string   (  has metadata entity )  {  if  ( entity  !  =  null )   {   object meta metadata = entity . get metadata (  ) ; if  ( metadata  !  =  null )   {   string resource version = metadata . get resource version (  ) ; if  (  strings . is not blank ( resource version )  )   {  return resource version;  }   }   }  return null;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,get selected pod map,public map <  string  pod >    (  kubernetes client kubernetes  string namespace  string selector )  {  return get filtered pod map ( kubernetes namespace create pod filter ( selector )  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,get selected replication controller map,public map <  string  replication controller >    (  kubernetes client kubernetes  string namespace  string selector )  {  return to replication controller map ( kubernetes . replication controllers (  )  . in namespace ( namespace )  . with labels ( to labels map ( selector )  )  . list (  )  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,get selector,"suppress warnings ( ""unchecked"" )  public static  map <  string  string >    (  service entity )  {   map <  string  string >  answer = null; if  ( entity  !  =  null )   {   service spec spec = get or create spec ( entity ) ; answer = spec . get selector (  ) ;  }  return answer  !  =  null  ?  answer :  collections .  e m"
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,get service map,public map <  string  service >    (  kubernetes client kubernetes  string namespace )  {  return to service map ( kubernetes . services (  )  . in namespace ( namespace )  . list (  )  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,get service u r l,"public string   (  kubernetes client client  string service name  string service namespace  string service protocol  string service port name boolean service external )  {   service srv = null;  string service host =  kubernetes services . service to host or blank ( service name ) ;  string service port =  kubernetes services . service to port or blank ( service name service port name ) ;  string service proto = service protocol  !  =  null  ?  service protocol :  kubernetes services . service to protocol ( service name service port ) ;  string actual namespace =  strings . is not blank ( service namespace )   ?  service namespace : client . get namespace (  ) ; if  (  ! service external &&  strings . is not blank ( service host )  &&  strings . is not blank ( service port ) &&  strings . is not blank ( service protocol )  )   {  return service protocol  +  "": /  / ""  +  service host +  "":"" +  service port;  }  else if  (  strings . is not blank ( actual namespace )  )   {  try  {  srv = client . services (  )  . in namespace ( actual namespace )  . with name ( service name )  . get (  ) ;  }  catch  (   exception e )   {   l o g g e r . warn ( "" could not lookup service:""  +  service name  +  "" in namespace:"" +  actual namespace +  ""  due to: "" +  e . get message (  )  ) ;  }   }  if  ( srv  =  =  null )   {   string host and port =  systems . get service host and port ( service name """" """" ) ; if  (  ! host and port . starts with ( "":"" )  )   {  return service proto  +  "": /  / ""  +  host and port;  }   }  if  ( srv  =  =  null )   {  throw new  illegal argument exception ( "" no kubernetes service could be found for name: ""  +  service name  +  "" in namespace: "" +  actual namespace ) ;  }   string answer = get or create annotations ( srv )  . get (  annotations .  service .  e x p o s e _  u r l ) ; if  (  strings . is not blank ( answer )  )   {  return answer;  }  try  {  if  (  strings . is null or blank ( service port name )  && is open shift ( client )  )   {   open shift client open shift client = client . adapt (  open shift client . class ) ;  route route = open shift client . routes (  )  . in namespace ( actual namespace )  . with name ( service name )  . get (  ) ; if  ( route  !  =  null )   {  return  ( service proto  +  "": /  / ""  +  route . get spec (  )  . get host (  )  )  . to lower case (  ) ;  }   }   }  catch  (   kubernetes client exception e )   {  if  ( e . get code (  )   =  =  403 )   {   l o g g e r . warn ( "" could not lookup route:""  +  service name  +  "" in namespace:"" +  actual namespace +  ""  due to: "" +  e . get message (  )  ) ;  }  else  {  throw e;  }   }   service port port = find service port by name ( srv service port name ) ; if  ( port  =  =  null )   {  throw new  runtime exception ( "" couldn't find port: ""  +  service port name  +  "" for service:"" +  service name ) ;  }   string cluster i p = srv . get spec (  )  . get cluster i p (  ) ; if  ( "" none"" . equals ( cluster i p )  )   {  throw new  illegal state exception ( "" service: ""  +  service name  +  "" in namespace:"" +  service namespace +  ""is head - less .   search for endpoints instead . "" ) ;  }   integer port number = port . get port (  ) ; if  (  strings . is null or blank ( cluster i p )  )   {   ingress list ingresses = client . extensions (  )  . ingresses (  )  . in namespace ( service namespace )  . list (  ) ; if  ( ingresses  !  =  null )   {   list <  ingress >  items = ingresses . get items (  ) ; if  ( items  !  =  null )   {  for  (   ingress item : items )   {   string ns = get namespace ( item ) ; if  (  objects . equal ( service namespace ns )  )   {   ingress spec spec = item . get spec (  ) ; if  ( spec  !  =  null )   {   list <  ingress rule >  rules = spec . get rules (  ) ;  list <  ingress t l s >  tls = spec . get tls (  ) ; if  ( rules  !  =  null )   {  for  (   ingress rule rule : rules )   {   h t t p ingress rule value http = rule . get http (  ) ; if  ( http  !  =  null )   {   list <  h t t p ingress path >  paths = http . get paths (  ) ; if  ( paths  !  =  null )   {  for  (   h t t p ingress path path : paths )   {   ingress backend backend = path . get backend (  ) ; if  ( backend  !  =  null )   {   string backend service name = backend . get service name (  ) ; if  ( service name . equals ( backend service name )  && ports match ( port backend . get service port (  )  )  )   {   string path postfix = path . get path (  ) ; if  ( tls  !  =  null )   {  for  (   ingress t l s tls host : tls )   {   list <  string >  hosts = tls host . get hosts (  ) ; if  ( hosts  !  =  null )   {  for  (   string host : hosts )   {  if  (  strings . is not blank ( host )  )   {  if  (  strings . is null or blank ( path postfix )  )   {  path postfix = "" / "";  }  return ""https: /  / ""  +   u r l utils . path join ( host path postfix ) ;  }   }   }   }   }  answer = rule . get host (  ) ; if  (  strings . is not blank ( answer )  )   {  if  (  strings . is null or blank ( path postfix )  )   {  path postfix = "" / "";  }  return ""http: /  / ""  +   u r l utils . path join ( answer path postfix ) ;  }   }   }   }   }   }   }   }   }   }   }   }   }   service status status = srv . get status (  ) ; if  ( status  !  =  null )   {   load balancer status load balancer status = status . get load balancer (  ) ; if  ( load balancer status  !  =  null )   {   list <  load balancer ingress >  load balancer ingresses = load balancer status . get ingress (  ) ; if  ( load balancer ingresses  !  =  null )   {  for  (   load balancer ingress load balancer ingress : load balancer ingresses )   {   string ip = load balancer ingress . get ip (  ) ; if  (  strings . is not blank ( ip )  )   {  cluster i p = ip; break;  }   }   }   }   }   }  if  (  strings . is null or blank ( cluster i p )  )   {  boolean found = false;  integer node port = port . get node port (  ) ; if  ( node port  !  =  null )   {  try  {   node list node list = client . nodes (  )  . list (  ) ; if  ( node list  !  =  null )   {   list <  node >  items = node list . get items (  ) ; if  ( items  !  =  null )   {  for  (   node item : items )   {   node status status = item . get status (  ) ; if  (  ! found && status  !  =  null )   {   list <  node address >  addresses = status . get addresses (  ) ; if  ( addresses  !  =  null )   {  for  (   node address address : addresses )   {   string ip = address . get address (  ) ; if  (  strings . is not blank ( ip )  )   {  cluster i p = ip; port number = node port; found = true; break;  }   }   }   }  if  (  ! found )   {   node spec spec = item . get spec (  ) ; if  ( spec  !  =  null )   {  cluster i p = spec . get external i d (  ) ; if  (  strings . is not blank ( cluster i p )  )   {  port number = node port; break;  }   }   }   }   }   }   }  catch  (   exception e )   {   l o g . warn ( "" could not find a node ! : ""  +  e e ) ;  }   }   }  return  ( service proto  +  "": /  / ""  +  cluster i p +  "":"" +  port number )  . to lower case (  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,get service u r l in current namespace,"public string   (  kubernetes client client  string service name  string service protocol  string service port name boolean service external )  {   service srv = null;  string service host =  kubernetes services . service to host or blank ( service name ) ;  string service port =  kubernetes services . service to port or blank ( service name service port name ) ;  string service proto = service protocol  !  =  null  ?  service protocol :  kubernetes services . service to protocol ( service name service port ) ; if  (  ! service external &&  strings . is not blank ( service host )  &&  strings . is not blank ( service port ) &&  strings . is not blank ( service protocol )  )   {  return service protocol  +  "": /  / ""  +  service host +  "":"" +  service port;  }  else  {  srv = client . services (  )  . with name ( service name )  . get (  ) ;  }  if  ( srv  =  =  null )   {  throw new  illegal argument exception ( "" no kubernetes service could be found for name: ""  +  service name ) ;  }  if  (  strings . is null or blank ( service port name )  && is open shift ( client )  )   {   open shift client open shift client = client . adapt (  open shift client . class ) ;  route list route list = open shift client . routes (  )  . list (  ) ; for  (   route route : route list . get items (  )  )   {  if  ( route . get spec (  )  . get to (  )  . get name (  )  . equals ( service name )  )   {  return  ( service proto  +  "": /  / ""  +  route . get spec (  )  . get host (  )  )  . to lower case (  ) ;  }   }   }   service port port = find service port by name ( srv service port name ) ; if  ( port  =  =  null )   {  throw new  runtime exception ( "" couldn't find port: ""  +  service port name  +  "" for service:"" +  service name ) ;  }   string cluster i p = srv . get spec (  )  . get cluster i p (  ) ; if  ( "" none"" . equals ( cluster i p )  )   {  throw new  illegal state exception ( "" service: ""  +  service name  +  "" in current namespace is head - less .   search for endpoints instead . "" ) ;  }  return  ( service proto  +  "": /  / ""  +  cluster i p +  "":"" +  port . get port (  )  )  . to lower case (  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,get status text,public string   (  pod status pod status )  {   string status;  list <  string >  status list = new  array list <  >  (  ) ;  list <  container status >  container statuses = pod status . get container statuses (  ) ; for  (   container status container status : container statuses )   {   container state state = container status . get state (  ) ;  string status text = summary text ( state ) ; if  ( status text  !  =  null )   {  status list . add ( status text ) ;  }   }  if  ( status list . size (  )   =  =  1 )   {  status = status list . get ( 0 ) ;  }  else  {  status = status list . to string (  ) ;  }  return status;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,has resource version,public has metadata entity )  {  return get resource version ( entity )   !  =  null;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,int or string to integer,"public integer   (  int or string int or string value  string message )  {   integer int value = int or string value . get int val (  ) ; if  ( int value  =  =  null )   {   string container port text = int or string value . get str val (  ) ; if  (  strings . is null or blank ( container port text )  )   {  throw new  illegal argument exception ( "" no port for ""  +  message ) ;  }  try  {  int value =  integer . parse int ( container port text ) ;  }  catch  (   number format exception e )   {  throw new  illegal state exception ( "" invalid service ports expression ""  +  container port text  +  "" for "" +  message +  "" .  "" +  e e ) ;  }   }  return int value;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,intercept,"override public  response   (  chain chain )  throws  i o exception  {   request agent = chain . request (  )  . new builder (  )  . header ( "" user -  agent"" config . get user agent (  )  )  . build (  ) ; return chain . proceed ( agent ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,is empty value,private json node value )  {  if  ( value . is array (  )  )   {  int size = value . size (  ) ; return size  =  =  0;  }  if  ( value . is textual (  )  )   {   string text = value . text value (  ) ; return is null or blank ( text ) ;  }  if  ( value . is object (  )  )   {  remove null or empty values ( value ) ;  iterator <  string >  iter = value . field names (  ) ; int count = 0; while  ( iter . has next (  )  )   {  iter . next (  ) ; count +  + ;  }  return count  =  =  0;  }  return false;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,is open shift,"public kubernetes client client )  {   u r l master url = client . get master url (  ) ; if  (  i s _  o p e n s h i f t . contains key ( master url )  )   {  return  i s _  o p e n s h i f t . get ( master url ) ;  }  else  {   root paths root paths = client . root paths (  ) ; if  ( root paths  !  =  null )   {   list <  string >  paths = root paths . get paths (  ) ; if  ( paths  !  =  null )   {  for  (   string path : paths )   {  if  ( java . util .  objects . equals ( "" / oapi"" path )  || java . util .  objects . equals ( ""oapi"" path )  )   {   i s _  o p e n s h i f t . put if absent ( master url true ) ; return true;  }   }   }   }   }   i s _  o p e n s h i f t . put if absent ( master url false ) ; return false;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,is pod ready,"public pod pod )  {  if  (  ! is pod running ( pod )  )   {  return false;  }   pod status pod status = pod . get status (  ) ; if  ( pod status  =  =  null )   {  return true;  }   list <  pod condition >  conditions = pod status . get conditions (  ) ; if  ( conditions  =  =  null || conditions . is empty (  )  )   {  return true;  }  for  (   pod condition condition : conditions )   {  if  ( ""ready"" . equals ignore case ( condition . get type (  )  )  )   {  return  boolean . parse boolean ( condition . get status (  )  ) ;  }   }  return true;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,is pod running,public pod pod )  {   pod status type status = get pod status ( pod ) ; return  objects . equal ( status  pod status type .  o k ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,is pure kubernetes,"public has metadata item )  {  if  ( item  !  =  null )   {   string name = item . get class (  )  . get name (  ) ; return name . starts with ( ""io . fabric8 . kubernetes"" ) ;  }  return false;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,is service ssl,"public string host int port boolean trust all certs )  {  try  {   l o g . info ( "" checking if a service is  s s l on ""  +  host  +  "":"" +  port ) ;  s s l socket factory sslsocketfactory; if  ( trust all certs )   {  sslsocketfactory =  trust everything s s l trust manager . get trusting s s l socket factory (  ) ;  }  else  {  sslsocketfactory =  (  s s l socket factory )  s s l socket factory . get default (  ) ;  }   socket socket = sslsocketfactory . create socket (  ) ; socket . connect ( new  inet socket address ( host port )  1 * 1000 ) ; try  {   input stream in = socket . get input stream (  ) ;  output stream out = socket . get output stream (  ) ; out . write ( 1 ) ; while  ( in . available (  )   >  0 )   {   system . out . print ( in . read (  )  ) ;  }  return true;  }  finally  {   l o g . info ( "" checked if a service is  s s l on ""  +  host  +  "":"" +  port ) ; socket . close (  ) ;  }   }  catch  (   s s l handshake exception e )   {   l o g . error ( "" s s l handshake failed  -  this probably means that you need to trust the kubernetes root  s s l certificate or set the environment variable ""  +   utils . convert system property name to env var ( io . fabric8 . kubernetes . client .  config .  k u b e r n e t e s _  t r u s t _  c e r t _  s y s t e m _  p r o p e r t y )  e ) ;  }  catch  (   s s l protocol exception e )   {   l o g . error ( "" s s l protocol error"" e ) ;  }  catch  (   s s l key exception e )   {   l o g . error ( "" bad  s s l key"" e ) ;  }  catch  (   s s l peer unverified exception e )   {   l o g . error ( "" could not verify server"" e ) ;  }  catch  (   s s l exception e )   {   l o g . debug ( "" address does not appear to be  s s l - enabled  -  falling back to http"" e ) ;  }  catch  (   i o exception e )   {   l o g . debug ( "" failed to validate service"" e ) ;  }  return false;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,load json,public object   ( byte[] json )  throws  i o exception  {  if  ( json  !  =  null && json . length  >  0 )   {  return  o b j e c t _  m a p p e r . reader for (  kubernetes resource . class )  . read value ( json ) ;  }  return null;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,load yaml,public t >  t   ( byte[] data  class <  t >  clazz )  throws  i o exception  {   object mapper mapper = create yaml object mapper (  ) ; return mapper . read value ( data clazz ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,lookup service endpoints in dns,"public list <  string >    (  string service name )  throws  illegal argument exception   unknown host exception  {  try  {   lookup l = new  lookup ( service name  type .  s r v ) ;  record[] records = l . run (  ) ; if  ( l . get result (  )   =  =   lookup .  s u c c e s s f u l )   {   s r v record[] srv records =  arrays . copy of ( records records . length  s r v record[] . class ) ;  arrays . sort ( srv records new  comparator <  s r v record >  (  )  {  @ override public int compare (   s r v record a   s r v record b )  {  int ret =  integer . compare ( b . get priority (  )  a . get priority (  )  ) ; if  ( ret  =  =  0 )   {  ret =  integer . compare ( b . get weight (  )  a . get weight (  )  ) ;  }  return ret;  }   }   ) ;  list <  string >  endpoint addresses = new  array list <  >  ( srv records . length ) ; for  (   s r v record srv record : srv records )   {  endpoint addresses . add ( srv record . get target (  )  . to string ( true )  . concat ( "":"" )  . concat (  string . value of ( srv record . get port (  )  )  )  ) ;  }  return endpoint addresses;  }  else  {   l o g . warn ( "" lookup  {  }  result:  {  } "" service name l . get error string (  )  ) ;  }   }  catch  (   text parse exception e )   {   l o g . error ( "" unparseable service name:  {  } "" service name e ) ;  }  catch  (   class cast exception e )   {   l o g . error ( "" invalid response from  d n s server  -  should have been  a records"" e ) ;  }  return  collections .  e m p t y _  l i s t;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,lookup service in dns,"public set <  string >    (  string service name )  throws  illegal argument exception   unknown host exception  {  try  {   lookup l = new  lookup ( service name ) ;  record[] records = l . run (  ) ; if  ( l . get result (  )   =  =   lookup .  s u c c e s s f u l )   {   set <  string >  endpoint addresses = new  hash set <  >  ( records . length ) ; for  ( int i = 0; i  <  records . length; i +  +  )   {   a record a record =  (  a record ) records[i]; endpoint addresses . add ( a record . get address (  )  . get host address (  )  ) ;  }  return endpoint addresses;  }  else  {   l o g . warn ( "" lookup  {  }  result:  {  } "" service name l . get error string (  )  ) ;  }   }  catch  (   text parse exception e )   {   l o g . error ( "" unparseable service name:  {  } "" service name e ) ;  }  catch  (   class cast exception e )   {   l o g . error ( "" invalid response from  d n s server  -  should have been  a records"" e ) ;  }  return  collections .  e m p t y _  s e t;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,matches,public replication controller entity )  {  return filter labels ( label selector entity . get metadata (  )  . get labels (  )  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,move services to front of array,public list <  has metadata >  list )  {  int size = list . size (  ) ; int last non service =  - 1; for  ( int i = 0; i  <  size; i +  +  )   {   has metadata item = list . get ( i ) ; if  ( item instanceof  service )   {  if  ( last non service  >  =  0 )   {   has metadata non service = list . get ( last non service ) ; list . set ( i non service ) ; list . set ( last non service item ) ; last non service +  + ;  }   }  else if  ( last non service  <  0 )   {  last non service = i;  }   }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,parse date,"public date   (  string text )  {  try  {  return new  simple date format (  d a t e _  t i m e _  f o r m a t )  . parse ( text ) ;  }  catch  (   parse exception e )   {   l o g . warn ( "" failed to parse date: ""  +  text  +  "" .   reason: "" +  e ) ; return null;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,ports match,private service port service port  int or string int or string )  {  if  ( int or string  !  =  null )   {   integer port = service port . get port (  ) ;  integer int val = int or string . get int val (  ) ;  string str val = int or string . get str val (  ) ; if  ( int val  !  =  null )   {  if  ( port  !  =  null )   {  return port . int value (  )   =  =  int val . int value (  ) ;  }  else  {   }   }  else if  ( str val  !  =  null )   {  return  objects . equal ( str val service port . get name (  )  ) ;  }   }  return false;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,remove duplicates,"protected list <  has metadata >  item array )  {  int size = item array . size (  ) ; int last non service =  - 1;  set <  string >  keys = new  hash set <  >  (  ) ; for  ( int i = 0; i  <  size; i +  +  )   {   has metadata item = item array . get ( i ) ; if  ( item  =  =  null )   {  item array . remove ( i ) ; i -  - ; size -  - ;  }  else  {   string id = get object id ( item ) ;  string kind = item . get class (  )  . get simple name (  ) ; if  (  strings . is not blank ( id )  )   {   string key = kind  +  "":""  +  id; if  (  ! keys . add ( key )  )   {  item array . remove ( i ) ; i -  - ; size -  - ;  }   }   }   }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,remove empty pods,public pod list pod schema )  {   list <  pod >  list = not null list ( pod schema . get items (  )  ) ;  list <  pod >  remove items = new  array list <  pod >  (  ) ; for  (   pod pod : list )   {  if  (  strings . is null or blank ( get name ( pod )  )  )   {  remove items . add ( pod ) ;  }   }  list . remove all ( remove items ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,remove null or empty values,private json node json node )  {  if  ( json node instanceof  object node )   {   list <  string >  remove fields = new  array list <  >  (  ) ;  object node object =  (  object node ) json node; for  (  iterator <  string >  iter = object . field names (  ) ; iter . has next (  ) ;  )   {   string field = iter . next (  ) ;  json node value = object . get ( field ) ; if  ( is empty value ( value )  )   {  remove fields . add ( field ) ;  }  else  {  remove null or empty values ( value ) ; ;  }   }  for  (   string field : remove fields )   {  object . remove ( field ) ;  }   }  else if  ( json node instanceof  array node )   {   array node array node =  (  array node ) json node; for  ( int i = 0  size = array node . size (  ) ; i  <  size; i +  +  )   {   json node value = array node . get ( i ) ; remove null or empty values ( value ) ;  }   }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,resolve docker host,"public string   (  )  {   string docker host =  system . getenv ( "" d o c k e r _  h o s t"" ) ; if  ( is null or blank ( docker host )  )   {  docker host =  system . get property ( ""docker . host"" ) ;  }  if  ( is null or blank ( docker host )  )   {  return  d e f a u l t _  d o c k e r _  h o s t;  }  else  {  return docker host;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,save json,public file json  object object )  throws  i o exception  {   o b j e c t _  m a p p e r . writer (  )  . with default pretty printer (  )  . write value ( json object ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,save yaml,public object data  file object file object )  throws  i o exception  {   object mapper mapper = create yaml object mapper (  ) ; try  (  writer writer = file object . open writer (  )  )  {  mapper . write value ( writer data ) ;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,save yaml not empty,public has metadata entity  file out file )  throws  i o exception  {   string yaml = to yaml ( entity ) ;  object mapper object mapper = create yaml object mapper (  ) ;  json node json node = object mapper . read tree ( yaml ) ; remove null or empty values ( json node ) ; object mapper . write value ( out file json node ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,set name,public has metadata entity  string namespace  string name )  {   object meta metadata = get or create metadata ( entity ) ; metadata . set namespace ( namespace ) ; metadata . set name ( name ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,set namespace,public has metadata entity  string namespace )  {  get or create metadata ( entity )  . set namespace ( namespace ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,set selector,public service entity  map <  string  string >  labels )  {   service spec spec = get or create spec ( entity ) ; spec . set selector ( labels ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,summary text,public string   (  pod entity )  {   string builder buffer = new  string builder (  ) ;  pod spec pod spec = entity . get spec (  ) ; append summary text ( buffer pod spec ) ; return buffer . to string (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,to filtered pod map,protected map <  string  pod >    (  pod list pod schema  filter <  pod >  filter )  {   list <  pod >  list = pod schema  !  =  null  ?  pod schema . get items (  )  : null;  list <  pod >  filtered list =  filters . filter ( list filter ) ; return to pod map ( filtered list ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,to filtered replication controller map,protected map <  string  replication controller >    (  replication controller list replication controller schema  filter <  replication controller >  filter )  {   list <  replication controller >  list = replication controller schema  !  =  null  ?  replication controller schema . get items (  )  : null;  list <  replication controller >  filtered list =  filters . filter ( list filter ) ; return to replication controller map ( filtered list ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,to filtered service map,public map <  string  service >    (  service list service list  filter <  service >  filter )  {   list <  service >  list = service list  !  =  null  ?  service list . get items (  )  : null;  list <  service >  filtered list =  filters . filter ( list filter ) ; return to service map ( filtered list ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,to item list,"suppress warnings ( ""unchecked"" )  public static  list <  has metadata >    (  object entity )  throws  i o exception  {  if  ( entity instanceof  list )   {  return  (  list <  has metadata >  ) entity;  }  else if  ( entity instanceof  has metadata[] )   {   has metadata[] array =  (  has metadata[] ) entity; r"
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,to json,"public string   (  object dto )  throws  json processing exception  {  if  ( dto  =  =  null )   {  return ""null"";  }   class <  ?  >  clazz = dto . get class (  ) ; return  o b j e c t _  m a p p e r . writer for ( clazz )  . write value as string ( dto ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,to labels map,"public map <  string  string >    (  string labels )  {   map <  string  string >  map = new  hash map <  >  (  ) ; if  ( labels  !  =  null &&  ! labels . is empty (  )  )   {   string[] elements = labels . split ( "" "" ) ; if  ( elements . length  >  0 )   {  for  (   string str : elements )   {   string[] key value = str . split ( "" = "" ) ; if  ( key value . length  =  =  2 )   {   string key = key value[0];  string value = key value[1]; if  ( key  !  =  null && value  !  =  null )   {  map . put ( key . trim (  )  value . trim (  )  ) ;  }   }   }   }   }  return map;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,to labels string,"public string   (  map <  string  string >  label map )  {   string builder buffer = new  string builder (  ) ; if  ( label map  !  =  null )   {   set <  map .  entry <  string  string >  >  entries = label map . entry set (  ) ; for  (   map .  entry <  string  string >  entry : entries )   {  if  ( buffer . length (  )   >  0 )   {  buffer . append ( "" "" ) ;  }  buffer . append ( entry . get key (  )  ) ; buffer . append ( "" = "" ) ; buffer . append ( entry . get value (  )  ) ;  }   }  return buffer . to string (  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,to optional number,protected integer   (  string text )  {  if  (  strings . is not blank ( text )  )   {  try  {  return  integer . parse int ( text ) ;  }  catch  (   number format exception e )   {   }   }  return null;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,to pod map,public map <  string  pod >    (  list <  pod >  pods )  {   list <  pod >  list = not null list ( pods ) ;  map <  string  pod >  answer = new  hash map <  >  (  ) ; for  (   pod pod : list )   {   string id = get name ( pod ) ; if  (  strings . is not blank ( id )  )   {  answer . put ( id pod ) ;  }   }  return answer;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,to positive non zero text,"public string   (  integer port )  {  if  ( port  !  =  null )   {  int value = port; if  ( value  >  0 )   {  return """"  +  value;  }   }  return """";  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,to pretty json,"public string   (  object dto )  throws  json processing exception  {  if  ( dto  =  =  null )   {  return ""null"";  }   class <  ?  >  clazz = dto . get class (  ) ;  object mapper object mapper = new  object mapper (  ) ; object mapper . enable (  serialization feature .  i n d e n t _  o u t p u t ) ; return object mapper . writer for ( clazz )  . write value as string ( dto ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,to replication controller map,public map <  string  replication controller >    (  list <  replication controller >  replication controllers )  {   list <  replication controller >  list = not null list ( replication controllers ) ;  map <  string  replication controller >  answer = new  hash map <  >  (  ) ; for  (   replication controller replication controller schema : list )   {   string id = get name ( replication controller schema ) ; if  (  strings . is not blank ( id )  )   {  answer . put ( id replication controller schema ) ;  }   }  return answer;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,to service map,public map <  string  service >    (  list <  service >  services )  {   list <  service >  list = not null list ( services ) ;  map <  string  service >  answer = new  hash map <  >  (  ) ; for  (   service service : list )   {   string id = get name ( service ) ; if  (  strings . is not blank ( id )  )   {  answer . put ( id service ) ;  }   }  return answer;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,to string,"public string   (  )  {  return "" replication controller filter ( ""  +  label selector  +  "" ) "";  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,to yaml,public string   (  object data )  throws  i o exception  {   object mapper mapper = create yaml object mapper (  ) ; return mapper . write value as string ( data ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,update http client,protected config config )  {  this . http client = create http client ( config ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,validate kubernetes id,"public string   (  string current value  string description )  throws  illegal argument exception  {  if  ( is null or blank ( current value )  )   {  throw new  illegal argument exception ( "" no ""  +  description  +  "" is specified ! "" ) ;  }  int size = current value . length (  ) ; for  ( int i = 0; i  <  size; i +  +  )   {  char ch = current value . char at ( i ) ; if  (  character . is upper case ( ch )  )   {  throw new  illegal argument exception ( "" invalid upper case letter '""  +  ch  +  ""' at index "" +  i +  "" for "" +  description +  "" value: "" +  current value ) ;  }   }  return current value;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,validate secret exists,"public secret   (  kubernetes client kubernetes  string namespace  string secret name )  {   secret secret = null; try  {  secret = kubernetes . secrets (  )  . in namespace ( namespace )  . with name ( secret name )  . get (  ) ;  }  catch  (   kubernetes client exception e )   {  if  ( e . get code (  )   =  =  404 || e . get code (  )   =  =  403 )   {   }  else  {  throw e;  }   }  if  ( secret  =  =  null )   {  throw new  illegal argument exception ( "" no secret named: ""  +  secret name  +  "" for namespace "" +  namespace +  "" is available on  kubernetes"" +  "" .   for how to create secrets see: http: /  / fabric8 . io / guide / fabric8 on open shift . html#requirements "" ) ;  }  else  {  return secret;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,verify,override public boolean   (  string s  s s l session ssl session )  {  return true;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\spaces\Space.java,compare to,override public int   (  space that )  {  int answer = this . order (  )   -  that . order (  ) ; if  ( answer  =  =  0 )   {  answer = this . name . compare to ( that . name ) ;  }  return answer;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\spaces\Space.java,get creator,public string   (  )  {  return creator;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\spaces\Space.java,get description,public string   (  )  {  return description;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\spaces\Space.java,get id,public string   (  )  {  return id;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\spaces\Space.java,get name,public string   (  )  {  return name;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\spaces\Space.java,get order,public integer   (  )  {  return order;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\spaces\Space.java,get version,public string   (  )  {  return version;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\spaces\Space.java,order,public value (  )  :  integer .  m a x _  v a l u e;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\spaces\Space.java,set creator,public string creator )  {  this . creator = creator;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\spaces\Space.java,set description,public string description )  {  this . description = description;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\spaces\Space.java,set id,public string id )  {  this . id = id;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\spaces\Space.java,set name,public string name )  {  this . name = name;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\spaces\Space.java,set order,public integer order )  {  this . order = order;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\spaces\Space.java,set version,public string version )  {  this . version = version;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\PipelineConfiguration.java,pipeline configuration,"public map <  string  string >  config map data )  {  this . data = config map data; this . ci branch patterns = load yaml list of strings ( config map data  c i _  b r a n c h _  p a t t e r n s ) ; this . cd branch patterns = load yaml list of strings ( config map data  c d _  b r a n c h _  p a t t e r n s ) ; this . disable i tests c d = load yaml boolean ( config map data  d i s a b l e _  c d _  i t e s t s false ) ; this . disable i tests c i = load yaml boolean ( config map data  d i s a b l e _  c i _  i t e s t s false ) ; this . use docker socket flag = load yaml boolean optional ( config map data  u s e _  d o c k e r _  s o c k e t null ) ;  map <  object  object >  org branch map = load yaml map ( config map data  o r g a n i s a t i o n _  b r a n c h _  p a t t e r n s ) ; for  (   map .  entry <  object  object >  entry : org branch map . entry set (  )  )   {   object key = entry . get key (  ) ;  object value = entry . get value (  ) ; if  ( key instanceof  string )   {   string key text =  (  string ) key;  list <  string >  list = null; if  ( value instanceof  list )   {  list =  (  list <  string >  ) value;  }  else if  ( value  !  =  null )   {   string value text = value . to string (  ) ; list = new  array list <  >  (  ) ; list . add ( value text ) ;  }  if  ( list  !  =  null )   {  cd git host and organisation to branch patterns . put ( key text list ) ;  }  else  {   l o g . warn ( "" could not find  list for ""  +   o r g a n i s a t i o n _  b r a n c h _  p a t t e r n s  +  "" key "" +  key +  "" value: "" +  value ) ;  }   }   }   map <  object  object >  job name map = load yaml map ( config map data  j o b _  n a m e _  t o _  k i n d ) ; for  (   map .  entry <  object  object >  entry : job name map . entry set (  )  )   {   object key = entry . get key (  ) ;  object value = entry . get value (  ) ; if  ( key  !  =  null && value  !  =  null )   {   string key text = key . to string (  ) ;  string value text = value . to string (  ) ; try  {   pipeline kind pipeline kind =  pipeline kind . value of ( value text ) ; job name to kind map . put ( key text pipeline kind ) ;  }  catch  (   illegal argument exception e )   {   l o g . warn ( "" ignoring ""  +   j o b _  n a m e _  t o _  k i n d  +  "" key "" +  key +  "" with value: "" +  value +  "" .   values are: "" +   arrays . as list (  pipeline kind . values (  )  )  +  "" .  "" +  e e ) ;  }   }   }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\PipelineConfiguration.java,as yaml,"private string   (  object value )  {  if  ( value  !  =  null )   {  try  {  return  kubernetes helper . to yaml ( value ) ;  }  catch  (   i o exception e )   {   l o g . warn ( "" error trying to convert ""  +  value  +  "" to  y a m l: "" +  e e ) ;  }   }  return """";  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\PipelineConfiguration.java,create config map,"public config map   (  )  {   map <  string  string >  data = new  hash map <  >  (  ) ; data . put (  j o b _  n a m e _  t o _  k i n d as yaml ( job name to kind map )  ) ; data . put (  c i _  b r a n c h _  p a t t e r n s as yaml ( ci branch patterns )  ) ; data . put (  c d _  b r a n c h _  p a t t e r n s as yaml ( cd branch patterns )  ) ; data . put (  o r g a n i s a t i o n _  b r a n c h _  p a t t e r n s as yaml ( cd git host and organisation to branch patterns )  ) ; return new  config map builder (  )  . with new metadata (  )  . with name (  f a b r i c8 _  p i p e l i n e s )  . add to labels ( ""provider"" ""fabric8"" )  . end metadata (  )  . with data ( data )  . build (  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\PipelineConfiguration.java,create default,"public pipeline configuration   (  )  {   pipeline configuration configuration = new  pipeline configuration (  ) ; configuration . get ci branch patterns (  )  . add ( "" p r -  . *"" ) ; return configuration;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\PipelineConfiguration.java,get cd branch patterns,public list <  string >    (  )  {  return cd branch patterns;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\PipelineConfiguration.java,get cd git host and organisation to branch patterns,public map <  string  list <  string >  >    (  )  {  return cd git host and organisation to branch patterns;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\PipelineConfiguration.java,get ci branch patterns,public list <  string >    (  )  {  return ci branch patterns;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\PipelineConfiguration.java,get data,public map <  string  string >    (  )  {  return data;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\PipelineConfiguration.java,get git host organisation string,"public string   (  string git url )  {  if  (  strings . is null or blank ( git url )  )   {  return null;  }   string prefix = ""git@""; if  ( git url . starts with ( prefix )  )   {   string text = git url . substring ( prefix . length (  )  ) ; int idx = text . index of ( ' / ' ) ; if  ( idx  >  0 )   {  return text . substring ( 0 idx )  . replace ( ':' ' / ' ) ;  }   }   string scheme suffix = "": /  / ""; int idx = git url . index of ( scheme suffix ) ; if  ( idx  >  0 )   {   string text = git url . substring ( idx  +  scheme suffix . length (  )  ) ; idx = text . index of ( "" / "" ) ; if  ( idx  >  0 )   {  idx = text . index of ( "" / "" idx  +  1 ) ; if  ( idx  >  0 )   {  return text . substring ( 0 idx ) ;  }   }   }  return null;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\PipelineConfiguration.java,get job name to kind map,public map <  string  pipeline kind >    (  )  {  return job name to kind map;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\PipelineConfiguration.java,get pipeline,"public pipeline   (  job environment job environment )  {   string job name = job environment . get job name (  ) ;  pipeline kind kind = job name to kind map . get ( job name ) ; if  ( kind  !  =  null )   {  return new  pipeline ( kind job name ) ;  }   string branch name = job environment . get branch name (  ) ; kind =  pipeline kind .  developer; if  (  strings . is null or blank ( branch name )  )   {   l o g . warn ( "" no  branch name from the environment so cannot detect  c i  /   p r jobs ! "" ) ;  }  else  {   string git url = job environment . get git url (  ) ; if  (  strings . is not blank ( git url )  )   {   string host organisation = get git host organisation string ( git url ) ; if  (  strings . is not blank ( host organisation )  )   {   list <  string >  branch patterns = cd git host and organisation to branch patterns . get ( host organisation ) ; if  ( branch patterns  !  =  null && matches pattern ( branch name branch patterns )  )   {  return new  pipeline (  pipeline kind .  c d job name ) ;  }   }   }  if  ( matches pattern ( branch name ci branch patterns )  )   {  kind =  pipeline kind .  c i;  }  else if  ( matches pattern ( branch name cd branch patterns )  )   {  kind =  pipeline kind .  c d;  }   }  return new  pipeline ( kind job name ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\PipelineConfiguration.java,get pipeline configuration,public pipeline configuration   (  config map config map )  {   map <  string  string >  data = config map . get data (  ) ; if  ( data  =  =  null )   {  data = new  hash map <  >  (  ) ;  }  return new  pipeline configuration ( data ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\PipelineConfiguration.java,get space namespace,public string   (  )  {  return space namespace;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\PipelineConfiguration.java,get use docker socket flag,public boolean   (  )  {  return use docker socket flag;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\PipelineConfiguration.java,is disable i tests c d,public i tests c d;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\PipelineConfiguration.java,is disable i tests c i,public i tests c i;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\PipelineConfiguration.java,is use docker socket,public docker socket flag  !  =  null && use docker socket flag . boolean value (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\PipelineConfiguration.java,load pipeline configuration,public pipeline configuration   (  kubernetes client kubernetes client  string namespace )  {   config map config map = kubernetes client . config maps (  )  . in namespace ( namespace )  . with name (  f a b r i c8 _  p i p e l i n e s )  . get (  ) ;  pipeline configuration configuration; if  ( config map  !  =  null )   {  configuration = get pipeline configuration ( config map ) ;  }  else  {  configuration = create default (  ) ;  }  configuration . set space namespace ( namespace ) ; return configuration;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\PipelineConfiguration.java,load yaml boolean,"private map <  string  string >  config map data  string key boolean default value )  {   string text = config map data . get ( key ) ; if  (  strings . is not blank ( text )  )   {  return text . equals ignore case ( ""true"" ) ;  }  return default value;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\PipelineConfiguration.java,load yaml boolean optional,"private boolean   (  map <  string  string >  config map data  string key  boolean default value )  {   string text = config map data . get ( key ) ; if  (  strings . is not blank ( text )  )   {  return text . equals ignore case ( ""true"" ) ;  }  return default value;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\PipelineConfiguration.java,load yaml list of strings,"private list <  string >    (  map <  string  string >  config map data  string key )  {   list <  string >  answer = new  array list <  >  (  ) ;  string text = config map data . get ( key ) ; if  (  strings . is not blank ( text )  )   {  try  {   list list =  kubernetes helper . load yaml ( text  list . class ) ; for  (   object value : list )   {  if  ( value instanceof  string )   {   string text value =  (  string ) value; answer . add ( text value ) ;  }   }   }  catch  (   i o exception e )   {   l o g . warn ( "" failed to read key ""  +  key  +  "" with text "" +  text +  "" due to: "" +  e e ) ;  }   }  return answer;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\PipelineConfiguration.java,load yaml map,"private map <  object  object >    (  map <  string  string >  config map data  string key )  {   string text = config map data . get ( key ) ; if  (  strings . is not blank ( text )  )   {  try  {  return  kubernetes helper . load yaml ( text  map . class ) ;  }  catch  (   i o exception e )   {   l o g . warn ( "" failed to read key ""  +  key  +  "" with text "" +  text +  "" due to: "" +  e e ) ;  }   }  return  collections .  e m p t y _  m a p;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\PipelineConfiguration.java,matches pattern,protected string text  list <  string >  list of patterns )  {  for  (   string pattern : list of patterns )   {  if  ( text . matches ( pattern )  )   {  return true;  }   }  return false;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\PipelineConfiguration.java,save pipeline configuration,public kubernetes client kubernetes client  string namespace  pipeline configuration configuration )  {   config map config map = configuration . create config map (  ) ; kubernetes client . config maps (  )  . in namespace ( namespace )  . with name (  f a b r i c8 _  p i p e l i n e s )  . create or replace ( config map ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\PipelineConfiguration.java,set c d git organisation,"public pipeline configuration   (  string git host and organisation  list <  string >  branch patterns )  {  if  ( branch patterns . is empty (  )  )   {  throw new  illegal argument exception ( "" you must specify at least one branch pattern for github host and organisation: ""  +  git host and organisation ) ;  }  cd git host and organisation to branch patterns . put ( git host and organisation branch patterns ) ; return this;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\PipelineConfiguration.java,set cd branch patterns,public list <  string >  cd branch patterns )  {  this . cd branch patterns = cd branch patterns;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\PipelineConfiguration.java,set cd git host and organisation to branch patterns,public map <  string  list <  string >  >  cd git host and organisation to branch patterns )  {  this . cd git host and organisation to branch patterns = cd git host and organisation to branch patterns;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\PipelineConfiguration.java,set ci branch patterns,public list <  string >  ci branch patterns )  {  this . ci branch patterns = ci branch patterns;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\PipelineConfiguration.java,set data,public map <  string  string >  data )  {  this . data = data;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\PipelineConfiguration.java,set disable i tests c d,public i tests c d )  {  this . disable i tests c d = disable i tests c d;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\PipelineConfiguration.java,set disable i tests c i,public i tests c i )  {  this . disable i tests c i = disable i tests c i;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\PipelineConfiguration.java,set job name to kind map,public map <  string  pipeline kind >  job name to kind map )  {  this . job name to kind map = job name to kind map;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\PipelineConfiguration.java,set job names c d,public pipeline configuration   (  string .  .  .  names )  {  return set job names kind (  pipeline kind .  c d names ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\PipelineConfiguration.java,set job names c i,public pipeline configuration   (  string .  .  .  names )  {  return set job names kind (  pipeline kind .  c i names ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\PipelineConfiguration.java,set job names developer,public pipeline configuration   (  string .  .  .  names )  {  return set job names kind (  pipeline kind .  developer names ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\PipelineConfiguration.java,set job names kind,public pipeline configuration   (  pipeline kind kind  string .  .  .  names )  {  for  (   string name : names )   {  job name to kind map . put ( name kind ) ;  }  return this;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\PipelineConfiguration.java,set space namespace,public string space namespace )  {  this . space namespace = space namespace;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\PipelineConfiguration.java,set use docker socket flag,public boolean use docker socket )  {  this . use docker socket flag = use docker socket;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\PipelineConfiguration.java,to string,"override public  string   (  )  {  return "" pipeline configuration { ""  +  ""job name to kind map = ""  +  job name to kind map  +  ""  ci branch patterns = "" +  ci branch patterns +  ""  cd branch patterns = "" +  cd branch patterns +  ""  cd git host and organisation to branch patterns = "" +  cd git host and organisati"
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\UserConfigurationCompare.java,cast to,"protected t >  t   (  class <  t >  clazz  object entity )  {  if  ( clazz . is instance ( entity )  )   {  return clazz . cast ( entity ) ;  }  else  {  if  ( entity  !  =  null )   {   l o g . warn ( "" invalid class ""  +  entity . get class (  )  . get name (  )   +  "" when expecting "" +  clazz . get name (  )  +  "" for instance: "" +  entity ) ;  }  return null;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\UserConfigurationCompare.java,collections equal,static l  r > boolean   (  collection <  l >  left  collection <  r >  right )  {  return sub collection ( left right )  && sub collection ( right left ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\UserConfigurationCompare.java,config equal,"public object entity1  object entity2 )  {  if  ( entity1  =  =  entity2 )   {  return true;  }  else if  ( entity1  =  =  null || entity2  =  =  null )   {  return false;  }  else if  ( entity1 instanceof  map )   {  return config equal map (  (  map ) entity1 cast to (  map . class entity2 )  ) ;  }  else if  ( entity2 instanceof  map )   {  return config equal map (  (  map ) entity1 cast to (  map . class entity2 )  ) ;  }  else if  ( entity2 instanceof  object meta )   {  return config equal object meta (  (  object meta ) entity1 cast to (  object meta . class entity2 )  ) ;  }  else if  ( entity1 instanceof  collection && entity2 instanceof  collection )   {  return collections equal (  (  collection ) entity1  (  collection ) entity2 ) ;  }  else  {   class <  ?  >  a class = get common denominator ( entity1 . get class (  )  entity2 . get class (  )  ) ; if  ( a class  !  =  null )   {   object cast entity2 = cast to ( a class entity2 ) ; if  ( cast entity2  =  =  null )   {  return false;  }  else if  ( a class . get package (  )  . get name (  )  . starts with ( ""io . fabric8"" )  )   {  return config equal kubernetes d t o ( entity1 entity2 a class ) ;  }   }  return  objects . equal ( entity1 entity2 ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\UserConfigurationCompare.java,config equal kubernetes d t o,"protected not null  object entity1 @ not null  object entity2 @ not null  class <  ?  >  clazz )  {   bean info bean info = null; try  {  bean info =  introspector . get bean info ( clazz ) ;  }  catch  (   introspection exception e )   {   l o g . warn ( "" failed to get bean info for ""  +  clazz . get name (  )   +  "" .  "" +  e e ) ; return false;  }  try  {   property descriptor[] property descriptors = bean info . get property descriptors (  ) ; for  (   property descriptor property descriptor : property descriptors )   {   string name = property descriptor . get name (  ) ; if  ( ignored properties . contains ( name )  )   {  continue;  }   method read method = property descriptor . get read method (  ) ; if  ( read method  !  =  null )   {   object value1 = invoke method ( entity1 read method ) ;  object value2 = invoke method ( entity2 read method ) ; if  (  ! config equal ( value1 value2 )  )   {  return false;  }   }   }  return true;  }  catch  (   exception e )   {  return false;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\UserConfigurationCompare.java,config equal list,protected list v1  list v2 )  {  int size1 = size ( v1 ) ; int size2 = size ( v2 ) ; if  ( size1  !  =  size2 )   {  return false;  }  int idx = 0; for  (   object value : v1 )   {   object value2 = v2 . get ( idx +  +  ) ; if  (  ! config equal ( value value2 )  )   {  return false;  }   }  return true;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\UserConfigurationCompare.java,config equal map,protected map entity1  map entity2 )  {  if  ( entity1  =  =  entity2 )   {  return true;  }  else if  ( entity1  =  =  null || entity2  =  =  null )   {  return false;  }  int size1 = size ( entity1 ) ; int size2 = size ( entity2 ) ; if  ( size1  !  =  size2 )   {  return false;  }   set <  map .  entry >  entries = entity1 . entry set (  ) ; for  (   map .  entry entry : entries )   {   object key = entry . get key (  ) ;  object value = entry . get value (  ) ;  object value2 = entity2 . get ( key ) ; if  (  ! config equal ( value value2 )  )   {  return false;  }   }  return true;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\UserConfigurationCompare.java,config equal object meta,protected object meta entity1  object meta entity2 )  {  if  ( entity1  =  =  entity2 )   {  return true;  }  else if  ( entity1  =  =  null || entity2  =  =  null )   {  return false;  }  return  objects . equal ( entity1 . get name (  )  entity2 . get name (  )  )  &&  objects . equal ( entity1 . get namespace (  )  entity2 . get namespace (  )  )  && config equal map ( entity1 . get labels (  )  entity2 . get labels (  )  ) && config equal map ( entity1 . get annotations (  )  entity2 . get annotations (  )  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\UserConfigurationCompare.java,get common denominator,static class   (  class left  class right )  {  if  ( left . equals ( right )  )   {  return left;  }  else if  ( left . is assignable from ( right )  )   {  return get common denominator ( left right . get superclass (  )  ) ;  }  else if  ( right . is assignable from ( left )  )   {  return get common denominator ( left . get superclass (  )  right ) ;  }  else  {  return null;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\UserConfigurationCompare.java,invoke method,"protected object   ( @ not null  object entity  method read method )  throws  invocation target exception   illegal access exception  {  try  {  return read method . invoke ( entity ) ;  }  catch  (   exception e )   {   l o g . warn ( "" failed to invoke method ""  +  read method  +  "" on "" +  entity +  "" .  "" +  e e ) ; throw e;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\UserConfigurationCompare.java,item exists,static l  r > boolean   (  l item  collection <  r >  collection )  {  for  (   r candidate : collection )   {  if  ( config equal ( item candidate )  )   {  return true;  }   }  return false;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\UserConfigurationCompare.java,size,protected collection coll )  {  return  ( coll  =  =  null )   ?  0 : coll . size (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\UserConfigurationCompare.java,sub collection,static l  r > boolean   (  collection <  l >  left  collection <  r >  right )  {  for  (   l candidate : left )   {  if  (  ! item exists ( candidate right )  )   {  return false;  }   }  return true;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\spaces\Spaces.java,spaces,public map <  string  space >  environments )  {  this . environments = environments;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\spaces\Spaces.java,get default namespace,protected string   (  kubernetes client kubernetes client  string namespace )  {  if  (  strings . is null or blank ( namespace )  )   {  namespace = kubernetes client . get namespace (  ) ; if  (  strings . is null or blank ( namespace )  )   {  namespace =  kubernetes helper . default namespace (  ) ;  }   }  return namespace;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\spaces\Spaces.java,get space,public space   (  string key )  {  return environments . get ( key ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\spaces\Spaces.java,get space set,public sorted set <  space >    (  )  {  return new  tree set <  >  ( environments . values (  )  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\spaces\Spaces.java,get spaces,public map <  string  space >    (  )  {  return environments;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\spaces\Spaces.java,load,private spaces   (  config map config map )  {   map <  string  space >  environment map = new  hash map <  >  (  ) ; if  ( config map  !  =  null )   {   map <  string  string >  data = config map . get data (  ) ; if  ( data  !  =  null )   {   set <  map .  entry <  string  string >  >  entries = data . entry set (  ) ; for  (   map .  entry <  string  string >  entry : entries )   {   string key = entry . get key (  ) ;  string yaml = entry . get value (  ) ;  space environment = parse space ( key yaml ) ; if  ( environment  !  =  null )   {  environment map . put ( key environment ) ;  }   }   }   }  return new  spaces ( environment map ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\spaces\Spaces.java,parse space,"private space   (  string key  string yaml )  {  try  {  return  kubernetes helper . load yaml ( yaml  space . class ) ;  }  catch  (   i o exception e )   {   l o g . warn ( "" failed to parse space  y a m l for ""  +  key  +  "" .   reason: "" +  e +  "" .   y a m l: "" +  yaml e ) ; return null;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\support\KindToClassMapping.java,get kind to class map,public map <  string  class <  ?  >  >    (  )  {  return map;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\Apply.java,main,"public string .  .  .  args )  {  if  ( args . length  <  1 )   {   system . out . println ( "" usage json file to apply"" ) ; return;  }  try  {   kubernetes client kube = new  default kubernetes client (  ) ;  file file = new  file ( args[0] ) ;  system . out . println ( "" applying file: ""  +  file ) ; if  (  ! file . exists (  )  ||  ! file . is file (  )  )   {   system . out . println ( "" file does not exist !  ""  +  file . get absolute path (  )  ) ; return;  }   controller controller = new  controller ( kube ) ;  string answer = controller . apply ( file ) ;  system . out . println ( "" applied ! : ""  +  answer ) ;  }  catch  (   exception e )   {   system . out . println ( "" f a i l e d: ""  +  e ) ; e . print stack trace (  ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\ConfigComparePodTest.java,test pods annotations not equal,"test public void   (  )  throws  exception  {   pod entity1 = new  pod builder (  )  . with new metadata (  )  . with name ( ""foo"" )  . add to labels ( ""label1"" ""value1"" )  . add to labels ( ""label2"" ""value2"" )  . add to annotations ( ""pod annotation1"" ""pod ann value1"" )  . end metadata (  )  . with new spec (  )  . add new conta"
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\ConfigComparePodTest.java,test pods container env equal,"test public void   (  )  throws  exception  {   pod entity1 = new  pod builder (  )  . with new metadata (  )  . with name ( ""foo"" )  . add to labels ( ""label1"" ""value1"" )  . add to labels ( ""label2"" ""value2"" )  . add to annotations ( ""pod annotation1"" ""pod ann value1"" )  . end metadata (  )  . with new spec (  )  . add new conta"
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\ConfigComparePodTest.java,test pods equal,"test public void   (  )  throws  exception  {   pod entity1 = new  pod builder (  )  . with new metadata (  )  . with name ( ""foo"" )  . add to labels ( ""label1"" ""value1"" )  . add to labels ( ""label2"" ""value2"" )  . add to annotations ( ""pod annotation1"" ""pod ann value1"" )  . end metadata (  )  . with new spec (  )  . add new conta"
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\ConfigComparePodTest.java,test pods equal with different status,"test public void   (  )  throws  exception  {   pod entity1 = new  pod builder (  )  . with new metadata (  )  . with name ( ""foo"" )  . add to labels ( ""label1"" ""value1"" )  . add to labels ( ""label2"" ""value2"" )  . add to annotations ( ""pod annotation1"" ""pod ann value1"" )  . end metadata (  )  . with new spec (  )  . add new conta"
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\ConfigComparePodTest.java,test pods image equal,"test public void   (  )  throws  exception  {   pod entity1 = new  pod builder (  )  . with new metadata (  )  . with name ( ""foo"" )  . add to labels ( ""label1"" ""value1"" )  . add to labels ( ""label2"" ""value2"" )  . add to annotations ( ""pod annotation1"" ""pod ann value1"" )  . end metadata (  )  . with new spec (  )  . add new conta"
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\ConfigComparePodTest.java,test pods labels not equal,"test public void   (  )  throws  exception  {   pod entity1 = new  pod builder (  )  . with new metadata (  )  . with name ( ""foo"" )  . add to labels ( ""label1"" ""value1"" )  . add to labels ( ""label2"" ""value2"" )  . add to annotations ( ""pod annotation1"" ""pod ann value1"" )  . end metadata (  )  . with new spec (  )  . add new conta"
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\ConfigCompareServiceTest.java,assert compare config,"public object entity1  object entity2 boolean expected )  {  boolean actual =  user configuration compare . config equal ( entity1 entity2 ) ; assert equals ( "" configuration compare for ""  +  entity1  +  "" and "" +  entity2 expected actual ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\ConfigCompareServiceTest.java,test services container port not equal,"test public void   (  )  throws  exception  {   service entity1 = new  service builder (  )  . with new metadata (  )  . with name ( ""foo"" )  . add to labels ( ""label1"" ""value1"" )  . add to labels ( ""label2"" ""value2"" )  . end metadata (  )  . with new spec (  )  . add to selector ( ""label1"" ""value1"" )  . add to selector ( ""label"
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\ConfigCompareServiceTest.java,test services equal,"test public void   (  )  throws  exception  {   service entity1 = new  service builder (  )  . with new metadata (  )  . with name ( ""foo"" )  . add to labels ( ""label1"" ""value1"" )  . add to labels ( ""label2"" ""value2"" )  . end metadata (  )  . with new spec (  )  . add to selector ( ""label1"" ""value1"" )  . add to selector ( ""label"
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\ConfigCompareServiceTest.java,test services equal with status differences,"test public void   (  )  throws  exception  {   service entity1 = new  service builder (  )  . with new metadata (  )  . with name ( ""foo"" )  . add to labels ( ""label1"" ""value1"" )  . add to labels ( ""label2"" ""value2"" )  . with resource version ( ""1"" )  . end metadata (  )  . with new spec (  )  . add to selector ( ""label1"" ""valu"
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\ConfigCompareServiceTest.java,test services labels not equal,"test public void   (  )  throws  exception  {   service entity1 = new  service builder (  )  . with new metadata (  )  . with name ( ""foo"" )  . add to labels ( ""label1"" ""value1"" )  . add to labels ( ""label2"" ""value2"" )  . end metadata (  )  . with new spec (  )  . add to selector ( ""label1"" ""value1"" )  . add to selector ( ""label"
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\ConfigCompareServiceTest.java,test services port not equal,"test public void   (  )  throws  exception  {   service entity1 = new  service builder (  )  . with new metadata (  )  . with name ( ""foo"" )  . add to labels ( ""label1"" ""value1"" )  . add to labels ( ""label2"" ""value2"" )  . end metadata (  )  . with new spec (  )  . add to selector ( ""label1"" ""value1"" )  . add to selector ( ""label"
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\ConfigCompareServiceTest.java,test services selector not equal,"test public void   (  )  throws  exception  {   service entity1 = new  service builder (  )  . with new metadata (  )  . with name ( ""foo"" )  . add to labels ( ""label1"" ""value1"" )  . add to labels ( ""label2"" ""value2"" )  . end metadata (  )  . with new spec (  )  . add to selector ( ""label1"" ""value1"" )  . add to selector ( ""label"
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\ConfigCompareReplicationControllerTest.java,test replication controllers add volume not equal,"test public void   (  )  throws  exception  {   replication controller entity1 = new  replication controller builder (  )  . with new metadata (  )  . with name ( ""foo"" )  . add to labels ( ""label1"" ""value1"" )  . add to labels ( ""label2"" ""value2"" )  . end metadata (  )  . with new spec (  )  . add to selector ( ""label1"" ""v"
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\ConfigCompareReplicationControllerTest.java,test replication controllers annotations not equal,"test public void   (  )  throws  exception  {   replication controller entity1 = new  replication controller builder (  )  . with new metadata (  )  . with name ( ""foo"" )  . add to labels ( ""label1"" ""value1"" )  . add to labels ( ""label2"" ""value2"" )  . end metadata (  )  . with new spec (  )  . add to selector ( ""label1"" ""v"
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\ConfigCompareReplicationControllerTest.java,test replication controllers container env equal,"test public void   (  )  throws  exception  {   replication controller entity1 = new  replication controller builder (  )  . with new metadata (  )  . with name ( ""foo"" )  . add to labels ( ""label1"" ""value1"" )  . add to labels ( ""label2"" ""value2"" )  . end metadata (  )  . with new spec (  )  . add to selector ( ""label1"" ""v"
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\ConfigCompareReplicationControllerTest.java,test replication controllers equal,"test public void   (  )  throws  exception  {   replication controller entity1 = new  replication controller builder (  )  . with new metadata (  )  . with name ( ""foo"" )  . add to labels ( ""label1"" ""value1"" )  . add to labels ( ""label2"" ""value2"" )  . end metadata (  )  . with new spec (  )  . add to selector ( ""label1"" ""v"
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\ConfigCompareReplicationControllerTest.java,test replication controllers equal with different status,"test public void   (  )  throws  exception  {   replication controller entity1 = new  replication controller builder (  )  . with new metadata (  )  . with name ( ""foo"" )  . add to labels ( ""label1"" ""value1"" )  . add to labels ( ""label2"" ""value2"" )  . end metadata (  )  . with new spec (  )  . add to selector ( ""label1"" ""v"
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\ConfigCompareReplicationControllerTest.java,test replication controllers image equal,"test public void   (  )  throws  exception  {   replication controller entity1 = new  replication controller builder (  )  . with new metadata (  )  . with name ( ""foo"" )  . add to labels ( ""label1"" ""value1"" )  . add to labels ( ""label2"" ""value2"" )  . end metadata (  )  . with new spec (  )  . add to selector ( ""label1"" ""v"
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\ConfigCompareReplicationControllerTest.java,test replication controllers labels not equal,"test public void   (  )  throws  exception  {   replication controller entity1 = new  replication controller builder (  )  . with new metadata (  )  . with name ( ""foo"" )  . add to labels ( ""label1"" ""value1"" )  . add to labels ( ""label2"" ""value2"" )  . end metadata (  )  . with new spec (  )  . add to selector ( ""label1"" ""v"
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\ConfigCompareReplicationControllerTest.java,test replication controllers replicas not equal,"test public void   (  )  throws  exception  {   replication controller entity1 = new  replication controller builder (  )  . with new metadata (  )  . with name ( ""foo"" )  . add to labels ( ""label1"" ""value1"" )  . add to labels ( ""label2"" ""value2"" )  . end metadata (  )  . with new spec (  )  . add to selector ( ""label1"" ""v"
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\ConfigCompareReplicationControllerTest.java,test replication controllers selector not equal,"test public void   (  )  throws  exception  {   replication controller entity1 = new  replication controller builder (  )  . with new metadata (  )  . with name ( ""foo"" )  . add to labels ( ""label1"" ""value1"" )  . add to labels ( ""label2"" ""value2"" )  . end metadata (  )  . with new spec (  )  . add to selector ( ""label1"" ""v"
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\ConfigFileParseTest.java,set kubernetes config file property,"public string basedir =  system . get property ( ""basedir"" "" . "" ) ;  string config file = basedir  +  "" / src / test / resources / config . yml"";  system . set property (  configs .  k u b e r n e t e s _  c o n f i g _  f i l e _  p r o p e r t y config file ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\ConfigFileParseTest.java,test parse config,test public void   (  )  throws  exception  {  set kubernetes config file property (  ) ;  file file = get kubernetes config file (  ) ; assert that ( file )  . is file (  )  . exists (  ) ;  config config =  configs . parse configs (  ) ; assert that ( config )  . is not null (  ) ;  string current context name = config . get
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\CreateBuildConfig.java,main,"public string .  .  .  args )  {  if  ( args . length  <  1 )   {   system . out . println ( "" usage name of build config"" ) ; return;  }  try  {   kubernetes client kube = new  default kubernetes client (  ) ;  string name = args[0];  string namespace = kube . get namespace (  ) ; if  (  strings . is null or blank ( namespace )  )   {  namespace =  kubernetes helper . default namespace (  ) ;  }  if  (  strings . is null or blank ( namespace )  )   {  namespace = ""default"";  }   system . out . println ( "" creating a  build config for name: ""  +  name  +  "" in namespace: "" +  namespace ) ;  build config build config = new  build config builder (  )  . with new metadata (  )  . with name ( name )  . with namespace ( namespace )  . end metadata (  )  . with new spec (  )  . with new source (  )  . with type ( "" git"" )  . with new git (  )  . with uri ( ""http: /  / gogs . vagrant . f8 / gogsadmin / ""  +  name  +  "" . git"" )  . end git (  )  . end source (  )  . end spec (  )  . build (  ) ;  system . out . println ( "" creating  build config: ""  +  build config ) ;  controller controller = new  controller ( kube ) ; if  ( controller . get namespace (  )   =  =  null )   {  controller . set namespace ( namespace ) ;  }  controller . apply build config ( build config "" generated ! "" ) ;  system . out . println ( "" applied ! : ""  +  name ) ;  }  catch  (   exception e )   {   system . out . println ( "" f a i l e d: ""  +  e ) ; e . print stack trace (  ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\DeleteBuildConfig.java,main,"public string .  .  .  args )  {  if  ( args . length  <  1 )   {   system . out . println ( "" usage name of build config"" ) ; return;  }  try  {   string name = args[0];  system . out . println ( "" deleting  build config: ""  +  name ) ;  kubernetes client kube = new  default kubernetes client (  ) ;  string namespace = kube . get namespace (  ) ;  system . out . println ( "" using namespace: ""  +  namespace ) ;  controller controller = new  controller ( kube ) ;  open shift client openshift = controller . get open shift client or jenkinshift (  ) ; if  ( openshift  =  =  null )   {   system . err . println ( "" cannot connect to  open shift or  jenkinshift ! "" ) ; return;  }   build config build config = openshift . build configs (  )  . with name ( name )  . get (  ) ; if  ( build config  !  =  null )   {   system . out . println ( "" managed to load  build config with resource version ""  +   kubernetes helper . get resource version ( build config )  ) ;  }  else  {   system . err . println ( "" could not find  build config called: ""  +  name ) ; return;  }   boolean result = openshift . build configs (  )  . with name ( name )  . delete (  ) ;  system . out . println ( "" deleted  build config with name ""  +  name  +  "" result: "" +  result ) ;  }  catch  (   exception e )   {   system . out . println ( "" f a i l e d: ""  +  e ) ; e . print stack trace (  ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\environments\ListEnvironments.java,main,"public string[] args )  {   kubernetes client kubernetes client = new  default kubernetes client (  ) ;  environments environments; if  ( args . length  >  0 )   {   string namespace = args[0];  system . out . println ( "" listing environments for namespace: ""  +  namespace ) ; environments =  environments . load ( namespace ) ;  }  else  {  environments =  environments . load (  ) ;  }   string environment key = ""testing""; if  ( args . length  >  1 )   {  environment key = args[1];  }   system . out . println ( "" space namespace: ""  +  environments . get namespace (  )  ) ;  sorted set <  environment >  set = environments . get environment set (  ) ; for  (   environment environment : set )   {   string on cluster = """";  string cluster a pi server = environment . get cluster a pi server (  ) ; if  (  strings . is not blank ( cluster a pi server )  )   {  on cluster +  = "" on  a p i server: ""  +  cluster a pi server;  }   system . out . println ( "" environment ""  +  environment . get name (  )   +  "" maps to namespace: "" +  environment . get namespace (  )  +  on cluster ) ;  }   system . out . println ( "" namespace for environment key: ""  +  environment key  +  "" is "" +   environments . namespace for environment ( environment key )  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\IsOpenShift.java,main,"public string .  .  .  args )  {   kubernetes client client = new  default kubernetes client (  ) ; try  {  boolean open shift =  kubernetes helper . is open shift ( client ) ;  system . out . println ( "" open shift: ""  +  open shift ) ;  }  catch  (   exception e )   {   system . out . println ( "" f a i l e d: ""  +  e ) ; e . print stack trace (  ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\GetServiceURL.java,main,"public string .  .  .  args )  {  if  ( args . length  <  1 )   {   system . out . println ( "" usage name of service"" ) ; return;  }  try  {   string name = args[0];  kubernetes client kube = new  default kubernetes client (  ) ;  string namespace = kube . get namespace (  ) ; if  (  strings . is null or blank ( namespace )  )   {  namespace = ""default"";  }   string url =  kubernetes helper . get service u r l ( kube name namespace ""http"" true ) ;  system . out . println ( "" service ""  +  name  +  "" has external  u r l: "" +  url ) ;  }  catch  (   exception e )   {   system . out . println ( "" f a i l e d: ""  +  e ) ; e . print stack trace (  ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\Example.java,list endpoints,"protected kubernetes client kube )  {   system . out . println ( ""\n\n looking up endpoints"" ) ;  system . out . println ( "" =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  = "" ) ;  endpoints list endpoints = kube . endpoints (  )  . list (  ) ;  list <  endpoints >  endpoint items = endpoints . get items (  ) ; for  (   endpoints endpoint : endpoint items )   {   system . out . println ( "" endpoint ""  +   kubernetes helper . get name ( endpoint )   +  "" labels: "" +  endpoint . get metadata (  )  . get labels (  )  ) ;  }   system . out . println (  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\Example.java,list pods,"protected kubernetes client kube )  {   system . out . println ( ""\n\n looking up pods"" ) ;  system . out . println ( "" =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  = "" ) ;  pod list pods = kube . pods (  )  . list (  ) ;  list <  pod >  items = pods . get items (  ) ; for  (   pod item : items )   {   system . out . println ( "" pod ""  +   kubernetes helper . get name ( item )   +  "" with ip: "" +  item . get status (  )  . get pod i p (  )  +  "" created: "" +  item . get metadata (  )  . get creation timestamp (  )  ) ;  pod spec spec = item . get spec (  ) ; if  ( spec  !  =  null )   {   list <  container >  containers = spec . get containers (  ) ; if  ( containers  !  =  null )   {  for  (   container container : containers )   {   system . out . println ( "" container ""  +  container . get image (  )   +  "" "" +  container . get command (  )  +  "" ports: "" +  container . get ports (  )  ) ;  }   }   }   map <  string  container status >  current containers =  kubernetes helper . get current containers ( item ) ;  system . out . println ( "" has ""  +  current containers . size (  )   +  "" container ( s ) "" ) ;  set <  map .  entry <  string  container status >  >  entries = current containers . entry set (  ) ; for  (   map .  entry <  string  container status >  entry : entries )   {   string id = entry . get key (  ) ;  container status info = entry . get value (  ) ;  system . out . println ( "" current container: ""  +  id  +  "" info: "" +  info ) ;  }   }   system . out . println (  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\Example.java,list replication controllers,"protected kubernetes client kube )  {   system . out . println ( ""\n\n looking up replication controllers"" ) ;  system . out . println ( "" =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  = "" ) ;  replication controller list replication controllers = kube . replication controllers (  )  . list (  ) ;  list <  replication controller >  items = replication controllers . get items (  ) ; for  (   replication controller item : items )   {   replication controller spec replication controller spec = item . get spec (  ) ; if  ( replication controller spec  !  =  null )   {   system . out . println ( "" replication controller ""  +   kubernetes helper . get name ( item )   +  "" labels: "" +  item . get metadata (  )  . get labels (  )  +  "" replicas: "" +  replication controller spec . get replicas (  )  +  "" replicator selector: "" +  replication controller spec . get selector (  )  +  "" pod template: "" +  replication controller spec . get template (  )  ) ;  }  else  {   system . out . println ( "" replication controller ""  +   kubernetes helper . get name ( item )   +  "" labels: "" +  item . get metadata (  )  . get labels (  )  +  "" no replication controller spec"" ) ;  }   }   system . out . println (  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\Example.java,list service accounts,"protected kubernetes client kube )  {   system . out . println ( ""\n\n looking up service accounts"" ) ;  system . out . println ( "" =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  = "" ) ;  service account list service accounts = kube . service accounts (  )  . list (  ) ;  list <  service account >  service account items = service accounts . get items (  ) ; for  (   service account service account : service account items )   {   system . out . println ( "" service  account ""  +   kubernetes helper . get name ( service account )   +  "" labels: "" +  service account . get metadata (  )  . get labels (  )  ) ;  }   system . out . println (  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\Example.java,list services,"protected kubernetes client kube )  {   system . out . println ( ""\n\n looking up services"" ) ;  system . out . println ( "" =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  = "" ) ;  service list services = kube . services (  )  . list (  ) ;  list <  service >  service items = services . get items (  ) ; for  (   service service : service items )   {   system . out . println ( "" service ""  +   kubernetes helper . get name ( service )   +  "" labels: "" +  service . get metadata (  )  . get labels (  )  +  "" selector: "" +  get selector ( service )  +  "" ports: "" +  get ports ( service )  ) ;  }   system . out . println (  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\Example.java,main,"public string .  .  .  args )  {   system . out . println ( ""\n\nfabric8  kubernetes - api example"" ) ;  kubernetes client kube = new  default kubernetes client (  ) ;  system . out . println ( "" =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  = "" ) ; try  {  list pods ( kube ) ; list replication controllers ( kube ) ; list services ( kube ) ; list service accounts ( kube ) ; list endpoints ( kube ) ;  }  catch  (   exception e )   {   system . out . println ( "" f a i l e d: ""  +  e ) ; e . print stack trace (  ) ;  }  finally  {  kube . close (  ) ;  }   system . out . println ( "" =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  =  = "" ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\KubernetesHelperTest.java,test remove empty pods,"test public void   (  )  throws  exception  {   pod pod1 = new  pod (  ) ; pod1 . set metadata ( new  object meta (  )  ) ; pod1 . get metadata (  )  . set name ( ""test1"" ) ;  pod pod2 = new  pod (  ) ; pod2 . set metadata ( new  object meta (  )  ) ;  pod list pod schema = new  pod list (  ) ; pod schema . get items (  )  . add ( pod1 ) ; "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\KubernetesHelperTest.java,testfilter matches id or labels,"test public void   (  )  throws  exception  {   string text = ""container = java name = foo food = cheese"";  string id = ""foo"";  hash map <  string  string >  map = new  hash map <  >  (  ) ; map . put ( ""container"" ""java"" ) ; map . put ( ""name"" ""foo"" ) ; map . put ( ""food"" ""cheese"" ) ; assert true ( text  +  "" shou"
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\KubernetesHelperTest.java,testfilter matches id or labels no labels,"test public void   (  )  throws  exception  {   string text = ""container = java name = foo food = cheese"";  string id = ""foo"";  hash map <  string  string >  map = null; assert false ( text  +  "" should not  =  ""  +  map  kubernetes helper . filter matches id or labels ( text id map )  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\ParseDateTimeTest.java,test parse date time,"test public void   (  )  throws  exception  {   date date =  kubernetes helper . parse date ( ""2015 - 03 - 26 t17:11:55 z"" ) ; assert that ( date )  . is not null (  ) ;  system . out . println ( "" parsed date: ""  +  date ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\ParseExamplesTest.java,assert not empty,"public string name  collection collection )  {  assert not null ( name  +  "" is null ! "" collection ) ; assert false ( name  +  "" should not be empty ! "" collection . is empty (  )  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\ParseExamplesTest.java,assert parse example file,"public t >  t   (  string file name  class <  t >  clazz )  throws  exception  {   file example file = new  file ( get kubernetes examples dir (  )  file name ) ; assert file exists ( example file ) ;  t answer =  o b j e c t _  m a p p e r . reader for ( clazz )  . read value ( example file ) ; assert not null ( "" null returned while unmarshalling ""  +  example file answer ) ;  l o g . info ( "" parsed: ""  +  file name  +  "" as: "" +  answer ) ; return answer;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\ParseExamplesTest.java,get kubernetes examples dir,"public file   (  )  {   file answer = new  file ( get kubernetes source dir (  )  ""api / examples"" ) ; assert directory exists ( answer ) ; return answer;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\ParseExamplesTest.java,get kubernetes source dir,"public file   (  )  {   string basedir =  system . get property ( ""basedir"" "" . "" ) ;  string kube source dir = basedir  +  "" / src / main / kubernetes"";  string path =  system . get property (  s y s t e m _  p r o p e r t y _  k u b e _  d i r kube source dir ) ;  file kube dir = new  file ( path ) ; assert true ( "" kube directory ""  +  kube dir  +  "" does not exist !   please supply the correct value in the "" +   s y s t e m _  p r o p e r t y _  k u b e _  d i r +  "" system property value"" kube dir . exists (  )  ) ; return kube dir;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\ParseExamplesTest.java,test parse pod,"test public void   (  )  throws  exception  {  assert parse example file ( ""pod . json""  pod . class ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\ParseExamplesTest.java,test parse pod list,"test public void   (  )  throws  exception  {   kubernetes list pod list = assert parse example file ( ""pod - list . json""  kubernetes list . class ) ;  list <  has metadata >  items = pod list . get items (  ) ; assert not empty ( ""items"" items ) ;  pod pod =  (  pod ) items . get ( 0 ) ; assert not null ( ""pod1"" pod ) ; "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\ParseExamplesTest.java,test parse pod list empty results,"test public void   (  )  throws  exception  {   pod list pod list = assert parse example file ( ""pod - list - empty - results . json""  pod list . class ) ;  list <  pod >  items = pod list . get items (  ) ; assert not empty ( ""items"" items ) ;  pod pod = items . get ( 0 ) ; assert not null ( ""pod1"" pod ) ; assert equals ( "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\ParseExamplesTest.java,test parse service,"test public void   (  )  throws  exception  {   service service = assert parse example file ( ""service . json""  service . class ) ; assert equals ( "" service"" service . get kind (  )  ) ;  integer expected port = 9090; assert equals ( expected port get container ports ( service )  . iterator (  )  . next (  )  ) ;  } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\ParseServiceTest.java,assert parse test file,"public t >  t   (  string relative path  class <  t >  clazz )  throws  i o exception  {   string base dir path =  system . get property ( ""basedir"" "" . "" ) ;  file base dir = new  file ( base dir path ) ;  file json = new  file ( base dir path ""target / test - classes / ""  +  relative path ) ; assert file exists ( json ) ;  object answer =  kubernetes helper . load json ( json ) ; assert not null ( "" null returned while unmarshalling ""  +  json answer ) ;  l o g . info ( "" parsed: ""  +  json  +  "" as: "" +  answer ) ; assert true ( "" result ""  +  answer  +  "" is not an instance of "" +  clazz . get name (  )  +  "" but was "" +   ( answer  =  =  null  ?  ""null"" : answer . get class (  )  . get name (  )  )  clazz . is instance ( answer )  ) ; return clazz . cast ( answer ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\ParseServiceTest.java,test parse fabric m q service,"test public void   (  )  throws  exception  {   service service = assert parse test file ( ""fmq - service . json""  service . class ) ;  set <  integer >  ports = get ports ( service ) ; assert not null ( ""ports"" ports ) ;  set <  integer >  container ports = get container ports ( service ) ; assert true ( ""contain"
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\pipelines\GitHostOrganisationTest.java,assert parse git host organisation,"private string uri  string expected host organisation )  {   string actual =  pipeline configuration . get git host organisation string ( uri ) ; assert equals ( "" git  host and  organisation for ""  +  uri expected host organisation actual ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\pipelines\GitHostOrganisationTest.java,test parse git host organisation,"test public void   (  )  throws  exception  {  assert parse git host organisation ( ""https: /  / github . com / fabric8io / foo . git"" ""github . com / fabric8io"" ) ; assert parse git host organisation ( ""git@github . com:bar / foo . git"" ""github . com / bar"" ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\pipelines\JobEnvironmentTest.java,test load job environment,"test public void   (  )  throws  exception  {   map <  string  string >  env = new  hash map <  >  (  ) ; env . put ( "" b r a n c h _  n a m e"" ""master"" ) ; env . put ( "" b u i l d _  i d"" ""2"" ) ; env . put ( "" j o b _  n a m e"" ""rawlingsj / spring - boot - webmvc / master"" ) ; env . put ( "" g i t _  u r l"" ""https: /  / github . com / jstrachan / demo230 . g"
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\ParseTest.java,assert parse example file,"public t >  t   (  string file name  class <  t >  clazz )  throws  exception  {   file example file = new  file ( get kubernetes examples dir (  )  file name ) ; assert file exists ( example file ) ;  object answer =  o b j e c t _  m a p p e r . reader for ( clazz )  . read value ( example file ) ; assert not null ( "" null returned while unmarshalling ""  +  example file answer ) ;  l o g . info ( "" parsed: ""  +  file name  +  "" as: "" +  answer ) ; assert true ( "" is not an instance of ""  +  clazz . get simple name (  )   +  "" was: "" +  answer . get class (  )  . get name (  )  clazz . is instance ( answer )  ) ; return clazz . cast ( answer ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\ParseTest.java,get kubernetes examples dir,"public file   (  )  {   file answer = new  file ( get kubernetes source dir (  )  ""api / examples"" ) ; assert directory exists ( answer ) ; return answer;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\ParseTest.java,get kubernetes source dir,"public file   (  )  {   string basedir =  system . get property ( ""basedir"" "" . "" ) ;  string kube source dir = basedir  +  "" / src / main / kubernetes"";  string path =  system . get property (  s y s t e m _  p r o p e r t y _  k u b e _  d i r kube source dir ) ;  file kube dir = new  file ( path ) ; assert true ( "" kube directory ""  +  kube dir  +  "" does not exist !   please supply the correct value in the "" +   s y s t e m _  p r o p e r t y _  k u b e _  d i r +  "" system property value"" kube dir . exists (  )  ) ; return kube dir;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\ParseTest.java,test parse list,"test public void   (  )  throws  exception  {   kubernetes list list = assert parse example file ( ""list . json""  kubernetes list . class ) ;  list <  has metadata >  objects = list . get items (  ) ; assert not empty ( ""objects"" objects ) ; assert equals ( ""size"" 2 objects . size (  )  ) ;  object service = obje"
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\ParseTest.java,test parse pod,"test public void   (  )  throws  exception  {  assert parse example file ( ""pod . json""  pod . class ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\ParseTest.java,test parse pod list,"test public void   (  )  throws  exception  {   kubernetes list pod list = assert parse example file ( ""pod - list . json""  kubernetes list . class ) ;  list <  has metadata >  items = pod list . get items (  ) ; assert not empty ( ""items"" items ) ;  pod pod =  (  pod ) items . get ( 0 ) ; assert not null ( ""pod1"" pod ) ; "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\ParseTest.java,test parse pod list empty results,"test public void   (  )  throws  exception  {   pod list pod list = assert parse example file ( ""pod - list - empty - results . json""  pod list . class ) ;  list <  pod >  items = pod list . get items (  ) ; assert not empty ( ""items"" items ) ;  pod pod = items . get ( 0 ) ; assert not null ( ""pod1"" pod ) ; assert equals ( "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\ParseTest.java,test parse service,"test public void   (  )  throws  exception  {   service service = assert parse example file ( ""service . json""  service . class ) ; assert equals ( "" service"" service . get kind (  )  ) ;  integer expected port = 9090; assert equals ( expected port get container ports ( service )  . iterator (  )  . next (  )  ) ;  } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\ParseTest.java,test parse template,"test public void   (  )  throws  exception  {   template template = assert parse example file ( ""template . json""  template . class ) ;  list <  has metadata >  objects = template . get objects (  ) ; assert not empty ( ""objects"" objects ) ; assert true ( ""size is ""  +  objects . size (  )  objects . size (  )   =  = "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\pipelines\OpenShiftPipelineTest.java,get kubernetes client,"public kubernetes client   (  )  {  if  ( kubernetes client  =  =  null )   {  kubernetes client = server . get kubernetes client (  ) ;  }  assert not null ( "" no  kubernetes client was created by the mock ! "" kubernetes client ) ; return kubernetes client;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\pipelines\OpenShiftPipelineTest.java,set kubernetes client,public kubernetes client kubernetes client )  {  this . kubernetes client = kubernetes client;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\pipelines\OpenShiftPipelineTest.java,test pipelines from config map,"test public void   (  )  throws  exception  {   string namespace = ""myproject""; final  config map config map = load test config map (  ) ; server . expect (  )  . with path ( "" / api / v1 / namespaces / ""  +  namespace  +  "" / configmaps / "" +   f a b r i c8 _  p i p e l i n e s )  . and return ( 200 config map )  . once (  ) ;  pipeline"
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\pipelines\OpenShiftPipelineTest.java,test pipelines from config map with caching,"test public void   (  )  throws  exception  {   string namespace = ""myproject""; final  config map config map = load test config map (  ) ; server . expect (  )  . with path ( "" / api / v1 / namespaces / ""  +  namespace  +  "" / configmaps / "" +   f a b r i c8 _  p i p e l i n e s )  . and return ( 200 config map )  . once (  ) ;  map <  stri"
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\pipelines\OpenShiftPipelineTest.java,test pipelines with no config map,"test public void   (  )  throws  exception  {   string namespace = ""myproject"";  pipeline configuration configuration =  pipeline configuration . load pipeline configuration ( get kubernetes client (  )  namespace ) ; assert job name ( configuration ""whatnot"" ""master""  pipeline kind .  develo"
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\pipelines\PipelineConfigurationParseTest.java,load test config map,"public config map   (  )  throws  i o exception  {   string path =  f a b r i c8 _  p i p e l i n e s  +  "" . yml"";  u r l resource =  pipeline configuration parse test . class . get class loader (  )  . get resource ( path ) ; assert not null ( "" could not load resource: ""  +  path resource ) ; try  (  input stream in = resource . open stream (  )  )  {  assert not null ( "" could not open stream for resource: ""  +  resource in ) ;  config map config map =  kubernetes helper . load yaml ( in  config map . class ) ; assert not null ( "" should have loaded ""  +  resource config map ) ; return config map;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\pipelines\PipelineConfigurationParseTest.java,test load mutate and load pipeline configuration,"test public void   (  )  throws  exception  {   config map config map = load test config map (  ) ;  pipeline configuration pipeline configuration =  pipeline configuration . get pipeline configuration ( config map ) ; pipeline configuration . set cd branch patterns (  arrays . as list ( ""cd - 1"" ""cd - 2"" ) "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\pipelines\PipelineConfigurationParseTest.java,test parse pipeline configuration,"test public void   (  )  throws  exception  {   config map config map = load test config map (  ) ;  pipeline configuration pipeline configuration =  pipeline configuration . get pipeline configuration ( config map ) ;  system . out . println ( "" loaded: ""  +  pipeline configuration ) ; assert that ( pip"
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\pipelines\ViewPipelineConfiguration.java,main,"public string[] args )  {  try  {   pipeline configuration pipeline; if  ( args . length  >  0 )   {  pipeline =  pipeline configuration . load pipeline configuration ( args[0] ) ;  }  else  {  pipeline =  pipeline configuration . load pipeline configuration (  ) ;  }   system . out . println ( "" main namespace: ""  +  pipeline . get space namespace (  )  ) ;  system . out . println ( "" job  name to kind map: ""  +  pipeline . get job name to kind map (  )  ) ;  system . out . println ( "" c i branch patterns: ""  +  pipeline . get ci branch patterns (  )  ) ;  system . out . println ( "" c d branch patterns: ""  +  pipeline . get cd branch patterns (  )  ) ;  system . out . println ( "" c d git organisation branch patterns: ""  +  pipeline . get cd git host and organisation to branch patterns (  )  ) ;  system . out . println ( "" disable  i tests for  c d: ""  +  pipeline . is disable i tests c d (  )  ) ;  system . out . println ( "" disable  i tests for  c i: ""  +  pipeline . is disable i tests c i (  )  ) ;  }  catch  (   exception e )   {   system . out . println ( "" failed with: ""  +  e ) ; e . print stack trace (  ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\pipelines\PipelinesTest.java,assert job name,public pipeline configuration configuration  string job name  string branch name  string git url  pipeline kind expected kind )  {   job environment job environment = create job environment ( job name branch name git url ) ; assert job name ( configuration job environment job name expected kind ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\pipelines\PipelinesTest.java,create job environment,public job environment   (  string job name  string branch name )  {   job environment answer = new  job environment (  ) ; answer . set job name ( job name ) ; answer . set branch name ( branch name ) ; return answer;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\pipelines\PipelinesTest.java,test enable c d builds for organisation,"test public void   (  )  throws  exception  {   pipeline configuration configuration =  pipeline configuration . create default (  )  . set c d git organisation ( ""github . com / fabric8io"" ""master"" )  . set job names developer ( ""whatnot"" ) ; assert job name ( configuration ""foo"" ""master"" ""git@githu"
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\pipelines\PipelinesTest.java,test enable c d on named builds,"test public void   (  )  throws  exception  {   pipeline configuration configuration =  pipeline configuration . create default (  )  . set job names c d ( ""foo"" ""bar"" ) ; assert job name ( configuration ""foo"" ""master""  pipeline kind .  c d ) ; assert job name ( configuration ""bar"" ""master""  pipeline"
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\pipelines\PipelinesTest.java,test not c d builds by default,"test public void   (  )  throws  exception  {   pipeline configuration configuration =  pipeline configuration . create default (  ) ; assert job name ( configuration ""whatnot"" ""master""  pipeline kind .  developer ) ; assert job name ( configuration ""whatnot"" null  pipeline kind .  developer ) ;"
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\ProcessTemplateLocallyTest.java,test process template locally,"test public void   (  )  throws  exception  {   template template = assert parse example file ( ""template . json""  template . class ) ;  list <  has metadata >  objects = template . get objects (  ) ; assert not empty ( ""objects"" objects ) ;  kubernetes list list =  templates . process templates locally ( te"
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\PodIdToReplicationControllerIDExample.java,main,"public string[] args )  {  if  ( args . length  <  3 )   {   system . out . println ( "" arguments: kubernete master url namespace pod i d"" ) ; return;  }   string kubernete master url = args[0];  string namespace = args[1];  string pod i d = args[2];  system . out . println ( "" looking up  replication controller for pod  i d: ""  +  pod i d ) ;  kubernetes client client = new  default kubernetes client ( new  config builder (  )  . with master url ( kubernete master url )  . build (  )  ) ;  pod pod =  (  pod ) client . pods (  )  . in namespace ( namespace )  . with name ( pod i d ) ; pod . get metadata (  )  . get labels (  ) ;  list <  replication controller >  replication controllers = client . replication controllers (  )  . in namespace ( namespace )  . with labels ( pod . get metadata (  )  . get labels (  )  )  . list (  )  . get items (  ) ; if  ( replication controllers . size (  )   =  =  1 )   {   replication controller replication controller = replication controllers . get ( 0 ) ;  string id =  kubernetes helper . get name ( replication controller ) ;  system . out . println ( "" found replication controller: ""  +  id ) ;  }  else  {   system . out . println ( "" could not find replication controller ! "" ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\pipelines\ViewPipeline.java,main,"public string[] args )  {  if  ( args . length  =  =  0 )   {   system . err . println ( "" usage:  view pipeline job name [branch name] [git url]"" ) ; return;  }   string job name = args[0];  string branch name = ""master"";  string git url = null; if  ( args . length  >  1 )   {  branch name = args[1];  }  if  ( args . length  >  2 )   {  git url = args[2];  }  try  {   job environment environment = new  job environment (  ) ; environment . set job name ( job name ) ; environment . set branch name ( branch name ) ; environment . set git url ( git url ) ;  kubernetes client kubernetes client = new  default kubernetes client (  ) ;  string namespace = kubernetes client . get namespace (  ) ; if  (  strings . is null or blank ( namespace )  )   {  namespace =  kubernetes helper . default namespace (  ) ;  }   pipeline pipeline =  pipelines . get pipeline ( kubernetes client namespace environment ) ;  system . out . println ( "" found pipeline for job: ""  +  pipeline . get job name (  )   +  "" of kind: "" +  pipeline . get kind (  )  ) ;  }  catch  (   introspection exception e )   {   system . out . println ( "" failed with: ""  +  e ) ; e . print stack trace (  ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\ShowConfig.java,main,"public string .  .  .  args )  {  try  {   system . out . println ( "" current username: ""  +  current user name (  )  ) ;  config config =  configs . parse configs (  ) ; if  ( config  =  =  null )   {   system . out . println ( "" no  config loaded ! "" ) ;  }  else  {   context context =  configs . get current context ( config ) ; if  ( context  !  =  null )   {   system . out . println ( ""context: ""  +  config . get current context (  )  ) ;  system . out . println ( ""cluster: ""  +  context . get cluster (  )  ) ;  system . out . println ( ""user: ""  +  context . get user (  )  ) ;  system . out . println ( ""namespace: ""  +  context . get namespace (  )  ) ;  }  else  {   system . out . println ( "" no current context ! "" ) ;  }   }   }  catch  (   exception e )   {   system . out . println ( "" caught: ""  +  e ) ; e . print stack trace (  ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\spaces\ListSpaces.java,main,"public string[] args )  {   string namespace = null; if  ( args . length  >  0 )   {  namespace = args[0];  }   kubernetes client kubernetes client = new  default kubernetes client (  ) ;  spaces spaces =  spaces . load ( kubernetes client namespace ) ;  sorted set <  space >  set = spaces . get space set (  ) ; for  (   space space : set )   {   system . out . println ( "" space ""  +  space . get name (  )   +  ""  =  "" +  space ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\spaces\SpacesTest.java,get kubernetes client,"public kubernetes client   (  )  {  if  ( kubernetes client  =  =  null )   {  kubernetes client = server . get kubernetes client (  ) ;  }  assert not null ( "" no  kubernetes client was created by the mock ! "" kubernetes client ) ; return kubernetes client;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\spaces\SpacesTest.java,set kubernetes client,public kubernetes client kubernetes client )  {  this . kubernetes client = kubernetes client;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\spaces\SpacesTest.java,test load spaces,"test public void   (  )  {   string namespace = ""myproject"";  string resource name = ""fabric8 - spaces . yml"";  kubernetes client client = get kubernetes client (  ) ;  u r l resource = get class (  )  . get class loader (  )  . get resource ( resource name ) ; assert not null ( "" failed to load resource from c"
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\SafeKubernetesNameTest.java,assert safe kubernetes name,"public string text  string expected boolean allow dots )  {   string actual =  kubernetes names . convert to kubernetes name ( text allow dots ) ; assert equals ( "" safe name for `""  +  text  +  ""`"" expected actual ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\SafeKubernetesNameTest.java,test safe names starting with digits,"test public void   (  )  throws  exception  {  assert safe kubernetes name ( ""1bar"" ""n1bar"" false ) ; assert safe kubernetes name ( ""9 -  foo"" ""n9 - foo"" false ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\SafeKubernetesNameTest.java,test safe names with dots,"test public void   (  )  throws  exception  {  assert safe kubernetes name ( "" foo .  bar"" ""foo . bar"" true ) ; assert safe kubernetes name ( "" foo -  bar"" ""foo - bar"" true ) ; assert safe kubernetes name ( "" -  foo -  bar"" ""foo - bar"" true ) ; assert safe kubernetes name ( "" .  -  foo -  bar"" ""foo - bar"" true ) ; ass"
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\SafeKubernetesNameTest.java,test safe names without dots,"test public void   (  )  throws  exception  {  assert safe kubernetes name ( "" foo .  bar"" ""foo - bar"" false ) ; assert safe kubernetes name ( "" foo -  bar"" ""foo - bar"" false ) ; assert safe kubernetes name ( "" -  foo -  bar"" ""foo - bar"" false ) ; assert safe kubernetes name ( "" .  -  foo -  bar"" ""foo - bar"" false ) ;"
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\TemplatesTest.java,test combine resources into template,"test public void   (  )  throws  exception  {   service template service = new  service builder (  )  . with new metadata (  )  . with name ( ""template service"" )  . end metadata (  )  . build (  ) ;  kubernetes list list = new  kubernetes list builder (  )  . add new service item (  )  . with new metadata (  )  . with name ( ""serv"
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\ViewEndpoints.java,display,"protected endpoints endpoints )  {  if  ( endpoints  !  =  null )   {   string name = endpoints . get metadata (  )  . get name (  ) ;  string namespace = endpoints . get metadata (  )  . get namespace (  ) ;  list <  string >  urls = new  array list <  >  (  ) ;  list <  endpoint subset >  endpoints subsets = endpoints . get subsets (  ) ; for  (   endpoint subset endpoint subset : endpoints subsets )   {  for  (   endpoint address endpoint address : endpoint subset . get addresses (  )  )   {  for  (   endpoint port endpoint port : endpoint subset . get ports (  )  )   {  urls . add ( endpoint address . get ip (  )   +  "":""  +  endpoint port . get port (  )  ) ;  }   }   }   system . out . println ( "" service: ""  +  name  +  "" namespace: "" +  namespace +  "" urls: "" +  urls ) ;  }  else  {   system . out . println ( ""null endpoints"" ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\ViewEndpoints.java,list endpoints,protected kubernetes client client  string service  string namespace )  throws  exception  {  if  ( service  !  =  null )   {   endpoints endpoints = client . endpoints (  )  . in namespace ( namespace )  . with name ( service )  . get (  ) ; display ( endpoints ) ;  }  else  {   endpoints list endpoints list = client . endpoints (  )  . list (  ) ; if  ( endpoints list  !  =  null )   {   list <  endpoints >  items = not null list ( endpoints list . get items (  )  ) ; for  (   endpoints item : items )   {  display ( item ) ;  }   }   }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\ViewEndpoints.java,main,"public string .  .  .  args )  {   system . out . println ( "" usage: [service id] [namespace]"" ) ;  kubernetes client client = new  default kubernetes client (  ) ; try  {   string service = null;  string namespace = null; if  ( args . length  >  0 )   {  service = args[0];  }  if  ( args . length  >  1 )   {  namespace = args[1];  }  list endpoints ( client service namespace ) ;  }  catch  (   exception e )   {   system . out . println ( "" f a i l e d: ""  +  e ) ; e . print stack trace (  ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\UserConfigurationCompareTest.java,test common denominator,test public void   (  )  {  assert equals ( null  user configuration compare . get common denominator (  replication controller . class  pod . class )  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\TriggerBuild.java,main,"public string .  .  .  args )  {  if  ( args . length  <  1 )   {   system . out . println ( "" usage: build config name namespace secret type"" ) ; return;  }   string name = args[0];  string namespace = ""default""; if  ( args . length  >  1 )   {  namespace = args[1];  }   open shift client client = new  default open shift client (  ) ; try  {  client . build configs (  )  . in namespace ( namespace )  . with name ( name )  . trigger ( new  web hook trigger ( true null )  ) ;  }  catch  (   exception e )   {   system . out . println ( "" f a i l e d: ""  +  e ) ; e . print stack trace (  ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\WatchBuildsExample.java,event received,"override public void   (  action action  build build )  {   system . out . println ( action  +  "": ""  +  build ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\ViewServiceIPs.java,main,"public string .  .  .  args )  {   system . out . println ( "" usage: [service name]"" ) ; try  {   string service = null; if  ( args . length  >  0 )   {  service = args[0];  }   set <  string >  addresses =  kubernetes helper . lookup service in dns ( service ) ; if  ( addresses  !  =  null )   {   system . out . println ( ""addresses: ""  +  addresses ) ;  }  else  {   system . out . println ( ""null addresses"" ) ;  }   }  catch  (   exception e )   {   system . out . println ( "" f a i l e d: ""  +  e ) ; e . print stack trace (  ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\WatchBuildsExample.java,main,"public string .  .  .  args )  throws  exception  {   open shift client client = new  default open shift client (  ) ; client . builds (  )  . watch ( new  watcher <  build >  (  )  {  @ override public void event received (   action action   build build )  {   system . out . println ( action  +  "": ""  +  build ) ;  }  @ override public void on close (   kubernetes client exception e )  {   system . out . println ( "" closed: ""  +  e ) ;  }   }   ) ; client . close (  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\WatchBuildsExample.java,on close,"override public void   (  kubernetes client exception e )  {   system . out . println ( "" closed: ""  +  e ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\WatchBuilds.java,main,"public string .  .  .  args )  {   string namespace = null; if  ( args . length  >  0 )   {  namespace = args[0];  }   string console link =  links . get fabric8 console link (  ) ;  open shift client client = new  default open shift client (  ) ;  build listener build listener = new  build listener (  )  {  @ override public void on build finished (   build finished event event )  {   system . out . println ( "" build: ""  +  event . get uid (  )   +  "" for config: "" +  event . get config name (  )  +  "" finished .   status: "" +  event . get status (  )  +  "" link: "" +  event . get build link (  )  ) ;  }   }  ;  build watcher watcher = new  build watcher ( client build listener namespace console link ) ; long poll time = 3000; watcher . schedule ( poll time ) ; watcher . join (  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\WatchBuilds.java,on build finished,"override public void   (  build finished event event )  {   system . out . println ( "" build: ""  +  event . get uid (  )   +  "" for config: "" +  event . get config name (  )  +  "" finished .   status: "" +  event . get status (  )  +  "" link: "" +  event . get build link (  )  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\WatchServicesExample.java,event received,"override public void   (  action action  service service )  {   system . out . println ( action  +  "": ""  +  service ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\WatchServicesExample.java,main,"public string .  .  .  args )  throws  exception  {   kubernetes client client = new  default kubernetes client (  ) ; client . services (  )  . watch ( new io . fabric8 . kubernetes . client .  watcher <  service >  (  )  {  @ override public void event received (   action action   service service )  {   system . out . println ( action  +  "": ""  +  service ) ;  }  @ override public void on close (   kubernetes client exception e )  {   system . out . println ( "" closed: ""  +  e ) ;  }   }   ) ; client . close (  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\WatchServicesExample.java,on close,"override public void   (  kubernetes client exception e )  {   system . out . println ( "" closed: ""  +  e ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\WatchPodsExample.java,event received,"override public void   (  action action  pod pod )  {   system . out . println ( action  +  "": ""  +  pod ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\YamlSerialiseTest.java,test serialise yaml,"test public void   (  )  throws  exception  {   deployment deployment = new  deployment builder (  )  . with new metadata (  )  . with name ( ""foo"" )  . end metadata (  )  . with new spec (  )  . with replicas ( 1 )  . with new template (  )  . with new spec (  )  . add new container (  )  . with image ( ""cheese"" )  . end container (  )  . end sp"
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\WatchPodsExample.java,main,"public string .  .  .  args )  throws  exception  {   kubernetes client client = new  default kubernetes client (  ) ; client . pods (  )  . watch ( new io . fabric8 . kubernetes . client .  watcher <  pod >  (  )  {  @ override public void event received (   action action   pod pod )  {   system . out . println ( action  +  "": ""  +  pod ) ;  }  @ override public void on close (   kubernetes client exception e )  {   system . out . println ( "" closed: ""  +  e ) ;  }   }   ) ; client . close (  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\WatchPodsExample.java,on close,"override public void   (  kubernetes client exception e )  {   system . out . println ( "" closed: ""  +  e ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\ViewNodes.java,display,"protected node node )  {  if  ( node  !  =  null )   {   string id = node . get metadata (  )  . get name (  ) ;  system . out . println ( "" node: ""  +  id  +  "" resources: "" +  node . get status (  )  . get capacity (  )  ) ;  }  else  {   system . out . println ( ""null node"" ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\ViewNodes.java,list minions,protected kubernetes client client )  throws  exception  {   node list node list = client . nodes (  )  . list (  ) ; if  ( node list  !  =  null )   {   list <  node >  items = not null list ( node list . get items (  )  ) ; for  (   node item : items )   {  display ( item ) ;  }   }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\ViewNodes.java,main,"public string .  .  .  args )  {   kubernetes client client = new  default kubernetes client (  ) ; try  {  list minions ( client ) ;  }  catch  (   exception e )   {   system . out . println ( "" f a i l e d: ""  +  e ) ; e . print stack trace (  ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\AbstractPodSelectionAssert.java,get default not ready timeout ms,public long value (  systems . get env var or system property (  p r o p e r t y _  a s s e r t _  n o t _  r e a d y _  t i m e o u t _  m i l l i s )   d e f a u l t _  n o t _  r e a d y _  t i m e o u t _  m s ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\AbstractPodSelectionAssert.java,get default ready period ms,public long value (  systems . get env var or system property (  p r o p e r t y _  a s s e r t _  r e a d y _  p e r i o d _  m i l l i s )   d e f a u l t _  r e a d y _  p e r i o d _  m s ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\Conditions.java,error status,public condition <  pod >    (  )  {  return status (  pod status type .  e r r o r ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\Conditions.java,has label,"public t extends  has metadata >  condition <  t >    ( final  string key final  string value )  {  return new  condition <  t >  (  )  {  @ override public  string to string (  )  {  return ""has label ( ""  +  key  +  ""  =  "" +  value +  "" ) "";  }  @ override public boolean matches (   t resource )  {  return matches label ( resource . get metadata (  )  . get labels (  )  key value ) ;  }   }  ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\Conditions.java,has name,"public t extends  has metadata >  condition <  t >    ( final  string name )  {  return new  condition <  t >  (  )  {  @ override public  string to string (  )  {  return ""has name ( ""  +  name  +  "" ) "";  }  @ override public boolean matches (   t resource )  {  return  objects . equals ( name resource . get metadata (  )  . get name (  )  ) ;  }   }  ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\Conditions.java,has namespace,"public t extends  has metadata >  condition <  t >    ( final  string namespace )  {  return new  condition <  t >  (  )  {  @ override public  string to string (  )  {  return ""has namespace ( ""  +  namespace  +  "" ) "";  }  @ override public boolean matches (   t resource )  {  return  objects . equals ( namespace resource . get metadata (  )  . get namespace (  )  ) ;  }   }  ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\Conditions.java,matches,override public boolean   (  service service )  {  return matches label ( service . get metadata (  )  . get labels (  )  key value ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\Conditions.java,matches label,public map <  string  string >  labels  string key  string value )  {  if  ( labels  !  =  null )   {   string actual = labels . get ( key ) ; return  objects . equals ( value actual ) ;  }  else  {  return false;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\Conditions.java,pod label,"public condition <  pod >    ( final  string key final  string value )  {  return new  condition <  pod >  (  )  {  @ override public  string to string (  )  {  return ""pod label ( ""  +  key  +  ""  =  "" +  value +  "" ) "";  }  @ override public boolean matches (   pod pod )  {  return matches label ( pod . get metadata (  )  . get labels (  )  key value ) ;  }   }  ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\Conditions.java,pod namespace,"public condition <  pod >    ( final  string namespace )  {  return new  condition <  pod >  (  )  {  @ override public  string to string (  )  {  return ""pod namespace ( ""  +  namespace  +  "" ) "";  }  @ override public boolean matches (   pod pod )  {  return  objects . equals ( namespace pod . get metadata (  )  . get namespace (  )  ) ;  }   }  ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\Conditions.java,replication controller label,"public condition <  replication controller >    ( final  string key final  string value )  {  return new  condition <  replication controller >  (  )  {  @ override public  string to string (  )  {  return ""replication controller label ( ""  +  key  +  ""  =  "" +  value +  "" ) "";  }  @ override public boolean matches (   replication controller replication controller schema )  {  return matches label ( replication controller schema . get metadata (  )  . get labels (  )  key value ) ;  }   }  ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\Conditions.java,running status,public condition <  pod >    (  )  {  return status (  pod status type .  o k ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\Conditions.java,service label,"public condition <  service >    ( final  string key final  string value )  {  return new  condition <  service >  (  )  {  @ override public  string to string (  )  {  return ""service label ( ""  +  key  +  ""  =  "" +  value +  "" ) "";  }  @ override public boolean matches (   service service )  {  return matches label ( service . get metadata (  )  . get labels (  )  key value ) ;  }   }  ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\Conditions.java,status,"public condition <  pod >    ( final  pod status type status )  {  return new  condition <  pod >  (  )  {  @ override public  string to string (  )  {  return ""pod status ( ""  +  status  +  "" ) "";  }  @ override public boolean matches (   pod pod )  {  return  objects . equals ( status  kubernetes helper . get pod status ( pod )  ) ;  }   }  ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\Conditions.java,to string,"override public  string   (  )  {  return ""service label ( ""  +  key  +  ""  =  "" +  value +  "" ) "";  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\Conditions.java,waiting status,public condition <  pod >    (  )  {  return status (  pod status type .  w a i t ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\Assertions.java,assert that,public kubernetes namespace assert   (  kubernetes client kubernetes client  string namespace )  {  return assert that ( kubernetes client )  . namespace ( namespace ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\DeploymentConfigPodsAssert.java,pods,"public pod selection assert   (  )  {  spec (  )  . is not null (  )  . selector (  )  . is not null (  ) ;  deployment config spec spec = this . actual . get spec (  ) ;  integer replicas = spec . get replicas (  ) ;  map <  string  string >  match labels = spec . get selector (  ) ;  list <  label selector requirement >  match expressions = new  array list <  >  (  ) ; return new  pod selection assert ( client replicas match labels match expressions "" deployment config ""  +   kubernetes helper . get name ( actual )  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\Assertions.java,join description,"public string   (  abstract assert asserter  string property name )  {   string text = asserter . description text (  ) ; if  ( text  =  =  null || text . length (  )   =  =  0 )   {  text = asserter . get class (  )  . get simple name (  ) ;  string postfix = "" assert""; if  ( text . ends with ( postfix )  )   {  text = text . substring ( 0 text . length (  )   -  postfix . length (  )  ) ;  }   }  return text  +  "" . ""  +  property name;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\DeploymentPodsAssert.java,deployment pods assert,public kubernetes client client  deployment deployment )  {  super ( deployment ) ; this . client = client;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\DeploymentPodsAssert.java,pods,override public  pod selection assert   (  )  {  spec (  )  . is not null (  )  . selector (  )  . is not null (  ) ;  deployment spec spec = this . actual . get spec (  ) ;  integer replicas = spec . get replicas (  ) ;  label selector selector = spec . get selector (  ) ;  map <  string  string >  match labels = selector . get match
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\KubernetesNamespaceAssert.java,kubernetes namespace assert,public kubernetes client client  string namespace )  {  super ( client ) ; this . client = client; this . namespace = namespace;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\KubernetesNamespaceAssert.java,namespace,override public  string   (  )  {  return namespace;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\HasMetadatasAssert.java,has metadatas assert,public list <  r >  actual )  {  super ( actual ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\HasMetadatasAssert.java,assert size,"public integer assert   (  )  {  return  (  integer assert ) org . assertj . core . api .  assertions . assert that ( get (  )  . size (  )  )  . as ( ""size"" ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\HasMetadatasAssert.java,assert that,protected a i   (  iterable <  r >  result )  {   list <  r >  list =  lists . new array list ( result ) ; return create list assert ( list ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\KubernetesAssert.java,kubernetes assert,public kubernetes client client )  {  super ( client  kubernetes assert . class ) ; this . client = client;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\KubernetesAssert.java,create pod selection assert,protected has pod selection assert   (  has metadata resource )  {  if  ( resource instanceof  deployment config )   {   deployment config deployment =  (  deployment config ) resource; return new  deployment config pods assert ( client deployment ) ;  }  else if  ( resource instanceof  deployment )   {   deployment deployment =  (  deployment ) resource; return new  deployment pods assert ( client deployment ) ;  }  else if  ( resource instanceof  replica set )   {   replica set replica =  (  replica set ) resource; return new  replica set pods assert ( client replica ) ;  }  else if  ( resource instanceof  replication controller )   {   replication controller replica =  (  replication controller ) resource; return new  replication controller pods assert ( client replica ) ;  }  else  {  return null;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\KubernetesAssert.java,deployment,"public has pod selection assert   (  string deployment name )  {   string namespace = namespace (  ) ;  string qualified name = namespace  +  "" . ""  +  deployment name;  open shift client open shift client = new  controller ( client )  . get open shift client or null (  ) ; if  ( open shift client  !  =  null && open shift client . supports open shift a p i group (  open shift a p i groups .  a p p s )  )   {   deployment config deployment = open shift client . deployment configs (  )  . in namespace ( namespace )  . with name ( deployment name )  . get (  ) ; assert that ( deployment )  . described as ( "" deployment config: ""  +  qualified name )  . is not null (  )  . metadata (  )  . name (  )  . is equal to ( deployment name ) ; return new  deployment config pods assert ( client deployment ) ;  }  else  {   deployment deployment = client . extensions (  )  . deployments (  )  . in namespace ( namespace )  . with name ( deployment name )  . get (  ) ; assert that ( deployment )  . described as ( "" deployment: ""  +  qualified name )  . is not null (  )  . metadata (  )  . name (  )  . is equal to ( deployment name ) ; return new  deployment pods assert ( client deployment ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\KubernetesAssert.java,deployments,"public has pod selection assert   (  )  {   list <  has pod selection assert >  asserters = new  array list <  >  (  ) ;  list <  has metadata >  resources = new  array list <  >  (  ) ; try  {  resources =  kubernetes helper . find kubernetes resources on classpath ( new  controller ( client )  ) ;  }  catch  (   i o exception e )   {  fail ( "" failed to load kubernetes resources on the classpath: ""  +  e e ) ;  }  for  (   has metadata resource : resources )   {   has pod selection assert asserter = create pod selection assert ( resource ) ; if  ( asserter  !  =  null )   {  asserters . add ( asserter ) ;  }   }   string message = "" no pod selection kinds found on the classpath such as  deployment   deployment config   replica set   replication controller""; assert that ( asserters )  . described as ( message )  . is not empty (  ) ; if  ( asserters . size (  )   =  =  1 )   {  return asserters . get ( 0 ) ;  }  return new  multi has pod selection assert ( asserters ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\KubernetesAssert.java,get pod,"protected pod   (  string pod id  string namespace )  {  assert that ( pod id )  . is not null (  ) ;  pod pod = null; try  {  pod = client . pods (  )  . in namespace ( namespace )  . with name ( pod id )  . get (  ) ;  }  catch  (   exception e )   {  fail ( "" could not find pod for '""  +  pod id  +  ""'"" ) ;  }  assert that ( pod )  . is not null (  ) ; return pod;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\KubernetesAssert.java,get pods,protected list <  pod >    (  string namespace )  {   pod list pod list = client . pods (  )  . in namespace ( namespace )  . list (  ) ; assert that ( pod list )  . is not null (  ) ;  list <  pod >  pods = pod list . get items (  ) ; pod list ( pods )  . is not null (  ) ; return pods;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\KubernetesAssert.java,get replication controller,"protected replication controller   (  string replication controller id  string namespace )  {  assert that ( replication controller id )  . is not null (  ) ;  replication controller replication controller = null; try  {  replication controller = client . replication controllers (  )  . in namespace ( namespace )  . with name ( replication controller id )  . get (  ) ;  }  catch  (   exception e )   {  fail ( "" could not find replication controller for '""  +  replication controller id  +  ""'"" ) ;  }  assert that ( replication controller )  . is not null (  ) ; return replication controller;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\MultiHasPodSelectionAssert.java,multi has pod selection assert,public list <  has pod selection assert >  asserters )  {  this . asserters = asserters;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\MultiHasPodSelectionAssert.java,get pods,override public  list <  pod >    (  )  {   list <  pod >  rc = new  array list <  >  (  ) ; for  (   has pod selection assert asserter : asserters )   {  for  (   pod pod : asserter . pods (  )  . get pods (  )  )   {  rc . add ( pod ) ;  }   }  return rc;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\MultiHasPodSelectionAssert.java,is pod ready for period,override public  multi pod selection assert   ( final long not ready timeout m s final long ready period m s )  {  final  atomic reference <  throwable >  failure = new  atomic reference <  >  (  ) ;  array list <  thread >  threads = new  array list <  >  ( asserters . size (  )  ) ; for  (   has pod selection assert a
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\MultiHasPodSelectionAssert.java,pods,override public  abstract pod selection assert   (  )  {  return new  multi pod selection assert (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\MultiHasPodSelectionAssert.java,run,override public void   (  )  {  try  {  asserter . pods (  )  . is pod ready for period ( not ready timeout m s ready period m s ) ;  }  catch  (   throwable e )   {  failure . set ( e ) ;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\NavigationListAssert.java,navigation list assert,public list <  ?  extends  t >  actual  assert factory <  t  e a >  assert factory )  {  super ( actual ) ; this . assert factory = assert factory;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\NavigationListAssert.java,first,"public e a   (  )  {  is not empty (  ) ; return to assert ( actual . get ( 0 )   assertions . join description ( this ""first (  ) "" )  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\NavigationListAssert.java,item,"public e a   ( int index )  {  is not empty (  ) ; assert that ( index )  . described as (  assertions . join description ( this ""index"" )  )  . is greater than or equal to ( 0 )  . is less than ( actual . size (  )  ) ; return to assert ( actual . get ( index )   assertions . join description ( this ""index ( ""  +  index  +  "" ) "" )  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\NavigationListAssert.java,last,"public e a   (  )  {  is not empty (  ) ; return to assert ( actual . get ( actual . size (  )   -  1 )   assertions . join description ( this ""last (  ) "" )  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\NavigationListAssert.java,to assert,protected e a   (  t value  string description )  {  return  (  e a ) assert factory . create assert ( value )  . described as ( description ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\KubernetesAssert.java,get service,"protected service   (  string service id  string namespace )  {  assert that ( service id )  . is not null (  ) ;  service service = null; try  {  service = client . services (  )  . in namespace ( namespace )  . with name ( service id )  . get (  ) ;  }  catch  (   exception e )   {  fail ( "" could not find service for '""  +  service id  +  ""'"" ) ;  }  assert that ( service )  . is not null (  ) ; return service;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\KubernetesAssert.java,get service spec,protected service spec   (  string service id  string namespace )  {   service service = get service ( service id namespace ) ;  service spec spec = service . get spec (  ) ; assert that ( spec )  . is not null (  ) ; return spec;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\KubernetesAssert.java,has service port,"public string service id int port )  {   service spec spec = get service spec ( service id namespace (  )  ) ; boolean found = false;  list <  service port >  ports = spec . get ports (  ) ;  list <  integer >  port numbers = new  array list <  >  (  ) ; if  ( ports  !  =  null )   {  for  (   service port service port : ports )   {   integer a port = service port . get port (  ) ; if  ( a port  !  =  null )   {  if  ( a port  =  =  port )   {  found = true; break;  }  else  {  port numbers . add ( a port ) ;  }   }   }   }  assert that ( found )  . described as ( "" no port found for ""  +  port  +  "" but found ports: "" +  port numbers )  . is true (  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\KubernetesAssert.java,namespace,public string   (  )  {  return client . get namespace (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\KubernetesAssert.java,pod,public pod assert   (  string pod name )  {  return assert that ( get pod ( pod name namespace (  )  )  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\KubernetesAssert.java,pod list,public pods assert   (  list <  pod >  pods )  {  assert that ( pods )  . is not null (  ) ; return new  pods assert ( pods client ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\KubernetesAssert.java,pods,public pods assert   (  )  {   list <  pod >  pods = get pods ( namespace (  )  ) ; return pod list ( pods ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\KubernetesAssert.java,pods for replication controller,public pods assert   (  replication controller replication controller )  {   list <  pod >  all pods = get pods ( replication controller . get metadata (  )  . get namespace (  )  ) ;  list <  pod >  pods =  kubernetes helper . get pods for replication controller ( replication controller all pods ) ; return pod list ( pods ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\KubernetesAssert.java,pods for service,public pods assert   (  service service )  {   list <  pod >  all pods = get pods ( service . get metadata (  )  . get namespace (  )  ) ;  list <  pod >  pods =  kubernetes helper . get pods for service ( service all pods ) ; return pod list ( pods ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\KubernetesAssert.java,replicas,"public has pod selection assert   (  string replica name )  {   string namespace = namespace (  ) ;  string qualified name = namespace  +  "" . ""  +  replica name;  replica set replicas set = client . extensions (  )  . replica sets (  )  . with name ( replica name )  . get (  ) ; if  ( replicas set  !  =  null )   {  assert that ( replicas set )  . described as ( "" replica set: ""  +  qualified name )  . metadata (  )  . name (  )  . is equal to ( replica name ) ; return new  replica set pods assert ( client replicas set ) ;  }  else  {   replication controller replication controller = client . replication controllers (  )  . with name ( replica name )  . get (  ) ; assert that ( replication controller )  . described as ( "" no  replica set or  replication controller called: ""  +  qualified name )  . is not null (  ) ; assert that ( replication controller )  . described as ( "" replication controller: ""  +  qualified name )  . metadata (  )  . name (  )  . is equal to ( replica name ) ; return new  replication controller pods assert ( client replication controller ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\KubernetesAssert.java,replication controller,public replication controller assert   (  string replication controller name )  {  return assert that ( get replication controller ( replication controller name namespace (  )  )  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\KubernetesAssert.java,replication controller list,public replication controller list assert   (  )  {   replication controller list replication controllers = client . replication controllers (  )  . list (  ) ; return assert that ( replication controllers )  . is not null (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\KubernetesAssert.java,replication controllers,public list assert <  replication controller >    (  )  {   replication controller list replication controller list = client . replication controllers (  )  . in namespace ( namespace (  )  )  . list (  ) ; assert that ( replication controller list )  . is not null (  ) ;  list <  replication controller >  replication controllers = replication controller list . get items (  ) ; return  (  list assert <  replication controller >  ) assert that ( replication controllers ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\KubernetesAssert.java,service,"public service pods assert   (  string service name )  {   service service = client . services (  )  . in namespace ( namespace (  )  )  . with name ( service name )  . get (  ) ; assert that ( service )  . described as ( "" no service exists for name: ""  +  service name )  . is not null (  ) ; return new  service pods assert ( client service ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\KubernetesAssert.java,service list,public service list assert   (  )  {   service list service list = client . services (  )  . in namespace ( namespace (  )  )  . list (  ) ; return assert that ( service list )  . is not null (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\KubernetesAssert.java,service spec,public service spec assert   (  string service name )  {  return assert that ( get service spec ( service name namespace (  )  )  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\KubernetesAssert.java,services,public services assert   (  )  {   service list service list = client . services (  )  . in namespace ( namespace (  )  )  . list (  ) ; assert that ( service list )  . is not null (  ) ;  list <  service >  services = service list . get items (  ) ; return new  services assert ( client services ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\PodLogsAssert.java,pod logs assert,public map <  string  string >  actual  string container name  map <  string  string >  log prefixes )  {  super ( actual ) ; this . container name = container name; this . log prefixes = log prefixes; write logs (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\PodLogsAssert.java,after text,public pod logs assert   (  string start text )  {   map <  string  string >  new logs = new  hash map <  >  (  ) ;  map <  string  string >  prefixes = new  hash map <  >  (  ) ;  set <  map .  entry <  string  string >  >  entries = actual . entry set (  ) ; for  (   map .  entry <  string  string >  entry : entries )   {   string pod name = entry . get key (  ) ;  string value = entry . get value (  ) ;  file file = pod log file name ( pod name ) ; int idx = value . index of ( start text ) ; if  ( idx  >  =  0 )   {  int split idx = idx  +  start text . length (  ) ;  string remaining = value . substring ( split idx ) ;  string prefix = value . substring ( 0 split idx ) ; new logs . put ( pod name remaining ) ; prefixes . put ( pod name prefix ) ;  }   }  return new  pod logs assert ( new logs container name prefixes ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\PodLogsAssert.java,contains text,"public string .  .  .  texts )  {  for  (   string text : texts )   {   set <  map .  entry <  string  string >  >  entries = actual . entry set (  ) ; for  (   map .  entry <  string  string >  entry : entries )   {   string pod name = entry . get key (  ) ;  string value = entry . get value (  ) ;  file file = pod log file name ( pod name ) ; int idx = value . index of ( text ) ; if  ( idx  <  0 )   {   fail . fail ( "" log of pod ""  +  pod name  +  "" in file: "" +  file +  "" does not contains text `"" +  text +  ""` last log: "" +  last line of ( file )  ) ;  }   }   }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\PodLogsAssert.java,does not contain text,"public string .  .  .  texts )  {  for  (   string text : texts )   {   set <  map .  entry <  string  string >  >  entries = actual . entry set (  ) ; for  (   map .  entry <  string  string >  entry : entries )   {   string pod name = entry . get key (  ) ;  string value = entry . get value (  ) ;  file file = pod log file name ( pod name ) ; int idx = value . index of ( text ) ; if  ( idx  >  =  0 )   {   fail . fail ( "" log of pod ""  +  pod name  +  "" in file: "" +  file +  "" contains text `"" +  text +  ""` at "" +  log file coords ( pod name value idx )  ) ;  }  else  {   l o g . debug ( ""does not contain '""  +  text  +  ""' in  log of pod "" +  pod name +  "" in file: "" +  file ) ;  }   }   }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\PodLogsAssert.java,does not contain text count,"public string .  .  .  texts )  {  if  ( count  =  =  1 )   {  does not contain text ( texts ) ;  }  for  (   string text : texts )   {   set <  map .  entry <  string  string >  >  entries = actual . entry set (  ) ; for  (   map .  entry <  string  string >  entry : entries )   {   string pod name = entry . get key (  ) ;  string value = entry . get value (  ) ;  file file = pod log file name ( pod name ) ; int idx = 0; for  ( int i = 0; idx  >  =  0 && i  <  count; i +  +  )   {  int next = value . index of ( text idx ) ; if  ( next  >  =  0 )   {  idx = next  +  1;  }  else  {  idx = next;  }   }  if  ( idx  >  =  0 )   {   string log text = full log text ( pod name value . substring ( 0 idx  -  1 )  ) ;  fail . fail ( "" log of pod ""  +  pod name  +  "" in file: "" +  file +  "" contains text `"" +  text +  ""` "" +  count +  "" times with the last at at "" +  text coords ( log text )  ) ;  }  else  {   l o g . debug ( ""does not contain '""  +  text  +  ""' in  log of pod "" +  pod name +  "" in file: "" +  file +  "" "" +  count +  "" times"" ) ;  }   }   }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\PodLogsAssert.java,full log text,protected string   (  string pod name  string text )  {   string log text = text;  string log prefix = log prefixes . get ( pod name ) ; if  ( log prefix  !  =  null )   {  log text = log prefix  +  log text;  }  return log text;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\PodLogsAssert.java,last line of,"protected string   (  file file )  {  try  {   list <  string >  lines =  i o helpers . read lines ( file ) ; int size = lines . size (  ) ; if  ( size  >  0 )   {  return lines . get ( size  -  1 ) ;  }   }  catch  (   i o exception e )   {   l o g . debug ( "" failed to load: ""  +  file  +  "" .  "" +  e e ) ;  }  return """";  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\PodLogsAssert.java,log file coords,"protected string   (  string pod name  string value int idx )  {   string prefix = """"; if  ( value  !  =  null && value . length (  )   >  0 && idx  >  0 )   {  prefix = value . substring ( 0 idx ) ;  }   string log text = full log text ( pod name prefix ) ; return text coords ( log text ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\PodLogsAssert.java,pod log file name,"protected file   (  string pod name )  {   string basedir =  system . get property ( ""basedir"" "" . "" ) ;  file dir = new  file ( basedir ""target / fabric8 / systest / logs"" ) ;  string name = pod name; if  ( container name  !  =  null )   {  name +  = "" . ""  +  container name;  }  name +  = "" . log"";  file answer = new  file ( dir name ) ; answer . get parent file (  )  . mkdirs (  ) ; return answer;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\PodLogsAssert.java,text coords,"public string   (  string text )  {  int line = 1; int idx = 0; while  ( true )   {  int next = text . index of ( '\n' idx ) ; if  ( next  <  0 )   {  break;  }  idx = next  +  1; line +  = 1;  }  int column = 1  +  text . length (  )   -  idx; return """"  +  line  +  "":"" +  column;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\PodLogsAssert.java,write logs,"private set <  map .  entry <  string  string >  >  entries = actual . entry set (  ) ; for  (   map .  entry <  string  string >  entry : entries )   {   string pod name = entry . get key (  ) ;  string value = entry . get value (  ) ;  string log text = full log text ( pod name value ) ;  file file = pod log file name ( pod name ) ; try  {   i o helpers . write fully ( file log text ) ;  }  catch  (   i o exception e )   {   l o g . error ( "" failed to write log of pod ""  +  pod name  +  "" container:"" +  container name +  "" to file: "" +  file +  "" .  "" +  e e ) ;  }   }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\ReplicaSetPodsAssert.java,replica set pods assert,public kubernetes client client  replica set replicas set )  {  super ( replicas set ) ; this . client = client;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\ReplicaSetPodsAssert.java,pods,override public  pod selection assert   (  )  {  spec (  )  . is not null (  )  . selector (  )  . is not null (  ) ;  replica set spec spec = this . actual . get spec (  ) ;  integer replicas = spec . get replicas (  ) ;  label selector selector = spec . get selector (  ) ;  map <  string  string >  match labels = selector . get match
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\ReplicationControllerPodsAssert.java,replication controller pods assert,public kubernetes client client  replication controller replication controller )  {  super ( replication controller ) ; this . client = client;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\ReplicationControllerPodsAssert.java,pods,"public pod selection assert   (  )  {  spec (  )  . is not null (  )  . selector (  )  . is not null (  ) ;  replication controller spec spec = this . actual . get spec (  ) ;  integer replicas = spec . get replicas (  ) ;  map <  string  string >  match labels = spec . get selector (  ) ;  list <  label selector requirement >  match expressions = new  array list <  >  (  ) ; return new  pod selection assert ( client replicas match labels match expressions "" replication controller ""  +   kubernetes helper . get name ( actual )  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\ServicePodsAssert.java,service pods assert,public kubernetes client client  service actual )  {  super ( actual ) ; this . client = client;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\ServicePodsAssert.java,has endpoint or ready pod,public service pods assert   ( long not ready timeout m s long ready period m s )  {   endpoints list list = client . endpoints (  )  . with labels ( get labels ( actual )  )  . list (  ) ; if  ( list  !  =  null )   {   list <  endpoints >  items = list . get items (  ) ; if  ( items . size (  )   >  0 )   {  return this;  }   }  pods (  )  . is pod ready for period ( not ready timeout m s ready period m s ) ; return this;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\ServicePodsAssert.java,pods,override public  pod selection assert   (  )  {  spec (  )  . is not null (  )  . selector (  )  . is not null (  ) ;  service spec spec = this . actual . get spec (  ) ; int replicas = 1;  label selector selector = null;  map <  string  string >  match labels = spec . get selector (  ) ;  list <  label selector requirement >  matc
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\PodsAssert.java,pods assert,public list <  pod >  actual  kubernetes client client )  {  super ( actual ) ; this . client = client;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\PodsAssert.java,create list assert,override protected  pods assert   (  list <  pod >  list )  {  return new  pods assert ( list client ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\PodsAssert.java,error status,public pods assert   (  )  {  return filter (  conditions . error status (  )  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\PodsAssert.java,logs,"public pod logs assert   (  string container name )  {   map <  string  string >  logs = new  hash map <  >  (  ) ;  list <  pod >  pods = get (  ) ; for  (   pod pod : pods )   {   object meta metadata = pod . get metadata (  ) ; if  ( metadata  !  =  null )   {   string name = metadata . get name (  ) ;  string namespace = metadata . get namespace (  ) ;  string key = name; if  (  strings . is not blank ( namespace )  )   {  key = namespace  +  "" / ""  +  name;  }   string log = client . pods (  )  . in namespace ( namespace )  . with name ( name )  . get log ( true ) ; if  ( log  !  =  null )   {  logs . put ( key log ) ;  }   }   }  return new  pod logs assert ( logs container name ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\PodsAssert.java,running status,public pods assert   (  )  {  return filter (  conditions . running status (  )  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\PodsAssert.java,waiting status,public pods assert   (  )  {  return filter (  conditions . waiting status (  )  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\PodSelectionAssert.java,pod selection assert,public kubernetes client client  integer replicas  map <  string  string >  match labels  list <  label selector requirement >  match expressions  string description )  {  this . client = client; this . replicas = replicas; this . match labels = match labels; this . match expressions = match expressions; this . description = description;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\PodSelectionAssert.java,get client,public kubernetes client   (  )  {  return client;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\PodSelectionAssert.java,get description,public string   (  )  {  return description;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\PodSelectionAssert.java,get match expressions,public list <  label selector requirement >    (  )  {  return match expressions;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\PodSelectionAssert.java,get match labels,public map <  string  string >    (  )  {  return match labels;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\PodSelectionAssert.java,get pods,"public list <  pod >    (  )  {   pod list list = get client (  )  . pods (  )  . with labels ( get match labels (  )  )  . list (  ) ; assert that ( list )  . described as ( get description (  )   +  "" pods"" )  . is not null (  ) ; return list . get items (  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\PodSelectionAssert.java,get replicas,public integer   (  )  {  return replicas;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\PodSelectionAssert.java,is pod ready for period,"public pod selection assert   ( long not ready timeout m s long ready period m s )  {  if  ( replicas . int value (  )   <  =  0 )   {   l o g . warn ( "" not that the pod selection for: ""  +  description  +  "" has no replicas defined so we cannot assert there is a pod ready"" ) ; return this;  }  try  (  pod watcher pod watcher = new  pod watcher ( this not ready timeout m s ready period m s ) ; watch watch = client . pods (  )  . with labels ( match labels )  . watch ( pod watcher )  )  {  pod watcher . load current pods (  ) ; pod watcher . wait for pod ready (  ) ;  }  return this;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\ServicesAssert.java,services assert,public kubernetes client client  list <  ?  extends  service >  actual )  {  super ( actual ) ; this . client = client; this . actual = actual;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\ServicesAssert.java,assert all services have endpoint or ready pod,public services assert   (  )  {  for  (   service service : actual )   {   service pods assert asserter = new  service pods assert ( client service ) ; asserter . has endpoint or ready pod (  ) ;  }  return this;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\ServicesAssert.java,service,"public service pods assert   (  string service name )  {   service service = null; for  (   service a service : actual )   {   string name = get name ( a service ) ; if  (  objects . equals ( name service name )  )   {  service = a service;  }   }  assert that ( service )  . described as ( "" no service could be found for name: ""  +  service name )  . is not null (  ) ; return new  service pods assert ( client service ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\support\PodAsserter.java,pod asserter,public pod watcher watcher  string name  pod pod )  {  this . watcher = watcher; this . name = name; this . pod = pod; updated ( pod ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\support\PodAsserter.java,cancel timer,protected
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\support\PodAsserter.java,close,public timer (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\support\PodAsserter.java,run,override public void   (  )  {  watcher . pod is ready for entire duration ( name pod ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\support\PodAsserter.java,updated,"public pod pod )  {   string status text =  kubernetes helper . get pod status text ( pod ) ; boolean ready =  kubernetes helper . is pod ready ( pod ) ;  string message = "" pod ""  +  name  +  "" has status: "" +  status text +  "" is ready: "" +  ready;  l o g . info ( ansi (  )  . fg (  y e l l o w )  . a ( message )  . reset (  )  . to string (  )  ) ; if  ( ready )   {  watcher . pod is ready ( name pod ) ; if  ( timer  =  =  null )   {  timer = new  timer ( watcher . get description (  )  ) ; timer . schedule ( task watcher . get ready period m s (  )  ) ;  }   }  else  {  cancel timer (  ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\support\LogHelpers.java,get log file name,"public file   (  file base dir  string pod name  container container int restart count )  {   file log dir = new  file ( base dir ""target / test - pod - logs / "" ) ;  string container name = container . get name (  ) ;  string restart count text = """"; if  ( restart count  >  0 )   {  restart count text = "" - ""  +  restart count;  }   string log file name = pod name  +  "" - ""  +  container name +  restart count text +   l o g _  f i l e _  p o s t f i x;  file log file = new  file ( log dir log file name ) ; log file . get parent file (  )  . mkdirs (  ) ; return log file;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\support\LogHelpers.java,get restart count,public pod pod )  {  int restart count = 0;  pod status pod status = pod . get status (  ) ; if  ( pod status  !  =  null )   {   list <  container status >  container statuses = pod status . get container statuses (  ) ; for  (   container status container status : container statuses )   {  if  ( restart count  =  =  0 )   {   integer restart count value = container status . get restart count (  ) ; if  ( restart count value  !  =  null )   {  restart count = restart count value . int value (  ) ;  }   }   }   }  return restart count;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\openshift\assertions\Assertions.java,assert that,public open shift assert   (  open shift client client )  {  return new  open shift assert ( client ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\support\PodLogWatcher.java,pod log watcher,public pod watcher pod watcher  string name  pod pod  string container name  file log file )  throws  file not found exception  {   kubernetes client client = pod watcher . get client (  ) ;  object meta metadata = pod . get metadata (  ) ; log file . get parent file (  )  . mkdirs (  ) ;  pod spec spec = pod . get spec (  ) ; this . log watch = client . pods (  )  . in namespace ( metadata . get namespace (  )  )  . with name ( name )  . in container ( container name )  . watch log ( new  file output stream ( log file )  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\support\PodLogWatcher.java,close,override public void   (  )  throws  i o exception  {  if  ( log watch  !  =  null )   {  log watch . close (  ) ;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\openshift\assertions\BuildConfigsAssert.java,build configs assert,public list <  build config >  actual  open shift client client )  {  super ( actual ) ; this . client = client;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\openshift\assertions\BuildConfigsAssert.java,create list assert,override protected  build configs assert   (  list <  build config >  list )  {  return new  build configs assert ( list client ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\support\PodWatcher.java,pod watcher,public pod selection assert pod selection assert long ready timeout m s long ready period m s )  {  this . pod selection assert = pod selection assert; this . ready timeout m s = ready timeout m s; this . ready period m s = ready period m s;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\support\PodWatcher.java,close,public all closers ( pod asserts ) ; close all closers ( pod log watchers ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\support\PodWatcher.java,close all closers,protected map <  string  ?  extends  closeable >  closers )  {  while  (  ! closers . is empty (  )  )   {   set <  string >  keys = closers . key set (  ) ; for  (   string key : keys )   {  close closer ( key closers ) ;  }   }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\support\PodWatcher.java,close closer,"private string name  map <  string  ?  extends  closeable >  closers )  {   closeable closer = closers . remove ( name ) ; if  ( closer  !  =  null )   {  try  {  closer . close (  ) ;  }  catch  (   exception e )   {   l o g . warn ( "" failed to close ""  +  closer  +  "" .  "" +  e e ) ;  }   }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\support\PodWatcher.java,event received,"override public void   (  action action  pod pod )  {   string name = get name ( pod ) ; if  ( action . equals (  action .  e r r o r )  )   {   l o g . warn ( "" got error for pod ""  +  name ) ;  }  else if  ( action . equals (  action .  d e l e t e d )  )   {  close closer ( name this . pod asserts ) ; close closer ( name this . pod log"
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\support\PodWatcher.java,get base dir,"public file   (  )  {  if  ( basedir  =  =  null )   {  basedir = new  file (  system . get property ( ""basedir"" "" . "" )  ) ;  }  return basedir;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\support\PodWatcher.java,get client,public kubernetes client   (  )  {  return pod selection assert . get client (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\support\PodWatcher.java,get description,public string   (  )  {  return pod selection assert . get description (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\support\PodWatcher.java,get ready period m s,public period m s;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\support\PodWatcher.java,get ready timeout m s,public timeout m s;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\support\PodWatcher.java,load current pods,public list <  pod >  pods = pod selection assert . get pods (  ) ; for  (   pod pod : pods )   {   string name = get name ( pod ) ; if  (  ! pod asserts . contains key ( name )  )   {  on pod ( name pod ) ;  }   }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\support\PodWatcher.java,on close,"override public void   (  kubernetes client exception e )  {   l o g . info ( ""on close: ""  +  e ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\support\PodWatcher.java,on pod,"protected string name  pod pod )  {   pod asserter asserter = pod asserts . get ( name ) ; if  ( asserter  =  =  null )   {  asserter = new  pod asserter ( this name pod ) ; pod asserts . put ( name asserter ) ;  }  else  {  asserter . updated ( pod ) ;  }  int restart count = get restart count ( pod ) ;  pod spec spec = pod . get spec (  ) ; if  ( spec  !  =  null )   {  if  (  kubernetes helper . is pod running ( pod )  )   {   list <  container >  containers = spec . get containers (  ) ; for  (   container container : containers )   {   file log file name =  log helpers . get log file name ( get base dir (  )  name container restart count ) ;  string key = log file name . get name (  ) ;  pod log watcher log watcher = pod log watchers . get ( key ) ; if  ( log watcher  =  =  null )   {  try  {   string container name = container . get name (  ) ; log watcher = new  pod log watcher ( this name pod container name log file name ) ; pod log watchers . put ( key log watcher ) ;  l o g . info ( "" watching pod ""  +  name  +  "" container "" +  container name +  "" log at file: "" +  log file name . get absolute path (  )  ) ;  }  catch  (   exception e )   {   l o g . warn ( "" failed to create  pod log watcher: ""  +  e e ) ;  }   }   }   }   }   file yaml file = new  file ( get base dir (  )  ""target / test - pod - status / ""  +  name  +  "" . yml"" ) ; yaml file . get parent file (  )  . mkdirs (  ) ; try  {   kubernetes helper . save yaml ( pod yaml file ) ;  }  catch  (   i o exception e )   {   l o g . warn ( "" failed to write ""  +  yaml file  +  "" .  "" +  e e ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\support\PodWatcher.java,pod is ready,"public string name  pod pod )  {  if  ( pod ready . get count (  )   >  0 )   {   string message = "" pod ""  +  name  +  "" is  ready ! "";  l o g . info ( ansi (  )  . fg (  g r e e n )  . a ( message )  . reset (  )  . to string (  )  ) ; pod ready . count down (  ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\support\PodWatcher.java,pod is ready for entire duration,"public string name  pod pod )  {   string message = "" pod ""  +  name  +  "" has been  ready now for "" +  get ready period m s (  )  +  "" millis ! "";  l o g . info ( ansi (  )  . fg (  g r e e n )  . a ( message )  . reset (  )  . to string (  )  ) ; pod ready for entire duration . count down (  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\support\PodWatcher.java,set basedir,public file basedir )  {  this . basedir = basedir;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\support\PodWatcher.java,wait for pod ready,"public ready . await ( ready timeout m s  time unit .  m i l l i s e c o n d s ) ;  }  catch  (   interrupted exception e )   {   l o g . warn ( "" interupted waiting for pod ready: ""  +  e ) ; ready = pod ready . get count (  )   =  =  0 l;  }  if  (  ! ready )   {  fail ( pod selection assert . get description (  )   +  "" did not have a pod become  ready within ""  +  ready timeout m s +  "" millis"" ) ;  }  try  {  ready = pod ready for entire duration . await ( ready period m s * 2  time unit .  m i l l i s e c o n d s ) ;  }  catch  (   interrupted exception e )   {   l o g . warn ( "" interupted waiting for pod ready for entire duration: ""  +  e ) ; ready = pod ready for entire duration . get count (  )   =  =  0 l;  }  if  (  ! ready )   {  fail ( pod selection assert . get description (  )   +  "" did not have a pod  ready for a duration of ""  +  ready period m s +  "" millis"" ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\openshift\assertions\BuildsAssert.java,builds assert,public list <  build >  actual  open shift client client )  {  super ( actual ) ; this . client = client;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\openshift\assertions\BuildsAssert.java,create list assert,override protected  builds assert   (  list <  build >  list )  {  return new  builds assert ( list client ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\openshift\assertions\OpenShiftAssert.java,open shift assert,public open shift client client )  {  super ( client  open shift assert . class ) ; this . client = client;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\openshift\assertions\OpenShiftAssert.java,build configs,"public build configs assert   (  )  {   build config list list object = client . build configs (  )  . list (  ) ; assert that ( list object )  . described as ( "" no  build configs list found ! "" )  . is not null (  ) ;  list <  build config >  list = list object . get items (  ) ; assert that ( list )  . described as ( "" no  build config  items found ! "" )  . is not null (  ) ; return new  build configs assert ( list client ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\openshift\assertions\OpenShiftAssert.java,builds,"public builds assert   (  )  {   build list list object = client . builds (  )  . list (  ) ; assert that ( list object )  . described as ( "" no  build list found ! "" )  . is not null (  ) ;  list <  build >  list = list object . get items (  ) ; assert that ( list )  . described as ( "" no  build  items found ! "" )  . is not null (  ) ; return new  builds assert ( list client ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\test\java\io\fabric8\kubernetes\assertions\Example.java,invoke,"override public void   (  )  throws  exception  {  try  {  assert that ( client )  . pods (  )  . running status (  )  . filter label ( ""component"" ""does not exist"" )  . has size ( 1 ) ;  }  catch  (   kubernetes client exception e )   {  if  ( e . get code (  )   !  =  404 )   {  throw e;  }  else  {  throw new  assertion error ( "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\test\java\io\fabric8\kubernetes\assertions\Example.java,main,"public string[] args )  {  try  {  final  kubernetes client client = new  default kubernetes client (  ) ; assert that ( client )  . pods (  )  . running status (  )  . has size ( 6 ) ; assert that ( client )  . pods (  )  . running status (  )  . filter label ( ""provider"" ""fabric8"" )  . assert size (  )  . is greater than ( 0 ) ; assert that ( client . services (  )  . in namespace ( ""default"" )  . with name ( ""fabric8"" )  . get (  )  . get metadata (  )  )  . name (  )  . is equal to ( ""fabric8"" ) ;  map <  string  string >  console labels = new  hash map <  >  (  ) ; console labels . put ( ""component"" ""console"" ) ; console labels . put ( ""provider"" ""fabric8"" ) ; assert that ( client )  . pods for service ( ""fabric8"" )  . running status (  )  . extracting ( ""metadata"" )  . extracting ( ""labels"" )  . contains ( console labels ) ; assert that ( client )  . pods for service ( ""fabric8"" )  . running status (  )  . has size ( 1 )  . extracting ( ""metadata"" )  . extracting ( ""labels"" )  . contains ( console labels ) ; assert that ( client )  . pods for service ( ""fabric8"" )  . logs (  )  . does not contain text ( "" exception"" "" error"" ) ; assert that ( client )  . pods (  )  . logs (  )  . does not contain text ( "" exception"" "" error"" ) ; assert assertion error ( new  block (  )  {  @ override public void invoke (  )  throws  exception  {  try  {  assert that ( client . services (  )  . in namespace ( ""default"" )  . with name ( ""does not exist"" )  . get (  )  . get metadata (  )  )  . name (  )  . is equal to ( ""fabric8 - console - controller"" ) ;  }  catch  (   kubernetes client exception e )   {  if  ( e . get code (  )   !  =  404 )   {  throw e;  }  else  {  throw new  assertion error ( e ) ;  }   }   }   }   ) ; assert assertion error ( new  block (  )  {  @ override public void invoke (  )  throws  exception  {  try  {  assert that ( client )  . pods (  )  . running status (  )  . filter label ( ""component"" ""does not exist"" )  . has size ( 1 ) ;  }  catch  (   kubernetes client exception e )   {  if  ( e . get code (  )   !  =  404 )   {  throw e;  }  else  {  throw new  assertion error ( e ) ;  }   }   }   }   ) ;  system . out . println ( "" done ! "" ) ;  }  catch  (   throwable e )   {   system . out . println ( "" caught: ""  +  e ) ; e . print stack trace (  ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\test\java\io\fabric8\kubernetes\assertions\ExampleTest.java,invoke,"override public void   (  )  throws  exception  {  assert that ( pod list )  . described as ( ""pod list with2 items"" )  . items (  )  . first (  )  . metadata (  )  . name (  )  . is equal to ( ""should not match"" ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\test\java\io\fabric8\kubernetes\assertions\TextCoordsTest.java,assert text coords,"public string text  string expected )  {   string actual =  pod logs assert . text coords ( text ) ; assert equals ( ""text coords ( ""  +  text  +  "" ) "" expected actual ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\test\java\io\fabric8\kubernetes\assertions\TextCoordsTest.java,test coords,"test public void   (  )  throws  exception  {  assert text coords ( ""a"" ""1:2"" ) ; assert text coords ( ""a\n"" ""2:1"" ) ; assert text coords ( ""a\nabc\ndef"" ""3:4"" ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\test\java\io\fabric8\kubernetes\assertions\ExampleTest.java,test navigation assertions,"test public void   (  )  throws  exception  {   string expected id = ""abc"";  map <  string  string >  expected labels = new  hash map <  >  (  ) ; expected labels . put ( ""foo"" ""bar"" ) ; final  pod pod = new  pod (  ) ; pod . set metadata ( new  object meta (  )  ) ; pod . get metadata (  )  . set name ( expected id ) ; pod . ge"
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\test\java\io\fabric8\kubernetes\assertions\ExampleTest.java,test navigation list assertions,"test public void   (  )  throws  exception  {  final  string id1 = ""abc""; final  string id2 = ""def"";  map <  string  string >  labels1 = new  hash map <  >  (  ) ; labels1 . put ( ""foo"" ""bar"" ) ;  map <  string  string >  labels2 = new  hash map <  >  (  ) ; labels2 . put ( ""whatnot"" ""cheese"" ) ; final  pod pod1 = new "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\test\java\io\fabric8\kubernetes\assertions\ExampleTest.java,test null navigation on pod,"test public void   (  )  throws  exception  {  final  pod pod = new  pod (  ) ; pod . set metadata ( null ) ; assert assertion error ( new  block (  )  {  @ override public void invoke (  )  throws  exception  {  assert that ( pod )  . metadata (  )  . name (  )  . is equal to ( ""cheese"" ) ;  }   }   ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\test\java\io\fabric8\kubernetes\assertions\ExampleTest.java,test null navigation on r c,test public void   (  )  throws  exception  {  final  replication controller rc = new  replication controller (  ) ; assert assertion error ( new  block (  )  {  @ override public void invoke (  )  throws  exception  {  assert that ( rc )  . spec (  )  . template (  )  . spec (  )  . containers (  )  . first (  )  . image (  )  . i
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-generator\src\main\java\io\fabric8\kubernetes\generator\processor\AbstractKubernetesAnnotationProcessor.java,determine extension,"public file extension   (  string extension )  {  if  ( ""json"" . equals ( extension )  )   {  return  j s o n;  }  else if  ( ""yaml"" . equals ( extension )  || ""yml"" . equals ( extension )  )   {  return  y a m l;  }  else  {  return  u n d e f i n e d;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-generator\src\main\java\io\fabric8\kubernetes\generator\processor\AbstractKubernetesAnnotationProcessor.java,generate json,"void string file name  kubernetes resource resource )  {  try  {   file object file object = get file object ( file name ) ; try  (  writer writer = file object . open writer (  )  )  {   m a p p e r . write value ( writer resource ) ;  }   }  catch  (   i o exception e )   {  processing env . get messager (  )  . print message (  diagnostic .  kind .  e r r o r "" error generating json ""  +  file name ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-generator\src\main\java\io\fabric8\kubernetes\generator\processor\AbstractKubernetesAnnotationProcessor.java,generate yaml,"void string file name  kubernetes resource resource )  {  try  {   file object file object = get file object ( file name ) ;  kubernetes helper . save yaml ( resource file object ) ;  }  catch  (   i o exception e )   {  processing env . get messager (  )  . print message (  diagnostic .  kind .  e r r o r "" error generating json ""  +  file name ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-generator\src\main\java\io\fabric8\kubernetes\generator\processor\AbstractKubernetesAnnotationProcessor.java,get class element,"type element   (  element element )  {  if  ( element instanceof  package element )   {  throw new  illegal argument exception ( "" invalid element .   a package element can't be used to retrieve a class element"" ) ;  }  else if  ( element instanceof  type element && element . get enclosing element (  )  instanceof  package element )   {  return  (  type element ) element;  }  else  {  return get class element ( element . get enclosing element (  )  ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-generator\src\main\java\io\fabric8\kubernetes\generator\processor\AbstractKubernetesAnnotationProcessor.java,get file object,"private file object   (  string file name )  throws  i o exception  {   file object file object = processing env . get filer (  )  . get resource (  standard location .  c l a s s _  o u t p u t """" file name ) ;  path path =  paths . get ( file object . to uri (  )  ) ;  file file = path . to file (  ) ; if  ( file . exists (  )  &&  ! file . delete (  )  )   {  throw new  i o exception ( "" failed to delete old kubernetes json file: ""  +  file name ) ;  }  file object = processing env . get filer (  )  . create resource (  standard location .  c l a s s _  o u t p u t """" file name ) ; return file object;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-generator\src\main\java\io\fabric8\kubernetes\generator\processor\AbstractKubernetesAnnotationProcessor.java,get package element,package element   (  element element )  {  if  ( element instanceof  package element )   {  return  (  package element ) element;  }  else  {  return get package element ( element . get enclosing element (  )  ) ;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-generator\src\main\java\io\fabric8\kubernetes\generator\processor\AbstractKubernetesAnnotationProcessor.java,read json,"kubernetes resource   (  string file name )  {  try  {   file object file object = processing env . get filer (  )  . get resource (  standard location .  c l a s s _  o u t p u t """"  ( file name  =  =  null  ?   k u b e r n e t e s _  j s o n : file name )  ) ; try  (  reader reader = file object . open reader ( false )  )  {  return  m a p p e r . read value ( reader  kubernetes resource . class ) ;  }   }  catch  (   i o exception e )   {  processing env . get messager (  )  . print message (  diagnostic .  kind .  e r r o r file name  +  ""  j s o n not found . "" ) ;  }  return null;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-generator\src\main\java\io\fabric8\kubernetes\generator\processor\CompilationTaskFactory.java,compilation task factory,public processing environment processing environment )  {  this . processing environment = processing environment; this . file manager = create file manager ( processing environment ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-generator\src\main\java\io\fabric8\kubernetes\generator\processor\CompilationTaskFactory.java,create,"public java compiler .  compilation task   (  iterable <  type element >  elements  writer writer )  throws  i o exception  {   set <  string >  options = new  linked hash set <  >  (  ) ;  set <  java file object >  java file objects = new  linked hash set <  >  (  ) ;  class loader class loader = get class (  )  . get class loader (  ) ; if  ( class loader instanceof  u r l class loader )   {   string class path = create class path (  (  (  u r l class loader ) class loader )  . get u r ls (  )  ) ; options . add (  d i s a b l e _  a n n o t a t i o n _  p r o c e s s o r s _  o p t ) ; options . add (  c l a s s p a t h _  o p t ) ; options . add ( class path ) ;  }  for  (   type element element : elements )   {   java file object source = file manager . get java file for input (  standard location .  s o u r c e _  p a t h element . get qualified name (  )  . to string (  )   java file object .  kind .  s o u r c e ) ; if  ( source  =  =  null )   {  throw new  i o exception ( "" unable to find class: ""  +  element . get qualified name (  )  . to string (  )  ) ;  }  java file objects . add ( source ) ;  }  return compiler . get task ( writer file manager diagnostic listener options new  array list <  string >  (  )  java file objects ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-generator\src\main\java\io\fabric8\kubernetes\generator\processor\CompilationTaskFactory.java,create class path,"private string   (  u r l[] urls )  {   string builder sb = new  string builder (  ) ; boolean first = true; for  (   u r l url : urls )   {  if  ( first )   {  first = false;  }  else  {  sb . append (  file . path separator ) ;  }  sb . append ( url . to external form (  )  . replace first (  f i l e _  u r l _  p r e f i x """" )  ) ;  }  return sb . to string (  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-generator\src\main\java\io\fabric8\kubernetes\generator\processor\CompilationTaskFactory.java,create file manager,static java file manager   (  processing environment processing environment )  {   filer filer = processing environment . get filer (  ) ; try  {   field field = filer . get class (  )  . get declared field (  f i l e _  m a n a g e r _  f i e l d _  n a m e ) ; field . set accessible ( true ) ; return  (  java file manager ) field . get ( filer ) ;  }  catch  (   throwable t )   {  throw new  runtime exception ( t ) ;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-generator\src\main\java\io\fabric8\kubernetes\generator\processor\CompilationTaskFactory.java,get compile diagnostics,public list <  diagnostic >    (  )  {  return  (  (  diagnostic collector ) diagnostic listener )  . get diagnostics (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-generator\src\main\java\io\fabric8\kubernetes\generator\processor\KubernetesModelProcessorProcessor.java,find methods,private set <  method >    (  object instance  string method name  class argument type )  {   set <  method >  result = new  linked hash set <  >  (  ) ; for  (   method m : instance . get class (  )  . get declared methods (  )  )   {  if  ( m . get name (  )  . equals ( method name )  && m . get parameter types (  )  . length  =  =  1 && m . get parameter types (  ) [0] . is assignable from ( argument type )  )   {  result . add ( m ) ;  }   }  return result;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-generator\src\main\java\io\fabric8\kubernetes\generator\processor\KubernetesModelProcessorProcessor.java,get additional properties,"public t >  map <  string  object >    (  t obj )  {  return get with reflection ( obj  map . class ""get additional properties"" ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-generator\src\main\java\io\fabric8\kubernetes\generator\processor\KubernetesModelProcessorProcessor.java,get name,"public t >  string   (  t entity )  {  if  ( entity  !  =  null )   {   map <  string  object >  additional properties = get additional properties ( entity ) ; return  strings . first non blank ( get with reflection ( entity  string . class ""get name"" )  get name ( get object meta ( entity )  )   maps . nested value as string ( additional properties ""metadata"" ""id"" )   maps . nested value as string ( additional properties ""metadata"" ""name"" )  additional properties  !  =  null  ?   string . value of ( additional properties . get ( ""id"" )  )  : null get uuid ( entity )  ) ;  }  else  {  return null;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-generator\src\main\java\io\fabric8\kubernetes\generator\processor\KubernetesModelProcessorProcessor.java,get object meta,"public t >  object meta   (  t obj )  {  return get with reflection ( obj  object meta . class ""get metadata"" ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-generator\src\main\java\io\fabric8\kubernetes\generator\processor\KubernetesModelProcessorProcessor.java,get uuid,"public t >  string   (  t obj )  {  return get with reflection ( obj  string . class ""get uid"" ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-generator\src\main\java\io\fabric8\kubernetes\generator\processor\KubernetesModelProcessorProcessor.java,get with reflection,private t  v >  v   (  t object  class <  v >  clazz  string method named )  {  if  ( object  =  =  null )   {  return null;  }  else  {  try  {   method method = object . get class (  )  . get method ( method named ) ; return clazz . cast ( method . invoke ( object )  ) ;  }  catch  (   exception e )   {  return null;  }   }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-generator\src\main\java\io\fabric8\kubernetes\generator\processor\KubernetesModelProcessorProcessor.java,print compile errors,"private compilation task factory compilation task factory )  {  if  ( compilation task factory . get compile diagnostics (  )  . size (  )   >  0 )   {  for  (   diagnostic diag : compilation task factory . get compile diagnostics (  )  )   {  processing env . get messager (  )  . print message (  diagnostic .  kind .  e r r o r "" compile error: ""  +  diag . to string (  )  ) ;  }   }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-generator\src\main\java\io\fabric8\kubernetes\generator\processor\KubernetesModelProcessorProcessor.java,process,override public boolean   (  set <  ?  extends  type element >  annotations  round environment round env )  {   compilation task factory compilation task factory = new  compilation task factory ( processing env ) ;  set <  type element >  processors = new  hash set <  >  (  ) ; for  (   element element : rou
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-generator\src\main\java\io\fabric8\kubernetes\generator\processor\KubernetesModelProcessorProcessor.java,visit,override public void   (  object o )  {  for  (   method m : find methods ( instance method name o . get class (  )  )  )   {   named named = m . get annotation (  named . class ) ; if  ( named  !  =  null &&  !  strings . is null or blank ( named . value (  )  )  )   {   string object name = get name ( o ) ; if  (  ! named . value (  )  . e
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-jolokia\src\main\java\io\fabric8\kubernetes\jolokia\BearerTokenAuthenticator.java,preemptive bearer interceptor,public string token )  {  this . token = token;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-jolokia\src\main\java\io\fabric8\kubernetes\jolokia\BearerTokenAuthenticator.java,authenticate,public http client builder p builder  string p user  string p password )  {  p builder . add interceptor first ( new  preemptive bearer interceptor ( p user )  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-jolokia\src\main\java\io\fabric8\kubernetes\jolokia\BearerTokenAuthenticator.java,process,"public http request request final  http context context )  throws  http exception   i o exception  {  request . add header ( "" authorization"" "" bearer ""  +  token ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-jolokia\src\test\java\io\fabric8\kubernetes\jolokia\Example.java,find pods,"public string selector )  {   map <  string  pod >  pod map =  kubernetes helper . get selected pod map ( kubernetes selector ) ;  collection <  pod >  pods = pod map . values (  ) ; for  (   pod pod : pods )   {   string host =  kubernetes helper . get host ( pod ) ;  list <  container >  containers =  kubernetes helper . get containers ( pod ) ; for  (   container container : containers )   {   system . out . println ( ""pod ""  +   kubernetes helper . get name ( pod )   +  "" container: "" +  container . get name (  )  +  "" image: "" +  container . get image (  )  ) ;  j4p client jolokia = clients . client for container ( host container pod ) ; if  ( jolokia  !  =  null )   {   system . out . println ( "" has jolokia client: ""  +  jolokia  +  "" from host: "" +  host +  ""  u r l: "" +  jolokia . get uri (  )  ) ; try  {   object name object name = new  object name ( ""java . lang:type =  operating system"" ) ;  j4p response <  j4p read request >  results = jolokia . execute ( new  j4p read request ( object name "" system cpu load"" )  ) ;  object value = results . get value (  ) ;  system . out . println ( ""  system  c p u  load: ""  +  value ) ;  }  catch  (   exception e )   {   l o g . error ( "" failed to look up attribute .  ""  +  e e ) ;  }   }   }   }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-jolokia\src\test\java\io\fabric8\kubernetes\jolokia\Example.java,find replication controllers,"public string selector )  {   map <  string  replication controller >  replication controller map =  kubernetes helper . get selected replication controller map ( kubernetes selector ) ;  collection <  replication controller >  replication controllers = replication controller map . values (  ) ; for  (   replication controller replication controller : replication controllers )   {   system . out . println ( """"  +   kubernetes helper . get name ( replication controller )  ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-jolokia\src\test\java\io\fabric8\kubernetes\jolokia\Example.java,main,public string[] args )  {   string selector = null; if  ( args . length  >  0 )   {  selector = args[0];  }   example example = new  example (  ) ; example . find replication controllers ( selector ) ; example . find pods ( selector ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-generator\src\main\java\io\fabric8\kubernetes\generator\processor\KubernetesProviderProcessor.java,generate kubernetes manifest,"private string file name  kubernetes resource resource )  {   file extension ext =  file extension . determine extension (  files . get file extension ( new  file ( file name )  )  ) ; switch  ( ext )   {  case  j s o n: generate json ( file name resource ) ; break; case  y a m l: generate yaml ( file name resource ) ; break; case  u n d e f i n e d: processing env . get messager (  )  . print message (  diagnostic .  kind .  e r r o r ""could not determine file extension for ""  +  file name  +  "" .   is it  . json   . yaml  or  . yml ? "" ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-generator\src\main\java\io\fabric8\kubernetes\generator\processor\KubernetesProviderProcessor.java,get provided set,private set   (  map <  string  set >  provided map  element element )  {   kubernetes provider provider annotation = element . get annotation (  kubernetes provider . class ) ;  string kubernetes file = provider annotation . value (  )  . trim (  ) ; if  ( provided map . contains key ( kubernetes file )  )   {  return provided map . get ( kubernetes file ) ;  }   linked hash set rc = new  linked hash set (  ) ; provided map . put ( kubernetes file rc ) ; return rc;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-generator\src\main\java\io\fabric8\kubernetes\generator\processor\KubernetesProviderProcessor.java,process,override public boolean   (  set <  ?  extends  type element >  annotations  round environment round env )  {   compilation task factory compilation task factory = new  compilation task factory ( processing env ) ;  set <  type element >  providers = new  hash set <  >  (  ) ; for  (   element element : roun
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-jolokia\src\main\java\io\fabric8\kubernetes\jolokia\JolokiaClients.java,jolokia clients,"public kubernetes client kubernetes )  {  this . kubernetes = kubernetes; if  (  systems . has env var or system property ( "" j o l o k i a _  a u t h e n t i c a t i o n _  m o d e"" )  )   {  authentication mode =  authentication mode . value of (  systems . get env var or system property ( "" j o l o k i a _  a u t h e n t i c a t i o n _  m o d e"" )  ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-jolokia\src\main\java\io\fabric8\kubernetes\jolokia\JolokiaClients.java,assert client for replication controller,"public j4p client   (  string replication controller name  string namespace )  {   j4p client client = client for replication controller ( replication controller name namespace ) ; assert not null ( client "" no client for replication controller: ""  +  replication controller name ) ; return client;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-jolokia\src\main\java\io\fabric8\kubernetes\jolokia\JolokiaClients.java,assert client for service,"public j4p client   (  string service name  string namespace )  {   j4p client client = client for service ( service name namespace ) ; assert not null ( client "" no client for service: ""  +  service name ) ; return client;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-jolokia\src\main\java\io\fabric8\kubernetes\jolokia\JolokiaClients.java,client for container,"public j4p client   (  string host  container container  pod pod )  {  if  ( container  !  =  null )   {   list <  container port >  ports = container . get ports (  ) ; for  (   container port port : ports )   {   integer container port = port . get container port (  ) ; if  ( container port  !  =  null )   {   string name = port . get name (  ) ; if  ( container port  =  =  8778 ||  (  objects . equals ( ""jolokia"" name )  && container port . int value (  )   >  0 )  )   {  if  ( use kube proxy )   {   u r l master url = get kubernetes (  )  . get master url (  ) ;  object meta metadata = pod . get metadata (  ) ;  string namespace = metadata . get namespace (  ) ;  string pod name = metadata . get name (  ) ;  string jolokia url =  u r l utils . join ( master url . to string (  )  "" / api / v1 / namespaces / ""  +  namespace  +  "" / pods / "" +  locate jolokia protocol (  )  +  "":"" +  pod name +  "":8778 / proxy / jolokia / "" ) ;  l o g . info ( "" using jolokia  u r l: ""  +  jolokia url ) ; return create jolokia client ( container jolokia url ) ;  }   pod status current state = pod . get status (  ) ;  string pod i p = current state . get pod i p (  ) ; if  (  strings . is not blank ( pod i p )  )   {  return create jolokia client from host and port ( container pod i p container port ) ;  }   integer host port = port . get host port (  ) ; if  ( host port  !  =  null && has docker ( pod )  )   {  if  ( host . equals ( ""localhost"" )  || host . equals ( ""127 . 0 . 0 . 1"" )  )   {   string docker ip = get docker ip (  ) ; if  (  strings . is not blank ( docker ip )  )   {  host = docker ip;  }   }   }  if  (  strings . is not blank ( host )  )   {  return create jolokia client from host and port ( container host host port ) ;  }   }   }   }   }  return null;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-jolokia\src\main\java\io\fabric8\kubernetes\jolokia\JolokiaClients.java,client for pod,public j4p client   (  pod pod )  {   string host =  kubernetes helper . get host ( pod ) ;  list <  container >  containers =  kubernetes helper . get containers ( pod ) ; for  (   container container : containers )   {   j4p client jolokia = client for container ( host container pod ) ; if  ( jolokia  !  =  null )   {  return jolokia;  }   }  return null;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-jolokia\src\main\java\io\fabric8\kubernetes\jolokia\JolokiaClients.java,client for replication controller,"public j4p client   (  string replication controller name )  {   replication controller replication controller = kubernetes . replication controllers (  )  . with name ( replication controller name )  . get (  ) ;  objects . require non null ( replication controller "" no  replication controller found for name: ""  +  replication controller name ) ; return client for replication controller ( replication controller ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-jolokia\src\main\java\io\fabric8\kubernetes\jolokia\JolokiaClients.java,client for service,public j4p client   (  service service )  {   list <  pod >  pods =  kubernetes helper . get pods for service ( service kubernetes . pods (  )  . in namespace ( service . get metadata (  )  . get namespace (  )  )  . list (  )  . get items (  )  ) ; return client for pod ( pods ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-jolokia\src\main\java\io\fabric8\kubernetes\jolokia\JolokiaClients.java,clients for pod,public list <  j4p client >    (  iterable <  pod >  pods )  {   list <  j4p client >  answer = new  array list <  >  (  ) ; for  (   pod pod : pods )   {  if  (  kubernetes helper . is pod running ( pod )  && filter pod ( pod )  )   {   j4p client client = client for pod ( pod ) ; if  ( client  !  =  null )   {  answer . add ( client ) ;  }   }   }  return answer;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-jolokia\src\main\java\io\fabric8\kubernetes\jolokia\JolokiaClients.java,clients for replication controller,public list <  j4p client >    (  string replication controller name  string namespace )  {   replication controller replication controller = require replication controller ( replication controller name namespace ) ;  list <  pod >  pods =  kubernetes helper . get pods for replication controller ( replication controller kubernetes . pods (  )  . in namespace ( namespace )  . list (  )  . get items (  )  ) ; return clients for pod ( pods ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-jolokia\src\main\java\io\fabric8\kubernetes\jolokia\JolokiaClients.java,clients for service,public list <  j4p client >    (  service service )  {   list <  pod >  pods =  kubernetes helper . get pods for service ( service kubernetes . pods (  )  . in namespace ( service . get metadata (  )  . get namespace (  )  )  . list (  )  . get items (  )  ) ; return clients for pod ( pods ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-jolokia\src\main\java\io\fabric8\kubernetes\jolokia\JolokiaClients.java,create jolokia client,"protected j4p client   (  container container  string jolokia url )  {   string name = container . get name (  ) ;  l o g . debug ( "" creating jolokia client for : ""  +  name  +  "" at  u r l: "" +  jolokia url ) ;  j4p client builder builder =  j4p client . url ( jolokia url ) ; if  ( use kube proxy )   {   u r l master url = get kubernetes (  )  . get master url (  ) ; if  ( master url  !  =  null && master url . to string (  )  . starts with ( ""https"" )  )   {  try  {   s s l context ssl ctx =  s s l utils . ssl context ( kubernetes . get configuration (  )  ) ;  connection socket factory factory = new  s s l connection socket factory ( ssl ctx ) ; builder = builder . ssl connection socket factory ( factory ) ;  }  catch  (   exception e )   {   l o g . warn ( "" unable to inject the  kubernetes  s s l context into the  jolokia client .   using the default context"" e ) ;  }   }   }   authentication mode mode = locate authentication mode (  ) ; switch  ( mode )   {  case  b e a r e r: builder = builder . authenticator ( new  bearer token authenticator (  )  ) ;  string token = kubernetes . get configuration (  )  . get oauth token (  ) ; builder = builder . user ( token ) ; break; case  b a s i c: builder = builder . authenticator ( new  basic authenticator (  )  ) ; if  (  strings . is not blank ( user )  )   {  builder = builder . user ( user ) ;  }  if  (  strings . is not blank ( password )  )   {  builder = builder . password ( password ) ;  }  break; default : throw new  illegal state exception ( "" unsupported authentication mode: ""  +  mode ) ;  }  return builder . build (  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-jolokia\src\main\java\io\fabric8\kubernetes\jolokia\JolokiaClients.java,create jolokia client from host and port,"protected j4p client   (  container container  string host  integer host port )  {   string jolokia url = locate jolokia protocol (  )   +  "": /  / ""  +  host +  "":"" +  host port +  "" / jolokia / ""; return create jolokia client ( container jolokia url ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-jolokia\src\main\java\io\fabric8\kubernetes\jolokia\JolokiaClients.java,filter pod,protected pod pod )  {  if  ( pod filter  !  =  null )   {  return pod filter . matches ( pod ) ;  }  else  {  return true;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-jolokia\src\main\java\io\fabric8\kubernetes\jolokia\JolokiaClients.java,get authentication mode,public authentication mode   (  )  {  return authentication mode;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-jolokia\src\main\java\io\fabric8\kubernetes\jolokia\JolokiaClients.java,get kubernetes,public kubernetes client   (  )  {  return kubernetes;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-jolokia\src\main\java\io\fabric8\kubernetes\jolokia\JolokiaClients.java,get password,public string   (  )  {  return password;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-jolokia\src\main\java\io\fabric8\kubernetes\jolokia\JolokiaClients.java,get pod filter,public filter <  pod >    (  )  {  return pod filter;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-jolokia\src\main\java\io\fabric8\kubernetes\jolokia\JolokiaClients.java,get protocol,public string   (  )  {  return protocol;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-jolokia\src\main\java\io\fabric8\kubernetes\jolokia\JolokiaClients.java,get user,public string   (  )  {  return user;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-jolokia\src\main\java\io\fabric8\kubernetes\jolokia\JolokiaClients.java,has docker,protected pod pod )  {   pod status current state = pod . get status (  ) ; if  ( current state  !  =  null )   {   list <  container status >  container statuses = current state . get container statuses (  ) ;  }  return false;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-jolokia\src\main\java\io\fabric8\kubernetes\jolokia\JolokiaClients.java,is use kube proxy,public kube proxy;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-jolokia\src\main\java\io\fabric8\kubernetes\jolokia\JolokiaClients.java,locate authentication mode,protected authentication mode   (  )  {  if  ( this . authentication mode  !  =  null )   {  return this . authentication mode;  }  if  (  kubernetes helper . is open shift ( kubernetes )  )   {  return  authentication mode .  b e a r e r;  }  return  authentication mode .  b a s i c;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-jolokia\src\main\java\io\fabric8\kubernetes\jolokia\JolokiaClients.java,locate jolokia protocol,"protected string   (  )  {  if  ( this . protocol  !  =  null )   {  return protocol;  }  if  (  kubernetes helper . is open shift ( kubernetes )  )   {  return ""https"";  }  return ""http"";  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-jolokia\src\main\java\io\fabric8\kubernetes\jolokia\JolokiaClients.java,require replication controller,"protected replication controller   (  string replication controller name  string namespace )  {   replication controller answer = kubernetes . replication controllers (  )  . in namespace ( namespace )  . with name ( replication controller name )  . get (  ) ;  objects . require non null ( answer "" no  replication controller found for namespace: ""  +  namespace  +  "" name: "" +  replication controller name ) ; return answer;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-jolokia\src\main\java\io\fabric8\kubernetes\jolokia\JolokiaClients.java,require service,"protected service   (  string service name  string namespace )  {   service answer = kubernetes . services (  )  . in namespace ( namespace )  . with name ( service name )  . get (  ) ;  objects . require non null ( answer "" no  service found for namespace: ""  +  namespace  +  "" name: "" +  service name ) ; return answer;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-jolokia\src\main\java\io\fabric8\kubernetes\jolokia\JolokiaClients.java,set authentication mode,public authentication mode authentication mode )  {  this . authentication mode = authentication mode;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-jolokia\src\main\java\io\fabric8\kubernetes\jolokia\JolokiaClients.java,set password,public string password )  {  this . password = password;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-jolokia\src\main\java\io\fabric8\kubernetes\jolokia\JolokiaClients.java,set pod filter,public filter <  pod >  pod filter )  {  this . pod filter = pod filter;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-jolokia\src\main\java\io\fabric8\kubernetes\jolokia\JolokiaClients.java,set protocol,public string protocol )  {  this . protocol = protocol;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-jolokia\src\main\java\io\fabric8\kubernetes\jolokia\JolokiaClients.java,set use kube proxy,public kube proxy )  {  this . use kube proxy = use kube proxy;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-jolokia\src\main\java\io\fabric8\kubernetes\jolokia\JolokiaClients.java,set user,public string user )  {  this . user = user;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\letschat-api\src\main\java\io\fabric8\letschat\EntitySupport.java,get id,public string   (  )  {  return id;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\letschat-api\src\main\java\io\fabric8\letschat\EntitySupport.java,set id,public string id )  {  this . id = id;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\letschat-api\src\main\java\io\fabric8\letschat\DtoSupport.java,get additional properties,json any getter public  map <  string  object >    (  )  {  return this . additional properties;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\letschat-api\src\main\java\io\fabric8\letschat\DtoSupport.java,set additional property,json any setter public void   (  string name  object value )  {  this . additional properties . put ( name value ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\letschat-api\src\main\java\io\fabric8\letschat\LetsChatClient.java,lets chat client,public string address  string username  string password  string auth token )  {  super ( address username password auth token ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\letschat-api\src\main\java\io\fabric8\letschat\LetsChatClient.java,create web client,override protected  <  t >  t   (  class <  t >  client type )  {   list <  object >  providers =  web clients . create providers (  ) ; providers . add ( new  authenticator (  )  ) ;  web client web client =  web client . create ( address providers ) ; disable ssl checks ( web client ) ; return  j a x r s client factory . from c
C:\Users\User\Desktop\Thesis\fabric8\components\letschat-api\src\main\java\io\fabric8\letschat\LetsChatClient.java,filter,"public client request context request context )  throws  i o exception  {   multivalued map <  string  object >  headers = request context . get headers (  ) ;  string authentication header = get authentication header (  ) ; if  (  strings . is not blank ( authentication header )  )   {  headers . add ( "" authorization"" authentication header ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\letschat-api\src\main\java\io\fabric8\letschat\LetsChatClient.java,get authentication header,"private string   (  )  {   string token = get auth token (  ) ; if  (  strings . is not blank ( token )  )   {  return "" bearer ""  +  token;  }  else  {   string user password = get username (  )   +  "":""  +  get password (  ) ; try  {  return "" basic ""  +   datatype converter . print base64 binary ( user password . get bytes ( "" u t f - 8"" )  ) ;  }  catch  (   unsupported encoding exception ex )   {  throw new  illegal state exception ( "" cannot encode with  u t f - 8"" ex ) ;  }   }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\letschat-api\src\main\java\io\fabric8\letschat\LetsChatKubernetes.java,create lets chat,"public lets chat client   (  kubernetes client kubernetes )  {   string user name =  systems . get env var or system property (  l e t s c h a t _  h u b o t _  u s e r n a m e ""fabric8"" ) ;  string password =  systems . get env var or system property (  l e t s c h a t _  h u b o t _  p a s s w o r d "" red hat$1"" ) ;  string token =  systems . get env var or system property (  l e t s c h a t _  h u b o t _  t o k e n ) ;  string namespace =  kubernetes helper . default namespace (  ) ;  string address; try  {  address =  kubernetes helper . get service u r l ( kubernetes  service names .  l e t s c h a t namespace ""http"" true ) ; if  (  strings . is null or blank ( address )  )   {   l o g . warn ( "" no  lets chat service could be found in kubernetes ""  +  namespace  +  "" on address: "" +  kubernetes . get master url (  )  ) ; return null;  }   }  catch  (   exception e )   {   l o g . warn ( "" no  lets chat service could be found in kubernetes ""  +  namespace  +  "" on address: "" +  kubernetes . get master url (  )  ) ; return null;  }   l o g . info ( "" logging into  lets chat at ""  +  address  +  "" as user "" +  user name ) ; return new  lets chat client ( address user name password token ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\letschat-api\src\main\java\io\fabric8\letschat\LetsChatClientSupport.java,lets chat client support,public string address  string username  string password  string auth token )  {  this . address = address; this . username = username; this . password = password; this . auth token = auth token;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\letschat-api\src\main\java\io\fabric8\letschat\LetsChatClientSupport.java,call,override public  list <  user d t o >    (  )  throws  exception  {  return get api (  )  . get room users ( id or slug ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\letschat-api\src\main\java\io\fabric8\letschat\LetsChatClientSupport.java,create room,"p o s t @ path ( ""rooms"" )  public  room d t o   (  room d t o dto )  {  return get api (  )  . create room ( dto ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\letschat-api\src\main\java\io\fabric8\letschat\RoomDTO.java,get created,public date   (  )  {  return created;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\letschat-api\src\main\java\io\fabric8\letschat\RoomDTO.java,get description,public string   (  )  {  return description;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\letschat-api\src\main\java\io\fabric8\letschat\RoomDTO.java,get last active,public date   (  )  {  return last active;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\letschat-api\src\main\java\io\fabric8\letschat\RoomDTO.java,get name,public string   (  )  {  return name;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\letschat-api\src\main\java\io\fabric8\letschat\RoomDTO.java,get owner,public string   (  )  {  return owner;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\letschat-api\src\main\java\io\fabric8\letschat\RoomDTO.java,get slug,public string   (  )  {  return slug;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\letschat-api\src\main\java\io\fabric8\letschat\RoomDTO.java,set created,public date created )  {  this . created = created;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\letschat-api\src\main\java\io\fabric8\letschat\RoomDTO.java,set description,public string description )  {  this . description = description;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\letschat-api\src\main\java\io\fabric8\letschat\RoomDTO.java,set last active,public date last active )  {  this . last active = last active;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\letschat-api\src\main\java\io\fabric8\letschat\RoomDTO.java,set name,public string name )  {  this . name = name;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\letschat-api\src\main\java\io\fabric8\letschat\RoomDTO.java,set owner,public string owner )  {  this . owner = owner;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\letschat-api\src\main\java\io\fabric8\letschat\RoomDTO.java,set slug,public string slug )  {  this . slug = slug;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\letschat-api\src\main\java\io\fabric8\letschat\RoomDTO.java,to string,"override public  string   (  )  {  return "" room d t o { ""  +  ""slug = '""  +  slug  +  '\'' +  ""  name = '"" +  name +  '\'' +  ""  owner = '"" +  owner +  '\'' +  ""  description = '"" +  description +  '\'' +  ""  created = "" +  created +  ""  last active = "" +  last active +  ' } ';  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\letschat-api\src\main\java\io\fabric8\letschat\MessageDTO.java,get owner,public user d t o   (  )  {  return owner;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\letschat-api\src\main\java\io\fabric8\letschat\MessageDTO.java,get posted,public date   (  )  {  return posted;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\letschat-api\src\main\java\io\fabric8\letschat\MessageDTO.java,get room,public room d t o   (  )  {  return room;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\letschat-api\src\main\java\io\fabric8\letschat\MessageDTO.java,get text,public string   (  )  {  return text;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\letschat-api\src\main\java\io\fabric8\letschat\MessageDTO.java,set owner,public user d t o owner )  {  this . owner = owner;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\letschat-api\src\main\java\io\fabric8\letschat\MessageDTO.java,set posted,public date posted )  {  this . posted = posted;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\letschat-api\src\main\java\io\fabric8\letschat\MessageDTO.java,set room,public room d t o room )  {  this . room = room;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\letschat-api\src\main\java\io\fabric8\letschat\MessageDTO.java,set text,public string text )  {  this . text = text;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\letschat-api\src\main\java\io\fabric8\letschat\MessageDTO.java,to string,"override public  string   (  )  {  return "" message d t o { ""  +  ""owner = ""  +  owner  +  ""  room = "" +  room +  ""  text = '"" +  text +  '\'' +  ""  posted = "" +  posted +  ' } ';  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\letschat-api\src\main\java\io\fabric8\letschat\Rooms.java,set owner,public room d t o room  user d t o account )  {  if  ( room  !  =  null && account  !  =  null )   {  room . set owner ( account . get id (  )  ) ;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\components\letschat-api\src\main\java\io\fabric8\letschat\UserDTO.java,get avatar,public string   (  )  {  return avatar;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\letschat-api\src\main\java\io\fabric8\letschat\UserDTO.java,get display name,public string   (  )  {  return display name;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\letschat-api\src\main\java\io\fabric8\letschat\UserDTO.java,get first name,public string   (  )  {  return first name;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\letschat-api\src\main\java\io\fabric8\letschat\UserDTO.java,get last name,public string   (  )  {  return last name;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\letschat-api\src\main\java\io\fabric8\letschat\UserDTO.java,get username,public string   (  )  {  return username;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\letschat-api\src\main\java\io\fabric8\letschat\UserDTO.java,set avatar,public string avatar )  {  this . avatar = avatar;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\letschat-api\src\main\java\io\fabric8\letschat\UserDTO.java,set display name,public string display name )  {  this . display name = display name;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\letschat-api\src\main\java\io\fabric8\letschat\UserDTO.java,set first name,public string first name )  {  this . first name = first name;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\letschat-api\src\main\java\io\fabric8\letschat\UserDTO.java,set last name,public string last name )  {  this . last name = last name;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\letschat-api\src\main\java\io\fabric8\letschat\UserDTO.java,set username,public string username )  {  this . username = username;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\letschat-api\src\main\java\io\fabric8\letschat\TokenDTO.java,get message,public string   (  )  {  return message;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\letschat-api\src\main\java\io\fabric8\letschat\TokenDTO.java,get status,public string   (  )  {  return status;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\letschat-api\src\main\java\io\fabric8\letschat\TokenDTO.java,get token,public string   (  )  {  return token;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\letschat-api\src\main\java\io\fabric8\letschat\TokenDTO.java,set message,public string message )  {  this . message = message;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\letschat-api\src\main\java\io\fabric8\letschat\TokenDTO.java,set status,public string status )  {  this . status = status;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\letschat-api\src\main\java\io\fabric8\letschat\TokenDTO.java,set token,public string token )  {  this . token = token;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\letschat-api\src\main\java\io\fabric8\letschat\TokenDTO.java,to string,"override public  string   (  )  {  return "" token d t o { ""  +  ""message = '""  +  message  +  '\'' +  ""  status = '"" +  status +  '\'' +  ""  token = '"" +  token +  '\'' +  ' } ';  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\letschat-api\src\test\java\io\fabric8\letschat\Example.java,main,"public string[] args )  {   string room name = ""fabric8 _ default""; if  ( args . length  >  0 )   {  room name = args[0];  }  try  {   kubernetes client kubernetes = new  default kubernetes client (  ) ;  lets chat client letschat =  lets chat kubernetes . create lets chat ( kubernetes ) ;  system . out . println ( "" connecting to letschat on: ""  +  letschat . get address (  )  ) ;  list <  room d t o >  rooms = letschat . get rooms (  ) ; for  (   room d t o room : rooms )   {   system . out . println ( "" room ""  +  room . get id (  )   +  "" has slug: "" +  room . get slug (  )  +  "" name "" +  room . get name (  )  ) ;  }   room d t o my room = letschat . get room ( room name ) ;  system . out . println ( "" found room: ""  +  my room  +  "" by slug: "" +  room name ) ;  room d t o not exist = letschat . get room ( ""does - not - exist"" ) ;  system . out . println ( "" found non existing room: ""  +  not exist ) ;  room d t o new room = letschat . get or create room ( ""my _ new _ room _ slug"" ) ;  system . out . println ( "" found / created room: ""  +  new room ) ;  }  catch  (   exception e )   {   system . out . println ( "" caught: ""  +  e ) ; e . print stack trace (  ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\letschat-api\src\test\java\io\fabric8\letschat\JsonTest.java,test room,"test public void   (  )  throws  exception  {   room d t o dto = new  room d t o (  ) ; dto . set name ( ""foo"" ) ; dto . set description ( ""some description"" ) ; dto . set id ( ""abcd"" ) ; dto . set owner ( ""some u u i d"" ) ;  string json =  json helper . to json ( dto ) ;  system . out . println ( "" d t o ""  +  dto  +  "" is json: """
C:\Users\User\Desktop\Thesis\fabric8\components\rest-utils\src\main\java\io\fabric8\rest\utils\RestCorsFilter.java,do filter,override public void   (  servlet request request  servlet response response  filter chain chain )  throws  i o exception   servlet exception  {  if  ( response instanceof  http servlet response )   {   http servlet response http response =  (  http servlet response ) response; http response . s
C:\Users\User\Desktop\Thesis\fabric8\components\swagger-annotator\src\main\java\io\fabric8\swagger\annotator\SwaggerAnnotator.java,swagger annotator,public generation config generation config )  {  super ( generation config ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\swagger-annotator\src\main\java\io\fabric8\swagger\annotator\SwaggerAnnotator.java,is additional properties supported,override public boolean   (  )  {  return true;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\swagger-annotator\src\main\java\io\fabric8\swagger\annotator\SwaggerAnnotator.java,property order,override public void   (  j defined class clazz  json node properties node )  {  clazz . annotate (  to string . class ) ; clazz . annotate (  equals and hash code . class ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\rest-utils\src\main\java\io\fabric8\rest\utils\Servers.java,start server,"public server   (  string app name  function <  servlet context handler  void >  context callback  string default port )  throws  exception  {   string port =  systems . get env var or system property ( "" h t t p _  p o r t"" "" h t t p _  p o r t"" default port ) ;  integer num =  integer . parse int ( port ) ;  string service =  systems . get env var or system property ( "" w e b _  c o n t e x t _  p a t h"" "" w e b _  c o n t e x t _  p a t h"" """" ) ;  string services path = ""cxf / services list"";  string servlet context path = "" / ""  +  service;  managed api . set singleton cxf servlet context ( servlet context path ) ;  string url = ""http: /  / localhost:""  +  port  +  servlet context path; if  (  ! url . ends with ( "" / "" )  )   {  url +  = "" / "";  }   system . out . println (  ) ;  system . out . println ( "" -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - "" ) ;  system . out . println ( app name  +  "" is now running at: ""  +  url ) ;  system . out . println ( "" -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - "" ) ;  system . out . println (  ) ; final  server server = new  server ( num ) ; final  servlet holder servlet holder = new  servlet holder ( new  c x f cdi servlet (  )  ) ; servlet holder . set init parameter ( ""service - list - path"" "" / ""  +  services path ) ; final  servlet context handler context = new  servlet context handler (  ) ; context . set context path ( "" / "" ) ; context . add event listener ( new  listener (  )  ) ; context . add event listener ( new  bean manager resource binding listener (  )  ) ;  string servlet path = "" / *""; if  (  strings . is not blank ( service )  )   {  servlet path = servlet context path  +  "" / *"";  }  context . add servlet ( servlet holder servlet path ) ; server . set handler ( context ) ;  enum set <  dispatcher type >  dispatches =  enum set . all of (  dispatcher type . class ) ; context . add filter (  rest cors filter . class "" / *"" dispatches ) ; if  ( context callback  !  =  null )   {  context callback . apply ( context ) ;  }  server . start (  ) ; return server;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\swagger-model\src\main\java\io\fabric8\swagger\SwaggerHelper.java,create object mapper,public object mapper   (  )  {   object mapper mapper = new  object mapper (  ) ; mapper . enable (  serialization feature .  i n d e n t _  o u t p u t ) ; return mapper;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\swagger-model\src\main\java\io\fabric8\swagger\SwaggerHelper.java,to json,public string   (  object dto )  throws  json processing exception  {   class <  ?  >  clazz = dto . get class (  ) ; return object mapper . writer for ( clazz )  . write value as string ( dto ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\AuthDetailDTO.java,get auth token,public string   (  )  {  return auth token;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\AuthDetailDTO.java,set auth token,public string auth token )  {  this . auth token = auth token;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\AuthDetailDTO.java,to string,"override public  string   (  )  {  return "" auth detail d t o { ""  +  ""auth token = '""  +  auth token  +  '\'' +  ' } ';  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\DtoSupport.java,get additional properties,json any getter public  map <  string  object >    (  )  {  return this . additional properties;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\DtoSupport.java,set additional property,json any setter public void   (  string name  object value )  {  this . additional properties . put ( name value ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\swagger-model\src\test\java\io\fabric8\swagger\model\ParseTest.java,assert parse example file,"public t >  t   (  string file name  class <  t >  clazz )  throws  exception  {   object mapper mapper =  swagger helper . create object mapper (  ) ;  file example file = new  file ( get examples dir (  )  file name ) ; assert file exists ( example file ) ;  t answer = mapper . reader for ( clazz )  . read value ( example file ) ; assert not null ( "" null returned while unmarshalling ""  +  example file answer ) ;  l o g . info ( "" parsed: ""  +  file name  +  "" as: "" +  answer ) ; return answer;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\swagger-model\src\test\java\io\fabric8\swagger\model\ParseTest.java,get examples dir,"public file   (  )  {   string basedir =  system . get property ( ""basedir"" "" . "" ) ;  string path = basedir  +  "" / src / test / resources"";  file dir = new  file ( path ) ; assert true ( "" kube directory ""  +  dir  +  "" does not exist !   please supply the correct value in the "" +   s y s t e m _  p r o p e r t y _  k u b e _  d i r +  "" system property value"" dir . exists (  )  ) ; return dir;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\swagger-model\src\test\java\io\fabric8\swagger\model\ParseTest.java,test parse example,"test public void   (  )  throws  exception  {   api declaration api declaration = assert parse example file ( ""example . json""  api declaration . class ) ;  system . out . println ( "" got resource listing: ""  +  api declaration ) ;  string json =  swagger helper . to json ( api declaration ) ;  l o g . info ( """
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\AuthDTO.java,get password,public string   (  )  {  return password;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\AuthDTO.java,get type,public string   (  )  {  return type;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\AuthDTO.java,get username,public string   (  )  {  return username;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\AuthDTO.java,set password,public string password )  {  this . password = password;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\AuthDTO.java,set type,public string type )  {  this . type = type;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\AuthDTO.java,set username,public string username )  {  this . username = username;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\EntitySupport.java,get id,public long   (  )  {  return id;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\EntitySupport.java,set id,public long id )  {  this . id = id;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\ModuleDTO.java,get secret,public string   (  )  {  return secret;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\ModuleDTO.java,get webhooks url,public string   (  )  {  return webhooks url;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\ModuleDTO.java,set secret,public string secret )  {  this . secret = secret;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\ModuleDTO.java,set webhooks url,public string webhooks url )  {  this . webhooks url = webhooks url;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\ModuleDTO.java,to string,"override public  string   (  )  {  return "" module d t o { ""  +  ""secret = '""  +  secret  +  '\'' +  ""  webhooks url = '"" +  webhooks url +  '\'' +  ' } ';  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\ProjectDTO.java,get description,public string   (  )  {  return description;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\ProjectDTO.java,get name,public string   (  )  {  return name;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\ProjectDTO.java,get slug,public string   (  )  {  return slug;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\ProjectDTO.java,get users,public list <  user d t o >    (  )  {  return users;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\ProjectDTO.java,is backlog activated,public backlog activated;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\ProjectDTO.java,is issues activated,public issues activated;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\ProjectDTO.java,is kanban activated,public kanban activated;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\ProjectDTO.java,is wiki activated,public wiki activated;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\ProjectDTO.java,set description,public string description )  {  this . description = description;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\ProjectDTO.java,set is backlog activated,public backlog activated )  {  this . is backlog activated = is backlog activated;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\ProjectDTO.java,set is issues activated,public issues activated )  {  this . is issues activated = is issues activated;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\ProjectDTO.java,set is kanban activated,public kanban activated )  {  this . is kanban activated = is kanban activated;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\ProjectDTO.java,set is wiki activated,public wiki activated )  {  this . is wiki activated = is wiki activated;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\ProjectDTO.java,set name,public string name )  {  this . name = name;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\ProjectDTO.java,set slug,public string slug )  {  this . slug = slug;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\ProjectDTO.java,set users,public list <  user d t o >  users )  {  this . users = users;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\ProjectDTO.java,to string,"override public  string   (  )  {  return "" project d t o { ""  +  ""name = '""  +  name  +  '\'' +  ""  slug = '"" +  slug +  '\'' +  ""  description = '"" +  description +  '\'' +  ' } ';  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\Projects.java,add user,"public project d t o project  user d t o user )  {  if  ( user  !  =  null )   {   objects . not null ( project ""project"" ) ;  list <  user d t o >  users = project . get users (  ) ; if  ( users  =  =  null )   {  users = new  array list <  >  (  ) ;  }  users . add ( user ) ; project . set users ( users ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\TaigaClient.java,taiga client,public string address  string username  string password )  {  super ( address username password ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\TaigaClient.java,create web client,override protected  <  t >  t   (  class <  t >  client type )  {   list <  object >  providers =  web clients . create providers (  ) ; providers . add ( new  authenticator (  )  ) ;  web client web client =  web client . create ( address providers ) ; disable ssl checks ( web client ) ; return  j a x r s client factory . from c
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\TaigaClient.java,filter,"public client request context request context )  throws  i o exception  {   multivalued map <  string  object >  headers = request context . get headers (  ) ;  string authentication header = get authentication header (  ) ; if  (  strings . is not blank ( authentication header )  )   {  headers . add ( "" authorization"" authentication header ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\TaigaClient.java,get authentication header,"private string   (  )  {   string token = get auth token (  ) ; if  (  strings . is not blank ( token )  )   {  return "" bearer ""  +  token;  }  else  {  return null;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\TaigaModule.java,to module key,public string   (  )  {  return this . to string (  )  . to lower case (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\TaigaKubernetes.java,create taiga,"public taiga client   (  kubernetes client kubernetes  string namespace )  {   string user name =  systems . get env var or system property ( "" t a i g a _  u s e r n a m e"" ""admin"" ) ;  string password =  systems . get env var or system property ( "" t a i g a _  p a s s w o r d"" ""123123"" ) ;  string address = null; try  {  address =  kubernetes helper . get service u r l ( kubernetes  service names .  t a i g a namespace ""http"" true ) ; if  (  strings . is null or blank ( address )  )   {   l o g . warn ( "" no  taiga service could be found in kubernetes ""  +  namespace  +  "" on address: "" +  kubernetes . get master url (  )  ) ; return null;  }   }  catch  (   exception e )   {   l o g . warn ( "" no  taiga service could be found in kubernetes ""  +  namespace  +  "" on address: "" +  kubernetes . get master url (  )  ) ; return null;  }   l o g . info ( "" logging into  taiga at ""  +  address  +  "" as user "" +  user name ) ; return new  taiga client ( address user name password ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\UserDTO.java,get big photo,public string   (  )  {  return big photo;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\UserDTO.java,get bio,public string   (  )  {  return bio;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\UserDTO.java,get color,public string   (  )  {  return color;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\UserDTO.java,get default language,public string   (  )  {  return default language;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\UserDTO.java,get default timezone,public string   (  )  {  return default timezone;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\UserDTO.java,get full name,public string   (  )  {  return full name;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\UserDTO.java,get full name display,public string   (  )  {  return full name display;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\UserDTO.java,get photo,public string   (  )  {  return photo;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\UserDTO.java,get username,public string   (  )  {  return username;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\UserDTO.java,is active,public active;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\UserDTO.java,set big photo,public string big photo )  {  this . big photo = big photo;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\UserDTO.java,set bio,public string bio )  {  this . bio = bio;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\UserDTO.java,set color,public string color )  {  this . color = color;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\UserDTO.java,set default language,public string default language )  {  this . default language = default language;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\UserDTO.java,set default timezone,public string default timezone )  {  this . default timezone = default timezone;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\UserDTO.java,set full name,public string full name )  {  this . full name = full name;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\UserDTO.java,set full name display,public string full name display )  {  this . full name display = full name display;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\UserDTO.java,set is active,public active )  {  this . is active = is active;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\UserDTO.java,set photo,public string photo )  {  this . photo = photo;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\UserDTO.java,set username,public string username )  {  this . username = username;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\TaigaClientSupport.java,taiga client support,public string address  string username  string password )  {  this . address = address; this . password = password; this . username = username;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\TaigaClientSupport.java,call,override public  map <  string  module d t o >    (  )  throws  exception  {  return get api (  )  . get modules for project ( id ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\TaigaClientSupport.java,create project,public project d t o   (  project d t o dto )  {  return get api (  )  . create project ( dto ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\test\java\io\fabric8\taiga\JsonTest.java,test project,"test public void   (  )  throws  exception  {   project d t o dto = new  project d t o (  ) ; dto . set name ( ""foo"" ) ; dto . set description ( ""some description"" ) ; dto . set id ( 1234 l ) ;  string json =  json helper . to json ( dto ) ;  system . out . println ( "" d t o ""  +  dto  +  "" is json: "" +  json ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\test\java\io\fabric8\taiga\Example.java,main,"public string[] args )  {   string project name = ""admin - beer""; if  ( args . length  >  0 )   {  project name = args[0];  }  try  {   kubernetes client kubernetes = new  default kubernetes client (  ) ;  taiga client taiga =  taiga kubernetes . create taiga ( kubernetes  kubernetes helper . default namespace (  )  ) ;  system . out . println ( "" connecting to taiga on: ""  +  taiga . get address (  )  ) ;  project d t o my project = taiga . get project by slug ( project name ) ;  system . out . println ( "" found project: ""  +  my project  +  "" by slug: "" +  project name ) ;  system . out . println ( "" project id for slug: ""  +  my project  +  "" is: "" +  taiga . get project id for slug ( project name )  ) ;  project d t o not exist = taiga . get project by slug ( ""does - not - exist"" ) ;  system . out . println ( "" found non existing project: ""  +  not exist ) ;  map <  string  module d t o >  modules = taiga . get modules for project ( project name ) ;  system . out . println ( "" available modules for ""  +  project name  +  "" are: "" +  modules . key set (  )  ) ;  module d t o gogs module = taiga . module for project ( project name  taiga module .  g o g s ) ;  system . out . println ( "" gogs module for ""  +  project name  +  "" is "" +  gogs module ) ;  project d t o auto create project = taiga . get or create project ( ""thingy"" ) ;  system . out . println ( ""get or create project: ""  +  auto create project ) ;  list <  project d t o >  projects = taiga . get projects (  ) ; for  (   project d t o project : projects )   {   system . out . println ( "" project ""  +  project . get id (  )   +  "" has slug: "" +  project . get slug (  )  +  "" name "" +  project . get name (  )  ) ;  }   }  catch  (   exception e )   {   system . out . println ( "" caught: ""  +  e ) ; e . print stack trace (  ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\fabric8-apt\src\main\java\io\fabric8\tools\apt\AbstractAnnotationProcessor.java,error,protected string message )  {  processing env . get messager (  )  . print message (  diagnostic .  kind .  e r r o r message ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\fabric8-apt\src\main\java\io\fabric8\tools\apt\AbstractAnnotationProcessor.java,get elements,public elements   (  )  {   elements element utils = null; if  ( processing env  !  =  null )   {  element utils = processing env . get element utils (  ) ;  }  return element utils;  }  
C:\Users\User\Desktop\Thesis\fabric8\fabric8-apt\src\main\java\io\fabric8\tools\apt\AbstractAnnotationProcessor.java,java type name,protected string   (  element element )  {   type mirror type mirror = element . as type (  ) ; return type mirror . to string (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\fabric8-apt\src\main\java\io\fabric8\tools\apt\AbstractAnnotationProcessor.java,log,protected throwable e )  {  processing env . get messager (  )  . print message (  diagnostic .  kind .  e r r o r e . get message (  )  ) ;  string writer buffer = new  string writer (  ) ;  print writer writer = new  print writer ( buffer ) ; e . print stack trace ( writer ) ; writer . close (  ) ; processing env . get messager (  )  . print message (  diagnostic .  kind .  e r r o r buffer . to string (  )  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\fabric8-apt\src\main\java\io\fabric8\tools\apt\AbstractAnnotationProcessor.java,warning,protected string message )  {  processing env . get messager (  )  . print message (  diagnostic .  kind .  w a r n i n g message ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\fabric8-apt\src\main\java\io\fabric8\tools\apt\AbstractAnnotationProcessor.java,write file,"protected string package name  string file name  string text )  {   writer writer = null; try  {   writer out;  filer filer = processing env . get filer (  ) ;  file object resource; try  {  resource = filer . get resource (  standard location .  c l a s s _  o u t p u t package name file name ) ;  }  catch  (   throwable e )   {  resource = filer . create resource (  standard location .  c l a s s _  o u t p u t package name file name ) ;  }   u r i uri = resource . to uri (  ) ;  file file = null; if  ( uri  !  =  null )   {  try  {  file = new  file ( uri . get path (  )  ) ;  }  catch  (   exception e )   {  warning ( "" could not convert output directory resource  u r i to a file ""  +  e ) ;  }   }  if  ( file  =  =  null )   {  warning ( "" no class output directory could be found ! "" ) ;  }  else  {  file . get parent file (  )  . mkdirs (  ) ; log ( "" generating file ""  +  file ) ; writer = new  file writer ( file ) ; writer . write ( text ) ;  }   }  catch  (   i o exception e )   {  log ( e ) ;  }  finally  {   i o helper . close ( writer ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\fabric8-apt\src\main\java\io\fabric8\tools\apt\IOHelper.java,close,public closeable .  .  .  closeables )  {  for  (   closeable closeable : closeables )   {  if  ( closeable  !  =  null )   {  try  {  closeable . close (  ) ;  }  catch  (   i o exception e )   {   }   }   }   }  
C:\Users\User\Desktop\Thesis\fabric8\fabric8-apt\src\main\java\io\fabric8\tools\apt\ConfigPropertyAnnotationProcessor.java,process,"public set <  ?  extends  type element >  annotations final  round environment round env )  {  if  ( round env . processing over (  )  )   {  return true;  }   set <  ?  extends  element >  elements = round env . get elements annotated with (  config property . class ) ; if  (  ! elements . is empty (  )  )   {   string builder buffer = new  string builder ( "" { "" ) ; buffer . append ( ""\n \""type\"": \""object\"" "" ) ; log ( ""options: ""  +  processing env . get options (  )  ) ; buffer . append ( ""\n \""properties\"":  { "" ) ; boolean first = true; for  (   element element : elements )   {  process endpoint class ( round env element buffer first ) ; first = false;  }  buffer . append ( ""\n  } "" ) ; buffer . append ( ""\n } "" ) ; buffer . append ( ""\n"" ) ;  string text = buffer . to string (  ) ; write file ( ""io . fabric8 . environment"" ""schema . json"" text ) ;  }  return true;  }  "
C:\Users\User\Desktop\Thesis\fabric8\fabric8-apt\src\main\java\io\fabric8\tools\apt\ConfigPropertyAnnotationProcessor.java,process endpoint class,"protected round environment round env final  element element  string builder buffer boolean first )  {  final  config property property = element . get annotation (  config property . class ) ; if  ( property  !  =  null )   {   string default value = property . default value (  ) ; if  ( ""org . apache . deltaspike .  null value marker"" . equals ( default value )  )   {  default value = null;  }   string name = property . name (  ) ;  string description =  java docs . get java doc ( get elements (  )  element ) ;  string java type name = java type name ( element ) ;  string json type =  json schema types . get json schema type name ( java type name ) ; if  (  ! first )   {  buffer . append ( "" "" ) ;  }  buffer . append ( ""\n \"""" )  . append ( name )  . append ( ""\"":  { "" ) ; buffer . append ( ""\n \""type\"": \"""" )  . append ( json type )  . append ( ""\"" "" ) ; if  ( default value  !  =  null )   {  buffer . append ( ""\n \""default\"": \"""" )  . append ( default value )  . append ( ""\"" "" ) ;  }  if  ( description  !  =  null )   {  description = description . trim (  ) ; if  ( description . length (  )   >  0 )   {  buffer . append ( ""\n \""description\"": \"""" )  . append ( description )  . append ( ""\"" "" ) ;  }   }  buffer . append ( ""\n \""java type\"": \"""" )  . append ( java type name )  . append ( ""\"""" ) ; buffer . append ( ""\n  } "" ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\fabric8-apt\src\main\java\io\fabric8\tools\apt\JavaDocs.java,find parameter java doc,"public string   (  string javadoc  string parameter name )  {   pattern regex =  pattern . compile ( "" . *\\s + @param\\s + ""  +  parameter name  +  ""\\s +  (  . * ) "" ) ;  matcher matcher = regex . matcher ( javadoc ) ; if  ( matcher . find (  )  )   {   string prefix = matcher . group ( 1 ) ; if  (  !  strings . is null or empty ( prefix )  )   {   pattern next tag =  pattern . compile ( ""\\s +  ( @param|@return|@exception|@throws|@serial data|@see|@since|@deprecated ) "" ) ;  matcher end matcher = next tag . matcher ( prefix ) ; if  ( end matcher . find (  )  )   {  int start = end matcher . start (  ) ; return prefix . substring ( 0 start )  . trim (  ) ;  }  else  {  return prefix;  }   }   }  return null;  }  "
C:\Users\User\Desktop\Thesis\fabric8\fabric8-apt\src\main\java\io\fabric8\tools\apt\JavaDocs.java,get java doc,public string   (  elements element utils  element element )  {  if  ( element utils  !  =  null )   {   string description = element utils . get doc comment ( element ) ; if  (  strings . is null or empty ( description )  && element . get kind (  )   =  =   element kind .  p a r a m e t e r )   {   string parent doc = get java doc ( element utils element . get enclosing element (  )  ) ; if  (  !  strings . is null or empty ( parent doc )  )   {  return find parameter java doc ( parent doc element . get simple name (  )  . to string (  )  ) ;  }   }  return description;  }  return null;  }  
C:\Users\User\Desktop\Thesis\fabric8\fabric8-apt\src\main\java\io\fabric8\tools\apt\JsonSchemaTypes.java,add type aliases,protected string json schema type  string .  .  .  java type names )  {  for  (   string java type name : java type names )   {  java to json schema types . put ( java type name json schema type ) ;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\fabric8-apt\src\main\java\io\fabric8\tools\apt\JsonSchemaTypes.java,get json schema type name,public string   (  string java type name )  {   string answer = java to json schema types . get ( java type name ) ; return answer  !  =  null  ?  answer : java type name;  }  
C:\Users\User\Desktop\Thesis\fabric8\fabric8-apt\src\test\java\io\fabric8\tools\apt\ExtractParameterJavaDocTest.java,assert param java doc,"public string param name  string javadoc  string expected )  {   string actual =  java docs . find parameter java doc ( javadoc param name ) ; assert equals ( ""javadoc: ""  +  javadoc expected actual ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\fabric8-apt\src\test\java\io\fabric8\tools\apt\ExtractParameterJavaDocTest.java,test finding parameter java doc,"test public void   (  )  throws  exception  {  assert param java doc ( ""foo"" ""blah @param foo something here @param another thing"" ""something here"" ) ; assert param java doc ( ""foo"" ""blah @param foo something here"" ""something here"" ) ; assert param java doc ( ""foo"" ""blah @param c"
C:\Users\User\Desktop\Thesis\fabric8\fabric8-apt\src\main\java\io\fabric8\tools\apt\Strings.java,is null or empty,"public string text )  {  return text  =  =  null || text . length (  )   =  =  0 || ""null"" . equals ( text ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\itests\src\test\java\io\fabric8\itests\BrokerProducerConsumerIT.java,invoke,override public void   (  )  throws  exception  {   j4p client broker client = jolokia clients . assert client for replication controller ( broker replication controller id ) ;  j4p client consumer client = jolokia clients . assert client for replication controller ( consumer replication control
C:\Users\User\Desktop\Thesis\fabric8\itests\src\test\java\io\fabric8\itests\BrokerProducerConsumerIT.java,matches,override public boolean   (  pod pod schema )  {  return true;  }  
C:\Users\User\Desktop\Thesis\fabric8\itests\src\test\java\io\fabric8\itests\BrokerProducerConsumerIT.java,test m q consumer,test public void   (  )  throws  exception  {  assert that ( client )  . replication controller ( broker replication controller id )  . is not null (  ) ; assert that ( client )  . replication controller ( consumer replication controller id )  . is not null (  ) ; assert that ( client )  . pods (  )  . running status (  )  . 
C:\Users\User\Desktop\Thesis\fabric8\hawt-app-maven-plugin\src\main\java\io\fabric8\maven\hawt\app\BuildMojo.java,artifact equals,private artifact a1  artifact a2 )  {  if  ( a1  =  =  a2 )   {  return true;  }  if  (  ! a1 . get group id (  )  . equals ( a2 . get group id (  )  )  )   {  return false;  }  else if  (  ! a1 . get artifact id (  )  . equals ( a2 . get artifact id (  )  )  )   {  return false;  }  else if  (  ! a1 . get version (  )  . equals ( a2 . get version (  )  )  )   {  return false;  }  else if  (  ! a1 . get type (  )  . equals ( a2 . get type (  )  )  )   {  return false;  }  if  ( a1 . get classifier (  )   =  =  null || a1 . get classifier (  )  . is empty (  )  )   {  return a2 . get classifier (  )   =  =  null || a2 . get classifier (  )  . is empty (  ) ;  }  return a1 . get classifier (  )  . equals ( a2 . get classifier (  )  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\hawt-app-maven-plugin\src\main\java\io\fabric8\maven\hawt\app\BuildMojo.java,artifacts to string,"private string   (  list <  artifact >  artifacts )  {   string builder sb = new  string builder (  ) ; for  (   artifact art : artifacts )   {  sb . append ( "" "" )  . append ( art . to string (  )  )  . append (  system . get property ( ""line . separator"" )  ) ;  }  return sb . to string (  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\hawt-app-maven-plugin\src\main\java\io\fabric8\maven\hawt\app\BuildMojo.java,chmod executable,"private file file )  {  try  {   files . set posix file permissions ( file . to path (  )   posix file permissions . from string ( ""rwxr - xr - x"" )  ) ;  }  catch  (   throwable ignore )   {   }   }  "
C:\Users\User\Desktop\Thesis\fabric8\hawt-app-maven-plugin\src\main\java\io\fabric8\maven\hawt\app\BuildMojo.java,collect class path,private array list <  artifact >    (  )  throws  dependency graph builder exception  {   artifact filter filter = new  scope artifact filter ( scope ) ;  dependency node root node = dependency graph builder . build dependency graph ( project filter ) ; final  array list <  artifact >  artifacts = new  array list <  >  (  ) ; root node . accept ( new  dependency node visitor (  )  {  @ override public boolean visit (   dependency node dependency node )  {  artifacts . add ( dependency node . get artifact (  )  ) ; return true;  }  @ override public boolean end visit (   dependency node dependency node )  {  return true;  }   }   ) ; return artifacts;  }  
C:\Users\User\Desktop\Thesis\fabric8\hawt-app-maven-plugin\src\main\java\io\fabric8\maven\hawt\app\BuildMojo.java,copy resource,"private string source  file target  hash map <  string  string >  interpolations boolean unix lined endings )  throws  mojo execution exception  {  try  {   string content = load text resource ( get class (  )  . get resource ( source )  ) ; if  ( interpolations  !  =  null )   {  content =  string utils . interpolate ( content interpolations ) ;  }  if  ( unix lined endings )   {  content = content . replace all ( ""\\r ? \\n""  matcher . quote replacement ( ""\n"" )  ) ;  }  else  {  content = content . replace all ( ""\\r ? \\n""  matcher . quote replacement ( ""\r\n"" )  ) ;  }   file utils . file write ( target content ) ;  }  catch  (   i o exception e )   {  throw new  mojo execution exception ( "" could create the ""  +  target  +  "" file"" e ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\hawt-app-maven-plugin\src\main\java\io\fabric8\maven\hawt\app\BuildMojo.java,end visit,override public boolean   (  dependency node dependency node )  {  return true;  }  
C:\Users\User\Desktop\Thesis\fabric8\hawt-app-maven-plugin\src\main\java\io\fabric8\maven\hawt\app\BuildMojo.java,execute,"public mojo execution exception   mojo failure exception  {   file lib dir = new  file ( assembly ""lib"" ) ; lib dir . mkdirs (  ) ;  file bin dir = new  file ( assembly ""bin"" ) ; bin dir . mkdirs (  ) ;  array list <  string >  classpath = new  array list <  string >  (  ) ;  array list <  artifact >  artifacts = null; try  {  artifacts = collect class path (  ) ;  }  catch  (   dependency graph builder exception e )   {  throw new  mojo execution exception ( "" could not get classpath"" e ) ;  }  get log (  )  . debug ( "" classpath for ""  +  scope  +  "":\n"" +  artifacts to string ( artifacts )  ) ; if  ( project . get artifact (  )  . get file (  )   !  =  null )   {   file target = new  file ( lib dir project . get artifact (  )  . get file (  )  . get name (  )  ) ; classpath . add ( target . get name (  )  ) ; try  {   file utils . copy file ( project . get artifact (  )  . get file (  )  target ) ;  }  catch  (   i o exception e )   {  throw new  mojo execution exception ( "" could not copy artifact to lib dir"" e ) ;  }   }   map artifact map = get artifact map (  ) ; for  (   artifact x : artifacts )   {   artifact artifact =  (  artifact ) artifact map . get ( versionless key ( x )  ) ; if  ( artifact  =  =  null || artifact . get file (  )   =  =  null ||  ! artifact equals ( artifact x )  )   {  continue;  }  get log (  )  . debug ( "" copying ""  +  artifact . to string (  )  ) ;  file file = artifact . get file (  )  . get absolute file (  ) ; try  {   file target = new  file ( lib dir file . get name (  )  ) ; int dup counter = 1; while  ( classpath . contains ( target . get name (  )  )  )   {  target = new  file ( lib dir ""dup""  +  dup counter  +  "" - "" +  file . get name (  )  ) ; dup counter +  + ;  }  classpath . add ( target . get name (  )  ) ;  file utils . copy file ( artifact . get file (  )  target ) ;  }  catch  (   i o exception e )   {  throw new  mojo execution exception ( "" could not copy artifact to lib dir"" e ) ;  }   }  try  {   string classpath txt =  string utils . join ( classpath . iterator (  )  ""\n"" )   +  ""\n"";  file utils . file write ( new  file ( lib dir ""classpath"" )  classpath txt ) ;  }  catch  (   i o exception e )   {  throw new  mojo execution exception ( "" could create the classpath file"" e ) ;  }   hash map <  string  string >  interpolations = new  hash map <  string  string >  (  ) ; interpolations . put ( ""hawtapp . mvn . main . property"" java main class  !  =  null  ?  java main class : """" ) ;  file target run = new  file ( bin dir ""run . sh"" ) ; copy resource ( ""bin / run . sh"" target run interpolations true ) ; chmod executable ( target run ) ;  file target run cmd = new  file ( bin dir ""run . cmd"" ) ; copy resource ( ""bin / run . cmd"" target run cmd interpolations false ) ; if  ( source  !  =  null && source . exists (  )  )   {  try  {   file utils . copy directory structure ( source assembly ) ;  }  catch  (   i o exception e )   {  throw new  mojo execution exception ( "" could copy the hawt - app resources"" e ) ;  }   }   archiver archiver;  string archive extension; if  ( archive . get name (  )  . ends with ( "" . tar"" )  )   {  archiver = tar archiver; archive extension = ""tar"";  }  else if  ( archive . get name (  )  . ends with ( "" . tar . gz"" )  )   {   (  (  tar archiver ) tar archiver )  . set compression (  tar archiver .  tar compression method . gzip ) ; archiver = tar archiver; archive extension = ""tar . gz"";  }  else if  ( archive . get name (  )  . ends with ( "" . zip"" )  )   {  archiver = zip archiver; archive extension = ""zip"";  }  else  {  throw new  mojo execution exception ( "" invalid archive extension .   should be zip | tar | tar . gz"" ) ;  }  archiver . set dest file ( archive ) ; archiver . add file set ( file set ( assembly )  . prefixed ( archive prefix )  . include exclude ( null new  string[] { ""bin / *"" }  )  . include empty dirs ( true )  ) ; archiver . set file mode ( 0755 ) ; archiver . add file set ( file set ( assembly )  . prefixed ( archive prefix )  . include exclude ( new  string[] { ""bin / *"" }  null )  . include empty dirs ( true )  ) ; try  {  archiver . create archive (  ) ;  }  catch  (   i o exception e )   {  throw new  mojo execution exception ( "" could not create the ""  +  archive  +  "" file"" e ) ;  }  project helper . attach artifact ( project archive extension archive classifier archive ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\hawt-app-maven-plugin\src\main\java\io\fabric8\maven\hawt\app\BuildMojo.java,get artifact map,private map   (  )  {   set <  artifact >  artifacts = project . get artifacts (  ) ;  linked hash map artifact map = new  linked hash map (  ) ; if  ( project . get artifacts (  )   !  =  null )   {   iterator i$ = artifacts . iterator (  ) ; while  ( i$ . has next (  )  )   {   artifact artifact =  (  artifact ) i$ . next (  ) ; artifact map . put ( versionless key ( artifact )  artifact ) ;  }   }  return artifact map;  }  
C:\Users\User\Desktop\Thesis\fabric8\hawt-app-maven-plugin\src\main\java\io\fabric8\maven\hawt\app\BuildMojo.java,load text resource,"private string   (  u r l resource )  throws  i o exception  {   input stream is = resource . open stream (  ) ; try  {  return  i o util . to string ( is "" u t f - 8"" ) ;  }  finally  {   i o util . close ( is ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\hawt-app-maven-plugin\src\main\java\io\fabric8\maven\hawt\app\BuildMojo.java,versionless key,"private string   (  artifact artifact )  {   string group id = artifact . get group id (  ) ;  string artifact id = artifact . get artifact id (  ) ;  string type = artifact . get type (  ) ;  string classifier = artifact . get classifier (  ) ; if  ( group id  =  =  null )   {  throw new  null pointer exception ( ""group id is null"" ) ;  }  else if  ( artifact id  =  =  null )   {  throw new  null pointer exception ( ""artifact id is null"" ) ;  }  else if  ( type  =  =  null )   {  throw new  null pointer exception ( ""type is null"" ) ;  }  if  ( classifier  =  =  null || classifier . is empty (  )  )   {  return group id  +  "":""  +  artifact id +  "":"" +  type;  }  return group id  +  "":""  +  artifact id +  "":"" +  type +  "":"" +  classifier;  }  "
C:\Users\User\Desktop\Thesis\fabric8\hawt-app-maven-plugin\src\main\java\io\fabric8\maven\hawt\app\BuildMojo.java,visit,override public boolean   (  dependency node dependency node )  {  artifacts . add ( dependency node . get artifact (  )  ) ; return true;  }  
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystem.java,fabric git profile file attributes,private string type long size )  {  this . type = type; this . size = size;  }  
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystem.java,fabric profile file system,public fabric profile file system provider file system provider  map <  string  object >  contents )  {  this . file system provider = file system provider; this . contents = contents;  }  
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystem.java,creation time,override public  file time   (  )  {  return null;  }  
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystem.java,file key,override public  object   (  )  {  return null;  }  
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystem.java,get directory,"suppress warnings ( ""unchecked"" )  private  list <  string >    (  path dir )  throws  i o exception  {  final  object content = load content ( dir . to absolute path (  )  . to string (  )  ) ; if  (  !  ( content instanceof  list )  )   {  throw new  i o exception ( "" is not a directory"" ) ;  }  return  (  list <  string >  ) c"
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystem.java,get file,"suppress warnings ( ""unchecked"" )  private byte[]   (  path dir )  throws  i o exception  {  final  object content = load content ( dir . to absolute path (  )  . to string (  )  ) ; if  (  !  ( content instanceof byte[] )  )   {  throw new  i o exception ( "" is not a file"" ) ;  }  return  ( byte[] ) content;  }  "
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystem.java,get file stores,override public  iterable <  file store >    (  )  {  return null;  }  
C:\Users\User\Desktop\Thesis\fabric8\tooling\archetype-itests\src\test\java\io\fabric8\tooling\archetype\generator\ArchetypeTest.java,after all,after class public static void   (  )  throws  exception  {  final int[] result pointer = new int[1];  string writer sw = new  string writer (  ) ;  set <  string >  modules = new  hash set <  string >  (  ) ; for  (  final  string out dir : out dirs )   {   string module = new  file ( out dir )  . get name (  ) ; if 
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystem.java,get path,override public  path   (  string first  string .  .  .  more )  {   string path; if  ( more . length  =  =  0 )   {  path = first;  }  else  {   string builder sb = new  string builder (  ) ; sb . append ( first ) ; for  (   string segment : more )   {  if  ( segment . length (  )   >  0 )   {  if  ( sb . length (  )   >  0 )   {  sb . ap
C:\Users\User\Desktop\Thesis\fabric8\tooling\archetype-itests\src\test\java\io\fabric8\tooling\archetype\generator\ArchetypeTest.java,assert archetype created,"private string artifact id  string group id  string version  file archetypejar )  throws  exception  {   file out dir = new  file ( basedir ""target / ""  +  artifact id  +  "" - output"" ) ;  system . out . println ( "" creating  archetype ""  +  group id  +  "":"" +  artifact id +  "":"" +  version ) ;  map <  string  string >  properties = new  archetype helper ( archetypejar out dir group id artifact id version null null )  . parse properties (  ) ;  system . out . println ( "" has preferred properties: ""  +  properties ) ;  archetype helper helper = new  archetype helper ( archetypejar out dir group id artifact id version null null ) ; helper . set package name ( package name ) ;  hash map <  string  string >  override properties = new  hash map <  string  string >  (  ) ; override properties . put ( ""scheme"" ""mycomponent"" ) ; helper . set override properties ( override properties ) ; helper . execute (  ) ;  file pom = new  file ( out dir ""pom . xml"" ) ; assert file exists ( pom ) ;  string pom text =  i o utils . to string ( new  file reader ( pom )  ) ;  string bad text = ""$ { camel - ""; if  ( pom text . contains ( bad text )  )   {  if  ( verbose )   {   system . out . println ( pom text ) ;  }  fail ( """"  +  pom  +  "" contains "" +  bad text ) ;  }  out dirs . add ( out dir . get path (  )  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\tooling\archetype-itests\src\test\java\io\fabric8\tooling\archetype\generator\ArchetypeTest.java,assert file exists,"protected file file )  {  assert true ( ""file should exist: ""  +  file file . exists (  )  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystem.java,get path matcher,"override public  path matcher   (  string syntax and pattern )  {  int colon index = syntax and pattern . index of ( ':' ) ; if  ( colon index  <  =  0 || colon index  =  =  syntax and pattern . length (  )   -  1 )   {  throw new  illegal argument exception ( ""syntax and pattern must have form \""syntax:patte"
C:\Users\User\Desktop\Thesis\fabric8\tooling\archetype-itests\src\test\java\io\fabric8\tooling\archetype\generator\ArchetypeTest.java,run,"override public void   (  )  {   system . out . println ( "" invoking projects in ""  +  out dir ) ;  maven cli maven = new  maven cli (  ) ; result pointer[0] = maven . do main ( new  string[] { ""clean"" ""package"" "" - f"" ""archetypes - test - pom . xml"" }  out dir  system . out  system . out ) ;  system . out . println ( "
C:\Users\User\Desktop\Thesis\fabric8\tooling\archetype-itests\src\test\java\io\fabric8\tooling\archetype\generator\ArchetypeTest.java,test generate active m q archetype,"test public void   (  )  throws  exception  {  assert archetype created ( ""camel - archetype - activemq"" ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\tooling\archetype-itests\src\test\java\io\fabric8\tooling\archetype\generator\ArchetypeTest.java,test generate component archetype,"test public void   (  )  throws  exception  {  assert archetype created ( ""camel - archetype - component"" ""org . apache . camel . archetypes"" camel version ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\tooling\archetype-itests\src\test\java\io\fabric8\tooling\archetype\generator\ArchetypeTest.java,test generate dataformat archetype,"test public void   (  )  throws  exception  {  assert archetype created ( ""camel - archetype - dataformat"" ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystem.java,get root directories,override public  iterable <  path >    (  )  {  return  collections .  <  path > singleton ( new  fabric profile path ( this new byte[] { ' / ' }  )  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystem.java,get separator,"override public  string   (  )  {  return "" / "";  }  "
C:\Users\User\Desktop\Thesis\fabric8\tooling\archetype-itests\src\test\java\io\fabric8\tooling\archetype\generator\ArchetypeTest.java,test generate drools archetype,"test @ ignore public void   (  )  throws  exception  {   string artifact id = ""karaf - camel - drools - archetype""; assert archetype created ( artifact id ""io . fabric8"" project version new  file ( basedir "" .  .  / archetypes / ""  +  artifact id  +  "" / target / "" +  artifact id +  "" - "" +  project version +  "
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystem.java,get user principal lookup service,override public  user principal lookup service   (  )  {  throw new  unsupported operation exception (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\tooling\archetype-itests\src\test\java\io\fabric8\tooling\archetype\generator\ArchetypeTest.java,test generate java archetype,"test public void   (  )  throws  exception  {  assert archetype created ( ""camel - archetype - java"" ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\tooling\archetype-itests\src\test\java\io\fabric8\tooling\archetype\generator\ArchetypeTest.java,test generate quickstart archetypes,"test public void   (  )  throws  exception  {   string[] dirs = new  file ( basedir "" .  .  / archetypes"" )  . list ( new  filename filter (  )  {  @ override public boolean accept (   file dir   string name )  {  return new  file ( dir name )  . is directory (  )  &&  !  e x c l u d e d _  a r c h e t y p e s . contains ( name ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\tooling\archetype-itests\src\test\java\io\fabric8\tooling\archetype\generator\ArchetypeTest.java,test generate spring archetype,"test public void   (  )  throws  exception  {  assert archetype created ( ""camel - archetype - spring"" ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystem.java,glob to regex,"private string   (  string pattern )  {   string builder sb = new  string builder ( pattern . length (  )  ) ; int in group = 0; int in class = 0; int first index in class =  - 1; char[] arr = pattern . to char array (  ) ; for  ( int i = 0; i  <  arr . length; i +  +  )   {  char ch = arr[i]; switch  ( ch )   {  case '\\': if  (  +  + i  >  =  arr . length )   {  sb . append ( '\\' ) ;  }  else  {  char next = arr[i]; switch  ( next )   {  case ' ': break; case ' q': case ' e': sb . append ( '\\' ) ; default : sb . append ( '\\' ) ;  }  sb . append ( next ) ;  }  break; case '*': if  ( in class  =  =  0 )  sb . append ( "" . *"" ) ; else sb . append ( '*' ) ; break; case ' ? ': if  ( in class  =  =  0 )  sb . append ( ' . ' ) ; else sb . append ( ' ? ' ) ; break; case '[': in class +  + ; first index in class = i  +  1; sb . append ( '[' ) ; break; case ']': in class -  - ; sb . append ( ']' ) ; break; case ' . ': case ' ( ': case ' ) ': case ' + ': case '|': case '^': case '$': case '@': case '%': if  ( in class  =  =  0 ||  ( first index in class  =  =  i && ch  =  =  '^' )  )  sb . append ( '\\' ) ; sb . append ( ch ) ; break; case ' ! ': if  ( first index in class  =  =  i )  sb . append ( '^' ) ; else sb . append ( ' ! ' ) ; break; case ' { ': in group +  + ; sb . append ( ' ( ' ) ; break; case ' } ': in group -  - ; sb . append ( ' ) ' ) ; break; case ' ': if  ( in group  >  0 )  sb . append ( '|' ) ; else sb . append ( ' ' ) ; break; default : sb . append ( ch ) ;  }   }  return sb . to string (  ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystem.java,has next,override public boolean   (  )  {  return delegate . has next (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystem.java,is directory,"override public boolean   (  )  {  return ""directory"" . equals ( type ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystem.java,is open,override public boolean   (  )  {  return true;  }  
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystem.java,is other,override public boolean   (  )  {  return false;  }  
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystem.java,is read only,override public boolean   (  )  {  return true;  }  
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystem.java,is regular file,"override public boolean   (  )  {  return ""file"" . equals ( type ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystem.java,is symbolic link,override public boolean   (  )  {  return false;  }  
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystem.java,iterator,override public  iterator <  path >    (  )  {  return new  iterator <  path >  (  )  {  final  iterator <  string >  delegate = directory . iterator (  ) ; @ override public boolean has next (  )  {  return delegate . has next (  ) ;  }  @ override public  path next (  )  {   string val = delegate . next (  ) ; return new  f
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystem.java,last access time,override public  file time   (  )  {  return null;  }  
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystem.java,last modified time,override public  file time   (  )  {  return null;  }  
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystem.java,load content,private object   (  string path )  throws  i o exception  {  return contents . get ( path ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystem.java,matches,override public boolean   (  path path )  {  return regex . matcher ( path . to string (  )  )  . matches (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystem.java,new byte channel,public a extends  basic file attributes >  seekable byte channel   (  path path  set <  ?  extends  open option >  options  file attribute <  ?  > [] attrs )  throws  i o exception  {  final byte[] data = get file ( path ) ; return new  seekable byte channel (  )  {  long position; @ override public int read (   byte buffer dst )  throws  i o exception  {  int l =  ( int )  math . min ( dst . remaining (  )  size (  )   -  position ) ; dst . put ( data  ( int ) position l ) ; position +  = l; return l;  }  @ override public int write (   byte buffer src )  throws  i o exception  {  throw new  unsupported operation exception (  ) ;  }  @ override public long position (  )  throws  i o exception  {  return position;  }  @ override public  seekable byte channel position (  long new position )  throws  i o exception  {  position = new position; return this;  }  @ override public long size (  )  throws  i o exception  {  return data . length;  }  @ override public  seekable byte channel truncate (  long size )  throws  i o exception  {  throw new  unsupported operation exception (  ) ;  }  @ override public boolean is open (  )  {  return true;  }  @ override public void close (  )  throws  i o exception  {   }   }  ;  }  
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystem.java,new directory stream,public directory stream <  path >    ( final  path dir  directory stream .  filter <  ?  super  path >  filter )  throws  i o exception  {  final  list <  string >  directory = get directory ( dir ) ; return new  directory stream <  path >  (  )  {  @ override public  iterator <  path >  iterator (  )  {  return new  iterator <  path >  (  )  {  final  iterator <  string >  delegate = directory . iterator (  ) ; @ override public boolean has next (  )  {  return delegate . has next (  ) ;  }  @ override public  path next (  )  {   string val = delegate . next (  ) ; return new  fabric profile path (  fabric profile file system . this val . get bytes (  standard charsets .  u t f _ 8 )  ) ;  }  @ override public void remove (  )  {  throw new  unsupported operation exception (  ) ;  }   }  ;  }  @ override public void close (  )  throws  i o exception  {   }   }  ;  }  
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystem.java,new input stream,public input stream   (  path path  open option[] options )  throws  i o exception  {  byte[] data = get file ( path ) ; return new  byte array input stream ( data ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystem.java,new watch service,override public  watch service   (  )  throws  i o exception  {  throw new  unsupported operation exception (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystem.java,next,override public  path   (  )  {   string val = delegate . next (  ) ; return new  fabric profile path (  fabric profile file system . this val . get bytes (  standard charsets .  u t f _ 8 )  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystem.java,position,override public  seekable byte channel   ( long new position )  throws  i o exception  {  position = new position; return this;  }  
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystem.java,provider,override public  file system provider   (  )  {  return file system provider;  }  
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystem.java,read,override public int   (  byte buffer dst )  throws  i o exception  {  int l =  ( int )  math . min ( dst . remaining (  )  size (  )   -  position ) ; dst . put ( data  ( int ) position l ) ; position +  = l; return l;  }  
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystem.java,read attributes,"public a extends  basic file attributes >  a   (  path path  class <  a >  clazz  link option .  .  .  options )  throws  i o exception  {  if  ( clazz  !  =   basic file attributes . class )   {  throw new  unsupported operation exception (  ) ;  }   path absolute = path . to absolute path (  ) ;  object desc = contents . get ( absolute . to string (  )  ) ; if  ( desc  =  =  null )   {  throw new  file not found exception ( path . to string (  )  ) ;  }   string type; long size; if  ( desc instanceof  list )   {  type = ""directory""; size = 0;  }  else if  ( desc instanceof byte[] )   {  type = ""file""; size =  (  ( byte[] ) desc )  . length;  }  else  {  throw new  illegal state exception (  ) ;  }  return  (  a ) new  fabric git profile file attributes ( type size ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystem.java,remove,override public void   (  )  {  throw new  unsupported operation exception (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystem.java,size,override public long   (  )  {  return size;  }  
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystem.java,supported file attribute views,override public  set <  string >    (  )  {  return null;  }  
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystem.java,truncate,override public  seekable byte channel   ( long size )  throws  i o exception  {  throw new  unsupported operation exception (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystem.java,write,override public int   (  byte buffer src )  throws  i o exception  {  throw new  unsupported operation exception (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystemProvider.java,add child,"private path child  object content )  {   string par = "" / ""  +  path . relativize ( child . get parent (  )  )  . to string (  ) ;  string str = "" / ""  +  path . relativize ( child )  . to string (  ) ; if  (  ! "" / "" . equals ( str )  )   {  if  ( str . ends with ( "" / "" )  )   {  str = str . substring ( 0 str . length (  )   -  1 ) ;  }   (  (  list <  string >  ) contents . get ( par )  )  . add ( str ) ;  }  contents . put ( str content ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystemProvider.java,build file system,"private fabric profile file system   ( final  path path )  throws  i o exception  {  final  map <  string  object >  contents = new  hash map <  >  (  ) ;  files . walk file tree ( path new  simple file visitor <  path >  (  )  {  @ override public  file visit result pre visit directory (   path dir   basic file attributes attrs )  throws  i o exception  {  add child ( dir new  array list <  string >  (  )  ) ; return  file visit result .  c o n t i n u e;  }  @ override public  file visit result visit file (   path file   basic file attributes attrs )  throws  i o exception  {  byte[] content =  files . read all bytes ( file ) ; if  ( file . get file name (  )  . to string (  )  . equals ( ""io . fabric8 . agent . properties"" )  )   {  file = file . resolve sibling ( ""profile . cfg"" ) ;  }  else if  ( file . get file name (  )  . to string (  )  . contains ( "" . properties"" )  )   {  file = file . resolve sibling ( file . get file name (  )  . to string (  )  . replace ( "" . properties"" "" . cfg"" )  ) ;  }  if  ( file . get file name (  )  . to string (  )  . contains ( "" . cfg"" )  )   {   properties props = new  properties ( false ) ; props . load ( new  byte array input stream ( content )  ) ; for  (   map .  entry <  string  string >  entry : props . entry set (  )  )   {   string val = entry . get value (  ) ; val = val . replace ( ""$ { profile:io . fabric8 . agent / "" ""$ { profile:profile / "" ) ; val = val . replace ( ""$ { version:"" ""$ { profile:io . fabric8 . version / "" ) ; val = val . replace ( ""$ { runtime . "" ""$ { karaf . "" ) ;  matcher matcher =  pattern . compile ( "" . *\\$\\ {  (  . * ?  ) : . * ? \\ }  . *"" )  . matcher ( val ) ; if  ( matcher . matches (  )  )   {   string scheme = matcher . group ( 1 ) ; if  (  ! ""profile"" . equals ( scheme )  )   {   system . out . println ( "" unsupported scheme: ""  +  entry . get key (  )   +  ""  =  "" +  val +  "" in "" +  path . relativize ( file )  ) ;  }   }  entry . set value ( val ) ;  }   byte array output stream baos = new  byte array output stream (  ) ; props . save ( baos ) ; baos . flush (  ) ; content = baos . to byte array (  ) ;  }  add child ( file content ) ; return  file visit result .  c o n t i n u e;  }  private void add child (   path child   object content )  {   string par = "" / ""  +  path . relativize ( child . get parent (  )  )  . to string (  ) ;  string str = "" / ""  +  path . relativize ( child )  . to string (  ) ; if  (  ! "" / "" . equals ( str )  )   {  if  ( str . ends with ( "" / "" )  )   {  str = str . substring ( 0 str . length (  )   -  1 ) ;  }   (  (  list <  string >  ) contents . get ( par )  )  . add ( str ) ;  }  contents . put ( str content ) ;  }   }   ) ; return new  fabric profile file system ( this contents ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystemProvider.java,copy,override public void   (  path source  path target  copy option .  .  .  options )  throws  i o exception  {  throw new  read only file system exception (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystemProvider.java,create directory,override public void   (  path dir  file attribute <  ?  >  .  .  .  attrs )  throws  i o exception  {  throw new  read only file system exception (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystemProvider.java,delete,override public void   (  path path )  throws  i o exception  {  throw new  read only file system exception (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystemProvider.java,get file attribute view,override public  <  v extends  file attribute view >  v   (  path path  class <  v >  type  link option .  .  .  options )  {  return null;  }  
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystemProvider.java,get file store,override public  file store   (  path path )  throws  i o exception  {  return null;  }  
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystemProvider.java,get file system,override public  fabric profile file system   (  u r i uri )  {  synchronized  ( file systems )   {   fabric profile file system file system = null; try  {  file system = file systems . get ( uri to path ( uri )  . to real path (  )  ) ;  }  catch  (   i o exception ignore )   {   }  if  ( file system  =  =  null )   {  throw new
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystemProvider.java,get path,"override public  path   (  u r i uri )  {   string str = uri . get scheme specific part (  ) ; int i = str . last index of ( "" !  / "" ) ; if  ( i  =  =   - 1 )   {  throw new  illegal argument exception ( "" u r i: ""  +  uri  +  "" does not contain path info ex .  github:apache / karaf#master !  / "" ) ;  }  return get file syste"
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystemProvider.java,get scheme,"override public  string   (  )  {  return ""fabric - profile"";  }  "
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystemProvider.java,is hidden,override public boolean   (  path path )  throws  i o exception  {  return false;  }  
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystemProvider.java,is same file,override public boolean   (  path path  path path2 )  throws  i o exception  {  return path . to absolute path (  )  . equals ( path2 . to absolute path (  )  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystemProvider.java,move,override public void   (  path source  path target  copy option .  .  .  options )  throws  i o exception  {  throw new  read only file system exception (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystemProvider.java,new byte channel,override public  seekable byte channel   (  path path  set <  ?  extends  open option >  options  file attribute <  ?  >  .  .  .  attrs )  throws  i o exception  {  if  (  !  ( path instanceof  fabric profile path )  )   {  throw new  provider mismatch exception (  ) ;  }  return  (  (  fabric profile path ) path )  . get fil
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystemProvider.java,new directory stream,override public  directory stream <  path >    (  path dir  directory stream .  filter <  ?  super  path >  filter )  throws  i o exception  {  if  (  !  ( dir instanceof  fabric profile path )  )   {  throw new  provider mismatch exception (  ) ;  }  return  (  (  fabric profile path ) dir )  . get file system (  )  . new dire
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystemProvider.java,new file system,public fabric profile file system   (  path path  map <  string  ?  >  env )  throws  i o exception  {  if  (  !  files . is directory ( path )  )   {  throw new  unsupported operation exception (  ) ;  }  synchronized  ( file systems )   {   path local path = path . to real path (  ) ; if  ( this . file systems . contains key ( local path )  )   {  throw new  file system already exists exception (  ) ;  }   fabric profile file system file system = build file system ( path ) ; file systems . put ( local path file system ) ; return file system;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystemProvider.java,new input stream,override public  input stream   (  path path  open option .  .  .  options )  throws  i o exception  {  if  (  !  ( path instanceof  fabric profile path )  )   {  throw new  provider mismatch exception (  ) ;  }  return  (  (  fabric profile path ) path )  . get file system (  )  . new input stream ( path options ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystemProvider.java,pre visit directory,override public  file visit result   (  path dir  basic file attributes attrs )  throws  i o exception  {  add child ( dir new  array list <  string >  (  )  ) ; return  file visit result .  c o n t i n u e;  }  
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystemProvider.java,read attributes,override public  map <  string  object >    (  path path  string attributes  link option .  .  .  options )  throws  i o exception  {  return null;  }  
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystemProvider.java,set attribute,override public void   (  path path  string attribute  object value  link option .  .  .  options )  throws  i o exception  {  throw new  read only file system exception (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystemProvider.java,uri to path,"protected path   (  u r i uri )  {   string scheme = uri . get scheme (  ) ; if  (  ( scheme  =  =  null )  ||  (  ! scheme . equals ignore case ( get scheme (  )  )  )  )   {  throw new  illegal argument exception ( "" u r i scheme is not '""  +  get scheme (  )   +  ""'"" ) ;  }  try  {   string root = uri . get raw scheme specific part (  ) ; int i = root . last index of ( "" !  / "" ) ; if  ( i  !  =   - 1 )   {  root = root . substring ( 0 i ) ;  }   u r i root uri = new  u r i ( root ) ; try  {  return  paths . get ( root uri )  . to absolute path (  ) ;  }  catch  (   file system not found exception e )   {  try  {   file system fs =  file systems . new file system ( root uri new  hash map <  string  object >  (  )   fabric profile file system provider . class . get class loader (  )  ) ; return fs . provider (  )  . get path ( root uri )  . to absolute path (  ) ;  }  catch  (   i o exception e2 )   {  e . add suppressed ( e2 ) ; throw e;  }   }   }  catch  (   u r i syntax exception e )   {  throw new  illegal argument exception ( e . get message (  )  e ) ;  }   }  "
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystemProvider.java,visit file,"override public  file visit result   (  path file  basic file attributes attrs )  throws  i o exception  {  byte[] content =  files . read all bytes ( file ) ; if  ( file . get file name (  )  . to string (  )  . equals ( ""io . fabric8 . agent . properties"" )  )   {  file = file . resolve sibling ( ""profile . cfg"" ) ;  }  els"
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfilePath.java,fabric profile path,public fabric profile file system file system byte[] path boolean normalized )  {  this . file system = file system; if  ( normalized )   {  this . path = path;  }  else  {  this . path = normalize ( path ) ;  }   }  
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfilePath.java,check path,private fabric profile path   (  path param path )  {  if  ( param path  =  =  null )   {  throw new  null pointer exception (  ) ;  }  if  (  !  ( param path instanceof  fabric profile path )  )   {  throw new  provider mismatch exception (  ) ;  }  return  (  fabric profile path ) param path;  }  
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfilePath.java,compare to,public path param path )  {   fabric profile path p1 = this;  fabric profile path p2 = check path ( param path ) ; byte[] a1 = p1 . path; byte[] a2 = p2 . path; int l1 = a1 . length; int l2 = a2 . length; for  ( int i = 0  l =  math . min ( l1 l2 ) ; i  <  l; i +  +  )   {  int b1 = a1[i] & 0x f f; int b2 = a2[i] & 0x f f; if  ( b1  !  =  b2 )   {  return b1  -  b2;  }   }  return l1  -  l2;  }  
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfilePath.java,do get resolved,private fabric profile path p )  {  int nc = p . get name count (  ) ; byte[] path = p . path; int[] offsets = p . offsets; byte[] to = new byte[path . length]; int[] last m = new int[nc]; int last m off =  - 1; int m = 0; for  ( int i = 0; i  <  nc; i +  +  )   {  int n = offsets[i]; int len =  ( i  =  =  offsets . length  -  1 )   ?   ( path . length  -  n )  :  ( offsets[i  +  1]  -  n  -  1 ) ; if  ( len  =  =  1 && path[n]  =  =   ( byte ) ' . ' )   {  if  ( m  =  =  0 && path[0]  =  =  ' / ' )  to[m +  + ] = ' / '; continue;  }  if  ( len  =  =  2 && path[n]  =  =  ' . ' && path[n  +  1]  =  =  ' . ' )   {  if  ( last m off  >  =  0 )   {  m = last m[last m off -  - ]; continue;  }  if  ( path[0]  =  =  ' / ' )   {  if  ( m  =  =  0 )  to[m +  + ] = ' / ';  }  else  {  if  ( m  !  =  0 && to[m  -  1]  !  =  ' / ' )  to[m +  + ] = ' / '; while  ( len -  -   >  0 )  to[m +  + ] = path[n +  + ];  }  continue;  }  if  ( m  =  =  0 && path[0]  =  =  ' / ' || m  !  =  0 && to[m  -  1]  !  =  ' / ' )   {  to[m +  + ] = ' / ';  }  last m[ +  + last m off] = m; while  ( len -  -   >  0 )  to[m +  + ] = path[n +  + ];  }  if  ( m  >  1 && to[m  -  1]  =  =  ' / ' )  m -  - ; return  ( m  =  =  to . length )   ?  to :  arrays . copy of ( to m ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfilePath.java,ends with,public string other )  {  return ends with ( get file system (  )  . get path ( other )  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfilePath.java,equals,override public boolean   (  object obj )  {  return obj instanceof  fabric profile path &&  (  (  fabric profile path ) obj )  . file system  =  =  file system && compare to (  (  fabric profile path ) obj )   =  =  0;  }  
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfilePath.java,equals name at,private fabric profile path p1  fabric profile path p2 int index )  {  int beg1 = p1 . offsets[index]; int len1; if  ( index  =  =  p1 . offsets . length  -  1 )   {  len1 = p1 . path . length  -  beg1;  }  else  {  len1 = p1 . offsets[index  +  1]  -  beg1  -  1;  }  int beg2 = p2 . offsets[index]; int len2; if  ( index  =  =  p2 . offsets . length  -  1 )   {  len2 = p2 . path . length  -  beg2;  }  else  {  len2 = p2 . offsets[index  +  1]  -  beg2  -  1;  }  if  ( len1  !  =  len2 )   {  return false;  }  for  ( int n = 0; n  <  len1; n +  +  )   {  if  ( p1 . path[beg1  +  n]  !  =  p2 . path[beg2  +  n] )   {  return false;  }   }  return true;  }  
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfilePath.java,get file name,public fabric profile path   (  )  {  init offsets (  ) ; int nb offsets = offsets . length; if  ( nb offsets  =  =  0 )   {  return null;  }  if  ( nb offsets  =  =  1 && path[0]  !  =  ' / ' )   {  return this;  }  int offset = offsets[nb offsets  -  1]; int length = path . length  -  offset; byte[] path = new byte[length];  system . arraycopy ( this . path offset path 0 length ) ; return new  fabric profile path ( file system path ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfilePath.java,get file system,public fabric profile file system   (  )  {  return file system;  }  
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfilePath.java,get name,public fabric profile path   ( int index )  {  init offsets (  ) ; if  ( index  <  0 || index  >  =  offsets . length )   {  throw new  illegal argument exception (  ) ;  }  int offset = this . offsets[index]; int length; if  ( index  =  =  offsets . length  -  1 )   {  length = path . length  -  offset;  }  else  {  length = offsets[index  +  1]  -  offset  -  1;  }  byte[] path = new byte[length];  system . arraycopy ( this . path offset path 0 length ) ; return new  fabric profile path ( file system path ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfilePath.java,get name count,public offsets (  ) ; return offsets . length;  }  
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfilePath.java,get parent,public fabric profile path   (  )  {  init offsets (  ) ; int nb offsets = offsets . length; if  ( nb offsets  =  =  0 )   {  return null;  }  int length = offsets[nb offsets  -  1]  -  1; if  ( length  <  =  0 )   {  return get root (  ) ;  }  byte[] path = new byte[length];  system . arraycopy ( this . path 0 path 0 length ) ; return new  fabric profile path ( file system path ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfilePath.java,get resolved,private get resolved ( this ) ;  }   }  return path;  }  
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfilePath.java,get resolved path,byte absolute (  )   ?  get resolved (  )  : to absolute path (  )  . get resolved path (  ) ;  }  return r;  }  
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfilePath.java,get root,public fabric profile path   (  )  {  if  ( is absolute (  )  )   {  return new  fabric profile path ( file system new byte[] { this . path[0] }  ) ;  }  return null;  }  
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfilePath.java,has next,public name count (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfilePath.java,hash code,override public int   (  )  {  int h = hash; if  ( h  =  =  0 )   {  h = hash =  arrays . hash code ( path ) ;  }  return h;  }  
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfilePath.java,init offsets,private
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfilePath.java,is absolute,public
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfilePath.java,iterator,public iterator <  path >    (  )  {  return new  iterator <  path >  (  )  {  private int index = 0; public boolean has next (  )  {  return index  <  get name count (  ) ;  }  public  path next (  )  {  if  ( index  <  get name count (  )  )   {   fabric profile path name = get name ( index ) ; index +  + ; return name;  }  throw new  no such element exception (  ) ;  }  public void remove (  )  {  throw new  unsupported operation exception (  ) ;  }   }  ;  }  
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfilePath.java,next,public path   (  )  {  if  ( index  <  get name count (  )  )   {   fabric profile path name = get name ( index ) ; index +  + ; return name;  }  throw new  no such element exception (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfilePath.java,normalize,"private of byte = new byte[path . length]; int i = 0; while  ( i  <  index )   {  array of byte[i] = path[i]; i +  + ;  }  int j = i; int k = 0; while  ( i  <  path . length )   {  int m = path[i +  + ]; if  ( m  =  =  '\\' )   {  m = ' / ';  }  if  (  ( m  !  =  ' / ' )  ||  ( k  !  =  ' / ' )  )   {  if  ( m  =  =  0 )   {  throw new  invalid path exception ( new  string ( path  standard charsets .  u t f _ 8 )  "" path: nul character not allowed"" ) ;  }  array of byte[j +  + ] =  ( byte ) m; k = m;  }   }  if  (  ( j  >  1 )  &&  ( array of byte[j  -  1]  =  =  ' / ' )  )   {  j -  - ;  }  return j  =  =  array of byte . length  ?  array of byte :  arrays . copy of ( array of byte j ) ;  }  "
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfilePath.java,register,public watch key   (  watch service watcher  watch event .  kind <  ?  >  .  .  .  events )  throws  i o exception  {  throw new  unsupported operation exception (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfilePath.java,relativize,public fabric profile path   (  path other )  {   fabric profile path p1 = this;  fabric profile path p2 = check path ( other ) ; if  ( p2 . equals ( p1 )  )   {  return new  fabric profile path ( file system new byte[0] true ) ;  }  if  ( p1 . is absolute (  )   !  =  p2 . is absolute (  )  )   {  throw new  illegal argument exception (  ) ;  }  int nb names1 = p1 . get name count (  ) ; int nb names2 = p2 . get name count (  ) ; int l =  math . min ( nb names1 nb names2 ) ; int nb common = 0; while  ( nb common  <  l && equals name at ( p1 p2 nb common )  )   {  nb common +  + ;  }  int nb up = nb names1  -  nb common; int length = nb up * 3  -  1; if  ( nb common  <  nb names2 )   {  length +  = p2 . path . length  -  p2 . offsets[nb common]  +  1;  }  byte[] result = new byte[length]; int idx = 0; while  ( nb up -  -   >  0 )   {  result[idx +  + ] = ' . '; result[idx +  + ] = ' . '; if  ( idx  <  length )   {  result[idx +  + ] = ' / ';  }   }  if  ( nb common  <  nb names2 )   {   system . arraycopy ( p2 . path p2 . offsets[nb common] result idx p2 . path . length  -  p2 . offsets[nb common] ) ;  }  return new  fabric profile path ( file system result ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfilePath.java,remove,public unsupported operation exception (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfilePath.java,resolve,public fabric profile path   (  string other )  {  return resolve ( get file system (  )  . get path ( other )  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfilePath.java,resolve sibling,public path   (  string other )  {  return resolve sibling ( get file system (  )  . get path ( other )  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfilePath.java,starts with,public string other )  {  return starts with ( get file system (  )  . get path ( other )  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfilePath.java,subpath,public fabric profile path   ( int begin index int end index )  {  init offsets (  ) ; if  (  ( begin index  <  0 )  ||  ( begin index  >  =  this . offsets . length )  ||  ( end index  >  this . offsets . length ) ||  ( begin index  >  =  end index )  )   {  throw new  illegal argument exception (  ) ;  }  int offset = this . offsets[begin index]; int length; if  ( end index  =  =  this . offsets . length )   {  length = this . path . length  -  offset;  }  else  {  length = this . offsets[end index]  -  offset  -  1;  }  byte[] path = new byte[length];  system . arraycopy ( this . path offset path 0 length ) ; return new  fabric profile path ( file system path ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfilePath.java,to absolute path,public fabric profile path   (  )  {  if  ( is absolute (  )  )   {  return this;  }  byte[] result = new byte[path . length  +  1]; result[0] = ' / ';  system . arraycopy ( path 0 result 1 path . length ) ; return new  fabric profile path ( file system result true ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfilePath.java,to file,public file   (  )  {  throw new  unsupported operation exception (  ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfilePath.java,to real path,public fabric profile path   (  link option .  .  .  options )  throws  i o exception  {   fabric profile path absolute = new  fabric profile path ( file system get resolved path (  )  )  . to absolute path (  ) ; file system . provider (  )  . check access ( absolute ) ; return absolute;  }  
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfilePath.java,to string,override public  string   (  )  {  return new  string ( path  standard charsets .  u t f _ 8 ) ;  }  
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfilePath.java,to uri,public u r i   (  )  {  return null;  }  
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\test\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystemProviderTest.java,test file system,"test public void   (  )  throws  exception  {   u r l readme = get class (  )  . get class loader (  )  . get resource ( ""profiles /  read me . md"" ) ;  path fs root = new  file ( readme . to u r i (  )  )  . get parent file (  )  . to path (  ) ;  path profile root =  file systems . new file system ( fs root null )  . get path ( "" / "" ) ;  map <  str"
