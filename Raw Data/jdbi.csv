ProjectName,methodName,methodBody
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\argument\Arguments.java,Arguments,private  (Arguments that){ argumentFactories.addAll(that.argumentFactories); untypedNullArgument=that.untypedNullArgument; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\argument\Arguments.java,createCopy,@Override public Arguments  (){ return new Arguments(this); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\argument\AbstractArgumentFactory.java,AbstractArgumentFactory,"protected  (int sqlType){ this.sqlType=sqlType; Type argumentType=findGenericParameter(getClass() AbstractArgumentFactory.class).orElseThrow(() -> new IllegalStateException(getClass().getSimpleName() + "" must extend AbstractArgumentFactory with a concrete T parameter"")); if (argumentType instanceof Class) { Class<?> argumentClass=(Class<?>)argumentType; this.isInstance=(type value) -> argumentClass.isAssignableFrom(getErasedType(type)) || argumentClass.isInstance(value); } else { this.isInstance=(type value) -> argumentType.equals(type); } } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\argument\Arguments.java,findFor,public Optional<Argument>  (Type type Object value){ return argumentFactories.stream().flatMap(factory -> toStream(factory.build(type value registry))).findFirst(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\argument\Arguments.java,getUntypedNullArgument,public Argument  (){ return untypedNullArgument; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\argument\Arguments.java,register,public Arguments  (ArgumentFactory factory){ argumentFactories.add(0 factory); return this; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\argument\Arguments.java,setRegistry,@Override public void  (ConfigRegistry registry){ this.registry=registry; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\argument\Arguments.java,setUntypedNullArgument,"public void  (Argument untypedNullArgument){ if (untypedNullArgument == null) { throw new IllegalArgumentException(""the Argument itself may not be null""); } this.untypedNullArgument=untypedNullArgument; } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\argument\CharacterStreamArgument.java,CharacterStreamArgument,public  (Reader reader int length){ this.value=reader; this.length=length; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\argument\CharacterStreamArgument.java,apply,@Override public void  (int position PreparedStatement statement StatementContext ctx) throws SQLException { statement.setCharacterStream(position value length); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\argument\InputStreamArgument.java,InputStreamArgument,public  (InputStream stream int length boolean ascii){ this.value=stream; this.length=length; this.ascii=ascii; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\argument\InputStreamArgument.java,apply,@Override public void  (int position PreparedStatement statement StatementContext ctx) throws SQLException { if (ascii) { if (value != null) { statement.setAsciiStream(position value length); } else { statement.setNull(position Types.LONGVARCHAR); } } els
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\argument\MapArguments.java,MapArguments,public  (Map<String ?> args){ this.args=args; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\argument\JavaTimeZoneIdArgumentFactory.java,JavaTimeZoneIdArgumentFactory,public  (){ super(Types.VARCHAR); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\argument\MapArguments.java,find,@Override public Optional<Argument>  (String name StatementContext ctx){ if (args.containsKey(name)) { final Object argument=args.get(name); final Class<?> argumentClass=argument == null ? Object.class : argument.getClass(); return ctx.findArgumentFor(arg
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\argument\MapArguments.java,toString,@Override public String  (){ return new LinkedHashMap<>(args).toString(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\argument\JavaTimeZoneIdArgumentFactory.java,build,@Override protected Argument  (ZoneId value ConfigRegistry config){ return (i p ctx) -> p.setString(i value.getId()); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\argument\MethodReturnValueNamedArgumentFinder.java,MethodReturnValueNamedArgumentFinder, (String prefix Object object){ super(prefix object); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\argument\MethodReturnValueNamedArgumentFinder.java,invokeMethod,"Object  (Method method StatementContext ctx){ try { return method.invoke(object); } catch ( IllegalAccessException e) { throw new UnableToCreateStatementException(String.format(""Access exception invoking "" + ""method [%s] on [%s]"" method.getName() object) e ctx); } catch ( InvocationTargetException e) { throw new UnableToCreateStatementException(String.format(""Invocation target exception invoking "" + ""method [%s] on [%s]"" method.getName() object) e ctx); } } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\argument\BeanPropertyArguments.java,BeanPropertyArguments,public  (String prefix Object bean){ super(prefix bean); this.propertyDescriptors=CLASS_PROPERTY_DESCRIPTORS.get(bean.getClass()); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\argument\BeanPropertyArguments.java,getGetter,"private Method  (String name PropertyDescriptor descriptor StatementContext ctx){ Method getter=descriptor.getReadMethod(); if (getter == null) { throw new UnableToCreateStatementException(String.format(""No getter method found for "" + ""bean property [%s] on [%s]"" name object) ctx); } return getter; } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\argument\BeanPropertyArguments.java,getNestedArgumentFinder,@Override NamedArgumentFinder  (Object obj){ return new BeanPropertyArguments(null obj); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\argument\BeanPropertyArguments.java,getValue,@Override Optional<TypedValue>  (String name StatementContext ctx){ PropertyDescriptor descriptor=propertyDescriptors.get(name); if (descriptor == null) { return Optional.empty(); } Method getter=getGetter(name descriptor ctx); Type type=getter.getGeneric
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\argument\BeanPropertyArguments.java,toString,"@Override public String  (){ return ""{lazy bean property arguments \"""" + object + ""\""""; } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\argument\BuiltInArgumentFactory.java,BuiltInArgument,private  (Class<T> klass int type StatementBinder<T> binder T value){ this.binder=binder; this.klass=klass; this.type=type; this.value=value; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\argument\BuiltInArgumentFactory.java,apply,@Override public void  (int position PreparedStatement statement StatementContext ctx) throws SQLException { if (value == null) { statement.setNull(position type); return; } binder.bind(statement position value); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\argument\ObjectFieldArguments.java,ObjectFieldArguments,public  (String prefix Object bean){ super(prefix bean); this.fields=CLASS_FIELDS.get(bean.getClass()); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\argument\ObjectFieldArguments.java,getNestedArgumentFinder,@Override NamedArgumentFinder  (Object obj){ return new ObjectFieldArguments(null obj); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\argument\ObjectFieldArguments.java,getValue,@Override Optional<TypedValue>  (String name StatementContext ctx){ Field field=fields.get(name); if (field == null) { return Optional.empty(); } try { Type type=field.getGenericType(); Object value=field.get(object); return Optional.of(new TypedValue(typ
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\argument\ObjectFieldArguments.java,toString,"@Override public String  (){ return ""{lazy bean field arguments \"""" + object + ""\""""; } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\argument\ObjectArgumentFactory.java,ObjectArgumentFactory,private  (Class<?> type Integer sqlType){ this.type=type; this.sqlType=sqlType; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\argument\ObjectArgumentFactory.java,build,@Override public Optional<Argument>  (Type expectedType Object value ConfigRegistry config){ return Objects.equals(type expectedType) || type.isInstance(value) ? Optional.of(new ObjectArgument(value sqlType)) : Optional.empty(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\argument\ObjectArgumentFactory.java,create,public static ArgumentFactory  (Class<?> type Integer sqlType){ return new ObjectArgumentFactory(type sqlType); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\argument\ObjectArgument.java,ObjectArgument,"public  (Object value Integer sqlType){ this.sqlType=sqlType; this.value=value; if (sqlType == null && value == null) { throw new IllegalArgumentException(""Null value provided without a type""); } } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\argument\ObjectArgument.java,apply,@Override public void  (final int position PreparedStatement statement StatementContext ctx) throws SQLException { if (value == null) { statement.setNull(position sqlType); } else { if (sqlType != null) { statement.setObject(position value sqlType); } els
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\argument\ObjectArgument.java,toString,"@Override public String  (){ return (value == null ? ""NULL"" : String.valueOf(value)) + (sqlType == null ? """" : "" (type "" + sqlType + "")""); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\argument\NullArgument.java,NullArgument,public  (int sqlType){ this.sqlType=sqlType; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\argument\NullArgument.java,apply,@Override public void  (final int position PreparedStatement statement StatementContext ctx) throws SQLException { statement.setNull(position sqlType); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\argument\NullArgument.java,toString,"@Override public String  (){ return ""NULL""; } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\argument\ObjectPropertyNamedArgumentFinder.java,ObjectPropertyNamedArgumentFinder,"public  (String prefix Object object){ this.prefix=(prefix == null || prefix.isEmpty()) ? """" : prefix + "".""; this.object=object; } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\argument\ObjectPropertyNamedArgumentFinder.java,TypedValue,public  (Type type Object value){ this.type=type; this.value=value; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\argument\ObjectPropertyNamedArgumentFinder.java,find,@Override public final Optional<Argument>  (String name StatementContext ctx){ if (name.startsWith(prefix)) { final String actualName=name.substring(prefix.length()); int separator=actualName.indexOf('.'); if (separator != -1) { String parentName=actualNa
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\array\CollectorColumnMapper.java,CollectorColumnMapper, (ColumnMapper<T> elementMapper Collector<T A R> collector){ this.elementMapper=elementMapper; this.collector=collector; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\array\CollectorColumnMapper.java,buildFromResultSet,private R  (Array array StatementContext ctx) throws SQLException { A result=collector.supplier().get(); BiConsumer<A T> accumulator=collector.accumulator(); try (ResultSet rs=array.getResultSet()){ while (rs.next()) { accumulator.accept(result elementMapper.map(rs 2 ctx)); } } return collector.finisher().apply(result); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\array\CollectorColumnMapper.java,map,@Override public R  (ResultSet r int columnNumber StatementContext ctx) throws SQLException { java.sql.Array array=r.getArray(columnNumber); if (array == null) { return null; } try { return buildFromResultSet(array ctx); } finally { array.free(); } } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\array\ArrayColumnMapper.java,ArrayColumnMapper, (ColumnMapper<?> elementMapper Class<?> componentType){ this.elementMapper=elementMapper; this.componentType=componentType; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\array\ArrayColumnMapper.java,buildArray,private Object  (java.sql.Array array StatementContext ctx) throws SQLException { if (!UNSUPPORTED_TYPES.contains(array.getBaseType())) { try { Object ary=array.getArray(); if (componentType.equals(ary.getClass().getComponentType())) { return ary; } } catch ( SQLFeatureNotSupportedException swallowed) { } } UNSUPPORTED_TYPES.add(array.getBaseType()); return buildFromResultSet(array ctx); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\array\ArrayColumnMapper.java,buildFromResultSet,private Object  (java.sql.Array array StatementContext ctx) throws SQLException { List<Object> list=new ArrayList<>(); try (ResultSet rs=array.getResultSet()){ while (rs.next()) { list.add(elementMapper.map(rs 2 ctx)); } } Object ary=Array.newInstance(componentType list.size()); if (componentType.isPrimitive()) { for (int i=0; i < list.size(); i++) { Array.set(ary i list.get(i)); } return ary; } return list.toArray((Object[])ary); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\array\ArrayColumnMapper.java,map,@Override public Object  (ResultSet r int columnNumber StatementContext ctx) throws SQLException { java.sql.Array array=r.getArray(columnNumber); if (array == null) { return null; } try { return buildArray(array ctx); } finally { array.free(); } } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\argument\ObjectMethodArguments.java,ObjectMethodArguments,public  (String prefix Object object){ super(prefix object); this.methods=CLASS_METHODS.get(object.getClass()); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\argument\ObjectMethodArguments.java,getNestedArgumentFinder,@Override NamedArgumentFinder  (Object obj){ return new ObjectMethodArguments(null obj); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\argument\ObjectMethodArguments.java,getValue,@Override Optional<TypedValue>  (String name StatementContext ctx){ Method method=methods.get(name); if (method == null) { return Optional.empty(); } Type type=method.getGenericReturnType(); Object value=invokeMethod(method ctx); return Optional.of(new Ty
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\argument\ObjectMethodArguments.java,toString,"@Override public String  (){ return ""{lazy object functions arguments \"""" + object + ""\""""; } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\array\SqlArrayArgumentFactory.java,build,@Override public Optional<Argument>  (Type type Object value ConfigRegistry config){ Class<?> erasedType=GenericTypes.getErasedType(type); if (!(erasedType.isArray() || Collection.class.isAssignableFrom(erasedType))) { return Optional.empty(); } if (value
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\array\InferredSqlArrayTypeFactory.java,InferredSqlArrayTypeFactory," (SqlArrayType<?> arrayType){ this.elementType=findGenericParameter(arrayType.getClass() SqlArrayType.class).orElseThrow(() -> new UnsupportedOperationException(""Must use a concretely typed SqlArrayType here"")); this.arrayType=arrayType; } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\array\InferredSqlArrayTypeFactory.java,build,@Override public Optional<SqlArrayType<?>>  (Type elementType ConfigRegistry config){ return this.elementType.equals(elementType) ? Optional.of(arrayType) : Optional.empty(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\array\SqlArrayMapperFactory.java,build,"@Override @SuppressWarnings(""unchecked"") public Optional<ColumnMapper<?>>  (Type type ConfigRegistry config){ final Class<?> erasedType=GenericTypes.getErasedType(type); if (erasedType.isArray()) { Class<?> elementType=erasedType.getComponentType(); retur"
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\array\SqlArrayMapperFactory.java,elementTypeMapper,private Optional<ColumnMapper<?>>  (Type elementType ConfigRegistry config){ Optional<ColumnMapper<?>> mapper=config.get(ColumnMappers.class).findFor(elementType); if (!mapper.isPresent() && elementType == Object.class) { return Optional.of((rs num context) -> rs.getObject(num)); } return mapper; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\array\SqlArrayArgument.java,SqlArrayArgument, (SqlArrayType<T> arrayType Collection<T> list){ this.typeName=arrayType.getTypeName(); this.array=list.stream().map(arrayType::convertArrayElement).toArray(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\array\SqlArrayArgument.java,apply,@Override public void  (int position PreparedStatement statement StatementContext ctx) throws SQLException { SqlArrayArgumentStrategy argumentStyle=ctx.getSqlArrayArgumentStrategy(); switch (argumentStyle) { case SQL_ARRAY: java.sql.Array sqlArray=stateme
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\array\VendorSupportedArrayType.java,VendorSupportedArrayType, (String typeName){ this.typeName=typeName; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\array\VendorSupportedArrayType.java,convertArrayElement,@Override public Object  (T element){ return element; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\array\VendorSupportedArrayType.java,factory,static <T>SqlArrayTypeFactory  (Class<T> type String sqlTypeName){ SqlArrayType<T> arrayType=new VendorSupportedArrayType<>(sqlTypeName); return (t ctx) -> t.equals(type) ? Optional.of(arrayType) : Optional.empty(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\array\VendorSupportedArrayType.java,getTypeName,@Override public String  (){ return typeName; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\collector\ArrayBuilder.java,ArrayBuilder, (Class<?> componentType){ this.componentType=componentType; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\collector\ArrayBuilder.java,add,public void  (Object element){ list.add(element); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\collector\ArrayBuilder.java,build,public Object  (){ Object array=Array.newInstance(componentType list.size()); for (int i=0; i < list.size(); i++) { Array.set(array i list.get(i)); } return array; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\array\SqlArrayTypes.java,SqlArrayTypes,private  (SqlArrayTypes that){ factories.addAll(that.factories); argumentStrategy=that.argumentStrategy; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\array\SqlArrayTypes.java,createCopy,@Override public SqlArrayTypes  (){ return new SqlArrayTypes(this); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\array\SqlArrayTypes.java,findFor,public Optional<SqlArrayType<?>>  (Type elementType){ return factories.stream().flatMap(factory -> toStream(factory.build(elementType registry))).findFirst(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\array\SqlArrayTypes.java,getArgumentStrategy,public SqlArrayArgumentStrategy  (){ return argumentStrategy; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\array\SqlArrayTypes.java,register,public SqlArrayTypes  (SqlArrayTypeFactory factory){ factories.add(0 factory); return this; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\array\SqlArrayTypes.java,setArgumentStrategy,public SqlArrayTypes  (SqlArrayArgumentStrategy argumentStrategy){ this.argumentStrategy=argumentStrategy; return this; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\array\SqlArrayTypes.java,setRegistry,@Override public void  (ConfigRegistry registry){ this.registry=registry; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\CloseException.java,CloseException,public  (String string Throwable throwable){ super(string throwable); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\collector\ElementTypeNotFoundException.java,ElementTypeNotFoundException,public  (String message){ super(message); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\collector\ArrayCollectorFactory.java,accepts,@Override public boolean  (Type containerType){ return getErasedType(containerType).isArray(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\collector\ArrayCollectorFactory.java,build,@Override public Collector<? ? ?>  (Type containerType){ Class<?> componentType=getErasedType(containerType).getComponentType(); return Collector.of(() -> new ArrayBuilder(componentType) ArrayBuilder::add (left right) -> { left.list.addAll(right.list); re
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\collector\ArrayCollectorFactory.java,elementType,@Override public Optional<Type>  (Type containerType){ return Optional.ofNullable(getErasedType(containerType).getComponentType()); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\collector\JdbiCollectors.java,JdbiCollectors,private  (JdbiCollectors that){ factories.addAll(that.factories); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\collector\JdbiCollectors.java,createCopy,@Override public JdbiCollectors  (){ return new JdbiCollectors(this); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\collector\JdbiCollectors.java,findElementTypeFor,public Optional<Type>  (Type containerType){ return findFactoryFor(containerType).flatMap(f -> f.elementType(containerType)); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\collector\JdbiCollectors.java,findFactoryFor,private Optional<CollectorFactory>  (Type containerType){ return factories.stream().filter(f -> f.accepts(containerType)).findFirst(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\collector\JdbiCollectors.java,findFor,public Optional<Collector<? ? ?>>  (Type containerType){ return findFactoryFor(containerType).map(f -> f.build(containerType)); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\collector\JdbiCollectors.java,register,public JdbiCollectors  (CollectorFactory factory){ factories.add(0 factory); return this; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\collector\NoSuchCollectorException.java,NoSuchCollectorException,public  (String message){ super(message); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\collector\OptionalCollectors.java,toOptional,public static <T O>Collector<T ? O>  (Supplier<O> empty Function<T O> factory){ return Collector.of(() -> new OptionalBuilder<>(empty factory) OptionalBuilder::set OptionalBuilder::combine OptionalBuilder::build); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\collector\OptionalCollectors.java,toOptionalDouble,public static Collector<Double ? OptionalDouble>  (){ return toOptional(OptionalDouble::empty OptionalDouble::of); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\collector\OptionalCollectors.java,toOptionalInt,public static Collector<Integer ? OptionalInt>  (){ return toOptional(OptionalInt::empty OptionalInt::of); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\collector\OptionalCollectors.java,toOptionalLong,public static Collector<Long ? OptionalLong>  (){ return toOptional(OptionalLong::empty OptionalLong::of); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\collector\OptionalBuilder.java,OptionalBuilder, (Supplier<O> empty Function<T O> factory){ this.empty=empty; this.factory=factory; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\collector\OptionalBuilder.java,build,O  (){ return value == null ? empty.get() : factory.apply(value); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\collector\OptionalBuilder.java,combine,static <T OPT_T>OptionalBuilder<T OPT_T>  (OptionalBuilder<T OPT_T> left OptionalBuilder<T OPT_T> right){ if (left.set && right.set) { throw tooManyValues(left.value right.value); } return left.set ? left : right; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\collector\OptionalBuilder.java,set,void  (T value){ if (set) { throw tooManyValues(this.value value); } this.value=value; this.set=true; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\collector\OptionalBuilder.java,stringify,"private static String  (Object value){ return value == null ? null : ""'"" + value + ""'""; } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\collector\OptionalBuilder.java,tooManyValues,"private static <T>IllegalStateException  (T first T second){ return new IllegalStateException(String.format(""Multiple values for optional: [%s  %s  ...]"" stringify(first) stringify(second))); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\collector\BuiltInCollectorFactory.java,BuiltInCollectorFactory,public  (){ collectors=new HashMap<>(); collectors.put(Optional.class toOptional()); collectors.put(Collection.class toCollection(ArrayList::new)); collectors.put(List.class toList()); collectors.put(ArrayList.class toCollection(ArrayList::new)); collectors.put(LinkedList.class toCollection(LinkedList::new)); collectors.put(CopyOnWriteArrayList.class toCollection(CopyOnWriteArrayList::new)); collectors.put(Set.class toSet()); collectors.put(HashSet.class toCollection(HashSet::new)); collectors.put(LinkedHashSet.class toCollection(LinkedHashSet::new)); collectors.put(SortedSet.class toCollection(TreeSet::new)); collectors.put(TreeSet.class toCollection(TreeSet::new)); collectors.put(Map.class toMap(LinkedHashMap::new)); collectors.put(HashMap.class toMap(HashMap::new)); collectors.put(LinkedHashMap.class toMap(LinkedHashMap::new)); collectors.put(SortedMap.class toMap(TreeMap::new)); collectors.put(TreeMap.class toMap(TreeMap::new)); collectors.put(ConcurrentMap.class toMap(ConcurrentHashMap::new)); collectors.put(ConcurrentHashMap.class toMap(ConcurrentHashMap::new)); collectors.put(WeakHashMap.class toMap(WeakHashMap::new)); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\collector\BuiltInCollectorFactory.java,accepts,@Override public boolean  (Type containerType){ Class<?> erasedType=getErasedType(containerType); return collectors.containsKey(erasedType) && containerType instanceof ParameterizedType; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\collector\BuiltInCollectorFactory.java,build,@Override public Collector<? ? ?>  (Type containerType){ Class<?> erasedType=getErasedType(containerType); return collectors.get(erasedType); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\collector\BuiltInCollectorFactory.java,combine,private static <K V M extends Map<K V>>M  (M a M b){ b.forEach((k v) -> putEntry(a k v)); return a; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\collector\BuiltInCollectorFactory.java,elementType,@Override public java.util.Optional<Type>  (Type containerType){ Class<?> erasedType=getErasedType(containerType); if (Map.class.isAssignableFrom(erasedType)) { return Optional.of(GenericTypes.resolveMapEntryType(containerType)); } return findGenericParam
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\collector\BuiltInCollectorFactory.java,putEntry,"private static <K V M extends Map<K V>>void  (M map K key V value){ V oldValue=map.put(key value); if (oldValue != null) { throw new IllegalStateException(String.format(""Multiple values for Map key '%s': ['%s' '%s' ...]"" key oldValue value)); } } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\collector\BuiltInCollectorFactory.java,toMap,public static <K V M extends Map<K V>>Collector<Map.Entry<K V> ? M>  (Supplier<M> mapFactory){ return Collector.of(mapFactory BuiltInCollectorFactory::putEntry BuiltInCollectorFactory::combine); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\collector\BuiltInCollectorFactory.java,toOptional,@Deprecated public static <T>Collector<T ? Optional<T>>  (){ return OptionalCollectors.toOptional(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\config\ConfigRegistry.java,ConfigRegistry,private  (ConfigRegistry that){ that.cache.forEach((type config) -> { JdbiConfig<?> copy=config.createCopy(); copy.setRegistry(ConfigRegistry.this); cache.put(type copy); } ); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\config\ConfigRegistry.java,createCopy,public ConfigRegistry  (){ return new ConfigRegistry(this); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\config\ConfigRegistry.java,get,"public <C extends JdbiConfig<C>>C  (Class<C> configClass){ return configClass.cast(cache.computeIfAbsent(configClass type -> { try { C config=configClass.getDeclaredConstructor().newInstance(); config.setRegistry(ConfigRegistry.this); return config; } catch ( ReflectiveOperationException e) { throw new IllegalStateException(""Unable to instantiate config class "" + configClass + "". Is there a public no-arg constructor?"" e); } } )); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\config\Configurable.java,configure,"@SuppressWarnings(""unchecked"") default <C extends JdbiConfig<C>>This  (Class<C> configClass Consumer<C> configurer){ configurer.accept(getConfig(configClass)); return (This)this; } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\config\Configurable.java,define,default This  (String key Object value){ return configure(SqlStatements.class c -> c.define(key value)); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\config\Configurable.java,getConfig,default <C extends JdbiConfig<C>>C  (Class<C> configClass){ return getConfig().get(configClass); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\config\Configurable.java,registerArgument,default This  (ArgumentFactory factory){ return configure(Arguments.class c -> c.register(factory)); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\config\Configurable.java,registerArrayType,default This  (SqlArrayTypeFactory factory){ return configure(SqlArrayTypes.class c -> c.register(factory)); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\config\Configurable.java,registerCollector,default This  (CollectorFactory factory){ return configure(JdbiCollectors.class c -> c.register(factory)); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\config\Configurable.java,registerColumnMapper,default This  (ColumnMapperFactory factory){ return configure(ColumnMappers.class c -> c.register(factory)); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\config\Configurable.java,registerExtension,default This  (ExtensionFactory factory){ return configure(Extensions.class c -> c.register(factory)); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\config\Configurable.java,registerRowMapper,default This  (RowMapperFactory factory){ return configure(RowMappers.class c -> c.register(factory)); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\config\Configurable.java,setMapKeyColumn,default This  (String keyColumn){ return configure(MapEntryMappers.class c -> c.setKeyColumn(keyColumn)); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\config\Configurable.java,setMapValueColumn,default This  (String valueColumn){ return configure(MapEntryMappers.class c -> c.setValueColumn(valueColumn)); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\config\Configurable.java,setSqlArrayArgumentStrategy,default This  (SqlArrayArgumentStrategy strategy){ return configure(SqlArrayTypes.class c -> c.setArgumentStrategy(strategy)); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\config\Configurable.java,setSqlParser,default This  (SqlParser parser){ return configure(SqlStatements.class c -> c.setSqlParser(parser)); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\config\Configurable.java,setTemplateEngine,default This  (TemplateEngine templateEngine){ return configure(SqlStatements.class c -> c.setTemplateEngine(templateEngine)); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\config\Configurable.java,setTimingCollector,default This  (TimingCollector collector){ return configure(SqlStatements.class c -> c.setTimingCollector(collector)); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\ConstantHandleSupplier.java,ConstantHandleSupplier, (Handle handle){ this.handle=handle; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\ConstantHandleSupplier.java,getConfig,@Override public ConfigRegistry  (){ return handle.getConfig(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\ConstantHandleSupplier.java,getHandle,@Override public Handle  (){ return handle; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\ConstantHandleSupplier.java,invokeInContext,@Override public <V>V  (ExtensionMethod extensionMethod ConfigRegistry config Callable<V> task) throws Exception { ExtensionMethod oldExtensionMethod=handle.getExtensionMethod(); try { handle.setExtensionMethod(extensionMethod); ConfigRegistry oldConfig=h
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\ConstantHandleSupplier.java,of,static HandleSupplier  (Handle handle){ return new ConstantHandleSupplier(handle); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\ConnectionException.java,ConnectionException,public  (Throwable cause){ super(cause); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\collector\OptionalPrimitiveCollectorFactory.java,accepts,@Override public boolean  (Type containerType){ return collectors.containsKey(containerType); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\collector\OptionalPrimitiveCollectorFactory.java,build,@Override public Collector<? ? ?>  (Type containerType){ return collectors.get(containerType); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\collector\OptionalPrimitiveCollectorFactory.java,elementType,@Override public Optional<Type>  (Type containerType){ return Optional.of(elementTypes.get(containerType)); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\extension\ExtensionMethod.java,ExtensionMethod,public  (Class<?> type Method method){ this.type=requireNonNull(type); this.method=requireNonNull(method); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\extension\ExtensionMethod.java,getMethod,public Method  (){ return method; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\extension\ExtensionMethod.java,getType,public Class<?>  (){ return type; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\extension\NoSuchExtensionException.java,NoSuchExtensionException,public  (String message){ super(message); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\generic\GenericTypes.java,findGenericParameter,public static Optional<Type>  (Type type Class<?> parameterizedSupertype){ Type parameterType=resolveType(parameterizedSupertype.getTypeParameters()[0] type); return parameterType instanceof Class || parameterType instanceof ParameterizedType ? Optional.of(parameterType) : Optional.empty(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\generic\GenericTypes.java,getErasedType,public static Class<?>  (Type type){ return TypeToken.of(type).getRawType(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\generic\internal\Preconditions.java,checkArgument,public static void  (boolean expression @Nullable String errorMessageTemplate @Nullable Object... errorMessageArgs){ if (!expression) { throw new IllegalArgumentException(format(errorMessageTemplate errorMessageArgs)); } } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\generic\GenericTypes.java,isArray,public static boolean  (Type type){ return type instanceof Class<?> && ((Class<?>)type).isArray(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\generic\internal\Preconditions.java,checkNotNull,public static <T>T  (T reference @Nullable String errorMessageTemplate @Nullable Object... errorMessageArgs){ if (reference == null) { throw new NullPointerException(format(errorMessageTemplate errorMessageArgs)); } return reference; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\generic\GenericTypes.java,resolveMapEntryType,private static <K V>Type  (TypeToken<K> keyType TypeToken<V> valueType){ return new TypeToken<Map.Entry<K V>>(){ } .where(new TypeParameter<K>(){ }  keyType).where(new TypeParameter<V>(){ }  valueType).getType(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\generic\internal\Preconditions.java,checkState,public static void  (boolean expression @Nullable String errorMessageTemplate @Nullable Object... errorMessageArgs){ if (!expression) { throw new IllegalStateException(format(errorMessageTemplate errorMessageArgs)); } } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\generic\internal\Preconditions.java,format,static String  (String template @Nullable Object... args){ return String.format(template args); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\generic\GenericTypes.java,resolveType,public static Type  (Type type Type contextType){ return TypeToken.of(contextType).resolveType(type).getType(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\generic\GenericType.java,GenericType,"protected  (){ this.type=GenericTypes.findGenericParameter(getClass() GenericType.class).orElseThrow(() -> new UnsupportedOperationException(""Missing generic type parameter."")); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\generic\GenericType.java,getType,public final Type  (){ return type; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\generic\internal\TypeCapture.java,capture,"final Type  (){ Type superclass=getClass().getGenericSuperclass(); checkArgument(superclass instanceof ParameterizedType ""%s isn't parameterized"" superclass); return ((ParameterizedType)superclass).getActualTypeArguments()[0]; } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\generic\internal\TypeParameter.java,TypeParameter,"protected  (){ Type type=capture(); checkArgument(type instanceof TypeVariable ""%s should be a type variable."" type); this.typeVariable=(TypeVariable<?>)type; } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\generic\internal\TypeParameter.java,equals,@Override @SuppressFBWarnings public final boolean  (@Nullable Object o){ if (o instanceof TypeParameter) { TypeParameter<?> that=(TypeParameter<?>)o; return typeVariable.equals(that.typeVariable); } return false; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\generic\internal\TypeParameter.java,hashCode,@Override public final int  (){ return typeVariable.hashCode(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\generic\internal\TypeParameter.java,toString,@Override public String  (){ return typeVariable.toString(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\generic\internal\TypeResolver.java,TypeResolver,private  (TypeTable typeTable){ this.typeTable=typeTable; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\generic\internal\TypeResolver.java,TypeTable,private  (Map<TypeVariableKey Type> map){ this.map=unmodifiableMap(new LinkedHashMap<>(map)); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\generic\internal\TypeResolver.java,TypeVariableKey," (TypeVariable<?> var){ this.var=checkNotNull(var ""var""); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\generic\internal\TypeResolver.java,accordingTo,static TypeResolver  (Type type){ return new TypeResolver().where(TypeMappingIntrospector.getTypeMappings(type)); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\generic\internal\TypeResolver.java,capture,private Type[]  (Type[] types){ Type[] result=new Type[types.length]; for (int i=0; i < types.length; i++) { result[i]=capture(types[i]); } return result; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\generic\internal\TypeResolver.java,captureNullable,private Type  (@Nullable Type type){ if (type == null) { return null; } return capture(type); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\generic\internal\TypeResolver.java,equals,@Override public boolean  (Object obj){ if (obj instanceof TypeVariableKey) { TypeVariableKey that=(TypeVariableKey)obj; return equalsTypeVariable(that.var); } else { return false; } } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\generic\internal\TypeResolver.java,equalsType,boolean  (Type type){ if (type instanceof TypeVariable) { return equalsTypeVariable((TypeVariable<?>)type); } else { return false; } } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\generic\internal\TypeResolver.java,equalsTypeVariable,private boolean  (TypeVariable<?> that){ return var.getGenericDeclaration().equals(that.getGenericDeclaration()) && var.getName().equals(that.getName()); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\generic\internal\TypeResolver.java,expectArgument,"private static <T>T  (Class<T> type Object arg){ try { return type.cast(arg); } catch ( ClassCastException e) { throw new IllegalArgumentException(arg + "" is not a "" + type.getSimpleName()); } } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\generic\internal\TypeResolver.java,forLookup,static TypeVariableKey  (Type t){ if (t instanceof TypeVariable) { return new TypeVariableKey((TypeVariable<?>)t); } else { return null; } } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\generic\internal\TypeResolver.java,getTypeMappings,static Map<TypeVariableKey Type>  (Type contextType){ TypeMappingIntrospector introspector=new TypeMappingIntrospector(); introspector.visit(wildcardCapturer.capture(contextType)); return unmodifiableMap(new LinkedHashMap<>(introspector.mappings)); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\generic\internal\TypeResolver.java,hashCode,@Override public int  (){ return Objects.hash(var.getGenericDeclaration() var.getName()); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\generic\internal\TypeResolver.java,map,private void  (final TypeVariableKey var final Type arg){ if (mappings.containsKey(var)) { return; } for (Type t=arg; t != null; t=mappings.get(TypeVariableKey.forLookup(t))) { if (var.equalsType(t)) { for (Type x=arg; x != null; x=mappings.remove(TypeVariableKey.forLookup(x))) { } return; } } mappings.put(var arg); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\generic\internal\TypeResolver.java,populateTypeMappings,"private static void  (final Map<TypeVariableKey Type> mappings Type from final Type to){ if (from.equals(to)) { return; } new TypeVisitor(){ @Override void visitTypeVariable( TypeVariable<?> typeVariable){ mappings.put(new TypeVariableKey(typeVariable) to); } @Override void visitWildcardType( WildcardType fromWildcardType){ if (!(to instanceof WildcardType)) { return; } WildcardType toWildcardType=(WildcardType)to; Type[] fromUpperBounds=fromWildcardType.getUpperBounds(); Type[] toUpperBounds=toWildcardType.getUpperBounds(); Type[] fromLowerBounds=fromWildcardType.getLowerBounds(); Type[] toLowerBounds=toWildcardType.getLowerBounds(); checkArgument(fromUpperBounds.length == toUpperBounds.length && fromLowerBounds.length == toLowerBounds.length ""Incompatible type: %s vs. %s"" fromWildcardType to); for (int i=0; i < fromUpperBounds.length; i++) { populateTypeMappings(mappings fromUpperBounds[i] toUpperBounds[i]); } for (int i=0; i < fromLowerBounds.length; i++) { populateTypeMappings(mappings fromLowerBounds[i] toLowerBounds[i]); } } @Override void visitParameterizedType( ParameterizedType fromParameterizedType){ if (to instanceof WildcardType) { return; } ParameterizedType toParameterizedType=expectArgument(ParameterizedType.class to); if (fromParameterizedType.getOwnerType() != null && toParameterizedType.getOwnerType() != null) { populateTypeMappings(mappings fromParameterizedType.getOwnerType() toParameterizedType.getOwnerType()); } checkArgument(fromParameterizedType.getRawType().equals(toParameterizedType.getRawType()) ""Inconsistent raw type: %s vs. %s"" fromParameterizedType to); Type[] fromArgs=fromParameterizedType.getActualTypeArguments(); Type[] toArgs=toParameterizedType.getActualTypeArguments(); checkArgument(fromArgs.length == toArgs.length ""%s not compatible with %s"" fromParameterizedType toParameterizedType); for (int i=0; i < fromArgs.length; i++) { populateTypeMappings(mappings fromArgs[i] toArgs[i]); } } @Override void visitGenericArrayType( GenericArrayType fromArrayType){ if (to instanceof WildcardType) { return; } Type componentType=Types.getComponentType(to); checkArgument(componentType != null ""%s is not an array type."" to); populateTypeMappings(mappings fromArrayType.getGenericComponentType() componentType); } @Override void visitClass( Class<?> fromClass){ if (to instanceof WildcardType) { return; } throw new IllegalArgumentException(""No type mapping from "" + fromClass + "" to ""+ to); } } .visit(from); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\generic\internal\TypeResolver.java,resolve,final Type  (final TypeVariable<?> var){ final TypeTable unguarded=this; TypeTable guarded=new TypeTable(){ @Override public Type resolveInternal( TypeVariable<?> intermediateVar  TypeTable forDependent){ if (intermediateVar.getGenericDeclaration().equals(var.getGenericDeclaration())) { return intermediateVar; } return unguarded.resolveInternal(intermediateVar forDependent); } } ; return resolveInternal(var guarded); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\generic\internal\TypeResolver.java,resolveGenericArrayType,private Type  (GenericArrayType type){ Type componentType=type.getGenericComponentType(); Type resolvedComponentType=resolveType(componentType); return Types.newArrayType(resolvedComponentType); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\generic\internal\TypeResolver.java,resolveInternal,Type  (TypeVariable<?> var TypeTable forDependants){ Type type=map.get(new TypeVariableKey(var)); if (type == null) { Type[] bounds=var.getBounds(); if (bounds.length == 0) { return var; } Type[] resolvedBounds=new TypeResolver(forDependants).resolveTypes(bounds); if (Types.NativeTypeVariableEquals.NATIVE_TYPE_VARIABLE_ONLY && Arrays.equals(bounds resolvedBounds)) { return var; } return Types.newArtificialTypeVariable(var.getGenericDeclaration() var.getName() resolvedBounds); } return new TypeResolver(forDependants).resolveType(type); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\generic\internal\TypeResolver.java,resolveParameterizedType,private ParameterizedType  (ParameterizedType type){ Type owner=type.getOwnerType(); Type resolvedOwner=(owner == null) ? null : resolveType(owner); Type resolvedRawType=resolveType(type.getRawType()); Type[] args=type.getActualTypeArguments(); Type[] resolvedArgs=resolveTypes(args); return Types.newParameterizedTypeWithOwner(resolvedOwner (Class<?>)resolvedRawType resolvedArgs); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\generic\internal\TypeResolver.java,resolveType,"public Type  (Type type){ checkNotNull(type ""type""); if (type instanceof TypeVariable) { return typeTable.resolve((TypeVariable<?>)type); } else if (type instanceof ParameterizedType) { return resolveParameterizedType((ParameterizedType)type); } else if (type instanceof GenericArrayType) { return resolveGenericArrayType((GenericArrayType)type); } else if (type instanceof WildcardType) { return resolveWildcardType((WildcardType)type); } else { return type; } } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\generic\internal\TypeResolver.java,resolveTypes,private Type[]  (Type[] types){ Type[] result=new Type[types.length]; for (int i=0; i < types.length; i++) { result[i]=resolveType(types[i]); } return result; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\generic\internal\TypeResolver.java,resolveWildcardType,private WildcardType  (WildcardType type){ Type[] lowerBounds=type.getLowerBounds(); Type[] upperBounds=type.getUpperBounds(); return new Types.WildcardTypeImpl(resolveTypes(lowerBounds) resolveTypes(upperBounds)); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\generic\internal\TypeResolver.java,toString,@Override public String  (){ return var.toString(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\generic\internal\TypeResolver.java,visitClass,@Override void  (Class<?> clazz){ visit(clazz.getGenericSuperclass()); visit(clazz.getGenericInterfaces()); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\generic\internal\TypeResolver.java,visitGenericArrayType,"@Override void  (GenericArrayType fromArrayType){ if (to instanceof WildcardType) { return; } Type componentType=Types.getComponentType(to); checkArgument(componentType != null ""%s is not an array type."" to); populateTypeMappings(mappings fromArrayType.ge"
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\generic\internal\TypeResolver.java,visitParameterizedType,@Override void  (ParameterizedType parameterizedType){ Class<?> rawClass=(Class<?>)parameterizedType.getRawType(); TypeVariable<?>[] vars=rawClass.getTypeParameters(); Type[] typeArgs=parameterizedType.getActualTypeArguments(); checkState(vars.length == t
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\generic\internal\TypeResolver.java,visitTypeVariable,@Override void  (TypeVariable<?> t){ visit(t.getBounds()); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\generic\internal\TypeResolver.java,visitWildcardType,@Override void  (WildcardType t){ visit(t.getUpperBounds()); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\generic\internal\TypeResolver.java,where,"final TypeTable  (Map<TypeVariableKey ? extends Type> mappings){ Map<TypeVariableKey Type> builder=new LinkedHashMap<>(); builder.putAll(map); for ( Map.Entry<TypeVariableKey ? extends Type> mapping : mappings.entrySet()) { TypeVariableKey variable=mapping.getKey(); Type type=mapping.getValue(); checkArgument(!variable.equalsType(type) ""Type variable %s bound to itself"" variable); builder.put(variable type); } return new TypeTable(builder); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\generic\internal\Types.java,GenericArrayTypeImpl, (Type componentType){ this.componentType=JavaVersion.CURRENT.usedInGenericType(componentType); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\generic\internal\Types.java,ParameterizedTypeImpl," (@Nullable Type ownerType Class<?> rawType Type[] typeArguments){ checkNotNull(rawType ""rawType""); checkArgument(typeArguments.length == rawType.getTypeParameters().length ""Expected %s type parameters but got %s"" rawType.getTypeParameters().length typeArguments.length); disallowPrimitiveType(typeArguments ""type parameter""); this.ownerType=ownerType; this.rawType=rawType; this.argumentsList=JavaVersion.CURRENT.usedInGenericType(typeArguments); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\generic\internal\Types.java,TypeVariableImpl," (D genericDeclaration String name Type[] bounds){ disallowPrimitiveType(bounds ""bound for type variable""); this.genericDeclaration=checkNotNull(genericDeclaration ""genericDeclaration""); this.name=checkNotNull(name ""name""); this.bounds=unmodifiableList(new ArrayList<>(Arrays.asList(bounds))); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\generic\internal\Types.java,TypeVariableInvocationHandler, (TypeVariableImpl<?> typeVariableImpl){ this.typeVariableImpl=typeVariableImpl; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\generic\internal\Types.java,WildcardTypeImpl," (Type[] lowerBounds Type[] upperBounds){ disallowPrimitiveType(lowerBounds ""lower bound for wildcard""); disallowPrimitiveType(upperBounds ""upper bound for wildcard""); this.lowerBounds=JavaVersion.CURRENT.usedInGenericType(lowerBounds); this.upperBounds=JavaVersion.CURRENT.usedInGenericType(upperBounds); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\generic\internal\Types.java,detectJvmBehavior,@SuppressFBWarnings private static ClassOwnership  (){ class LocalClass<T> { } Class<?> subclass=new LocalClass<String>(){ } .getClass(); ParameterizedType parameterizedType=(ParameterizedType)subclass.getGenericSuperclass(); for ( ClassOwnership behavior
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\generic\internal\Types.java,disallowPrimitiveType,"private static void  (Type[] types String usedAs){ for ( Type type : types) { if (type instanceof Class) { Class<?> cls=(Class<?>)type; checkArgument(!cls.isPrimitive() ""Primitive type '%s' used as %s"" cls usedAs); } } } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\generic\internal\Types.java,equals,@Override public boolean  (Object other){ if (!(other instanceof ParameterizedType)) { return false; } ParameterizedType that=(ParameterizedType)other; return getRawType().equals(that.getRawType()) && Objects.equals(getOwnerType() that.getOwnerType()) && 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\generic\internal\Types.java,filterUpperBounds,private static Iterable<Type>  (Collection<Type> bounds){ Predicate<Type> isObjectClass=Object.class::equals; return bounds.stream().filter(isObjectClass.negate()).collect(toList()); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\generic\internal\Types.java,getActualTypeArguments,@Override public Type[]  (){ return toArray(argumentsList); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\generic\internal\Types.java,getArrayClass,static Class<?>  (Class<?> componentType){ return Array.newInstance(componentType 0).getClass(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\generic\internal\Types.java,getBounds,public Type[]  (){ return toArray(bounds); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\generic\internal\Types.java,getComponentType,"@Nullable static Type  (Type type){ checkNotNull(type ""type""); final AtomicReference<Type> result=new AtomicReference<Type>(); new TypeVisitor(){ @Override void visitTypeVariable( TypeVariable<?> t){ result.set(subtypeOfComponentType(t.getBounds())); } @O"
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\generic\internal\Types.java,getGenericComponentType,@Override public Type  (){ return componentType; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\generic\internal\Types.java,getGenericDeclaration,public D  (){ return genericDeclaration; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\generic\internal\Types.java,getLowerBounds,@Override public Type[]  (){ return toArray(lowerBounds); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\generic\internal\Types.java,getName,public String  (){ return name; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\generic\internal\Types.java,getOwnerType,@Override public Type  (){ return ownerType; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\generic\internal\Types.java,getRawType,@Override public Type  (){ return rawType; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\generic\internal\Types.java,getTypeName,public String  (){ return name; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\generic\internal\Types.java,getUpperBounds,@Override public Type[]  (){ return toArray(upperBounds); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\generic\internal\Types.java,hashCode,@Override public int  (){ return (ownerType == null ? 0 : ownerType.hashCode()) ^ argumentsList.hashCode() ^ rawType.hashCode(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\generic\internal\Types.java,invoke,@Override public Object  (Object proxy Method method Object[] args) throws Throwable { String methodName=method.getName(); Method typeVariableMethod=typeVariableMethods.get(methodName); if (typeVariableMethod == null) { throw new UnsupportedOperationExcep
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\generic\internal\TypeVisitor.java,visit,"public final void  (Type... types){ for ( Type type : types) { if (type == null || !visited.add(type)) { continue; } boolean succeeded=false; try { if (type instanceof TypeVariable) { visitTypeVariable((TypeVariable<?>)type); } else if (type instanceof WildcardType) { visitWildcardType((WildcardType)type); } else if (type instanceof ParameterizedType) { visitParameterizedType((ParameterizedType)type); } else if (type instanceof Class) { visitClass((Class<?>)type); } else if (type instanceof GenericArrayType) { visitGenericArrayType((GenericArrayType)type); } else { throw new AssertionError(""Unknown type: "" + type); } succeeded=true; } finally { if (!succeeded) { visited.remove(type); } } } } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\generic\internal\TypeToken.java,SimpleTypeToken, (Type type){ super(type); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\generic\internal\TypeToken.java,TypeToken,"private  (Type type){ this.runtimeType=checkNotNull(type ""type""); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\generic\internal\TypeToken.java,getRawType,"public final Class<? super T>  (){ Class<?> rawType=getRawTypes().iterator().next(); @SuppressWarnings(""unchecked"") Class<? super T> result=(Class<? super T>)rawType; return result; } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\generic\internal\TypeToken.java,getRawTypes,"private Set<Class<? super T>>  (){ final Set<Class<?>> builder=new LinkedHashSet<>(); new TypeVisitor(){ @Override void visitTypeVariable( TypeVariable<?> t){ visit(t.getBounds()); } @Override void visitWildcardType( WildcardType t){ visit(t.getUpperBounds()); } @Override void visitParameterizedType( ParameterizedType t){ builder.add((Class<?>)t.getRawType()); } @Override void visitClass( Class<?> t){ builder.add(t); } @Override void visitGenericArrayType( GenericArrayType t){ builder.add(Types.getArrayClass(of(t.getGenericComponentType()).getRawType())); } } .visit(runtimeType); @SuppressWarnings({""unchecked"" ""rawtypes""}) Set<Class<? super T>> result=(Set)Collections.unmodifiableSet(builder); return result; } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\generic\internal\TypeToken.java,getType,public final Type  (){ return runtimeType; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\generic\internal\TypeToken.java,of,public static TypeToken<?>  (Type type){ return new SimpleTypeToken<>(type); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\generic\internal\TypeToken.java,resolveType,"public final TypeToken<?>  (Type type){ checkNotNull(type ""type""); TypeResolver resolver=typeResolver; if (resolver == null) { resolver=(typeResolver=TypeResolver.accordingTo(runtimeType)); } return of(resolver.resolveType(type)); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\generic\internal\TypeToken.java,visitClass,@Override void  (Class<?> t){ builder.add(t); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\generic\internal\TypeToken.java,visitGenericArrayType,@Override void  (GenericArrayType t){ builder.add(Types.getArrayClass(of(t.getGenericComponentType()).getRawType())); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\generic\internal\TypeToken.java,visitParameterizedType,@Override void  (ParameterizedType t){ builder.add((Class<?>)t.getRawType()); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\generic\internal\TypeToken.java,visitTypeVariable,@Override void  (TypeVariable<?> t){ visit(t.getBounds()); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\generic\internal\TypeToken.java,visitWildcardType,@Override void  (WildcardType t){ visit(t.getUpperBounds()); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\generic\internal\TypeToken.java,where,public final <X>TypeToken<T>  (TypeParameter<X> typeParam TypeToken<X> typeArg){ TypeResolver resolver=new TypeResolver().where(singletonMap(new TypeResolver.TypeVariableKey(typeParam.typeVariable) typeArg.runtimeType)); return new SimpleTypeToken<T>(resolver.resolveType(runtimeType)); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\Handle.java,Handle, (ConfigRegistry config TransactionHandler transactions StatementBuilder statementBuilder Connection connection){ this.transactions=transactions; this.connection=connection; this.config=ThreadLocal.withInitial(() -> config); this.extensionMethod=new ThreadLocal<>(); this.statementBuilder=statementBuilder; this.forceEndTransactions=!transactions.isInTransaction(this); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\Handle.java,TransactionResetter, (TransactionIsolationLevel initial){ this.initial=initial; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\Handle.java,attach,"public <T>T  (Class<T> extensionType){ return getConfig(Extensions.class).findFor(extensionType ConstantHandleSupplier.of(this)).orElseThrow(() -> new NoSuchExtensionException(""Extension not found: "" + extensionType)); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\Handle.java,begin,"public Handle  (){ transactions.begin(this); LOG.trace(""Handle [{}] begin transaction"" this); return this; } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\Handle.java,close,@Override public void  (){ setTransactionIsolation(initial); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\Handle.java,commit,"public Handle  (){ final long start=System.nanoTime(); transactions.commit(this); LOG.trace(""Handle [{}] commit transaction in {}ms"" this (System.nanoTime() - start) / 1000000L); return this; } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\Handle.java,createBatch,public Batch  (){ return new Batch(this); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\Handle.java,createCall,public Call  (String sql){ return new Call(this sql); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\Handle.java,createQuery,public Query  (String sql){ return new Query(this sql); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\Handle.java,createScript,public Script  (String sql){ return new Script(this sql); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\Handle.java,createUpdate,public Update  (String sql){ return new Update(this sql); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\Handle.java,execute,public int  (String sql Object... args){ Update stmt=createUpdate(sql); int position=0; for ( Object arg : args) { stmt.bind(position++ arg); } return stmt.execute(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\Handle.java,getConfig,@Override public ConfigRegistry  (){ return config.get(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\Handle.java,getConnection,public Connection  (){ return this.connection; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\Handle.java,getExtensionMethod,public ExtensionMethod  (){ return extensionMethod.get(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\Handle.java,getStatementBuilder,public StatementBuilder  (){ return statementBuilder; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\Handle.java,getTransactionIsolationLevel,"public TransactionIsolationLevel  (){ try { return TransactionIsolationLevel.valueOf(connection.getTransactionIsolation()); } catch ( SQLException e) { throw new UnableToManipulateTransactionIsolationLevelException(""unable to access current setting"" e); } } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\Handle.java,inTransaction,public <R X extends Exception>R  (TransactionIsolationLevel level HandleCallback<R X> callback) throws X { try (TransactionResetter tr=new TransactionResetter(getTransactionIsolationLevel())){ setTransactionIsolation(level); return transactions.inTransaction(this level callback); } } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\Handle.java,isClosed,public boolean  (){ return closed; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\Handle.java,isInTransaction,public boolean  (){ return transactions.isInTransaction(this); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\Handle.java,isReadOnly,"public boolean  (){ try { return connection.isReadOnly(); } catch ( SQLException e) { throw new UnableToManipulateTransactionIsolationLevelException(""Could not getReadOnly"" e); } } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\Handle.java,prepareBatch,public PreparedBatch  (String sql){ return new PreparedBatch(this sql); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\Handle.java,release,"public Handle  (String savepointName){ transactions.releaseSavepoint(this savepointName); LOG.trace(""Handle [{}] release savepoint \""{}\"""" this savepointName); return this; } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\Handle.java,rollback,"public Handle  (){ final long start=System.nanoTime(); transactions.rollback(this); LOG.trace(""Handle [{}] rollback transaction in {}ms"" this ((System.nanoTime() - start) / 1000000L)); return this; } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\Handle.java,rollbackToSavepoint,"public Handle  (String savepointName){ final long start=System.nanoTime(); transactions.rollbackToSavepoint(this savepointName); LOG.trace(""Handle [{}] rollback to savepoint \""{}\"" in {}ms"" this savepointName ((System.nanoTime() - start) / 1000000L)); return this; } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\Handle.java,savepoint,"public Handle  (String name){ transactions.savepoint(this name); LOG.trace(""Handle [{}] savepoint \""{}\"""" this name); return this; } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\Handle.java,select,public Query  (String sql Object... args){ Query query=this.createQuery(sql); int position=0; for ( Object arg : args) { query.bind(position++ arg); } return query; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\Handle.java,setConfig,void  (ConfigRegistry config){ this.config.set(config); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\Handle.java,setConfigThreadLocal,void  (ThreadLocal<ConfigRegistry> config){ this.config=config; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\Handle.java,setExtensionMethod,void  (ExtensionMethod extensionMethod){ this.extensionMethod.set(extensionMethod); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\Handle.java,setExtensionMethodThreadLocal,void  (ThreadLocal<ExtensionMethod> extensionMethod){ this.extensionMethod=requireNonNull(extensionMethod); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\Handle.java,setReadOnly,"public Handle  (boolean readOnly){ try { connection.setReadOnly(readOnly); } catch ( SQLException e) { throw new UnableToManipulateTransactionIsolationLevelException(""Could not setReadOnly"" e); } return this; } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\Handle.java,setStatementBuilder,public Handle  (StatementBuilder builder){ this.statementBuilder=builder; return this; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\Handle.java,setTransactionIsolation,public void  (int level){ try { if (connection.getTransactionIsolation() == level) { return; } connection.setTransactionIsolation(level); } catch ( SQLException e) { throw new UnableToManipulateTransactionIsolationLevelException(level e); } } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\Handle.java,useTransaction,public <X extends Exception>void  (TransactionIsolationLevel level HandleConsumer<X> callback) throws X { inTransaction(level handle -> { callback.useHandle(handle); return null; } ); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\extension\Extensions.java,Extensions,private  (Extensions that){ factories.addAll(that.factories); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\extension\Extensions.java,createCopy,@Override public Extensions  (){ return new Extensions(this); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\extension\Extensions.java,findFactory,public <F extends ExtensionFactory>Optional<F>  (Class<F> factoryType){ return factories.stream().filter(factoryType::isInstance).map(factoryType::cast).findFirst(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\extension\Extensions.java,findFactoryFor,private Optional<ExtensionFactory>  (Class<?> extensionType){ return factories.stream().filter(factory -> factory.accepts(extensionType)).findFirst(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\extension\Extensions.java,findFor,public <E>Optional<E>  (Class<E> extensionType HandleSupplier handle){ return findFactoryFor(extensionType).map(factory -> factory.attach(extensionType handle)); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\extension\Extensions.java,hasExtensionFor,public boolean  (Class<?> extensionType){ return findFactoryFor(extensionType).isPresent(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\extension\Extensions.java,register,public Extensions  (ExtensionFactory factory){ factories.add(0 factory); return this; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\h2\H2DatabasePlugin.java,customizeJdbi,"@Override public void  (Jdbi db){ db.setSqlArrayArgumentStrategy(SqlArrayArgumentStrategy.OBJECT_ARRAY); db.registerArrayType(UUID.class ""uuid""); db.registerArrayType(int.class ""integer""); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\internal\JdbiOptionals.java,findFirstPresent,@SafeVarargs public static <T>Optional<T>  (Supplier<Optional<T>>... suppliers){ return Stream.of(suppliers).flatMap(supplier -> toStream(supplier.get())).findFirst(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\Handles.java,Handles,private  (Handles that){ this.forceEndTransactions=that.forceEndTransactions; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\Handles.java,createCopy,@Override public Handles  (){ return new Handles(this); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\Handles.java,isForceEndTransactions,public boolean  (){ return forceEndTransactions; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\Handles.java,setForceEndTransactions,public void  (boolean forceEndTransactions){ this.forceEndTransactions=forceEndTransactions; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\internal\IterableLike.java,PrimitiveArrayIterator, (final Object obj){ size=Array.getLength(obj); arr=obj; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\internal\IterableLike.java,getTypeWarning,"private static String  (final Class<?> type){ return ""argument must be one of the following: Iterable  or an array/varargs (primitive or complex type); was "" + type.getName() + "" instead""; } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\internal\IterableLike.java,hasNext,@Override public boolean  (){ return index < size; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\internal\IterableLike.java,isEmpty,"public static boolean  (final Object obj){ if (obj == null) { throw new IllegalArgumentException(""cannot determine emptiness of null""); } if (obj instanceof Collection) { return ((Collection<?>)obj).isEmpty(); } if (obj instanceof Iterable) { return !((Iterable<?>)obj).iterator().hasNext(); } if (obj.getClass().isArray()) { return Array.getLength(obj) == 0; } throw new IllegalArgumentException(getTypeWarning(obj.getClass())); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\internal\IterableLike.java,isIterable,public static boolean  (Object maybeIterable){ return maybeIterable instanceof Iterator<?> || maybeIterable instanceof Iterable<?> || maybeIterable.getClass().isArray(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\internal\IterableLike.java,next,"@Override public Object  (){ if (hasNext()) { return Array.get(arr index++); } else { throw new NoSuchElementException(""only "" + size + "" elements available""); } } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\internal\IterableLike.java,of,"@SuppressWarnings(""unchecked"") public static Iterator<Object>  (Object iterable){ if (iterable == null) { throw new IllegalArgumentException(""can't iterate null""); } if (iterable instanceof Iterator<?>) { return (Iterator<Object>)iterable; } else if (iter"
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\internal\IterableLike.java,remove,@Override public void  (){ throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\internal\IterableLike.java,toList,public static List<Object>  (Object iterable){ List<Object> result=new ArrayList<Object>(); of(iterable).forEachRemaining(result::add); return result; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\internal\JdbiStreams.java,toStream,public static <T>Stream<T>  (Optional<T> optional){ return optional.isPresent() ? Stream.of(optional.get()) : Stream.empty(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\internal\JdbiThreadLocals.java,invokeInContext,public static <V L>V  (ThreadLocal<L> threadLocal L context Callable<V> task) throws Exception { L oldContext=threadLocal.get(); try { threadLocal.set(context); return task.call(); } finally { if (oldContext == null) { threadLocal.remove(); } else { threadLocal.set(oldContext); } } } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\internal\SqlScriptParser.java,SqlScriptParser,public  (TokenHandler semicolonHandler){ this.semicolonHandler=semicolonHandler; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\JdbiException.java,JdbiException,public  (String message){ super(message); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\Jdbi.java,Jdbi,"private  (ConnectionFactory connectionFactory){ Objects.requireNonNull(connectionFactory ""null connectionFactory""); this.connectionFactory=connectionFactory; } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\Jdbi.java,create,"public static Jdbi  (final String url final String username final String password){ Objects.requireNonNull(url ""null url""); Objects.requireNonNull(username ""null username""); Objects.requireNonNull(password ""null password""); return create(() -> DriverManager.getConnection(url username password)); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\Jdbi.java,getConfig,@Override public ConfigRegistry  (){ return config; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\Jdbi.java,getStatementBuilderFactory,public StatementBuilderFactory  (){ return this.statementBuilderFactory.get(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\Jdbi.java,getTransactionHandler,public TransactionHandler  (){ return this.transactionhandler.get(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\Jdbi.java,inTransaction,public <R X extends Exception>R  (final TransactionIsolationLevel level final HandleCallback<R X> callback) throws X { return withHandle(handle -> handle.<R X>inTransaction(level callback)); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\Jdbi.java,installPlugin,public Jdbi  (JdbiPlugin plugin){ plugin.customizeJdbi(this); plugins.add(plugin); return this; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\Jdbi.java,installPlugins,"public Jdbi  (){ ServiceLoader.load(JdbiPlugin.class).forEach(this::installPlugin); LOG.debug(""Automatically installed plugins {}"" plugins); return this; } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\Jdbi.java,onDemand,"public <E>E  (Class<E> extensionType) throws NoSuchExtensionException { if (!extensionType.isInterface()) { throw new IllegalArgumentException(""On-demand extensions are only supported for interfaces.""); } if (!getConfig(Extensions.class).hasExtensionFor(extensionType)) { throw new NoSuchExtensionException(""Extension not found: "" + extensionType); } return OnDemandExtensions.create(this extensionType); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\Jdbi.java,open,"public Handle  (){ try { final long start=System.nanoTime(); Connection conn=connectionFactory.openConnection(); final long stop=System.nanoTime(); for ( JdbiPlugin p : plugins) { conn=p.customizeConnection(conn); } StatementBuilder cache=statementBuilderFactory.get().createStatementBuilder(conn); Handle h=new Handle(config.createCopy() transactionhandler.get() cache conn); for ( JdbiPlugin p : plugins) { h=p.customizeHandle(h); } LOG.trace(""Jdbi [{}] obtain handle [{}] in {}ms"" this h (stop - start) / 1000000L); return h; } catch ( SQLException e) { throw new ConnectionException(e); } } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\Jdbi.java,setStatementBuilderFactory,public Jdbi  (StatementBuilderFactory factory){ this.statementBuilderFactory.set(factory); return this; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\Jdbi.java,setTransactionHandler,"public Jdbi  (TransactionHandler handler){ Objects.requireNonNull(handler ""null transaction handler""); this.transactionhandler.set(handler); return this; } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\Jdbi.java,useExtension,public <E X extends Exception>void  (Class<E> extensionType ExtensionConsumer<E X> callback) throws NoSuchExtensionException  X { withExtension(extensionType extension -> { callback.useExtension(extension); return null; } ); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\Jdbi.java,useHandle,public <X extends Exception>void  (final HandleConsumer<X> callback) throws X { withHandle(h -> { callback.useHandle(h); return null; } ); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\Jdbi.java,useTransaction,public <X extends Exception>void  (final TransactionIsolationLevel level final HandleConsumer<X> callback) throws X { useHandle(handle -> handle.useTransaction(level callback)); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\Jdbi.java,withExtension,"public <R E X extends Exception>R  (Class<E> extensionType ExtensionCallback<R E X> callback) throws NoSuchExtensionException  X { try (LazyHandleSupplier handle=new LazyHandleSupplier(this config)){ E extension=getConfig(Extensions.class).findFor(extensionType handle).orElseThrow(() -> new NoSuchExtensionException(""Extension not found: "" + extensionType)); return callback.withExtension(extension); } } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\Jdbi.java,withHandle,public <R X extends Exception>R  (HandleCallback<R X> callback) throws X { try (Handle h=this.open()){ return callback.withHandle(h); } } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\mapper\BuiltInMapperFactory.java,build,@Override public Optional<ColumnMapper<?>>  (Type type ConfigRegistry config){ Class<?> rawType=getErasedType(type); if (rawType.isEnum()) { return Optional.of(EnumMapper.byName(rawType.asSubclass(Enum.class))); } if (rawType == Optional.class) { return O
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\generic\internal\Reflection.java,newProxy,"public static <T>T  (Class<T> interfaceType InvocationHandler handler){ checkNotNull(handler ""handler""); checkArgument(interfaceType.isInterface() ""%s is not an interface"" interfaceType); Object object=Proxy.newProxyInstance(interfaceType.getClassLoader() new Class<?>[]{interfaceType} handler); return interfaceType.cast(object); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\locator\ClasspathSqlLocator.java,findSqlOnClasspath,public static String  (String name){ String path=resourcePathFor(name); return getResourceOnClasspath(selectClassLoader() path); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\locator\ClasspathSqlLocator.java,getResourceOnClasspath,public static String  (ClassLoader classLoader String path){ return CACHE.get(new AbstractMap.SimpleEntry<>(classLoader path)); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\locator\ClasspathSqlLocator.java,openStream,"private static InputStream  (ClassLoader classLoader String path){ InputStream is=classLoader.getResourceAsStream(path); if (is == null) { throw new IllegalArgumentException(""Cannot find classpath resource at "" + path); } return is; } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\locator\ClasspathSqlLocator.java,readResource,"private static String  (ClassLoader classLoader String path){ try (InputStream is=openStream(classLoader path)){ return SQL_SCRIPT_PARSER.parse(new ANTLRInputStream(is)); } catch ( IOException e) { throw new RuntimeException(""Unable to read classpath resource at "" + path e); } } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\locator\ClasspathSqlLocator.java,resourcePathFor,private static String  (String fullyQualifiedName){ return fullyQualifiedName.replace(PACKAGE_DELIMITER PATH_DELIMITER) + SQL_EXTENSION; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\locator\ClasspathSqlLocator.java,selectClassLoader,private static ClassLoader  (){ return Optional.ofNullable(Thread.currentThread().getContextClassLoader()).orElseGet(ClasspathSqlLocator.class::getClassLoader); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\mapper\ColumnMapper.java,map,default T  (ResultSet r String columnLabel StatementContext ctx) throws SQLException { return map(r r.findColumn(columnLabel) ctx); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\LazyHandleSupplier.java,LazyHandleSupplier, (Jdbi db ConfigRegistry config){ this.db=db; this.config=ThreadLocal.withInitial(() -> config); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\LazyHandleSupplier.java,close,@Override public synchronized void  (){ closed=true; if (handle != null) { handle.close(); } else { config.remove(); extensionMethod.remove(); } } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\LazyHandleSupplier.java,getConfig,@Override public ConfigRegistry  (){ return config.get(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\LazyHandleSupplier.java,getHandle,@Override public Handle  (){ if (handle == null) { initHandle(); } return handle; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\LazyHandleSupplier.java,initHandle,"private synchronized void  (){ if (handle == null) { if (closed) { throw new IllegalStateException(""Handle is closed""); } Handle handle=db.open(); handle.setExtensionMethodThreadLocal(extensionMethod); handle.setConfigThreadLocal(config); this.handle=handle; } } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\LazyHandleSupplier.java,invokeInContext,@Override public <V>V  (ExtensionMethod extensionMethod ConfigRegistry config Callable<V> task) throws Exception { return JdbiThreadLocals.invokeInContext(this.extensionMethod extensionMethod () -> JdbiThreadLocals.invokeInContext(this.config config task)
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\mapper\ColumnMappers.java,ColumnMappers,private  (ColumnMappers that){ factories.addAll(that.factories); cache.putAll(that.cache); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\mapper\ColumnMappers.java,createCopy,@Override public ColumnMappers  (){ return new ColumnMappers(this); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\mapper\ColumnMappers.java,findFor,public Optional<ColumnMapper<?>>  (Type type){ ColumnMapper<?> cached=cache.get(type); if (cached != null) { return Optional.of(cached); } Optional<ColumnMapper<?>> mapper=factories.stream().flatMap(factory -> toStream(factory.build(type registry))).findFirst(); mapper.ifPresent(m -> cache.put(type m)); return mapper; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\mapper\EnumByOrdinalMapperFactory.java,build,"@SuppressWarnings({""unchecked"" ""rawtypes""}) @Override public Optional<ColumnMapper<?>>  (Type type ConfigRegistry config){ Class<?> clazz=getErasedType(type); return clazz.isEnum() ? Optional.of(EnumMapper.byOrdinal((Class<? extends Enum>)clazz)) : Option"
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\mapper\ColumnMappers.java,register,public ColumnMappers  (ColumnMapperFactory factory){ factories.add(0 factory); cache.clear(); return this; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\mapper\ColumnMappers.java,setRegistry,@Override public void  (ConfigRegistry registry){ this.registry=registry; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\mapper\EnumMapper.java,ByName,private  (Class<E> type){ this.type=type; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\mapper\EnumMapper.java,ByOrdinal,private  (Class<E> type){ this.constants=type.getEnumConstants(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\mapper\EnumMapper.java,byName,public static <E extends Enum<E>>ColumnMapper<E>  (Class<E> type){ return new ByName<>(type); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\mapper\EnumMapper.java,byOrdinal,public static <E extends Enum<E>>ColumnMapper<E>  (Class<E> type){ return new ByOrdinal<>(type); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\mapper\EnumMapper.java,map,@Override public E  (ResultSet r int columnNumber StatementContext ctx) throws SQLException { int ordinal=r.getInt(columnNumber); return r.wasNull() ? null : constants[ordinal]; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\mapper\EnumMapper.java,resolve,private E  (String name){ final IllegalArgumentException failure; try { return Enum.valueOf(type name); } catch ( IllegalArgumentException e) { failure=e; } for ( E e : type.getEnumConstants()) { if (e.name().equalsIgnoreCase(name)) { return e; } } throw failure; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\mapper\EnumByNameMapperFactory.java,build,"@SuppressWarnings({""unchecked"" ""rawtypes""}) @Override public Optional<ColumnMapper<?>>  (Type type ConfigRegistry config){ Class<?> clazz=getErasedType(type); return clazz.isEnum() ? Optional.of(EnumMapper.byName((Class<? extends Enum>)clazz)) : Optional."
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\mapper\JoinRow.java,JoinRow, (Map<Type Object> entries){ this.entries=entries; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\mapper\JoinRow.java,get,"public Object  (Type type){ Object result=entries.get(type); if (result == null && !entries.containsKey(type)) { throw new IllegalArgumentException(""no result stored for "" + type); } return result; } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\mapper\JoinRowMapper.java,JoinRowMapper,private  (Type[] types){ this.types=types; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\mapper\JoinRowMapper.java,forTypes,public static JoinRowMapper  (Type... classes){ return new JoinRowMapper(classes); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\mapper\JoinRowMapper.java,map,@Override public JoinRow  (ResultSet r StatementContext ctx) throws SQLException { return specialize(r ctx).map(r ctx); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\mapper\JoinRowMapper.java,specialize,@Override public RowMapper<JoinRow>  (ResultSet r StatementContext ctx) throws SQLException { RowMapper<?>[] mappers=new RowMapper[types.length]; for (int i=0; i < types.length; i++) { Type type=types[i]; mappers[i]=ctx.findRowMapperFor(type).orElseThrow(
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\mapper\InferredRowMapperFactory.java,InferredRowMapperFactory," (RowMapper<?> mapper){ this.maps=findGenericParameter(mapper.getClass() RowMapper.class).orElseThrow(() -> new UnsupportedOperationException(""Must use a concretely typed RowMapper here"")); this.mapper=mapper; } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\mapper\InferredRowMapperFactory.java,build,@Override public Optional<RowMapper<?>>  (Type type ConfigRegistry config){ return maps.equals(type) ? Optional.of(mapper) : Optional.empty(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\mapper\InferredColumnMapperFactory.java,InferredColumnMapperFactory," (ColumnMapper<?> mapper){ this.maps=findGenericParameter(mapper.getClass() ColumnMapper.class).orElseThrow(() -> new UnsupportedOperationException(""Must use a concretely typed ColumnMapper here"")); this.mapper=mapper; } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\mapper\InferredColumnMapperFactory.java,build,@Override public Optional<ColumnMapper<?>>  (Type type ConfigRegistry config){ return maps.equals(type) ? Optional.of(mapper) : Optional.empty(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\mapper\MapEntryMappers.java,MapEntryMappers,private  (MapEntryMappers that){ this.keyColumn=that.keyColumn; this.valueColumn=that.valueColumn; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\mapper\MapEntryMappers.java,createCopy,@Override public MapEntryMappers  (){ return new MapEntryMappers(this); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\mapper\MapEntryMappers.java,getKeyColumn,@Override public String  (){ return keyColumn; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\mapper\MapEntryMappers.java,getValueColumn,@Override public String  (){ return valueColumn; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\mapper\MapEntryMapper.java,MapEntryMapper,private  (RowMapper<K> keyMapper RowMapper<V> valueMapper){ this.keyMapper=keyMapper; this.valueMapper=valueMapper; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\mapper\MapEntryMapper.java,factory,"@SuppressWarnings(""unchecked"") static RowMapperFactory  (){ return (type config) -> { if (type instanceof ParameterizedType && getErasedType(type).equals(Map.Entry.class)) { Type keyType=resolveType(KEY_PARAM type); Type valueType=resolveType(VALUE_PARAM "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\mapper\MapEntryMapper.java,getKeyMapper,"private static RowMapper<?>  (Type keyType ConfigRegistry config){ String column=config.get(MapEntryMappers.class).getKeyColumn(); if (column == null) { return config.get(RowMappers.class).findFor(keyType).orElseThrow(() -> new NoSuchMapperException(""No row mapper registered for map key "" + keyType)); } else { return config.get(ColumnMappers.class).findFor(keyType).map(mapper -> new SingleColumnMapper<>(mapper column)).orElseThrow(() -> new NoSuchMapperException(""No column mapper registered for map key "" + keyType + "" in column ""+ column)); } } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\mapper\MapEntryMapper.java,getValueMapper,"private static RowMapper<?>  (Type valueType ConfigRegistry config){ String column=config.get(MapEntryMappers.class).getValueColumn(); if (column == null) { return config.get(RowMappers.class).findFor(valueType).orElseThrow(() -> new NoSuchMapperException(""No row mapper registered for map value "" + valueType)); } else { return config.get(ColumnMappers.class).findFor(valueType).map(mapper -> new SingleColumnMapper<>(mapper column)).orElseThrow(() -> new NoSuchMapperException(""No column mapper registered for map value "" + valueType + "" in column ""+ column)); } } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\mapper\MapEntryMapper.java,map,@Override public Map.Entry<K V>  (ResultSet rs StatementContext ctx) throws SQLException { return new AbstractMap.SimpleImmutableEntry<>(keyMapper.map(rs ctx) valueMapper.map(rs ctx)); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\mapper\MapEntryMapper.java,specialize,@Override public RowMapper<Map.Entry<K V>>  (ResultSet rs StatementContext ctx) throws SQLException { return new MapEntryMapper<>(keyMapper.specialize(rs ctx) valueMapper.specialize(rs ctx)); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\mapper\MapEntryMappers.java,setKeyColumn,@Override public MapEntryMappers  (String keyColumn){ this.keyColumn=keyColumn; return this; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\mapper\MapEntryMappers.java,setValueColumn,@Override public MapEntryMappers  (String valueColumn){ this.valueColumn=valueColumn; return this; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\mapper\MapMapper.java,MapMapper,public  (boolean foldCase){ this.foldCase=foldCase; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\mapper\MapMapper.java,map,@Override public Map<String Object>  (ResultSet rs StatementContext ctx) throws SQLException { return specialize(rs ctx).map(rs ctx); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\mapper\MapMapper.java,specialize,@Override public RowMapper<Map<String Object>>  (ResultSet rs StatementContext ctx) throws SQLException { ResultSetMetaData m=rs.getMetaData(); int columnCount=m.getColumnCount(); String[] columnNames=new String[columnCount + 1]; for (int i=1; i <= column
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\mapper\MappingException.java,MappingException,public  (String message){ super(message); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\mapper\Mappers.java,createCopy,@Override public Mappers  (){ return new Mappers(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\mapper\Mappers.java,findFor,public Optional<RowMapper<?>>  (Type type){ return findFirstPresent(() -> rowMappers.findFor(type) () -> columnMappers.findFor(type).map(SingleColumnMapper::new)); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\mapper\Mappers.java,setRegistry,@Override public void  (ConfigRegistry registry){ this.rowMappers=registry.get(RowMappers.class); this.columnMappers=registry.get(ColumnMappers.class); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\mapper\NoSuchMapperException.java,NoSuchMapperException,public  (String message){ super(message); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\mapper\OptionalMapper.java,OptionalMapper,private  (Type type){ this.type=type; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\mapper\OptionalMapper.java,map,"@SuppressWarnings(""unchecked"") @Override public Optional<T>  (ResultSet r int columnNumber StatementContext ctx) throws SQLException { final ColumnMapper<?> mapper=ctx.findColumnMapperFor(GenericTypes.findGenericParameter(type Optional.class).orElseThrow("
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\mapper\OptionalMapper.java,of,public static ColumnMapper<?>  (Type type){ return new OptionalMapper<>(type); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\mapper\reflect\CaseInsensitiveColumnNameMatcher.java,columnNameMatches,@Override public boolean  (String columnName String javaName){ return columnName.equalsIgnoreCase(javaName); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\mapper\reflect\CaseInsensitiveColumnNameMatcher.java,toString,@Override public String  (){ return getClass().getSimpleName(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\mapper\reflect\BeanMapper.java,BeanMapper,private  (Class<T> type String prefix){ this.type=type; this.prefix=prefix.toLowerCase(); try { info=Introspector.getBeanInfo(type); } catch ( IntrospectionException e) { throw new IllegalArgumentException(e); } } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\mapper\reflect\BeanMapper.java,construct,"private T  (){ try { return type.newInstance(); } catch ( Exception e) { throw new IllegalArgumentException(String.format(""A bean  %s  was mapped "" + ""which was not instantiable"" type.getName()) e); } } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\mapper\reflect\BeanMapper.java,debugName,"private String  (PropertyDescriptor descriptor){ return String.format(""%s.%s"" type.getSimpleName() descriptor.getName()); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\mapper\reflect\BeanMapper.java,factory,public static RowMapperFactory  (Class<?> type String prefix){ return RowMapperFactory.of(type BeanMapper.of(type prefix)); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\mapper\reflect\BeanMapper.java,map,@Override public T  (ResultSet rs StatementContext ctx) throws SQLException { return specialize(rs ctx).map(rs ctx); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\mapper\reflect\BeanMapper.java,of,public static <T>RowMapper<T>  (Class<T> type String prefix){ return new BeanMapper<>(type prefix); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\mapper\reflect\BeanMapper.java,paramName,private static String  (PropertyDescriptor descriptor){ return Stream.of(descriptor.getReadMethod() descriptor.getWriteMethod()).filter(Objects::nonNull).map(method -> method.getAnnotation(ColumnName.class)).filter(Objects::nonNull).map(ColumnName::value).findFirst().orElseGet(descriptor::getName); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\mapper\reflect\BeanMapper.java,specialize,@Override public RowMapper<T>  (ResultSet rs StatementContext ctx) throws SQLException { final List<String> columnNames=getColumnNames(rs); final List<ColumnNameMatcher> columnNameMatchers=ctx.getConfig(ReflectionMappers.class).getColumnNameMatchers(); fi
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\mapper\reflect\BeanMapper.java,specialize0,"private RowMapper<T>  (ResultSet rs StatementContext ctx List<String> columnNames List<ColumnNameMatcher> columnNameMatchers List<String> unmatchedColumns) throws SQLException { final List<RowMapper<?>> mappers=new ArrayList<>(); final List<PropertyDescriptor> properties=new ArrayList<>(); for ( PropertyDescriptor descriptor : info.getPropertyDescriptors()) { Nested anno=Stream.of(descriptor.getReadMethod() descriptor.getWriteMethod()).filter(Objects::nonNull).map(m -> m.getAnnotation(Nested.class)).filter(Objects::nonNull).findFirst().orElse(null); if (anno == null) { String paramName=prefix + paramName(descriptor); findColumnIndex(paramName columnNames columnNameMatchers () -> debugName(descriptor)).ifPresent(index -> { Type type=descriptor.getReadMethod().getGenericReturnType(); ColumnMapper<?> mapper=ctx.findColumnMapperFor(type).orElse((r n c) -> r.getObject(n)); mappers.add(new SingleColumnMapper<>(mapper index + 1)); properties.add(descriptor); unmatchedColumns.remove(columnNames.get(index)); } ); } else { String nestedPrefix=prefix + anno.value(); RowMapper<?> nestedMapper=nestedMappers.computeIfAbsent(descriptor d -> new BeanMapper<>(d.getPropertyType() nestedPrefix)).specialize0(rs ctx columnNames columnNameMatchers unmatchedColumns); mappers.add(nestedMapper); properties.add(descriptor); } } if (mappers.isEmpty() && columnNames.size() > 0) { throw new IllegalArgumentException(String.format(""Mapping bean type %s "" + ""didn't find any matching columns in result set"" type)); } return (r c) -> { T bean=construct(); for (int i=0; i < mappers.size(); i++) { RowMapper<?> mapper=mappers.get(i); PropertyDescriptor property=properties.get(i); Object value=mapper.map(r ctx); writeProperty(bean property value); } return bean; } ; } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\mapper\reflect\BeanMapper.java,writeProperty,"private static void  (Object bean PropertyDescriptor property Object value){ try { property.getWriteMethod().invoke(bean value); } catch ( IllegalAccessException e) { throw new IllegalArgumentException(String.format(""Unable to access setter for "" + ""property  %s"" property.getName()) e); } catch ( InvocationTargetException e) { throw new IllegalArgumentException(String.format(""Invocation target exception trying to "" + ""invoker setter for the %s property"" property.getName()) e); } catch ( NullPointerException e) { throw new IllegalArgumentException(String.format(""No appropriate method to "" + ""write property %s"" property.getName()) e); } } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\mapper\reflect\FieldMapper.java,FieldMapper,private  (Class<T> type String prefix){ this.type=type; this.prefix=prefix.toLowerCase(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\mapper\reflect\FieldMapper.java,construct,"private T  (){ try { return type.newInstance(); } catch ( Exception e) { String message=String.format(""A type  %s  was mapped which was not instantiable"" type.getName()); throw new IllegalArgumentException(message e); } } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\mapper\reflect\FieldMapper.java,debugName,"private String  (Field field){ return String.format(""%s.%s"" type.getSimpleName() field.getName()); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\mapper\reflect\FieldMapper.java,factory,public static RowMapperFactory  (Class<?> type String prefix){ return RowMapperFactory.of(type FieldMapper.of(type prefix)); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\mapper\reflect\FieldMapper.java,map,@Override public T  (ResultSet rs StatementContext ctx) throws SQLException { return specialize(rs ctx).map(rs ctx); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\mapper\reflect\FieldMapper.java,of,public static <T>RowMapper<T>  (Class<T> type String prefix){ return new FieldMapper<>(type prefix); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\mapper\reflect\FieldMapper.java,paramName,private static String  (Field field){ return Optional.ofNullable(field.getAnnotation(ColumnName.class)).map(ColumnName::value).orElseGet(field::getName); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\mapper\reflect\FieldMapper.java,specialize,@Override public RowMapper<T>  (ResultSet rs StatementContext ctx) throws SQLException { final List<String> columnNames=getColumnNames(rs); final List<ColumnNameMatcher> columnNameMatchers=ctx.getConfig(ReflectionMappers.class).getColumnNameMatchers(); fi
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\mapper\reflect\FieldMapper.java,specialize0,"private RowMapper<T>  (ResultSet rs StatementContext ctx List<String> columnNames List<ColumnNameMatcher> columnNameMatchers List<String> unmatchedColumns) throws SQLException { final List<RowMapper<?>> mappers=new ArrayList<>(); final List<Field> fields=new ArrayList<>(); for (Class<?> aType=type; aType != null; aType=aType.getSuperclass()) { for ( Field field : aType.getDeclaredFields()) { Nested anno=field.getAnnotation(Nested.class); if (anno == null) { String paramName=prefix + paramName(field); findColumnIndex(paramName columnNames columnNameMatchers () -> debugName(field)).ifPresent(index -> { Type type=field.getGenericType(); ColumnMapper<?> mapper=ctx.findColumnMapperFor(type).orElse((r n c) -> rs.getObject(n)); mappers.add(new SingleColumnMapper(mapper index + 1)); fields.add(field); unmatchedColumns.remove(columnNames.get(index)); } ); } else { String nestedPrefix=prefix + anno.value().toLowerCase(); RowMapper<?> mapper=nestedMappers.computeIfAbsent(field f -> new FieldMapper<>(field.getType() nestedPrefix)).specialize0(rs ctx columnNames columnNameMatchers unmatchedColumns); mappers.add(mapper); fields.add(field); } } } if (mappers.isEmpty() && columnNames.size() > 0) { throw new IllegalArgumentException(String.format(""Mapping fields for type %s "" + ""didn't find any matching columns in result set"" type)); } return (r c) -> { T obj=construct(); for (int i=0; i < mappers.size(); i++) { RowMapper<?> mapper=mappers.get(i); Field field=fields.get(i); Object value=mapper.map(rs ctx); writeField(obj field value); } return obj; } ; } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\mapper\reflect\FieldMapper.java,writeField,"private void  (T obj Field field Object value){ try { field.setAccessible(true); field.set(obj value); } catch ( IllegalAccessException e) { throw new IllegalArgumentException(String.format(""Unable to access "" + ""property  %s"" field.getName()) e); } } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\mapper\reflect\ConstructorMapper.java,ConstructorMapper,private  (Constructor<T> constructor String prefix){ this.constructor=constructor; this.prefix=prefix.toLowerCase(); this.constructorProperties=constructor.getAnnotation(ConstructorProperties.class); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\mapper\reflect\ConstructorMapper.java,construct,private T  (Object[] params){ try { return constructor.newInstance(params); } catch ( InstantiationException|IllegalAccessException|InvocationTargetException e) { if (e.getCause() instanceof RuntimeException) { throw (RuntimeException)e.getCause(); } if (e.getCause() instanceof Error) { throw (Error)e.getCause(); } throw new RuntimeException(e); } } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\mapper\reflect\ConstructorMapper.java,debugName,"private String  (Parameter parameter){ return String.format(""%s constructor parameter %s"" constructor.getDeclaringClass().getSimpleName() parameter.getName()); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\mapper\reflect\ConstructorMapper.java,factory,public static RowMapperFactory  (Constructor<?> constructor String prefix){ return RowMapperFactory.of(constructor.getDeclaringClass() ConstructorMapper.of(constructor prefix)); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\mapper\reflect\ConstructorMapper.java,map,@Override public T  (ResultSet rs StatementContext ctx) throws SQLException { return specialize(rs ctx).map(rs ctx); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\mapper\reflect\ConstructorMapper.java,of,public static <T>RowMapper<T>  (Constructor<T> constructor String prefix){ return new ConstructorMapper<>(constructor prefix); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\mapper\reflect\ConstructorMapper.java,paramName,private static String  (Parameter[] parameters int position ConstructorProperties parameterNames){ final Parameter parameter=parameters[position]; ColumnName dbName=parameter.getAnnotation(ColumnName.class); if (dbName != null) { return dbName.value(); } if (parameterNames != null) { return parameterNames.value()[position]; } return parameter.getName(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\mapper\reflect\ConstructorMapper.java,specialize,@Override public RowMapper<T>  (ResultSet rs StatementContext ctx) throws SQLException { final List<String> columnNames=getColumnNames(rs); final List<ColumnNameMatcher> columnNameMatchers=ctx.getConfig(ReflectionMappers.class).getColumnNameMatchers(); fi
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\mapper\reflect\ConstructorMapper.java,specialize0,"private RowMapper<T>  (ResultSet rs StatementContext ctx List<String> columnNames List<ColumnNameMatcher> columnNameMatchers List<String> unmatchedColumns) throws SQLException { final int count=constructor.getParameterCount(); final Parameter[] parameters=constructor.getParameters(); final RowMapper<?>[] mappers=new RowMapper<?>[count]; for (int i=0; i < count; i++) { final Parameter parameter=parameters[i]; Nested anno=parameter.getAnnotation(Nested.class); if (anno == null) { final String paramName=prefix + paramName(parameters i constructorProperties); final int columnIndex=findColumnIndex(paramName columnNames columnNameMatchers () -> debugName(parameter)).orElseThrow(() -> new IllegalArgumentException(String.format(""Constructor '%s' parameter '%s' has no column in the result set. "" + ""Verify that the Java compiler is configured to emit parameter names  "" + ""that your result set has the columns expected  or annotate the ""+ ""parameter names explicitly with @ColumnName"" constructor paramName))); final Type type=parameter.getParameterizedType(); mappers[i]=ctx.findColumnMapperFor(type).map(mapper -> new SingleColumnMapper(mapper columnIndex + 1)).orElseThrow(() -> new IllegalArgumentException(String.format(""Could not find column mapper for type '%s' of parameter '%s' for constructor '%s'"" type paramName constructor))); unmatchedColumns.remove(columnNames.get(columnIndex)); } else { String nestedPrefix=prefix + anno.value(); mappers[i]=nestedMappers.computeIfAbsent(parameter p -> new ConstructorMapper<>(findConstructorFor(p.getType()) nestedPrefix)).specialize0(rs ctx columnNames columnNameMatchers unmatchedColumns); } } return (r c) -> { final Object[] params=new Object[count]; for (int i=0; i < count; i++) { params[i]=mappers[i].map(r c); } return construct(params); } ; } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\mapper\reflect\SnakeCaseColumnNameMatcher.java,columnNameMatches,"@Override public boolean  (String columnName String javaName){ return columnName.replace(""_"" """").equalsIgnoreCase(javaName.replace(""_"" """")); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\mapper\reflect\ReflectionMappers.java,ReflectionMappers,private  (ReflectionMappers that){ columnNameMatchers=new ArrayList<>(that.columnNameMatchers); strictMatching=that.strictMatching; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\mapper\reflect\SnakeCaseColumnNameMatcher.java,toString,@Override public String  (){ return getClass().getSimpleName(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\mapper\reflect\ReflectionMappers.java,createCopy,@Override public ReflectionMappers  (){ return new ReflectionMappers(this); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\mapper\reflect\ReflectionMappers.java,getColumnNameMatchers,public List<ColumnNameMatcher>  (){ return Collections.unmodifiableList(columnNameMatchers); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\mapper\reflect\ReflectionMappers.java,isStrictMatching,public boolean  (){ return this.strictMatching; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\mapper\reflect\ReflectionMappers.java,setColumnNameMatchers,public ReflectionMappers  (List<ColumnNameMatcher> columnNameMatchers){ this.columnNameMatchers=new ArrayList<>(columnNameMatchers); return this; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\mapper\reflect\ReflectionMappers.java,setStrictMatching,public ReflectionMappers  (boolean strictMatching){ this.strictMatching=strictMatching; return this; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\mapper\reflect\ReflectionMapperUtil.java,findColumnIndex,"public static OptionalInt  (String paramName List<String> columnNames List<ColumnNameMatcher> columnNameMatchers Supplier<String> debugName){ OptionalInt result=OptionalInt.empty(); for (int i=0; i < columnNames.size(); i++) { String columnName=columnNames.get(i); for ( ColumnNameMatcher strategy : columnNameMatchers) { if (strategy.columnNameMatches(columnName paramName)) { if (result.isPresent()) { throw new IllegalArgumentException(String.format(""'%s' (%s) matches multiple columns: '%s' (%d) and '%s' (%d)"" debugName.get() paramName columnNames.get(result.getAsInt()) result.getAsInt() columnNames.get(i) i)); } result=OptionalInt.of(i); break; } } } return result; } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\mapper\reflect\ReflectionMapperUtil.java,getColumnNames,public static List<String>  (ResultSet rs) throws SQLException { final ResultSetMetaData metadata=rs.getMetaData(); final int count=metadata.getColumnCount(); final List<String> columnNames=new ArrayList<>(count); for (int i=0; i < count; ++i) { columnNames.add(metadata.getColumnLabel(i + 1).toLowerCase()); } return columnNames; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\mapper\reflect\JdbiConstructors.java,findConstructorFor,"public static <T>Constructor<T>  (Class<T> type){ @SuppressWarnings(""unchecked"") final Constructor<T>[] constructors=(Constructor<T>[])type.getDeclaredConstructors(); List<Constructor<T>> annotatedConstructors=Stream.of(constructors).filter(c -> c.isAnnotationPresent(JdbiConstructor.class)).collect(Collectors.toList()); if (annotatedConstructors.size() > 1) { throw new IllegalArgumentException(type + "" must have at most one constructor annotated @JdbiConstructor""); } else if (annotatedConstructors.size() == 1) { return annotatedConstructors.get(0); } annotatedConstructors=Stream.of(constructors).filter(c -> c.isAnnotationPresent(ConstructorProperties.class)).collect(Collectors.toList()); if (annotatedConstructors.size() > 1) { throw new IllegalArgumentException(type + "" must have at most one constructor annotated @ConstructorProperties""); } else if (annotatedConstructors.size() == 1) { return annotatedConstructors.get(0); } if (constructors.length != 1) { throw new IllegalArgumentException(type + "" must have exactly one constructor  or specify it with @JdbiConstructor or @ConstructorProperties""); } return constructors[0]; } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\mapper\RowMappers.java,RowMappers,private  (RowMappers that){ factories.addAll(that.factories); cache.putAll(that.cache); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\mapper\RowMappers.java,createCopy,@Override public RowMappers  (){ return new RowMappers(this); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\mapper\RowMappers.java,findFor,public Optional<RowMapper<?>>  (Type type){ RowMapper<?> cached=cache.get(type); if (cached != null) { return Optional.of(cached); } Optional<RowMapper<?>> mapper=factories.stream().flatMap(factory -> toStream(factory.build(type registry))).findFirst(); mapper.ifPresent(m -> cache.put(type m)); return mapper; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\mapper\RowMappers.java,register,public RowMappers  (RowMapperFactory factory){ factories.add(0 factory); cache.clear(); return this; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\mapper\RowMappers.java,setRegistry,@Override public void  (ConfigRegistry registry){ this.registry=registry; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\OnDemandExtensions.java,create,"static <E>E  (Jdbi db Class<E> extensionType){ ThreadLocal<E> threadExtension=new ThreadLocal<>(); InvocationHandler handler=(proxy method args) -> { if (EQUALS_METHOD.equals(method)) { return proxy == args[0]; } if (HASHCODE_METHOD.equals(method)) { return System.identityHashCode(proxy); } if (TOSTRING_METHOD.equals(method)) { return extensionType + ""@"" + Integer.toHexString(System.identityHashCode(proxy)); } if (threadExtension.get() != null) { return invoke(threadExtension.get() method args); } return db.withExtension(extensionType extension -> JdbiThreadLocals.invokeInContext(threadExtension extension () -> invoke(extension method args))); } ; return extensionType.cast(Proxy.newProxyInstance(extensionType.getClassLoader() new Class[]{extensionType} handler)); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\OnDemandExtensions.java,invoke,private static Object  (Object target Method method Object[] args){ try { if (Proxy.isProxyClass(target.getClass())) { return Proxy.getInvocationHandler(target).invoke(target method args); } return MethodHandles.lookup().unreflect(method).bindTo(target).invokeWithArguments(args); } catch ( RuntimeException|Error e) { throw e; } catch ( Throwable t) { throw new RuntimeException(t); } } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\mapper\SingleColumnMapper.java,SingleColumnMapper,public  (ColumnMapper<T> mapper String columnLabel){ this.delegate=(r ctx) -> mapper.map(r columnLabel ctx); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\mapper\SingleColumnMapper.java,map,@Override public T  (ResultSet r StatementContext ctx) throws SQLException { return delegate.map(r ctx); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\LinkedHashMapRowReducer.java,container,@Override default Map<K V>  (){ return new LinkedHashMap<>(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\LinkedHashMapRowReducer.java,stream,@Override default Stream<V>  (Map<K V> container){ return container.values().stream(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\NoResultsException.java,NoResultsException,public  (String msg StatementContext ctx){ super(msg ctx); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\EmptyResultSet.java,absolute,@Override public boolean  (int row) throws SQLException { throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\EmptyResultSet.java,cancelRowUpdates,@Override public void  () throws SQLException { throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\EmptyResultSet.java,clearWarnings,@Override public void  () throws SQLException { throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\EmptyResultSet.java,deleteRow,@Override public void  () throws SQLException { throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\EmptyResultSet.java,findColumn,@Override public int  (String columnLabel) throws SQLException { throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\EmptyResultSet.java,first,@Override public boolean  () throws SQLException { return false; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\EmptyResultSet.java,getArray,@Override public Array  (String columnLabel) throws SQLException { throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\EmptyResultSet.java,getAsciiStream,@Override public InputStream  (String columnLabel) throws SQLException { throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\EmptyResultSet.java,getBigDecimal,@Override public BigDecimal  (String columnLabel) throws SQLException { throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\EmptyResultSet.java,getBinaryStream,@Override public InputStream  (String columnLabel) throws SQLException { throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\EmptyResultSet.java,getBlob,@Override public Blob  (String columnLabel) throws SQLException { throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\EmptyResultSet.java,getBoolean,@Override public boolean  (String columnLabel) throws SQLException { throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\EmptyResultSet.java,getByte,@Override public byte  (String columnLabel) throws SQLException { throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\EmptyResultSet.java,getBytes,@Override public byte[]  (String columnLabel) throws SQLException { throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\EmptyResultSet.java,getCharacterStream,@Override public Reader  (String columnLabel) throws SQLException { throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\EmptyResultSet.java,getClob,@Override public Clob  (String columnLabel) throws SQLException { throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\EmptyResultSet.java,getConcurrency,@Override public int  () throws SQLException { return CONCUR_READ_ONLY; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\EmptyResultSet.java,getCursorName,@Override public String  () throws SQLException { throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\EmptyResultSet.java,getDate,@Override public Date  (String columnLabel Calendar cal) throws SQLException { throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\EmptyResultSet.java,getDouble,@Override public double  (String columnLabel) throws SQLException { throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\EmptyResultSet.java,getFetchDirection,@Override public int  () throws SQLException { return FETCH_FORWARD; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\EmptyResultSet.java,getFetchSize,@Override public int  () throws SQLException { return 0; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\EmptyResultSet.java,getFloat,@Override public float  (String columnLabel) throws SQLException { throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\EmptyResultSet.java,getHoldability,@Override public int  () throws SQLException { throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\EmptyResultSet.java,getInt,@Override public int  (String columnLabel) throws SQLException { throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\EmptyResultSet.java,getLong,@Override public long  (String columnLabel) throws SQLException { throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\EmptyResultSet.java,getMetaData,@Override public ResultSetMetaData  () throws SQLException { throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\EmptyResultSet.java,getNCharacterStream,@Override public Reader  (String columnLabel) throws SQLException { throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\EmptyResultSet.java,getNClob,@Override public NClob  (String columnLabel) throws SQLException { throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\EmptyResultSet.java,getNString,@Override public String  (String columnLabel) throws SQLException { throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\EmptyResultSet.java,getObject,@Override public <T>T  (String columnLabel Class<T> type) throws SQLException { throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\EmptyResultSet.java,getRef,@Override public Ref  (String columnLabel) throws SQLException { throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\EmptyResultSet.java,getRow,@Override public int  () throws SQLException { throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\EmptyResultSet.java,getRowId,@Override public RowId  (String columnLabel) throws SQLException { throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\EmptyResultSet.java,getSQLXML,@Override public SQLXML  (String columnLabel) throws SQLException { throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\EmptyResultSet.java,getShort,@Override public short  (String columnLabel) throws SQLException { throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\EmptyResultSet.java,getStatement,@Override public Statement  () throws SQLException { throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\EmptyResultSet.java,getString,@Override public String  (String columnLabel) throws SQLException { throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\EmptyResultSet.java,getTime,@Override public Time  (String columnLabel Calendar cal) throws SQLException { throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\EmptyResultSet.java,getTimestamp,@Override public Timestamp  (String columnLabel Calendar cal) throws SQLException { throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\EmptyResultSet.java,getType,@Override public int  () throws SQLException { return TYPE_FORWARD_ONLY; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\EmptyResultSet.java,getURL,@Override public URL  (String columnLabel) throws SQLException { throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\EmptyResultSet.java,getUnicodeStream,@Override public InputStream  (String columnLabel) throws SQLException { throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\EmptyResultSet.java,getWarnings,@Override public SQLWarning  () throws SQLException { throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\EmptyResultSet.java,insertRow,@Override public void  () throws SQLException { throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\EmptyResultSet.java,isAfterLast,@Override public boolean  () throws SQLException { return true; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\EmptyResultSet.java,isBeforeFirst,@Override public boolean  () throws SQLException { return true; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\EmptyResultSet.java,isClosed,@Override public boolean  () throws SQLException { throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\EmptyResultSet.java,isFirst,@Override public boolean  () throws SQLException { return false; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\EmptyResultSet.java,isLast,@Override public boolean  () throws SQLException { return false; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\EmptyResultSet.java,isWrapperFor,@Override public boolean  (Class<?> iface) throws SQLException { return false; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\EmptyResultSet.java,last,@Override public boolean  () throws SQLException { return false; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\EmptyResultSet.java,moveToCurrentRow,@Override public void  () throws SQLException { throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\EmptyResultSet.java,moveToInsertRow,@Override public void  () throws SQLException { throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\EmptyResultSet.java,next,@Override public boolean  () throws SQLException { return false; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\EmptyResultSet.java,previous,@Override public boolean  () throws SQLException { throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\EmptyResultSet.java,refreshRow,@Override public void  () throws SQLException { throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\EmptyResultSet.java,relative,@Override public boolean  (int rows) throws SQLException { throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\EmptyResultSet.java,rowDeleted,@Override public boolean  () throws SQLException { throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\EmptyResultSet.java,rowInserted,@Override public boolean  () throws SQLException { throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\EmptyResultSet.java,rowUpdated,@Override public boolean  () throws SQLException { throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\EmptyResultSet.java,unwrap,@Override public <T>T  (Class<T> iface) throws SQLException { return iface.cast(this); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\EmptyResultSet.java,updateArray,@Override public void  (String columnLabel Array x) throws SQLException { throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\EmptyResultSet.java,updateAsciiStream,@Override public void  (String columnLabel InputStream x) throws SQLException { throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\EmptyResultSet.java,updateBigDecimal,@Override public void  (String columnLabel BigDecimal x) throws SQLException { throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\EmptyResultSet.java,updateBinaryStream,@Override public void  (String columnLabel InputStream x) throws SQLException { throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\EmptyResultSet.java,updateBlob,@Override public void  (String columnLabel InputStream inputStream) throws SQLException { throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\EmptyResultSet.java,updateBoolean,@Override public void  (String columnLabel boolean x) throws SQLException { throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\EmptyResultSet.java,updateByte,@Override public void  (String columnLabel byte x) throws SQLException { throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\EmptyResultSet.java,updateBytes,@Override public void  (String columnLabel byte[] x) throws SQLException { throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\EmptyResultSet.java,updateCharacterStream,@Override public void  (String columnLabel Reader reader) throws SQLException { throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\EmptyResultSet.java,updateClob,@Override public void  (String columnLabel Reader reader) throws SQLException { throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\EmptyResultSet.java,updateDate,@Override public void  (String columnLabel Date x) throws SQLException { throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\EmptyResultSet.java,updateDouble,@Override public void  (String columnLabel double x) throws SQLException { throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\EmptyResultSet.java,updateFloat,@Override public void  (String columnLabel float x) throws SQLException { throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\EmptyResultSet.java,updateInt,@Override public void  (String columnLabel int x) throws SQLException { throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\EmptyResultSet.java,updateLong,@Override public void  (String columnLabel long x) throws SQLException { throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\EmptyResultSet.java,updateNCharacterStream,@Override public void  (String columnLabel Reader reader) throws SQLException { throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\EmptyResultSet.java,updateNClob,@Override public void  (String columnLabel Reader reader) throws SQLException { throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\EmptyResultSet.java,updateNString,@Override public void  (String columnLabel String nString) throws SQLException { throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\EmptyResultSet.java,updateNull,@Override public void  (String columnLabel) throws SQLException { throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\EmptyResultSet.java,updateObject,@Override public void  (String columnLabel Object x) throws SQLException { throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\EmptyResultSet.java,updateRef,@Override public void  (String columnLabel Ref x) throws SQLException { throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\EmptyResultSet.java,updateRow,@Override public void  () throws SQLException { throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\EmptyResultSet.java,updateRowId,@Override public void  (String columnLabel RowId x) throws SQLException { throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\EmptyResultSet.java,updateSQLXML,@Override public void  (String columnLabel SQLXML xmlObject) throws SQLException { throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\EmptyResultSet.java,updateShort,@Override public void  (String columnLabel short x) throws SQLException { throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\EmptyResultSet.java,updateString,@Override public void  (String columnLabel String x) throws SQLException { throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\EmptyResultSet.java,updateTime,@Override public void  (String columnLabel Time x) throws SQLException { throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\EmptyResultSet.java,updateTimestamp,@Override public void  (String columnLabel Timestamp x) throws SQLException { throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\EmptyResultSet.java,wasNull,@Override public boolean  () throws SQLException { return false; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\ResultIterable.java,collect,default <R>R  (Collector<T ? R> collector){ try (Stream<T> stream=stream()){ return stream.collect(collector); } } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\ResultIterable.java,findFirst,default Optional<T>  (){ try (ResultIterator<T> iter=iterator()){ return iter.hasNext() ? Optional.ofNullable(iter.next()) : Optional.empty(); } } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\ResultIterable.java,findOnly,"default T  (){ try (ResultIterator<T> iter=iterator()){ if (!iter.hasNext()) { throw new IllegalStateException(""No element found in 'only'""); } final T r=iter.next(); if (iter.hasNext()) { throw new IllegalStateException(""Multiple elements found in 'only'""); } return r; } } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\ResultIterable.java,forEach,@Override default void  (Consumer<? super T> action){ try (ResultIterator<T> iterator=iterator()){ iterator.forEachRemaining(action); } } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\ResultProducers.java,ResultProducers,private  (boolean allowNoResults){ this.allowNoResults=allowNoResults; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\ResultProducers.java,allowNoResults,public ResultProducers  (boolean allowNoResults){ this.allowNoResults=allowNoResults; return this; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\ResultProducers.java,createCopy,@Override public ResultProducers  (){ return new ResultProducers(allowNoResults); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\ResultProducers.java,getGeneratedKeys,"private static Supplier<ResultSet>  (Supplier<PreparedStatement> supplier StatementContext ctx){ return () -> { try { ResultSet rs=supplier.get().getGeneratedKeys(); if (rs == null) { throw new NoResultsException(""Statement returned no generated keys"" ctx); } ctx.addCleanable(rs::close); return rs; } catch ( SQLException e) { throw new ResultSetException(""Could not get generated keys"" e ctx); } } ; } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\ResultProducers.java,getResultSet,"private static Supplier<ResultSet>  (Supplier<PreparedStatement> supplier StatementContext ctx){ return () -> { try { ResultSet rs=supplier.get().getResultSet(); if (rs == null) { if (ctx.getConfig(ResultProducers.class).allowNoResults) { return new EmptyResultSet(); } throw new NoResultsException(""Statement returned no results"" ctx); } ctx.addCleanable(rs::close); return rs; } catch ( SQLException e) { throw new ResultSetException(""Could not get result set"" e ctx); } } ; } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\ResultProducers.java,returningGeneratedKeys,public static ResultProducer<ResultBearing>  (String... generatedKeyColumnNames){ return (supplier ctx) -> { ctx.setReturningGeneratedKeys(true); if (generatedKeyColumnNames.length > 0) { ctx.setGeneratedKeysColumnNames(generatedKeyColumnNames); } return ResultBearing.of(getGeneratedKeys(supplier ctx) ctx); } ; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\ResultProducers.java,returningResults,public static ResultProducer<ResultBearing>  (){ return (supplier ctx) -> ResultBearing.of(getResultSet(supplier ctx) ctx); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\ResultProducers.java,returningUpdateCount,public static ResultProducer<Integer>  (){ return (statementSupplier ctx) -> { try { return statementSupplier.get().getUpdateCount(); } finally { ctx.close(); } } ; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\ResultSetResultIterator.java,ResultSetResultIterator, (ResultSet results RowMapper<T> mapper StatementContext context) throws SQLException { this.results=requireNonNull(results); this.mapper=mapper.specialize(results context); this.context=context; this.context.addCleanable(results::close); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\ResultSetResultIterator.java,close,@Override public void  (){ closed=true; context.close(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\ResultSetResultIterator.java,getContext,@Override public StatementContext  (){ return context; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\ResultSetResultIterator.java,hasNext,@Override public boolean  (){ if (closed) { return false; } if (alreadyAdvanced) { return hasNext; } hasNext=safeNext(); if (hasNext) { alreadyAdvanced=true; } else { close(); } return hasNext; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\ResultSetResultIterator.java,next,"@Override public T  (){ if (closed) { throw new IllegalStateException(""iterator is closed""); } if (!hasNext()) { close(); throw new NoSuchElementException(""No element to advance to""); } try { return mapper.map(results context); } catch ( SQLException e) {"
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\ResultSetResultIterator.java,remove,"@Override public void  (){ throw new UnsupportedOperationException(""Deleting from a result set iterator is not yet supported""); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\ResultSetResultIterator.java,safeNext,"private boolean  (){ try { return results.next(); } catch ( SQLException e) { throw new ResultSetException(""Unable to advance result set"" e context); } } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\UnableToProduceResultException.java,UnableToProduceResultException,public  (String string Throwable throwable StatementContext ctx){ super(string throwable ctx); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\spi\JdbiPlugin.java,customizeConnection,default Connection  (Connection conn){ return conn; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\spi\JdbiPlugin.java,customizeHandle,default Handle  (Handle handle){ return handle; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\ArgumentBinder.java,bind,static void  (ParsedParameters parameters Binding binding PreparedStatement statement StatementContext context){ if (parameters.isPositional()) { bindPositional(parameters.getParameterCount() binding statement context); } else { bindNamed(parameters.getParameterNames() binding statement context); } } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\ArgumentBinder.java,bindNamed,"private static void  (List<String> parameterNames Binding binding PreparedStatement statement StatementContext context){ if (parameterNames.isEmpty() && !binding.isEmpty()) { throw new UnableToExecuteStatementException(String.format(""Unable to execute. The query doesn't have named parameters  but provided binding '%s'."" binding) context); } for (int i=0; i < parameterNames.size(); i++) { String param=parameterNames.get(i); try { binding.findForName(param context).orElseThrow(() -> new UnableToExecuteStatementException(String.format(""Unable to execute  no named parameter matches '%s'."" param) context)).apply(i + 1 statement context); } catch ( SQLException e) { throw new UnableToCreateStatementException(String.format(""Exception while binding named parameter '%s'"" param) e context); } } } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\ArgumentBinder.java,bindPositional,"private static void  (int size Binding binding PreparedStatement statement StatementContext context){ for (int i=0; i < size; i++) { try { Argument argument=binding.findForPosition(i).orElse(null); if (argument != null) { argument.apply(i + 1 statement context); } } catch ( SQLException e) { throw new UnableToExecuteStatementException(""Exception while binding positional param at (0 based) position "" + i e context); } } } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\ResultSetException.java,ResultSetException,public  (String msg Exception e StatementContext ctx){ super(msg e ctx); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\ResultBearing.java,collectInto,"@SuppressWarnings({""unchecked"" ""rawtypes""}) default Object  (Type containerType){ return scanResultSet((rs ctx) -> { Collector collector=ctx.findCollectorFor(containerType).orElseThrow(() -> new NoSuchCollectorException(""No collector registered for contai"
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\ResultBearing.java,collectRows,default <A R>R  (Collector<RowView A R> collector){ return scanResultSet((supplier ctx) -> { try (ResultSet rs=supplier.get()){ RowView rv=new RowView(rs ctx); A acc=collector.supplier().get(); BiConsumer<A RowView> consumer=collector.accumulator(); while (rs.next()) { consumer.accept(acc rv); } return collector.finisher().apply(acc); } catch ( SQLException e) { throw new UnableToProduceResultException(e ctx); } finally { ctx.close(); } } ); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\ResultBearing.java,map,default <T>ResultIterable<T>  (RowMapper<T> mapper){ return scanResultSet((supplier ctx) -> ResultIterable.of(supplier mapper ctx)); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\ResultBearing.java,mapTo,"default ResultIterable<?>  (Type type){ return scanResultSet((supplier ctx) -> { RowMapper<?> mapper=ctx.findMapperFor(type).orElseThrow(() -> new NoSuchMapperException(""No mapper registered for type "" + type)); return ResultIterable.of(supplier mapper ctx); } ); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\ResultBearing.java,mapToBean,default <T>ResultIterable<T>  (Class<T> type){ return map(BeanMapper.of(type)); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\ResultBearing.java,mapToMap,default ResultIterable<Map<String Object>>  (){ return map(new MapMapper()); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\ResultBearing.java,of,"static ResultBearing  (Supplier<ResultSet> resultSetSupplier StatementContext ctx){ return new ResultBearing(){ @Override public <R>R scanResultSet( ResultSetScanner<R> mapper){ try { return mapper.scanResultSet(resultSetSupplier ctx); } catch ( SQLException e) { throw new ResultSetException(""Error reading result set"" e ctx); } } } ; } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\ResultBearing.java,reduceResultSet,default <U>U  (U seed ResultSetAccumulator<U> accumulator){ return scanResultSet((supplier ctx) -> { try (ResultSet rs=supplier.get()){ U result=seed; while (rs.next()) { result=accumulator.apply(result rs ctx); } return result; } catch ( SQLException e) { throw new UnableToProduceResultException(e ctx); } finally { ctx.close(); } } ); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\ResultBearing.java,reduceRows,default <U>U  (U seed BiFunction<U RowView U> accumulator){ return scanResultSet((supplier ctx) -> { try (ResultSet rs=supplier.get()){ RowView rv=new RowView(rs ctx); U result=seed; while (rs.next()) { result=accumulator.apply(result rv); } return result; } catch ( SQLException e) { throw new UnableToProduceResultException(e ctx); } finally { ctx.close(); } } ); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\BaseStatement.java,BaseStatement, (Handle handle){ this.handle=handle; this.ctx=new StatementContext(handle.getConfig().createCopy() handle.getExtensionMethod()); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\BaseStatement.java,addCleanable,This  (Cleanable cleanable){ getContext().addCleanable(cleanable); return typedThis; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\BaseStatement.java,addCustomizer,public final This  (final StatementCustomizer customizer){ this.customizers.add(customizer); return typedThis; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\BaseStatement.java,addCustomizers,void  (final Collection<StatementCustomizer> customizers){ this.customizers.addAll(customizers); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\BaseStatement.java,afterExecution,"final void  (final PreparedStatement stmt){ for ( StatementCustomizer customizer : customizers) { try { customizer.afterExecution(stmt ctx); } catch ( SQLException e) { throw new UnableToExecuteStatementException(""Exception thrown in statement customization"" e ctx); } } } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\BaseStatement.java,beforeBinding,"final void  (final PreparedStatement stmt){ for ( StatementCustomizer customizer : customizers) { try { customizer.beforeBinding(stmt ctx); } catch ( SQLException e) { throw new UnableToExecuteStatementException(""Exception thrown in statement customization"" e ctx); } } } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\BaseStatement.java,beforeExecution,"final void  (final PreparedStatement stmt){ for ( StatementCustomizer customizer : customizers) { try { customizer.beforeExecution(stmt ctx); } catch ( SQLException e) { throw new UnableToExecuteStatementException(""Exception thrown in statement customization"" e ctx); } } } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\BaseStatement.java,close,@Override public void  (){ getContext().close(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\BaseStatement.java,getConfig,@Override public ConfigRegistry  (){ return ctx.getConfig(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\BaseStatement.java,getContext,public final StatementContext  (){ return ctx; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\BaseStatement.java,getHandle,public Handle  (){ return handle; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\Binding.java,addNamed,public void  (String name Argument argument){ this.named.put(name argument); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\Binding.java,addNamedArgumentFinder,public void  (NamedArgumentFinder args){ namedArgumentFinder.add(args); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\Binding.java,addPositional,public void  (int position Argument argument){ positionals.put(position argument); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\Binding.java,clear,public void  (){ positionals.clear(); named.clear(); namedArgumentFinder.clear(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\Binding.java,findForName,public Optional<Argument>  (String name StatementContext ctx){ if (named.containsKey(name)) { return Optional.of(named.get(name)); } return namedArgumentFinder.stream().flatMap(arguments -> toStream(arguments.find(name ctx))).findFirst(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\Binding.java,findForPosition,public Optional<Argument>  (int position){ return Optional.ofNullable(positionals.get(position)); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\Binding.java,isEmpty,public boolean  (){ return positionals.isEmpty() && named.isEmpty() && namedArgumentFinder.isEmpty(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\Binding.java,toString,"@Override public String  (){ boolean wrote=false; StringBuilder b=new StringBuilder(); b.append(""{ positional:{""); for ( Map.Entry<Integer Argument> entry : positionals.entrySet()) { wrote=true; b.append(entry.getKey()).append("":"").append(entry.getValue()"
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\Batch.java,Batch,public  (Handle handle){ super(handle); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\Batch.java,add,public Batch  (String sql){ parts.add(sql); return this; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\RowView.java,RowView, (ResultSet rs StatementContext ctx){ this.rs=rs; this.ctx=ctx; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\Batch.java,execute,"public int[]  (){ if (parts.size() == 0) { return new int[]{}; } Statement stmt; try { try { stmt=getHandle().getStatementBuilder().create(getHandle().getConnection() getContext()); addCleanable(stmt::close); } catch ( SQLException e) { throw new UnableToCreateStatementException(e getContext()); } LOG.trace(""Execute batch [""); try { for ( String part : parts) { final String sql=getConfig(SqlStatements.class).getTemplateEngine().render(part getContext()); LOG.trace("" {}"" sql); stmt.addBatch(sql); } } catch ( SQLException e) { throw new UnableToExecuteStatementException(""Unable to configure JDBC statement"" e getContext()); } try { final long start=System.nanoTime(); final int[] rs=stmt.executeBatch(); final long elapsedTime=System.nanoTime() - start; LOG.trace(""] executed in {}ms"" elapsedTime / 1000000L); getConfig(SqlStatements.class).getTimingCollector().collect(elapsedTime getContext()); return rs; } catch ( SQLException e) { throw new UnableToExecuteStatementException(mungeBatchException(e) getContext()); } } finally { close(); } } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\RowView.java,columnMapperFor,"private ColumnMapper<?>  (Type type){ return columnMappers.computeIfAbsent(type t -> ctx.findColumnMapperFor(t).orElseThrow(() -> new NoSuchMapperException(""No column mapper registered for "" + t))); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\Batch.java,mungeBatchException,static SQLException  (SQLException e){ for (SQLException next=e.getNextException(); next != null; next=next.getNextException()) { e.addSuppressed(next); } return e; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\RowView.java,getColumn,public Object  (int column Type type){ try { return columnMapperFor(type).map(rs column ctx); } catch ( SQLException e) { throw new MappingException(e); } } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\RowView.java,getRow,public Object  (Type type){ try { return rowMapperFor(type).map(rs ctx); } catch ( SQLException e) { throw new MappingException(e); } } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\result\RowView.java,rowMapperFor,"private RowMapper<?>  (Type type) throws SQLException { if (rowMappers.containsKey(type)) { return rowMappers.get(type); } RowMapper<?> mapper=ctx.findRowMapperFor(type).orElseThrow(() -> new NoSuchMapperException(""No row mapper registered for "" + type)).specialize(rs ctx); rowMappers.put(type mapper); return mapper; } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\Call.java,Call,public  (Handle handle String sql){ super(handle sql); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\Call.java,OutParamArgument, (int sqlType CallableStatementMapper mapper String name){ this.sqlType=sqlType; this.mapper=mapper; this.name=name; params.add(this); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\Call.java,apply,@Override public void  (int position PreparedStatement statement StatementContext ctx) throws SQLException { ((CallableStatement)statement).registerOutParameter(position sqlType); this.position=position; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\DefaultStatementBuilder.java,create,@Override public PreparedStatement  (Connection conn String sql StatementContext ctx) throws SQLException { if (ctx.isReturningGeneratedKeys()) { String[] columnNames=ctx.getGeneratedKeysColumnNames(); if (columnNames != null && columnNames.length > 0) { 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\DefaultStatementBuilder.java,createCall,@Override public CallableStatement  (Connection conn String sql StatementContext ctx) throws SQLException { return conn.prepareCall(sql); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\DefinedAttributeTemplateEngine.java,render,@Override public String  (String template StatementContext ctx){ StringBuilder b=new StringBuilder(); DefineStatementLexer lexer=new DefineStatementLexer(new ANTLRStringStream(template)); try { Token t=lexer.nextToken(); while (t.getType() != EOF) { switc
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\Call.java,invoke,public OutParameters  (){ try { final PreparedStatement stmt=this.internalExecute(); OutParameters out=new OutParameters(); for ( OutParamArgument param : params) { Object obj=param.map((CallableStatement)stmt); int index=param.position - 1; out.getMap().put(index obj); if (param.name != null) { out.getMap().put(param.name obj); } } return out; } finally { close(); } } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\Call.java,map,"public Object  (CallableStatement stmt){ try { if (mapper != null) { return mapper.map(position stmt); } switch (sqlType) { case Types.CLOB: case Types.VARCHAR: case Types.LONGNVARCHAR: case Types.LONGVARCHAR: case Types.NCLOB: case Types.NVARCHAR: return stmt.getString(position); case Types.BLOB: case Types.VARBINARY: return stmt.getBytes(position); case Types.SMALLINT: return stmt.getShort(position); case Types.INTEGER: return stmt.getInt(position); case Types.BIGINT: return stmt.getLong(position); case Types.TIMESTAMP: case Types.TIME: return stmt.getTimestamp(position); case Types.DATE: return stmt.getDate(position); case Types.FLOAT: return stmt.getFloat(position); case Types.DECIMAL: case Types.DOUBLE: return stmt.getDouble(position); default : return stmt.getObject(position); } } catch (SQLException e) { throw new UnableToExecuteStatementException(""Could not get OUT parameter from statement"" e getContext()); } } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\Call.java,registerOutParameter,public Call  (String name int sqlType CallableStatementMapper mapper){ getBinding().addNamed(name new OutParamArgument(sqlType mapper name)); return this; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\ColonPrefixSqlParser.java,internalParse,private ParsedSql  (String sql) throws IllegalArgumentException { ParsedSql.Builder parsedSql=ParsedSql.builder(); ColonStatementLexer lexer=new ColonStatementLexer(new ANTLRStringStream(sql)); Token t=lexer.nextToken(); while (t.getType() != EOF) { switch (t.getType()) { case COMMENT: case LITERAL: case QUOTED_TEXT: case DOUBLE_QUOTED_TEXT: parsedSql.append(t.getText()); break; case NAMED_PARAM: parsedSql.appendNamedParameter(t.getText().substring(1)); break; case POSITIONAL_PARAM: parsedSql.appendPositionalParameter(); break; case ESCAPED_TEXT: parsedSql.append(t.getText().substring(1)); break; default : break; } t=lexer.nextToken(); } return parsedSql.build(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\ColonPrefixSqlParser.java,nameParameter,"@Override public String  (String rawName StatementContext ctx){ return "":"" + rawName; } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\ColonPrefixSqlParser.java,parse,"@Override public ParsedSql  (String sql StatementContext ctx){ try { return cache.computeIfAbsent(sql this::internalParse); } catch ( IllegalArgumentException e) { throw new UnableToCreateStatementException(""Exception parsing for named parameter replaceme"
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\HashPrefixSqlParser.java,internalParse,private ParsedSql  (final String sql){ ParsedSql.Builder parsedSql=ParsedSql.builder(); HashStatementLexer lexer=new HashStatementLexer(new ANTLRStringStream(sql)); Token t=lexer.nextToken(); while (t.getType() != EOF) { switch (t.getType()) { case COMMENT: case LITERAL: case QUOTED_TEXT: case DOUBLE_QUOTED_TEXT: parsedSql.append(t.getText()); break; case NAMED_PARAM: parsedSql.appendNamedParameter(t.getText().substring(1)); break; case POSITIONAL_PARAM: parsedSql.appendPositionalParameter(); break; case ESCAPED_TEXT: parsedSql.append(t.getText().substring(1)); break; default : break; } t=lexer.nextToken(); } return parsedSql.build(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\HashPrefixSqlParser.java,nameParameter,"@Override public String  (String rawName StatementContext ctx){ return ""#"" + rawName; } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\HashPrefixSqlParser.java,parse,"@Override public ParsedSql  (String sql StatementContext ctx){ try { return cache.computeIfAbsent(sql this::internalParse); } catch ( IllegalArgumentException e) { throw new UnableToCreateStatementException(""Exception parsing for named parameter replaceme"
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\MessageFormatTemplateEngine.java,render,@Override public String  (String template StatementContext ctx){ MessageFormat msgFormat=new MessageFormat(template); validateKeys(ctx.getAttributes().keySet() msgFormat.getFormats().length); Object[] args=ctx.getAttributes().entrySet().stream().map(x -> 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\MessageFormatTemplateEngine.java,validateKeys,"private static void  (Set<String> keySet int expectedCount){ if (keySet.size() != expectedCount) { throw new IllegalArgumentException(""expected "" + expectedCount + "" keys but got ""+ keySet.size()); } if (keySet.size() == 0) { return; } final int[] keys=keySet.stream().mapToInt(Integer::parseInt).sorted().toArray(); if (keys[0] != 0) { throw new IllegalArgumentException(""lowest key must be 0""); } for (int i=1; i < keys.length; i++) { final int key=keys[i]; if (key < i) { throw new IllegalArgumentException(""key "" + key + "" was given more than once""); } if (key > i) { throw new IllegalArgumentException(""keys skip from "" + (i - 1) + "" to ""+ key); } } } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\ParsedSql.java,ParsedSql,private  (String sql ParsedParameters parameters){ this.sql=sql; this.parameters=parameters; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\ParsedSql.java,append,public Builder  (String sqlFragment){ sql.append(sqlFragment); return this; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\ParsedSql.java,appendNamedParameter,"public Builder  (String name){ named=true; parameterNames.add(name); return append(""?""); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\ParsedSql.java,appendPositionalParameter,"public Builder  (){ positional=true; parameterNames.add(POSITIONAL_PARAM); return append(""?""); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\ParsedSql.java,build,"public ParsedSql  (){ if (positional && named) { throw new UnableToExecuteStatementException(""Cannot mix named and positional parameters in a SQL statement: "" + parameterNames); } ParsedParameters parameters=new ParsedParameters(positional parameterNames); return new ParsedSql(sql.toString() parameters); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\ParsedSql.java,builder,public static Builder  (){ return new Builder(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\ParsedSql.java,equals,@Override public boolean  (Object o){ if (this == o) { return true; } if (o == null || getClass() != o.getClass()) { return false; } ParsedSql that=(ParsedSql)o; return Objects.equals(sql that.sql) && Objects.equals(parameters that.parameters); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\ParsedSql.java,getParameters,public ParsedParameters  (){ return parameters; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\ParsedSql.java,getSql,public String  (){ return sql; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\ParsedSql.java,hashCode,@Override public int  (){ return Objects.hash(sql parameters); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\ParsedSql.java,toString,"@Override public String  (){ return ""ParsedSql{"" + ""sql='"" + sql + '\''+ ""  parameters=""+ parameters+ '}'; } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\Query.java,Query,public  (Handle handle String sql){ super(handle sql); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\Query.java,concurrentUpdatable,public Query  (){ getContext().setConcurrentUpdatable(true); return this; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\Query.java,execute,public <R>R  (ResultProducer<R> producer){ try { return producer.produce(this::internalExecute getContext()); } catch ( SQLException e) { try { close(); } catch ( Exception e1) { e.addSuppressed(e1); } throw new UnableToProduceResultException(e getContext()); } } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\Query.java,scanResultSet,@Override public <R>R  (ResultSetScanner<R> mapper){ return execute(ResultProducers.returningResults()).scanResultSet(mapper); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\Query.java,setFetchSize,public Query  (final int fetchSize){ return addCustomizer(StatementCustomizers.fetchSize(fetchSize)); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\Query.java,setMaxFieldSize,public Query  (final int maxFields){ return addCustomizer(StatementCustomizers.maxFieldSize(maxFields)); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\Query.java,setMaxRows,public Query  (final int maxRows){ return addCustomizer(StatementCustomizers.maxRows(maxRows)); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\OutParameters.java,getBytes,"public byte[]  (int pos){ Object obj=map.get(pos); if (obj == null) { if (!map.containsKey(pos)) { throw new IllegalArgumentException(String.format(""Parameter at %d does not exist"" pos)); } return null; } if (obj instanceof byte[]) { return (byte[])obj; } else { throw new IllegalArgumentException(String.format(""Parameter at %d is not byte[] but %s"" pos obj.getClass())); } } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\OutParameters.java,getDate,public Date  (int pos){ Long epoch=getEpoch(pos); if (epoch == null) { return null; } return new Date(epoch); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\OutParameters.java,getDouble,public Double  (int pos){ return getNumber(pos).doubleValue(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\OutParameters.java,getEpoch,"private Long  (int pos){ Object obj=map.get(pos); if (obj == null) { if (!map.containsKey(pos)) { throw new IllegalArgumentException(String.format(""Parameter at %d does not exist"" pos)); } return null; } if (obj instanceof java.util.Date) { return ((java.util.Date)obj).getTime(); } else { throw new IllegalArgumentException(String.format(""Parameter at %d is not Date but %s"" pos obj.getClass())); } } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\OutParameters.java,getFloat,public Float  (int pos){ return getNumber(pos).floatValue(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\OutParameters.java,getInt,public Integer  (int pos){ return getNumber(pos).intValue(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\OutParameters.java,getLong,public Long  (int pos){ return getNumber(pos).longValue(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\OutParameters.java,getMap,Map<Object Object>  (){ return map; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\OutParameters.java,getNumber,"private Number  (int pos){ Object obj=map.get(pos); if (obj == null) { if (!map.containsKey(pos)) { throw new IllegalArgumentException(String.format(""Parameter at %d does not exist"" pos)); } return null; } if (obj instanceof Number) { return (Number)obj; } else { throw new IllegalArgumentException(String.format(""Parameter at %d is not a number but %s"" pos obj.getClass())); } } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\OutParameters.java,getObject,public <T>T  (int pos Class<T> type){ return type.cast(getObject(pos)); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\OutParameters.java,getShort,public Short  (int pos){ return getNumber(pos).shortValue(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\OutParameters.java,getString,"public String  (int pos){ Object obj=map.get(pos); if (obj == null) { if (!map.containsKey(pos)) { throw new IllegalArgumentException(String.format(""Parameter at %d does not exist"" pos)); } return null; } return obj.toString(); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\OutParameters.java,getTimestamp,public Timestamp  (int pos){ Long epoch=getEpoch(pos); if (epoch == null) { return null; } return new Timestamp(epoch); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\PreparedBatch.java,ExecutedBatch, (PreparedStatement stmt int[] updateCounts){ this.stmt=stmt; this.updateCounts=updateCounts; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\PreparedBatch.java,PreparedBatch,public  (Handle handle String sql){ super(handle sql); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\PreparedBatch.java,add,public PreparedBatch  (Map<String ?> args){ bindMap(args); add(); return this; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\PreparedBatch.java,close,@Override public void  (){ ctx.close(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\PreparedBatch.java,execute,"public <R>R  (ResultProducer<R> producer){ try { return producer.produce(() -> internalBatchExecute().stmt getContext()); } catch ( SQLException e) { try { close(); } catch ( Exception e1) { e.addSuppressed(e1); } throw new UnableToProduceResultException(""Exception producing batch result"" e getContext()); } } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\PreparedBatch.java,executeAndGetModCount,public ResultIterator<Integer>  (){ StatementContext ctx=getContext(); final int[] modCount=execute(); return new ResultIterator<Integer>(){ int pos=0; @Override public boolean hasNext(){ return pos < modCount.length; } @Override public Integer next(){ if (!hasNext()) { throw new NoSuchElementException(); } return modCount[pos++]; } @Override public StatementContext getContext(){ return ctx; } @Override public void close(){ ctx.close(); } } ; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\PreparedBatch.java,executeAndReturnGeneratedKeys,public ResultBearing  (String... columnNames){ return execute(returningGeneratedKeys(columnNames)); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\PreparedBatch.java,getContext,@Override public StatementContext  (){ return ctx; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\PreparedBatch.java,hasNext,@Override public boolean  (){ return pos < modCount.length; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\PreparedBatch.java,internalBatchExecute,"private ExecutedBatch  (){ if (!getBinding().isEmpty()) { add(); } if (bindings.isEmpty()) { throw new IllegalStateException(""No batch parts to execute""); } String renderedSql=getConfig(SqlStatements.class).getTemplateEngine().render(getSql() getContext()); getContext().setRenderedSql(renderedSql); ParsedSql parsedSql=getConfig(SqlStatements.class).getSqlParser().parse(renderedSql getContext()); String sql=parsedSql.getSql(); ParsedParameters parsedParameters=parsedSql.getParameters(); getContext().setParsedSql(parsedSql); try { final PreparedStatement stmt; try { StatementBuilder statementBuilder=getHandle().getStatementBuilder(); Connection connection=getHandle().getConnection(); stmt=statementBuilder.create(connection sql getContext()); addCleanable(() -> statementBuilder.close(connection sql stmt)); } catch ( SQLException e) { throw new UnableToCreateStatementException(e getContext()); } beforeBinding(stmt); try { for ( Binding binding : bindings) { getContext().setBinding(binding); ArgumentBinder.bind(parsedParameters binding stmt getContext()); stmt.addBatch(); } } catch ( SQLException e) { throw new UnableToExecuteStatementException(""Exception while binding parameters"" e getContext()); } beforeExecution(stmt); try { final long start=System.nanoTime(); final int[] rs=stmt.executeBatch(); final long elapsedTime=System.nanoTime() - start; LOG.trace(""Prepared batch of {} parts executed in {}ms"" bindings.size() elapsedTime / 1000000L parsedSql); getConfig(SqlStatements.class).getTimingCollector().collect(elapsedTime getContext()); afterExecution(stmt); getContext().setBinding(new Binding()); return new ExecutedBatch(stmt rs); } catch ( SQLException e) { throw new UnableToExecuteStatementException(Batch.mungeBatchException(e) getContext()); } } finally { bindings.clear(); } } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\PreparedBatch.java,next,@Override public Integer  (){ if (!hasNext()) { throw new NoSuchElementException(); } return modCount[pos++]; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\PreparedBatch.java,scanResultSet,@Override public <R>R  (ResultSetScanner<R> mapper){ return execute(ResultProducers.returningResults()).scanResultSet(mapper); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\PreparedBatch.java,size,public int  (){ return bindings.size(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\ParsedParameters.java,ParsedParameters, (boolean positional List<String> parameterNames){ this.positional=positional; this.parameterNames=unmodifiableList(new ArrayList<>(parameterNames)); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\ParsedParameters.java,equals,@Override public boolean  (Object o){ if (this == o) { return true; } if (o == null || getClass() != o.getClass()) { return false; } ParsedParameters that=(ParsedParameters)o; return positional == that.positional && Objects.equals(parameterNames that.para
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\ParsedParameters.java,getParameterCount,public int  (){ return parameterNames.size(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\ParsedParameters.java,getParameterNames,public List<String>  (){ return parameterNames; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\ParsedParameters.java,hashCode,@Override public int  (){ return Objects.hash(positional parameterNames); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\ParsedParameters.java,isPositional,public boolean  (){ return positional; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\ParsedParameters.java,toString,"@Override public String  (){ return ""ParsedParameters{"" + ""positional="" + positional + ""  parameterNames=""+ parameterNames+ '}'; } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\Script.java,Script,public  (Handle h String sql){ super(h sql); this.handle=h; this.sql=sql; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\Script.java,addStatement,private void  (String statement List<String> statements){ String trimmedStatement=statement.trim(); if (trimmedStatement.isEmpty()) { return; } statements.add(trimmedStatement); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\Script.java,execute,public int[]  (){ final List<String> statements=getStatements(); Batch b=handle.createBatch(); statements.forEach(b::add); return b.execute(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\Script.java,executeAsSeparateStatements,public void  (){ for ( String s : getStatements()) { handle.execute(s); } } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\Script.java,getStatements,public List<String>  (){ return splitToStatements(getConfig(SqlStatements.class).getTemplateEngine().render(sql getContext())); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\Script.java,splitToStatements,private List<String>  (String script){ final List<String> statements=new ArrayList<>(); String lastStatement=new SqlScriptParser((t sb) -> { addStatement(sb.toString() statements); sb.setLength(0); } ).parse(new ANTLRStringStream(script)); addStatement(lastStatement statements); return statements; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\SqlStatements.java,SqlStatements,private  (SqlStatements that){ this.attributes=new ConcurrentHashMap<>(that.attributes); this.templateEngine=that.templateEngine; this.sqlParser=that.sqlParser; this.timingCollector=that.timingCollector; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\SqlStatements.java,createCopy,@Override public SqlStatements  (){ return new SqlStatements(this); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\SqlStatements.java,define,public SqlStatements  (String key Object value){ attributes.put(key value); return this; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\SqlStatements.java,defineMap,public SqlStatements  (final Map<String ?> values){ if (values != null) { attributes.putAll(values); } return this; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\SqlStatements.java,getAttribute,public Object  (String key){ return attributes.get(key); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\SqlStatements.java,getAttributes,public Map<String Object>  (){ return attributes; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\SqlStatements.java,getSqlParser,public SqlParser  (){ return sqlParser; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\SqlStatements.java,getTemplateEngine,public TemplateEngine  (){ return templateEngine; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\SqlStatements.java,getTimingCollector,public TimingCollector  (){ return timingCollector; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\SqlStatements.java,setSqlParser,public SqlStatements  (SqlParser sqlParser){ this.sqlParser=sqlParser; return this; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\SqlStatements.java,setTemplateEngine,public SqlStatements  (TemplateEngine templateEngine){ this.templateEngine=templateEngine; return this; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\SqlStatements.java,setTimingCollector,public SqlStatements  (TimingCollector timingCollector){ this.timingCollector=timingCollector == null ? TimingCollector.NOP_TIMING_COLLECTOR : timingCollector; return this; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\StatementContext.java,StatementContext, (ConfigRegistry config ExtensionMethod extensionMethod){ this.config=requireNonNull(config); this.extensionMethod=extensionMethod; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\StatementContext.java,addCleanable,public void  (Cleanable cleanable){ cleanables.add(cleanable); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\StatementContext.java,close,@Override public void  (){ SQLException exception=null; try { List<Cleanable> cleanables=new ArrayList<>(this.cleanables); this.cleanables.clear(); Collections.reverse(cleanables); for ( Cleanable cleanable : cleanables) { try { cleanable.close(); } catch
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\StatementContext.java,define,public void  (String key Object value){ getConfig(SqlStatements.class).define(key value); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\StatementContext.java,findArgumentFor,public Optional<Argument>  (Type type Object value){ return getConfig(Arguments.class).findFor(type value); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\StatementContext.java,findCollectorFor,public Optional<Collector<? ? ?>>  (Type containerType){ return getConfig(JdbiCollectors.class).findFor(containerType); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\StatementContext.java,findColumnMapperFor,public Optional<ColumnMapper<?>>  (Type type){ return getConfig(ColumnMappers.class).findFor(type); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\StatementContext.java,findElementTypeFor,public Optional<Type>  (Type containerType){ return getConfig(JdbiCollectors.class).findElementTypeFor(containerType); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\StatementContext.java,findMapperFor,public Optional<RowMapper<?>>  (Type type){ return getConfig(Mappers.class).findFor(type); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\StatementContext.java,findRowMapperFor,public <T>Optional<RowMapper<T>>  (GenericType<T> type){ return getConfig(RowMappers.class).findFor(type); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\StatementContext.java,findSqlArrayTypeFor,public Optional<SqlArrayType<?>>  (Type elementType){ return getConfig(SqlArrayTypes.class).findFor(elementType); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\StatementContext.java,getAttribute,public Object  (String key){ return getConfig(SqlStatements.class).getAttribute(key); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\StatementContext.java,getAttributes,public Map<String Object>  (){ return getConfig(SqlStatements.class).getAttributes(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\StatementContext.java,getBinding,public Binding  (){ return binding; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\StatementContext.java,getConfig,public ConfigRegistry  (){ return config; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\StatementContext.java,getConnection,public Connection  (){ return connection; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\StatementContext.java,getExtensionMethod,public ExtensionMethod  (){ return extensionMethod; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\StatementContext.java,getGeneratedKeysColumnNames,public String[]  (){ return Arrays.copyOf(generatedKeysColumnNames generatedKeysColumnNames.length); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\StatementContext.java,getParsedSql,public ParsedSql  (){ return parsedSql; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\StatementContext.java,getRawSql,public String  (){ return rawSql; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\StatementContext.java,getRenderedSql,public String  (){ return renderedSql; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\StatementContext.java,getSqlArrayArgumentStrategy,public SqlArrayArgumentStrategy  (){ return getConfig(SqlArrayTypes.class).getArgumentStrategy(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\StatementContext.java,getStatement,public PreparedStatement  (){ return statement; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\StatementContext.java,isConcurrentUpdatable,public boolean  (){ return concurrentUpdatable; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\StatementContext.java,isReturningGeneratedKeys,public boolean  (){ return returningGeneratedKeys || generatedKeysColumnNames.length > 0; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\StatementContext.java,setBinding,StatementContext  (Binding b){ this.binding=b; return this; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\StatementContext.java,setConcurrentUpdatable,"public void  (final boolean concurrentUpdatable){ if (concurrentUpdatable && isReturningGeneratedKeys()) { throw new IllegalArgumentException(""Cannot create a result set that is concurrent "" + ""updatable and is returning generated keys.""); } this.concurrentUpdatable=concurrentUpdatable; } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\StatementContext.java,setConnection,StatementContext  (Connection connection){ this.connection=connection; return this; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\StatementContext.java,setGeneratedKeysColumnNames,public void  (String[] generatedKeysColumnNames){ this.generatedKeysColumnNames=Arrays.copyOf(generatedKeysColumnNames generatedKeysColumnNames.length); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\StatementContext.java,setParsedSql,void  (ParsedSql parsedSql){ this.parsedSql=parsedSql; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\StatementContext.java,setRawSql,StatementContext  (String rawSql){ this.rawSql=rawSql; return this; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\StatementContext.java,setRenderedSql,void  (String renderedSql){ this.renderedSql=renderedSql; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\StatementContext.java,setReturningGeneratedKeys,"public void  (boolean b){ if (isConcurrentUpdatable() && b) { throw new IllegalArgumentException(""Cannot create a result set that is concurrent "" + ""updatable and is returning generated keys.""); } this.returningGeneratedKeys=b; } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\StatementContext.java,setStatement,void  (PreparedStatement stmt){ statement=stmt; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\StatementException.java,StatementException,public  (String string){ super(string); this.statementContext=null; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\StatementCustomizers.java,beforeExecution,@Override public void  (final PreparedStatement stmt final StatementContext ctx) throws SQLException { stmt.setMaxFieldSize(maxFieldSize); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\StatementCustomizers.java,fetchSize,public static StatementCustomizer  (final int fetchSize){ return new StatementCustomizer(){ @Override public void beforeExecution( final PreparedStatement stmt  final StatementContext ctx) throws SQLException { stmt.setFetchSize(fetchSize); } } ; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\StatementException.java,getMessage,"@Override public String  (){ String base=super.getMessage(); StatementContext ctx=getStatementContext(); if (ctx == null) { return base; } else { return String.format(""%s [statement:\""%s\""  rewritten:\""%s\""  parsed:\""%s\""  arguments:%s]"" base ctx.getRawSq"
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\StatementException.java,getStatementContext,public StatementContext  (){ return statementContext; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\StatementCustomizers.java,maxFieldSize,public static StatementCustomizer  (final int maxFieldSize){ return new StatementCustomizer(){ @Override public void beforeExecution( final PreparedStatement stmt  final StatementContext ctx) throws SQLException { stmt.setMaxFieldSize(maxFieldSize); } } ; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\StatementCustomizers.java,maxRows,public static StatementCustomizer  (final int maxRows){ return new StatementCustomizer(){ @Override public void beforeExecution( final PreparedStatement stmt  final StatementContext ctx) throws SQLException { stmt.setMaxRows(maxRows); } } ; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\StatementCustomizers.java,statementTimeout,public static StatementCustomizer  (final int seconds){ return new StatementCustomizer(){ @Override public void beforeExecution( final PreparedStatement stmt  final StatementContext ctx) throws SQLException { stmt.setQueryTimeout(seconds); } } ; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\UnableToCreateStatementException.java,UnableToCreateStatementException,public  (Exception e StatementContext ctx){ super(e ctx); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\UnableToExecuteStatementException.java,UnableToExecuteStatementException,public  (String message Throwable throwable StatementContext ctx){ super(message throwable ctx); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\transaction\CMTTransactionHandler.java,inTransaction,@Override public <R X extends Exception>R  (Handle handle TransactionIsolationLevel level HandleCallback<R X> callback) throws X { return inTransaction(handle callback); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\transaction\CMTTransactionHandler.java,isInTransaction,"@Override public boolean  (Handle handle){ try { return !handle.getConnection().getAutoCommit(); } catch ( SQLException e) { throw new TransactionException(""Failed to check status of transaction"" e); } } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\transaction\CMTTransactionHandler.java,releaseSavepoint,"@Override public void  (Handle handle String savepointName){ throw new UnsupportedOperationException(""Savepoints not supported""); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\transaction\CMTTransactionHandler.java,rollback,"@Override public void  (Handle handle){ throw new TransactionException(""Rollback called  this runtime exception thrown to halt the transaction""); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\transaction\CMTTransactionHandler.java,rollbackToSavepoint,"@Override public void  (Handle handle String name){ throw new UnsupportedOperationException(""Savepoints not supported""); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\transaction\CMTTransactionHandler.java,savepoint,"@Override public void  (Handle handle String name){ throw new UnsupportedOperationException(""Savepoints not supported""); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\transaction\DelegatingTransactionHandler.java,DelegatingTransactionHandler,public  (TransactionHandler delegate){ this.delegate=delegate; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\transaction\DelegatingTransactionHandler.java,begin,@Override public void  (Handle handle){ delegate.begin(handle); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\transaction\DelegatingTransactionHandler.java,commit,@Override public void  (Handle handle){ delegate.commit(handle); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\transaction\DelegatingTransactionHandler.java,getDelegate,protected TransactionHandler  (){ return delegate; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\transaction\DelegatingTransactionHandler.java,inTransaction,@Override public <R X extends Exception>R  (Handle handle TransactionIsolationLevel level HandleCallback<R X> callback) throws X { return delegate.inTransaction(handle level callback); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\transaction\DelegatingTransactionHandler.java,isInTransaction,@Override public boolean  (Handle handle){ return delegate.isInTransaction(handle); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\transaction\DelegatingTransactionHandler.java,releaseSavepoint,@Override public void  (Handle handle String name){ delegate.releaseSavepoint(handle name); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\transaction\DelegatingTransactionHandler.java,rollback,@Override public void  (Handle handle){ delegate.rollback(handle); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\transaction\DelegatingTransactionHandler.java,rollbackToSavepoint,@Override public void  (Handle handle String name){ delegate.rollbackToSavepoint(handle name); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\transaction\DelegatingTransactionHandler.java,savepoint,@Override public void  (Handle handle String name){ delegate.savepoint(handle name); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\Update.java,Update,public  (Handle handle String sql){ super(handle sql); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\Update.java,execute,"public <R>R  (ResultProducer<R> producer){ try { return producer.produce(this::internalExecute getContext()); } catch ( SQLException e) { try { close(); } catch ( Exception e1) { e.addSuppressed(e1); } throw new UnableToProduceResultException(""Could not produce statement result"" e getContext()); } } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\Update.java,executeAndReturnGeneratedKeys,public ResultBearing  (String... generatedKeyColumnNames){ return execute(returningGeneratedKeys(generatedKeyColumnNames)); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\transaction\TransactionException.java,TransactionException,public  (String msg){ super(msg); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\transaction\LocalTransactionHandler.java,LocalStuff, (boolean initial){ this.initialAutocommit=initial; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\transaction\LocalTransactionHandler.java,begin,@Override public void  (Handle handle){ try { if (!localStuff.containsKey(handle)) { boolean initial=handle.getConnection().getAutoCommit(); localStuff.putIfAbsent(handle new LocalStuff(initial)); handle.getConnection().setAutoCommit(false); } } catch ( S
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\transaction\LocalTransactionHandler.java,commit,"@Override public void  (Handle handle){ try { handle.getConnection().commit(); } catch ( SQLException e) { throw new TransactionException(""Failed to commit transaction"" e); } finally { restoreAutoCommitState(handle); } } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\transaction\LocalTransactionHandler.java,getInitialAutocommit,boolean  (){ return initialAutocommit; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\transaction\LocalTransactionHandler.java,getSavepoints,Map<String Savepoint>  (){ return savepoints; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\transaction\LocalTransactionHandler.java,inTransaction,@Override public <R X extends Exception>R  (Handle handle TransactionIsolationLevel level HandleCallback<R X> callback) throws X { final TransactionIsolationLevel initial=handle.getTransactionIsolationLevel(); try { handle.setTransactionIsolation(level); 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\transaction\LocalTransactionHandler.java,isInTransaction,"@Override public boolean  (Handle handle){ try { return !handle.getConnection().getAutoCommit(); } catch ( SQLException e) { throw new TransactionException(""Failed to test for transaction status"" e); } } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\transaction\LocalTransactionHandler.java,releaseSavepoint,"@Override public void  (Handle handle String name){ final Connection conn=handle.getConnection(); try { final Savepoint savepoint=localStuff.get(handle).getSavepoints().remove(name); if (savepoint == null) { throw new TransactionException(String.format(""A"
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\transaction\LocalTransactionHandler.java,restoreAutoCommitState,private void  (final Handle handle){ try { final LocalStuff stuff=localStuff.remove(handle); if (stuff != null) { handle.getConnection().setAutoCommit(stuff.getInitialAutocommit()); stuff.getSavepoints().clear(); } } catch ( SQLException e) { throw new UnableToRestoreAutoCommitStateException(e); } finally { localStuff.remove(handle); } } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\transaction\LocalTransactionHandler.java,rollback,"@Override public void  (Handle handle){ didTxnRollback.set(true); try { handle.getConnection().rollback(); } catch ( SQLException e) { throw new TransactionException(""Failed to rollback transaction"" e); } finally { restoreAutoCommitState(handle); } } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\transaction\LocalTransactionHandler.java,rollbackToSavepoint,"@Override public void  (Handle handle String name){ final Connection conn=handle.getConnection(); try { final Savepoint savepoint=localStuff.get(handle).getSavepoints().remove(name); if (savepoint == null) { throw new TransactionException(String.format(""A"
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\transaction\LocalTransactionHandler.java,savepoint,@Override public void  (Handle handle String name){ final Connection conn=handle.getConnection(); try { final Savepoint savepoint=conn.setSavepoint(name); localStuff.get(handle).getSavepoints().put(name savepoint); } catch ( SQLException e) { throw new Tr
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\transaction\SerializableTransactionRunner.java,SerializableTransactionRunner,public  (TransactionHandler delegate){ super(delegate); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\transaction\SerializableTransactionRunner.java,createCopy,@Override public Configuration  (){ return new Configuration().setMaxRetries(maxRetries).setSerializationFailureSqlState(serializationFailureSqlState); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\transaction\SerializableTransactionRunner.java,inTransaction,@Override public <R X extends Exception>R  (Handle handle TransactionIsolationLevel level HandleCallback<R X> callback) throws X { final TransactionIsolationLevel initial=handle.getTransactionIsolationLevel(); try { handle.setTransactionIsolation(level); 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\transaction\SerializableTransactionRunner.java,isSqlState,protected boolean  (String expectedSqlState Throwable throwable){ do { if (throwable instanceof SQLException) { String sqlState=((SQLException)throwable).getSQLState(); if (sqlState != null && sqlState.startsWith(expectedSqlState)) { return true; } } } while ((throwable=throwable.getCause()) != null); return false; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\transaction\SerializableTransactionRunner.java,setMaxRetries,public Configuration  (int maxRetries){ this.maxRetries=maxRetries; return this; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\transaction\SerializableTransactionRunner.java,setSerializationFailureSqlState,public Configuration  (String serializationFailureSqlState){ this.serializationFailureSqlState=serializationFailureSqlState; return this; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\transaction\TransactionIsolationLevel.java,TransactionIsolationLevel, (int value){ this.value=value; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\transaction\TransactionIsolationLevel.java,intValue,public int  (){ return this.value; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\transaction\TransactionIsolationLevel.java,valueOf,public static TransactionIsolationLevel  (int val){ switch (val) { case Connection.TRANSACTION_READ_UNCOMMITTED: return READ_UNCOMMITTED; case Connection.TRANSACTION_READ_COMMITTED: return READ_COMMITTED; case Connection.TRANSACTION_NONE: return NONE; case Connection.TRANSACTION_REPEATABLE_READ: return REPEATABLE_READ; case Connection.TRANSACTION_SERIALIZABLE: return SERIALIZABLE; default : return UNKNOWN; } } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\transaction\UnableToManipulateTransactionIsolationLevelException.java,UnableToManipulateTransactionIsolationLevelException,public  (String msg SQLException e){ super(msg e); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\transaction\UnableToRestoreAutoCommitStateException.java,UnableToRestoreAutoCommitStateException,public  (Throwable throwable){ super(throwable); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\SqlStatement.java,SqlStatement, (Handle handle String sql){ super(handle); this.handle=handle; this.sql=sql; getContext().setConnection(handle.getConnection()).setRawSql(sql); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\SqlStatement.java,bind,public final This  (String name URL value){ return bind(name toArgument(URL.class value)); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\SqlStatement.java,bindASCIIStream,public final This  (String name InputStream value int length){ return bind(name new InputStreamArgument(value length true)); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\SqlStatement.java,bindBean,public This  (String prefix Object bean){ return bindNamedArgumentFinder(new BeanPropertyArguments(prefix bean)); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\SqlStatement.java,bindBeanList,"public final This  (String key List<?> values List<String> propertyNames) throws UnableToCreateStatementException { if (values.isEmpty()) { throw new IllegalArgumentException(getClass().getSimpleName() + "".bindBeanList was called with no values.""); } if (propertyNames.isEmpty()) { throw new IllegalArgumentException(getClass().getSimpleName() + "".bindBeanList was called with no properties.""); } StringBuilder names=new StringBuilder(); StatementContext ctx=getContext(); for (int valueIndex=0; valueIndex < values.size(); valueIndex++) { if (valueIndex > 0) { names.append(' '); } Object bean=values.get(valueIndex); BeanPropertyArguments beanProperties=new BeanPropertyArguments(null bean); names.append(""(""); for (int propertyIndex=0; propertyIndex < propertyNames.size(); propertyIndex++) { if (propertyIndex > 0) { names.append("" ""); } String propertyName=propertyNames.get(propertyIndex); String name=""__"" + key + ""_""+ valueIndex+ ""_""+ propertyName; names.append(':').append(name); Argument argument=beanProperties.find(propertyName ctx).orElseThrow(() -> new UnableToCreateStatementException(""Unable to get "" + propertyName + "" argument for ""+ bean ctx)); bind(name argument); } names.append("")""); } return define(key names.toString()); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\SqlStatement.java,bindBinaryStream,public final This  (String name InputStream value int length){ return bind(name new InputStreamArgument(value length false)); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\SqlStatement.java,bindBySqlType,public final This  (int position Object value int sqlType){ return bind(position new ObjectArgument(value sqlType)); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\SqlStatement.java,bindByType,public final This  (String name Object value GenericType<?> argumentType){ return bindByType(name value argumentType.getType()); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\SqlStatement.java,bindFields,public This  (String prefix Object object){ return bindNamedArgumentFinder(new ObjectFieldArguments(prefix object)); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\SqlStatement.java,bindList,"public final This  (String key List<?> values){ if (values.isEmpty()) { throw new IllegalArgumentException(getClass().getSimpleName() + "".bindList was called with an empty list.""); } StringBuilder names=new StringBuilder(); for (int i=0; i < values.size(); i++) { String name=""__"" + key + ""_""+ i; if (i > 0) { names.append(' '); } String paramName=getConfig().get(SqlStatements.class).getSqlParser().nameParameter(name getContext()); names.append(paramName); bind(name values.get(i)); } return define(key names.toString()); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\SqlStatement.java,bindMap,public This  (Map<String ?> map){ return map == null ? typedThis : bindNamedArgumentFinder(new MapArguments(map)); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\SqlStatement.java,bindMethods,public This  (String prefix Object object){ return bindNamedArgumentFinder(new ObjectMethodArguments(prefix object)); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\SqlStatement.java,bindNamedArgumentFinder,public This  (final NamedArgumentFinder namedArgumentFinder){ if (namedArgumentFinder != null) { getBinding().addNamedArgumentFinder(namedArgumentFinder); } return typedThis; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\SqlStatement.java,bindNull,public final This  (int position int sqlType){ return bind(position new NullArgument(sqlType)); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\SqlStatement.java,cleanupHandle,private This  (Consumer<Handle> action){ addCleanable(() -> { if (handle != null) { if (handle.isInTransaction()) { action.accept(handle); } handle.close(); } } ); return typedThis; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\SqlStatement.java,cleanupHandleCommit,public This  (){ return cleanupHandle(Handle::commit); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\SqlStatement.java,cleanupHandleRollback,public This  (){ return cleanupHandle(Handle::rollback); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\SqlStatement.java,defineList,"public final This  (String key List<?> values){ if (values.isEmpty()) { throw new IllegalArgumentException(getClass().getSimpleName() + "".defineList was called with an empty list.""); } if (values.contains(null)) { throw new IllegalArgumentException(getClass().getSimpleName() + "".defineList was called with a list containing null values.""); } String value=values.stream().map(Object::toString).collect(joining(""  "")); return define(key value); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\SqlStatement.java,factoryNotFound,"private UnsupportedOperationException  (Type type Object value){ if (type instanceof Class<?>) { final TypeVariable<?>[] params=((Class<?>)type).getTypeParameters(); if (params.length > 0) { return new UnsupportedOperationException(""No type parameters found for erased type '"" + type + Arrays.toString(params)+ ""'. To bind a generic type  prefer using bindByType.""); } } return new UnsupportedOperationException(""No argument factory registered for '"" + value + ""' of type ""+ type); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\SqlStatement.java,getBinding,protected Binding  (){ return getContext().getBinding(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\SqlStatement.java,getSql,protected String  (){ return sql; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\SqlStatement.java,internalExecute,"PreparedStatement  (){ String renderedSql=getConfig(SqlStatements.class).getTemplateEngine().render(sql getContext()); getContext().setRenderedSql(renderedSql); ParsedSql parsedSql=getConfig(SqlStatements.class).getSqlParser().parse(renderedSql getContext()); String sql=parsedSql.getSql(); ParsedParameters parsedParameters=parsedSql.getParameters(); getContext().setParsedSql(parsedSql); try { if (getClass().isAssignableFrom(Call.class)) { stmt=handle.getStatementBuilder().createCall(handle.getConnection() sql getContext()); } else { stmt=handle.getStatementBuilder().create(handle.getConnection() sql getContext()); } } catch ( SQLException e) { throw new UnableToCreateStatementException(e getContext()); } addCleanable(() -> handle.getStatementBuilder().close(handle.getConnection() this.sql stmt)); getContext().setStatement(stmt); beforeBinding(stmt); ArgumentBinder.bind(parsedParameters getBinding() stmt getContext()); beforeExecution(stmt); try { final long start=System.nanoTime(); stmt.execute(); final long elapsedTime=System.nanoTime() - start; LOG.trace(""Execute SQL \""{}\"" in {}ms"" sql elapsedTime / 1000000L); getConfig(SqlStatements.class).getTimingCollector().collect(elapsedTime getContext()); } catch ( SQLException e) { try { stmt.close(); } catch ( SQLException e1) { e.addSuppressed(e1); } throw new UnableToExecuteStatementException(e getContext()); } afterExecution(stmt); return stmt; } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\SqlStatement.java,mapperForType,"RowMapper<?>  (Type type){ return getConfig(Mappers.class).findFor(type).orElseThrow(() -> new UnsupportedOperationException(""No mapper registered for "" + type)); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\SqlStatement.java,setQueryTimeout,public This  (final int seconds){ return addCustomizer(StatementCustomizers.statementTimeout(seconds)); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\main\java\org\jdbi\v3\core\statement\SqlStatement.java,toArgument,private Argument  (Type type Object value){ return getConfig(Arguments.class).findFor(type value).orElseThrow(() -> factoryNotFound(type value)); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\argument\TestAbstractArgumentFactory.java,Box, (T value){ this.value=value; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\argument\TestAbstractArgumentFactory.java,BoxOfStringArgumentFactory, (){ super(Types.VARCHAR); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\argument\TestAbstractArgumentFactory.java,SimpleArgumentFactory, (){ super(Types.VARCHAR); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\argument\TestAbstractArgumentFactory.java,SimpleType, (String value){ this.value=value; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\argument\TestAbstractArgumentFactory.java,build,@Override protected Argument  (Box<String> value ConfigRegistry config){ return (pos stmt ctx) -> stmt.setString(pos value.value); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\argument\TestAbstractArgumentFactory.java,testExpectedClass,"@Test public void  () throws SQLException { Argument argument=new SimpleArgumentFactory().build(SimpleType.class new SimpleType(""foo"") config).orElse(null); assertThat(argument).isNotNull(); argument.apply(1 statement ctx); verify(statement).setString(1 """
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\argument\TestAbstractArgumentFactory.java,testExpectedGenericType,"@Test public void  () throws SQLException { Argument argument=new BoxOfStringArgumentFactory().build(BOX_OF_STRING_TYPE new Box<>(""foo"") config).orElse(null); assertThat(argument).isNotNull(); argument.apply(1 statement ctx); verify(statement).setString(1"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\argument\TestAbstractArgumentFactory.java,testExpectedGenericTypeWithDifferentParameter,"@Test public void  (){ assertThat(new BoxOfStringArgumentFactory().build(BOX_OF_OBJECT_TYPE new Box<Object>(""foo"") config)).isEmpty(); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\argument\TestAbstractArgumentFactory.java,testNullOfDifferentType,@Test public void  () throws SQLException { assertThat(new SimpleArgumentFactory().build(Integer.class null config)).isEmpty(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\argument\TestAbstractArgumentFactory.java,testNullOfExpectedClass,@Test public void  () throws SQLException { Argument argument=new SimpleArgumentFactory().build(SimpleType.class null config).orElse(null); assertThat(argument).isNotNull(); argument.apply(3 statement ctx); verify(statement).setNull(3 Types.VARCHAR); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\argument\TestAbstractArgumentFactory.java,testNullOfExpectedGenericType,@Test public void  () throws SQLException { Argument argument=new BoxOfStringArgumentFactory().build(BOX_OF_STRING_TYPE null config).orElse(null); assertThat(argument).isNotNull(); argument.apply(2 statement ctx); verify(statement).setNull(2 Types.VARCHAR
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\argument\TestAbstractArgumentFactory.java,testObjectClassWithInstanceOfExpectedType,"@Test public void  () throws SQLException { Argument argument=new SimpleArgumentFactory().build(Object.class new SimpleType(""bar"") config).orElse(null); assertThat(argument).isNotNull(); argument.apply(2 statement ctx); verify(statement).setString(2 ""bar"""
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\argument\TestAbstractArgumentFactory.java,testValueOfDifferentType,@Test public void  () throws SQLException { assertThat(new SimpleArgumentFactory().build(int.class 1 config)).isEmpty(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\argument\TestArgumentsRegistry.java,build,@Override public Optional<Argument>  (Type expectedType Object value ConfigRegistry config){ return value instanceof Weird ? Optional.of(new WeirdArgument()) : Optional.empty(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\argument\TestArgumentsRegistry.java,testExplicitWaffleLong,@Test public void  () throws Exception { ctx.findArgumentFor(Long.class 3L).get().apply(1 stmt null); verify(stmt).setLong(1 3); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\argument\TestArgumentsRegistry.java,testExplicitWaffleShort,@Test public void  () throws Exception { ctx.findArgumentFor(short.class (short)2000).get().apply(2 stmt null); verify(stmt).setShort(2 (short)2000); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\argument\TestArgumentsRegistry.java,testExplicitWaffleString,@Test public void  () throws Exception { ctx.findArgumentFor(String.class I_AM_A_STRING).get().apply(3 stmt null); verify(stmt).setString(3 I_AM_A_STRING); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\argument\TestArgumentsRegistry.java,testPull88WeirdClassArgumentFactory,@Test public void  () throws Exception { handle.registerArgument(new WeirdClassArgumentFactory()); assertThat(ctx.findArgumentFor(Weird.class new Weird())).hasValueSatisfying(a -> assertThat(a).isInstanceOf(WeirdArgument.class)); assertThat(ctx.findArgume
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\argument\TestArgumentsRegistry.java,testPull88WeirdValueArgumentFactory,@Test public void  (){ handle.registerArgument(new WeirdValueArgumentFactory()); assertThat(ctx.findArgumentFor(Weird.class new Weird())).hasValueSatisfying(a -> assertThat(a).isInstanceOf(WeirdArgument.class)); assertThat(ctx.findArgumentFor(Object.class
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\argument\TestArgumentsRegistry.java,testWaffleLong,@Test public void  () throws Exception { ctx.findArgumentFor(Object.class 3L).get().apply(1 stmt null); verify(stmt).setLong(1 3); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\argument\TestArgumentsRegistry.java,testWaffleShort,@Test public void  () throws Exception { ctx.findArgumentFor(Object.class (short)2000).get().apply(2 stmt null); verify(stmt).setShort(2 (short)2000); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\argument\TestArgumentsRegistry.java,testWaffleString,@Test public void  () throws Exception { ctx.findArgumentFor(Object.class I_AM_A_STRING).get().apply(3 stmt null); verify(stmt).setString(3 I_AM_A_STRING); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\argument\TestArgumentFactory.java,Name,public  (String first String last){ this.first=first; this.last=last; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\argument\TestArgumentFactory.java,build,@Override public Optional<Argument>  (Type expectedType Object value ConfigRegistry config){ if (expectedType == Name.class || value instanceof Name) { Name nameValue=(Name)value; return config.get(Arguments.class).findFor(String.class nameValue.getFullNa
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\argument\TestArgumentFactory.java,getFullName,"public String  (){ return first + "" "" + last; } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\argument\TestArgumentFactory.java,testOnPreparedBatch,"@Test public void  () throws Exception { Handle h=dbRule.getSharedHandle(); PreparedBatch batch=h.prepareBatch(""insert into something (id  name) values (:id  :name)""); batch.registerArgument(new NameAF()); batch.bind(""id"" 1).bind(""name"" new Name(""Brian"" """
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\argument\TestArgumentFactory.java,testRegisterOnHandle,"@Test public void  () throws Exception { try (Handle h=dbRule.openHandle()){ h.registerArgument(new NameAF()); h.createUpdate(""insert into something (id  name) values (:id  :name)"").bind(""id"" 7).bind(""name"" new Name(""Brian"" ""McCallister"")).execute(); Stri"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\argument\TestArgumentFactory.java,testRegisterOnJdbi,"@Test public void  () throws Exception { final Jdbi db=dbRule.getJdbi(); db.registerArgument(new NameAF()); try (Handle h=db.open()){ h.createUpdate(""insert into something (id  name) values (:id  :name)"").bind(""id"" 7).bind(""name"" new Name(""Brian"" ""McCalli"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\argument\TestArgumentFactory.java,testRegisterOnStatement,"@Test public void  () throws Exception { dbRule.getSharedHandle().createUpdate(""insert into something (id  name) values (:id  :name)"").registerArgument(new NameAF()).bind(""id"" 1).bind(""name"" new Name(""Brian"" ""McCallister"")).execute(); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\argument\TestArgumentFactory.java,toString,"@Override public String  (){ return ""<Name first="" + first + "" last=""+ last+ "" >""; } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\argument\TestBeanArguments.java,getBar,"@SuppressWarnings(""unused"") protected String  (){ return ""baz""; } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\argument\TestBeanArguments.java,getFoo,"@SuppressWarnings(""unused"") public BigDecimal  (){ return null; } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\argument\TestBeanArguments.java,testBindBare,"@Test public void  () throws Exception { Object bean=new Object(){ @SuppressWarnings(""unused"") public BigDecimal getFoo(){ return BigDecimal.ONE; } } ; new BeanPropertyArguments("""" bean).find(""foo"" ctx).get().apply(5 stmt null); verify(stmt).setBigDecimal"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\argument\TestBeanArguments.java,testBindIllegalAccess,"@Test public void  () throws Exception { Object bean=new Object(){ @SuppressWarnings(""unused"") public String getBar() throws IllegalAccessException { throw new IllegalAccessException(); } } ; exception.expect(UnableToCreateStatementException.class); new B"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\argument\TestBeanArguments.java,testBindNoGetter,"@Test public void  () throws Exception { Object bean=new Object(){ @SuppressWarnings(""unused"") public void setBar( String bar){ } } ; exception.expect(UnableToCreateStatementException.class); new BeanPropertyArguments(""foo"" bean).find(""foo.bar"" ctx); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\argument\TestBeanArguments.java,testBindNonPublicGetter,"@Test public void  () throws Exception { Object bean=new Object(){ @SuppressWarnings(""unused"") protected String getBar(){ return ""baz""; } @SuppressWarnings(""unused"") public void setBar( String bar){ } } ; exception.expect(UnableToCreateStatementException."
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\argument\TestBeanArguments.java,testBindNull,"@Test public void  () throws Exception { Object bean=new Object(){ @SuppressWarnings(""unused"") public BigDecimal getFoo(){ return null; } } ; new BeanPropertyArguments("""" bean).find(""foo"" ctx).get().apply(3 stmt null); verify(stmt).setNull(3 Types.NUMERIC"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\argument\TestBeanArguments.java,testBindPrefix,"@Test public void  () throws Exception { Object bean=new Object(){ @SuppressWarnings(""unused"") public String getBar(){ return ""baz""; } } ; new BeanPropertyArguments(""foo"" bean).find(""foo.bar"" ctx).get().apply(3 stmt null); verify(stmt).setString(3 ""baz"");"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\argument\TestCollectionArguments.java,testBindTypeErased,"@Test public void  () throws Exception { try (final Handle h=db.openHandle()){ assertThatThrownBy(() -> h.execute(""SELECT * FROM something WHERE id = ANY(:ids)"" Collections.singleton(1))).isInstanceOf(UnsupportedOperationException.class).hasMessageContain"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\argument\TestInetAddressH2.java,getInetType,"protected String  (){ return ""VARCHAR""; } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\argument\TestInetAddressH2.java,testInetAddress,"@Test public void  () throws Exception { dbRule.getJdbi().useHandle(h -> { h.execute(""CREATE TABLE addrs (addr "" + getInetType() + "" PRIMARY KEY)""); String insert=""INSERT INTO addrs VALUES(?)""; InetAddress ipv4=InetAddress.getByName(""1.2.3.4""); InetAddres"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\array\TestVendorArrays.java,init,"private void  (Jdbi db){ db.registerArrayType(Integer.class ""int""); db.registerArrayType(String.class ""varchar""); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\argument\TestMapArguments.java,testNullBinding,"@Test public void  () throws Exception { Map<String Object> args=Collections.singletonMap(""foo"" null); new MapArguments(args).find(""foo"" ctx).get().apply(3 stmt null); verify(stmt).setNull(3 Types.OTHER); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\array\TestVendorArrays.java,testHsqlDb,"@Test public void  (){ Jdbi db=Jdbi.create(""jdbc:hsqldb:mem:"" + UUID.randomUUID()); init(db); try (Handle handle=db.open()){ handle.execute(""create table player_stats ("" + ""name varchar(64) primary key  "" + ""seasons varchar(36) array  ""+ ""points int array"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\argument\TestNamedParams.java,NoArgFunctions,public  (int i String s){ this.i=i; this.s=s; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\argument\TestNamedParams.java,PublicFields,public  (int id String name){ this.id=id; this.name=name; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\argument\TestNamedParams.java,getName,"@SuppressWarnings(""unused"") public String  (){ return ""Keith""; } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\argument\TestNamedParams.java,getNested,"@SuppressWarnings(""unused"") public Something  (){ return thing; } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\argument\TestNamedParams.java,id,public int  (){ return i; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\argument\TestNamedParams.java,name,public String  (){ return s; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\argument\TestNamedParams.java,nested,"@SuppressWarnings(""unused"") public NoArgFunctions  (){ return new NoArgFunctions(0 ""Keith""); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\argument\TestNamedParams.java,testBeanPropertyBinding,"@Test public void  () throws Exception { Handle h=dbRule.openHandle(); Something original=new Something(0 ""Keith""); assertThat(h.createUpdate(""insert into something (id  name) values (:id  :name)"").bindBean(original).execute()).isEqualTo(1); assertThat(h."
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\argument\TestNamedParams.java,testBeanPropertyNestedBinding,"@Test public void  () throws Exception { Handle h=dbRule.openHandle(); Something thing=new Something(0 ""Keith""); assertThat(h.createUpdate(""insert into something (id  name) values (:my.nested.id  :my.nested.name)"").bindBean(""my"" new Object(){ @SuppressWar"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\argument\TestNamedParams.java,testBeanPropertyPrefixBinding,"@Test public void  () throws Exception { Handle h=dbRule.openHandle(); Something original=new Something(0 ""Keith""); assertThat(h.createUpdate(""insert into something (id  name) values (:my.id  :my.name)"").bindBean(""my"" original).execute()).isEqualTo(1); as"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\argument\TestNamedParams.java,testCascadedLazyArgs,"@Test public void  () throws Exception { Handle h=dbRule.openHandle(); Update s=h.createUpdate(""insert into something (id  name) values (:id  :name)""); Map<String Object> args=new HashMap<>(); args.put(""id"" 0); s.bindMap(args); s.bindBean(new Object(){ @S"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\argument\TestNamedParams.java,testDemo,"@Test public void  () throws Exception { Handle h=dbRule.getSharedHandle(); h.createUpdate(""insert into something (id  name) values (:id  :name)"").bind(""id"" 1).bind(""name"" ""Brian"").execute(); h.execute(""insert into something (id  name) values (?  ?)"" 2 ""E"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\argument\TestNamedParams.java,testFieldsBinding,"@Test public void  () throws Exception { Handle h=dbRule.openHandle(); assertThat(h.createUpdate(""insert into something (id  name) values (:id  :name)"").bindFields(new PublicFields(0 ""Keith"")).execute()).isEqualTo(1); assertThat(h.select(""select * from so"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\argument\TestNamedParams.java,testFieldsNestedBinding,"@Test public void  () throws Exception { Handle h=dbRule.openHandle(); assertThat(h.createUpdate(""insert into something (id  name) values (:my.nested.id  :my.nested.name)"").bindFields(""my"" new Object(){ @SuppressWarnings(""unused"") public PublicFields nest"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\argument\TestNamedParams.java,testFieldsPrefixBinding,"@Test public void  () throws Exception { Handle h=dbRule.openHandle(); assertThat(h.createUpdate(""insert into something (id  name) values (:my.id  :my.name)"").bindFields(""my"" new PublicFields(0 ""Keith"")).execute()).isEqualTo(1); assertThat(h.select(""selec"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\argument\TestNamedParams.java,testFunctionsBinding,"@Test public void  () throws Exception { Handle h=dbRule.openHandle(); assertThat(h.createUpdate(""insert into something (id  name) values (:id  :name)"").bindMethods(new NoArgFunctions(0 ""Keith"")).execute()).isEqualTo(1); assertThat(h.select(""select * from"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\argument\TestNamedParams.java,testFunctionsNestedBinding,"@Test public void  () throws Exception { Handle h=dbRule.openHandle(); assertThat(h.createUpdate(""insert into something (id  name) values (:my.nested.id  :my.nested.name)"").bindMethods(""my"" new Object(){ @SuppressWarnings(""unused"") public NoArgFunctions n"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\argument\TestNamedParams.java,testFunctionsPrefixBinding,"@Test public void  () throws Exception { Handle h=dbRule.openHandle(); assertThat(h.createUpdate(""insert into something (id  name) values (:my.id  :my.name)"").bindMethods(""my"" new NoArgFunctions(0 ""Keith"")).execute()).isEqualTo(1); assertThat(h.select(""se"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\argument\TestNamedParams.java,testInsert,"@Test public void  () throws Exception { Handle h=dbRule.openHandle(); Update insert=h.createUpdate(""insert into something (id  name) values (:id  :name)""); insert.bind(""id"" 1); insert.bind(""name"" ""Brian""); int count=insert.execute(); assertThat(count).is"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\argument\TestNamedParams.java,testMapKeyBinding,"@Test public void  () throws Exception { Handle h=dbRule.openHandle(); Update s=h.createUpdate(""insert into something (id  name) values (:id  :name)""); Map<String Object> args=new HashMap<>(); args.put(""id"" 0); args.put(""name"" ""Keith""); s.bindMap(args); i"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\collector\OptionalCollectorsTest.java,toOptional,@Test public void  (){ Collector<String ? Optional<String>> collector=OptionalCollectors.toOptional(); assertThat(Stream.<String>empty().collect(collector)).isEmpty(); assertThat(Stream.of((String)null).collect(collector)).isEmpty(); assertThat(Stream.of(
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\collector\OptionalCollectorsTest.java,toOptionalDouble,@Test public void  (){ Collector<Double ? OptionalDouble> collector=OptionalCollectors.toOptionalDouble(); assertThat(Stream.<Double>empty().collect(collector)).isEmpty(); assertThat(Stream.of((Double)null).collect(collector)).isEmpty(); assertThat(Stream
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\collector\OptionalCollectorsTest.java,toOptionalInt,@Test public void  (){ Collector<Integer ? OptionalInt> collector=OptionalCollectors.toOptionalInt(); assertThat(Stream.<Integer>empty().collect(collector)).isEmpty(); assertThat(Stream.of((Integer)null).collect(collector)).isEmpty(); assertThat(Stream.of
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\collector\OptionalCollectorsTest.java,toOptionalLong,@Test public void  (){ Collector<Long ? OptionalLong> collector=OptionalCollectors.toOptionalLong(); assertThat(Stream.<Long>empty().collect(collector)).isEmpty(); assertThat(Stream.of((Long)null).collect(collector)).isEmpty(); assertThat(Stream.of(1L).co
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\collector\BuiltInCollectorFactoryTest.java,collections,@Test public void  (){ testCollectionType(new GenericType<Collection<String>>(){ } ); testCollectionType(new GenericType<List<String>>(){ } ); testCollectionType(new GenericType<ArrayList<String>>(){ } ); testCollectionType(new GenericType<LinkedList<Stri
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\collector\BuiltInCollectorFactoryTest.java,maps,@Test public void  (){ testMapType(new GenericType<Map<Long String>>(){ } ); testMapType(new GenericType<HashMap<Long String>>(){ } ); testMapType(new GenericType<LinkedHashMap<Long String>>(){ } ); testMapType(new GenericType<SortedMap<Long String>>(){ }
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\collector\BuiltInCollectorFactoryTest.java,optional,@Test public void  (){ Type optionalString=new GenericType<Optional<String>>(){ } .getType(); assertThat(factory.accepts(optionalString)).isTrue(); assertThat(factory.accepts(Optional.class)).isFalse(); assertThat(factory.elementType(optionalString)).cont
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\collector\BuiltInCollectorFactoryTest.java,testCollectionType,"private <C extends Collection<String>>void  (GenericType<C> genericType){ Type containerType=genericType.getType(); Class<?> erasedType=getErasedType(containerType); assertThat(factory.accepts(containerType)).isTrue(); assertThat(factory.accepts(erasedType)).isFalse(); assertThat(factory.elementType(containerType)).contains(String.class); Collector<String ? C> collector=(Collector<String ? C>)factory.build(containerType); assertThat(Stream.of(""foo"" ""bar"" ""baz"").collect(collector)).isInstanceOf(erasedType).containsOnly(""foo"" ""bar"" ""baz""); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\collector\BuiltInCollectorFactoryTest.java,testMapType,"private <M extends Map<Long String>>void  (GenericType<M> genericType){ Type containerType=genericType.getType(); Class<?> erasedType=getErasedType(containerType); assertThat(factory.accepts(containerType)).isTrue(); assertThat(factory.accepts(erasedType)).isFalse(); assertThat(factory.elementType(containerType)).contains(resolveMapEntryType(Long.class String.class)); Collector<Map.Entry<Long String> ? M> collector=(Collector<Map.Entry<Long String> ? M>)factory.build(containerType); assertThat(Stream.of(entry(1L ""foo"") entry(2L ""bar"") entry(3L ""baz"")).collect(collector)).isInstanceOf(erasedType).containsOnly(entry(1L ""foo"") entry(2L ""bar"") entry(3L ""baz"")); assertThatThrownBy(() -> Stream.of(entry(1L ""foo"") entry(1L ""bar"")).collect(collector)).isInstanceOf(IllegalStateException.class).hasMessageContaining(""Multiple values""); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\h2\TestH2SqlArrays.java,setUp,"@Before public void  (){ h=dbRule.getSharedHandle(); h.useTransaction(th -> { th.execute(""DROP TABLE IF EXISTS uuids""); th.execute(""CREATE TABLE uuids (u ARRAY)""); } ); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\h2\TestH2SqlArrays.java,testUuidArray,"@Test public void  () throws Exception { assertThat(h.createUpdate(U_INSERT).bind(""u"" testUuids).execute()).isEqualTo(1); assertThat(h.createQuery(U_SELECT).mapTo(UUID[].class).findOnly()).containsExactly(testUuids); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\h2\TestH2SqlArrays.java,testUuidArrayList,"@Test public void  () throws Exception { assertThat(h.createUpdate(U_INSERT).bindByType(""u"" new ArrayList<>(Arrays.asList(testUuids)) UUID_LIST).execute()).isEqualTo(1); assertThat(h.createQuery(U_SELECT).mapTo(UUID_ARRAYLIST).findOnly()).containsExactly("
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\h2\TestH2SqlArrays.java,testUuidHashSet,"@Test public void  () throws Exception { assertThat(h.createUpdate(U_INSERT).bindByType(""u"" new HashSet<>(Arrays.asList(testUuids)) UUID_SET).execute()).isEqualTo(1); assertThat(h.createQuery(U_SELECT).mapTo(UUID_HASHSET).findOnly()).containsExactlyInAnyO"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\h2\TestH2SqlArrays.java,testUuidLinkedHashSet,"@Test public void  () throws Exception { assertThat(h.createUpdate(U_INSERT).bindByType(""u"" new LinkedHashSet<>(Arrays.asList(testUuids)) UUID_SET).execute()).isEqualTo(1); assertThat(h.createQuery(U_SELECT).mapTo(UUID_LINKEDHASHSET).findOnly()).isInstanc"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\h2\TestH2SqlArrays.java,testUuidList,"@Test public void  () throws Exception { assertThat(h.createUpdate(U_INSERT).bindByType(""u"" Arrays.asList(testUuids) UUID_LIST).execute()).isEqualTo(1); assertThat(h.createQuery(U_SELECT).mapTo(UUID_LIST).findOnly()).containsExactly(testUuids); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\HandleAccess.java,createHandle,public static Handle  (){ Connection fakeConnection=Mockito.mock(Connection.class); return new Handle(new ConfigRegistry() new LocalTransactionHandler() new DefaultStatementBuilder() fakeConnection); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\generic\GenericTypeTest.java,generic,@Test public void  (){ assertThat(new GenericType<String>(){ } .getType()).isEqualTo(String.class); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\generic\GenericTypeTest.java,raw,"@SuppressWarnings("" types"") @Test(expected=UnsupportedOperationException.class) public void raw(){ new GenericType(){ } ; } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\internal\IterableLikeTest.java,iterator,"@Override public Iterator<String>  (){ final List<String> tmp=new ArrayList<String>(); tmp.add(""1""); tmp.add(""2""); return tmp.iterator(); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\internal\IterableLikeTest.java,testEmptyArray,@Test public void  (){ final Iterator<Object> it=IterableLike.of(new int[]{}); assertThat(it).isEmpty(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\internal\IterableLikeTest.java,testEmptyArrayToIterator,@Test public void  (){ final Object[] out=toArray(IterableLike.of(new int[]{})); assertThat(out).isEmpty(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\internal\IterableLikeTest.java,testEmptyListToIterator,@Test public void  (){ final Object[] out=toArray(IterableLike.of(new ArrayList<Integer>())); assertThat(out).isEmpty(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\internal\IterableLikeTest.java,testIntArray,@Test public void  (){ final Iterator<Object> it=IterableLike.of(new int[]{1 2 3}); assertThat(it).containsExactly(1 2 3); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\internal\IterableLikeTest.java,testIsEmptyEmptyList,@Test public void  (){ assertThat(IterableLike.isEmpty(new ArrayList<String>())).isTrue(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\internal\IterableLikeTest.java,testIsEmptyEmptyObjectArray,@Test public void  (){ assertThat(IterableLike.isEmpty(new Object[]{})).isTrue(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\internal\IterableLikeTest.java,testIsEmptyEmptyPrimitiveArray,@Test public void  (){ assertThat(IterableLike.isEmpty(new int[]{})).isTrue(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\internal\IterableLikeTest.java,testIsEmptyList,"@Test public void  (){ final List<String> in=new ArrayList<String>(); in.add(""1""); in.add(""2""); in.add(""3""); assertThat(IterableLike.isEmpty(in)).isFalse(); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\internal\IterableLikeTest.java,testIsEmptyNull,@Test(expected=IllegalArgumentException.class) public void  (){ IterableLike.isEmpty(null); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\internal\IterableLikeTest.java,testIsEmptyObject,@Test(expected=IllegalArgumentException.class) public void  (){ IterableLike.isEmpty(new Object()); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\internal\IterableLikeTest.java,testIsEmptyObjectArray,"@Test public void  (){ assertThat(IterableLike.isEmpty(new Object[]{""1"" ""2"" ""3""})).isFalse(); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\internal\IterableLikeTest.java,testIsEmptyPrimitive,@Test(expected=IllegalArgumentException.class) public void  (){ IterableLike.isEmpty(5); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\internal\IterableLikeTest.java,testIsEmptyPrimitiveArray,@Test public void  (){ assertThat(IterableLike.isEmpty(new int[]{1 2 3})).isFalse(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\internal\IterableLikeTest.java,testIterableToIterator,"@Test public void  (){ final Iterable<String> in=new Iterable<String>(){ @Override public Iterator<String> iterator(){ final List<String> tmp=new ArrayList<String>(); tmp.add(""1""); tmp.add(""2""); return tmp.iterator(); } } ; final Object[] out=toArray(Iter"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\internal\IterableLikeTest.java,testListToIterator,"@Test public void  (){ final List<String> in=new ArrayList<String>(2); in.add(""1""); in.add(""2""); final Object[] out=toArray(IterableLike.of(in)); assertThat(out).containsExactly(""1"" ""2""); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\internal\IterableLikeTest.java,testNullToIterator,@Test(expected=IllegalArgumentException.class) public void  (){ IterableLike.of(null); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\internal\IterableLikeTest.java,testObjectToIterator,@Test(expected=IllegalArgumentException.class) public void  (){ IterableLike.of(new Object()); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\internal\IterableLikeTest.java,testOtherClassToIterator,"@Test(expected=IllegalArgumentException.class) public void  (){ IterableLike.of(""bla""); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\internal\IterableLikeTest.java,testOverflow,@Test(expected=NoSuchElementException.class) public void  (){ final Iterator<?> it=IterableLike.of(new int[]{1}); assertThat(it.hasNext()).isTrue(); assertThat(it.next()).isEqualTo(1); it.next(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\internal\IterableLikeTest.java,testOverflowOnEmpty,@Test(expected=NoSuchElementException.class) public void  (){ final Iterator<?> it=IterableLike.of(new int[]{}); it.next(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\internal\IterableLikeTest.java,testPrimitiveArrayToIterator,@Test public void  (){ final int[] in=new int[]{1 2}; final Object[] out=toArray(IterableLike.of(in)); assertThat(out).containsExactly(1 2); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\internal\IterableLikeTest.java,testPrimitiveToIterator,@Test(expected=IllegalArgumentException.class) public void  (){ IterableLike.of(1); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\internal\IterableLikeTest.java,testSetToIterator,"@Test public void  (){ final Set<String> in=new HashSet<String>(2); in.add(""1""); in.add(""2""); final Object[] out=toArray(IterableLike.of(in)); assertThat(out).containsExactly(""1"" ""2""); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\internal\IterableLikeTest.java,testStringArrayToIterator,"@Test public void  (){ final String[] in=new String[]{""1"" ""2""}; final Object[] out=toArray(IterableLike.of(in)); assertThat(out).containsExactly(""1"" ""2""); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\internal\IterableLikeTest.java,toArray,private static Object[]  (final Iterator<?> iterator){ final List<Object> out=new ArrayList<Object>(); while (iterator.hasNext()) { out.add(iterator.next()); } return out.toArray(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\internal\lexer\TestColonGrammar.java,createLexer,@Override protected Lexer  (String s){ return new ColonStatementLexer(new ANTLRStringStream(s)); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\internal\lexer\TestColonGrammar.java,nameOf,"@Override protected String  (int type){ switch (type) { case LITERAL: return ""LITERAL""; case QUOTED_TEXT: return ""QUOTED_TEXT""; case NAMED_PARAM: return ""NAMED_PARAM""; case EOF: return ""EOF""; } return String.valueOf(type); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\internal\lexer\TestColonGrammar.java,testEmptyQuote,"@Test public void  () throws Exception { expect(""select ''"" LITERAL QUOTED_TEXT EOF); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\internal\lexer\TestColonGrammar.java,testEscapedColon,"@Test public void  () throws Exception { expect(""insert into foo (val) VALUE (:bar\\:\\:type)"" LITERAL NAMED_PARAM ESCAPED_TEXT ESCAPED_TEXT LITERAL EOF); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\internal\lexer\TestColonGrammar.java,testEscapedEmptyQuote,"@Test public void  () throws Exception { expect(""select '\\''"" LITERAL QUOTED_TEXT EOF); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\internal\lexer\TestColonGrammar.java,testExclamationWorks,"@Test public void  () throws Exception { expect(""select1 != 2 from dual"" LITERAL EOF); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\internal\lexer\TestColonGrammar.java,testHashInColumnNameWorks,"@Test public void  () throws Exception { expect(""select col# from something where id = :id"" LITERAL NAMED_PARAM EOF); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\internal\lexer\TestColonGrammar.java,testMixed,"@Test public void  () throws Exception { expect(""select id from something where name like ':foo' and id = ? and name like :name"" LITERAL QUOTED_TEXT LITERAL POSITIONAL_PARAM LITERAL NAMED_PARAM EOF); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\internal\lexer\TestColonGrammar.java,testNamedOnly,"@Test public void  () throws Exception { expect(""select id from something where name like ':foo' and id = :id and name like :name"" LITERAL QUOTED_TEXT LITERAL NAMED_PARAM LITERAL NAMED_PARAM EOF); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\internal\lexer\TestColonGrammar.java,testThisBrokeATest,"@Test public void  () throws Exception { expect(""insert into something (id  name) values (:id  :name)"" LITERAL NAMED_PARAM LITERAL NAMED_PARAM LITERAL EOF); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\internal\lexer\TestPrintfGrammar.java,createLexer,@Override protected Lexer  (String s){ return new FormatterStatementLexer(new ANTLRStringStream(s)); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\internal\lexer\TestPrintfGrammar.java,nameOf,"@Override protected String  (int type){ switch (type) { case QUOTED_TEXT: return ""QUOTED_TEXT""; case INTEGER: return ""INTEGER""; case STRING: return ""STRING""; case LITERAL: return ""LITERAL""; case EOF: return ""EOF""; } return ""unknown""; } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\internal\lexer\TestPrintfGrammar.java,testFoo,"@Test public void  () throws Exception { expect(""select id from something where name like '%d' and id = %d and name like %s"" LITERAL QUOTED_TEXT LITERAL INTEGER LITERAL STRING EOF); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\locator\TestClasspathSqlLocator.java,getResourceAsStream,@Override public InputStream  (String s){ loadCount.incrementAndGet(); return super.getResourceAsStream(s); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\locator\TestClasspathSqlLocator.java,testCachesResultAfterFirstLookup,@Test public void  () throws Exception { ClassLoader classLoader=Thread.currentThread().getContextClassLoader(); final AtomicInteger loadCount=new AtomicInteger(0); Thread.currentThread().setContextClassLoader(new ClassLoader(classLoader){ @Override publi
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\locator\TestClasspathSqlLocator.java,testColonInComment,"@Test public void  () throws Exception { findSqlOnClasspath(getClass() ""test-colon-in-comment""); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\locator\TestClasspathSqlLocator.java,testCommentsInExternalSql,"@Test public void  () throws Exception { Handle h=dbRule.openHandle(); h.execute(findSqlOnClasspath(""insert-eric-with-comments"")); assertThat(h.select(""select name from something"").mapTo(String.class).list()).hasSize(1); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\locator\TestClasspathSqlLocator.java,testLocateByMethodName,"@Test public void  () throws Exception { assertThat(findSqlOnClasspath(getClass() ""testLocateByMethodName"")).contains(""select 1""); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\locator\TestClasspathSqlLocator.java,testLocateNamed,"@Test public void  () throws Exception { Handle h=dbRule.openHandle(); h.execute(findSqlOnClasspath(""insert-keith"")); assertThat(h.select(""select name from something"").mapTo(String.class).list()).hasSize(1); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\locator\TestClasspathSqlLocator.java,testNamedParamsInExternal,"@Test public void  () throws Exception { Handle h=dbRule.openHandle(); h.createUpdate(findSqlOnClasspath(""insert-id-name"")).bind(""id"" 1).bind(""name"" ""Tip"").execute(); assertThat(h.select(""select name from something"").mapTo(String.class).list()).hasSize(1)"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\locator\TestClasspathSqlLocator.java,testNonExistentResource,"@Test public void  () throws Exception { exception.expect(IllegalArgumentException.class); findSqlOnClasspath(""this-does-not-exist""); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\locator\TestClasspathSqlLocator.java,testPositionalParamsInPrepared,"@Test public void  () throws Exception { Handle h=dbRule.openHandle(); h.execute(findSqlOnClasspath(""insert-id-name-positional"") 3 ""Tip""); assertThat(h.select(""select name from something"").mapTo(String.class).list()).hasSize(1); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\locator\TestClasspathSqlLocator.java,testSelectByExtensionMethodName,"@Test public void  () throws Exception { assertThat(findSqlOnClasspath(getClass() ""test-locate-by-custom-name"")).contains(""select 1""); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\locator\TestClasspathSqlLocator.java,testUsefulExceptionForBackTracing,"@Test public void  () throws Exception { Handle h=dbRule.openHandle(); exception.expect(StatementException.class); exception.expectMessage(""insert into something(id  name) values (:id  :name)""); exception.expectMessage(""insert into something(id  name) val"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\mapper\MapEntryMapperTest.java,Phone,public  (int id String phone){ this.id=id; this.phone=phone; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\mapper\MapEntryMapperTest.java,User,public  (int id String name){ this.id=id; this.name=name; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\mapper\MapEntryMapperTest.java,equals,@Override public boolean  (Object o){ if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; Phone phone1=(Phone)o; return id == phone1.id && Objects.equals(phone phone1.phone); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\mapper\MapEntryMapperTest.java,hashCode,@Override public int  (){ return Objects.hash(id phone); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\mapper\MapEntryMapperTest.java,joinRow,"@Test public void  (){ h.execute(""create table user (id int  name varchar)""); h.execute(""create table phone (id int  user_id int  phone varchar)""); h.prepareBatch(""insert into user (id  name) values (?  ?)"").add(1 ""alice"").add(2 ""bob"").add(3 ""cathy"").exec"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\mapper\MapEntryMapperTest.java,keyValueColumns,"@Test public void  (){ h.execute(""create table config (key varchar  value varchar)""); h.prepareBatch(""insert into config (key  value) values (?  ?)"").add(""foo"" ""123"").add(""bar"" ""xyz"").execute(); Map<String String> map=h.createQuery(""select key  value from"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\mapper\MapEntryMapperTest.java,overrideKeyValueColumnAtJdbiLevelWithNullAtStatement,"@Test public void  (){ h.execute(""create table user (id int  name varchar)""); h.execute(""create table phone (id int  user_id int  phone varchar)""); h.prepareBatch(""insert into user (id  name) values (?  ?)"").add(1 ""alice"").add(2 ""bob"").add(3 ""cathy"").exec"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\mapper\MapEntryMapperTest.java,setUp,@Before public void  (){ h=dbRule.getSharedHandle(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\mapper\MapEntryMapperTest.java,toString,"@Override public String  (){ return ""Phone{"" + ""id="" + id + ""  phone='""+ phone+ '\''+ '}'; } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\mapper\MapEntryMapperTest.java,uniqueIndex,"@Test public void  (){ h.execute(""create table user (id int  name varchar)""); h.prepareBatch(""insert into user (id  name) values (?  ?)"").add(1 ""alice"").add(2 ""bob"").add(3 ""cathy"").add(4 ""dilbert"").execute(); Map<Integer User> map=h.createQuery(""select * "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\mapper\MapOptionalTest.java,OptionalBean,public  (OptionalInt intValue Optional<String> name){ this.intValue=intValue; this.name=name; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\mapper\MapOptionalTest.java,testMapOptional,"@Test public void  () throws Exception { final Handle h=db.getSharedHandle(); h.execute(""insert into something(intValue  name) values(1  'Duke')""); h.execute(""insert into something(intValue  name) values(null  null)""); assertThat(h.createQuery(""select * f"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\mapper\JoinRowMapperTest.java,Article,public  (int aid String title){ this.aid=aid; this.title=title; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\mapper\JoinRowMapperTest.java,User,public  (int uid String name){ this.uid=uid; this.name=name; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\mapper\JoinRowMapperTest.java,a,"priv te static Article a(int aid){ return new Article(aid ""a"" + aid); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\mapper\JoinRowMapperTest.java,equals,@Override public boolean  (Object obj){ if (obj instanceof Article) { Article that=(Article)obj; return Objects.equals(aid that.aid) && Objects.equals(title that.title); } return false; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\mapper\JoinRowMapperTest.java,getExpected,public static Multimap<User Article>  (){ Multimap<User Article> expected=HashMultimap.create(); expected.put(u(1) a(2)); expected.put(u(3) a(1)); expected.put(u(3) a(3)); return expected; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\mapper\JoinRowMapperTest.java,hashCode,@Override public int  (){ return Objects.hash(aid title); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\mapper\JoinRowMapperTest.java,setUp,"@Before public void  (){ h=dbRule.getSharedHandle(); h.execute(""CREATE TABLE user ("" + ""uid INTEGER NOT NULL "" + ""name VARCHAR NOT NULL""+ "")""); h.execute(""CREATE TABLE article ("" + ""aid INTEGER NOT NULL "" + ""title VARCHAR NOT NULL""+ "")""); h.execute(""CREAT"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\mapper\JoinRowMapperTest.java,testCartesianProduct,"@Test public void  () throws Exception { Multimap<User Article> product=HashMultimap.create(); h.createQuery(""SELECT * FROM user  article"").map(JoinRowMapper.forTypes(User.class Article.class)).forEach(jr -> product.put(jr.get(User.class) jr.get(Article.c"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\mapper\JoinRowMapperTest.java,testJoin,"@Test public void  () throws Exception { Multimap<User Article> joined=HashMultimap.create(); h.createQuery(""SELECT * FROM user NATURAL JOIN author NATURAL JOIN article"").map(JoinRowMapper.forTypes(User.class Article.class)).forEach(jr -> joined.put(jr.ge"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\mapper\JoinRowMapperTest.java,u,"private static User  (int uid){ return new User(uid ""u"" + uid); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\mapper\reflect\ConstructorMapperTest.java,ConstructorBean,@JdbiConstructor  (String s int i){ this.s=s; this.i=i; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\mapper\reflect\ConstructorMapperTest.java,ConstructorPropertiesBean,"@ConstructorProperties({""s"" ""i""})  (String x int y){ this.s=x; this.i=y; } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\mapper\reflect\ConstructorMapperTest.java,NamedParameterBean," (@ColumnName(""xyz"") int i){ this.i=i; } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\mapper\reflect\ConstructorMapperTest.java,NestedBean, (@Nested ConstructorBean nested){ this.nested=nested; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\mapper\reflect\ConstructorMapperTest.java,NestedPrefixBean," (@Nested(""nested"") ConstructorBean nested){ this.nested=nested; } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\mapper\reflect\ConstructorMapperTest.java,execute,public ConstructorBean  (String query){ return dbRule.getSharedHandle().createQuery(query).mapTo(ConstructorBean.class).findOnly(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\mapper\reflect\ConstructorMapperTest.java,nestedParameters,"@Test public void  (){ assertThat(dbRule.getSharedHandle().registerRowMapper(ConstructorMapper.factory(NestedBean.class)).select(""select s  i from bean"").mapTo(NestedBean.class).findOnly()).extracting(""nested.s"" ""nested.i"").containsExactly(""3"" 2); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\mapper\reflect\ConstructorMapperTest.java,nestedParametersStrict,@Test public void  (){ Handle handle=dbRule.getSharedHandle(); handle.getConfig(ReflectionMappers.class).setStrictMatching(true); handle.registerRowMapper(ConstructorMapper.factory(NestedBean.class)); assertThat(dbRule.getSharedHandle().registerRowMapper(
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\mapper\reflect\ConstructorMapperTest.java,nestedPrefixParameters,"@Test public void  (){ NestedPrefixBean result=dbRule.getSharedHandle().registerRowMapper(ConstructorMapper.factory(NestedPrefixBean.class)).select(""select i nested_i  s nested_s from bean"").mapTo(NestedPrefixBean.class).findOnly(); assertThat(result.nest"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\mapper\reflect\ConstructorMapperTest.java,nestedPrefixParametersStrict,"@Test public void  (){ Handle handle=dbRule.getSharedHandle(); handle.getConfig(ReflectionMappers.class).setStrictMatching(true); handle.registerRowMapper(ConstructorMapper.factory(NestedPrefixBean.class)); assertThat(handle.createQuery(""select i nested_i"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\mapper\reflect\ConstructorMapperTest.java,setUp,@Before public void  () throws Exception { dbRule.getSharedHandle().registerRowMapper(ConstructorMapper.factory(ConstructorBean.class)).registerRowMapper(ConstructorMapper.factory(NamedParameterBean.class)).registerRowMapper(ConstructorMapper.factory(Cons
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\mapper\reflect\ConstructorMapperTest.java,testConstructorProperties,"@Test public void  () throws Exception { final ConstructorPropertiesBean cpi=dbRule.getSharedHandle().createQuery(""SELECT * FROM bean"").mapTo(ConstructorPropertiesBean.class).findOnly(); assertThat(cpi.s).isEqualTo(""3""); assertThat(cpi.i).isEqualTo(2); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\mapper\reflect\ConstructorMapperTest.java,testDuplicate,"@Test(expected=IllegalArgumentException.class) public void  () throws Exception { execute(""SELECT i  s  s FROM bean""); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\mapper\reflect\ConstructorMapperTest.java,testExtra,"@Test public void  () throws Exception { ConstructorBean bean=execute(""SELECT 1 as ignored  i  s FROM bean""); assertThat(bean.s).isEqualTo(""3""); assertThat(bean.i).isEqualTo(2); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\mapper\reflect\ConstructorMapperTest.java,testMismatch,"@Test(expected=IllegalArgumentException.class) public void  () throws Exception { execute(""SELECT i  '7' FROM bean""); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\mapper\reflect\ConstructorMapperTest.java,testName,"@Test public void  () throws Exception { NamedParameterBean nb=dbRule.getSharedHandle().createQuery(""SELECT 3 AS xyz"").mapTo(NamedParameterBean.class).findOnly(); assertThat(nb.i).isEqualTo(3); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\mapper\reflect\ConstructorMapperTest.java,testReversed,"@Test public void  () throws Exception { ConstructorBean bean=execute(""SELECT i  s FROM bean""); assertThat(bean.s).isEqualTo(""3""); assertThat(bean.i).isEqualTo(2); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\mapper\reflect\ConstructorMapperTest.java,testSimple,"@Test public void  () throws Exception { ConstructorBean bean=execute(""SELECT s  i FROM bean""); assertThat(bean.s).isEqualTo(""3""); assertThat(bean.i).isEqualTo(2); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\mapper\reflect\SnakeCaseColumnNameMatcherTest.java,testBeanNumbers,"@Test public void  (){ assertThat(snake.columnNameMatches(""test_property_2"" ""testProperty2"")).isTrue(); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\mapper\reflect\SnakeCaseColumnNameMatcherTest.java,testNumbersDontMatch,"@Test public void  (){ assertThat(snake.columnNameMatches(""test_property_2"" ""testProperty3"")).isFalse(); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\mapper\reflect\SnakeCaseColumnNameMatcherTest.java,testSimple,"@Test public void  (){ assertThat(snake.columnNameMatches(""test_property_with_cheese"" ""testPropertyWithCheese"")).isTrue(); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\mapper\reflect\SnakeCaseColumnNameMatcherTest.java,testWithoutCheese,"@Test public void  (){ assertThat(snake.columnNameMatches(""test_property_with_cheese"" ""testPropertyWithoutCheese"")).isFalse(); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\mapper\reflect\BeanMapperTest.java,getI,"@ColumnName(""id"") public int  (){ return i; } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\mapper\reflect\BeanMapperTest.java,getIntegerValue,public Integer  (){ return integerValue; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\mapper\reflect\BeanMapperTest.java,getNested,public Something  (){ return nested; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\mapper\reflect\BeanMapperTest.java,getS,public String  (){ return s; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\mapper\reflect\BeanMapperTest.java,mockAllNullsResult,private void  () throws SQLException { when(resultSet.wasNull()).thenReturn(true); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\mapper\reflect\BeanMapperTest.java,mockColumns,private void  (String... columns) throws SQLException { when(resultSetMetaData.getColumnCount()).thenReturn(columns.length); for (int i=0; i < columns.length; i++) { when(resultSetMetaData.getColumnLabel(i + 1)).thenReturn(columns[i]); } } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\mapper\reflect\BeanMapperTest.java,mockLongResult,private void  (long aLong) throws SQLException { when(resultSet.getLong(1)).thenReturn(aLong); when(resultSet.wasNull()).thenReturn(false); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\mapper\reflect\BeanMapperTest.java,setI,public void  (int i){ this.i=i; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\mapper\reflect\BeanMapperTest.java,setIntegerValue,public void  (Integer integerValue){ this.integerValue=integerValue; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\mapper\reflect\BeanMapperTest.java,setNested,"@Nested(""nested"") public void  (Something nested){ this.nested=nested; } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\mapper\reflect\BeanMapperTest.java,setS,"@ColumnName(""name"") public void  (String s){ this.s=s; } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\mapper\reflect\BeanMapperTest.java,setUpMocks,@Before public void  () throws SQLException { when(resultSet.getMetaData()).thenReturn(resultSetMetaData); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\mapper\reflect\BeanMapperTest.java,shouldBeCaseInSensitiveOfColumnAndPropertyNames,"@Test public void  () throws Exception { mockColumns(""LoNgfielD""); Long aLongVal=100L; mockLongResult(aLongVal); SampleBean sampleBean=mapper.map(resultSet ctx); assertThat(sampleBean.getLongField()).isEqualTo(aLongVal); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\mapper\reflect\BeanMapperTest.java,shouldBeCaseInSensitiveOfColumnWithUnderscoresAndPropertyNames,"@Test public void  () throws Exception { mockColumns(""LoNg_FiElD""); Long aLongVal=100L; mockLongResult(aLongVal); SampleBean sampleBean=mapper.map(resultSet ctx); assertThat(sampleBean.getLongField()).isEqualTo(aLongVal); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\mapper\reflect\BeanMapperTest.java,shouldHandleColumNameWithUnderscores,"@Test public void  () throws Exception { mockColumns(""LONG_FIELD""); Long aLongVal=100L; mockLongResult(aLongVal); SampleBean sampleBean=mapper.map(resultSet ctx); assertThat(sampleBean.getLongField()).isEqualTo(aLongVal); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\mapper\reflect\FieldMapperTest.java,mockColumns,private void  (String... columns) throws SQLException { when(resultSetMetaData.getColumnCount()).thenReturn(columns.length); for (int i=0; i < columns.length; i++) { when(resultSetMetaData.getColumnLabel(i + 1)).thenReturn(columns[i]); } } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\mapper\reflect\FieldMapperTest.java,setUpMocks,@Before public void  () throws SQLException { when(resultSet.getMetaData()).thenReturn(resultSetMetaData); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\mapper\reflect\FieldMapperTest.java,shouldBeCaseInSensitiveOfColumnAndFieldNames,"@Test public void  () throws Exception { mockColumns(""LoNgfielD""); Long aLongVal=100L; when(resultSet.getLong(1)).thenReturn(aLongVal); when(resultSet.wasNull()).thenReturn(false); SampleBean sampleBean=mapper.map(resultSet ctx); assertThat(sampleBean.get"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\mapper\reflect\FieldMapperTest.java,shouldHandleEmptyResult,@Test public void  () throws Exception { mockColumns(); SampleBean sampleBean=mapper.map(resultSet ctx); assertThat(sampleBean).isNotNull(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\mapper\reflect\FieldMapperTest.java,shouldHandleNullValue,"@Test public void  () throws Exception { mockColumns(""LoNgfielD""); when(resultSet.getLong(1)).thenReturn(0L); when(resultSet.wasNull()).thenReturn(true); SampleBean sampleBean=mapper.map(resultSet ctx); assertThat(sampleBean.getLongField()).isNull(); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\mapper\reflect\FieldMapperTest.java,shouldNotThrowOnMismatchedColumns,"@Test public void  () throws Exception { mockColumns(""longField"" ""extraColumn""); Long expected=666L; when(resultSet.getLong(1)).thenReturn(expected); when(resultSet.getString(2)).thenReturn(""foo""); SampleBean sampleBean=mapper.map(resultSet ctx); assertTh"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\mapper\reflect\FieldMapperTest.java,shouldSetValueOnPrivateField,"@Test public void  () throws Exception { mockColumns(""longField""); Long aLongVal=100L; when(resultSet.getLong(1)).thenReturn(aLongVal); when(resultSet.wasNull()).thenReturn(false); SampleBean sampleBean=mapper.map(resultSet ctx); assertThat(sampleBean.get"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\mapper\reflect\FieldMapperTest.java,shouldSetValuesInSuperClassFields,"@Test public void  () throws Exception { mockColumns(""longField"" ""blongField""); Long aLongVal=100L; Long bLongVal=200L; when(resultSet.getLong(1)).thenReturn(aLongVal); when(resultSet.getLong(2)).thenReturn(bLongVal); when(resultSet.wasNull()).thenReturn("
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\mapper\reflect\FieldMapperTest.java,shouldSetValuesOnAllFieldAccessTypes,"@Test public void  () throws Exception { mockColumns(""longField"" ""protectedStringField"" ""packagePrivateIntField"" ""privateBigDecimalField""); Long aLongVal=100L; String aStringVal=""something""; int aIntVal=1; BigDecimal aBigDecimal=BigDecimal.TEN; when(resul"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\mapper\reflect\FieldMapperTest.java,shouldThrowOnMismatchedColumnsStrictMatch,"@Test(expected=IllegalArgumentException.class) public void  () throws Exception { ctx.getConfig(ReflectionMappers.class).setStrictMatching(true); mockColumns(""longField"" ""misspelledField""); mapper.map(resultSet ctx); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\mapper\reflect\FieldMapperTest.java,shouldThrowOnPropertyTypeWithoutRegisteredMapper,"@Test(expected=IllegalArgumentException.class) public void  () throws Exception { mockColumns(""longField"" ""valueTypeField""); when(resultSet.getLong(1)).thenReturn(123L); when(resultSet.getObject(2)).thenReturn(new Object()); when(resultSet.wasNull()).then"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\mapper\reflect\FieldMapperTest.java,shouldThrowOnTotalMismatch,"@Test(expected=IllegalArgumentException.class) public void  () throws Exception { mockColumns(""somethingElseEntirely""); mapper.map(resultSet ctx); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\mapper\reflect\FieldMapperTest.java,shouldUseRegisteredMapperForUnknownPropertyType,"@Test public void  () throws Exception { handle.registerColumnMapper(new ValueTypeMapper()); mockColumns(""longField"" ""valueTypeField""); when(resultSet.getLong(1)).thenReturn(123L); when(resultSet.getString(2)).thenReturn(""foo""); when(resultSet.wasNull())."
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\mapper\reflect\FieldMapperTest.java,testColumnNameAnnotation,"@Test public void  (){ Handle handle=dbRule.getSharedHandle(); handle.execute(""insert into something (id  name) values (1  'foo')""); ColumnNameThing thing=handle.createQuery(""select * from something"").map(FieldMapper.of(ColumnNameThing.class)).findOnly();"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\mapper\reflect\FieldMapperTest.java,testNested,"@Test public void  (){ Handle handle=dbRule.getSharedHandle(); handle.execute(""insert into something (id  name) values (1  'foo')""); assertThat(handle.registerRowMapper(FieldMapper.factory(NestedThing.class)).select(""SELECT id  name FROM something"").mapTo"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\mapper\reflect\FieldMapperTest.java,testNestedPrefix,"@Test public void  (){ Handle handle=dbRule.getSharedHandle(); handle.execute(""insert into something (id  name) values (1  'foo')""); assertThat(handle.registerRowMapper(FieldMapper.factory(NestedPrefixThing.class)).select(""select id nested_id  name nested"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\mapper\reflect\FieldMapperTest.java,testNestedPrefixStrict,"@Test public void  (){ Handle handle=dbRule.getSharedHandle(); handle.getConfig(ReflectionMappers.class).setStrictMatching(true); handle.registerRowMapper(FieldMapper.factory(NestedPrefixThing.class)); handle.execute(""insert into something (id  name  inte"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\mapper\reflect\FieldMapperTest.java,testNestedStrict,"@Test public void  (){ Handle handle=dbRule.getSharedHandle(); handle.getConfig(ReflectionMappers.class).setStrictMatching(true); handle.registerRowMapper(FieldMapper.factory(NestedThing.class)); handle.execute(""insert into something (id  name) values (1 "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\mapper\reflect\BeanMapperTest.java,shouldHandleEmptyResult,@Test public void  () throws Exception { mockColumns(); SampleBean sampleBean=mapper.map(resultSet ctx); assertThat(sampleBean).isNotNull(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\mapper\reflect\BeanMapperTest.java,shouldHandleNullValue,"@Test public void  () throws Exception { mockColumns(""LoNgfielD""); mockAllNullsResult(); SampleBean sampleBean=mapper.map(resultSet ctx); assertThat(sampleBean.getLongField()).isNull(); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\mapper\reflect\BeanMapperTest.java,shouldNotThrowOnMismatchedColumns,"@Test public void  () throws Exception { mockColumns(""longField"" ""extraColumn""); Long expected=666L; when(resultSet.getLong(1)).thenReturn(expected); when(resultSet.getString(2)).thenReturn(""foo""); SampleBean sampleBean=mapper.map(resultSet ctx); assertTh"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\mapper\reflect\BeanMapperTest.java,shouldSetValueOnPublicSetter,"@Test public void  () throws Exception { mockColumns(""longField""); Long aLongVal=100L; mockLongResult(aLongVal); SampleBean sampleBean=mapper.map(resultSet ctx); assertThat(sampleBean.getLongField()).isEqualTo(aLongVal); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\mapper\reflect\BeanMapperTest.java,shouldSetValuesInSuperClassProperties,"@Test public void  () throws Exception { mockColumns(""longField"" ""blongField""); Long aLongVal=100L; Long bLongVal=200L; when(resultSet.getLong(1)).thenReturn(aLongVal); when(resultSet.getLong(2)).thenReturn(bLongVal); when(resultSet.wasNull()).thenReturn("
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\mapper\reflect\BeanMapperTest.java,shouldSetValuesOnPublicSetter,"@Test public void  () throws Exception { mockColumns(""longField""); Long expected=1L; mockLongResult(expected); SampleBean sampleBean=mapper.map(resultSet ctx); assertThat(sampleBean.getLongField()).isEqualTo(expected); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\mapper\reflect\BeanMapperTest.java,shouldThrowOnMismatchedColumnsStrictMatch,"@Test(expected=IllegalArgumentException.class) public void  () throws Exception { ctx.getConfig(ReflectionMappers.class).setStrictMatching(true); mockColumns(""longField"" ""misspelledField""); mapper.map(resultSet ctx); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\mapper\reflect\BeanMapperTest.java,shouldThrowOnPackagePrivateSetter,"@Test(expected=IllegalArgumentException.class) public void  () throws Exception { mockColumns(""packagePrivateIntField""); when(resultSet.getInt(1)).thenReturn(200); when(resultSet.wasNull()).thenReturn(false); mapper.map(resultSet ctx); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\mapper\reflect\BeanMapperTest.java,shouldThrowOnPrivateSetter,"@Test(expected=IllegalArgumentException.class) public void  () throws Exception { mockColumns(""privateBigDecimalField""); when(resultSet.getBigDecimal(1)).thenReturn(BigDecimal.ONE); when(resultSet.wasNull()).thenReturn(false); mapper.map(resultSet ctx); }"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\mapper\reflect\BeanMapperTest.java,shouldThrowOnPropertyTypeWithoutRegisteredMapper,"@Test(expected=IllegalArgumentException.class) public void  () throws Exception { mockColumns(""longField"" ""valueTypeField""); when(resultSet.getLong(1)).thenReturn(123L); when(resultSet.getObject(2)).thenReturn(new Object()); when(resultSet.wasNull()).then"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\mapper\reflect\BeanMapperTest.java,shouldThrowOnProtectedSetter,"@Test(expected=IllegalArgumentException.class) public void  () throws Exception { mockColumns(""protectedStringField""); String expected=""string""; when(resultSet.getString(1)).thenReturn(expected); when(resultSet.wasNull()).thenReturn(false); mapper.map(res"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\mapper\reflect\BeanMapperTest.java,shouldThrowOnTotalMismatch,"@Test(expected=IllegalArgumentException.class) public void  () throws Exception { mockColumns(""somethingElseEntirely""); mapper.map(resultSet ctx); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\mapper\reflect\BeanMapperTest.java,shouldUseRegisteredMapperForUnknownPropertyType,"@Test public void  () throws Exception { handle.registerColumnMapper(new ValueTypeMapper()); mockColumns(""longField"" ""valueTypeField""); Long expected=123L; when(resultSet.getLong(1)).thenReturn(expected); when(resultSet.getString(2)).thenReturn(""foo""); wh"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\mapper\reflect\BeanMapperTest.java,testColumnNameAnnotation,"@Test public void  (){ Handle handle=dbRule.getSharedHandle(); handle.registerRowMapper(BeanMapper.factory(ColumnNameBean.class)); handle.execute(""insert into something (id  name) values (1  'foo')""); ColumnNameBean bean=handle.createQuery(""select * from "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\mapper\reflect\BeanMapperTest.java,testNested,"@Test public void  (){ Handle handle=dbRule.getSharedHandle(); handle.registerRowMapper(BeanMapper.factory(NestedBean.class)); handle.execute(""insert into something (id  name) values (1  'foo')""); assertThat(handle.createQuery(""select id  name from someth"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\mapper\reflect\BeanMapperTest.java,testNestedPrefix,"@Test public void  (){ Handle handle=dbRule.getSharedHandle(); handle.registerRowMapper(BeanMapper.factory(NestedPrefixBean.class)); handle.execute(""insert into something (id  name) values (1  'foo')""); assertThat(handle.createQuery(""select id nested_id  "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\mapper\reflect\BeanMapperTest.java,testNestedPrefixStrict,"@Test public void  (){ Handle handle=dbRule.getSharedHandle(); handle.getConfig(ReflectionMappers.class).setStrictMatching(true); handle.registerRowMapper(BeanMapper.factory(NestedPrefixBean.class)); handle.execute(""insert into something (id  name  intege"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\mapper\reflect\BeanMapperTest.java,testNestedStrict,"@Test public void  (){ Handle handle=dbRule.getSharedHandle(); handle.getConfig(ReflectionMappers.class).setStrictMatching(true); handle.registerRowMapper(BeanMapper.factory(NestedBean.class)); handle.execute(""insert into something (id  name) values (1  '"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\mapper\SomethingMapper.java,map,"@Override public Something  (ResultSet r StatementContext ctx) throws SQLException { return new Something(r.getInt(""id"") r.getString(""name"")); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\mapper\TestRegisteredMappers.java,setUp,@Before public void  () throws Exception { db=dbRule.getJdbi(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\mapper\TestRegisteredMappers.java,testRegisterInferredOnJdbi,"@Test public void  () throws Exception { db.registerRowMapper(new SomethingMapper()); Something sam=db.withHandle(handle1 -> { handle1.execute(""insert into something (id  name) values (18  'Sam')""); return handle1.createQuery(""select id  name from somethi"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\mapper\reflect\DerivedBean.java,getBlongField,public Long  (){ return blongField; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\mapper\reflect\DerivedBean.java,setBlongField,public void  (Long blongField){ this.blongField=blongField; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\mapper\ValueTypeMapper.java,build,@Override public Optional<ColumnMapper<?>>  (Type type ConfigRegistry config){ return ValueType.class.isAssignableFrom(getErasedType(type)) ? Optional.of(new ValueTypeMapper()) : Optional.empty(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\mapper\ValueTypeMapper.java,map,@Override public ValueType  (ResultSet r int columnNumber StatementContext ctx) throws SQLException { return ValueType.valueOf(r.getString(columnNumber)); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\mapper\TestEnums.java,getId,public int  (){ return id; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\mapper\TestEnums.java,getName,public Name  (){ return name; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\mapper\TestEnums.java,setId,public void  (int id){ this.id=id; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\mapper\TestEnums.java,setName,public void  (Name name){ this.name=name; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\mapper\TestEnums.java,testEnumCaseInsensitive,"@Test public void  () throws Exception { assertThat(dbRule.getSharedHandle().createQuery(""select 'BrIaN'"").mapTo(SomethingElse.Name.class).findOnly()).isEqualTo(SomethingElse.Name.brian); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\mapper\TestEnums.java,testMapEnumValues,"@Test public void  () throws Exception { Handle h=dbRule.openHandle(); h.createUpdate(""insert into something (id  name) values (1  'eric')"").execute(); h.createUpdate(""insert into something (id  name) values (2  'brian')"").execute(); List<SomethingElse> r"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\mapper\TestEnums.java,testMapInvalidEnumValue,"@Test(expected=IllegalArgumentException.class) public void  () throws SQLException { Handle h=dbRule.openHandle(); h.createUpdate(""insert into something (id  name) values (1  'joe')"").execute(); h.createQuery(""select * from something order by id"").mapToBe"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\mapper\TestEnums.java,testMapToEnum,"@Test public void  () throws Exception { Handle h=dbRule.openHandle(); h.createUpdate(""insert into something (id  name) values (1  'eric')"").execute(); h.createUpdate(""insert into something (id  name) values (2  'brian')"").execute(); List<SomethingElse.Na"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\result\TestReducing.java,SomethingWithLocations, (Something something){ this.something=something; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\result\TestReducing.java,at,SomethingWithLoc ions at(String where){ locations.add(where); return this; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\result\TestReducing.java,equals,@Override public boolean  (Object other){ if (!(other instanceof SomethingWithLocations)) { return false; } SomethingWithLocations o=(SomethingWithLocations)other; return o.something.equals(something) && o.locations.equals(locations); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\result\TestReducing.java,hashCode,@Override public int  (){ return something.hashCode(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\result\TestReducing.java,setUp,"@Before public void  (){ Handle h=dbRule.getSharedHandle(); h.execute(""CREATE TABLE something_location (id int  location varchar)""); h.execute(""INSERT INTO something (id  name) VALUES (1  'tree')""); h.execute(""INSERT INTO something (id  name) VALUES (2  '"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\result\TestReducing.java,testCollectRows,"@Test public void  (){ Iterable<SomethingWithLocations> result=dbRule.getSharedHandle().createQuery(""SELECT something.id  name  location FROM something NATURAL JOIN something_location"").collectRows(Collector.<RowView Map<Integer SomethingWithLocations> It"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\result\TestReducing.java,testReduceResultSet,"@Test public void  (){ Map<Integer SomethingWithLocations> result=dbRule.getSharedHandle().createQuery(""SELECT something.id  name  location FROM something NATURAL JOIN something_location"").reduceResultSet(new HashMap<Integer SomethingWithLocations>() (map"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\result\TestIterator.java,doTearDown,"@After public void  () throws Exception { assertThat(h.isClosed()).isTrue().withFailMessage(""Handle was not closed correctly!""); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\result\TestIterator.java,setUp,@Before public void  () throws Exception { h=dbRule.openHandle(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\result\TestReducing.java,testReduceRows,"@Test public void  (){ List<SomethingWithLocations> result=dbRule.getSharedHandle().createQuery(""SELECT something.id  name  location FROM something NATURAL JOIN something_location"").reduceRows(( Map<Integer SomethingWithLocations> map  RowView rv) -> map."
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\result\TestIterator.java,testEmptyExplosion,"@Test(expected=NoSuchElementException.class) public void  () throws Exception { ResultIterator<Map<String Object>> it=h.createQuery(""select * from something order by id"").cleanupHandleRollback().mapToMap().iterator(); it.next(); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\result\TestIterator.java,testEmptyWorksToo,"@Test public void  () throws Exception { ResultIterator<Map<String Object>> it=h.createQuery(""select * from something order by id"").cleanupHandleRollback().mapToMap().iterator(); assertThat(it.hasNext()).isFalse(); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\result\TestReducing.java,testReduceRowsWithSeed,"@Test public void  (){ Map<Integer SomethingWithLocations> result=dbRule.getSharedHandle().createQuery(""SELECT something.id  name  location FROM something NATURAL JOIN something_location"").reduceRows(new HashMap<Integer SomethingWithLocations>() (map rr) "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\result\TestReducing.java,toString,"@Override public String  (){ return String.format(""Something %s with locations %s"" something locations); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\result\TestIterator.java,testExplodeIterator,"@Test(expected=IllegalStateException.class) public void  () throws Exception { h.createUpdate(""insert into something (id  name) values (1  'eric')"").execute(); h.createUpdate(""insert into something (id  name) values (2  'brian')"").execute(); h.createUpdat"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\result\TestIterator.java,testHasNext,"@Test public void  () throws Exception { h.createUpdate(""insert into something (id  name) values (1  'eric')"").execute(); h.createUpdate(""insert into something (id  name) values (2  'brian')"").execute(); h.createUpdate(""insert into something (id  name) va"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\result\TestIterator.java,testJustNext,"@Test public void  () throws Exception { h.createUpdate(""insert into something (id  name) values (1  'eric')"").execute(); h.createUpdate(""insert into something (id  name) values (2  'brian')"").execute(); h.createUpdate(""insert into something (id  name) va"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\result\TestIterator.java,testLessLeakingJustNext,"@Test public void  () throws Exception { h.createUpdate(""insert into something (id  name) values (1  'eric')"").execute(); h.createUpdate(""insert into something (id  name) values (2  'brian')"").execute(); try (final ResultIterator<Map<String Object>> it=h."
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\result\TestIterator.java,testNext,"@Test public void  () throws Exception { h.createUpdate(""insert into something (id  name) values (1  'eric')"").execute(); h.createUpdate(""insert into something (id  name) values (2  'brian')"").execute(); h.createUpdate(""insert into something (id  name) va"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\result\TestIterator.java,testNonPathologicalJustNext,"@Test public void  () throws Exception { h.createUpdate(""insert into something (id  name) values (1  'eric')"").execute(); final Map<String Object> result=h.createQuery(""select * from something order by id"").cleanupHandleRollback().mapToMap().iterator().ne"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\result\TestIterator.java,testSimple,"@Test public void  () throws Exception { h.createUpdate(""insert into something (id  name) values (1  'eric')"").execute(); h.createUpdate(""insert into something (id  name) values (2  'brian')"").execute(); h.createUpdate(""insert into something (id  name) va"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\result\TestIterator.java,testStillLeakingJustNext,"@Test public void  () throws Exception { h.createUpdate(""insert into something (id  name) values (1  'eric')"").execute(); h.createUpdate(""insert into something (id  name) values (2  'brian')"").execute(); final Map<String Object> result=h.createQuery(""sele"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\result\TestIterator.java,testTwoOne,"@Test public void  () throws Exception { h.createUpdate(""insert into something (id  name) values (1  'eric')"").execute(); h.createUpdate(""insert into something (id  name) values (2  'brian')"").execute(); h.createUpdate(""insert into something (id  name) va"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\result\TestIterator.java,testTwoTwo,"@Test public void  () throws Exception { h.createUpdate(""insert into something (id  name) values (1  'eric')"").execute(); h.createUpdate(""insert into something (id  name) values (2  'brian')"").execute(); h.createUpdate(""insert into something (id  name) va"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\result\TestResultBearing.java,add,public static Integer  (Integer u Integer v){ return u + v; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\result\TestResultBearing.java,setUp,"@Before public void  () throws Exception { Handle h=dbRule.getSharedHandle(); h.execute(""CREATE TABLE reduce (u INT)""); for (int u=0; u < 5; u++) { h.execute(""INSERT INTO reduce VALUES (?)"" u); } } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\result\TestResultBearing.java,testReduceBiFunction,"@Test public void  () throws Exception { assertThat(dbRule.getSharedHandle().createQuery(""SELECT * FROM reduce"").mapTo(Integer.class).reduce(0 TestResultBearing::add)).isEqualTo(10); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\rule\H2DatabaseRule.java,after,@Override protected void  (){ try { con.close(); } catch ( SQLException e) { throw new AssertionError(e); } } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\rule\H2DatabaseRule.java,before,@Override protected void  () throws Throwable { db=Jdbi.create(uri); if (installPlugins) { db.installPlugins(); } plugins.forEach(db::installPlugin); sharedHandle=db.open(); con=sharedHandle.getConnection(); try (Statement s=con.createStatement()){ s.exec
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\rule\H2DatabaseRule.java,getConnectionFactory,public ConnectionFactory  (){ return () -> DriverManager.getConnection(getConnectionString()); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\rule\H2DatabaseRule.java,getConnectionString,public String  (){ return uri; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\rule\H2DatabaseRule.java,getJdbi,@Override public Jdbi  (){ return db; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\rule\H2DatabaseRule.java,getSharedHandle,public Handle  (){ return sharedHandle; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\rule\H2DatabaseRule.java,openHandle,public Handle  (){ return getJdbi().open(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\rule\H2DatabaseRule.java,withPlugin,public H2DatabaseRule  (JdbiPlugin plugin){ plugins.add(plugin); return this; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\rule\H2DatabaseRule.java,withPlugins,public H2DatabaseRule  (){ installPlugins=true; return this; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\rule\PgDatabaseRule.java,after,@Override protected void  (){ db=null; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\rule\PgDatabaseRule.java,apply,@Override public Statement  (Statement base Description description){ if (preparer == null) { preparer=new JdbiPreparer.None(); } innerRule=EmbeddedPostgresRules.preparedDatabase(preparer); return innerRule.apply(super.apply(base description) description)
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\rule\PgDatabaseRule.java,before,@Override protected void  () throws Throwable { db=Jdbi.create(innerRule.getTestDatabase()); plugins.forEach(db::installPlugin); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\rule\PgDatabaseRule.java,getJdbi,@Override public Jdbi  (){ return db; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\rule\PgDatabaseRule.java,openHandle,public Handle  (){ return getJdbi().open(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\rule\PgDatabaseRule.java,withPlugin,public PgDatabaseRule  (JdbiPlugin plugin){ plugins.add(plugin); return this; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\rule\PgDatabaseRule.java,withPreparer,public PgDatabaseRule  (JdbiPreparer preparer){ this.preparer=preparer; return this; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\HandyMapThing.java,add,public HandyMapThing<K>  (K k Object v){ this.put(k v); return this; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\StatementContextAccess.java,createContext,public static StatementContext  (Handle handle){ return new StatementContext(handle.getConfig()); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\SampleBean.java,getLongField,public Long  (){ return longField; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\SampleBean.java,getPackagePrivateIntField,public int  (){ return packagePrivateIntField; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\SampleBean.java,getPrivateBigDecimalField,public BigDecimal  (){ return privateBigDecimalField; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\SampleBean.java,getProtectedStringField,public String  (){ return protectedStringField; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\SampleBean.java,getValueTypeField,public ValueType  (){ return valueTypeField; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\SampleBean.java,setLongField,public void  (Long longField){ this.longField=longField; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\SampleBean.java,setPackagePrivateIntField,void  (int packagePrivateIntField){ this.packagePrivateIntField=packagePrivateIntField; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\SampleBean.java,setPrivateBigDecimalField,"@SuppressWarnings(""unused"") private void  (BigDecimal privateBigDecimalField){ this.privateBigDecimalField=privateBigDecimalField; } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\SampleBean.java,setProtectedStringField,protected void  (String protectedStringField){ this.protectedStringField=protectedStringField; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\SampleBean.java,setValueTypeField,public void  (ValueType valueTypeField){ this.valueTypeField=valueTypeField; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\Something.java,Something,public  (int id String name){ this.id=id; this.name=name; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\Something.java,equals,@Override public boolean  (Object o){ if (this == o) return true; if (!(o instanceof Something)) return false; Something that=(Something)o; return this.id == that.id && this.intValue == that.intValue && Objects.equals(this.integerValue that.integerValue) 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\Something.java,getId,public int  (){ return id; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\Something.java,getIntValue,public int  (){ return intValue; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\Something.java,getIntegerValue,public Integer  (){ return integerValue; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\Something.java,getName,public String  (){ return name; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\Something.java,hashCode,@Override public int  (){ return Objects.hash(id name integerValue intValue); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\Something.java,setId,public void  (int id){ this.id=id; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\Something.java,setIntValue,public void  (int intValue){ this.intValue=intValue; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\Something.java,setIntegerValue,public void  (Integer integerValue){ this.integerValue=integerValue; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\Something.java,setName,public void  (String name){ this.name=name; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\Something.java,setWithoutGetter,public void  (String bogus){ throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\Something.java,toString,"@Override public String  (){ return ""Something{"" + ""id="" + id + ""  name='""+ name+ '\''+ ""  integerValue=""+ integerValue+ ""  intValue=""+ intValue+ '}'; } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestBatch.java,testBasics,"@Test public void  () throws Exception { Handle h=dbRule.openHandle(); Batch b=h.createBatch(); b.add(""insert into something (id  name) values (0  'Keith')""); b.add(""insert into something (id  name) values (1  'Eric')""); b.add(""insert into something (id  "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestBatch.java,testEmptyBatchThrows,"@Test(expected=IllegalStateException.class) public void  () throws Exception { try (Handle h=dbRule.openHandle()){ final PreparedBatch b=h.prepareBatch(""insert into something (id  name) values (?  ?)""); b.add(); } } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestBatchExceptionRewrite.java,assertSuppressions,"private void  (Throwable cause){ LoggerFactory.getLogger(TestBatchExceptionRewrite.class).info(""exception"" cause); SQLException e=(SQLException)cause; SQLException nextException=e.getNextException(); assertThat((Exception)nextException).isEqualTo(e.getSuppressed()[0]); assertThat((Exception)nextException.getNextException()).isNull(); assertThat(e.getSuppressed()).hasSize(1); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestBatchExceptionRewrite.java,createTable,"@Before public void  (){ dbRule.getJdbi().useHandle(h -> h.execute(""create table something ( id int primary key  name varchar(50)  integerValue integer  intValue integer )"")); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestBatchExceptionRewrite.java,testPreparedBatch,"@Test public void  () throws Exception { PreparedBatch b=dbRule.openHandle().prepareBatch(""insert into something (id  name) values (? ?)""); b.add(0 ""a""); b.add(0 ""a""); assertThatExceptionOfType(UnableToExecuteStatementException.class).isThrownBy(b::execut"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestBatchExceptionRewrite.java,testSimpleBatch,"@Test public void  () throws Exception { Batch b=dbRule.openHandle().createBatch(); b.add(""insert into something (id  name) values (0  'Keith')""); b.add(""insert into something (id  name) values (0  'Keith')""); assertThatExceptionOfType(UnableToExecuteStat"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\StatementContextTest.java,map,@Override public Foo  (ResultSet r int columnNumber StatementContext ctx) throws SQLException { return null; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\StatementContextTest.java,testMapperForDelegatesToRegistry,@Test public void  (){ ColumnMapper<Foo> mapper=new FooMapper(); ConfigRegistry config=new ConfigRegistry(); config.get(ColumnMappers.class).register(mapper); final StatementContext context=StatementContextAccess.createContext(config); assertThat(context.
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\StatementContextTest.java,testShouldNotBeAbleToCombineConcurrentUpdatableAndGeneratedKeys,@Test(expected=IllegalArgumentException.class) public void  () throws Exception { final StatementContext context=StatementContextAccess.createContext(); context.setConcurrentUpdatable(true); context.setReturningGeneratedKeys(true); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\StatementContextTest.java,testShouldNotBeAbleToCombineGeneratedKeysAndConcurrentUpdatable,@Test(expected=IllegalArgumentException.class) public void  () throws Exception { final StatementContext context=StatementContextAccess.createContext(); context.setReturningGeneratedKeys(true); context.setConcurrentUpdatable(true); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestBindBeanList.java,ThingKey,public  (String foo String bar){ this.foo=foo; this.bar=bar; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestBindBeanList.java,bindBeanListWithNoProperties,"@Test(expected=IllegalArgumentException.class) public void  () throws Exception { ThingKey thingKey=new ThingKey(""a"" ""b""); handle.createQuery(""select id  foo from thing where (foo  bar) in (<keys>)"").bindBeanList(""keys"" Collections.singletonList(thingKey)"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestBindBeanList.java,bindBeanListWithNoValues,"@Test(expected=IllegalArgumentException.class) public void  () throws Exception { handle.createQuery(""select id  foo from thing where (foo  bar) in (<keys>)"").bindBeanList(""keys"" Collections.emptyList() Arrays.asList(""foo"" ""bar"")); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestBindBeanList.java,getBar,public String  (){ return bar; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestBindBeanList.java,getBaz,public String  (){ return baz; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestBindBeanList.java,getFoo,public String  (){ return foo; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestBindBeanList.java,getId,public int  (){ return id; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestBindBeanList.java,happyPath,"@Test public void  (){ ThingKey thing1Key=new ThingKey(""foo1"" ""bar1""); ThingKey thing3Key=new ThingKey(""foo3"" ""bar3""); List<Thing> list=handle.createQuery(""select id  foo from thing where (foo  bar) in (<keys>)"").bindBeanList(""keys"" Arrays.asList(thing1Ke"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestBindBeanList.java,setUp,"@Before public void  (){ handle=dbRule.getSharedHandle(); handle.registerRowMapper(FieldMapper.factory(Thing.class)); handle.execute(""create table thing (id identity primary key  foo varchar(50)  bar varchar(50)  baz varchar(50))""); handle.execute(""insert"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestCallable.java,setUp,"@Before public void  () throws Exception { h=dbRule.getJdbi().open(); h.execute(""CREATE ALIAS TO_DEGREES FOR \""java.lang.Math.toDegrees\""""); h.execute(""CREATE ALIAS TEST_PROCEDURE FOR \""org.jdbi.v3.core.statement.TestCallable.testProcedure\""""); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestCallable.java,testProcedure,public static void  (String in String[] out){ out=new String[1]; out[0]=in; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestCallable.java,testStatement,"@Test public void  () throws Exception { OutParameters ret=h.createCall(""? = CALL TO_DEGREES(?)"").registerOutParameter(0 Types.DOUBLE).bind(1 100.0d).invoke(); Double expected=Math.toDegrees(100.0d); assertThat(ret.getDouble(0)).isEqualTo(expected Offset."
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestCallable.java,testStatementWithNamedParam,"@Test public void  () throws Exception { OutParameters ret=h.createCall("":x = CALL TO_DEGREES(:y)"").registerOutParameter(""x"" Types.DOUBLE).bind(""y"" 100.0d).invoke(); Double expected=Math.toDegrees(100.0d); assertThat(ret.getDouble(""x"")).isEqualTo(expected"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestCallable.java,testWithNullReturn,"@Test @Ignore public void  () throws Exception { OutParameters ret=h.createCall(""CALL TEST_PROCEDURE(?  ?)"").bind(0 (String)null).registerOutParameter(1 Types.VARCHAR).invoke(); String out=ret.getString(1); assertThat(out).isNull(); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestCallable.java,testWithNullReturnWithNamedParam,"@Test @Ignore public void  () throws Exception { OutParameters ret=h.createCall(""CALL TEST_PROCEDURE(:x  :y)"").bind(""x"" (String)null).registerOutParameter(""y"" Types.VARCHAR).invoke(); String out=ret.getString(""y""); assertThat(out).isNull(); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestBindList.java,getBar,public String  (){ return bar; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestBindList.java,getBaz,public String  (){ return baz; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestBindList.java,getFoo,public String  (){ return foo; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestBindList.java,getId,public int  (){ return id; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestBindList.java,setUp,"@Before public void  (){ handle=dbRule.getSharedHandle(); handle.registerRowMapper(FieldMapper.factory(Thing.class)); handle.execute(""create table thing (id identity primary key  foo varchar(50)  bar varchar(50)  baz varchar(50))""); handle.execute(""insert"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestBindList.java,testBindList,"@Test public void  (){ handle.createUpdate(""insert into thing (<columns>) values (<values>)"").defineList(""columns"" ""id"" ""foo"").bindList(""values"" 3 ""abc"").execute(); List<Thing> list=handle.createQuery(""select id  foo from thing where id in (<ids>)"").bindL"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestBindList.java,testBindListWithHashPrefixParser,"@Test public void  () throws Exception { Jdbi jdbi=Jdbi.create(dbRule.getConnectionFactory()); jdbi.setSqlParser(new HashPrefixSqlParser()); jdbi.useHandle(handle -> { handle.registerRowMapper(FieldMapper.factory(Thing.class)); handle.createUpdate(""insert"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestDefineList.java,getBar,public String  (){ return bar; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestDefineList.java,getBaz,public String  (){ return baz; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestDefineList.java,getFoo,public String  (){ return foo; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestDefineList.java,getId,public int  (){ return id; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestDefineList.java,setUp,"@Before public void  () throws Exception { handle=dbRule.getSharedHandle(); handle.execute(""create table thing (id identity primary key  foo varchar(50)  bar varchar(50)  baz varchar(50))""); handle.execute(""insert into thing (id  foo  bar  baz) values (? "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestDefineList.java,testDefineListSelect,"@Test public void  () throws Exception { list=handle.createQuery(""select <columns> from thing order by id"").defineList(""columns"" Arrays.asList(""id"" ""foo"" ""bar"")).mapTo(Thing.class).list(); assertThat(list).extracting(Thing::getId Thing::getFoo Thing::getB"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestColonPrefixTemplateEngine.java,render,private String  (String sql Map<String Object> attributes){ attributes.forEach((key value) -> when(ctx.getAttribute(key)).thenReturn(value)); return templateEngine.render(sql ctx); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestColonPrefixTemplateEngine.java,setUp,@Before public void  () throws Exception { templateEngine=new DefinedAttributeTemplateEngine(); parser=new ColonPrefixSqlParser(); ctx=mock(StatementContext.class); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestColonPrefixTemplateEngine.java,testBacktickOkay,"@Test public void  () throws Exception { ParsedSql parsed=parser.parse(""select * from `v$session"" ctx); assertThat(parsed.getSql()).isEqualTo(""select * from `v$session""); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestColonPrefixTemplateEngine.java,testBailsOutOnInvalidInput,"@Test(expected=UnableToCreateStatementException.class) public void  () throws Exception { render(""select * from something\n where id = :\u0087\u008e\u0092\u0097\u009c""); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestColonPrefixTemplateEngine.java,testCachesRewrittenStatements,"@Test public void  () throws Exception { parser=spy(parser); String sql=""insert into something (id  name) values (:id  :name)""; ParsedSql parsed=parser.parse(sql ctx); assertThat(parsed).isSameAs(parser.parse(sql ctx)); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestColonPrefixTemplateEngine.java,testColonInComment,"@Test public void  () throws Exception { String sql=""/* comment with : colons :: inside it */ select 1""; assertThat(render(sql)).isEqualTo(sql); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestColonPrefixTemplateEngine.java,testCommentQuote,"@Test public void  () throws Exception { String sql=""select 1 /* ' \"" <foo> */""; assertThat(render(sql)).isEqualTo(sql); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestColonPrefixTemplateEngine.java,testDollarSignOkay,"@Test public void  () throws Exception { ParsedSql parsed=parser.parse(""select * from v$session"" ctx); assertThat(parsed.getSql()).isEqualTo(""select * from v$session""); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestColonPrefixTemplateEngine.java,testDoubleColon,"@Test public void  () throws Exception { final String doubleColon=""select 1::int""; ParsedSql parsed=parser.parse(doubleColon ctx); assertThat(parsed.getSql()).isEqualTo(doubleColon); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestColonPrefixTemplateEngine.java,testHashInColumnNameOkay,"@Test public void  () throws Exception { ParsedSql parsed=parser.parse(""select column# from thetable where id = :id"" ctx); assertThat(parsed.getSql()).isEqualTo(""select column# from thetable where id = ?""); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestColonPrefixTemplateEngine.java,testIgnoreAngleBracketsNotPartOfToken,"@Test public void  () throws Exception { String sql=""select * from foo where end_date < ? and start_date > ?""; assertThat(render(sql)).isEqualTo(sql); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestColonPrefixTemplateEngine.java,testLeaveEnquotedTokensIntact,"@Test public void  () throws Exception { String sql=""select '<foo>' foo  \""<bar>\"" bar from something""; assertThat(render(sql ImmutableMap.of(""foo"" ""no"" ""bar"" ""stahp""))).isEqualTo(sql); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestColonPrefixTemplateEngine.java,testNewlinesOkay,"@Test public void  () throws Exception { ParsedSql parsed=parser.parse(""select * from something\n where id = :id"" ctx); assertThat(parsed.getSql()).isEqualTo(""select * from something\n where id = ?""); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestColonPrefixTemplateEngine.java,testNumbers,"@Test public void  () throws Exception { ParsedSql parsed=parser.parse("":bo0 ':nope' _%&^& *@ :id"" ctx); assertThat(parsed.getSql()).isEqualTo(""? ':nope' _%&^& *@ ?""); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestColonPrefixTemplateEngine.java,testOddCharacters,"@Test public void  () throws Exception { ParsedSql parsed=parser.parse(""~* :boo ':nope' _%&^& *@ :id"" ctx); assertThat(parsed.getSql()).isEqualTo(""~* ? ':nope' _%&^& *@ ?""); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestColonPrefixTemplateEngine.java,testSubstitutesDefinedAttributes,"@Test public void  () throws Exception { Map<String Object> attributes=ImmutableMap.of(""column"" ""foo"" ""table"" ""bar""); String rendered=render(""select <column> from <table> where <column> = :someValue"" attributes); ParsedSql parsed=parser.parse(rendered ctx"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestColonPrefixTemplateEngine.java,testUndefinedAttribute,"@Test(expected=UnableToCreateStatementException.class) public void  () throws Exception { render(""select * from <table>"" Collections.emptyMap()); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestEscapedCharacters.java,parseString,private String  (final String src){ return parser.parse(src mock(StatementContext.class)).getSql(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestEscapedCharacters.java,testEscapedSql,"@Test public void  (){ assertThat(parseString(""insert into foo (xyz) values (:bar\\:\\:some_strange_type)"")).isEqualTo(""insert into foo (xyz) values (?::some_strange_type)""); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestEscapedCharacters.java,testSimpleSql,"@Test public void  (){ assertThat(parseString(""insert into foo (xyz) values (:bar)"")).isEqualTo(""insert into foo (xyz) values (?)""); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestEscapedCharacters.java,testSimpleString,"@Test public void  (){ assertThat(parseString(""hello  world"")).isEqualTo(""hello  world""); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestPositionalParameterBinding.java,setUp,@Before public void  () throws Exception { h=dbRule.openHandle(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestPositionalParameterBinding.java,testBehaviorOnBadBinding1,"@Test(expected=UnableToExecuteStatementException.class) public void  () throws Exception { h.createQuery(""select * from something where id = ? and name = ?"").bind(0 1).mapToBean(Something.class).list(); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestPositionalParameterBinding.java,testBehaviorOnBadBinding2,"@Test(expected=UnableToExecuteStatementException.class) public void  () throws Exception { h.createQuery(""select * from something where id = ?"").bind(1 1).bind(2 ""Hi"").mapToBean(Something.class).list(); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestPositionalParameterBinding.java,testInsertParamBinding,"@Test public void  () throws Exception { int count=h.createUpdate(""insert into something (id  name) values (?  'eric')"").bind(0 1).execute(); assertThat(count).isEqualTo(1); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestPositionalParameterBinding.java,testPositionalConvenienceInsert,"@Test public void  () throws Exception { int count=h.execute(""insert into something (id  name) values (?  ?)"" 1 ""eric""); assertThat(count).isEqualTo(1); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestPositionalParameterBinding.java,testSetPositionalInteger,"@Test public void  () throws Exception { h.execute(""insert into something (id  name) values (1  'eric')""); h.execute(""insert into something (id  name) values (2  'brian')""); Something eric=h.createQuery(""select * from something where id = ?"").bind(0 1).ma"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestPositionalParameterBinding.java,testSetPositionalString,"@Test public void  () throws Exception { h.execute(""insert into something (id  name) values (1  'eric')""); h.execute(""insert into something (id  name) values (2  'brian')""); Something eric=h.createQuery(""select * from something where name = ?"").bind(0 ""er"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestMessageFormatTemplateEngine.java,setUp,@Before public void  (){ templateEngine=MessageFormatTemplateEngine.INSTANCE; attributes=new HashMap<>(); ctx=mock(StatementContext.class); when(ctx.getAttributes()).thenReturn(attributes); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestMessageFormatTemplateEngine.java,testBlankKey,"@Test public void  (){ attributes.put("" "" ""hello""); assertThatThrownBy(() -> templateEngine.render(""{0} bar"" ctx)).isInstanceOf(IllegalArgumentException.class).hasMessageContaining(""\"" \""""); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestMessageFormatTemplateEngine.java,testDuplicateKey,"@Test public void  (){ attributes.put(""0"" ""hello""); attributes.put(""00"" ""world""); assertThatThrownBy(() -> templateEngine.render(""{0} {1}"" ctx)).isInstanceOf(IllegalArgumentException.class).hasMessageContaining(""0 was given more than once""); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestMessageFormatTemplateEngine.java,testManyValues,"@Test public void  (){ attributes.put(""000"" ""a""); attributes.put(""001"" ""b""); attributes.put(""002"" ""c""); attributes.put(""003"" ""d""); attributes.put(""004"" ""e""); attributes.put(""005"" ""f""); attributes.put(""006"" ""g""); attributes.put(""007"" ""h""); attributes.put("""
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestMessageFormatTemplateEngine.java,testNegativeKey,"@Test public void  (){ attributes.put(""-1"" ""hello""); assertThatThrownBy(() -> templateEngine.render(""{0} bar"" ctx)).isInstanceOf(IllegalArgumentException.class).hasMessageContaining(""must be 0""); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestMessageFormatTemplateEngine.java,testNoPlaceholdersButWithValues,"@Test public void  (){ attributes.put(""0"" ""hello""); assertThatThrownBy(() -> templateEngine.render(""foo bar"" ctx)).isInstanceOf(IllegalArgumentException.class).hasMessageContaining(""expected 0 keys but got 1""); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestMessageFormatTemplateEngine.java,testNoPlaceholdersNoValues,"@Test public void  (){ attributes.clear(); assertThat(templateEngine.render(""foo bar"" ctx)).isEqualTo(""foo bar""); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestMessageFormatTemplateEngine.java,testNonNumericKey,"@Test public void  (){ attributes.put(""abc"" ""hello""); assertThatThrownBy(() -> templateEngine.render(""{0} bar"" ctx)).isInstanceOf(IllegalArgumentException.class).hasMessageContaining(""\""abc\""""); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestMessageFormatTemplateEngine.java,testSkippedKey,"@Test public void  (){ attributes.put(""0"" ""hello""); attributes.put(""2"" ""world""); assertThatThrownBy(() -> templateEngine.render(""{0} {1}"" ctx)).isInstanceOf(IllegalArgumentException.class).hasMessageContaining(""skip from 0 to 2""); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestMessageFormatTemplateEngine.java,testWhitespaceInKey,"@Test public void  (){ attributes.put("" 1 "" ""hello""); assertThatThrownBy(() -> templateEngine.render(""{0} bar"" ctx)).isInstanceOf(IllegalArgumentException.class).hasMessageContaining(""\"" 1 \""""); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestMessageFormatTemplateEngine.java,testWithPlaceholdersAndValues,"@Test public void  (){ attributes.put(""02"" ""!""); attributes.put(""000"" ""hello""); attributes.put(""01"" ""world""); assertThat(templateEngine.render(""{0} {1}{2}"" ctx)).isEqualTo(""hello world!""); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestMessageFormatTemplateEngine.java,testWithPlaceholdersButNoValues,"@Test public void  (){ attributes.clear(); assertThatThrownBy(() -> templateEngine.render(""{0} bar"" ctx)).isInstanceOf(IllegalArgumentException.class).hasMessageContaining(""expected 1 keys but got 0""); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestPreparedBatch.java,PublicSomething,"@ConstructorProperties({""id"" ""name""}) public  (Integer id String name){ this.id=id; this.name=name; } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestPreparedBatch.java,closeHandle,@After public void  (){ h.close(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestPreparedBatch.java,openHandle,@Before public void  (){ h=dbRule.openHandle(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestPreparedBatch.java,testBigishBatch,"@Test public void  () throws Exception { PreparedBatch b=h.prepareBatch(""insert into something (id  name) values (:id  :name)""); int count=100; for (int i=0; i < count; ++i) { b.bind(""id"" i).bind(""name"" ""A Name"").add(); } b.execute(); int row_count=h.crea"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestPreparedBatch.java,testBindBatch,"@Test public void  () throws Exception { PreparedBatch b=h.prepareBatch(""insert into something (id  name) values (:id  :name)""); b.bind(""id"" 1).bind(""name"" ""Eric"").add(); b.bind(""id"" 2).bind(""name"" ""Brian"").add(); b.bind(""id"" 3).bind(""name"" ""Keith"").add()"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestPreparedBatch.java,testBindMaps,"@Test public void  () throws Exception { PreparedBatch b=h.prepareBatch(""insert into something (id  name) values (:id  :name)""); b.add(ImmutableMap.of(""id"" 0 ""name"" ""Keith"")); b.add(ImmutableMap.of(""id"" 1 ""name"" ""Eric"")); b.add(ImmutableMap.of(""id"" 2 ""nam"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestPreparedBatch.java,testBindProperties,"@Test public void  () throws Exception { PreparedBatch b=h.prepareBatch(""insert into something (id  name) values (?  ?)""); b.add(0 ""Keith""); b.add(1 ""Eric""); b.add(2 ""Brian""); b.execute(); List<Something> r=h.createQuery(""select * from something order by "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestPreparedBatch.java,testContextGetsBinding,"@Test public void  () throws Exception { try { h.prepareBatch(""insert into something (id  name) values (:id  :name)"").bind(""id"" 0).bind(""name"" ""alice"").add().bind(""id"" 0).bind(""name"" ""bob"").add().execute(); fail(""expected exception""); } catch ( UnableToEx"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestPreparedBatch.java,testForgotFinalAdd,"@Test public void  () throws Exception { PreparedBatch b=h.prepareBatch(""insert into something (id  name) values (:id  :name)""); b.bind(""id"" 1); b.bind(""name"" ""Jeff""); b.add(); b.bind(""id"" 2); b.bind(""name"" ""Tom""); b.execute(); assertThat(h.createQuery(""s"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestPreparedBatch.java,testMixedModeBatch,"@Test public void  () throws Exception { PreparedBatch b=h.prepareBatch(""insert into something (id  name) values (:id  :name)""); Map<String Object> one=ImmutableMap.of(""id"" 0); b.bind(""name"" ""Keith"").add(one); b.execute(); List<Something> r=h.createQuery("
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestPreparedBatch.java,testMultipleExecuteBind,"@Test public void  (){ final PreparedBatch b=h.prepareBatch(""insert into something (id  name) values (:id  :name)""); b.bind(""id"" 1).bind(""name"" ""Eric"").add(); b.bind(""id"" 2).bind(""name"" ""Brian"").add(); b.execute(); b.bind(""id"" 3).bind(""name"" ""Keith"").add("
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestPreparedBatch.java,testMultipleExecuteBindBean,"@Test public void  (){ final PreparedBatch b=h.prepareBatch(""insert into something (id  name) values (:id  :name)""); b.bindBean(new Something(1 ""Eric"")).add(); b.bindBean(new Something(2 ""Brian"")).add(); b.execute(); b.bindBean(new Something(3 ""Keith"")).a"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestPreparedBatch.java,testMultipleExecuteBindFields,"@Test public void  (){ h.registerRowMapper(ConstructorMapper.factory(PublicSomething.class)); final PreparedBatch b=h.prepareBatch(""insert into something (id  name) values (:id  :name)""); b.bindFields(new PublicSomething(1 ""Eric"")).add(); b.bindFields(new"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestPreparedBatch.java,testPositionalBinding,"@Test public void  () throws Exception { PreparedBatch b=h.prepareBatch(""insert into something (id  name) values (?  ?)""); b.bind(0 0).bind(1 ""Keith"").add().execute(); List<Something> r=h.createQuery(""select * from something order by id"").mapToBean(Someth"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestPreparedBatchGenerateKeysPostgres.java,IdCreateTime,public  (Integer id Date createTime){ this.id=id; this.createTime=createTime; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestPreparedBatchGenerateKeysPostgres.java,close,@After public void  (){ h.close(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestPreparedBatchGenerateKeysPostgres.java,getHandle,@Before public void  (){ h=dbRule.getJdbi().open(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestPreparedBatchGenerateKeysPostgres.java,prepare,"@Override protected void  (Handle handle){ handle.execute(""create table something (id serial  name varchar(50)  create_time timestamp default now())""); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestPreparedBatchGenerateKeysPostgres.java,testBatchInsertWithKeyGenerationAndExplicitColumnNames,"@Test public void  (){ PreparedBatch batch=h.prepareBatch(""insert into something (name) values (?) ""); batch.add(""Brian""); batch.add(""Thom""); List<Integer> ids=batch.executeAndReturnGeneratedKeys(""id"").mapTo(Integer.class).list(); assertThat(ids).contains"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestPreparedBatchGenerateKeysPostgres.java,testBatchInsertWithKeyGenerationAndExplicitSeveralColumnNames,"@Test public void  (){ PreparedBatch batch=h.prepareBatch(""insert into something (name) values (?) ""); batch.add(""Brian""); batch.add(""Thom""); List<IdCreateTime> ids=batch.executeAndReturnGeneratedKeys(""id"" ""create_time"").map((r ctx) -> new IdCreateTime(r."
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestPreparedBatchGenerateKeys.java,testBatchInsertWithKeyGeneration,"@Test public void  () throws Exception { Jdbi db=Jdbi.create(""jdbc:hsqldb:mem:jdbi-batch-keys-test"" ""sa"" """"); try (Handle h=db.open()){ h.execute(""create table something (id integer not null generated by default as identity (start with 10000)  name varcha"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestQueries.java,doTearDown,@After public void  () throws Exception { if (h != null) h.close(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestQueries.java,setUp,@Before public void  () throws Exception { h=dbRule.openHandle(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestQueries.java,testCollectList,"@Test public void  () throws Exception { h.prepareBatch(""insert into something (id  name) values (?  ?)"").add(1 ""Brian"").add(2 ""Keith"").execute(); List<String> rs=h.createQuery(""select name from something order by id"").mapTo(String.class).collect(toList()"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestQueries.java,testConvenienceMethod,"@Test public void  () throws Exception { h.execute(""insert into something (id  name) values (1  'eric')""); h.execute(""insert into something (id  name) values (2  'brian')""); List<Map<String Object>> r=h.select(""select * from something order by id"").mapToM"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestQueries.java,testConvenienceMethodWithParam,"@Test public void  () throws Exception { h.execute(""insert into something (id  name) values (1  'eric')""); h.execute(""insert into something (id  name) values (2  'brian')""); List<Map<String Object>> r=h.select(""select * from something where id = ?"" 1).map"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestQueries.java,testCreateQueryObject,"@Test public void  () throws Exception { h.createUpdate(""insert into something (id  name) values (1  'eric')"").execute(); h.createUpdate(""insert into something (id  name) values (2  'brian')"").execute(); List<Map<String Object>> results=h.createQuery(""sel"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestQueries.java,testFetchSize,"@Test public void  () throws Exception { h.createScript(findSqlOnClasspath(""default-data"")).execute(); ResultIterable<Something> ri=h.createQuery(""select id  name from something order by id"").setFetchSize(1).mapToBean(Something.class); ResultIterator<Some"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestQueries.java,testFirstResult,"@Test public void  () throws Exception { h.execute(""insert into something (id  name) values (1  'eric')""); h.execute(""insert into something (id  name) values (2  'brian')""); Something r=h.createQuery(""select * from something order by id"").mapToBean(Someth"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestQueries.java,testFirstWithNoResult,"@Test public void  () throws Exception { Optional<Something> s=h.createQuery(""select id  name from something"").mapToBean(Something.class).findFirst(); assertThat(s.isPresent()).isFalse(); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestQueries.java,testFold,"@Test public void  () throws Exception { h.prepareBatch(""insert into something (id  name) values (?  ?)"").add(1 ""Brian"").add(2 ""Keith"").execute(); Map<String Integer> rs=h.createQuery(""select id  name from something"").<Entry<String Integer>>map((r ctx) ->"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestQueries.java,testHelpfulErrorOnNothingSet,"@Test(expected=UnableToExecuteStatementException.class) public void  () throws Exception { h.createQuery(""select * from something where name = :name"").mapToMap().list(); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestQueries.java,testIteratedResult,"@Test public void  () throws Exception { h.execute(""insert into something (id  name) values (1  'eric')""); h.execute(""insert into something (id  name) values (2  'brian')""); try (ResultIterator<Something> i=h.createQuery(""select * from something order by "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestQueries.java,testIteratorBehavior,"@Test public void  () throws Exception { h.execute(""insert into something (id  name) values (1  'eric')""); h.execute(""insert into something (id  name) values (2  'brian')""); try (ResultIterator<Something> i=h.createQuery(""select * from something order by "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestQueries.java,testIteratorBehavior2,"@Test public void  () throws Exception { h.execute(""insert into something (id  name) values (1  'eric')""); h.execute(""insert into something (id  name) values (2  'brian')""); try (ResultIterator<Something> i=h.createQuery(""select * from something order by "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestQueries.java,testIteratorBehavior3,"@Test public void  () throws Exception { h.execute(""insert into something (id  name) values (1  'eric')""); h.execute(""insert into something (id  name) values (2  'eric')""); assertThat(h.createQuery(""select * from something order by id"").mapToBean(Somethin"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestQueries.java,testListWithMaxRows,"@Test public void  () throws Exception { h.prepareBatch(""insert into something (id  name) values (?  ?)"").add(1 ""Brian"").add(2 ""Keith"").add(3 ""Eric"").execute(); assertThat(h.createQuery(""select id  name from something"").mapToBean(Something.class).withStre"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestQueries.java,testMapMapperOrdering,"@Test public void  () throws Exception { h.execute(""insert into something (id  name) values (?  ?)"" 1 ""hello""); h.execute(""insert into something (id  name) values (?  ?)"" 2 ""world""); List<Map<String Object>> rs=h.createQuery(""select id  name from somethin"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestQueries.java,testMappedQueryObject,"@Test public void  () throws Exception { h.execute(""insert into something (id  name) values (1  'eric')""); h.execute(""insert into something (id  name) values (2  'brian')""); ResultIterable<Something> query=h.createQuery(""select * from something order by i"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestQueries.java,testMappedQueryObjectWithNullForPrimitiveIntField,"@Test public void  () throws Exception { h.execute(""insert into something (id  name  intValue) values (1  'eric'  null)""); ResultIterable<Something> query=h.createQuery(""select * from something order by id"").mapToBean(Something.class); List<Something> r=q"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestQueries.java,testMappedQueryObjectWithNulls,"@Test public void  () throws Exception { h.execute(""insert into something (id  name  integerValue) values (1  'eric'  null)""); ResultIterable<Something> query=h.createQuery(""select * from something order by id"").mapToBean(Something.class); List<Something>"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestQueries.java,testMapper,"@Test public void  () throws Exception { h.execute(""insert into something (id  name) values (1  'eric')""); h.execute(""insert into something (id  name) values (2  'brian')""); ResultIterable<String> query=h.createQuery(""select name from something order by i"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestQueries.java,testMixedSetting,"@Test public void  () throws Exception { h.execute(""insert into something (id  name) values (1  'eric')""); h.execute(""insert into something (id  name) values (2  'brian')""); assertThatThrownBy(() -> h.createQuery(""select * from something where name = :nam"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestQueries.java,testNullValueInColumn,"@Test public void  () throws Exception { h.execute(""insert into something (id  name) values (?  ?)"" 1 null); Optional<String> s=h.createQuery(""select name from something where id=1"").mapTo(String.class).findFirst(); assertThat(s.isPresent()).isFalse(); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestQueries.java,testPositionalArgWithNamedParam,"@Test public void  () throws Exception { h.execute(""insert into something (id  name) values (1  'eric')""); h.execute(""insert into something (id  name) values (2  'brian')""); assertThatThrownBy(() -> h.createQuery(""select * from something where name = :nam"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestQueries.java,testQueriesWithNullResultSets,"@Test public void  () throws Exception { expectedException.expect(NoResultsException.class); h.select(""insert into something (id  name) values (?  ?)"" 1 ""hello"").mapToMap().list(); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestQueries.java,testStatementCustomizersPersistAfterMap,"@Test public void  () throws Exception { h.execute(""insert into something (id  name) values (?  ?)"" 1 ""hello""); h.execute(""insert into something (id  name) values (?  ?)"" 2 ""world""); List<Something> rs=h.createQuery(""select id  name from something"").setMa"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestQueries.java,testUsefulArgumentOutputForDebug,"@Test public void  () throws Exception { expectedException.expect(StatementException.class); expectedException.expectMessage(""arguments:{ positional:{7:8}  named:{name:brian}  finder:[{one=two} {lazy bean property arguments \""java.lang.Object""); h.createU"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestStatementContext.java,testFoo,"@Test public void  () throws Exception { Handle h=dbRule.openHandle(); final int inserted=h.createUpdate(""insert into <table> (id  name) values (:id  :name)"").bind(""id"" 7).bind(""name"" ""Martin"").define(""table"" ""something"").execute(); assertThat(inserted).i"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestStatementExceptionContext.java,testFoo,"@Test public void  () throws Exception { assertThatExceptionOfType(StatementException.class).isThrownBy(() -> dbRule.openHandle().execute(""WOOF"" 7 ""Tom"")).satisfies(e -> assertThat(e.getStatementContext().getRawSql()).isEqualTo(""WOOF"")); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestScript.java,testFuzzyScript,"@Test public void  () throws Exception { Handle h=dbRule.openHandle(); Script script=h.createScript(getResourceOnClasspath(""script/fuzzy-script.sql"")); script.executeAsSeparateStatements(); List<Map<String Object>> rows=h.select(""select id  name from some"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestScript.java,testScriptAsSetOfSeparateStatements,"@Test public void  () throws Exception { assertThatExceptionOfType(StatementException.class).isThrownBy(() -> { Handle h=dbRule.openHandle(); Script script=h.createScript(getResourceOnClasspath(""script/malformed-sql-script.sql"")); script.executeAsSeparate"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestScript.java,testScriptStuff,"@Test public void  () throws Exception { Handle h=dbRule.openHandle(); Script s=h.createScript(findSqlOnClasspath(""default-data"")); s.execute(); assertThat(h.select(""select * from something"").mapToMap()).hasSize(2); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestScript.java,testScriptWithComments,"@Test public void  () throws Exception { Handle h=dbRule.openHandle(); Script script=h.createScript(getResourceOnClasspath(""script/insert-script-with-comments.sql"")); script.execute(); assertThat(h.select(""select * from something"").mapToMap()).hasSize(3);"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestScript.java,testScriptWithStringSemicolon,"@Test public void  () throws Exception { Handle h=dbRule.openHandle(); Script script=h.createScript(getResourceOnClasspath(""script/insert-with-string-semicolons.sql"")); script.execute(); assertThat(h.select(""select * from something"").mapToMap()).hasSize(3"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestStatements.java,doTearDown,@After public void  () throws Exception { if (h != null) h.close(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestStatements.java,setUp,@Before public void  () throws Exception { h=dbRule.openHandle(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestStatements.java,testSimpleInsert,"@Test public void  () throws Exception { int c=h.execute(""insert into something (id  name) values (1  'eric')""); assertThat(c).isEqualTo(1); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestStatements.java,testSimpleUpdate,"@Test public void  () throws Exception { h.execute(""insert into something (id  name) values (1  'eric')""); h.execute(""update something set name = 'cire' where id = 1""); Something eric=h.createQuery(""select * from something where id = 1"").mapToBean(Somethi"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestStatements.java,testStatement,"@Test public void  () throws Exception { int rows=h.createUpdate(""insert into something (id  name) values (1  'eric')"").execute(); assertThat(rows).isEqualTo(1); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestStatements.java,testStatementWithOptionalResults,"@Test public void  () throws Exception { h.getConfig(ResultProducers.class).allowNoResults(true); assertThat(h.createQuery(""commit"").mapTo(Integer.class).findFirst()).isEmpty(); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestStatements.java,testStatementWithRequiredResults,"@Test(expected=NoResultsException.class) public void  () throws Exception { assertThat(h.createQuery(""commit"").mapTo(Integer.class).findFirst()).isEmpty(); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestStatements.java,testUpdate,"@Test public void  () throws Exception { h.execute(""insert into something (id  name) values (1  'eric')""); h.createUpdate(""update something set name = 'ERIC' where id = 1"").execute(); Something eric=h.createQuery(""select * from something where id = 1"").ma"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestUpdateGeneratedKeys.java,setUp,"@Before public void  () throws Exception { try (final Connection conn=dbRule.getConnectionFactory().openConnection();final Statement create=conn.createStatement()){ create.execute(""create table something_else ( id integer not null generated always as iden"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestUpdateGeneratedKeys.java,testDelete,"@Test public void  () throws Exception { Handle h=dbRule.openHandle(); Update insert=h.createUpdate(""insert into something_else (name) values (:name)""); insert.bind(""name"" ""Brian""); Long id1=insert.executeAndReturnGeneratedKeys().mapTo(long.class).findOnl"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestUpdateGeneratedKeys.java,testInsert,"@Test public void  () throws Exception { Handle h=dbRule.openHandle(); Update insert1=h.createUpdate(""insert into something_else (name) values (:name)""); insert1.bind(""name"" ""Brian""); Long id1=insert1.executeAndReturnGeneratedKeys().mapTo(long.class).find"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestUpdateGeneratedKeys.java,testUpdate,"@Test public void  () throws Exception { Handle h=dbRule.openHandle(); Update insert=h.createUpdate(""insert into something_else (name) values (:name)""); insert.bind(""name"" ""Brian""); Long id1=insert.executeAndReturnGeneratedKeys().mapTo(long.class).findOnl"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestTimingCollector.java,collect,@Override public synchronized void  (final long elapsedTime final StatementContext ctx){ rawStatements.add(ctx.getRawSql()); renderedStatements.add(ctx.getRenderedSql()); parsedStatements.add(ctx.getParsedSql()); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestTimingCollector.java,doTearDown,@After public void  () throws Exception { if (h != null) h.close(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestTimingCollector.java,getParsedStatements,public synchronized List<ParsedSql>  (){ return parsedStatements; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestTimingCollector.java,getRawStatements,public synchronized List<String>  (){ return rawStatements; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestTimingCollector.java,getRenderedStatements,public List<String>  (){ return renderedStatements; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestTimingCollector.java,openHandle,protected Handle  () throws SQLException { tc=new TTC(); dbRule.getJdbi().getConfig(SqlStatements.class).setTimingCollector(tc); return dbRule.getJdbi().open(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestTimingCollector.java,setUp,@Before public void  () throws Exception { h=openHandle(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestTimingCollector.java,testBatch,"@Test public void  (){ String insert=""insert into something (id  name) values (:id  :name)""; h.prepareBatch(insert).bind(""id"" 1).bind(""name"" ""Eric"").add().bind(""id"" 2).bind(""name"" ""Brian"").add().execute(); String select=""select * from something order by i"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestTimingCollector.java,testInsert,"@Test public void  () throws Exception { String statement=""insert into something (id  name) values (1  'eric')""; int c=h.execute(statement); assertThat(c).isEqualTo(1); assertThat(tc.getRawStatements()).containsExactly(statement); assertThat(tc.getRendere"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestTimingCollector.java,testUpdate,"@Test public void  () throws Exception { String stmt1=""insert into something (id  name) values (1  'eric')""; String stmt2=""update something set name = :name where id = :id""; String stmt3=""select * from something where id = :id""; h.execute(stmt1); h.create"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\TestClosingHandle.java,doTearDown,@After public void  () throws Exception { if (h != null) h.close(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\TestClosingHandle.java,setUp,@Before public void  () throws Exception { h=dbRule.openHandle(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\TestClosingHandle.java,testCloseWithOpenContainerManagedTransaction,@Test public void  () throws Exception { try (Connection conn=dbRule.getConnectionFactory().openConnection()){ conn.setAutoCommit(false); Handle handle=Jdbi.open(conn); handle.close(); } } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\TestClosingHandle.java,testCloseWithOpenTransaction,@Test public void  () throws Exception { h.begin(); assertThatThrownBy(h::close).isInstanceOf(TransactionException.class); assertThat(h.isClosed()).isTrue(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\TestClosingHandle.java,testCloseWithOpenTransactionCheckDisabled,@Test public void  () throws Exception { h.getConfig(Handles.class).setForceEndTransactions(false); h.begin(); h.close(); assertThat(h.isClosed()).isTrue(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\TestClosingHandle.java,testClosing,"@Test public void  () throws Exception { h.createUpdate(""insert into something (id  name) values (1  'eric')"").execute(); h.createUpdate(""insert into something (id  name) values (2  'brian')"").execute(); List<Map<String Object>> results=h.createQuery(""sel"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\TestClosingHandle.java,testIterateAllTheWay,"@Test public void  () throws Exception { h.createUpdate(""insert into something (id  name) values (1  'eric')"").execute(); h.createUpdate(""insert into something (id  name) values (2  'brian')"").execute(); ResultIterator<Map<String Object>> it=h.createQuery"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\TestClosingHandle.java,testIterateKeepHandle,"@Test public void  () throws Exception { h.createUpdate(""insert into something (id  name) values (1  'eric')"").execute(); h.createUpdate(""insert into something (id  name) values (2  'brian')"").execute(); ResultIterator<Map<String Object>> it=h.createQuery"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\TestClosingHandle.java,testIteratorBehaviour,"@Test public void  () throws Exception { h.createUpdate(""insert into something (id  name) values (1  'eric')"").execute(); h.createUpdate(""insert into something (id  name) values (2  'brian')"").execute(); h.createUpdate(""insert into something (id  name) va"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\TestClosingHandle.java,testIteratorClose,"@Test public void  () throws Exception { h.createUpdate(""insert into something (id  name) values (1  'eric')"").execute(); h.createUpdate(""insert into something (id  name) values (2  'brian')"").execute(); h.createUpdate(""insert into something (id  name) va"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\TestClosingHandle.java,testNotClosing,"@Test public void  () throws Exception { h.createUpdate(""insert into something (id  name) values (1  'eric')"").execute(); h.createUpdate(""insert into something (id  name) values (2  'brian')"").execute(); List<Map<String Object>> results=h.createQuery(""sel"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\TestHandle.java,testInTransaction,"@Test public void  () throws Exception { Handle h=dbRule.openHandle(); String value=h.inTransaction(handle -> { handle.execute(""insert into something (id  name) values (1  'Brian')""); return handle.createQuery(""select name from something where id = 1"").ma"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\TestHandle.java,testIsClosed,"@SuppressWarnings(""resource"") @Test public void  () throws Exception { Handle h=dbRule.openHandle(); assertThat(h.isClosed()).isFalse(); h.close(); assertThat(h.isClosed()).isTrue(); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\TestHandle.java,testMrWinter,"@Test public void  (){ final Handle h=dbRule.getSharedHandle(); h.execute(""CREATE TABLE \""\u2603\"" (pk int primary key)""); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\TestHandle.java,testSillyNumberOfCallbacks,"@Test public void  () throws Exception { try (Handle h=dbRule.openHandle()){ h.execute(""insert into something (id  name) values (1  'Keith')""); } String value=dbRule.getJdbi().withHandle(handle -> handle.inTransaction(handle1 -> handle1.createQuery(""selec"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\TestJdbi.java,testConnectionFactoryCtor,@Test public void  () throws Exception { Jdbi db=Jdbi.create(() -> { try { return DriverManager.getConnection(this.dbRule.getConnectionString()); } catch ( SQLException e) { throw new ConnectionException(e); } } ); try (Handle h=db.open()){ assertThat(h).
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\TestJdbi.java,testCorrectExceptionOnSQLException,@Test(expected=ConnectionException.class) public void  () throws Exception { Jdbi db=Jdbi.create(() -> { throw new SQLException(); } ); db.open(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\TestJdbi.java,testDataSourceConstructor,@Test public void  () throws Exception { Jdbi db=Jdbi.create(this.dbRule.getConnectionString()); try (Handle h=db.open()){ assertThat(h).isNotNull(); } } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\TestJdbi.java,testUseHandle,"@Test public void  () throws Exception { Jdbi db=Jdbi.create(this.dbRule.getConnectionString()); db.useHandle(handle -> { handle.execute(""insert into something (id  name) values (1  'Brian')""); String value=handle.createQuery(""select name from something w"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\TestJdbi.java,testWithHandle,"@Test public void  () throws Exception { Jdbi db=Jdbi.create(this.dbRule.getConnectionString()); String value=db.withHandle(handle -> { handle.execute(""insert into something (id  name) values (1  'Brian')""); return handle.createQuery(""select name from som"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\TestJsr310.java,instant,"@Test public void  (){ Instant i=Instant.now(); h.execute(""insert into stuff(ts) values (?)"" i); assertThat(h.createQuery(""select ts from stuff"").mapTo(Instant.class).findOnly()).isEqualTo(i); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\TestJsr310.java,localDate,"@Test public void  (){ LocalDate d=LocalDate.now(); h.execute(""insert into stuff(d) values (?)"" d); assertThat(h.createQuery(""select d from stuff"").mapTo(LocalDate.class).findOnly()).isEqualTo(d); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\TestJsr310.java,localDateTime,"@Test public void  (){ LocalDateTime d=LocalDateTime.now(); h.execute(""insert into stuff(ts) values (?)"" d); assertThat(h.createQuery(""select ts from stuff"").mapTo(LocalDateTime.class).findOnly()).isEqualTo(d); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\TestJsr310.java,localTime,"@Test public void  (){ h.execute(""create table schedule (start time  end time)""); LocalTime start=LocalTime.of(8 30 0); LocalTime end=LocalTime.of(10 30 0); h.execute(""insert into schedule (start  end) values (? ?)"" start end); assertThat(h.createQuery(""s"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\TestJsr310.java,offsetDateTime,"@Test public void  (){ OffsetDateTime dt=OffsetDateTime.now(); h.execute(""insert into stuff(ts) values (?)"" dt); assertThat(h.createQuery(""select ts from stuff"").mapTo(OffsetDateTime.class).findOnly()).isEqualTo(dt); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\TestJsr310.java,offsetDateTimeLosesOffset,"@Test public void  (){ OffsetDateTime dt=OffsetDateTime.now().withOffsetSameInstant(ZoneOffset.ofHours(-7)); h.execute(""insert into stuff(ts) values (?)"" dt); assertThat(h.createQuery(""select ts from stuff"").mapTo(OffsetDateTime.class).findOnly().isEqual("
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\TestJsr310.java,setUp,"@Before public void  (){ h=dbRule.getSharedHandle(); h.execute(""create table stuff (ts timestamp  d date)""); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\TestJsr310.java,zonedDateTime,"@Test public void  (){ ZonedDateTime dt=ZonedDateTime.now(); h.execute(""insert into stuff(ts) values (?)"" dt); assertThat(h.createQuery(""select ts from stuff"").mapTo(ZonedDateTime.class).findOnly()).isEqualTo(dt); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\TestJsr310.java,zonedDateTimeLosesZone,"@Test public void  (){ ZonedDateTime dt=ZonedDateTime.now().withZoneSameInstant(ZoneId.of(""America/Denver"")); h.execute(""insert into stuff(ts) values (?)"" dt); assertThat(h.createQuery(""select ts from stuff"").mapTo(ZonedDateTime.class).findOnly().isEqual("
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\TestPlugins.java,customizeConnection,@Override public Connection  (Connection conn){ return c; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\TestPlugins.java,customizeHandle,@Override public Handle  (Handle handle){ return h; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\TestPlugins.java,testCustomizeConnection,@Test public void  () throws Exception { Connection c=mock(Connection.class); dbRule.getJdbi().installPlugin(new JdbiPlugin(){ @Override public Connection customizeConnection( Connection conn){ return c; } } ); assertThat(c).isSameAs(dbRule.getJdbi().open
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\TestPlugins.java,testCustomizeHandle,@Test public void  () throws Exception { Handle h=mock(Handle.class); dbRule.getJdbi().installPlugin(new JdbiPlugin(){ @Override public Handle customizeHandle( Handle handle){ return h; } } ); assertThat(h).isSameAs(dbRule.getJdbi().open()); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestHashPrefixSqlParser.java,render,private String  (String sql Map<String Object> attributes){ StatementContext ctx=StatementContextAccess.createContext(); attributes.forEach(ctx::define); return templateEngine.render(sql ctx); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestHashPrefixSqlParser.java,setUp,@Before public void  () throws Exception { this.templateEngine=new DefinedAttributeTemplateEngine(); this.parser=new HashPrefixSqlParser(); ctx=mock(StatementContext.class); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestHashPrefixSqlParser.java,testBacktickOkay,"@Test public void  () throws Exception { ParsedSql parsed=parser.parse(""select * from `v$session"" ctx); assertThat(parsed.getSql()).isEqualTo(""select * from `v$session""); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestHashPrefixSqlParser.java,testBailsOutOnInvalidInput,"@Test(expected=UnableToCreateStatementException.class) public void  () throws Exception { parser.parse(""select * from something\n where id = #\u0087\u008e\u0092\u0097\u009c"" ctx); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestHashPrefixSqlParser.java,testColonIsLiteral,"@Test public void  () throws Exception { ParsedSql parsed=parser.parse(""select * from foo where id = :id"" ctx); assertThat(parsed.getSql()).isEqualTo(""select * from foo where id = :id""); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestHashPrefixSqlParser.java,testCommentQuote,"@Test public void  () throws Exception { String sql=""select 1 /* ' \"" <foo> */""; assertThat(parser.parse(sql ctx).getSql()).isEqualTo(sql); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestHashPrefixSqlParser.java,testDollarSignOkay,"@Test public void  () throws Exception { ParsedSql parsed=parser.parse(""select * from v$session"" ctx); assertThat(parsed.getSql()).isEqualTo(""select * from v$session""); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestHashPrefixSqlParser.java,testIgnoreAngleBracketsNotPartOfToken,"@Test public void  () throws Exception { String sql=""select * from foo where end_date < ? and start_date > ?""; assertThat(render(sql)).isEqualTo(sql); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestHashPrefixSqlParser.java,testLeaveEnquotedTokensIntact,"@Test public void  () throws Exception { String sql=""select '<foo>' foo  \""<bar>\"" bar from something""; assertThat(render(sql ImmutableMap.of(""foo"" ""no"" ""bar"" ""stahp""))).isEqualTo(sql); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestHashPrefixSqlParser.java,testNewlinesOkay,"@Test public void  () throws Exception { ParsedSql parsed=parser.parse(""select * from something\n where id = #id"" ctx); assertThat(parsed.getSql()).isEqualTo(""select * from something\n where id = ?""); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestHashPrefixSqlParser.java,testNumbers,"@Test public void  () throws Exception { ParsedSql parsed=parser.parse(""#bo0 '#nope' _%&^& *@ #id"" ctx); assertThat(parsed.getSql()).isEqualTo(""? '#nope' _%&^& *@ ?""); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestHashPrefixSqlParser.java,testOddCharacters,"@Test public void  () throws Exception { ParsedSql parsed=parser.parse(""~* #boo '#nope' _%&^& *@ #id"" ctx); assertThat(parsed.getSql()).isEqualTo(""~* ? '#nope' _%&^& *@ ?""); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestHashPrefixSqlParser.java,testSubstitutesDefinedAttributes,"@Test public void  () throws Exception { Map<String Object> attributes=ImmutableMap.of(""column"" ""foo"" ""table"" ""bar""); String rendered=render(""select <column> from <table> where <column> = #someValue"" attributes); ParsedSql parsed=parser.parse(rendered ctx"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\statement\TestHashPrefixSqlParser.java,testUndefinedAttribute,"@Test(expected=UnableToCreateStatementException.class) public void  () throws Exception { render(""select * from <table>"" Collections.emptyMap()); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\TestUuid.java,setupDbi,"@Before public void  () throws Exception { db=dbRule.getJdbi(); h=db.open(); h.execute(""CREATE TABLE foo (bar UUID)""); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\TestUuid.java,tearDown,@After public void  () throws Exception { h.close(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\TestUuid.java,testUuid,"@Test public void  () throws Exception { UUID u=UUID.randomUUID(); h.createUpdate(""INSERT INTO foo VALUES (:uuid)"").bind(""uuid"" u).execute(); assertThat(h.createQuery(""SELECT * FROM foo"").mapTo(UUID.class).findOnly()).isEqualTo(u); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\TestTooManyCursors.java,ConnectionInvocationHandler,public  (Connection connection int numSuccessfulStatements){ this.connection=connection; this.numSuccessfulStatements=numSuccessfulStatements; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\TestTooManyCursors.java,ErrorProducingConnectionFactory, (ConnectionFactory target int i){ this.target=target; connCount=i; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\TestTooManyCursors.java,StatementInvocationHandler,public  (Statement stmt ConnectionInvocationHandler connectionHandler){ this.stmt=stmt; this.connectionHandler=connectionHandler; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\TestTooManyCursors.java,invoke,"@Override public Object  (Object proxy Method method Object[] args) throws Throwable { if (""close"".equals(method.getName())) { connectionHandler.registerCloseStatement(); } try { return method.invoke(stmt args); } catch ( InvocationTargetException ex) { t"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\TestTooManyCursors.java,newInstance,public static Statement  (Statement stmt ConnectionInvocationHandler connectionHandler){ Class<?> o=stmt.getClass(); List<Class<?>> interfaces=new ArrayList<>(); while (!o.equals(Object.class)) { interfaces.addAll(Arrays.asList(o.getInterfaces())); o=o.getSuperclass(); } return (Statement)Proxy.newProxyInstance(stmt.getClass().getClassLoader() interfaces.toArray(new Class[interfaces.size()]) new StatementInvocationHandler(stmt connectionHandler)); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\TestTooManyCursors.java,openConnection,@Override public Connection  () throws SQLException { return ConnectionInvocationHandler.newInstance(target.openConnection() connCount); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\TestTooManyCursors.java,registerCloseStatement,public void  (){ numStatements--; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\TestTooManyCursors.java,testFoo,@Test public void  () throws Exception { ConnectionFactory cf=dbRule.getConnectionFactory(); ConnectionFactory errorCf=new ErrorProducingConnectionFactory(cf 99); Jdbi db=Jdbi.create(errorCf); db.useHandle(handle -> { handle.setStatementBuilder(new Defaul
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\transaction\TestLocalTransactionHandler.java,testRollbackThrow,"@Test public void  () throws Exception { RuntimeException outer=new RuntimeException(""Transaction throws!""); RuntimeException inner=new RuntimeException(""Rollback throws!""); Mockito.when(c.getAutoCommit()).thenReturn(true); Mockito.when(h.getConnection())"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\transaction\TestSerializableTransactionRunner.java,setUp,@Before public void  () throws Exception { db=Jdbi.create(dbRule.getConnectionFactory()); db.setTransactionHandler(new SerializableTransactionRunner()); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\transaction\TestSerializableTransactionRunner.java,testEventuallyFails,@Test public void  () throws Exception { final AtomicInteger tries=new AtomicInteger(5); Handle handle=db.open(); assertThatExceptionOfType(SQLException.class).isThrownBy(() -> handle.inTransaction(TransactionIsolationLevel.SERIALIZABLE conn -> { tries.de
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\transaction\TestSerializableTransactionRunner.java,testEventuallySucceeds,@Test public void  () throws Exception { final AtomicInteger tries=new AtomicInteger(3); Handle handle=db.open(); handle.inTransaction(TransactionIsolationLevel.SERIALIZABLE conn -> { if (tries.decrementAndGet() == 0) { return null; } throw new SQLExcepti
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\transaction\TestTransactions.java,begin,@Override public void  (Handle handle){ begin++; super.begin(handle); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\transaction\TestTransactions.java,close,@After public void  (){ h.close(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\transaction\TestTransactions.java,commit,@Override public void  (Handle handle){ commit++; super.commit(handle); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\transaction\TestTransactions.java,rollback,@Override public void  (Handle handle){ rollback++; super.rollback(handle); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\transaction\TestTransactions.java,setUp,@Before public void  (){ dbRule.getJdbi().setTransactionHandler(txSpy); h=dbRule.openHandle(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\transaction\TestTransactions.java,testCallback,"@Test public void  () throws Exception { String woot=h.inTransaction(x -> ""Woot!""); assertThat(woot).isEqualTo(""Woot!""); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\transaction\TestTransactions.java,testDoubleOpen,@Test public void  () throws Exception { assertThat(h.getConnection().getAutoCommit()).isTrue(); h.begin(); h.begin(); assertThat(h.getConnection().getAutoCommit()).isFalse(); h.commit(); assertThat(h.getConnection().getAutoCommit()).isTrue(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\transaction\TestTransactions.java,testExceptionAbortsTransaction,"@Test public void  () throws Exception { assertThatThrownBy(() -> h.inTransaction(handle -> { handle.execute(""insert into something (id  name) values (?  ?)"" 0 ""Keith""); throw new IOException(); } )).isInstanceOf(IOException.class); List<Something> r=h.cr"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\transaction\TestTransactions.java,testReleaseSavepoint,"@Test public void  () throws Exception { h.begin(); h.savepoint(""first""); h.execute(""insert into something (id  name) values (?  ?)"" 1 ""Martin""); h.release(""first""); assertThatExceptionOfType(TransactionException.class).isThrownBy(() -> h.rollbackToSavepo"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\transaction\TestTransactions.java,testRollbackDoesntCommit,@Test public void  () throws Exception { assertThat(begin).isEqualTo(0); h.useTransaction(th -> { assertThat(begin).isEqualTo(1); assertThat(rollback).isEqualTo(0); th.rollback(); } ); assertThat(rollback).isEqualTo(1); assertThat(commit).isEqualTo(0); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\transaction\TestTransactions.java,testRollbackOutsideTx,"@Test public void  () throws Exception { h.execute(""insert into something (id  name) values (?  ?)"" 7 ""Tom""); h.rollback(); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\transaction\TestTransactions.java,testSavepoint,"@Test public void  () throws Exception { h.begin(); h.execute(""insert into something (id  name) values (?  ?)"" 1 ""Tom""); h.savepoint(""first""); h.execute(""insert into something (id  name) values (?  ?)"" 2 ""Martin""); assertThat(h.createQuery(""select count(*"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\transaction\TestTransactions.java,testThrowingRuntimeExceptionPercolatesOriginal,@Test(expected=IllegalArgumentException.class) public void  () throws Exception { h.inTransaction(handle -> { throw new IllegalArgumentException(); } ); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\TestUri.java,testUri,"@Test public void  () throws Exception { Handle h=dbRule.openHandle(); h.createUpdate(""insert into something (id  name) values (1  :uri)"").bind(""uri"" TEST_URI).execute(); assertThat(h.createQuery(""SELECT name FROM something"").mapTo(URI.class).findOnly())."
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\ValueType.java,ValueType,private  (String value){ this.value=value; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\ValueType.java,equals,@Override public boolean  (Object o){ if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; ValueType that=(ValueType)o; return this.value.equals(that.value); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\ValueType.java,getValue,public String  (){ return value; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\ValueType.java,hashCode,@Override public int  (){ return value.hashCode(); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\ValueType.java,toString,@Override public String  (){ return value; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\ValueType.java,valueOf,public static ValueType  (String value){ return value == null ? null : new ValueType(value); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\transaction\TestTransactionsAutoCommit.java,restoreAutoCommitInitialStateOnUnexpectedError,@Test public void  () throws Exception { final Connection connection=mock(Connection.class); final PreparedStatement statement=mock(PreparedStatement.class); InOrder inOrder=inOrder(connection statement); Handle h=Jdbi.create(() -> connection).open(); whe
C:\Users\User\Desktop\Thesis\jdbi\docs\src\test\java\jdbi\doc\BatchTest.java,Fruit, (int id String name){ this.id=id; this.name=name; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\TestOptional.java,Name, (String value){ this.value=value; } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\TestOptional.java,build,@Override public Optional<Argument>  (Type expectedType Object value ConfigRegistry config){ if (expectedType == Name.class) { Name nameValue=(Name)value; return Optional.of((pos stmt c) -> stmt.setString(pos nameValue.value)); } return Optional.empty(); 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\TestOptional.java,createTestData,"@Before public void  (){ handle=dbRule.openHandle(); handle.createUpdate(""insert into something (id  name) values (1  'eric')"").execute(); handle.createUpdate(""insert into something (id  name) values (2  'brian')"").execute(); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\TestOptional.java,equals,@Override public boolean  (Object obj){ if (!(obj instanceof Name)) { return false; } Name that=(Name)obj; return this.value.equals(that.value); } 
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\TestOptional.java,testBindOptionalEmpty,"@Test public void  () throws Exception { List<Something> result=handle.createQuery(SELECT_BY_NAME).bind(""name"" Optional.empty()).mapToBean(Something.class).list(); assertThat(result).containsExactly(new Something(1 ""eric"") new Something(2 ""brian"")); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\TestOptional.java,testBindOptionalOfCustomType,"@Test public void  () throws Exception { handle.registerArgument(new NameArgumentFactory()); List<Something> result=handle.createQuery(SELECT_BY_NAME).bind(""name"" Optional.of(new Name(""eric""))).mapToBean(Something.class).list(); assertThat(result).contain"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\TestOptional.java,testBindOptionalOfUnregisteredCustomType,"@Test public void  () throws Exception { exception.expect(UnsupportedOperationException.class); handle.createQuery(SELECT_BY_NAME).bind(""name"" Optional.of(new Name(""eric""))).mapToBean(Something.class).list(); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\TestOptional.java,testBindOptionalPresent,"@Test public void  () throws Exception { Something result=handle.createQuery(SELECT_BY_NAME).bind(""name"" Optional.of(""brian"")).mapToBean(Something.class).findOnly(); assertThat(result).isEqualTo(new Something(2 ""brian"")); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\TestOptional.java,testDynamicBindOptionalEmpty,"@Test public void  () throws Exception { List<Something> result=handle.createQuery(SELECT_BY_NAME).bindByType(""name"" Optional.empty() new GenericType<Optional<String>>(){ } ).mapToBean(Something.class).list(); assertThat(result).containsExactly(new Someth"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\TestOptional.java,testDynamicBindOptionalOfCustomType,"@Test public void  () throws Exception { handle.registerArgument(new NameArgumentFactory()); handle.createQuery(SELECT_BY_NAME).bindByType(""name"" Optional.of(new Name(""eric"")) new GenericType<Optional<Name>>(){ } ).mapToBean(Something.class).list(); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\TestOptional.java,testDynamicBindOptionalOfUnregisteredCustomType,"@Test public void  () throws Exception { exception.expect(UnsupportedOperationException.class); handle.createQuery(SELECT_BY_NAME).bindByType(""name"" Optional.of(new Name(""eric"")) new GenericType<Optional<Name>>(){ } ).mapToBean(Something.class).list(); } "
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\TestOptional.java,testDynamicBindOptionalPresent,"@Test public void  () throws Exception { Something result=handle.createQuery(SELECT_BY_NAME).bindByType(""name"" Optional.of(""eric"") new GenericType<Optional<String>>(){ } ).mapToBean(Something.class).findOnly(); assertThat(result).isEqualTo(new Something(1"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\TestOptional.java,testMapToOptional,"@Test public void  () throws Exception { GenericType<Optional<String>> optionalString=new GenericType<Optional<String>>(){ } ; assertThat(handle.select(""select name from something where id = 0"").collectInto(optionalString)).isEmpty(); assertThat(handle.se"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\TestOptional.java,testMapToOptionalDouble,"@Test public void  () throws Exception { assertThat(handle.select(""select id from something where name = 'slartibartfast'"").collectInto(OptionalDouble.class)).isEmpty(); assertThat(handle.select(""select null from something where name = 'eric'"").collectInt"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\TestOptional.java,testMapToOptionalInt,"@Test public void  () throws Exception { assertThat(handle.select(""select id from something where name = 'arthur'"").collectInto(OptionalInt.class)).isEmpty(); assertThat(handle.select(""select null from something where name = 'eric'"").collectInto(OptionalI"
C:\Users\User\Desktop\Thesis\jdbi\core\src\test\java\org\jdbi\v3\core\TestOptional.java,testMapToOptionalLong,"@Test public void  () throws Exception { assertThat(handle.select(""select id from something where name = 'ford'"").collectInto(OptionalLong.class)).isEmpty(); assertThat(handle.select(""select null from something where name = 'eric'"").collectInto(OptionalLo"
C:\Users\User\Desktop\Thesis\jdbi\docs\src\test\java\jdbi\doc\CallTest.java,testCall,"@Test public void  (){ Handle handle=db.getHandle(); handle.execute(findSqlOnClasspath(""create_stored_proc_add"")); OutParameters result=handle.createCall(""{:sum = call add(:a  :b)}"").bind(""a"" 13).bind(""b"" 9).registerOutParameter(""sum"" Types.INTEGER).invok"
C:\Users\User\Desktop\Thesis\jdbi\docs\src\test\java\jdbi\doc\ArgumentsTest.java,UUIDArgument,public  (UUID uuid){ this.uuid=uuid; } 
C:\Users\User\Desktop\Thesis\jdbi\docs\src\test\java\jdbi\doc\ArgumentsTest.java,UUIDArgumentFactory,public  (){ super(Types.VARCHAR); } 
C:\Users\User\Desktop\Thesis\jdbi\docs\src\test\java\jdbi\doc\ArgumentsTest.java,apply,@Override public void  (int position PreparedStatement statement StatementContext ctx) throws SQLException { statement.setString(position uuid.toString()); } 
C:\Users\User\Desktop\Thesis\jdbi\docs\src\test\java\jdbi\doc\ArgumentsTest.java,bindInt,"@Test public void  (){ assertThat(handle.createQuery(""SELECT :id"").bind(""id"" 3).mapTo(Integer.class).findOnly().intValue()).isEqualTo(3); } "
C:\Users\User\Desktop\Thesis\jdbi\docs\src\test\java\jdbi\doc\ArgumentsTest.java,build,@Override protected Argument  (UUID value ConfigRegistry config){ return (position statement ctx) -> statement.setString(position value.toString()); } 
C:\Users\User\Desktop\Thesis\jdbi\docs\src\test\java\jdbi\doc\ArgumentsTest.java,getHandle,@Before public void  (){ handle=dbRule.getSharedHandle(); } 
C:\Users\User\Desktop\Thesis\jdbi\docs\src\test\java\jdbi\doc\ArgumentsTest.java,uuidArgument,"@Test public void  (){ UUID u=UUID.randomUUID(); assertThat(handle.createQuery(""SELECT CAST(:uuid AS VARCHAR)"").bind(""uuid"" new UUIDArgument(u)).mapTo(String.class).findOnly()).isEqualTo(u.toString()); } "
C:\Users\User\Desktop\Thesis\jdbi\docs\src\test\java\jdbi\doc\ArgumentsTest.java,uuidArgumentFactory,"@Test public void  (){ UUID u=UUID.randomUUID(); handle.registerArgument(new UUIDArgumentFactory()); assertThat(handle.createQuery(""SELECT CAST(:uuid AS VARCHAR)"").bind(""uuid"" u).mapTo(String.class).findOnly()).isEqualTo(u.toString()); } "
C:\Users\User\Desktop\Thesis\jdbi\docs\src\test\java\jdbi\doc\ContactBean.java,ContactBean,public  (int id String name){ this.id=id; this.name=name; } 
C:\Users\User\Desktop\Thesis\jdbi\docs\src\test\java\jdbi\doc\ContactBean.java,equals,@Override public boolean  (Object o){ if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; ContactBean that=(ContactBean)o; return id == that.id && Objects.equals(name that.name); } 
C:\Users\User\Desktop\Thesis\jdbi\docs\src\test\java\jdbi\doc\ContactBean.java,getId,public int  (){ return id; } 
C:\Users\User\Desktop\Thesis\jdbi\docs\src\test\java\jdbi\doc\ContactBean.java,getName,public String  (){ return name; } 
C:\Users\User\Desktop\Thesis\jdbi\docs\src\test\java\jdbi\doc\ContactBean.java,hashCode,@Override public int  (){ return Objects.hash(id name); } 
C:\Users\User\Desktop\Thesis\jdbi\docs\src\test\java\jdbi\doc\ContactBean.java,setId,public void  (int id){ this.id=id; } 
C:\Users\User\Desktop\Thesis\jdbi\docs\src\test\java\jdbi\doc\ContactBean.java,setName,public void  (String name){ this.name=name; } 
C:\Users\User\Desktop\Thesis\jdbi\docs\src\test\java\jdbi\doc\ContactBean.java,toString,"@Override public String  (){ return ""ContactBean{"" + ""id="" + id + ""  name='""+ name+ '\''+ '}'; } "
C:\Users\User\Desktop\Thesis\jdbi\docs\src\test\java\jdbi\doc\GeneratedKeysTest.java,User,public  (int id String name){ this.id=id; this.name=name; } 
C:\Users\User\Desktop\Thesis\jdbi\docs\src\test\java\jdbi\doc\ExampleConfig.java,ExampleConfig,private  (ExampleConfig other){ this.color=other.color; this.number=other.number; } 
C:\Users\User\Desktop\Thesis\jdbi\docs\src\test\java\jdbi\doc\ExampleConfig.java,createCopy,@Override public ExampleConfig  (){ return new ExampleConfig(this); } 
C:\Users\User\Desktop\Thesis\jdbi\docs\src\test\java\jdbi\doc\ExampleConfig.java,getColor,public String  (){ return color; } 
C:\Users\User\Desktop\Thesis\jdbi\docs\src\test\java\jdbi\doc\ExampleConfig.java,getNumber,public int  (){ return number; } 
C:\Users\User\Desktop\Thesis\jdbi\docs\src\test\java\jdbi\doc\ExampleConfig.java,setColor,public ExampleConfig  (String color){ this.color=color; return this; } 
C:\Users\User\Desktop\Thesis\jdbi\docs\src\test\java\jdbi\doc\ExampleConfig.java,setNumber,public ExampleConfig  (int number){ this.number=number; return this; } 
C:\Users\User\Desktop\Thesis\jdbi\docs\src\test\java\jdbi\doc\IntroductionTest.java,User,public  (int id String name){ this.id=id; this.name=name; } 
C:\Users\User\Desktop\Thesis\jdbi\docs\src\test\java\jdbi\doc\IntroductionTest.java,core,"@Test public void  (){ Jdbi jdbi=Jdbi.create(""jdbc:h2:mem:test""); List<User> users=jdbi.withHandle(handle -> { handle.execute(""CREATE TABLE user (id INTEGER PRIMARY KEY  name VARCHAR)""); handle.execute(""INSERT INTO user(id  name) VALUES (?  ?)"" 0 ""Alice"")"
C:\Users\User\Desktop\Thesis\jdbi\docs\src\test\java\jdbi\doc\PhoneBean.java,PhoneBean,public  (int id String name String number){ this.id=id; this.name=name; this.number=number; } 
C:\Users\User\Desktop\Thesis\jdbi\docs\src\test\java\jdbi\doc\PhoneBean.java,equals,@Override public boolean  (Object o){ if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; PhoneBean phoneBean=(PhoneBean)o; return id == phoneBean.id && Objects.equals(name phoneBean.name) && Objects.equals(number phoneB
C:\Users\User\Desktop\Thesis\jdbi\docs\src\test\java\jdbi\doc\PhoneBean.java,getId,public int  (){ return id; } 
C:\Users\User\Desktop\Thesis\jdbi\docs\src\test\java\jdbi\doc\PhoneBean.java,getName,public String  (){ return name; } 
C:\Users\User\Desktop\Thesis\jdbi\docs\src\test\java\jdbi\doc\PhoneBean.java,getNumber,public String  (){ return number; } 
C:\Users\User\Desktop\Thesis\jdbi\docs\src\test\java\jdbi\doc\PhoneBean.java,hashCode,@Override public int  (){ return Objects.hash(id name number); } 
C:\Users\User\Desktop\Thesis\jdbi\docs\src\test\java\jdbi\doc\PhoneBean.java,setId,public void  (int id){ this.id=id; } 
C:\Users\User\Desktop\Thesis\jdbi\docs\src\test\java\jdbi\doc\PhoneBean.java,setName,public void  (String name){ this.name=name; } 
C:\Users\User\Desktop\Thesis\jdbi\docs\src\test\java\jdbi\doc\PhoneBean.java,setNumber,public void  (String number){ this.number=number; } 
C:\Users\User\Desktop\Thesis\jdbi\docs\src\test\java\jdbi\doc\PhoneBean.java,toString,"@Override public String  (){ return ""PhoneBean{"" + ""id="" + id + ""  name='""+ name+ '\''+ ""  number='""+ number+ '\''+ '}'; } "
C:\Users\User\Desktop\Thesis\jdbi\docs\src\test\java\jdbi\doc\FiveMinuteTourTest.java,Contact, (int id String name){ this.id=id; this.name=name; } 
C:\Users\User\Desktop\Thesis\jdbi\docs\src\test\java\jdbi\doc\FiveMinuteTourTest.java,map,"@Override public Contact  (ResultSet r StatementContext ctx) throws SQLException { return new Contact(r.getInt(""id"") r.getString(""name"")); } "
C:\Users\User\Desktop\Thesis\jdbi\docs\src\test\java\jdbi\doc\FiveMinuteTourTest.java,namedParameters,"@Test public void  (){ handle.registerRowMapper(new ContactMapper()); handle.createUpdate(""insert into contacts (id  name) values (:id  :name)"").bind(""id"" 3).bind(""name"" ""Chuck"").execute(); String name=handle.createQuery(""select name from contacts where i"
C:\Users\User\Desktop\Thesis\jdbi\docs\src\test\java\jdbi\doc\FiveMinuteTourTest.java,positionalParameters,"@Test public void  (){ handle.registerRowMapper(new ContactMapper()); handle.createUpdate(""insert into contacts (id  name) values (?  ?)"").bind(0 3).bind(1 ""Chuck"").execute(); String name=handle.createQuery(""select name from contacts where id = ?"").bind(0"
C:\Users\User\Desktop\Thesis\jdbi\docs\src\test\java\jdbi\doc\FiveMinuteTourTest.java,registerCustomMapper,"@Test public void  (){ handle.registerRowMapper(new ContactMapper()); List<Contact> contacts=handle.createQuery(""select * from contacts"").mapTo(Contact.class).list(); assertThat(contacts).extracting(""id"" ""name"").contains(tuple(1 ""Alice"") tuple(2 ""Bob"")); "
C:\Users\User\Desktop\Thesis\jdbi\docs\src\test\java\jdbi\doc\FiveMinuteTourTest.java,setUp,"@Before public void  (){ Jdbi jdbi=Jdbi.create(""jdbc:h2:mem:test""); this.jdbi=jdbi; this.handle=jdbi.open(); jdbi.useHandle(handle -> { handle.execute(""create table contacts (id int primary key  name varchar(100))""); handle.execute(""insert into contacts ("
C:\Users\User\Desktop\Thesis\jdbi\docs\src\test\java\jdbi\doc\FiveMinuteTourTest.java,tearDown,@After public void  (){ handle.close(); } 
C:\Users\User\Desktop\Thesis\jdbi\docs\src\test\java\jdbi\doc\FiveMinuteTourTest.java,tryWithResources,"@Test public void  (){ try (Handle handle=jdbi.open()){ handle.execute(""insert into contacts (id  name) values (?  ?)"" 3 ""Chuck""); } } "
C:\Users\User\Desktop\Thesis\jdbi\docs\src\test\java\jdbi\doc\FiveMinuteTourTest.java,useCustomMapper,"@Test public void  (){ List<Contact> contacts=handle.createQuery(""select * from contacts"").map(new ContactMapper()).list(); assertThat(contacts).extracting(""id"" ""name"").contains(tuple(1 ""Alice"") tuple(2 ""Bob"")); } "
C:\Users\User\Desktop\Thesis\jdbi\docs\src\test\java\jdbi\doc\ResultsTest.java,NamedUser,public  (int id UserName name){ this.id=id; this.name=name; } 
C:\Users\User\Desktop\Thesis\jdbi\docs\src\test\java\jdbi\doc\ResultsTest.java,User,public  (int id String name){ this.id=id; this.name=name; } 
C:\Users\User\Desktop\Thesis\jdbi\docs\src\test\java\jdbi\doc\ResultsTest.java,UserName,public  (String name){ this.name=name; } 
C:\Users\User\Desktop\Thesis\jdbi\docs\src\test\java\jdbi\doc\ResultsTest.java,beanMapper,"@Test public void  (){ handle.registerRowMapper(BeanMapper.factory(UserBean.class)); List<UserBean> users=handle.createQuery(""select id  name from user"").mapTo(UserBean.class).list(); assertThat(users).extracting(""name"").contains(""Alice"" ""Bob"" ""Charlie"" """
C:\Users\User\Desktop\Thesis\jdbi\docs\src\test\java\jdbi\doc\ResultsTest.java,beanMapperPrefix,"@Test public void  (){ handle.execute(""create table contacts (id int  name text)""); handle.execute(""create table phones (id int  contact_id int  name text  number text)""); handle.execute(""insert into contacts (id  name) values (?  ?)"" 1 ""Alice""); handle.e"
C:\Users\User\Desktop\Thesis\jdbi\docs\src\test\java\jdbi\doc\ResultsTest.java,columnMapper,"@Test public void  (){ handle.registerColumnMapper(userNameFactory); handle.registerRowMapper(ConstructorMapper.factory(NamedUser.class)); NamedUser bob=handle.createQuery(""SELECT id  name FROM user WHERE name = :name"").bind(""name"" ""Bob"").mapTo(NamedUser."
C:\Users\User\Desktop\Thesis\jdbi\docs\src\test\java\jdbi\doc\ResultsTest.java,constructorMapper,"@Test public void  (){ handle.registerRowMapper(ConstructorMapper.factory(User.class)); Set<User> userSet=handle.createQuery(""SELECT * FROM user ORDER BY id ASC"").mapTo(User.class).collect(Collectors.toSet()); assertThat(userSet).hasSize(4); } "
C:\Users\User\Desktop\Thesis\jdbi\docs\src\test\java\jdbi\doc\ResultsTest.java,findBob,"@Test public void  (){ User u=findUserById(2).orElseThrow(() -> new AssertionError(""No user found"")); assertThat(u.id).isEqualTo(2); assertThat(u.name).isEqualTo(""Bob""); } "
C:\Users\User\Desktop\Thesis\jdbi\docs\src\test\java\jdbi\doc\ResultsTest.java,findUserById,"public Optional<User>  (long id){ RowMapper<User> userMapper=(rs ctx) -> new User(rs.getInt(""id"") rs.getString(""name"")); return handle.createQuery(""SELECT * FROM user WHERE id=:id"").bind(""id"" id).map(userMapper).findFirst(); } "
C:\Users\User\Desktop\Thesis\jdbi\docs\src\test\java\jdbi\doc\ResultsTest.java,getHandle,@Before public void  (){ handle=dbRule.getSharedHandle(); } 
C:\Users\User\Desktop\Thesis\jdbi\docs\src\test\java\jdbi\doc\ResultsTest.java,inlineRowMapper,"@Test public void  (){ List<User> users=handle.createQuery(""SELECT id  name FROM user ORDER BY id ASC"").map((rs ctx) -> new User(rs.getInt(""id"") rs.getString(""name""))).list(); assertThat(users).hasSize(4); assertThat(users.get(3).name).isEqualTo(""Data""); "
C:\Users\User\Desktop\Thesis\jdbi\docs\src\test\java\jdbi\doc\ResultsTest.java,map,"@Override public User  (ResultSet rs StatementContext ctx) throws SQLException { return new User(rs.getInt(""id"") rs.getString(""name"")); } "
C:\Users\User\Desktop\Thesis\jdbi\docs\src\test\java\jdbi\doc\ResultsTest.java,mapToBean,"@Test public void  (){ List<UserBean> users=handle.createQuery(""select id  name from user"").mapToBean(UserBean.class).list(); assertThat(users).extracting(""name"").contains(""Alice"" ""Bob"" ""Charlie"" ""Data""); } "
C:\Users\User\Desktop\Thesis\jdbi\docs\src\test\java\jdbi\doc\ResultsTest.java,rowMapper,"@Test public void  (){ List<User> users=handle.createQuery(""SELECT id  name FROM user ORDER BY id ASC"").map(new UserMapper()).list(); assertThat(users).hasSize(4); assertThat(users.get(3).name).isEqualTo(""Data""); } "
C:\Users\User\Desktop\Thesis\jdbi\docs\src\test\java\jdbi\doc\ResultsTest.java,rowMapperFactory,"@Test public void  (){ handle.registerRowMapper(User.class new UserMapper()); handle.createQuery(""SELECT id  name FROM user ORDER BY id ASC"").mapTo(User.class).useStream(stream -> { Optional<String> first=stream.filter(u -> u.id > 2).map(u -> u.name).find"
C:\Users\User\Desktop\Thesis\jdbi\docs\src\test\java\jdbi\doc\ResultsTest.java,setUp,"@Before public void  () throws Exception { handle.execute(""CREATE TABLE user (id INTEGER PRIMARY KEY AUTO_INCREMENT  name VARCHAR)""); for ( String name : Arrays.asList(""Alice"" ""Bob"" ""Charlie"" ""Data"")) { handle.execute(""INSERT INTO user(name) VALUES (?)"" n"
C:\Users\User\Desktop\Thesis\jdbi\docs\src\test\java\jdbi\doc\StatementsTest.java,map,static <K V>Map<K V>  (K k1 V v1 K k2 V v2){ HashMap<K V> h=new HashMap<>(); h.put(k1 v1); h.put(k2 v2); return h; } 
C:\Users\User\Desktop\Thesis\jdbi\docs\src\test\java\jdbi\doc\StatementsTest.java,setUp,"@Before public void  (){ handle=dbRule.getSharedHandle(); handle.execute(""CREATE TABLE user (id INTEGER PRIMARY KEY  name VARCHAR)""); handle.execute(""INSERT INTO user VALUES (1  'Alice')""); handle.execute(""INSERT INTO user VALUES (2  'Bob')""); } "
C:\Users\User\Desktop\Thesis\jdbi\docs\src\test\java\jdbi\doc\StatementsTest.java,testBatch,"@Test public void  () throws Exception { PreparedBatch batch=handle.prepareBatch(""INSERT INTO user(id  name) VALUES(:id  :name)""); for (int i=100; i < 5000; i++) { batch.bind(""id"" i).bind(""name"" ""User:"" + i).add(); } int[] counts=batch.execute(); int[] ex"
C:\Users\User\Desktop\Thesis\jdbi\docs\src\test\java\jdbi\doc\StatementsTest.java,testQuery,"@SuppressWarnings(""unchecked"") @Test public void  () throws Exception { List<Map<String Object>> users=handle.createQuery(""SELECT id  name FROM user ORDER BY id ASC"").mapToMap().list(); assertThat(users).containsExactly(map(""id"" 1 ""name"" ""Alice"") map(""id"""
C:\Users\User\Desktop\Thesis\jdbi\docs\src\test\java\jdbi\doc\StatementsTest.java,testScript,"@Test public void  () throws Exception { int[] results=handle.createScript(""INSERT INTO user VALUES(3  'Charlie');"" + ""UPDATE user SET name='Bobby Tables' WHERE id=2;"").execute(); assertThat(results).containsExactly(1 1); } "
C:\Users\User\Desktop\Thesis\jdbi\docs\src\test\java\jdbi\doc\StatementsTest.java,testUpdate,"@Test public void  () throws Exception { int count=handle.createUpdate(""INSERT INTO user(id  name) VALUES(:id  :name)"").bind(""id"" 3).bind(""name"" ""Charlie"").execute(); assertThat(count).isEqualTo(1); count=handle.execute(""INSERT INTO user(id  name) VALUES("
C:\Users\User\Desktop\Thesis\jdbi\guava\src\main\java\org\jdbi\v3\guava\GuavaArguments.java,build,@Override public Optional<Argument>  (Type expectedType Object value ConfigRegistry config){ if (value instanceof com.google.common.base.Optional) { Object nestedValue=((com.google.common.base.Optional<?>)value).orNull(); Type nestedType=findOptionalType(
C:\Users\User\Desktop\Thesis\jdbi\guava\src\main\java\org\jdbi\v3\guava\GuavaArguments.java,factory,public static ArgumentFactory  (){ return new Factory(); } 
C:\Users\User\Desktop\Thesis\jdbi\guava\src\main\java\org\jdbi\v3\guava\GuavaArguments.java,findOptionalType,private Type  (Type wrapperType Object nestedValue){ if (getErasedType(wrapperType).equals(com.google.common.base.Optional.class)) { Optional<Type> nestedType=findGenericParameter(wrapperType com.google.common.base.Optional.class); if (nestedType.isPresent()) { return nestedType.get(); } } return nestedValue == null ? Object.class : nestedValue.getClass(); } 
C:\Users\User\Desktop\Thesis\jdbi\guava\src\main\java\org\jdbi\v3\guava\GuavaCollectors.java,Factory,public  (){ TypeVariable<Class<Multimap>>[] multimapParams=Multimap.class.getTypeParameters(); multimapKey=multimapParams[0]; multimapValue=multimapParams[1]; } 
C:\Users\User\Desktop\Thesis\jdbi\guava\src\main\java\org\jdbi\v3\guava\GuavaCollectors.java,accepts,@Override public boolean  (Type containerType){ Class<?> erasedType=getErasedType(containerType); return collectors.containsKey(erasedType) && containerType instanceof ParameterizedType; } 
C:\Users\User\Desktop\Thesis\jdbi\guava\src\main\java\org\jdbi\v3\guava\GuavaCollectors.java,build,@Override public Collector<? ? ?>  (Type containerType){ return collectors.get(getErasedType(containerType)); } 
C:\Users\User\Desktop\Thesis\jdbi\guava\src\main\java\org\jdbi\v3\guava\GuavaCollectors.java,combine,private static <K V MB extends ImmutableMultimap.Builder<K V>>MB  (MB a MB b){ a.putAll(b.build()); return a; } 
C:\Users\User\Desktop\Thesis\jdbi\guava\src\main\java\org\jdbi\v3\guava\GuavaCollectors.java,elementType,@Override public java.util.Optional<Type>  (Type containerType){ Class<?> erasedType=getErasedType(containerType); if (Multimap.class.isAssignableFrom(erasedType)) { Type keyType=resolveType(multimapKey containerType); Type valueType=resolveType(multimapV
C:\Users\User\Desktop\Thesis\jdbi\guava\src\main\java\org\jdbi\v3\guava\GuavaCollectors.java,factory,public static CollectorFactory  (){ return new Factory(); } 
C:\Users\User\Desktop\Thesis\jdbi\guava\src\main\java\org\jdbi\v3\guava\GuavaCollectors.java,putEntry,private static <K V M extends Multimap<K V>>void  (M map Map.Entry<K V> entry){ map.put(entry.getKey() entry.getValue()); } 
C:\Users\User\Desktop\Thesis\jdbi\guava\src\main\java\org\jdbi\v3\guava\GuavaCollectors.java,toArrayListMultimap,public static <K V>Collector<Map.Entry<K V> ? ArrayListMultimap<K V>>  (){ return toMultimap(ArrayListMultimap::create); } 
C:\Users\User\Desktop\Thesis\jdbi\guava\src\main\java\org\jdbi\v3\guava\GuavaCollectors.java,toHashBiMap,public static <K V>Collector<Map.Entry<K V> ? BiMap<K V>>  (){ return toMap(HashBiMap::create); } 
C:\Users\User\Desktop\Thesis\jdbi\guava\src\main\java\org\jdbi\v3\guava\GuavaCollectors.java,toHashMultimap,public static <K V>Collector<Map.Entry<K V> ? HashMultimap<K V>>  (){ return toMultimap(HashMultimap::create); } 
C:\Users\User\Desktop\Thesis\jdbi\guava\src\main\java\org\jdbi\v3\guava\GuavaCollectors.java,toImmutableListMultimap,public static <K V>Collector<Map.Entry<K V> ? ImmutableListMultimap<K V>>  (){ return Collector.of(ImmutableListMultimap::<K V>builder ImmutableListMultimap.Builder::put GuavaCollectors::combine ImmutableListMultimap.Builder::build); } 
C:\Users\User\Desktop\Thesis\jdbi\guava\src\main\java\org\jdbi\v3\guava\GuavaCollectors.java,toImmutableMap,public static <K V>Collector<Map.Entry<K V> ? ImmutableMap<K V>>  (){ return ImmutableMap.toImmutableMap(Map.Entry::getKey Map.Entry::getValue); } 
C:\Users\User\Desktop\Thesis\jdbi\guava\src\main\java\org\jdbi\v3\guava\GuavaCollectors.java,toImmutableSetMultimap,public static <K V>Collector<Map.Entry<K V> ? ImmutableSetMultimap<K V>>  (){ return Collector.of(ImmutableSetMultimap::<K V>builder ImmutableSetMultimap.Builder::put GuavaCollectors::combine ImmutableSetMultimap.Builder::build); } 
C:\Users\User\Desktop\Thesis\jdbi\guava\src\main\java\org\jdbi\v3\guava\GuavaCollectors.java,toLinkedListMultimap,public static <K V>Collector<Map.Entry<K V> ? LinkedListMultimap<K V>>  (){ return toMultimap(LinkedListMultimap::create); } 
C:\Users\User\Desktop\Thesis\jdbi\guava\src\main\java\org\jdbi\v3\guava\GuavaCollectors.java,toMultimap,public static <K V M extends Multimap<K V>>Collector<Map.Entry<K V> ? M>  (Supplier<M> multimapFactory){ return Collector.of(multimapFactory GuavaCollectors::putEntry GuavaCollectors::combine); } 
C:\Users\User\Desktop\Thesis\jdbi\guava\src\main\java\org\jdbi\v3\guava\GuavaCollectors.java,toOptional,public static <T>Collector<T ? Optional<T>>  (){ return OptionalCollectors.toOptional(Optional::absent Optional::of); } 
C:\Users\User\Desktop\Thesis\jdbi\guava\src\main\java\org\jdbi\v3\guava\GuavaCollectors.java,toTreeMultimap,public static <K extends Comparable V extends Comparable>Collector<Map.Entry<K V> ? TreeMultimap<K V>>  (){ return toMultimap(TreeMultimap::create); } 
C:\Users\User\Desktop\Thesis\jdbi\guava\src\main\java\org\jdbi\v3\guava\GuavaPlugin.java,customizeJdbi,@Override public void  (Jdbi db){ db.registerArgument(GuavaArguments.factory()); db.registerCollector(GuavaCollectors.factory()); } 
C:\Users\User\Desktop\Thesis\jdbi\docs\src\test\java\jdbi\doc\UserBean.java,getId,public int  (){ return id; } 
C:\Users\User\Desktop\Thesis\jdbi\docs\src\test\java\jdbi\doc\UserBean.java,getName,public String  (){ return name; } 
C:\Users\User\Desktop\Thesis\jdbi\docs\src\test\java\jdbi\doc\UserBean.java,setId,public void  (int id){ this.id=id; } 
C:\Users\User\Desktop\Thesis\jdbi\docs\src\test\java\jdbi\doc\UserBean.java,setName,public void  (String name){ this.name=name; } 
C:\Users\User\Desktop\Thesis\jdbi\guava\src\test\java\org\jdbi\v3\guava\TestGuavaMappers.java,setUp,"@Before public void  (){ dbRule.getJdbi().registerArrayType(Integer.class ""integer"").registerArrayType(UUID.class ""uuid""); h=dbRule.openHandle(); h.useTransaction(th -> { th.execute(""DROP TABLE IF EXISTS arrays""); th.execute(""CREATE TABLE arrays (u UUID[]"
C:\Users\User\Desktop\Thesis\jdbi\guava\src\test\java\org\jdbi\v3\guava\TestGuavaMappers.java,testIntegerImmutableList,"@Test public void  () throws Exception { Integer[] testInts=new Integer[]{5 4 -6 1 9 Integer.MAX_VALUE Integer.MIN_VALUE}; h.execute(""INSERT INTO arrays (i) VALUES(?)"" (Object)testInts); ImmutableList<Integer> list=h.createQuery(""SELECT i FROM arrays"").ma"
C:\Users\User\Desktop\Thesis\jdbi\guava\src\test\java\org\jdbi\v3\guava\TestGuavaMappers.java,testUuidImmutableList,"@Test public void  () throws Exception { UUID[] testUuids=new UUID[]{UUID.randomUUID() UUID.randomUUID() UUID.randomUUID() UUID.randomUUID() UUID.randomUUID()}; h.execute(""INSERT INTO arrays (u) VALUES(?)"" (Object)testUuids); ImmutableList<UUID> list=h.cr"
C:\Users\User\Desktop\Thesis\jdbi\guava\src\test\java\org\jdbi\v3\guava\TestGuavaCollectors.java,addData,"@Before public void  (){ ImmutableList.Builder<Integer> expected=ImmutableList.builder(); for (int i=0; i < 10; i++) { dbRule.getSharedHandle().execute(""insert into something(name  intValue) values (?  ?)"" Integer.toString(i) i); expected.add(i); } this.e"
C:\Users\User\Desktop\Thesis\jdbi\guava\src\test\java\org\jdbi\v3\guava\TestGuavaCollectors.java,immutableList,"@Test public void  (){ ImmutableList<Integer> list=dbRule.getSharedHandle().createQuery(""select intValue from something"").collectInto(new GenericType<ImmutableList<Integer>>(){ } ); assertThat(list).containsOnlyElementsOf(expected); } "
C:\Users\User\Desktop\Thesis\jdbi\guava\src\test\java\org\jdbi\v3\guava\TestGuavaCollectors.java,immutableSet,"@Test public void  (){ ImmutableSet<Integer> set=dbRule.getSharedHandle().createQuery(""select intValue from something"").collectInto(new GenericType<ImmutableSet<Integer>>(){ } ); assertThat(set).containsOnlyElementsOf(expected); } "
C:\Users\User\Desktop\Thesis\jdbi\guava\src\test\java\org\jdbi\v3\guava\TestGuavaCollectors.java,immutableSortedSet,"@Test public void  (){ ImmutableSortedSet<Integer> set=dbRule.getSharedHandle().createQuery(""select intValue from something"").collectInto(new GenericType<ImmutableSortedSet<Integer>>(){ } ); assertThat(set).containsExactlyElementsOf(expected); } "
C:\Users\User\Desktop\Thesis\jdbi\guava\src\test\java\org\jdbi\v3\guava\TestGuavaCollectors.java,immutableSortedSetWithComparator,"@Test public void  (){ Comparator<Integer> comparator=Comparator.<Integer>naturalOrder().reversed(); ImmutableSortedSet<Integer> set=dbRule.getSharedHandle().createQuery(""select intValue from something"").mapTo(int.class).collect(ImmutableSortedSet.toImmut"
C:\Users\User\Desktop\Thesis\jdbi\guava\src\test\java\org\jdbi\v3\guava\TestGuavaCollectors.java,mapCollectors,@Test public void  (){ testMapCollector(ImmutableMap.class new GenericType<ImmutableMap<Long String>>(){ } ); testMapCollector(BiMap.class new GenericType<BiMap<Long String>>(){ } ); } 
C:\Users\User\Desktop\Thesis\jdbi\guava\src\test\java\org\jdbi\v3\guava\TestGuavaCollectors.java,multimapCollectors,@Test public void  (){ testMultimapCollector(ImmutableMultimap.class new GenericType<ImmutableMultimap<Long String>>(){ } ); testMultimapCollector(ImmutableListMultimap.class new GenericType<ImmutableListMultimap<Long String>>(){ } ); testMultimapCollecto
C:\Users\User\Desktop\Thesis\jdbi\guava\src\test\java\org\jdbi\v3\guava\TestGuavaCollectors.java,optionalAbsent,"@Test public void  (){ Optional<Integer> shouldBeAbsent=dbRule.getSharedHandle().createQuery(""select intValue from something where intValue = 100"").collectInto(new GenericType<Optional<Integer>>(){ } ); assertThat(shouldBeAbsent).isAbsent(); } "
C:\Users\User\Desktop\Thesis\jdbi\guava\src\test\java\org\jdbi\v3\guava\TestGuavaCollectors.java,optionalMultiple,"@Test(expected=IllegalStateException.class) public void  (){ dbRule.getSharedHandle().createQuery(""select intValue from something"").collectInto(new GenericType<Optional<Integer>>(){ } ); } "
C:\Users\User\Desktop\Thesis\jdbi\guava\src\test\java\org\jdbi\v3\guava\TestGuavaCollectors.java,optionalPresent,"@Test public void  (){ Optional<Integer> shouldBePresent=dbRule.getSharedHandle().createQuery(""select intValue from something where intValue = 1"").collectInto(new GenericType<Optional<Integer>>(){ } ); assertThat(shouldBePresent).contains(1); } "
C:\Users\User\Desktop\Thesis\jdbi\guava\src\test\java\org\jdbi\v3\guava\TestGuavaCollectors.java,testMapCollector,"@SuppressWarnings(""unchecked"") private <M extends Map<Long String>>void  (Class<? extends Map> erasedType GenericType<M> genericType){ JdbiCollectors registry=dbRule.getJdbi().getConfig(JdbiCollectors.class); assertThat(registry.findElementTypeFor(generic"
C:\Users\User\Desktop\Thesis\jdbi\guava\src\test\java\org\jdbi\v3\guava\TestGuavaCollectors.java,testMultimapCollector,"@SuppressWarnings(""unchecked"") private <M extends Multimap<Long String>>void  (Class<? extends Multimap> erasedType GenericType<M> genericType){ JdbiCollectors registry=dbRule.getJdbi().getConfig(JdbiCollectors.class); assertThat(registry.findElementTypeF"
C:\Users\User\Desktop\Thesis\jdbi\guava\src\test\java\org\jdbi\v3\guava\MultimapEntryMapperTest.java,Phone,public  (int id String phone){ this.id=id; this.phone=phone; } 
C:\Users\User\Desktop\Thesis\jdbi\guava\src\test\java\org\jdbi\v3\guava\MultimapEntryMapperTest.java,User,public  (int id String name){ this.id=id; this.name=name; } 
C:\Users\User\Desktop\Thesis\jdbi\guava\src\test\java\org\jdbi\v3\guava\MultimapEntryMapperTest.java,equals,@Override public boolean  (Object o){ if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; Phone phone1=(Phone)o; return id == phone1.id && Objects.equals(phone phone1.phone); } 
C:\Users\User\Desktop\Thesis\jdbi\guava\src\test\java\org\jdbi\v3\guava\MultimapEntryMapperTest.java,hashCode,@Override public int  (){ return Objects.hash(id phone); } 
C:\Users\User\Desktop\Thesis\jdbi\guava\src\test\java\org\jdbi\v3\guava\MultimapEntryMapperTest.java,index,"@Test public void  (){ h.execute(""create table user (id int  manager_id int  name varchar)""); h.prepareBatch(""insert into user (id  manager_id  name) values (?  ?  ?)"").add(1 0 ""alice"").add(2 1 ""bob"").add(3 1 ""cathy"").add(4 3 ""dilbert"").execute(); Multima"
C:\Users\User\Desktop\Thesis\jdbi\guava\src\test\java\org\jdbi\v3\guava\MultimapEntryMapperTest.java,joinRow,"@Test public void  (){ h.execute(""create table user (id int  name varchar)""); h.execute(""create table phone (id int  user_id int  phone varchar)""); h.prepareBatch(""insert into user (id  name) values (?  ?)"").add(1 ""alice"").add(2 ""bob"").execute(); h.prepar"
C:\Users\User\Desktop\Thesis\jdbi\guava\src\test\java\org\jdbi\v3\guava\MultimapEntryMapperTest.java,keyValueColumns,"@Test public void  (){ h.execute(""create table config (key varchar  value varchar)""); h.prepareBatch(""insert into config (key  value) values (?  ?)"").add(""foo"" ""123"").add(""foo"" ""456"").add(""bar"" ""xyz"").execute(); Multimap<String String> map=h.createQuery("""
C:\Users\User\Desktop\Thesis\jdbi\guava\src\test\java\org\jdbi\v3\guava\MultimapEntryMapperTest.java,setUp,@Before public void  (){ h=dbRule.getSharedHandle(); } 
C:\Users\User\Desktop\Thesis\jdbi\guava\src\test\java\org\jdbi\v3\guava\MultimapEntryMapperTest.java,toString,"@Override public String  (){ return ""Phone{"" + ""id="" + id + ""  phone='""+ phone+ '\''+ '}'; } "
C:\Users\User\Desktop\Thesis\jdbi\guava\src\test\java\org\jdbi\v3\guava\TestGuavaOptional.java,Name, (String value){ this.value=value; } 
C:\Users\User\Desktop\Thesis\jdbi\guava\src\test\java\org\jdbi\v3\guava\TestGuavaOptional.java,build,@Override public java.util.Optional<Argument>  (Type expectedType Object value ConfigRegistry config){ if (expectedType == Name.class) { Name nameValue=(Name)value; return java.util.Optional.of((pos stmt c) -> stmt.setString(pos nameValue.value)); } retur
C:\Users\User\Desktop\Thesis\jdbi\guava\src\test\java\org\jdbi\v3\guava\TestGuavaOptional.java,createTestData,"@Before public void  (){ handle=dbRule.openHandle(); handle.createUpdate(""insert into something (id  name) values (1  'eric')"").execute(); handle.createUpdate(""insert into something (id  name) values (2  'brian')"").execute(); } "
C:\Users\User\Desktop\Thesis\jdbi\guava\src\test\java\org\jdbi\v3\guava\TestGuavaOptional.java,equals,@Override public boolean  (Object obj){ if (!(obj instanceof Name)) { return false; } Name that=(Name)obj; return this.value.equals(that.value); } 
C:\Users\User\Desktop\Thesis\jdbi\guava\src\test\java\org\jdbi\v3\guava\TestGuavaOptional.java,testBindOptionalEmpty,"@Test public void  () throws Exception { List<Something> result=handle.createQuery(SELECT_BY_NAME).bind(""name"" Optional.absent()).mapToBean(Something.class).list(); assertThat(result).containsExactly(new Something(1 ""eric"") new Something(2 ""brian"")); } "
C:\Users\User\Desktop\Thesis\jdbi\guava\src\test\java\org\jdbi\v3\guava\TestGuavaOptional.java,testBindOptionalOfCustomType,"@Test public void  () throws Exception { handle.registerArgument(new NameArgumentFactory()); List<Something> result=handle.createQuery(SELECT_BY_NAME).bind(""name"" Optional.of(new Name(""eric""))).mapToBean(Something.class).list(); assertThat(result).contain"
C:\Users\User\Desktop\Thesis\jdbi\guava\src\test\java\org\jdbi\v3\guava\TestGuavaOptional.java,testBindOptionalOfUnregisteredCustomType,"@Test public void  () throws Exception { exception.expect(UnsupportedOperationException.class); handle.createQuery(SELECT_BY_NAME).bind(""name"" Optional.of(new Name(""eric""))).mapToBean(Something.class).list(); } "
C:\Users\User\Desktop\Thesis\jdbi\guava\src\test\java\org\jdbi\v3\guava\TestGuavaOptional.java,testBindOptionalPresent,"@Test public void  () throws Exception { Something result=handle.createQuery(SELECT_BY_NAME).bind(""name"" Optional.of(""brian"")).mapToBean(Something.class).findOnly(); assertThat(result).isEqualTo(new Something(2 ""brian"")); } "
C:\Users\User\Desktop\Thesis\jdbi\guava\src\test\java\org\jdbi\v3\guava\TestGuavaOptional.java,testDynamicBindOptionalEmpty,"@Test public void  () throws Exception { List<Something> result=handle.createQuery(SELECT_BY_NAME).bindByType(""name"" Optional.absent() new GenericType<Optional<String>>(){ } ).mapToBean(Something.class).list(); assertThat(result).containsExactly(new Somet"
C:\Users\User\Desktop\Thesis\jdbi\guava\src\test\java\org\jdbi\v3\guava\TestGuavaOptional.java,testDynamicBindOptionalOfCustomType,"@Test public void  () throws Exception { handle.registerArgument(new NameArgumentFactory()); handle.createQuery(SELECT_BY_NAME).bindByType(""name"" Optional.of(new Name(""eric"")) new GenericType<Optional<Name>>(){ } ).mapToBean(Something.class).list(); } "
C:\Users\User\Desktop\Thesis\jdbi\guava\src\test\java\org\jdbi\v3\guava\TestGuavaOptional.java,testDynamicBindOptionalOfUnregisteredCustomType,"@Test public void  () throws Exception { exception.expect(UnsupportedOperationException.class); handle.createQuery(SELECT_BY_NAME).bindByType(""name"" Optional.of(new Name(""eric"")) new GenericType<Optional<Name>>(){ } ).mapToBean(Something.class).list(); } "
C:\Users\User\Desktop\Thesis\jdbi\guava\src\test\java\org\jdbi\v3\guava\TestGuavaOptional.java,testDynamicBindOptionalPresent,"@Test public void  () throws Exception { Something result=handle.createQuery(SELECT_BY_NAME).bindByType(""name"" Optional.of(""eric"") new GenericType<Optional<String>>(){ } ).mapToBean(Something.class).findOnly(); assertThat(result).isEqualTo(new Something(1"
C:\Users\User\Desktop\Thesis\jdbi\jodatime2\src\main\java\org\jdbi\v3\jodatime2\DateTimeMapper.java,map,@Override public DateTime  (ResultSet r int columnNumber StatementContext ctx) throws SQLException { Timestamp ts=r.getTimestamp(columnNumber); return ts == null ? null : new DateTime(ts.getTime()); } 
C:\Users\User\Desktop\Thesis\jdbi\jodatime2\src\main\java\org\jdbi\v3\jodatime2\JodaTimePlugin.java,customizeJdbi,@Override public void  (Jdbi db){ db.registerArgument(new DateTimeArgumentFactory()); db.registerColumnMapper(new DateTimeMapper()); } 
C:\Users\User\Desktop\Thesis\jdbi\jodatime2\src\test\java\org\jdbi\v3\jodatime2\DateTimeTest.java,dateTime,"@Test public void  () throws Exception { Handle h=dbRule.getSharedHandle(); h.execute(""create table stuff(ts timestamp)""); DateTime dt=new DateTime(); h.execute(""insert into stuff(ts) values (?)"" dt); assertThat(h.createQuery(""select ts from stuff"").mapTo"
C:\Users\User\Desktop\Thesis\jdbi\jodatime2\src\main\java\org\jdbi\v3\jodatime2\DateTimeArgumentFactory.java,DateTimeArgumentFactory,public  (){ super(Types.TIMESTAMP); } 
C:\Users\User\Desktop\Thesis\jdbi\jodatime2\src\main\java\org\jdbi\v3\jodatime2\DateTimeArgumentFactory.java,build,@Override protected Argument  (DateTime value ConfigRegistry config){ return (pos stmt ctx) -> stmt.setTimestamp(pos new Timestamp(value.getMillis())); } 
C:\Users\User\Desktop\Thesis\jdbi\jpa\src\main\java\org\jdbi\v3\jpa\internal\JpaClass.java,JpaClass,"private  (Class<C> clazz){ this.members=unmodifiableList(new ArrayList<>(inspectClass(clazz))); logger.debug(""init {}: {} members."" clazz members.size()); } "
C:\Users\User\Desktop\Thesis\jdbi\jpa\src\main\java\org\jdbi\v3\jpa\internal\JpaClass.java,get,"@SuppressWarnings(""unchecked"") public static <C>JpaClass<C>  (Class<C> clazz){ return (JpaClass<C>)cache.computeIfAbsent(clazz JpaClass::new); } "
C:\Users\User\Desktop\Thesis\jdbi\jpa\src\main\java\org\jdbi\v3\jpa\internal\JpaClass.java,inspectAnnotatedProperties,private static void  (Class<?> clazz Map<String JpaMember> members){ inspectProperties(clazz members true); } 
C:\Users\User\Desktop\Thesis\jdbi\jpa\src\main\java\org\jdbi\v3\jpa\internal\JpaClass.java,inspectClass,private static Collection<JpaMember>  (Class<?> clazz){ Map<String JpaMember> members=new HashMap<>(); inspectFields(clazz members); inspectAnnotatedProperties(clazz members); inspectSuperclasses(clazz members); inspectNonAnnotatedProperties(clazz members); return members.values(); } 
C:\Users\User\Desktop\Thesis\jdbi\jpa\src\main\java\org\jdbi\v3\jpa\internal\JpaClass.java,inspectFields,private static void  (Class<?> clazz Map<String JpaMember> members){ for ( Field member : clazz.getDeclaredFields()) { if (members.containsKey(member.getName())) { continue; } Column column=member.getAnnotation(Column.class); if (column != null) { members.put(member.getName() new JpaMember(clazz column member)); } } } 
C:\Users\User\Desktop\Thesis\jdbi\jpa\src\main\java\org\jdbi\v3\jpa\internal\JpaClass.java,inspectNonAnnotatedProperties,private static void  (Class<?> clazz Map<String JpaMember> members){ inspectProperties(clazz members false); } 
C:\Users\User\Desktop\Thesis\jdbi\jpa\src\main\java\org\jdbi\v3\jpa\internal\JpaClass.java,inspectProperties,"private static void  (Class<?> clazz Map<String JpaMember> members boolean hasColumnAnnotation){ try { Stream.of(Introspector.getBeanInfo(clazz).getPropertyDescriptors()).filter(property -> !members.containsKey(property.getName())).filter(property -> !(property instanceof IndexedPropertyDescriptor)).filter(property -> !""class"".equals(property.getName())).forEach(property -> { Method getter=property.getReadMethod(); Method setter=property.getWriteMethod(); Column column=Stream.of(getter setter).filter(Objects::nonNull).map(method -> method.getAnnotation(Column.class)).filter(Objects::nonNull).findFirst().orElse(null); if ((column != null) == hasColumnAnnotation) { members.put(property.getName() new JpaMember(clazz column property)); } } ); } catch ( IntrospectionException e) { logger.warn(""Unable to introspect "" + clazz e); } } "
C:\Users\User\Desktop\Thesis\jdbi\jpa\src\main\java\org\jdbi\v3\jpa\internal\JpaClass.java,inspectSuperclasses,private static void  (Class<?> clazz Map<String JpaMember> members){ while ((clazz=clazz.getSuperclass()) != null) { if (clazz.isAnnotationPresent(MappedSuperclass.class)) { inspectFields(clazz members); } } } 
C:\Users\User\Desktop\Thesis\jdbi\jpa\src\main\java\org\jdbi\v3\jpa\internal\JpaClass.java,lookupMember,public JpaMember  (String columnLabel){ String column=columnLabel.toLowerCase(Locale.ROOT); return members.stream().filter(member -> column.equals(member.getColumnName().toLowerCase(Locale.ROOT))).findFirst().orElse(null); } 
C:\Users\User\Desktop\Thesis\jdbi\jpa\src\main\java\org\jdbi\v3\jpa\internal\JpaClass.java,members,public List<JpaMember>  (){ return members; } 
C:\Users\User\Desktop\Thesis\jdbi\jpa\src\main\java\org\jdbi\v3\jpa\internal\JpaMember.java,JpaMember, (Class<?> clazz Column column PropertyDescriptor property){ this.clazz=requireNonNull(clazz); this.columnName=nameOf(column property.getName()); this.type=property.getReadMethod().getGenericReturnType(); Method getter=property.getReadMethod(); Method setter=property.getWriteMethod(); getter.setAccessible(true); setter.setAccessible(true); this.accessor=getter::invoke; this.mutator=setter::invoke; } 
C:\Users\User\Desktop\Thesis\jdbi\jpa\src\main\java\org\jdbi\v3\jpa\internal\BindJpaFactory.java,createForParameter,"@Override public SqlStatementParameterCustomizer  (Annotation annotation Class<?> sqlObjectType Method method Parameter param int index Type type){ BindJpa bind=(BindJpa)annotation; final String prefix; if (bind.value().isEmpty()) { prefix=""""; } else { pr"
C:\Users\User\Desktop\Thesis\jdbi\jpa\src\main\java\org\jdbi\v3\jpa\internal\BindJpaFactory.java,readMember,"private static Object  (Object entity JpaMember member){ try { return member.read(entity); } catch ( IllegalAccessException e) { String message=String.format(""Unable to access property value for column %s"" member.getColumnName()); throw new EntityMemberAccessException(message e); } catch ( InvocationTargetException e) { String message=String.format(""Exception thrown in accessor method for column %s"" member.getColumnName()); throw new EntityMemberAccessException(message e); } } "
C:\Users\User\Desktop\Thesis\jdbi\jpa\src\main\java\org\jdbi\v3\jpa\JpaPlugin.java,customizeJdbi,@Override public void  (Jdbi db){ db.registerRowMapper(new JpaMapperFactory()); } 
C:\Users\User\Desktop\Thesis\jdbi\jpa\src\main\java\org\jdbi\v3\jpa\JpaMapper.java,JpaMapper, (Class<C> clazz){ this.clazz=clazz; this.jpaClass=JpaClass.get(clazz); } 
C:\Users\User\Desktop\Thesis\jdbi\jpa\src\main\java\org\jdbi\v3\jpa\JpaMapper.java,map,@Override public C  (ResultSet rs StatementContext ctx) throws SQLException { return specialize(rs ctx).map(rs ctx); } 
C:\Users\User\Desktop\Thesis\jdbi\jpa\src\main\java\org\jdbi\v3\jpa\JpaMapperFactory.java,build,@Override public Optional<RowMapper<?>>  (Type type ConfigRegistry config){ Class<?> clazz=getErasedType(type); return clazz.isAnnotationPresent(Entity.class) ? Optional.of(new JpaMapper<>(clazz)) : Optional.empty(); } 
C:\Users\User\Desktop\Thesis\jdbi\jpa\src\test\java\org\jdbi\v3\jpa\JpaTest.java,AnnotationPriorityThing,public  (int id String name){ setId(id); setName(name); } 
C:\Users\User\Desktop\Thesis\jdbi\jpa\src\test\java\org\jdbi\v3\jpa\JpaTest.java,EntityThing,public  (int id String name){ setId(id); setName(name); } 
C:\Users\User\Desktop\Thesis\jdbi\jpa\src\test\java\org\jdbi\v3\jpa\JpaTest.java,ExtendsMappedSuperclassThing,public  (int id String name){ setId(id); setName(name); } 
C:\Users\User\Desktop\Thesis\jdbi\jpa\src\test\java\org\jdbi\v3\jpa\JpaTest.java,FieldThing,public  (int id String name){ setId(id); setName(name); } 
C:\Users\User\Desktop\Thesis\jdbi\jpa\src\test\java\org\jdbi\v3\jpa\JpaTest.java,GetterThing,public  (int id String name){ setId(id); setName(name); } 
C:\Users\User\Desktop\Thesis\jdbi\jpa\src\test\java\org\jdbi\v3\jpa\JpaTest.java,NamedFieldThing,public  (int id String name){ setId(id); setName(name); } 
C:\Users\User\Desktop\Thesis\jdbi\jpa\src\test\java\org\jdbi\v3\jpa\JpaTest.java,NamedGetterThing,public  (int id String name){ setId(id); setName(name); } 
C:\Users\User\Desktop\Thesis\jdbi\jpa\src\test\java\org\jdbi\v3\jpa\JpaTest.java,NamedSetterThing,public  (int id String name){ setId(id); setName(name); } 
C:\Users\User\Desktop\Thesis\jdbi\jpa\src\test\java\org\jdbi\v3\jpa\JpaTest.java,OverridingSubclassThing,public  (int id String name){ setId(id); setName(name); } 
C:\Users\User\Desktop\Thesis\jdbi\jpa\src\test\java\org\jdbi\v3\jpa\JpaTest.java,SetterThing,public  (int id String name){ setId(id); setName(name); } 
C:\Users\User\Desktop\Thesis\jdbi\jpa\src\test\java\org\jdbi\v3\jpa\JpaTest.java,assertThatThing,"private static <T extends Thing>AbstractListAssert<? ? extends List<? extends T> T ?>  (List<T> rs){ return assertThat(rs).usingElementComparator((Comparator<T>)(left right) -> { if (left.getId() == right.getId()) { return Objects.toString(left.getName() """").compareTo(Objects.toString(right.getName() """")); } return left.getId() < right.getId() ? -1 : 1; } ); } "
C:\Users\User\Desktop\Thesis\jdbi\jpa\src\test\java\org\jdbi\v3\jpa\JpaTest.java,getId,"@Override @Column(name=""meow"") public int  (){ return super.getId(); } "
C:\Users\User\Desktop\Thesis\jdbi\jpa\src\test\java\org\jdbi\v3\jpa\JpaTest.java,getName,public String  (){ return name; } 
C:\Users\User\Desktop\Thesis\jdbi\jpa\src\test\java\org\jdbi\v3\jpa\PluginTest.java,Thing,public  (int id String name){ setId(id); setName(name); } 
C:\Users\User\Desktop\Thesis\jdbi\jpa\src\test\java\org\jdbi\v3\jpa\PluginTest.java,equals,@Override public boolean  (Object o){ if (o instanceof Thing) { Thing thing=(Thing)o; return id == thing.id && Objects.equals(name thing.name); } return false; } 
C:\Users\User\Desktop\Thesis\jdbi\jpa\src\test\java\org\jdbi\v3\jpa\PluginTest.java,getId,public int  (){ return id; } 
C:\Users\User\Desktop\Thesis\jdbi\jpa\src\test\java\org\jdbi\v3\jpa\PluginTest.java,getName,public String  (){ return name; } 
C:\Users\User\Desktop\Thesis\jdbi\jpa\src\test\java\org\jdbi\v3\jpa\PluginTest.java,hashCode,@Override public int  (){ return Objects.hash(id name); } 
C:\Users\User\Desktop\Thesis\jdbi\noparameters\src\test\java\org\jdbi\v3\noparameters\TestSqlObjectNoParameterNames.java,bindListMissingName,"@Test public void  () throws Exception { assertThatThrownBy(() -> h.attach(BindListWithoutNameDao.class).listByIds(1)).isInstanceOf(UnsupportedOperationException.class).hasMessageContaining(""parameter was not given a name""); } "
C:\Users\User\Desktop\Thesis\jdbi\noparameters\src\test\java\org\jdbi\v3\noparameters\TestSqlObjectNoParameterNames.java,bindListWithName,"@Test public void  () throws Exception { assertThat(h.attach(BindListWithNameDao.class).listByIds(1)).contains(new Something(1 ""Elsie Hughes"")); } "
C:\Users\User\Desktop\Thesis\jdbi\noparameters\src\test\java\org\jdbi\v3\noparameters\TestSqlObjectNoParameterNames.java,defineListWithName,"@Test public void  () throws Exception { assertThat(h.attach(DefineListWithNameDao.class).listByIds(""1"")).containsExactly(new Something(1 ""Elsie Hughes"")); } "
C:\Users\User\Desktop\Thesis\jdbi\noparameters\src\test\java\org\jdbi\v3\noparameters\TestSqlObjectNoParameterNames.java,defineListWithoutName,"@Test public void  () throws Exception { assertThatThrownBy(() -> h.attach(DefineListWithoutNameDao.class).listByIds(""1"")).isInstanceOf(UnsupportedOperationException.class).hasMessageContaining(""parameter was not given a name""); } "
C:\Users\User\Desktop\Thesis\jdbi\noparameters\src\test\java\org\jdbi\v3\noparameters\TestSqlObjectNoParameterNames.java,defineMissingName,"@Test public void  () throws Exception { assertThatThrownBy(() -> h.attach(DefineWithoutNameDao.class).getById(1)).isInstanceOf(UnsupportedOperationException.class).hasMessageContaining(""parameter was not given a name""); } "
C:\Users\User\Desktop\Thesis\jdbi\noparameters\src\test\java\org\jdbi\v3\noparameters\TestSqlObjectNoParameterNames.java,defineWithName,"@Test public void  () throws Exception { assertThat(h.attach(DefineWithNameDao.class).getById(1)).isEqualTo(new Something(1 ""Elsie Hughes"")); } "
C:\Users\User\Desktop\Thesis\jdbi\noparameters\src\test\java\org\jdbi\v3\noparameters\TestSqlObjectNoParameterNames.java,explicitBindNamed,"@Test public void  () throws Exception { assertThatThrownBy(() -> h.attach(BindDao.class).getByIdExplicitBindNamed(1)).isInstanceOf(UnableToExecuteStatementException.class).hasMessageContaining(""no named parameter matches 'id'""); } "
C:\Users\User\Desktop\Thesis\jdbi\noparameters\src\test\java\org\jdbi\v3\noparameters\TestSqlObjectNoParameterNames.java,explicitBindPositional,"@Test public void  () throws Exception { assertThat(h.attach(BindDao.class).getByIdExplicitBindPositional(1)).isEqualTo(new Something(1 ""Elsie Hughes"")); } "
C:\Users\User\Desktop\Thesis\jdbi\oracle12\src\test\java\org\jdbi\v3\oracle12\OracleDatabaseRule.java,after,"@Override protected void  (){ try { sharedHandle.execute(""drop table something""); sharedHandle.execute(""drop sequence something_id_sequence""); con.close(); } catch ( SQLException e) { throw new AssertionError(e); } } "
C:\Users\User\Desktop\Thesis\jdbi\oracle12\src\test\java\org\jdbi\v3\oracle12\OracleDatabaseRule.java,before,"@Override protected void  () throws Throwable { db=Jdbi.create(uri ""hr"" ""oracle""); if (installPlugins) { db.installPlugins(); } plugins.forEach(db::installPlugin); try { sharedHandle=db.open(); } catch ( Exception e) { assumeNoException(""Oracle database n"
C:\Users\User\Desktop\Thesis\jdbi\oracle12\src\test\java\org\jdbi\v3\oracle12\OracleDatabaseRule.java,getConnectionFactory,public ConnectionFactory  (){ return () -> DriverManager.getConnection(getConnectionString()); } 
C:\Users\User\Desktop\Thesis\jdbi\oracle12\src\test\java\org\jdbi\v3\oracle12\OracleDatabaseRule.java,getConnectionString,public String  (){ return uri; } 
C:\Users\User\Desktop\Thesis\jdbi\oracle12\src\test\java\org\jdbi\v3\oracle12\OracleDatabaseRule.java,getJdbi,@Override public Jdbi  (){ return db; } 
C:\Users\User\Desktop\Thesis\jdbi\oracle12\src\test\java\org\jdbi\v3\oracle12\OracleDatabaseRule.java,getSharedHandle,public Handle  (){ return sharedHandle; } 
C:\Users\User\Desktop\Thesis\jdbi\oracle12\src\test\java\org\jdbi\v3\oracle12\OracleDatabaseRule.java,openHandle,public Handle  (){ return getJdbi().open(); } 
C:\Users\User\Desktop\Thesis\jdbi\oracle12\src\test\java\org\jdbi\v3\oracle12\OracleDatabaseRule.java,withPlugin,public OracleDatabaseRule  (JdbiPlugin plugin){ plugins.add(plugin); return this; } 
C:\Users\User\Desktop\Thesis\jdbi\oracle12\src\test\java\org\jdbi\v3\oracle12\OracleDatabaseRule.java,withPlugins,public OracleDatabaseRule  (){ installPlugins=true; return this; } 
C:\Users\User\Desktop\Thesis\jdbi\oracle12\src\main\java\org\jdbi\v3\oracle12\OracleReturning.java,ReturnParam, (int index int oracleType){ this.name=null; this.index=index; this.oracleType=oracleType; } 
C:\Users\User\Desktop\Thesis\jdbi\oracle12\src\main\java\org\jdbi\v3\oracle12\OracleReturning.java,apply,@Override public void  (int position PreparedStatement statement StatementContext ctx) throws SQLException { unwrapOracleStatement(statement).registerReturnParameter(position oracleType); } 
C:\Users\User\Desktop\Thesis\jdbi\oracle12\src\main\java\org\jdbi\v3\oracle12\OracleReturning.java,beforeBinding,@Override public void  (PreparedStatement stmt StatementContext ctx) throws SQLException { for ( ReturnParam returnParam : returnParams) { returnParam.bind(ctx.getBinding()); } } 
C:\Users\User\Desktop\Thesis\jdbi\oracle12\src\main\java\org\jdbi\v3\oracle12\OracleReturning.java,bind,void  (Binding binding){ if (name == null) { binding.addPositional(index this); } else { binding.addNamed(name this); } } 
C:\Users\User\Desktop\Thesis\jdbi\oracle12\src\main\java\org\jdbi\v3\oracle12\OracleReturning.java,getReturnResultSet,"private static Supplier<ResultSet>  (Supplier<PreparedStatement> supplier StatementContext ctx){ return () -> { PreparedStatement stmt=supplier.get(); try { if (!stmt.isWrapperFor(OraclePreparedStatement.class)) { throw new IllegalStateException(""Statement is not an instance of  nor a wrapper of  OraclePreparedStatement""); } OraclePreparedStatement statement=stmt.unwrap(OraclePreparedStatement.class); ResultSet rs=statement.getReturnResultSet(); if (rs != null) { ctx.addCleanable(rs::close); } return rs; } catch ( SQLException e) { throw new ResultSetException(""Unable to retrieve return result set"" e ctx); } } ; } "
C:\Users\User\Desktop\Thesis\jdbi\oracle12\src\main\java\org\jdbi\v3\oracle12\OracleReturning.java,register,public ReturnParameters  (String name int oracleType){ returnParams.add(new ReturnParam(name oracleType)); return this; } 
C:\Users\User\Desktop\Thesis\jdbi\oracle12\src\main\java\org\jdbi\v3\oracle12\OracleReturning.java,returnParameters,public static ReturnParameters  (){ return new ReturnParameters(); } 
C:\Users\User\Desktop\Thesis\jdbi\oracle12\src\main\java\org\jdbi\v3\oracle12\OracleReturning.java,returningDml,public static ResultProducer<ResultBearing>  (){ return (supplier ctx) -> ResultBearing.of(getReturnResultSet(supplier ctx) ctx); } 
C:\Users\User\Desktop\Thesis\jdbi\oracle12\src\main\java\org\jdbi\v3\oracle12\OracleReturning.java,unwrapOracleStatement,"private OraclePreparedStatement  (PreparedStatement stmt) throws SQLException { if (!stmt.isWrapperFor(OraclePreparedStatement.class)) { throw new IllegalStateException(""Statement is not an instance of  nor a wrapper of  OraclePreparedStatement""); } return stmt.unwrap(OraclePreparedStatement.class); } "
C:\Users\User\Desktop\Thesis\jdbi\postgres\src\main\java\org\jdbi\v3\postgres\DurationArgumentFactory.java,DurationArgumentFactory,public  (){ super(Types.OTHER); } 
C:\Users\User\Desktop\Thesis\jdbi\postgres\src\main\java\org\jdbi\v3\postgres\DurationArgumentFactory.java,build,@Override public Argument  (Duration duration ConfigRegistry config){ final boolean isNegative=duration.isNegative(); if (isNegative) { duration=duration.negated(); } final long days=duration.toDays(); if (days > Integer.MAX_VALUE) { throw new IllegalArgu
C:\Users\User\Desktop\Thesis\jdbi\postgres\src\main\java\org\jdbi\v3\postgres\DurationColumnMapperFactory.java,build,@Override public Optional<ColumnMapper<?>>  (Type type ConfigRegistry config){ if (type != Duration.class) { return Optional.empty(); } return Optional.of((r i c) -> { final Object obj=r.getObject(i); if (obj == null) { return null; } if (!(obj instanceof
C:\Users\User\Desktop\Thesis\jdbi\postgres\src\main\java\org\jdbi\v3\postgres\HStoreArgumentFactory.java,HStoreArgumentFactory,public  (){ super(Types.OTHER); } 
C:\Users\User\Desktop\Thesis\jdbi\postgres\src\main\java\org\jdbi\v3\postgres\HStoreArgumentFactory.java,build,@Override protected Argument  (Map value ConfigRegistry config){ return (i p cx) -> p.setObject(i value); } 
C:\Users\User\Desktop\Thesis\jdbi\postgres\src\main\java\org\jdbi\v3\postgres\HStoreColumnMapper.java,map,"@Override @SuppressWarnings(""unchecked"") public Map<String String>  (ResultSet r int columnNumber StatementContext ctx) throws SQLException { return (Map<String String>)r.getObject(columnNumber); } "
C:\Users\User\Desktop\Thesis\jdbi\postgres\src\main\java\org\jdbi\v3\postgres\InetArgumentFactory.java,InetArgumentFactory,public  (){ super(Types.OTHER); } 
C:\Users\User\Desktop\Thesis\jdbi\postgres\src\main\java\org\jdbi\v3\postgres\InetArgumentFactory.java,build,@Override protected Argument  (InetAddress value ConfigRegistry config){ return (i p cx) -> p.setObject(i value.getHostAddress() Types.OTHER); } 
C:\Users\User\Desktop\Thesis\jdbi\jpa\src\main\java\org\jdbi\v3\jpa\EntityMemberAccessException.java,EntityMemberAccessException,public  (String message){ super(message); } 
C:\Users\User\Desktop\Thesis\jdbi\postgres\src\main\java\org\jdbi\v3\postgres\JavaTimeMapperFactory.java,build,@Override public Optional<ColumnMapper<?>>  (Type type ConfigRegistry config){ if (type == LocalDate.class || type == LocalTime.class || type == LocalDateTime.class || type == OffsetDateTime.class) { return Optional.of((r i c) -> r.getObject(i (Class<?>)t
C:\Users\User\Desktop\Thesis\jdbi\postgres\src\main\java\org\jdbi\v3\postgres\JavaTimeArgumentFactory.java,build,@Override public Optional<Argument>  (Type type Object value ConfigRegistry config){ if (type == LocalDate.class) { return Optional.of(new ObjectArgument(value Types.DATE)); } if (type == LocalTime.class) { return Optional.of(new ObjectArgument(value Type
C:\Users\User\Desktop\Thesis\jdbi\postgres\src\main\java\org\jdbi\v3\postgres\PeriodArgumentFactory.java,PeriodArgumentFactory,public  (){ super(Types.OTHER); } 
C:\Users\User\Desktop\Thesis\jdbi\postgres\src\main\java\org\jdbi\v3\postgres\PeriodArgumentFactory.java,build,@Override public Argument  (Period period ConfigRegistry config){ PGInterval interval=new PGInterval(period.getYears() period.getMonths() period.getDays() 0 0 0); return (i p cx) -> p.setObject(i interval Types.OTHER); } 
C:\Users\User\Desktop\Thesis\jdbi\postgres\src\main\java\org\jdbi\v3\postgres\PostgresPlugin.java,customizeJdbi,@Override public void  (Jdbi db){ db.registerArgument(new TypedEnumArgumentFactory()); db.registerArgument(new JavaTimeArgumentFactory()); db.registerArgument(new DurationArgumentFactory()); db.registerArgument(new PeriodArgumentFactory()); db.registerArg
C:\Users\User\Desktop\Thesis\jdbi\postgres\src\main\java\org\jdbi\v3\postgres\TypedEnumArgumentFactory.java,TypedEnumArgumentFactory,public  (){ super(Types.OTHER); } 
C:\Users\User\Desktop\Thesis\jdbi\postgres\src\main\java\org\jdbi\v3\postgres\TypedEnumArgumentFactory.java,build,@Override protected Argument  (Enum value ConfigRegistry config){ return (p s c) -> s.setObject(p value Types.OTHER); } 
C:\Users\User\Desktop\Thesis\jdbi\postgres\src\main\java\org\jdbi\v3\postgres\UUIDArgumentFactory.java,UUIDArgumentFactory,public  (){ super(Types.OTHER); } 
C:\Users\User\Desktop\Thesis\jdbi\postgres\src\main\java\org\jdbi\v3\postgres\UUIDArgumentFactory.java,build,@Override protected Argument  (UUID value ConfigRegistry config){ return (i stmt ctx) -> stmt.setObject(i value); } 
C:\Users\User\Desktop\Thesis\jdbi\oracle12\src\test\java\org\jdbi\v3\oracle12\TestOracleReturning.java,testReturningDmlNamedParams,"@Test public void  (){ Handle h=dbRule.getSharedHandle(); List<Integer> ids=h.createUpdate(""insert into something(id  name) values (:id  :name) returning id into :result"").bindBean(new Something(17 ""Brian"")).addCustomizer(returnParameters().register(""resu"
C:\Users\User\Desktop\Thesis\jdbi\oracle12\src\test\java\org\jdbi\v3\oracle12\TestOracleReturning.java,testReturningDmlPositionalParams,"@Test public void  (){ Handle h=dbRule.getSharedHandle(); List<Integer> ids=h.createUpdate(""insert into something(id  name) values (?  ?) returning id into ?"").bind(0 17).bind(1 ""Brian"").addCustomizer(returnParameters().register(2 OracleTypes.INTEGER)).ex"
C:\Users\User\Desktop\Thesis\jdbi\postgres\src\main\java\org\jdbi\v3\postgres\PeriodColumnMapperFactory.java,build,@Override public Optional<ColumnMapper<?>>  (Type type ConfigRegistry config){ if (type != Period.class) { return Optional.empty(); } return Optional.of((r i c) -> { final Object obj=r.getObject(i); if (obj == null) { return null; } if (!(obj instanceof P
C:\Users\User\Desktop\Thesis\jdbi\postgres\src\test\java\org\jdbi\v3\postgres\PostgresDbRule.java,rule,public static JdbiRule  (){ return JdbiRule.embeddedPostgres().withPlugin(new SqlObjectPlugin()).withPlugin(new PostgresPlugin()); } 
C:\Users\User\Desktop\Thesis\jdbi\postgres\src\test\java\org\jdbi\v3\postgres\TestDuration.java,setUp,"@Before public void  () throws Exception { handle=postgresDbRule.getHandle(); handle.useTransaction(h -> { h.execute(""drop table if exists intervals""); h.execute(""create table intervals(id int not null  foo interval)""); h.execute(""insert into intervals(id"
C:\Users\User\Desktop\Thesis\jdbi\postgres\src\test\java\org\jdbi\v3\postgres\TestDuration.java,testDurationTooPrecise,"@Test(expected=IllegalArgumentException.class) public void  (){ handle.execute(""insert into intervals(id  foo) values(?  ?)"" 12 Duration.ofNanos(100)); } "
C:\Users\User\Desktop\Thesis\jdbi\postgres\src\test\java\org\jdbi\v3\postgres\TestDuration.java,testHandlesNulls,"@Test public void  (){ handle.execute(""insert into intervals(id  foo) values(?  ?)"" 5 null); final Duration d=handle.createQuery(""select foo from intervals where id=?"").bind(0 5).mapTo(Duration.class).findOnly(); assertThat(d).isNull(); } "
C:\Users\User\Desktop\Thesis\jdbi\postgres\src\test\java\org\jdbi\v3\postgres\TestDuration.java,testInvalidDuration,"@Test(expected=IllegalArgumentException.class) public void  (){ handle.createQuery(""select foo from intervals where id=?"").bind(0 3).mapTo(Duration.class).findOnly(); } "
C:\Users\User\Desktop\Thesis\jdbi\postgres\src\test\java\org\jdbi\v3\postgres\TestDuration.java,testReadNegativeDuration,"@Test public void  (){ handle.execute(""insert into intervals(id  foo) values(?  interval '-2 days -3 hours')"" 7); final Duration d=handle.createQuery(""select foo from intervals where id=?"").bind(0 7).mapTo(Duration.class).findOnly(); assertThat(d).isEqual"
C:\Users\User\Desktop\Thesis\jdbi\postgres\src\test\java\org\jdbi\v3\postgres\TestDuration.java,testReadsViaFluentAPI,"@Test public void  (){ List<Duration> periods=handle.createQuery(""select foo from intervals where id = 1 or id = 2 order by id"").mapTo(Duration.class).list(); assertThat(periods).isEqualTo(ImmutableList.of(Duration.ofDays(1).plusHours(15) Duration.ofDays("
C:\Users\User\Desktop\Thesis\jdbi\postgres\src\test\java\org\jdbi\v3\postgres\TestDuration.java,testTinyDuration,"@Test public void  (){ handle.execute(""insert into intervals(id  foo) values(?  interval '13us')"" 11); final Duration d=handle.createQuery(""select foo from intervals where id=?"").bind(0 11).mapTo(Duration.class).findOnly(); assertThat(d).isEqualTo(Duratio"
C:\Users\User\Desktop\Thesis\jdbi\postgres\src\test\java\org\jdbi\v3\postgres\TestDuration.java,testTrivialDuration,"@Test public void  (){ handle.execute(""insert into intervals(id  foo) values(?  ?)"" 4 Duration.ZERO); Duration d=handle.createQuery(""select foo from intervals where id=?"").bind(0 4).mapTo(Duration.class).findOnly(); assertThat(d.isZero()); } "
C:\Users\User\Desktop\Thesis\jdbi\postgres\src\test\java\org\jdbi\v3\postgres\TestDuration.java,testWriteDurationTooBig,"@Test(expected=IllegalArgumentException.class) public void  (){ handle.execute(""insert into intervals(id  foo) values(?  ?)"" 9 Duration.ofDays((long)Integer.MAX_VALUE + 1)); } "
C:\Users\User\Desktop\Thesis\jdbi\postgres\src\test\java\org\jdbi\v3\postgres\TestDuration.java,testWriteDurationTooSmall,"@Test(expected=ArithmeticException.class) public void  (){ handle.execute(""insert into intervals(id  foo) values(?  ?)"" 10 Duration.ofSeconds(Long.MIN_VALUE)); } "
C:\Users\User\Desktop\Thesis\jdbi\postgres\src\test\java\org\jdbi\v3\postgres\TestDuration.java,testWriteReadNegativeDuration,"@Test public void  (){ handle.execute(""insert into intervals(id  foo) values(?  ?)"" 8 Duration.ofDays(-3).plusMinutes(2)); final Duration d=handle.createQuery(""select foo from intervals where id=?"").bind(0 8).mapTo(Duration.class).findOnly(); assertThat(d"
C:\Users\User\Desktop\Thesis\jdbi\postgres\src\test\java\org\jdbi\v3\postgres\TestDuration.java,testWritesViaFluentApi,"@Test public void  (){ handle.execute(""insert into intervals(id  foo) values(?  ?)"" 6 testDuration); final Duration d=handle.createQuery(""select foo from intervals where id=?"").bind(0 6).mapTo(Duration.class).findOnly(); assertThat(d).isEqualTo(testDurati"
C:\Users\User\Desktop\Thesis\jdbi\postgres\src\test\java\org\jdbi\v3\postgres\TestInetAddressPg.java,getInetType,"@Override protected String  (){ return ""INET""; } "
C:\Users\User\Desktop\Thesis\jdbi\postgres\src\test\java\org\jdbi\v3\postgres\TestJavaTime.java,instant,"@Test public void  (){ final Instant leap=Instant.ofEpochMilli(-14159025000L); h.execute(""insert into stuff values(?)"" leap); assertThat(h.createQuery(""select ts from stuff"").mapTo(Instant.class).findOnly()).isEqualTo(leap); } "
C:\Users\User\Desktop\Thesis\jdbi\postgres\src\test\java\org\jdbi\v3\postgres\TestJavaTime.java,localDate,"@Test public void  (){ LocalDate d=LocalDate.now(); h.execute(""insert into stuff(d) values (?)"" d); assertThat(h.createQuery(""select d from stuff"").mapTo(LocalDate.class).findOnly()).isEqualTo(d); } "
C:\Users\User\Desktop\Thesis\jdbi\postgres\src\test\java\org\jdbi\v3\postgres\TestJavaTime.java,localDateTime,"@Test public void  (){ LocalDateTime d=LocalDateTime.now(); h.execute(""insert into stuff(ts) values (?)"" d); assertThat(h.createQuery(""select ts from stuff"").mapTo(LocalDateTime.class).findOnly()).isEqualTo(d); } "
C:\Users\User\Desktop\Thesis\jdbi\postgres\src\test\java\org\jdbi\v3\postgres\TestJavaTime.java,localTime,"@Test public void  (){ h.execute(""create table schedule (start time  stop time)""); LocalTime start=LocalTime.of(8 30 0); LocalTime stop=LocalTime.of(10 30 0); h.execute(""insert into schedule (start  stop) values (? ?)"" start stop); assertThat(h.createQuer"
C:\Users\User\Desktop\Thesis\jdbi\postgres\src\test\java\org\jdbi\v3\postgres\TestJavaTime.java,offsetDateTime,"@Test public void  (){ OffsetDateTime dt=OffsetDateTime.now().withOffsetSameInstant(ZoneOffset.UTC); h.execute(""insert into stuff(ts) values (?)"" dt); assertThat(h.createQuery(""select ts from stuff"").mapTo(OffsetDateTime.class).findOnly()).isEqualTo(dt); "
C:\Users\User\Desktop\Thesis\jdbi\postgres\src\test\java\org\jdbi\v3\postgres\TestJavaTime.java,offsetDateTimeLosesOffset,"@Test public void  (){ OffsetDateTime dt=OffsetDateTime.now().withOffsetSameInstant(ZoneOffset.ofHours(-7)); h.execute(""insert into stuff(ts) values (?)"" dt); assertThat(dt.isEqual(h.createQuery(""select ts from stuff"").mapTo(OffsetDateTime.class).findOnly"
C:\Users\User\Desktop\Thesis\jdbi\postgres\src\test\java\org\jdbi\v3\postgres\TestJavaTime.java,setUp,"@Before public void  (){ h=db.getHandle(); h.useTransaction(th -> { th.execute(""drop table if exists stuff""); th.execute(""create table stuff (ts timestamp  d date  z text)""); } ); } "
C:\Users\User\Desktop\Thesis\jdbi\postgres\src\test\java\org\jdbi\v3\postgres\TestJavaTime.java,zoneId,"@Test public void  (){ final ZoneId zone=ZoneId.systemDefault(); h.execute(""insert into stuff(z) values (?)"" zone); assertThat(h.createQuery(""select z from stuff"").mapTo(ZoneId.class).findOnly()).isEqualTo(zone); } "
C:\Users\User\Desktop\Thesis\jdbi\postgres\src\test\java\org\jdbi\v3\postgres\TestPeriod.java,setUp,"@Before public void  () throws Exception { handle=postgresDbRule.getHandle(); handle.useTransaction(h -> { h.execute(""drop table if exists intervals""); h.execute(""create table intervals(id int not null  foo interval)""); h.execute(""insert into intervals(id"
C:\Users\User\Desktop\Thesis\jdbi\postgres\src\test\java\org\jdbi\v3\postgres\TestPeriod.java,testHandlesNulls,"@Test public void  (){ handle.execute(""insert into intervals(id  foo) values(?  ?)"" 5 null); final Period p=handle.createQuery(""select foo from intervals where id=?"").bind(0 5).mapTo(Period.class).findOnly(); assertThat(p).isNull(); } "
C:\Users\User\Desktop\Thesis\jdbi\postgres\src\test\java\org\jdbi\v3\postgres\TestPeriod.java,testInvalidPeriod,"@Test(expected=IllegalArgumentException.class) public void  (){ handle.createQuery(""select foo from intervals where id=?"").bind(0 3).mapTo(Period.class).findOnly(); } "
C:\Users\User\Desktop\Thesis\jdbi\postgres\src\test\java\org\jdbi\v3\postgres\TestPeriod.java,testNegativePeriod,"@Test public void  (){ handle.execute(""insert into intervals(id  foo) values(?  interval '-3 years -1 month 2 days')"" 7); final Period p=handle.createQuery(""select foo from intervals where id=?"").bind(0 7).mapTo(Period.class).findOnly(); assertThat(p).isE"
C:\Users\User\Desktop\Thesis\jdbi\postgres\src\test\java\org\jdbi\v3\postgres\TestPeriod.java,testReadsViaFluentAPI,"@Test public void  (){ List<Period> periods=handle.createQuery(""select foo from intervals where id = 1 or id = 2 order by id"").mapTo(Period.class).list(); assertThat(periods).isEqualTo(ImmutableList.of(Period.of(1 9 40) Period.of(0 0 7))); } "
C:\Users\User\Desktop\Thesis\jdbi\postgres\src\test\java\org\jdbi\v3\postgres\TestPeriod.java,testTrivialPeriod,"@Test public void  (){ handle.execute(""insert into intervals(id  foo) values(?  ?)"" 4 Period.of(0 0 0)); Period p=handle.createQuery(""select foo from intervals where id=?"").bind(0 4).mapTo(Period.class).findOnly(); assertThat(p.isZero()); } "
C:\Users\User\Desktop\Thesis\jdbi\postgres\src\test\java\org\jdbi\v3\postgres\TestPeriod.java,testWritesViaFluentApi,"@Test public void  (){ handle.execute(""insert into intervals(id  foo) values(?  ?)"" 6 testPeriod); final Period p=handle.createQuery(""select foo from intervals where id=?"").bind(0 6).mapTo(Period.class).findOnly(); assertThat(p).isEqualTo(testPeriod); } "
C:\Users\User\Desktop\Thesis\jdbi\postgres\src\test\java\org\jdbi\v3\postgres\TestTypedEnum.java,setupDbi,"@Before public void  () throws Exception { h=db.getHandle(); h.useTransaction(th -> { th.execute(""DROP TABLE IF EXISTS values""); th.execute(""DROP TYPE IF EXISTS enum_t""); th.execute(""CREATE TYPE enum_t AS ENUM ('FOO'  'BAR'  'BAZ')""); th.execute(""CREATE T"
C:\Users\User\Desktop\Thesis\jdbi\postgres\src\test\java\org\jdbi\v3\postgres\TestTypedEnum.java,testBind,"@Test public void  () throws Exception { h.createUpdate(""INSERT INTO values VALUES(:value)"").bind(""value"" EnumT.BAR).execute(); assertThat(h.createQuery(""SELECT * FROM values"").mapTo(String.class).findOnly()).isEqualTo(""BAR""); } "
C:\Users\User\Desktop\Thesis\jdbi\postgres\src\test\java\org\jdbi\v3\postgres\TestTypedEnum.java,testMap,"@Test public void  () throws Exception { h.createUpdate(""INSERT INTO values VALUES('BAZ')"").execute(); assertThat(h.createQuery(""SELECT * FROM values"").mapTo(EnumT.class).findOnly()).isEqualTo(EnumT.BAZ); } "
C:\Users\User\Desktop\Thesis\jdbi\spring4\src\main\java\org\jdbi\v3\spring4\JdbiFactoryBean.java,JdbiFactoryBean,public  (DataSource dataSource){ this.dataSource=dataSource; } 
C:\Users\User\Desktop\Thesis\jdbi\spring4\src\main\java\org\jdbi\v3\spring4\JdbiFactoryBean.java,afterPropertiesSet,"@PostConstruct private void  (){ if (dataSource == null) { throw new IllegalStateException(""'dataSource' property must be set""); } } "
C:\Users\User\Desktop\Thesis\jdbi\spring4\src\main\java\org\jdbi\v3\spring4\JdbiFactoryBean.java,getObject,@Override public Jdbi  () throws Exception { final Jdbi jdbi=Jdbi.create(() -> DataSourceUtils.getConnection(dataSource)); if (autoInstallPlugins) { jdbi.installPlugins(); } plugins.forEach(jdbi::installPlugin); globalDefines.forEach(jdbi::define); return
C:\Users\User\Desktop\Thesis\jdbi\spring4\src\main\java\org\jdbi\v3\spring4\JdbiFactoryBean.java,getObjectType,@Override public Class<Jdbi>  (){ return Jdbi.class; } 
C:\Users\User\Desktop\Thesis\jdbi\spring4\src\main\java\org\jdbi\v3\spring4\JdbiFactoryBean.java,isSingleton,@Override public boolean  (){ return true; } 
C:\Users\User\Desktop\Thesis\jdbi\spring4\src\main\java\org\jdbi\v3\spring4\JdbiFactoryBean.java,setAutoInstallPlugins,public JdbiFactoryBean  (boolean autoInstallPlugins){ this.autoInstallPlugins=autoInstallPlugins; return this; } 
C:\Users\User\Desktop\Thesis\jdbi\spring4\src\main\java\org\jdbi\v3\spring4\JdbiFactoryBean.java,setDataSource,public JdbiFactoryBean  (DataSource dataSource){ this.dataSource=dataSource; return this; } 
C:\Users\User\Desktop\Thesis\jdbi\spring4\src\main\java\org\jdbi\v3\spring4\JdbiFactoryBean.java,setGlobalDefines,public void  (Map<String Object> defines){ globalDefines.putAll(defines); } 
C:\Users\User\Desktop\Thesis\jdbi\spring4\src\main\java\org\jdbi\v3\spring4\JdbiFactoryBean.java,setPlugins,@Autowired(required=false) public JdbiFactoryBean  (Collection<JdbiPlugin> plugins){ this.plugins=new ArrayList<>(plugins); return this; } 
C:\Users\User\Desktop\Thesis\jdbi\spring4\src\main\java\org\jdbi\v3\spring4\JdbiUtil.java,Adapter, (Jdbi db Handle handle){ this.db=db; this.handle=handle; } 
C:\Users\User\Desktop\Thesis\jdbi\spring4\src\main\java\org\jdbi\v3\spring4\JdbiUtil.java,beforeCompletion,@Override public void  (){ TRANSACTIONAL_HANDLES.remove(handle); TransactionSynchronizationManager.unbindResource(db); } 
C:\Users\User\Desktop\Thesis\jdbi\spring4\src\main\java\org\jdbi\v3\spring4\JdbiUtil.java,closeIfNeeded,public static void  (Handle handle){ if (!TRANSACTIONAL_HANDLES.contains(handle)) { handle.close(); } } 
C:\Users\User\Desktop\Thesis\jdbi\spring4\src\main\java\org\jdbi\v3\spring4\JdbiUtil.java,getHandle,public static Handle  (Jdbi jdbi){ Handle bound=(Handle)TransactionSynchronizationManager.getResource(jdbi); if (bound == null) { bound=jdbi.open(); if (TransactionSynchronizationManager.isSynchronizationActive()) { TransactionSynchronizationManager.bindResource(jdbi bound); TransactionSynchronizationManager.registerSynchronization(new Adapter(jdbi bound)); TRANSACTIONAL_HANDLES.add(bound); } } return bound; } 
C:\Users\User\Desktop\Thesis\jdbi\spring4\src\main\java\org\jdbi\v3\spring4\JdbiUtil.java,resume,@Override public void  (){ TransactionSynchronizationManager.bindResource(db handle); } 
C:\Users\User\Desktop\Thesis\jdbi\spring4\src\main\java\org\jdbi\v3\spring4\JdbiUtil.java,suspend,@Override public void  (){ TransactionSynchronizationManager.unbindResource(db); } 
C:\Users\User\Desktop\Thesis\jdbi\spring4\src\test\java\org\jdbi\v3\spring4\AutoPlugin.java,customizeJdbi,@Override public void  (Jdbi jdbi){ jdbi.define(KEY VALUE); } 
C:\Users\User\Desktop\Thesis\jdbi\spring4\src\test\java\org\jdbi\v3\spring4\DummyService.java,DummyService,public  (Jdbi jdbi){ this.jdbi=jdbi; } 
C:\Users\User\Desktop\Thesis\jdbi\spring4\src\test\java\org\jdbi\v3\spring4\DummyService.java,inNested,@Override @Transactional(propagation=Propagation.NESTED) public void  (Callback c){ c.call(jdbi); } 
C:\Users\User\Desktop\Thesis\jdbi\spring4\src\test\java\org\jdbi\v3\spring4\DummyService.java,inPropagationRequired,@Override @Transactional(propagation=Propagation.REQUIRED) public void  (Callback c){ c.call(jdbi); } 
C:\Users\User\Desktop\Thesis\jdbi\spring4\src\test\java\org\jdbi\v3\spring4\DummyService.java,inRequiresNew,@Override @Transactional(propagation=Propagation.REQUIRES_NEW) public void  (Callback c){ c.call(jdbi); } 
C:\Users\User\Desktop\Thesis\jdbi\spring4\src\test\java\org\jdbi\v3\spring4\DummyService.java,inRequiresNewReadUncommitted,@Override @Transactional(propagation=Propagation.REQUIRES_NEW isolation=Isolation.READ_UNCOMMITTED) public void  (Callback c){ c.call(jdbi); } 
C:\Users\User\Desktop\Thesis\jdbi\spring4\src\test\java\org\jdbi\v3\spring4\ManualPlugin.java,customizeJdbi,@Override public void  (Jdbi jdbi){ jdbi.define(KEY VALUE); } 
C:\Users\User\Desktop\Thesis\jdbi\spring4\src\test\java\org\jdbi\v3\spring4\TestJdbiFactoryBean.java,setDataSource,@Autowired public void  (DataSource ds){ this.ds=ds; } 
C:\Users\User\Desktop\Thesis\jdbi\spring4\src\test\java\org\jdbi\v3\spring4\TestJdbiFactoryBean.java,setJdbi,@Autowired public void  (Jdbi jdbi){ this.jdbi=jdbi; } 
C:\Users\User\Desktop\Thesis\jdbi\spring4\src\test\java\org\jdbi\v3\spring4\TestJdbiFactoryBean.java,setService,@Autowired public void  (Service service){ this.service=service; } 
C:\Users\User\Desktop\Thesis\jdbi\spring4\src\test\java\org\jdbi\v3\spring4\TestJdbiFactoryBean.java,testAutoInstalledPlugin,@Test public void  () throws Exception { assertThat(jdbi.getConfig(SqlStatements.class).getAttribute(AutoPlugin.KEY)).isEqualTo(AutoPlugin.VALUE); } 
C:\Users\User\Desktop\Thesis\jdbi\spring4\src\test\java\org\jdbi\v3\spring4\TestJdbiFactoryBean.java,testFailsViaException,"@Test public void  () throws Exception { assertThatExceptionOfType(ForceRollback.class).isThrownBy(() -> { service.inPropagationRequired(jdbi -> { Handle h=JdbiUtil.getHandle(jdbi); final int count=h.execute(""insert into something (id  name) values (7  'i"
C:\Users\User\Desktop\Thesis\jdbi\spring4\src\test\java\org\jdbi\v3\spring4\TestJdbiFactoryBean.java,testGlobalDefinedAttribute,"@Test public void  () throws Exception { assertThat(jdbi.getConfig(SqlStatements.class).getAttribute(""foo"")).isEqualTo(""bar""); } "
C:\Users\User\Desktop\Thesis\jdbi\spring4\src\test\java\org\jdbi\v3\spring4\TestJdbiFactoryBean.java,testManualInstalledPlugin,@Test public void  () throws Exception { assertThat(jdbi.getConfig(SqlStatements.class).getAttribute(ManualPlugin.KEY)).isEqualTo(ManualPlugin.VALUE); } 
C:\Users\User\Desktop\Thesis\jdbi\spring4\src\test\java\org\jdbi\v3\spring4\TestJdbiFactoryBean.java,testNested,"@Test public void  () throws Exception { assertThatExceptionOfType(ForceRollback.class).isThrownBy(() -> { service.inPropagationRequired(outer -> { final Handle h=JdbiUtil.getHandle(outer); h.execute(""insert into something (id  name) values (7  'ignored')"
C:\Users\User\Desktop\Thesis\jdbi\spring4\src\test\java\org\jdbi\v3\spring4\TestJdbiFactoryBean.java,testRequiresNew,"@Test public void  () throws Exception { service.inPropagationRequired(outer -> { final Handle h=JdbiUtil.getHandle(outer); h.execute(""insert into something (id  name) values (7  'ignored')""); assertThatExceptionOfType(ForceRollback.class).isThrownBy(() -"
C:\Users\User\Desktop\Thesis\jdbi\spring4\src\test\java\org\jdbi\v3\spring4\TestJdbiFactoryBean.java,testServiceIsActuallySet,@Test public void  () throws Exception { assertThat(service).isNotNull(); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlite\src\main\java\org\jdbi\v3\sqlite3\SQLitePlugin.java,customizeJdbi,@Override public void  (Jdbi jdbi){ jdbi.registerArgument(new URLArgumentFactory()); jdbi.registerColumnMapper(new URLColumnMapper()); } 
C:\Users\User\Desktop\Thesis\jdbi\spring4\src\test\java\org\jdbi\v3\spring4\TestPluginInstall.java,customizeJdbi,@Override public void  (Jdbi db){ pluginBCalled=true; } 
C:\Users\User\Desktop\Thesis\jdbi\spring4\src\test\java\org\jdbi\v3\spring4\TestPluginInstall.java,jdbiFactory,@Bean public JdbiFactoryBean  (){ return new JdbiFactoryBean().setDataSource(new DriverManagerDataSource()); } 
C:\Users\User\Desktop\Thesis\jdbi\spring4\src\test\java\org\jdbi\v3\spring4\TestPluginInstall.java,pluginA,@Bean public JdbiPlugin  (){ return new JdbiPlugin(){ @Override public void customizeJdbi( Jdbi db){ pluginACalled=true; } } ; } 
C:\Users\User\Desktop\Thesis\jdbi\spring4\src\test\java\org\jdbi\v3\spring4\TestPluginInstall.java,pluginB,@Bean public JdbiPlugin  (){ return new JdbiPlugin(){ @Override public void customizeJdbi( Jdbi db){ pluginBCalled=true; } } ; } 
C:\Users\User\Desktop\Thesis\jdbi\spring4\src\test\java\org\jdbi\v3\spring4\TestPluginInstall.java,testPluginsInstalled,@Test public void  (){ assertThat(db).isNotNull(); assertThat(config.pluginACalled).isTrue(); assertThat(config.pluginBCalled).isTrue(); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\config\Configurer.java,configureForMethod,"default void  (ConfigRegistry registry Annotation annotation Class<?> sqlObjectType Method method){ throw new UnsupportedOperationException(""Not supported for method""); } "
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\config\Configurer.java,configureForType,"default void  (ConfigRegistry registry Annotation annotation Class<?> sqlObjectType){ throw new UnsupportedOperationException(""Not supported for type""); } "
C:\Users\User\Desktop\Thesis\jdbi\sqlite\src\main\java\org\jdbi\v3\sqlite3\URLColumnMapper.java,map,@Override public URL  (ResultSet r int columnNumber StatementContext ctx) throws SQLException { try { return new URL(r.getString(columnNumber)); } catch ( MalformedURLException e) { throw new SQLException(e); } } 
C:\Users\User\Desktop\Thesis\jdbi\sqlite\src\main\java\org\jdbi\v3\sqlite3\URLArgumentFactory.java,URLArgumentFactory,public  (){ super(Types.VARCHAR); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlite\src\main\java\org\jdbi\v3\sqlite3\URLArgumentFactory.java,build,@Override protected Argument  (URL url ConfigRegistry config){ return (position statement ctx) -> statement.setString(position url.toString()); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlite\src\test\java\org\jdbi\v3\sqlite3\TestUrls.java,setUp,"@Before public void  () throws Exception { Jdbi jdbi=Jdbi.create(""jdbc:sqlite::memory:""); jdbi.installPlugin(new SQLitePlugin()); handle=jdbi.open(); handle.useTransaction(handle -> handle.execute(""CREATE TABLE foo(url URL);"")); } "
C:\Users\User\Desktop\Thesis\jdbi\sqlite\src\test\java\org\jdbi\v3\sqlite3\TestUrls.java,tearDown,@After public void  () throws Exception { handle.close(); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlite\src\test\java\org\jdbi\v3\sqlite3\TestUrls.java,testInsertNullUrlUsingBindByType,"@Test(expected=ResultSetException.class) public void  (){ handle.createUpdate(""INSERT INTO foo VALUES (:url)"").bindByType(""url"" null URL.class).execute(); handle.createQuery(""SELECT url FROM foo"").mapTo(URL.class).findOnly(); } "
C:\Users\User\Desktop\Thesis\jdbi\sqlite\src\test\java\org\jdbi\v3\sqlite3\TestUrls.java,testInsertUrlSuccessful,"@Test public void  () throws MalformedURLException { String googleString=""http://www.google.com""; URL googleUrl=new URL(googleString); handle.createUpdate(""INSERT INTO foo VALUES (:url)"").bind(""url"" googleUrl).execute(); URL actualUrl=handle.createQuery("""
C:\Users\User\Desktop\Thesis\jdbi\sqlite\src\test\java\org\jdbi\v3\sqlite3\TestUrls.java,testInsertUrlUsingBindByType,"@Test public void  () throws MalformedURLException { URL githubUrl=new URL(""http://www.github.com""); handle.createUpdate(""INSERT INTO foo VALUES (:url)"").bindByType(""url"" githubUrl URL.class).execute(); URL dbUrl=handle.createQuery(""SELECT * FROM foo"").ma"
C:\Users\User\Desktop\Thesis\jdbi\sqlite\src\test\java\org\jdbi\v3\sqlite3\TestUrls.java,testMapNullUrlThrowsException,"@Test(expected=ResultSetException.class) public void  (){ handle.createUpdate(""INSERT INTO foo VALUES (:url)"").bind(""url"" ((URL)null)).execute(); handle.createQuery(""SELECT url FROM foo"").mapTo(URL.class).findOnly(); } "
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\config\internal\RegisterArgumentFactoriesImpl.java,configureForMethod,@Override public void  (ConfigRegistry registry Annotation annotation Class<?> sqlObjectType Method method){ configureForType(registry annotation sqlObjectType); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\config\internal\RegisterArgumentFactoriesImpl.java,configureForType,@Override public void  (ConfigRegistry registry Annotation annotation Class<?> sqlObjectType){ Configurer delegate=new RegisterArgumentFactoryImpl(); RegisterArgumentFactories factories=(RegisterArgumentFactories)annotation; Stream.of(factories.value()).f
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\config\internal\RegisterArgumentFactoryImpl.java,configureForMethod,@Override public void  (ConfigRegistry registry Annotation annotation Class<?> sqlObjectType Method method){ configureForType(registry annotation sqlObjectType); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\config\internal\RegisterArgumentFactoryImpl.java,configureForType,@Override public void  (ConfigRegistry registry Annotation annotation Class<?> sqlObjectType){ RegisterArgumentFactory raf=(RegisterArgumentFactory)annotation; Arguments arguments=registry.get(Arguments.class); try { arguments.register(raf.value().newInst
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\config\internal\KeyColumnImpl.java,configureForMethod,@Override public void  (ConfigRegistry registry Annotation annotation Class<?> sqlObjectType Method method){ KeyColumn keyColumn=(KeyColumn)annotation; String name=keyColumn.value(); registry.get(MapEntryMappers.class).setKeyColumn(name.isEmpty() ? null :
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\config\internal\RegisterBeanMapperImpl.java,configureForMethod,@Override public void  (ConfigRegistry registry Annotation annotation Class<?> sqlObjectType Method method){ configureForType(registry annotation sqlObjectType); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\config\internal\RegisterBeanMapperImpl.java,configureForType,@Override public void  (ConfigRegistry registry Annotation annotation Class<?> sqlObjectType){ RegisterBeanMapper registerBeanMapper=(RegisterBeanMapper)annotation; Class<?> beanClass=registerBeanMapper.value(); String prefix=registerBeanMapper.prefix(); 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\config\internal\RegisterBeanMappersImpl.java,configureForMethod,@Override public void  (ConfigRegistry registry Annotation annotation Class<?> sqlObjectType Method method){ configureForType(registry annotation sqlObjectType); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\config\internal\RegisterBeanMappersImpl.java,configureForType,@Override public void  (ConfigRegistry registry Annotation annotation Class<?> sqlObjectType){ Configurer delegate=new RegisterBeanMapperImpl(); RegisterBeanMappers registerBeanMappers=(RegisterBeanMappers)annotation; Stream.of(registerBeanMappers.value()
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\config\internal\RegisterCollectorFactoryImpl.java,configureForMethod,@Override public void  (ConfigRegistry registry Annotation annotation Class<?> sqlObjectType Method method){ configureForType(registry annotation sqlObjectType); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\config\internal\RegisterCollectorFactoryImpl.java,configureForType,@Override public void  (ConfigRegistry registry Annotation annotation Class<?> sqlObjectType){ RegisterCollectorFactory registerCollectorFactory=(RegisterCollectorFactory)annotation; JdbiCollectors collectors=registry.get(JdbiCollectors.class); Class<? ex
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\config\internal\RegisterColumnMapperFactoriesImpl.java,configureForMethod,@Override public void  (ConfigRegistry registry Annotation annotation Class<?> sqlObjectType Method method){ configureForType(registry annotation sqlObjectType); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\config\internal\RegisterColumnMapperFactoriesImpl.java,configureForType,@Override public void  (ConfigRegistry registry Annotation annotation Class<?> sqlObjectType){ Configurer delegate=new RegisterColumnMapperFactoryImpl(); RegisterColumnMapperFactories registerColumnMapperFactories=(RegisterColumnMapperFactories)annotation
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\config\internal\RegisterColumnMapperImpl.java,configureForMethod,@Override public void  (ConfigRegistry registry Annotation annotation Class<?> sqlObjectType Method method){ configureForType(registry annotation sqlObjectType); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\config\internal\RegisterColumnMapperImpl.java,configureForType,@Override public void  (ConfigRegistry registry Annotation annotation Class<?> sqlObjectType){ RegisterColumnMapper registerColumnMapper=(RegisterColumnMapper)annotation; ColumnMappers mappers=registry.get(ColumnMappers.class); try { mappers.register(regi
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\config\internal\RegisterColumnMapperFactoryImpl.java,configureForMethod,@Override public void  (ConfigRegistry registry Annotation annotation Class<?> sqlObjectType Method method){ configureForType(registry annotation sqlObjectType); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\config\internal\RegisterColumnMapperFactoryImpl.java,configureForType,@Override public void  (ConfigRegistry registry Annotation annotation Class<?> sqlObjectType){ RegisterColumnMapperFactory registerColumnMapperFactory=(RegisterColumnMapperFactory)annotation; try { ColumnMapperFactory factory=registerColumnMapperFactory.v
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\config\internal\RegisterConstructorMappersImpl.java,configureForMethod,@Override public void  (ConfigRegistry registry Annotation annotation Class<?> sqlObjectType Method method){ configureForType(registry annotation sqlObjectType); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\config\internal\RegisterConstructorMappersImpl.java,configureForType,@Override public void  (ConfigRegistry registry Annotation annotation Class<?> sqlObjectType){ Configurer delegate=new RegisterConstructorMapperImpl(); RegisterConstructorMappers registerConstructorMappers=(RegisterConstructorMappers)annotation; Stream.of
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\config\internal\RegisterConstructorMapperImpl.java,configureForMethod,@Override public void  (ConfigRegistry registry Annotation annotation Class<?> sqlObjectType Method method){ configureForType(registry annotation sqlObjectType); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\config\internal\RegisterConstructorMapperImpl.java,configureForType,@Override public void  (ConfigRegistry registry Annotation annotation Class<?> sqlObjectType){ RegisterConstructorMapper registerConstructorMapper=(RegisterConstructorMapper)annotation; RowMappers mappers=registry.get(RowMappers.class); Class<?> type=regi
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\config\internal\RegisterColumnMappersImpl.java,configureForMethod,@Override public void  (ConfigRegistry registry Annotation annotation Class<?> sqlObjectType Method method){ configureForType(registry annotation sqlObjectType); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\config\internal\RegisterColumnMappersImpl.java,configureForType,@Override public void  (ConfigRegistry registry Annotation annotation Class<?> sqlObjectType){ Configurer delegate=new RegisterColumnMapperImpl(); RegisterColumnMappers registerColumnMappers=(RegisterColumnMappers)annotation; Stream.of(registerColumnMappe
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\config\internal\RegisterFieldMapperImpl.java,configureForMethod,@Override public void  (ConfigRegistry registry Annotation annotation Class<?> sqlObjectType Method method){ configureForType(registry annotation sqlObjectType); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\config\internal\RegisterFieldMapperImpl.java,configureForType,@Override public void  (ConfigRegistry registry Annotation annotation Class<?> sqlObjectType){ RegisterFieldMapper registerFieldMapper=(RegisterFieldMapper)annotation; Class<?> type=registerFieldMapper.value(); String prefix=registerFieldMapper.prefix(); 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\config\internal\RegisterFieldMappersImpl.java,configureForMethod,@Override public void  (ConfigRegistry registry Annotation annotation Class<?> sqlObjectType Method method){ configureForType(registry annotation sqlObjectType); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\config\internal\RegisterFieldMappersImpl.java,configureForType,@Override public void  (ConfigRegistry registry Annotation annotation Class<?> sqlObjectType){ Configurer delegate=new RegisterFieldMapperImpl(); RegisterFieldMappers registerFieldMappers=(RegisterFieldMappers)annotation; Stream.of(registerFieldMappers.va
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\config\internal\RegisterObjectArgumentFactoriesImpl.java,configureForMethod,@Override public void  (ConfigRegistry registry Annotation annotation Class<?> sqlObjectType Method method){ configureForType(registry annotation sqlObjectType); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\config\internal\RegisterObjectArgumentFactoriesImpl.java,configureForType,@Override public void  (ConfigRegistry registry Annotation annotation Class<?> sqlObjectType){ Configurer delegate=new RegisterObjectArgumentFactoryImpl(); RegisterObjectArgumentFactories registerObjectArgumentFactories=(RegisterObjectArgumentFactories)an
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\config\internal\RegisterRowMapperFactoriesImpl.java,configureForMethod,@Override public void  (ConfigRegistry registry Annotation annotation Class<?> sqlObjectType Method method){ configureForType(registry annotation sqlObjectType); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\config\internal\RegisterRowMapperFactoriesImpl.java,configureForType,@Override public void  (ConfigRegistry registry Annotation annotation Class<?> sqlObjectType){ Configurer delegate=new RegisterRowMapperFactoryImpl(); RegisterRowMapperFactories registerRowMapperFactories=(RegisterRowMapperFactories)annotation; Stream.of(
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\config\internal\RegisterObjectArgumentFactoryImpl.java,configureForMethod,@Override public void  (ConfigRegistry registry Annotation annotation Class<?> sqlObjectType Method method){ configureForType(registry annotation sqlObjectType); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\config\internal\RegisterObjectArgumentFactoryImpl.java,configureForType,@Override public void  (ConfigRegistry registry Annotation annotation Class<?> sqlObjectType){ RegisterObjectArgumentFactory registerObjectArgumentFactory=(RegisterObjectArgumentFactory)annotation; Arguments arguments=registry.get(Arguments.class); Class<
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\config\internal\RegisterJoinRowMapperImpl.java,configureForMethod,@Override public void  (ConfigRegistry registry Annotation annotation Class<?> sqlObjectType Method method){ configureForType(registry annotation sqlObjectType); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\config\internal\RegisterJoinRowMapperImpl.java,configureForType,@Override public void  (ConfigRegistry registry Annotation annotation Class<?> sqlObjectType){ RegisterJoinRowMapper registerJoinRowMapper=(RegisterJoinRowMapper)annotation; registry.get(RowMappers.class).register(JoinRowMapper.forTypes(registerJoinRowMap
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\config\internal\RegisterRowMapperImpl.java,configureForMethod,@Override public void  (ConfigRegistry registry Annotation annotation Class<?> sqlObjectType Method method){ configureForType(registry annotation sqlObjectType); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\config\internal\RegisterRowMapperImpl.java,configureForType,@Override public void  (ConfigRegistry registry Annotation annotation Class<?> sqlObjectType){ RegisterRowMapper registerRowMapper=(RegisterRowMapper)annotation; try { registry.get(RowMappers.class).register(registerRowMapper.value().newInstance()); } cat
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\config\internal\RegisterRowMappersImpl.java,configureForMethod,@Override public void  (ConfigRegistry registry Annotation annotation Class<?> sqlObjectType Method method){ configureForType(registry annotation sqlObjectType); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\config\internal\RegisterRowMappersImpl.java,configureForType,@Override public void  (ConfigRegistry registry Annotation annotation Class<?> sqlObjectType){ Configurer delegate=new RegisterRowMapperImpl(); RegisterRowMappers registerRowMappers=(RegisterRowMappers)annotation; Stream.of(registerRowMappers.value()).for
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\config\internal\RegisterRowMapperFactoryImpl.java,configureForMethod,@Override public void  (ConfigRegistry registry Annotation annotation Class<?> sqlObjectType Method method){ configureForType(registry annotation sqlObjectType); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\config\internal\RegisterRowMapperFactoryImpl.java,configureForType,@Override public void  (ConfigRegistry registry Annotation annotation Class<?> sqlObjectType){ RegisterRowMapperFactory registerRowMapperFactory=(RegisterRowMapperFactory)annotation; RowMappers mappers=registry.get(RowMappers.class); try { mappers.registe
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\config\internal\UseSqlParserImpl.java,configureForMethod,@Override public void  (ConfigRegistry registry Annotation annotation Class<?> sqlObjectType Method method){ UseSqlParser anno=(UseSqlParser)annotation; try { final SqlParser parser=instantiate(anno.value() sqlObjectType method); registry.get(SqlStatement
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\config\internal\UseSqlParserImpl.java,configureForType,@Override public void  (ConfigRegistry registry Annotation annotation Class<?> sqlObjectType){ UseSqlParser anno=(UseSqlParser)annotation; try { final SqlParser parser=instantiate(anno.value() sqlObjectType null); registry.get(SqlStatements.class).setSqlP
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\config\internal\UseSqlParserImpl.java,instantiate,"private SqlParser  (Class<? extends SqlParser> value Class<?> sqlObjectType Method m) throws Exception { try { Constructor<? extends SqlParser> no_arg=value.getConstructor(); return no_arg.newInstance(); } catch ( NoSuchMethodException e) { try { Constructor<? extends SqlParser> class_arg=value.getConstructor(Class.class); return class_arg.newInstance(sqlObjectType); } catch ( NoSuchMethodException e1) { if (m != null) { Constructor<? extends SqlParser> c_m_arg=value.getConstructor(Class.class Method.class); return c_m_arg.newInstance(sqlObjectType m); } throw new IllegalStateException(""Unable to instantiate  no viable constructor "" + value.getName()); } } } "
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\config\internal\ValueColumnImpl.java,configureForMethod,@Override public void  (ConfigRegistry registry Annotation annotation Class<?> sqlObjectType Method method){ ValueColumn valueColumn=(ValueColumn)annotation; String name=valueColumn.value(); registry.get(MapEntryMappers.class).setValueColumn(name.isEmpty(
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\config\internal\UseTemplateEngineImpl.java,configureForMethod,@Override public void  (ConfigRegistry registry Annotation annotation Class<?> sqlObjectType Method method){ UseTemplateEngine anno=(UseTemplateEngine)annotation; try { final TemplateEngine templateEngine=instantiate(anno.value() sqlObjectType method); re
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\config\internal\UseTemplateEngineImpl.java,configureForType,@Override public void  (ConfigRegistry registry Annotation annotation Class<?> sqlObjectType){ UseTemplateEngine anno=(UseTemplateEngine)annotation; try { final TemplateEngine templateEngine=instantiate(anno.value() sqlObjectType null); registry.get(SqlSt
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\config\internal\UseTemplateEngineImpl.java,instantiate,"private TemplateEngine  (Class<? extends TemplateEngine> value Class<?> sqlObjectType Method m) throws Exception { try { Constructor<? extends TemplateEngine> no_arg=value.getConstructor(); return no_arg.newInstance(); } catch ( NoSuchMethodException e) { try { Constructor<? extends TemplateEngine> class_arg=value.getConstructor(Class.class); return class_arg.newInstance(sqlObjectType); } catch ( NoSuchMethodException e1) { if (m != null) { Constructor<? extends TemplateEngine> c_m_arg=value.getConstructor(Class.class Method.class); return c_m_arg.newInstance(sqlObjectType m); } throw new IllegalStateException(""Unable to instantiate  no viable constructor "" + value.getName()); } } } "
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\customizer\internal\BindBeanListFactory.java,createForParameter,@Override public SqlStatementParameterCustomizer  (Annotation annotation Class<?> sqlObjectType Method method Parameter param int index Type type){ final BindBeanList bindBeanList=(BindBeanList)annotation; final String name=ParameterUtil.findParameterName
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\customizer\internal\BindFieldsFactory.java,createForParameter,@Override public SqlStatementParameterCustomizer  (Annotation annotation Class<?> sqlObjectType Method method Parameter param int index Type type){ BindFields bind=(BindFields)annotation; return (stmt bean) -> { String prefix=bind.value(); if (prefix.isEm
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\customizer\internal\BindBeanFactory.java,createForParameter,@Override public SqlStatementParameterCustomizer  (Annotation annotation Class<?> sqlObjectType Method method Parameter param int index Type type){ BindBean bind=(BindBean)annotation; return (stmt bean) -> { String prefix=bind.value(); if (prefix.isEmpty(
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\customizer\internal\BindFactory.java,createForParameter,@Override public SqlStatementParameterCustomizer  (Annotation annotation Class<?> sqlObjectType Method method Parameter param int index Type type){ Bind b=(Bind)annotation; String nameFromAnnotation=b == null ? Bind.NO_VALUE : b.value(); Optional<String> 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\customizer\internal\BindListFactory.java,createForParameter,@Override public SqlStatementParameterCustomizer  (Annotation annotation Class<?> sqlObjectType Method method Parameter param int index Type type){ final BindList bindList=(BindList)annotation; final String name=ParameterUtil.findParameterName(bindList.va
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\customizer\internal\BindMapFactory.java,createForParameter,@Override public SqlStatementParameterCustomizer  (Annotation a Class<?> sqlObjectType Method method Parameter param int index Type type){ BindMap annotation=(BindMap)a; List<String> keys=Arrays.asList(annotation.keys()); String prefix=annotation.value().
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\customizer\internal\BindMethodsFactory.java,createForParameter,@Override public SqlStatementParameterCustomizer  (Annotation annotation Class<?> sqlObjectType Method method Parameter param int index Type type){ return (stmt bean) -> { final String prefix=((BindMethods)annotation).value(); if (prefix.isEmpty()) { stmt
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\customizer\internal\DefineFactory.java,createForParameter,@Override public SqlStatementParameterCustomizer  (Annotation annotation Class<?> sqlObjectType Method method Parameter param int index Type type){ Define define=(Define)annotation; final String name=ParameterUtil.findParameterName(define.value() param).o
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\customizer\internal\DefineListFactory.java,createForParameter,@Override public SqlStatementParameterCustomizer  (Annotation annotation Class<?> sqlObjectType Method method Parameter param int index Type type){ final DefineList d=(DefineList)annotation; final String name=ParameterUtil.findParameterName(d.value() para
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\customizer\internal\FetchSizeFactory.java,createForMethod,@Override public SqlStatementCustomizer  (Annotation annotation Class<?> sqlObjectType Method method){ return createForType(annotation sqlObjectType); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\customizer\internal\FetchSizeFactory.java,createForParameter,@Override public SqlStatementParameterCustomizer  (Annotation annotation Class<?> sqlObjectType Method method Parameter param int index Type type){ return (stmt fetchSize) -> ((Query)stmt).setFetchSize((Integer)fetchSize); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\customizer\internal\FetchSizeFactory.java,createForType,@Override public SqlStatementCustomizer  (Annotation annotation Class<?> sqlObjectType){ int fetchSize=((FetchSize)annotation).value(); return stmt -> ((Query)stmt).setFetchSize(fetchSize); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\customizer\internal\OutParameterListFactory.java,createForMethod,@Override public SqlStatementCustomizer  (Annotation annotation Class<?> sqlObjectType Method method){ final OutParameterList outParams=(OutParameterList)annotation; return stmt -> { Call call=(Call)stmt; for ( OutParameter outParam : outParams.value()) {
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\customizer\internal\MaxRowsFactory.java,createForMethod,@Override public SqlStatementCustomizer  (Annotation annotation Class<?> sqlObjectType Method method){ return createForType(annotation sqlObjectType); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\customizer\internal\MaxRowsFactory.java,createForParameter,@Override public SqlStatementParameterCustomizer  (Annotation annotation Class<?> sqlObjectType Method method Parameter param int index Type type){ return (stmt maxRows) -> ((Query)stmt).setMaxRows((Integer)maxRows); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\customizer\internal\MaxRowsFactory.java,createForType,@Override public SqlStatementCustomizer  (Annotation annotation Class<?> sqlObjectType){ final int maxRows=((MaxRows)annotation).value(); return stmt -> ((Query)stmt).setMaxRows(maxRows); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\customizer\internal\QueryTimeOutFactory.java,createForMethod,@Override public SqlStatementCustomizer  (Annotation annotation Class<?> sqlObjectType Method method){ return createForType(annotation sqlObjectType); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\customizer\internal\QueryTimeOutFactory.java,createForParameter,@Override public SqlStatementParameterCustomizer  (Annotation annotation Class<?> sqlObjectType Method method Parameter param int index Type type){ return (stmt queryTimeout) -> stmt.setQueryTimeout((Integer)queryTimeout); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\customizer\internal\QueryTimeOutFactory.java,createForType,@Override public SqlStatementCustomizer  (Annotation annotation Class<?> sqlObjectType){ int queryTimeout=((QueryTimeOut)annotation).value(); return stmt -> stmt.setQueryTimeout(queryTimeout); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\customizer\internal\TimestampedFactory.java,createForMethod,@Override public SqlStatementCustomizer  (Annotation annotation Class<?> sqlObjectType Method method){ final String parameterName=((Timestamped)annotation).value(); return stmt -> stmt.bind(parameterName OffsetDateTime.now()); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\customizer\internal\OutParameterFactory.java,createForMethod,@Override public SqlStatementCustomizer  (Annotation annotation Class<?> sqlObjectType Method method){ final OutParameter outParam=(OutParameter)annotation; return stmt -> ((Call)stmt).registerOutParameter(outParam.name() outParam.sqlType()); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\customizer\SqlStatementCustomizerFactory.java,createForMethod,"default SqlStatementCustomizer  (Annotation annotation Class<?> sqlObjectType Method method){ throw new UnsupportedOperationException(""Not supported for method""); } "
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\customizer\SqlStatementCustomizerFactory.java,createForParameter,"default SqlStatementParameterCustomizer  (Annotation annotation Class<?> sqlObjectType Method method Parameter param int index Type paramType){ throw new UnsupportedOperationException(""Not supported for parameter""); } "
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\customizer\SqlStatementCustomizerFactory.java,createForType,"default SqlStatementCustomizer  (Annotation annotation Class<?> sqlObjectType){ throw new UnsupportedOperationException(""Not supported for type""); } "
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\DefaultMethodHandler.java,DefaultMethodHandler, (Method method){ try { Class<?> declaringClass=method.getDeclaringClass(); methodHandle=lookupFor(declaringClass).unreflectSpecial(method declaringClass); } catch ( ReflectiveOperationException e) { throw new RuntimeException(e); } } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\DefaultMethodHandler.java,invoke,@Override public Object  (Object target Object[] args HandleSupplier handle){ try { return methodHandle.bindTo(target).invokeWithArguments(args); } catch ( RuntimeException|Error e) { throw e; } catch ( Throwable throwable) { throw new RuntimeException(th
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\DefaultMethodHandler.java,lookupFor,"private static MethodHandles.Lookup  (Class<?> clazz){ if (PRIVATE_LOOKUP_IN != null) { try { return (MethodHandles.Lookup)PRIVATE_LOOKUP_IN.invoke(null clazz MethodHandles.lookup()); } catch ( IllegalAccessException|InvocationTargetException e) { String message=String.format(""Error invoking MethodHandles.privateLookupIn(%s.class  MethodHandles.lookup()) in JDK 9+ runtime"" clazz); throw new RuntimeException(message e); } } return privateLookups.computeIfAbsent(clazz type -> { try { final Constructor<MethodHandles.Lookup> constructor=MethodHandles.Lookup.class.getDeclaredConstructor(Class.class int.class); if (!constructor.isAccessible()) { constructor.setAccessible(true); } return constructor.newInstance(type MethodHandles.Lookup.PUBLIC | MethodHandles.Lookup.PRIVATE | MethodHandles.Lookup.PROTECTED| MethodHandles.Lookup.PACKAGE); } catch ( ReflectiveOperationException e) { throw new RuntimeException(e); } } ); } "
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\DefaultMethodHandler.java,privateLookupIn,"private static Method  (){ try { return MethodHandles.class.getMethod(""privateLookupIn"" Class.class MethodHandles.Lookup.class); } catch ( NoSuchMethodException e) { return null; } } "
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\HandlerDecorators.java,HandlerDecorators,private  (HandlerDecorators that){ decorators.addAll(that.decorators); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\HandlerDecorators.java,applyDecorators,public Handler  (Handler base Class<?> sqlObjectType Method method){ Handler handler=base; for ( HandlerDecorator decorator : decorators) { handler=decorator.decorateHandler(handler sqlObjectType method); } return handler; } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\HandlerDecorators.java,createCopy,@Override public HandlerDecorators  (){ return new HandlerDecorators(this); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\HandlerDecorators.java,register,public HandlerDecorators  (HandlerDecorator decorator){ decorators.add(decorator); return this; } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\internal\CreateSqlObjectHandler.java,CreateSqlObjectHandler,public  (Method method){ this.method=method; } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\internal\CreateSqlObjectHandler.java,invoke,"@Override public Object  (Object target Object[] args HandleSupplier handle) throws Exception { return handle.getConfig(Extensions.class).findFactory(SqlObjectFactory.class).orElseThrow(() -> new IllegalStateException(""Can't locate SqlObject factory"")).at"
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\internal\ParameterUtil.java,findParameterName,public static Optional<String>  (String nameFromAnnotation Parameter parameter){ if (!nameFromAnnotation.isEmpty()) { return Optional.of(nameFromAnnotation); } return parameter.isNamePresent() ? Optional.of(parameter.getName()) : Optional.empty(); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\Handlers.java,Handlers,private  (Handlers that){ factories.addAll(that.factories); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\Handlers.java,createCopy,@Override public Handlers  (){ return new Handlers(this); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\Handlers.java,findFor,public Optional<Handler>  (Class<?> sqlObjectType Method method){ return factories.stream().flatMap(factory -> toStream(factory.buildHandler(sqlObjectType method))).findFirst(); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\Handlers.java,register,public Handlers  (HandlerFactory factory){ factories.add(0 factory); return this; } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\internal\SqlAnnotations.java,findScripts,"private static Optional<String>  (Method method Function<String String> resolveSql){ final SqlScripts scripts=method.getAnnotation(SqlScripts.class); if (scripts != null) { return Optional.of(Arrays.stream(scripts.value()).map(s -> scriptValue(s method)).map(resolveSql).collect(Collectors.joining("" ; ""))); } final SqlScript script=method.getAnnotation(SqlScript.class); if (script != null) { return Optional.of(resolveSql.apply(scriptValue(script method))); } return Optional.empty(); } "
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\internal\SqlAnnotations.java,getAnnotationValue,public static Optional<String>  (Method method Function<String String> resolveSql){ Predicate<String> nonEmpty=s -> !s.isEmpty(); return JdbiOptionals.findFirstPresent(() -> Optional.ofNullable(method.getAnnotation(SqlBatch.class)).map(SqlBatch::value).map(resolveSql).filter(nonEmpty) () -> Optional.ofNullable(method.getAnnotation(SqlCall.class)).map(SqlCall::value).map(resolveSql).filter(nonEmpty) () -> Optional.ofNullable(method.getAnnotation(SqlQuery.class)).map(SqlQuery::value).map(resolveSql).filter(nonEmpty) () -> Optional.ofNullable(method.getAnnotation(SqlUpdate.class)).map(SqlUpdate::value).map(resolveSql).filter(nonEmpty) () -> findScripts(method resolveSql)); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\internal\SqlAnnotations.java,scriptValue,private static String  (SqlScript script Method method){ return !script.value().isEmpty() ? script.value() : method.getName(); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\locator\AnnotationSqlLocator.java,locate,"@Override public String  (Class<?> sqlObjectType Method method ConfigRegistry config){ return SqlAnnotations.getAnnotationValue(method sql -> sql).orElseThrow(() -> new IllegalStateException(""Sql annotation missing query"")); } "
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\locator\internal\UseAnnotationSqlLocatorImpl.java,configureForMethod,@Override public void  (ConfigRegistry registry Annotation annotation Class<?> sqlObjectType Method method){ configureForType(registry annotation sqlObjectType); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\locator\internal\UseAnnotationSqlLocatorImpl.java,configureForType,@Override public void  (ConfigRegistry registry Annotation annotation Class<?> sqlObjectType){ registry.get(SqlObjects.class).setSqlLocator(new AnnotationSqlLocator()); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\locator\internal\UseClasspathSqlLocatorImpl.java,configureForMethod,@Override public void  (ConfigRegistry registry Annotation annotation Class<?> sqlObjectType Method method){ configureForType(registry annotation sqlObjectType); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\locator\internal\UseClasspathSqlLocatorImpl.java,configureForType,@Override public void  (ConfigRegistry registry Annotation annotation Class<?> sqlObjectType){ registry.get(SqlObjects.class).setSqlLocator(SQL_LOCATOR); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\locator\internal\UseClasspathSqlLocatorImpl.java,defaultName,private static String  (String name Method method){ return !name.isEmpty() ? name : method.getName(); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\SqlMethodAnnotatedHandlerDecorator.java,buildDecorator,"private static HandlerDecorator  (Class<? extends HandlerDecorator> decoratorClass){ try { return decoratorClass.getConstructor().newInstance(); } catch ( ReflectiveOperationException e) { throw new IllegalStateException(""Decorator class "" + decoratorClass + ""cannot be instantiated"" e); } } "
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\SqlMethodAnnotatedHandlerDecorator.java,createDecoratorComparator,private Comparator<Class<? extends Annotation>>  (DecoratorOrder order){ List<Class<? extends Annotation>> ordering=Arrays.asList(order.value()); return Comparator.comparingInt(type -> { int index=ordering.indexOf(type); return index == -1 ? ordering.size() : index; } ); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\SqlMethodAnnotatedHandlerDecorator.java,decorateHandler,@Override public Handler  (Handler base Class<?> sqlObjectType Method method){ Handler handler=base; List<Class<? extends Annotation>> annotationTypes=Stream.of(method.getAnnotations()).map(Annotation::annotationType).filter(type -> type.isAnnotationPrese
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\SqlMethodHandlerFactory.java,buildHandler,"private Handler  (Class<? extends Handler> handlerType Class<?> sqlObjectType Method method){ try { return handlerType.getConstructor(Class.class Method.class).newInstance(sqlObjectType method); } catch ( InvocationTargetException e) { throw toUnchecked(e.getCause()); } catch ( ReflectiveOperationException e) { } try { return handlerType.getConstructor(Method.class).newInstance(method); } catch ( InvocationTargetException e) { throw toUnchecked(e.getCause()); } catch ( ReflectiveOperationException e) { } try { return handlerType.getConstructor().newInstance(); } catch ( InvocationTargetException e) { throw toUnchecked(e.getCause()); } catch ( ReflectiveOperationException e) { throw new IllegalStateException(""Handler class "" + handlerType + "" cannot be instantiated. ""+ ""Expected a constructor with parameters (Class  Method)  (Method)  or ()."" e); } } "
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\SqlMethodHandlerFactory.java,toUnchecked,private RuntimeException  (Throwable t){ if (t instanceof RuntimeException) { return (RuntimeException)t; } return new RuntimeException(t); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\SqlObjectPlugin.java,customizeJdbi,@Override public void  (Jdbi db){ db.registerExtension(new SqlObjectFactory()); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\DefaultMethodHandlerFactory.java,buildHandler,@Override public Optional<Handler>  (Class<?> sqlObjectType Method method){ if (!method.isDefault()) { return Optional.empty(); } Stream.of(method.getAnnotations()).map(Annotation::annotationType).filter(type -> type.isAnnotationPresent(SqlStatementCustom
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\SqlObjects.java,SqlObjects,private  (SqlObjects that){ sqlLocator=that.sqlLocator; defaultParameterCustomizerFactory=that.defaultParameterCustomizerFactory; } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\SqlObjects.java,createCopy,@Override public SqlObjects  (){ return new SqlObjects(this); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\SqlObjects.java,getDefaultParameterCustomizerFactory,public ParameterCustomizerFactory  (){ return defaultParameterCustomizerFactory; } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\SqlObjects.java,getSqlLocator,public SqlLocator  (){ return sqlLocator; } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\SqlObjects.java,setDefaultParameterCustomizerFactory,public SqlObjects  (ParameterCustomizerFactory defaultParameterCustomizerFactory){ this.defaultParameterCustomizerFactory=defaultParameterCustomizerFactory; return this; } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\SqlObjects.java,setSqlLocator,public SqlObjects  (SqlLocator sqlLocator){ this.sqlLocator=Objects.requireNonNull(sqlLocator); return this; } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\statement\BindParameterCustomizerFactory.java,createForParameter,@Override public SqlStatementParameterCustomizer  (Class<?> sqlObjectType Method method Parameter param int index Type type){ return bindSqlStatementCustomizerFactory.createForParameter(null sqlObjectType method param index type); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\SqlObjectFactory.java,accepts,"@Override public boolean  (Class<?> extensionType){ if (looksLikeSqlObject(extensionType)) { if (!extensionType.isInterface()) { throw new IllegalArgumentException(""SQL Objects are only supported for interfaces.""); } return true; } return false; } "
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\SqlObjectFactory.java,attach,@Override public <E>E  (Class<E> extensionType HandleSupplier handle){ Map<Method Handler> handlers=methodHandlersFor(extensionType handle.getConfig(Handlers.class) handle.getConfig(HandlerDecorators.class)); ConfigRegistry instanceConfig=handle.getConfig
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\SqlObjectFactory.java,buildMethodHandler,"private Handler  (Class<?> sqlObjectType Method method Handlers handlers HandlerDecorators decorators){ Handler handler=handlers.findFor(sqlObjectType method).orElseThrow(() -> new IllegalStateException(String.format(""Method %s.%s must be default or be annotated with a SQL method annotation."" sqlObjectType.getSimpleName() method.getName()))); return decorators.applyDecorators(handler sqlObjectType method); } "
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\SqlObjectFactory.java,createInvocationHandler,private InvocationHandler  (Class<?> sqlObjectType ConfigRegistry instanceConfig Map<Method Handler> handlers HandleSupplier handle){ return (proxy method args) -> { Handler handler=handlers.get(method); ConfigRegistry methodConfig=instanceConfig.createCopy(); forEachConfigurer(method (configurer annotation) -> configurer.configureForMethod(methodConfig annotation sqlObjectType method)); return handle.invokeInContext(new ExtensionMethod(sqlObjectType method) methodConfig () -> handler.invoke(proxy args == null ? NO_ARGS : args handle)); } ; } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\SqlObjectFactory.java,forEachConfigurer,private void  (AnnotatedElement element BiConsumer<Configurer Annotation> consumer){ Stream.of(element.getAnnotations()).filter(a -> a.annotationType().isAnnotationPresent(ConfiguringAnnotation.class)).forEach(a -> { ConfiguringAnnotation meta=a.annotationType().getAnnotation(ConfiguringAnnotation.class); consumer.accept(getConfigurer(meta.value()) a); } ); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\SqlObjectFactory.java,getConfigurer,"private Configurer  (Class<? extends Configurer> factoryClass){ return configurers.computeIfAbsent(factoryClass c -> { try { return c.newInstance(); } catch ( InstantiationException|IllegalAccessException e) { throw new IllegalStateException(""Unable to instantiate configurer factory class "" + factoryClass e); } } ); } "
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\SqlObjectFactory.java,handlerEntry,"private static Map<Method Handler>  (Handler handler Class<?> klass String methodName Class<?>... parameterTypes){ try { return Collections.singletonMap(klass.getMethod(methodName parameterTypes) handler); } catch ( NoSuchMethodException|SecurityException e) { throw new IllegalStateException(String.format(""can't find %s#%s%s"" klass.getName() methodName Arrays.asList(parameterTypes)) e); } } "
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\SqlObjectFactory.java,looksLikeSqlObject,private boolean  (Class<?> extensionType){ if (SqlObject.class.isAssignableFrom(extensionType)) { return true; } return Stream.of(extensionType.getMethods()).flatMap(m -> Stream.of(m.getAnnotations())).anyMatch(a -> a.annotationType().isAnnotationPresent(SqlOperation.class)); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\SqlObjectFactory.java,methodHandlersFor,"private Map<Method Handler>  (Class<?> sqlObjectType Handlers registry HandlerDecorators decorators){ return handlersCache.computeIfAbsent(sqlObjectType type -> { final Map<Method Handler> handlers=new HashMap<>(); handlers.putAll(handlerEntry((t a h) -> sqlObjectType.getName() + '@' + Integer.toHexString(t.hashCode()) Object.class ""toString"")); handlers.putAll(handlerEntry((t a h) -> t == a[0] Object.class ""equals"" Object.class)); handlers.putAll(handlerEntry((t a h) -> System.identityHashCode(t) Object.class ""hashCode"")); handlers.putAll(handlerEntry((t a h) -> h.getHandle() SqlObject.class ""getHandle"")); try { handlers.putAll(handlerEntry((t a h) -> null sqlObjectType ""finalize"")); } catch ( IllegalStateException expected) { } for ( Method method : sqlObjectType.getMethods()) { handlers.computeIfAbsent(method m -> buildMethodHandler(sqlObjectType m registry decorators)); } return handlers; } ); } "
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\statement\internal\MapToFactory.java,createForParameter,@Override public SqlStatementParameterCustomizer  (Annotation annotation Class<?> sqlObjectType Method method Parameter param int index Type type){ return (stmt arg) -> { final Type typeArg; if (arg instanceof GenericType) { typeArg=((GenericType<?>)arg).
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\statement\internal\SqlCallHandler.java,SqlCallHandler,"public  (Class<?> sqlObjectType Method method){ super(sqlObjectType method); Type returnType=GenericTypes.resolveType(method.getGenericReturnType() sqlObjectType); Class<?> returnClass=GenericTypes.getErasedType(returnType); if (Void.TYPE.equals(returnClass)) { returnOutParams=false; } else if (OutParameters.class.isAssignableFrom(returnClass)) { returnOutParams=true; } else { throw new IllegalArgumentException(""@SqlCall methods may only return null or OutParameters at present""); } } "
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\statement\internal\SqlCallHandler.java,configureReturner,@Override void  (Call c SqlObjectStatementConfiguration cfg){ cfg.setReturner(() -> { OutParameters ou=c.invoke(); if (returnOutParams) { return ou; } else { return null; } } ); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\statement\internal\SqlCallHandler.java,createStatement,@Override Call  (Handle handle String locatedSql){ return handle.createCall(locatedSql); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\statement\internal\ResultReturner.java,CollectedResultReturner, (Type returnType){ this.returnType=returnType; } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\statement\internal\ResultReturner.java,ConsumerResultReturner, (Method method int consumerIndex){ this.consumerIndex=consumerIndex; elementType=method.getGenericParameterTypes()[consumerIndex]; } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\statement\internal\ResultReturner.java,IteratorReturner," (Type returnType){ this.elementType=GenericTypes.findGenericParameter(returnType Iterator.class).orElseThrow(() -> new IllegalStateException(""Cannot reflect Iterator<T> element type T in method return type "" + returnType)); } "
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\statement\internal\ResultReturner.java,ResultIterableReturner," (Type returnType){ elementType=GenericTypes.findGenericParameter(returnType ResultIterable.class).orElseThrow(() -> new IllegalStateException(""Cannot reflect ResultIterable<T> element type T in method return type "" + returnType)); } "
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\statement\internal\ResultReturner.java,ResultIteratorReturner," (Type returnType){ this.elementType=GenericTypes.findGenericParameter(returnType Iterator.class).orElseThrow(() -> new IllegalStateException(""Cannot reflect ResultIterator<T> element type T in method return type "" + returnType)); } "
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\statement\internal\ResultReturner.java,SingleValueReturner, (Type returnType){ this.returnType=returnType; } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\statement\internal\ResultReturner.java,StreamReturner," (Type returnType){ elementType=GenericTypes.findGenericParameter(returnType Stream.class).orElseThrow(() -> new IllegalStateException(""Cannot reflect Stream<T> element type T in method return type "" + returnType)); } "
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\statement\internal\ResultReturner.java,checkResult,"private static Object  (Object result Type type){ if (result == null && getErasedType(type).isPrimitive()) { throw new IllegalStateException(""SQL method returns primitive "" + type + ""  but statement returned no results""); } return result; } "
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\statement\internal\ResultReturner.java,elementType,@Override protected Type  (StatementContext ctx){ return elementType; } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\statement\internal\ResultReturner.java,findConsumer,static Optional<ResultReturner>  (Class<?> extensionType Method method){ final Class<?>[] paramTypes=method.getParameterTypes(); for (int i=0; i < paramTypes.length; i++) { if (paramTypes[i] == Consumer.class) { return Optional.of(new ConsumerResultReturner(method i)); } } return Optional.empty(); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\statement\internal\ResultReturner.java,forMethod,"static ResultReturner  (Class<?> extensionType Method method){ Type returnType=GenericTypes.resolveType(method.getGenericReturnType() extensionType); Class<?> returnClass=getErasedType(returnType); if (Void.TYPE.equals(returnClass)) { return findConsumer(extensionType method).orElseThrow(() -> new IllegalStateException(String.format(""Method %s#%s is annotated as if it should return a value  but the method is void."" method.getDeclaringClass().getName() method.getName()))); } else if (ResultIterable.class.equals(returnClass)) { return new ResultIterableReturner(returnType); } else if (Stream.class.equals(returnClass)) { return new StreamReturner(returnType); } else if (ResultIterator.class.equals(returnClass)) { return new ResultIteratorReturner(returnType); } else if (Iterator.class.equals(returnClass)) { return new IteratorReturner(returnType); } else if (method.isAnnotationPresent(SingleValue.class)) { return new SingleValueReturner(returnType); } else { return new CollectedResultReturner(returnType); } } "
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\statement\internal\ResultReturner.java,forOptionalReturn,static ResultReturner  (Class<?> extensionType Method method){ if (method.getReturnType() == void.class) { return new VoidReturner(); } return forMethod(extensionType method); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\statement\internal\ResultReturner.java,mappedResult,"@Override protected Void  (ResultIterable<?> iterable StatementContext ctx){ @SuppressWarnings(""unchecked"") Consumer<Object> consumer=(Consumer<Object>)ctx.getConfig(SqlObjectStatementConfiguration.class).getArgs()[consumerIndex]; iterable.forEach(consume"
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\statement\internal\ResultReturner.java,reducedResult,"@Override protected Void  (Stream<?> stream StatementContext ctx){ @SuppressWarnings(""unchecked"") Consumer<Object> consumer=(Consumer<Object>)ctx.getConfig(SqlObjectStatementConfiguration.class).getArgs()[consumerIndex]; stream.forEach(consumer); return n"
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\statement\internal\SqlObjectStatementConfiguration.java,SqlObjectStatementConfiguration,private  (SqlObjectStatementConfiguration other){ this.returner=other.returner; this.args=other.args; } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\statement\internal\SqlObjectStatementConfiguration.java,createCopy,@Override public SqlObjectStatementConfiguration  (){ return new SqlObjectStatementConfiguration(this); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\statement\internal\SqlObjectStatementConfiguration.java,getArgs,Object[]  (){ return args; } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\statement\internal\SqlObjectStatementConfiguration.java,getReturner,Supplier<Object>  (){ return returner; } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\statement\internal\SqlObjectStatementConfiguration.java,setArgs,void  (Object[] args){ this.args=args; } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\statement\internal\SqlObjectStatementConfiguration.java,setReturner,void  (Supplier<Object> returner){ this.returner=returner; } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\statement\internal\SqlBatchHandler.java,ConstantChunkSizeFunction, (int value){ this.value=value; } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\statement\internal\SqlBatchHandler.java,ParamBasedChunkSizeFunction, (int index){ this.index=index; } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\statement\internal\SqlBatchHandler.java,SqlBatchHandler,"public  (Class<?> sqlObjectType Method method){ super(sqlObjectType method); if (method.isAnnotationPresent(UseRowReducer.class)) { throw new UnsupportedOperationException(""Cannot declare @UseRowReducer on a @SqlUpdate method.""); } this.sqlBatch=method.getAnnotation(SqlBatch.class); this.batchChunkSize=determineBatchChunkSize(sqlObjectType method); final GetGeneratedKeys getGeneratedKeys=method.getAnnotation(GetGeneratedKeys.class); if (getGeneratedKeys == null) { if (!returnTypeIsValid(method.getReturnType())) { throw new UnableToCreateSqlObjectException(invalidReturnTypeMessage(method)); } Function<PreparedBatch ResultIterator<?>> modCounts=PreparedBatch::executeAndGetModCount; batchIntermediate=method.getReturnType().equals(boolean[].class) ? mapToBoolean(modCounts) : modCounts; magic=ResultReturner.forOptionalReturn(sqlObjectType method); } else { String[] columnNames=getGeneratedKeys.value(); magic=ResultReturner.forMethod(sqlObjectType method); if (method.isAnnotationPresent(UseRowMapper.class)) { RowMapper<?> mapper=rowMapperFor(method.getAnnotation(UseRowMapper.class)); batchIntermediate=batch -> batch.executeAndReturnGeneratedKeys(columnNames).map(mapper).iterator(); } else { batchIntermediate=batch -> batch.executeAndReturnGeneratedKeys(columnNames).mapTo(magic.elementType(batch.getContext())).iterator(); } } } "
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\statement\internal\SqlBatchHandler.java,call,@Override public int  (Object[] args){ return (Integer)args[index]; } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\statement\internal\SqlBatchHandler.java,createStatement,@Override PreparedBatch  (Handle handle String locatedSql){ return handle.prepareBatch(locatedSql); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\statement\internal\SqlBatchHandler.java,determineBatchChunkSize,"private SqlBatchHandler.ChunkSizeFunction  (Class<?> sqlObjectType Method method){ int batchChunkSizeParameterIndex; if ((batchChunkSizeParameterIndex=indexOfBatchChunkSizeParameter(method)) >= 0) { return new ParamBasedChunkSizeFunction(batchChunkSizeParameterIndex); } else if (method.isAnnotationPresent(BatchChunkSize.class)) { final int size=method.getAnnotation(BatchChunkSize.class).value(); if (size <= 0) { throw new IllegalArgumentException(""Batch chunk size must be >= 0""); } return new ConstantChunkSizeFunction(size); } else if (sqlObjectType.isAnnotationPresent(BatchChunkSize.class)) { final int size=sqlObjectType.getAnnotation(BatchChunkSize.class).value(); return new ConstantChunkSizeFunction(size); } else { return new ConstantChunkSizeFunction(Integer.MAX_VALUE); } } "
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\statement\internal\SqlBatchHandler.java,executeBatch,private ResultIterator<?>  (final Handle handle final PreparedBatch batch){ if (!handle.isInTransaction() && sqlBatch.transactional()) { return handle.inTransaction(c -> batchIntermediate.apply(batch)); } else { return batchIntermediate.apply(batch); } } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\statement\internal\SqlBatchHandler.java,getContext,@Override public StatementContext  (){ return dummy.getContext(); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\statement\internal\SqlBatchHandler.java,getParameterType,@Override Type  (Parameter parameter){ Type type=super.getParameterType(parameter); if (!parameter.isAnnotationPresent(SingleValue.class)) { Class<?> erasedType=GenericTypes.getErasedType(type); if (Iterable.class.isAssignableFrom(erasedType)) { return Ge
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\statement\internal\SqlBatchHandler.java,hasNext,@Override public boolean  (){ for ( Iterator<?> extra : extras) { if (!extra.hasNext()) { return false; } } return true; } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\statement\internal\SqlBatchHandler.java,indexOfBatchChunkSizeParameter,private int  (Method method){ Annotation[][] parameterAnnotations=method.getParameterAnnotations(); return IntStream.range(0 parameterAnnotations.length).filter(i -> Stream.of(parameterAnnotations[i]).anyMatch(BatchChunkSize.class::isInstance)).findFirst().orElse(-1); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\statement\internal\SqlBatchHandler.java,invalidReturnTypeMessage,"private static String  (Method method){ return method.getDeclaringClass() + ""."" + method.getName()+ "" method is annotated with @SqlBatch so should return void  int[]  or boolean[] but is returning: ""+ method.getReturnType(); } "
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\statement\internal\SqlBatchHandler.java,invoke,@Override public Object  (Object target Object[] args HandleSupplier h){ final Handle handle=h.getHandle(); final String sql=locateSql(handle); final int chunkSize=batchChunkSize.call(args); final Iterator<Object[]> batchArgs=zipArgs(getMethod() args); Re
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\statement\internal\SqlBatchHandler.java,mapToBoolean,private Function<PreparedBatch ResultIterator<?>>  (Function<PreparedBatch ResultIterator<?>> modCounts){ return modCounts.andThen(iterator -> new ResultIterator<Boolean>(){ @Override public boolean hasNext(){ return iterator.hasNext(); } @Override public Boolean next(){ return ((Integer)iterator.next()) > 0; } @Override public void close(){ iterator.close(); } @Override public StatementContext getContext(){ return iterator.getContext(); } } ); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\statement\internal\SqlBatchHandler.java,next,@Override public Object[]  (){ for (int i=0; i < extras.size(); i++) { sharedArg[i]=extras.get(i).next(); } return sharedArg; } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\statement\internal\SqlBatchHandler.java,returnTypeIsValid,private static boolean  (Class<?> type){ if (type.equals(Void.TYPE)) { return true; } if (type.isArray()) { Class<?> componentType=type.getComponentType(); return componentType.equals(Integer.TYPE) || componentType.equals(Boolean.TYPE); } return false; } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\statement\internal\SqlBatchHandler.java,zipArgs,"private Iterator<Object[]>  (Method method Object[] args){ boolean foundIterator=false; List<Iterator<?>> extras=new ArrayList<>(); for (int paramIdx=0; paramIdx < method.getParameterCount(); paramIdx++) { final boolean singleValue=method.getParameters()[paramIdx].isAnnotationPresent(SingleValue.class); final Object arg=args[paramIdx]; if (!singleValue && IterableLike.isIterable(arg)) { extras.add(IterableLike.of(arg)); foundIterator=true; } else { extras.add(Stream.generate(() -> arg).iterator()); } } if (!foundIterator) { throw new UnableToCreateStatementException(""@SqlBatch method has no Iterable or array parameters "" + "" did you mean @SqlQuery?"" null null); } final Object[] sharedArg=new Object[args.length]; return new Iterator<Object[]>(){ @Override public boolean hasNext(){ for ( Iterator<?> extra : extras) { if (!extra.hasNext()) { return false; } } return true; } @Override public Object[] next(){ for (int i=0; i < extras.size(); i++) { sharedArg[i]=extras.get(i).next(); } return sharedArg; } } ; } "
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\statement\internal\SqlQueryHandler.java,SqlQueryHandler,public  (Class<?> sqlObjectType Method method){ super(sqlObjectType method); this.magic=ResultReturner.forMethod(sqlObjectType method); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\statement\internal\SqlQueryHandler.java,configureReturner,@Override void  (Query q SqlObjectStatementConfiguration cfg){ UseRowMapper useRowMapper=getMethod().getAnnotation(UseRowMapper.class); UseRowReducer useRowReducer=getMethod().getAnnotation(UseRowReducer.class); if (useRowReducer != null && useRowMapper !
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\statement\internal\SqlQueryHandler.java,createStatement,@Override Query  (Handle handle String locatedSql){ return handle.createQuery(locatedSql); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\statement\internal\SqlScriptsHandler.java,SqlScriptsHandler,public  (Class<?> sqlObjectType Method method){ super(sqlObjectType method); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\statement\internal\SqlScriptsHandler.java,configureReturner,@Override void  (Script stmt SqlObjectStatementConfiguration cfg){ cfg.setReturner(() -> stmt.execute()); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\statement\internal\SqlScriptsHandler.java,createStatement,@Override Script  (Handle handle String locatedSql){ return new Script(handle locatedSql); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\statement\internal\CustomizingStatementHandler.java,CustomizingStatementHandler, (Class<?> type Method method){ this.sqlObjectType=type; this.method=method; final Stream<BoundCustomizer> typeCustomizers=concat(Stream.of(type.getInterfaces()) Stream.of(type)).flatMap(t -> annotationsFor(t)).map(a -> instantiateFactory(a).createForType(a type)).map(BoundCustomizer::of); final Stream<BoundCustomizer> methodCustomizers=annotationsFor(method).map(a -> instantiateFactory(a).createForMethod(a type method)).map(BoundCustomizer::of); final Stream<BoundCustomizer> parameterCustomizers=parameterCustomizers(type method); statementCustomizers=Stream.of(typeCustomizers methodCustomizers parameterCustomizers).reduce(Stream.empty() Stream::concat).collect(Collectors.toList()); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\statement\internal\CustomizingStatementHandler.java,annotationsFor,private static Stream<Annotation>  (AnnotatedElement... elements){ return Stream.of(elements).map(AnnotatedElement::getAnnotations).flatMap(Stream::of).filter(a -> a.annotationType().isAnnotationPresent(SqlStatementCustomizingAnnotation.class)); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\statement\internal\SqlUpdateHandler.java,SqlUpdateHandler,"public  (Class<?> sqlObjectType Method method){ super(sqlObjectType method); if (method.isAnnotationPresent(UseRowReducer.class)) { throw new UnsupportedOperationException(""Cannot declare @UseRowReducer on a @SqlUpdate method.""); } boolean isGetGeneratedKeys=method.isAnnotationPresent(GetGeneratedKeys.class); Type returnType=GenericTypes.resolveType(method.getGenericReturnType() sqlObjectType); if (isGetGeneratedKeys) { ResultReturner magic=ResultReturner.forMethod(sqlObjectType method); String[] columnNames=method.getAnnotation(GetGeneratedKeys.class).value(); this.returner=update -> { ResultBearing resultBearing=update.executeAndReturnGeneratedKeys(columnNames); UseRowMapper useRowMapper=method.getAnnotation(UseRowMapper.class); ResultIterable<?> iterable=useRowMapper == null ? resultBearing.mapTo(returnType) : resultBearing.map(rowMapperFor(useRowMapper)); return magic.mappedResult(iterable update.getContext()); } ; } else if (isNumeric(method.getReturnType())) { this.returner=update -> update.execute(); } else if (isBoolean(method.getReturnType())) { this.returner=update -> update.execute() > 0; } else { throw new UnableToCreateSqlObjectException(invalidReturnTypeMessage(method returnType)); } } "
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\statement\internal\SqlUpdateHandler.java,configureReturner,@Override void  (Update u SqlObjectStatementConfiguration cfg){ cfg.setReturner(() -> returner.apply(u)); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\statement\internal\SqlUpdateHandler.java,createStatement,@Override Update  (Handle handle String locatedSql){ return handle.createUpdate(locatedSql); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\statement\internal\SqlUpdateHandler.java,invalidReturnTypeMessage,"private String  (Method method Type returnType){ return method.getDeclaringClass().getSimpleName() + ""."" + method.getName()+ "" method is annotated with @SqlUpdate so should return void  boolean  or Number but is returning: ""+ returnType; } "
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\statement\internal\SqlUpdateHandler.java,isBoolean,private boolean  (Class<?> type){ return type.equals(boolean.class) || type.equals(Boolean.class); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\statement\internal\SqlUpdateHandler.java,isNumeric,private boolean  (Class<?> type){ return Number.class.isAssignableFrom(type) || type.equals(int.class) || type.equals(long.class)|| type.equals(void.class); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\UnableToCreateSqlObjectException.java,UnableToCreateSqlObjectException,public  (String message){ super(message); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\transaction\internal\TransactionDecorator.java,decorateHandler,@Override public Handler  (Handler base Class<?> sqlObjectType Method method){ final Transaction txnAnnotation=method.getAnnotation(Transaction.class); final TransactionIsolationLevel isolation=txnAnnotation.value(); final boolean readOnly=txnAnnotation.r
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\config\Article.java,Article,@JdbiConstructor public  (long id String title String content){ setId(id); setTitle(title); setContent(content); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\config\Article.java,equals,@Override public boolean  (Object o){ if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; Article article=(Article)o; return id == article.id && Objects.equals(title article.title) && Objects.equals(content article.conte
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\config\Article.java,getComments,public List<Comment>  (){ return comments; } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\config\Article.java,getContent,public String  (){ return content; } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\config\Article.java,getId,public long  (){ return id; } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\config\Article.java,getTitle,public String  (){ return title; } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\config\Article.java,hashCode,@Override public int  (){ return Objects.hash(id title content comments); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\config\Article.java,newArticle,public static Article  (long id String title String content Comment... comments){ Article article=new Article(id title content); article.getComments().addAll(Arrays.asList(comments)); return article; } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\config\Article.java,setComments,public void  (List<Comment> comments){ this.comments=comments; } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\config\Article.java,setContent,public void  (String content){ this.content=content; } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\config\Article.java,setId,public void  (long id){ this.id=id; } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\config\Article.java,setTitle,public void  (String title){ this.title=title; } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\config\Article.java,toString,"@Override public String  (){ return ""Article{"" + ""id="" + id + ""  title='""+ title+ '\''+ ""  content='""+ content+ '\''+ ""  comments=""+ comments+ '}'; } "
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\transaction\Transactional.java,begin,default void  (){ getHandle().begin(); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\transaction\Transactional.java,commit,default void  (){ getHandle().commit(); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\transaction\Transactional.java,inTransaction,"@SuppressWarnings(""unchecked"") default <R X extends Exception>R  (TransactionIsolationLevel isolation TransactionalCallback<R This X> callback) throws X { return getHandle().inTransaction(isolation h -> callback.inTransaction((This)this)); } "
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\transaction\Transactional.java,releaseSavepoint,default void  (String savepointName){ getHandle().release(savepointName); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\transaction\Transactional.java,rollback,default void  (){ getHandle().rollback(); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\transaction\Transactional.java,rollbackToSavepoint,default void  (String savepointName){ getHandle().rollbackToSavepoint(savepointName); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\transaction\Transactional.java,savepoint,default void  (String savepointName){ getHandle().savepoint(savepointName); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\main\java\org\jdbi\v3\sqlobject\transaction\Transactional.java,useTransaction,default <X extends Exception>void  (TransactionIsolationLevel isolation TransactionalConsumer<This X> callback) throws X { inTransaction(isolation transactional -> { callback.useTransaction(transactional); return null; } ); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\BindSomething.java,createForParameter,@Override public SqlStatementParameterCustomizer  (Annotation annotation Class<?> sqlObjectType Method method Parameter param int index Type type){ BindSomething bind=(BindSomething)annotation; return (stmt arg) -> { Something it=(Something)arg; stmt.bind
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\config\LongValue.java,LongValue,private  (long value){ this.value=value; } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\config\Comment.java,Comment,@JdbiConstructor public  (long id String content){ setId(id); setContent(content); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\config\LongValue.java,equals,@Override public boolean  (Object o){ if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; LongValue longValue=(LongValue)o; return value == longValue.value; } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\config\Comment.java,equals,@Override public boolean  (Object o){ if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; Comment comment=(Comment)o; return id == comment.id && Objects.equals(content comment.content); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\config\LongValue.java,getValue,public long  (){ return value; } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\config\Comment.java,getContent,public String  (){ return content; } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\config\LongValue.java,hashCode,@Override public int  (){ return Objects.hash(value); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\config\Comment.java,getId,public long  (){ return id; } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\config\LongValue.java,of,public static final LongValue  (long value){ return new LongValue(value); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\config\Comment.java,hashCode,@Override public int  (){ return Objects.hash(id content); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\config\Comment.java,newComment,static Comment  (long id String content){ return new Comment(id content); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\config\LongValue.java,toString,"@Override public String  (){ return ""LongValue{"" + ""value="" + value + '}'; } "
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\config\Comment.java,setContent,public void  (String content){ this.content=content; } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\config\Comment.java,setId,public void  (long id){ this.id=id; } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\config\Comment.java,toString,"@Override public String  (){ return ""Comment{"" + ""id="" + id + ""  content='""+ content+ '\''+ '}'; } "
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\config\LongValueRowMapper.java,map,"@Override public LongValue  (ResultSet rs StatementContext ctx) throws SQLException { long value=rs.getLong(""long_value""); return rs.wasNull() ? null : LongValue.of(value); } "
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\config\LongValueColumnMapper.java,map,@Override public LongValue  (ResultSet r int columnNumber StatementContext ctx) throws SQLException { long value=r.getLong(columnNumber); return r.wasNull() ? null : LongValue.of(value); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\config\LongValueColumnMapperFactory.java,build,@Override public Optional<ColumnMapper<?>>  (Type type ConfigRegistry config){ return LongValue.class.equals(type) ? Optional.of(new LongValueColumnMapper()) : Optional.empty(); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\config\LongValueRowMapperFactory.java,build,@Override public Optional<RowMapper<?>>  (Type type ConfigRegistry config){ return LongValue.class.equals(type) ? Optional.of(new LongValueRowMapper()) : Optional.empty(); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\config\StringValueColumnMapper.java,map,@Override public StringValue  (ResultSet r int columnNumber StatementContext ctx) throws SQLException { return StringValue.of(r.getString(columnNumber)); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\config\StringValueColumnMapperFactory.java,build,@Override public Optional<ColumnMapper<?>>  (Type type ConfigRegistry config){ return StringValue.class.equals(type) ? Optional.of(new StringValueColumnMapper()) : Optional.empty(); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\config\StringValueRowMapper.java,map,"@Override public StringValue  (ResultSet rs StatementContext ctx) throws SQLException { return StringValue.of(rs.getString(""string_value"")); } "
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\config\StringValueRowMapperFactory.java,build,@Override public Optional<RowMapper<?>>  (Type type ConfigRegistry config){ return StringValue.class.equals(type) ? Optional.of(new StringValueRowMapper()) : Optional.empty(); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\config\TestRegisterBeanMapper.java,getArticleWithComments,"@RegisterBeanMapper(value=Article.class prefix=""a"") @RegisterBeanMapper(value=Comment.class prefix=""c"") default Optional<Article>  (long id){ return getHandle().select(""select "" + "" a.id a_id  "" + "" a.title a_title  ""+ "" a.content a_content  ""+ "" c.id c_i"
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\config\TestRegisterConstructorMapper.java,getArticleWithComments,"@RegisterConstructorMapper(value=Article.class prefix=""a"") @RegisterConstructorMapper(value=Comment.class prefix=""c"") default Optional<Article>  (long id){ return getHandle().select(""select "" + "" a.id a_id  "" + "" a.title a_title  ""+ "" a.content a_content "
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\config\TestRegisterFieldMapper.java,getArticleWithComments,"@RegisterFieldMapper(value=Article.class prefix=""a"") @RegisterFieldMapper(value=Comment.class prefix=""c"") default Optional<Article>  (long id){ return getHandle().select(""select "" + "" a.id a_id  "" + "" a.title a_title  ""+ "" a.content a_content  ""+ "" c.id c"
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\config\TestRegisterRowMapper.java,list,"@SqlQuery(""select * from column_mappers"") @RegisterRowMapper(StringValueRowMapper.class) @RegisterRowMapper(LongValueRowMapper.class) @RegisterJoinRowMapper({StringValue.class LongValue.class}) List<JoinRow>  (); "
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\config\TestRegisterRowMapperFactory.java,list,"@SqlQuery(""select * from column_mappers"") @RegisterRowMapperFactory(StringValueRowMapperFactory.class) @RegisterRowMapperFactory(LongValueRowMapperFactory.class) @RegisterJoinRowMapper({StringValue.class LongValue.class}) List<JoinRow>  (); "
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\config\TestUseCustomHandlerFactory.java,buildHandler,@Override public Optional<Handler>  (Class<?> sqlObjectType Method method){ return getImplementation(sqlObjectType method).map(m -> (Handler)(target args handle) -> m.invoke(null Stream.concat(Stream.of(target) Stream.of(args)).toArray())); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\config\ValueTypeEntity.java,ValueTypeEntity,public  (StringValue stringValue LongValue longValue){ this.stringValue=stringValue; this.longValue=longValue; } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\config\ValueTypeEntity.java,equals,@Override public boolean  (Object o){ if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; ValueTypeEntity that=(ValueTypeEntity)o; return Objects.equals(stringValue that.stringValue) && Objects.equals(longValue that.long
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\config\ValueTypeEntity.java,hashCode,@Override public int  (){ return Objects.hash(stringValue longValue); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\config\ValueTypeEntity.java,of,public static final ValueTypeEntity  (StringValue stringValue LongValue longValue){ return new ValueTypeEntity(stringValue longValue); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\config\ValueTypeEntity.java,toString,"@Override public String  (){ return ""ValueTypeEntity{"" + ""stringValue="" + stringValue + ""  longValue=""+ longValue+ '}'; } "
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\locator\TestSqlLocator.java,TestConfig,private  (TestConfig that){ this.sql=that.sql; } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\locator\TestSqlLocator.java,createCopy,@Override public TestConfig  (){ return new TestConfig(this); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\subpackage\PrivateImplementationFactory.java,create,public static TestBeanBinder.PublicInterface  (){ return new PrivateImplementation(); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\subpackage\PrivateImplementationFactory.java,getValue,"@Override public String  (){ return ""IShouldBind""; } "
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\MockClock.java,advance,public Instant  (long amountToAdd TemporalUnit unit){ return now=now.plus(amountToAdd unit); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\MockClock.java,getZone,@Override public ZoneId  (){ return ZoneId.systemDefault(); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\MockClock.java,instant,@Override public Instant  (){ return now; } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\MockClock.java,withZone,@Override public Clock  (ZoneId zone){ throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\TestBatchingSingleValue.java,BatchingRow,public  (int id int[] values){ this.id=id; this.values=values; } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\TestBatchingSingleValue.java,equals,@Override public boolean  (Object obj){ if (obj instanceof BatchingRow) { BatchingRow other=(BatchingRow)obj; return id == other.id && Arrays.equals(values other.values); } return false; } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\TestBatchingSingleValue.java,hashCode,@Override public int  (){ return id ^ Arrays.hashCode(values); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\TestBeanMapper.java,Document,public  (int id String name String contents){ this.id=id; this.name=name; this.contents=contents; } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\TestBeanMapper.java,Folder,public  (int id String name Document... documents){ this.id=id; this.name=name; this.documents=Arrays.asList(documents); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\TestBeanMapper.java,accumulate,"@Override public void  (Map<Integer Folder> map RowView rv){ Folder f=map.computeIfAbsent(rv.getColumn(""f_id"" Integer.class) id -> rv.getRow(Folder.class)); if (rv.getColumn(""d_id"" Integer.class) != null) { f.getDocuments().add(rv.getRow(Document.class));"
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\TestBeanMapper.java,createTable,"@Before public void  () throws Exception { h=dbRule.openHandle(); h.createUpdate(""create table testBean (valueType varchar(50))"").execute(); dao=h.attach(TestDao.class); } "
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\TestBeanMapper.java,equals,@Override public boolean  (Object obj){ if (!(obj instanceof Folder)) { return false; } Folder that=(Folder)obj; return this.id == that.id && Objects.equals(this.name that.name) && Objects.equals(this.documents that.documents); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\TestBeanMapper.java,getContents,public String  (){ return contents; } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\TestBeanMapper.java,getDocuments,public List<Document>  (){ return documents; } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\TestBindFields.java,TestObject,public  (int id String name){ this.id=id; this.name=name; } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\TestBindFields.java,getId,"public int  (){ throw new RuntimeException(""Should not be called.""); } "
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\TestBindBean.java,Bean,public  (int id ValueType valueType){ this.id=id; this.valueType=valueType; } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\TestBindBean.java,ValueTypeArgumentFactory,public  (){ super(Types.VARCHAR); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\TestBindBean.java,build,@Override protected Argument  (ValueType value ConfigRegistry config){ return (pos stmt ctx) -> stmt.setString(pos value.getValue()); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\TestBindExpression.java,createForParameter,@Override public SqlStatementParameterCustomizer  (Annotation annotation Class<?> sqlObjectType Method method Parameter param int index Type type){ final String rootName=((BindRoot)annotation).value(); final JexlEngine engine=new JexlEngine(); return (q r
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\TestBindFunctions.java,FluentSomething,public  (int id String name){ this.id=id; this.name=name; } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\TestBindMap.java,MapKey, (String value){ this.value=value; } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\TestConcurrentUpdatingQuery.java,setUp,@Before public void  () throws Exception { handle=dbRule.getHandle(); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\TestConcurrentUpdatingQuery.java,testConcurrentUpdateableResultSet,"@Test public void  () throws Exception { handle.execute(""create table something ( id identity primary key  name varchar(50) )""); handle.execute(""insert into something (id  name) values (7  'Tim')""); handle.createQuery(""select id  name from something where"
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\TestColumnMappers.java,createTable,"@Before public void  () throws Exception { h=dbRule.openHandle(); h.createUpdate(""create table someBean ("" + "" primitiveInt integer  wrapperLong bigint  "" + "" primitiveChar varchar(1)  wrappedChar varchar(1)  ""+ "" string varchar(50)  valueType varchar(50)"
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\TestColumnMappers.java,dropTable,"@After public void  (){ h.createUpdate(""drop table someBean"").execute(); } "
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\TestColumnMappers.java,getPrimitiveChar,public char  (){ return primitiveChar; } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\TestColumnMappers.java,getPrimitiveInt,public int  (){ return primitiveInt; } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\TestColumnMappers.java,getString,public String  (){ return string; } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\TestColumnMappers.java,getUri,public URI  (){ return uri; } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\TestColumnMappers.java,getValueType,public ValueType  (){ return valueType; } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\TestColumnMappers.java,getWrappedChar,public Character  (){ return wrappedChar; } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\TestColumnMappers.java,getWrapperLong,public Long  (){ return wrapperLong; } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\config\StringValue.java,StringValue,private  (String value){ this.value=value; } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\config\StringValue.java,equals,@Override public boolean  (Object o){ if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; StringValue that=(StringValue)o; return Objects.equals(value that.value); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\config\StringValue.java,getValue,public String  (){ return value; } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\config\StringValue.java,hashCode,@Override public int  (){ return Objects.hash(value); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\config\StringValue.java,of,public static StringValue  (String value){ return value == null ? null : new StringValue(value); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\config\StringValue.java,toString,"@Override public String  (){ return ""StringValue{"" + ""value='"" + value + '\''+ '}'; } "
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\TestFieldMapper.java,createTable,"@Before public void  () throws Exception { h=dbRule.openHandle(); h.createUpdate(""create table testBean (valueType varchar(50))"").execute(); dao=h.attach(TestDao.class); } "
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\TestFieldMapper.java,getValueType,public ValueType  (){ return valueType; } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\TestGetGeneratedKeysPostgres.java,IdCreateTime,public  (long id OffsetDateTime createdOn){ this.id=id; this.createdOn=createdOn; } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\TestFoldToObjectGraph.java,Person,public  (String name String role){ this.name=name; this.role=role; } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\TestFoldToObjectGraph.java,Team,public  (String name String mascot){ this.name=name; this.mascot=mascot; } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\TestFoldToObjectGraph.java,equals,@Override public boolean  (Object o){ if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; Person person=(Person)o; return name.equals(person.name) && role.equals(person.role); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\TestFoldToObjectGraph.java,findAllTeams,default Map<String Team>  (){ Iterator<TeamPersonJoinRow> i=findAllTeamsAndPeople(); Map<String Team> acc=new HashMap<>(); while (i.hasNext()) { TeamPersonJoinRow row=i.next(); if (!acc.containsKey(row.getTeamName())) { acc.put(row.getTeamName() new Team(row.getTeamName() row.getMascot())); } acc.get(row.getTeamName()).getPeople().add(new Person(row.getPersonName() row.getRole())); } return acc; } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\TestGuavaCollectors.java,User,public  (int id String name){ this.id=id; this.name=name; } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\TestGuavaCollectors.java,equals,@Override public boolean  (Object o){ if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; User user=(User)o; return id == user.id && Objects.equals(name user.name); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\TestInheritedAnnotations.java,Character,@JdbiConstructor public  (int id String name Instant created Instant modified){ this.id=id; this.name=name; this.created=created; this.modified=modified; } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\TestInheritedAnnotations.java,createCopy,@Override public Config  (){ Config copy=new Config(); copy.clock=this.clock; return copy; } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\TestInheritedAnnotations.java,createForType,"@Override public SqlStatementCustomizer  (Annotation annotation Class<?> sqlObjectType){ return stmt -> stmt.bind(""now"" OffsetDateTime.now(stmt.getConfig(Config.class).clock)); } "
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\TestOutParameterAnnotation.java,callMultipleOutParameters,"@SqlCall(""{call swap(:a  :b  :c  :d)}"") @OutParameter(name=""c"" sqlType=Types.INTEGER) @OutParameter(name=""d"" sqlType=Types.INTEGER) OutParameters  (int a int b); "
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\TestOutParameterAnnotation.java,callStoredProc,"@SqlCall(""{call set100(:outparam)}"") @OutParameter(name=""outparam"" sqlType=Types.INTEGER) OutParameters  (); "
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\TestOutParameterAnnotation.java,setUp,"@Before public void  () throws Exception { db=dbRule.getJdbi(); db.useHandle(h -> { h.execute(""CREATE FUNCTION set100(OUT outparam INT) AS $$ BEGIN outparam := 100; END; $$ LANGUAGE plpgsql""); h.execute(""CREATE FUNCTION swap(IN a INT  IN b INT  OUT c INT "
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\TestOutParameterAnnotation.java,testMultipleOutParameters,"@Test public void  (){ MyDao myDao=db.onDemand(MyDao.class); OutParameters outParameters=myDao.callMultipleOutParameters(1 9); assertThat(outParameters.getInt(""c"")).isEqualTo(9); assertThat(outParameters.getInt(""d"")).isEqualTo(1); } "
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\TestOutParameterAnnotation.java,testOutParameter,"@Test public void  (){ MyDao myDao=db.onDemand(MyDao.class); OutParameters outParameters=myDao.callStoredProc(); assertThat(outParameters.getInt(""outparam"")).isEqualTo(100); } "
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\TestPostgresBugs.java,failed,"@Transaction default Something  (int id String name) throws IOException { insert(id name); throw new IOException(""woof""); } "
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\TestReadOnly.java,readTxn,@Transaction(readOnly=true) default void  (Runnable r){ r.run(); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\TestReadOnly.java,testHandleReadOnly,@Test public void  () throws Exception { try (Handle h=db.openHandle()){ assertThat(h.isReadOnly()).isFalse(); assertThat(h.getConnection().isReadOnly()).isFalse(); h.setReadOnly(true); assertThat(h.isReadOnly()).isTrue(); assertThat(h.getConnection().isR
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\TestReadOnly.java,testReadOnlyInner,@Test public void  (){ try (Handle h=db.openHandle()){ RODao dao=h.attach(RODao.class); dao.writeTxn(() -> dao.readTxn(() -> { } )); } } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\TestReadOnly.java,testReadOnlyOuter,@Test(expected=TransactionException.class) public void  (){ try (Handle h=db.openHandle()){ RODao dao=h.attach(RODao.class); dao.readTxn(() -> dao.writeTxn(() -> { } )); } } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\TestReadOnly.java,testSqlObjectReadOnly,@Test public void  () throws Exception { try (Handle h=db.openHandle()){ RODao dao=h.attach(RODao.class); assertThat(h.isReadOnly()).isFalse(); assertThat(dao.verifyReadOnly()).isTrue(); assertThat(h.isReadOnly()).isFalse(); } } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\TestReadOnly.java,verifyReadOnly,"@Transaction(readOnly=true) default boolean  () throws SQLException { final Handle h=getHandle(); if (h.isReadOnly() != h.getConnection().isReadOnly()) { throw new AssertionError(""didn't set""); } return h.isReadOnly(); } "
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\TestReadOnly.java,writeTxn,@Transaction(readOnly=false) default void  (Runnable r){ r.run(); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\TestRegisterArgumentFactory.java,Name,public  (String first String last){ this.first=first; this.last=last; } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\TestRegisterArgumentFactory.java,build,@Override public Optional<Argument>  (Type expectedType Object value ConfigRegistry config){ if (expectedType == Name.class || value instanceof Name) { Name nameValue=(Name)value; return Optional.of((position statement ctx1) -> statement.setString(positio
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\TestRegisterRowMapperFactory.java,Foo, (final int id final String name){ this.id=id; this.name=name; } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\TestRegisterRowMapperFactory.java,build,@Override public Optional<RowMapper<?>>  (Type type ConfigRegistry config){ Class<?> erasedType=getErasedType(type); try { MapWith mapWith=erasedType.getAnnotation(MapWith.class); return mapWith == null ? Optional.empty() : Optional.of(mapWith.value().new
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\TestRegisterRowMapperFactory.java,getId,public int  (){ return id; } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\TestRegisterRowMapperFactory.java,getName,public String  (){ return name; } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\TestRegisterJoinRowMapper.java,getAuthorship,"@RegisterJoinRowMapper({User.class Article.class}) @SqlQuery(""SELECT * FROM user NATURAL JOIN author NATURAL JOIN article"") Stream<JoinRow>  (); "
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\TestRegisterJoinRowMapper.java,setUp,@Before public void  (){ JoinRowMapperTest t=new JoinRowMapperTest(); t.dbRule=dbRule; t.setUp(); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\TestRegisterJoinRowMapper.java,testSqlObjectJoinRow,@Test public void  (){ Handle handle=dbRule.getSharedHandle(); Multimap<User Article> joined=HashMultimap.create(); handle.attach(UserArticleDao.class).getAuthorship().forEach(jr -> joined.put(jr.get(User.class) jr.get(Article.class))); assertThat(joined)
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\TestReturningMap.java,Phone,public  (int id String phone){ this.id=id; this.phone=phone; } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\TestReturningMap.java,User,public  (int id String name){ this.id=id; this.name=name; } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\TestSqlObjectFactory.java,accepts,"@Test public void  (){ assertThat(factory.accepts(NotASqlObject.class)).isFalse(); assertThatThrownBy(() -> factory.accepts(SqlObjectClass.class)).hasMessageContaining(""only supported for interfaces""); assertThat(factory.accepts(HasAnnotatedMethod.class))"
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\TestSqlMethodDecorators.java,abortingDecorator,@Foo @Abort @Bar @CustomSqlOperation @DecoratorOrder({Foo.class Abort.class Bar.class}) void  (); 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\TestSqlMethodDecorators.java,decorateHandler,"@Override public Handler  (Handler base Class<?> sqlObjectType Method method){ return (obj args handle) -> { invoked(""abort""); return null; } ; } "
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\TestSqlMethodDecorators.java,invoke,"@Override public Object  (Object target Object[] args HandleSupplier handle) throws Exception { invoked(""method""); return null; } "
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\TestSqlMethodDecorators.java,invoked,static void  (String value){ invocations.get().add(value); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\TestSqlMethodDecorators.java,orderedBarFoo,@Foo @Bar @CustomSqlOperation @DecoratorOrder({Bar.class Foo.class}) void  (); 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\TestSqlMethodDecorators.java,orderedBarFooOnMethod,@Foo @Bar @CustomSqlOperation @DecoratorOrder({Bar.class Foo.class}) void  (); 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\TestSqlMethodDecorators.java,orderedFooBar,@Foo @Bar @CustomSqlOperation @DecoratorOrder({Foo.class Bar.class}) void  (); 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\TestSqlObject.java,broken,"default String  (@Bind int wat){ return ""foo""; } "
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\TestSqlObject.java,doesTransactionAnnotationWork,@Transaction default boolean  (){ return getHandle().isInTransaction(); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\TestTimestamped.java,Person,public  (String firstName String lastName){ this.firstName=firstName; this.lastName=lastName; } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\TestTimestamped.java,before,@Before public void  (){ personDAO=dbRule.getJdbi().onDemand(PersonDAO.class); personDAO.createTable(); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\TestTimingCollector.java,collect,@Override public void  (long elapsedTime StatementContext ctx){ statementNames.add(statementNameStrategy.getStatementName(ctx)); } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\TestTransactional.java,TxnIsolationCheckingInvocationHandler,public  (Connection real){ this.real=real; } 
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\TestTransactional.java,getConnection,@Override public Connection  () throws SQLException { final Connection real=super.getConnection(); return (Connection)Proxy.newProxyInstance(real.getClass().getClassLoader() new Class<?>[]{Connection.class} new TxnIsolationCheckingInvocationHandler(real))
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\TestTransactionAnnotation.java,failed,"@Transaction default Something  (int id String name) throws IOException { insert(id name); throw new IOException(""woof""); } "
C:\Users\User\Desktop\Thesis\jdbi\sqlobject\src\test\java\org\jdbi\v3\sqlobject\TestRegisterConstructorMapper.java,SubSomething,public  (int id String name){ super(id name); } 
C:\Users\User\Desktop\Thesis\jdbi\stringtemplate4\src\main\java\org\jdbi\v3\stringtemplate4\internal\UseStringTemplateEngineImpl.java,configureForMethod,@Override public void  (ConfigRegistry registry Annotation annotation Class<?> sqlObjectType Method method){ configureForType(registry annotation sqlObjectType); } 
C:\Users\User\Desktop\Thesis\jdbi\stringtemplate4\src\main\java\org\jdbi\v3\stringtemplate4\internal\UseStringTemplateEngineImpl.java,configureForType,@Override public void  (ConfigRegistry registry Annotation annotation Class<?> sqlObjectType){ registry.get(SqlStatements.class).setTemplateEngine(new StringTemplateEngine()); } 
C:\Users\User\Desktop\Thesis\jdbi\stringtemplate4\src\main\java\org\jdbi\v3\stringtemplate4\StringTemplateSqlLocator.java,findStringTemplate,public static ST  (ClassLoader classLoader String path String name){ STGroup group=findStringTemplateGroup(classLoader path); return findTemplateInGroup(path name group); } 
C:\Users\User\Desktop\Thesis\jdbi\stringtemplate4\src\main\java\org\jdbi\v3\stringtemplate4\StringTemplateSqlLocator.java,findStringTemplateGroup,public static STGroup  (ClassLoader classLoader String path){ return CACHE.computeIfAbsent(path p -> readStringTemplateGroup(classLoader path)); } 
C:\Users\User\Desktop\Thesis\jdbi\stringtemplate4\src\main\java\org\jdbi\v3\stringtemplate4\StringTemplateSqlLocator.java,findTemplateInGroup,"private static ST  (String path String name STGroup group){ if (!group.isDefined(name)) { throw new IllegalStateException(""No StringTemplate group "" + name + "" for path ""+ path); } return group.getInstanceOf(name); } "
C:\Users\User\Desktop\Thesis\jdbi\stringtemplate4\src\main\java\org\jdbi\v3\stringtemplate4\StringTemplateSqlLocator.java,openStream,"private static InputStream  (ClassLoader classLoader String path){ InputStream is=classLoader.getResourceAsStream(path); if (is == null) { throw new IllegalStateException(""Unable to find StringTemplate group file at "" + path + "" on classpath""); } return is; } "
C:\Users\User\Desktop\Thesis\jdbi\stringtemplate4\src\main\java\org\jdbi\v3\stringtemplate4\StringTemplateSqlLocator.java,readStringTemplateGroup,"private static STGroup  (ClassLoader classLoader String path){ try { URL resource=classLoader.getResource(path); STGroupFile group=new STGroupFile(resource ""UTF-8"" '<' '>'); group.load(); return group; } catch ( Exception e) { throw new RuntimeException(""Unable to read StringTemplate group file at "" + path + "" on classpath"" e); } } "
C:\Users\User\Desktop\Thesis\jdbi\stringtemplate4\src\main\java\org\jdbi\v3\stringtemplate4\StringTemplateSqlLocator.java,resourcePathFor,private static String  (Class<?> clazz){ return clazz.getName().replace('.' '/') + TEMPLATE_GROUP_EXTENSION; } 
C:\Users\User\Desktop\Thesis\jdbi\stringtemplate4\src\main\java\org\jdbi\v3\stringtemplate4\StringTemplateSqlLocator.java,toString,private static String  (InputStream inputStream) throws IOException { char[] buffer=new char[1024]; StringBuilder out=new StringBuilder(); Reader in=new InputStreamReader(inputStream UTF_8); for (int rsz; (rsz=in.read(buffer 0 buffer.length)) >= 0; ) { out.append(buffer 0 rsz); } return out.toString(); } 
C:\Users\User\Desktop\Thesis\jdbi\stringtemplate4\src\main\java\org\jdbi\v3\stringtemplate4\internal\UseStringTemplateSqlLocatorImpl.java,configureForMethod,@Override public void  (ConfigRegistry registry Annotation annotation Class<?> sqlObjectType Method method){ configureForType(registry annotation sqlObjectType); } 
C:\Users\User\Desktop\Thesis\jdbi\stringtemplate4\src\main\java\org\jdbi\v3\stringtemplate4\internal\UseStringTemplateSqlLocatorImpl.java,configureForType,@Override public void  (ConfigRegistry registry Annotation annotation Class<?> sqlObjectType){ SqlLocator locator=(type method config) -> { String templateName=SqlAnnotations.getAnnotationValue(method sql -> sql).orElseGet(method::getName); STGroup group=
C:\Users\User\Desktop\Thesis\jdbi\stringtemplate4\src\main\java\org\jdbi\v3\stringtemplate4\StringTemplateEngine.java,render,@Override public String  (String sql StatementContext ctx){ ST template=new ST(new STGroup() sql); ctx.getAttributes().forEach(template::add); return template.render(); } 
C:\Users\User\Desktop\Thesis\jdbi\stringtemplate4\src\test\java\org\jdbi\v3\sqlobject\BindListNullPostgresTest.java,exit,"@After public void  (){ handle.execute(""drop table something""); handle.close(); } "
C:\Users\User\Desktop\Thesis\jdbi\stringtemplate4\src\test\java\org\jdbi\v3\sqlobject\BindListTest.java,exit,@AfterClass public static void  (){ handle.close(); } 
C:\Users\User\Desktop\Thesis\jdbi\stringtemplate4\src\test\java\org\jdbi\v3\sqlobject\BindListNullTest.java,LoggingParser,public  (List<String> log){ this.log=log; } 
C:\Users\User\Desktop\Thesis\jdbi\stringtemplate4\src\test\java\org\jdbi\v3\sqlobject\BindListNullTest.java,exit,@AfterClass public static void  (){ handle.close(); } 
C:\Users\User\Desktop\Thesis\jdbi\testing\src\main\java\org\jdbi\v3\testing\EmbeddedPostgresJdbiRule.java,EmbeddedPostgresJdbiRule, (){ embeddedPg=EmbeddedPostgresRules.singleInstance(); } 
C:\Users\User\Desktop\Thesis\jdbi\testing\src\main\java\org\jdbi\v3\testing\EmbeddedPostgresJdbiRule.java,apply,@Override public Statement  (Statement base Description description){ return embeddedPg.apply(super.apply(base description) description); } 
C:\Users\User\Desktop\Thesis\jdbi\testing\src\main\java\org\jdbi\v3\testing\EmbeddedPostgresJdbiRule.java,createJdbi,@Override protected Jdbi  (){ return Jdbi.create(embeddedPg.getEmbeddedPostgres().getPostgresDatabase()); } 
C:\Users\User\Desktop\Thesis\jdbi\stringtemplate4\src\test\java\org\jdbi\v3\stringtemplate4\TestStringTemplateLoading.java,setUp,@Before public void  () throws Exception { handle=dbRule.getSharedHandle(); } 
C:\Users\User\Desktop\Thesis\jdbi\stringtemplate4\src\test\java\org\jdbi\v3\stringtemplate4\TestStringTemplateLoading.java,testBaz,"public void  (int id){ Wombat wombat=handle.attach(Wombat.class); wombat.insert(new Something(id ""Doo"" + id)); String name=handle.createQuery(""select name from something where id = "" + id).mapTo(String.class).findOnly(); assertThat(name).isEqualTo(""Doo"" + id); } "
C:\Users\User\Desktop\Thesis\jdbi\stringtemplate4\src\test\java\org\jdbi\v3\stringtemplate4\TestStringTemplateLoading.java,testConcurrentLoading,@Test public void  () throws InterruptedException  ExecutionException { ExecutorService pool=Executors.newFixedThreadPool(10); IntStream.range(1 10).forEach(id -> pool.execute(() -> testBaz(id))); pool.awaitTermination(1000 TimeUnit.MILLISECONDS); } 
C:\Users\User\Desktop\Thesis\jdbi\testing\src\main\java\org\jdbi\v3\testing\JdbiRule.java,after,@Override protected void  (){ handle.close(); jdbi=null; } 
C:\Users\User\Desktop\Thesis\jdbi\testing\src\main\java\org\jdbi\v3\testing\JdbiRule.java,attach,public <T>T  (Class<T> extension){ return getHandle().attach(extension); } 
C:\Users\User\Desktop\Thesis\jdbi\testing\src\main\java\org\jdbi\v3\testing\JdbiRule.java,before,@Override protected void  () throws Throwable { jdbi=createJdbi(); if (installPlugins) { jdbi.installPlugins(); } plugins.forEach(jdbi::installPlugin); handle=jdbi.open(); } 
C:\Users\User\Desktop\Thesis\jdbi\testing\src\main\java\org\jdbi\v3\testing\JdbiRule.java,createJdbi,"@Override protected Jdbi  (){ return Jdbi.create(""jdbc:h2:mem:"" + UUID.randomUUID()); } "
C:\Users\User\Desktop\Thesis\jdbi\testing\src\main\java\org\jdbi\v3\testing\JdbiRule.java,embeddedPostgres,public static JdbiRule  (){ return new EmbeddedPostgresJdbiRule(); } 
C:\Users\User\Desktop\Thesis\jdbi\testing\src\main\java\org\jdbi\v3\testing\JdbiRule.java,getHandle,public Handle  (){ return handle; } 
C:\Users\User\Desktop\Thesis\jdbi\testing\src\main\java\org\jdbi\v3\testing\JdbiRule.java,getJdbi,public Jdbi  (){ return jdbi; } 
C:\Users\User\Desktop\Thesis\jdbi\testing\src\main\java\org\jdbi\v3\testing\JdbiRule.java,h2,"public static JdbiRule  (){ return new JdbiRule(){ @Override protected Jdbi createJdbi(){ return Jdbi.create(""jdbc:h2:mem:"" + UUID.randomUUID()); } } ; } "
C:\Users\User\Desktop\Thesis\jdbi\testing\src\main\java\org\jdbi\v3\testing\JdbiRule.java,withPlugin,public JdbiRule  (JdbiPlugin plugin){ plugins.add(plugin); return this; } 
C:\Users\User\Desktop\Thesis\jdbi\testing\src\main\java\org\jdbi\v3\testing\JdbiRule.java,withPlugins,public JdbiRule  (){ installPlugins=true; return this; } 
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\main\java\org\jdbi\v3\vavr\TupleMappers.java,TupleMappers,private  (TupleMappers that){ System.arraycopy(that.columns 0 this.columns 0 Tuple.MAX_ARITY); } 
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\main\java\org\jdbi\v3\vavr\TupleMappers.java,createCopy,@Override public TupleMappers  (){ return new TupleMappers(this); } 
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\main\java\org\jdbi\v3\vavr\TupleMappers.java,getColumn,public String  (int tupleIndex){ return columns[tupleIndex - 1]; } 
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\main\java\org\jdbi\v3\vavr\TupleMappers.java,getKeyColumn,@Override public String  (){ String column=getColumn(KEY_COLUMN_TUPLE_INDEX); if (column == null) { return this.registry.get(MapEntryMappers.class).getKeyColumn(); } return column; } 
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\main\java\org\jdbi\v3\vavr\TupleMappers.java,getValueColumn,@Override public String  (){ String column=getColumn(VALUE_COLUMN_TUPLE_INDEX); if (column == null) { return this.registry.get(MapEntryMappers.class).getValueColumn(); } return column; } 
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\main\java\org\jdbi\v3\vavr\TupleMappers.java,setColumn,public TupleMappers  (int tupleIndex String name){ columns[tupleIndex - 1]=name; return this; } 
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\main\java\org\jdbi\v3\vavr\TupleMappers.java,setKeyColumn,@Override public TupleMappers  (String keyColumn){ return setColumn(KEY_COLUMN_TUPLE_INDEX keyColumn); } 
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\main\java\org\jdbi\v3\vavr\TupleMappers.java,setRegistry,@Override public void  (ConfigRegistry registry){ this.registry=registry; } 
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\main\java\org\jdbi\v3\vavr\TupleMappers.java,setValueColumn,@Override public TupleMappers  (String valueColumn){ return setColumn(VALUE_COLUMN_TUPLE_INDEX valueColumn); } 
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\main\java\org\jdbi\v3\vavr\VavrGenericMapUtil.java,resolveMapEntryType,private static <K V>Type  (TypeToken<K> keyType TypeToken<V> valueType){ return new TypeToken<Tuple2<K V>>(){ } .where(new TypeParameter<K>(){ }  keyType).where(new TypeParameter<V>(){ }  valueType).getType(); } 
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\main\java\org\jdbi\v3\vavr\VavrGenericMapUtil.java,resolveMaplikeEntryType,private static Type  (Type maplikeType Type keyParam Type valueParam){ Type keyType=GenericTypes.resolveType(keyParam maplikeType); Type valueType=GenericTypes.resolveType(valueParam maplikeType); return resolveMapEntryType(keyType valueType); } 
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\main\java\org\jdbi\v3\vavr\VavrGenericMapUtil.java,resolveMultimapEntryType,static Type  (Type mapType){ return resolveMaplikeEntryType(mapType KEY_MULTIMAP VALUE_MULTIMAP); } 
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\main\java\org\jdbi\v3\vavr\VavrCollectors.java,toOption,public static <T>Collector<T ? Option<T>>  (){ return OptionalCollectors.toOptional(Option::none Option::of); } 
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\main\java\org\jdbi\v3\vavr\VavrCollectorFactory.java,accepts,@Override public boolean  (Type containerType){ Class<?> erasedType=getCollectionType(containerType); final boolean hasCollector=collectors.containsKey(erasedType); return (hasCollector || hasDefaultImplementationWithCollector(erasedType)) && containerTyp
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\main\java\org\jdbi\v3\vavr\VavrCollectorFactory.java,build,@Override public Collector<? ? ?>  (Type containerType){ Class<?> erasedType=getCollectionType(containerType); return collectors.getOrElse(erasedType Lazy.val(() -> resolveDefaultCollector(erasedType).get() Collector.class)); } 
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\main\java\org\jdbi\v3\vavr\VavrCollectorFactory.java,elementType,@Override public Optional<Type>  (Type containerType){ Class<?> erasedType=getCollectionType(containerType); if (Map.class.isAssignableFrom(erasedType)) { return Optional.of(VavrGenericMapUtil.resolveMapEntryType(containerType)); } else if (Multimap.class
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\main\java\org\jdbi\v3\vavr\VavrCollectorFactory.java,getCollectionType,private Class<?>  (Type containerType){ return getErasedType(containerType); } 
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\main\java\org\jdbi\v3\vavr\VavrCollectorFactory.java,hasDefaultImplementationWithCollector,private boolean  (Class<?> erasedType){ return resolveDefaultCollector(erasedType).isDefined(); } 
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\main\java\org\jdbi\v3\vavr\VavrCollectorFactory.java,resolveDefaultCollector,private Option<Collector<? ? ?>>  (Class<?> erasedType){ return defaultImplementations.get(erasedType).flatMap(collectors::get); } 
C:\Users\User\Desktop\Thesis\jdbi\stringtemplate4\src\test\java\org\jdbi\v3\sqlobject\BindBeanListTest.java,SomethingKey, (int id String name){ this.id=id; this.name=name; } 
C:\Users\User\Desktop\Thesis\jdbi\stringtemplate4\src\test\java\org\jdbi\v3\sqlobject\BindBeanListTest.java,exit,@AfterClass public static void  (){ handle.close(); } 
C:\Users\User\Desktop\Thesis\jdbi\stringtemplate4\src\test\java\org\jdbi\v3\sqlobject\BindBeanListTest.java,get,"@SqlQuery(""select id  name from something where (id  name) in (<keys>)"") List<Something>  (@BindBeanList(propertyNames={""id"" ""name""}) Iterator<SomethingKey> keys); "
C:\Users\User\Desktop\Thesis\jdbi\stringtemplate4\src\test\java\org\jdbi\v3\sqlobject\BindBeanListTest.java,getId,public int  (){ return id; } 
C:\Users\User\Desktop\Thesis\jdbi\stringtemplate4\src\test\java\org\jdbi\v3\sqlobject\BindBeanListTest.java,getName,public String  (){ return name; } 
C:\Users\User\Desktop\Thesis\jdbi\stringtemplate4\src\test\java\org\jdbi\v3\sqlobject\BindBeanListTest.java,init,"@BeforeClass public static void  (){ final Jdbi db=dbRule.getJdbi(); db.installPlugin(new SqlObjectPlugin()); db.registerRowMapper(new SomethingMapper()); handle=db.open(); handle.execute(""insert into something(id  name) values(1  '1')""); handle.execute("""
C:\Users\User\Desktop\Thesis\jdbi\stringtemplate4\src\test\java\org\jdbi\v3\sqlobject\BindBeanListTest.java,testSomethingByArrayWithEmptyArray,@Test(expected=IllegalArgumentException.class) public void  (){ final SomethingByArray s=handle.attach(SomethingByArray.class); s.get(new SomethingKey[]{}); } 
C:\Users\User\Desktop\Thesis\jdbi\stringtemplate4\src\test\java\org\jdbi\v3\sqlobject\BindBeanListTest.java,testSomethingByArrayWithNonEmptyArray,"@Test public void  (){ final SomethingByVarargs s=handle.attach(SomethingByVarargs.class); final List<Something> out=s.get(new SomethingKey(1 ""1"") new SomethingKey(2 ""2"")); assertThat(out).hasSameElementsAs(expectedSomethings); } "
C:\Users\User\Desktop\Thesis\jdbi\stringtemplate4\src\test\java\org\jdbi\v3\sqlobject\BindBeanListTest.java,testSomethingByArrayWithNull,@Test(expected=IllegalArgumentException.class) public void  (){ final SomethingByArray s=handle.attach(SomethingByArray.class); s.get(null); } 
C:\Users\User\Desktop\Thesis\jdbi\stringtemplate4\src\test\java\org\jdbi\v3\sqlobject\BindBeanListTest.java,testSomethingByIterableWithEmptyIterable,@Test(expected=IllegalArgumentException.class) public void  (){ final SomethingByIterable s=handle.attach(SomethingByIterable.class); final List<Something> out=s.get(new ArrayList<>()); assertThat(out).isEmpty(); } 
C:\Users\User\Desktop\Thesis\jdbi\stringtemplate4\src\test\java\org\jdbi\v3\sqlobject\BindBeanListTest.java,testSomethingByIterableWithIterable,"@Test public void  (){ final SomethingByIterable s=handle.attach(SomethingByIterable.class); final List<Something> out=s.get(() -> Arrays.asList(new SomethingKey(1 ""1"") new SomethingKey(2 ""2"")).iterator()); assertThat(out).hasSameElementsAs(expectedSometh"
C:\Users\User\Desktop\Thesis\jdbi\stringtemplate4\src\test\java\org\jdbi\v3\sqlobject\BindBeanListTest.java,testSomethingByIterator,"public void  (){ final SomethingByIterator s=handle.attach(SomethingByIterator.class); List<Something> results=s.get(Arrays.asList(new SomethingKey(1 ""1"") new SomethingKey(2 ""2"")).iterator()); assertThat(results).hasSameElementsAs(expectedSomethings); } "
C:\Users\User\Desktop\Thesis\jdbi\stringtemplate4\src\test\java\org\jdbi\v3\sqlobject\BindBeanListTest.java,testSomethingByVarargsWithEmptyVarargs,@Test(expected=IllegalArgumentException.class) public void  (){ final SomethingByVarargs s=handle.attach(SomethingByVarargs.class); final List<Something> out=s.get(); } 
C:\Users\User\Desktop\Thesis\jdbi\stringtemplate4\src\test\java\org\jdbi\v3\sqlobject\BindBeanListTest.java,testSomethingByVarargsWithVarargs,"@Test public void  (){ final SomethingByVarargs s=handle.attach(SomethingByVarargs.class); final List<Something> out=s.get(new SomethingKey(1 ""1"") new SomethingKey(2 ""2"")); assertThat(out).hasSameElementsAs(expectedSomethings); } "
C:\Users\User\Desktop\Thesis\jdbi\stringtemplate4\src\test\java\org\jdbi\v3\sqlobject\BindBeanListTest.java,testSomethingWithExplicitAttributeName,"@Test public void  (){ final SomethingWithExplicitAttributeName s=handle.attach(SomethingWithExplicitAttributeName.class); final List<Something> out=s.get(new SomethingKey(1 ""1"") new SomethingKey(2 ""2"")); assertThat(out).hasSameElementsAs(expectedSomethin"
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\main\java\org\jdbi\v3\vavr\VavrPlugin.java,customizeJdbi,@Override public void  (Jdbi jdbi){ jdbi.registerCollector(new VavrCollectorFactory()); jdbi.registerRowMapper(new VavrTupleRowMapperFactory()); jdbi.registerArgument(new VavrValueArgumentFactory()); jdbi.registerColumnMapper(VavrOptionMapper.factory()); 
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\main\java\org\jdbi\v3\vavr\VavrValueArgumentFactory.java,build,@Override public Optional<Argument>  (Type type Object value ConfigRegistry config){ if (value instanceof Option || value instanceof Lazy || value instanceof Try|| value instanceof Either|| value instanceof Validation) { return buildValueArgument(type con
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\main\java\org\jdbi\v3\vavr\VavrValueArgumentFactory.java,buildValueArgument,private Optional<Argument>  (Type type ConfigRegistry config Value<?> value){ Type nestedType=findGenericParameter(type Value.class).orElseGet(() -> extractTypeOfValue(value)); Object nestedValue=value.getOrNull(); return resolveNestedFromConfigured(config nestedType nestedValue); } 
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\main\java\org\jdbi\v3\vavr\VavrValueArgumentFactory.java,extractTypeOfValue,private Type  (Value<?> value){ Value<Class<?>> classOfValue=value.map(Object::getClass); return classOfValue.getOrElse(Object.class); } 
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\main\java\org\jdbi\v3\vavr\VavrValueArgumentFactory.java,resolveNestedFromConfigured,Optional<Argument>  (ConfigRegistry config Type nestedType Object nestedValue){ return config.get(Arguments.class).findFor(nestedType nestedValue); } 
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\main\java\org\jdbi\v3\vavr\VavrOptionMapper.java,VavrOptionMapper,private  (Type nestedType){ this.nestedType=nestedType; } 
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\main\java\org\jdbi\v3\vavr\VavrOptionMapper.java,factory,"static ColumnMapperFactory  (){ return (type config) -> { Class<?> rawType=getErasedType(type); if (rawType == Option.class) { final Type nestedType=GenericTypes.findGenericParameter(type Option.class).orElseThrow(() -> new NoSuchMapperException(""No mapper for raw Option type"")); return Optional.of(new VavrOptionMapper<>(nestedType)); } return Optional.empty(); } ; } "
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\main\java\org\jdbi\v3\vavr\VavrOptionMapper.java,map,"@SuppressWarnings(""unchecked"") @Override public Option<T>  (ResultSet r int columnNumber StatementContext ctx) throws SQLException { final ColumnMapper<?> mapper=ctx.findColumnMapperFor(nestedType).orElseThrow(() -> new NoSuchMapperException(""No mapper fo"
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\test\java\org\jdbi\v3\vavr\TestVavrCollectorFactory.java,setUp,@Before public void  (){ unit=new VavrCollectorFactory(); } 
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\test\java\org\jdbi\v3\vavr\TestVavrCollectorFactory.java,testAcceptCollectionImplementationTypes_shouldSucceed,@Test public void  (){ assertTrue(unit.accepts(new GenericType<Array<?>>(){ } .getType())); assertTrue(unit.accepts(new GenericType<Vector<?>>(){ } .getType())); assertTrue(unit.accepts(new GenericType<List<?>>(){ } .getType())); assertTrue(unit.accepts(n
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\test\java\org\jdbi\v3\vavr\TestVavrCollectorFactory.java,testAcceptCollectionSuperTypes_shouldSucceed,@Test public void  (){ assertTrue(unit.accepts(new GenericType<Traversable<?>>(){ } .getType())); assertTrue(unit.accepts(new GenericType<Seq<?>>(){ } .getType())); assertTrue(unit.accepts(new GenericType<IndexedSeq<?>>(){ } .getType())); assertTrue(unit.
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\test\java\org\jdbi\v3\vavr\TestVavrCollectorFactory.java,testAcceptNonVavrCollection_shouldFail,@Test public void  (){ assertFalse(unit.accepts(new GenericType<java.util.List<?>>(){ } .getType())); assertFalse(unit.accepts(new GenericType<java.util.Map<? ?>>(){ } .getType())); } 
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\test\java\org\jdbi\v3\vavr\TestVavrCollectorFactoryWithDB.java,addData,"@Before public void  (){ for ( Integer i : expected) { dbRule.getSharedHandle().execute(""insert into something(name  intValue) values (?  ?)"" Integer.toString(i) + ""asString"" i); } } "
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\test\java\org\jdbi\v3\vavr\TestVavrCollectorFactoryWithDB.java,testMapCollector,@Test public void  (){ testMapType(new GenericType<HashMap<Integer String>>(){ } ); testMapType(new GenericType<LinkedHashMap<Integer String>>(){ } ); testMapType(new GenericType<TreeMap<Integer String>>(){ } ); testMapType(new GenericType<HashMultimap<In
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\test\java\org\jdbi\v3\vavr\TestVavrCollectorFactoryWithDB.java,testMapCollectorReversed_shouldFail,"@Test public void  (){ assertThatThrownBy(() -> dbRule.getSharedHandle().createQuery(""select intValue  name from something"").collectInto(new GenericType<HashMap<String Integer>>(){ } )).isInstanceOf(ResultSetException.class); } "
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\test\java\org\jdbi\v3\vavr\TestVavrCollectorFactoryWithDB.java,testMapType,"private <T extends Traversable<Tuple2<Integer String>>>void  (GenericType<T> containerType){ T values=dbRule.getSharedHandle().createQuery(""select intValue  name from something"").collectInto(containerType); assertThat(values).containsOnlyElementsOf(expectedMap); } "
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\test\java\org\jdbi\v3\vavr\TestVavrCollectorFactoryWithDB.java,testMultimapValues_addAnotherDataSet_shouldHave2ValuesForEachKey,"@Test public void  (){ final int offset=10; for ( Integer i : expected) { dbRule.getSharedHandle().execute(""insert into something(name  intValue) values (?  ?)"" Integer.toString(i + offset) + ""asString"" i); } Multimap<Integer String> result=dbRule.getShar"
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\test\java\org\jdbi\v3\vavr\TestVavrCollectorFactoryWithDB.java,testToAbstractCollectionTypes_shouldSucceed,@Test public void  (){ testType(new GenericType<Traversable<Integer>>(){ } ); testType(new GenericType<Seq<Integer>>(){ } ); testType(new GenericType<IndexedSeq<Integer>>(){ } ); testType(new GenericType<LinearSeq<Integer>>(){ } ); testType(new GenericTyp
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\test\java\org\jdbi\v3\vavr\TestVavrCollectorFactoryWithDB.java,testToConcreteCollectionTypes_shouldSucceed,@Test public void  (){ testType(new GenericType<Array<Integer>>(){ } ); testType(new GenericType<Vector<Integer>>(){ } ); testType(new GenericType<List<Integer>>(){ } ); testType(new GenericType<Stream<Integer>>(){ } ); testType(new GenericType<Queue<Inte
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\test\java\org\jdbi\v3\vavr\TestVavrCollectorFactoryWithDB.java,testType,"private <T extends Iterable<Integer>>void  (GenericType<T> containerType){ T values=dbRule.getSharedHandle().createQuery(""select intValue from something"").collectInto(containerType); assertThat(values).containsOnlyElementsOf(expected); } "
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\test\java\org\jdbi\v3\vavr\TestVavrOptionMapperWithDB.java,SomethingWithOption,public  (int id Option<String> name){ this.id=id; this.name=name; } 
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\test\java\org\jdbi\v3\vavr\TestVavrOptionMapperWithDB.java,addData,"@Before public void  (){ Handle handle=dbRule.openHandle(); handle.createUpdate(""insert into something (id  name) values (1  'eric')"").execute(); handle.createUpdate(""insert into something (id) values (2)"").execute(); } "
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\test\java\org\jdbi\v3\vavr\TestVavrOptionMapperWithDB.java,equals,@Override public boolean  (Object o){ if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; SomethingWithOption that=(SomethingWithOption)o; return id == that.id && Objects.equals(name that.name); } 
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\test\java\org\jdbi\v3\vavr\TestVavrOptionMapperWithDB.java,getName,public Option<String>  (){ return name; } 
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\test\java\org\jdbi\v3\vavr\TestVavrOptionMapperWithDB.java,hashCode,@Override public int  (){ return Objects.hash(id name); } 
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\test\java\org\jdbi\v3\vavr\TestVavrOptionMapperWithDB.java,testOptionMappedWithinObjectIfPresent_shouldContainValue,"@Test public void  () throws SQLException { final SomethingWithOption result=dbRule.getSharedHandle().registerRowMapper(ConstructorMapper.factory(SomethingWithOption.class)).createQuery(""select id  name from something where id = 1"").mapTo(SomethingWithOpt"
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\test\java\org\jdbi\v3\vavr\TestVavrOptionMapperWithDB.java,testOptionMappedWithoutGenericParameter_shouldFail,"@Test public void  () throws SQLException { assertThatThrownBy(() -> dbRule.getSharedHandle().registerRowMapper(ConstructorMapper.factory(SomethingWithOption.class)).createQuery(""select name from something"").collectInto(new GenericType<Set<Option>>(){ } )"
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\test\java\org\jdbi\v3\vavr\TestVavrOptionMapperWithDB.java,testOptionMappedWithoutNestedMapper_shouldFail,"@Test public void  () throws SQLException { assertThatThrownBy(() -> dbRule.getSharedHandle().createQuery(""select id  name from something"").collectInto(new GenericType<Set<Option<SomethingWithOption>>>(){ } )).isInstanceOf(NoSuchMapperException.class).has"
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\test\java\org\jdbi\v3\vavr\TestVavrOptionMapperWithDB.java,testOptionMapped_shouldSucceed,"@Test public void  () throws SQLException { final Set<Option<String>> result=dbRule.getSharedHandle().createQuery(""select name from something"").collectInto(new GenericType<Set<Option<String>>>(){ } ); assertThat(result).hasSize(2); assertThat(result).cont"
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\test\java\org\jdbi\v3\vavr\TestVavrOptionMapperWithDB.java,testOptionWithinObjectIfMissing_shouldBeNone,"@Test public void  () throws SQLException { final SomethingWithOption result=dbRule.getSharedHandle().registerRowMapper(ConstructorMapper.factory(SomethingWithOption.class)).createQuery(""select id  name from something where id = 2"").mapTo(SomethingWithOpt"
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\test\java\org\jdbi\v3\vavr\TestVavrMapCollectorWithDB.java,User,public  (int id String name){ this.id=id; this.name=name; } 
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\test\java\org\jdbi\v3\vavr\TestVavrMapCollectorWithDB.java,addData,"@Before public void  (){ dbRule.getSharedHandle().execute(""create table keyval ("" + ""idx int  "" + ""val_c varchar(10)  ""+ ""key_c varchar(10)""+ "")""); for ( Integer i : expected) { dbRule.getSharedHandle().execute(""insert into keyval(idx  val_c  key_c) value"
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\test\java\org\jdbi\v3\vavr\TestVavrMapCollectorWithDB.java,equals,@Override public boolean  (Object o){ if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; User user=(User)o; return id == user.id && Objects.equals(name user.name); } 
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\test\java\org\jdbi\v3\vavr\TestVavrMapCollectorWithDB.java,hashCode,@Override public int  (){ return Objects.hash(id name); } 
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\test\java\org\jdbi\v3\vavr\TestVavrMapCollectorWithDB.java,testMapCollectorWithCorrespondingTupleCols_shouldSucceed,"@Test public void  (){ HashMap<String String> valueMap=dbRule.getSharedHandle().configure(TupleMappers.class c -> c.setColumn(1 ""key_c"").setColumn(2 ""val_c"")).createQuery(""select val_c  key_c from keyval"").collectInto(new GenericType<HashMap<String String"
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\test\java\org\jdbi\v3\vavr\TestVavrMapCollectorWithDB.java,testMapCollectorWithGlobalKeyValue_shouldSucceed,"@Test public void  (){ Jdbi jdbiWithKeyColAndValCol=dbRule.getJdbi().setMapKeyColumn(""key_c"").setMapValueColumn(""val_c""); Boolean executed=jdbiWithKeyColAndValCol.withHandle(h -> { HashMap<String String> valueMap=h.createQuery(""select val_c  key_c from ke"
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\test\java\org\jdbi\v3\vavr\TestVavrMapCollectorWithDB.java,testMapCollectorWithTupleConfig_shouldSucceed,"@Test public void  (){ HashMap<String String> valueMap=dbRule.getSharedHandle().configure(TupleMappers.class c -> c.setKeyColumn(""key_c"").setValueColumn(""val_c"")).createQuery(""select val_c  key_c from keyval"").collectInto(new GenericType<HashMap<String St"
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\test\java\org\jdbi\v3\vavr\TestVavrMapCollectorWithDB.java,testNonUniqueIndex_withMultimap,"@Test public void  (){ Handle h=dbRule.getSharedHandle(); h.execute(""create table user (id int  name varchar)""); h.prepareBatch(""insert into user (id  name) values (?  ?)"").add(1 ""alice"").add(2 ""bob"").add(3 ""alice"").execute(); Multimap<String User> usersB"
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\test\java\org\jdbi\v3\vavr\TestVavrMapCollectorWithDB.java,testSingleInstanceAssignmentWithSelectedKeyValue_shouldSucceed,"@Test public void  (){ Handle handle=dbRule.getSharedHandle().configure(MapEntryMappers.class c -> c.setKeyColumn(""key_c"").setValueColumn(""val_c"")); Optional<Tuple2<String String>> valueMap=handle.createQuery(""select val_c  key_c from keyval"").mapTo(new G"
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\test\java\org\jdbi\v3\vavr\TestVavrMapCollectorWithDB.java,toString,"@Override public String  (){ return ""User{"" + ""id="" + id + ""  name='""+ name+ '\''+ '}'; } "
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\test\java\org\jdbi\v3\vavr\TestVavrMapCollectorWithDB.java,uniqueIndex,"@Test public void  (){ Handle h=dbRule.getSharedHandle(); h.execute(""create table user (id int  name varchar)""); h.prepareBatch(""insert into user (id  name) values (?  ?)"").add(1 ""alice"").add(2 ""bob"").add(3 ""cathy"").add(4 ""dilbert"").execute(); Map<Integer"
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\test\java\org\jdbi\v3\vavr\TestVavrTupleMapperWithDB.java,addData,"@Before public void  (){ dbRule.getSharedHandle().execute(""create table tuples ("" + ""t1 int  "" + ""t2 varchar(10)  ""+ ""t3 varchar(255)  ""+ "")""); for ( Integer i : expected) { dbRule.getSharedHandle().execute(""insert into tuples values (?  ?  ?)"" i ""t2"" + i"
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\test\java\org\jdbi\v3\vavr\TestVavrTupleMapperWithDB.java,testMapToTuple1_shouldSucceed,"@Test public void  (){ Tuple1<String> tupleProjection=dbRule.getSharedHandle().createQuery(""select t2 from tuples order by t1 asc"").mapTo(new GenericType<Tuple1<String>>(){ } ).findFirst().get(); assertThat(tupleProjection).isEqualTo(Tuple.of(""t20"")); } "
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\test\java\org\jdbi\v3\vavr\TestVavrTupleMapperWithDB.java,testMapToTuple2List_shouldSucceed,"@Test public void  (){ List<Tuple2<Integer String>> expectedTuples=expected.map(i -> new Tuple2<>(i ""t2"" + i)); java.util.List<Tuple2<Integer String>> tupleProjection=dbRule.getSharedHandle().createQuery(""select t1  t2 from tuples"").mapTo(new GenericType<"
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\test\java\org\jdbi\v3\vavr\TestVavrTupleMapperWithDB.java,testTuple1CollectorWithMultiSelect_shouldFail,"@Test(expected=ResultSetException.class) public void  (){ dbRule.getSharedHandle().createQuery(""select t2  t3 from tuples"").collectInto(new GenericType<List<Tuple1<Integer>>>(){ } ); } "
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\test\java\org\jdbi\v3\vavr\TestVavrTupleMapperWithDB.java,testTuple1CollectorWithMultiSelect_shouldSucceed,"@Test public void  (){ List<Tuple1<Integer>> firstColumnTuples=expected.map(Tuple1::new); List<Tuple1<Integer>> tupleProjection=dbRule.getSharedHandle().createQuery(""select * from tuples"").collectInto(new GenericType<List<Tuple1<Integer>>>(){ } ); assertT"
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\test\java\org\jdbi\v3\vavr\TestVavrTupleMapperWithDB.java,testTuple1CollectorWithSingleSelect_shouldSucceed,"@Test public void  (){ List<Tuple1<String>> expectedTuples=expected.map(i -> new Tuple1<>(""t2"" + i)); List<Tuple1<String>> tupleProjection=dbRule.getSharedHandle().createQuery(""select t2 from tuples"").collectInto(new GenericType<List<Tuple1<String>>>(){ }"
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\test\java\org\jdbi\v3\vavr\TestVavrTupleMapperWithDB.java,testTuple3CollectorWithSelectedKeyValue_shouldSucceed,"@Test public void  (){ List<Tuple3<Integer String String>> expectedTuples=expected.map(i -> new Tuple3<>(i ""t2"" + i ""t3"" + (i + 1))); List<Tuple3<Integer String String>> tupleProjection=dbRule.getSharedHandle().createQuery(""select t1  t2  t3 from tuples"")"
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\test\java\org\jdbi\v3\vavr\TestVavrTupleRowMapperFactory.java,assertMapper,private void  (Optional<RowMapper<?>> mapper Tuple expected) throws SQLException { assertThat(mapper.isPresent()); assertThat(mapper.get()).isInstanceOf(RowMapper.class); assertThat(mapper.get().map(null null)).isEqualTo(expected); } 
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\test\java\org\jdbi\v3\vavr\TestVavrTupleRowMapperFactory.java,getColumnMapper,@Override Optional<RowMapper<?>>  (Type type int tupleIndex ConfigRegistry config){ return Optional.of((rs ctx) -> tupleIndex); } 
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\test\java\org\jdbi\v3\vavr\TestVavrTupleRowMapperFactory.java,getConfiguredColumnName,@Override Option<String>  (int tupleIndex ConfigRegistry config){ return Option.none(); } 
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\test\java\org\jdbi\v3\vavr\TestVavrTupleRowMapperFactory.java,resolveKeyValueColumns,@Override Array<Tuple3<Type Integer Option<String>>>  (ConfigRegistry config Array<Tuple2<Type Integer>> tupleTypes){ return tupleTypes.map(t -> Tuple.of(t._1 t._2 Option.<String>none())); } 
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\test\java\org\jdbi\v3\vavr\TestVavrTupleRowMapperFactory.java,setUp,@Before public void  () throws Exception { unit=new VavrTupleRowMapperFactory(){ @Override Optional<RowMapper<?>> getColumnMapper( Type type  int tupleIndex  ConfigRegistry config){ return Optional.of((rs ctx) -> tupleIndex); } @Override Option<String> ge
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\test\java\org\jdbi\v3\vavr\TestVavrTupleRowMapperFactory.java,testBuildRowMapperForTuple0_shouldFail,@Test public void  () throws SQLException { assertThat(unit.build(Tuple0.class null)).isEmpty(); } 
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\test\java\org\jdbi\v3\vavr\TestVavrTupleRowMapperFactory.java,testBuildRowMapperForTuple1_shouldSucceed,@Test public void  () throws SQLException { testProjectionMapper(new GenericType<Tuple1<Integer>>(){ }  Tuple.of(1)); } 
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\test\java\org\jdbi\v3\vavr\TestVavrTupleRowMapperFactoryWithDB.java,SomethingValues, (int integerValue int intValue){ this.integerValue=integerValue; this.intValue=intValue; } 
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\test\java\org\jdbi\v3\vavr\TestVavrTupleRowMapperFactory.java,testBuildRowMapperForTuple2_shouldSucceed,@Test public void  () throws SQLException { testProjectionMapper(new GenericType<Tuple2<Integer Integer>>(){ }  Tuple.of(1 2)); } 
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\test\java\org\jdbi\v3\vavr\TestVavrTupleRowMapperFactory.java,testBuildRowMapperForTuple3_shouldSucceed,@Test public void  () throws SQLException { testProjectionMapper(new GenericType<Tuple3<Integer Integer Integer>>(){ }  Tuple.of(1 2 3)); } 
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\test\java\org\jdbi\v3\vavr\TestVavrTupleRowMapperFactory.java,testBuildRowMapperForTuple4_shouldSucceed,@Test public void  () throws SQLException { testProjectionMapper(new GenericType<Tuple4<? ? ? ?>>(){ }  Tuple.of(1 2 3 4)); } 
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\test\java\org\jdbi\v3\vavr\TestVavrTupleRowMapperFactoryWithDB.java,addData,"@Before public void  (){ Handle handle=dbRule.openHandle(); handle.createUpdate(""insert into something (id  name  integerValue  intValue) values (1  'eric'  99  100)"").execute(); handle.createUpdate(""insert into something (id  name  integerValue  intValue"
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\test\java\org\jdbi\v3\vavr\TestVavrTupleRowMapperFactory.java,testBuildRowMapperForTuple5_shouldSucceed,@Test public void  () throws SQLException { testProjectionMapper(new GenericType<Tuple5<? ? ? ? ?>>(){ }  Tuple.of(1 2 3 4 5)); } 
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\test\java\org\jdbi\v3\vavr\TestVavrTupleRowMapperFactory.java,testBuildRowMapperForTuple6_shouldSucceed,@Test public void  () throws SQLException { testProjectionMapper(new GenericType<Tuple6<? ? ? ? ? ?>>(){ }  Tuple.of(1 2 3 4 5 6)); } 
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\test\java\org\jdbi\v3\vavr\TestVavrTupleRowMapperFactory.java,testBuildRowMapperForTuple7_shouldSucceed,@Test public void  () throws SQLException { testProjectionMapper(new GenericType<Tuple7<? ? ? ? ? ? ?>>(){ }  Tuple.of(1 2 3 4 5 6 7)); } 
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\test\java\org\jdbi\v3\vavr\TestVavrTupleRowMapperFactoryWithDB.java,equals,@Override public boolean  (Object o){ if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; SomethingValues that=(SomethingValues)o; if (integerValue != that.integerValue) return false; return intValue == that.intValue; } 
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\test\java\org\jdbi\v3\vavr\TestVavrTupleRowMapperFactory.java,testBuildRowMapperForTuple8_shouldSucceed,@Test public void  () throws SQLException { testProjectionMapper(new GenericType<Tuple8<? ? ? ? ? ? ? ?>>(){ }  Tuple.of(1 2 3 4 5 6 7 8)); } 
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\test\java\org\jdbi\v3\vavr\TestVavrTupleRowMapperFactory.java,testBuildRowMapperForUntypedTuple_shouldFail,@Test public void  () throws SQLException { assertThat(unit.build(Tuple.class null)).isEmpty(); } 
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\test\java\org\jdbi\v3\vavr\TestVavrTupleRowMapperFactoryWithDB.java,hashCode,@Override public int  (){ int result=integerValue; result=31 * result + intValue; return result; } 
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\test\java\org\jdbi\v3\vavr\TestVavrTupleRowMapperFactory.java,testProjectionMapper,private void  (GenericType<? extends Tuple> projection Tuple expected) throws SQLException { Optional<RowMapper<?>> mapper=unit.build(projection.getType() null); assertMapper(mapper expected); } 
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\test\java\org\jdbi\v3\vavr\TestVavrTupleRowMapperFactoryWithDB.java,testMapTuple1UsingRegisteredRowMapper_shouldSucceed,"@Test public void  () throws SQLException { Handle handle=dbRule.getSharedHandle(); handle.registerRowMapper(new SomethingMapper()); Tuple1<Something> result=handle.createQuery(""select id  name from something where id = 1"").mapTo(new GenericType<Tuple1<So"
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\test\java\org\jdbi\v3\vavr\TestVavrTupleRowMapperFactoryWithDB.java,testMapTuple1WithNameOnlyUsingColumnMapper_shouldSucceed,"@Test public void  () throws SQLException { Tuple1<String> result=dbRule.getSharedHandle().createQuery(""select name from something where id = 1"").mapTo(new GenericType<Tuple1<String>>(){ } ).findOnly(); assertThat(result._1).isEqualToIgnoringCase(""eric"");"
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\test\java\org\jdbi\v3\vavr\TestVavrTupleRowMapperFactoryWithDB.java,testMapTuple2HavingOnlyOneRowMapper_shouldFail,"@Test public void  () throws SQLException { final Handle handle=dbRule.getSharedHandle(); handle.registerRowMapper(new SomethingMapper()); assertThatThrownBy(() -> handle.createQuery(""select * from something where id = 1"").mapTo(new GenericType<Tuple2<Som"
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\test\java\org\jdbi\v3\vavr\TestVavrTupleRowMapperFactoryWithDB.java,testMapTuple2SelectedColumns_shouldSucceed,"@Test public void  () throws SQLException { Tuple2<Integer String> result=dbRule.getSharedHandle().createQuery(""select intValue  name from something where id = 2"").mapTo(new GenericType<Tuple2<Integer String>>(){ } ).findOnly(); assertThat(result._1).isEq"
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\test\java\org\jdbi\v3\vavr\TestVavrTupleRowMapperFactoryWithDB.java,testMapTuple2UsingRegisteredRowMappers_shouldSucceed,"@Test public void  () throws SQLException { Handle handle=dbRule.getSharedHandle(); handle.registerRowMapper(new SomethingMapper()); handle.registerRowMapper(SomethingValues.class (rs ctx) -> new SomethingValues(rs.getInt(""integerValue"") rs.getInt(""intVal"
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\test\java\org\jdbi\v3\vavr\TestVavrTupleRowMapperFactoryWithDB.java,testMapTuple3WithAllSpecifiedColumns_shouldRespectConfiguration,"@Test public void  () throws SQLException { Handle handle=dbRule.getSharedHandle(); handle.configure(TupleMappers.class c -> c.setColumn(1 ""integerValue"").setColumn(2 ""intValue"").setColumn(3 ""id"")); Tuple3<Integer Integer Integer> result=handle.createQuer"
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\test\java\org\jdbi\v3\vavr\TestVavrTupleRowMapperFactoryWithDB.java,testMapTuple3WithExtraSpecifiedColumn_shouldSucceed,"@Test public void  () throws SQLException { Handle handle=dbRule.getSharedHandle(); handle.registerRowMapper(new SomethingMapper()); handle.configure(TupleMappers.class c -> c.setColumn(2 ""integerValue"").setColumn(3 ""intValue"")); Tuple3<Something Integer "
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\test\java\org\jdbi\v3\vavr\TestVavrTupleRowMapperFactoryWithDB.java,testMapTuple3WithOnlyOneSpecifiedColumn_shouldFail,"@Test public void  () throws SQLException { Handle handle=dbRule.getSharedHandle(); handle.registerRowMapper(new SomethingMapper()); handle.configure(TupleMappers.class c -> c.setColumn(1 ""integerValue"")); assertThatThrownBy(() -> handle.createQuery(""sele"
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\test\java\org\jdbi\v3\vavr\TestVavrTupleRowMapperFactoryWithDB.java,testMapTuple3WithoutSpecifiedColumn_shouldFail,"@Test public void  () throws SQLException { Handle handle=dbRule.getSharedHandle(); handle.registerRowMapper(new SomethingMapper()); assertThatThrownBy(() -> handle.createQuery(""select * from something where id = 1"").mapTo(new GenericType<Tuple3<Integer S"
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\test\java\org\jdbi\v3\vavr\TestVavrTupleRowMapperFactoryWithDB.java,testMapTuple4AllColumns_shouldSucceed,"@Test public void  () throws SQLException { Tuple4<Integer String Integer Integer> result=dbRule.getSharedHandle().createQuery(""select * from something where id = 2"").mapTo(new GenericType<Tuple4<Integer String Integer Integer>>(){ } ).findOnly(); assertT"
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\test\java\org\jdbi\v3\vavr\TestVavrValueArgumentFactory.java,resolveNestedFromConfigured,@Override Optional<Argument>  (ConfigRegistry config Type nestedType Object nestedValue){ return Optional.of(MOCK_ARGUMENT); } 
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\test\java\org\jdbi\v3\vavr\TestVavrValueArgumentFactory.java,setUp,@Before public void  () throws Exception { unit=new VavrValueArgumentFactory(){ @Override Optional<Argument> resolveNestedFromConfigured( ConfigRegistry config  Type nestedType  Object nestedValue){ return Optional.of(MOCK_ARGUMENT); } } ; } 
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\test\java\org\jdbi\v3\vavr\TestVavrValueArgumentFactory.java,testGetArgumentNotPartOfFactory2_shouldBeEmpty,@Test public void  (){ Optional<Argument> arg=unit.build(new GenericType<Integer>(){ } .getType() null null); assertThat(arg).isEmpty(); } 
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\test\java\org\jdbi\v3\vavr\TestVavrValueArgumentFactory.java,testGetArgumentNotPartOfFactory_shouldBeEmpty,@Test public void  (){ Optional<Argument> arg=unit.build(new GenericType<Option<Integer>>(){ } .getType() 1 null); assertThat(arg).isEmpty(); } 
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\test\java\org\jdbi\v3\vavr\TestVavrValueArgumentFactory.java,testGetArgumentOfNone_shouldNotBeEmpty,@Test public void  (){ Optional<Argument> arg=unit.build(new GenericType<Option<Integer>>(){ } .getType() Option.none() null); assertThat(arg).isNotEmpty(); } 
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\test\java\org\jdbi\v3\vavr\TestVavrValueArgumentFactory.java,testGetBadLazyArgument_shouldThrow,@Test public void  (){ Lazy<Object> badEvaluatingLazy=Lazy.of(() -> { throw new TestSpecificException(); } ); assertThatThrownBy(() -> unit.build(new GenericType<Lazy<Integer>>(){ } .getType() badEvaluatingLazy null)).isInstanceOf(TestSpecificException.cl
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\test\java\org\jdbi\v3\vavr\TestVavrValueArgumentFactory.java,testGetFailedTryArgument_shouldNotBeEmpty,@Test public void  (){ Optional<Argument> arg=unit.build(new GenericType<Try<Integer>>(){ } .getType() Try.failure(new TestSpecificException()) null); assertThat(arg).isNotEmpty(); } 
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\test\java\org\jdbi\v3\vavr\TestVavrValueArgumentFactory.java,testGetInvalidValidationArgument_shouldNotBeEmpty,"@Test public void  (){ Optional<Argument> arg=unit.build(new GenericType<Validation<String Integer>>(){ } .getType() Validation.invalid(""error"") null); assertThat(arg).isNotEmpty(); } "
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\test\java\org\jdbi\v3\vavr\TestVavrValueArgumentFactory.java,testGetLazyArgumentInferred_shouldNotBeEmpty,@Test public void  (){ Optional<Argument> arg=unit.build(new GenericType<Lazy<?>>(){ } .getType() Lazy.of(() -> 1) null); assertThat(arg).isNotEmpty(); } 
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\test\java\org\jdbi\v3\vavr\TestVavrValueArgumentFactory.java,testGetLazyArgument_shouldNotBeEmpty,@Test public void  (){ Optional<Argument> arg=unit.build(new GenericType<Lazy<Integer>>(){ } .getType() Lazy.of(() -> 1) null); assertThat(arg).isNotEmpty(); } 
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\test\java\org\jdbi\v3\vavr\TestVavrValueArgumentFactory.java,testGetLeftEitherArgument_shouldNotBeEmpty,"@Test public void  (){ Optional<Argument> arg=unit.build(new GenericType<Either<String Integer>>(){ } .getType() Either.left(""error"") null); assertThat(arg).isNotEmpty(); } "
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\test\java\org\jdbi\v3\vavr\TestVavrValueArgumentFactory.java,testGetNonValueArgument_shouldNotBeEmpty,@Test public void  (){ Optional<Argument> arg=unit.build(new GenericType<Option<Integer>>(){ } .getType() Option.of(1) null); assertThat(arg).isNotEmpty(); } 
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\test\java\org\jdbi\v3\vavr\TestVavrValueArgumentFactory.java,testGetRightEitherArgumentInferred_shouldNotBeEmpty,@Test public void  (){ Optional<Argument> arg=unit.build(new GenericType<Either<? ?>>(){ } .getType() Either.right(1) null); assertThat(arg).isNotEmpty(); } 
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\test\java\org\jdbi\v3\vavr\TestVavrValueArgumentFactory.java,testGetRightEitherArgument_shouldNotBeEmpty,@Test public void  (){ Optional<Argument> arg=unit.build(new GenericType<Either<String Integer>>(){ } .getType() Either.right(1) null); assertThat(arg).isNotEmpty(); } 
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\test\java\org\jdbi\v3\vavr\TestVavrValueArgumentFactory.java,testGetSuccessTryArgument_shouldNotBeEmpty,@Test public void  (){ Optional<Argument> arg=unit.build(new GenericType<Try<Integer>>(){ } .getType() Try.failure(new TestSpecificException()) null); assertThat(arg).isNotEmpty(); } 
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\test\java\org\jdbi\v3\vavr\TestVavrValueArgumentFactory.java,testGetValidValidationArgument_shouldNotBeEmpty,@Test public void  (){ Optional<Argument> arg=unit.build(new GenericType<Validation<String Integer>>(){ } .getType() Validation.valid(1) null); assertThat(arg).isNotEmpty(); } 
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\test\java\org\jdbi\v3\vavr\TestVavrValueArgumentFactoryWithDB.java,createTestData,"@Before public void  (){ Handle handle=dbRule.openHandle(); handle.createUpdate(""insert into something (id  name) values (1  'eric')"").execute(); handle.createUpdate(""insert into something (id  name) values (2  'brian')"").execute(); } "
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\test\java\org\jdbi\v3\vavr\TestVavrValueArgumentFactoryWithDB.java,testGetEitherLeft_shouldReturnAllRows,"@Test public void  (){ List<Something> result=dbRule.getSharedHandle().createQuery(SELECT_BY_NAME).bind(""name"" Either.left(""eric"")).mapToBean(Something.class).list(); assertThat(result).hasSize(2); } "
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\test\java\org\jdbi\v3\vavr\TestVavrValueArgumentFactoryWithDB.java,testGetEitherRight_shouldReturnCorrectRow,"@Test public void  (){ Something result=dbRule.getSharedHandle().createQuery(SELECT_BY_NAME).bind(""name"" Either.right(""brian"")).mapToBean(Something.class).findOnly(); assertThat(result).isEqualTo(BRIAN_SOMETHING); } "
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\test\java\org\jdbi\v3\vavr\TestVavrValueArgumentFactoryWithDB.java,testGetLazy_shouldReturnCorrectRow,"@Test public void  (){ Something result=dbRule.getSharedHandle().createQuery(SELECT_BY_NAME).bind(""name"" Lazy.of(() -> ""brian"")).mapToBean(Something.class).findOnly(); assertThat(result).isEqualTo(BRIAN_SOMETHING); } "
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\test\java\org\jdbi\v3\vavr\TestVavrValueArgumentFactoryWithDB.java,testGetOptionEmpty_shouldReturnAllRows,"@Test public void  (){ List<Something> result=dbRule.getSharedHandle().createQuery(SELECT_BY_NAME).bind(""name"" Option.none()).mapToBean(Something.class).list(); assertThat(result).hasSize(2); } "
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\test\java\org\jdbi\v3\vavr\TestVavrValueArgumentFactoryWithDB.java,testGetOption_shouldReturnCorrectRow,"@Test public void  (){ Something result=dbRule.getSharedHandle().createQuery(SELECT_BY_NAME).bind(""name"" Option.of(""eric"")).mapToBean(Something.class).findOnly(); assertThat(result).isEqualTo(ERIC_SOMETHING); } "
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\test\java\org\jdbi\v3\vavr\TestVavrValueArgumentFactoryWithDB.java,testGetTryFailure_shouldReturnAllRows,"@Test public void  (){ List<Something> result=dbRule.getSharedHandle().createQuery(SELECT_BY_NAME).bind(""name"" Try.failure(new Throwable())).mapToBean(Something.class).list(); assertThat(result).hasSize(2); } "
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\test\java\org\jdbi\v3\vavr\TestVavrValueArgumentFactoryWithDB.java,testGetTrySuccess_shouldReturnCorrectRow,"@Test public void  (){ Something result=dbRule.getSharedHandle().createQuery(SELECT_BY_NAME).bind(""name"" Try.success(""brian"")).mapToBean(Something.class).findOnly(); assertThat(result).isEqualTo(BRIAN_SOMETHING); } "
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\test\java\org\jdbi\v3\vavr\TestVavrValueArgumentFactoryWithDB.java,testGetValidationInvalid_shouldReturnAllRows,"@Test public void  (){ List<Something> result=dbRule.getSharedHandle().createQuery(SELECT_BY_NAME).bind(""name"" Validation.invalid(""eric"")).mapToBean(Something.class).list(); assertThat(result).hasSize(2); } "
C:\Users\User\Desktop\Thesis\jdbi\vavr\src\test\java\org\jdbi\v3\vavr\TestVavrValueArgumentFactoryWithDB.java,testGetValidationValid_shouldReturnCorrectRow,"@Test public void  (){ Something result=dbRule.getSharedHandle().createQuery(SELECT_BY_NAME).bind(""name"" Validation.valid(""brian"")).mapToBean(Something.class).findOnly(); assertThat(result).isEqualTo(BRIAN_SOMETHING); } "
